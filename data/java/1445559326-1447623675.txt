There is a fair amount of community around it (check out controlsfx and other libraries made for it). Now, if you want to build a desktop application, and you want to build it in Java, JavaFX is indeed the way to go. I used a lot and quite like Swing, but JavaFx is the future of Desktop apps in Java (until a new thing comes along, of course), and to be honest is quite nice. Pair it with Guice and Guava (for EventBus) and you have a quite nice base to build your application on. 
Thanks for the informative response. Is there any IDE tooling out there for JavaFX and this FXML markup? There are a lot of nice WYSIWYG visual builders for Swing apps (e.g. Netbeans, Eclipse)... and Microsoft has nice support for their similar XAML markup in Visual Studio. Any way to create JavaFX UI's visually?
IntelliJ uses swing. 
'Public fun' for everyone!
Recently I read [Object Thinking](http://www.amazon.com/Object-Thinking-David-West/dp/8178530872). It is not an easy read but will surely revolutionize the way you think of OOP.
Doing this right now with Apache DS. Absolute nightmare.
We, a huge Silicon Valley company, use Java for our project which is relatively new. Java has a lot of clout, and people trust it. Plus a lot of people who are senior developers learnt Java at University and know nothing else, so the old "when the only tool you have is a hammer everything looks like a nail" adage applies. Enterprise and business love Java, it and .Net are probably the basis for most banks "modern" code. So you should be okay with it. Once you have mastered one OO language you should be fine learning any other fairly quickly too so I wouldn't worry about learning Java, it's not going to stop you from learning Ruby or Python or whatever.
I'm somewhat was the same position as you. Got this hobby [open source project](http://thirdy.github.io/blackmarket/) which I started with JavaFX/FXML until I found out that the Scene Builder (wysiwg tool) is very slow at least to my machine with SSD. So I continued with Swing until I got bogged down trying to implement more than usual components like auto complete drop downs, and the code was just too much. Now I'm happy with JavaFX w/o fxml, but mostly uses CSS. I still can't get the autocomplete right though. 
Well, I always believed it is best to know more then one language / tech stack. I don't understand why you need to choose. So yes learn JS. With frameworks like Angular or React it is easy to become full-stack developer of SPAs. Backend development in JS (NodeJS) is also becoming more and more popular. Especially with startups where lead time is essential and Java even with SpringBoot requires you to put a lot of boilerplate in beginning. I find python very useful too. This is my primary language for scripting, data manipulation, automation.
Darcula is the answer.
[http://i.imgur.com/s7W8cLx.png](http://i.imgur.com/s7W8cLx.png) The green color for the 'mark occurances'. On other source codes, this is really worse, lots of oranges and rainbows. Tried switching to Syntax level on the Illuminati inspector but it seems to be bugged, doesn't do anything.
Have you given any thought to creating a chrome application?
Couple new projects I started in the last couple years used Java in the backend and javascript/html in the frontend. All these were funded by mid-size companies for cut edge projects.
1. How does Eclipse do it that you're trying to emulate? 2. You can turn off certain inspections so those extra lines don't show up. In the bottom right click the guy with a top hat, and turn it down to Syntax only. Works for me- if you have a problem with that what's it doing for you instead? IntelliJ IDEA is pretty solid, it would be very surprising for a built in feature to just not work instead of it being user error.
What frameworks are popular for Java backend now-a-days? I suppose with Javascript frontend the backend is RESTful? I am currently sticking with Java EE 7/jax-rs and I am interested if it is a good choice for a backend.
First, Java isn't dead or dying, far from it. With java8 it's more popular than ever. Second, choice of technology depends on what you want to develop. For backends/enterprise, I'd still stick with Java, it's MUCH better than anything else out there. Maybe mix some Scala into the pot to make things interesting, but Scala uses JVM and Java ecosystem anyway. Java is decent even for desktop apps (FX), games (there are frameworks), Web-UI (Vaadin/GWT). JS/Angular- it's a front-end language/framework. If you want to develop Web-UIs, or maybe HTML5 mobile apps- go for it. Python- decent way to do scripting/prototyping. Also used in some scientific computations. If you need to write rapidly changing code quickly without much worry about maintenance, go for it. One general note- I'd rather stick to what's tried and true, and has lots of support rather than chase the latest fad...
We still do new projects in Java. Other languages accompany Java actually, like (J)Ruby.
What is this supposed to be?
&gt; instead of a container specific authentication module (JSR-196), JSR 196 (JASPIC) Authentication modules are not container specific. They're something your web app can use just as they can use a "JSR 53" (Servlet) Filter .
Have you tried finding where you can change these colors somewhere in the settings?
First, *most* application development is maintenance or involves a significant amount of it. This is not unique to Java. Second, there are plenty of "new and nice" projects developed in Java. If there weren't, things like DropWizard, Spring Boot or JavaEE 8 wouldn't exist. You'll see many here at /r/java wish they could use the new features, like lambdas and streams introduced in Java 8, but can't because of legacy code. If Java only had legacy code, and there were not a significant number of new projects, there would be no market for things like DropWizard, Spring Boot or JavaEE 8. That there is a market for these shows that new development is alive and well in Java. Third, you should be on the loop on a number of things, not just Java. Not because Java is "legacy", but because it pays to be a polyglot. Every language platform has its advantages (and disadvantages), and the wise software developer can combine platforms to leverage the advantages of each. At the end of the day, all knowledge stagnates.
Not related to the IntelliJ issue, but with Eclipse you might want to enable General-&gt;Editors-&gt;Text Editors-&gt;Accessibility-&gt;Use saturated colors in overview ruler to make the markers more apparent
You can use Grails 3 for the backend, just use the web-micro or web-api profile when you do create-app. This leaves out the view stuff which you don't need if you are using something like Angular or React for the frontend. Then just use Grails built-in REST support: http://grails.github.io/grails-doc/latest/guide/single.html#REST
I think learning JS is a great idea, but I wouldn't drop Java for Node on the backend. From a simple performance standpoint it makes no sense to do so if you already know how to work in Java.
I wouldn't state it like you did, but yes, Java is a good language to have on your resume if you want to have wide appeal. Lots of technologies are going web centric, and web tech is bleeding into the desktop and mobile app space as well, so time spent learning JavaScript would probably be time well spent.
Ok thanks. Not my screenshot though, just googled it. All the years I've been using Eclipse, I've never had a complaint on it's mark occurrences.
There might be a more permanent way to do this, but here's how I got only occurrence highlights to show up. Right click at the top of the highlight side bar and select Customize Highlighting Level. http://imgur.com/y8o2tXa Turn the highlighting level to None http://imgur.com/ls6BAt0 Now you should only see what you have selected and it's occurrences. For me green is an access and pink was instantiation. http://imgur.com/k0iReis
Plain and simple; yes ;)
Yep, same results for me. However, IntelliJ would then stop showing me compile errors. I guess the only way is to dig into the settings, but I won't do that. Not until I have the extra free time.
Does /r/java know that Java can be used for development? Who can say?
*slow clap*
The JavaFX stack does include a generalized two-binding library which is independent of the JavaFX UI framework. Using JavaFX, you can write functional-reactive apps in Java 8 without need of third party libraries.
Java, better known as JavaScript, is a scripting language that allows interactivity on websites. For instance, Java allows users to see different images based on where they scroll or click their mouse on the site. It is, however, very slow and not secure at all. If you run Java on a server, you're probably doing it wrong. PHP is much better because it was specifically designed to be used on web servers.
For those sweet sweet security updates?
We've moved to Tomcat 8 from 7 pretty easily for a large number of webapps - some pure Java EE, some Spring, some JAX-RS (yes, we've got some sprawl, but we're working on that ;) ).
The google android docs are fucking awful. Full of deprecated apis and blatantly bad ideas (single activity for navigation drawer, ugh). 1. Get yourself Android Studio. 1. Read Head First Android Development 1. Read Android Programming: The Big Nerd Ranch Guide (2015) They are available on safaribooksonline and there's a 10 day free trial
Java is not "better" than anything else out there. It's closest cousin is C#, and that is a far superior language but has limited portability. It depends on what you need.
Thanks for the suggestions man :)
Java + Microsoft = great things!
getAllAuthorsAlphabetically(..) wtf!! Is author retarded?! Learn data structures for God's sake!
You do understand that Java and JavaScript are two entirely different, unrelated things right?
The 'open with' will not insert the -jar. I not sure how to get it to do so. Maybe this will help http://superuser.com/questions/136133/how-do-i-set-advanced-file-associations-in-windows-7
You could adjust the setting for the "variable x is never used" inspection. There are a couple ways to get there. The easiest might be: 1. put your cursor on an unused variable 2. press option+enter (alt+enter in windows) 3. use the right arrow to open the menu in "remove variable x" intention 4. either use "edit inspection profile settings" to change the "Severity" of the warning, or use one of the "Suppress ..." options
Thus the two separate paragraphs. One for each subject. 
Thanks for your reply. It's weird how I have to use another program to use jar files even though this particular jar file was working just fine before the format... I can't help but think there is another problem I need to fix in order to double click execute.
Have you heard the good word? My friend, you need [Kotlin](https://kotlinlang.org/) in your life!
Sorry, what I meant to say was I get *paid* to develop Android apps. One day clients will pay me for kotlin work, but today is not that day. The 1.0 beta is a good sign though
Just tried, found it useful. Thanks for the work!
How much does M$ pay you to post this shit, dstaheli? 
Ah, I gotcha. Google Guava is about as good as it gets, then?
The long intro and backstory was a bit 'challenging' to my more ADD tendencies. When I got to the information on WHAT it is &amp; the animated GIFs, I started to become a hell of a lot more interested. If you can somehow reorganize this article, you might be less likely to lose your audience. Anyway, I was sold when I saw the grouping. I'll probably play around with this a bit tomorrow. :)
Look very useful, but in my opinion the $120 price tag is a bit excessive for the functionality it provides.
It's coming (eventually), but value types would be my first choice.
Armory plugin is free for *Intellij IDEA Community edition*. Also it's free for open-source projects. 
fixed. Thanks :)
Several things. ---- First of all, and with a screaming number one priority (and much opposition, but I want this thing): person?.getAddress()?.getPostcode(); (From [here](https://stackoverflow.com/a/452820/3500521).) The ability to use "null-chains". My personal version of this even rather was to put the control character at the beginning of the expression so that the whole following chain would be evaluated like this. In any case, what this does: If any of the elements of the chain is null, the evaluation aborts and null is returned instead of an NPE being thrown. Example use case: I'm writing a layout editor at work that has multiple undo stages per document, multiple pages per undo stage, and other such stuff. Often I want to get the current page. So, I need the current document, the current undo stage of that document, and then the current page. Of course I have convenience methods for this now, but this is just an example. People are opposed to this concept because it could encourage the wrong kind of coding, and my code might well be somewhat wrong, but I don't have the time to create beautiful code, I need to push out features quickly and move on to the next project. ---- Since I personally have somewhat befriended `null` and often use it as meaningful method arguments and return values, many of my null-checks are not to guard but to evaluate. Therefore, sometimes I would like a *constructor* to return null instead of setting a class variable like "boolean initialized" to express if everything went smoothly. That's a language feature I'd like - which of course would have super explosive impact, therefore maybe it should exist via a switch, just like `assert` is disabled by default. ---- Similarly, as an off-by-default switch, I would like to use `var` instead of `final` (in the opposite way, of course), because I have come to love the practice of making everything final except the things that I explicitly want to stay open to change. The use of final, as I *keep preaching* to the beginners here, can save you a lot of trouble and wondering why your code doesn't work. Therefore, making everything final by default should be a thing that exists at least as an option.
Value types, value types, value types. C# had them from the beginning. A JRE installer without sponsor offers. Better OS integration, e.g. being able to create windows services or apps with embedded JREs and wrapper exes more easily.
See also https://www.reddit.com/r/javahelp/comments/3q03fn/eclipse_source_not_found_edit_source_lookup_path/ :P
What do you mean by files? .java source files or already compiled class files? Why did you keep them the same name?
I really want collection literals, even with guava it's to much work to build a map. final Map&lt;&gt; likeThis = {key1: value1, key2, "much better"}; Also type inference, it should be able to figure out the type of the map from the arguments there. Named and default arguments too, removes most of the use cases for overloading and the builder pattern.
Like inside my project, I created 2 new .java files based off of 2 existing files. **Originals** ---------------- Server.java Terminal.java **New** ---------------- Server_GUI.java Terminal_GUI.java 
C# 6
`null` only being allowed where the programmer explicitly says it is allowed, and nowhere else. Close second: multiple class inheritance. Everything else—syntactic sugar, value types, removing erasure, and so on—can be added later. But these two are fundamental design mistakes that are very difficult to remedy without breaking legacy code.
Scala has that, for what it's worth.
I'm still a noob with Java. I have been learning C lately also. If I could make one change with java, I would get rid of data type casting. In C you can cast one data type to another just be re-assigning it to another variable of a different type.
Get rid of the primitive types. [Look at this mess](https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html). edit: I'm surprised at the downvotes for this opinion, I honestly thought it would be general consensus at this point that non-object primitives are bad news. I'm not talking about taking away the advantage of primitives, I'm talking about using primitives wherever you can use objects now. You can solve this with autoboxing or whatever, but the mess that primitives cause, like in the link above, needs to stop. Primitives need to not be exempt from the syntax we use on objects.
&gt; multiple class inheritance I've honestly never thought of a case in my code where this would be useful. Interfaces are enough *all of the time* in my experience.
Immutable objects *at all* would be nice. The only way right now is to make a final top-level class (a class that doesn't extend anything). If your class extends or can be extended, an instance of your class can be mutable.
I doubt this is ever going to be changed. They are there for performance reasons. Having developed many real-time applications with lots of data crunching, I can say they are an essential part of the platform, and the reason many (but of course not all) companies were able to move away from C++. We could have better integration between primitives and their wrappers. I don't see why something like the following cannot be supported by the compiler: int[] arrayOfInts = new Integer[10]; Or List&lt;int&gt; listOfPrimitiveInts = new ArrayList&lt;&gt;(); 
Funny thing is, it *already has* type inference, it's just not exposed in the way you'd like. It would be very Little work for them to add this feature.
I'd cut down the JDK significantly. There's tons of classes that should not be used anymore (as there are better alternatives), but people are confused by them being in place and doing seemingly good work.
I hope so! How might value types help with primitives? I have some suspicions but am not sure.
Every time you see an `interface Foo` alongside an `abstract class AbstractFoo implements Foo`, you are looking at a case where multiple class inheritance would have been useful. The standard library alone contains numerous examples of this ugly pattern. Java 8 allows interfaces to have method implementations, which eases the pain considerably, but doesn't really remove it. Plus the class–interface duality adds complexity to the language that really doesn't need to be there.
&gt;Multiple class inheritance isn't a big deal at all Every time you see an `interface Foo` alongside an `abstract class AbstractFoo implements Foo`, you are looking at a case where multiple class inheritance would have been useful. The standard library alone contains numerous examples of this ugly pattern. Java 8 allows interfaces to have method implementations, which eases the pain considerably, but doesn't really remove it. Plus the class–interface duality adds complexity to the language that really doesn't need to be there. &gt;the null thing can be solved to a reasonable degree. Not without removing them outright, no, it can't. [The existence of null references is called the “billion-dollar mistake”](https://en.wikipedia.org/wiki/Tony_Hoare#Apologies_and_retractions) for a reason. &gt;Just limit it to warnings if a nullable annotation isn't present. Uh, no. The compiler should be verifying that the code is correct, to the best of its ability, and raising an error if any is not. Warnings indicate a weakness in the language; a case where the language cannot fully express the programmer's intention. In such cases, the compiler can be reasonably confident, but not certain, that the programmer has made a mistake. Accordingly, many code quality standards mandate treating warnings as errors. &gt;that'd probably be too much clutter for too little reward... Adding a single question mark to the end of a nullable type, as in Ceylon and Kotlin, is not “too much clutter”. Littering your code with null reference checks, on the other hand, is *way* too much clutter.
Type inference.
Hopefully coming in Java 9! http://openjdk.java.net/jeps/272
I would want to merge all the iterable classes and their transforms. A language does not need arrays, lists, enumerables, iterables, streams etc. They do almost the same thing but with very different syntaxes, and each one requiring googling to transform between. That, and being able to just output date from the Date class. Geez.
Honestly? Nothing. I do wish people would use checked exceptions more, though. The trend towards making all exceptions runtime annoys me.
It probably is, but everybody's mental path though this jungle is a different one, and mine had this aspect.
&gt; Every time you see an interface Foo alongside an abstract class AbstractFoo implements Foo Pretty rare I've found myself needing to do that. Which is why I say it's not a huge deal. &gt; The standard library alone contains numerous examples of this ugly pattern. 90% of which could now be avoided with: &gt; Java 8 allows interfaces to have method implementations, which eases the pain considerably, Yup. &gt; Plus the class–interface duality adds complexity to the language that really doesn't need to be there. Sure, adds complexity in some ways, reduces it in others. The Java inheritance model is far from perfect, but interfaces aren't particularly complex to reason about, and multiple inheritance is hardly the ideal model to aim for... Multiple inheritance on the other hand really would be adding a lot of complexity to the language that really doesn't need to be there. &gt; Not without removing them outright, no, it can't. The existence of null references is called the “billion-dollar mistake” for a reason. Oh come off it. Something like a required nullable annotation would address this pretty well. Do you have any significant reasons to be dissatisfied with this other than a tired old appeal to authority? I get that null can be problematic when implemented naively with no protection, but with the right language features built around it, it can become pretty much functionally equivalent - in terms of safety - to pretty much any other optionality model you can describe. &gt; Uh, no. The compiler should be verifying that the code is correct, to the best of its ability, and raising an error if any is not. Warnings indicate a weakness in the language; a case where the language cannot fully express the programmer's intention. Well sure, I never said it would be perfect, just "solved to a *reasonable degree*". And again, the only real issue is backwards compatibility, and this is not insurmountable. A number of possible update paths exist. &gt; In such cases, the compiler can be reasonably confident, but not certain, that the programmer has made a mistake. Accordingly, many code quality standards mandate treating warnings as errors. Sure, exactly, most people should simply treat them as errors, probably with an opt-in strict mode to treat them as *actual* errors. It'd just have to be warnings by default for backwards compatibility reasons. Not a deal breaker. Eventually they could be promoted to actual errors by default, with a compiler flag to treat them only as warnings to still preserve opt-in backwards compatibility. &gt; Adding a single question mark to the end of a nullable type, as in Ceylon and Kotlin, is not “too much clutter”. Littering your code with null reference checks, on the other hand, is way too much clutter. That would be equivalent to the nullable annotation I mentioned, not the nonnull one. I said the nonnull annotation would probably be too much clutter. *I never said the nullable part would be too much clutter.*
Ahh, it's used pretty heavily in lambdas isn't it?
A NullPointerException should be thrown, because the programmer is being an idiot.
I would say it would be thrown a compilation exception (no literal assign would be allowed for this feature)
Yeah except Java is doing them correctly by making them immutable. 
I find ClassTag to be pretty gross. How about just making the generic parameter accessible via normal reflection classes? You can already basically do what ClassTag does in Java, see the [TypeReference](http://fasterxml.github.io/jackson-core/javadoc/2.0.0/com/fasterxml/jackson/core/type/TypeReference.html) class of Jackson. Which works because the generic parameters to a superclass are not erased! Scala's implicit argumentss make it a little easier to use, but implicits have their own issues IMO.
Java throws a NullPointerException if you attempt to assign null to a primitive.
Yaml Ain't Markup Language. Sorry I couldn't resist.
The ability to slice and dice like Python. Instead of this String s = "Hello there!"; System.out.println(s.substring(0, s.length() - 7)); //Hello This: System.out.println(s.substring(0, -7)); //Hello
Definitely `var/val` for defining variables vs. defining finals. `final Object o = new Object();` vs. `val o = new Object();` and `Object o = new Object();` vs. `var o = new Object();` **Edit**: I should've made clear that I'd only be a fan of this if Java had type inference. You can see `var` in action in C# or `var` and `val` in Kotlin, which are both statically typed. I'm not a fan of weak typing like JavaScript does it.
When did that happen!?
Project Jigsaw in Java 9 to the rescue.
Love them or hate them, they're doing a better job releasing major Java updates than Sun was at the end.
Instead of this: public class MyClass implements java.io.Serializable {} how about this? public serializable MyClass {}
It should be shorthand for: int age; Person person = getPerson(); if (person != null) { age = person.getAge(); } So... unassigned. -1
Could you elaborate?
I think you've somehow removed the configuration that the installed puts in place. Try uninstalling any and all JDKs and JREs and reinstalling. Should fix it.
Java is statically typed, not duck typed. Using var as a type like JavaScript would make it suck as bad as that language. 
Yeah we see this with Groovy's "def" too. I'm not a fan and the readability of the code quickly goes out the window.
I'm talking about type inference here. `var` and `val` don't break static typing and it works well for me in Kotlin. It's nothing like the equivalent keyword in JavaScript.
It seems to be an alternative to the jvm that can run java files compiled for it. So same language but dirrent default classpath and runtime. Interesting!
This is one of the goals of Project Jigsaw, from my cursory understanding. Using modules to encapsulate package sets.
The `String literal` feature is missing badly. You can create a multiple line string within @"my text" in C# or within [[my text]] in lua, etc.
I suppose with modules in Java 9 you'll be able to make a smaller package. So you can bundle an app with just part of the Java 9 VM.
The JDK is a lot bigger than the official JRE, but the JRE it installs doesn't come with crapware. It also doesn't install the browser plugin (The sole reason one would always install the newest update.), and it doesn't install the update checker (aka nagger). Might be a viable alternative to recommend to one's users.
Huh? I thought that the modularity was about source that we write, not about the libraries we write it with.
People should use an IDE, problem solved. The IDE warns if Strings are compared with == But for some reason, people recommend that beginners don't use IDEs. xD
Kotlin has these things (first class support for nullability with chaining operators, etc). It also lets you use 'val' for final variables/properties and 'var' for mutable variables/properties.
Wait, so you have `val int a = 10;` (final) and `var int a = 10;` (not final)? These keywords seem to be a horrible choice. They look *so* similar.
Not quite, you'd have `val a = 10` or `var a = 10` and let it infer the type. The IDE underlines mutable variables so you can tell them apart more easily with a quick glance. Check it out here: https://kotlinlang.org/
Shall I just search for JDKs and JREs on the uninstall part of control panel or is there a specific way?
In kotlin you can assign a value if null is encountered. val num = person?.age ?: 0 The :? Means if person is null then assign 0.
Kotlin made handling checked exceptions optional.
I did understand what you were saying but you could have been more clear by including a contrasting word like "however" in front of your second paragraph. Doing so immediately marks a change of subject.
The NetBeans day on Sunday has actually had to move to bigger rooms because the sessions were totally booked out. https://netbeans.org/community/articles/javaone/2015/netbeans-day-2015.html
I would like to do this eventually. The way the AI works is based on random numbers, so technically there is no difficulty, just luck. I would like to change this in the future. 
Can they use the word *java* in their package name? Is Oracle going to sue them? [An example](https://github.com/ReadyTalk/avian/blob/master/test/List.java)
This is seriously the best news I've had all week. I've been struggling learning java, and have had good experiences with Code Academy.
"Project Jigsaw". It's the biggest feature of Java 9. Was originally planned for Java 7.
Yes exactly like that, yes! I don't know how it would look like in Java though as you have to specify what a method is returning when there's something to return. This doesn't look very appealing: public String, String, String[] sampleMethod() { String firstName = "John"; String lastName = "Doe"; String[] location = {"USA", "Los Angeles"}; return firstName, lastName, location; } String firstName, lastName, String[] location = sampleMethod();
I'm not your buddy guy.
They are doing a better job than Sun. However, I believe IBM or Red Hat would have been much better stewards.
Wow, looks cool. One of my biggest frustrations is dealing with projects "organized" by someone else - they usually anti-organize it by every related element into a different project and package. Putting all the controllers in their own project doesn't help, it's like keeping all your socks at home and shirts at your parents place - sounds good until you think about it or use it and realize it's made things as difficult as possible. This won't totally solve it, but it would very helpful in just having the elements I'm working on displayed on the left. Edit: Wait, it's $100? Well so much for that unfortunately.
I'm assuming windows, if so, yes.
I'm not your guy friend.
return this instanceof Friend ? "Darn" : "I'm not your friend man.";
Not only do primitives guarantee that you'll get good performance, without relying on compiler optimization. The biggest advantage to using primitives is that you can be 100% certain that they're not null. It sounds like you just want to be able to use primitives for generics.
i get bummed out when posts like yours get 13 downvotes without anyone to explain why. (perhaps it was just the use of the word retarded.. which i guess is understandable, but it still leaves mixed message on whether you were wrong, or they just didnt' like your wording) so thanks for fleshing out your answer!
[Here](http://shop.oreilly.com/product/9780596009205.do). Struggle no more.
No worries. Scala for instance has done the same thing for some more years, it's not that unknown.
You're in the wrong subreddit. Here are some tutorials: + [Java for Complete Beginners](https://www.udemy.com/java-tutorial) by John Purcell, free on Udemy.com and on John's site [CaveOfProgramming](http://caveofprogramming.com) + MOOC [Object Oriented Programming with Java](http://mooc.fi/english.html) from the University of Helsinki (in English, of course) - which is hands down one of the best courses for Java in existence. ---- The following are additional resources that you should make frequent use of, especially the Java Documentation: + [Oracle Java Tutorials](http://docs.oracle.com/javase/tutorial/) + [Oracle Java SE Documentation](http://www.oracle.com/technetwork/java/javase/documentation/index.html) Use the Java Documentation heavily and always when you're in doubt about a class or method. It is really helpful. Here is a simple trick to quickly get what you are looking for: google *"oracle java &amp;lt;classname or method name&amp;gt;"* to get the link to the Oracle documentation in the top results. ---- Last, the style guides: + from [Oracle](http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html) + from [Google](https://google-styleguide.googlecode.com/svn/trunk/javaguide.html) Read them and follow them when you do program. They are made to enhance the readability of the code and also to make troubleshooting easier. Since these are standards, it's good to learn them as early as possible in order not to form any bad habits. 
the isBoolean convention. Everything get is just easier.
public (String, String, String[]) sampleMethod() - is not too bad. I think they might add it eventually.
I've read this book recently. It is a very good book, but is in need of an update. If say, JayremyHyoos is having trouble with lambda expressions or the diamond operator or whatever, this book won't have it. Still, for $15 or a free pdf, it's worth going through. 
But then you'd have a limited form of operator overloading, and people tend to get strongly divided on that issue. I definitely think it's the right answer, for what it's worth. I use `==` all the time when writing Python and Scala, and almost never use `is` or `eq`. Make the obvious choice the default.
I am also a professional developer, my work laptop has a real licensed version by the company. 
Please ELI20? 
Make sure you see at least one of Venkat Subramaniam's talks. He is an excellent presenter.
What didn't you like about it?
But won't this break backward compatibility?
If it isn't, I'd make the byte code a free and open standard. Then I'd add java byte code execution support to web browsers. Want to use javascript in your web page? Compile it to byte code. Want scala in your web page? Compile it to byte code. So much better than compiling to javascript.
Hey, thanks for the recommendation! I almost bought that, but I opted going with Java in a Nutshell, and it's been quite useful as a reference source.
Thank you for the encouragement, friend!
I would say that they *enable* multiple inheritance rather than that they *are* multiple inheritance. If class C implements interface I, and doesn't extend any class or implement any other interface, how is this multiple inheritance? (Ignoring Object. If you want to be pedantic about every non-Object class extending Object, then fine, all default methods cause multiple inheritance.) Many times, I've extended AbstractCollection not because I want to extend multiple classes, but because I don't want to bother implementing toArray, addAll, retainAll, and so on. I think that's the real reason for default methods.
How is that more succinct then just using a ternary?
Because plenty of languages support it, it is very handy.
Yes, the version on parleys mentions only the coordination and omits mention of the unparallelizable sequential portion. I will be sure to correct that. For the intended introductory level audience my hope is that they understand: - They probably aren't going to get *n*-times performance going from 1 to *n* processors for most problems. - How much less than *n*-times depends on the nature of the problem, the algorithms used and the quality of the implementation.
It could be a much longer chain in some cases
Correct me if I'm wrong, but as long as they follow proper open jdk standard API for compatibility reason they won't face any problem.
If APIs are indeed copyrightable, Oracle could potentially sue them for simply having a List interface that has the same methods as the Java List interface, and *win* (which is absolutely ridiculous).
&gt; the April 2015 CPU release was the last Oracle JDK 7 *publicly* available update (emphasis mine) Java 7 will remain available to paying customers for a few more years, with regular security fixes.
But being outdated is not about when it was its first version released, but features that make programming easier and keep up with the times. Python may be older, but new version added a lot of magic. Also, you are not making a fair comparison because most of those languages are hardly seen nowdays (hardly, not impossible). For me, newer in the case of scala, kotlin or ceylon (for example), actually means better, you should check out those.
Head first design patterns would make a good follow on to this too.
Yes, even if APIs *were* copyrightable, surely copying an API to ensure interoperability with current and future software would fall under fair use. But the fair use exception is still being decided in Oracle v. Google.
what's being decided is if google's usage falls under fair-use (interoperability or not) at all. i don't think they'll win because it's fairly obvious google took steps to make sure the most important products of their ecosystem (android apps) were not able to run on regular jvms, while making sure their ecosystem benefited from the products of the java ecosystem (the multitude of libraries doing damn near anything). avian would not have such an issue because their project is trying to make their VM as compatible with the jvm as possible while maintaining performance.
Not a game, but a application with a big company behind it ;) https://github.com/Netflix
&gt; From reading that pussy ??
A big application writtennin Java would be something you use to write Java: NetBeans or Eclipse. As for games: if we consider Android as Java, thennpretty mich anythong bigger writtennfor Android would count. For example Angry Birds.
In C++, when you create a Point2D class with x and y attributes and then put a bunch of them in some data structure, they can be made consecutive in memory. That is, the memory backing the data structure looks like x1, y1, x2, y2, etc. In Java, data structures only ever have references to objects, so the same data structure would be backed by memory like p1, p2, etc., which are only pointers to the actual Point2D instances, which could be scattered to the wind. The big point here is that the C++ scenario allows for a number of CPU optimizations, while Java can't currently take advantage of these (without using primitive arrays). This is a large part of the performance difference between C++ and Java. The value types feature would allow Java objects with certain limitations to be handled like in the current C++ case.
Thanks, nice introduction to a greatly improved API. I am personally bothered by the idea of using LocalTime to talk about the moment of someone's birth, but it made me realize I do not know how birthdays and timezones are supposed to work? If you say someone was born at 1:15 am I feel like you have to talk about the time zone for it to have any meaning at all, but then wouldn't you have to adjust the date ahead or behind to celebrate his birthday elsewhere in the world? Are there cultural differences? Do some cultures adjust birthdays as people move around the world? If you call someone on the other side of the world where the date is different to wish them a happy birthday which day do you call them on? I am actually curious now.
`LocalDateTime.of(LocalDate.of(2015, Month.JULY, 27), LocalTime.of(19, 0));` can be refactored into `LocalDate.of(2015, Month.JULY, 27).atTime(19, 0);` :)
Thanks 
About damn time they reworked the old APIs. That example with new Date(12, 12, 12) represents so many aspects of what was wrong. It's funny to see it again, but I remember how upset I got when I actually had to deal with it. Time APIs should be as simple as possible, but not simpler. But Java's APIs were over engineered but broken.
[removed]
Hahahahaha worst autocorrect ever :P Should have said "post"
isServerDone should probably be volatile 
I really appreciate all of this, friend. Thanks for the advice. I'll keep it in mind as I work!
I'm at Java One. Running the Code Rally booth on the expo floor if anyone wants to pop by :-)
I would love to see something sort of like the "case class" in scala. Basically a super lightweight way to define a class with getters/setters/toString/hashCode/equals. All nicely and simply predefined for you. http://docs.scala-lang.org/tutorials/tour/case-classes.html I think a lightweight way to create something equivalent to C "struct" would help a lot of systems. 
I agree optional is a turd. I think keeping java reasonably simple is a VERY good idea. If you want fancy go to scala. If you want better but not slow evolution try Kotlin.
Java is pretty solid without JNI. FFI would be even worse. And don't get me started on the headaches of deploying code that uses FFI. You must have exactly the following list of libraries installed. Oh they don't match what's on the box now. welcome to DLL hell. Please no. 
Ok. /u/ramsees79 and /u/tobomori. Thunderdome! "Two men enter one man leaves" to check or not to check those exceptions. 
Hi. Unfortunately, we can't share any details at the moment.
Zero class inheritance! - Interfaces and extend by composition only
But...is that "better"?
Absolutely
[removed]
IIRC the guy who wrote JodaTime was a part of the team who wrote the new Java 8 DateTime API. Edit* There is also a great [**blog post**](http://blog.joda.org/2009/11/why-jsr-310-isn-joda-time_4941.html) about why they did not just directly copy and paste JodaTime into Java 8.
Well [this](http://spark.apache.org) is awkward.
I actually stumbled upon their confluence page, looking for companies that use spark, and I was like "wow, those are some pretty big names", but then, oh wait... https://cwiki.apache.org/confluence/display/SPARK/Powered+By+Spark
We are going to use it in our next application. We need a simple webservice and Spark fits perfectly since it is easy to use and to setup 
I came across Spark when I was first looking into Java, but didn't really get into it properly. Micro frameworks are a bit at odds with Java really, they seem to better suited for "scripting" languages. Micro frameworks are all about getting a project built and released in the shortest time possible. Things like scalability and performance don't really matter. Most of the time Java projects are slower to develop initially, but are a super performant / scalable afterwards. Just my opinion, feel free to disagree. :)
Well, i didnt waste too much time choosing the right framework since this job is pretty trivial (just accept some post requests). My main points were easy to use and good documentation. Spark had both, also a standalone jar which is useful when you dont have maven support. It includes a jetty on which you can prototype your code instantly without setting up an environment. I was able to transform objects from json pretty fast without reading too much (almost no experience with webservices before) and it took me 1 hour or so to get it right
Sparkjava is a web framework that is different from Apache spark. Confusing in search results as well as conversation.
That's what a new paragraph does.
FWIW, here's the stack I use for a new resource planning/scheduling project. Client: JQuery and friends, React.js, Atmosphere, and Dropzone. Server: Pippo, Undertow, Freemarker, and H2
You might like these performance numbers, showing why you might want a Java-based framework that's a good entry point for small services. https://medium.com/@tschundeee/express-vs-flask-vs-go-acc0879c2122#.rqlmbhxb4
You may also find [Pippo](http://pippo.ro) useful. See [this comment] (https://news.ycombinator.com/item?id=10337980) for a comparison between two.
There was a brilliant (and very funny) surprise video in the Java Keynote with ScottMcNealy's top ten list of problems Java developers face in 2015. I especially liked "you believe in free software and you work for Oracle"
I use it in production on pretty much everything, have had zero problems with it and generally love it. 
I've been using it for some personal projects. It's great for when you need to serve a simple web page with a few buttons to "do stuff". Not that hard to setup some polling with js for a multi user GUI.
I have used it for my course project and I loved it. Really simlpe and easy-to-use, taking all the boilerplate of I/O away
I've used spark to build a reddit-like website. I didn't want to use *any* framework honestly, so I thought of it as a routing library in my hand rolled framework. It was really fun, but it's not professional-grade software imo. The documentation is light and you miss out on a lot of modern conveniences: security, caching, sessions, flash messages, json stuff, etc etc. I had to hand roll or import libraries for too many little things. In my next project I won't go this "micro", wasted too much of my time. Something with a big ecosystem would be nicer. 
It's not even that good! We have a method limit of 65k in our applications and guava is too large of a library to usually include.
Birth dates are usually fixed local points in time when someone was born and by local I mean the time it was at the place when someone was born. For instance, I'm born at 23:55. But you need the birth place to make sense of that time. For birth dates, I think you always stick with the local date/time coupled with a place/timezone to make sense of it. You can run into awkward situations otherwise. Imagine me hacking the Pentagon at 0:01 local time, 18:01 Eastern Time, I could be an adult in Europe, but still a minor in the USA. How will the law treat me? Will it be different under European or American/international law? That's also why you don't translate birth dates I think. 23:55 will always be 23:55, with or without timezone. If you want to call me at that exact time, you only have to know where I am right now!
The numbers are pretty impressive for these benchmarks. https://www.techempower.com/benchmarks/#section=data-r9&amp;hw=i7&amp;test=plaintext 
Case classes. After that, immutability by default, and nullability checking with non-nullability by default.
&gt; How will the law treat me? Inhumanely. But yeah I guess that makes sense, you want a local time PLUS a timezone to specify a birthday, and you do not want to translate that local time plus timezone to, say, a unix timestamp which would identify the same moment, but would lose the "where" of it. I wonder if different cultures or religions would answer the question differently. 
As it stands in the code, isServerDone is only accessed from the main thread..... so volatile not needed. however, I guess when the code to update isServerDone is added then this code will be updating it in a different thread.... As it stands at the mo, seems pretty pointless in even having this varible if nothing ever updates it. 
I would say not to use an array and use an Arraylist or other Collection. ArrayList for example supports https://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html#clear() and several ways of removing elements like https://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html#removeAll(java.util.Collection)
*sigh*.... Why is the Java community like this.... Its like &gt;I've been on the lookout for lightweight web frameworks lately. Why are you looking for a lightweight framework. If you don't need the enterprisey DI / ORM etc, the stuff that is provided using a more traditional framework like Spring, or JavaEE, then have you considered just bog standard (JSR 154) Servlets? If written using servlets, then you'll have something that can run on many different servers, Tomcat / Jetty / Undertow, websphere, http://winstone.sourceforge.net/. or wrapped up and deployed as a single jar using Dropwizard. You don't have to code for a particular framework, or server... just extend HTTPServlet, and away you go... and the tools to update / hot reload the server is almost certainly built into your IDE. You change a class, 3 seconds later, its deployed... you can be up and running processing POST / GET within minutes. And, (if you use Tomcat, not sure about the rest), you can even Inject a Database connection. To connect to a database, query a table, and return the result as JSON you can do as follows, and you dont need anything else, AT ALL!... To be honest, you'd probably want some kind of JSON builder, rather than building it yourself...., that will take care of escaping stuff, but there is enough JSON parser frameworks out there.... @WebServlet("/MyServlet") public class MyServlet extends HttpServlet { private static final long serialVersionUID = 1L; @Resource DataSource datasource; protected void doGet( HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // Get a database Connection, run the Query.. try (Connection c = datasource.getConnection(); ResultSet rs = c.createStatement().executeQuery("select col1,col2 from table1"); ServletOutputStream os=response.getOutputStream(); ) { os.println("{'table1':["); while (rs.next()){ os.print("{col1:'"+rs.getString(1)+"', col2:'"+rs.getString(2)+"'}"); if (!rs.isLast()) os.println(","); } os.println("]}"); } catch (SQLException e) { e.printStackTrace(); } } } 
Method overloading depending generic types. Method overloading is resolved during compilation anyway so it's not like type erasure gets in the way of this. As far as I understand, it only works like this for compatibility with pre-generics code.
I concur that using the Collections is a much better approach than using arrays directly. I'd also say that you have way way way too many comments. Documenting "image++" really isn't needed and you're just repeating the code. It makes it hard to see the wood for the trees. Comments should be used to explain functions, non-obvious lines and code blocks. It's a hard balance to get right when you're starting out until you've gained experience on what is too little and what is too much. You've erred into too much territory. The flow of your program is also a little convoluted. I'd suggest consider turning flag into an enum and abstracting the difference between the cases into the enum, so you don't have to do a bunch of if else conditions.
I don't use it myself, but a team in my department uses it...We're a major international investment bank.
Well, I'm pretty sure a lot of cultures don't use the time and maybe not even the exact day (there is always a lot of doubt about African soccer players being as young as their passports claim). Moreover, some cultures let you choose the date when you're close to midnight; my mother was allowed to choose between the 14th and the 15th. This matters for superstition and when you don't want two birthdays on the same day or something like that.
Yes and I imagine there are a lot, even though switching to Java 8 is pretty painless. The only issues I've come across were with an old Saxon library and an old Spring library which did something stupid like "if version == 1.1 up to if version == 1.7, else message you must be using at least java 1.5"
I thought 'Entry level coders are now on the top salary grade' was pretty good 
&gt; Why is the Java community like this The Java community does not follow one path. That's the best thing about Java. You're not locked down to the way that Oracle or the JCP says is the best way. Ideas from other communities can find equal traction in the Java community. In particular, Spark is modeled after the Sinatra framework found in Ruby, allowing you to specify all of your routes in a single `main` method: public class App { public static void main(String[] args) { get("/route1", (request, response) -&gt; { ... }); get("/route2/:name", (request, response) -&gt; { ... }); post("/route2", (request, response) -&gt; { ... }); put("/route2", (request, response) -&gt; { ... }); delete("/route2", (request, response) -&gt; { ... }); } } This is a very lightweight specification of a web application which has proven very popular the Ruby world. For those looking for this style of application, as with everything, there is a way to do it in Java.
So sad, i thought this was about apache spark. Needed help getting familiarized with that. 
Spark looks to be trademarked by the ASF so they're going to have to eventually.
I think you are being too specific.. in real life the only reason I've come across that anyone needed to know the time of their birth was to make more accurate horoscope predictions, at least it is necessary in Indian astrology - don't know about the others. So bottom line, it's not important - lol. In many countries people are actually really fuzzy about when birthdays actually occur.. they just celebrate their birthdays on the closest convenient weekend. You call when you are still awake. I guess. A celebration conundrum occurs with holidays as well.. lets say New Years Eve.. because of the Eve, we know exactly when this holiday should be celebrate... i.e. not January 1st at night) but other holidays or semi-holidays like Halloween, when exactly does one celebrate that - it's on Saturday - but does that mean Friday night (since it will turn or already be Halloween when you get to the club) or Saturday night? ... the actual day of Halloween?
It adds to much boilerplate and makes you handle even those cases where failure is unlikely, no other languaje have them because they are annoying.
No concept hardware this year :-(
No, because some exceptions are cached to be rethowed anyway, so you end up with un necessary boilerplate, I don't see how they improve my code, no other languaje has them, cause they are not needed, and btw, uncle Bob agree with me. 
I was here for this event, it was a brilliant day! And to top it off I got to meet James gosling.
Glad to see Weblogic support Java EE 7. The last of the "big three" will hopefully have their supported version by Q1 of 2016. Then onto Java EE 8 :).
I use spark exclusively. Addressing your points: Spark has security and auth, it has sessions, and there are great json libraries out there like Jackson or GSON that you should be using anyway. 
Nice, but these examples are always skipping the certificate validation... 
No need for semi-colon at the end of the line (like groovy). 
[removed]
Was it recorded?
Sometimes the boilerplate is not needed, but they can improve your code by making sure that you handle exceptions that are needed to be handled. It's to easy to miss exceptions and this causes app instability.
There will be Hell alright.
seems like a short book on a rather large topic. Regardless thanks for sharing your thoughts with us. I'll be reading it later.
&gt;it looks like you'll have to have an account with RedHat Or SO or Github or RHN or G+ or OpenShift.... Didn't work for me :( Keep getting error. Also, so you're not clicking 5 times to get to it: https://developers.redhat.com/download-manager/file/Modern_Java_EE_Design_Patterns_Red_Hat.pdf Edit: This is BS...their crazy authnz scheme is broken and I'm getting an error saying my browser doesn't support javascript.
Didn't work for me and my OpenShift account or my RHN account. Oh well. Or using a completely different browser...
Yep, my Github account would not work either. I was getting "javascript disabled" errors.
And we all know that good programming relies heavily on "chances". It's not even as if using try/catch adds significantly more complexity to your code anyway. The down side is massively over stated imho. Wrapping exceptions for bubbling up is good practice imho. Also, crashes that happen without helpful logging information (such as when you don't handle an exception) are extremely difficult to fix.
I agree absolutely. Java is already more complex than it should be imho. It was pretty cool at 4/5, very little added benefit after that.
Yeah "chances", like those parts that are out of the developer control. No developer wants his program crashing, but, there are variables that are not in control of the program like antiviruses blocking files or network, defective hardware, bad intentionated users, and whatever you can't think of, you cannot put a try catch on that and is sometimes better to let the program crash so you can investigate the behavior instead of swallow the exception, because that is what checked exceptions cause, that developers swallow exceptions becuase it has become to annoying to deal with them, and swallowing exceptions may lead to corrupting data, so it is better to crash than swallow.
&gt; or her self whether that's worth it of course, and whether Payara or WebLogic is a better fit (or of course, some other vendor like IBM who also has a supported Java EE 7 server out, and next year RedHat) Guess mostly production support for big companies, who will not deal with any companies smaller than IBM, Oracle or SAP.
Servlet is too low level and too heavy in code. Servlet is mostly for handling one URL endpoint per class. You could multiplex multiple URL on one servlet but you have to handle the dispatching code yourself, parsing out the parameters, etc. All these frameworks let you define your URL request handlers in concise ways. Most of these frameworks can use any of the servlet engines you mentioned. 
Modules allow you to encapsulate dependencies, so you can depend on multiple modules that have conflicting package version dependencies, and load both modules without having dependency version classpath issues. Additionally, the JVM can sanity check that all the packages the modules depend on actually exist at startup instead of getting classdefnotfound exceptions at runtime if something is missing. They also let you specifically expose what packages in the module you want to allow external access to. This allows you to specify classes/packages in your module as for internal use only, even if the classes are marked as public. (This can be overridden though by a client that REALLY REALLY wants to use your "unsafe; for internal use only" packages.)
&gt;Servlet is too low level and too heavy in code. Really? - 10 lines of code was enough to connect to a database, pull back a set of rows, encode in JSON and send the result? - and thats to heavyweight for you? The OP said: &gt; Well, i didnt waste too much time choosing the right framework since this job is pretty trivial (just accept some post requests). So, maybe Servlets are *exactly* what is needed. If he just needs a few post requests, then a few servlets is all that is required. &gt;You could multiplex multiple URL on one servlet but you have to handle the dispatching code yourself. Have you heard of single responsibility principal? The amount of times I've seen huge massive spring controllers (though it could be any framework), handling 10's of different URL endpoints. Advantages are to be had in having 1 class per endpoint. &gt;parsing out the parameters, etc. No, this has already been done by the servlet container. request.getParameter() will give you the parameter. Honestly, Servlets are about as lightweight as you can get. 
&gt; Any headline that ends in a question mark can be answered by the word no. (Ian Betteridge)
[Everything in this list](http://blog.jooq.org/2014/08/01/the-10-most-annoying-things-coming-back-to-java-after-some-days-of-scala/). [And perhaps, some of these](http://www.codeaddiction.net/articles/15/10-features-in-c-that-you-really-should-learn-and-use)
I think you conflate http request handling and database handling in the servlet discussion. Anyway, to have a separate servlet class for every URL is too much code for my taste. I can see having hundreds of handlers in one class is too much but having hundreds of servlet classes is single responsibility gone out of hand. I really rather to group similar handlers in one class. To use your example to return json on db query, I can do it in Spark with, public class App { public static void main(String[] args) { get("/employees", (rq,rs) -&gt; db().query("select * from emp").asList(), gson::toJson); get("/employees/:id", (rq,rs) -&gt; db().query("select * from emp where id=?", rq.params(":id")).asList(), gson::toJson); } } The db code is irrelevant but it illustrates the request handling plumbing can be as lean as an one-liner. The parameter parsing I was referring to path parameter, which in servlet you have to parse it yourself. 
Maybe ASF is lying on the footer of the site.
Ah, that's cool. Pretty close to what Guava gives you, nice to be able to do it without a dependency though.
&gt; Some things / discussions will never change, I suspect. Except for the fact that it's not 2001 anymore and that it's not about such extreme differences of writing 500 lines of XML per bean or no XML at all. Today it's more about frameworks claiming to be lightweight (without really defining what lightweight is, but let's slip that one), but then in reality they aren't really simpler to use than Java EE. IF they are simpler to use at all, then it's for one specific example often and those break down when anything differently is requested. The "problem" for many alternative frameworks is that Java EE started to focus on simplicity and implementations started to focus on having small and agile runtimes. This means that at most the difference is small these days for general use cases, which you have to tradeoff against the alternative framework likely being less supported, has less people knowledgeable about it (thus less people able to help you with a question) vs a *slightly* simpler model *in some cases*. For certain very specific use cases that are specifically targeted by an alternative framework, such alternative good still be a good idea. For the general case, I don't know really.
Sorry for the ignorance, but why does this framework (and Spring for that matter) choose to pass Classes and then use class loading and reflection and all that instead of just passing an object? blade.app(App.class).listen(9001).start();
No, it should greatly simplify things
https://www.dropbox.com/s/s4ocyrwgwpazdjk/Modern_Java_EE_Design_Patterns_Red_Hat.pdf
Why not just use an Optional and Optional.map? Optional&lt;String&gt; bar = Optional.ofNullable(foo.get("map1Key")) .map(value -&gt; value.get("map2Key")) .map(value -&gt; value.get("map3Key")) //... Edit: Didn't see that you start with a Map&lt;String, Object&gt;, not a Map&lt;String, Map&lt;...&gt;&gt;
I'm kinda in the same boat but tbh the only way to develop that programming mindset is to just think and do it yourself... Get stumped... Research... Look at examples.. Think, expand... Understand... Etc.. Hard work pays off. Patience too my friend.
I'd really like extension methods and/or typeclass support. Ie being able to add better typing and more functionality to interfaces/classes I don't know. This can lead to being able to write super nice dsls for your code
Lombok's got you covered
Good point!
&gt; so you can depend on multiple modules that have conflicting package version dependencies, and load both modules without having dependency version classpath issues Except you can't. The current module proposal does not allow more than one module exposing the same package. EDIT: This is not accurate. The real restriction is that 1/ a module may not *read* (i.e. depend on) more than one other module that exports the same package., and 2/ different modules that export the same package (for different versions) require that each of them be loaded by a different class-loader; that requires defining something called a *layer* in the new module system. Currently, layers can only be created programmatically, and not at the command line, which only defines a single layer using a single classloader (the application class-loader), so, *in effect*, you cannot have more than one of the modules provided on the command line export the same package.
&gt; which already solves all of the problems Jigsaw is supposed to solve OSGIs main goal -- if I understand it correctly -- is to solve the problem of dynamic modules, namely loading and unloading modules at runtime, while Jigsaw aims to solve the problem of static modules, namely, modularization of dependencies that don't require loading and unloading. So while dynamic modularization may be a superset of static modularization, it is also more complex. 
The real mvp
/r/androiddev perhaps
Ouch. To save my face, let me point out that [Betteridge continued](http://www.technovia.co.uk/2009/02/techcrunch-irresponsible-journalism.html) with: &gt; The reason why journalists use that style of headline is that they know the story is probably bullshit, and don’t actually have the sources and facts to back it up, but still want to run it. I hope I gave enough sources and facts to formulate a non-bullshit story.
Dynamic loading of modules is certainly one of the more exciting features of OSGi. You don't have to use that to take advantage of it's modularization capabilities.
OSGi does this. Jigsaw apparently too. AFAIK you cannot do this with Maven alone.
Agreed. The books title should have been "A quick primer on whats hot in the EE space"
I didn't find it very enlightening, it was short and there were a lot of broad suggestions and little detail. But it was free, so who am I to complain?
I sadly have to disagree, it's the book that I learnt from, but it's so badly out of date now it will actually do damage to someone picking up Java for the first time. It's a pity he lost interest in Java, because his writing style was very clear, and an updated version would definitely be on my list of starter books.
&gt; But I'm pretty sure the result won't be worse than the current jar-hell. I think so, too. It's just so annoying that the worst part of JAR hell might continue to exist.
I'm not sure I'd say that's its *main* goal, as opposed to just being a comprehensive modularity specification all round... It is a better static modularity system than Jigsaw, too. None of this "module hell" stuff. And it really isn't particularly complex...
&gt; For some reason, many pro-Java EE folks always see not using Java EE as the "original sin". There's absolutely no logic behind this attitude, Standards are there for a reason. Why do we measure things in meters. Why do we charge things in units of £ or $. Standards make things interoperable, and if everyone knows the standard, everyone can understand everyone else. If standards are not an issue, then why bother using Java at all. Just use PHP.... Actually, why bother using HTTP to receive a post.... just share your windows Directory and allow people to copy the stuff there. So what if the network admins start jumping up and down because you want to open up the companies network to an unstandard protocol..... Client- Server was the ultimate non-standard.... write the server in what you want, write the client in what you want, design the protocol, etc etc. And now client-server has fallen by the wayside because its too much work when adopting the standards (HTTP / HTML/ Etc) is easier. So, if you choose to go it alone with your non-standard server framework, ask yourself if that framework supports: pooling of database connections, profileing and live stats using mBeans, blocking or non-blocking server threads, connection to loadbalancers using a lightweight protocol (AJP), security using things like LDAP, websockets, HTTP 1.1 pipelineing and persistant connections, HTTP 2 facilities like cache preloading If your framework doesn't support these, or have a roadmap that supports these things then it will be obsolete in a few years. And this is why sticking with the standards is the safer bet.
So there is no actual Java VM to leverage the WebAssembly yet. What's the point of this article? I'm looking forward to WebAssembly, but I don't understand what that has to do with Java.
Interesting, but assuming you can have multiple versions of a package if it is not exported by a module? So far as an application/library developer, the multiple versions of packages used by different modules seems to be the most compelling use case of the feature. 
The article is of little value. However, there's probably no need to implement the JVM again as the browser provides all of the same capabilities in the runtime. Java will be leveraged in a manner similar to Android, you compile Java bytecode into webassembly and execute it there. The Java class library will need to be ported to compile and execute on the browser runtime.
Think if it is than a person unwilling to change to a new language and more of a person seeing the differences and finding a language that does not have the safety they are used to. Having safety and desiring it does not mean they are less of a developer. In fact I see it as a best practice to make life easier. Can javascript do the job? Sure. Can it be hard to find issues and easy to create issues? Yes. It is a balance between powe and safety that businesses look for to maximize productivity. 
That is actually a very nice and visual description of how turn some spaghetti mess into nice, testable code. And even though I like to err on the side of an additional abstraction layer, the explosion in the number of interfaces and classes involved does scare me. :)
&gt; assuming you can have multiple versions of a package if it is not exported by a module? Yes, but then those packages need to be part of the library's module, i.e. in the same JAR. 
A monad has a precise definition. Not only are unit (aka return) and bind methods required, but they need to satisfy 3 laws. This type doesn't even have a bind method, so it isn't a monad.
Yeah, I was thinking the same thing but it seems this "complexity" is needed to properly isolate things to the point it can be unit tested cleanly. This is also a fairly simple example (which is the point, so people can understand the concept) and I can see how adding functionality would be easier/cleaner with the new architecture which does seem a bit overkill for what it's doing at this point in time.
I assure you, all modern browser runtimes have very advanced GC capabilities. It may not be in the WebAssembly spec, but it will be and won't require a huge amount of work. I expect the most difficult part will be designing a common interface for using the browser's GC implementation.
Though you're right, what I am wanting is more convenient. Everytime I decide to create a new multi return method, I don't want to create a new class, initialize a new object, use setters and getters on the rreturned object. It all comes down to personal preference.
Sure. Like I said, it depends on *how* suboptimal is the language to the task. Even in your case, the picture is not always clear. It all depends on how many other (Java) libraries you might need to use, because switching to JS buys you JQuery but loses your other libraries. But, again, let me say that the other language is not the language you don't know, but the language that's too costly to use in your particular circumstances. Obviously, if it's not too costly -- certainly if it's *less* costly when you've considered everything -- then you should use it. In general, new languages on top of established ones in your organization yield a very poor return on investment (compared to new algorithms, libraries or tools), and certainly diminishing returns with each additional one (up to net losses), although a language can lower its cost by targeting a well-established platform (like the JVM or JS) and sharing its libraries. They may have one advantage, though, which may or may not be important regardless of everything I've said, which is attracting certain developers. I personally know some SV companies that are using alternate JVM languages in addition to Java primarily (if not solely) for this reason.
That's the book I used to get me into the IT world.
Java EE, and JBoss, GlassFish or TomEE definitely, I would also recommend checking out PrimeFaces and OmniFaces. In the end though, none of these take a super long time to learn how to use. They're meant to be usable, and excluding Java EE, they're pretty specific in the problems they solve/tools they provide.
It's really going to depend on what tools are used by the company hiring you, as you probably won't be going in there and changing anything up front. Spring/Hibernate/Tomcat are ubiquitous for webapps. Swing is for desktop apps. You'll want to be familiar with build tools as well... Maven, Ant, Jenkins, etc.
Professionnally, only backend development (C or C++). I don't count what I learned in school with Servlets etc. I did some web dev with html, css and php but it was just for discovery.
It might be helpful to group those into use cases and see how they relate to your current body of knowledge. Weblogic is a container, like Tomcat. Hibernate implements JPA to talk to the DB. SWT and Swing are UI tools for desktop apps. Guava is a library of useful tools, much of which has implementations in Java 8 now. Jenkins is a CI tool. Angular is a JS front-end framework, AJAX is a client/server communication method. Spring is a framework that at it's base provides DI, but also provides things like MVC, REST, and DB access through different projects.
If I have to say only 5 things for my company needs: JavaEE , Hibernate, JBoss, jenkins, IntelliJ It's quite a simple stack of technology that we use at work and we don't really need more. I'd just have to add GIT for versioning and Twitter Bootstrap for the layout.
Okay thanks. I already use git for my projects so it is fine. I installed Eclipse (I used that during my studies) but I'll also try IntelliJ. It doesn't really fall into frameworks I need to learn but I can give it a try.
Sup /r/java, I've written a little html5 parser in pure java: as far as I know there are no other java parser that pass all the tokenizer and treeconstructor test from [html5lib-tests](https://github.com/html5lib/html5lib-tests). The doc is incomplete, but in general, the exposed api should be quite easy to understand. I hope that you will find it interesting/useful :)
Just wanted to make sure you didn't get into the JavaEE trap. it is a rabbit hole of confusion unless you have a lot of other ducks in a row (I've tried to jump into EE.... and I'm not ready yet).
Since you appear to be the author... https://bitbucket.org/tcbakes/untestable/src/aab94d1192b2d93e86ec5f36e1473b53e4014ae8/src/test/java/com/tcbakes/untestable/BitbucketClientAppTest.java?at=master&amp;fileviewer=file-view-default#BitbucketClientAppTest.java-43 You have the same Javadoc comment on this and the next test method and I believe the one linked is wrong since you are setting up the command to return true for canHandle.
I'm almost done with Herbert Schildt's [Java - A Beginners Guide (2014)](http://www.amazon.co.uk/Java-Beginners-Guide-Sixth-Edition/dp/0071809252). It's meticulous, but that's what I like about it. I plan on working my way through his [Java - The Complete Reference (2014)](http://www.amazon.co.uk/Java-Complete-Reference-Herbert-Schildt/dp/0071808558/ref=asap_bc?ie=UTF8) when I'm all done!
I don't like those Head First books. They seem a bit overly silly and focused on "making Java fun". Java is already fun IMO! Cracking jokes every other page doesn't make me want to learn programming more.
Check out Dropwizard.
return is ofOptionalMethod, bind is call and callSame. It is not a pure Monad in sense that bind doesn't take a function as argument, but otherwise it satisfies the properties. Instead of wrapping one value in Monadic type you wrap a tuple - object, method name and args. You can then bind more OptionalMethod(s) together via call and callSame. 
Well, we're talking about the possibility of running Java or other languages in the browser.
I dunno, seems like the big guys, like Netflix and Facebook are moving away from application servers towards microservices and containers, etc. Not sure, if i was starting over today, that i would focus on application servers for webdev. That being said, i understand the guy is trying to get a job and that there are lots of app server deployments out there.
If someone is asking you to be proficient in a framework like JBoss, they are implying that you should have some years of Java experience under your belt. Since you don't have that experience, perhaps it would be better just to go in with a "will learn/want to try" attitude. If they want to deviate from their obnoxiously specific advert and give you a shot, they will likely understand that you will need some training/time to come up to speed. If they are really being sticklers, playing with JBoss at home while not having any Java related experience on your resume isn't going to score you many points.
Sure, they'd definitely be performant, but it probably gets a bit difficult from an architectural level when you start scaling up. I guess what I'm trying to say is that people / companies who are interested in lightweight frameworks want something working in the shortest possible time. Something like Spark would do that, but generally Java isn't really known for rapid development. In the PHP world I quite like Laravel's (a giant general purpose framework) approach. They made a microframework called Lumen which looks very similar to Spark &amp; Sinatra. When you reach a point where you need a bigger feature set, you can just drop your code into the bigger framework and it'll just work. That's what I think the likes of Spring or Struts should do.
I would say: Vert.x, Spring Data, Neo4j, RXJava, Maven.
This. If you need to keep track of errors you can make your own implementation of Try but it should work the same way Optional does. No need for reflection.
Thanks, Watching JDK9 Lang &amp; Tooling now.
Don't like ORMs eather, maybe because I have heavy SQL knowledge and I see ORMs like toys.
Streams, and their equivalents in other languages, are usually lazy. So nothing is really done in the intermediate steps, like map and filter. It's not until the terminal operation, findFirst(), is executed that work is done, the intermediate steps are just defining what you want to do. You can see this by executing Stream.of(1, 2, 3, 4, 5, 6) .map(i -&gt; { System.out.println(i); return i * 2; }) .findFirst(); It will print only one line with «1»
Yeah, a tool that does not provide new functionality is supposed to make things easier and better in some way. Just breaking even isn't a good enough reason to use an extra tool. Most of the time I've found ORM's are time consuming to set up, then briefly save you time in writing objects, then become a big pain again when you run into the "gotcha"'s and anything complicated. When using Spring Mvc, past initial setup, there was no point where I thought that I'd be saving a lot of time by using Servlets instead. Some things were still complicated and annoying but the older tech would not have helped. Constantly I'd run into problems that were easier to do with sql compared to using hibernate, which to me says the framework is a waste of time. 
Hey, could you explain a little further for me? I've been trying to dive into JavaEE lately and there's a lot of confusing stuff. You list both JavaEE and JBoss. Now, from my naive understanding, JavaEE is a standard.. and JBoss is a particular implementation of it so, is that really listing two things?
As well as having a binary format for browser code. Faster to load due to smaller file sizes, no need to interpret as you go.
I wish switch for String and enum switch would allow case null or, just for enum, that null values were never allowed. ie. attempting to assign null to an enum would generate an error at compile time or an NPE at run time.
I'm learning about streams now as it goes, to improve my project. So I think I understand what you're tying to ask. From what I understand filters and maps are intermediary functions and find first, find any etc are terminal. So nothing happens to he stream unless you call something like find first. Form what I've learnt and understand each item in the stream gets passed through each stage before the next starts. For example if you had a list of 5 integers and called the stream method, followed by a map which multiplies each number and then a filter which picks only numbers greater than 10. The first number would be multiplied, then filtered then reach the find first or for each method before the next number gets multiplied. Therefore if you call a find first the first number e.g. 5 gets multiplied by 3. The value of 15 gets put through the filter and returns true. Because it's greater than 10 and then gets returned by the find first method. The other 4 numbers in the list won't even get make it to the first map function. Hope this helps and sorry for bad formatting/spelling, I'm on my phone and it's late. 
JavaEE is a package of specification. Now you need application servers who understand these specs. The standard implementation is in GlassFish by Oracle. Jboss contains another implementation by Red Hat. I mentioned both because JBoss is not only an implementation of Java EE, it is one of its features.
I'm a relatively new developer, however, from what I read, I have to disagree with some of what you said. It's true that Java isn't known for rapid development, but that's not the point of the micro frameworks (although they can sometimes be useful for that). Companies like Google, Twitter, Netflix, et al (and much smaller companies) have switched to a service architecture with micro frameworks. They'll spin up something like Spring Boot to do one thing and one thing only, throw it into a docker container and have a cluster of those docker images run the service. That service will have a REST api (or even SOAP) and all of the services will communicate to form what used to be a singular Spring application. 
Optional and Try monads are not appropriate for this use case because you don't know the functions you will be calling exist in advance.
I've found Big Java by Cay Horstmann, third edition, to be out of date but useful for complete novices.
&gt; I remember when GitHub published that graphic for the 1st time, but why would you think Java 8 gave Java a big boost in popularity? Not saying isn't that way, Just curious why it is like that.
It's ok, I want to hear different opinions about people already there and just wanted to be sure about yours. 
Practice certainly helps, and you get at least what you put into it (usually more). A few things from my experience: You know those side challenges that are optional (my professors always had those, and I'm sure they aren't the only ones to have done that)? Consider them a requirement. When you look for solutions to a question online, don't go with the first one that solves the problem. And get together with some friends and work on things (doesn't have to be an assignment if your professors are up-tight about collaborating); it's a whole lot more fun coding with other people. Takes a while to feel like you've got the hang of it, so keep working on it. You can do it.
Practice and criticism. If I were to do it again, I'd pick small projects and (hopefully) get my professor to agree to critique them. As much as you can learn on your own, there are many people who have made massive mistakes and learned from them, you don't have to make those mistakes too. Take advantage
That is true, however in some one off cases this may actually be faster and more elegant than doing a whole bunch of boilerplate.
Step one: learn to write proper sentences. This is a serious programming forum where chatlingo is depreciated.
I felt like this well into my job, and still do occasionally. Best way to make it feel 'right' is to get stuck in and use it a lot. Make something, write tests for it, write something else etc. 
if you are creating html from within java you are doing something wrong, imho. Other people seemingly disagree with me though, https://github.com/agentgt/jatl
"Creating a basic webpage in j2html is pretty similar to HTML" ummmm
20 years and counting. Java isn't going anywhere!
You could just write a SWIG wrapper? 
I suppose it's not for common web usages, and rather for HTML code that is mostly or exclusively dynamic (which is rather specific, I agree). Like, I don't know, something cool, think of armies of genetic-algorithm-generated websites ! That's a pretty widespread usage, right ?
the only question is: why? That's pretty cool, but what's the purpose?
It'd be nice if the filer added an example why it is deceptive and suggested a replacement.
Can you recommend any articles on declaritive/imperative coding? Your explanation makes perfect sense but I'm curious how java knows/handles the difference. If I filter a stream and then findFirst, how does it know to apply the filter after the findFirst call?
Yea, if only there was some sort of markup language that I could use instead of Java.
Mapping the whole C++ syntax to equivalent java code is probably impossible. Maybe there are cross compiler which only allow a subset of C++ even though i dont know a single one. 
This stream execution might answer your questions: Stream.of(1, 2, 3, 4, 5, 6) .peek(v -&gt; System.out.println("Peeking 1: " + v)) .filter(v -&gt; v % 2 == 0) .peek(v -&gt; System.out.println("Peeking 2: " + v)) .findFirst() .ifPresent(v -&gt; System.out.println("First : " + v)); It yields Peeking 1: 1 Peeking 1: 2 Peeking 2: 2 First : 2 As you can see, `findFirst()` pulls values out of the `Stream` only until it finds the first value produced by the previous operations. [This Stack Overflow question](http://stackoverflow.com/q/32414088/521799) also explains this in more detail.
Isn't it pretty similar? body().with( h1("Heading!").withClass("example"), img().withSrc("img/hello.png") ) &lt;body&gt; &lt;h1 class="example"&gt;Heading!&lt;/h1&gt; &lt;img src="img/hello.png"&gt; &lt;/body&gt; I guess you could call that very different, but I think it's pretty similar at least.
my dickish response to the title: god I hope not... For pure Java I'd recommend checking out the twelvemonkeys project for examples of implementing ImageIO codecs: https://github.com/haraldk/TwelveMonkeys You could also consider writing a quick JNA wrapper: https://github.com/java-native-access/jna Either way good luck, Java imaging is in a deplorable state and seems to be all but ignored by Oracle.
Web apps. 
The Oracle documentation on Streams has been pretty helpful for me. https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html Plenty of information there and explanations of intermediate and terminal functions within a stream. 
Question is, when would @ThreadScoped end? As long as the thread is alive, meaning it will keep data in there for each different request that happened to be served by the same thread?
No. (While it might be possible to create a converter the result will never be "good").
A flaw with this approach is that a component shouldn't determine its own scope, the scope should be determined by whoever is creating the component. What happened to inversion of control?
Thanks; I had bumped across this; but it seemed to support only `C`, not `C++`. Will have a second look, though, like you point out.. it won't give me Java source.
&gt; https://github.com/danfickle/cpp-to-java-source-converter Oh, I follow danfickle on github, but had somehow missed this. &gt; http://www.tangiblesoftwaresolutions.com/Product_Details/CPlusPlus_to_Java_Converter_Details.html This looks more complete. Thanks!
Let's not get riled up just because something isn't exactly how you like it. Java is OO from the beginning, it's not going away, but it is transitioning to other ideas about programming and maybe that doesn't happen with the flip of switch but actually takes years. They gave us Optional.get and then told us don't use it. Things like that. It's not perfect but it's a push in better direction. 
maybe the C++ version of clang compiler is called clang++? Maaayyyybe you can then decompile java bytecode into java source... .... and get some really crappy java code lol.
[removed]
I would eventually like to make it an ImageIO plugin, and hopefully contribute to TwelveMonkeys as well (license considerations aside). I just needed a jump-start first, since there is already so much effort available in the form of C++ code.
&gt; how does it know to apply the filter after the findFirst call? Like I said, why is there no findLast but there is a findFirst? If under the hood the stream is fully traversed and yet still the first result chosen, then why didn't they give us a findLast? It's an indication that findFirst stops as soon as it gets it first result that makes past all your filters, mappings, etc. What if the stream never ends? Like perhaps weather data. A findLast method might never return. Therefore a findFirst method that traversed all elements first would have the same problem. 
Did you try Google Translate?
¯\\\_(ツ)_/¯
No, `get` is not a mistake. It is a very convenient function. `getOrThrow` is as dangerous as `get`, but much more verbose (and that verbosity is not needed in many scenarious). I don't understand why certain people constantly try to prohibit convenient utilities. If you think some functions are unsafe, just don't use them (and write a policy for you collegues). But leave those function for people who understand what are they doing. BTW, all other implementations of `Option` (in Haskell, C++, Rust, and so on) has short and convenient `get` operation. But only Java developers could think this function must be prohibited. Sometimes I think Java developers are really stupid.
I dont get your point Map has also get but returns null when the given key wasnt found. So you have two possibilities null or an exception which you have to catch. Also there are quite a few APIs which have a orNull and orThrow suffix. Anyway this conversation is pretty pointless. The get method is documented and you make the same failure not more than twice hopefully. 
Why not just go with [Mustache](https://github.com/spullara/mustache.java)?
Ok, why not JSPs? :)
I just hope the sessions will be available on youtube, fast. (Please no more parleys and such)...
We usually call them programmers ;-)
I haven't used JSP before (it was considered bad practice when I got into Java development). When googling "jsp examples" I found this: &lt;body&gt; &lt;% double num = Math.random(); if (num &gt; 0.95) { %&gt; &lt;h2&gt;You'll have a luck day!&lt;/h2&gt;&lt;p&gt;(&lt;%= num %&gt;)&lt;/p&gt; &lt;% } else { %&gt; &lt;h2&gt;Well, life goes on ... &lt;/h2&gt;&lt;p&gt;(&lt;%= num %&gt;)&lt;/p&gt; &lt;% } %&gt; &lt;a href="&lt;%= request.getRequestURI() %&gt;"&gt;&lt;h3&gt;Try Again&lt;/h3&gt;&lt;/a&gt; &lt;/body&gt; &lt;/html&gt; Is that how JSP code should look?
There are very very clear links on the sidebar that should have pointed you towards /r/javahelp to ask these sorts of questions.
Yes - you are right. Please don't use this to generate large HTML files. BUT: There is sometimes the need for such tools. For me it looks good - thanks for the effort. 
Thats for JavaScript isn't it?
Doesn't show compile errors or warnings, doesn't support auto-complete... This is very old news x)
[removed]
I would argue that one should be able to implement a compiler before calling oneself a guru.
To be honest, what I would love is for pattern matching to be added to avoid calling get. Maybe add something I've loved in Smalltalk, add ifPresent(function1,supplierIfAbsent) as an alternative accessor. Something that causes you to handle both cases.
You should repost this to /r/activedirectory.
but ... what would be the purpose of this? usage pattern?
definitely camel.
You might be interested in this: https://blog.codecentric.de/en/2014/09/spring-boot-admin-first-official-release/
You can watch the streams now. They've been recorded.
Cloud9 looks absolutely insane. Anybody got experience for everyday Java development?
I'd use [Lock](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/Lock.html) instead, it might be more verbose but it's more powerfull and (imo) easier to understand
The article contains a very nasty example: iterating while holding a lock. Never do that unless you really really really know what you're doing (and that implies you shall not do it only to check the state of the task). BTW I've seen that a common practice in C# in syncrhonizing only on private members, never on "this". They say the reason is that this way nobody will inadvertently syncrhonize on the same object - could save you some deadlocks. Anybody knows why this isn't common practice in java?
I’m sorry that you’re having problems with our authentication process. Can you describe the steps you took and what you saw?
IIRC, the PEP for type annotations has been approved. I'm unsure if it's implemented already, but the situation is likely to improve on the python side. That said, I always found `help(xy)` to be quite helpful when dealing with any `xy`.
I you look at my other posts, I *did* disable adblock. I also tried a vanilla IE browser and neither worked. What *did* work was the lovely dropbox link another user posted.
well...very rudimentary version of IDE....maybe in a couple years... 
This basically echoes my initial forays into Python at work. I seriously missed my safety blanket of types. I do know writing Python code as you would write Java code is not the way to go though. Thankfully I'm back to Java.
getOrThrowNoSuchElementException() would be more explicit, and a (not particularly short) shorthand for getOrThrow(NoSuchElementException::new). getOrThrowNoSuchElementException(String message) might be a slight improvement on getOrThrow(() -&gt; new NoSuchElementException(message)), for where you want to say "[field name] must not be missing" or something helpful like that. Maybe this could be shortened to getOrThrow(String message), overloading the other getOrThrow. In which case, get() itself could probably become a no-arg getOrThrow().
My issue was more with the HTTP 400s after correctly authenticating. 
Sorry...?
I have found no better way to learn programming than to write small apps. I have found no better way to improve my programming skills than to write large apps. I also like to read other people's code. Open Source is awesome. I love digging around the source code of the libraries I use to see how they do things. By all means, read some intro books, follow tutorials, etc. But, that's only a starting point. You'll only get better by doing things yourself, writing your own apps, from scratch.
I agree, many questions on SO about that one and it's clearly a common source of errors.
There's so many things wrong here, and the whole `synchronized(this)` issue is only the "smell", which using an internal lock only covers up. This is very wrong: synchronized(future) { while (!future.isComplete()) { Try.run(() -&gt; { System.out.println("Waiting..."); Thread.sleep(500); }); } } This code is unnecessarily holding a lock, for an indeterminate time, which is very dangerous. Locks should be held for as short as possible, so that other threads have a chance to acquire the lock. It is better to do this: synchronized(future) { while (!future.isComplete()) { Try.run(() -&gt; { System.out.println("Waiting..."); future.wait(500); }); } } The outward effect is the same: block for 500 ms before checking the condition again. But there is a huge difference: future.wait *releases the lock* on the future object, giving someone else a chance to acquire the lock, reducing lock contention.
You said "this", when the whole point of the discussion was not to use "this" as a lock object. 
The android docs are shit. Full of deprecated APIs and bad advice. Get Android Studio and read Head First Android Development, and Android Programming: The Big Nerd Ranch Guide 2nd ed. You can get a free 1 week trial on safari books online. 
JavaFX with OrmLite (with JPA annotations) and SQLite on the desktop. You can use Swing with JavaFX too. Java on Android with OrmLite (with JPA annotations) and SQLite. RoboVM to use on iOS JSF on the web server with PostgreSQL (SQLite is a derivative of PostgreSQL, so not a huge learning curve) with Hibernate and JPA annotations. You can use SymmetricDS to sync desktop and mobile dbs to the server if you want offline capability! Else, a Spring Data REST web service.
I ran into this problem. The documentation is outdated. You cn figure things out yourself, but it slows the process down. I ended up just getting a cheapo $10 udemy course.
I'd have a central service (microservice is the current buzzword) sitting on a server somewhere that each of the clients communicate with. This way you don't have to worry about individual databases and synch'ing processes, you just have 1 database that all the clients use. This separates the client from the server, and eliminates coupling between the layers. You expose a simple API that each of the clients communicate with, and go from there. Another benefit is if certain clients share languages, i.e. JavaFX, android, etc., you could have a common library to ease communication between client and server to get rid of some of the boilerplate. As for clients, JavaFX seems to be interesting, but doesn't seem to have much adoption, then again thick clients are falling out of favor for thin web clients. I'd take a look at react-native for android and ios development, don't be afraid of javascript development, contrary to what this subreddit seems to think, it's not going away, and it's not scary (not nearly as scary as JSF, imo *shots fired and preparing for impending downvotes*).
Agreed. Separating the client / server fully will be the easiest in the long run. Spotify has a "desktop" client, but it's just a wrapper around a chrome app. This makes it easy to run on new client devices vs writing it in a native fashion.
&gt; don't be afraid of javascript development, contrary to what &gt; this subreddit seems to think, it's not going away, and it's not &gt; scary There is being "afraid" of Javascript, and there is disliking Javascript and avoiding it if possible. If you can go straight Java, why not? For desktop clients, Java already provides options like JavaFX, which is certainly no worse than WebKit. For mobile clients, there is RoboVM, which lets you write real native apps and at least reuse client-side Java code. For the web, okay fine Javascript, if you must play the HTML/CSS/JS game, since that is the native platform of the web. Although, again the Java world presents Javascript haters some options like JSF, Vaadin or GWT. Obviously, this being /r/java, Java centric options will be preferred.
Openshift v3 is a great option
If it's just you doing it, then do some shitty x-platform thing provided the value is in the service, not the apps. If the value is in the apps, go native, every time. For example, the top 100 paid games(apps?) use very little third-party shit. It's all custom.
Actually, JavaFX is quite different than Swing in coding style. In fact, I found myself having to unlearn my Swing knowledge in order to effectively leverage JavaFX. Swing is based around models and listeners on those models. JavaFX is based around properties and observables. Swing is very imperative, while JavaFX is very reactive. There is no `Document` for the `TextField` in JavaFX, there is a `textProperty` for which you can implement direct property bindings. The painting model is completely different. There is no `paintComponent` to override, you get a graphics context and draw in response to events. Instead of changing component state and triggering a repaint event, you can literally bind to change events themselves (such as the dimensions of the control, which are themselves observable properties!), and directly paint in response to the event. The Swing programming model is clearly oriented towards 1990s-style static GUI applications. The JavaFX programming model is oriented towards modern user experiences more heavy on dynamic graphics. The programming model is accordingly very different but sort-of-kind-of familiar enough to bring your old Swing programming habits along. But, as I found out though getting deeper into JavaFX, you're not in Kansas anymore.
&gt; I'm obviously not going to change your mind about javascript My hatred of Javascript does not come from being closed-minded. I write A LOT of Javascript. My hatred of Javascript comes from intimate dealings with the language. But as an engineer, I am willing to accept that you have to use the tools you have available for the job. &gt; These aren't transpilers per say, but since javascript isn't &gt; compiled, they're the closest comparison. It is not comparable, at all. Transpiling means you are converting one high-level language to another. At the end, you're still deploying and running Javascript. Scala and Groovy compile to Java byte code, which is low level. You don't run Java, Groovy or Scala. You run byte code. As long as you compile to `.class` files, interface definitions in each of those languages are compatible with one another. &gt; Just cause it has transpilers doesn't make it a bad &gt; development environment, just means people want to code &gt; for it in a different way. If you're using a transpiler, you're not using the Javascript development environment. That is the whole point. GWT is a transpiler, which lets you use Java's development environment. Clojurescript allows you to use Clojure's development environment. The point of transpiling is to leverage one high level language's development environment to avoid the other, for technical (I can't use Xcode) to personal (I hate Javascript). &gt; A. hard to find people to contribute to This is short sighted. Otherwise, we wouldn't have Java at all (or Haskell, or Scala). Which is ironic considering how volatile the Javascript ecosystem is. &gt; B. tightly coupling your application to one way of doing &gt; things is, in my opinion, bad advice. Java doesn't force one way of doing things at all. That is the nice thing about the Java ecosystem in the first place (which is why Scala, Clojure and Groovy exist). This does not follow from hating Javascript.
&gt; remove @Deprecated from java.awt.Component.show() and hide() Yes, please
The first idea is to create a register POS system and/or inventory control system. With something like this, we can start small, and add to the project. It'll help learn how to create scalable software. 
[removed]
Why would the annotation be removed if you are supposed to call setVisible() instead?
I think this article does more to confuse than explain... ...anything. There are at least 4 "concepts" at play here: 1. Public vs private locks - I think the article is arguing for private locks, but it's not clear. 2. Locking on shared objects - This has nothing to do with the provided example. Link from oracle explains it in detail, but the issue with shared locks is locking on something that *looks* private but turns out not to be and there is a chance that it will be used in unrelated synchronization policies. It could lead to nasty bugs and it is important to be aware of it. 2. Client-side locking - I think there is a bug in the "fixed" code and I think it has in part to do with client-side locking. In the future implementation, the read of "value" through isComplete is not synchronized on any lock. This could lead to a situation where isComplete returns true, without executing all of the registered actions. The lock on future in the Test class gives the appearance of synchronized access, but it doesn't actually work (they're now different locks). 3. sleep vs wait - The article doesn't explain the difference, and i think it's very important. Sleep does not unlock the monitor while wait does.
Ormlite can be a big time saver, though its a PITA to set up right. I prefer it over active record style, which seem to be the only alternatives. Only drawback I've found is lack of table inheritance. Also check out AndroidAnnotations for some time savers 
Digia's Qt, hands down. Excellent, robust, mature framework, good support, free, multi-platform, battle-tested. Native speed, C++-based with added scripting language (QtQuick/QML). Used in very large projects, both open and closed source.
I'd probably just go with a spring backend. Take a look at spring boot to get you up and running quickly. Java ecosystem is quite stable at the moment, granted so is rails and django, but sounds like you come from a Java background.
It might not be defined as a 'fun' project, but it was the first time I felt that "I made something useful!" feeling, so I was happy at the time. It was no more then 10 lines, so it was quite a small program. It was a simple program that turned off the monitor whenever I moved my mouse into the top-right corner, and the system would go to sleep/hibernate/suspend when moved into the top-left corner. I wanted to make it because the laptop I had at the time had a extremely bad battery (Would be max-charged at 40% or so) so I wanted to make it last as long as possible, and I did. •‿•
You should have a Project Java git hub. use that for all projects which will make the code easily accessible and people can learn how to commit and pull/push. 
Nice, but I'll wait for individual talks, its a mess of 10 hours long recording right now !
I'm liking React for the front end bits. Currently only doing web development, but React Native looks pretty awesome.
Why come up with a sealed enum for the reasons? I want @Deprecated("Dangerous. As of 1.4.2, use doCat() instead") public void doDog() {}; And maybe (since, reason and replacements are part of the JEP): @Deprecated(message = "use doCat", since = "1.4.1", reason = DANGEROUS, replacements = {"doCat"}) public void doDog() {}; But I think it is verbose for no reason. Just an ability to add a message should be enough.
do you model your data as classes? i.e. user and payment and address? each class is a table. boom done. only trick is when you model things as lost or set, then you need to think about join tables or such. 
Verbosity is nice for computers. It could be used for automatic or assisted replacement of the deprecated call.
Probably a solver for this number quiz they had in The Guardian. It was just constraint satisfaction and removal of options, but it was fun to write. It was written in Perl from what I remember. Completely useless, but confirmed my "this would be a doddle to solve with a program" suspicion. **Edit:** found the puzzle: http://www.theguardian.com/lifeandstyle/2015/oct/30/kakuro-1472-hard
The first rule of being a software engineer is to be able to tell the difference between crap (designs, solutions, algorithms, frameworks, languages) and good, and to stay away from shiny. On a side note, you seem to imply that javascript is new. Both javascript and java turned 20 this year, which should be a giant source of embarrassment for some people.
Eh? Never said JavaScript was new, I said it has improved in the past couple years. This was a zero value add post just trolling for a circle jerk, please come with valid points to back up you claims as to why it is what you just listed.
I made a small utility using WURFL(old tech for image rendering) through which any image would refit itself to a screen depending on the devices UA(user agent). So it was like a big resource file which had almost every device available with their screen size and resolution. Not sure about the usability,but it was fun seeing an image rescale based on the input device UA :) 
The value types JEP has been accepted and implementation is underway – but it's a complex feature with lots of edge cases, so they need to test a lot to avoid breakage. I'm eager to get it too, but more important is that they get it right.
:D &gt; BTW, are you planning to make that open-source? No. I have some open source stuff on [BitBucket](https://bitbucket.org/king_of_the_universe/), but as much as others swear on Git and the like, I find it rather a burden than a blessing for my personal needs, so that's one reason why I rarely put stuff into a repository. I might bother again once those systems are actually ready for prime time, which quite clearly they as of yet are not. But I also don't like the incredible data overhead. If I make an archive of my library, it's about 200 KB and is done quickly, but if I include all the Git stuff, I'm at over 800 KB and it takes 3 times as long, and I only made a few pushes yet, so that's likely to grow *big time*. Since I don't need the features at all, why should I bother? For *others*? LOL.
Yesterday I finished my picture browser. I always wanted someting that can browse pictures with the button to create new folder and copy currently viewed image to it. Useful for all those big imgur galeries I download from time to time 
I say small because I wrote it in a weekend using some code from a previous project : https://github.com/Omnicrola/FcsGraphics It converts image files into a different format that is read by software used to analyze flow cytometer data. A flow cytometer is a medical device used to count or sort the individual cells in a biological sample. It serves no practical purpose whatsoever, other than to amuse certain laboratory scientists.
Here's a free resource explaining [database normalization](https://en.wikipedia.org/wiki/Database_normalization). Check out the further reading section.
snake in text-mode
Wouldn't that be part of the `@deprecated` JavaDoc annotation? I don't know, I never liked the redundancy of those two... However sometimes the new usage is not a simple API swap. Sometimes clients have to revamp their code a little and thus a longer description or at the very least a link to the new API would be nice.
Mandelbrot Fractal Generator... I guess I earn my geek pass by saying I've made one on every platform I ever used..... Including a VIC 20, and an old casio graphing calculator https://commons.wikimedia.org/wiki/File:Vintage_Casio_Scientific_Graphing_Pocket_Calculator,_Model_fx-7000GA,_Made_in_Japan,_1990_(8721201872).jpg 
It allows you to unit test without worrying about the rest of the system
Let's say you have a service: public interface MyService { Data getData(String id); } Now, maybe there's a database implementation or an HTTP client implementation of this service. You want to test how your code consumes this service and deals with various possible return values from it without having to set up the database or HTTP endpoint. You can use Mockito to create a mock implementation of this interface that allows you to customize the return values without having to construct the dependencies of the concrete dependencies. (note that Mockito can also mock concrete and abstract classes - I just used an interface for brevity of example)
Don't use Mockito unless you have a reason to use it. You'll know it when you need it. Basically, you'll hit a dead end, where you've reached the end of the unit, and are bumping into the real world. For example, you need to interact with a database or a GUI. Now, in order to proceed, you need a database connection or you need to fire up the GUI. You don't want to do that. Your test suite is fast and independent, you want to keep it that way. What can you do? You can solve this problem like so: 1. Define an interface which separating you from the outside world, such as between yourself and the database. Keep this interface small and focused. Bonus points if this interface isn't database specific. 2. Use Mockito to create a "stand-in" for the outside world, which implements this interface and is the representative for the outside world. 3. Write "expectations" which define the interaction between you and the outside world. This is the "contract", and the unit tests validates that you live up to your end of the bargain. 4. Write an integration test which uses a real database connection to implement the interface. The integration tests validates that the database lives up to its end of the bargain (as you defined in 3). Mocks are one solution. Another solution is to use something real which is similar enough to the actual real thing but is also real itself. For example, instead of making a connection to a real SQL database like Oracle or Postgres, you make a connection to an in-memory SQL database like H2. This is slower than a mock but still pretty fast. This isn't *as* dangerous if you are depending on something like JPA, which hides much of the database-dependent details, so variations in SQL dialects won't invalidate the test.
They should fix [Optional.map](https://www.reddit.com/r/java/comments/3jdfo0/why_javautiloptional_is_broken/) while they're at it...
Here's a real life example: I'm working on a Java EE system right now. It has some database backend that I'm completely unaware of. I honestly don't know anything about the database. But I'm writing tests for a section that requires database access... so... what do I do? Normally, I'd use an EntityManager to make queries for me. But in my environment I don't have access to the MASSIVE database backend. So how can I test anything that relies on database queries? Well, I fake it.... or mock it. My test declares an EntityManager EntityManager em; Ok but I can't use a real database so what do I do with this? em = Mockito.mock(EntityManager.class); We'll use Mockito to make a fake one. Ok but what does that actually do? Well we tell Mockito how we want that mocked EntityManager to behave. normally I'd just use em.find(SomeJavaBean.class, someKey); But since I can't use a real entitymanager I have to tell Mockito how to react when I make those calls. Mockito.when( em.find(eq(SomeJavaBean.class), eq(key))). thenReturn("someValueYouSpecifiy"); That's what I do there. I just tell mockito "when I call em.find() with these parameters return this value. So when I run my unit tests, I provide my mocked EntityManager to the class I'm testing, and when the class makes its normal EntityManager calls it'll be using my mocked EntityManager, and Mockito will supply the return values based on the rules I specified. That's just one example. 
Do you have a link? Id like to give that a go
First of all, it helps if your class has as few hard-coded references as possible, ideally none. Dependency injection is a great way to inject all your references. (e.g. Spring framework) Dependency injection is good because it allows you to stub out (i.e. use "dummy"/"mocked" versions) of the dependencies when unit testing. For example, while unit testing some code, you may not want to have your code send email or write to the database. So you "mock" the email sender or dao class that does nothing (or does something slightly different, such as emailing yourself instead of the original recipient) and use this version instead using dependency injection. This is good, but it's very cumbersome when your project has hundreds of different classes which need to be mocked out. That's when a mocking framework such as Mockito can come in handy. Mockito can generate mocks (i.e. generate classes that have a different behaviour - possibly do nothing) from an interface or existing class, and you can use this mocked version in your unit test, instead of you manually creating mocked versions of each class.
You use Mockito when the class you want to test depends on other more complex classes. It could be that simply doing "new X()" in your unit test sets of a chain of fireworks all throughout the application, because X itself depends on a lot of stuff. But maybe all you need from X is just that it exists and isn't null. Enter Mockito, with Mockito you can create an X without having to worry about triggering any side effects. In the real world this is usually when you're "crossing layer boundaries", e.g. communicating with a database or network layer. You don't really want to wait for a timeout when your application is trying to connect to something it can't reach from an isolated test, so you fake/mock it!
Automated testing is based on something called "Seams". A seam is an interface layer where one unit is calling into another unit. And for the sake of unit testing, you need at least one seam, but usually two. You have to have a way to call into the code you're testing, and that's the seam you *must* have. But most units rely on some other resource, either another part of the application, or some remote resources. That is the second seam. That second seam, between the code that you're testing, and the unpredictable, unrecreatable outside world, that's where Mockito becomes useful. It works better to give an example. Let's say you're writing a service which will provide some bit of data back to the user interface layer. You'll test it by calling the same method the UI layer calls. But to know how it will respond, you need to control the second seam, where your service interfaces to some repository of information. Mockito provides a good way to fake the results of calls at the second seam. You can verify that the thing you're testing passes the right parameters and you can force the lower-level API to return a known set of values.
This is only one way of writing tests. Personally, I mock out everything that is not the unit under test. Too many mocks in my code will show a high degree of coupling between classes, which helps me develop more flexible and maintainable code (by breaking it all apart). It sucks to have an unrelated test break just because you changed something in one of its imported classes.
Do not mock happy fun ball. Or, [do not mock types you do not own](https://blog.8thlight.com/eric-smith/2011/10/27/thats-not-yours.html).
A strong type system is like your parents. They are damn annoying sometimes, but it really is for your own good.
I wasn't saying you're wrong, I was just pointing out that there is more than one way to use mocks. You define a *unit* differently than I do. A unit could be a user story, or a unit could be a single method inside of a class. I believe it's the latter. I believe what you're doing is *integration* testing, and that also has great value, but unit testing is usually done at the method level with all external dependencies mocked. Some people like DHH agree with you. Uncle Bob does not.
I don't have it, I wrote it over 10 years ago in spaghetti C++. Anyway, game development gives a lot of fun and satisfaction.
&gt; I also highly recommend that you try implementing your own mocks and stubs and fakes to see what mockito is actually doing. Sometimes it even makes sense to build it yourself, even when you have mastered mockito. Definitely worth it! Tried doing it in C# and learned a ton on the way. https://github.com/the-dargon-project/NMockito
Hosting java application was always a very limited experience, in terms of quality and updates. exceptions are Heroku, AppEngine, Amazon Beanstalk. So most people I know in the java world host their own server on VPS or bare metal. Today with Docker containers you can bootstrap you application and its surroundings quite fast and easy. Especially when you are not a linux admin. So it might be a good approch to take a look at an *Docker Hosting* alternatively to a jvm hoster. Take a look for example at tutum.co, orchardup.com, dotcloud.com, stackdock.com, container-engine, jelastic.com,runabove.com just to name a few.
Thank you. I will look into Docker Hosting.
It solves bad architecture/abstraction difficulties by allowing you to create offline mock objects that bypass external dependencies (network/database) by providing a convenient wrapper. In Java if you did things nicely you usually program to a interface and can create mock interfaces that work offline. Mockito helps turn regular objects into mocks.
I don't follow your explanation at all. I don't see your comparison to basketball player playing baseball to have any relevance as a metaphor. Reusability has nothing to do with coupling (or cohesion, for that matter). They're independent concepts - one could reuse tighlty coupled code, neat and tidy uncoupled code or anything in between. &gt; The degree of tightly coupling can vary . &gt; Tightness of coupling is a relative measure And yes, I realize (and stated as much) that coupling is a relative measure. I don't generally disagree with what you've said - I take exception to this statement. &gt; Keep code tightly coupled unless there is a proven need to increase the level of decoupling. I simply disagree. There's never a reason to tightly couple code except laziness (which, I'll admit, is a very fair reason -- especially if I'm the only developer!)
I would use https://www.digitalocean.com
Small note though, while I do agree that you don't have to test the Hibernate implementation, you **do** have to test the configuration and the queries you made using Hibernate. For example: Write an integration test using a copy of the database (in memory/...) that tests if the results match your expectations.
When you test a class, that class will often have fields which are other classes. Let's say you have a class `Dog`, which has a reference to a `Vet` object. Maybe a method `vet.getMedicine()` needs to be called. In a unit test, you are ONLY testing the `Dog` class. You don't care how the `Vet` gets the `Medicine` (from the network, from a database, it could be anything). Mockito lets you fake the return value of the `vet.getMedicine()`, which will help you unit test the `Dog` class. You can also use Mockito to test what happens when different types of `Medicine` are returned. Maybe you haven't implemented the `Vet` class yet, but you still want to be able to write tests for the `Dog` class. Mockito lets you do this. 
get a vps or use google cloud platform
But... "You don't need heavy weight types when you have unit tests," they said.
Wurfl now there's a name I've not heard in a very long time
how or why people build anything large using js and node i will never understand. 
The ability to use extended persistence context in CDI beans should be also considered
You want to test A. But A uses B and C. If you just want to test A in isolation then you can mock B and C so they are controlled elements of the test. B and C could be other functions/methods or a service call out. Of course you also test B independently and C independently. The result is your code is cleanly tested with little to no dependencies.
They will get around to writing those unit tests in the next sprint.
Try [rosehosting](https://www.rosehosting.com). They offer fully-managed virtual servers with cPanel/WHM, PostgreSQL etc. You can ask their admins to install Tomcat and Java for you if you do not know how to install them. 
Yow, spark looks terrible in these benchmarks!
Thanks, I'll check this out. 
I agree..it wasnt cool for me not to respond... Thanks for making me respond. 
Yea, exactly. I need to better understand join tables. Thanks. 
Why would you have tables that combine objects? You can in JPA (and hibernate) via a discriminator (google it) but not with such separate objects such as customer and orders. They have nothing in common. A customer may have many orders, and therefore look at OnetoMany (and their corresponding ManyToOne, ManytoMany, etc.).
[Personally I recommend the search bar. I swear it knows everything if you just ask it.](https://www.reddit.com/r/java/search?q=java+book&amp;restrict_sr=on&amp;sort=relevance&amp;t=all)
I worked for a big air freiight company. Before having graph databases , I created an in-memory graph with all available flights (origin, destination, local time datetime of departure and arrival, interconnection times needed on each city). When the user typed a query it searched through the graph to try all combinations using a simple backtracking. Why am I proud of it? Because over the time a lot of functionality was added, I created a pluggable set of providers to add more rules to the graph: see if there was available space at that moment, if the freight was loose or unitised (ULD https://en.wikipedia.org/wiki/Unit_load_device ) type, also the type of the ULD because not all planes allow all kinds of ULD, if the freight was loose then it checked against dimensions of the freight trying to make a "tetris" to allow the freight to be on a plane. Another plugin allowed to check against reserved space of the customer, also calculated the price of each of the millions of combinations and get the best result based on customer query (sort by price, by arrival date, ...). It also allowed the customer to define some connection points to force the freight follow a path. For instance, imagine you want to carry special temperature goods. If you want to go from Europe to China you don't want the plane to go through Dubai but follow a more cold path through Russia. The basic graph was in memory taking about 90MB, the other information was loaded and cached on the fly and evicted if there was no longer needed after a period of time. As an average, a query used to take about 3 to 5 seconds to return a result with an average of 3k queries per day. Edit: forgot to mention that each query created an internal queue of jobs using an internal ThreadPoolExecutor, each for one starting connection between origin and the next stop.
Basically, some years ago you only had two options. Have records on a Relational DB and make queries and queries and queries to navigate through them or create an in-memory graph with objects pointing to other objects and create the query system, very problem oriented, to navigate through it. Today you have options like this http://neo4j.com/ where you can really query the DB like you do with Relational Databases, and let it make the optimizaions, organization of the data and store all needed data of both nodes and edges.
[Suite of dialogs](https://www.reddit.com/r/javahelp/comments/3ovcnx/timed_notify_for_desktop_in_java/cw1n74a). [Main Menu](https://www.reddit.com/r/linuxquestions/comments/3ibmki/is_there_a_windows_classic_start_menu_type/cufakzc). [Text search in documents](http://imgur.com/ObptMnZ). [Video search](http://imgur.com/5MhQ3iw). and some others.
I wrote a tutorial about using RabbitMQ within a Java application.
The Java plugin uses sensible defaults for building your project. If your project adheres to the defaults, your buildscript could be as simple as: apply plugin:'java' If you don't adhere to the defaults, or you need dependencies, or you need to do something the plugin doesn't handle out-of-the-box, you will need to add to the buildscript. And in the real world, 99.999% of projects will need something that the Java plugin doesn't provide on its own.
&gt; in-memory graph K, thanks so how I understand with the in-memory graph you kind of cache the persisted objects in runtime to avoid database calls for each action for better performance?
One example would be project structure. By default, Gradle expects your project to (more or less) follow the [Maven standard directory layout](https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html). If you use a different structure for your project, you will need to add a [sourceSets declaration](https://docs.gradle.org/current/dsl/org.gradle.api.tasks.SourceSet.html) to build your project properly. I have worked on projects that use the build system to setup databases, configure logging, make deployments, configure servers, etc. I would recommend against all of these. These sort of tasks add complexity and there are other tools that are better suited for the job. I prefer to use my build tool *for building my project*, not for configuration and server maintenance.
Algo-trading systems with lots of machine learning
At my old job I worked on a product which performed geometric and cartographic generalisation on national-scale geographic data. That is, it made detailed maps into less detailed maps (for going from a hiking map to a road atlas, that sort of thing). The business logic and API was in java, the data itself was in Oracle SQL tables, but accessed via an intermediate object-oriented database written in C and a proprietary scripting language called Lull (which is only used by that company and only like 2 people know how to use it now...). The frontend was a web app (js), and most of the atomic geometric generalisation processes were handled by the C/ lull backend. 
what kind of data feed did you use?
[The Kilim project](http://kilim.malhar.net). Millions of lightweight user-level threads, speaking to each other via message passing. It was there before go and its goroutines. It formed the base for the Erjang project, an implementation of the Erlang implementation in Java. 
[This is the only tutorial you need](http://www.petrikainulainen.net/getting-started-with-gradle/)
I used to use and edit a private server emulator for an online game (MapleStory). I didn't make it, but it was the first large code base I had ever worked with and I learned quite a bit by modifying it, adding features and fixing bugs. I worked on it with some friends and we had a peak of 1.3k players but ran into some legal issues so we had to shut it down. Fun times!
Still learning java at the moment, so my best has got to be a battleship game where you can play against an ai or a friend. It's not much, but for someone who knows up to basic oop and nothing about uis other than System.Out.Print statements, I feel rather accomplished with myself
Making a web app UI for my JARs. I saw how hawt.io did their admin gui - basically an embedded Jetty instance. Run the JAR, then point your browser to the local HTTP server I spun up.
I have started to use Gradle in couple projects and it's surprising easy to use. The standard java:plugin has pretty much every command for compiling, testing, and building deployment. What's nice is that it automatically generates Windows and Unix start scripts for the Java app deployment. Here's a build file in a project. https://github.com/williamw520/fetchmailatt/blob/master/build.gradle. There're a few extra config beyond the standard java:plugin. For example in the run command, modifying classpath, setting log level, and parsing command line arguments, so that when I test run the app, I can pass parameters from the gradle command line. 
I programmed something that did my physics homework. Basically a fancy calculator but it made everything so much faster. I'm a first year java student
A windowing toolkit for DIVX DVD players which used the players built in support for MPEG graphics. I-frames were used for full screen backgrounds and P-Frames used for smaller images, such as button states. It was pretty bad-ass for 1997-8.
I made a minesweeper clone using JavaFX. It's my final project for my advanced programming class and it took awhile to actually figure out how it's going to work but I have a semi-working revision. The only problem is the score pane not fully resetting the score after a game is over. 
That sounds really interesting. Although I'm not entirely sure when this would be useful?
Currently have it running, working, trading, and profitable on OKCoin's bitcoin websocket API. I trade off 1m and 3m bars. Also adapting it for InteractiveBrokers &amp; Forex trading, but going to use smaller bars for forex.
Thanks! I'm going to start doing longer videos once I make a couple of beginner tutorials.
Money, unlike most other programming languages
/u/tweetsincommentsbot
A web scraping library, [jARVEST](http://sing.ei.uvigo.es/jarvest), and a Swing application framework [AIBench](http://www.aibench.org).
minecraft mod im still a noob
 * https://en.wikipedia.org/wiki/Rete_algorithm * http://www.jessrules.com/guidelines.shtml
Not interesting to most people, but I made this to help me keep track of my shortwave radio logs. http://hflogbook.tumblr.com/ I ended up abandoning it recently, because it was getting to difficult to maintain Swing behaviors across platforms. I attempted JavaFX but it was too much of a learning curve for me.
Me and my business partner wrote a [Bitcoin wallet](https://multibit.org) which has had over a million downloads. That continues to be an amazing journey.
I started with green field and wrote a large Java enterprise application that integrated three entirely different medical code management systems for the largest HIE in the world. (These are used to disambiguate hundreds of HL7 streams coming from hundreds of hospitals and other providers, each with their own code systems, etc. Error correction on the fly...) Essentially, replaced a team of 18 with a team of 3 by integrating in real time three different applications. I worked directly with the people who would be using it--hand in glove. Did I mention I am the sole developer and architect on the project? The application, which is closed source, has been described as our company's Swiss-Army knife application--it does so much. The users have gotten so they make pie-in-the-sky automation requests--and I have been able to do it, by using every tool in the Java arsenal. In short, it has been a freaking tour-de-force blast. Java rocks.
Make it a web app! Sounds like a great thing!
I misread that as OKCupid's bitcoin API and was very confused for a moment...
A bot that automatically searched for available student housing in my city and applied for them. For some reason none of the sites I crawled had captchas..
Proper tools in proper places. Rules engines are great when you have a big unknown decision system that will not be defined until after you deploy your software, or that will differ wildly from deployment to deployment. If you know that your users are going to be minimally competent coders, you can offer them a scripting engine. If, on the other hand, you can't trust them to express their logic in terms of a single flow, a rules engine might be a better choice. 
Wrote a distributed workflow engine particularly suited for video transcoding. The architecture is very pluggable and allows one to extend its core functionality by dropping in jars. I use rabbitmq for the communication layer between the nodes and ffmpeg for the transcoding. The engine is environment agnostic, so it can run on and off the cloud. I hope the company I did it for will let me release it to the world one day...
It's tough to pick and choose, there have been lots of cool ones. Here is something I am working on right now that I've been having a lot of fun working on: https://github.com/elennick/retry4j ...basically a library that makes it clean and easy to write retry logic. Sounds simple but there was some pretty interesting stuff I have learned while working on it including: - the concept of backoff strategies - how you go about publishing something to maven central (much more elaborate than I had expected!) - how you setup a nice looking github page - how to write a library that is lightweight without all the usual guava and apache utils I am used to (because who wants to be forced to import a bunch of extra dependencies because some lightweight library makes you if you depend on it) - etc
Well now that you mention it. I did build an equivalent http://hf.cj5.webfactional.com/ The two weren't linked up, but there were plans to sync data between the two. Between full time bullshit job and life I had neither the time or energy to keep these projects in development. 🙁
Replacing a network management system done in a mix of spaghetti C++ and Perl code using CORBA in HP-UX by a full Java stack.
I recommend JME3 with nifty. 
Because browser-based applications are complete shit, maybe?
Hush now, grown ups are talking.
...[libGDX](https://libgdx.badlogicgames.com/) seems to be the weapon of choice over at [JGO](http://www.java-gaming.org/)...
Very good article with some valuable points!
What are the advantages over jme3? 
It should, shouldn't it?
They should definitely address that, but if you read between the lines of David's presentation I think you hear him saying that they (=the JCP, specifically Oracle and Red Hat) have a resource problem. So extending JPA to be compatible with CDI beans in that regard would be great, but who is actually going to do the work for that?
I want the game to be efficient, smooth. There's a lot going on in the game screen. JS and CSS is not there yet, just look at any dashboard or "admin" control panel stuff... it brings the browser almost to a halt on non-gaming computers. It sucks.
Sounds like a bazooka. My game doesn't have 3D graphics at all.
Weird, it didn't warn me. Deleting.
First, I like your username :) Second - the reason there's some XML in there has nothing to do with Spring - it's the Maven pom.xml. In a way, your note is a positive about Spring - since the only thing we really need to do here is to add a dependency to the project, and Spring is smart enough to pick that right up, use it, auto-configure itself and do what we want it to do - have content negotiation all set up. 
[a database](http://stardog.com)
Yet another jetbrains corporate account? domain submitted from|count|% :-|-:|-: [blog.jetbrains.com](/search?q=%28and+site%3A%27blog.jetbrains.com%27+author%3A%27belovrv%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|12|75% [info.jetbrains.com](/search?q=%28and+site%3A%27info.jetbrains.com%27+author%3A%27belovrv%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|2|13% [youtu.be](/search?q=%28and+site%3A%27youtu.be%27+author%3A%27belovrv%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|6% [medium.com](/search?q=%28and+site%3A%27medium.com%27+author%3A%27belovrv%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|6% subreddit submitted to|count|% :-|-:|-: [Kotlin](/r/Kotlin/search?q=author%3A%27belovrv%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|8|50% [programming](/r/programming/search?q=author%3A%27belovrv%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|4|25% [java](/r/java/search?q=author%3A%27belovrv%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|6% [functionallang](/r/functionallang/search?q=author%3A%27belovrv%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|6% [functionalprogramming](/r/functionalprogramming/search?q=author%3A%27belovrv%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|6% [androiddev](/r/androiddev/search?q=author%3A%27belovrv%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|6%
The section "The Real Benefit" seems vague to me. I don't understand the real benefit that's being described. How is the idea of a stateful remote resource related to HATEOAS and even HTTP? One can implement a remote action that returns proposed next actions in countless ways. It doesn't *require links*. In fact, the links seem redundant for the described goal: { "isbn": "0321127420", "title": "Patterns of Enterprise Application Architecture", "available": 1, "actions": ["self", "purchase", "borrow", "return"], "authors": [{name: "Martin Fowler", id: 276264}, {name: "Kendall Scott", id: 83732}], "publisher": {name: "Print House Co.", id: 294864} } Not only is this much shorter, I managed to *add* information to it by providing inline names for the authors and publisher, so if the app wants to show links, it can at least show some sensible text on those links, without fetching all those HTTP requests just for this basic purpose. What did I lose by not having URLs for the valid actions? Nothing. The client would need to understand the semantic meaning of every action label, so it might as well know how to invoke an action without being given a full URL for this. Here's a possible protocol for fetching a resource: Prepend a resource id with "/res?id=" and boom, you get a link to the resource. One line of documentation saving me untold amounts of redundant noise in my responses. Neat, right? So if I want to open an inline browser in my app for more info on Martin Fowler, I can open link /res?id=276264 on the domain I'm calling the API on. Simple. It might want to show a page right there or redirect me to an SEO friendly URL, doesn't matter, the browser deals with it. My job is done before we even get there. I should call this HATEOAS/2 and maybe build an automated client for it. :-)
Hm. As a new User sice 14.0 - This update feels more like a 14.5. For me, only the changes in the databasetools and the find-in-path improvements, are worth mention.
Just checked out your blog and you seem like a legitimate software engineer. I've seen people push out these e-pub books and a lot of times they are junk. The posts on your blog definitely prove you know what you're talking about, and are genuinely interested in the topic!
Don't rule out the flexibility of the included Swing framework. It can be used to quickly setup a basic interface, but also provides the flexibility and power to completely change the look and feel, add animations, define pixel-precise layout, and extend existing components with your own appearance preferences. I've seen full screen animations implemented quite well in a graphics-rich Swing environment that most people would never guess was even Swing in the first place! I believe it has a bad reputation of being slow primarily because it is too easy to use it incorrectly.
Yes, that one too
Thanks for appreciating my work. I'm taking this book really seriously even if I didn't choose a renowned publisher. I've been preparing this book for the past two years. I hope you enjoy reading it and please provide any feedback.
New licensing system, built-in Kotlin support.
&gt; the same guy who just told us as J1 that lambdas will indeed come in place of annotations in some cases. No doubt, the JCP is capable of lambda-ifying all sorts of APIs in a way that afterwards, code looks like an orienteering hike with all the arrows. OK, me definitely cynical.
And if you're feeling very adventurous, early zero latency typing support.
You need to choose one color and follow it from left to right, since most optimizations are relevant when you don't try to compare one system to another.
One usage pattern of Optional I found particular helpful is the default value for null parent object. For example, Person p1 = null; int age = Optional.ofNullable(p1).map(Person::getAge).orElse(-1); Here I want to get the age of the Person object and return the default -1 if the Person object is null. Optional has been great to use. The only issue I can't get around is the handling of checked exception inside Optional. If anyone has any good idea on handling exception, please share your insight. 
I am 2 weeks deep on Scala and the Play framework. It's been hard as I didn't even have much experience with fancier imperative syntax before starting. With regards to filtering, Scala tends to be a lot more concise (if it's written well, which mine is not) so that helps. As to IDEs, IntelliJ IDEA is nice because you can ctrl-click objects to find their decleration/usages. I think that's a very common feature though.
It's unfortunate that the sample generation didn't put those two graphs on the same page like it's the case in the regular book.
The Ctrl-click types and objects is a common feature and is definitely helpful. Are you doing this as a side project on your own or is it for work / an app you are building for real ?
Mine is even better. The IDE itself [doesn't think that there's an update available](http://imgur.com/GCj6YX3.jpg) and the installer tells me that [my 14.1 install directory doesn't actually contain IDEA 14.1](http://imgur.com/JShvaBU.jpg). It would be great if I could upgrade without having to copy over all configuration files manually :/
[removed]
The company I'm currently working for bought around 20 licences for v14. That wasn't all that long ago, so I doubt very much that they will be repeating the process for v15 so soon... 
If I could give gold, I would. Thank you so much, for the fast response and extremely effective one. Just looking through it, the entire website looks so well made and so in depth. God bless you!!! And also do you have any strategies you did to learn on your own? I find it pretty hard to learn this on my own without the base of java... Did you use a textbook or anything? Thank you VERYYYYYYYYYYYYYYYYYYY much!
The license is valid for a year and you should be able to upgrade, at least that's it used to work before for me... 
Did you get to see many sessions?
Too bad they aren't providing a torrent. Yesterday (GMT) the download speed from their page was abysmal. 
I tried at 7pm and got 60kb/s or something.
I started out as a PHP developer. After some time I started coding Java in my free time and noticed how awesome it was for me at the time, because of static types and compile time errors, where in PHP even the syntax errors would appear only at runtime. [There were many other reasons, of course](http://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/) So I've changed jobs and became a Java developer. After some time I came across Scala. I started playing with it on my spare time and I understood how verbose java really was. Also, I no longer had the headache of mutable collections and objects, I could also do stuff I always wanted to do like multiple inheritance and extension methods, later I discovered type classes, futures done the right way and much more. I started studying functional programming, learned how to isolate side effects and have a single place for them, etc. I got more and more frustrated at work because of Java, because it was extremely limiting now that I knew Scala and functional programming, Java 8 didn't help as well, it is still missing a lot. I quit and became a full time Scala developer, the team I joined had a medium-sized code base, I had no issues in understanding how everything worked and started doing tasks immediately. However, for people who have never seen Scala code, the issue is not the syntax, it's the functional programming. You can learn the syntax in less than a day and start writing imperative java-like applications in no time. The hardest part is moving from thinking imperatively to thinking functionally, you really have to do some studying here. Therefore, it is not about comparing Java to Scala, Kotlin or Ceylon, it's about moving from imperative to functional. Not easy, but well worth the effort. As for grepping, just move to IDEA, the community edition is perfectly fine if and will assist you way more than the command line.
Why is he putting "Codename One" in almost every sentence?
Thanks. Digital Ocean looks really cool.
&gt; OK, me definitely cynical. Clearly, what did the JCP ever do to you? ;)
Ouch. That'd be late morning in the states. Maybe they were all hammering the download?
We mean that, by our benchmarks, Kotlin byte code runs as fast as Java byte code: for example, we paid a lot of attention to leveraging the optimizations that JIT performs, because some patterns in the byte code can easily make them impossible. Also, no custom dispatch mechanisms (often used by dynamic languages) are involved.
Ah, yeah, I also misread that then. They should probably word it a bit better.
Years of J2EE with EJB 2.0, my friend. YEARS of it!
Oh, so I guess it's intended that you install 15 to a new location and then import your old settings from 14. But... why? That's just way more complicated than is actually necessary. In-place updates are not arcane magic.
He forgot _type-erasure_ and that _data-types_ aren't real Objects.
&gt;extends and super keywords are so confusing to describe covariant and contravariant types. You always need remember PECS No they are not. At least it is not any more confusing than normal inheritance. When Student extends Person, you know Student can act as Person. If List&lt;? extends Person&gt;, you want a list containing something that can act as Person. Seems pretty clear, no need for any mnemonics.
It's a fluff piece promoting his own API and framework you have to buy. Why there are arbitrary objects like [Form](http://www.codenameone.com/javadoc/com/codename1/ui/Form.html) and [EncodedImage](http://www.codenameone.com/javadoc/com/codename1/ui/EncodedImage.html) within the Java sample.
Type-erasure is so bad it should fill all spots 1 through 10. It is literally the thing I curse Java for every. single. day.
From the About page: &gt; Disclaimer: I don’t know anything about anything and everything I write here is definitely wrong. 
Can you back up that viewpoint with some arguments or evidence?
I would love to read some further detail on reified generics vs. Java's type erasure based implementation. As someone who has spent their entire career working primarily on the JVM (plain Java or Scala) and with JavaScript, I don't have a full understanding of the design pattern possibilities that we lose out on for lack of reified generics. I'm not saying that criticism is wrong. I'm sure that there ARE powerful things you can do with having that type information at run-time. However, after a decade of reading Internet flamewars... I still haven't encountered a solid, intelligent, calm, non-rant presentation of how my day-to-day life as an architect or developer would differ if had reified generics in my toolbox. Instead, it's just been 10 years of, "*OMG! Han shot first! Jar-Jar sucks!*" sort of angry smugness that goes in one ear and out the other at this point. I'm not directing this at the parent comment per se, but I honestly suspect that many (if not the majority) of people who rant about this lack the depth to really articulate the position... and are just repeating snark on the Internet because repeating snark on the Internet makes one feel intelligent. Does anyone have links for, or want to take a shot at writing themselves, some neutral objective coverage of reified generics based design patterns?
I have about 15 years experience in Java, and you just captured exactly how I feel about type erasure. I feel like type erasure is scape goated a lot. People seem blame type erasure when they encounter anything related to generics which frustrates them. The truth is there is very little that would be simplified by retaining the run-time type information, and absolutely nothing that would move from the realm of the impossible to the possible. You want full type information at runtime? Use a [TypeToken](https://github.com/google/guava/wiki/ReflectionExplained) or similar. Sure that's a pain, and it's ugly as sin, but it gets the job done.
I almost closed the page at number 1. Most of the rest of the list was OK, but weak and phantom references are indispensable. Their use should be quite rare, but when they are needed, they get the job done. We could probably do without soft references though, they're only use case usually deserves a better implementation.
generics should be included
I think type erasure was a very lucky break. That's what prevented variance types from being baked into the compiled classes, and so enabled different languages with different variance rules (e.g. Java, Kotlin, Clojure, Scala) to share the same classes. That's a very big advantage (code reuse among different JVM languages), for a very small price (reflection requires explicitly passing a `Class` object). Without generic type-erasure, the JVM ecosystem would have been much more fragmented, and alternative languages would have required much more work.
Don't know what dashboards you're looking at, but that's quite a bold statement. Plus, if you're going to use JavaFX you better get used to CSS.
Essentially type-erasure means that anytime you need type information you need to pass Class/TypeTokens around (or sometimes both depending on what 3rd party libraries you're using) I find myself needing type information at runtime whenever I'm doing deserialization - which I do *a lot* considering I'm writing distributed applications. So essentially every layer of code gets cluttered with specifying the type twice (or three times) - once in the generic type and once (or twice) in the function or constructor's arguments. Its generally people who "have about 15 years experience in Java" are the ones who think this is okay - because they don't know any better or just have a form of Stokholm's Syndrome. I guess I shouldn't criticize Java in /r/Java.
It is certainly true that if you've lived for years without a feature, and have never missed it, then you tend to view its absense as acceptable (essentially a tautology). After all, the Go crowd insists that generics *altogether* are no big deal, reified or not! I can theoretically imagine some use cases where reified generics might help in the deserialization of *arbitrary* types. However, even if I had that ability available to me, I just find it hard to imagine wanting to deserialize complex types with arbitrarily-typed members. Even in the C# code that I've seen (where reification is supported), serialized classes sent over the wire in distributed apps are almost always simple POCO's. I would wager that more distributed application development is done with Java than with all other programming languages combined... and yet it's still only from outside of the community that you hear the loudest cries for the lack of reified generics (again, perhaps just a tautology). If you (or anyone else) has any mind-blowing examples where reification completely changes the approach in a particular case, then I would genuinely be interested in clicking the link. I would simply be curious to see which language is used in the comparison. The only programming languages I'm aware of that both: * support reified generics, and * have a large *professional* developer community, aren't just an academic or hobby language or "emerging" option like Rust... ... are C# and C++. Usually it's the C# guys who harp the loudest on this, as C++ guys don't care so much what Java guys do one way or the other.
Yep, checked exceptions are in that list, no surprise.
I think a couple of those are definitely the result of hindsight and the fact that Java is backwards compatible. It has tied their hands on a number of items, like not being able to add interfaces for hashcode or equals and the synchronized keyword. They had to go through the pain and experience of Java 1 and 1.1 before they discovered that they were a bad idea, but by then it was too late; they were already part of the language.
Not sure what the article says, there was a slideshow and some other stuff but the basic mechanics boil down to this. 1) Add remote TCP debug options 2) Export and map port with Docker Not a whole lot to it. Been using it with my EAP container for a week now.
Why?
I'm not convinced it's bad in any way at all. The issues with generic seem to come mostly from covariant arrays, method overloading resolution and how constructors aren't really a part of a class's interface And two of these are already on that list.
Yeah, that would be slides #7-9. This article is half about learning how to debug Docker containers -- eg: staying ahead of resource contention/restriction (CPU, memory, disk space), logging, monitoring, post-mortem procedures, etc -- and half about debugging with Java -- eg: jps, jstat, jstack.
Ah, ok. I just assumed there wasn't more to it based on the title.
You don't need to pass TypeToken/TypeLiteral/Class objects around everywhere. Runtime type information is commonly needed for deserialization, which is very common in distributed computing. 
That's about as much information as I can find anywhere. I'd love some concrete examples of something that is done frequently in Java now vs what that would look like in a theoretical Java with reified generics. Do you know of such an example? I'm certainly willing to admit that my experience is somewhat limited to Java and Java like languages, but I've been working with distributed systems in Java for a handful of years now.
The wonders of living in Germany and those GEMA folks. :(
That must be some really interesting site considering all you do is link to it. domain submitted from|count|% :-|-:|-: [codeaffine.com](/search?q=%28and+site%3A%27codeaffine.com%27+author%3A%27frappel%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|39|98% [dzone.com](/search?q=%28and+site%3A%27dzone.com%27+author%3A%27frappel%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|3% subreddit submitted to|count|% :-|-:|-: [java](/r/java/search?q=author%3A%27frappel%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|34|85% [programming](/r/programming/search?q=author%3A%27frappel%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|3|8% [presentations](/r/presentations/search?q=author%3A%27frappel%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3% [eclipse](/r/eclipse/search?q=author%3A%27frappel%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3% [softwaretesting](/r/softwaretesting/search?q=author%3A%27frappel%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3%
If you use @CompileStatic then it should skip the dynamic stuff it normally does to access member fields. Otherwise, no, this is not a good idea as all member field access is dynamic and will lower performance. Modern IDE's generate this kind of stuff automatically and your lead should know this so maybe there's more to his decision than you know. 
Ok, my bad, i actually don’t know c# very well so assumed you only complained about the naming, afterall OP complained about the naming being confusing, not about javas callsite variance.
The Java technical keynote is also worth watching for a good overview of Java present and future (https://www.oracle.com/javaone/on-demand/index.html)
It was not as good as Aerosmith the previous year (IMHO).
Hasn't been a problem in my team, but I guess it depends on people who wrote the code. If your methods are short, have no side effects and have names that make sense, then it is easy to understand what the code is supposed to do and writing unit tests for such methods is easy too.
Thanks.
If you use JPA autogen on hashcode equals sounds like a pitfall.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/learnjava] [Java One 2015 list](https://np.reddit.com/r/learnjava/comments/3ri1zp/java_one_2015_list/) - [/r/programming] [Neat catalog of JavaOne 2015 talks](https://np.reddit.com/r/programming/comments/3rh40o/neat_catalog_of_javaone_2015_talks/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
&gt;5. Let the database handle data heavy operations No no no no NO!!!! There is no reason EVER to create stored procedures. 
Ad-hoc queries into MIME container data. CREATE OR REPLACE FUNCTION mime_subject(mime_text TEXT) RETURNS TEXT AS $$ import email from email.header import decode_header try: msg = email.message_from_string(mime_text) subject = msg['Subject'] decodes = decode_header(subject) if len(decodes) == 1: s, encoding = decodes[0] if encoding: return s.decode(encoding) return subject except Exception, e: plpy.info(e) return '' $$ LANGUAGE plpythonu;
In the bank industry, where they use Oracle exclusively, there is the need for heavy-duty querying that generates all sorts of trends, reports and fraud-detection and the procedural language becomes unavoidable.
Thanks.
Gradle 2.0 was the first release with "official" Java 8 support, but some earlier versions worked as well. Why don't you just use the latest version?
I am just wondering thats all, did as far back as gradle 1.7 have support for it? 
With a lot of pre-2.0 versions, as long as you ran gradle in a 1.8 environment, it would have no problems building Java 8 projects. There were some versions where this caused issues, though. I couldn't tell you specifics.
Your posting-style is somewhat ignorant. Parallel post: https://www.reddit.com/r/learnjava/comments/3rhiky/what_version_of_gradle_is_compatible_with_java_8/
Just because you can't read the syntax doesn't mean they're bad.
Funny, the conference style is still identical to the sessions back in 2004 ;-) Flash Back!!!
That's true. But a Master-Slave topology also allows a Slave to run PL/SQL procedures that are the fastest way to address an analytical query against the normalized table structure, which gives you a lot of flexibility too. After all, window functions and Recursive Common Table Expressions are very useful in OLTP situations as well.
I use and have used Lombok on some projects and maybe it's just Netbeans but I have a problem doing a "find usages" on a generated getter/setter, it just doesn't work. If I click on the method in the Navigator and choose find usages, the dialog sits there and there's an IDE exception "ClassCastException: com.sun.tools.javac.code.Symbol$ClassSymbol cannot be cast to javax.lang.model.element.ExecutableElement" I mostly use it for @Slf4j annotation at the moment because of the above.
&gt; What's the problem? It's a spam-account used for advertising its own site. This account does nothing for the Reddit community other than pushing its own site. This is directly against Reddit's [site wide rules](https://www.reddit.com/help/contentpolicy). From [here](https://reddit.zendesk.com/hc/en-us/articles/204536499): * If your contribution to Reddit consists primarily of submitting links to a business that you run, own or otherwise benefit from, tread carefully. * Additionally, if you do not participate in other discussions or reply to comments and questions, you may be considered a spammer and banned from Reddit. * If you flood a Reddit community with posts or comments, you may be considered a spammer. Instead, post one or two times and see what happens. Furthermore, I am of the opinion that this Subreddit has a major problem with spammers. There's *many* accounts that push their own blog (eugenparaschiv is a good example, frequently deleting &amp; resubmitting posts that are downvoted initially) or even corporate website (e.g. Intellij, ZeroTurnaround). There's also a couple of power users that seem to push each other blog, possibly to work around the rules. &gt; then we should judge the content on its own, by up or down voting it. I am voting. I'm also offering my opinion with posts like the above. &gt; frappel sticks around to respond to people who say things about his stuff. No he does not. Or at least veery seldom. Did you look at the account history? It's mostly used for posting links, *not* discussing stuff. This is one of the most prominent marks of a spammer: don't participate, just dump advertisments. &gt; Are you worried frappel is using up all of the internet points so that there will be none left for you? I don't care about karma points. 
This is wrong. So wrong. It's so wrong there's no point in even listing the ways it's wrong, because if you feel that way you clearly don't understand how a database works...and probably don't want to. 
Head First labs makes some pretty good introductory books, http://www.amazon.com/Head-First-Java-2nd-Edition/dp/0596009208 The most important thing is to keep practicing though.
You need to look for a lombok plugin for netbeans. There is one for Intellij but I don't know if it support find usages. It's an important issue with find usages and auto refactoring on large projects. This is why neither groovy or lombok is suited for this because IDE can generate the boilerplate already. The argument for Lombok then becomes how lazy are you to look at your own code. Again, here the IDE can handle it because you can specify code style rules that get applied when refactoring (e.g. pushing all member variables to the top of the file.)
Neat!! Please x-post to /r/contalks
Thanks.
I would suggest to play these videos at the speed of 1.5x :&gt;
Maybe one reason is your company invested thousands (if not millions) in an enterprise database and it makes zero sense to restrict its usage to plain select/insert/delete/update statements.
Thanks so much for the reply. Very well explained how IoC contributes to testing
It's surprising how often I find myself using that, and how freaken awesome it is. Something so small, so simple, and just so darn usefull - it truely makes me develop with pleasure.
JMonkeyEngine is pretty neat. I'm not a game developer by any means but it seems pretty full featured and easy to use.
Great, glad you've got it. We'll see if we can reproduce, thanks!
Why? It's a better version of Java that compiles to Java 6, and Javascript. So you can target Android, JVM, and browser with it...
Thanks.
The correct answer is C, although B isn't too bad of an answer haha. Java, and a good majority of programming languages, are zero-based indexed. 
You're an interesting bot.
&gt; There is one for Intellij but I don't know if it support find usages. The IntelliJ plugin does support find usages, etc. I haven't really run into many issues with it, as it's used in a few projects I've worked on. But yeah, while Lombok isn't really necessary, I haven't seen it harm a product. It can be handy to use @NonNull, @RequireArgsConstructor, @Data, etc. in some cases, but your IDE can generate all of these too.
I kind of agree it doesn't seem to add a lot but cleaner syntax.
Why netbeans over eclipse? 
Introduce Kotlin instead and use data classes. Stay away from the crashy, buggy groovy compiler.
If you are doing GUI development with Swing or JavaFX, Netbeans is superior. Haven't seen the Eclipse tools come even close to what Netbeans provides there.
+1 for @Data annotations. I'm guessing it's more efficient than Groovy which would work at runtime.
Maven support in netbeans is WAY better than maven support in eclipse. With netbeans, your project file is basically your maven file. There is no additional netbeans magic IDE files storing project information. The only thing netbeans specific stored is things like "Run maven with this profile". In fact, I would say that netbeans has the best maven support of any IDE, even Intellij. Heaven help you if you use gradle or ant though.
WindowBuilder pro with eclipse is way better for swing. It works without needing to create special untouchable GUI code. You can drag a component to a frame, switch to code, edit a value, and go right back to the GUI builder. Uneditable GUI code is a huge pain in the ass. Additionally, it can do everything that the netbeans GUI builder can. 
I use IntelliJ IDEA for Java but I use NetBeans for C++. :)
This is a very good and thorough explanation on CompletableFuture with use cases. If you don't know Java8 right now and how regular Future works, it's worth bookmarking for later. 60mins long.
Java, PHP, C/C++, Javascript. The 5 developers who use those languages surely have reason to celebrate ;)
x will keep being multiplied by two until it is a number greater than or equal to 200 when the while condition is evaluated. The second to last time the multiplication happens x is set to 128, then the while condition is evaluated (`128 &lt; 200`) as true so the loop body executes again. Next x is set to 256 then the while condition is evaluated again (`256 &lt; 200`) which this time is false so the while loop stops looping.
1) Automatic memory management. In C/C++ and most languages available at the time the programmer would have to manually request a block of memory if it had to be use outside of the scope of the current function. Forgetting to free this memory, or not freeing it because of a logic bug would cause a memory leak and eventual application crash if it was done frequently. Finding these memory leaks was/is quite difficult. Java does the memory allocation and freeing for you so it's one less thing for the programmer to worry about. 2) Immunity (more or less) from common C/C++ pointer-related problems such as segmentation faults and access violations. Part of the power of C/C++ is the ability to access arbitrary memory locations at arbitrary times. This can afford some fantastic performance but also yield some painful bugs as the impending application crash wouldn't happen right away or even happen every time the application ran. These are colloquially called [Heisenbugs](https://en.wikipedia.org/wiki/Heisenbug)) and are a major pain to find and fix. So basically where C/C++ was like a manual transmission car - lots of power if you know how to use it but also the ability to screw things up badly - Java was like an automatic transmission car where you can't do much wrong but you'll never get the performance of a manual.
Since it's me you are blaming for spamming, I try to add a few words in defence, if I may. The last thing I wanna do is annoying people with superfluous spam. So, let's have a look at the 3 rules first. 1) The Code Affine blog is providing content about Java stuff, most of the time testing, some Eclipse related topics, and other things that might be useful for Java developers. It's just a brand since I don't operate it on my own, and we don't earn a penny with it. So there's no business involved, unless one might be interested on booking us for projects, as we're freelancers. However, although there have been some requests on that, we were already solidly booked before we started sharing our experiences via the site. So again, there isn't much of a business benefit for us in posting this content. But we benefit, of course, from comments that point us to mistakes in our articles and development approaches. Writing and sharing the things we do help us in getting better doing these things - well, if that's a sin... 2) It's true that I do not much contribute besides commenting on my own posts, which is simply a matter of time since I cannot contribute to all communities in the world and keep up my daily work. It's like dffallthethings said, I make some stuff and write articles, and let you know about it. Everybody can decide on its own if he likes it or not - at least sometimes people seem to think that the posts add valuable knowledge. My hope is that the content we provide brings enough benefit for other people so that its a worthwhile contribution. At least, we go through quite some work to provide well researched and elaborated information and opinions. It's no affiliation content or product selling stuff (The few tools or libraries we introduce are all open source, byproducts of our work). Is this it really spamming to share such content here once or two times a month? Did you ever read one of the posts and judge by the quality of the contribution, or do you judge merely by domain statistics? 3) With respect to this rule, again, I wouldn't call sharing one or two times a month 'flooding'. In general I haven't ever once changed or resubmitted my content on downvotes or whatever - I simply haven't the time for such kids stuff. I share it, you may like it or not - it is how it is and I always considered the content in accordance with the spirit that should be expressed by these rules. So, in recognition of your valuable contribution for watching out on spam, if there is a majority of people who think my content sharing is a violation of this spirit, I don't have a problem stop sharing it. But given the positive voting results on most of my content I never had and I don't have any indication for doing so. Thanks to diffallthethings for advocating on my account! Regards Frank Appel http://www.codeaffine.com/author/fappel 
I get the feeling I'm just doing your homework for your now, which is something we don't do here. Give the questions your best shot and explain how you came to your answers and I'll help you figure it out for yourself.
Nice :-D Anything "cool" you've made with the platform? :)
I found this series of articles are quite good: * [Part 1: Threads and Executors](http://winterbe.com/posts/2015/04/07/java8-concurrency-tutorial-thread-executor-examples/) * [Part 2: Synchronization and Locks](http://winterbe.com/posts/2015/04/30/java8-concurrency-tutorial-synchronized-locks-examples/) * [Part 3: Atomic Variables and ConcurrentMap](http://winterbe.com/posts/2015/05/22/java8-concurrency-tutorial-atomic-concurrent-map-examples/)
OK no worries you gave it a decent shot. Just remember that the JVM is running this Java code one line at a time, so imagine in your head an arrow at the first line of code, mentally "run" that code then continue to the next line or jump to the end of the loop etc. &gt;Given that word is a String, what does the following loop do? &gt; for (int j = word.length(); j&gt;0, j--) &gt; System.out.print(word.charAt(j-1); j starts at the length of word, so say word is "Reddit", j will initially be 6 ("Reddit" is six characters long). `charAt` will return the character at a particular location in the String, starting from zero. So charAt(0) = 'R', charAt(1) = 'e' etc. If j starts at 6, the first character will be 5, which is 't'. Next j-- will run, setting j to 5. Now again we print out a letter, this time j is 5 so the character we retrieve will be character 4 which is 'i'. Etc etc. So what this snippet of code is doing is turning "Reddit" into "tiddeR" or reversing it. &gt; for(int j = 0; j &lt; 100; j++) for(int k = 100; k &gt;0; k--) x++; For this one, each time the outer (j) loop runs, the inner loop (k) runs 100 times. So x will be incremented 100*100 times. 10000 times. &gt; Write a set of code that outputs all of the int values between 1 and 100 with 5 values per line, and each of those 5 values spaced out equally. Use a single for-loop to solve this problem Give this one a shot and I'll help you with it. The thing is I could do it the way I think is right but it may be too complex for your current knowledge level.
Thank you!
I have used NetBeans in the past for C++ and did enjoy the experience.
Goetz et. al., *Java Concurrency in Practice.* It's based on 1.6, but the core principles are still the same. Some things have been added more recently, such as (JDK 7) Phaser and the fork-join framework, and (JDK 8) parallel streams and CompletableFuture, but these shouldn't be difficult to pick up once you understand the core principles. (Disclosure: I work with Brian Goetz on the JDK.)
I find NetBeans much smoother than eclipse on auto-complete and import management. 
So it's Guava's ListenableFuture + Futures?
AFAIR you can also setup which parts of code are uneditable by default.
The author may or may not have said these things, indeed. But tend to draw my own conclusions when I read something by someone on the Internet. Hence *"the way I read this"*.
It's the best point by far. The amount of terms used in Java EE security (vendor specific mostly) that mean the same thing is utterly crazy now.
check out blog.paralleluniverse.co
Oilfield sensor data processing mostly. Gamma Rays and Resistivity. Moving over into a Space and Defense field now, thus the raise. The Platform experience secured me the job, and a higher title than I applied for. 
I'm assuming you're trolling? This looks like one of those free answer questions, assuming e is also a pun of some sort.
The best thing for you to maximize the learning effect would be to just simply throw the code into a program and check the output. To go even deeper, print the output on each loop iteration. [Ideone](http://ideone.com) is ideal to quickly check something like this. [See the simple code here](http://ideone.com/BAKwyX) **Also:** Since this is help with programming, it should be posted in /r/javahelp, not here. There are plenty hints on the site that should have directed you there.
What kind of application will you be developing? I use IntelliJ for my Grails development and it is very simple to setup and use. Grails 3.x support is coming to intellij https://youtrack.jetbrains.com/issue/IDEA-136970 Grails has not hit its end of life - http://www.ociweb.com/resources/news/2015/09/14/pivotal-and-oci-join-forces-support-grails-community I have not experienced the issues that were mentioned by the other posters and just wanted to offer the brighter side of development with Grails. I have been doing Java development for almost 13 years. I typically use Spring, Hibernate, Spring MVC. Recently I have used Grails, Groovy, Gradle for multiple production systems including two publicly available commercial applications. Integrating existing Java code into a Grails application has not been an issue for me and there are several ways to tackle the integration of existing Java code. PM me if you are heading down that path. Just wanted to jump in this thread before you ran for the hills based on the other comments.
For that, you may need to look at something like new relic.
I don't think you know the difference between trolling and a joke, but yeah lol.
Have you tried CLion?
Thanks Chris- I know Java Spring MVC works for me so I'm still considering abandoning Grails, but I do want to give it a fair chance with IntelliJ. Right now IntelliJ is not working either though (http://stackoverflow.com/questions/33545933/intellij-grails-3-project-unable-to-run-grails-project) but I'm at least getting pretty good feedback from the IDE on how to fix these problems
What does JAVA stand for? Or perhaps Java was meant?
GGTS was never a really well supported effort. Its totally out of support at this point and I wouldn't recommend using it. Personally I like IntelliJ fine but usually get most of my development done with a text editor (usually sublime text) and a terminal window. Grails is far from end of life and it's actively supported.
Downloaded 8.1. Syntax highlighting doesn't work at all for some reason. So that's fun. (i apologize for stating I encountered a bug....)
I am currently working on a Spring MVC application so I am not in Grails land right now. If you install the intellij IDEA EAP 15 then you should be able to play around with your Grails 3.x project. https://blog.jetbrains.com/idea/2015/10/intellij-idea-15-eap-supports-grails-3/ 
So i'm a little confused here. Is he saying that the CompletableFuture will execute the command as soon as it can, as opposed to the Future which only executes when get() is called? Because it appears to me that they both execute immediately. Edit: Oh nvm I see the supplyAsync now. So you can use futures as variables in another future without actually calling .get() (to wait for the result) until it's absolutely necessary.
I seem to remember that set top boxes were one of the original use cases for Java. I also recall talk of Java being involved in a smart network, with a hive of small services, but I can't remember what that was called.
Hello guys. I am looking for someone to help me with a few very basic java data structure programs. Im in a lot of mess in my life right now, and I could certainly use some help. These are very basic data structures, and if you are half decent at java, these should be a cakewalk. I've got four of these and a week each to complete EACH of them. But Im not in a state right now to learn Java and do them on my own. As a return favor, I am willing to help you out with anything you want, including financially. Any help would be appreciated, please contact me, I am in mess right now! Thanks! 
Thank you for this.
Can someone please help me with basic java data structure programs. Im in a mess right now and really could use some help. I can return the favor in any way possible, including financially. Im frustrated and a little panicked right now, I am to make a fee Java programs, and even though got ample of time, I am in no condition to do them myself. please contact, thanks!
don't forget Scala's case classes!
You are thinking of JINI: https://en.wikipedia.org/wiki/Jini 
As a developer right out of college, I read two books right of school that made me ten times better: *Java Concurrency in Practice* and *Effective Java*. I would recommend them to any Java programmer. EDIT: [This](https://vimeo.com/131394616) is also a great talk on CompletableFutures that will get you very well up to speed on a big java 8 addition to java.util.concurrent.
\*sigh\*... there's more meat on a butchers pen!
And what is time series data? Practical example of an application in lay terms?
IntelliJ all the way hands down, shotgun to the head of people who say differently. (The free Community Edition can be used for commercial development without limitations.) https://www.jetbrains.com/idea/download/ I decided so after almost 2 years of Eclipse and trying IntelliJ for one full day (now about 1.5 years). .... EDIT: IntelliJ users should know about the Armory plugin which can be obtained via the plugin preferences (Not Jetbrains repository.) http://www.visprogramming.com/docs/overview/ If you work with more complex projects, this navigational tool could give you a big boost.
vim with clang_complete. Speed. There is no way you can code / debug faster at all ever. The mouse only slows you down. 
IntelliJ 15 was already released. I am using it for my project. yep IntelliJ is really superior.
"TSDBs are specialised packages for storing (performance) metric data, like the response time of your app or the CPU utilisation of a server. "
 I love Eclipse, what makes IntelliJ better?
I really tried to use IntelliJ for a while but I can't get used to it... I am currently using Netbeans and it satisfies all my daily needs. Things like the whole UI Design are things that keep me from using IntelliJ. Why can't you open multiple Projects at once in one single Window for example...
&gt; Why can't you open multiple Projects at once in one single Window for example... I wonder why you'd want to do that: Do you know about *modules*? I mean, the multiple projects that you want to open - do they tightly work together to justify having them in the same window? E.g. if you want to open a library project in parallel with the project that uses the library, you can add the library as a module, and then they share the project browser tree on the left.
I have used Eclipse, Netbeans and IntelliJ. IntelliJ is the best
&gt; you can add the library as a module, and then they share the project browser tree on the left. Hmm, somehow I must have missed this possibilty...
I can't stand checked exceptions. If I could wave a wand and make them go away I would.
Why?
*"The free Community Edition can be used for commercial development without limitations."* Lol no. List of things not supported (AKA limitations): HTML, CSS JavaScript, CoffeeScript, TypeScript ActionScript Freemarker, Velocity XSL, XPath SQL — PostgreSQL, MySQL, Oracle, Microsoft SQL Server, etc. Ruby, JRuby. Python PHP — PHPUnit, Smarty, etc. Spring Framework — Core, MVC, WebFlow, Web Service, Data, Security, Integration, Roo, etc. Java EE — Servlets, JSP, JSF, Web Services, CDI, Bean Validation, etc. JPA, Hibernate — Completion, Navigation, Refactorings, Queries, Diagrams, etc. GWT — Google Web Toolkit Vaadin Grails Play Framework — Play 1.x and Play 2.x JBoss Seam Struts — Struts 1.x and Struts 2.x Griffon AspectJ Thymeleaf Tapestry Sass, LESS, Stylus, Compass Rails, RubyMotion Node.js Django With eclipse/netbeans everything is possible without payment &amp; fully FOSS.
I have a license on IDEA and I have NetBeans on my machine. I use NetBeans for 90% of my coding (the editor has the perfect balance of simplicity and features for me and Maven/Mercurial work much better IMHO) and the latest release (8.1) is really nice.... For powerful refactoring of Java code IDEA still has an edge.
&gt; &gt; The free Community Edition can be used for commercial development without limitations. &gt; Lol no. List of things not supported (AKA limitations): In case you *actually* didn't understand what I was saying: I was talking about *legality*.
I am just used to Netbeans which does not differentiate between projects and modules AFAIK. In Netbeans you can just say, I need this project as a dependency and it will be added. No need to transform it into a module first.
In IntelliJ, there is also no need to transform it into a module, as I've written. You're probably talking about where in the interface you'd rather like to have the functions, but that's not quite professional.
Interesting results though I don't think unexpected. Even if the performance of synchronized HashMap was better than ConcurrentHashMap, unless I had a specific reason that I needed that performance boost, I'd personally still go with ConcurrentHashMap. No need to reinvent the wheel and run the risk of missing something in the roll-my-own implementation.
First implementation written in Java.
No need to roll your own implementation, the Java standard API [already has synchronized wrappers for maps](https://docs.oracle.com/javase/tutorial/collections/implementations/wrapper.html).
ConcurrentHashMap uses no lock in most cases, and with lock on a much small key space. It should be faster than synchronized. In the one-thread case, since both has no contention, they would perform similarly.
Blanket statements like this are good to know, but bad to believe. You need to test your exact workload. Test results can be very surprising.
The usual setup is Apache Web Server as a front-end and using mod-proxy to access the J2EE app in the backend. Of course this isn't written on stone and you may have particular reasons to do otherwise (e.g. an application in a private network with few, trusted users). Some points come to my mind: - A web server is optimized for serving static resources (e.g. HTML and JS files). An application server is optimized for activating Java objects responding to requests (e.g. servlets). This might have an impact on performance if your server is overloaded. - Security. Mod_proxy may filter some requests. - The front end usually changes much more often than the backend. It might be easier to deal with updates if you keep them separate. 
Your 'shotgun to the head' comment threw me of balance.
To be fair, there isn't a signficant difference between Flux and MVC. The whole Flux "architecture" started out of a misunderstanding at Facebook how to apply MVC for their apps and services. Instead of having well-defined MVC triads, they had a soup of M number of controllers talking to a soup of N number of views. This is not how MVC really is supposed to work, instead every view should have a well-defined single parent controller, and a controller should be talking only to its views. You can nest them in a hierarchy, but there's still a clear chain of responsibility in MVC, which at Facebook's idea of it was non-existent. By intuitively working out a more sensible solution, they've instead reinvented a proper implementation of MVC, but they've given the components their own name. Here's how it maps out: - Dispatcher = Controller - Store = Model - View = ...View - Action = View Events (or alternatively User Commands, depending on your perspective) Reinventing the wheel happens a lot in our industry, it's actually a healthy process, because it demonstrates that even through we find it hard to explain ideas to one another, good ideas keep getting reinvented and always come to the surface. When it comes to "the complex business logic, which adhere to the MVC pattern", the complexity doesn't come from MVC itself. It comes from everything else that's added around MVC that made sense to the author. Sometimes justified, sometimes not. But the pattern is really brutally simple. If you want to call it Flux, that's fine by me, but don't be surprised to see complex solutions pop up around Flux as well, because complex solutions will pop up in any environment. Flux is not a silver bullet to simplicity. It's just MVC.
I have the option to handle or not handle unchecked exceptions. Checked exceptions take the option away and that grates on me. By all means, engineers should properly document exceptions that clients can reasonably handle. But as a client, please let me choose what to do with them. I prototype code often enough that error handling isn't a priority in the moment. The fact that this exists: } catch (CheckedException exception) { throw new RuntimeException(exception); } Tells me they're a bit of a failed experiment. I don't think any newer languages continued that experiment.
&gt; If you ever plan to use them, and we're almost in 2016, you should. That doesn't make a lot of sense to me. You should use them if you need them and it is the right decision to make for your project or company, not simply because they exist. In my current project we actually do have a use case for Websockets and that need has been met very nicely by ActiveMQ. It has a websocket connector that we also expose back through our web tier. 
You're still losing out on putIfAbsent etc and have to do your own less-finegrained locking around multiple map operations.. 
putIfAbsent is available in Java 8 for both HashMap and the synchronized wrappers. There are a bunch of additional Map operation defaults that cover most of the common use cases. 
Better Maven support, better default hotkeys (I never have to use right click menus or the menus at the top) The fact that they can actually charge money for it while there are free alternatives is (imo) a sign that it's probably pretty good :)
It's all subjective, I have a friend who is die hard Eclipse and he is just as productive with it as I am with IntelliJ. I found that I like intellij better as the UI felt a little better to me and it felt less clunky, but he feels the same way about Eclipse. I'd suggest most people try out both and decide what feels better to them. No reason to argue over subjectivity! Feature wise, they usually have different takes on the same thing - though there are some nice new features in IntelliJ since 14 that I am not familiar enough in eclipse to know the equivalent. Some better Java8 support, decompiler and improved debugging (inline var view - shows variable values in the editor, show references in stack, lambda in the debugger, hover over evaluators to see the result). 
Thank you for pointing out. We have reduced the price.
I'm aghast that any application is using standard Java serialisation for passing user-describable objects around. That being said; a lot of these "vulnerabilities" in the article seem to rely on having access to the admin interface ports. 
&gt; http://www.visprogramming.com/armory/try/ Ah, didn't realize that, I'll give it a shot next time I'm coding.
And holy shit, thanks! I reinstalled Corsair Utility Engine and that fixed it for me after a restart. I didnt think anything of it, since CUE keeps my drivers up to date. 
If you're not afraid of (or reluctant to) programming, my article may help you to get started: http://www.beyondjava.net/blog/how-to-count-java-objects-in-memory/
Sigh. Does spring make app servers obsolete? 
This question is on /r/java at least once a month. 
Get a mic, and a code editor. Nobody wants to read a notepad of code. 
I doubt it. These problems are impossible to solve without rewriting core parts of the JVM. At a glance it sounds like WebLogic multitenant option is more focused on managing multiple processes within one server rather than multiple apps within one JVM. If that's the case it's more of a IaaS/Docker type container play than it is addressing any of the downsides I mentioned to Tony's suggested deployment model. It probably is a better case for WebLogic still being relevant than Tony's point as well in that case.
I do not see why it can not be fixed. The issue is that Apache Commons' LazyMap is serializable. And it has custom readObject() method that invokes the lazy initializer function. All the attacker is doing is placing Runtime.exec("payload") as the lazy initializer function. Well, there is a lot of craftsmanship required to make it work, of course. While Apache Commons Collections library is widely used, I do not think anybody (of sane mind) is ever serializing lazy map. That is a ridiculous notion. If you want to serialize it - make sure it is fully initialized first. I am saying that a simple fix to the Apache library would make LazyMap to not be serializable. Edit: I take it back. Just noticed that there is also another exploit (CommonsCollections2) that uses the same problem in java.util.PriorityQueue - it re-orders elements in its readObject(), and the attacker is placing Runtime.exec(payload) into comparator. Fixing PriorityQueue serialization will be harder - it will require a JDK release. Still possible to fix, of course, but it may break more applications...
It makes app servers into libraries instead of installable apps. Deploying as an executable jar nearly does away with the need for containers even.
Just to give one example, I used to maintain an app exposing Web services with authentication. I could either use the container security (which makes more sense) and use Weblogic or Websphere specific libraries or use simple portable things but not manageable from the container. I went for the container specific code. 100% of my customers used my installation script to create users only for my app. So there no advantage for containers. This is an argument I've had many times with Grails programmers (I am one, don't shoot). It allowed RAD but it was implementing it's own user management, datasource handling and more. Getting that app to run on Weblogic was always a challenge that ended with huge war files and pain killers. Nowadays, I tend to see application servers like Weblogic as obsolete and favor lightweight stuff in docker (spring boot is my friend)
We have pretty much always used the AS as an installable library.
So, what you are saying is that software with major bugs, like memory leaks or doesn't shut down correctly, can cause issues. AND, if you do suspect a particular process is causing these problems, then move it onto a instance on its own until you figure out the problems. 
I've considered java EE app servers to be "legacy" for some time now, my two most recent companies moved away from jboss in favor for tomcat or jetty and when I talk to other developers the trend seems to be the same there
Docker and microservices are not the solution to all problems for everyone. They are not the second coming. I am more of a Tomcat fan rather than big app servers, but they do have their advantages. Also, Docker is still early adopter material and you will hit some hidden costs- I'd only play with them if I had resources to spare, a very clear picture of the problem I wanted to solve with them and a low-risk opportunity to put them in practice. 
One of the reasons that I recommend to install the JDK instead, because its JRE doesn't have that crap. It also doesn't install the browser plugin, the only security problem Java has.
This is confusing for someone who doesn't know anything about programming.
To avoid all the bundled bloatware you can try installing: * The Zulu distribution: https://zulu.org/download/ : Fully Open-source builds of OpenJDK * The Oracle JDK as /u/king_of_the_universe suggests (On most Linux distributions, you can simply install openjdk packages directly).
Some aspects of docker aren't ready for production sure. But large organizations have been using docker in production for a while now. Don't get behind the tech curve because it's too different from what you're comfortable with. Docker sneaks into your org because it's so useful. Docker is pretty much incredible for automated testing. And once you've got your tests running on it, guess what? You start to trust it more.
Yes, it's great for testing. It's a very nice chroot, also very useful for instance for building packages. It is good for development environments. However, I don’t see really the big benefit worth taking risks for in production. Unless you have huge scale and the efficiency benefits are tangible $$$- but very few orgs operate at that scale. 
That should just be for the installer application. After it starts running just make sure you uncheck the box for the Yahoo toolbar add-in.
No, you don't need admin interface access. I initially thought that, then about half an hour later it hit me.
^^ THIS!
My copy of Winzip is not expired
If people write about suggestive values like **Readable** it is better to give a concrete example to showcase what is more readable so people actually **see** an example where it makes it more readable.
You are right, just renamed the project to [UnixStream](https://github.com/benas/UnixStream). &gt; "There are only two hard things in Computer Science: cache invalidation and naming things." - Phil Karlton 
May I ask why you don't prefer C#? It's rare for me to see that, so just curious.
Usually it's a matter of personal preference. I *prefer* Java, but the way I see it Java and C# are practically equal.
Swift is being open sourced this year. Unix a go go.
News to me, that'll certainly be interesting! I heard quite a bit of negative feedback in my circles about the language (but that was early 1.x days). I bet it's much friendlier than ObjectiveC though. [OpenSource Swift Announcement](https://developer.apple.com/swift/blog/?id=29)
It's not that easy. I can talk about weblogic because that's the thing I'm more used to, but I'm sure other app servers have similar stuff. T3 has this thing, tunneling, which allows you to to put your T3 inside a HTTP connection. There are other scenarios where your RMI traffic and your HTTP traffic get mixed up, like if you are dumb enough to use HTTPClusterServlet in production, or you enabled the management rest interface, or your ops people enabled remote JMX to the world because JVisualVM and Mission Control are so cool with their gauges and stuff and you need to do authentication to use it anyway (and you have the Coherence plugin/weblogic tab in those tools with important metrics they need). A smart guy can write a scanner to find those hosts, hell, maybe you can trick Shodan to do that for you or write a metasploit module. With this vulnerability, you can attach a meterpreter to those machines and do evil things, and you are **NOT** in the other side of the hatch. So yes, this is a big deal.
I'd suggest starting with them independently so you get a solid understanding of the underlying concepts before you dive too far into the abstractions available on top of them. Start with core Spring so you can get an understanding of its basis. Once you're good with that look at the spring-orm module which will get you across the basics of hibernate/jpa. Then look at spring-data-jpa and the amount of boilerplate you can stop owning. Once you are across the various underlying technologies involved with tools like spring-boot or jhipster then you'll have a much better understanding of what they're doing for you behind the scenes. Similar to learning maths in school where you're not allowed to use a calculator until you can do it by hand...
Having worked with both Java and C# for many years, I'd pick Java over C# any day. C# and the whole .NET platform stinks.
Yeah a language designed by Apple for Apple only products is going to have a significant share next to Java, C, C++. Nope.
JAVA SLAYED RUBY and then it took out Python. It's next target JAVASCRIPT!!! Seriously though, a lot of front end work is being move more to the client side. Frameworks like AngularJS makes things easier. Taking away from the old school MVC frameworks like Struts.
With those methods, do I have to manually navigate to them and download each time Java wants to update? Or will those versions always update with clean versions?
C# on platforms other than windows is slow and less than impressive. Java doesn't have that problem, there is no comparison if you need to deliver code across windows, mac, and linux portably.
Wa-hoo Visual Basic is slowly coming back! /s
what's haunting is VB. NET jumped from 192 to 9 from 2010 to 2015. It needs to go away.
Importing the package with maven into Intellij 15 and It doesn't seem to be able to find most of the Classes or even the "prepareHttpGet" from the example.
Mostly because of Swift. 
My long term strategic bet is Rust, once it gets more stable. Next year it will go from top 50 to top 10. 
Lisp is still the first functional lang in the list. Come on F#
Just wait. As [RAM becomes incredibly cheap](http://yourdatafitsinram.com), moving things back to the server is a very reasonable decision in the next 5 years...
Looks like you're out of luck. Java 8 can not go lower than High Security, meaning some form of security is usually required for the JAR. Java 7 can go back to medium.
I would personally recommend math.hws.edu/javanotes as a free online textbook to go through. In contrast with many other online tutorials, this textbook goes through the language in depth. It's what I used to learn programming.
The one that suits you best.
I think eclipse is the most common, but I think it's because most people start with it and not many people change. I personally think IntelliJ is far superior
This is precisely why the Java eco-system is better. Beginners can use the Java language, which is pretty bare-bones. Advanced users can use Scala, Kotlin, Clojure, Frege, etc.
I have NetBeans and Intellij and I use NetBeans for most of my work. The new 8.1 release is well worth a look
Which ever one your employer wants you to use
To answer the question literally: [Eclipse is used by the most developers](http://zeroturnaround.com/wp-content/uploads/2014/05/2014-leaderboard-of-java-tools-and-technologies.jpg) but IntelliJ may actually be better. It has certainly the most vocal user base here.
I'm no where near veteran status when it comes to Java. Only been using it for about 6 months and I found this to be the best way to learn. I had an idea for a project and decided to make it. I my have re-written the thing 15 times, each time is because I learn a new technique or way to solve the problem. If I were working for a company this would be impractical but since its a personal project I don't mind re-doing things. Start writing your program then when you need to do something you don't know how, look on Google. Read through articles or tutorials or even other people's questions (these are invaluable) then start writing your own implementation of it. Before you know it you've learned something new :)
MVC is a component-level pattern, it was never meant to be a giant flat mess of controllers and views the way Facebook implemented it, and a mistake many others do, especially the various "web" frameworks out there. You know, the ones that have three folders: controllers, models, views, and you're supposed to put everything flat in there. That is not MVC. The books show simple examples, because MVC is that simple when used correctly. Of course, once you've handled the components, you want to handle higher level abstractions as well. This is why MVC can be built into a hierarchy. Check HMVC for an idea of how that works. If you have questions about it, let me know, but it's a really simple pattern that can build as complex system as you throw at it.
I have asked myself this question as well. It's hard to tell if it's just that we are so much more familiar with imperative programming that we consider it easier to read simply because we know it better, or if it is indeed easier to read because it more closely resembles what the computer actually does. I tend to think that we are so used to modelling objects and state in our minds that we somehow think this is the natural and most easy to understand way to think about code. However, thinking about functions might be just as natural and easy to understand later.
If you are a professional, it means that you earn money by using your IDE. Jetbrain's Intellij IDEA.
Umm, the speed of light is a tighter bottleneck. The minimum latency at the level of photons is 71ms half-way across the globe. Add to that the latency due to switches and ACK packets, and you have greater than about 200ms round-trip-latency, and about 100ms streaming latency. You could have multiple servers spread across the globe (a more complex form of a CDN), but there's a big financial and technical cost to it.
The way I understood things is that Jersey MVC is effectively a clone of Spring MVC. "MVC" (terrible name, without any official prefix or suffix) was likely started as a clone of Spring MVC as well, but without Spring support you could also say it's a clone of Jersey MVC (but then it's effectively still a clone of Spring MVC). The same person who worked on Jersey MVC also works on "MVC".
I am a veteran!! - However I still do personal projects, and I still rewrite them many times. Its the best way to learn and keep ahead of the technology curve!
if you need free IDE it's either eclipse or netbeans. https://blogs.oracle.com/geertjan/entry/james_gosling_weighs_in_on
I can't recommend Head First Java enough: http://www.amazon.co.uk/Head-First-Java-Kathy-Sierra/dp/0596009208
I would genuinely be interested in knowing as well. Been using eclipse for 7 years now without major hiccups.
Then you're an idiot. I have used it with great success for a decade. "It's a sorry carpenter who blames his tools for his poor work."
Intellij
Eclipse
if swift is opensourced,i bet google could take a stab at building compatibility with the Android Runtime, that would be a huge blow to java's popularity
I used to pick things that were already implemented hundreds of times and implement my own. The reason I did this was because the problem was already very well understood and easy to find material on. When I was younger and wanted to be a game developer the first game I wrote was a BrickOut clone. That game has probably been made thousands of times. So I found all kinds of advice. I think if you pick something rather common that you find interesting and implement it yourself it's a great learning experience. Just make sure you don't copy from existing implementations.
My default answer is: It doesn't matter as long as you use either Eclipse, IDEA or Netbeans. They all have their pros and cons, but are mature enough to be used professionally.
This one is really good, especially so when it is a matter of things clicking into place.
Beside the advice posted about head first java book I would like to add this playlist as an advice: https://www.youtube.com/playlist?list=PL9DF6E4B45C36D411
A few speakers at this year's JavaOne asked the same question to the crowd. I was actually baffled to see that the majority of them raised their hands when they were asked 'who uses Eclipse'! 
Looks pretty cool, makes it look easy to work with WebSockets :) Quick question though: How are [these methods](https://github.com/tipsy/spark-websocket/blob/master/src/main/java/Main.java#L14-L16) called if the Main class doesn't inherit anything? Where are they defined and how come they don't need to be called from another object?
Netbeans.
Notice the static import at line 6: import static spark.Spark.*; You could also write Spark.staticFileLocation("public"); / Spark.webSocket("/chat", ChatWebSocketHandler.class); Spark.init(); And skip the import. But we encourage people to use static imports when using Spark :)
Don't feed the trolls people...OP is more than capable of using search since this question is asked once every 1 or 2 weeks.
IntelliJ Community is still better than Eclipse for me. I have Ultimate at work and I use it for everything.
I'm not interested in knowing 'what peoples favorite IDE' is, but I'm trying to get some information about which IDE is being used by professional software developers where they are \ have been working.
anyone else try to open the live example? I got a socket closed error. is that my work IT filtering or on their end? **edit** works now. strange.
Very nice. I like how you have the end to end code path all covered.
This is not a job board. &gt; News, Technical discussions, research papers and assorted things of interest related to the Java programming language
Wow. *Object Oriented Programming*... ***Java***... And I thought, those niche specialists ran out of job opportunities?
Then again those searches would also boost all JVM languages alike.
Ah ha, thanks for the tip
Oh thats nice. Didn't know that spark supported web sockets. 
lol we call it LOGGER, just how it was done before I joined but I guess it's because it's a constant.
Its not that is not OK, but can you imagine if every one post all their project updates in here ? Unless your project is a big known one, its not just interesting enough for most subscribers... no ?
Yes, but that's only true for people who do this for living. Not for people who work in application server marketing, or are trying to beef up their CV with academic MVP programs by spamming forums.
LOGGER/logger/LOG/log - doesn't matter, just be consistent
As long as it's not __logger, amirite?!
I always use log but I sure do see the argument for LOG. I use caps everywhere else for static final.
Check the MT feature. It enables admin to set some low level boundaries and priorities for the partitions (tenants) in the domain.
As others wrote: "Effective Java, 2nd", "Java Concurrency in Practice", chapter on concurrency in "Thinking in Java, 4th" (Bian Goetz help with that). Also there is a lot of Java concurrency examples here: [Java Concurrency Tutorial](http://farenda.com/java-tutorials) section @ Farenda.
But that would require submitting one link to a tutorial instead of 5 to each part.
The use of static imports is generally frowned upon and is recommended to be used sparingly. Typically, when you need to access many constant values and want to improve (marginally) readability. However, you sacrifice context by not using the class name that holds the constant. The bigger risk with using a static import is that it increases the likelihood of name conflicts. In the case listed here where the Spark class appears to be a singleton controller, it would be better to import it explicitly in the import statements.
If this interests you, you may want to check out socket.chat.
Lombok user, so 'log' . 
Latest JVMs do have resource tracking built in actually, which can track memory usage. If an app server supports the API it can do that. 
I use log, but just be consistent.
&gt; Programming is not a one size fits all thing. Each programmers must pick their own tools which fit their own notion of how to best do their work. Don't agree at all. I've switched between several now, and most them are like choosing "would you like to hit nails with the red hammer or the blue hammer?". I'd rather never use Rational Application Developer again (IBM), but Eclipse, Intellij, Netbeans...they're not that different. The cost of everyone using a different IDE is higher than the cost of having new people learn a slightly different IDE for the most part. I personally prefer a "here's the official ide, if you want to use another one you can but then you have to deal with incompatibilities and making sure you don't break others builds" environment. 
I've used both Eclipse and Intellij in the last year, both have Maven bugs, I found Intellij's shortcuts to be worse than Eclipse's by default coming from a windows background. 
We use sLogger. s denotes that it is static 
"log" is short and sweet.
[Cloud Messaging](https://developers.google.com/cloud-messaging/)
Can you provide more details? Is this client server? Both clients? Is there a server at all? Do you have a DB? Even a local one? What data do you want to share? The answer to the question you asked is yes, but I don't think that's the answer you are actually looking for.
Yup...client-server...its a restaurant thing...the waiter has tablet(client) in which he sends the order to the desktop(app), the desktop app updates database, and also prints the bill
Well, the easy way is to use http requests, similar to a webpage with ajax. In this scenario your server would have a REST API that the app interacts with. Or you can go more complex and use a custom protocol with sockets and all that fun stuff.
I am amazed by this. Back in the day we would have send someone to catch up on distributed systems to understand the different ideas of how to connect services and systems. Nowadays the answer is "Use this cloud thing".
LOG
I should work with you on the Java project... 
Regarding the static/non-static question the [slf4j FAQ](http://www.slf4j.org/faq.html#declared_static) has an entry about it.
[removed]
I changed from log to LOG because I get annoyed with Netbeans 8.1's yellow.
I'm just starting out myself (currently at the end of my first semester, learning object oriented programming with Java) and I really found [this book](http://www.amazon.co.uk/Java-Beginners-Guide-Herbert-Schildt/dp/0071809252/ref=la_B001H6PSMG_1_1?s=books&amp;ie=UTF8&amp;qid=1447142063&amp;sr=1-1) by Herbert Schildt to be *really* helpful with understanding underlying concepts and how this language actually works! Other than that I'd strongly recommend you go watch and work through the [video tutorials](http://www.lynda.com/Java-tutorials/Java-Essential-Training/377484-2.html) by David Gassner over at Lynda.com - they're real clear and straight to the point (just as the book)!
Look at Protocol buffers and GRPC (sorry, am in mobile, you'll find the links easily). 
Jboss 6 is certainly not the latest version of jboss. And was never officially supported. The JMX Servlet has been removed (for security reasons) long since in Jboss 7. So they did fix this exploit years ago. BTW If you have a quick look at the directory structure shown in the post, you can easily see it really is about jboss 6 and not about EAP 6.
Ignoring the cloud answers, the desktop could start a small http server. The app could then connect via web sockets and create a two way tunnel.
I theory yes, but I know it doesn't work as easily as this in practice. You could try creating your own JAR and experimenting with that.
I'm using logger (lowercase), but don't really know why. All my other constants are UPPERCASE. :S
I use LOGGER in upper case everywhere. Additionnaly, you should consider [Log4j2](http://logging.apache.org/log4j/2.x/) which allows to not have to fulfil the enclosing class when you retrieve the logger. private static final Logger LOGGER = LogManager.getLogger();
It's a "hack" for mimicking named parameters. I think the only purposed is to make the code more readable.
&gt; I think the only purposed is to make the code more readable. I think you must be right about that. Annotations would be cheaper.
Maven really needs package signing, or at least checksums. How can we trust that the packages in a mirror like this haven't been tampered with? 
So now even metadata about packages I use is valuable?
Currently I'm not aware. I guess it could be a fun week end project to do.
Hello, my Post was ment as a starting point. The topic can easily fill a book when going into detail. And actually there are some good books out there... bye Thomas
Alternatively, set up a simple intellij live template that will generate this logger line, sample on http://agileek.github.io/intellij/java/2015/03/01/intellij-live-template-log/ (log + tab should auto complete it)
tl;dr: non-static HOFs that reference `this` prevent their enclosing instance from being garbage collected. Solution: either minimize HOFs, or only use static, pure HOFs.
I hate overarching rules like this. Other languages also close over the enclosing state and its not an issue. It's not any different than returning an object with a reference to this. Know what you are doing and things are fine. 
I've been trying to get Nexus supported for months... Nobody's biting :(
This is actually what prompted our work conversation. One guy used to do "_logger", another guy did "log" and I did "LOG". We all decided to change to "log" (standards and all that), but then Netbeans 8.1 came out and is yelling at us to change to LOG. I personally don't care that much, but prefer either LOG or log (less typing).
NetBeans has always had brilliant Maven support
Submitted 3 days ago without the blogspam: https://www.reddit.com/r/java/comments/3rvaha/what_do_weblogic_websphere_jboss_jenkins_opennms/
It should be noted that *this* (for example) is absolutely fine: public &lt;K, V&gt; memoize(Function&lt;K, V&gt; f) { ConcurrentMap&lt;K, V&gt; cache = new ConcurrentHashMap&lt;&gt;(); return k -&gt; cache.computeIfAbsent(k, f); } Here, the lambda is obviously closing over its outer scope - on purpose, since we want the cache to live with the memoized function - but isn't capturing the enclosing object, because it doesn't make reference to anything that belongs to it. So, yeah. You need to think about what state you want the function carrying around with it. It's not really a question of purity, though: pure functions close over their surrounding context *all the time*.
Indeed as well as ant and gradle. That was the selling point for me over eclipse many moons ago *edit: That other build system could easily integrate and work as expected
The remediation here is absolutely ridiculous, which is just delete a class from a jar. Then what? Hope for the best? This sounds like a great plan. Just delete some code and hope nothing breaks. The original exploit used administration features of the app servers. So how about we just don't allow access to those admin ports over the internet so this can't be exploited outside the local network of your app server. Any sane configuration is already set up this way anyways.
Eh, I give Oracle a bit of a pass on it: Need to help maintain development with money anyway they can, and it's an inherited concept. When Sun did it few people batted an eye because they conceded that the developers needed to make some money from it where they could, Oracle continues the practice and gets skewered because they're Oracle.
FYI https://github.com/apache/maven-indexer/tree/master/indexer-cli
Why can Python do it without requiring such things?
oracle, teradata and others still make you register first and give you a manual download afterwards...
"HOFs" -&gt; "Higher order functions". 
&gt; Seriously though, a lot of front end work is being move more to the client side. It's called "reinventing the wheel". It doesn't provide any benefit, in fact it makes debugging and logging noticeably more difficult. 
Yep! Sorry for the jargon. 
I like artifactory a lot more than nexus. (Artifactory has a nicer ui and more powerful ways to interact with it, plus does other stuff like hosting npm and docker repos) Having a central repo for developers should be a no-brainer. It's much simpler and easier to have a central server mirror all the third-party repos.
Sure, but i tend to prefer simple solutions from the start instead of relying on IDE tricks / configuration.
or just reference it directly: "Hello from " + EnterpriseBean.this
You're seriously comparing Python to Java? The two aren't even remotely close in proliferation, libraries, feature set, complexity, speed, or any other metric you'd care to measure. Python is a handy language, but it's not in the same ball park, or even in the same league as Java and the JVM.
True and unfortunately it has probably been too long for me to recall specific irritations. Perhaps it's worth checking out again. I just remember feeling that it was cumbersome to configure / work with and painfully slow at times.
that's interesting we use nexus for maven and sinopia for npm. Would be nice to have something centralized.
Two issues: First, it's not irrevocable. Termination of grant might supersede GPL, but that's a weird one that has nothing to do with this. The more common revocation would be of a violator to the license. If you violate the license, the owner could opt to revoke. Second, the Oracle v Google issue is closer to a contract dispute. Oracle likes to license Java and the trademark, while Google didn't play nice with Oracle's wishes. To summarize the dispute, Oracle fears that Google's version of "java" is actually harmful to the ecosystem (see: compatibility and willingness to move forward from 1.6). So, the two real questions should be: Does there exist a contract that prevents Google from doing what they're doing? Without a specific contract, is Google following the GPL (and respecting trademarks)? 
Isn't this problem solved in javascript by copying a reference to this and using the copy in the enclosing instance? Would the same pattern not work in java? Java supports closures as long as they're final.
GPL2 says: &gt; parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance. That means I can GPL2 license to many people, and later if for whatever reason I cant use specific code, all I have to do is download from any of those again to get a new license which cant be terminated as long as I obey GPL2. &gt; compatibility and willingness to move forward from 1.6 java1.6 is java and always will be. Each version has specific features. &gt; Oracle's wishes An important purpose of opensource is nobodys wishes overpower anyone elses since it can be branched and they go their separate ways.
You are willfully ignoring the core of what I said and instead attempting to drum up an argument. &gt;GPL2 says: &gt;&gt; parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance. &gt;That means I can GPL2 license to many people, and later if for whatever reason I cant use specific code, all I have to do is download from any of those again to get a new license which cant be terminated as long as I obey GPL2. That does not follow the argument. Federal law trumps licenses (read: contracts), always. &gt;&gt; compatibility and willingness to move forward from 1.6 &gt;java1.6 is java and always will be. Each version has specific features. I'm trying to explain the dispute, not give an outtake. &gt;&gt; Oracle's wishes &gt;An important purpose of opensource is nobodys wishes overpower anyone elses since it can be branched and they go their separate ways. Unless you read my post and understood that we're talking about a contract, completely unrelated to the GPL. The Oracle v Google case has nothing to do with the GPL, sans attempting to expand enforceable content to include API (which is a general copyright issue, not GPL issue). If you want to frame it in context of the GPL, just show that Google is using GPLed code under the GPL license. Just because they could, doesn't mean they are (see: dual licensing).
Using `this` seems unlikely to me.
&gt; That does not follow the argument. Federal law trumps licenses (read: contracts), always. Which law is contradicting my legal right to license Oracle's GPL2'ed patents to everyone on the planet, which Oracle has already told me I could?
Use this opensource LGPL software http://sourceforge.net/projects/jsoundcard which you can put in any function that reads microphone amplitude and writes 2 speaker amplitudes in realtime. It automatically adjusts buffer sizes by statistics of thread timing. The same code has a delay on Windows but barely noticable delay on Linux.
&gt; based on evidence of failure to comply with the terms of the grant agreement GPL2 is the terms it has been granted under. GPL 2 says: &gt; You may not impose any further restrictions on the recipients' exercise of the rights granted herein. This is what Sun offered, and then on some extra code Oracle offered, to everyone. They chose to GRANT it under those terms, and only under those terms can it be terminated.
illusory wall and then friend ahead
Finish reading before you respond.
You are completely confused about what google did. 1) They did not copy OpenJDK which is under the GPL google like most companies does not like the GPL 2) They copied Apache's re implementation of the java spec which was under the APL. Which at the time Sun was not very happy about either to the point that they would not give apache access to the compatibility test suite. I really think all the outcry and name calling is what ended up causing Sun to create the OpenJDK project in the first place. So the court case is not about the GPL at all. This is about Googles re implementation of java with out using the GPL'ed code base. And Oracle trying to claim that they own the copyright to certain parts of the code that they thought google copied (by mistake or otherwise from OpenJDK) Google won that point so they are now fighting about Oracle's claim that they own a copyright to the API itself or essentially the method and class signatures which every one to this point understood could not be copyrighted. This is still ongoing. Again non of this about the GPL. You can fork OpenJDK all you want as long as you don't call it java and you leave it under the GPL. Remember also that Google released their implementation under the Berckly license which the APL will allow you to do but the GPL will not. 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/functionalprogramming] [Beware of Functional Programming in Java! • \/r\/java](https://np.reddit.com/r/functionalprogramming/comments/3scq2j/beware_of_functional_programming_in_java_rjava/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
&gt; they would not give apache access to the compatibility test suite. Actually they would - like they would anyone else. But not for free. The compatibility test suite is not just a bunch of tests, it's Sun working with the partner for months or years to attain the compatibility. So Sun should just do that for free? Apache were just cheap. 
Spring Boot does certainly not obviate the need for an IDE, but they all work fine with it (NetBeans, Eclipse, IntelliJ). 
Wow I will add that to my readme as well. Thanks!
It also takes up to a day to get replicated across all the mirrors.
no, just know javafx and java, would like to get into network programming, with dektop gui in a local environment because internet connection in our area is unreliable.
This case has nothing to do with the GPL. It's very simple. Google re-implemented Java and that's what the problem is. If they forked OpenJDK and made that run on Android we probably wouldn't be having this discussion.
You can verify the pgp signatures with a plugin: http://www.simplify4u.org/pgpverify-maven-plugin/index.html It's also possible to pin the pgp key.
Good point. Fixed.
Does that seem more likely? class Test { public static void main(String[] args) { Runnable runnable = new EnterpriseBean().runnable(); runnable.run(); } } class EnterpriseBean { Object[] enterpriseStateObject = new Object[100_000_000]; Runnable runnable() { return () -&gt; log(); } void log() { System.out.println("Hello from: " + this); } } You don't have to write down explicit `this` references to achieve this effect. Any implicit `this` reference will do the trick, e.g. calling any instance method.
Yet, you can still make this `memoize` method static, just to be sure.
But ecllipse's documentation is really lacking :(
Am I missing something or is this just a pitch for your book since there isn't a whole lot of content in that blog post. There's an intro and summary for chapter 8 and then....?
When business people can't precisely define their needs or can't make a clear naming convention or can't assign responsibilities, which all happened to me, the solution was to sit down with them, clarify and simplify. Because the actual problem was with the business. What I don't quite see is how introducing the engines helps the business (in the long run).
by 'fun', do you mean difficult?
I'm trying to configure our current spring application to run as a spring boot application and I am running into issues. Does Spring Boot require a certain spring version in order for that to work correctly? (microservice in development and normal war packaging at staging/prod?
Yay, a language that's been in beta 4 years &amp; not on the Tiobe top 50 languages is now supported! /s
Is there any more information about the issue in Commons? Unless Weblogic is using it in some strange way, I would presume almost every application server out there could be potentially vulnerable.
This is somewhat wrong. Oracle is claiming the API structure itself is a protected copyright. So for example, if you have a function (in any language) defined like println(String str), Oracle is claiming you infringed their copyright unless your language is GPL. It's pretty shady, Oracle deserves to be punished for abusing the legal system this way.
I'm a bit confused. Will any application running the Apache Commons library be vulnerable? Or is it only when deserializing objects from untrusted sources?
Only when deserializing objects form untrusted sources. Well, technically, this is beyond Apache Commons, it is just Apache Commons is one vector of this attack, and Apache Commons beings so...common...makes many applications suspectiable.
An alpha version is not yet supported?
unfortunately not. only GA versions are supported. JBoss EAP 7 GA (supported version of WildFly 10.0.0 Final) will be hopefully soon out. Unfortunately RedHat has not published release dates yet :( 
Like https://github.com/mikaelhg/spring-boot-webpack-es6-react-poc?
Question regarding code style: What is the advantage of using a member attribute like in the [websockethandler](https://sparktutorials.github.io/2015/11/08/spark-websocket-chat.html#setting-up-our-websockethandler)? Wouldn't it be more efficent to just pass the values on as parameters without assigning them first or whats the thinking behind this?
Is it already mentioned anywhere that JBoss EAP 7 GA will be WildFly 10.0.0 Final? Historically seen this is unlikely. See my old blog entry about this matter here: https://henk53.wordpress.com/2013/01/09/the-curious-case-of-jboss-as-7-1-2-and-7-1-3 EAP.alpha releases have more often been identical to a release from Red Hat's parallel named beta program (called AS before, now WildFly). But new this time is that an EAP.alpha is identical to an RC of an AS/WildFly release. That makes it into some 2d or even 3d versioning. An alpha of an RC of the beta program releases. Confusing, to say the least. But a EAP GA release being identical to a beta program release is very, very unlikely. Assuming that WildFly 10.0.0 Final is the last beta release in the EAP 7 series, EAP 7 GA should be that WildFly version + a couple of hundred (typically, see historic data) bug fixes. On the JBoss mailing list there was a mention of WildFly 11 starting soon, and since EE 8 is nowhere in sight, my humble guess is that we'll still be seeing another beta program release cycle (meaning, WildFly 11) and then sometimes after WildFly 11 see an EAP 7 GA (which will be WildFly 11 then + those hundreds of bug fixes). 
/r/javahelp
Mostly syntax, thank you!
The JDK doesn't come with an IDE (anything for you to type code in). It comes with a compiler, libraries, and some tools for inspecting your code and your programs. These are IDEs: - https://www.jetbrains.com/idea/ - http://www.eclipse.org/ - http://www.bluej.org/ (I've never used this thing but it seems to be popular in classes) - Or your own choice of editor + javac Also this sub is for technical discussions about Java. If you want to learn the language and need help doing so you should head over to /r/java as /u/loganekz suggested.
Don't do it. You will be trapped in a proprietary lock-in if you use things like Spring, Dropwizard, PrimeFaces, Wicket, etc. Yeah, they are open source but they're not standard. Don't fall in the FUD against standards promoted by Pivotal and the like.
 I found the book "Spring in Action" by Craig Walls to be useful. 
Now THAT'S what i call amazing! Ty for sharing! 
Very fascinating. Compilers are fascinating indeed.
Will I also be trapped in a proprietary lock-in if I used hibernate instead of eclipseLink or log4j instead of java.util.logging?
The technical keynotes are well worth watching, especially the SE part which explains Project Jigsaw.
As does returning an anonymous interface implementation in that situation. That is entirely what I would expect and can be worked around.
Also: `Runtime.getRuntime().maxMemory()` returns the max amount of memory (in bytes, it's a long) the JVM can allocate. I think that's the amount that can be adjusted via the -Xmx parameter. `.totalMemory()` returns the amount of memory that the JVM has allocated of the above. `.freeMemory()` returns the amount of memory still left *inside the allocated memory*, which means: If you want to know how much memory your application is actually using, look at totalMemory()-freeMemory(). You will notice that due to not yet performed Garbage Collection, the amount of freeMemory decreases constantly, and then it suddenly jumps back to a small number. So, if you for some reason need to know the *actually* used memory, call System.gc() directly before reading the above info. This comes with a performance hit, so you can't do that e.g. in a fast gameloop (I tried it, solved the problem by adding a GC hotkey). For convenience, here are two methods: /** * @return A simple memory usage info String, for example: * &lt;p&gt; * "max allocatable mem = 1812 MB; allocated mem = 143 MB; unused allocated = 125 MB; used allocated = 17 MB" */ public static String getMemoryReport() { final Runtime r = Runtime.getRuntime(); final long maxMem = r.maxMemory() / MathUtils.MEMORY_MEGABYTE; final long totalMem = r.totalMemory() / MathUtils.MEMORY_MEGABYTE; final long unusedMem = r.freeMemory() / MathUtils.MEMORY_MEGABYTE; final long usedMem = (r.totalMemory() - r.freeMemory()) / MathUtils.MEMORY_MEGABYTE; return "max allocatable mem = " + maxMem + " MB; allocated mem = " + totalMem + " MB; unused allocated = " + unusedMem + " MB; used allocated = " + usedMem + " MB"; // return "max heap size = " + maxMem + " MB; current heap size = " + totalHeap + " MB; space left in heap = " + unusedHeap + " MB; space used in heap (derived) = " + usedHeap + " MB"; } /** * @return The amount of bytes *actually used* by the application. Call System.gc() directly before this if you want * to get rid of the yet-to-be-collected garbage overhead. */ public static long getUsedMemory() { final Runtime r = Runtime.getRuntime(); return r.totalMemory() - r.freeMemory(); } 
Any recommendations? My colleagues on-site recommended [Design Patterns in the Light of Lambda Expressions by Subramaniam](https://www.youtube.com/watch?v=e4MT_OguDKg).
If you only use the parts of hibernate that are exposed by JPA, then no proprietary lock in.... JPA is a bag of dog poo anyhow.....Really, ORM is an antipattern.
You should use only the API defined in the JSRs. If you use anything else you're just being stupid (no offense) getting into the trap.
You have done nothing to elaborate. I think even the Free Software Foundation would be okay with what Spring/Pivitol. You just sound bitter.
defiantly not - it happens quite frequently when publishing xml snippets in blog articles. 
Fucking loving JHipster. Thanks! I've been using it against the unsuspecting doubting Thomases...'You can't get all that done that fast.' 'No? It's already done.' It's like a goddamn superpower. The more recent data model-to-code stuff has been a real godsend. The Roo's got nothing on you! I'm looking forward to what's next. BTW why isn't there an /r/jhipster ?
First of all, this doesn't answer OPs question. What you're saying is also contradictory. If you only use the standard, aren't you also trapped in a "proprietary lock-in"? The standard has to be implemented by a proprietary third party at some point, so your point doesn't make sense.
You are a retard. If it's in the standard you can switch from one vendor (let's say WebLogic) to the other (JBoss) easily.
Video and slides were really well done. This is only the tip of the iceberg. I'm rather excited about doing some HTML5 hybrid development inside Codename One.
I'm curious what people who have used both see as the advantage to using Spring over Java EE. Given that Java EE is the official specification, isn't Spring just an implementation of that specification? I understand that it exposes additional features beyond the spec, but isn't the point of coding to the spec to keep your codebase agnostic to the implementation layer?
Yes. Read up what a MIME container is, and how they can be manipulated in Java. Read up on the SMTP protocol, and how you can interpret MIME message headers. On spam filtering, you won't be able to get to a very advanced solution, but take a look at http://www.r2d3.us/visual-intro-to-machine-learning-part-1/ to understand how machine learning is utilized.
Sure. Production wise I've used it for rapidly creating a saas app for schools. I've also done a couple of toy apps that were not as serious. The two things I really, really like is how much of the boilerplate it takes care of and how clean (as in no weird jhipster specific dependencies) the out-of-the-box resulting code is. Anything specific you want to know about?
&gt; What else should I look into? The /r/javahelp, /r/learnjava and /r/learnprogramming subreddits as mentioned in the sidebar contain a wealth of resources and hundreds of threads about seeking resources.
Did you forget to eat your cereal this morning?
Pretty good, quick, overview. Only thing I think it's missing is how to externalise the validation failure messages for i18n using a validation.properties file, and referencing the value with the usual {property.key} notation - thinking about it I've no idea how to specify a location for it somewhere other than the base package.
2 years to me is beginning. I would think your C#/Android is enough to pass an informal review of your tech requirement.
I do not know IBM practices, but very common is Java trivia - which will be HARD for you (as its less about how smart you are, and more about how many details you picked up while using the language over X years). Examples: * Interface vs abstract class * What changed in JDK8 with interface * Name a design pattern and explain how you would use it (other than singleton) * How to make a singleton in Java * What is DI? Pros / Cons * What is JDBC? * What does volatile mean? * What does static mean? * What does final mean? * CMS vs G1 * Deadlock vs Livelock 
I know this probably isn't what you want to hear, but as a former IBMer, my best recommendation is to look somewhere else if you have options. Upper management is downright hostile to rank and file workers.
Thanks. I will go through the docs and send you a PM with any question. :)
Hybrid is about to be murdered by react-native. Don't get your hopes up.
I am enjoying toying with it. Its not my father's Java/ :)
You should probably also ask on /r/cscareerquestions.
Then why does it seem like java is playing catchup to C# in the world of OO? Evolving C# has become a streamlined process eventhough it's led by non other than Microsoft whereas Java's progress seems stuck in the bureaucracy and inefficiency of JSRs. It took Java 8 years to come to fruition and it still lacks a serious functional programming capabilities. EE also still requires a ton of XML and configuration, compared to other languages, to create a simple REST web service.... That has nothing to do with programming... I like java but it's becoming like an aging dinosaur, everybody secretly knows its status is under threat but they're all afraid to admit it and most importantly do something about it.
Was serialization ever made for untrusted parsing? Just the fact that you can load arbitrary classes screams red flag to me, and the resolveClass solution they mentioned sounds more like patchwork than anything. This sounds just as bad as trusting the java security manager to sandbox user code. 
Yeah at first everyone thought you'd just use it to check if null but there's so much more to it. Map, filter etc... as well as if present to name a few. 
Excellent presentation. This generator is amazing ! Thank you for developing such a valuable tool for Java / JavaScript programmers! It is also a great tool to teach software engineering , specifically the integration between Spring and angularjs
For Log4J1 I use a factory class method that generates an exception, catches it, then determines the calling class name and returns a configured logger for that class. Works nicely.
Annotations have replaced majority of xml starting with Java 7. Java 8 support for streaming and functional programming is very nice. Portability is still a major feature. And to be fair, C# copied a lot of features from java and avoided the bad ones after java was in production for years. C# is still Microsoft only and I (personally) really don't want to deal with their licensing fees for server deployment, administration, etc. If you are in bed with Microsoft then C# is fine. Ultimately, yes C# is slightly better as a language but java ecosystem and tooling are far above what msdev, .net and open source provide.
X-post this to /r/cscareerquestions. If you are comfortable explaining the items in Effective Java with some degree of expertise and elegance, you'll be just fine. 
Definitely!
Sounds like you have exactly the right mindset to becoming a great developer. My top recommendation for someone like you is Effective Java (2nd edition) by Joshua Bloch (http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683). This is not a "learn Java in 24 hours" type book, but once you already have a grasp on the language basics it is one of the best resources for taking your skills to the next level. It focuses on common traps beginner (and even expert!) java developers make and generally how to write better java software, as opposed to most books that teach like "this is a lambda. this is the syntax for a lambda. now you know lambdas!" Of course, reading books is useful to gain a baseline understanding and filling in knowledge gaps as you go, but don't forget that the best way to truly improve your skills is by reading and writing lots of real-world code. Wish some part of your job/life could be automated? Write a program to try to solve it! Even if your program is objectively terrible from a design standpoint, it will force you to come up with a solution, research the parts you don't know how to solve, and discover over time what works and what doesn't. Then find somebody else who already wrote a program to solve your problem and compare your solution to how they did it. Is their's better? What parts? Why? Best of luck to you
Spring in action. Spring Boot in action. Just Hibernate. Avoid JSF, application servers.
&gt; just take how much effort it takes to deploy a web service in Java compared to C# hm, i need like 2 minutes for that in java. 
Plagiarism... Copied from here: http://blog.jooq.org/2015/03/13/10-java-articles-everyone-must-read/
please share this with me, maybe there is something i am missing! i mean creating and deploying the web service!
Can the tool generate the models from an existing database? It seems to be all "code-first"
It seriously saves you so much time standing up a new project
They need to update their Getting started guide. Clean mint install won't work with the docker image instructions..
&gt; just take how much effort it takes to deploy a web service in Java compared to C# Let's see. 1. Run an archetype: one command, takes about 15 seconds. 2. Create two classes, insert a few lines of code. Takes about 30 seconds. 3. Build. Couple seconds. 4. Deploy. Couple seconds. So... about 1-2 minutes? Unless you mean after the project is setup, in which case I can build a rest API in about 10 seconds with one line of code. 
As was pointed out, the title should say _fixed_ in 1.1.3; apologies for any confusion. 
I understand the importance of being able to detect edge cases in order to be a great computer scientist, it's just that the way my professor writes the problems sometimes makes it difficult to judge if an edge case would exists because sometimes we are told to ignore certain scenarios.
Im pretty sure it's because of starting it on virtual machine
Loggers are mutable and thus cannot be constants, likewise with arrays, use lower camel case.
I would guess this is a combination of 1) not enough memory for eclipse to run comfortably. There are two places to fix this. One just the amount that the VM itself has, and the second is the settings within the eclipse app itself. Google this for details. and 2) poor disk to memory bandwidth on your VM, which means that swapping and or loading from disk is very slow. What is your Host OS ? What is OS is installed in the VM ?
Absolutely.
I think an intelligent implementation of Optional wouldn't ever store null values. You can just have an Empty, and NonEmpty subclass.
&gt; Load times that get longer and longer as time goes by I'm so fucking glad to know i wasn't just imagining this
Unfortunately they do contribute toward my grade
Is it? My bad, I know it doesn't come with SVN, I assumed the same for Git.
&gt; So I downloaded Eclipse on my virtual box and I'm regretting it because it takes about 5 minutes just to start up If it really needs that much time it's obvious something is just really wrong with your VM. 
Just for diversity: https://github.com/wsargent/paranoid-java-serialization/ (Patch for OIS) https://github.com/kantega/notsoserial (JavaAgent similar to OP's one) https://github.com/ikkisoft/SerialKiller (custom extended OIS [not JRE-wide])
AFAIK doing this with a Java Agent is ok. It's not ok to do so by patching the classes directly in the classpath.
The solution is not to deserialize untrusted objects using Java Serialization. 
How does this differ from the web service solutions already existing for spring?
Also maven by default.
What do you mean by latest features? I find that IDEA is far and away much slower than Eclipse, I have tried using IDEA 2 times for multiple months and had two fundamental issues. 1) Problems tab in Eclipse is amazing, instant feedback for multi-project refactorings. There is nothing like this in IDEA, hell you need to do full rebuilds(due to the use of javac, and the integration with JDT not being good) to find errors. 2) Launching a test takes ages compared to Eclipse, again due to the compilation model. On top of that the only Eclipse plugins I have found useful beyond the defaults(maven, git, junit) is the vim plugin and a JSON editing plugin. Never had issues with versions. Other than the two issues I mentioned I find they have basically the same features. Except that I never have performance problems in Eclipse, and constantly have them in IDEA. To the point of it lagging behind me by full words while I type. I also was having IDEA lock up on me(roughly once a day) and go into this weird state where it won't accept keyboard input, and I just have to restart it. And guess what that restart means, a reindex, which takes ~5mins, hooray! I blame ideavim the vim plugin for that one though, so I let it slide. Even though that plugin is advertised during the install! I really wanted to use it too. I tried the 15 EAP, I tried the 14 release. I tried running with Java 8, Java 7, Java 6. All had terrible performance on my brand new MBP with 16G of RAM an i5 and an SSD. Maybe my project is just too large, it does consist of about 30 different maven sub-projects and is around ~500k lines. I also only ever used CE, as I wasn't going to shell out for Ultimate without having it be usable first! One place Eclipse really sucks is the marketplace/plugin download. Expecting you to go around to different websites and copy an update site link is crazy. Also some of the default settings are a bit off. For instance I think refresh using native FS hooks should be on by default, I find people confused by that a lot!
Yes this is likely the culprit and will bog down any application, let alone an IDE. How much memory does your VM have? Do you have a processor with the proper VM extensions to allow reasonable performance? Have you run other large applications on the VM with no issues?
Eclipse requires a bit more maintenance / configuration, but if you're willing to do it, the payoff is pretty good. I find Netbeans and IntelliJ to be way too stale, for lack of a better word. Eclipse is much more friendly. It's hard to describe exactly how or why, but Netbeans / IntelliJ look more intimidating and don't invite me to just start coding. Eclipse does, I have customized it to my liking, it looks nice, but yeah Maven integration could be better.
You should have a look how untraced references work in languages like Cedar, Modula-2+, Modula-3, Active Oberon. Also the way resource management in FP languages via HOF works. Some times having a region would already be enough: withResource { // use my-resource and pass it around } // my-resource is gone The difference between that and try-with-resources is that the allocation is responsibility of withResource () and there is no need to implement something like AutoCloseable. However to make this convenient, Java would need to adopt the syntax sugar that allows to leave lambdas outside the parameter list.
Thank you! I have not touched any of those languages since school and they are now on my to-(re)study list. 
It would seem to me that if we can't automatically check that a variable meets all the conditions an @Scoped variable is required to meet we would be creating horrible bugs when a variable is incorrectly tagged with @Scoped or correctly tagged and then the code changed so that it no longer meets the condition. If it can be automatically checked then why require the user to annotate at all, couldn't a compiler find variables that meet the criteria and apply the optimizations to any variables that matched without the annotation. 
You should take a look at graal a Compiler written in java with a much more sophisticated escape analysis. Anyway to get back to your idea It feels like this would be a step backwards. There are some promising projects on the gc front (tuned g1 in jdk 9, Shenandoah, C4) which makes me wonder if the gc isnt already a solved problem. On the overall performance front projects like valhalla, var handles, graal vm and panama looks also really promising. Ownership is a really hard way of solving a problem that java doesnt necessarily need to solve in my opinion. 
Thank you for the graal compiler reference. I will look at its escape analysis. I mentioned g1, Shenandoah and C4 in my post. They are all solving a problem of GC-ing a large heap in an effective way. My idea of perfect application memory management is the one that runs in a constant memory. It will be much closer the the Disruptor-based application. Worker thread has a way to allocate its temporary objects in a way that places no additional pressure on the GC.
Attempting to patch every security vulnerability that your static scanner finds is simply impossible for most businesses and even if it was possible it would be a horrendous waste of resources to do so. From what I understand RASP offers an excellent means of resolving the security vulnerabilities of code that you don't own or support. 
Precisely. It will take too long and cost too much to try to fix even only the highest priority vulnerabilities in your own code, never mind everything else that you may find in the opensource libraries that you use. Static scanning is also completely reactive. 
[The Silver Bullet Syndrome](https://www.youtube.com/watch?v=3wyd6J3yjcs) by Hadi Hariri 
And that's what Java does. There are 3 ways to create an optional: * Optional.of(T value) - creates a NonEmpty subclass and requires a non-null value (throws an NPE if provide with a null). * Optional.empty() - create an Empty subclass. * Optional.ofNullable(T value) - creates an Empty subclass if value is null and a NonEmpty subclass otherwise.
Small piece of advice: you have 0 unit testing. Who knows what kind of bugs you might have. 
Replying on mobile so a short post, love the idea. Have you seen/looked at Pure4J (https://github.com/robmoffat/pure4j) at all? Which covers more the immutability checking side of things. Whilst separate concerns there seems to be a bit of overlap. There's also the checkers framework and JSR (which I believe is no longer active as a jsr). 
I am aware of it and was experimenting in that area myself. But there are good projects written by much smarter (than me) people already. I have been using Scala quite heavily and was thinking about making JVM just a bit friendlier to Scala language constructs. But while I was hacking bits around JVM, Scala progressed in leaps and bounds. It is much more than a JVM language this days and JVM is just one of the target platforms. I think it is not far off in the future that we see a dedicated ScalaVM forked out of OpenJDK. Thank you for the feedback. Judging by the reactions I've seen today I can conclude that there is some merit to this idea. I will write a proof of concept, which may not turn into a JEP or JSR, but may influence some smarter people to do it properly.
His brackets are also on their own line.
So what?
What about [liquibase](http://www.liquibase.org/)? You can use the Java API. 
2 Kinds of programmers (in java, etc.) Ones who put brackets directly on the same line, one who do not.
Your "FileUtils" class does literally the exact same thing as Files.readLines(...), which was added in Java 7. You should consider using that instead.
Not to mention the bastards who don't use brackets in cases where they are not needed because only one statement follows.
Awesome. Keep up the nice work.
Code with unit tests just proves it passed some narrow arbitrary test which could be riddled with bugs (the test) and basically nothing to do with real world testing...
It's considered good practice in the industry. Less error prone, because it's way too easy to slip another line in there by mistake, not noticing the lack of brackets.
In the corresponding JIRA issue.
Looks promising! I wrote a Java IRC server a few years ago, that might interest you as a comparison or inspiration. It uses only asyncronouos IO so the design is quite different. I also attempted to abstract the protocol details as much as possible to be able to support other protocols, so there's a lot of indirection. See here: https://github.com/EmilHernvall/fatcat
Liquibase. It uses a fairly straightforward xml which you can version to describe changes in the db.
FYI, this is implemented using the select(2) system call which originated in 4.2BSD.
Java threads map to OS processes? Do you have a source for this? 
Watch this video to learn more about what you want: https://www.youtube.com/watch?v=3JphI1Z0MTk Unfortunately their work is not (yet?) open source.
The way you've implemented some things, like those NumericResponse.java replies, makes me feel a bit stupid. :D That's so convenient. Cool stuff, it's way more flexible than my little program.
Yeah, I guess that would be better, it's just that there are many things in the language that I do not know of. And many 3rd party libraries also that I do not know of, so many times I find myself just re-inventing the wheel, since I just don't like to be dependent on some other libraries, which obviously isn't a bad thing, but still, that's just how I am.
Hey, it's all good - personally (and obviously, based on the MR) I prefer leveraging others' code and the Java ecosystem, because it means there's less code for me to: 1) Write. 2) Test. I'm lazy; I *want* to use what others have done, especially if it's a library in common use where there are lots of eyes on it.
I'm hoping that it can be divorced from the network calls - then it could turn into a library that could efficiently and easily be used for testing IRC *clients*. :)
Yes, as Aellus said, just to improve myself in Java when it comes to networking. Also partially I chose java because it has some decent networking related functionality on it's own, while in C++11 I would've probably had to just write my own Socket class using WINSOCK and the linux equivalent, to get even started. Obviously networking libraries do exist, but if I were to do similar thing in C++11 I probably would just write my own things.
I only need to perform some changes in the content. Do you already use Liquibase to manage Couchbase?
Check out the [Programming Challenges](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_where_can_i_find_practice_exercises_and_project_ideas.3F) from the /r/learnprogramming wiki - there is more than enough to keep you busy.
I don't think the regions are created for each method. The developer is expected to define them. For instance you'd define a region at the top of a request handler in a web server. Then the memory would be freed at the end of the request. 
Have you posted in /r/raspberry_pi/ because I think they might have something to say about using Java. Knowing Java is not a reason to always use Java.
You should check out Netty. Asychronous single threaded networking. You don't have to deal with this low level stuff.
Where does C++ magically come from in a java thread about your own java program? 
I use C++ as much as I use Java. They are my favorite languages, that's where it comes from, nothing else. :p It doesn't neccessarily always have all kinds of fancy stuff even the standard libraries of java include, which is why I sometimes intentionally write lower level code in Java than I probably should, just so that if I happen to do something similar in the other language, I won't be completely confused of what to do when I realize that I used those language-specific fancy tools to do it in the past that mask half of what is going on behind interfaces and whatnot.
Actually, the two solutions should be combined. We create a Jira ticket to track the change and then add it to the Liquibase file using the Jira ticket as the ID. Liquibase files only execute once, and by adding it as part of the build process, it makes testing easier (build/destroy the DB on demand) and allows you to mimic your production environment quickly in dev.
Be aware that embedded Java has a different licensing model than "regular" Java that runs on an x86 server or desktop, you're going to end up [paying](http://www.oracle.com/us/corporate/pricing/price-lists/java-embedded-price-list-1977272.pdf) per-device.
I am aware that C++ is normally the go to language for embedded applications. However, given that my knowledge of C++ is slim, I fear that I would not be able to deliver a quality product in the short time-frame given if I went with C++, which is why I went with Java. In addition to this, the product does not involve anything extremely computationally intensive. The application would only be controlling a motor, temperature sensor and door latch. They are concerned with user interaction more than anything.
Will have to look into this. Just last week, I ran code in production that a colleague checked in that looked like this: while (true) { try { callWebservice(); break; } catch (Exception e) { // logging, etc } sleep(100); } Pleasant telcos with the client ensued.
This really isn't the place for this, but you can open it in cmd.exe and type java -jar &lt;name of application here&gt;. To my knowledge, .jar files can only be opened if the user has JDK installed, which most PC users don't have, nor will need to. It would help to know what program this is. You could wrap it in a .exe using JSmooth, if it's that important to you.