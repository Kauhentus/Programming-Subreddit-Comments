me
You don't really need code samples to explain patterns. For one, samples from 20 years ago might not be ask too useful today, and second, it makes you think more how you could implement it in the language you're currently using. That's not really a bad thing.
and [simple-cli](https://github.com/piotrkot/simple-cli)
Ultimate prank: take screenshot of code and set that as the background. Chaos ensues. 
It just doesn't have the plugins that give you nice integration - wouldn't make sense to proactively *stop* it from working
Struts 1 still has 3% and it was declared end of life several years ago. Also Struts 2 has 4%.
No that's the Dunning-Kruger effect... Just accept that unless shown otherwise you like most of us are average.
How many more times are you submitting this. Wasn't [two days ago](https://www.reddit.com/r/java/comments/4sh8s1/a_few_companies_have_already_fixed_the_broken/) enough? 
~~One thing this lacks are the data sources, which projects is this information gleaned from?~~ EDIT: Also seems `java.io.File` is popular, if you can always use `java.nio.file.Path` instead. &gt; We use Boa Language and Infrastructure (GitHub dataset). We analyze projects with at least one valid Java file and one import. There can be valid Java source files with no `import`s at all. &gt; It allows to analyze on the most used APIs in top 500 GitHub Java projects. &gt; 263.425 Java projects; Are these 263k individual projects or do the top 500 projects have on average around 500 IDE projects? 
Thank you. I've been waiting for this.
38% of people use MySQL in production? Why?! I was also surprised that 72% used Spring for their web framework. I didn't realize how dominate it was 
How about public and super duper public?
That's closer to what's in wildfly; the introduction of publicer-than-public is what the author is advocating against.
Yes it has, just leave out the access specifier. It defaults to package access. https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.4.7 https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#d5e11778
And what if you need to access it outside of the package, but don't want to make the method public?
But... how would you distinguish between the package external access you want and the ones you don't want? I am not sure that your example can be solved with a simple keyword.
As I said, that's exactly what "internal" does for C#. It makes a method/field public within the whole project/library, but users of the library won't be able to use that method.
Is using IntelliJ IDEA much better than STS? What cool features do people use in IntelliJ that aren't available in STS? :-p
In OSGi you do that outside your .java files. Here, AFAIK, the goal is to specify what should be exported and what shouldn't within the Java source files. So if a class is marked public, it's exported. If it doesn't have an access modifier (what currently is interpreted by the platform as package local), shouldn't be exported.
No, `Optional` is **NOT** a monad. By design. Here what Brian Goetz, the designer, [has to say about it](http://mail.openjdk.java.net/pipermail/lambda-dev/2012-October/006365.html) &gt; The current design mostly meets that; it might be extended in small ways, but the goal is NOT to create an option monad or solve the problems that the option monad is intended to solve. 
Getting a 404 on your link.
Thanks
Fixed.
The number of IntelliJ users seems high to me.
 public void testInvalidMapping() { MetadataSources metadataSources = new MetadataSources( ) .addAnnotatedClass( TheEntity.class ); try { metadataSources.buildMetadata(); fail( "Was expecting failure" ); } catch (AnnotationException ignore) { } finally { ServiceRegistry metaServiceRegistry = metadataSources.getServiceRegistry(); if(metaServiceRegistry instanceof BootstrapServiceRegistry ) { BootstrapServiceRegistryBuilder.destroy( metaServiceRegistry ); } } } That's not a fix. That's a work-around for a clearly fucked up API that should be burned in a fire. * Hidden resource allocations that the caller is responsible for * Globals via the service locator anti-pattern * Probably not even remotely close to being thread safe 
1. Of course the Connection Pool is separated from the Bootstrap. Would you prefer initializing a `SessionFactory` in a single method? There is a separation of concerns for `Service` initialization. 2. The static close method is just a utility used during testing. In reality, the Service Registry is always closed when you destroy the `SessionFactory`, so no worries here. 3. You want the `SessionFactory` to be Thread safe because `Session(s)` are instantiated by multiple concurring `Thread(s)`. The bootstrap logic should be thread safe, I guess. However, do you really create multiple `SessionFactorie(s)` with multiple concurrent threads in the same JVM and within the same `ClassLoader`? [The code is on GitHub](https://github.com/hibernate/hibernate-orm) is on GitHub, and, instead of *burning it into fire*, it's better if you submit a Pull Request which fixes all the issues that you find. That's the true Open Source spirit, right? I'm curious about your actual findings, so don't be shy!
Can you post a screen capture?
Worked fine for me in landscape view
Isn't it, though? Seems pretty damn late to me.
No SAML?
This. With ultimate edition, when you inject a bean, you'll see a coffee bean next to your code. If you click it or, hit the shortcut for "go to definition", it will take you to where the bean is defined. Community edition won't have that level of integration. Besides that, you will still be able to do everything else in terms of coding and refactoring.
That's how I browsed it too and it was just fine.
How does this compete with Spring Security?
Spring MVC is the original, non-boot based way of doing REST/WebApps in Spring Framework. the Boot-ified version is a simplification, but is nonetheless a technically distinct alternative.
Wow, JSF really seems to have finally taken the beating it richly deserves, interesting how there are no comments from JSF toilet bowl contenders like Henk53, TheSystemX or AvoidHugeShips? 
I wonder how many features Spring will release in between the announcement of the announcement and the actual delivery of the things announced at AnnounceCon 2025 
Apparently not in 2016? http://zeroturnaround.com/rebellabs/java-tools-and-technologies-landscape-2016/
Not Accenture, but a similar one. I won't mention the company name, just that now it's "an NTT DATA company" (NTT acquired the firm just 3 o 4 years ago).
So, now you have a bug reported, I guess? :)
Is 8.5.x a drop in replacement for 8.0.x ?
What bike-shedding[1]... [1] https://en.wikipedia.org/wiki/Law_of_triviality
Those are pretty substantial updates. Hopefully EE 8 will see the light of day.
&gt; When you close the SessionFactory, we also drop the schema. If there is a Connection pending with a transaction that was not ended, then locks might be held. Therefore, the DROP will be stuck and the whole test will hang indefinitely. That's the opposite of thread safe. Look at how .NET handles connection pooling based on connection strings. Developers never have to even think about pooling, it just works so long as they release the connections back to the pool as they are done using them.
Now, add a SQL parser on top of it and call it H3 :-)
Hmmm... Looks like simple ETL/MR implementation without 'L' and clustering support? ;)
In production, our users use Spring or JavaEE and the EntityManager is handled automatically. With 70% market share in Java, I guess the API works pretty well as otherwise many will choose some other competing data access framework.
There are lots of good pooling solutions in Java: HikariCP, Vibur DBCP2. There are also standalone XA transactions managers too.
not looking for a detective.... just wondering if anyone had heard of it.
~~ding ding ding!!!!~~ The Javabot I remember was a bit more stylized but this will work for what I need!! Thanks a bunch! Edit: oh wait, this is for c and c++.... close though
By that argument PHP's standard API is the best in world. Bad APIs only exist in Java because we are too willing to tolerate them. Visual Basic was managing connection pools effortlessly 20 years ago. It's about time that Java did the same.
It doesn't... As I understand it, Shiro is basically dead. Before March of this year, there had only been [4 commits in the past 3 years](https://github.com/apache/shiro/commits/master?page=2). Not sure who has been updating it recently though... Even then, alot those changes have yet to be released, looks like mostly old PR acceptance.
We tests al sorts of ridiculous scenarios, so that our users don't have to bump into any of these issues.
This is an awful type of libraries. Once you have it you no longer can use IDE tools to show usage of fields or call hierarchies because there's a layer of magic and tools don't understand it.
This is an extremely vague question. What exactly are you attempting to do?
What are you trying to point out here?
A Pok√©mon clone is a serious undertaking in any language. A game is also a complex project in any case. There are a number of libraries and other tools to help on the graphics and rendering side but it's still a lot of work. That said, making a game or even just trying will teach you a lot about the language. Slick2D is probably not a bad place to start http://slick.ninjacave.com There's many atleast partial blogs (the number of blogs / video tutorials that document starting this sort of thing is high, when they really realise how many hours it'll take the number that finish is much fewer). For example: https://thejavablog.wordpress.com/2008/06/08/using-slick-2d-to-write-a-game/
To start, you can try to create a Tetris clone for example. It's simple but really interesting to start.
Contingency tables would be a good addition. Similar to R's data frames.
As far as MapStruct is concerned, that's not quite right. It generates the mapping code at compile time, so you can inspect the generated code in your IDE, find references to properties, call hierarchies etc. In annotations it refers to property names using Strings (as there are not property literals in Java), but you'll get a descriptive compilation error when referencing a non-existing property right on save, when e.g. using MapStruct within Eclipse. In addition, we provide a (work-in-progess) [Eclipse plug-in for MapStruct](https://marketplace.eclipse.org/content/mapstruct-eclipse-plugin), which gives you auto-completion and such for property names. Refactoring support would be great to have, too, but we are not there yet. Actually, addressing the sort of issues you mention has been the primary reason for designing MapStruct as an annotation processor that generates code, which gives you all sorts of early feedback right at compile time. (Disclaimer: I'm the lead of MapStruct)
Other good mini projects, in my opinion, would be Pong or Snake. After having coded all three of these a few years ago (didn't finish tetris), the rotation/collision mechanics of tetris seems like more complicated than the other two.
Yes, Snake is really easy to make and it's a classical game too. Very fun :)
LibGDX is the place to start, if you're wondering what framework to use.
Rather than making a game, I'd suggest looking at r/dailyprogrammer and tackling a few of those tasks. They range from 'quick testable method' to 'performing algorithm analysis to keep things in O(n^2)'. You can easily take some of the snippets or odd ideas, run with them, and turn them into a game later. Look up JUnit and how to do tests. Get religious about identifying test cases and writing tests. Look up Git and use version control systems. Train yourself to use small, frequent, well described commits.
When I started learning Java in school we partly used Greenfoot, it's easy and a great way to start learning Java by programming small games. It also comes with some examples, though the Editor lacks some functionality (which isn't too bad at the start as you don't know what 90% of it does anyways).
&gt; and WS-* vs HTTP for the application protocol. Where does WebSocket fit into this?
Not as bad as Flash. ;) http://www.cvedetails.com/product/6761/Adobe-Flash-Player.html?vendor_id=53
Robocode is fun.
Here ya go: https://www.youtube.com/channel/UCmjXvUa36DjqCJ1zktXVbUA 
Thats a good idea, I will try to implement that. Thank you 
Looks pretty fun, will definitely give it a go :)
This has been on the cards for a while now -- Monica Beckwith mentions it frequently as CMS performance can degrade badly with heap fragmentation.
Spring Boot provides three major features: * Auto-configuration of beans based on what it finds on the classpath. For example, if it sees the H2 database JAR, it auto configures a datasource bean * So-called starter dependencies for Maven and Gradle that let you avoid specifying explicit version numbers for transitive dependencies * Ability to embed Tomcat into a fat JAR so you can run Web apps without deploying to a traditional JEE container
Bootique (containerless-web), 99-problems(riddles), Strman-java(stringutils), Dex(data visualization, html rendering), Tablesaw (in memory data-table), Chronicle Map (in memory key-value store), Gumshoe (JVM monitoring), SoundSea (music search engine (by keyword)), LeakCanary (memory leak detection), ND4J (multi-dimensional array computations), Automon (JVM monitoring), Jvm-tools (jvm monitoring), awesome-java (curated list of 100+ other java libs).
JSR330 is Dependency Injection for Java. Contexts and Dependency Injection for Java is JSR 299(1.0) or 346(1.1).
I haven't read it, but on a first sight (at the content table and some of the content) it looks all right to me. As some Amazon comments say, there seems to be too many references to C++. The figure in p 360 about expections is misleading (it seems to suggest that `IOException` is somewhat special/important in the exception classes hierarchy (it isn't). Also the following affirmation (page 13) &gt; Java is a nice programming language; most programmers prefer it to C, C++, or C# is so... unprofessional, it makes you wonder. The recommendation of p 154 &gt;Be careful not to write accessor methods that return references to mutable objects. is, for me, way too extreme. I was missing some explanation about I/O (streams) and networking, but that goes into volume 2. It looks strange to me that those concepts are considered "advanced", I would have placed that in volume 1 and move instead all Graphics programming chapters to volume 2 - but that's my opinion. 
Yes and no. If you understand basic Java fundamentals and know how to read Javadocs, you'll be fine. Check out [this link](https://github.com/libgdx/libgdx/wiki/A-simple-game) for a quick libGDX tutorial. However, if that looks too difficult, I highly recommend working through [this course](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-092-introduction-to-programming-in-java-january-iap-2010/) in your spare time. Oh, and use [IntelliJ IDEA](https://www.jetbrains.com/idea/) as your IDE regardless of what framework you start off with. It makes things way easier.
Old Android IDE was based on Eclipse. The new Android Studio is based on IntelliJ Idea. There is no relation between IntelliJ and Eclipse.
Provided my Google-fu is accurate, CMS refers to Concurrent Mark Sweep, which, at this time, is the most common method of garbage collection in Java (as far as I can tell). Oracle wants to phase it out in favor of Garbage-First garbage collection (G1GC), which optimizes CMS by determining large ranges of memory with unreferenced data. 
Not sure if its most common, but it is still the best in low latency apps.
Intellij is a Swing application. Konstantin Bulenkov, one of the people leading the development of IntelliJ IDEA and IntelliJ Platform, [said](https://blog.jetbrains.com/blog/2013/06/11/inside-darcula-look-and-feel-an-interview-with-konstantin-bulenkov/): &gt; I spend most of my time creating and tuning Swing UI components, improving performance and making our IDEs clean and intuitive.
I don't know why people are downvoting your joke. It's hilarious.
It's the best in short running, small heap, low latency applications. Its very very bad at long running large heap applications.
Personal recommendation Effective Java.
It can do well in long running smaller heap apps too. Source: gc tuned financial exchange that ran on CMS
&gt;&gt; Be careful not to write accessor methods that return references to mutable objects. &gt;is, for me, way too extreme. You've taken this comment somewhat out of context. What he goes on to say is that if you must return a mutable object, clone it first and return the clone, so that the object's values don't change underneath you--that is between the time it's returned and the time you actually use the object. This is a very good practice and not at all extreme. 
Or you know... spend a few months modifiying Java so garbage collection doesn't have to happen and modify (or I can just copy code from OpenJDK to use myself) java so I can do manual garbage collection. Yes. Thats nice - an optional package or something. I hate C++'s format, love Java's and would love to smash the two. For now I dream :(
Yes?
Bet it felt good though. 
Tablesaw can handle 2 billion rows, rather than 2M mentioned in the article. In addition, the article links to the wrong Tablesaw project (a JS table presentation). [This](https://github.com/lwhite1/tablesaw) is the correct project.
Your explanation was precisely how I understood the comment. I still hold that the recommendation is extreme and not realistic (unless , of course, the object itself was designed to be inmutable, in which case that's not a recomendation, it's a requirement). I agree that it's a warning flag, and that in an ideal world all getters should return inmutable objects, but we live in the real world. We could inspect the public APIs of most real Java libraries out there, there are lots of getters which return mutable objects, in most cases it's more reasonable to document this fact in the method contract, than to code a clone logic. See eg http://stackoverflow.com/questions/114237/considering-object-encapsulation-should-getters-return-an-immutable-property 
dex looks very cool
Spring boot is an opinionated version of Spring MVC, what you can do in Spring MVC you can do in Spring Boot but w/o the need to assamble everything, for example, Spring Boot comes with JSON serialization out of the box, in Spring MVC you have to add it manually, My recomendation is to learn Spring MVC first and then Spring boot.
Hmm, in fact, how does it compare to https://github.com/lwhite1/tablesaw
Jrebel is production?! Mercy, me. 
Don't remember last time I ever a normal array. Arrays are so nineties. I believe arraylist are implemented using an array underneath. Arrays are part of the language itself, instances of ArrayLists are objects, from the Java libraries. Sure, arraylists might introduce some overhead but unless you are having some specific performance or behavioural problem you need to get rid off, arraylists are so much more useful.
Youre having dinner party. You know there will be max 10 ppl so you but 10 seats on table. So you can have max 10 ppl sitting on table. There can be empty seats, there can be too many ppl to have spot. Thats for array. For arraylist: you dont know how many will attend, so everytime new guest will arrive you but new seat on table. Or remove one if someone leaves. So you will have exact amount of seats for your guests that is needed.
The reason we build software in a strongly typed language is so that we can build artificial obstacles for ourselves, to signal ahead what sort of limits are considered in the world we built. Arrays are fixed length because this means that we know their lengths. We usually know their lengths when they have been figured out and are unmutable. Arrays are the most efficient data structures in the language, and you also know exactly how much space they take up. In other words, use an array, when you want to say that the value is exactly what it is and is not expected to get new members. 
There is a real dfference between the two from the perspective of APIs and architecture, which may be too abstract for you to dive into at this point. But what you get from ArrayList over an array is full-fledged generics and automatic resizing. On the other hand, I learned that arrays are better than ArrayLists for dealing with primitive types if you dont understand boxing/unboxing behavior.
This is more appropriate in /r/learnjava or /r/javahelp, but: An array and a List are conceptually very similar: an ordered "bucket" of "things". Let's say you're creating an address book. You might have something like: public class Contact{ private String name; private Email email; private PhoneNumber phone; // getters and setters ... } But check your phone: `Contacts` can have more than one email, and more than one phone number. So let's take care of that: public class Contact{ private String name; private Email homeEmail; private Email workEmail; private PhoneNumber cellPhone; private PhoneNumber workPhone; // getters and setters ... } Better. But what if our `Contact` has a landline, too. Now we have to add that. public class Contact{ private String name; private Email homeEmail; private Email workEmail; private PhoneNumber cellPhone; private PhoneNumber workPhone; private PhoneNumber landPhone; // getters and setters ... } And what if they have another email address? It's better to just create a "bucket" of emails and a "bucket" of phone numbers. public class Contact{ private String name; private Email[] emails; private PhoneNumber[] phoneNumbers; // getters and setters ... } How many emails and phone numbers do we want to allow? We could guess and say five, but some people might have more, and some people will have less. public class Contact{ private String name; private Email[] emails = new Email[5]; private PhoneNumber[] phoneNumbers = new PhoneNumber[5]; // getters and setters ... } What if we try to add a sixth phone number? We'd have to do something like this: public void growPhoneNumberArray( PhoneNumber newNumber ){ PhoneNumber[] newNumbers = new PhoneNumber[ phoneNumbers.length ]; System.arraycopy( phoneNumbers, 0, newNumbers, 0, phoneNumbers.length ); newNumbers[ phoneNumbers.length ] = newNumber; phoneNumbers = newNumbers; } Basically, when you have too many objects for your array, you have to create a new, bigger array, copy the old array over, and then reassign. You'd have to do that for emails, too, and any other "bucket" of things you want to store. An ArrayList does this for you automatically. The ArrayList class uses a regular array under the covers, and when you add to it, it checks the size, grows the array if necessary, and then adds the new element. Now, what if you want to delete a phone number? You'd have to copy the entries that follow it down one position, and make the last element null. ArrayList does this for you automatically, too.
This should help: https://www.youtube.com/watch?v=cOfhwxirhUE
From my experience, unless there is a dam good reason to restrict the size or an array. I use an array list. the theory is sometime down the road you might want to change its size. That being said, I would highly recommend looking into either a Set or List (list will keep the order of the items, set will not). Both act like an ArrayList in that the size can change. I see a lot more Sets, and Lists in industry then Arrays or ArrayLists. But as I am sure you are figuring out, there are a million ways to skin a cat. And your users wont care what you did, so long as it works. So do what you know, but if you have the time, go explore other options, you might find something awesome. 
ArrayList, like many of the other standard library data structures in Java, contains a private field which is an array of Objects. Everything you add to the ArrayList is stored in this array, which you do not have access to directly manipulate. When this array reaches capacity or becomes to sparsely used, it is automatically resized using methods of the ArrayList. You could do everything that ArrayList does to a plain array using methods you develop yourself which would utilize the System.arrayCopy method etc., but ArrayList already is designed to do it for you. When you get more experienced try looking at the source code for array list and see if you understand what is going on: http://www.docjar.com/html/api/java/util/ArrayList.java.html. For right now just think of it as an array of Objects boxed into a convenient class that has handy methods to resize it among other things. 
If you have to ask, just use Spring Boot
Use an ArrayList unless you have a reason to use an Array (like if you're absolutely positive that you need the extra performance, or if an API only takes arrays... even then, I prefer to work with my data as a List before I pass it to the API). There's rarely a substantial performance hit to using an ArrayList. They're implemented with Array underneath. The way that they work by default is that, when you add more data to an ArrayList than the underlying Array can hold, the data is copied into a new underlying Array double the size of the original. That does introduce some overhead. But, there is a special constructor for the ArrayList that takes an int, which is used as the original size of the Array. So, if you know that you need an Array of exactly 12 elements, instead of using an array, I'd consider doing `new ArrayList&lt;&gt;(12);`. You get virtually identical performance because the ArrayList just delegates to the underlying array for almost all operations, and never has to be resized, and all of the nice methods that come with ArrayList for free.
In short you generally only use Arrays when you need the performance benefit they offer. Others here have effectively already said that with different wording. In the cases of using arrays of primitives or just in terms of reduced overhead relative to ArrayList arrays have performance benefits and lower GC costs. If you are building a framework you would look to use arrays on effectively immutable lists of things or "lists of primitives" to get those performance benefits. If you are doing things like animation, image processing or on a low resource platform (like Andriod) where you are sensitive to GC costs etc then you can also look to use Arrays (and you will see code use arrays quite a lot in those areas). 
Arrays let you subscript with [] instead of .get() and .set(). [] is faster than doing a method call. If you're doing something wonky like implementing your own matrix multiplication where subscripting the array is a huge amount of the work, Array will be way faster. There's less syntax for initializing them; it saves the step of passing the array to the ArrayList constructor. Arrays are useful for initializing ArrayLists and many other things. { } in the right context creates an Array. 
There are exactly two reasons to use arrays instead of ArrayLists in new code: 1) if you are dealing with primitives you can avoid the overhead of auto boxing (I.e creation of an Integer object from an int) 2) when using the foreach syntax arrays do not create an Iterator object. This is only an issue if you are very very concerned about garbage collection (i.e you've measured it and it's a problem) The only other reason would be to integrate with old code that was written pre-generics. Otherwise you should forget they exist. If the value types proposal goes through for Java 10 they can probably go away altogether.
The only time I consciously used a regular array was a number of years ago when creating some SOAP Web services in Websphere. There was some issue (surprise!) that made the WS engine unable to deal with collections properly and what you wound up with is that clients would sometimes not get the data in an ArrayList and sometimes would depending on what language they were written in. Using a regular array solved the problem. But that's a unique situation. I generally don't use regular arrays either. 
[removed]
List and Set are interfaces. You still need an implementation of the interface. List l = new List (); won't compile. You need List l = new ArrayList (); The reason you see List all the time is because the developer wants an object that behaves in a List-y way, but doesn't want to hard-code a specific List implementation.
[removed]
OMG. No, never said that. I was taking about development. For production you would only be able to change the API part non the business logic. I think changing the API part in production could be useful to manage things like batch operations. Things like, I would like my APIs responds with a redirect while I do a maintenance. That kind of management could be done without a server restart, even if, one should be careful, though. There are also ways to manage cluster environments without operating each node one by one.
Apart from the obvious reasons, I have one reason that is perhaps not so interesting for beginners, but still worth mentioning: I sometimes use arrays rather than arraylists because arrays allow for introspecting content types also at runtime via reflection: List&lt;String&gt; list = new ArrayList&lt;&gt;(); assertEquals(List.class, list.getClass()); // Oops, where's my "String" type? String[] array = new String[0]; assertEquals(String.class, array.getClass().getComponentType()); // Yay There are some tricks that work *sometimes* via `Class.getTypeParameters()`, but they're not generally applicable due to generic type erasure. Java 10 might see reified generics, but until then, using arrays does the trick for me. Besides, in my code, I get some additional performance benefits from using arrays. That as well is certainly not important for beginners.
Phew, you scared me there ;-) 
Sure we can: move to Spring. Force Oracle to compete.
Apart from the boxing/unboxing performance issue if you want to store primitives, the other issue is that you need an extra memory look up to get an element so you are less likely to find the element you want in the CPU cache and it will have to be retrieved from main memory. This is not a problem for most apps but [disruptor](https://lmax-exchange.github.io/disruptor/) takes advantage of this idea.
This question is asked often enough that it probably belongs on a "frequently asked" list. The usual response goes: "Swing is well-established and has a good ecosystem of libraries. The resultant UIs look a bit dated. JavaFX is the new hotness. The programming model is a bit wierd, and there are a few gaps in the available libraries, but the resultant UIs look nice and modern." My flagship product uses Swing, but only because I absolutely needed a docking framework (like an IDE). Your requirements are likely different.
I used Swing a lot (didn't even had time to look into JavaFX yet). If you go with Swing I suggest to also look into how to set the native look and feel: https://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html And SwingX for advanced components (like calendar, etc): https://swingx.java.net/ In my opinion NetBeans GUI designer is good for prototyping but for "normal" application I used to arrange the components in code. You could also go with building your application on top of NetBeans Platform https://netbeans.org/features/platform/ It gives you many-many features, the question is if you need it for your project. :)
&gt; In my opinion NetBeans GUI designer is good for prototyping Actually, Eclipse's WindowBuilder Pro (free despite the "pro" in the name) is by far superior and it does not obscure the code as Netbeans does. Still, I completely agree that GUI builders are only good for quick prototyping, but not for production code. This is due to the design of Swing which was written to be programmed, not drawn. Swing plays its power best when programmed. Methods, loops, data structures, all play nice with Swing and make programming GUIs so much easier.
Except that it's a poor analogy because a stack is a type of data structure and an ArrayList is not a stack. 
&gt; Log SQL Statements in Production Yes. &gt; N+1 Select Issue Spend 3 more seconds writing precise and simple SQL, don't run into this problem. If you're writing out [complicated entity graphs](https://blog.jooq.org/2016/06/28/turn-around-dont-use-jpas-loadgraph-and-fetchgraph-hints-use-sql-instead/) as suggested in the article (for what could be expressed with trivial SQL), you're entering a long path of regret. You won't have those regrets with SQL. &gt; Update Entities One by One Write SQL. As suggested in the posted article.
If you want your app GUI to have a professional looking "dark" theme, IntelliJ's Darcula look-and-feel is [available on GitHub](https://github.com/bulenkov/Darcula). The author is currently working on adding support for Windows HiDPI (Darcula has supported Retina displays on the Mac for a long time now).
Thanks.
Sort of.. Escape analysis is notoriously buggy in HotSpot, to the point where they've disabled it several times. Plus I still don't think its enabled by default. In any event, even if escape analysis isn't working, this isn't a concern for 'ordinary' code. As I said, its only an issue if you've measured it and your profiler is showing you that its an issue. Though, as the link below points out, profilers can lie when it comes to escape analysis. http://psy-lob-saw.blogspot.com/2014/12/the-escape-of-arraylistiterator.html
Is SWT still relevant at all?
There is also the option to mix both of them, if you think that doing one way is easier but not for everything. Making them look the same is annoying though.
I haven't checked the code, but I always assumed ArrayList is an array-backed List implementation? That would make the performance gain so negligible it's ridiculous.
Can you elaborate on 'wierd programming model'? I have minimum experience with JavaFx, but I had to do few apps in it and found it nicer than Android ui framework. For example building list view is much simpler in Fx than android, and I like that framework provide observable list, and proreties for fields, etc.
I know why not to use them. I wanted somebody from the "use static/final" camp :) Using final to convey intent is a nice point of view but I think it only clutters code.
Often it will explain intent and adds to the general readability. Sometimes static can be very effective but in my apps it's been more about keeping some of them straws of the camels back. In my DI apps static is uncommon but not rare. For example imagine a job that emails a graph. The plotted lines should match the look and feel of the app. The list of colors to use might be static but if the app theme is dynamic it might be stored in a long lived scoped artifact instead. If intent is more clear using shortlived objects then I might use that instead depending on the case
Maybe not "final saved me" but I have found benefits in going through code and making everything final. It is more of a refactoring technique. Mark variables and fields final, see what breaks, fix those things, mark the next round final and so on. The goal of this is to make something thread safe. As far as "static final" goes, I think most static things are better off being final. There is too much that can go wrong in a big code base if you are actually holding mutable state in static places.
Consider: public DataObj { public final int x; DataObj(int x) { this.x = x; } } Versus: public DataObj { private int x; DataObj(int x) { this.x = x; } public int getX() { return x; } } I'd take clarity of intent over incorrectly terse code any day. Write code for the next schmuck who has to maintain it ;).
&gt; Most developers these days avoid using "static" and "static final" I don't know who these developers are but both are used a ton (for utility method and constants). So I don't know what you're on about but I suggest to check out some current Java software to just see how wrong you are. 
&gt; It's a good practice to use Array over ArrayList every time you are sure that there is going to be a fixed number of elements since arrays are faster and use less memory No that's not a "good practice" at all. A good practice would be to simply expose a list interface and not let the outside world know your implementation. Even when you know how much items you have you could simply create an arraylist of that size (or use Arrays.toList() to wrap it). The only reason to use arrays over lists would be with primitives in situation where performance and/or space requirements are critical. 
I don't understand why this is downvoted. This sub is for news/discussion around Java. JavaHelp is meant for questions like these. 
SWT looks absolutely horrible, it looks way more dated than Swing.
The Swing Look&amp;Feel API is not for the faint of heart. Probably looking at many months of development to create a custom Swing look and feel.
I've be stuck without static! I often have a static ArrayList which is added to by factory methods... This is one useful place to have global (but often still private) list of objects of a specific type, usually maintained by various static :-o utility methods... this isn't a "favourite" but a solid tried and tested concrete methodology final is absolutely vital for immutable objects, which can save time and memory in the right scenario. who are all these developers avoiding "static" ?
&gt; Unfortunately, I typically go back to Swing. It's easy enough to program in, but it's ugly. I think there should be a way to make them appear decent. After all, Netbeans and Android SDK's UI (SDK Tool and AVD Manager) are developed using Swing and they look sort of OK.
Its mentioned in this forum that Intellij's Dracula L&amp;F is available freely on Github. Maybe there could be other decent ones too? I also remember reading on Oracle site once that they have standard L&amp;Fs for each different platform (Linux, Mac and Windows) available for downloads.
Why do you need a static ArrayList in a factory method? I usually avoid stat in factory methods.
Do you declare final methods? As I said in my question I use static final only for constants.
Well this pattern _did_ "save" our project. The getX() call was called sufficiently often to be a real runtime problem; refactored to public finals and everything was fine.
Yah so take the state out. You don't need to mock a static util class, that is an anti-pattern. Not the fact they are static.
The trick is that not all tests rely on input and output. Some need verify to check that some class was called with the correct parameters. This is difficult to do with static methods unless you use something like PowerMock.
Well you can't really blame someone balking at that when you meant "sometimes" instead of "often" now can you? Everything, even reflection, has a time and place. Using it often is typically a sign of badly architected systems (like when people sort of build their own scripting languages). Using it sometimes isn't (perse). 
It can be done, but it's a hell of a lot of work. There's nothing like CSS; you end up doing a *lot* of graphics context fiddling.
I found that restricting subclasses from overriding methods is not really good. Usually they hurt mocking/testing and they do not offer any real benefit. Do you think final methods are usefull? I try to avoid them.
Yes, there are a couple of look and feels in the JDK itself: https://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html#available And there are 3rd party ones, here is one that has a good reputation: http://www.jgoodies.com/freeware/libraries/looks/ 
nice catch!
If the method that I am testing creates a new object and passes it to a mocked method then I need to verify that the mocked method was invoked correctly. How can I refactor this?
So step back and give me the whole call chain. What makes this method get called? What happens to the object after it is passed somewhere? Show me a little end to end picture of the method chain, and then highlight who you are wanting to mock out.
Have to agree with /u/TunaBoo, sounds like you might be testing implementation instead of behaviour. Testing implementation isn't awful, but it should be done at the unit level, to ensure small changes don't cause seemingly unassociated tests to break. Sometimes an unfortunate design choice can lead to problems miles down the road.
It depends in which environment you are moving. * with CDI final classes and final methods are not possible since they use proxies * with CDI static methods are required in producer classes for session beans * using static for less ressources is important if you are working in an embedded environment, so where ROM space actually matters. Nowadays the time of a developer + time of maintenance is worth more than RAM or SSD/HHD * `final` is not more secure, since everything is accessible via Reflection. I mostly use it for intend and static analysis tools. Also this somewhat forces me to use meaningful variable names, since I can not re-use old ones. Also I can easily split incoming values and private state. * `static`fields are shared context and should be generally handled one level above * `static final` is for me a true constant, which is either immutable or a primitiv. I often use them for magic numbers or similar, because after a while you will forget about the meaning of the specific numbers. Sometimes you pre-calculate numbers and forget the relationship. `final` is not required and you can work around `static` if your environment desires. **But** you can always misuse your tools :P
wish Microsoft would upload to maven central. It's idiotic that they want to make it harder to use thier database.
Ah the old `strictfp`, an even rarer used feature than the elusive label statement.
Do it! I'm in a similar situation and I'm glad I did. Creating a GUI after spending months in the terminal was a breath of fresh air and felt very gratifying. It took just a couple of hours to read some articles and Java docs and throw together a little calculator. 
Yeah, I've heard all sorts of things about by applying anyway you are telling them you have the confidence in your ability to preform at that level. And tons of variations on that theme. Long story short apply, what are they going to do? Say no? Literally every resume you send out is a worthwhile attempt. My first job was one I was sorta qualified for that I found on Craigslist. 
In most cases this is true. Which is why I said you won't encounter this on everyday situations. However if you are trying to iterate over a large collection of primitives the cost of auto boxing can add up.
Do you often download Javadoc to PC? Can this be used with IDE?
Completely agree, it's best to just ship off your resume at any job you are interested in regardless of how much experience they are looking for (within reason of course, if you've never seen a line of Java or know what a loop is, don't apply for a job as a Java developer).
SWT uses native libraries, it's the best any toolkit can possibly look. What are you talking about? https://www.eclipse.org/swt/
Eclipse RCP is in far wider production use and I don't see that changing, in fact, it's growing.
&gt; but it just doesn't have great UI support Incorrect.
As someone who only did introduction to Java in engineering school, but with a handful of physics and math courses but no relevant work experience in the field (I've worked in entry level accounting and basic IT troubleshooting at a school), could I land an entry level Java gig?
Depends, can you do basic programs such as read in a map in a text file format (nodes and edges), and find the shortest path between 2 nodes using efficient data structures and algorithms?
From my experience sometimes it is easier to change a FLOSS project you depend on than a project inside the company you depend on.
Good to know. I had issues with stored procedures and lengthy queries with MS JDBC drivers.
[jOOQ](http://www.jooq.org) would have only been half the fun to develop (and use) without `static`. `static final` is rarely used because of laziness, but in fact, everything `static` should be `static final`. There's no point in hiding a `static` method from a super type. It mostly (i.e. rarely) happens by accident. In my opinion, `final` should be the default anyway, and `overrideable` the optional keyword. Now for your actual question: If performance really matters *a lot* to you, you can help the JIT inline more stuff if you're using `static` methods as opposed to virtual methods. Read this interesting article by Aleksey Shipil—ëv for more details: https://shipilev.net/blog/2015/black-magic-method-dispatch However: Performance *probably* doesn't matter *that much* to you, for the above to be really useful.
You should mock interfaces, because they're designed for extension. You should not mock concrete implementations, because they're (usually) not designed for extension.
JDBC drivers are so sexy. ;-)
When I was an 18 year old high-school dropout I applied for a senior Java developer job. I had a lot of experience playing with Linux for years as I floundered through school and had done a bit of web development with PHP/MySQL but I could barely explain the difference between GET and POST during the interview. Needless to say I didn't get that senior role, but they did take me on for 25/hr as a contractor. Ten years (and many jobs) later I'm still employed and making a very competitive salary (even working remotely!). Most companies (read: not Big4) are so desperate for talent they will take what they can get and are more than willing to train you internally if you seem like a reasonable fit (and will stick around). There are a huge number of enterprise/internal shops looking to fill Java roles that have been searching for candidates for YEARS without so much as a nibble from someone with experience.
&gt; Can you provide more details? I made a toy example, but I have yet to see the public final beat out the private getter. Well you did miss the main point of the optimization in your example :D start = System.currentTimeMillis(); for (int i = 0; i &lt; NUMBER_OF_LOOPS; i++) { x = two.getX(); // this is the problem x = r.nextInt(); } I'm getting the following results (we're using Java 7 still, hence the different logging). Jul 19, 2016 8:39:27 AM toytest.Sandbox run INFO: Class One: 21.777000 Jul 19, 2016 8:39:49 AM toytest.Sandbox run INFO: Class Two: 21.839000 Jul 19, 2016 8:40:11 AM toytest.Sandbox run2 INFO: Class Two: 21.478000 Jul 19, 2016 8:40:32 AM toytest.Sandbox run2 INFO: Class One: 21.739000 Still less than I would have expected; we did call this often, but a billion times would have still taken in the area of hours I would guess. We did still use Java 6 when I did that so that may well have been a factor. Also, we were using it across the whole codebase so I guess it wasn't as easy to optimize for the compiler. The pattern was something like enum Keys { // about 300 keys } public class Tuple { Keys key; String value; public Keys getKey() { return key; } } public class RefactoredTuple { public final Keys key; String value; } With usages like public class Container { HashMap&lt;Keys, Tuple&gt; tuples = new HashMap&lt;&gt;(); public Tuple getByKey(Tuple findThis) { // this is what was called often; this code is actually outside of this class return tuples.get(findThis.getKey()); // or findThis.key } public String encode() { StringBuilder builder = new StringBuilder(2048); builder.append("&lt;container "); for (Tuple t : tuples.values()) { // also called often; getKey() double tap builder.append("&lt;"); builder.append(t.getKey().name()); builder.append("&gt;"); builder.append(t.value); builder.append("&lt;/"); builder.append(t.getKey().name()); builder.append("&gt;"); } builder.append("&gt;"); return builder.toString(); } } FWIW, this is code we got from a contractor to maintain; they seemed to have overdone the "no premature optimization" bit in several places ;) So those are some details I can think of that may have played a part. We did use the profiler in actual system use, and the improvement was pretty huge (especially considering it was pretty much only an Eclipse-automated refactoring).
There is really no substitute for professional experience. As someone that was self-taught and active in open-source communities for many years before entering the professional workforce it always amuses me when someone thinks they can pull a Tom Hanks (Big reference) and claim they have 8 years of experience because they have been programming since they took that visual-basic class in grade school.
You could store the names of your 10 friends in a fixed size array of size 10. But what if you got a new friend? You'd have to say sorry, no room for you, or you could create a new array of a bigger size, copy the old one to the new one, and add your new friend. An ArrayList in simplistic terms, is just something that does that creation, copy, and add for you. It's purpose is to allow an underlying array to grow or shrink automatically.
I went into a company as a graduate, and I think questions like this are laughable in regard to what you will be doing in the real world. I feel the same about interview questions such as "how would you code a linked list".
I suggest the electron framework. http://electron.atom.io/ No reason it needs to be in Java
I think it is. If you look at it, you can NOT do anything without classes and thus objects.
Does jtds support SQL Server 2014/2016? The documentation on their website says it supports SQL 2012 but nothing newer than that. Not sure if that is just because it hasn't been updated in awhile...which isn't a good sign.
&gt; Table-Valued Parameters (TVPs) Excellent, I've been waiting for those!
Not really sure what his argument is, since if you use constructor injection that's exactly what the DI frameworks do for you, except without having to maintain that mess (among many other niceties)
It doesn't matter. Genneraly it is. But have some stuff from other languages like functional programming. 
As someone who's involved with hiring Java developers with a pretty large organization, I can say that pretty much anything we had on the posting was up for negotiation if the candidate was bright, quick and able to demonstrate that they understood the technology. Especially for the junior postings, ultimately if you can get passed the HR drones and into an interview your resume almost doesn't matter anymore and you're there to get it or not on your own. 
My advice: Don't worry about stuff like this, it doesn't really matter for day to day programming.
You want to convert the .JSF file or the output(html) generated by the .JSF? In anycase, you are probably better off asking on stackoverflow.
The file (I think). The problem is where I'm uploading it to doesn't accept/recognize .jsf, so I need to convert it to .pdf or a more common file type.
My advice as a Java instructor at a 12 week bootcamp style program is to get involved in the local developer community. Start going to Java user groups. Start learning other relevant languages and frameworks and go to their user groups. Volunteer with organizations like code for america, etc. This will give you exposure in the local developer community and open you to opportunities that you otherwise wouldn't have access to. It's my opinion and experience that you get jobs through friends and associates, not through job postings.
Did you take any other programming courses? Have you done any programming since? If both of those answers are no, I'd say you're most likely not remotely qualified .... but that doesn't mean you couldn't land an entry level gig. You'll probably want to start self-educating immediately, if you're not already. Get suggestions for books on this subreddit, or on /r/cscareerquestions or /r/learnprogramming . Work on some side project, any project, a website, a mobile app ... try to keep scope small and have something working, then move on to adding more features or polish. If you learn enough basics, game the interview, and work your ass off on the job (read up on this you don't know after work), you just might be able to fake it till you make it. It's quite normal for there to be a ramp-up time, so as long as you're not blatantly incompetent, you typically have at least a few months to get up to speed.
What if page 3 only has 1 or 2 entries, because the user hasn't yet uploaded 15 pictures? I would suggest you always use an implementation of the `List` interface (`ArrayList` is one, but so is `LinkedList`, which keeps the insertion order). `Set`s generally are in case you want to guarantee uniqueness and less for orders and iterations.
I've always gone for ones which require more experience, normally it's reflected in the pay difference but if you're already aiming high, it's not so bad to be paid a little less due to lack of experience.
Try opening it in something like Notepad++ and saving it as a plain text file (.txt).
What do you mean by "pull a Tom Hanks"?
He can't be serious. That thing is a monstrosity.
Many newer languages make "final" (or the equivalent) the default, and you have to mark the method as "not final" ("virtual", "open", etc.) - C#, Kotlin as a couple of examples. That's because [you should design for inheritance, or prohibit it](https://github.com/mgp/book-notes/blob/master/effective-java-2nd-edition.markdown#item-17-design-and-document-for-inheritance-or-else-prohibit-it). And yes, they offer a benefit: They keep other programmers from doing something that you didn't design your code to do. If you don't design your code to be inherited from, then there's a good chance that someone inheriting from your code will make incorrect assumptions and cause bugs. Of course, if you're working alone, or perhaps if you're in a startup situation and care more about going fast than being safe, this advice might be too restrictive.
100% agree about making classes final. Also I think you are spot on about mocking/testing. It isn't a special case. If you need to extend/override your classes for the purpose of mocking, then you have another use case and it needs to be considered just like any other use case. At that point you need some kind of dependency injection, either virtual (your only choice in Java) or non-virtual (an option in C++) and so you need to design for it.
&gt; Work on some side project, any project, a website, a mobile app ... try to keep scope small and have something working. Great advice. Companies use 'years of experience' as a proxy for skill level. If I were starting out again, I would build something small using in-demand technologies and frameworks that I could show at the top of my resume. If an employer reads "creator of X.com" and likes what they see there, you'll most likely be moved to the top of the pile. Bonus points if they can review the code. Good luck. 
It may render with native libraries but that doesn't mean the look and feel of it appears native. There is no way when you see a SWT application and you can mistake it for a native application. It has a very distinctive look and IMHO it looks like garbage.
If true I find that unfortunate. It will just add to the unfounded reputation that a Java desktop app can't look good.
The development seems to have stopped a long time ago. JTDS was the faster one in his time, but I think MS did a great job since.
Maybe they would if we all promise to install windows 10 ? ;-)
Yes, that's a completely valid trade-off you are choosing to make. The fact that you understand those trade-offs is great. I think for many developers, they don't understand the trade-offs - they just know that "final" gets in their way and so they don't use it, even when they should. Too many developers just "do" without understanding "why". 
&gt; Don't remember last time I ever a normal array. Arrays are so nineties. For the record, I broadly agree, but I think the OP actually nailed it on this point: &gt; I would use an ArrayList when I don't know the size because an Array is fixed size. Since the performance difference is negligible, the fact that you have used an array rather than an arraylist is a clear indication to others that you expect this collection to have a constant length at runtime. A minor detail, but helps others to understand what you were thinking at the time.
Honestly, there is too little to go on here to really give you any sort of worthwhile response. "Fully custom solution software for corporations" is incredibly vague. Perhaps you could try to explain your dream in a little more detail.
I worked for a company for years and they couldn't quite find the right vendor to handle and analyze the massive amounts of data that they were getting through social media networks. I helped look for the proper vendor, but none suited their needs and I soon realized that certain companies aren't inherently designed to tackle new streams of big data like social media. Hope that made sense....
I see. Well, instead of writing a whole SQL engine, you could perhaps extend H2 (or some other database) and implement their table APIs with your logic. That might give you the whole SQL functionality for free and allow for embedding your tables in more complex queries... I'm just thinking out loud, don't have a real world use-case in mind.
You really need to be more specific of what you want to make. JEE is not even close to a data analysis tool. 
Around 1-2pm Pacific time you should start seeing the website be updated.
I've been using SWT at work for 8 years with Eclipse RCP, along with JFace, Nebula, and Forms.
Designing an application like this requires extensive knowledge of many many smaller distinct pieces of the project. You are going about this all wrong. You should find something small you are interested in completing and start there. After you complete dozens of these smaller project you will have an idea of how you will want to complete larger ones. Some examples - Write a micro service that responds to your curl commands. Write a tool that reads the weather and stores it in a database. Write a simple blogging application. You need to get comfortable with the language, tools (your IDE, version control), and libraries. Small things like your build management (gradle, maven, etc) can take a long time to really wrap your head around. I'm just saying start small.
I don't think they looked very hard then. There are many large companies that do this very well -- splunk for example.
It wasn't ironic. Here's a beautiful example: static final boolean peek(char[] sqlChars, int index, String peek, boolean anyWhitespace) { char[] peekArray = peek.toCharArray(); peekArrayLoop: for (int i = 0; i &lt; peekArray.length; i++) { if (index + i &gt;= sqlChars.length) return false; if (sqlChars[index + i] != peekArray[i]) { if (anyWhitespace &amp;&amp; peekArray[i] == ' ') for (int j = 0; j &lt; WHITESPACE.length(); j++) if (sqlChars[index + i] == WHITESPACE.charAt(j)) continue peekArrayLoop; return false; } } return true; } Of course, the branches could be re-written differently, but it wouldn't really be much nicer the other way round. I must admit, mostly I'm using labels when parsing strings, because that's where procedural logic (and goto-style jumps) really shine.
I'm a fan of Netbeans too, but I think you're going to have trouble justifying using it over Android Studio. Netbeans will always be a general purpose IDE (with some focus on Java EE), but Android Studio is custom built for Android development. Any efficiency you might gain by staying with Netbeans, which I think boils down to just keyboard shortcuts, you'll lose by missing out on first class Android support.
101/102 shows here: http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html But that is now past 14:00 PDT so it checks. 
Maybe "custom built" was a misleading choice of words. My point is that Android Studio is "The Official IDE for Android": it is actively developed to improve performance, fix bugs, and support new features, and it almost certainly has the largest community of Android developers using it. That said, Android Studio isn't just IntelliJ with an Android plugin. As in, you can't just install the Android plugin and get the same experience. The install also includes the Android SDK Tools, Android Platform-tools, and a version of the Android platform with an Android system image including Google Play Services ([release notes](https://developer.android.com/studio/releases/index.html)). I'm sure a similar experience can be set-up with vanilla IntelliJ; it will just take more configuration. OP didn't specify, but usually people want to use their preferred editor so that they don't have to learn new keybindings, but [IntelliJ supports Netbeans keybindings](https://www.jetbrains.com/help/idea/2016.1/netbeans.html#d381572e445).
http://sparkjava.com is a nice Sinatra like Java framework
I started with netbeans making java apps for myself for the desktop, I've since started android app development, moving to android studio is not that hard, a little overwhelming at first but you quickly pick up on it 
perhaps jhipster would hit the mark for you.
Do you know if it is possible to do create a disconnected library without building your own machine learning database? That would be quite useful. 
Darn tootin'! 
It looks like it is a wrapper around [Microsoft Cognitive Services](https://www.microsoft.com/cognitive-services). ie, a paid web service
You'd have to go the expert-systems route if you wanted no database at all. There are some pretty good algorithms out there for a lot of this.
My suggestion: don't take the certification. Study for it, sure, if you really want to. But take the time you spend learning and BUILD SOMETHING. Go learn a framework or two and put something up on GitHub. Something new or at least new to you. Build your portfolio. As a Java developer, you're closer to a craftsman or an artist than a licensed professional. Certification is only going to prove that you can answer multiple choice questions: employers want to see what you can DO. So go DO something. Build an Android App. Learn Spring MVC. Build an API using JAX-RS. Figure out why people all Hibernate in Java land. Figure out what Tomcat is, and how it compares to WildFly. These are the things that matter in the Java world. As an employer, if a candidate comes to me with a certification but no portfolio, I either reject them completely, or investigate them with a fine-toothed comb before moving forward: it's too easy to cheat certification exams.
Dark themes look anti-professional to me and are tough on the eyes.
And what kind of change do you have in mind? I would rely on better tools for that: IDEs ;-)
How about using Google to search for "lightweight web framework java"?
The most important lesson from the whole text is actually not in the text: ##Pick **one** code style (code convention) and follow it through without exceptions. Another valuable one is: ##Let the IDE of your choice do the work for you Every decent IDE has automatic *code formatting* - *use it*. Every decent IDE has *style checking* (sometimes through plugins) - *use it*. Following code code conventions greatly improves the readability and maintainability of your code. There is absolutely no excuse to not adhering to such conventions.
Author of the tool here. I would say: *fortunately* it only provides a read only view. It is a static analysis tool, I'm not sure it should allow you to modify code.
&gt; **Oracle Java SE Executive Summary** &gt; This Critical Patch Update contains 13 new security fixes for Oracle Java SE. 9 of these vulnerabilities may be remotely exploitable without authentication, i.e., may be exploited over a network without the need for a username and password. Woah.
I think the question poser specified "without a web framework", and the answer is still a web framework? 
I do agree with /u/lukaseder, the tool creates a Sqlite single file database. Just open it with JOOQ and you get a java DSL for free. I've added [an example](https://github.com/benas/jcql/issues/1#issuecomment-233865932) on your request. Hope this helps
The [work group](https://groups.google.com/forum/m/#!topic/microprofile/Iygj3FxFyPY) seems to be quite active, although I get your point: this announcement is partly a declaration of intentions and partly a call for help, the interesting thing will come when the MicroProfile is actually released.
Great idea. Reminds me of wonderful [takes](http://www.takes.org/).
It appears the installer configuration has changed with 101/102 compared to before. I like to keep a portable install of Java by extracting the tools.zip from the install but this does not appear to work anymore. Does anyone know of any undocumented extract options for the installer? Edit: Worked it out, Oracle made things a little more complicated but not impossible. I will write it up if anyone else is interested?
Tabs for life. I don't understand why anyone would want to spam space 8 times instead of using tab twice?... ^^fite ^^me ^^irl
I don't know if that was a joke but you do know that those IDE's just insert 4 spaces for every tab right?
Q: What's the meaning of life the universe and everything A: \t
A: ~~\t~~ 42
Surely that's only on the browser plugin?
Company lap top? They might say "no", but I can't see them having a problem with you asking to do more work. Why not ask them to install NetBeans?
I wish they would have made the BeforeClass method not static. 
We are a C# shop, and I'm on the sales side so installing it is seen as non-essential. I'm learning Java to better understand OOP and build some small enterprise applications. Most people use Visual Studio, is there a Java add on possibly?
This sounds like you are manually handling stuff that your editor should handle for you.
I'm confused, you're learning Java to better understand OOP but you're fussing with netbeans when you already have access to Visual Studio? For general purposes, C# and JAVA are essentially the same thing. Just use visual studios and learn c#. If you can code in one of the languages, you'll be able to code in the other language.
 On.page("/hi").mvc("Hello &lt;b&gt;world&lt;/b&gt;!"); Try rapidoid, the line above is just an example how easy it is. http://www.rapidoid.org/
Ummm Find netbeans source code. Wrap in javafx jnlp and launch from browser? That might work
[removed]
Using Creator methods instead of constructors with "brains" is just silly. How is creating subclass instances going to be elegant at all?
No. Check out Eclipse Che though.
I don't know.. it still surprises me how authentication and authorization in java frameworks are all unnecessarily over complicated and difficult to implement. Here are two examples for rails https://github.com/square/rails-auth/wiki https://github.com/thoughtbot/clearance Even if you don't know rails you can see the simplicity in their implementation. I'm not saying theres not a place for spring security or shiro. Its just that not everything requires that level of complication. 
I've been using spock a lot lately. I love it in comparison to junit/mockito etc. 
One of the biggest problems and I believe is still not fixed is that when you kill a running task, the daemon is killed too. So if you use spring boot and do a gradle bootRun or for that matter run a server or anything like that from within a gradle task that you rely to Ctrl+C to stop, the daemon will be killed and restarted when you run gradle again. Doing this will actually make your development time much longer. There was a thread on this and a proposed fix too, but I'm not sure what the progress on that is. It is entirely possible that I'm using an outdated version and it has been already fixed.
Java currently has only kitchen sink security frameworks. There isn't really a lightweight option. However spring security with spring boot is pretty simple and hides a lot of the boilerplate and configuration for you.
I've followed this guide and have still found problems with it. http://kielczewski.eu/2014/12/spring-boot-security-application/ 
Yep, we use it to run Confluence on MSSQL in a 2014 always-on configuration. No issues for our admittedly moderate workload and worked right out of the box.
I found one but there were some incorrect answers. Are there any "reputable" places to get those? 
Somebody is shadow banned.
It was a big issue and somehow it still is in IntelliJ, which uses a separate process for compilation, but not as a daemon. A lot of people complained that running unit tests was slow and doing TDD was painful - it took ~2 seconds to compile one changed file, while the test itself took close to nothing. Imagine changing something and running a test every few seconds... I wanted to get it faster and created a a nice prototype daemon for IntelliJ compiler - https://youtrack.jetbrains.com/issue/IDEA-128944, but unfortunately they went with a different way: using a pre-loaded process - after every build, the old process dies and new one is created for a future usage. Those are times I measured back then on a small project, current ones are probably little better, but nothing ever can beat a daemon: ||IJ 14|Preload process|Daemon| ---------|----------|----------|---------- rebuild| 5500 ms|5500 ms|2000 ms-1400 ms| 1 changed file|2000 ms| 950 ms| 180 ms| no change|500 ms|300 ms|30 ms| As you can see, it really matters. And even Spring Boot has its daemon now, hopefully IntelliJ compiler will get one too in the future. 
You can do everything with static classes and primitives. While that does use classes, it doesn't use objects.
It's really going to depend on the build itself. I recently ported a sizeable build - around 800k lines of java, around 100 subprojects ( aka: maven modules). Before committing to gradle, I compared to simple compilation through maven and found gradle to be substantially faster when using incremental builds and the daemon. We ended up building plugins for the bulk of our build process, and try to keep the buildscripts themselves fairly minimal. Our previous build took over an hour through an ant + maven process. The new one turns out the same results in about 14 minutes. Simpler builds for testing on local dev machines takes a couple minutes, where it used to be 15ish, and we haven't even optimized for full task input/output, which means a lot of the work is being repeated when it doesn't need to be. The biggest benefits seemed to be through gradles task graph and project structure being much better about at running build processes in parallel. It's trivial to spin up threads for tests to make the most of multi-core machines. Gradle is also really nice because you can script small one-off requirements into the buildscripts if needed, rather that needing to make or find a plugin for everything. Need to swap a couple resources from random places before a jar is created, or maybe alter a properties file before building? So much easier in gradle. My biggest gradle complaint is that Intellij integration is still far from perfect. Not to say that Maven + Intellij is perfect, but I really wish intellij was better about putting together classpaths according to custom gradle configurations. Sometimes compile/provided/runtime simply aren't enough for modeling complex classpaths, and we get periodic IDE classpath related runtime errors as a result. Our gradle build always works just fine, but sometimes the IDE chokes. Some on our team use Eclipse and don't have the same issue.
I totally agree. Weird article.
Congratulations! You have found the most recommended course in all Java related subreddits. Yet, this fits better in /r/learnjava (or /r/javahelp) than here. And there, this course is already listed in the sidebar and in the wiki.
The percentage values are not useful at all, and pure marketing. What has been shown is the 20 seconds build becomes 3-6 seconds faster. But a 20 seconds build doing nothing else than compiling Java classes is not a "typical" build at all, merely typical *compilation*. Typical builds run for several minutes due to automated testing. Then the 3-6 seconds amount to nothing much. How much a build improves depends on how little goes on in a build. The daemon just eliminates the JVM startup delay, and also optimizes the JIT a bit. This will not make any noticeable difference if your build takes 5 minutes because the unit tests take so much time. The largest speed boost in a build comes from incremental builds, the second largest from cached built artifacts, and considerable speed can be achieved by parallel execution in a lot of builds (not for mere compilation, typically). Probably they just presented it like that (with percentages) to have an excitement keynote moment at their conference.
Gradle IDE integration is bound to be a mess, because you have to execute script code to know the configuration (and script code can be malicious or dumb).
The presentation is merely made to make people gasp at their conference. It is not a useful benchmark. Also the title of this reddit post is misleading, the actual presentation does not use the word "typically".
Seriously. You described it perfectly. Some of this advice is just really WTF. 1 Business will inevitably throw something at you that you don't expect, so therefore don't try at all? 2 True 3 I see no problem with generic wrappers. Especially with an incredibly verbose language like Java. C# kinda encourages generics by default. Dynamic languages are generic by their nature, everything is generic anyways basically. 4 Improved or not, oss libraries go out of style, and wrapping libraries keeps the code you have to replace to a much smaller area. Replacing a reporting library can be kept to just a ReportManager class and not have to be replaced everywhere, especially with proper use of interfaces. 5 &gt; Blindly applying Quality concepts (like changing all your variables to ‚Äúprivate final‚Äù, writing an interface for all your classes, etc) is NOT going to make your code magically better. Yes it is. This is fucking stupid. Coding guidelines exist for a reason. 6 If the language calls for it, if it's the standard, use it. It's there for a reason. Patterns exist for a reason. Do you need to change every C# method to utilize async tasks? No, not from day one especially. But C# has TPL built in and is optimized for it, so why not use it? Just because? 7 This depends on the situation. &gt; Result: In 10 years, I‚Äôve seen only one business change database. And when it happened, the ‚ÄúMagic file‚Äù did not help. In 15 years I've seen multiple database changes. Sometimes the repository pattern (magic file, as he says) helps, sometimes it doesn't. But if you have a ProductRepository that properly takes an id and gives you back a product class, or takes a product and saves it and gives you back the id, then any changes should be well isolated to that repository. The "magic file" just saved you from having to change your controllers or other services like a shopping cart service. All it cares is what the product is, not how it was retrieved from the DB. &gt; Example 2: Lets build a CMS for a form so that clients can add new fields easily. Result: The clients never used it. Well that just sounds like poor planning/decision making, not over-engineering (there's a difference) &gt; Example 3: We built an OAuth system for our enterprise clients. Result: If someone really wanted to hack into our system, they didn‚Äôt even have to hack the Auth system. Our servers were already had tons of vulnerabilities, they could just to privilege escalation. ‡≤†_‡≤† . What the fuck does that have to do with over-engineering? 8 yea, not every library was created at the time the in house "invention" was started. Would this guy look down on a custom state framework was started before Redux was created? Is Redux awesome? Yes, it kicks ass. But if you started your in house "invention" before Redux was created, are you supposed to rip the whole thing out and implement Redux? Also, not every awesome library out there covers the features you need. Should you split your functionality and try to interop with a third-party library, giving yourself another maintenance task, or just rewrite a single class and forget about the third party so you don't get fucked if it becomes obsolete or isn't updated in time. We have a dependency on Twilio-CSharp but it hasn't been updated to .Net Core yet and we have, so now we have text messaging just out of commission until they update it. All that library is is a wrapper around JSON services. If we had implemented our own "in-house invention" in the first place it wouldn't matter. Now, unless we want to rewrite all the code, which we might have to do, we just have to wait for them. In-House Invention - 1; Third-Party Library - 0; Obviously that isnt applicable to all projects, it just depends on the situation. 9 Ok, good point. But there is something to be said for following the status quo also. Why reimplement Flux because you "don't want to follow the status quo". Is your business focused around client-side state management? No? You just need to update a user? Follow the status quo and don't think twice about it. Think about getting your job done instead. 10 Bad Estimation: Why would anyone do this on purpose? &gt; We see their codebase and wonder ‚ÄúWTF, was this really developed by that team/person I thought was awesome?‚Äù Well, then you're a douchebag who has never worked on production software. Your "good estimation" lasts just about as long as the time it takes to write it and then goes to hell. If it was possible to estimate software perfectly, then it would actually happen. Been programming for 15+ years. Never seen one project in production that didn't have bug fixes, performance hacks, shortcuts, and other technical debt, which this guy seems to attribute to "bad estimation". No, not bad estimation, just real life. edit: formatting
Seriously. The number of times I've heard someone complain because they were told to sit NLog behind a logger interface is just ridiculous.
The problem is not adding them. The problem is ERASING then. You need 4 keystrokes instead of 1. Try joining two or more lines that were previously indented and see what I mean. Edit: by the way, sometimes a section of code is formatted using a "custom" indentation style for readability, and CTRL+F will destroy it. In such (rare) situations you can't just run an auto-format on the entire file Edit (2): I don't have enough fingers to count the number of cases where the indentation using spaces was off by one additional or missing space. Don't remember seeing that with tabs because an extra tab is clearly visible. Edit (3): Whitespaces add extra characters to your file. They might be an extra inconvenience when merging conflicts. Between having a little inconvenience every now and then, and not having to deal with it AT ALL, I'd rather go with the no-inconvenience option.
You Android Studio then. Basic principles are the same in C#/Java. Android is different.
Building web services in java is relevant to the modern industry. Nothing wrong with that. If you want to go the way that is mostly used in enterprises. Go the Spring way. The fun and easy way would be spark java (not the big data one, the rest library one) it uses modern java concepts and works pretty well. 
&gt;3 &gt;I see no problem with generic wrappers. Especially with an incredibly verbose language like Java. C# kinda encourages generics by default. Dynamic languages are generic by their nature, everything is generic anyways basically. His example was especially bad. You don't want a generic database accessor? You want to reinvent the wheel for every object you want to build from a database, or what? &gt;4 &gt;Improved or not, oss libraries go out of style, and wrapping libraries keeps the code you have to replace to a much smaller area. Replacing a reporting library can be kept to just a ReportManager class and not have to be replaced everywhere, especially with proper use of interfaces. I kind of see his point for this one. I've had to work on a project where the team wrapped Storm in a way that severely hampered it's flexibility and utility. If you're going to wrap something, make sure you don't do that. &gt;&gt; Example 3: We built an OAuth system for our enterprise clients. Result: If someone really wanted to hack into our system, they didn‚Äôt even have to hack the Auth system. Our servers were already had tons of vulnerabilities, they could just to privilege escalation. &gt;‡≤†_‡≤† . What the fuck does that have to do with over-engineering? It's under-engineering on *someone's* part. Although this lackadaisical attitude towards security kind of makes the rest of his post make sense. &gt;9 &gt;Ok, good point. But there is something to be said for following the status quo also. Why reimplement Flux because you "don't want to follow the status quo". Is your business focused around client-side state management? No? You just need to update a user? Follow the status quo and don't think twice about it. Think about getting your job done instead. I think with this one he's more talking about not being afraid to refactor as you go instead of stapling on another layer of bandaids. Something I wholeheartedly agree with.
For personal projects I'd go with Spark, it's very straight forward and you'll get quick results. If you really want to train for enterprise: Spring is a big piece, it's not a web framework by itself. You'll need something to go along with it (spring mvc for example) and it can be quite tedious. Things like spring boot can help a lot though. And you'll need a server as well like tomcat or jetty (there are others). It can be difficult and discouraging for new people hence my Spark recommendation so you can get familiar with java first. 
Interesting, thanks for the insight! I can see the "!Java" thing to some extent. On the other hand, "Java" kind of also includes the "Java Virtual Machine", which runs other languages, so it's a bit of a grey area, I guess. About the fact that there's a small minority group... Is there any moderation tool like they have on Stack Overflow that allows for tracking constructive / destructive reporting? As far as I know, if you report too many things that are not accepted by moderators on Stack Overflow, you get excluded from the reporting feature. Also, if you don't have enough Karma (reputation on Stack Overflow), then you can't report at all. Seems reasonable to provide the reporting feature only to constructive (= "karmatic") users.
Hmm... Gotcha. Which of the processes would you recommend? Also what sort of data are you using? Any open source api you are playing around with?
I'd recommend Gradle. For my pet protects I'm using a database in a file with H2 DB with an ORM (ORMlite) to save the trouble of writing SQL and configuration, At work we use Maria DB with hibernate: another ORM, more complicated to set up but it can do more than ORMlite. 
&gt; Is there any moderation tool like they have on Stack Overflow that allows for tracking constructive / destructive reporting? No, there isn't. Reports are fully anonymous. Maybe the reddit admins can see this information, but we normal mods can't. Actually, I don't mind reporting as such, provided that the reports are justified. What mainly made me write the announcement is that the report messages got consecutively more aggressive. Also, I don't understand when somebody reports something at a time when an active discussion is already going and the overall karma is positive. To me, this is an indication that *one, single person* does not want to see this particular post and instead of simply ignoring it, or hiding it wants to turn the subreddit in a certain direction.
Oh too bad. But I can see why some things are anonymous on reddit *in general*. Not every subreddit is "serious". I can certainly relate to this *single person* assessment. When I submit to /r/programming, I get automatic downvoting after 1-2 seconds. Even if afterwards, the submission reaches 500 upvotes or so. It's impossible that the downvote is content-based. Oh well... :) Poor people who don't have anything better to do.
Hands off moderation sounds good but reddit has a really shit voting system. This sub will likely become a generic software engineering sub pretty soon. 
[JHipster](https://jhipster.github.io/) is a generator that combines Spring Boot with Angular. 
There isn't really any black magic in Spring, not knowing the framework (or tool, or platform) doesn't make it "black magic".
I stopped reading at "very less shared logic"
Gotcha. I might be doing something with mySQL or mongoDB, not really sure which one. I've previously worked with sqlite and am currently working (I'm an .NET SE) with MSSQL. Would you say there is any particular reason to use ORMlite, is it used by a lot of companies atm? Also, if you do know of any good open APIs or datasources, that would be great! :)
&gt; When I submit to /r/programming, I get automatic downvoting after 1-2 seconds. In this case, you should have the reddit admins check if a bot is downvoting you. I had a similar problem last year where as soon as I commented (I post extremely little, but comment a lot) I got downvoted. Turned out it was a bot targeted at my account.
&gt; This sub will likely become a generic software engineering sub pretty soon. Don't worry. We do sufficient moderation to prevent this from happening. Still, I think that it would be seriously unfair and incorrect to remove any post that is upvoted and has an active discussion based on a handful (often only one or two) reports - as aggressive as the report message may be.
Yes, downvoting bots are, despite being completely against the reddit rules, possible and quite often used. I know at least two other users who had one or multiple such bots on their tail. Just get the reddit admins to look into your account. They have means to detect such bots and they will also take the appropriate action. Might take a while (took nearly two months before everything was cleared again for me), but ultimately something happens. We can only stop such activities through frequent reporting. **Edit:** Immediate downvoting after a post is quite a sure sign of a bot.
&gt; For personal projects I'd go with Spark, it's very straight forward and you'll get quick results. I disagree. His goal is to learn marketable skills. Spring Boot is incredibly easy to set up and you'll easily integrate the other Spring goodies that look good on a resume. It will also be very easy for him to move into more specialised stuff like Mongo or Cassandra if he wants. Spring also has a ton of cool cloud-native stuff so if you can create a cloud native big data microservice in spring boot you pretty much tick every hipster box :)
100x for sure. This guys reasoning for not writing a wrapper seems just like laziness. I'd love to see how he deals with swapping out libraries...
&gt; Many subs will delete 1000+ karma posts because it vaguely broke some minor rule, even though it's obvious that good discussion is taking place and everyone wants it to stay. Don't worry. We, the mods here (and I speak for all in that matter) will not let that happen. We have enough sensibility to see whether a reported post should stay or not and we will never destroy an active discussion. As I said in another comment: I mainly made this announcement to notify our user base of what is going on and that reporting should not be used to display disapproval with content against the majority of the community. 
None of the discussion had anything to do with Java though. What if I made a post about black lives matter that resulted in some really thought provoking and meaningful discussion? Would you let it sit? Just because general software engineering and programming articles are tangentially related doesn't mean they are in the right place. Reports don't really matter, it's an indicator that a post may be bad but users again don't really understand the underlying mechanics of how to keep a subreddit from divulging. 
&gt; What if I made a post about black lives matter that resulted in some really thought provoking and meaningful discussion? You're fetching it a bit far, aren't you? After all, the posts that were reported were tangentially on topic and *well received* - which means they had a few reports against (for our sub) high karma. Honestly, if your post were well received (relatively high positive karma) versus one or two reports, I would probably let it sit, even though it is completely against our rules. After all, the *community* makes the content, not we mods. Were it a fairly high number of reports and no positive karma, it would get removed. Honestly, a bit of common sense is in order here. ---- Luckily, so far, there was not a single post *that* far off topic that such intervention would have been necessary. ---- I agree that *tangentially related* (as you worded it - not as your example *completely off topic*) posts might be in the wrong place, but again: Reddit is a democracy and thus *majority wins*. A few reports against many positive votes? Most posts receive one, two, or maximum three reports. This means that they reflect the opinion of one, two, or three users out of our user base of just under 55,000 people (of which I dare say that no more than 5 to 10% are regulars). Also, getting offensive and aggressive in the report messages does not make reports more important. They reflect the opinion of *single users* - not of the majority. It is not our job as mods to exercise censorship.
Hi, I put together a spring boot template: https://github.com/sveri/spring-boot-template It contains thymeleaf, bootstrap, user registration with mail workflow, JWT support for a REST API and test support for selenium. It is not much as most of the stuff is done by spring boot, also I just started out with it, so there surely are mistakes to be found, maybe it is of help.
Should we report this as spam ? ;-)
I would suppose that their trashed proprietary product was another cloud product and since it was likely that was not going to work, to just turn Java EE into a cloud product and get the best of both worlds. Oracle gets their cloud product which brings in money and the Java EE Guardians get their Java EE.
The author seems to have limited experience in real-world applications. This advice is based in theory, read in other blogs or text books. None of it would last in production except #2.
https://start.spring.io/
Follow-up question; would you guys suggest programming java (with whatever framework I decide to use) on windows or Linux? I've slightly started on linux, but seem to be running into quite a few problems (I'm using ubuntu 14.04), whereas it seems more straight forward on Windows. Suggestions? Advice? Thoughts on that?
Thymeleaf is the default option with JHipster if you don't want AngularJS. But I'd heavily recommend having a look at AngularJS if you don't know how it works.
Cloudjre
"You have no right to edit, change, modify, translate, reverse engineer, decompile or dissemble the Library." Does that even make sense if you throw the sources onto GitHub? But probably an example of what Lukas means, when he's talking about "proprietary open-source" ;)
UI, you can actually download it for free, just google Nevada Gaming hash verifier. It should be the first hit.
I'll add my 2 cents here. I'd say you should try continuing to work in Linux. You'll learn to work in the command line, which is very powerful. You'll also get working experience of Linux in general which is a useful skill for software engineers in many settings. Once you get used to linux, it's amazing.
My example was extreme, but under what you were saying before it was a perfectly valid point. If we allow stuff that is sorta kinda related to Java, why not stuff that isn't really all that related or stuff that flat out isn't? &gt; Reddit is a democracy and thus majority wins. A few reports against many positive votes? Again, I am not talking about reports. Reports are arbitrary and just let you as a moderator know which posts take a little more thought since they may be out of line. You unfortunately put way too much faith in the Reddit voting system. Reddit voting is a broken algorithm that is designed such that is rewards shallow content over deep content. The reason that post we are talking about got popular is the same reason. People read the title and upvoted. The stats that reddit has released in the past show that the vast, vast majority of users never read the comments and that most don't even click the links. They read the title, upvote and move on. Furthermore, [the stats show](https://www.reddit.com/r/theydidthemath/comments/2t1hef/request_what_of_votes_on_reddit_are_upvotes/cnv3u1z) that downvoting is *way, way* less common than upvoting. Which fundamentally breaks the idea of "if you don't like it, downvote" because people simply don't. Bad content and off topic just simply does not get downvoted because it feels mean to downvote things. It seems like a dick move whereas upvoting feels nice and supportive. &gt;It is not our job as mods to exercise censorship. What do you mean by this? Literally your entire job as mods is to censor content? I know that's a dirty word and everything but that's all a mod does. [Here is a really good breakdown of why the voting algorithm sucks so bad. It's from 2013 but the algorithm is unchanged.](https://medium.com/hacking-and-gonzo/how-reddit-ranking-algorithms-work-ef111e33d0d9#.joxz96m7n) It specifially gets into why shallow content beats out deep content. Something that gets upvotes *fast*, even at the expense of a few downvotes will always, always beat out something that gets a better ratio of up/downvotes more slowly. Because you need to climb your way out of /r/new onto the frontpage to have any hope of breaking past the first 10 upvotes. I hate to throw ethos into this, but I think it's worth mentioning that I really speak from experience. I've been on this site for 7 years and I used to be a moderator of a few somewhat major subreddits, most notably /r/confession. I changed a lot of how that place was moderated because I saw it sliding into absolute shit. More heavy handed moderation is, unfortunately, the only serious solution. "Just let the downvotes handle it" is lazy and results in communities full of low effort content. You need only look as far as the default subreddits to see these effects directly.
TBH, I'm finding it more confusing than plain regex....
&gt;The problem is that Oracle itself has no major cloud offering, competing with Google, Amazon, Microsoft, IBM, Salesforce. Last quarter (FY16Q4), Oracle's revenue from the cloud was $859M. Oracle is second only to Salesforce in SaaS. 
&gt; You have no right to **edit**, **change**, **modify**, translate, reverse engineer, decompile or dissemble the Library. Why is this even on Github, then? You can't contribute to it, you can't modify it for your own needs... basically you can look at the source code, which is only necessary if there's a bug, but since you can't fix that bug yourself you basically have to hope they fix it for you, for free, maybe?
Since this post has absolutely *nothing* to do with Java as such, it is better suited for /r/learnprogramming. **Post removed** Not directly Java related
Hater
If he went with spring boot and spring data jpa, that would auto configure ORM for him. Not to mention he'd get used to Jpa and hibernate as its provider. That's probably more industry relevant. Also H2 or HSQLDB will do the trick, but connecting to a real server might be more relevant. 
You can find many sample projects of my SpringBoot : Learn By Example book (https://leanpub.com/springboot-learn-by-example/) here https://github.com/sivaprasadreddy/springboot-learn-by-example.
ListComprehensionPerfTest.mapLCTest only creates 71 entries in duplicated. mapFUNCTest and mapFORTest both create duplicated-Lists with 100000000 entries so the benchmarks are kind of useless? 
By default, everything on GitHub is "all rights reserved". Just because you can look at source code does not mean you have any rights to it. This particular tool grants *some* rights, which is more liberal than GitHub's default, if you like...
Nice work! While I do prefer my regexes in the old-school concise syntax, I can how this could be useful for many people who are having issues with writing regex. A couple of comments: - I think the character class thing is kinda cheating, I think it can also be replaced by some kind of range expression like: `oneOf(from('0').to('9'), from('a').to('f'))` - The API itself can be made a bit more fluent maybe? It can be done by adding sequencing to the Expression class itself, instead of expressing sequencing as it's own structure
Exactly. And when the regex gets out of hand Refactor into a parser using Antlr or Peg. Chances are what you tried to match wasn't context free anyway at that point. Also I really love livescripts [multiline regexs](http://livescript.net/#literals-regexp). Indentation and the ability to add comments goes a long way for readability.
You can easily create rich mobile web applications without coding, by using https://mobsted.com platform
Check out [Glowroot](https://glowroot.org/) Or if you are using tomcat, the [JMS Proxy Servlet](https://tomcat.apache.org/tomcat-7.0-doc/manager-howto.html#Using_the_JMX_Proxy_Servlet) might let you collect the stats you want from the hosts via web requests.
If Oracle is going to "reboot" Java EE, what's going to happen to in progress JSRs like MVC, JSF, Security, etc?
Thanks for your comments! Agree on the charClass cheating bit - I haven't made up my mind on the API there. An upside of the sequencing via a vararg method `Re.sequence(...)` is that you only need one call per sequence -- with a fluent API you might need a call per step like this `.seq(..).seq(..).seq(..).seq(..)`.
Thanks for the feedback - anything in particular you're finding confusing?
Haha, thanks! I wouldn't use it quite yet - it's just an experiment,so by far not the entire surface of `java.utl.regex`is covered yet :)
Thanks :)
They switched to Yahoo!, did they end up going back to Ask?
Oracle should be embarrassed. Bundling crapware with Java is pathetic. I can't believe it was ever allowed to happen and I can't believe it continues.
[Oracle is committed to Java EE](http://www.theregister.co.uk/2016/07/07/oracle_java_ee_8/). Which means Java EE 8 will soon ship as a plugin for the Ask Toolbar
It sucks. Here customer, use our Java software... sorry about the malware, Oracle bundles it :(
Why? Because Amazon RDS also runs Oracle Database?
I'm doing a Java install right now (8u101). It asked for the Yahoo defaults like normal. Didn't see anything about Ask. I'm definitely going to keep an eye on it in the near future though. I really dislike having to opt out of this garbage every time I update a client's computer. Maybe I should just keep a dedicated Ninite installer for Java that I send out to people instead of downloading it from the Java site each time. 
&gt;Annotations sometimes infect other objects. Consider the CDI Bean above. Every other object which uses this one, and every dependency this Bean uses must be annotated now with one of the CDI Annotations, otherwise the dependency tree can not be constructed. I don't believe this is true. I've definitely injected CDI beans into EJBs that do not have CDI annotations. Probably other places.
Take a look at the open source application monitoring tool www.stagemonitor.org. You can build your own dashboards and monitoring of large application clusters is supported by design. 
Unless the malware seeking software just finds a Java installation and assumes it comes preinfected with Ask, this is not unheard of when it comes to such software.
That's what I meant with half baked ...
I've found many use cases for using Annotations as containers for metadata. Those should not be overlooked and belong in the useful category.
Not returning 99% of the values you expect isn't only a performance issue.
Oh, I didn't understood your reply. That should be checked, but the idea is great
Use [Zulu](https://zulu.org/download/) or OpenJDK. If I remember right, OpenJDK is also available on Windows now. It's bizarre that the original developers bundle adware / malware with Java!
I looked at it again. The ListComprehension lib skips duplicates. I think that is intentional. Only problem I have with that is: the github page suggest that this is some kind of magic: &gt; First, the jComprehension implementation lacks of for, while or if statements It's using the stream api internally; I'm pretty sure that the stream-implementation uses for or if at some point. Furthermore, if you adjust the mapFUNCTest to call distinct() after stream() ist slighty faster than the LC stuff because it now does the same thing. Basically, the LC lib is saving you from calling collect().
Example int [][] t = newdata; newdata = orig; orig = t;
Thanks for the indepth response, and apologies for my delay in getting back to you. As a user of Slick 3, some of the things you say jibe with my thoughts, others not so much. My thoughts: * Implicits, like any other tools, have to be used carefully - but I'm not sure exactly what you mean in your example. If an API needs an implicit parameter where before it didn't, it will throw an exception upon compiling just as if it needed a normal parameter. * Scala versions are binary compatible as you noted, but if all my libraries are already up to date with the latest 2.12 milestone I doubt there will be major issues when they finally release it. Maybe this is more a library designer's complaint, but as an application developer it's not differing binaries that prevent upgrading but all the enterprise garbage you have to contend with to change anything in your deployment, monitoring, or development environment. * It's interesting that Lightbend is so Java-oriented, but it's not entirely clear to me why that's a bad thing. I can't wait for 2.12's superior Java interop, and Java itself seems to be taking all kinds of cues from Scala (starting with monads in the core library and going all the way up to Valhalla's type system). Of course, if they drop the language and the OSS community has to pick it up that would certainly be a shock, but I don't see that happening anytime soon. In regards to Slick specifically: 1. Nested tuples are annoying, though less so if you replace those tuples with case classes. If they really kill you Shapeless can flatten tuples, but I haven't run into that much of an issue yet - perhaps because Slick's design enourages avoiding the ORM-hell of yanking your entire data model out of the DB everytime you want to do anything. Still, I wouldn't mind if they implemented a `flatten` method for tuples. 2. I hate `null` with the fire of a thousand burning suns, so while it might be acceptable in SQL I'm not going to tolerate any DB solution which allows it to pollute my domain objects. Java 8's Optional is a pretty strong signal of where we're headed, IMO. 3. That's interesting, if a little orthogonal to my main concerns. Why do you think focusing on Spark is a bad idea? 4. This sounds like a Slick 3.0 and earlier problem - there were notorious issues with query compilation in those versions. Between Slick and Postgres' SQL optimizers, I've had no issues with my queries and translating from monadic operation to SQL has usually been pretty straightforward. If not, it's as easy as turning on debugging (to print the entire query) or using `selectStatement` or `updateStatement` or whatever. JOOQ was actually my second choice - but the extra layers of complexity when mapping domain objects, lack of support for case classes, and lack of support for Option meant I went with Slick instead. 5. Again, I have to believe that is from before Slick 3.1 because that seems insane. My queries compile once, and take at most a fraction of a second. What was this query, exactly? So that was a lot. BTW, if you're interested in my very specific complaints about Slick, let me know - though I can't promise applicability to other people's situations.
Just bundle a JRE yourself. No malware then.
I was more referring to the decompile clause, which is quite stupid if you provides the sources in at least a read only way.
brew cask install java. Done.
A wild, heavy regex string is also unmaintainable.
Hmm, it appears that the source code is just examples. With no separate license, the examples indeed fall under this restriction of not being able to decompile the sources ;) But the actual library, the .jar is there without sources, if I'm not mistaken...?
The JRE malware bundling has always been strictly a Windows thing. And the solution is just to use the JDK instead. 
The original developer was cash strapped Sun.
And you're using OS X and being an elitist, but you don't see me pointing out the stereotypes. 
I just updated my jdk on OS X yesterday. The Ask Toolbar is only for Windows, right?
that definitely shouldn't be necessary
Isn't redistributing a JRE illegal?
http://www.oracle.com/technetwork/java/javase/jre-7-readme-430162.html tldr no
http://www.howtogeek.com/198240/avoid-javas-ask-toolbar-installations-with-this-one-weird-registry-hack/
because only non-windows users are allowed to complain about malware. Mac OS is just as, if not more, spyware than windows 
The error message of that exception is _garbage_. &gt; Thrown when an application tries to call an abstract method. Y'know, calling abstract methods is pretty common. The problem is that the abstract method wasn't _implemented_ in the callee's class. It's also weird that the callee could be instantiated in the first place. It seems that the JVM does not check if a class is (unintentionally) abstract. Probably for performance reasons.
Just use ninite, no additional software installed 
I just pushed an update to GitHub that adds a `replaceAll` API. The way it works now: &gt; CaptureGroup b = Re.capture("b"); &gt; Pattern p = Re.compile(b) // "(b)"; &gt; Matcher m = p.matcher("abc"); &gt; m.replaceAll(Re.replacement("&lt;",b, b,"&gt;")); // "a&lt;bb&gt;c" And if you add another group before it, it still works: &gt; CaptureGroup a = Re.capture("a"); &gt; CaptureGroup b = Re.capture("b"); &gt; Pattern p = Re.compile(Re.sequence(a, b)); // "(a)(b)" &gt; Matcher m = p.matcher("abc"); &gt; m.replaceAll(Re.replacement("&lt;",b, b, a,"&gt;")); // "&lt;bba&gt;c" The `Re.replacement` method takes any number of strings and capture groups and returns a `Replacement` object that can be passed to `Matcher.replaceAll`.
Well I provided _no context_ in that post whatsoever. I kind of expect readers to just fill in the gaps, but to be honest, I probably wouldn't have bothered to do that either if I had stumbled upon that post. Yeah so just screw that post, lemme start over. The linked article explained the error just fine, but my question is: Why does it even have to? There are two problems that I see with that exception: 1) The message is poorly worded. &gt; Thrown when an application tries to call an abstract method. Most of the methods that you invoke, are abstract. Every time that you invoke List.add, you invoke an abstract method. The problem here is that this method was never _implemented_ in the callee's class hierarchy. So in my opinion the message should start with something like: &gt; Thrown when an abstract method is invoked on an instance of a class which erroneously does not implement that method. Most commonly, this means that the versions of [callee class] and [abstract class] do not match. 2) More importantly, how does the JVM even let things get that far? How could the callee even have been instantiated (or the class loaded for that matter)? This means that the JVM doesn't bother to check if a non-abstract class has implementations for all methods that it should have. Consequently, as long as you don't call any unimplemented methods on instances of that class, you won't see any exceptions, but might still see incompatible behaviour. What I'd like to see is an IncompatibleClassException as soon as the callee's class is loaded i.e. before anybody even attempts to instantiate it. That would be a lot cleaner IMO.
&gt;Just image if the standard Java Date class would have a @PostConstruct method... No, I don't care about strawmens. This whole article is utter crap. What exactly is the suggested alternative for annotations? Not using Spring? I happily traded 100+ lines of boiler plate Spring JavaConfig per one WS client, while having ~20 external systems and adding more all the time, for one annotation which generated various beans (connection pool with parameters from properties file, WebServiceTemplate, JaxbMarshaller, error handler, circuit breaker...). BeanFactoryPostProcessor was not very nice, but once written, it worked just fine, and it sure beats XML config, which I have to say was a little better than JavaConfig in this case, where the config was just copy-paste with various names changed.
Depending on the specs, I'm seeing them with i5s, 8GB of RAM and SSDs, in which case you're going to be fine. I've run Eclipse on Atom processors with 2GB of RAM, although that's pushing it :)
Well, its true that many equate that with MongoDb which might be, because its usage is so widespread. Still, eventual consistency poses problems on your application that you will have to handle in your database layer logic somewhere. It has its advantages, but of course also its disadvantages. The problem that I have with it is, that mostly people just dont think of it, because in your dev environment a NoSql db will usually just behave like any ACID database.
thanks, the one I looked at was a Intel Core M3-6Y30...never heard of that processor before, is it equivalent to an i3 or i5? And yes it has 8GB RAM. I'm a bit torn between that and the Asus Zenbook UX305, which have the same spec
Looks like their base model mobile processor, below an i3. Probably not significantly different than the Atom I was running. I can't say with certainty if it was the RAM or the processor really holding me back on that setup, but it did work. I always advise developers to get the beefiest machine they can afford, because our time is worth it.
yes you're absolutely right, it's just that I do have my main machine for development but it's too big to carry around, this would be a secondary machine, meaning I will do that occasional development job, so it's not aimed primarily at java development, still when I do it, I'd like to do it if you know what I mean : -)
I don't think that sort of early failure would work though - what if an impl is loaded afterward? As in, some time after the callee is loaded, but before the caller makes a call.
[jsoup is nice](http://jsoup.org/)
Jsoup is the best, but you may need to also use a headless web browser like html unit if you need to interact with a site to get to the page you want.
Have you tried https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html ?
Oh, my bad. I didn't check the actual sources.
Did you have something in particular in mind for the wrappers? We have a lot of flexibility in the API - by building expressions stepwise we have direct access to the regex AST.
No, not really. I just imagine that once you have them, you can add tons of things...
Jsoup is nice when you are dealing simple pages. Selenium for automation , tests and dealing javascript laden things.
I'll second the JSoup recommendation. It's a strong library. THAT SAID, I'll repeat what people often say in response to this question: do you *need* to parse HTML? HTML documents can be very, ah, lenient in their format and browsers can be equally lenient in parsing them, leading to malformed HTML documents. They can also change arbitrarily in their structure, since they're typically not expected to be something that needs to retain the document structure in order to be successfully parsed by the consumer (a user's browser). Some sites will even take umbrage if you're scraping their web content and may block you. If available, considering seeing if the source you're parsing HTML from offers a proper API that offers the information you're looking for. You'll be, in theory, getting your data in a more correct format that's less prone to non-passive, breaking changes and doing so in a way that's approved by the content owner.
/r/gngr might be interesting to you
Most often it isn't necessary to compile them without the jar. It also doesn't matter that they might have a dependency to a logger, guava or any other thing.
I used jsoup once and I managed to do what I wanted. So +1 for jsoup
I would prefer phantomJS. Htmlunit has serious limitations in dealing with JS heavy webpages, which is pretty much norm now a days.
That's a pretty cool lib, gives me some ideas for side projects rumbling around inside my head.
You could alternatively run ReactOS in a virtual machine and try it there.
Try this. Not sure if it would work or not. Edit the JNLP file Add this. &lt;resources os="linux"&gt; &lt;j2se version="1.5+" href="http://java.sun.com/products/autodl/j2se"/&gt; &lt;/resources&gt; save and run using this command javaws -J-Dos.name="linux" qbankclient.jnlp
Did you mean [Selenium](http://www.seleniumhq.org)? A friend uses it at work and likes it a lot. 
Can you explain how JQuery fits into Jsoup? I've used it to simply grab data from HTML, but I guess I haven't delved deep into it.
PSA: if you're gonna use selenium, use Selenide on top of it. Removes most of the boilerplate and handles a lot of the overhead That can trip you up
Yes. It's been the standard for UI automation for probably 10 years.
Splitting your massive project into modules.
&gt; M3-6Y30 It's very slow http://www.cpubenchmark.net/cpu.php?cpu=Intel+Core+m3-6Y30+%40+0.90GHz The one with i7-6500U would be [50% faster](http://www.cpubenchmark.net/cpu.php?cpu=Intel+Core+i7-6500U+%40+2.50GHz&amp;id=2607) (primarily look at single thread speed) But you could buy something with [i7-6700HQ](http://www.cpubenchmark.net/cpu.php?cpu=Intel+Core+i7-6700HQ+%40+2.60GHz&amp;id=2586) - it has 4 fast cores
No one has mentioned Jerry from the Jod project. I briefly read some posts comparing the two, and most said the jSoup performance was better but that Jerry's syntax more closely resembles that of jQuery. I have not use Jerry that much; I just used it for a quick web service during a training course so by no means do I know how it performs in a production environment. I found it very easy to use and get what I needed setup in minimal time. 
SecurityManager is decent, but most java exploits causing updates are down to it being exploited in applets 
Yeah it's probably hard to justify increasing startup time checking for something that shouldn't happen in the first place.
Omg, seriously dude. The article specifically outlines how this can happen even though at a cursory glance it should be caught at compile-time. It isn't that this is doable at compile-time that slip through, it's that it's logically impossible to do so. You have interface.java and impl.java compiled into interface/impl.class and packaged up in two jars (let's call these interface-v1.jar and impl-v1.jar). You write main function (TestMain) to call the method defined there, i.e. your test code depends on interface-v1.jar You make API changes and now you have interface-v2.jar and impl-v2.jar. You will see AbstractMethodError if you run the following: java -cp interface-v1.jar:impl-v2.jar TestMain Please tell me how you can catch this at compile time.
No, the classpath isn't going anywhere. Edit: Might have misread: use of internal JDK APIs will break regardless of whether you load your app from the classpath or rebuild it as jigsaw modules. jdeps is your friend here.
Yeah, I'm sorry -- I can't think of anything else simple to try right off. In the end, if they really don't want a non-Windows client to run (WTF?), then you're probably screwed. 
I found an "@Override" that is missing. That seems like something Sonar should care about, but they don't in 5.6. They did in 5.5
Generally, Java compilation is single threaded -- so you want few cores, high clock speed. Eclipse GUI will run fine, but you'll have problems with your projects if they're large, and you may run out of battery sooner than later.
Also, geb 
I agree. Op should just throw a try catch around it and move on. 
With how different the shortcuts are it took me a couple weeks to get fully productive in IntelliJ. We switched because Eclipse was very buggy for us. Things like autocomplete and click to definition randomly stopped working a couple times per week
I use Visual Studio for anything C -related. Eclipse for Java. PyCharm for Python and Sublime for HTML, CSS and Javascript/php.
I'm using Sublime for Python too. Any huge advantage in using PyCharm instead? I used Vistual Studio in the past too (6.0 I think) and loved the debugger. But stopped using Windows some years ago, and since I was already using Eclipse for Java... well, it was simply convenient to install the cpp plugins.
conversely, I've tried Eclipse and it is just an unorganized mess to me, used to NetBeans.
I used to hate on IntelliJ in favour of eclipse. But a friend of mine at school kept persisting how great IntelliJ was, so I decided to give IntelliJ a try. Once I've had ported my mostly used shortcuts and my used theme to IntelliJ (takes a lot of time but definitely worth it) I am definitely in favour of IntelliJ. The program looks equally complicated, but generally better (especially version control). Overall just smarter (fewer keystrokes to get the things done) cleaner and better imo. But hey! I'm not going to decide for you. That's why there are different programs, for everyone what floats their boat!
My favourite Java IDE is NetBeans, although at work we are forced to use Eclipse. The usual stuff of PC images maintained by IT and having a standard IDE for the company. I used to hate the workspace corruption and plugins instability of Eclipse. Now since Google has forced IntelliJ upon for Android development, I started to like Eclipse. Apparently IntelliJ doesn't like having only a dual core with 8 GB, and there is no way to disable operations that drive HD access up to 100% other than switching to laptop mode and loosing a few features in the process. I get this feeling that to use it properly I need an i7 with 4 cores, SSD and 16 GB minimum!
You can import eclipse shortcuts into Intellij.
I for example absolutely hate VS and don't really like Eclipse .
This is precisely why I switched 2 weeks ago.
I like the whole ecosystem that IntelliJ offers. I started with Android Studio. Got PyCharm then Idea . Thought I'll try webstorm instead of sublime for web and switched that too. It fills the Visual studio on Linux gap well with CLion . I love VCS ; it beats even Meld any day. Webstorm over sublime gives great and easy run configurations along with the DB tools and remote control and hot reload by default. The webserver for trying out small static files is good too. I like the various plugins. Gonna try the osx development ide next. I like the common theme and look. Adapting to different code style is easy too
I don't really like any of the Java IDE's they tend to be slow bloated and needlessly complicated (trying to be all things to all men) give just an ordinary text editor a go, if you think your project is too complex then you haven't broken it down enough into sub projects...
It sounds like you just need to get used to the fact it's not Eclipse. Change some of the keyboard shortcuts to make them more familiar. You will be slower with it for a short period of time while discovering the things you already know, then will probably start to love the new parts.
You can always edit the shortcuts if that is what matters. IntelliJ has a default keyboard mapping for eclipse users.
Thanks for this greate post
I'm an Eclipse guy, though I use IntelliJ at work. I've tried using it at home as well to learn, but didn't like it. Although both IDEs have their rough spots, Eclipse seems more structured to me. I like having perspectives where I can arrange my windows in a certain way to achieve certain tasks. In most of them I dock windows to the side and autohide them, which I think Eclipse does really well. The settings layout make a ton more sense to me as well, with the global preferences store for the entire workspace, and project level settings per project. With the exception of a few non-Eclipse plugins, it just works, makes sense, and is very portable. IntelliJ feel more.... chaotic, and the way in which it primarily impacts me is window management. In Eclipse, I like being able to drag a window around, and it will show me the places I can drop it into as I move it. In IntelliJ, I'm only seeing context menu items like "Move Right", which feels clunky and slow in comparison to me. IntelliJ also has some really strange policies about closing windows when it thinks I'm no longer using content, which annoys the crap out of me. I tried turning that off, but it seemed to stick. Part of my frustration with IntelliJ stems from my job. We used it for authoring ActionScript/Flex code for years which was painful and slow. Now we're using it to author Java/HTML/JS code, and somehow we've made it so that it's still slow, but now autocomplete rarely works and IntelliJ is non-deterministic, throwing off different errors every time we open it. I also get major skeevy feelings with the checked in .idea directories, and needing to run ksh scripts to "fix" them every so often. I would like to see "IntelliJ done right" to have a fair comparison point.
I moved from Eclipse to IntelliJ: IntelliJ's autocomplete is really a killer feature, and great Maven support, whereas Eclipse is too buggy (lost the count of how many times its workspace gets corrupted). But for few things, Eclipse is much better (eg, showing errors, handling of Git/Mercurial, running tests). If you build with Maven/Gradle, you can open your project with both Eclipse and IntelliJ at the same time. I did it for nearly 6 months, constantly switching from IDE to IDE, until I got used enough to IntelliJ (and its limitations) and started to use it exclusively. 
Old Eclipse user here; took me a while to get used to it, but there's no turning back for me now. Switching to a new IDE is never easy, you really have to give it some time.
&gt; Turns out I hate it. No you don't. You just dislike change. It's human but you should consider trying it a wee bit longer before giving up on it. It takes a few weeks getting used to the move before you don't want to go back. 
I have been an Eclipse user from version 2. I used some bet√°'s even. I was hooked from day one. Main thing I like from Elcipse are the perspectives. No IDE has this. But 2 years ago I ran into trouble with Eclipse; it became unstable. Crashes while working doing nothing stange. I even didn't use extra plugins. I switched to NetBeans. Even though al my co-workers use IntelliJ. I do contracting work so I am allowed to use what I like. Some customers force us but that are not the jobs I take. I currectly work at a large bank in the Netherlands (i'm Dutch). I camo on a team that told me on my first day that I should have a personal license for IntelliJ as that is required. I asked why. "Beause deploying and debugging on WebSphere doesn't work without it". I told him I am not using an IDE for that. I mainly use command line and would figure out how to do this using a script. Eventually converted one of the other team members to NetBeans. Best feature of NetBeans is the maven integration it's brilliant. I am using Eclipse again as I am switching from maven to gradle. Gradle support in NetBeans 8.1 sucks big time. I am waiting on 8.2 to fix that. Somehow I can not gat used to IntelliJ. Might also be because I don't like proprietary software...
It uses the same XPath-like language to traverse the DOM that JQuery does. But that's where it ends though; it doesn't do anything javascripty. 
Since you also will be able to run C(++) and Python code you can't rely on the JVM securitymanager. So I would personally go for some kind of container technology like docker. Have a small light-weight container that can execute the provided code prepared, spin it up, have it GET the compiled code, execute it, PUT the command line output back to the service, and terminate it again. That's how I would do it. 
I'll just take an example from their homepage: Document doc = Jsoup.connect("http://en.wikipedia.org/").get(); Elements newsHeadlines = doc.select("#mp-itn b a"); doc.select uses a Syntax very similar to the one JQuery uses for selecting DOM Objects. In JQuery, you could do this to get all news headlines (if you are on the wikipedia page): var headlines = $("#mp-itn b a"); In both cases you are selecting an &lt;a&gt;&lt;/a&gt; tag inside a &lt;b&gt;&lt;/b&gt; tag inside a tag with id="mp-itn". 
I used Eclipse for most of my programming life, started JavaScript at a new job using JetBrains' WebStorm. The entire time I fought against their way of doing things, and even used the Eclipse shortcuts. But eventually it just won out. It was just so damn powerful. When I went back to Java, I kept wishing there was something like that for Java since Eclipse had now started to feel weak, and then I realized I had completed forgotten about IntelliJ
&gt; I like having perspectives where I can arrange my windows in a certain way to achieve certain tasks. Oddly enough this is one of the main reasons I dislike eclipse and visual studio. Perspective switching is the most annoying thing ever imo. To each his own of course. &gt; The settings layout make a ton more sense to me as well, with the global preferences store for the entire workspace, and project level settings per project. This exists in intellij as well - global defaults as well as per-project settings would be the equivalent I believe. &gt; In Eclipse, I like being able to drag a window around, and it will show me the places I can drop it into as I move it. I agree. &gt; I also get major skeevy feelings with the checked in .idea directories You shouldn't be checking in those directories. I seemed to have the exact opposite experience from you - when we migrated at work it was like breathing new life into the project. Eclipse was horribly slow, the auto-complete was sketchy at best (and basically freezes the IDE for a second or two every time you try and find auto-completions for a new class). Took a bit wait for the indexing and to learn the new shortcuts and where everything was but I feel like Intellij is the more fully-featured IDE (especially the debugger + search), and makes it easier to get up and running quicker. 
I'm curious about class loading. Will things like `Class.forName()` etc. be affected?
I don't hate IntelliJ at all, and it is my IDE of choice for Clojure, but having worked with Eclipse, NetBeans and IntelliJ extensively (although Eclipse not for a long while now), NetBeans is certainly my top preference for Java development. I find IntelliJ very powerful, but too cluttered, messy, unintuitive and requiring too many interactions compared to NetBeans. I also think NetBeans' Gradle support is superior, which is very important to me. Note that I don't do any web related development, where IntelliJ may have some features that NetBeans may not. But IDE preference is quite personal. We are lucky to have three excellent IDEs to choose from.
In IntellIJ, ctrl+shift+enter (*) should complete the line by closing your braces and adding a semicolon (*) with the default windows keymap.
And Ctrl-Shift-Space is "Smart Completion": https://www.jetbrains.com/help/idea/2016.2/smart-type-code-completion-completing-code-based-on-type-information.html which I think is what you're looking for.
I was an eclipse guy for over a decade and at one of my jobs they only used intellij. At first I hated it but had to keep an open mind and just dive in head first, after a week of learning shortcuts and where things were, I can honestly say I never want to go back to eclipse.
I'm curious as to what about Eclipse you prefer for test running? I recently switched from Eclipse to IntelliJ and found them mostly equivalent until I noticed all my test cases got their own little "run" button added to the margin as soon as they were declared in IntellJ, which is pretty convenient.
Yes.
&gt; It's just the slight differences in intellij (compared to eclipse) that really annoy me. Slight differences in how problems are solved between products is hardly a "crappy" user experience 
&gt; How do you share IDE details between yourself and your peers? For example, how might you share a Launch Configuration, or code formatting/style settings? Tools exist for all that. ant/maven/gradle/etc and checkstyle. The benefits of not tying this stuff to a specific IDE are that it doesn't matter what IDE someone chooses to use (so people can be their most productive) and you can then use those same settings in your CI/CD tools.
I've noticed that programmers tend to not like what they don't know or aren't used to. I say this as an Eclipse user, who likes Eclipse, and who has never tried IntelliJ. 
I feel "meh" about it and every other IDE i've tried I think they are all largely bloatware
Java developer stuck in 1999 prefers eclipse over intelliJ. Just when I thought this echo chamber couldn't get any more absurd
I got it for free from my university and was honestly disappointed. Eclipse just does everything I need it to (good auto completion, auto import, code refactoring, boilerplate code generation, plus the usual static syntax checking and other common ide features), and there was no reason to switch to and learn intellij. Maybe its because im not working on massive projects yet but ive found eclipse to be perfect for me for the past 3 years.
Eclipse has a shitty UI on Mac.
I can say with a good level of confidence that you are loosing out in the Eclipse vs IntelliJ war, the hotkeys are now transferrable and it is the engine that matters. The stability is crazy and with Googles support the ecosystem is amazing for the mobile and Web. But yes this argument is valid only in the context of eclipse and IntelliJ. Considering the bigger picture, you should stop worrying about it, maybe this piece of advice is irrelevant but I discovered it the hard way for good. Completely stop worrying and stick to a good text editor that's modern or whatever like sublime of vim emacs. Because modern software development has become super modular which is a very very good thing and let's you stitch up software with cli that will probably be automated later in a CI system, which puts you in a position where you just have to focus on the code. And in such a scenario only editing matters, and having a kickass hotkey map might be the thing you want to focus on if you code a lot. Background: was a hardcore eclipse user, 5 years to be specific and in that the last 4 years and 11 months I used it without the mouse. Recently switched to IntelliJ, again 6 months to be exact, and developed a programming language, yes including a VM with Erlang, Java and Node. Now finally switched to Sublime. 
one of my friends does not like intelij I personally love it.
It does more than just insert a semicolon - like parenthesis. Also, you can use it anywhere on the line you are on - cursor in middle of line. 
I use CLion, IntelliJ and PyCharm on mainly on linux but also windows and macos. Using similar configuration everywhere is priceless.
How do you feel about NetBeans? I've tried Eclipse a few times, but for some reason I much prefer NetBeans. Maybe I haven't given it enough of a chance? It does seem to be the preferred professional IDE, so I would like to get used to it eventually.
Maybe this is why I've never been able to adopt it. I much prefer NetBeans and could never put my finger on the reason. Especially while everyone praises Eclipse as the best professional IDE.
What is the performance measurement using docker. I can give you some kind of statistical data. Like in [codeforces](http://codeforces.com) there are around 12 thousands submission in 2 hours(when a programming contest take place). So in per minute it processes 100 files. So using docker what will be the performance measurement. 
IDEs are power user tools. You have to give them more than 30min. Of course you'll have complaints when you're used to eclipse, so did I. But since you bring up usability I can definitely say eclipse is not better. If you give it an honest shot you might see why so many like it. This is from something who tried most IDEs under the sun (not only Java IDEs)
in term of html5 conformance, my parser (https://github.com/digitalfondue/jfiveparse) is most likely better than jsoup :)
Legal? It's a breach of the EULA for sure. Nobody is going to come knocking on your door though. They might ban your account. And the authors of the repository might get a C&amp;D at some point.
I appreciate the help regardless! I suppose this is where it's crashing in [FileFontStrike](http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/a11ab21bb799/src/share/classes/sun/font/FileFontStrike.java) (line 110-121) : /* Used only for communication to native layer */ private int intPtSize; /* Perform global initialisation needed for Windows native rasterizer */ private static native boolean initNative(); private static boolean isXPorLater = false; static { if (FontUtilities.isWindows &amp;&amp; !FontUtilities.useT2K &amp;&amp; !GraphicsEnvironment.isHeadless()) { isXPorLater = initNative(); } }
Mesos is a bare-metal abstraction layer which lets you view multiple machines as a single pool of resources. Basically you tell mesos "I need to run this with 1 CPU and 1 GB RAM" and it'll figure out a way to do so with the available machines. If you need more resources, you can just add more machines, mesos will do the rest. Mesos by itself already provides some isolation, but I'm not sure exactly how much. Docker should take care of most of your security concerns and is supported out-of-the-box by mesos. Put your compilers and executors in docker images per programming language, make sure to disable networking, restrict file system access, and whatever else you're worried about in your docker images and you're good to go.
/r/pokemongodev
I was just trying to help you out since you wondered what part of your response was ambiguous for me to assume you didn't know what you were talking about. By "in the first place" I thought you meant compile-time. You're saying you meant the build system/script in general. Maybe you should stop assuming people can read your mind and your problem of people assuming you're stupid would go away. Thanks for clearing that part up. 
Yes, you are.
I am actually outputting it in excel cells. Heres the code for that: if(position==(result.length-2)){ mysheet.addCell(new Label(11, rows, result[result.length-2])); } if(position==(result.length-1)){ mysheet.addCell(new Label(12, rows, result[result.length-1])); }
Post your code to Github with sample input that reproduces the error, and I'd be glad to take a look.
Not sure this is "the right way" but internally we have an oauth2 provider for client facing apps authenticate against. It yields a JWT (json web token if you're unfamiliar) which is a "bearer token" and it holds all the relevant user info. It's asymmetrically signed so all the client apps have the public key and van validate it. That same token can be used for various services. Most of our stuff is spring apps, but we have a few others in the mix (I have a Go one and a Python one working).
For future reference, when asking for help it really helps if you post a working example that demonstrates the problem. Otherwise we're just guessing about what's wrong.
Since this is programming help, it should, as the many hints on the page indicate go in **/r/javahelp**. **Post removed:** Programming help
"it doesn't work just like eclipse, i hate it!"
I wrote a [blog post](http://niels.nu/blog/2015/json-web-tokens.html) some time ago that shows how to use JSON Web Tokens with AngularJS and Spring Boot. 
What nerdwaller said is what we have. You can also use cookies if you really have to. We also use kerberos but then exchange for a jwt rather than a ltpa cookie. 
My colleague gave a presentation on this very subject at Nordic APIs a while back. On that site, you can find a [writeup and a recording of the talk](http://nordicapis.com/how-to-control-user-identity-within-microservices/). Also, I wrote a [deep dive into OAuth and OpenID Connect](http://nordicapis.com/api-security-oauth-openid-connect-depth/) that might be helpful. 
&gt; If an API needs an implicit parameter where before it didn't, it will throw an exception upon compiling just as if it needed a normal parameter. I don't mean implicit parameters. They're probably OK. I meant implicit defs, e.g. for wrapping one type with another automatically. Perhaps that's not an issue with Slick &gt; Maybe this is more a library designer's complaint That's quite possible. We have special complaints that no one else ever thinks about :) &gt; It's interesting that Lightbend is so Java-oriented, but it's not entirely clear to me why that's a bad thing. It's not a bad thing at all, but it's "a bad thing" for Slick, being the only API that cannot work with Java due to its extremely tight integration with the Scala language. &gt; That's interesting, if a little orthogonal to my main concerns. Why do you think focusing on Spark is a bad idea? Spark is just one solution by one vendor. Given the history of DBMS, it's very short sighted to bet only on one horse. We've seen many "Sparks" in the past, and I will bet any odds that this "Spark" will not "make it". At the same time, Lightbend doesn't really offer any answers on RDBMS integration (while *everyone* is using RDBMS). To me, this simply looks like a poor choice / message from an enterprise perspective. &gt; JOOQ was actually my second choice - but the extra layers of complexity when mapping domain objects, lack of support for case classes, and lack of support for Option meant I went with Slick instead. Case classes are supported, but yes, if Option is *that* important to you, I guess jOOQ won't fit. &gt; What was this query, exactly? queries. They didn't look too complex, though, while in jOOQ land, no problem to translate a 1419 LoC monster: https://twitter.com/frapontillo/status/748533968115482624 &gt; BTW, if you're interested in my very specific complaints about Slick, let me know I'm *very* interested :)
Labels are still included in the OCA (Java 8) exam though. You can use the entire unicode charset for declaring variables.
I've been using eclipse for a long time, then switched to IntelliJ IDEA about 2 years ago and been using it since then. Recently I started working at redhat and have been hearing how great and superb eclipse is and how intellij is wrong and earns money. So I went and downloaded eclipse. I thought something had changed during those 2-3 years of me using idea. First of all I noticed it has built-in dark theme. Finally! I like to work in the evening and white screen hurts my eyes. But... Why doesn't eclipse remember my selected java syntax colour? Why are classes always bold when I restart eclipse? Change again from bold to normal, restart eclipse, classes are bold again. WTF! Lots of icons have white border. I understand, they were drawn for white eclipse, but man! Don't you, artist guys, know anything about opacity at all?! I tried to push myself for couple days, working with eclipse. But yesterday it just freezed during project rebuild after small but necessary change. Seriously? All the previous stuff is not awful, I can live with that. But freezing in the middle of my work? No, thanks. That's enough. Now I'm back to idea again.
And this is why you don't install the JRE package....The JDK doesn't have any surprises.
Only in the USA! The rest of the world isn't covered by the DMCA remember :)
Hopefully this does not produce slow code on non-Intel ARM processors. Note that targetting iOS still requires a Mac OS X installation. 
If anybody has any questions about this joint solution, I am the CTO of Heimdall Data, and can provide answers. If desired, I can schedule a Webex demo for those wishing to explore the possibilities deeper. While this forum is focused on Java, I also wanted to call out that we support non-java implementations as well, including PHP.
There are a few technical issues with your post, but overall it's good. Be careful to say this: &gt; Obviously this token is not plain text; that would make it trivial for a client to add an 'admin' claim to it‚Äôs set. JWT‚Äôs are both encrypted with a secure key (only known to the server) as well as signed. There is room in the spec to encrypt it (actually called JWE), but that isn't the default and you should be careful to tell people it is for fear that they may put sensitive info in there from the server. It's actually just base64 encoded and signed, the signature is what guarantees the token isn't altered (assuming the signing key is not leaked). You can validate this by separating on the dots and base64 decoding elements 0 and 1 (2 is the signature). Part of why JWT is helpful here is you can asymmetrically sign it. So one server can be the provider and everyone else can just validate the token (but not alter it). Still though, even with your implementation, a client can still read the contents. [edit]: Now that I am on my computer, here is a script for anyone interested in decoding (without verifying) a JWT: #!/usr/bin/env python import base64 import json import sys def reup_padding(s): return s + ('=' * (-len(s) % 4)) if len(sys.argv) &gt; 1: token = sys.argv[1] else: token = sys.stdin.readline() hdr, body, sig = token.split('.') header = base64.urlsafe_b64decode(reup_padding(hdr)) if isinstance(header, bytes): header = header.decode('utf-8') body = base64.urlsafe_b64decode(reup_padding(body)) if isinstance(body, bytes): body = body.decode('utf-8') print('Header:') print(json.dumps(json.loads(header), indent=4)) print('\nBody:') print(json.dumps(json.loads(body), indent=4)) The article's contents: Header: { "alg": "HS256" } Body: { "iat": 1422456647, "sub": "tom", "roles": [ "user" ] } 
If you're running the spring boot stack or are open to using parts of it have a look at spring cloud, it contains shed ton of related projects/subprojects/tools that can help with everything micro service related. The spring cloud auth server example maybe a really good place to start https://github.com/spring-cloud-samples/authserver. 
What does this solution provide that Hibernate (+ L2 caching) and a load balancer/proxy like MariaDB MaxScale does not? Also, is there any public documentation available, like Hazelcast's?
We have found that in many cases, there is a large amount of caching "left on the table" even with Hibernate's caching. Our logic tracks what tables are being touched, and handles invalidation appropriately based on writes. Via Hazelcast, these invalidations are shared with multiple nodes in a very lightweight manner, helping to guarantee consistency. MaxScale provides similar LB functionality, however it adds a proxy hop to the system. For Java applications, the entire data path of Heimdall is implemented at the JDBC layer, avoiding the extra hop, while leveraging a central manager to guarantee consistent behavior between application nodes. Further, everything is provided in a single package, with a GUI for configuration and analytics. All the functionality is policy driven, and can be changed at runtime, simplifying the development process for programmers. If you wish, I can setup a webex to provide you with a quick demo if you have a moment, just private message me your e-mail and I can demo it now.
/r/javahelp
Yeah I know, I still need to change that bit. It was worded incorrectly. But thanks for reminding me.
&gt; We have found that in many cases, there is a large amount of caching "left on the table" even with Hibernate's caching. Our logic tracks what tables are being touched, and handles invalidation appropriately based on writes. Are there any public use case examples you could share? I took a look around your website and to be frank I didn't see much short of signing up for a webinar or a demo. &gt; For Java applications, the entire data path of Heimdall is implemented at the JDBC layer, avoiding the extra hop, while leveraging a central manager to guarantee consistent behavior between application nodes. This is interesting. &gt; If you wish, I can setup a webex to provide you with a quick demo if you have a moment, just private message me your e-mail and I can demo it now. I appreciate the offer, but as I don't have the say in what software we purchase at my company, I feel a demo would be wasted time on me. :) I would suggest however fleshing out the website a bit more than it is now - maybe with some public use cases as I've asked about above. With some public knowledge if the product seems to fit our solution, I can always kick it over to my CTO and we can look into it further, but a lot of it feels so "locked away" behind registration forms so I'm not sure if - regardless of interest - I could convince anyone internally to investigate more when we have a working production ready solution in place. Just my two cents.
Thanks for your feedback, I'll pass this along to our marketing team. For clarification, are you saying that the step of registering for information is enough to prevent solutions from being evaluated?
Personally, I think it's a bit too much text. As a presenter, I try to avoid bulletted lists for very similar reasons. I mean, each link is very deep into the details, and I can't skim the entire list briefly to see what link is really interesting to me. I have to concentrate and read the whole list very slowly. For instance, you could group the articles into sections like "performance", "logging", "sql", "oracle", etc. and write some intro about them, including why you included them in your list.
I was about to say how I found this discussion surprisingly civilized, and then I started reading the IntelliJ fanclub answers. God damn, some people want to be right. Use whatever pleases you. Eclipse is fine. 
The grouping/Tagging is a very good idea. I can remove the bullet lists and add a description to every item. At first, I thought of making the whole thing easier for users to just pick whatever they are interested in. I'll try this new format and see how it goes.
Is it able to handle user login before accessing the desired html page?
We do support existing Hazelcast clusters, although by default, we configure the system to use local cache for each node started, so no additional configuration is necessary. Help is setup online, but isn't setup exactly for non-user documentation purposes, for example, you can go to http://www.heimdalldata.com/help-rules/ for the help documentation on the various rules and parameters that are supported, which can give you a much better idea of what can be currently configured. I'll look into having our team make the information more accessible without registration.
Great, thanks. One last question - is there a list of supported DBs?
Intel doesn't make mobile processors anymore and fired the staff responsible for mobile in its recent big workforce cuts...
This is help with Java programming and thus should be posted in **/r/javahelp** as the many hints on the page indicate. Try the [Official Oracle Tutorials](http://docs.oracle.com/javase/tutorial/) **Post removed:** Programming help
I am hating it too. I created a simple maven QuickStart archetype project. Tests blew up complaining about junit 3.8. Spent hours trying to solve. Then it started complaining about byte code version 1.5. I have no desire to spend my short existence troubleshooting this crap. Then I fixed it. Then some unrelated setting change caused it to come back. Fuck that noise. 
I agree that they would possibly do something like that, but slow is relative and most apps are not processor intensive. Most of the graphics stuff is done in the view frameworks on iOS and Android and the app is mostly just business logic and IO so raw throughput is less of an issue when the gain is portability. Edit: Also, on Android you'd just use the Android toolchain and wouldn't need to touch the Intel compiler. It's really just an iOS Java ahead of time compiler similar to RoboVM. iOS is ARM only so it'd be in their best interest to generate fast code for it. 
Item 16 is a bad joke, isn't it? If we would follow that advice, we would only program in Haskell (or Frege if we stay at the JVM)... not that this is bad at all, but totally unrealistic! Last but not least this statement would discourage all Lisps - and knowing Lisp is an ideational virtue!
I missed that, THANK you
This probably not isn't fair criticism since the Memory utility class is just reused from another post, but that seems like a lot of code to format memory size. The same thing could've been accomplished in just a few lines without repeating a lot of "*1024". public static String format(long bytes, int decimals) { final String[] suffixes = {"B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB"}; final int magnitude = (63 - Long.numberOfLeadingZeros(Math.abs(bytes)))/10; final double adjustedSize = bytes/(double) (1L&lt;&lt;(magnitude*10)); return String.format("%." + decimals + "f%s", adjustedSize, suffixes[magnitude]); }
Anyone run into this problem while installing? I just tried downloading and running through the installer which prompt for the computers password however I get Authorization failure due to incorrect password. I know I'm typing it in correctly and I just double checked my password to be absolutely sure.
do people really care how big their apps are these days? I know I sure don't look to see if it's a 5mb or 50mb app before downloading if it's what I want. 
Odd numbered updates are CPU (critical patch updates), even numbered updates are PSU (patch support updates). Security-minded folks should go odd numbered, unless something is broken that you specifically know is fixed in the PSU update, in which case go even.
Requires a RedHat account to download: * Name * Company * E-Mail * Country
It said: whenever you can, so basically if you have a choice, choose the one, which is easier to reason. Since all the advices seems to be directed towards big app developers, this can be a good advice since hunting for memory leaks or similar might be very annoying to trace without the right tools.
Is there any way to prevent and make absolutely sure that Oracle doesn't install any unnecessary garbage as part of patching their routine incompetence? Main threat appears to be the Amazon garbage. Details available upon request, but short summary is I am a bibliophile who passionately hates Amazon, I have not done any business with Amazon in 15 years, and I intend that I NEVER shall.
It's a good practice to care about every kb you ship in the app and many developers do. There are many good apps by top devs in the emerging markets with app size less than 10mb.
Glad my projects are too small to be massive :3
We can still use robovm with mobidevelop's fork (http://robovm.mobidevelop.com/). It has some limitations though.. Here is a sample project https://github.com/sureshg/RobovmKotlinApp written in Kotlin. 
It is not a complete login via those things. They still ask for a password to be entered. 
It was announced quite a while ago. Shame it is not possible to build native OS X apps using it.
It's going to be open sourced soon. 
This not applies to everyone, but today wouldn't the more practical choice be intellij because of android? if someday you have to do an android project, you'll have a head start.
Minecraft already has a full reverse engineering suite. It's called MCP and Forge. http://github.com/MinecraftForge/MinecraftForge
The desktop is going to disappear? If I try I can imagine seeing touch monitors getting cheaper and common but I don't see the mouse keyboard interface pioneered in1969 going away. I want to go back and edit 1969 to 1960's but this great, modern phone only lrts me lift my fat finger and drop near where I want to edit. The text is is small it strains my eyes. Typing by poking hard to hit virtual letters has taken me 10 times as long to write this comment as when I'm on a PC.
'Java 8' was really Java version 1.8. 'Java 9' really is Java version 9. I think the change was made so that there is no just one version number, rather than a marketing number and an engineering number.
Sounds like a fun but, too complicated of a thing to do. You should try /r/javahelp or stackoverflow a question like this. Although I have idea of how to do something like that in Java, I suggest that you host the image on imgur if you have the rights and then, lower the image resolution and size to something that most users will find acceptable. You can offer an alternate way (link) of downloading a higher quality image. Managing assets in that manner is standard and good practice for programmers and web developers. The less a user has to think and wait - the better your code comes across. 
Well actually this isn't the program I'm working on, its just an example code. The real program has a bunch of pictures the user would go through one by one, and if looking at every picture takes 1-5 seconds of time JUST to display, its kind of unpleasant to use, but if it were to lazyload it would be fine. So it would be cool if you could point me to the right direction or bring an example of how one would do such a thing! But either way thanks for the effort, I'll make a post to javahelp as well!
So, you want to build this program? Why not not just store the images in a local folder - that would cut your load time from seconds to milliseconds. [Here's a search I did.](https://www.google.ca/search?q=java+load+an+image&amp;ie=utf-8&amp;oe=utf-8&amp;gws_rd=cr&amp;ei=47mWV_3aGOT4jwT9iYOICg) The first link will send you to Oracle's official Java tutorial. It was my main source for learning Java. Any I/O you do in Java will most likely be done through a "buffered..." class to minimize reads and writes to the disk. In this case you'll be using BufferedImage as stated in the tutorial.
Yeah, I am currently sticking with the mobidevelop fork of RoboVM for now. However, because of bitcode probably going to have to switch to multi-os engine at some point.
Fine for me on Mac.
The IntelliJ decompiler is the best. Even the one in IntelliJ Community is pretty good. Extracting the class file is as simple `jar xvf file.jar`.
Since this is help with Java *programming*, it should go in **/r/javahelp** as the many hints on the page explain. **Post removed:** Programming help.
Most commercial JVMs can compile Java AOT to native code since years. Many tend to be unaware of it, because they don't want to pay for development tools and neither Oracle JDK nor their open source version (OpenJDK) have an AOT compiler. 
I've never touched React Native, and it's been years since I played with Android, but I was under the impression that React Native would result in native code (and thus be performant). Is that not the case? Is it just a wrapper around some webviews?
It uses some native widgets but it's javascript that is run thru the devices JavaScript JIT. It should be performant but the problem with doing that is the reliance on native peers (which FYI is the problem with this solution too). Native peers are REALLY hard to get right across platform and indeed react has some lightweight elements mixed in to allow this (at the controller level). The problem isn't just portability, it's the complex performance behavior e.g. you optimize something for iOS performance and it slows down on Android... Both OS's are implemented so differently it is just really hard to nail this down...
It uses the JavaScript VM to manage native views. The views are native code but the business logic and network code is all JavaScript (interpreted/JITed)
You're absolutely correct. As long as the CDI bean is using constructor or setter injection, it can be used without any sort of container at all. The original author's assertion is flat out wrong.
For me to a pain to wait until the little tool tip shows up and says there are multiple imports. If I try to control space or whatever on it, it'll want me to create a class with that name instead of letting me choose import options. 
Templates can do the static logger import for you. Not the code generation ones. 
That's a confusing reply because "as of now" can imply two things. It can imply "from now on" or it can imply "at this moment".
Yes, normally Java has been mostly backwards compatible. This release will break the most libraries/apps in Java history. There will be a lot of waiting around for open source developers to upgrade their projects. Lots of poorly maintained forks of those projects to make them Java 9 compatible. And lots of people adding lines like `-XaddExports:java.base/sun.fubar.clusterf=ALL-UNNAMED` ... Get used to Java 8 it will be the Windows XP of Oracle.
I've just started evaluating IntelliJ (after being an Eclipse evangelist since the old IBM RAD days). On a 34" 3400x1400 display with 100% scaling, the toolbar buttons are fine. A little more legible than Mars due to the fact that IntelliJ supports dark themes more thoroughly. Toolbar button sizes are based on the overall font size used and can easily be adjusted. The best thing to do would be to install the community or evaluation version and see how it works on your specific display. (Note: didn't mean to necro your comment but I was searching for other info and came across your question)
In Eclipse, I've always had a template defined like: private static final Logger LOG = LoggerFactory.getLogger(${enclosing_type}.class); I type LOG&lt;ctrl+space&gt; in the class body and it inserts the above with the right class name...but then Logger and LoggerFactory need to be imported (textually before the class declaration of course), how to do that with the template? In IntelliJ you can just write out those class names fully qualified and it will then import them and shorten the occurrences in the template.
YEA!!!!! I love DW. so glad it's 1.0. Thanks to all who worked on it.
Eesh we've still got a 0.7, a 0.8 and a 0.9 app in production. Worth upgrading?
Mostly about concurrent vs parallel definitions, and Java 8 Streams; with comments on a few gotchas (to me) like merging HashMaps is expensive. Which feels obvious in hindsight.
I've used all three of the big ones (intellij, netbeans and eclipse) eclipse is just ugly and cumbersome imo. I liked netbeans in the beginning but after about using it for 1-2 years i realized there were just some fundamental problems with issues not being resolved which i guess i shouldn't be surprised considering it's open source. Thats not to say their bad, or you shouldn't use them by anymeans just not what I prefer. Additionally netbeans does have some features that I miss in intellij, I enjoy the auto complete functionality that exists when working with maven POMS in netbeans for example. To my knowledge it kind of exists in intellij, but i like netbeans implementation better. I will say that coming from the other two intellij, can be kind of confusing for people who don't read any documentation, as its cleverly laid out but its not inherently obvious where some of the basic functionality lives. Also dealing with project source's in intellij is kinda different (read weird) if your use to the eclipse or netbeans environment, but overall once you get over those quirks i'd say its a huge upgrade
You need to provide more information if you expect anyone to give you a useful answer.
I used DW for a while. It's okay. But compared to other languages, it is still Java ;(
Nice, I use DW both at home and at work, really stoked to see 1.0 finally released!
The jetbrains website should have a lot of information on it. The main one for me is that all the plugins you want cone bundled with the IDE, and they just work well together. I spent four years fighting my maven plugin and git plugin. I switched and all that pain went away. That was six years ago. Don't regret it. It does have some very good support for frameworks like spring (and they appear quickly after the framework is released).
Great place to post anti Java crap. Ten out of ten.
https://software.intel.com/en-us/forums/multi-os-engine/topic/655289 
PRO: it does everything eclipse does + more CON: some tricky shortcuts that take time getting used to. may need to play with settings to resemble some of the better parts of eclipse (deleting words untill uppercase letter for example)
Can you give some examples? I'm in the Eclipse camp purely because that's what I started with, and I'm not aware of any compelling reasons to switch. The company I work for is flexible with which IDE we choose to use but wouldn't want us to switch without at least some reason to (e.g. improved productivity)
The only thing I miss from eclipse is the ability to view Java docs by hovering over elements with my mouse. Everything else is better.
Tried that multiple times. Didn't help. It's very slow and you're limited to one project at a time, which is a no-no for me.
Really? I can have all of my 60 java maven projects open in IntelliJ at the same time and keep it lightning fast? IntelliJ slows down to totally unusable for me with only one "module" in my project.
you can enable that feature in settings (see documentation on mouse over)
You know, I keep going back and forth between making this vs. Scala/Play my new personal playground, but I keep waffling. There is just so much "just get shit done" aura around this though. Hmm... would it be difficult to add Kotlin support to DW, or should additional Jars be run on the classpath like is shown [here](https://discuss.kotlinlang.org/t/kotlin-web-app-using-dropwizard/781/2)? Also, I have to wonder if Scala could be run the same way with DropWizard. Hmm.. Yeah... I like to play with this stuff. What can I say?!
Sorry, this is from a begginers point of vew :)
I'm totally productive with Eclipse. My main problems are meetings, stupidly designed legacy apps and infrastructure issues. Nothing IntelliJ can help me with. 
you can totally run kotlin in a dw app - you just need to include the maven bits for doing kotlin and you're off. here's a decent example project - https://github.com/doomspork/kotlin-dropwizard
This attitude sucks. I've seen it in a large organisation over many years
Dropwizard is a nice Java web framework - clean, lightweight, and actively developed on GitHub. It can be used with whatever front end you like such as Angular JS and bootstrap. If you're curious to see some extra sample code with good explanations updated for DW 1.0.0, check out [XDropWizard](https://github.com/timmolter/XDropWizard) on Github. Demonstrations include several useful open source projects such as Yank, Sundial (a Quartz fork), Bower, Flot JS Charts, Angular-nvD3 JS Charts, Bootstrap, AngularJS, HSQLDB, XChart Bitmap Charts, JUnit, etc. Disclaimer, I am the developer of XDropwizard.
54 points. 86% upvoted.... so, downvoted maybe 8 times? Why would 8 different people on a Java subredit, want to bury the fact Dropwizard has reached 1.0 ? 
Not too much, not too little, lagom.
Some people just want to watch the world burn.
Does anyone care what leaches off of society think?
Almost 2 years in production, without server instability.
It's probably all the Java EE guys pissed off that we do not have to deploy WAR/EARs in their beloved app servers any more...
I wish they called it `OptionalResult` so It wouldn't collide with Optional from Guava which seems to have different meaning and usage.
Thanks for the comment :-) ..as stated in the article, I wrote this for a very specific purpose, but we are using it in production for that purpose - ingesting 3-5 GB of data daily - so we are truly committed to fixing any issues that may arise! As for the possibility of being left hanging if we were to abandon the project, I specifically chose to make it API compatible with an existing library. Making it easy to test it out on an existing code base - but also, to remove it again if need be!
I use both at work. Main Java EE app, smaller DW services that work with it.
We can really use this, I'm looking forward to trying it! I'm hoping it can be driven entirely by command line. It would be great to incorporate it into a Vagrant dev environment setup for those that want the rest of the environment setup.
Good to hear! Noticed the downvotes and happy to hear you took it in good fun as it was intended. :) Telling a developer that a problem has already been solved is like telling a songwriter there's already a song about love.
pffff IDEA forever
I code in Kotlin myself and dropwizard works really good there, you can check out one of my samples if you want: https://github.com/RichoDemus/gradle-kotlin-docker-dropwizard
this is a newly created spam account that mostly only post their youtube videos...
Really, git? eGit is one thing that keeps me using Eclipse. I tried IntelliJ Idea and could not get around their poorly implemented "change sets" concept. In eGit I can commit individual lines in a file without committing all changes in a file. I could not do that in Idea the last time I tried it. Has that changed?
The exact upvote/downvote counts are fuzzed to prevent spamming.
Yeah same happens to me, mainly in my secondary laptop(pentium n3700), after I open it up the cpu fires up to 100% then it dials down after a minute or two and it's as fast as ever
The core-libs-dev mailing list discussion says that `Optional.get()` is often misused by developers who don't realise it might throw. I've never seen such misuse, I'm curious if others here have.
Looks cool but production ConductR only deploy is a big red flag for me, hopefully the multiple deployments options will arrive soon.
A simple improvement over `get()` is to provide a nullary version of `orElseThrow()`.
I have seen this. Devs know that `get` may throw in general but seem to constantly overlook the possibility of specific calls throwing. From my experience I strongly believe that simply renaming `get` to be a nullary case of `orElseThrow` encourages better use.
I don't see why NVidia would even need to *listen* on a port for updates, it seems more likely that is related to their optional streaming services. Try getting rid of GeForce Experience and see if that gets rid of the service and if it doesn't just disable it manually. Having a service running with undefined function (can't find any info from NVidia about what this is supposed to be doing) on a public port seems like a much bigger security risk than relying on Windows Update to update your graphics drivers (which it will) unless you really want the latest and greatest drivers, of course...
Of course, there are only 65536 of them :D
It's dubious that they need a port open for downloading purposes, but, indeed, if I disable it, there will be no update for the driver. 
&gt; A method forRemoval() returning a boolean. If true, it means that this API element is earmarked for removal in a future release. If false, the API element is deprecated, but there is currently no intention to remove it in a future release. The default value of this element is false. Shouldn't that be getStatus() which returns an enum like DEPREDATED MARKED_FOR_REMOVAL This way it would be far more future proof.
Is there any updated sample project that using dropwizard as both the OAUTH2 client and server? 
This is an addition to the team because of our rapid growth.
Sorry for being rude but which part of `Anything that requires additional devs work for serialization and deserialization is a step backward` you didn't understand? If I have to maintain JSON or XML mapping or spend time on manual serialization then that's exactly what I **wasn't** asking about. I'm working in a project where having portability or interoperability is not needed. We also have no problems with efficiency so using something just to gain more efficiency in expense of having something simpler to maintain would be only example of premature optimization. And I don't know what means `robustness` in this context. Unfortunately we have quite old code-base. After 2 years of preparation maybe in next 2 months we will start using Java 8. I'm not trying to defend our code base or decision to stick with Java desktop technologies for our client but thats what we have. I can try to do my best in this what I've got or abandon this company. But abandoning it won't change the fact that in this example classic Serialization has no indication of being a bad choice.
What's the rationale for this? Doesn't make sense as private methods don't specify a contract. The only situation I can think of this could be useful is if you implemented a default method and used the private method as a hook method (like template pattern)
I see that portlet support has been dropped. That's not s big surprise, but what should we use instead?
Reactive framework is being made part of the core spring framework. JDK 8 baseline Junit5 support
&gt; What's the rationale for this? I think the rationale is exactly the same as for the private methods in regular classes.
That's not Java.
For example: interface X { default void method1() { doSomething(); // ... } default void method2() { doSomething(); // ... } // Reusable code here: private void doSomething() { ... } } Of course, you could work around the current limitation as such (and the JDK does so, quite frequently): public interface X { default void method1() { Y.doSomething(this); // ... } default void method2() { Y.doSomething(this); // ... } } class Y { static void doSomething(X x) {} } But the price of this approach is that you have to resort to package privacy, which might expose your helper to too many other types.
Ok thanks so much
&gt;The part where you literally believe that no benefit could justify a marginal increase in dev work (‚Ä¶). Where did you see that? Let's start with the fact that there is no place for believing anything. You can show flaw in my logic the same way I can show how your suggestions don't apply to case of project that I'm working on. And the most important thing is that so far you showed that you don't understand my case. There is a big difference between dealing with legacy code, written in era of Serialization and believing that's the right way do to things also these days. I've never admitted that I believe in such things, rather pointed that this is what it is and I have to deal with it. I'm not even going to show you LOC-s of this project, cause I think I already gave enough clues that it's big and also I'm not sure that I'm allowed to talk about specific numbers. &gt;Manual JSON or XML mappings are not required. Libraries like Gson can easily serialize existing Java objects and will properly respect things like transient fields (‚Ä¶). ‚Ä¶ which is not correct when you have anything more than flat objects. We have one place where it was decided to store JSONs instead of entities in DB. The sad fact is that it didn't increase anyones productivity and instead it gave many headaches. For me, this shows that teams at Google are doing much too little cooperation. You will know that once you try to serialize one of `ImmutableCollections` with Gson. And apart from that fact any kind of abstraction needs special treatment. I'm not trying to be complainer here, I think that Gson is a good library but saying that replacing Serialization is only a marginal increase of work is absurd. &gt; You'll never‚Ä¶ How do you know it??? We are always open for all of this, but you know, none of this things were needed so far! And the most funny thing is that one of the arguments for using JSON in that one place described above was requirement of having human readable serialization but after a few iterations it become obvious that no one is benefiting from these. This was a textbook example of Yagni, as well as all your examples: doing all of this just because one day we may need it even though no one is sure if at least one of those ‚Äûbenefits‚Äù we gonna experience. &gt;The amount of coupling that Java serialization introduces between sender and receiver is bad design by default. This would a very good advice for a person starting a new project or for a small team with not too old codebase. But I really would like to see you removing Serialization from a project dating the beginning of the millennium ;-) . &gt;It's not even suitable for an undergrad CS project. I'm not sure if that was always truth in Java. What was the oldest code base that you worked with?
You haven't been on the implementation end of an IBM deal then
In Java, **constants** are per definition `static final` variables that are declared at class level. Every other `final` variable is just that, a `final` variable, but *not a constant*. Factfinding helps.
&gt; In line with the spirit of backwards-compatibility, the JEP states that &gt; the guidelines are to be applied for new command line options, but &gt; not necessarily for the existing ones. That's a mess. The solution would be to create alternative commands with different names but consistent options, deprecating the old commands.
But it is not a *constant*. Constant is a special term in programming and in Java, per definition a `static final` variable at class level. Other `final` variables have a *constant value*, but are not actual *Constants* - it's *terminology*. When tutoring, it is *mandatory* to use correct terminology, adhere to the [Official Java Code Conventions](http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html), and best practices. Not following these makes tutorials useless and low quality. That's also the reason that only experienced people who have full understanding should make tutorials. There are already more than enough low quality tutorials for every possible subject on the Internet. What the net needs is high quality - and from what I've seen so far, you are sub-par.
[I just made a post with the code for my own Pokemon game I created for my final grade 11 computer science project!](https://www.reddit.com/r/java/comments/4v2uf9/made_a_textbased_open_world_pokemon_game_and_i/) You can look in there if you want to get some ideas on how to do some code or whatnot.
Omg this helps so much thanks!
I'm glad I could help! :D
you'd be much better putting this on a site like github if you are serious about getting contributions or help with this....
buzzword Bingo!
You should put it in a public repository anyway rather than uploading it in ZIP and uploaded to mediafire. This could also help when it comes to potential future employment as it makes it easier for employers to see what you can do.
I guess you're right about that. Thanks for the tip!
Private methods would be great for marker interfaces, or default methods that should remain internal to the implementation. More encapsulation is always good
Has egit gotten a lot better in the last year or so? I currently use source tree as egit was a buggy mess when we switched to git.
Amen to that :-)
I fully accept that you are working with a big ball of legacy mud and can't afford to retroactively improve the code or design, but that's not an argument for Java serialization. That's just technical debt in your codebase. It doesn't justify use of Java serialization in general, and it doesn't make the absence of Serializable on Optional a big issue for anyone outside of poor folk like yourself who are stuck with the consequences of Java serialization. You can use "YAGNI" to justify any bad design but your post about Java 8 Optional shows you have *already* encountered the shortcomings of Java serialization. If you were using another serialization library, you could simply write a type adapter or serializer for Optional and it wouldn't be an issue. You mentioned that you were using it for client-server code too. I hope you aren't performing any deserialization prior to authorizing and securing the connection. Were you aware that Java serialization is a common RME vulnerability?
Yeah not sure either
I only skimmed the article. This doesn't seem to offer anything different than Eclipse offers by default for seem how bits of code are connected ( not to mention what you can do with plugins for making diagrams ). Am I missing something? No sarcasm, I really am interested in this thing if it does something new.
Or use Unity with JS
IBM portals/portlets are pervasive in the enterprise. IBM salesmen are good at selling their crap to managers and architects who make the buy decisions. These decisions makers do not use these products in anger for development on a daily basis. IBM salesmen know that their portal product is hated by developers so they tend to sell to non-developers who don't know any better. 
Uhm... Are you asking "how to start a new project based on processing"? In that case, make sure it's a maven project (if you don't know what that is, take the time to learn that, it's a vital part of today's Java ecosystem), and add this dependency: &lt;dependency&gt; &lt;groupId&gt;org.processing&lt;/groupId&gt; &lt;artifactId&gt;core&lt;/artifactId&gt; &lt;version&gt;3.1.1&lt;/version&gt; &lt;/dependency&gt;
Yeah it looks like the uml view that intellij produces. But more interactive. 
Of course, can't forget Rich Hickey's classic talk [Simple Made Easy](https://www.infoq.com/presentations/Simple-Made-Easy).
Coati is a tool designed for reading and exploring source code. It consists of three main views, each helping to understand code quicker. The graph visualization shows all relationships of a symbols to others. It is similar to UML but designed to be all interactive and give a quick overview. The code view shows all source locations where the symbol appears. And all symbols can be found and activated via fuzzy matching in the search field. None of these features is by definition new, it's their combination that makes exploring code with Coati more efficient. Which other tools do you know and use for this? We are currently working on supporting Java and are looking for testers, if you are interested let us know by writing to mail@coati.io
[removed]
You were burned. Now come be healed. Witness the magical power of Spring Boot.
I use CXF contract-first, wsdl2java-style. Maven plugin works fine... I would think they got the reciprocal right too.
Do open source projects (under the GPL, MIT, BSD, and Apache licenses for example) count as commercial? These licenses allow for commercial usage and you can even get your software sold for a price or paid to develop it. Does having the ability to get donations also count as commercial usage if one is not a non-profit? 
I seemed like a good idea at the time
Are you asking because you want to know if you'd need a commercial or a private Coati license for working on such an open source project? If that's what you're asking: Even though those projects can be used in a commercial context you would be working on code and functionality that is not getting sold. So using a private license would be perfectly fine. If you're working on a commercial project that just uses an open source project, that's a different story and requires a commercial license. Having the ability to get donations in a non-profit context wouldn't make the project a commercial one as long as making donations is not mandatory ;)
A plugin for Eclipse is like a plugin for Chrome or Firefox. It is an extension. Eclipse was designed to be modular, only having minimum built in functionality. Instead it has a framework for people writing modular self contained packages of functionality, that "plugs in" into Eclipse via a standard set of hooks. 
What if one writes open source software, gives it away for free, but has an option available where support and/or development can be paid for (for example if a company does not like your license and is willing to pay perhaps 1,000 USD for a proprietary one).
I'd go over to stackoverflow
You can only inherit from 1 abstract class though. 
Both. Eclipse has built in tools like listing all the spots where a method is called, being able to click on symbol and be taken to where it is declared, etc. You can also type "Eclipse UML plugin" into Google and get a lot of choices. You highlight a file, a package, a project and get instant UML diagrams displayed in Eclipse.
Spring is proprietary. Please use Java EE.
jax-ws... The CORBA of the 2000s...
This sounds like you have a very specific case in mind and giving a general answer might be difficult. If you'd like to discuss that case in detail, please send us an e-mail!
Is someone forcing you to use SOAP? Tap your foot twice if they are. 
I'm a very big proponent of JavaEE and I use it professionally. I don't have tons of love for Spring, but I don't know in what universe you can call it proprietary. It is released under the Apache license and the source code is available on Github. I can take it and make any modifications to it I want. I think the strength that JavaEE has is that the community is involved in the decision making process, and I like that. With Spring there is a single company behind it, but not being part of that community I really don't know how much community input is taken into consideration for future releases. My suspicion is that it is probably highly considered since it is one of the highest profile Java frameworks available. So I get that you don't like Spring, that fine. You're entitled to that, but saying it's proprietary is incorrect and probably dishonest because I suspect you know better.
Surprised that this proprietary crap is still alive.
I think the fear is that, if they go too far with the deprecation, there will be too many tools out there that need to be updated, up to the point where it may stop adoption of future versions of Java. A task of identifying the potential impact would be necessary for full deprecation (although I agree that that would be a far better result).
Coming from JAX-RS, it is nice to not in any way have to specify endpoints for basic CRUD activity!
How is it proprietary? Trust me I kinda agree on the crap part, it's a square peg round hole solution for when you've too many Java developers 
It's not. This was all the rage (no more JS!) for a hot minute. I got into it a looong time ago. While I agree with you in that it just over-complicates the hell out of a project I still miss it a bit.
no, they moved to angular and then to polymer
If you are talking about &lt;http://www.java4k.com/&gt; in a sense of where to get the actual applets, you may be able to still get them. As of today it seems all of the JARs were deleted, however if you view the source of individual pages you will find the `&lt;applet&gt;` tag (an example where `archive="applet.php?gid=500"`. Basically if you resolve the URL yourself you will come up with &lt;http://www.java4k.com/applet.php?gid=500&gt; for example. Go into archive.org and enter that given URL (so you have &lt;https://web.archive.org/web/20140201000000*/http://www.java4k.com/applet.php?gid=500&gt;, it is likely that the older snapshots will be the actual JARs (and newer ones just a blank page). If archive.org does not have it then it is likely lost forever. If you could find the site administrator, you could contact them to see if they can fix or upload their JAR archives. If you are looking for an actual competition to compete in, there are none that I know of. However, I have had the idea of starting one in the future with regards to the software which I am writing (a lightweight virtual machine and library). 
Well, damn it. Why is all the interesting stuff gone?
I'm wondering why this doesn't show up in the list of /r/java posts?
Dafuq? U mean ng2 is DOA, and polymer is the new hotness? Oh, how our industry is so fickle. 
The idea was nice but it didn't work as well in production. 
Still can't debug past Firefox 16 or 17? No thanks.
I've had to do few tasks for a few GWT projects while I've been an intern at this one company. Those projects were huge, like &gt;30 modules and while I was trying to get a database column to show up on the client side all I was thinking was 'why, why are there so many unnecessary classes I have to pipe this simple block of information through?'... GWT Seemed great at first but then you start seeing that kind of over-engineered crap. I don' t know then how much you could simplify the design of those applications though, so I can't blindly blame only GWT here either. 
It takes a tremendous amount of planning to get it right without making everything horribly complex for no apparent reason.
Make some friends. They will help with your study, social life and career. Learning Java is pretty easy so you should have time to make friends.
Stackoverflow.com is your best friend
Debugging is done with SuperDevMode in newer GWT releases. The old DevMode was perhaps more convenient, but that doesn't mean you can't debug anymore.
I knew Java before I started Comp. Sci and believe me, it made a huge difference! I aced the Java modules. I made a lot of friends purely due to my Java knowledge as I helped many people out in their class work and assignments. I became quite popular amongst my course mates. I spent more time on HELPING (not completing for them) other people with their assignments than I spent on mine. It gave me a great deal of confidence too as it assured me of my Java knowledge. (Gave me better understanding of certain concepts too) It also also enabled me to put more attention on the other modules which were new to me. If you do decide to learn it before starting it. Make sure no one takes advantage of you as it will affect you and your results. I learnt that the hard way haha
&gt; Please use Java EE. Sure. The moment it manages to keep up with the times instead of lagging a few years behind I'd be happy to use it.
Dude, wsdl2java supports whatever you want to do, many operations, services, ports and bindings (you even have those fancy webservices which allow x-www-form-urlencoded and stuff in a separate binding). So I suggest you go for a contract-first webservice or, if you really want to do your java2wsdl thing, get a similar WSDL to the output you want, do the wsdl2java and look how the output was annotated.
IntelliJ community edition is both free and an amazing IDE for Java (and other languages). Good luck! 
This stuff would be great for Android!
No, not to my knowledge.
Was there added something new? This is almost 2 years old
Don't know if they still have GridWorld, but study that as well! Good luck in AP CompSci...
You should work [contract-first](http://axis.apache.org/axis2/java/core/docs/reference.html) with web services. Generate the Java service / client code from the WSDL, not the other way around. And make sure that whatever needs to consume the service can actually read the WSDL properly. You would not be the first who managed to crash some kind of SOAP connector because the (valid) WSDL is too complex.
Could also be done with Java Web Start or older J2ME devices (but those are ancient).
http://github.com On the desktop version of the site there is a possibility to filter the projects by language. Almost every open-source project you find there needs help, that's why these are open sourced. If you have never contributed, but very willing to, my advice is to browse the projects and find one in which you are personally interested in (maybe a project related to your hobbies or work).
So to better explain the situation I have several spring apps that work together to form an complex service, that I have coverage for when it comes to unit tests. Although to fully test the entire stack I need to have all the services up and running and test it form an API level thus i need to run the tests externally. I am looking for a way to gather coverage from the external smoke tests. I rarely run manual tests most tests are coded in a diff solution and executed.
The project is on hold i think?
Missing how much modularity will break other JVM languages, and maybe frameworks too.
Jacoco can instrument any application through a java agent. You just have to run your tests and collect the results. 
Yeah, it seems like that is the actual reason you should be careful / hesitant to adopt 9. It does not seem like it is much different from 8 otherwise.
&gt; WildFly has been identifying itself with release "codename" Kenny since 9.0.0.Final. &gt;IMO it's time for the codename tradition to die; it's not really useful and is just another detail to get wrong to add to the ever growing pile of such details. &gt;We put this name in our MANIFEST.MF files, so for that I will just use the string "N/A". [Source](https://issues.jboss.org/browse/WFLY-6526)
I suggest that you do the OCA exam, and use [this](https://www.amazon.co.uk/OCA-Certified-Associate-Programmer-1Z0-808/dp/1118957407/ref=sr_1_2?ie=UTF8&amp;qid=1469910243&amp;sr=8-2&amp;keywords=java+oca) book. You will learn the language fundamentals in great detail.
&gt; I'm open to any feedback People tend to use screenshots to filter out "messy looking" apps, so maybe a shot here or there in the README could help.
See: https://reddit.com/r/pokemongodev People have reverse engineered _most_ of the communication protocols and data between the server and client. It's not very easy to understand (serialized protobufs and compiled unity), so they have been wrapped in community developed APIs you can use in your applications and do not hook directly into the niantic apk. Since you're asking in the Java subreddit, there is at least one Java API: https://reddit.com/r/pokemongodev/comments/4t65mh/pokemongo_api_java_01/ Here's basically all the info you need (see the APIs section): https://reddit.com/r/pokemongodev/comments/4trjum/pok%C3%A9mon_go_development_archive_works_in_progress/ You may be better off starting from someone else's bot and going from there. Please note all of this is against ToS and people have already been served cease and desist for sharing bots, so be careful (use a fresh account). 
This mirrors my experience working with an enterprise that just heavily bought into AEM. My group explored authoring content outside of AEM with sling and using JCR for static content and then importing.. didn't work out to well, and although sightly was donated to Apache, you can't really use it outside of sling/AEM. In general, AEM and sling work pretty well for static content and building static, reusable widgets, but outside of that we weren't very excited to be forced into it.
&gt; OSGi which is another standard that is all but dead This is how I know you're bullshitting. However, the Adobe influence is real. Edit: to expand on OSGi: if OSGi is dying, then why is Java 9 implementing a bastardized subset of it? Why do over half the jars on maven central contain OSGi-specific metadata? Why are so many off the shelf products based on OSGi (generally IoT and DevOps stuff, but I've seen plenty of enterprise application middleware, too). Most (if not all) Java EE servers are implemented on top of OSGi.
Sorry -- there is, of course, no connection between the two. I was making the mistake of redditing while doing something else, so I read this as Shenandoah, rather than Sumatra. 
because Spring. https://www.infoq.com/news/2012/10/spring-osgi-gradle/ So, its dead. Because spring said so. 
*sigh* this looks to be University level coursework so you are probably paying a lot to learn to be a computer scientist / engineer? Sadly without the struggle, determination and research needed to solve these problems for yourself you will never be even a competent programmer. If you are struggling talk to your lecturer, don't give up and expect someone else to do the hard work for you. Life owes you nothing and being amazing at something takes hard work, dedication and lots of practice but is absolutely possible :-) Good luck! 
Which still doesn't change the fact the Java and JavaScript are completely unrelated and that JavaScript is not a JVM language. I am so adamant about this because people constantly confuse the two languages.
I would like to add dagger 2 to that comparison because it is supposed to have even less reflection (none). Version 2.6 is the latest
jeeze if you can't tackle that what are you even doing in university, it looks like something I'd throw into bluej when informally mentoring someone, really simple stuff, if you're stuck ask to read someone's notes (where you not at the lectures or just fall asleep)
Given Oracle's commitment to Java, may be for Java 12 or 13 ... 
Thanks for all the replies. I've started making the service now and I'm planning the deployment (https://www.reddit.com/r/java/comments/4vgb4c/deployment_of_restful_web_service/).
While it's nice that your lib is fast at startup, you should either drop that part of benchmark, or bench how fast is to resolve the first component (without any warmup). What you are benching now is irrelevant and people might come out with the conclusion that you don't know what you are doing :/
[removed]
Everyone should know by now that Java 9 Jigsaw is only good because of the split up jdk and not because of the new module system (why are they ignoring versions!?)
Spring without scanning is more than 2x faster... public static ApplicationContext spring() { return new AnnotationConfigApplicationContext(SpringConfig.class); } @Configuration static class SpringConfig { @Bean @Scope("prototype") public A a() { return new A(b()); } @Bean @Scope("prototype") public B b() { return new B(c()); } @Bean @Scope("prototype") public C c() { return new C(d1(), d2()); } @Bean @Scope("prototype") public D1 d1() { return new D1(e()); } @Bean @Scope("prototype") public D2 d2() { return new D2(e()); } @Bean @Scope("prototype") public E e() { return new E(); } } 
Make a &lt;commercial proprietary chat platform&gt; bot in X minutes. Good old times where IRC, you know, the weird open protocol many technicians and others used, was popular. These days people need some centralized platform, facebook, imgur, twitter, discord, slack, snapchat, instagram and many others to have conversations. And then you start having serious discussings once governments step in, demand DMCA take downs, censorship and handing over connection information. And suddenly people go like "where did my freedom go?". Freenet and other IRC services never were more than "providers", like the ISPs, and things like this would take more force to push through. Seriously, we are giving up a piece of freedom little by little, because we are used to freedom, we don't recognize when it is given away, when it is taken from us, or when we are too careless to care. Using MS Windows in the first place is a big chunk, another huge chunk is using Windows 10, and more huge chunks follow by using Facebook and the other commercial/proprietary platforms. 
We use Glassfish for a lot of backend apps and always use Apache, it offers a lot of good stuff for a proxy: load balancing, SSL, etc.
&gt;I dont see the benefits if you will be writing your own JPQL queries to return DTO objects We use JPA/Hibernate only for OLTP apps and we rarely write our own JPQL/HQL. Most of the time we will load the object using [Spring Data JPA](http://projects.spring.io/spring-data-jpa/) which is super convenient. When we did need some kind of query, we do it in Criteria API whenever possible. It's more convenient than having multiple line of sql statement inside a String. &gt; The only benefit I see is the mapping of the result set JPA will automatically. Another benefit is that once your object is attached to hibernate session, you don't really have to keep track when the object changes as hibernate will automatically flush the changes whenever it sees fit or when it reaches the end of transaction. This may have some caveat, but once you learned how hibernate behave, it will improve productivity. If you're using JDBC template, you need to write sql for each insert, update, and delete for every possible scenario. This increase development and testing effort by quite a number. Please take note also that Hibernate/JPA is more than just ORM. It provides mechanism for caching and advance optimistic locking which is a necessity for serious OLTP app. Lastly, by using JPA/hibernate we can easily tailor our OLTP app across different DB. This give opportunity for user to keep using DB that they're familiar with. Now if we are talking about reporting / batching app (OLAP), I would prefer to use full SQL. JPA/Hibernate is just useless for OLAP application.
Spring-Data-JPA really cuts down on the boilerplate that you need. In many cases, you can just define an interface with @Query annotations on and you don't even need an implementation.
Been using Google Container Engine lately (hosted Kubernetes) and I love it. But it's not exactly super simple.
Well, you can always look for it on torrents :P
I'm actually pretty shocked you haven't been exposed to more programming with your degree (unless it's in a CS degree :)) Anyways, if you've used c or c++ moving into OOP isn't too hard if you use c++ for this exercise. Here's how I would go about it. 1. Learn the basic of OOP design such as objects, classes, inheritance and polymorphism. You can certainly do this online and for free. 2. Make a project, jut a simple project that you can use these new concepts. 3. Get yourself a book on software engineering: I recommend this [one](https://www.amazon.co.uk/gp/aw/d/0077109082/ref=mp_s_a_1_1?ie=UTF8&amp;qid=1469997353&amp;sr=8-1&amp;pi=SY200_QL40&amp;keywords=object+oriented+software+engineering&amp;dpPl=1&amp;dpID=51gh0VIH6lL&amp;ref=plSrch). It's pricey, but after you read that it becomes an excellent reference manual. 4. Practice! You'll come across design patterns, solid principles and begin to realise what your doing after you review each project. I tutored a bunch of undergraduates earlier this year and what I learned is that for a student to pick up OOP they must know the basics, then be given problems to solve where they can apply their new knowledge. The rest will come with experience. Anyways, good luck!
They set up your account and org name which takes a day or two. The rest is up to you I believe. Uploads take a few minutes to sync after you're set up.
Closed source gives me more concerns than strange license. They could be sniffing all keys, etc and sending to their servers, and I have no way to verify it...
If I am comparing apples with oranges I am comparing a specific aspect of them. As the project clearly documented, it is a benchmark program that check the performance of Dependency Injection facility of those tools. Unless you declare SpringFramework doesn't provide dependency injection, your statement is valid. Again this program is just about comparing the performance of dependency injection, NOT about anything else including @Transactional etc. Whether they are expensive or not doesn't impact the result of the test because they have NOT been introduced in. I take your comments about bean fetching to some extend. I will add the test for fetching scoped beans when I got some time
Are you okay?
DTOs are misunderstood. They are supposed to be coarse grained -- to return all the data needed for a given view/screen. Also they are no longer a best practice: see GraphQL and Falcor.
Yes, correct. You have to raise a ticket on Sonatype JIRA to create an account for your project and after that, you have to comment on the ticket when u do your first release and only then they will turn the sync ON (after which all releases will be uploaded to maven central automatically). You can find more info here: http://central.sonatype.org/pages/releasing-the-deployment.html, see this line "If you are releasing the first time, do not forget to comment on the issue tracker ticket, letting us know that you have completed a release so we can activate your sync process."
A simple test proved my hypothesis, Spring does cache the bean and everytime you request it, it send back you the same object instance. And @Scope("prototype") ensures it to construct new instance for each request, which is valid in this test context.
Exactly, DTOs should compose together a bunch of required data. It shouldn't care at all how data is represented in the data store and gives a lot of freedom for the back end to change with no one being any wiser.
Hmm, I've not heard of Sling before... Any overlap with it's sister project 'Apache Wicket'?
You can use something like log4j directly. Slf4j is just an abstraction layer so you can easily change out your logging library if you choose something different in the future.
Java has logging in the main class library. 
You all missed the point. The point is that slf4j has created a bigger problem with third party library compatibility than the old. Log4j ever did. 
Among half a dozen others that are in common uss by many third party java libraries. All incompatible of course and slf4j making the mess even worse. 
Looks neat, I usually use a SynchronousQueue instead of your CountdownLatch. And any asserts will be after the wait on the data in the queue. Your Waiter looks cleaner. 
Some of these samples aren't Very good. Maybe it would help to put the hacker rank question on the comment for the code. 
You'll probably need to be good with version control, continuous integration, automated testing and some agile ideas.
Your problem is that you are working with Maven, which makes dependency management hell anyway. Use Gradle, it will be much easier to do that part. Else, yes, it is unfortunate that Java is blessed with several very mature logging libraries, not just one. However, the ideas coming with Spring Boot may make this situation easier in the future, when buildsystems may automatically configure things like that (again, Gradle is much more likely to innovate than Maven).
I tried this library a few times. It horrendously slow. Its best to stick to java idioms and language facilities when writing java code, and JS idioms when writing JS code. Nice idea, though. Especially for JS developers new to the JVM world.
https://get.slack.help/hc/en-us/articles/201727913-Connecting-to-Slack-over-IRC-and-XMPP The companies switch - Hipchat, Slack, whatever is next. I am still using the same client :)
It was a request form a customer to reuse Lists object from guava. I found it contains some optimisation while creating large objects. Internal call for the newArrayList() is rarely used. Will check if median will fail on empty list. Thanks for the suggestion. 
com.google.common.collect.Lists.newArrayList returns a regular ArrayList... @GwtCompatible(serializable = true) public static &lt;E&gt; ArrayList&lt;E&gt; newArrayList() { return new ArrayList&lt;E&gt;(); } So your method basically checks if com.google.common.collect.Lists exists and returns an ArrayList regardless lol
Okay feedback taken. I will update the HackerRank samples with links to the questions. But anyways the filename is nothing but question title on hackerrank, so, for now, you can just google the filename and you will get the hackerrank question easily. Are the other samples nice? The one inside ramswaroop package?
When in Rome, do as the Romans do. Why would anybody want to use this instead of the Java standard library? 
All it does is slightly increase the size( 5+ (size/10)). Using reflection and not caching reflection objects will ensure that this consistently performs poorly. You should either reproduce the behavior of guava's Lists, or just depend upon it. Handling an optional dependency like this drives the performance drastically down, regardless of whether or not the dependency exists. 
/r/javahelp is a better fit for questions like these.
It was copied from underscore.js behaviour. We have a uniquePassword method which is used UUID.
You are completely missing the point. Edit: Oh lol. So to **increase** performance you do a reflection check on every instantiation?
No. It will never ever be a replacement for the official API's. 
No, slf4j makes things easier. Using slf4j, you can take libraries that use JUL logging, commons-logging and logback and force them through your log4j configuration. Rather than having to set up multiple configurations for the different frameworks in use, you can add compatibility jars to your classpath for the ones you don't want and add the logging framework you do want. Of course, this does mean excluding the original logging library so the compatibility jar is loaded instead. In exchange for a slightly more complicated pom.xml, you have a single, unified logging system, regardless of what your dependencies use.
In my experience JPA/Hibernate fit well for CRUD and OLTP uses cases. For anything more complex I would go with mybatis or Spring JDBC template.
&gt; Nice idea, though. Especially for JS developers new to the JVM world. Strongly disagree. X devs coming to the Y world should adapt the idioms of wherever they're going. When I write something in Python I try to write Pythonic code. Aside from that: the implementation is just horrible. The "unique ID" function for example is just plain wrong. 
In or current project we use Spring Boot and just back docker containers from our Spring Boot applications. IMHO the Java world is moving away from application server war deployments to just considering a service to be a standalone application. Our docker images are deployed on kubernetes. The services aren't reachable from the outside: there's a proxy (similar to Nginx) in between. So to answer your questions: * I personally prefer Google Compute Engine * I would deploy stuff as a runnable application not deploy inside a running app server. * You don't expose an app server to the outside. Have a reverse proxy in between.
1. This subreddit is not for programming help as is explained in so many places here. /r/javahelp is for that 2. Neither here, nor in /r/javahelp we will do your homework. **You** have to spend some effort, show us the code that you already have, ask specific questions, and *then, and only then* we will help you. 3. You could at least spend the effort to produce a properly formatted post. Just through an unformatted mess of an assignment here is impolite. **Post removed**: Programming help/unformatted/do my homework
&gt; similar code in java and javascript Why?! If you want same/similar code then use the same language. When you're programming in language X then you should use the best practices and idioms of X. Using X but pretending that it's Y will always result in a horrible mess sooner or later. &gt; It works in java 6,7 and 8 which good for android developers. Ah... I've been working with Java 8 for quite a while and I totally forgot about the poor android devs.
Yes, with little changes the framework can be developed with JSR-330 and JSR-356. But before that, let me explain what made me choose Spring-Boot: 1) I have used Spring-Boot (https://start.spring.io/) with web socket as the only module dependency. So no other modules are included in the framework and therefore the framework isn't heavy. 2) Using spring-boot makes it a containerless application, so no hassle of setting up your own server, you just need to run the jar file where ever you want to run your bot. For bots which I think is perfectly fine. 3) It has all the best libraries like log4j, mockito, jackson etc. already added to it. So, you just concentrate on building your bot. You may be probably knowing all of these points but this was what I had in mind that made me choose spring-boot.
*throws towel into ring*
So in other words, you agree with my first statement. 
You should not include the JARs of all previous releases in your repository, if the end result is the JAR file after building then these are a bit pointless. Also, it appears that all of your code already does what the main library does.
Well technically you can compile Java 7/8 bytecode for Java 6 and just simulate `invokedynamic` and things such as `default` methods. You just have to write supporting classes for this and you also need to translate any usage of `Class` and similar so the code remains fully compatible (so you can reflect your default methods even though in reality they are outside of the interface where the program cannot tell the difference). Luckily the later is possible because Java is statically typed, however this would require that all code be compiled with the given compiler which might not be practical. 
Actually JUL itself was the problem from the beginning. Rather than providing a log interface, Java added a concrete logger which doesn't suit all the needs out there. What should happen is to have a log interface that could be loaded and used like JDBC. Anyone want to create a JEP for that? Meanwhile it's fairly easy to write your own log wrapper class. Example: https://logwrapper.blogspot.ca/ 
Personally I would use `SecureRandom` and then use a Ascii85 conversion with a resuling length of a randomly determined length that is at least 32.
&gt; // Useful for temporary DOM ids. Note the target, as I mention elsewhere - JS has no real stdlib, they have to do some wackiness to get stuff we have built in for free. Use the expansive stdlib, don't just clone blindly.
Yep, I use something that expects Commons-Logging and I just toss in jcl-over-slf4j as a runtime dep.
IMHO, you should know the core Java very well. After that, learning Android would be easier and why things are done the way they are would make more sense.
Ok thanks bro
You might need to find a new job with a different company. Changing roles in the same company can be difficult. You didn't say what your current role is, so I'm going to assume it's something along the lines of QA or support. The likelihood of making such a transition will depend largely on your current manager and your company's political environment. Since this would be an internal transfer, your current manager will likely have some say in it. If you're really good at your job, he won't want to lose you and therefore may not approve the transfer, or worse, might even try to sabotage you. If you're not-so-good (and especially if there's any record of that with HR), then the manager of the development team will not hire you. If you get a job somewhere else, you can always apply for development jobs with your current employer a year or two down the road. Your odds of success will be better, especially if you made an effort to leave on good terms. You will have the inside track because they will already know you, and your former manager won't have anything to lose by putting in a good word for you. If your company offers referral bonuses, then he would actually have something to gain by helping you get the job. I wouldn't worry too much about the technical end of things, especially for an entry-level position. You obviously have to know how to code, but it won't matter that much if you don't have experience with the entire technology stack that a particular employer is using. The company that hires you will expect you to need training and ramp-up time. Just make sure you can back up everything on your resume, be willing to admit when you don't know things (helps your credibility), and show an eagerness to work hard and learn new things. Also, make sure to ask lots of questions in the interview, as that shows the interviewers that you are interested and engaged.
Redhat's OpenShift might help you out if you are just playing around. They have a free tier.
I am not a fan a reflection. It seems to always cause poor performance. Does anyone have the same experience? If I remember correctly form many years ago how reflection is implemented in compiled languages (C++), it's poor performance was inherent to the problem space. I could be wrong though.
I believe Maven has the ability to globally exclude dependencies too, which makes things a little easier. So you tell Maven to never include commons-logging and depend on jcl-over-slf4j.
It is now synced to Maven central: https://search.maven.org/#search%7Cga%7C1%7Ca%3A%22botkit%22
I believe Maven or Gradle would be of much use here.
Codewars.com... I think it's fun
i didn't mean to say javascript as jdk language. Sorry for the confusion.
Can anybody please provide useful information?
Nice tips. I didn't know about the `Objects` class. I replaced some `o -&gt; o != null` filters with `Objects::nonNull` and it feels all kinds of nice.
List of changes [here](https://hibernate.atlassian.net/secure/ReleaseNote.jspa?projectId=10031&amp;version=22752).
https://github.com/paradoxical-io/cassieq
... If you're worried about typing efficiency for Java of all things, you're doing it wrong. Worry about reading efficiency instead. 
My professional opinion: &gt; tackle the 'verbose' of Java Verbosity, within reason, is a good thing and doesn't need to be 'tackled'. Code should be easy to read and maintain. It's not a competition to see how much functionality you can squeeze into a single line. Unless you're writing code in notepad or vi, it doesn't matter if your class name or method name is a few characters longer as there's auto completion. &gt; $ is used as an umbrella for common functions Might as well rename it to Kitchen$ink or GOD class. Utility functions should be logically grouped to aid readability. Got some functions that work with arrays? Stick them in a ArrayUtils class. &gt; $ namespace 'beats' verbosity Again with the verbosity. That's like saying instead of writing this comment in plain English, I should just reply with text speak like "u wot m8" &gt; shortcuts You must really hate typing. I had to follow the link to your blog to work out what $.hc() is meant to do - that's why shortcuts just to save a few characters is a bad thing. I'd hate working in a team with you because your code would probably be unreadable and I'd have to constantly lookup what your shortcuts do. &gt; Common array operations .. belongs in something called ArrayUtils or Arrays or MoreArrays 
&gt; Verbosity, within reason, is a good thing... Verbosity does NOT mean to be good thing or "easy to read and maintain". And I don't see the "good reason" for that. Otherwise, there won't be questions like [this](http://stackoverflow.com/questions/4284391/how-to-concisely-name-methods-variables-when-the-intuitive-name-is-a-reserved) and concerns like [this](http://stackoverflow.com/questions/2230871/when-is-a-java-method-name-too-long). And Bob Nystrom will not come up with his [long-names-are-long](http://journal.stuffwithstuff.com/2016/06/16/long-names-are-long/). The name `SimpleBeanFactoryAwareAspectInstanceFactory` - comes from SpringFramework - is an nice example to show how verbose a Java program could be. Actually these kind of things are not uncommon in SpringFramework. But I probably should give out an even more crazy example: [InternalFrameInternalFrameTitlePaneInternalFrameTitlePaneMaximizeButtonWindowNotFocusedState](http://www.javafind.net/gate.jsp?q=%2Flibrary%2F36%2Fjava6_full_apidocs%2Fcom%2Fsun%2Fjava%2Fswing%2Fplaf%2Fnimbus%2FInternalFrameInternalFrameTitlePaneInternalFrameTitlePaneMaximizeButtonWindowNotFocusedState.html). If these are your flavor, I have to say I hate to be your teammate, we come from different planet. &gt; Might as well rename it to Kitchen$ink or God class `$` is an nice name for language level things and I think it is not a bad idea to put Array into that category &gt;You must really hate typing... Nice you pick up the `$.hc`, instead of `$.ms`, `$.eq` and `$.ne`, which is pretty expressive to anyone who has a little bit shell programming background. I choose to create a shortcut for `hashCode` is because it is commonly used stuff and the `hc` won't hurt if you get introduced to it the first time. I don't blindly create shortcut, neither will I speak something like "u wot m8". Read my example again and give me more things you think is not reasonable and hurt the readability &gt; ArrayUtils or Arrays or MoreArrays You already hit the point. `ArrayUtils` or `Arrays` or `MoreArrays`, which one is a good name for that? You code will get full of `XxxUtils` and `YyyUtils`. If that means your readability, fine, go for it. I prefer the concise way and I admit I am the fan of libraries like [underscore](http://underscorejs.org/), [lodash](https://lodash.com/), [jQuery](https://jquery.com/). 
This was really just a bit of fun. It's a browser script with no authentication so it should only really be used in a personal capacity. I may modify it using Twitter's REST APIs to allow for third-party authentication, and perhaps run it as a web service. Anyway, I mainly use it to annoy my friends by tweeting whole books at them.
This was really just a bit of fun. It's a browser script with no authentication so it should only really be used in a personal capacity. I may modify it using Twitter's REST APIs to allow for third-party authentication, and perhaps run it as a web service. Anyway, I mainly use it to annoy my friends by tweeting whole books at them.
In my experience, if it's a 1-man project it's not worth it to use Java; however when you have 2+ persons on the same codebase, all the verbosity pays off.
&gt; I did say verbosity... Verbosity, by google means "*the fact or quality of using more words than needed; wordiness.*", and verbosity associated with Java **is** [questioned](https://www.quora.com/Why-is-Java-so-verbose) by people. That's why I said I want to *tackle* it. Tend to give class/method/variable long name is just one thing; trying to name concept which does not need to be is another. &gt; I'd personally prefer to split utilities functions into multiple classes ... We'll agree to disagree on this one. agreed. &gt; I wouldn't have a clue what $.ms() do if you didn't put System.currentTimeMillis() next to it. You wouldn't have a clue what `System.currentTimeMillis()` is if you haven't read it before. If an average programmer feels easy to catch up and will not get confused the next time with these symbols, then I don't think it will hurt the readability. On the flip side if the average programmer can easily remember when he needs to use it, then I think it is concise and expressive. I am pretty sure it takes seconds for you to get on top of it, while it takes years for my wife to understand what I am talking about. What I want to say is when we talk about expressiveness and readability we talk within a certain communication context, here specifically, a group of experienced Java programmers. 
Well, in that case, we can fork it to a different repo and have just the bot logic (without embedded server or anything). Maybe I can ask someone to contribute.
I'll turn it into an executable where the user can specify an input file path and chrome driver path. It'll launch the browser and do its thing. Thanks for the comment. Cheers. 
Hackerrank.com
I've wished for [partial methods (around 57:00)](http://i.imgur.com/P7jRs92.png) many times in the past, but perhaps, they're not too good an idea. I feel it's dangerous to correlate subtype polymorphism with generic polymorphism... Is there any feedback on how this feature performs (in terms of adoption) in .NET?
This guy must be paying people to repost his article: https://www.reddit.com/submit?url=http%3A%2F%2Fchrismm.com%2Fblog%2Fwriting-good-code-reduce-the-cognitive-load%2F
Sorry, I didn't get you. Do you mean there are not many examples? Currently, there are around 250 questions solved in that repo and I would be continuously adding more regularly.
This is how not to do a post, by the way. No idea what Wia is, okay, let's click the link -- goes to a download page on the Github site with no info. Okay, let's click the project and go to the main Github page. Just more information about the code but not what it is. Okay, we can apparently sign up for a Wia account at such and such link, let's go there. Now I'm on a page that says "Connected things made easy". And there's a button to "Find Out More". So I click that and finally get to a page that seems to indicate that Wia is something to do with connected things and IoT and all that. My recommendation for future posts would be to provide some context, as in what it is and why it might be useful to people.
At least put it into the Javadoc. I want to see things like this when I Ctrl+Q on a method invocation, I don't want to search through some external website for potential pitfalls.
What's up with the 7th, deleted video? (It's only visible if you actually go to the YouTube page)
Thanks, I appreciate it. That said, I'll take a look -- I love Java and need a new thing to play with. :)
/r/hibernate
Terribly sorry my bad. I didn't see all of them. The few directories I opened had like 5 examples in them so I assumed that all of them were like that. For example I opened one on sorting and there was only [quicksort](https://github.com/ramswaroop/Algorithms-and-Data-Structures-in-Java/tree/master/src/com/hackerrank/algorithms/arraysandsorting) and insertion sort. Appartently there's another one [here](https://github.com/ramswaroop/Algorithms-and-Data-Structures-in-Java/tree/master/src/me/ramswaroop/arrays). Assuming is not okay. 
No problem, enjoy learning and if you have a better solution to any of the problems then do raise a pull request and I will merge it. Cheers!
The method with creation newArrayList was changed. Ura. Kind regards, Valentyn
Robocode
Fantastic! I'm starting a prototype for a high speed message processing microservice using Rapidoid as the REST layer and Akka as the core. Hope it will make its way to production. Subscribed to subreddit, will be sharing my experience as possible. All the best guys
By "this feature" do you mean value types in general?
[The JSR for the module system](https://www.jcp.org/en/jsr/detail?id=277) specifically explains why they did not choose OSGi: "Because the versioning semantics in the OSGi R3 framework is simplistic, it is not a sufficient solution to address the JAR referencing problem." It is definitely not based on OSGi.
Thanks!
Nice lib. I'll use this next time round.
That`s a good point, there were many times where I had this issue. The syntax for dynamic tests still feels a bit wierd to me, but I'll get used to it. Thanks!
Excellent! 
Yeah, I can't say I'm fully convinced *yet* by the examples in the article. These days, I use JUnitParams for some home-projects - though it requires a special runner. I might get my hands on JUnit 5 instead and thus get a real feeling on it.
Its really bothering me that it says Cpp rather than C++
Gross
I prefer cpp when googling something about it. 
Interesting read, didn't expect python to be doing so well in fintech in the US.
That sounds overly paranoid up until the last sentence. I'm curious which modules, and if there's any huge benefit of this over just Apache be the first step?
https://www.quora.com/What-are-some-classification-machine-learning-libraries-in-Java
[removed]
Right. The differences are so minute, that it only takes a 1368 page book to explain the C++ language... (I'm talking about "The C++ Programming Language" by Bjarne Stroustrup)
This Udemy tutorial is very good if you already have at least a little bit of coding background.Udemy runs sales all the time, so look for a coupon code. https://www.udemy.com/introduction-to-java-programming/
Spring Boot is perfectly fine as a quickstart or archetype, but that's really all it is: a project to leapfrog some of the significant setup burden required for Spring projects. It's not really a separate skillset in and of itself. If you can use Spring, you can use quickstart. As the project's own description says, it favors "convention over configuration", which may sound familiar if you use Maven.... which has its own vocal camps w.r.t. merit.
Open a command line. Change to the directory where the RunServer.bat lives. Type: *java -version* What do see? 
Will it be difficult to troubleshoot problems in a spring boot application since so many things have been implicit? 
When starting a new spring project I can't see any reason for not using Spring Boot as the foundation. It'll save you a bunch of effort setting up boring defaults and throws in some nice added bonuses.
I wonder how many pokemon go players are on watch lists now 
JUnit 5's dynamic tests look like a very awkward way to emulate what TestNG provides as `@Factory` (to create instances of test classes) and `@DataProvider` (to pass different values to the same test). I also don't understand why JUnit (both 4 and 5) keep imposing the creation of `static` methods and fields. What am I missing? 
I'm guilty of using optional to reveil the intention of my interfaces. I.e. explicitly express when a parameter or return type could be null.
I like JUnit 4 theories for testing, as it is straightforward to move from individual test cases to multiple sets of test data without having to reorganise everything. This helps: https://github.com/richard-melvin/junit-theory-suite But the limitation of that is it is a custom runner, of which there can be only one. Presumably JUnit 5 will add enough support to allow that to be written as a drop-in, composable extension.
Are you thinking something like line 12? // data List&lt;String&gt; names = Arrays.asList("john,emma,steve,natalie".split(",")); // functions Function&lt;String, Optional&lt;String&gt;&gt; shortenToOnlyFirstLetter = s -&gt; Optional.ofNullable(s).map(str -&gt; String.valueOf(str.charAt(0))); Function&lt;String, Optional&lt;String&gt;&gt; capitalize = s -&gt; Optional.ofNullable(s).map(str -&gt; str.toUpperCase()); // transformations List&lt;String&gt; firstLettersCapitalized = names.stream() .map(shortenToOnlyFirstLetter.andThen(opt -&gt; opt.flatMap(capitalize))) .filter(Optional::isPresent) .map(Optional::get) .collect(Collectors.toList()); // result print out firstLettersCapitalized.forEach(System.out::println); Or where is the optimal place to use the flatMap in this case? (Is this an acceptable use of Optional.ofNullable("this may be null").map, when making functions, btw? I'm pretty new to the functional style of programming. Is there a better/shorter/more readable way of ensuring the String object going in to the function is not null?) **Edit**: forgot .filter(Optional::isPresent)
This is unbelievable. People just down vote comments and opinions without contributing anything to this thread.
I tend to agree, but I also think it makes sense functions should not accept optionals (If it is not present, presumably the function shouldn't be called in the first place). Not sure what better solution there is, though. 
Hmm... Even : opt -&gt; opt.flatMap(capitalize) Is technically a function which accepts `Optional` as a parameter. I wonder if the inspection catches it (or if it should?) Maybe there should generally be `Function#andThenOptionally` which just `flatMap`s, but that would probably lead to a hideous API
I was thinking null-values should be ignored (just produce an empty Optional), which is what happens when you map over an empty Optional. But I forgot to filter out non-present values though, with .filter(Optional::isPresent). (But I fixed that now. Thanks.) So the result should be a list of the first letters of each (non-null) name, capitalized. 
I've played with this a little in an IDE and I think the main problem boils down to deciding what you need, at the place the functions are needed. e.g. if you have a shortenToOnlyFirstLetter function, you might need empty strings for one usage, and skip missing letters in another. In this case returning an optional makes sense, but that optional probably shouldn't cascade through the stream, when you immediately get the optional you should map it / filter it / .orElse to get rid of it, or replace it with an empty stream. if you are composing it with another function, that only needs strings (like capitalise, there is no reason why it should return an optional), you once again need to decide what the behaviour should be for this function. you may decide that if an optional goes in, you should return an optional out. or map it to empty string, or throw an exception.
This is similar to C++ template specialization, so they should call this specialized methods of a generic type. In .NET, you don't have anything like this. The generic type parameters may have constraints, but it doesn't let you define `List&lt;T&gt;` and define specialized and/or additional methods for `List&lt;int&gt;`. Actually, you can only define generic parameter constraints on generic methods themselves, i.e. methods that have generic type parameters beyond those of the declaring type. Comparing with C++, where you can specialize templates, or add things beyond the base template. The compromise here is that .NET aims for type safety and consistency and C++ aims for utility, i.e. if you know you'll have a `List&lt;int&gt;` then here you have a few rather useful and/or optimized methods. In .NET, when generics were introduced in 2.0, you got the legacy non-generic collections and the new generic collections, which are interchangeable if you use non-generic interfaces; with time, everyone just started using the generic collections and generic interfaces. Since the generic interfaces inherit the non-generic interfaces, it's mostly OK for legacy code that can only read collections (e.g. through `IEnumerable`, `IEnumerator` or `ICollection`) or that does not try to insert objects of types not supported by the collection (e.g. by checking types or by not even trying to do this).
Pretty much every conference I went to about micro service architecture has said the same thing. Except they say it nicer. I just disagree with your tone.
https://github.com/dropwizard/dropwizard
They were probably all on that list anyhow.
I would just caution you that while languages may look and seem sexy, it's the CS fundamentals that really count. You can learn the basics of a language within a week on the job if you've used another language in the same paradigm before, but the same is not true of general CS knowledge. I went through the "I wanna learn a bunch of languages" thing too when I was in university, but trust me, if you know at least a few already, it really doesn't matter much. Your time will be better spent elsewhere than learning to use a language just for the sake of it. My $0.02, ymmv.
&gt; Lombok I've been writing Java code since 1995, never heard of Lombok. I'll continue writing accessors because they are core Java, unless Java is changed to remove or improve them.
As far I understand, using `Optional` in those positions opens the door for people to rely on object identity when using options. Brian Goetz has communicated several times the intent to make `Optional` a value class, and accepting `Optional` as a parameter or a field requires an object identity to perform those assignments.
I personally find streams to be more readable than the alternative, most of the time. And I don't really see how using streams and lambdas would negatively affect maintainability, other than if you are in a team that don't know the syntax. I think the "composability" of streams, using small functions passed to map, filter etc, is often used to argue the opposite: that this functional style actually makes the code more easily maintainable. But I guess that *could* be mostly hype. I have no experience with using either functional programming or something else in production (since I haven't had my first programming job just yet), so I'm aware that my intuition might be wrong about these things. But sure, in my example (created for the purpose of replicating OPs situation and trying out a solution) with creating functions and combining them into one, I can agree that it looks a bit foreign and maybe needlessly complicated. Though I do feel like it's mostly a matter of just getting used to the new syntax and learning a little about functional programming. I tried goggling "Google dropping map/reduce" and I could only find articles relating to them "dropping" their MapReduce platform https://en.wikipedia.org/wiki/MapReduce which is not the same as them "dropping" functional programming concepts like using .map and .reduce in their codebase. But maybe you meant something else?
I like the idea of this but it's not quite there yet. If you have types duplicated across different namespaces (annoying but people do), it fails. 
One large gift (drop a business card in the fish bowl type drawing)? Or, anyone who stops at the table gets one, type gift?
Anyone that stops at the table gets one yeah -- secret santa style...
Pokemon phone chargers! Good one.
But if you have an idea for a big gift I like to hear it too!
[Something like this?](https://www.voxxed.com/blog/2015/04/soa-principles-worked-for-ancient-greeks-so-why-did-they-fail-for-you/)
How about a Java powered coffee machine?
Weka . You generally want to use Naive Bayes or SVM for text classification 
Fun socks, chargers, travel mouse are all good options
ryan gosling?
socks! could be good..
he's so dreamy! I mean James. 
I will always accept more USB drives. Especially if they are USB 3!
Clean bathrooms
&gt; (Last year someone suggested "beer" but we cant serve alcohol on the venue. Boring...) You might not be able to serve beer, but what about a koozie? 
Coffee mugs then?
- Yea, MapReduce falling out of favor has nothing to do with functional style. - Streams may have / become issues: Debugging it, performance, memory use and control, lazyness when you don't need it, dense logic, too anonymous or unnamed, complicated nesting (especially with generics).
Yeah I've used C extensively and C++ a good bit. I think the biggest issue is that I just need to learn the concepts and though process that goes into OOP. I have used Java before but I often end up over-engineering the solution and reimplmenting things that are already done for me. I think I have this weird disconnect where I'm thinking "oh yeah, of course I have to write a little function here to sort these things" when the right answer in Java is "no just use the .sort() method, why are you writing this?". I like having a lot of control over how my code is being handled and it feels really bizarre and awkward for me to just be allocating things and letting them manage themselves. Again I know it's a really weird problem to have it's almost like I'm being an overprotective parent for my CPU or something.
I honestly think this is the best answer
how about little branded baby wipes? kinda serious actually...
thats actually pretty solid comment, one way we can try to avoid this is by producing good quality swag so people will hold on to it... In terms of food or tickets, I probably would consider a little snack (i.e. an icecream) 
Thanks for elaborating on the not-so-great aspects of streams. If you happen to have a good article/talk/whatever that deals with this issue I would love to read/see it.
yeah... I saw these ones today, sort of outdoorsy ones... http://www.staplespromotionalproducts.com/product/Thermos%2016%20oz%20ThermoCafe%20Travel%20Tumbler%20with%20Grip/8115K/
Spring Boot is very useful but requires quite a bit of domain knowledge. You have to understand starters, autoconfig, externalized configuration, etc. It makes bootstrapping something complex slightly less complex. The Java DSLs are pretty good, and it makes certain kinds of testing quite easy. But will every Java dev need to learn it in the future? No. Is it worth learning? Certainly.
If you have time to order a Chinese arduino they can be incredibly cheap. Though the arduino itself can't run Java, I wonder if you can package it with the jarduino library
&gt; one way we can try to avoid this is by producing good quality swag so people will hold on to it... I got so much "good quality swag" in my life and it all went to the bin. Sorry. But I'm *very* sure that most conference (or should I say carnival?) audience will do the same. Just now, I'm moving houses and as every time when moving houses, I'm throwing away so much useless branded junk that I've gotten from someone somewhere who thought it would be good quality and that I would hold on to it. This swag stuff has become a huge fad recently, and apparently everyone just copies the idea off another without giving this proper thought. To me, it just signals three things: - The organisers want to be cool (yeah, who doesn't) - My ticket was 30$ too expensive - Producing waste seems to be OK with the organiser So, to me, "swag" is a bit of a "silent" PR fiasco. Don't get me wrong. A token of appreciation is great. But this swag / giveaway stuff is just awful. &gt; In terms of food or tickets, I probably would consider a little snack, an icecream !! Sure, why not. Ice cream is great. Here's another idea that would be *really cool*: Organise a concert with a local band. [Voxxed Belgrade](https://belgrade.voxxeddays.com/) did this. The band were [a bunch of teens](https://www.facebook.com/voxxedbelgrade/photos/a.1658024271097611.1073741829.1626426004257438/1703824386517599/?type=1&amp;theater) who totally rocked to everyone's surprise. JavaZone also organises concerts.
Noted! thanks for your thoughts ... we will share them with the group here 
I don't think I would trust a branded USB drive.
yes, we use Play Framework (1.2.7 - upgrading soon to 1.4 as soon as we have time to upgrade the play morphia plugin to use the current mongodb/morphia versions) we've had a lot of success in terms of stability and productivity. we have a fairly large code base and we touch nearly every feature of Play (Play serves our RESTful API and we use Jobs to run 30 or 40 jobs to handle tons of heavy lifting processes). it just works, is highly performant and everyone who works with it has only good things to say about (in terms of getting the environment setup, making meaningful contributions to the code) our project is about 200k lines of code spread out over 6 different play apps and a common shared play module we have in active development for over 2 years. 
Free beer
Free licenses (I like the socks idea too!)
Perhaps a card redeemable for a pint somewhere nearby?
Free vouchers for Java certification exams. 
Keychain-sized swiss army knife (Victorinox) or Leatherman. Or, make a donation to a local charity or NGO, ask them for some postcards and gift those instead.
Hi @blinder, been the author of play-morphia plugin, I am very glad to know you are using it in a successful project. I've already transfer play-morphia project to https://github.com/uachti/play-morphia. Would be glad to see your pull request go there once you upgrade play-morphia to the current mongodb version. BTW I seriously invite you to take a look at my new project: [actframework](https://github.com/actframework/actframework), which pushes up the productivity of creating Java web app to the next level! If you have interesting on Act, please join the [actframework gitter room](https://gitter.im/actframework/actframework?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge) and post a thread over there. I will be more than happy to give out a comparison between act and play. (I've been with Play1.x since 2009 and created over half dozen of play modules including play-morphia, greenscript and play-excel, and I know play1.x very well)
I totally second enthuware. I passed my exam pretty much entirely because of enthuware. 
Do you use Java or Scala?
yes, recognized your name of course :) so yeah i looked at act, and i'm quite interested in it. i'll be giving it a try in a side project of mine shortly just so i can get comfortable with it. and yeah i put in some work to upgrade play-morphia to use mongodb 3.2, and added search() but haven't tested any of it yet. when i get it to work i'll put together a pull request. 
Beautiful! Looking forward to seeing your pull request. Shame that I leave play-morphia alone. But it's good to see the community keep taking care of it. Re: act, the current stable version 0.1.2-SNAPSHOT has been used in our commercial project already. Do let me know when you start your journey on Act, I am certain that it is gonna help a lot to the Act and your project, it will be a win-win!
Best (sane) swag I ever got was the conference bag from SunONE in '03. Durable, practical, sedate. RasPi has been mentioned by others, likely because its a great idea. 1byone makes a nice inexpensive folding bluetooth keyboard. Headphones are a personal choice, and conference 'phones are typically terrible. Given your audience, the best swag will be electronics that are either hackable or that will be genuinely *useful* to road warriors.
This article is a good explanation. Rebrand. 
Nice video. It tells us a truth that the vendors have been brain-washing us to get their tools sold. They over-promote an idea, and finally ruin it.
We use play 2.I forget at my work and it's awesome. The automagic reload part is amazing, I really love not having to do through that awful tomcat redeploy and restart process every single time I make a change. The way play does endpoints is fantastic too. At my previous job we switched a project from spring 2 to 3, and 3 was great for finally getting away from the xml config that used to eat hours of my day, but play's routes file is even better. Having everything in one tidy file is great! In terms of hiring, we just look for experienced java devs (or anyone who knows java at all). It would be great to find someone who had play experience but it's just not likely to happen in my city. I had never touched play before I started my current job. I didn't find play hard to pick up at all. Its controllers aren't so very different from spring controllers - sure, some fiddly little details are different, but the basic idea is the same. To be fair, I have found event driven programming weird and hard to test, but that's not play's fault.
Silly question regarding valhalla. So I understand that Valuetypes are basically supposed to be immutable structs with values that once created cannot be changed like a primitive. However, I can mutate the variable binding for a primitive like: int i; i = 1; i = 2; the integer itself isn't being changed, however the value at the binding points to is. Will Valhalla mean that every Value Type be implicitly final or that changing one or both of the values at the binding effectively creates a new identity for the binding? ValueType foo; foo = new ValueType(1,2); // Not sure if new is used on valuetypes foo = new ValueType(2,4); // &lt;-- Is this considered illegal?
&gt; The swag is for getting the business card, printed on some item, that might survive a week or even longer so the brand stays in the mind longer. I seem to be the only one here who thinks that this is a really mediocre thing to do.
We are using play 1.2.3 in production and tried to upgrade to 1.3 maybe 6 months ago, it failed miserable. We spent a quite a few man-weeks on trying to track down various subtle database errors that showed up, suddenly objects didn't get deleted from the database or didn't get saved. We think those errors was due to the hibernate upgrade, maybe our hibernate code wasn't written in accordance with best practices, or maybe we had managed to be dependent on some play-hibernate stuff that changed or something else. At the end we ran out of time for the project and had to roll back. And now we are sitting on a huge piece of legacy software that we can't really upgrade and that blocks upgrades in a lot of other places, as the play project depends on artifacts produced there and play 1.2.3 doesn't support java 8 and uses really old libraries. It's a fucking mess.
I have 3 apps done with Play 1.x in production in the past, but I won't use it for next project. The automatic compile on reload was the feature that prompted me to use it in the past. But nowadays gradle and maven can rebuild automatically on file changes, and dcevm or jrebel can reload classes automatically. Play 1.x for the longest time couldn't move up to Java 1.8, which was a problem for me. It does now but kind of leave a bad taste in the mouth. 
But only if it properly supports HTCPCP/1.0. We don't want any of those proprietary garbage pots.
i like this idea a lot!!! except we would load it with pidora ;)
we dont do windows much ;)
I'm one of the maintainers of Play, so my opinion probably doesn't count, however, let me point you to some large public Play production deployments. This is the source code for http://theguardian.com: https://github.com/guardian/frontend (yes, they open sourced their website). It's a Play 2 Scala app. You might call it a large project, over 100 contributors, 60K commits, 1M LOC (this is everything, including js/css, just Scala code is 100K). From what they've told me, they're pretty happy with Play. You can read their own blog post about their use of Play here: https://www.theguardian.com/info/developer-blog/2013/apr/26/how-the-guardian-built-scalable-foundation LinkedIn build a significant number of their services using Play - I'm not sure of the exact number today, in the past it was over 50, I guess it's more like 100 or more today, and as I understand it there are 1000s of developers using Play there. They tell me they're happy with it. You can read about their Play usage on their blog here: https://engineering.linkedin.com/play/play-framework-linkedinT Apple is a very secretive company, they never talk about what they use, but in the past I have seen job adds from them looking to hire Play developers for working on some GIS/mapping related system (I wonder what that could be) and their recruiters keep emailing me telling me they have jobs working on Play systems in a few other departments as well.
I have worked for two different companies, both running play in production. The Guardian (my employer) is running countless instances (100s) of it in prod right now, and has been doing so at least two years. It's extremely stable and get your things done, I highly recommend.
what are you using for authentication and authorization? deadbolt / social secure? which one is preferable?
So what do you do? I mean, don't you have a free trial or free personal license or something that you could give away?
Though am no longer with the company where we used Play 2.3.2 and then gradually moved to 2.4; it is in production for 18 months now. 2 Java programmers is all we needed to build and maintain around ~10 services written in play. All this work was done over 10 months. Average java programmer can pick it up real fast in couple of weeks We used java api and wrote multiple parts as below. Note that we used it as part of core adserver. * REST API exposing crud functionality * transactional API for ad fetching which involved async calls to 3rd party systems. ( ~500 concurrent ad request per instance) * small geolocation service * small reporting service Best part was once you understand how things fit together; productivity is rocketed. Plugin system is mature. we did use cache (redis), ORM (JPA) and sometimes jdbc too. Documentation is top notch and there are couple of books from manning publications (play for java and play for scala) which are of great help. I did use google group for some contrived issues and community is super helpful including core developers (james roper). Since Lagom is published; please have a look at that too. 
I use Playframework 2.3 in production for 2 years now, and I'm happy with it. the main problem is that it is sometimes hard to upgrade to new version. For instance, in 2.3, there was not a comprehensible DI solution. So I integrated one myself, and then, tha Play team introduces one on 2.4. So now, it requires a lot of work on my part to properly make the upgrade. It will need some time, and I don't have it right now. And another issue is that it brings a lot of dependencies, and it is hard to update just one of them. For instance, I had the problem with the Reactive Mongo driver, which was hard to upgrade without having to upgrade everything. So in conclusion, Play helps me to ship something quickly, but now it is a bit harder to stay up to date with the new versions.
I have some frequent problems because Play brings a lot of dependencies, one of them play-json and some http lib that I can't remember the name now, and many other dependencies depend of a different version of that http lib (I remember I tried to use slack - https://github.com/gilbertw1/slack-scala-client - and hipchat - https://github.com/poweld/hipchat-scala - and add runtime problems due to evicted dependencies). Have you tried featherbed https://finagle.github.io/featherbed/ ? it looks promising, but I've never tried
We could give evaluations to supported SW but why? All of our software is OSS anyway? anyone can use it so thats probably a silly thing to do. The main goal with this event is brand awareness. We are not selling direct to customers either all our business is through partners so our aim is primarily technical evangelism and advocacy. So in short, no need to collect business cards, no need to do lead mining and no evals. 
A really great shirt that's 2 sizes too small.
I think well and cool designed mugs that don't scream the name of the company are pretty cool sweepstakes. Ibm had tshirts at a conference with IBM Cloudant because of their cloud thingy. Cool stickers are also the rage. The thing though. Cool looking stuff costs much more because of actually getting an artist to make it cool.
We use Play 2.5.3 in production. We started as a Play 2.2.x app, then moved to Play 2.3.x. Migrated to Play 2.4.x and then finally switched to DI with Play 2.5.x. Each upgrade after Play 2.3.x was pretty painful because they changed a lot. However, each upgrade is designed to make the code-base more in line with their vision of how 3.x will be, from what I can tell. I help develop multiple Play modules/apps and Maven-based apps. I've been bitten by the Scala vs. Java side of Play and I've been bitten in the Maven apps where I found I relied on a lot of built-in libraries that Play provides. What this says to me is that I find it all very useful.
&gt; I help develop multiple Play modules/apps and Maven-based apps.I help develop multiple Play modules/apps and Maven-based apps. Why Maven ? 
Because sometimes I just needed a simple library or simple application that didn't include the kitchen sink. But as I said, I've been bitten by not having that kitchen sink :) Also, I'm a Java developer, not a Scala one (aside from the minimal amount I do in Play).
My company built a web app and API using Play 2. We started with 2.1 and have upgraded it eventually to 2.3 but stopped after that. We're moving away from Play to something completely different. Here are my observations that factored into our decision to leave it. For what it's worth, I was the primary driver behind dumping Play: Pros: * Good scaffolding commands to get a blank project up and running quickly. Granted once you've got a product this doesn't mean much. * Their scala.html templates are better than most out there. I hate tag-based JSP with too much magic that makes it hard to find the code responsible for things - Play addresses that. * Routes file is awesome. Rather than an archaic XML file like Struts or having to scour all of the classes in a package to look for @RequestMapping to see what URLs you have in your application, there's one easy to read file that gives you the entire picture. * Automatic reloading. It's usually pretty nice. You make a change to your controller or view and just reload your browser. Play recompiles only what changed and you're good to go - no need to restart the java process. It can, however, be kind of pokey to the point where in total time I don't see much difference from just rebuilding a jar file and restarting a Java process, but it's a minor convenience. * Built in support for lots of common app-support features like LESS compiling, gzip, persistence, and dependency injection. Cons: * I know you said not to mention "second class citizen" but sorry, that's a HUGE issue for me. I never jumped on the Scala bandwagon and with Java 8 I see no reason to. Newer versions of Play make this better but doing certain things in Java are just clunky as hell - especially anything asynchronous which is kind of the point of Play. * Yes, you can program your controllers in Java but the templates, while code-based, are still Scala. While it's "close enough" for you to fight your way through, you still need to learn Scala to use it. * Configuring the project. I think Play makes it too hard to find the magic line to add when you want to enable some feature. Should you update build.sbt, plugins.sbt, or application.conf? Oh, you added the correct line but you need to enable a different SBT version by updating build.properties. If you're already an SBT guru this may not be a big thing, but most people aren't and it's just needlessly confusing. * They don't give a crap about backwards compatibility even when doing a point release. Part of the reason we're stuck at 2.3 is that upgrading to 2.4 breaks too many things in our project. They do things like change the naming convention of a dependency. So in stead of including "foobar-plugin" in 2.3 you now need to include "sbt-foobar" in 2.4. Oh, and to "baz" plugin has been split up into 3 separate modules so you need to include all of those WITH the correct version number and the documentation is not always clear about what those are so you'll spend a fair amount of time googling those upgrade issues. * More upgrade pain. They'll also just completely change the names of configuration values from one point version to the next, so your old config files no longer work. Usually the new naming convention doesn't typically make it any better for the users. It's just some dude at Play who said "I think this name is better than the old one so let's change it!". At least that's how it feels. * IDE support - because of those breaking changes, IDEs have a hard time maintaining complete support for Play. For instance in 2.2 it worked wonderfully, but in 2.3 they changed how you configure automatic imports into HTML templates and now my views are red-squiggled to hell with no code complete... something that didn't get fixed for a (over a year). * The dark side of the automatic refresh. As long you're updating the classes or views managed by Play it works great. It just compiles the delta and only takes a few seconds. A lot of our common code, however, is shared libraries in jars that are deployed with our other services, so our Play project just references those. If something in one of those changes, Play has to recompile *the entire thing from scratch* which for only 150 classes and 70 views takes around 60 seconds. It's painful to wait a minute for a recompile because I tweaked one line in our shared FooUtils class. So there are things that I like but to me they're way overshadowed by the bad things: needlessly complex configuration, upgrades completely change/break previous versions, ok-not-great IDE support, and compilation is painfully slow - unusable at times. I'm sure to some the requirement of Scala knowledge is a benefit but it's frankly a turnoff for me and is a barrier to adoption to most development shops. (edit: formatting)
May I ask, did you roll your own auth or did you use some of the existing solutions ? If so, which one ? &gt; Documentation is top notch and there are couple of books from manning publications (play for java and play for scala) which are of great help. I agree about the docs, but I'm missing more real world examples, but it's getting better. Also the books are outdated by now but I'm looking forward to the 'Play in Practice' book. 
Really? You can always tell when you are on a Java based website because it is slow as shit. All of my personal banking/financial related websites are all java and all slow.
We had a web app built in Play with 2 different mobile apps that consumed our public API which was also part of that Play project. Eventually we realized our API was garbage and it needed a reboot (nothing to do with Play, just poor decisions). During that reboot we also made the decision to convert the web app to a single page app so that we could have all 3 client platforms utilize the same technologies rather than one for the mobile apps and Play/Scala for the web app. In addition, that makes all data in/out of the system have to go through the API so maintenance and security is a little easier. So we asked ourselves if Play was really the right tool for our re-imagined web tier. We have a series of specialized non-Play-based services that do most of the heavy lifting in our application, so all we need out of the web framework is routing, interceptors/filters for security hooks, and a way to format data from our services into JSON to send back to the caller. We don't need database connectivity or HTML templates, and I can easily plug Guice in for DI myself. Ultimately we decided that Play had too many downsides (from my earlier post) when our web framework needs are now so meager. For what it's worth we actually decided to go with Spark (sparkjava.com not Apache Spark). It's very simple but it runs battle-tested Jetty under the hood and gives me all of the other things I mentioned since I'm only using it for an API. My compile times are less than 3 seconds and it's not a huge inconvenience to Ctrl+C, Up, Enter to rerun "java -jar api.jar". So I don't really miss the auto reloading we had w/ Play. And because all of the configuration is code-based, I don't need to rely on special IDE support to be productive. 
I do not encourage to use the Java API at all. But the Scala one is really great.
It may be. But I like most highly-productive Java developers have little interest in spending the time to become Scala/SBT mavens so that we can use Play framework they way it was meant to be used. If you're already a "Scala and SBT Guy/Gal" then go full throttle with Play, but I just don't find it compelling enough for us lowly "Java people" to introduce yet another language into our stack :)
So I know my companies experience with go has been pretty miserable. It's pretty poorly documented and each new version seems to break something older despite them saying it won't. I know my coworkers would love nothing more than to redo it all in Java but can't because politics. That said this is just what I have heard from them, haven't worked on it myself. 
See also: https://www.reddit.com/r/golang/comments/4w4sws/go_vs_java_for_service_oriented_architecture/
Readable is a subjective definition.
Most scaling problems you solve by starting with good architecture and system design. You can't / don't solve scaling problems by choosing a "faster" language. If you wanted to make a business that would overnight deliver letters and packages to cities all across the United States, you would design an efficient hub and spoke delivery model. If you try to base the success of the company on the idea that, "The Boeing jets fly 11% faster than the Hughes Aircraft jets", then you're dead before you even start. Oh, sure, there are some rare edge cases where you need to buy the faster jet, but 99.99% of the time, the correct solution is to buy more of the slower jets and scale on the efficiency of the system design instead. When you compare Java, Python, and Go, there are 100 factors you should be considering *before* performance. What does my team like? Do I like my team or do I want to try to get them to quit? Are they really good at Python? Do they understand the company so well that new programmers would set this project back by 3-4 years? Are Java programmers easy to find in my area? What will it cost to train my team on Java instead? What will the project look like if it's written by a bunch of people who are using Java for the first time? And then, finally, is it true that Java runs 9% faster than Go ? And if so, how much does it cost to buy hardware that runs 11% faster? Because if the 11% faster hardware is an extra $5,000 and it's going to cost me $200,000 extra to switch from my language of choice to Java, then I'll just buy TEN of the $5,000 servers, cut myself a check for the $150,000 savings, and the piddly little 9% speed jump in Java will be long forgotten.
They can probably add a button for counting how many buttons they have.
Most of Reddits downtime is caused by that cat unplugging the ethernet cable.
We faced a similar problem (and are soon to publish a multipart blog series talking in part about this decision, I'll try to remember to link it when it's published). We use dropwizard for numerous backend Json in/out api services, and broke with the mold to use golang for one (using goji). Honestly we wouldn't do it again. I liked go, but even though it's simple as a language introducing one more thing to support (for ci, for devops, for dev environments, etc) is definitely a pain. I also was not a fan of the testing setup for go (junit is already verbose enough compared to rspec, go felt like I was reinventing the wheel) and godeps was a lot more painful than gradle (or bundler). In my mind I'd have to have a really great use case for go to use it at work again. For a personal project, or if I was working somewhere that had already solved all of the "how to use this in dev/staging/prod" questions my answer might change.
I don't think scaling is the problem. OP asked about how well supported it was, and word around the water cooler was "not very well". Are you sure that you replied to the right comment? 
This is what I found, too. It's very time consuming to upgrade since things are different.
You wrote: &gt; &gt; I don't think scaling is the problem. &gt; &gt; OP's first sentence is, "Currently we use python and are realizing it would be difficult to scale", so I assume that this is a pretty important to him. And I think that's a wise concern as most speed problems are really scaling problems. The first item on his list of "wants", however, is performance. &gt; Are you sure that you replied to the right comment? A good question. Your water cooler observation, compressed, says: Go, miserable, love to redo in Java. So I interpret your response to essentially compare two languages. What I have to offer this conversation from my experience (as posted above), is that (A) most speed problems are really scaling problems, and (B) don't pick a language based on performance. Responding to your post seemed like a good place to help the OP understand that they *should* pick a language (which was your topic) but not for performance reasons (their topic) which is a non-intuitive concept that I (and most people) learned the hard way.
Sorry I'm not sure I can actually provide an exact answer to that one, all my knowledge is from overhearing my coworkers on the project complaining. I think it was either some sort of thing about acceptable syntax changing between versions or some sort of server interactions.
I got it wrong. Sorry for that ;)
It sounds like you guys are confusing scalability with raw performance. Think of the ability to scale in terms of commuting. If my small town of 100 people has one taxi then upgrading that taxi from a 4 cylinder to a v12 isn't going to make much difference. However, if I purchase 10 more 4 cylinders it will make a ton of difference. Now, what if I have a single 2 lane road? By purchasing those additional cars I may have just hit another bottle neck. So to scale to max potential I need to widen the road. Like a few people have mentioned so far, a new language probably won't solve your scalability issues if bottle neck is in another area within the architecture. For a language to be a scalability bottle neck this means the language cannot process instructions as fast as packets are arriving over the wire. For the language to truly become an issue architecture being equal you have to be pushing some SERIOUS traffic. Another way to look at it is outside the scope of the web. Implement a sorting algorithm in both Python and Java. In Python implement merge or quick sort. In Java implement bubble sort. Measure the performance of the two implementations and Python will beat Java like an old rug on large data sets. However, implement the same logarithmic algorithm in Java and it will be more performant, easier on memory use (data goes in -&gt; out faster). There are a ton of good reasons to pick a statically typed language, but scalability normally isn't one of them. TLDR; It ain't your language :)
Interesting. I'm a little too far down the path to switch now, but it looks like a neat framework as well. I really like the pluggable web engines as opposed to being locked into Jetty. Not that being locked into Jetty is bad - as I mentioned earlier it's stood the test of time for reliability/speed, but having options is definitely nice.
I know..
You'd first need to analyze your bottlenecks. Most of the time with API is the bottleneck is network, not code execution. If your scalability concern is less about performance and more about maintenance, then Java is the way to go. Loads of well-documented libraries and a huge community. Easy to instrument, measure and monitor. Easy to build and deploy. You will see faster execution in most use cases and excellent support for parallel processing. Go probably wins on execution speed, but is far less mature in every other facet.
It looks like expressjs/sinatra but isn't another Sparkjava. Sparkjava lack from all the features I mentioned previously but also: 1. force you to write static code (forget about OOP) 2. it is just a DSL around Servlet API Not sure what you mean by param binding but we do provide a rich DSL if you choose Script programming model or method parameters when you choose MVC programming model (like Spring, Jersey, etc..) Yea we missed a `render` function but the thing is you can plug the template engine of your choice and the map/named model works everywhere. Forgot to mention that we provide a `route spec` module which exports your application (Script or MVC) to Swagger or Raml... all you have to do is to write your API and you get documentation and live testing for FREE. Source code of a live demo is available here: https://github.com/jooby-guides/route-spec Here is the Swagger version: https://jooby-spec.herokuapp.com/swagger Here is the Raml version: https://jooby-spec.herokuapp.com/raml 
&gt; We use dropwizard for numerous backend Json in/out api services, and broke with the mold to use golang for one (using goji) What made your team decide to use golang when you already use statically typed language with comparable performance? I understand if you guys migrate from Python / Ruby / JS. But from Java? I don't see the gain. 
Just because you can doesnt mean you should. 
Granted Play 1.x is not comparable to 2.5, but I am speaking as my experience on how the Play team had handled development in the past and their priority. With all due respects, I'm sure their current work is good and would be useful for someone else, but personally I will not use it again nor would I recommend it. 
Python dev here; Python is expensive to scale horizontally since the unit of concurrency is a process--Java has threads and Go has Goroutines. It also doesn't scale as well with team size, because of dynamic typing which effectively preclude certain kinds of tooling (e.g., find usages in project).
Do you use Google, Amazon, Twitter or Spotify. Because they all use Java. 
I'm unfamiliar with any breakages, and I've been following the project very closely. Go is much more conservative than most languages, especially Python.
If you used it only because auto reload, there are others solutions, but play have many others advantages like simplicity, productivity boost and speed. We are using it on about 30 projects, used by milions of users and only one of them is stuck at 2.3 version and is currently not easy upgradable because it was not well planned. Rest of them is most of time up to date. Every project have breaking changes if it wants to evolve. 
I wasn't disagreeing with you, just elaborating on some of the legitimate gotchas associated with Python. :)
Poe's law?
I think they are here to stay (http://queue.acm.org/detail.cfm?id=2956643), it brings a lot of good benefits; and I think it will keep evolving into what the academia has been talking about for years of what's very suitable for distributed systems: multi-agent systems. But you are right, not all companies are capable of going that route and the consultant companies are pushing the paradigm to the extreme, as usual.
Programming a game and you google what you need to achieve that. We had to program missle commander in Swing. Was fun!
I'm learning on Udacity. Going through the Java Course, then The android development course. Both are free.
a book Java 8 from Herbert Schildt
Judging from your title and a comment to the other post, I would recommend starting with basics. You don't seem to know what compiler is (Swing), you don't seem to know what IDE is (learning programming language so that you can use Android Studio). Maybe Head First Java would be a good starting book? I know it uses dated Java version, but as a beginner, you probably wouldn't care about the new additions (java 6/7/8) right away.
I heard it's hard for beginners with absolutely no knowledge of Java. Some people say you need a bit of experience to follow along.. true?
Is there a PDF file online?
https://www.amazon.com/Head-First-Java-Kathy-Sierra-ebook/dp/B009KCUX3S/ref=mt_kindle?_encoding=UTF8&amp;me=#navbar edit: oh, pdf. I don't know if you can buy a PDF.. second link from google links to quora that links to the pdf. https://letuscsolutions.files.wordpress.com/2014/09/head-first-java-2nd-edition.pdf Point 3: learn to search for information. While programming, you will spend about at least as much time looking at google results as at your code.
[removed]
I have been learning for the past decade and will not stop learning.
Other frameworks have simplicity and productivity gain as well if not better, and much better performance. Every project has breaking changes but Play has way more than usual. God knows what 3.0 will break. I have better things to do than keep fixing upgrade problems. I mean if Play work for you guys, that's great. I've moved on.
Not really. The author explains everything very well. It starts off easy and becomes progressively more difficult. But that's just because some topics are harder to grasp. If you understand the very basics of programming like variables, cycles and if statements I highly recommend this book.
Process-level concurrency is not a nuance, it's a serious issue for horizontal scaling that leads to a lot of questionable design decisions that would not exist had thread-level concurrency was available. I worked on a large scale web app in Python and it was full of such compromises.
Python scales perfectly fine, stopped reading there. 
I got a Chrome Pixel at a Google I/O conference a couple of years ago. Not swag. Not thrown away. Totally worth it and still used. Most 'swag' is really just PR garbage and everyone knows it.
Could be because the JVM was warmed up or [some other compiler wizardry.](https://www.youtube.com/watch?v=65-RbBwZQdU) [It's easy to get false negatives in java performance testing](http://stuq.nl/weblog/2009-01-28/why-many-java-performance-tests-are-wrong)
Look up big o.
Apache Sling to me is a good web framework, i used it of course when using Adobe Experience Manager, but I've used it also for personal projects. It is completely based on a REST approach and if you have to develop content-based application I would give it a try. Even if its development is of course heavily influenced by Adobe, the open source project is alive and kicking. Also, Apache Felix and Apache Jackrabbit / OAK (projects you will use together with Apache Sling) are heavily influenced by Adobe, but I think that saying OSGi and JCR have zero adoption outside AEM as java standard is completely wrong. Basically all the main projects related to IoT and all the ECM applications in Java rely os these standards, even if of course they could use different implementations of standards. 
I would strongly suggest that you define you inner loop variables inside the loop. So, instead of "for(b=1" it will be "for(int b = 1", etc. I think the fact that all your loops are producing an undesired side effect of setting a variable visible outside of the loop throws java compiler optimizations off the rails. Edit: I just tried your code with inner loop variables defined inside and I got # With print real 0m3.748s # Without print real 0m3.267s Edit2: If you really want to look under the hood, run your code with "-XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly" and look for the difference. Also, I find it funny that you described your PC to the level of detail to include the sort of display you are using but forgot to mention which JVM you are running on :)
What are the new additions in Java 6/7/8? I know I am going to learn a dated version but I'm curious as to what is new that's not in that PDF?
I searched on google and found another guy who noticed this. [stackoverflow](http://stackoverflow.com/questions/24753150/in-os-x-why-does-using-println-cause-my-program-to-run-faster-than-without-pr/24942185) It seems to occur only on osx and only with java8
Actually I would have expected the opposit. System.out.println() goes into JNI land. I heard that JIT cannot do some of its optimizations if JNI is involved. So my guess would be it JIT /optimizes/ it slower. What is the difference if you compare both versions with disabled JIT?
I'm getting expected results also using java8 on OSX. ~2.55s with the println, ~2.41s without the println. Redirected stdout to /dev/null. $ java -version java version "1.8.0_91" Java(TM) SE Runtime Environment (build 1.8.0_91-b14) Java HotSpot(TM) 64-Bit Server VM (build 25.91-b14, mixed mode) 
Hate to be that guy but if you want to *really* compare technologies you actually have to use them. Reading Wikipedia is not enough.
Android app -&gt; Learn Java, made by SoloLearn. I call these the "learn coding while you poop" apps, and they even come with live coding exercises in-app. That will at least get you up to speed on syntax, anyway. After that, it's onto patterns, and your guess is as good as mine. 
JavaScript is not the same as Java, wrong sub dude
You should profile your application. Find out what is slow, if it's your database Java and Go won't do a thing for you. Also based on my experience unless your current codebase is a pile of garbage it's often cheaper and easier to optimize the current one using a profiler than rewrite. Very rarely is code execution a bottleneck and if it is the slow part can sometimes be written in c which integrates very easily with Python. If you have to switch I'd go with Java over Go for something that is important, the community is more established and you will find very mature libraries in it much like Python.
You generally start by doing one thing and keep on going. Going straight for your goal is generally pretty difficult since you are not even familiar with Java, so using an advanced API like Android could blow your mind. Yes game development is pretty different than an app but you learn the basics in either and you can apply what you learned in the other field. You can always learn more, not overwrite knowledge, just because you learned something different.
I've used both over the last 2 years, it's not a move "up" it's just a move sideways. They both have about the same number of bugs. People saying "oh intellij is so much better at xyz" are usually simply making it up - for example I was told intellij was so much better at maven, only to run into several maven bugs with it. The shortcuts are different. I find Intellij less "natural" to use than Eclipse, tracking down where stuff is is harder. Whether this is just because I was using Eclipse for longer is hard to say. I'm pretty sure most of the enthusiastic comments about Intellij are from commenters paid by intellij and fanboys, because I run into no one in real life who's switched to Intellij and been realistic about the change who's ever that enthusiastic about it. Only people who are in real life are people who need to be - the boss who brought it in or the coworker who convinced the boss to do it who **needs** everyone to believe it's magic in order to look good. On the other hand, the good thing about Intellij is that at least it did a decent job with things. It wasn't really worse than Eclipse either. I've had people bring in a number of frameworks and ideas that made the project worse, and after the learning curve, Intellij and Eclipse are about the same. If you use Intellij, make **sure** you're starting up the 64 bit version. I don't know why they have 2 different versions, but the 32 bit version is slow and flaky to respond, while the 64 bit version runs smoothly (just like eclipse! lol). That took me a few weeks to figure out at my job.
&gt; go to hell and stop promoting proprietary crap that was made to lock-in customers. LOL stop pushing Java EE which is some proprietary shit made to lock in customers to a specific server, and start using Spring doesn't do that and runs everywhere. :-P 
Well, there is Java Memory Model - a big and convoluted documents that describes the way Java have to handle its state. It has a lot of "happens before", "observable state" and their likes. All of it becomes insanely important in optimizing concurrent application. In the simple case of having just one thread - well, perhaps, naive compilation would be better. But that is Java - one pays the price upfront knowing that performance of their code will not be worse when put into high concurrency use case. I, actually, am not sure this is the culprit. May be the way loop variables defined is not the issue. Perhaps it is really something special on MacOS (I ran all the tests on a normal Linux OS). It was just something I felt I had to call out. After reading other messages I see that it may be the case of loop unrolling bu JIT compiler. I remember a blog post by Shipilev giving an example of just that - a case with unrolled loop being slower than a regular one. It is such a fringe case, though... And I can not find that post now. Perhaps it was a talk on one of the conferences... Shipilev hangs around on /r/java, perhaps he comments :)
This is horrible. How could you recommend eclipse to a beginner? IDEs can shape a person's way of code and eclipse is no way to be it. Honestly, IntelliJ not only exceeds everything eclipse does, it's by far the best in the industry. OP, Community Edition is free, but if you insist on not IntelliJ, at least go with NetBeans. Eclipse is a massive no no.
I'm very curious since you seem to be someone who can reproduce this. Could you paste the output of adding `-XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:+LogCompilation` for the two runs somewhere?
I get it for return types in API but parameters?
have you looked at the disassembly; i'm pretty sure the JIT eliminates the getters.
_old_ problems solved. _new_ problems incoming! yeah! GC pauses! 
You should of course cache the java.lang.reflect objects and not refetch them each time. If you want/need additional performance you can also use something like [ReflectASM](https://github.com/EsotericSoftware/reflectasm).
Download Eclipse IDE. Eclipse is incredibly useful especially with java. Also Android Apps where originally coded on the Eclipses IDE. Use Stackoverflow to awnser any questions. Just remeber Google is your Friend. 
Really interesting! Didn't thought that it would make such a difference..
Article intro is on the blog, link from there to Java Magazine which is *free*!!! (You do need to log in)
Oh, I don't have a login, that's why I thought you had to pay. :)
In benchmarks, I've often noticed that "reflecting" is the most expensive part of reflection. I.e. this... Field firstName = clazz.getDeclaredField("firstName"); Field lastName = clazz.getDeclaredField("lastName"); Field birthDate = clazz.getDeclaredField("birthDate"); Field.setAccessible(new AccessibleObject[] { firstName, lastName, birthDate }, true); ... contributes much much more to the perceived overhead than this: firstName.get(person); lastName.get(person); birthDate.get(person); It would be fair to update the post with a more reasonable comparison as others have mentioned, too.
Benchmark is completely worthless without doing anything with the return values, even if it's only blackholing them, JIT will most likely eliminate half of that code
It bugs me that we need to cache them. It seems like that should be handled better by the runtime, bur C# has the same problem.
mvn test runs just fine for me.
See, inserts and updates are where I most feel the need to use native queries, because that's what hibernate is bad at. Firstly hibernate is terrible at batch inserts; if I'm inserting more than two or three records I don't want to be doing individual statements. And if I'm making a simple update to a record by id, I don't want to have to *read* from the database first. Just update and go. Really, the main thing hibernate does well is entity mapping, but even then you have to use horrible mutable java beans for it to work. Out of interest, if you don't use hibernate's generators, how do you assign ids to new entities? UUIDs?
I generally prefer an implementation similar to hibernate's table/sequence style generator. its scalable, clusterable, and supports multiple DBMS's. also, i prefer to take control of ID generation by manually assigning the identifier. I think my point of view is different - most applications i am working on are heavily weighted to read vs. write. 
Sounds great except for...language does matter.
I would have phrased this as language *can* matter.
Could you post the source for this? MethodHandle throughput shouldn't be that low. Is it using `invokeExact`?
... nothing except stellar performances. 
Yes - Swing is supposed to be phased out in favor of JavaFX eventually.
Wow, never heard of ReflectASM. Thanks for sharing. Any downside using it compares to standard reflection? 
That has nothing to do with caching reflection objects.
Try out doxygen. It has a parameter [@copydoc](https://www.stack.nl/~dimitri/doxygen/manual/commands.html#cmdcopydoc) which you can use in your javadoc, which will automatically copy the documentation from the method you specified. Not quite automatic, but it gets the job done. ^(Disclaimer: I have never used doxygen since I never document anything) ^:\^)
[20 days since the last time this was asked...](https://www.reddit.com/r/java/comments/4teiko/recommendation_for_the_best_way_to_create/) EDIT: Downvotes be damned. What I said in the other post remains true. This belongs as an FAQ question for the sub.
Yes.
Well, if you want a highly interactive or nice looking GUI, I usually jump to JavaFX. However, if I just need a simple quick-and-dirt front end for my program, I slap a couple JButtons, JTextFields, JLabels, and maybe a checkbox or two on a JFrame, and I'm good to go. Swing is is so much simpler than JavaFX for situations where all you need is a simple GUI. 
Java 7 has been EOLed a long time ago. 
Thanks for the tip about blockdiag. I noticed that Django is also using hat. One thing that has really improved my work flow is [sphinx-autobuild](https://pypi.python.org/pypi/sphinx-autobuild). That and Sublime Text's reST mode make the feedback very quick. 
Yes.
&gt; is this true? Not really. Of course there are a few obscure cases where Swing might be a better choice but in general JavaFX is just as versatile as Swing.
If it's still relevant enought to get 20+ upvotes it's not a bad question
Holding the method handle / field / method instances in static final fields seems to have major impact on the result. I'd expect a performance sensitive application to do this. My own quick JMH benchmark shows no significant difference between direct access, exact method handles and adapted method handles (explicitCastArguments+invokeExact). Reflection is only 40% slower. The test object I'm reading/invoking may however be too obvious for the compiler since I'm just using a static final field for that likewise. Interestingly enough my non-exact method handle invocation used to be much slower than reflection, but several JDK updates later it is on par if not faster.
I introduced proper blackholing(hopefully), so it got little slower, but when I changed fields to static final it totally changed the results... invokeExact really needs to use `static final MethodHandle`: Proper benchmark: Benchmark Score | Error |Units ---------|--------------|----------|---------- Mutable_With_ReflectASM_FieldAccess | 76 077 308,108 |¬± 2 177 693,260 |ops/s Mutable_With_JDK_MethodHandles_UnreflectField_invokeExact| 75 934 500,898 |¬± 1 768 786,400 |ops/s Immutable_Without_Reflection | 75 846 329,147 |¬± 1 929 441,918 |ops/s Mutable_Without_Reflection | 75 740 658,284 |¬± 3 264 378,159 |ops/s Mutable_With_ReflectASM_MethodAccess | 75 173 324,993 |¬± 9 064 486,637 |ops/s Mutable_With_JDK_MethodHandles_invokeExact | 74 862 256,754 |¬± 5 260 449,996 |ops/s Immutable_With_Reflection | 52 481 871,753 |¬± 503 552,217 |ops/s Mutable_With_Reflection | 51 607 512,394 |¬± 915 338,934 |ops/s Mutable_With_JDK_MethodHandles | 45 013 172,599 |¬± 102 249,692 |ops/s Mutable_With_JDK_MethodHandles_UnreflectField | 44 236 762,131 |¬± 3 077 948,900 |ops/s Mutable_With_JDK_nonFinal_MethodHandles_UnreflectField_invokeExact| 43 189 727,916 |¬± 1 950 161,534 |ops/s 
In my honest opinion, I would go for Swing. I've been working with Java since early 2011, and Swing has always been my go to for standard GUI applications. My experience with FX has not been pretty, and I would not recommend.
/r/java is turning into an aggregatorgator recently
[removed]
[removed]
Yes, JavaFX is much better than Swing.
I know about derive4j/hkt project. The difference is that it's explicitly stated that derive4j/hkt is only a checker and generates no code and so it leaves type-casts in user-written code. I, personally, have tried to find a way to remove all type-casts from user-written code.