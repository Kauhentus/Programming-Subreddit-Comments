I saw Jon Rose talking about that. I've been using them for wrapping a set of objects in a DSL and converting them to JVM types - all done internally without an exposed interface so I can see what you're saying. It definitely was helpful where I'd otherwise have to use explicit casts Although kotlin "best practices" and patterns aren't really standardized to the extent of Java so I'm playing around with them as well as other features to see if there's other good uses
Haven't seen common patterns mentioned. Definitely yes to junit and maven in truth you can figure out the rest on the job.
yeah - that's true. It would be a real shame if we don't get Pattern matching. The spec is fantastic and it's the only remaining reason to use Scala, IMO.
If I were doing Java proper, I'd jump all over it. I can't see a compelling reason to switch from Groovy to Kotlin right now.
I wish I could convince my colleagues, alas, I can't. They're probably scared that in 3+ years the language will be dead or something and the old code will be unusable, I don't know.
Yeah, both John Rose and Brian Goetz have talked about it. They’re doing some really interesting work!
And not a single line of Java. How could it, with the same link ~~spammed~~ crossposted across 10 programming subs. [Including /r/ProgrammerHumor](https://www.reddit.com/r/ProgrammerHumor/comments/6pfcxg/detailed_guide_on_regex/).
hipster toy that'll blow over.
Sure. When using `new ArrayList()`, the empty array that is wrapped can be referenced for further optimisations, e.g. [here](https://github.com/dmlloyd/openjdk/blob/8dfe9dbafdae2cfc4802e4feb4af51a04f61a5ab/jdk/src/java.base/share/classes/java/util/ArrayList.java#L213) and [here](https://github.com/dmlloyd/openjdk/blob/8dfe9dbafdae2cfc4802e4feb4af51a04f61a5ab/jdk/src/java.base/share/classes/java/util/ArrayList.java#L258). The historic context here is that prior to Java 8, `new ArrayList()` always allocated an array of capacity [10](https://github.com/dmlloyd/openjdk/blob/8dfe9dbafdae2cfc4802e4feb4af51a04f61a5ab/jdk/src/java.base/share/classes/java/util/ArrayList.java#L115). Today, this capacity is allocated only once the first element is added. This is different for `new ArrayList(0)`, in case of which adding an element to the list will not default to a capacity of 10 but it will increase by [this formula](https://github.com/dmlloyd/openjdk/blob/8dfe9dbafdae2cfc4802e4feb4af51a04f61a5ab/jdk/src/java.base/share/classes/java/util/ArrayList.java#L256). Of course, this may change again in the future.
The truly great thing is the great ide support (which is poor for Scala for example). Kotlin seems to integrate pretty well into Java projects, so just go for it...
My favorite part about his talks on the future of Java is when he talks about "java in java". I don't think he mentions it specifically, but the JShell project is somewhat an implementation of his "meta-circular" java machine he talks about. I read the through the source code for it and since I've worked with the javax.lang.model and com.sun.source (javac) API on the side I was able to understand some of it, but the combination of static/compiler code mixed with reflective runtime libraries in one program to make a REPL - some parts make my head spin. Makes any normal recursion look easy! Actually that's one thing that I would like to see in kotlin is a good REPL. The existing one is really slow, and also doesn't have the features of JShell. I looked into possibly stacking the kotlinc front end on top of the exposed JShell API but the kotlin IR and compilation process is really confusing compared to javac
Yeah, anyone remember [Xtend](https://en.wikipedia.org/wiki/Xtend_(programming_language\))?
I've barely scratched the surface, but am already happily converting 50 line pojos to 10 lines. I'm not ready to convert the entire codebase and may never do so, but I like how you can mix and match them so you can do only parts in Kotlin and the rest in pure Java. The momentum and drive behind it makes me think this could be the one that's really going to make a dent, but I'm pretty biased because I do like it a lot.
And of course it has an immediate, big, fat popover about cookies covering 75% of the screen. Edit: Ah, that's because that is the blogpost on Oracle's site. Here's the direct medium.com link: https://medium.com/oracledevs
You don't have to use a full-fledged container for EE. You could even run it with Spring Boot. Or wildfly swarm that's constantly updated to have the latest and greatest. That being said, however, Spring is certainly more popular outside the heavy Enterprise world, and will probably be more popular there as well as companies migrate their old monoliths
the OP isn't civil. this is just another thinly veiled "java sucks - kotlin/scala/groovy/c#/whatever_language_i've_been_paid_to_shill is so much better". none of them belong on /r/java there's not one constructive thing in this post 
have you seen anything about how classloaders work with jshell ?
I hate to be negative but here it goes. &gt;&gt; Split Packages: a module is not allowed to read the same package from two different modules NOTE: I didn't look deeply into this yet so I might be wrong. This troubles me to no end as I had to create a package such as `org.hibernate.core` in order to extend a few package-protected classes of that library. In the end I have my library which depends on `hibernate.jar`. The result is two jars with classes defined in package `org.hibernate.core`. It looks like I'd have to copy the entire source code (or the bytecode) of hibernate into my library so I can deploy a single jar... The catch is that can't do that because hibernate is licensed under the **LGPL 2.1** - I'm allowed to LINK to it but not copy things over - so it's a dead end to my project as the license is not compatible. That list is a bit intimidating as many libraries out there will simply break and for many cases it may not be easy (or possible) to make them work again. If there's no alternative then I believe I'm stuck forever on Java 8. Pretty sure there's a lot of other people on the same boat. Migrating any larger project to Java 9 doesn't look pretty nor easy (haven't tried it though). I'm all for modularizing the internals of the JDK, but exposing that for everyone and breaking a lot of backward compatibility seems like a bad idea. I can't see any benefit in forcing a heap of new constraints down everyone's throat.
Hey, I'm still using it day in and day out ;-) in conjunction with Xtext tho. In only use it in some pure Java projects for testing
I've tried to use Kotlin to build a new Spark app recently, overall I like the language but there are a few things not working for me : - Final by default. It goes against one of the fundamentals tenets of OOP. Assuming, as a library designer, that you thought of all use cases and that other use cases are not only not supported, but forbidden, is extremely presumptuous. Let people inherit and extend your classes. - Public by default. Seems backwards to me, make your classes' public contracts as small as possible should be encouraged design. - The whole companion object thing. Ugly wart to get around the no static methods limitation. - IDE support. I'm using Eclipse, and the plugin is pretty poor. Obviously it will be a second-class citizen compared to IntelliJ IDEA but some constructs copy-pasted from the documentation just wouldn't compile. In the end I chose to go back to Java for this project.
&gt;I actually prefer erased generics. Why? Sure, it was a pragmatic decision and I don't really take issue with it. But surely reified generics are better, excluding any historical reasons against them.
Real null safety seems like it falls outside of stylistic and minimalist change. First class delegation is also pretty big IMO. Agreed that Kotlin isn't revolutionary but that's what is nice about it. If you want revolution then there is Scala and all its headaches. If you want a language that basically codifies Effective Java then that's Kotlin.
&gt; Final by default. It goes against one of the fundamentals tenets of OOP. Assuming, as a library designer, that you thought of all use cases and that other use cases are not only not supported, but forbidden, is extremely presumptuous. Let people inherit and extend your classes. In that matter, Kotlin precedes Jigsaw. 
I think IntelliJ support for Scala is pretty good now, as long as you're not contributing to ScalaZ or Cats. But even using libraries like that hasn't produced any issues for me so far.
OCP is only violated by final by default if you believe inheritance is the only mechanism for extension. 
Xtend didn't have a killer app. Kotlin has Android.
Yeah, sure, sockpuppets. No other way anyone could possibly want to downvote a post that is destructive, profane and contains absolutely not substance. Grow up, child.
I don't recall exactly, but I remember looking at that aspect specifically. I'm pretty sure that it uses MethodHandles/InvokeDynamic for the runtime to evaluate expressions/invoke existing methods for everything except actually declaring/modifying classes. There are 2 JVM instances - one for checking/compiling the input and then one for the actual execution, the former attaching to the actual program context through the SPI. Changing classes works through regular class unloading/reloading which I'm pretty sure is already built into the debugging tools. The project &amp; API is all really high-level doesn't go into any of the details of bytecode generation (it uses the existing javac). From what I remember it works with these objects called snippets, and has a way to get callbacks from the existing compiler tools whenever a snippet changes so it can basically re-check/re-compile any changes in the program which have a chain reaction of effects. After that it just hands it off to the other VM. It's hard to explain but the documentation is pretty good: http://cr.openjdk.java.net/~rfield/arch/doc/jdk/jshell/JShell.html Edit: there's also a few talks by Robert Fields (the creator) on how it works in depth. I'll add them if I can find the links
Kotlin is basically Groovy done right. Groovy has no nullable types, static compilation is only optional, and Groovy's named parameters are a mess (because they are not type-safe).
Granted, that's because the in this case the IDE led to a language and not the other way around
&gt; Is there any OpenJDK projects which are working on anything like these smaller "QOL" changes? [Brian Goetz \(2016\)](https://www.youtube.com/watch?v=oGll155-vuQ) From the list of [JEPs](http://openjdk.java.net/jeps/0) these are the current QoL and bigger languages features apart from Valhalla (Value Types, primitive reified Generics etc.) , Panama (C-interop) and Sumatra (GPU). ^Maybe ^missed ^some?: * [Project Amber](http://openjdk.java.net/projects/amber/) * [JEP 286: Local-Variable Type Inference](http://openjdk.java.net/jeps/286) * [JEP 301: Enhanced Enums](http://openjdk.java.net/jeps/301) * [JEP 302: Lambda Leftovers](http://openjdk.java.net/jeps/302) * [JEP 305: Pattern Matching](http://openjdk.java.net/jeps/305) * [JEP 300: Augment Use-Site Variance with Declaration-Site Defaults](http://openjdk.java.net/jeps/300) * ~~[JEP 186: Collection Literals](http://openjdk.java.net/jeps/186)~~ (design evaluation JEP, went into Java 9 as List.of etc) * [JEP draft: Efficient array comparison intrinsics](http://openjdk.java.net/jeps/8044082) 
&gt; which is poor for Scala for example May be true 4 years ago, no longer true now.
I forsee fragmentation of the community and resources pouring into reinventing the wheel. Maybe even keeping double API's around like Spring or Spark Java. Android devs are all getting excited for all the rewrites now possible until Google announces Fuchsia and they are supposed to redo it a third time in Dart. It culminates into Oracle vs. Jetbrains lawsuite. Then more of the bigger companies will search for platforms that are **perceived** save, consistent, stable, mature yet living: Managers will be told to choose .NET.
I think there's no need for it since there is Scala. If there were no Scala, it would be useful.
I brought up the List#map/filter example in the OP because it's really useful for low memory environments (e.g. Android), it's a huge advantage chaining operations together because it's all done inline and without creating a stream instance. Obviously Android doesn't have real callsite binding/lambda support so it probably just about evens out in the end, but I do like the conciseness
Partially agree. However, I don't think there would be any grounds for a lawsuit - Oracle v. Google was about API copyrighting, and the kotlin codebase carefully wraps everything java to the T, I'm pretty sure. The compiler and language tooling is all from the Intellij codebase which evolved from their tools for the IDE, which couldn't use anything from OpenJdk/Java because of the licensing implications. Unless there's still grounds for it? IANAL, though
My 2c. My last experience with Vaadin was v. 7.x I hate Vaadin, and will choose JSF/RichFaces/Primefaces/whatever and or any faces over it *always*. So why do I hate Vaadin? * Swing! It's really annoying and a lot of work trying to generate (and understand) a layout via java code (as opposed to xhtml). Yuck. * It's buggy. As all frameworks, it does everything *almost* the way you want it. But that's not enough, is it. It always fails at some super important feature that you desperately need. This is a common feature for all frameworks tho. * debugging what's happening client side if nigh on impossible even with developer tools, fiddler etc. because of the complexity and because everything is happening under the hood, hidden from users. Hard it is not. 
My comment is a complete exageration. Tough who knows, Oracle might be looking out for the silliest reason to make money from it.
Application developers shouldn't really create any classes in the org.hibernate.core package. If there's demand to extend any package-protected classes, we should rather have a discussion on creating proper SPIs for your use case, which then are clearly intended for external extension/implementation, care will be taken when evolving them etc. I'd suggest you go to the issue tracker (https://hibernate.atlassian.net/browse/HHH) or the hibernate-dev mailing list to bring up the request. (Hibernate committer here)
I like having one class file for all possible instantiations of ArrayList. And sure, it can be annoying that you can't use primitives, but that is being amended.
Could you elaborate more, please?
You could always look for a Full Stack position that requires Java coding. I came at it from the other direction personally, I knew relatively little web-dev specific stuff when I started but was willing to learn and my strong foundation in Java carried me through the interviews. The next job after that would be when you could ditch JS etc completely with this plan.
Props for first class delegation, I made a custom JDBC DataSource wrapper that would execute getConnection() with a given JAAS Subject so I could get JTDS to authenticate against SQL Server with an arbitrary username/password instead of needing to deal with SPN's. Thanks to delegation I only had to override the getConnection() method instead of implementing the entire interface. Could I have generated the code? Sure! But damn was it handy to not have to stare at a bunch of boilerplate.
Kotlin offers many useful features like * data classes, * named arguments with default values, * immutable collections, * null safety, * almost everything is an expression, * built-in delegation, * simple lazy initialization and so on. It is relatively easy to learn for Java developers (compared with Scala for example). I haven't found any relevant downsides yet.
&gt; Final by default. It goes against one of the fundamentals tenets of OOP. Assuming, as a library designer, that you thought of all use cases and that other use cases are not only not supported, but forbidden, is extremely presumptuous. Let people inherit and extend your classes. And when everything breaks because you changed the interface of something around you have users pissed at you for breaking things that were mere implementation details you'll regret not using final. OCP is great, but it's not a panacea - only open for extension what you are willing to support for the long haul.
Kotlin is a better Java. Scala is a better Kotlin. Haskell is a better Scala. But most developers know Java.
This was just an example. What if the dependency in question is not actively maintained? Usually you also need to have things sorted ASAP and waiting for an official update is not an option. In the hibernate case, what if I want to leverage what is in there to build something the library doesn't care about? My example: managing a database schema. Hibernate has a lot of what I need built internally, I just extend a few classes and add a few other things to the same package to get what I want. There is no point in opening an issue and discuss this as it is out of the scope of the original library. If it gets implemented it likely won't be 100% what I need, and it takes way more time to do all this dance than to write code directly and get the job done. 
Another way to phrase that is "increased readability with minimal effort".
Look into OpenJDK.
I'm having issues with import management regarding implicits needed e.g. for Json conversion. IntelliJ drops those imports because they seem unused. Refactoring only works partly and skips test folder. There are a couple of such Minor issues which make it a bit less enjoyable to use.
I love java but Oracle sometimes blows my mind. Like how they decided to host their main EE repositories on GitHub, and yet keep them under GPL while requiring a signed waiver from anyone who makes a pull request in order to even be considered. I guess they own the cloud so they know how it's done, but still...
There are problems with the Scala community. They feel too much smarter than everyone else, and have a "read the manual" approach. They also disourage using Java frameworks with Scala.
https://helpwanted.apache.org/
&gt; Kotlin has Android. That's not an endorsement... It's a shite platform I hope will die.
How about missing tuples? Missing functional interfaces throwing checked exceptions? IntStream, DoubleStream duplication?
&gt; Classic DI also doesn't allow lazy initialization though Sure it does, you just pass in something like a `XFactory` interface instead of an `X`. Or nowadays with Java 8 making things easier, a `Supplier&lt;X&gt;`.
Arguably that's a good thing. They rightfully don't want to see scala community to turn into node like shitfest. Reading the manual and understanding the basics is a fair price of admission.
I don't think that it is useful to compare Scala with node/javascript: oranges and apples. A programming language needs programmers who are enthusiastic about it, otherwise it will remain a niche language. Many programmers just want to know why Scala is so cool.
Kotlin may inline all the map/filter calls, but it still has to create a new List object at every step of the chain. And it's created eagerly too, so something like .map -&gt; .filter -&gt; .first, will create two full intermediary collections, when you just want one item. The advantage of a Stream is that it's lazily evaluated, and a new Stream object is less expensive than a new collection. Kotlin has Sequences though, which are a less powerful alternative to Streams, but still compatible with JDK 6 (e.g. older versions of Android, which will still need to be supported for a few more years).
Language injections, its great, I can make an SQL script using pl/Python.
It's still around and getting updates...
Kotlin generics are implemented with Java generics, so they use erasure just like Java generics. Using reified generics in Kotlin just means that in certain cases, it's possible to evaluate expressions like `T.class`, where T is a type parameter of a function.
So is Scala the ArchLinux of programming languages?
Composition only works if the library designer thought about it, and thought it was a good idea. Inheritance gives more freedom the the library user, where final classes / composition gives more control to the library designer.
I've used it a bit, and a I like it a lot. To me it mostly feels like a more concise version of Java (sometimes *much* more concise because of the way you can create a member variable along with a corresponding constructor parameter and accessor methods with a single declaration). One thing I especially appreciate is how smoothly it integrates with Java APIs, so, for instance, if a Java API defines a getter method, you can access it from Kotlin as if it were a public field. Going the other way, public fields declared in Kotlin become private fields with accessor methods when seen from Java (or just a getter if the field is declared `readonly`). For the most part, Kotin won't prevent you from using Java idioms you're used to (although in many cases it provides better alternatives). The one major exception is the way Kotlin handles nullable types, because it won't let you do things like call a method on a reference that may be null. I think most developers will see this as a good thing, because it makes it much easier to avoid NullPointerExceptions, but it does force you to think about the possibility of nullness more than you would with Java, kind of like how checked exceptions (which Kotlin lacks) force you to think more about error handling. Compared to checked exceptions, I think Kotlin's null handling offers a lot more benefit for a lot less hassle.
So you're restricting the ways people can use your library to avoid being hypothetically inconvenienced later. It's one way to see things but I think that when writing public code the interests of the end user comes first, if not why write it in the first place ? People will find clever ways to use your stuff you never though of if you let them, preventing so in a dogmatic way is a loss. See for example project Lombok. I don't think people will complain if they knowingly use non-public code and it breaks later, that's why we have library versioning.
On one hand, Kotlin has fewer codified best practices than Java. OTOH, a lot of Java best practices have no equivalent because they're just workarounds for language flaws that are fixed in Kotlin. Two examples off the top of my head: public member variables are just fine in Kotlin, and named parameters cover about 90% of the cases where you'd want to use the builder pattern in Java.
They are working on a legacy code base, of course they have to deal with the regrets of the past though I am not aware of their opinions on checked exceptions. By the way I like checked exceptions (I don't like surprises even though it makes the source code ugly), apparently your opinion varies. With project Valhalla, they are finally going to get rid of specialized Stream classes such as those you have mentioned, it was not possibly at the time. There are necessary evils all over the place. I bet any project with a 20-year history does.
A Solid understanding of OOP. Understand design patterns. Understand that Java EE IS PURELY AN INTERFACE. All these frameworks people are mentioning are personal preference they all implement a Java EE interface. "Also, most companies seem to be using Java EE, so I guess I'll best dig into that right away, instead of starting with SE?" With this type of question you should definitely visit oracle website and read up on SE and EE.
Some small things: - Press Alt+Enter everywhere and see what it does! Rewriting your for loop to a stream, renaming variables, etc. - Press Ctrl + Alt + V to extract a variable. So after writing foo.getBar() you can press that combination to replace it with Bar bar = foo.getBar(); - Double press Shift for "Search Everything". - Postfix completion: "flight.isAvailable().if" expands to "if(flight.isAvailable()){}". So you can just start with your boolean expression and then wrap the if around it without unwieldy key combinations or having to go back to the start of the line. Also works for expressions with spaces ("a &gt; 10.if") and other completions ("foo.getIterator().for").
EE is not equivalent to Spring. I see this all over the place but it really does not make sense. EE is a collection of specs. Spring is a framework that, believe it or not, provides implementations of those specs (and much more). You use Hibernate? The JPA spec is part of EE. When people compare EE to Spring, they generally mean to compare EE containers (Like Wildfly/Jboss) to Spring.
Sure, but that's lots of individual suppliers to write. Might as well make one factory for all dependencies an object needs and pass that, instead of writing, instantiating and passing individual suppliers for each one of them.
Just build something. I'm a bootcamp grad and my ruby on rails knowledge translated really well. It also helped that I really hustled and studied comp sci books all throughout on my own, all of which were in java. 
There are many things I like in Kotlin: * Null-safety. This is a big one for me. The ?. and elvis operator would save me tons of time at work, as well as explicitly-nullable fields and variables. This would save tons of NPEs. Even if Java just implemented ?. and the Elvis operator, I would be really happy. * The Collections changes. I love being able to do `array = Array&lt;Type&gt;(size, {index -&gt; array?.getOrNull(index) ?: defaultValue});` and various other changes. * I'm neutral on the `var variable : Type` vs `private Type variable` * I like the ability to have getters and setters build-into Field C# style (forget the proper name for that) * I don't like the performance losses. I'm hoping the new Jar features (special "nook" for JDK 9 classes) will help Kotlin. Kotlin will be able to generate two class versions, a Java 9 version (using Java Lambdas and other features) and a Java 6 version, thus avoiding the performance penalties incurred by having to put Java 7/8 features on a 6 JVM.
&gt;JEP 286 I'm not sure I like this. On one hand, you do have compile-time type checking, so you avoid lots of the issues JS and similar languages have, but at the same time you don't seem to save a lot of work to use `var/val` over just `(final) Type variablename`, you just make code less clear. Kotlin uses `var/val variablename : Type`, var/val being an alternative to `final` in Java. IDEs will assign things to variables for you so I don't see much of an advantage here. &gt;JEP 302 I like the `_` plans (I'd like that to be present in several places, personally.) I don't like the shadowing, and agree on "it makes things unclear" point. &gt;JEP 305 Yes please. &gt;JEP 186 I'd prefer Lists.of(T... varargs), Sets.of(T... varargs), etc over the format #[T... varargs], but I'd take either. You can already do `Arrays.stream(new double[] {5,5,5,5}).collect(Collectors.toList());` though, so this doesn't seem like it is just absolutely needed. &gt;draft That System.arrayMismatch(...) would be nice.
I wouldn't be telling someone new to java to learn CompletableFuture with an API of over 50 methods all with subtle differences...
Do you have any links for the performance stuff? I'm curious where it's limitations are in that regard.
Hot keys are your friend. * Ctrl+shift+f10 to run unit tests * shift+f6 to rename variable or class * ctrl + f6 to refactor method signature (add arguments, change argument types, etc)
https://medium.com/@BladeCoder/exploring-kotlins-hidden-costs-part-1-fbb9935d9b62
I am an early adopter who started using kotlin just before the 1.0 release a couple of years ago. Kotlin is amazing. It is a wonderful marriage of OOP and functional and you can do some really cool pure functional stuff that you can't even come close to in Java 8. I have a spectacular amount of fun writing kotlin. Thanks to me advocating for it, all of our JVM devs use kotlin and love it. I had some initial pushback and reservations, but I've been able to convince everyone by asking them to use it for a small project. 
There is an Eclipse plugin for Kotlin.
Most likely, /u/cantwedronethatguy doesn't like IntelliJ and is unaware that Eclipse supports Kotlin with a plugin. I personally don't blame them for disliking IntelliJ, especially if they have used Android studio on lower-powered hardware (say a 2nd-gen i5 mobile chip with 8GiB RAM and a HDD). It leaves a really bad taste in your mouth, the whole "subscription model" thing just doubles that.
The problem with Groovy is that it's too complex, there's a million different ways to do things, no type inference so you have to run stuff to find out if it blows up, if you use @CompileStatic you may as well use Java, doesn't support try with resources, named params are a nightmare, typing a closure parameter is a pain in the ass, the extension method equivalents are either ugly or require too much work, numerous compiler bugs... the list goes on and on, I work with groovy every single day and Kotlin is a breath of fresh air.
That was the most 'Java' comment I have read in a long time, if not possibly ever.
I don't know if I should feel proud about that or what. Anyway, I thought it was quite neat - doing something like this in .Net would have SUCKED.
Ha sorry, I probably sounded like a dick. I work in a Java shop now (1.5 years), and the amount of acronyms, design patterns, etc that get tossed into an individual sentence can feel overwhelming. It was a shit joke about how your comment had a lot of acronyms.
Nothing ever. Thats why I use Hazelcast :P All joking aside. Thanks for giving us JOOQ. Its a great tool. 
I figured as much. One could do the same with just about any language the work heavily with :)
Probably right. I worked in Python (~2 years) prior to my Java experience and I never really noticed anything like that. Although, lots of factors there, building much more simple junk at the Python shop.
I wrote a flask where I currently work to login to a web portal that uses a Java applet for authentication using Firefox controlled by selenium running in Xvfb that dumps the cookies to a JSON object for another application to actually scrape data out of said portal. See, not hard :)
n^o^p^e. Please don't. I am sure (maybe?) that you have perfectly good reasons at the time to implement something that way but it sounds like it *maybe* could have been implemented in a more simple nature? 
Groovy was once a language like this. Dead now. Also spawned groovy on rails. 
Had to do browser automation because of the stupid Java applet, Firefox is the only browser that can A) run Java applets and B) gives access to cookies from Selenium and C) runs on Linux so it doesn't need run in a Windows console session like our old app. Since it needed to run "headless" we needed a virtual X server for Firefox and Java to run in - so we used Xvfb. Lastly, the actual application doing the scraping was a .Net app - Python was merely an implantation detail for the login service since I needed something I could bang out fast and have at least one or two other people on the team up to speed quickly should they need to fix it. Since they're two separate services it was just exposed over HTTP using flask so the scraping app could send it a username/password and get all the cookies back.
&gt; I've always been more inclined to learn something when I actually need it Interview questions typically ask about your knowledge of things you never needed and never will need. For example, overriding hashcode().
The first project I did was spring boot. After similar experience to your own, the next one I forced myself to only use the spring framework modules and painfully configure it manually. Learning experience for sure. At the end I had a much better understanding of what was "actually" going on.
Just two questions: * what can you do in Kotlin that you can't do in Java? * what is the relative runtime performance between the languages? 
I agree that the community has an elitist vibe. I can see why though. &gt; They also disourage using Java frameworks with Scala. What Java frameworks would you need to use with Scala? How do they discourage it? We used to use Spring + Hibernate with Scala (until we migrated off it). It was fine.
All the spring boot tutorials are the same way. They tell you to put an annotation on the class and as this method and class instantiations but setup explanation of why and when i go to those classes' javadocs, they have one unhelpful sentence.
I have seen some actually used imports being removed if you use "organise imports". But it's such a minor issue I had largely forgotten about it.
You shouldn't have to look at source code. You should be able to look at the JavaDocs, but the Spring and Spring Boot docs are very unhelpful. Most classes have a one sentence description and no smoke code or explanation. Take a look at the code Java classes' JavaDocs and you'll see what it should be.
Leavin us with iOS monopoly? God, no.
By moving from Java to NodeJS you peanut
Life is long, many things can be achieved.
Most people use the documentation as a reference when they need to understand something or find what they can call on an object, etc. I'm not aware of anyone who knows it all, because why would you? It's like memorizing Wikipedia. Use it as a reference for things you need or want to know about. It's quite intimidating but due to it's verbosity it (usually) describes exactly what it's going to do. Just use it as a reference to find what you need, learn from it, and move on. :)
Idk, it is a niche dynamic scripting language. We often implemented Groovy console in our production, so it was possible write a script and execute it in the context of a server. Grails is another story
My job is writing Java code. Nobody remembers it all. I don't know a single person who I have worked with who doesn't reference the documentation and/or stackoverflow at least once a day. Even people who have been doing it every day for 20+ years. Eventually you learn a lot of the common stuff: collections, streams, syntax, native types, boxed types, basic types (Object, String, StringBuilder, etc). IDE autocomplete helps a lot too. Still, nobody knows everything, and it is likely nobody ever will. The Java API is just too massive. There are parts of it that are basically never used, too (Applet API, most of AWT) that you will probably never learn. On top of knowing the Java API, you need to know the codebase you are working with, which is equally important. Learning these things come with time. The more code you write, the less you will need the documentation. I doubt anyone is at the point where they can write a sufficiently complex Java application and not look at some form of Javadocs, be it in the browser or in the IDE Autocomplete.
They write that using Spring with Scala is not the right approach even when learning Scala. Asking people to lern sbt, akka, play, ebeans just to make a web app is silly.
Coroutines They are the same
- Nothing, Java is a Turing complete language - There are not real differences Kotlin offers a modern syntax without any drawbacks.
Well if you missed the memo, they're writing a groovy to kotlin converter and the road map is to ditch groovy. Sorry bro. 
I'm not defending Groovy. Btw, who are _they_?
Java is the new Cobol
Maybe, but what will replace Java? We have to wait to know.
It's not right, but we did Spring because we had Java + Spring which we first rewrote to Scala + Spring, then got rid of Spring. &gt; Asking people to lern sbt, akka, play, ebeans just to make a web app is silly. Who asks that? You don't need Akka if you just use Play for a web app. You barely need sbt for simple web apps. I doubt I'd use ebeans. I think Doobie or Slick is probably the way to go for persistence. I also don't use Play that often, it's Akka HTTP mostly.
Fear not, young padawan. The documentation is not meant to be *learnt*, the documentation is meant to be used as *reference* when needed. Pretty much like an encyclopedia. The key is to have some idea of what classes exist and where to find the documentation for them. Actually, you mostly will need only a *fraction* of what is available. My grandpa taught me a simple wisdom that I live by: &gt; "It is not important to know or memorize everything. It is important to know where to find the information needed when you need it" This means that you need to know that the documentation is available and refer to the documentation when you need something. We professional programmers use the documentation on a very regular base. It's much easier to quickly look up a method and get the usage right than to try and memorize the parameters, etc.
AFAIK IntelliJ has a great set of tutorials. Go through them.
Having used JavaFX and Swing, JavaFX is much much nicer to work with. The one thing Swing has that I am really missing on JFX is GridBagLayout. That is my one criticism of JavaFX: It doesn't have a layout that I particularly like. I'm also not a fan of it not being laid out logically like SWING as far as inheritance. 
hey @thehorribletruth, mind to please post a screenshot of what you are seeing to imgr?
Hopefully with some alternative, not just iOS. (although iOS is pretty good)
Well, one key drawback is that it's not Java, the most-used programming language in the world. This is important when hiring professionals or hoping for collaborative work on open-source projects. That's a unique asset of Java that other languages have to overcome if they want to persuade developers and departments to switch away from Java to a new language.
This is my view (using an increased zoom level): http://imgur.com/a/s7yxc I know it's not your fault, the cookie nag screen happens all over Oracle's sites. 
studying from the java documentation is like learning english by studying the dictionary. It's a reference guide, not a learning tool. Use the documentation when learning java the same way you use a dictionary when learning english.
Yeah, but I will see if I can influence some change over there. Thanks for the feedback. Wish Europe didn't have this cookie policy, but what can I do? I am Brazilian, living in the US. :P ... 
Cheched exceptions are fine. The problem is that there are no standard functional interfaces to use with checked exceptions. I don't see any technical problem in providing tuple classes. A lot of libraries do that. [JavaTuples](http://www.javatuples.org/) has tuples since 2012. [Also Vavr has tuples](http://www.javadoc.io/doc/io.vavr/vavr/0.9.0). Even Apache Commons lang [has some tuples](https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/tuple/Triple.html)
&gt; there's a million different ways to do things, Yup. This is what put me off Groovy. Flexibility is nice, but there needs to be some bloody structure to the language.
Don't tell him about frameworks... ;-) 
Note that a lot of IDEs let you see the documentation when you hover on a method and that makes it really useful. For instance when you want to know what the parameters mean.
Small note in case the post didn't make it clear: This will only be a problem for users putting the other project (in this case Hibernate) onto the module path. This will surely happen at some point, maybe sooner than you'd expect, but likely not on day one.
Google and IDEs will get you through most of that, classes are to teach you the syntax and heirarchy of programming. Nobody is really expected to memorize all this stuff.
&gt; In order to gather data about how Eta is being used, we have implemented opt-in telemetry. For more details, check out the privacy policy Are we now living in a world that programming languages come with telemetry and attached privacy policies? I have seen it in a couple of tools (VS Code comes to mind) and frameworks (I'm looking at you, flutter) which did this before, bit apparently it is now down to the language level. I wonder if the telemetry is just during compile time, or if it continues in the runtime as well.
Who is writing a groovy to kotlin converter for what?
The IDE just tells me what to type.
&gt; Final by default. It goes against one of the fundamentals tenets of OOP. Assuming, as a library designer, that you thought of all use cases and that other use cases are not only not supported, but forbidden, is extremely presumptuous. Let people inherit and extend your classes. As Joshua Bloch already has written in his book "Effective Java": Design and document for inheritance or else forbid it. The thing is, that most "open" Java classes today are in no way designed for inheritance what leads to fragile contracts between the base class and the derived classes. 
ScalaZ is actually a reason not to use Scala. The ideas might be nice, but the syntax is just terrible.
But Kotlin is so close to Java that every developer calling himself "professional" should be able to pick up Kotlin in a few days.
Tuesday, 1:45 PM Yi, Beyler: Dynamic Tools at Google Awkward.
Stop thinking in terms of "better" or "worse". They all have their pros and cons. Scala offers some nice language features, but is bad at tooling, has slow compile times and can lead to unreadable code. You can only say "better" in a certain aspect, but programming language and their eco systems are pretty complex.
Except for all that walled garden stuff...
Thanks but it looks like the package-per-module restriction puts an end to the approach I had to use. The problem is that I don't see any way around it mainly due to license restrictions - otherwise I could just copy the code I need from that library, repackage and call it a day. I saw the same approach being used multiple times in different projects, and many cases where multiple projects by the same company generate separate jars but some have common packages. For example: MyProjectApi.jar |- com |- mycompany |- SomePublicInterface.class |- SomePackageProtectedUtilityClass.class |- DaFactory.class And MyProject.jar |- com |- mycompany |- PackageProtectedImplementationOfSomePublicInterface.class And MyOtherProject.jar |- com |- mycompany |- AnotherPackageProtectedImplementationOfSomePublicInterface.class In the case above, `MyProject.jar` and ` MyOtherProject.jar` are independent from each other, but they both have a dependency to `MyProjectApi.jar` The idea here is that both of them implement an interface declared in `MyProjectApi.jar`, and make use of some common functionality provided by `SomePackageProtectedUtilityClass`, which is package protected and not meant to be exposed. Users should have access only to: * `SomePublicInterface` - which provides the contract of the project API * `DaFactory` - which internally generates concrete instances of `SomePublicInterface`, by loading the relevant implementation classes for either `MyProject.jar` or `MyOtherProject.jar`. The classes in these two projects should not be accessible to the user and may as well be obfuscated. How could one organize this in a way that will work as java 9 modules? Can that even work with java 9?
Haha, some time ago I met xtend first time on my job, and I thought about Kotlin too)
For my project like this I made a text based game. Where it saved different users, and any stats. Hint: for reading or writing to files, I find ObjectOutputStream and ObjectInputStream easy to use.
You don't need to know all of it by heart. Just use the documentation as a reference. Tip: Always read the package overview, as it explains the design . Method documentation should only be read for reference only really.
You mean the [JavaDocs](http://docs.oracle.com/javase/8/docs/api/), right? Start with [`java.lang`](http://docs.oracle.com/javase/8/docs/api/java/lang/package-frame.html), [`java.util`](http://docs.oracle.com/javase/8/docs/api/java/util/package-frame.html) (skip anything that says `Stream` for now), [`java.io`](http://docs.oracle.com/javase/8/docs/api/java/io/package-frame.html) (here `Input/OutputStream` is fine). This will get you most of the way, then it's just a few more interesting ones and a lot of crap nobody cares about. In general, you can read the package descriptions ([here](http://docs.oracle.com/javase/8/docs/api/)) and see for yourself that most of that is for very specialized uses-cases. There's also a structured tutorial ... https://docs.oracle.com/javase/tutorial/. Not sure how good it is, but at least the essentials and collections should be useful.
No, this exact architecture is not possible with the module system but something better is. Instead of using package visibility to hide internals (which, as you pointed out in your first comment, can be worked around), you can use [qualified exports](http://openjdk.java.net/projects/jigsaw/spec/sotms/#qualified-exports). In summary: * `MyProjectAPI` needs to make `SomePackageProtectedUtilityClass` public and put it in a different package * it can then export that package _to_ `MyProject` and `MyOtherProject` Then only these two packages can access the utilities but (barring command line options) nobody else can.
how is a 3rd party library a reason not to use scala?
Yes, and? I got no problems with it. It's a fucking PHONE, a utility device, it's not my computer. And although I agree that walled gardens are a disaster, Apples one is a far far cry from being bad. Younglings these days won't remember how it was when all software for your phones was exclusively controlled and distributed by network operators. Now _THAT_ was a disaster. (p.s. somehow I have zero issues loading my own code via xcode onto my phone. It works just fine. And I generally do not include adware or malware in my own utility tools I occasionally write.)
&gt; I'm not sure I like this. On one hand, you do have compile-time type checking ... IDEs will assign things to variables for you so I don't see much of an advantage here. This feature is for people that want to FP in Java and avoid typing `Function&lt;String, Function&lt;String, Integer&gt;&gt;`. What about `val variable = someMethod()`? You'd have to rely on the IDE aswell, thats why I also don't really like this one. &gt; I'd prefer Lists.of(T... varargs), Sets.of(T... varargs) Jep 186 is a JEP to evaluate the design, they settled on the `List.of` etc. that is coming for Java 9. I shouldn't have mentioned this JEP. 
&gt; one key drawback is that it's not Java Java is not a silver bullet. &gt; That's a unique asset of Java that other languages have to overcome There is no reason to replace the asset if you can to reuse it.
Beautiful, at least if you are the author of multiple jars that API&lt;-&gt;Implementation relationship can work. It requires refactoring a bit of code to repackage everything, and likely break existing code that depend on these libraries (they will have to at least update their imports), but it can be done. Thanks for that. 
You're welcome :)
Well, for one thing, does it *have* to be modal? I understand that Oracle legal takes legal stuff very seriously, but still... :)
... and breath actually I had the opposite reaction like wow look at all that *free* easily available documentation once you learn how to use a java doc, the format allows you to access what you need easily don't forget, no one has memorised all the javadoc's for the whole JDK + third party libraries... they are a reference to turn to, once you have researched what libraries you want to use for a solution, then you can refer to just the specific java docs you need.
Without benchmarks these articles are interesting insight into kotlin internals, but no proof of performance losses. Some benchmarks: https://sites.google.com/a/athaydes.com/renato-athaydes/posts/kotlinshiddencosts-benchmarks indicate that apart from a couple features difference is marginal. 
https://www.youtube.com/watch?v=bFcaO1pXzws Give it a watch
&gt;[**IDEA Tips and Tricks by Hadi Hariri [35:16]**](http://youtu.be/bFcaO1pXzws) &gt;&gt;Want to really know your IDE inside-out and see how to get into the flow of things when working? Want to understand the difference between an editor and an IDE and how the latter can give you the advantage of understanding the semantics of your applications? Want to be efficient (even productive) with your tooling? Then you know where to come. &gt; [*^Devoxx*](https://www.youtube.com/channel/UCCBVCTuk6uJrN3iFV_3vurg) ^in ^Science ^&amp; ^Technology &gt;*^3,049 ^views ^since ^Apr ^2017* [^bot ^info](/r/youtubefactsbot/wiki/index)
I dislike it. I personally don't see any advantages that it offers me over Java + Lombok. Also imo the syntax makes it seem more like a toy than something serious (ex. "fun" instead of "fn" or "def" or etc.). 
Maybe try to learn C instead. It has fewer documentation. 🙃
This is a valid question. I can say from my own experience that there is likely someone in a Scala project who wants to introduce ScalaZ. And of course it can happen that you are thrown in a project already using this lib. If you're not using Scala, you're safe from ScalaZ.
I've never been part of a scala project where scalaz was in use. I've barely only started using cats, and only cause Validated is more interesting for error types than Either
I don't feel null safety is that big of a deal if the team is committed to using `Optional`s and avoiding nulls at all costs. I mean sure, it's nice if the compiler helps you out, but it's not a game changer.
I used to read spring documentation to help me fall asleep.
I will investigate :)
okay, awesome, thank you all so much, I cannot wait to get back into it in a brand new way! thanks for the advice, links, and recommendations!
I don't want to get offensive, but the amount of people assuming that Optional can do something similar like Kotlin's (or Ceylon's) nullable treatment is very sad... * Optional was meant to be a very limited mechanism to be used in library method's return type...the important thing is that it should be treated at the call side. If you pass an Optional into a method, than the method does have to do a null check nonetheless - namely if the Optional itself is null. Only the intention, that the passed in value can be null is won by using an Optional - while the usage in this situation is questionable. * Optional is a runtime wrapper with runtime overhead * In Kotlin only public methods do have to do a null check at all (because of Java), which is automated. You get compile-time safety that your Kotlin code doesn't produce any NPE (as long as you really don't enforce it to do so) - That means even if you change your code (change visibilities for example), you are guaranteed that your(!) compiled Kotlin code (and that of your collegues) doesn't produce NPEs. * Optional is more verbose than something the language itself could provide * Optional even does not provide an appropriate orElse...
You need hashcode as soon as you decide to put your object in a collection such as map or set. Just do a simple google search and you will see. If you want to be a java developer you need to know these things. 
Here are some more useful refactor shortcuts next to the Ctrl + Alt + V (extract variable) one: Ctrl + Alt + M -&gt; extract method Shift + F6 -&gt; rename (class, method, variable, ...) F6 -&gt; move (method, class, ...) Ctrl + Alt + N -&gt; Inline Also, if IntelliJ is getting slow (on larger projects) use help -&gt; Edit Custom VM Options to change how much memory IntelliJ can use.
Learn to use Alt+J (which I moved to Ctrl+D, the same place as it's inspiration from Sublime Text) effectively, it's a real productivity boost.
Indeed, this is just plain stupid.
you know how you speak english yet you don't know nearly all the stuff written in the dictionary. It's like that
"1001 Things to do in life", 1001) Memorize the JavaDoc
* If you pass null optionals, you deserve whatever bad thing happens in your code. As I said, we never use null anywhere. It's simply not a big deal. We also pass Optional parameters. It works fine, even if "it's not meant to be used that way". * Don't care about the performance cost of wrappers; I know few who do. * As I said, we never use null, so we never get an NPE, neither in public nor private methods. * That's right, it is more verbose; Java is more verbose in general. * You mean an orElse that accepts another Optional? You're right, it doesn't. We added that as a library function. Java's standard library is pretty much trash compared to, e.g., Scala or C#, and you'll get no argument from me. As I said, having null safety at compile is not a game changer if you don't use nulls in your code, which we don't, and neither should anyone at this point. And honestly, I feel that "wasting language specification" on something like that is overkill. If you're gonna do that, might as well support full-blown monads. So yeah, it's nice, but I wouldn't switch languages because of that.
Typechecking is a compile-time concern and should remain as such. Most things that actually need reification are just bad ideas, and most of the issues people actually want to solve by introducing reified generics are actually possible using type erasure.
Except that Lombok is a big hack to provide something that the language doesn't and that can stop working suddenly? Also I don't see how Lombok should compete against ALL features of Kotlin!? For example nullability treatment that is independent of some optional compiler plugins that not everyone uses?? Or how you enforce Kotlin's explicit type conversions with Lombok? Or how you write extension methods and DSL like Kotlin? And how you use coroutines like Kotlin? And operator overloading? Function inlining? 1.6 bytecode!? Critizising "fun" because "def" or "fn" should be better ... yea, very mature. The thing is, that "def" doesn't tell you anything about what is being defined. And weird shortforms with as less letters as possible... welcome to the 90s again. The question is WHY? Because you like it? Why not do something that makes sense and call it what it is? A fun. A function.
You're in the wrong subreddit. **/r/learnjava** (as is listed in the **sidebar**) is about learning Java programming. There (in **/r/learnjava**) the **sidebar** has a section **Free Resources** where you find excellent free Java tutorials that require zero previous programming experience. I'd particularly recommend the **MOOC [Object Oriented Programming with Java](http://mooc.fi/english.html)** from the University of Helsinki. Java is a decent first language because it is a very verbose, explicitly and statically typed (you need to tell the program the exact data types of your variables) language and the compiler produces very elaborate and clear error messages. The OOP paradigm of Java can be quite intimidating at first, but with the proper course, it is easy to understand. Good luck!
Thank you very much! I will repost this in r/learnjava then. Thank you again tho!
Actually, no need to repost there. Just look at what I have told you and you will find everything you need.
Understood :) I'm checking it out rn 
Geez man, calm down. &gt; Except that Lombok is a big hack to provide something that the language doesn't and that can stop working suddenly? If it bites me I'll reconsider. &gt; Also I don't see how Lombok should compete against ALL features of Kotlin!? I never said it does? I explicitly said: &gt; I personally don't see any advantages that it offers me over Java + Lombok. Key word: "personally." &gt; Or how you enforce Kotlin's explicit type conversions with Lombok? &gt; Or how you write extension methods and DSL like Kotlin? &gt; And how you use coroutines like Kotlin? &gt; And operator overloading? &gt; Function inlining? &gt; 1.6 bytecode!? All things I and other devs I work with are happy without. Our code works fine and is 100% understandable by both me and other people who've worked on it. I see no problems here. &gt; Critizising "fun" because "def" or "fn" should be better ... yea, very mature. what is opinion :S It's almost as if the way that something comes off to someone is *gasp* subjective. . Look. I get that Kotlin offers features that are improvements over Java. But frankly, I see no reason for there being so much circlejerking over it. E: I'm sure it's a perfectly good language for many things that people want. ***PERSONALLY***, I see no reason to switch over right now though. 
"We don't use nulls in our code" ... Sure, until you do because of a bug or a mistake or a 3rd party library bug. Then you find out at runtime rather than compile time. But I'm sure you and your co-workers write bug free code too? No need for tests either then I guess.
You are right, I misunderstood your previous message. It is even more work and uglier to wrap exception code with unchecked exception code, then surround that with try mechanism. Luckily for me, I somehow didn't have to deal with such ugliness in my code bases. For a discussion about tuples, see this thread from 2010: http://mail.openjdk.java.net/pipermail/core-libs-dev/2010-March/003973.html That message from kevinb of Google (one of the prime developers of Guava) is a good caution against them: http://mail.openjdk.java.net/pipermail/core-libs-dev/2010-March/003995.html With project Valhalla I think they are going to do something about them (I haven't followed the mail list for these discussions).
&gt; Java is not a silver bullet. Never said it was. I was speaking to the ubiquity of the language; an advantage that few other languages enjoy. That is an asset of the language.
But the closer Kotlin is to Java then the less point there is in adopting it.
Thanks everyone for your wonderful responses! I thought I was going to get many troll responses. Very appreciated!
&gt; Look. I get that Kotlin offers features that are improvements over Java. Yes, that would have been an appropriate answer. Then, you could have said that you aren't interested in the improvement of basic programming features because you don't use them in Java and everyone (at least me) would have been happy :P Sorry, but I don't get why you had the urge to answer in this thread, while it is totally clear that you aren't curious about learning anything.
The thread is literally titled "what are your thoughts as a Java developer on kotlin." I don't see how a response that isn't singing the praises of kotlin is in any way irrelevant. The IDEAS of kotlin are interesting to me. Kotlin itself is not. 
&gt; namely if the Optional itself is null If you do this, you deserve to be slapped. Hard. Optionals are never null. Never. Ever. Null.
Krails?
There is no guarantee Lombok will continue to work in future Java versions. That is the risk you take. Some are not willing to take such risks.
Don't know what to tell you, nulls aren't an issue where I work or in my code bases where I use Optionals. We have a lot of code reviews which help too. While it's possible for null to creep in from a 3rd party library (which we actually don't use that often outside of testing frameworks, but that's not important), it simply doesn't happen (unless you count NPEs which are equivalent to *asserting* that null isn't returned, similar to Kotlin's `!!` operator). I also never encountered an NPE in Scala apps since, again, it's idiomatic not to use nulls. I'm not talking about not writing errors, which is much harder obviously, so there's no need for a slippery slope argument here. I'm talking about not using a very specific and knowingly error-prone *literal* in the language. It's like not using `eval`s or reflection to modify immutable classes. If you don't then it tends to not be a problem. Again, it would be nice if the compiler checked for it (although the IDE does, as do our linters and other similar tools), but it's not a big deal in practice *if the team is dedicated to not using nulls*. I love safe languages and I wish we would rewrite our codebase in Idris, no kidding. But we aren't going to change languages for a bug that happens extremely rarely if ever and is easy to catch. It's like if there was a compiler check for underflowing longs; Might be useful, but it's not really an issue.
Install Key promoter plugin. every mouse click, it will suggest you short cut.
Please read up on Reddit rules for self promotion - specifically the expected ratio of promotion to non-promotion posts.
Even after they replaced symbolic names with regular ones? How about Cats? To be fair, it's rare that a project directly uses ScalaZ or Cats. You're much more likely to have those as transitive dependencies than primary ones, unless you really want to use a Writer monad or something.
I would also advocate Joshua Bloch effective Java He does a very good job of breaking down different Java tips into different chapters and each chapter has a set of items. He also goes one step further and instead of just instructing you to do one thing blindly he goes over the other options possible and why they are not optimal Also as an added bonus, Amazon says there's a third edition being released in october Effective Java (3rd Edition) https://www.amazon.com/dp/0134685997/ref=cm_sw_r_cp_api_ccmEzb08YXW4C Rob Martin's clean code is another book I would recommend but it isn't specifically for any one type of project but it gives nice examples of how to cleanly structure your code(also has a nice set of "smells and heuristics" which you can use as a pocket reference) but given your past experience this book can probably be more of a skim. Other than that I would agree with what other people are saying with learning a framework. I like spring boot and there's plenty of example projects on GitHub that uses it and spring's own documentation is also pretty good. For concurrency I would recommend Brian goetz Java concurrency in practice. If you want a refresher for data structures and algorithms and just some examples of it in java I recommend Robert Lafore's data structures and algorithms in Java but if you're more familiar with math/algorithms and want to do a deeper dive then the CLRS introduction to algorithms is the holy Bible. Edit: one other thing that I have found extremely useful is online developer websites My top three are: Dzone - has fantastic refcardz which are like cheat sheets for different frameworks, technologies and even general principles as well as articles for general programming as well as specific topics (cloud, Db, iot, etc) Tip - subscrbe to the dzone newsletter. They send you emails that are collections of 10 or so articles and I usually just look through them to see if there's anything interesting or relevant to me Infoq - similar to dzone also has a great collection of articles and presentation videos Oreilly - not really a website I know but if you look at their free ebooks there's a good collection of them that will help you get started depending on what topics you're looking at Bonus - YouTube. There's just so many tutorials and videos starting from beginner levels all the way to advanced topics like scaling cloud architectures for google-like loads, microservices, deployment. I don't think anything beats doing a personal project though. If anything you can fork a starter spring boot project(which generally revolve around a basic concept like an online book store) and re-write it to be about a concept you're interested in. Also reactive extensions seem to be catching a lot of buzz these days. I don't have any personal experience working with them but could also be another interesting topic to look into since I think java is actually adding support for reactive streams in java 9 
public fields break encapsulation, not getters/setters. getters/setters support encapsulation and in OOP are the way to send a message to the object indicating a piece of behavioral information is either requested in its current state or that the object consider changing something about its state; it's up to the object how to respond to getter/setter requests, also known as accessors. Edit: I feel DTO's are mostly duplicative work but they do serve to decouple the front-end from the back-end if you have enough time/team members to do the duplicative work. 
&gt; public fields break encapsulation, not getters/setters. What's the *effective* difference between public fields and getter/setters? In both cases, other objects can see the values of the data members of the object. The getter/setter exposes the data of an object. Encapsulation hides the data of an object. The issue is not what the object does internally with the getter/setter, it's that the object is exposing details of its internal state. This increases coupling, because other classes will depend on these details, which makes it harder to change the internal details of the object. Encapsulation allows an object to export behavior, so an object can only be depended on for it's purpose, not the specific data it contains.
&gt; The getter/setter exposes the data of an object. No. They expose what the object programatically chooses to respond with when it receives the get/set message.
What is the point of encapsulation? Why are we bothering to hide the values or state of an object at all?
It's a setting in the *Java Control Panel*. The newest version should be 141 though.
Much better info at the github: https://github.com/imixs/imixs-jwt
In privacy policies there is nothing about collecting date during runtime, but still it is quite odd feature 
How do you spot the corporate marketer? He uses ® and ™ in a place like Reddit.
Or when every single post they have made is spamming the same announcements to different subs.
Some people think that `final SomeVariable&lt;Generic, AnotherGeneric&gt; someVariable = new SomeVariable&lt;&gt;()` is overly verbose. I think they may have a point.
As everything this is a compromise, but a good one, if you want to develop for the JVM and want to use existing Java libs and don't want spend months to learn a new language, new tools etc. Kotlin offers enough benefits to make you more productive compared to Java. 
You start seriously missing it when you get pattern matching, which JEP 305 will introduce to Java.
And I think `var someVariable = new SomeVariable&lt;&gt;();` isn't verbose enough.
Right, but you can have real language improvements while staying compatible with the JVM. When Java 8 was released, for example, Java devs were basically given the ability to use multiple inheritance for the first time. That was a huge benefit, imo. I mean, I really like the Elvis operator and would love to have it in Java, but that's mostly just syntax sugar. Operator overloading, on the other hand, would provide a compelling advantage over stock Java.
I don't mind so much seeing that Apache is Non-profit and Open-source.
The newest really is 144 and I really don't know why I got it pushed so early...
We've learnt a lot about improving stability and functionality based on real data. It seems like a nice thing to be able to opt into, definitely if you support the project and want to give detailed diagnostic information. Don't understand why this is so controversial, times have changed, and it isn't like it is on by default and hidden away in some deep level of documentation.
/u/Goofybud16 summed all the issues I have, then again I wasn't aware of the Eclipse plugin. 
Once again, I have no idea what this apache project is or does.... why do they all do this! edit: for the others curious: &gt; Apache Fluo is an open source implementation of Percolator (which populates Google's search index) for Apache Accumulo. Fluo makes it possible to update the results of a large-scale computation, index, or analytic as new data is discovered. For more information, take the Fluo tour. I tried finding out from the link provided, went to all of the top level links on their site with no reasonable explanation. In the end, I just removed the extra junk from the URL and got to their front page. Seriously, apache guys, start putting project descriptions in your press releases!
The things Intellij does better than other Java IDE: - Better Spring support. - Better Hibernate support. - Better Search, Refactor, Delegate, code completion and live templates. I also use few custom code templates. Also you can search for somewhat complex stuff like "Which method returns class type&lt;T&gt; " in the whole project more easily. - Overall faster performance for larger projects. - Better Java GUI design ( Not many people use Java for Desktop apps but still it helps when needed ) - SQL support; it identifies queries and helps you to write SQL queries. - (For Premium version only ) JSP support. It integrates well with Spring ModelAndView and you can create JSTL tags with its support. - Better source control support. I find it easier to use while developing under Git based or SVN based source control systems. - It even detects remote connection and disables some features for ease of use. Useful if you sometimes need to connect your office computer from home and develop remotely. Those are my personal opinions, I used almost all popular Java IDE's and my conclusion is Intellij is by far the best.
The official press release can be found here [NASDAQ GlobeNewswire](https://globenewswire.com/news-release/2017/07/26/1062705/0/en/The-Apache-Software-Foundation-Announces-Apache-Fluo-as-a-Top-Level-Project.html) and on the [apache blog](https://blogs.apache.org/foundation/entry/the-apache-software-foundation-announces5) 
Thank you for this, looks great.
EDI: Editing Device Instructions?
The only way to find out would be to try it out. But my guess is that your custom classloader would be faster because it specifically solve your issue. Osgi solve a bigger problem and come with its lifecycle dependency resolution. Service resolution etc... I would guess that all of that is more resource angry that your custom cl. Osgi is after all implemented using their own classloader 
I am an Apache guy and I was involved with this. The problem was we posted a link that links to the press release. Sorry for the confusion, you are right we goofed. Next time we will do better (we are still learning), thanks for the advice and posting the relevant info for others.
It's possible that a custom solution could be faster if heavily optimised for this specific use-case. But bear in mind that OSGi has been developed and optimised as open source for over 17 years. Adopting a standard solution would also allow you to benefit from the experience of the community around OSGi and avoid maintaining lots of complex custom code. To be honest I think it's far more likely that the performance of this problem will be constrained by the ability of the JVM to garbage collect the classes and classloaders than by OSGi. OSGi itself adds almost no overhead.
It's not just you, its like every single apache project that posts "version updates" to reddit. 
You can't tell what the type of `SomeVariable` is?
hey as an apache contributor, I have a question for you. I saw a post about a list of outstanding code issues with various Apache projects. I found one I could help with https://helpwanted.apache.org/task.html?64dded7713b07a2333658995f9de437714171472 (i've never contributed towards open-source before) and it told me to email the dev for the datafu team. I never got a response. Is this just me being stupid because i've never contributed towards open source, or are they ignoring me over at the datafu project?
The performance hit of jdbc is insignificant compared to the database performance itself and IO. Database query tuning, etc, is included in hibernate tuning.
Do you memorized the dictionary because you need to write an essay?
You can check the mailing list archive to make sure your email got through. https://lists.apache.org/list.html?dev@datafu.apache.org You may have to subscribe to the mailing list in order to send to it. Below is info for that projects list. http://datafu.incubator.apache.org/community/mailing-lists.html If you are interested in contributing to Fluo, let me know and we can help you find a starter issue. 
i made a player for music on YouTube as a static website hosted on s3. my Java search engine runs on a micro ec2 instance and places json files into s3 buckets. works like a charm https://www.reddit.com/r/Music/comments/6c3auy/i_made_a_free_youtube_player_for_electronic_music/
`var someVariable = someField.someMethod();` Without using an IDE hover-over or looking at someMethod(), what type is someVariable?
thank you! 
Literally how many times have you been paid to override hashCode()? (As in, while you were at an actual job.) For me, it is zero in more than 10 years.
In cases where the type isn't clear, then you should annotate it. Though in this case, the name being the same as the type does provide a pretty strong hint...
Basically yes. But you theoretically get better maintenance. 
&gt;you should &gt;should Should is a very strong word there. You SHOULD do a lot of things. I can 100% promise you that var/val will be horribly abused in exactly the situation I just described (Possibly by someone transitioning from a language like JS or Python?). Not to mention if at some point someMethod() changes return type, then code 20 lines down might be broken. If that method which changes is in a library someone else maintains, you update, suddenly your code is broken, it is much harder to identify why. Instead of just "This is wrong where you assign the variable" it might be far enough down it doesn't even fit within the same screen. (An example is changing a JTextArea to a JLabel. Some things (setText()) would still work, but not everything would). Or what if the library returned a JTextArea, you wrote your call, then it later returned a JButton. You only used setText(), so all of your code still compiled. Later on, after updating, you go back to change your code. Now, some JTextArea specific code suddenly won't compile, leaving you scratching your head. (Substitute Swing components that are all extremely obviously different at runtime for say a data structure. They were used for the sake of a well-known set of classes and methods) All of this potential mess so what, you can maybe save a few keystrokes? On Netbeans/IntelliJ: `someField.someMethod();` back back back alt+enter enter makes it `SomeType someVariable = someField.someMethod();` Eclipse: `someField.someMethod();` back back back CTRL+2 L makes it `SomeType someVariable = someField.someMethod();` So instead of typing `var someVariable = someField.someMethod();` (42 keypresses) you would type `someField.someMethod(); backarrow backarrow backarrow CTRL+2 L someVariable` (41 keypresses) or `someField.someMethod(); back back back ALT+ENTER enter someVariable` (again, 41) The only time it would save you keystrokes is if you aren't writing in an IDE, but then you are just making your own life harder by making the code more ambiguous. Then if you do end up using it where you shouldn't (literally anywhere but x.toString();, new Type();), you will just make your life harder if you have to look back at your code later. If anyone else uses it where they shouldn't in the codebase you are working on, your life is harder.
"People will believe a big lie sooner than a little one; and if you repeat it frequently enough people will sooner or later believe it."
All that blahblah about yet another spam post from medium which was most likely STOLEN in the first place which is why they didn't see all the obvious mistakes in the code Seriously, get out of this sub, we don't need this crap nor your pretentious ranting
It's a marketing. When your product has flaws, people will notice, so they try to spin those flaws as "strengths". Oil companies try to pretend they're "environmentalists". Politicians present giving money to their donors in tax breaks as "helping the little guy". And Hibernate calls itself "high performance".
The other poster goes a bit overboard. I've never needed to use anything other than ArrayList and HashMap in real code. I have seen collections questions come up in interviews though. Several times. You just need to know what they are and the basics of how they work. "mastering lambdas and completable futures" - I've not seen this come up in interviews past "what are the new jdk features". No details, no tests. Haven't seen them in the job yet either. Lambdas don't do anything new, they just wrap anonymous inner classes in a different package. 
I work in a semi-legacy codebase (Spring Boot/Hibernate w/JPA, but before any coding standards were implemented) and am pretty much stuck with their entity inheritance/dependency graph. A few days ago I had to write a query that takes a coherent join across five tables and generates a query with ten. Since the query is run every time the users hit the home page and in a couple other spots, I ended up going with a native query--I only really needed two fields and not the entire entities anyways. This made the pull request fun as the tech leads are offshore, and despite the code they produce apparently this was the bad practice they wanted to complain about. I pasted the generated query into a git comment and asked them to let me know if they can do better....my pull request got approved.
I've used hibernate at all my places for the past 10-15 years. My new job we use plain old jdbc with prepared statements ( spring's named parameter template actually). I don't miss hibernate.
I wonder about that myself. I don't use Hibernate, but I've noticed that it's .NET cousin NHibernate is often significantly slower than the database. As in my applications are spending more time CPU bound than I/O bound.
N+1 times slower ;-)
Without trying to start an argument, I have 2 examples where encapsulation work well for us (using JPA) over public fields. Example 1: 3rd-party database that splits a timestamp for an event into 2 columns, DATE, and TIME OF DAY. If I want to use util.Date, sql.Date, or time.LocalDate ( or the Date+Time equivalents) in my code as opposed to joining two string fields constantly, I can expose a getter/setter for my chosen format ( internal for my application, external from database ), and inside that do the conversion as needed and set the private fields. This lets me leverage other libraries to help me manipulate dates, while keeping the legacy format the database requires. Example 2: Legacy database uses "Y" and "N" to represent boolean values, same as above, I want to use lang.Boolean or boolean instead, I encapsulate the nasty internal details with a setter/getter and users of my code need never know of the horrors underneath. These are simple examples and yes there are other ways of solving the problems, and i'm skipping detail, but it was off the top of my head. The point is encapsulation lets you change things under the hood without affecting your own interface to your object, or lets you re-present complicated data in a more consumable way. 
I deal pretty heavily in maven-based projects. Make IntelliJ automatically download all the sources and Javadoc it can for your dependencies by checking off the two boxes for that under Build, Execution, Deployment &gt; Build Tools &gt; Maven &gt; Importing. It drives me nuts to see my coworkers not using features available in the extremely well-documented libraries we use only to discover they just don't know what anything does because they're not seeing the Javadoc or sources. In any class, after you've used Cmd+Click to navigate around and gotten lost or maybe just want to see other classes in the same package, use Opt+f1,Enter to show the class you're in in the Project pane. Turn on every Java inspection and use the Opt+Enter menus to disable the inspections you don't want. I've learned a lot just be figuring out why those inspections might be wanted in a project. Code style settings, inspection profiles, copyright headers, new file templates, compiler settings, version control settings, etc. can all be committed to the repository. You can use the .ignore plugin to generate/append ignore settings for the .idea folder that cover the files you shouldn't commit (workspace.xml keeps all your window state). You can also commit required plugins to prompt everyone else to get those installed. For instance, I have one project has plugin requirements for BashSupport, Docker Integration, .ignore, and Error-prone Compiler Integration (with the project compiler set to use Javac with error-prone). You can write logic to determine whether or not a breakpoint will activate. If you only want to hit the breakpoint if the input to the method is an object with a field set to "foo", you can do that. Oh, and the syntax for the structural search is a little of a bear, but if ever wanted to find every method that takes a subclass of X as its third parameter, returns a String, and is in a class with two type parameters, that's what it's for. Shift+Cmd+Up/Down moves methods/classes/fiends/enums along with their Javadoc. You can click and drag any file or package around to refactor it (all the imports affected are updated). The one big pain point / safety net is that you can't run anything if the whole project doesn't compile. You can't have any syntax errors in an unrelated class and run a test that doesn't touch it.
For what it's worth, I've worked on programming languages with type inference and haven't run into any of those issues. Just like I haven't run into issues with the generic inference that Java provides, or with the type inference on chained method calls. It just reduces verbosity when assigning local variables, which can vastly improve code readability by ensuring that only important parts of a class are "mentioned". You still get all the same compile time guarantees you had before. I'm just really not seeing apocalyptic consequences from this minor, stylistic change. Worst case scenario, I'm pretty sure Checkstyle will provide a nice suite of style guidelines you can enable around usage.
Please consider NOT using your root account credentials and NOT hardcoding your access keys in you code. 
Do you think there are any good reasons to use Hibernate over JDBC with stored procedures? 
This is what a lot of people miss. There's plenty of cases where Hibernate is a good fit, but it's important to realize you can also use JDBCTemplate/CriteriaAPI/HQL/NativeQueries as needed.
Exactly. I'm by no means an expert in any of the technologies I'm working with, but I've been programming long enough to know that these features exist for a reason...someone who leads a team that does single row accesses in loops (often nested in the function tree...) yeah okay, lol
Thankfully these days I only seem to get employed at places that are too smart to use Hibernate. Life is so much better, we focus on user stuff instead of behind the scenes crap.
OSGi is no small decision. Many packages exist in duplicate in order to achieve OSGi compliance. Are you sure you can sell that to your people? Custom classloaders usually do fine and you control it. I say stick with the known quantity. There is a reason OSGi hasn't taken the world by storm. It's a well done concept, but it simply is too greenfield oriented to be a realistic choice for many apps.
Would MyBatis be useful in such cases?
If you override equals(), then you must also override hashCode(). That's the main time that I override hashCode() and it's pretty simple to do so. This [site](http://www.javapractices.com/topic/TopicAction.do?Id=17) explains a bit more about some good practices related to overriding equals() and hashCode(). I'm guessing that you must identify your objects by defining a getter that returns some UUID. Then with that id you compare it with some other object's id in order to see if they both represent the same object. What if I told you that you could abstract that away in a manner that allows you to freely alter the implementation underneath? That is kind of the idea behind equals() and hashCode() as far as I understand. *edit* Also, @calingrecu is right. If you want to put a custom object into a collection or hashmap, then it should override equals() and hashCode() (the previously linked site states that.) An easy example of why this should be followed is that [Collection.contains()](http://docs.oracle.com/javase/7/docs/api/java/util/Collection.html#contains(java.lang.Object)) requires equals() in order to function correctly.
I favor Hibernate + Spring Data over JDBC because it cuts down on lines of code to maintain and gives us a lot of flexibility and quick response to any request to pull different data sets.
a few point there, let's first look at the first one, just because it's been here for a long time, and I'm sure there you are talking about the different implementation does not mean it's optimised for this use case. Let me take a simple counter example, https://github.com/dmlloyd/openjdk/blob/jdk9/jdk9/jdk/src/java.base/share/classes/java/util/concurrent/CopyOnWriteArrayList.java been there since java 5 and anybody who knows how to do a CAS can write a better implementation in 10 minutes. I'm pretty sure Doug could write a better version than me be so far the version in java is not the best. So just because it's open source and here for a long time does not mean it will give you the best perf. Now I do agree that there is a lot of costs that can dominate, gc is one not to forget deoptimization, synchronized block etc... But if you go down the OSGi road, you won't directly use the class loader - otherwise what would be the point? - you will need to package all those generated class as a bundle. If they are generated before startup not a big deal but if you do that on the fly it's another story. you could have a mixed approach where you use OSGi for the known different version and a custom CL for the generated code, you just need to be aware that class visibility might require you to play with bridge classloader which is rather complicated as you will need to track the dependent bundle and unreferenced when bundle get unloaded. 
So... You focus on writing queries for specific engines by hand rather than using an cross-database organic language elements and avoid and behind the scenes work to do that instead?
MyBatis is slower than hibernate at mapping objects so not really ...
are you saying that the overhead of hibernate is not dominating and the database is the slow point? or that jdbc has no overhead. or hibernate? not very clear Not from experience the overhead of hibernate can be quite important specially when fetching huge number of rows, the object inflating is not very fast. I don't remember the exact number but on a commercial I got quite a boost in perf by bypassing hibernate, now it was not the most common use case but still. are are some benchmark on a local mysql with different mapper https://github.com/arnaudroger/SimpleFlatMapper/wiki/Jdbc-Performance-Local-Mysql
Did you investigate why Hibernate generated additional joins? Did you select an entity with multi-table polymorphism or eagerly loaded associations? Did you try selecting just the properties you need with Hibernate? No one else in this thread says what Hibernate was slow at in their case (Executing the same query slower than plain JDBC? Generating slow SQL? Executing too many queries? Slow dirty checking with large sessions?).
Are you sure? https://arxiv.org/ftp/arxiv/papers/0710/0710.1404.pdf
yes pretty sure you can check my benchmark source are available. That paper is from ~~2010~~ - edit actually might be earlier than that all references are like 2005-2004 -, and can see the source so ... hard to now if it's still relevant, can't reproduce or see if it's relevant.
&gt; I don't miss hibernate Amen, brother.
You might want to have a look at jOOQ, it's far better imo, or jdbcTemplate if the DSL leaves you cold.
Yep--I'm not entirely sure which set of annotations is triggering it, but essentially the DB is structured around every table row having a unique ID across the entire database (which is reflected in the model classes via annotations and "X extends Y" clauses). It's kind of weird because there isn't a single root either. To paraphrase, the roots are essentially XObject (object tables) and XReference (relationship tables). The entity model/annotations appear to be trying to enforce ID consistency every time one table is joined with another through inheritance and annotation, except there's fundamentally no point--all IDs are generated through a common generator, and short of someone deliberately fucking with database IDs there's no reason that the core table (which stores the IDs, discriminator type, etc.) should ever need to be joined outside of something like a data migration where consistency is fundamentally key since those processes are not easily rolled back. That being said, the size of the userbase and the real-world datasets involved don't usually create a cost that the client cares about, but there are enough users (8,000-10,000 across 3 application instances) that at some point you have to decide between available resources and trust that the programmer knows what the hell they're doing.
Sorry, I didn't see your other comment about this: https://github.com/arnaudroger/SimpleFlatMapper/wiki/Jdbc-Performance-Local-Mysql
the complete opposite, sprocs are even more problematic. spring data and hibernate was fine tbh, but they added little if any value over springs named paramater template imo.
&gt; MyBatis Useful for what ? We simply create a row mapper, a domain object that gets populated, and write the sql. The argument is you have to write lots of similar sql for basic crud operations. Yeah you do. But we have about ~5 tables that require a neat straight forward insert. The vast majority of logic we right has advanced business logic in it. So fuck hibernate, mybatis etc. Let me write the sql and not worry about jars and annotation, and dependencies, and weird join syntax, and hibernate caches. I know sql, I know java. Looking back they just make it fucking complicated for little if any benefit. Getting rid of it is definitely preferable imo.
The less lines of code is very marginal imo, are you sure, do you include you entity annotations as lines of code ? &gt; gives us a lot of flexibility and quick response to any request to pull different data sets. Say what now ? My dao code is this short, with no massive dependency graph required in maven/gradle, no annotation on the beans : public List&lt;LoginHistory&gt; findMostRecent(int limit, int offset, long userId) { String sql = "" + "SELECT h.*, u.id AS userId, u.username AS userName " + "FROM history h " + " INNER JOIN my_user u ON h.user_id = u.id " + "WHERE u.id = :userId " + "ORDER BY login_time DESC " + "LIMIT :limit " + "OFFSET :offset "; MapSqlParameterSource parameters = new MapSqlParameterSource() .addValue("userId", userId) .addValue("limit", limit) .addValue("offset", offset); return getNamedParameterTemplate().query(sql, parameters, MY_ROW_MAPPER ); } private static RowMapper&lt;HistoryWithUser&gt; MY_ROW_MAPPER = (resultSet, i) -&gt; { History history = new History(); history.setId(resultSet.getLong("id")); ... history.setLoginTime(resultSet.getTimestamp("login_time").getTime()); User user = new User(); user.setId(resultSet.getLong("userId")); user.setUsername(resultSet.getString("userName")); user.setRole(PortalRole.ofId(resultSet.getInt("role"))); return new HistoryWithUser(history, user); }; With intellij the sql is even correctly syntax highlighted/editable as sql connecting to the db (ie I can get columns as predictive text etc)
Oh, you should not be, I assumed we were in the other thread where the link was. Thanks for putting the link there.
Yeah I mentioned we are using ( spring's named parameter template actually)
&gt; this was the bad practice lol
Please, look at the reddit rules for spam and self-promotion. It is not allowed to use reddit as a self-promotion platform and to **solely** post content from a single site without any other contributions. Also, since your posts constantly get downvoted, they fall under the [**reddit spam rules**](https://www.reddithelp.com/en/categories/rules-reporting/account-and-community-restrictions/what-constitutes-spam-am-i-spammer) that **clearly state**: + If you flood a Reddit community with posts or comments, you may be considered a spammer. Instead, post one or two times and see what happens. + If other users in a community historically downvote your posts or ones similar to yours, but you feel the need to continue submitting them anyway, you may be considered a spammer. Both of the above are verbatim copies of the three reddit rules that constitute spam. Both of the above rules apply to your content. Please, refrain from further just flooding the subreddit and become an **active participant** in other discussions without promoting your own content. Otherwise we are forced to take measures, such as banning you and reporting you to the reddit admins.
This isn't a Java advantage over Kotlin, Scala and other JVM languages... Instead Kotlin works in Android environment even when Java or Scala cannot, unless you uses an pretty old version of these (further Android version should removes this limit).
In my experience MyBatis hits that sweetspot between basic JDBC and overengineered Hibernate. It allows me to write my own SQL, making use of templates and such to include SQL fragments so I have full control over what gets executed. It also allows me to easily map the results back to domain objects too.
It's not that hard, really. Have a Dialect interface, write a base abstract class and 1 sub class per DB engine with the specific stuff, and pass those around when needed. Most SQL you write in day-to-day is rarely DBMS specific anyway. 
To reiterate a comment from yesterday, please read Reddit's rules on self promotion as at the moment you're nothing but a spam account: https://www.reddit.com/wiki/selfpromotion
Yes because people either use MySQL or Oracle generally and you literally never port to another. The performance semantics are well understood and easily tested literally as soon as you're done writing the query. No such ease of use with Hibernate despite years of consultants arguing the contrary. Vietnam is over, Hibernate lost.
#This is your final warning! **Stop flooding the subreddit!** Your content is **spam** and **spam** is prohibited by the **reddit rules** that have been pointed out to you [**5 minutes before this post**](https://www.reddit.com/r/java/comments/6pu61p/making_decisions_with_the_if_and_ifelse/dks8fhn/). You were already warned there to stop spamming and yet you continue as if nothing had happened. We cannot accept such behavior. **The next post will lead to a permanent, unrevokable ban.** Either you become an active participant who doesn't just promote their own content, or you are not welcome here (and in any other of the programming related subreddits). Reddit is a community that thrives on active participation and not a self-promotion platform.
Yes, we do the same at my current job. It sometimes looks ugly and the parameters can be a bitch sometimes, but when something goes wrong you know exactly where to look. 
Using JDBC directly is pretty painful though. You need something like JDBI or springs jdbc thingies to wrap it.
I did only skim the article, but the [git repository](https://github.com/igorrendulic/rapido-java) contains a nice and small starting point for new projects for people that do not have their own project templates lying around. It has some minor quirks, but is small enough to be easily understood.
&gt; In Java, the simplest statement you can use is the If Statement. there is a statement to make a decision For example, suppose you have declared a variable named an integer variable, and you want to Print the message When the variables is 10. Just read the first paragraph. Looks like SEO spam, probably outsourced and written by someone who is payed by word count and does not care about content quality. There are dozens of short, low quality articles about trivial topics on that site. 
IDE*. Sorry I've been misspelling the .edi extension for weeks, it seems I have a new problem now.
With spring data + Hibernate, that would just be a History DAO interface with a method like: Page&lt;History&gt; findAllByUser(User user, Pageable pageable); ... and that returns a page of History records. That's about 28 lines less, right?
As I explained in my [High-Performance Hibernate](https://vimeo.com/190275665) presentation, Hibernate is good for writing data while [native SQL queries is the most efficient way for reading data](https://vladmihalcea.com/2017/01/18/the-jpa-entitymanager-createnativequery-is-a-magic-wand/). If you use native SQL queries, the overhead of Hibernate is insignificant compared to the amount of time spent to parse the query, generate the execution plan, execute the plan, fetch data and send it over the network. However, [Hibernate is suitable for writing data in OLTP applications](https://leanpub.com/high-performance-java-persistence/read#leanpub-auto-why-jpa-and-hibernate-matter) for the following reasons: - [transparent prepared statement batching](https://vladmihalcea.com/2017/04/25/the-best-way-to-do-batch-processing-with-jpa-and-hibernate/) - optimistic locking support so that you can [prevent lost updates even in long conversations that span over multiple database transactions](https://vladmihalcea.com/2014/09/22/preventing-lost-updates-in-long-conversations/) - [multi-level graph conflict serialization](https://vladmihalcea.com/2016/08/30/how-to-increment-the-parent-entity-version-whenever-a-child-entity-gets-modified-with-jpa-and-hibernate/) that works even on lower isolation levels - support for [shared/explicit locking](https://vladmihalcea.com/2015/02/24/hibernate-locking-patterns-how-do-pessimistic_read-and-pessimistic_write-work/), as well skip locked at the API level so that you don't have to worry about the DB syntax (if you ever worked with SQL Server, you'll know what I mean). - [transactional write-behind cache to reduce the window of time required to borrow a connection from the pool](https://vladmihalcea.com/2017/05/17/why-you-should-always-use-hibernate-connection-provider_disables_autocommit-for-resource-local-jpa-transactions/) - [second-level cache](https://vladmihalcea.com/2015/04/09/how-does-hibernate-store-second-level-cache-entries/) to reduce read traffic on Master node for read-write transactions. Remember that scaling reads is easy because you can span more Replicas. Scaling the Master is the difficult part. As a data access framework developer, you don't want to know how many JDBC Driver bugs you are insulated from when you use a framework like Hibernate or jOOQ. If you don't like the transactional write-behind optimization Hibernate provides you and you are mostly reading data without modifying it, then you are better off using jOOQ instead of plain-old JDBC.
I'd say the overhead of Hibernate is slightly significant compared to database performance and IO, and the overhead of JDBC is totally insignificant.
Take a look at [Plugin Framework for Java](https://github.com/decebals/pf4j), maybe it's useful for you.
Uh huh, now where's the rest of the code? That join isn't just going to appear by magic.
My first project, we did plain JDBC with managing our own data source, connection pool, etc, etc. This was pre-Spring. It was really painful. My second project, we did Hibernate. Ostensibly so that we weren't tied to any one database vendor (Ha). For the simple stuff it works well, but for the complex stuff it's really painful. Now I just go straight for NamedParameterJdbcTemplate and don't look back, and it all just works. Very rarely do I need anything more complicated than that, and in those cases it's likely that a SQL data store isn't the best fit anyway.
I use MyBatis mostly of times and I don't care much if it is a little bit slower. Developer time spent to reverse HQL or nasty CriteriaQuery is way more expansive. Also with MyBatis you can throw query to some experienced DBA and optimize it later without touching Java code.
At my current job we're moving from Hibernate to JDBI (like retrofit for JDBC). I do miss Hibernate, as we've re-implemented criteria with string fragments (yes, we do complex, dynamically determined queries).
No, with Hibernate and SpringData, the Join *is* generated automatically. 
The biggest issue with hibernate isn't the additional joins, or the overhead of using hibernate itself. It is the abstraction away from the database, making the coder work in java mindset, rather than relational database mindset. For example... if there was a counter that monitored how many items where ready to be shipped... then, there might be some code that says (psudocode) shippingStatus=entityManager.getShippingStatus(); shippingStatus.setItemCount(shippingStatus.getItemCount()+1); shippingStatus.update(); The equivalent SQL would only be UPDATE SHIP_STATUS SET ITEMCOUNT=ITEMCOUNT+1; This is far....FAR less painful on the database. SQL's like this can be batched up and not block while information is retrieved from the database. makes for orders of magnitudes faster system. to conclude...its the style of programming that hibernate / JPA developers tend to adopt that makes it slow. Hibernate can be quick.... but then you loose the whole point of hibernate as a mapping interface between java and the RDBMS.
There was a regression in jar signing I believe. It's mentioned in the [release notes](http://www.oracle.com/technetwork/java/javase/8u144-relnotes-3838694.html).
When you talk about hundreds of thousand of libraries being juggled around few times a second, the only real answer is to try it yourself and see. Any product will start to show its ugly side when you push it to the limits, and there will be heavy tuning required, so there is a good chance your homemade classloaders will do just alright. Also I'm a bit surprised you're doing it all in a single JVM. If you want isolation and scalability, spinning your code on separate JVMs in a cluster seems like an obvious way to do it.
I find Karate to be a weird fit for a BDD framework like Cucumber. The idea of BDD is to specify your tests in the language of the behaviors you want to see. Are lines like "Given url 'http://myhost.com/v1/cats'" and "Then status 201" really behaviors? Shouldn't it be more like "Given I add a new cat" "Then it should have been stored in the system"? Not trying to knock Karate btw, I'm genuinely curious to hear how others see this.
&gt; Hibernate can be quick.... but then you loose the whole point of hibernate as a mapping interface between java and the RDBMS. To be fair, Hibernate excels where your update is by far less trivial than incrementing an item count. The difficulty is, as always, to draw the line when to use SQL and when to use an imperative approach (ORM or stored procedures).
You could use [jOOQ](https://www.jooq.org) to abstract over dialect-specific things and still stay in the SQL paradigm.
You could use [jOOQ](https://www.jooq.org). It is perfect for [dynamic SQL](https://blog.jooq.org/2017/01/16/a-functional-programming-approach-to-dynamic-sql-with-jooq/)
&gt; and in those cases it's likely that a SQL data store isn't the best fit anyway. I'd challenge that. In what kind of situation (apart complex graphs) would SQL let you down?
That paper doesn't seem to indicate: - The database(s) (and version(s)) being used - The benchmark logic - The benchmark method In fact, they ran 50 threads in parallel, which makes me wonder if they correctly set up their connection pools. Needless to say, I don't trust most benchmarks. I've written too many flawed ones myself.
Always? You mean, you eager join history to user? At every possible user-related query? The history table with all its millions of records? I guess those few saved lines of code do come at a price, don't they :)
Order by? I'm not populating the whole user object. No not less lines, you are using hibernate so your entity's have complex annotations on? Including the join definition. Right? And how about four joins? A method name matching a dumb pattern, fuck debugging that. I literally chose the simplest query we have.
No it's defined on the annotation with hibernate.
*if* the generated queries are optimal for what you intended to achieve. I'm assuming that's what you implied by "hibernate tuning".
When you want to be cool, and don't need to actually get any data back out of your "web scale data store".
I don't know what "documentation" you've seen, but Oracle's tutorials are not too bad: https://docs.oracle.com/javase/tutorial/index.html
Huh? Organic language elements? Hibernate is far too much overhead, for very little gain. Once you've worked with it for a while, then got rid of it you feel happy again. 
Hibernate is a tool. A tool can be misused. Rule of thump use hibernate for business logic implementation (and write operations) and use plain sql for read operations. This way you will have readable and maintainable code
Ironic. Unless you back this up with some actual facts or data then your statement is no less meretricious than the marketing you're rubbishing.
I'll take a swing at this. Your database consists of thousands of entries, each of which is a hierarchy with thousands of entries. You are logging temperature once every 10 seconds from 150,000 sensors. You are doing a lot with circular relations/links.
I said: &gt; (apart complex graphs) OK, granted. Yours is a simple graph and still might challenge SQL.
Do you want "high performance"? Forget Hibernate and use pure JPA (javax package) ! In a world when you have millions request (like a bank enviroment) Hibernate is very very expensive , in 5 years working in a bank i saw how Hibernate is good only in "happy world" ... use pure JPA is better than hibernate ... Let the Enterprise Application Server take care about the implementation , dont do It yourself
Why the completely off-topic link to sixthmass.com? Oh...I see...relevant username.
Speaking from first-hand experience, the fact that it is easier to find Java developers than for other JVM languages is a huge advantage for the Java language. If you want to do a project in Scala, you look for Scala developers (hard). You don't go out and look for Java developers (easy) and then tell them to write in Scala.
fair, I'm the worst example of someone not using SQL though. For my hobby web-app i store user credentials in flat file jsons (bring on the cringe), and at work I go to huge lengths to avoid sql at all costs.
&gt; at work I go to huge lengths to avoid sql at all costs. why?
&gt; No one else in this thread says what Hibernate was slow at in their case IMO it takes more time to optimize Hibernate than use a native query. With Hibernate you have to know a lot of stuff and investigate some probable causes to speed things up, without Hibernate things are simpler, you have way less layers, and finding the root cause for the performance issue is easier.
&gt; and at work I go to huge lengths to avoid sql at all costs. [It's just syntax](https://blog.jooq.org/2016/12/14/sql-streams-for-comprehension-its-all-the-same/). Look beyond the syntax, and you'll find a beautiful world of stateless, side-effect free, functional / declarative data processing. It's very rewarding!
This is a common misconception - which is addressed in this blog post: [Yes, Karate is not *true* BDD](https://hackernoon.com/yes-karate-is-not-true-bdd-698bf4a9be39).
Overriding equals and hashcode is a pain but like you've pointed out sometimes necessary. A cool little library I use a lot gives you this for free along with Immutable objects https://immutables.github.io/
Its a pain in the ass, and one more thing to add configuration and debugging for. The only real problems SQL solves for me are: * complex queries (more complex than and/or/xor) * multiple applications/threads accessing the same DATA (not table) at the same time. SQL for me is just in the deadband of performance. Everything i want to do is either small enough to not need SQL (I'm lazy and I just serialize json or csv to disk), or so massive that there isn't an SQL implementation fast enough (millions of transactions a minute). What SQL is really good for is keeping track of huge amounts of data, in basically cold storage, which is a problem I never have. That being said, I am going to play with it because I really want to do delta storage on my web-app, to keep track of every change to the state somewhere so that any user can at any time roll back any changes. Right now it's SUPER hacked together (running git in the data storage directory, any time anything changes it makes a commit) which only works because its me and 5 other people using it so performance is a total non-issue.
There is definitely a side effect, the performance is TERRIBLE compared to flat files, and while querying data is great, most of the time I don't need complex queries.
Kotlin has been around since 2011 (just like Xtend) and is supported by JetBrains and Google. Not really comparable in practise.
Umm... You do realize that JPA is just a specification right? You can't "use pure JPA" you still need a JPA provider, of which there are a few. Hibernate, EclipseLink (reference impl), OpenJPA etc. I mean, i fully agree that folks should be programming against the JPA interfaces not the hibernate-specific ones, but as far as performance, if your JPA provider is hibernate, that itself shouldn't make a big difference. Perhaps your argument is really that EclipseLink or some other JPA provider is faster than hibernate?
OK, why not. There are use-cases for flat files. After all, the SQL engine ultimately reads and writes from "flat files" as well.
Dude designing schemas that it generates from embedabnles with maps/etc would be extremely time consuming. I always fuck at least something up schema wise, so tbh hibernate ends up faster.
It looks like NamedParameterJdbcTemplate supports batch updates, queries, named parameters and updates, it seems like something worthwhile to check into as a potential Hibernate alternative.
Nice list ... thanks. I currently have two of the listed books.
&gt; meretricious I disagree with your point but thanks for the new word.
Sorry, yes you could throw the order by on there quite easily too (just append "OrderByLoginTime"). And yes, my entities would be defined using a few annotations for things like @id and the join on user. Sure of course there are instances where I would substitute in HQL code to pick out pieces of data and do more complex joins, but you can do that by simply annotating the interface method. Debugging isn't very hard, you just have to enable Hibernate's debug logging so you can see the queries and if-needed, the injected values. If you just need simple access to the DB data, this seems like an easy way to go and as you point out, if you're doing complex data queries, you should write some custom SQL for that. This isn't a one-size-fits-all situation.
With order by that would be: Page&lt;History&gt; findAllByUserOrderByLoginTimeDesc(User user, Pageable pageable); You can also specify whether the user object should be loaded now or when you use it. In cases where you do need some sort of overly complicated but also fast query you could use something like this: @Query("SELECT p FROM Person p WHERE LOWER(p.lastName) = LOWER(:lastName)") public List&lt;Person&gt; find(@Param("lastName") String lastName);
You can specify whether you want an eager or a lazy join
If there are load order concerns, then you get into dependency hell and a prioritization plan needs to be devised and implemented. OSGi has support for priority loading. If you can wait, Java 9's modules might be the way to go.
No *Thinking in Java* by Bruce Eckel? That book really helped me get my head around the core concepts of OOP and the old editions are free online.
I don't understand why the "subscription model" would be that much of an issue with the current model. You don't have to continue your subscription, you still get access to a version of the product even if it expires. Although I do think they should make it the last version available under your subscription instead of the first, that just seems like a bad idea. Having said that, there's a community edition that doesn't require any money. And I realize that many people are in areas where a "real" developer machine may be out of reach, if you're a developer in the "first world" and your company won't provide you with adequate hardware, that's hardly Jetbrain's fault (and does Eclipse do any better on the hardware you mentioned? I haven't used it for years).
Anyone can submit books :)
Well, I know, but I replied to [a comment](https://www.reddit.com/r/java/comments/6prjad/java_shower_thoughts_when_people_say_high/dksceqj/) where it was claimed that the join is generated automatically, and that happens only on eager join, right?
Yes
&gt; then, there might be some code that says That's not really representative of Hibernate. The pseudocode would look more like: ShippingStatus shippingStatus = entityManager.get(ShippingStatus.class, 123L); shippingStatus.increment(); // OOP! Hibernate doesn't need getters/setters em.flush(); // UPDATEs, INSERTs, DELETEs - for whatever has changed in the persistence context The SQL for this could actually be: UPDATE SHIP_STATUS SET ITEMCOUNT=? WHERE VERSION=? Neither statement is particularly painful to the database. Hibernate can batch up SQLs. Especially, since it is keeping track of what has changed in the entity manager, so it can generate a bunch of SQLs and spit them out in batches. &gt; not block while information is retrieved from the database What is blocked? Entity managers are thread bound, so one thread can read and one can write without blocking each other. Hibernate doesn't do pessimistic locking by default, it does optimistic locking. Which increases performance of the database by eliminating unnecessary row locks, at the cost of increased application complexity, since the update will fail if there have been intermediate updates since the last select. &gt; but then you loose the whole point of hibernate as a mapping &gt; interface between java and the RDBMS. The *true* point of the ORM model is synchronize memory representations, between Java objects and relational rows. For read-only projections, where no synchronization is required, you can bypass the entity manager entirely (the most common optimization). When you expect to update the database, Hibernate imposes a programming model that protects against lost updates. If you UPDATE entities directly, you can lose intermediate updates. If you partially UPDATE, what about versioning? The EntityManager imposes an ACID model at the application level without the heavy cost of a physical transaction, which is especially useful for long conversations. Yes, ORMs can be leaky abstractions, and that is totally okay. The actual question is, for what Hibernate offers, do the benefits outweigh the drawbacks?
So I'd love to try out TC in a project at work but I have 2 issues. Windows 7 and no direct internet access on developer machines (but I have access to download stuff). I have access to a VMWare cluster and VMWare workstation so setting up other windows/linux machines is not a problem. Anyone know the best way to proceed?
I read /u/p3tr00v's post as "use the EE server's implementation of JPA directly" instead of "use the JPA specification", which obviously makes no sense.
What i want to say is, when you use Criteria, use Criteria from javax, and no Hibernate. "you still need a JPA provider", yeah, you are right, but give this responsibility to server... I see difference when i use Objects from javax and no Hibernate. When i use Hibernate directly, i see a worst performance
When's that new edition of Effective Java supposed to be out?
Nice, thx!
I'm new to java databases, could you explain what you mean by: "A method name matching a dumb pattern, fuck debugging that." Is Hibernate a poor choice if there are complex join operations involved? 
October 29, 2017.
Should be pinned to the top of the front site.
There is one planned, isn't there? I'm kind of reluctant to buy the original one, it's still mostly solid but there are some points that have been pretty much invalidated. 
Does anyone care about the Spring Core certification?
Uhh... &amp;nbsp; JEP 198 (JSON) isn't targeted to JDK9. JEP 110 (HTTP2) is in JDK9 as an incubator API (unstable). JEP 199 (sjavac) isn't targeted at non JDK builds - "A follow-on project will explore how sjavac is to be exposed in the JDK tool chain, if at all" 
&gt; JEP 110 (HTTP2) is in JDK9 as an incubator API (unstable). Incubator != unstable 
This new HTTP API will make code look cleaner. It was about time to release a more abstract API where you don't have to handle with streams and stuff. 
Head First Java is really good as well for a java beginners book
&gt; native query I don't understand why people have a hard time mixing the two. All your business logic is where it needs to be.
&gt; OOP! Hibernate doesn't need getters/setters If a method like the one you pointed out, increment() exists then you can call that to send the increment message to the object. Attempting to extrapolate from there to "doesn't need getters/setters" is a form of irrational exuberance. But then, you are actually defending Hibernate so there's that to consider. &gt; The EntityManager imposes an ACID model at the application level without the heavy cost of a physical transaction, which is especially useful for long conversations. ACID only ever exists in the relational database engine, ever. &gt; long conversations These are called, long-lived transactions, there used to be a great book by Jim Gray that explained them. 
The SQL generated is based on the method name in the spring data interface.
It's very, very old. Almost everything in that book has changed since it was published. If you were to learn Java with it today, you'd have to relearn the language when you started reading and working with current code. 
Did Josh really give an exact release date?
That's what the Amazon page of the third edition says. I can't vouch for its accuracy beyond that.
You can safely read the second edition just in case you're wodering. Yes it was ~~written~~ revised around the time of JDK6, but the overwhelming majority of items in that book still apply. And it's an excellent read overall.
&gt; Attempting to extrapolate from there to "doesn't need &gt; getters/setters" is a form of irrational exuberance. You left out a key word: *Hibernate* doesn't need getters/setters. Older versions of Hibernate required exposing persistent fields through getters/setters, in order hydrate/dehydrate persistent entities, thus completely breaking encapsulation. Modern versions of Hibernate can set the persistent fields directly, without getters/setters, allowing entities to preserve encapsulation. This is good, because it allows the object to maintain invariants by not allowing direct manipulation of persistent fields from outside of the object. Like so: shippingStatus.setItemCount(shippingStatus.getItemCount()-1); The `increment` operation, horribly named I know, lets the object retain full control the `itemCount` field without interference from external objects. Item count can only go up! Thus, OOP! &gt; ACID only ever exists in the relational database engine, ever. ACID is a generic principle. It can exist anywhere. This is especially important for multi-step business processes, where you don't want to violate the ACIDity of the business processes by committing to the database in each step, thus making the changes visible. And you don't want to hold a long running physical transaction on the database, because that would kill scalability. &gt; These are called, long-lived transactions Long transactions are an implementation pattern, and Hibernate provides one, with optimistic locking and versioning of entities. This is one of the selling points of Hibernate. You are free to implement a long transaction model yourself. 
So the various classes just appear at compile time as if by magic? You remind me of the people who talk about "codeless" programs, then demand that I write a few hundred lines of XML.
Basically it guesses at the SQL you want by the name of the method. A nifty trick, but not something that I would trust in mission critical code.
Here 'unstable' is a reference to the API, which is subject to change - a key point of the incubator programme.
Setters and getters enable encapsulation; they don't break encapsulation. OOP.
You're reciting a mantra, without explaining *why* it is so. What is encapsulation? Encapsulation allows objects to maintain the invariants of their data members by only allowing change through methods. If a class can't maintain the integrity of its own state, encapsulation has been broken. But, just because access to state is through a method, doesn't mean the object is encapsulated, because poorly designed methods can allow external objects to circumvent the invariants of an object. Hibernate, in the olden days, *required* getters/setters for persistent fields. If you wanted to maintain invariants on the fields of the entity, such as `itemCount` can only be incremented, you were out of luck. The setter allows external objects to circumvent the invariant, for example by decrementing `itemCount`. Because the entity can no longer maintain its invariants, encapsulation has been broken. And getters/setters broke the encapsulation. And why is it bad that an object can't maintain its invariants? Because loss of local control of state means that control of state is spread out throughout the system, which makes it harder to understand the system and more importantly, harder to predict the effect of changes. *This* is why encapsulation is so important.
Is Concurrency in Practice worth a read? I feel like I am not going to read it because it covers 1.6
What about Deitel &amp; Deitel's Java: How to Program? It's a college text, but it's one of the most comprehensive series I've seen and it offers a LOT of examples and tips regarding the language itself.
What's your opinions on [open data structures](http://opendatastructures.org/ods-java/) ? I like the book, will keep looking into it to try to retake my data structures course. Had some serious trouble with it but trying to relearn.
Just started that one. Really helps fill in the gaps from the pluralsight videos I'm watching. Was wondering why it wasn't on there
:(
I think it's a must read still
Definitely submit it! http://www.communitypicks.com/r/java/submit
&gt; pluralsight videos how are the courses on there? I am going through a berkeley class, although they took it down from youtube unfortunately :( 
Well my issue is limited interactivity. I'm only on the first series for Java but basically it's follow along while we make this example. Personally I prefer a 'here's what we learned so far create such and such an output' Also some of the concepts weren't entirely clear or at least by adding another source it's cementing the topic on hand. The course I'm on got low reviews and the users say the other ones are better so after the book imma push through this video series and move on to the next. Happy studying!
I got some good mileage out of that one!
Hi! Yes, of course :) For Windows 7 users we have a support for Docker Machine. You can install it manually or with Docker Toolbox :)
It is really really good, I still recommend it.
Why all the love for Head First Design Patterns? I find it so tedious.
Thank you, i haven't even heard of this software
Yes, classes with strict types and defined property names, rather than, for example, Map&lt;String, Object&gt; where you have to pass names of columns as strings and keep in mind what type of data is stored in each element
Many of project i worked on had support for both MySQL and PostgreSQL as requirement. In some cases also Oracle and H2 in file for "demo mode". And i must tell you, having to test every query for 4 dbs and have switches which query to use in every second db operation is not fun. And maintainability was a nightmare. Hibernate with its slight performance tradeoff was a godsend
Really don't care whether someone has java certifications or not
You could try libgdx.
I'm fairly certain IntelliJ IDEA has some android development tools, but I've never used it before.
Good site!, do you have the source code on GitHub or similar?
&gt; "you still need a JPA provider", yeah, you are right, but give this responsibility to server... The only reason why you should do that is because you value your application server's compliance recommendations more than your project's specifics. But this decision certainly doesn't have anything to do with performance. &gt; I see difference when i use Objects from javax and no Hibernate. When i use Hibernate directly, i see a worst performance Did it ever occur to you that you may have just been lucky on a very particular use-case (or even a single query), and now you're deducing from this particular experience (erroneously, obviously) that this will always be the case? :) I suggest learning the difference between [`∃` and `∀`](https://en.wikipedia.org/wiki/Quantifier_(logic)) when applying logic to conclude from your personal experience.
Get [Android Studio](https://developer.android.com/studio/index.html), it's the official IDE. The ADT plugin is no longer supported for Android development. It would have also been much faster to just Google "Android IDE", as the top link is for Android Studio.
I would say it's a negative signal actually. It might be a neutral signal if an employer paid for your certifications but certifications without any work history or education is probably a negative.
They're generally viewed negatively in my experience. At startups/tech companies I think they're a very strong negative signal, but for IT departments at large fortune 500 companies/places outside of US tech hubs it might be a very different story. 
I'm curious why this is the case. Obviously you have industry experience so I trust you. It shows that I am competent in Java. I can't figure a negative other than it might show that the employer might think that I'm focusing more on theoretical problems instead of creating a portfolio that shows my practical experience. I also have a mechanical engineering degree from the University of Maryland.
Android Studio is based on IntelliJ, so you might as well use it. I mean Android Studio not IntelliJ.
Proto.Actor is an opensource, cross platform actor framework available for C#, Go, and now Java+Kotlin too. The Kotlin implementation is based on Kotlin coroutines and it is extremely fast both over network and inprocess. for benchmarks see: http://proto.actor/docs/performance If anyone is interested in this space feel free to join in on the effort. The Java API wraps the Kotlin coroutine API by exposing CompletableFutures to allow actors to be non blocking in their message handlers. Example for the Java API can be found here: https://github.com/AsynkronIT/protoactor-kotlin/tree/master/examples/src/main/kotlin/actor/proto/examples/helloworld_java 
Which other design patterns book would you recommend? The Big 4-one?
I was wondering why this was even a question! Android Studio gets better every update, and is officially supported and developed on Google. Although their simulators have been known to be kinda garbage in the past, I think they're improving. If it's still bad, check out [genymotion](https://www.genymotion.com/).
This might be an unpopular opinion in /r/java (I have no idea), but if you need your app to be on both iOS and Android, check out [React Native](https://facebook.github.io/react-native/). It's not the right call if your app is going to be graphics intensive (something like a game), but will be perfect for something like a Reddit clone or a chat app. I'm unsure what you need it for, but hope that distinction is clear. 
This looks pretty awesome!!! Can't wait to try it.
You're only as good as your last project.
Judging from [the testimonials](https://vladmihalcea.com/books/high-performance-java-persistence/#testimonials), High-Performance Java Persistence might be a worthy addition to this list.
Don't delay documenting your code for too long. I mean, no API doc even on the [main type](https://github.com/AsynkronIT/protoactor-kotlin/blob/master/proto-actor/src/main/kotlin/actor/proto/Actor.kt), or its [only argument](https://github.com/AsynkronIT/protoactor-kotlin/blob/master/proto-actor/src/main/kotlin/actor/proto/Context.kt)...
What about the docker images that TC requires and being not directly connected?
For what I see in the documentation, its referring to the class example given. It does not really make sense to block null, as the [specification allows it](http://www.json.org/) and the same class has [a function to add a null element to the json object](http://docs.oracle.com/javaee/7/api/javax/json/JsonObjectBuilder.html#addNull-java.lang.String). Still, the other methods do throw a NullPointerException when either the name or the value are null. Unless someone else comes with a better explanation, all I can think is that the design mentality behind this is similar to the "this page intentionally left blank" notices, make sure you put a null intentionally.
Sorry, do you mean you want to use your custom Docker registry instead of Docker Hub?
It sure is, but still there's no need to include trademark warnings when a regular user submits a story here. OTOH: check out its posting history, that is _not_ "just a guy like you and me", its an account made for advertising.
Lots of questions. Given that the JVM has no support for continuations, how are the actors implemented? Just like in Quasar, a small part of the stack is copied away? What happens when actors hit a blocking JVM call? For example, how would a high performance actor bridge between Netty and JDBC would fare? Do the fat thread underlying the light ones get preemted?
4.1 RC1 has solid support for Java 9 modules. I was able to build an example which compiles, runs tests. Edit: I thought I was running the app but now I think it was merely on the classpath. I'm working through an issue with that.
That implies I *have* a custom docker registry...I guess that's something else I need.
I use IntellijIDEA Ultimate Edition that already have an android plugin OOTB. And I can't use Eclipse, because it really stupid for development context :)
Ultimate Edition includes all EE stack support. Spring, J2EE, Seam and other. And understanding their context.
You can use your custom registry with TestContainers. It's not yet documented but was contributed by a company who needed the same you need and it is supported :) See the list of images we use: https://github.com/testcontainers/testcontainers-java/blob/master/core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java You can put them into your registry and override them with `testcontainers.properties` file on classpath
So, what are actors and when would this be useful?
Good questions. I'd like them answered as well. 
It's an alright reference book, but reading it front-to-back is definitely not enjoyable. 
**Sidebar** + **Do not post tutorials here!**
Thanks for the answer, that was also my assumption.
Again, you could use... ;)
Hey, where do I learn more about this? I didn't understand half of what you just said...
but hey, XML is not code so it doesn't count. After all, if it were code it would be easier to debug.
It seems (but I could be wrong) that this doesn't allow for *dynamically* adding plugins to an application. I need to be able to load code at runtime which may not have even existed when the app was started.
I'm not sure that would be feasible given that we are working with transaction times on the order of a few ms. It also wouldn't work with the current infrastructure of the organization, unfortunately.
Load order shouldn't matter, I don't think. It's just a handful of classes that we are loading which are largely isolated from everything else. The idea would be that 99% of the application code would **not** run in OSGi, it would only be used to load these dynamically loaded classes.
Are you looking for more answers to that SO question or something?
/r/javahelp 
So I did a bit of digging, and [they us](https://github.com/AsynkronIT/protoactor-kotlin/blob/master/build.gradle#L35)e K[otlin Coroutines](https://kotlinlang.org/docs/reference/coroutines.html). [This video cleared up a lot of things](https://www.youtube.com/watch?v=4W3ruTWUhpw). [Kotlin coroutines are stackless](https://youtu.be/4W3ruTWUhpw?t=6m56s). If I understand correctly stackful vs stackless is the ability to suspend calls that are down the stack or not; with various tradeoffs. Still trying to understand the thing, so the following is very approximate: What happens here is some form of hiding a callback through compiler magic. Basically your current function+closure gets serialized as a callback; to be called when the function you're calling returns (or emits a yield if it is a generator). So, the fat-thread making a blocking call will still be on your execution trace; and you should incur either the wait or its preemtion cost. ---- I'd file it under "actors because callback hell is a problem and we need nicer APIs, especially for UIs", rather than "actors because we need Erlang-style high-concurrency throughput". But do not put any money on what I said.
Thanks, I hadn't realised that... Although I also hadn't realised how apparently out-dated my suggestion was so I may not submit it. I'll be sure to check out the other submissions to get up to speed with modern Java!
NP! I've seen a few similar comments; I definitely need to improve the UI to make that more obvious
I have been looking at [Quasar](http://docs.paralleluniverse.co/quasar/), another actor system. The documentation explains a lot. The company has a nice [blog](http://blog.paralleluniverse.co/) too. The problem it tries to solve is: To process with high throughput, you need to fill your memory and caches in a high density manner with your data. You want data locality. For processing 1 million of elements coming from file, this is easy. You just read it all in memory and process it. There is nothing else than your file in memory. But what happens if these elements are not available to you at the same time? Say they come to you through http calls. This automatically makes you lose the time locality you had with the file. Usually these http calls are handled with forking a Thread that will do the processing for this element. And http calls will land on different Threads, and will incur the cost of handling Threads: creation, and preemtion (ie if your Thread is waiting for an input, the OS will pause it and save it to memory). Threads have a stack associated to them, they takes space: from a ~50kB to ~5MB. Now, your memory consists mostly of the overhead of your Threads and very little of your data. What Go, Erlang and Quasar want to do is to reduce all this useless overhead; and allow tiny computations to require tiny context. ---- Erlang does this for Whatsapp. They are able to maintain 2.8 M connections with it, at a rate of &gt;200k messages/s on a single server. http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html
the spam is strong with this one
The core framework is built using Kotlin Coroutines, which are very similar to Go-routines in terms of scheduling. This compiles down to continuations. In Kotlin, a running actor would yield the underlying thread to other actors or coroutines when it calls into a Kotlin suspended function. That is, it is cooperative multitasking, but with little effort from the developer. As Java lacks this feature, we instead let the actor infrastructure call into the Java actors and expect a CompletableFuture in return. The infrastructure will then await the future to complete before continuing with the next message. This is very lightweight as you can return an already completed future if you only have synchronous code. If you have any form of IO, it would be best to return a future wrapping that. This way, the actor infrastructure will not be blocked while the future resolves. 
I'm just one of the apache guys. Just never used reddit before :)
Since this is a question about *Java programming* it should, as the *plenty hints* on the page indicate (including the big, red "SEEK PROGRAMMING HELP" button), be posted in **/r/javahelp**. **Post removed**: programming help
OK. I've been at a lot of places. I've worked in Java on/off (mostly on) since it became available in 1995 (though the first year it was just learning and advocating for it) and I've never needed to create a custom class loader for anything. You may be in an architecture situation where it might make sense.
Sure - most articles have a link to the GitHub project at the end of the article. I'm glad you're enjoying the site. Cheers, Eugen. 
I did Google it and if you read my post, I was trying to get opinions on whether it was good. 
The reasons this was a question because I wanted the info you just gave. If you even read the question you would know I'm aware of studio but I just wanted to know how good it was and what you guys recommend
I think it's best you read about it here: https://en.m.wikipedia.org/wiki/Actor_model Let's say you want to have thousands of open connections or even millions or you need send massive amounts of messages like in an online messaging platform, a game server would also work well in that scenario. Also would like to add that java sucks at doing this because the jvm was not meant for this, although Azul made a better jvm for similar demands. But if you want the best environment for the actor model you should use Elixir/Erlang.
**Actor model** The actor model in computer science is a mathematical model of concurrent computation that treats "actors" as the universal primitives of concurrent computation. In response to a message that it receives, an actor can: make local decisions, create more actors, send more messages, and determine how to respond to the next message received. Actors may modify private state, but can only affect each other through messages (avoiding the need for any locks). The actor model originated in 1973. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
The pitch forks are sharpened daily here. Enjoy your stay!
coderanch still exists?!?
Nope, did not happen to me. ... I also pressed `No` because it was a distraction for whatever i was doing. 
Yes, but why that crap kotlin?
&gt; The equivalent SQL would only be &gt; UPDATE SHIP_STATUS SET ITEMCOUNT=ITEMCOUNT+1; This is partially true. However, say you have some business logic component which calls into some other shared function which executes that update statement. The business logic doesn't know that update takes place - it just knows it needs to execute that function, one side effect being that update takes place. Further, let's assume there is some dynamic looping mechanism around that business logic. Say we're going to end up looping 50 times in our scenario. You're now running this SQL in your transaction: // 50 updates are fired... UPDATE SHIP_STATUS SET ITEMCOUNT=ITEMCOUNT+1; UPDATE SHIP_STATUS SET ITEMCOUNT=ITEMCOUNT+1; UPDATE SHIP_STATUS SET ITEMCOUNT=ITEMCOUNT+1; UPDATE SHIP_STATUS SET ITEMCOUNT=ITEMCOUNT+1; UPDATE SHIP_STATUS SET ITEMCOUNT=ITEMCOUNT+1; UPDATE SHIP_STATUS SET ITEMCOUNT=ITEMCOUNT+1; ...etc... In Hibernate land, you're only going to run this SQL: SELECT &lt;cols&gt; FROM SHIP_STATUS where PK = ? UPDATE SHIP_STATUS SET ITEMCOUNT = ? where PK = ? Now which one is less painful on the database? And this is where Hibernate *can actually help performance*. By utilizing the first level caching and flush points within your transaction, you can seamlessly eliminate a lot of these sorts of repeated selects, inserts and/or updates.
I work in an environment where we have an abundance of db2 and mssql servers. We use JDBC directly and just stick to the SQL standards for applications that need to be run against either database type.
Relax. It was just a comment.
Quasar is LGPL.
Hey John! I asked Les and he hasn't yet had a chance to contribute, though he hopes to in the future. Our whole team has been super busy working to build some awesome dev tools at Stormpath, and now Okta.
This is interesting, although a bit worrying for our use cases. We've done some performance testing with large heaps with G1 and performance has generally been really good. No full GCs are getting triggered at all but I've always assumed that if they did they would take a similar times to the other collectors. This suggests that they could currently be a lot slower than other GC algorithms for large heaps on machines with lots of cores. That could trigger a huge slowdown for us, with lots of requests queuing up to bed completed when the full GC completes. Something to keep an eye out for. 
[codingbat.com](http://codingbat.com/java) is good if you want to practice Java. If you want to write your own programs I recommend starting just with a simple text editor and the command line before moving on to TextPad or something and eventually IntelliJ when you have a grasp of the language.
If you are in a territory where you would even remotely have an idea what this article talks about AND have not tuned your JVM... well, then it is your problem. JDK9 is expected to launch with nice Azul like GC as well. Shipolevs work, Shodian... whatever.
Take a look at the MOOC [Object Oriented Programming with Java](http://mooc.fi/english.html) from the University of Helsinki. It will give you plenty graded practice exercises, and also tell you how you set up your development environment.
Yeah, that’s the problem. We have done tuning. Lots. We haven’t managed to trigger a full GC with G1 on the workloads I’m thinking of - it may be that it’ll never need one as it’s designed to avoid them as far as possible. My worry is that if one does occur and takes so long then it may be a trigger for a serious request backlog. 
I have a multi-project with 30+ modules, which can be grouped in 5 different artifacts for release depending on the gradle configuration. I am going to have so much fun converting that to Java9 modules...
If you want to write any code, download and install Eclipse IDE and the Java Jdk. Both are free to download and use.
It's not very clear to me what you try to achieve. If `dynamically` means to have the possibility to load a plugin after the application is started, then yes you can load a plugin anytime using [PluginManager.loadPlugin(Path pluginPath)](https://github.com/decebals/pf4j/blob/master/pf4j/src/main/java/ro/fortsoft/pf4j/PluginManager.java#L74) method. Other interesting methods available in `PluginManger` could be: * disablePlugin * enablePlugin * unloadPlugin * startPlugin * stopPlugin * deletePlugin You have the possibility to use [PF4J-Update](https://github.com/decebals/pf4j-update) to add an update mechanism to your application. They are some aspects/features that are not available in documentation (the documentation is not the best). Post a message on forum and we will answer you.
definitely recommend just a normal text editor and a CLI, doing multiple guess from a code completion drop down won't help the learning process. Decide what technologies interest you most, OpenGL? LibGDX? JDBC? JavaFX? from there pick a few simple project ideas, (start small) and just code... 
Awesome thanks!
Thanks for asking! For the current version he has to hurry up as it's only a few days, but if that's not possible than next version perhaps ;)
Get some fresh air, you need it
Subscription model used to mean it stopped functioning when the year was up. I think they backed off that and changed it.
Karl?! Its Marc
Nope. I was there before both you and Karl. It's Jon :)
Just download the JDK from Oracle. You can even use Notepad to write .java files (though I recommend something that supports syntax highlighting, like TextPad or Notepad++). Personally, I don't like to send absolute beginners to big IDEs like NetBeans, Eclipse, or IntelliJ (as much as I love IntelliJ), because they're their own little worlds, and it's too easy to get caught up in programming around the IDE- and forget that ideally, your code will eventually run without it, and while Java code is *supposed* to run on any machine, not all systems can support all Java functions (even basic ones like Console.*, which has built-in easy-mode methods to handle password entry- because Windows technically doesn't have a "console").
I recommend you to read Sun's tutorials for code examples and practice in all areas of Java programming, especially the areas you wish to improve in. It Depends on how much of beginner examples you were looking for, check out CodingBat for some good beginner exercises. Project Euler is another good site, but depending on your skill level now, this may be too much, but it's worth trying anyway. Most importantly, It's also worth noting that personal projects are a great way to start to learn a new language. I would also recommend starting a project that is beneficial to you and get cracking right away, no time is better than the present! 
Can only second that. And depending on what they use they may not even be able to upgrade. We had a long row with a client company to get them to upgrade their Citrix(!) environment because the one they used still had Java 6 which did not work with legally required update to an electronic signature app we include in our software. 
WTH ?
It's a (hopefully soon to be killed) spam account. https://www.reddit.com/r/java/comments/6pub5h/multiple_statements_in_an_if_or_ifelse_structure/dks989w/
Welp, he happily [continued posting](https://www.reddit.com/r/java/comments/6q9jgh/making_accurate_and_efficient_decisions_using/). You should add automoderator and a minimum karma rule to catch accounts like these. 
Oops missed that one. But there was another one and they're already banned.
lgpl or epl (eclipse) https://github.com/puniverse/quasar/blob/master/LICENSE
This isn't just an article stating yesterday's news, but has quite a nice interview with JB's representative Tricia Gee as well.
http://Leetcode.com
Dynamic framework for developing, deploying and managing distributed systems composed of Java services http://www.rio-project.org/ 
You're comparing oranges with apples.
Is my understanding that there will be no support for `java.sql.JDBCType#TIMESTAMP_WITH_TIMEZONE` correct? The [initial proposal](https://github.com/javaee/jpa-spec/issues/63) planned to support it with a `@javax.persistence.TemporalIncludeTimeZone` annotation but [the current version of the specification](https://github.com/javaee/jpa-spec/blob/b4008703baa542183fab676b09bb5581b0051f0f/jsr338-MR/JavaPersistence.pdf) does not mention it. Has there been a public discussion on this somewhere (as required by the [JCP](https://www.jcp.org/en/procedures/jcp2#3.2.1.3) ) ?
Android Studio is the best
&gt;Best place to practice java programming. Behind your computer, probably...
https://www.owasp.org/index.php/RIA_Security_Smackdown
Just so you know, Reddit has abandoned these rules for a few weeks now, The [new page](https://www.reddithelp.com/en/categories/rules-reporting/account-and-community-restrictions/what-constitutes-spam-am-i-spammer) unfortunately omits the 1-in-10 rule. Basically it's up to individual subreddits to define and enforce self-promotion rules. Also, /r/spam has been closed (see "discussion" [here](https://www.reddit.com/r/modnews/comments/6bj5de/state_of_spam/)), which is only logical since there's basically no site-wide rules against spam anymore.
Yeah. I also suggest that it'll be better to start with a simple text editor rather than a fully functional IDE
&gt; Decide what technologies interest you most, OpenGL? LibGDX? JDBC? JavaFX? from there pick a few simple project ideas, (start small) and just code... As someone who took the AP Computer Science test, don't do this. You will not be tested over JavaFX or any external libraries. You will however have to know certain parts of the [Java Standard Library](https://docs.oracle.com/javase/7/docs/api/). Mostly * Java.util * Java.math * Java.io * Java.lang The test is rather simple, you'll have to write solutions to problems a lot like the (easy) problems in /r/dailyprogrammer. As for your original question, use whatever suits you. An IDE ([IntelliJ](https://www.jetbrains.com/idea/download/), [Eclipse](http://www.eclipse.org/downloads/eclipse-packages/), [Netbeans](https://netbeans.org/downloads/index.html)) or just use the Command Line by installing the Java [JDK](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) directly.
JDK 9 is NOT launching with Shenandoah. The main change is making G1 the default collector for server-class machines.
Yeah that's basically the same license. Both weak copyleft.
Java 1.8 Date and Time are a good addition, but, for the types with timezone, [we must wait for JDBC Drivers to support `java.sql.JDBCType#TIMESTAMP_WITH_TIMEZONE`](https://vladmihalcea.com/2017/06/26/whats-new-in-jpa-2-2-java-8-date-and-time-types/). As for Java 1.8 Stream methods, [you are better off using SQL-level pagination](https://vladmihalcea.com/2017/07/04/whats-new-in-jpa-2-2-stream-the-result-of-a-query-execution/). Only if the provider will be able to delay the database cursor execution until it encounters a terminal operator so that filter/limit are translated to SQL clauses, this feature will be worth considering. Meanwhile, SQL to the rescue!
Yes, it still functions, but you have to revert versions back to when the subscription started, not ended. Example: If you bought a sub right now, you would get version 2017.2, next July 2018, they might be on version 2018.2. But if you let your subscription expire, you have to go back to 2017.2, you don't get to keep 2018.2. That's what I was talking about. Still, not a reason not to buy the subscription, just annoying if you have to let the subscription expire for whatever reason.
Yes, it still functions, but you have to revert versions back to when the subscription started, not ended. Example: If you bought a sub right now, you would get version 2017.2, next July 2018, they might be on version 2018.2. But if you let your subscription expire, you have to go back to 2017.2, you don't get to keep 2018.2. That's what I was talking about. Still, not a reason not to buy the subscription, just annoying if you have to let the subscription expire for whatever reason.
Yes, it still functions, but you have to revert versions back to when the subscription started, not ended. Example: If you bought a sub right now, you would get version 2017.2, next July 2018, they might be on version 2018.2. But if you let your subscription expire, you have to go back to 2017.2, you don't get to keep 2018.2. That's what I was talking about. Still, not a reason not to buy the subscription, just annoying if you have to let the subscription expire for whatever reason.
I'm always getting confused by date/time/timezones, so I may be wrong here: The first article in your comment suggests using LocalDateTime for storing date and time information, but wouldn't it be better to use Instant? I believe the philosophy is to store everything in the DB in UTC/GMT, and then convert it to the appropriate time zone in the application layer based on the user/consumer preference. So with that in mind, Instant should be the class used for most of temporal information.
JPA 2.2 release note [says nothing about `Instant`](https://jcp.org/aboutJava/communityprocess/maintenance/jsr338/ChangeLog-JPA-2.2-MR.txt) but Hibernate supports it anyway. I agree that UTC should always be preferred. In fact, I added the [`hibernate.jdbc.time_zone` configuration property](https://vladmihalcea.com/2017/03/14/how-to-store-date-time-and-timestamps-in-utc-time-zone-with-jdbc-and-hibernate/) to make it easier to force a specific timezone.
Summer's almost over though?
That's a pretty low standard.
When coming to learning and practising competitive and dynamic programming geeksforgeeks, codechef, hackerrank are the best. If it is web development, w3schools is the best. If it is learning basics of any language, download a pdf from tutorialspoint website. It teaches from scratch. If you have any doubts, get clarified them on stackoverflow. If you want to prepare coding for an interview practise in interviewbit.
Stupid question ... I'm using Spring. Basically because I'm working on / inherited projects that are 3 years old. (Spring MVC, IoC, Hibernate, all in a Maven project with STS/Eclipse.) If I start a new project from scratch and/or migrate my current Spring projects, what does using Spring Boot get me? Would love an ELI5 on this. Thanks! 
Spring boot to me is a quick way to start web apps and not worry too much about configuration. You can add "starter" dependencies that pull in the minimum to add security / jdbc / hibernate etc and wraps it up with a server to go. There's definitely a lot of magic behind the scene so i personally wouldn't migrate an enterprise Spring project to boot if it already works, but I also don't start any new personal projects in anything else than Spring boot. It's a huge timesaver.
Most databases store times as UTC when doing a TIMESTAMP WITH TIME ZONE, the advantage is the database can adjust the offset for you based on your client time zone automatically instead of you having to do it in your application.
I agree with everything you said. We only store UTC. We use Instant for all object model timestamps. This announcement is slightly disappointing. We will continue to use our custom AttributeConverter until JPA adds native support for Instant.
we've had "ultra-fast cross platform actors" on the jvm since 2006. nothing is coming - this is just hype with no technical details and no benchmarks kilim ([my fork - nominally 2.0](https://github.com/nqzero/kilim)) and [quasar](http://docs.paralleluniverse.co/quasar/) have been doing this for years, and afaict in a more scaleable fashion (though without technical details or benchmarks, that's impossible to know) an article explaining how it fits in to the ecosystem and when you're prefer this system over kilim or quasar would be useful. linking the github (with a very weak readme to boot) isn't - this is spam 
if you need a more flexible license, kilim ([my fork - nominally 2.0](https://github.com/nqzero/kilim)) is MIT licensed. different set of performance and feature tradeoffs, but the underlying approach is similar i've spoken with pron about the quasar license and i'm more or less convinced that it's ok, though i'm still somewhat wary of linking with LGPL code that deeply. pron said that he was open to a more liberal license if he felt it was necessary, so if you or your company is concerned with the license too, then drop them an issue or note on the forum 
I'm building a bad case of hemorrhoids. 200+ employees (20 IT). PrimeFaeces, Spring/Spring Boot, Hibernate/JPA mainly. 1000's of users, mainly secondary school teachers.
Dude, you do realise that this is about the same as asking the world - "I'm writing paper on people drinking water. Can you tell me how important it is for you, etc, etc, etc" Java is (together with dotNet) driving 99% of the world you see. Forget node.js, forget hipster ideas about scala or kotlin or go or whatever else is the popular tech to play with today. They are workhorses that your bank uses to move your money, your company uses to make sure you get paid on time (and fired quickly when needed), your transport company uses to schedule the buses and trains, every single airline uses to sell your tickets Heck, your mobile phone has a sim card which actually runs a small computer running in Java (yes, not joking, it's true) And if you are using Android mobile phone then - that's Java too...
&gt;kilim (my fork - nominally 2.0) and quasar have been doing this for years AFAIK they are JVM only?
&gt; What kinds of applications are you building for your employers/clients? We're working on a collaborative tool to provide imaging tools to assist with the sewing of pliable materials into two-or-three-dimensional artifacts in subaquatic environments. &gt; How big of a company is the employer/client? Our company employs over 150,000 people. &gt; What kinds of Java libraries/technologies are you using? We aren't allowed to use libraries or upgrade our computers, so we exclusively use Java 5 and a mountain of hand-rolled code. &gt; Who are the end users of these apps and how many of them are there? We haven't found any clients yet, but we're sure they're out there. &gt; How many programmers are there on your team and how many applications are they responsible for? It's me and a team of eighteen other developers - what Jeff Bezos would call a two pizza team, because when we order two pizzas, everybody gets a bite!
Spring boot by itself won't give you much since your app is already wired up with config. What makes sense for you is if your team had maybe 5 apps that use similar tech stack and libraries in your old projects and you utilize the default spring boot auto configure and write your own to transition your old apps to boot framework. This will abstract away all the conventional configuration defined by the 5 apps into a single module. It'd be easier to manage tech debt later by just upgrading one auto configure module. 
I work for a multinational company. We have thousands of customers and hundreds of software engineers. We use java for data processing and enterprise customer facing apps that report analytics and stats about about the customer business. We use a wide variety of libraries and java technologies including Java v 6 - 8, Spring, Maven CI tools like Jenkins and teamcity as well as alot of apache libs and other open source packages . On my team there are 4 java devs and 2 are certified.
&gt; I've been using Java on a mac recently and it still looks off and lags horribly. Maybe you’re just writing inefficient code. Swing works perfectly for me. Even companies like JetBrains continue to use it. And you do have the ability to change the look and feel of your GUI applications.
&gt; sewing of pliable materials into two-or-three-dimensional artifacts in subaquatic environments. Wait, underwater basket weaving?
Having developed and used Swing, are you sure that the application you are running isn't just poorly written? You should never run much logic on the UI thread, definitely not anything that will block. If you need to run anything that will take some time, you should always spawn off a new thread in the form of a Completable Future, SwingWorker, etc. I have used Swing applications that perform very well, and Swing applications that perform terribly (in fact, I work on one that used to perform terribly). Typically, a poorly performing Swing application indicates one which runs operations on the UI thread (which is a big no-no).
Mostly heavily dated enterprise APIs and not much else
I work for one of the largest IIOT and industrial equipment mfgs in the world. Currently we are using Java (running on embedded systems) to link everyday things such as your hairdryer to the cloud. Company size : X &gt; 500 What kind of libraries? This is just such a broad question it doesn't make sense to list them. 
Java isn't being updated frequently anymore because it's pretty dated
This is false. Have you even heard about Project Jigsaw, Valhalla, or Amber?
&gt;We aren't allowed to use libraries or upgrade our computers, so we exclusively use Java 5 and a mountain of hand-rolled code. Ouch. Is there any particular reason that's the case? 
I just finished building a JavaFX application to manage my finances. It's only intended for my own use, but it has some features Excel doesn't have or that I couldn't be fucked to do.
Money.
Swing isn't slow, but badly written applications can make Swing slow by doing too much work on the event dispatcher thread. Getting good performance requires doing multithreading well, which is hard and frankly a lot of people don't do it well. However, Swing is a cross platform UI library, which is a really hard thing to get right. There are essentially two ways to do this. Use native widgets, which you can get with the SWT library. But, then you have to deal with the quirks and bugs of *every* platform. SWT has smoothed over a lot of these issues, but only so much as to get the Eclipse IDE to work right on supported platforms. If your UI doesn't work the way Eclipse does, good luck with dealing with native platform quirks and bugs yourself. The other approach is to render your own UI widgets, and try to get it to look as close as possible to native like Swing tries to do, or go totally custom like JavaFX. The benefit to this approach is that you get consistent behavior across all platforms without too much work, but the drawback is that your application looks "off" on every platform. Java looks to get consistent behavior if not the prettiest apprearance on all platforms on which you can run a JVM, in pursuit of the write once, run everywhere ideal. TL;DR - cross platform UIs are hard
shhhhhhhh
I like JPA and the features it has, but i still get angry that i cant use the entitymanager and call remove directly on an entity before i call find. Seems counter intuitive when you consider a single delete statement.
I think he meant that it was funny because we could all relate to that ;)
My Swing app probably looks and works horrible on macOS, because I don't have/use mac to test/fix it properly :(
That troll is always spouting nonesense. No idea why he lurks in /r/java.
I'm writing a game. https://remnantsoftheprecursors.com The "company" is me (dev), an illustrator, a graphic designer, a writer, and currently 6 translators. There is also a musician who has provided contract work. I am writing as much as possible in native Java. JavaFX libraries are used for mp3 support and I've used the Apache FastMath class for a more efficient arcSin() method. Everything else is hand-rolled. End users are strategy gamers and I expect there will be millions of them at some point. Reaching as many as possible is the goal. The game is designed to be affordable (it's free), portable (any Java PC), have low performance requirements (will run on a Pi Zero), and accessible (target is 20 foreign language translations on release). 1 programmer. 1 app.
Isn't android going away from java tho?
Ok, I'll bite, what features does excel not have?
You can do that with Hibernate as you can pass a transient entity to remove and it will work as long as you use the [native Bootstrapping mechanism](/2014/06/06/the-minimal-configuration-for-testing-hibernate/). With JPA, if you want to avoid the extra select statement, you need to use `getReference`: entityManager.remove(entityManager.getReference(Post.class, postId));
Oohh shoot that's nice, I'm dumb for not being able to find it. 
If you liked this tip, you are going to love my [Hibernate tutorial section](https://vladmihalcea.com/tutorials/hibernate/) which covers more than 135 articles about RDBMS, JPA and Hibernate.
I think as long as you're using an up to date runtime, then it's fine. 
Why does the source code need to be smaller? 
I cant say im a fan of hibernate though being how heavy weight it is imo. But i will definitely check it out. Cheers!
IDEs can hide import lists handily, but during code review or viewing code in any other way, it can become quite annoying. Also I was wondering what a simplified version of Java would look like if we stripped away everything but actual meaningful code so that it still unambiguously compiles.
You are going to change your mind about it while enjoying running your application at warp speed ;)
No, not really. Some people play with some hipster languages that compile to JVM bytecode anyway...
&gt; 2 are certified (I hope) insanse. Anyone who "certifies" themselves into particular development skillset is not to be trusted ... tells a lot about their confidence.
Technology is like a treadmill, if you walk too slowly, you fall off the back; if you run too fast, no one can keep up and you fall of the front. The trick is to stay in the middle, seeing what's coming and switching at the right time. You want to pick proven technologies that have moved past their initial bugs and shortcomings, but not something so old that only banks are still using it.
I can't change the orm In current project but will defs consider it for next one just looking through your posts
 &gt;It's me and a team of eighteen other developers - what Jeff Bezos would call a two pizza team, because when we order two pizzas, everybody gets a bite! If you try hard enough, any pizza can be a personal pizza.
Scala and kotlin are still JVM language and as such they compile to java-like bytecode - remember that the JVM's sole purpose was initially Java only And by the way, Android core is C++, there's also a Android NDK (**N**ative **D**eveloper **K**it) that is written in C++. Other than that and JVM langs, there's always JavaScript in PhoneGap but neither of these is even close to taking up the whole Android Dev scene 
Dude 99%? You are being too optimistic.
Technically, yes. I don't feel that the gain would be worth the cost, however.
 &gt;Also I was wondering what a simplified version of Java would look like if we stripped away everything but actual meaningful code so that it still unambiguously compiles. It might look a lot like groovy :) 
Probably compatibility and scalability
Could be! Basically, given a .sjava file (for "simple Java"), how much could you strip away so that it can still be directly converted to a .java file? For instance, you could leave out the word "void" in `public static void main` and make your parser understand that if there's no actual word after 'static', it should fill in 'void'.
 &gt;Say I have `List` in my code and with Java 9, only the module holding `java.util` is required by application. In that case, it could automatically fill in the required import during compilation. If you now add another module, your code could stop compiling. It can become more confusing than it needs to be. Of the two problems, too much code is the more tolerable one. 
Theoretically, it would be possible with some JVM extensions, as currently the JVM needs the fully-qualified-class-name to access the class. Maybe through the use of custom compiler that adds code for the runtime-lookup it could work too. But: - Runtime would be slower, as the JVM would need to lookup the actual class - You nail yourself to a specific library-version and jdk-runtime. Assuming that most modules will require more than one package, as soon as a single classname gets duplicated in any of the used packages, the automatic usage will be ambiguous. This is imho the showstopper for this concept. That's also why virtually every other language requires explicit imports. - More of a preference: Java developers usually prefer explicit to implicit. Example: I dislike non-typed languages for that reason - all the automatisms make it harder for the IDE to help me, slow me down when developing and make the tests requirements harder. Many times, I've seen horrible bugs in python or javascript code, that'd have never happened in a typed language. 
Ok, ok, about 10% is cobol and similar 20 years old+ mainframes.
I'd say java 8 is mature enough at this point that it isn't going away. Even if backward compatability becomes an issue for some reason on a new project, advanced code inspection tools can automatically convert stuff like anonymous functions, and a library like guava can make some features backwards compatible. While it does require more effort, what is the chance you actually have to downgrade? If there is any chance at all, the requirements should say that in the first place. I don't see how moving to another language is a problem either. A complete rewrite is needed anyway, and there's always going to be incompatible features between languages. I'm not saying you're wrong for not using java 8, I just feel like it's not that big of an issue. 
There are very good reasons why [70% of all projects chose Hibernate](https://vladmihalcea.com/2016/08/18/jpa-providers-market-share-in-2016/) over other JPA providers or data access frameworks.
We don't know yet. I hope that Android, Spring and Java EE will go away from Java and use Kotlin, or even better, Scala. But we will have to wait one year or two to see what will happend.
Fuck it, I'm sold. Document is already better than eclipselink 
As with all things, I might have gotten in if you had proposed it and kept pushing for it.
Interesting thoughts, thank you for sharing.
I never understood this argument. We do code review in the IDE. Works great. Are review tools like Gerrit really as horrible to work with as they're being portrayed here on Reddit? Even Gitlab has a basic diff view that can hide unchanged portions of code and does syntax highlighting. No replacement for an IDE's capabilities, for sure, but usable for smaller reviews. I'm curious why people dislike these tools, not having used them much myself.
living in denial, aren't you
in some countries, certification is the go-to to get faster into a specific position. It is a bachelor/master of arts in some ways.
so you are the one responsible for me selling accidentally my stocks with my hairdryer! 
Everything. 
It's not. 
You're making a mistake by conflating Java 8 with "bleeding edge", those are two totally different things.
Are you trying to say it ain't so? I've yet to see a core system (as opposed to some hipster agency UI's) done in anything but.
Which sums up everything I find wrong with majority of certs (speciality, niche, CCNA, etc ones are ok).
Yes.... that was the joke.... Why do people do this on Reddit? Take a joke and crucify it to make sure everyone can see and so all the humor is drained out.
Aren't a fair number of things still written in C/C++?
Great book i learned a lot from it. 
Well, Unix is written in C so it shares the market with Java as in Java runs on OS written in C. 
 Can somebody explain what the "Function&lt;? super T, ?&gt;" means?
A functional interface for a function that accepts the parameterised type T (or a super-class of T) as an input, and has any Object type as output.
Thank you!
[This](https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html) is the official documentation for the Function interface. It states that the Function expects an input of a superclass of T or T (in this case T is defined by the input of the buildHashCode or the isEqual method) and has an unknown output '?'. Thereby it is possible to insert any method from your object and get an unknown (object) result. Edit: superclass, not subclass
I should have updated before writing 😁
So its probably gonna be 2D graphics? Are going for "realistic" looks like the old fallouts or abstract polygon like? 
Algo trading platform (300 million usd a day flows through it). Trading algorithms (google vwap). Message queues. Database access. Even the web gui (hello sencha) - all in java. Bank &gt;1000 employees. 6 Developers. Stock traders, quants are users. Libraries as few as possible.
thats stupid tho
I agree with your answer, I'm currently on a Citymapper type app, backend is written in Java - I know friends who work in banks, Google, other companies that all use Java - this question is like what do you use pens for? 
Keep the OS and runtime updated, regardless of language/framework/libraries. This is for performance and security. If (when) your language/framework/library don't run anymore in the latest environment, upgrade it. As for the rest, consider the cost of being able to change to a different/new technology as well as how to reduce that cost. Normally, your language is hardest to change, followed by frameworks, followed by libraries. Meaning, it's most expensive to change to a different language, less expensive to switch to a different framework, and cheapest to replace a library. To reduce the cost of switching frameworks/libraries, keep your coupling low. For example when using Spring MVC keep your controllers as small as possible (no logic). Instead of passing `org.springframework` objects all over your code convert them to your own domain objects. This way, if you decide to convert to Vert.x or Akka or whatever, the only code that needs to change is the converters. BTW this also makes testing a lot easier; since your classes won't depend on Spring MVC your test code doesn't need to use e.g. `SpringJUnit4ClassRunner` for everything. Bleeding edge is normally for experimentation and learning, not for production. 
&gt; an input of a subclass of T or T `super` means superclass, not subclass
Thanks, fixed it
1. This is an **English** sub only 2. **Sidebar** -&gt; **Do not post tutorials here!**
Of course, it is. We rewrote it from scratch. Wait for the 5.2.11 release to get all JPA and Hibernate annotations documented as well as many more enhancements (e.g. Envers User Guide).
Which feature are talking about?
Mostly multi-currency support. I regularly use 3 or 4 currencies, and handling all of them in excel was just too much of a hassle. Also, I like to make a monthly budget for rent, food, fun, bills, etc. and then record all my transactions according to their category. Then I can look at stats according to each budgeted item or per account. I'm sure this is possible in excel, but it was just a lot easier to do it in Java.
`EntityManager#remove(Class&lt;?&gt; entityClass, Object primaryKey);`
Being certified alone does not equal a quality programer but it also does not mean you have low confidence. Its not black and white. I am not certified and I have no reason to be but I might learn more about the tool I use every day if a read up on it. People go down the certified path for lots of reasons other then low confidence. This seems to a touchy subject in these parts. I wonder why that is? 
http://projects.spring.io/spring-boot/
Yes it is going to be 2D graphics. Here's an example of some of the artwork: https://remnantsoftheprecursors.com/2017/05/30/mrrshan-spy-update/ Here's an unfinished example of the graphic design style for the UIs: https://remnantsoftheprecursors.com/2017/06/06/new-tech-ui-completed/newtechui/ 
haha fail
It has a workaround so it's a minor issue.
Prime feces??
[Java Versions](https://plumbr.eu/wp-content/uploads/2017/05/java-version-popularity-2013-2017.png) [\[Source\]](https://plumbr.eu/blog/java/java-version-and-vendor-data-analyzed-2017-edition) In my opinion backwards compatability of more than one version is holding back dearly needed language improvements in Java. No developer wants to work with a dusty codebase and when there is no incentive to migrate, the codebase will soon be coated with dust. I'm ok with breaking backwards compatibility as long as it is not as dividing as Python 2 / Python 3.
Are you using the Native Look-and-Feel?
I'd say Java 8 is in the middle right now. Java 7 should just fall off the back, there's no need for 2 on the same treadmill. People will probably wait on Java 9. It's like Windows 8, with a main feature noone ever wanted or needed, forced upon the community.
I'm technically certified in a few technologies, including JPA2 and Spring 4. Not because I want to claim I'm certified in it - because I don't - but because my company got in training courses in them for us, and they came with a certification.
Fair enough, company dime to get you up to speed to particular tech is all right. I'm a certified scum master, j2ee certs, etc, as well. I just don't include in my CV. 
Insecurity about whether getting a degree or not getting a degree was a good decision. Lots of people who got one that question it, and lots of people who didn't that feel they maybe should have. It's a soft spot for a LOT of people in this industry.
I think that's a little bit different, as those are specific technologies. Two technologies that can mean tremendously better, easier-to-maintain codebases. Also knowing JPA means there is a whole array of technologies available to you that others would have trouble with. Hibernate has probably sped development up for me more than any tool in my toolbox.
Looks really neat! Hope i see your game around when its finished :) 
It is since recently no longer possible to download oracle jdk6 and jdk7 without some oracle support plan. Java 7 just fell of the treadmill. http://www.webupd8.org/2017/06/why-oracle-java-7-and-6-installers-no.html
Half the time my IDE imports java.awt.List
&gt; We aren't allowed to use libraries or upgrade our computers, so we exclusively use Java 5 and a mountain of hand-rolled code. Great way to hate your day job. Would never sign up for that.
https://www.primefaces.org/
I understand to say that new features can be programmed using new java 8 features bit I don't understand how this change is financed. Why would you change existing good code to new potential buggy code and also pay for it? 
Hopefully it will never go through so we won't have to worry about that.
Thanks...you spelled it wrong the first time. I was just trying to make a stupid joke. Wasn't funny apparently!
something like: def main(args:String[]) = { // code }
Not generally, consider: - Library `A` has no external dependencies and defines `a.util.Foo` which it uses internally. - `A` is thus written with the implicit assumption that `Foo` can be resolved to `a.util.Foo`. - Library `B` depends on `A` and also defines `b.util.Foo`. - Now when using `B`, `A` cannot unambiguously resolve `Foo`. Java 9 modules *might* make it work in some cases, but it's basically a non-issue when using a modern IDE anyway.
I didn't. Faeces is the correct original spelling. Your way is the bastardised Americanisation. https://en.oxforddictionaries.com/definition/faeces
its good
An IDE can only autoimport when the import is unambiguous. When an IDE can't autoimport, you get a dropdown to choose the one you want. And to Eclipse I say, `java.awt.List` is not my preferred choice.
Unless you're paying Oracle zillions of dollars to support Java 6 or 7, I find supporting them in internal projects to be very pointless. Supporting 6 or 7 in open source projects where relevant can make sense (e.g., Java 6 for Android-specific libraries until they're fully updated to 8).
I meant you spelled faces wrong...as in PrimeFaces. But maybe I missed that you were making a joke to start with? Oh well, cheerio, cupake!
Damn I was hoping you wouldn't notice
cupake?
Mmm scala
kilim (and i assume quasar too) only runs on the jvm, but they can communicate with actors on any platform and at the least there is an erlang implementation (and maybe go - i'm neither a user of nor interested in these platforms) 
Well, in other comment people defend Android as still Java platform just because it's on JVM, while switching to Kotlin.
or `java.sql.Date` instead of `java.util.Date`
That's why I don't write anything that isn't Java 2 compatible. /s
Blog entries promoting software libs/frameworks should show a code example. This one does not :-(
I've only know and started using eclipselink that past 6months and thought my issue was more a personal one. I'm really not that worried though.
Stahp! My team will see this and want to move from eclipselink too. XD
It auto imports `java.lang.*` ;)
mac has always been a challenge, walled garden and all that. even browser code can get quirky. https://alvinalexander.com/blog/post/jfc-swing/making-java-swing-app-look-like-mac-app 
My impression is that the relevance of the native look and feel is in decline. People have become used to web apps, which by definition don't look native and most don't care about the particular styling of a button as long as it's not ugly. Usability is what really matters. So perhaps stopping to obsess over native look and simply creating attractive UI toolkits is the way to go (see JavaFX).
You should try IntelliJ Idea Community Edition, which is free, too. Because it is a damn good IDE.
https://en.oxforddictionaries.com/definition/cupcake ;)
&gt;&gt; Heck, your mobile phone has a sim card which actually runs a small computer running in Java (yes, not joking, it's true) Interesting, I didn't know that. 
The problem are many libraries - especially around Android - keep it Java 6 compatible instead of using Java 8 features or provide FunctionalInterface etc.
Our Java software runs on x86 and ARM CPUs in embedded systems controlling novel measurement instruments. We use JavaFX for the GUI. This is mission-critical software. 
&gt; Whilst I am a fan of platforms evolving I'm also cautious about those who look down on those who code more simply. Coding for Java 5 when Java 9 is on the verge of release is not "coding simply", it's "coding extremely conservatively". This can be justified if you target lots of people who only use Java 5 for some reason, but if not... the obnoxious individual is justified in asking that you don't ignore **13 years of progress** when writing your code. Code using Java 8 features like lamdbas would often be much simpler than what you'd have to do in Java 5, by the way. &gt; I have had a tendency to code more defensively in ways that would be more easily ported from one language version to another, from one platform to another, even from one whole language to another. Writing Java 5 code won't make it easier to port the code to another platform compared to if you write Java 8 code. Unless that specific platform is called "Android", a.k.a. "crippled Java". But even Android supports a subset of Java 8 features these days.
Brian Goetz is pushing it, so you might want to reevaluate.
What? The vast majority of Android dev is done in Java.
The 90's called and they want your skillset back. One word: JavaFX
The best time to switch to a new Java version is at the start of your release cycle. HAVE a release cycle. 
Does Electron look native? Do web apps look native? The non-native argument against Java on the desktop is nothing short of ridiculous when compared to web apps.
Were you drunk posting?
many IDE's sort them alphabetically thus awt before util Eclipse and IntelliJ have options to fix it. 
Upvote because this is highly under-rated for new developers. Learning with the most primitive tools helps newbies really understand the fundamentals along with the basics like how the compiler works, using compiler flags, and just knowing how the classpath works. I can't count the number of times I've come across "experienced" developers who get stymied with something as simple as a screwed up classpath because they've never worked outside of an IDE.
Who cares about documentation if you can get that sweet consultancy monies?
Remember Gavin King's attempted war with Spring when the Spring team made a bunch of wrappers to make Hibernate easier to work with? Good times
It also suffers from the Leaky Abstraction problem. I once had a developer call some of the classes setters inside the constructor of what was supposed to be a POJO (yea, don't get me started...) So of course, every database query resulted in an update. Just because it abstracts away the database doesn't mean you can get by without understanding how things work.
https://www.youtube.com/watch?v=31D94QOo2gY
I was reading the pdf slide of it! Thanks.
I totally agree - this is also true for other technology stacks! (Desktop centric) GUI programs seem to be written by mediacor devs often, who lack the knowledge or facilities to implement potentially blocking tasks properly. Besides that Swing applications indeed felt often slowly at the early 2000s. I think that was primarily granted to the JVM that haven't JIT at that time paired with not so powerfull hardware. Native UIs definitely felt more fluid.
If you are really serious about it, you can probably set up some virtual machine in your computer that runs macOS and test there.
If it's not compute heavy and needing to go absurdly fast (trading algorithms), it's probably not in C++. There will ne some systems in C# but really that's just a poor judgement call and likely EOL in most places. Java is *the* best language to work in for its flexibility and backward compatibility. 
&gt; The code was adopted by another team run by a very obnoxious individual who insisted everything get coded to Java 8 with anonymous functions and other features not available in previous versions of Java. I'm sure you'd hate working with me then. 
You can remove classes like that from the import suggestions in IntelliJ. 
So how would a compiler handle ambiguous imports? 
&gt; I've written too many flawed ones myself. But is it a flawed benchmark if it's proving the point you're trying to make? ;)
And exactly how many of the projects you worked on decided to switch from for example Oracle to MS SQL half way through the project? Aside from that; even when using Hibernate you have to make sure it's still generating queries that are optimal for the system you're using. Each vendor has it's own quirks and you can't just assume that what's working on Oracle is going to work just fine on MySQL as well.
Hibernate is crap and no one should ever use it.
my first job included maintenance of a java 1.3 project, while java 7 was on horizon. Let me tell you how much I appreciate autoboxing :D
Others have already made good points regarding versions. I would just add you shouldn't think of your code as your baby. 
Define "proving" :)
Care to elaborate?
Any way to do that in NetBeans?
It's got terrible performance, it's way too easy to shoot yourself in the foot and it provides no appreciable advantage. Even the idea that it lets you easily switch database backends is silly. You can write your code with a layer of separation that makes such a change just as easy. And since changes like that hardly ever happens, paying such a huge penalty for the 'potential' gains in the future just aren't worth it. Hibernate is a crutch for developers who can't be bothered to just write some SQL, and it's way more likely to hurt your project than it will ever benefit your project.
No idea; haven't used it in ages. Switched from Eclipse to IntelliJ 4 years back and never want to go back to either. 
Don't forget jWt ([https://www.webtoolkit.eu/jwt](https://www.webtoolkit.eu/jwt)), it's great! Really lowers the bar if you don't have a lot of experience with the native browser technologies.
Quoting reply to similar question: &gt; Many of project i worked on had support for both MySQL and PostgreSQL as requirement. In some cases also Oracle and H2 in file for "demo mode". And i must tell you, having to test every query for 4 dbs and have switches which query to use in every second db operation is not fun. And maintainability was a nightmare. Hibernate with its slight performance tradeoff was a godsend Also forgot to mention MSSQL. Almost every project i worked on required some degree of user choice in terms of DB, rather than just stating that "it's compatible with the DB X and that's it".
&gt; Nowadays, having a monolithic Architectural Style simply means that all of the application code is deployed on the same node. We assume, it is using modules and components, although it is in fact often not the case. As the author points out, this is not what it used to mean. And it's pointless to hijack a useful term and use it as a synonym for a more clear way to describe an app on a single node: "not distributed". So I'm not sure I'd simply accept the subversion, I'd rather fight the dumbing-down of the term and educate. Because there's a huge difference between a single-process application which is modular and componentized and a true monolith, what the author calls the "default style". A true monolith is the default style, like the default style for earbud cable in your pocket is a big crazy knot, that's nearly impossible to disentangle. It's an utter abdication from taking responsibility about architecture (due to ignorance, arrogance, or lack of experience), and the resulting mess gets exponentially harder and slower to work with with every new patch. Calling this cute names like "Big Ball of Mud" and "Spaghetti Architecture" is amusing in informal contexts, but those two names don't focus on the problem, they just describe the result. The problem is if your application has no boundaries. If it's a single big tightly coupled piece - if it's monolithic. "Monolithic" isn't a type of architecture, it's the absence of one, and it's a nice name to keep to its original meaning, so we can be constantly reminded of what the problem is.
Sooooo you dont have the time to learn javascript but you have the time to learn angularjs...? 
&gt; Productivity is key when trying to introduce new services or products to the market in a short burst of time. Java developers would find that JSF has a shortest learning curve. JSF promotes MVC as a first-class citizen. Okay, it looks like the author is doing a sales pitch here. Yes, JSF does away with boilerplate code, but learning curve is still high when you try to do things not covered in the components, like adding classes to TR tags due to user demands; validation and AJAX don't get along well in JSF, not to mention that design becomes hell when dealing with facelets. Not only that, but faces' MVC is component-based, not action-based. Migration between JSF and other frameworks is a pain in the arse, meaning that if you choose JSF, you'll be stuck with it for a long time. In my experience, JSF is great as a short term solution, but its learning curve becomes greater when new devs take over a large and complex project. It's even worse if the new devs don't know best practices, and JSF code becomes a maintenance nightmare. What would take a couple of hours to fix in other frameworks has taken us days, even weeks with JSF. Yes, I know, "then you're using JSF wrong", but don't expect rookie programmers to "get it" when you're offering them a quick and dirty way to make webpages aimed at new programmers. Spring MVC + Thymeleaf is so much easier to maintain, and while you don't have the luxury of using components like data tables, working on existing Spring MVC code and templates is piece of cake, and productivity is increased in the long run.
I used Shiro in several projects. I like it - it's simple and just works.
Get a cab home, sleep on it, and in the morning have a cup of coffee, maybe an ibuprofen pill, and after the hangover headache fades away, read carefully everything here: https://jcp.org/en/participation/overview
Damn, this has been spammed on **all** the programming subreddits. Get a load of this guy: https://www.reddit.com/user/hgraca
&gt; monolithic Architectural Style simply means that all of the &gt; application code is deployed on the same node. I think this confuses the monolithic architectural style with the monolithic deployment style. The monolithic architectural style is the big ball of mud. The modular architectural style divides the system into components. The monolithic deployment style runs the application on the same node. But, the application might be one executable or a bunch of separate libraries, depending on the packaging style. How an application is structured, how it is packaged and how it is deployed are different things, and which is why tools like UML describe each of these facets as different views of a system. I only point this out because these two definitions of monolith are often conflated when arguing the advantages of microservices over monoliths.
In my opinion, whatever front end framework you choose; back end technology/framework is most of the times RESTful Web Services now a days. The advantage of restful web services is you can use them for website, iOS and Android apps. Same set of services for all three domains.
"This guy" is a fellow developer, not a spammer. ;) This guy likes to read, experiment, write about it and share it to get feedback. All of this to learn as much as possible. I share these posts in the subredits that I think ppl might be interested and might give me interesting feedback (as u might notice, I didnt share my posts in cooking subredits, only software development subredits and I'm sure not all of them). In any case, you are free to ignore my posts. ;) Peace.
JSF is no doubt a good solution for MVC based architecture. However, JSF learning curve is not short. JSF if used in combination with RichFaces; can give rich functionality to your front end. There are very good rich input and output controls which you can use here. Alongwith JSF and RichFaces; you can also add Spring framework for security module and services to interact with DAOs via Hibernate / JPA. Such technology combination is very useful for long term projects. 
&gt; Nowadays, having a monolithic Architectural Style simply means that all of the application code is deployed on the same node. That is "simply" wrong. An application that is broken down into modules which run as individual processes on the same node may be identified as a monolith unless said modules can be individually moved out to other nodes at any time.
I think it's funny you mention RichFaces ([which has been EOL'd for a while now](https://developer.jboss.org/wiki/RichFacesEnd-Of-LifeQuestionsAnswers)) and not PrimeFaces, BootsFaces, OmniFaces, etc which are actively maintained
Sure, but it's a bit annoying to see the same post 2-3 times on my front-page. These posts belong on /r/programming and /r/softwarearchitecture. There's **nothing** specific to Java or PHP on them, so they don't belong on /r/java/ and /r/php Most people who program know more than one language, are on /r/programming/ and they don't want your stuff everywhere. Use Reddit reasonably.
It's not a problem at all. You can use JDK 8 and have source/target 1.5 (or 1.6, or 1.7, for example).
This looks strange. With a bit of an effort, it's quite possible to run java on iOS as there are some llvm bindings for java (RoboVM project also seems to be not dead yet). Sure, there would be some native, platform-dependent stuff like graphics and networking, but the core, logics can stay java, thus supporting mods. Looks like microsoft don't want community mods at all.
&gt; "Monolithic" isn't a type of architecture, it's the absence of one I'm stealing that one to bash a few of my colleagues over the head with. 
If you don't have github this seems nice, otherwise I think it's much easier (and overrideable if sonar is being too picky) as a pull request hook
There are people that intentionally omit Java 8 features and API so the code also works on older runtimes. It's not technically problematic but a maintenance burden and progress blocker. E.g. when there's no @FunctionalInterface, you have to work with anonymous inner classes: register(new XYListener() { public void handle(X x, Y y) { update(x, y); } }); vs. register(x, y -&gt; update(x, y)); 
I am curious why you posted this.
I'm not drunk. Also, hiring someone would still be easier.
Well I was hoping you were drunk, because at least that goes away when you stop drinking.
Swing on the Mac looks great, just use the native look-and-feel (i.e. don't set one and it will use the default). What doesn't look native about it?
Because there are a great framework and a great build tool that are dangerous to be used together, which is strange in the Java world.
The "classic" version operates on arbitrary radices, handles negative numbers, handles overflow/underflow and most importantly, has error handling. It will throw a NumberFormatException if the string cannot be parsed as an integer. Also, the "classic" version iterates the string, it doesn't create a character array, which allocates memory. If you strip all of that out, of course the "new" method will perform faster, especially for a few iterations. By millions of iterations, the JVM has warmed up, and the minor differences are going to be a wash.
&gt; An application that is broken down into modules which run as &gt; individual processes on the same node This is not what is meant by "on the same node" when people talk about monoliths. All of the modules in a monolith are assembled to the same memory image, which are run as a single process on a single node. Communication is done through standard procedure calls through the same stack and heap. It's the single memory image makes the application monolithic. If you are running modules in different processes, you're doing IPC. Because modules fall into different process boundaries, you'll start facing distributed computing challenges. That's getting into microservice territory.
What you're stating is entirely correct and I am in no way contradicting you. Yet, I as moderator have already [warned](https://www.reddit.com/r/java/comments/6pu61p/making_decisions_with_the_if_and_ifelse/dks8fhn/) the user whose posts constantly got downvoted and reported as spam that they violate the [**reddit spam rules**](https://www.reddithelp.com/en/categories/rules-reporting/account-and-community-restrictions/what-constitutes-spam-am-i-spammer) which, as opposed to the self-promotion ratio, are still in effect. We do not want people only self promoting and not participating in other discussions.
Putting aside all of /u/_dban_'s valid points about error handling etc, I'd just like to point out that your custom implementation is doing a lot more multiplication than needed. You are calling `pow()` for each digit, and in an n-digit number, each call to pow will on average require n/2 multiplications, so your implementation is technically O(N^(2)). I'd consider something like this instead: for (int i = 0; i &lt; chars.length; i++) { intNumber *= 10; intNumber += (chars[i] - 48); } 
Babies grow up and so should your code. 😀
Shiro is really good and there is nothing wrong with it. But if your application is already using Spring it makes sense to use Spring Security instead (for consistency reasons)
Also, as a last point (aside from what has been said already), this is a great time to learn JMH, a tool that makes it very easy to write micro benchmarks as such (that tries to minimize things like GC, JIT warmup, etc) http://openjdk.java.net/projects/code-tools/jmh/
That makes a lot of sense. Can't believe I didn't think of the error handling (slow lunch break today). 
You're right. Good point. I wasn't trying to reinvent the wheel or anything. I'm sure the stock implementation is going to be better than anything I can cook up, and this was a very ad hoc approach done over my lunch break just to see how it compared to the parseInt method. The results just surprised me a little. 
i wish there were more posts like this one. as long as i did not have to do anything and they were 100% free to me, of course :) good stuff. if i am understanding all the responses correctly, on a "meta" level, your benchmark shows how the JVM is able to self optimize branching, caches etc.
For now, but oficially it's pushing Kotlin.
I like Spring MVC + JSP. I've never seen Thymeleaf used anywhere and JSP is easy and works well with Spring MVC.
Uhmm... I hate to tell you that this functionality already exists in the Jenkins SonarQube plugin. 
I clearly mentioned in my post that I know that it exists, but it didn't work as expected for sonar 6.4! That's why we had to make our own ;)
Because it is a show stopper for Wildfly Swarm. In theory it could be an alternative to Spring Boot. But Spring Boot is not only more mature, does support way more extensions, but als has decent Gradle support, too. The more people are aware, the more people can consider this fact early when deciding for a technology. And maybe someone gets motivated to improve Gradle support for Wildfly Swarm ...
Thymeleaf is relatively recent.
Was the example supposed to prove the point? The previous is far cleaner to extend by the dozen to 5 dozen developers who will maintain that code 2, 3, 4 and 5 decades from now. The latter, the "new way", is a one liner that someone will have to take apart and code as the former in order to fix/extend it. Why not do it correctly from the start? Also, if you really want to show a comparison, then also show the FP interface that is inconspicuously missing from the example? Also, maybe show how it ONLY works if you ONLY have one matching method. Which gets back to that maintenance headache I mentioned earlier when it needs to be extended down the road.
Eclipse SWT widgets use the underlying OS widgets. That is why IBM designed SWT. Use SWT if you want good looking Java based UI's, more accurately, use Eclipse RCP.
don't forget java based vert.x either, spring/jsf (and node) are slow by comparison. simple to use, and scale, and polyglot. https://en.wikipedia.org/wiki/Vert.x oh, and I use it with vuejs. 
NetBeans also works fine, and it's free as well.
Ahhh... My mistake... 
&gt; Was the example supposed to prove the point? The previous is far cleaner to extend by the dozen to 5 dozen developers who will maintain that code 2, 3, 4 and 5 decades from now. Usually I'm also wary when it comes to features with the "more-concise" label. However lambdas and passing functions was certainly something that made code better and more maintainable compared having to use inner anonymous classes for callbacks, which are btw. the exact same conceptionally but with less ceremony. &gt; Also, if you really want to show a comparison, then also show the FP interface that is inconspicuously missing from the example? Very uninteresting, but I'll elaborate. The interface before: public interface XYListener { void handle(X x, Y y); } after: @FunctionalInterface public interface XYListener { void handle(X x, Y y); } &gt; Also, maybe show how it ONLY works if you ONLY have one matching method. Which gets back to that maintenance headache I mentioned earlier when it needs to be extended down the road. The anonymous inner classes are used to quickly construct a throwaway, unextendable object that does nothing else but wrap a single callback method (names are mostly "apply", "handle", "run", "actionPerformed",... uninteresting for the developer). Those are called Single Abstract Method (SAM). The purpose is to provide an entry point to respond to events and similar callback mechanisms. In Java 8 you can mark them as such. The JDK does that, e.g. with [`Runnable`](https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html#run\(\)) and with many other [SAM](https://docs.oracle.com/javase/8/docs/api/java/lang/class-use/FunctionalInterface.html). If you are comitted to stretch the responsability and have more callback methods in the same class, you'd hopefully also replace the anonymous inner class with an actual class. There's no difference between that or extracting the lambda to a Function variable or replacing it with a class. If you'd refactor an old Swing or Eclipse SWT application to Java 8, then you'd quickly appreciate being able to use those "one-liner" lambdas. All the dead ceremony code, which made it spot the actual logic, could finally be removed. 
Lambdas are not a generational improvement; they are syntactic sugar attempting to fix something that wasn't broken and only in a subset of viable cases at that.
Can Spring Security accomplish those use-cases?
&gt; And to Eclipse I say, java.awt.List is not my preferred choice. You can filter packages/classes you never use :) https://stackoverflow.com/a/2073950
And it supports Unicode: `Integer.parseInt("١۲੩") // "123"`
Yea, like C is syntactic sugar over Assembly
I haven't seen all the newest versions of Spring security to know all the latest features. I think however that what is described in the article can be easily done with Spring Security as well. If I remember correctly the "permissions" of Shiro are called "Granted authorities" in Spring security.
I am curious why you posted this.
You need a leader who can see past the next financial quarter. 
[removed]
Video seems to cut out at 1:00. Maybe it's just my connection.
Here's a Java 8 oneliner to do this: `str.chars().map(c -&gt; c - '0').toArray();` Don't know about the performance though.
https://kotlinlang.org
Issue resolved now. 
JD is great and I used it for very long time but it's getting outdated, I would go for FernFlower/CFR/Procyon mentioned in other posts now.
&gt; Some web frameworks will try load a class based on the URL in the HTTP request. Well, now that's an easy DoS avenue. Could you show an example of this? Sounds like a terrible security practice. Nevertheless interesting find. If this hasn't already been reported to Oracle's bug tracker, it should be.
Do you have same behaviour without long.max?
Absolutely, I might go far as to say it is definitely better than Idea Community Edition as it has free server integration capabilities.
It just has to be BIG. Big enough to fill up the memory. 
My favorite java conference :) and the presentations are available the next day, awesome work!
You mean web frameworks deprecated in the last century?
suprisingly easy way to shut that off, though this should probably be the default, but a good reminder all the same, thanks!: import jdk.nashorn.api.scripting.NashornScriptEngineFactory; ... NashornScriptEngineFactory factory = new NashornScriptEngineFactory(); ... ScriptEngine engine = factory.getScriptEngine("-strict", "--no-java", "--no-syntax-extensions"); https://stackoverflow.com/questions/24466203/how-to-remove-java-apis-from-nashorn-engine
9,223,372,036,854,775,806
Keep on mind that the list is expanding, the conference isn't finished yet!
Of course it is called JBoss Forge ( https://forge.jboss.org/ ) and this one is written in Java, have an amazing easy to use API if you want to make your own generator.. and the IDE support is amazing because of the JBoss Forge plugins for IDEA, Eclipse and NetBeans, and yes you can still use the CLI which I find a lot, lot better then the jhipster CLI. 
Btw completely offtopic but: there is nothing like 'JEE' ... such thing doesn't exist.. it is called Java EE... JEE is some bad recruiter naming/labeling went viral cuz he/she (probably she) is unable to convert J2EE to something without the 2.....
What if the import to use is ambiguous? I think I prefer compiling to be more deterministic.
You're being pretty dang pedantic. I think everyone knew what he meant
Compatibility also breeds longevity and trust.
this is the 2nd kiktronik link this week, both of which have been terrible "articles". looks like spam to me 
yeah instead they should map urls to resources on the web server. That's how PHP's Laravel does it. That way you aren't using urls to directly access server resources.
I wouldn't want to block all Java but maybe restrict them to a specific interface. 
Even among typical Java developers I doubt that any have ever found a reason to load a bunch of classes with a numeric suffix sequence. And if you allow calls to Class.forName unsecured through HTTP then you have bigger problems.
Gradle support would be really nice, maven is good but seems very clunky compared to gradle these days.
&gt; Could you show an example of this? Sounds like a terrible security practice. No examples, but this isn't too far fetched. Think of a servlet that delegates some work to a controller class based on a command. And a command might be supplied by a request parameter, among other parameters for the command. So you might have something like: /DoAction?cmd=AssignJob&amp;jobid=123&amp;poolid=5434&amp;returnurl=blah.jsp And the DoAction servlet would be a universal controller. Something that checks session and makes sure current client is allowed to perform AssignJob (or some other logic based on cmd parameters) and in the process loads a class by creating a class name like "com.blah.appblah.commandhandlers.AssignJob". And AssignJob implements some interface Actionable or whatever. With performAction() method that does the work and returns result back to the controller servlet. So the servlet needs to know the cmd parameter, then it will instantiate a class that implements Actionable, and the servlet calls peformAction() passing the rest of the request. Then gets the results, and shows the output to the client. A pretty neat system, actually. But somewhere inside the servlet, there would be a Class.forName() or some other reflection used to load the AssignJob class. And developers might choose not to use a hard-coded or configurable map limiting the available commands or a database to do the class lookups. Instead, they might choose to concatenate the package name with the cmd parameter of the servlet and be done with it. After all, what's the worst that could happen? If someone messes with the cmd request parameter, then the class simply won't be found. And the controller servlet will catch that exception and present a nice error message to the client. Easy. But you probably won't think about OOM with such setup. As for who would do that, if I remember correctly back in 99-00, IBM's Net.Commerce framework on WebSphere used something like that. 
Then don't do that.
Which version do you want? Which distribution? 
Nashorn has a class filter. Set your own an you will get a "trying to load class a1" call before it gets to the classloader. And an option to return false - nah, not allowed.
can you set the javac compliance level to 1.4?
Ah the good old days before autoboxing, annotations and generics.
PM sent, LMK if either of those links dont work - yep, we use 1.4 still at work :(
[File a bug to Oracle](http://bugs.java.com/)
I am little new to the industry, so what are the motivations to still keep working with 1.4?
&gt; annotations Come on. We had XDoclet. Totally as cool as annotations.
Guidelines from customer using that version. There are quite some companies that have strict policies on what version of a given software has to be used. Some times they have certain piece of software that only works with a specific version of JRE and thus all software has to use that target platform because they won't install a second JRE.
None. I have zero motivations. The customers on the other hand want their stuff to keep working without having to upgrade anything. It's a limited subset of our features (aka, one distributed product) which we use by writing Java 6 code and retroweaving it to 1.4. All our dependencies need to be 1.4 compatible. Writing the code and retroweaving isn't a big deal, but making sure people don't compulsively change that version of slf4j is the trick (yep, I did that).
This is one reason. Another reason is that some platforms don't have support for modern Java versions (because the OS is ancient too). This is our primary issue.
I knew what was meant. Still it is good to use correct terms. Now back to discussing a JH like project that works with JEE instead of SMVC.
You poor soul, the only reason I'm asking is because I'm thinking of getting a SGI Indigo2 soon and the latest Java that will run on IRIX is 1.4 so I wanted to see if this little game I made in Java will run on it.
Doing that isn't enough, you also need to have the 1.4 `rt.jar` and use `-bootclasspath` to point at it [or else you'll get errors](https://stackoverflow.com/a/15882869/15880) trying to run it on an actual 1.4 installation. 
Very interesting. However I didn't see anything that Spring does not already offer so if they want more visibility they need to differentiate on something. The article makes a big deal for Consul integration but this is already true for Spring as well https://cloud.spring.io/spring-cloud-consul/ 
Cool. Thanks 
I watched the AOT section, why do they still keep JRE dependency, can't they do like GO, produce self contained executables ? AOT + having to carry fat JRE is pretty deal breaker imo..
Luckily I got a copy for Windows from RockMeetHardPlaces
Aren't Oracle accounts free?
hmmm..thank you for the answer.
Had the same issues late last year. A major pharma client still using some application which requires Java 1.4 to run. The application was no longer supported by the vendor therefore we had to reverse engineer the Java 1.4 classes to fix the bugs. I feel your pain 8r0.
Luckily I don't have to work on any legacy applications, the reason I need 1.4 is because I'm trying to port a Swing game I wrote to IRIX and the latest version of Java that will run on it is 1.4.
Get login and password from bugmenot.com
Why don't you just create an Oracle account?
Just make a free account, it takes minutes.
For better or worse, the JRE runtime is pretty complex, and does much more than you can do in go (eg: dynamic class definition). The primary goal of the AOT work at the moment (as mentioned in the presentation) is to improve startup times, not to AOT compile the world. The AOT compiler is also going to be inferior to c2 because it lacks a lot of the profiling/type information, so it can't eg devirtualize method calls. There has been some work on the Substrate VM, which does a complete AOT compilation of java code into an executable binary. However, it comes with significant limitations, and is primarily designed for running non-java languages using Graal.
you can use C/C++ if you prefer :) You can also keep the java to a minimum, make a mini webserver that can interact with the os and serve static stuff and respond to ajax requests, and launch a javascript view in the browser from it. This is basically how phonegap/cordova/etc do it, and how I approach gui's these days. this might not be the best forum to ask though. "hello r/java, how do I avoid you like the plague?"
&gt; Do i need to learn Java and XML to create an Android app or do I have other options? Yes, and yes. Java is the native language of Android apps and thus a *solid understanding* of Java is a necessity. You have other options, but none of them will be helpful for you since you have no programming experience anyway. You'll need to learn one or the other programming language, so going native with Java (which actually is a great first language) is your best option. Start with the MOOC [Object Oriented Programming with Java](http://mooc.fi/english.html) from the University of Helsinki. This will give you a solid foundation in both Java and OOP. Learning Android development will then be definitely easier. Android uses quite advanced Java concepts, so the better you know Java, the easier it will be for you.
&gt; requires me to log into an Oracle developer account which I don't have Make a developer account. It's free and Oracle doesn't spam heavily.
lol
You *can* use .NET / C# to do it using Xamarin, but I have no idea how well that works.
you could have a play with app inventor (programming with graphical blocks) http://appinventor.mit.edu/explore/# but your mileage my vary! kotlin is also another alternative, that might be a little more accessible for new programmers however if you want to learn by example, most tutorials etc you find for android will probably be Java...
If it ain't broke, don't touch it. There's plenty of industries and installations where you just don't have maintenance windows, ever. Things get built, tested to the point of insanity, then locked in stasis until they physically can't go on anymore. Then they build a new thing parallel to the old thing, to replace it without a gap.
Yeah...in my company we are replacing a php engine with java engine but probably for another reason which is php ain't performant enough. 
Yes but probably he doesn't want more junk in the email
If you have the address for the file, you can download it using curl or wget, and pass a flag for cookie that confirms you accepted the license. This SO page has more info.
[removed]
I don't think you have to verify the email at all, could just use a throwaway email.
&gt; The customers on the other hand want their stuff to keep working without having to upgrade anything FFS, are they still running Windows 95?
this
Beers on the wall, take one down pass it around...
https://10minutemail.com/
**Third and last time:** **Sidebar** -&gt; **Do not post tutorials here!** This is your last warning. Next time you post a tutorial here, you will be banned without further ado. Also, instead of just posting tutorials, you should **actively participate** in the subreddit discussions. Just posting stuff is not acceptable. You also should read the [**reddit wide spam rules**](https://www.reddithelp.com/en/categories/rules-reporting/account-and-community-restrictions/what-constitutes-spam-am-i-spammer) because your posts constitute **spam** as per the following two points: + If you flood a Reddit community with posts or comments, you may be considered a spammer. Instead, post one or two times and see what happens. + If other users in a community historically downvote your posts or ones similar to yours, but you feel the need to continue submitting them anyway, you may be considered a spammer. These are verbatim excerpts of the **reddit spam rules**. Both above apply.
He explained that his answer was off topic - but imho it is good to promote the *correct* terms! To be accurate and precise is so important within our craft, so why start to get lazy and ignore that outside of your source code or closely related stuff?
&gt; The customers on the other hand want their stuff to keep working without having to upgrade anything. I feel for you but your account manager needs to grow a pair. I've been working as a Java dev for ages and it was never a problem to convince users to upgrade. "Java X is not supported anymore and won't get security upgrades. You're vulnerable to hack that will leak all your customer data into the open which will cost you a lot in fines and settlements. It's not a matter of if but a matter of when." Of course it's a bit dramatic but customers are sensitive to only one thing and that's money. And with unsupported software making a case for them losing a lot of it is not hard to make. 
&gt; If it ain't broke, don't touch it. Software that does not receive security updates anymore is by definition something you should consider 'broken'. 
That is your definition. The hypothetical sawmill down the road is still running their production line on DOS. They disagree with you. Not all systems are connected to the big bad internet. Fun times ensue when someone accidentally bridges these systems to the internet.
Honestly, if you are going to go about learning C#/.Net with Xamarin solely for Android apps you are wasting your time. Java is about as easy as C# .NET and is free for developing any app. Xamarin costs money if the app is bigger than a certain size. If you wanted a cross-platform app and one codebase, the story would be completely different. 
I'm sorry Lt, but u are assuming ppl in those subredits don't wanna see my posts but you are completely wrong. Most of my viewers come from exactly those subredits (php and java). I can tell u that in the first day, my last post had 6 hits from /r/softwarearchitecture, but 171 from r/java and 114 from r/php. Furthermore, the subredit rules clearly say: "Upvote good content, downvote spam, don't pollute the discussion with things that should be settled in the vote count." As it happens, this post, in this subreditt has 80% positive votes. So although I don't like to annoy ppl (even if its only 1) I will continue to divulge my posts as usual, unless results change or the moderators ask me otherwise. The best I can do is to suggest you that you change your frontpage. Peace.
This is indeed how I see it as well, and what I meant with my post. I f****d up my post there, not explaining what I mean with node!! U explain in your comment a lot better than I did in my post!! I hope you don't mind, but I will edit my post referring to your comment. Thanks a lot for your feedback!
Ummm..., I think a big ball of mud is a monolith done bad. I think of a monolith done good, when its divided into components. &gt; monolithic deployment style runs the application on the same node a deployment style deploys an application, it doesnt run it... right? &gt; the application might be one executable or a bunch of separate libraries true, but _dban_ (above) comment really makes sense to me and is the way I think of it: https://www.reddit.com/r/java/comments/6qmugy/monolithic_architecture/dkz11mt/
Good point. Spring IMHO is more advanced in the cloud than Java EE because of the need of standardization of all different providers: 1. It's interesting to see a provider carving its own path 2. Competition is good
Nice!
errm one api method has a copyright notice, therefore the whole of Java has its root in Taligent (thats presuming that the routine came from the OS and not some other Taligent product...)
Forge is great and I use it a lot for prototyping greenfield applications, but it does not offer Angular support (only AngularJS by now) and I didn't find a way to bootstrap a forge application with working authorization/authentication, user management and the administration dashboard out fo the box. Maybe there are good add-ons that I'm not aware of.
Guerillamail too
As someone who codes in Java and Python, I'm so glad I can just install Java 8 and get on with it, and point to Java 7 being EOL in 2015. Whereas, Python 2 should just go die in a fire. It should not exist in 2017. It's ridiculous that there are widely-used libraries that haven't been converted to 3 yet, and online courses still teaching 2 as the default ensuring generations of new Python coders start with 2.
to be honest this looks much easier to use than spring security
lol, indeed :P
It's actually called "Java Platform, Enterprise Edition" in full. I use JEE as an abbreviation the same way i use abbreviations like 'IIRC', 'BRB', 'LOL' and 'EOD'. In this particular case, I would have made up the acronym myself, if noone would have ever used it before. I would however use the fullname in a technical article or documentation, which is not the case here, as I consider this forum to be informal. 
any pointer to the slides?
"Probably she"? Get over yourself. 
Have you tried the old versions website. Otherwise I have a Windows install file called "j2eesdk-1_4_2005Q1-windows.exe".
The slides can be found at http://www.jddarcy.org/Conferences/JVMLS/JVMLS-2017-strict-floating-point.pdf
What ever you do, make sure you verify that the JDK has not been tampered with...
By the way, why did you say Hibernate feels heavyweight? Do you have some specific reasons to mention? We could address it them in future releases.
Ha, tbh Java ORM eco system is new to me and this opinion is not entirely my own and based off what ive been told by software engineering professor. His comparison being to spring. To some extent i feel its heavy weight for me in that there is a lot of configuration and methods before even getting started. In comparison to python and php its a couple lines of code to get started with popular ORMS and the interface a lot simpler. Again im still fairly new into the java eco system in terms of developing real software that aren't computer science algorithms etc. 
How does it compare to Soteria? Anyone tried that with Spring Boot?
very interesting. Thanks 
That's why: http://i.imgur.com/jke9A7A.png
Have you tried a recent Java version? (I'd suggest a JDK 8 update.) You might be pleasantly surprised.
War files generally don't have the pom.xml or the source code in them. Just unzip the war file (a war file is a zip file) and then you have the files you can use in eclipse. 
i have one thats unzipped and it has pom.xml.. HA i did this once at the beginning of summer but i cant remember how exactly
For someone with no programming experience the best alternative is to go with the standard native language. 90%+ of all Android apps are written in Java and 90%+ of all guides, books, forums, tutorials, educations etc are focused on writing Android apps in Java. Going down the webview route and make it in javascript/html/css could be good if you want to make it cross platform. But it has it's downsides, mainly performance wise.
With the N word, the D word and even the L word everyone knows what is meant too, doesn't make it nice to use though. The problem is that "JEE" for the longest time has been used by Spring people where most of them can't help to talk about Java EE in a derogatory way. Then add a bunch of clueless recruiters using that term as well, and you may begin to understand why it's generally disliked among Java EE users. 
A war file is basically a compiled executable. There is no reason it would contain a pom.xml just like it normally would not contain the java sources.
some really old unix variants. We still support XP (healthcare folks, lewl) begrudgingly... 
&gt; Please seek help with Java programming in /r/Javahelp!
sounds great in theory, but their money pays the electric bill, ya know?
Im sure you could fill thoe fields with gibrish in no time
As said before, first unzip the war file, you'll find the pom somewhere beneath META-INF/maven/..., then it's getting a little bit more complicated: * create a new folder for your Project * create the directory structure src/main/webapp, src/main/sources and src/main/resources * copy all files and folders from unzipped war directory to the new webapp directory * move properties, XML and stuff like this to the resources directory * delete WEB-INF/lib (it's filled by dependencies from pom) * move pom from META-INF/maven/ to basedir * Look for a Java decompiler and decompile the class-files in /WEB-INF/classes (when there are any) and move the decompiled files to resources directory Then you can try to import that folder in Eclipse as maven project (when you've installed eclipse Plugins m2e and m2e-wtp). For very simple war files, that may work.
Or just make a throwaway... Email is free.
We have a product that needs 6. Not as ancient but I can still talk about it. It runs on IBM WebSphere which uses the IBM JVM which is version 6. (Maybe newer versions of WebSphere work with newer Java versions? Just "working" isn't enough, it needs to be certified and supported.) Just run the EAR file on a different application server? Maybe it's possible, but even then we'd have to make a lot of new deployment scripts, get training, and also ensure our product can perform well on the new server. The product isn't just the source code.
What's new in it?
X-Post referenced from [/r/programming](http://np.reddit.com/r/programming) by /u/atomashpolskiy [Bt - A full-featured BitTorrent library in Java 8](http://np.reddit.com/r/programming/comments/6r569i/bt_a_fullfeatured_bittorrent_library_in_java_8/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
thank you ..understood
thank you for the answer.
The article should make clear that it is talking about Apache Fortress. This is mentioned nowhere in the article (it is just implied from the code listings)
Hello Guys Would you like to see the magic of Integer Wrapper class? Why similar object comparison sometimes return true while other time false? Are you interested to see the best way of creating an Integer object? Do You want to know performance cost of Integer object creation then I would recommend you to watch the shared video that is "Integer Wrapper Class Interesting Facts" and subscribe my channel "Java Interesting Topics"
mmmmm, have you ever heard of lisp?
Hammock? https://github.com/hammock-project/hammock /shameless plug :-D
Kotlin is beautiful, but it doesn't look much like java from a syntax perspective. Groovy, on the other hand, for a good number of cases allows you to rename `.java` files to `.groovy` and compile. That's more true of java 7 code than java 8 code.
Kotlin is beautiful, but it doesn't look much like java from a syntax perspective. Groovy, on the other hand, for a good number of cases allows you to rename `.java` files to `.groovy` and compile. That's more true of java 7 code than java 8 code.
oh lol no, when I was making it, I just liked the brackets and how they appear in text editors, so I chose them as delimiters
What are you expecting to see? You should be able to download JAR files because that's nothing to do with Java itself. If you're talking about opening a JAR file to see the contents then they are just ZIP files, so either rename it from .JAR to .ZIP, or (if on Windows) download 7-zip, right click on the JAR file and choose Open With, then select 7-zip from the list. By default Java will associate with JAR files so it will execute them when you double-click on them but unless the JAR specifically contains an application with a manifest indicating the `Main-Class`, this will do nothing.
I'm not sure about real resources, but generally, working with n-ary trees is pretty much the same as with binary ones. Preorder and postorder traversals are the same, at least. You examine all of your children before you examine yourself (postorder) or you examine yourself before any of your children (preorder). The only one that becomes a bit more complicated is an inorder traversal. For that to be meaningful, you have to clearly define the relationship between the root and any given child node. For example, in a BST-like context, you would need to know that children 1-m all have values &lt; the root and all children m+1-N (for N children) have values &gt; the root. At any rate, there are several types of trees that are used in practice that are not binary. B-trees are used a lot in the database world, and 2-3 trees are an alternative to red/black trees for BSTs. You might look into those to see how they deal with multiple children. I hope something in there is helpful. Cheers! Edit: If you're using heaps instead of BST-like trees, you might also look into Fibonacci Heaps. They have a variable number of children.
Was that article written by a robot? 
The domain gives a hint though ;)
Looks really neat. Especially the tests section
does anybody know how i can run this basic program?
You should try scheme. It's easy to get the hang of.
The article is talking about the seven steps of role engineering. Apache fortress is the implementation that is used for code samples. So I really don't get where the problem is. Would you rather it not have code samples? The principles would apply for any system that is compliant. 
Always a pleasure to watch a Brian Goetz talk.
Possibly a Sokal-bot...
I have been running my Java dev env inside of an Ubuntu VM running under a Mac host for almost three years without any problems. The VM has 8GB RAM allocated. The host has a 1TB SSD. 
To be fully transparent, I updated description in text to include a reference to apache fortress works: *This tutorial demonstrates role engineering techniques using standard rbac as applied to a sample set of security use cases.* *There is a corresponding github project, written in Java that uses Apache Fortress to show how.*
I enjoyed that read. Let's say I need a custom comparator with a little more complexity than (a, b)-&gt; a - b. Should I write out a whole comparator or just a quick function to be used like this (a, b)-&gt; comparisonFunction(a, b) ?
máy tính
I usually properly implement `Comparable` if it's something that may be used in the future, but if it's just a one time thing I'll just use a quick lambda.
It all boils down to readability, doesn't it? If it's a couple of lines, then a lambda is fine. For more complex logic, a separate custom `Comparator` would be better.
&gt; (a, b)-&gt; comparisonFunction(a, b) Don't do this. Do that instead: MyClass::comparisonFunction In that case, yes, extracting the function can help
Guys please see my video. It is a series of a JAVA programming.
wow this looks pretty interesting, it's pretty feature-rich
Careful with the naming, might have some legal encounter with BT (UK telco).
It's funny how much "best practice" material for good FP or OOP programming boils down to the lessons taught first by structured programming. When a clickbaity article like this comes along on a "hot new idea" like Java 8 lambdas, and it boils down to "refactor your code into functions", well... it suddenly makes me feel like we haven't come very far after all. 
I'm not sure I understand. Could you explain why the alternative you give is preferable? 
regarding 1: "hard to read" the very first lambda starts as " .orElse(0);" that poorly named stream function which is super confusing a year after getting to know it. And the code is not a bit more readable, split up into multiple functions, 10 characters a line, a 4-liner for a "very short" function. regarding 2: "its purpose isnt clear" wrapping the functionality into a function has nothing to do with lambdas. regarding 3: readability of utility functionality wrapped inside a lambda is harder to grasp if anything. you have to remember the input at that point of the method call in the chain AND jump to where that function resides. regarding 4. :"it's hard to test" i dont know why one of THE counter arguments to lambda expressions is presented as a pro. regarding 5. : NOTHING to do with lambdas, again another bait and switch argument. Also since we're using streams the method has worse performance (nitpick). I have really gotten to like lambda expressions in some cases, but the article contradicts itself in all its points.... if there is an argument to be made for lambda expressions (which i think there is), you won't find it in that article..
Making code less verbose, less prone to bugs and more performant seems like a win-win to me. As an aside, while I know it's just an illustration, I believe the pseudo code at [12:00](https://youtu.be/n3_8YcYKScw?t=720) is slightly "wrong". I've implemented the core logic of the simplify() method in plain Java ([see this Gist](https://gist.github.com/aadnk/906c809671db5297daf309c292bea236)), and when passing an *AddNode* with two *IntNode* instances that contain numbers other than zero, such as the expression 1 + 1, the method throws a *StackOverflowException*. Note that [line 41](https://gist.github.com/aadnk/906c809671db5297daf309c292bea236#file-patternmatchingtest-java-L41) simplifies the two branches of the given *AddNode* instance, and then passes them to a recursive call to simplify() with a new *AddNode* instance. However, because *IntNode* does not simplify to anything else (line 23), the new *AddNode* instance will be identical to the original given *AddNode* instance, and we end up with an infinite recursion (which is broken by StackOverflowException). One simple way to fix this, is to check that the branches of *AddNode* (as well as with *NegNode* and *MulNode*) has actually changed before attempting to simplify the given node again, as I've done in [line 70](https://gist.github.com/aadnk/906c809671db5297daf309c292bea236#file-patternmatchingtest-java-L70). To be fair, the fix may distract a bit from the main point of the example, which is to demonstrate a Java-like syntax for pattern matching. Still, we're not talking about a huge amount of code to make this correct, as seen in my ["fixed" version of the pseudo code](https://gist.github.com/aadnk/906c809671db5297daf309c292bea236#file-pseudocodeb-java-L2) (it would still fit in a slide), and the example would then be a more accurate portrayal of pattern matching in real code.
I just find that more readable in this particular case, specifically because there's already a function available for exactly that type. But in fact, there's no clear winner. [More info](https://stackoverflow.com/a/24493905/521799)
Overly lambdas and being able to assign lambdas are really nasty in any language. Python does it kind of OK in that lambdas can't be compound expressions, and that common linters warn of assignment. Ruby is kind of an interesting exception in its model of 'blocks', but that's probably not worth getting into. I don't have much of a point here, but it's kind of grim that anyone would rely on lambdas in such a way anyway, I don't know if it's as much a java 8 idiom, as a general 'don't write dense *clever* code' rule.
Could you please provide a link to the specification? Could you also list other implementations that are compliant? I am interested to know more about this topic, but web information seems to be scant...
Perfect! That is exactly what I was talking about. Thanks.
&gt; if there is an argument to be made for lambda expressions (which i &gt; think there is) The article isn't making an argument *for* lambda expressions, it is providing some tips for how to write *readable* lambda expressions. &gt; the very first lambda starts as " .orElse(0);" How is that confusing? `findFirst` returns an `Optional&lt;T&gt;`, and if the optional type doesn't have a value, return 0. OP is not even talking about the JDK functions, he is talking about extracting *your own* functions to produce more readable lambda expressions. &gt; wrapping the functionality into a function has nothing to do with &gt; lambdas. No, but it has to do with the main point of the article, which is how to write readable lambda expressions. &gt; readability of utility functionality wrapped inside a lambda is &gt; harder to grasp if anything. The point of function composition in the functional style is that you don't have to remember anything. The only context you need is in the input arguments, thus the function is context independent. Coupled with giving the function a good name and a clear purpose (`sumOfFactors`), the lambda expression *reads better*. &gt; i dont know why one of THE counter arguments to lambda &gt; expressions is presented as a pro. The function `sumOfFactors` is easier to test when extracted out of the lambda expression where it resides. This is a benefit of functional decomposition, which also happens to coincide with making lambdas more readable. &gt; NOTHING to do with lambdas, again another bait and switch &gt; argument. The bait was how to write better lambda expressions. Extracting parts of lambda expressions into functions decreases cyclomatic complexity, which makes reports like SONAR happier. So, if this point helps you write better lambda expressions, what exactly has been switched?
&gt; refactor your code into functions While this is true (the *how*), the more interesting part is the *why*: lambdas as glue code. I think this is a more profound insight into functional programming in general. Things like streams and monads are abstractions of effects, which glue functions together to achieve the desired effect, without having to write the plumbing yourself. Which is why the comparison to the `for` loop was interesting. You don't need to manually break out of a loop to achieve the effect of selecting the first item. All you have to do is wire in the functions correctly into the stream. Another cool effect is `Either` (not available in Java 8, but should work with streams). Instead of throwing an exception, you can put an error result in `Left`, you can glue functions together, and if any one of those functions returns an error, the rest of the stream is short circuited, and you get an error.
copy of spec: http://profsandhu.com/journals/tissec/ANSI+INCITS+359-2004.pdf Other compliant impls include OpenRBAC, written for PHP. Tried to find project link but it is broken. There are some others listed on the RBAC wikipedia page here: https://en.wikipedia.org/wiki/Role-based_access_control For Java based, I'm not aware of any others, open source, and fully compliant. Let me know if you find one, will reference to it in original article. 
The perfect lambda expression may be just one line (or, more aptly, just one expression) but IMO having the language restrict you to one expression is a mistake. It is for this reason I take issue with Python's implementation. Although I do understand that it is onerous to implement (with regards to parsing) and generally un-Pythonic, it just seems wrong to make that decision for users instead of letting them choose on their own.
Agreed. I've long thought that a lot of the principles of OOP and FP aren't in conflict, and some are even in harmony. And as you said, structured programming's roots can be seen in both approaches. Of course as someone who works with Scala, I'm obligated to preach unity. ;)
I met and talked with some of the Taligent people at JavaOne in 1998; they were really doing amazing things!
Umm they are responsive and *tend* to not have odd ui artifacts all over the place. The interface that prompted my question was literally the Java updater.
see and thats the nice thing about the internet, you can always learn something :D. I misinterpreted the goal of the article, as you might have guessed :D. I'll still let my post stand as a symbol of stupidity! edit: reading the article once more is really strange. i read it differently but i am still confused as to why it advocates something in the context of lambdas which is generally advised everywhere, i.e. keeping functions short and letting them do one thing. 
Depending on what area in which you reside, being proficient in Spring and Hibernate have been common topics during job interviews for me. Dependency injection, data access objects, stuff like that. I would also recommend finding another project that already exists and is in active development on GitHub or Sourceforge. Look through the bug list and take a look into it. Even if you don't get to commit any changes or your changes never get merged in, you can look at existing code and step through to see how things work. If you *do* get your changes merged in, you can point to that and say "see? I did that". It doesn't have to be something like "Firefox" or "Libre Office", but just do something. I would also recommend looking into Angular JS development. Good UI developers are usually in demand.
Thanks! This is a lot to handle at the moment. It's been a long road and isn't I have recently decided I'll pursue in Java, I may be making a mistake but I really like coding in Java to begin with! 
There are lots of Java and .Net jobs around here (D.C. area). I couldn't tell you much about the rest of the country. I'd stay away from SQL as a primary skill, but it really helps to be able to show stored procedures and stuff like that you have created.
It's funny how some of the concepts really seem to stretch to other areas. I find that there are also parallels between class designs using SOLID vs. relational database design using normalization (but only through BCNF). They don't appear to be similar at first, but when you consider that they both attempt to limit the scope of a class or table, they start to show their compatibility. BCNF can be summarized as "Each attribute [.. in a table... ] must represent a fact about the key, the whole key, and nothing but the key." SOLID says something similar with the Single responsibility principle: a class should have only a single responsibility. That would also mean the classes' members should only exist in that class if they support that responsibility. I'm sure there are many other parallels that could be drawn from those to each other, and principles in FP (referential transparency for example), but they're all variations on a theme that help us deal with the complexity of abstractions; which is the central problem Dijkstra was trying to solve as well with structured programming. His vision was breathtaking for the day, but I think even he would be humbled by what systems today have become.
`Comparable` and `Comparator` are different beasts. The former is about linking a class and ordering, while the latter is about external ordering. I always favor the second by default, because ordering is nearly always context-dependent.
Thanks man! You've been a godsend! A
No problem! Best of luck!
Slowly turning Java into Scala.
You must be using shitty Swing applications. Swing apps are quite speedy as long as the developer doesn't block the event dispatcher thread and I have no idea what you mean by "ui artifacts". Screenshot?
Ugh. I'm not a fan of ICEfaces
&gt; i am still confused as to why it advocates something in the context of lambdas which is generally advised everywhere, i.e. keeping functions short and letting them do one thing. This is just my opinion and maybe isn't shared by the author... Readability falls off a cliff much more quickly inside lambda expressions than in other contexts. The lambda code plays by a different set of rules. The reader suddenly has to understand that suddenly: * some of the variables that used to be visible aren't any more (non-final variables) * the rules for handling checked exceptions have changed * the meaning of some keywords has changed, especially the `return` keyword You're referring to this decision of whether to inline or externalize some logic. I'd say the dividing line is in a different place depending on whether a lambda is involved -- externalizing becomes a better decision sooner with lambdas. So it makes sense to me that this article calls out lambdas specifically. One clear example for me is looping over a collection. I almost always prefer the "enhanced for each loop" `for (E element : collection) { ... }` instead of `collection.forEach(element -&gt; { ... });` The only time I *might* use that second form is when the argument to `forEach` can be written as a method reference or single-line, block-less lambda. In other words, I would inline the body of an enhanced for each loop much more often than I would inline the body of a `forEach`.
That was a nicely written article, thanks for sharing.
Lambdas are pretty annoying for someone who is 100% OOP. This article helped a lot
What do you think about closures? (I know that Java doesn't have them, but I'm asking about the concept in general).
The article has nothing to do with Java. /u/hgraca is a [spammer](https://www.reddit.com/user/hgraca).
For me it depends if I think it'll be useful elsewhere. I'll put little functions in a utility class so I can use it like ComparisonFunctions::subtract If it's clearly a onetime use thing and small I'll just use the lambda expression
&gt; lambdas as glue code It's interesting that you say that. I was just teaching a co-worker about lambdas and explained it just like this.
Serious question: Why Lambdas? We did fine without them for a long time. I'm just not seeing the benefits that others are seeing. They just look harder to test/debug imho..
or c# 7, which looks to be getting some pattern matching. or haskell. or... other stuff.
i'm sorry you suffer from your condition. :(
Yeah, I reached that by trying to debug and test some lambdas that where getting outta control, really makes everything better
Why computers? We did fine without them for a long time.
The testing argument and the readability argument are easy to address: use method references.
This is so helpful thankyou!
You are most welcome.
Never understood the love for method references. Lambdas are often as short and explicit, which is a big plus in my book.
Unity between both worlds started with Smalltalk and its use of blocks, or Interlisp-D and its OO system FLAVORS, but younger FP advocates seem not to be that high on history of programming languages.
You know that Smalltalk has closures, called blocks, right?
/r/cscareerquestions is more suitable for questions like these. This is is about (sidebar): "News, Technical discussions, research papers and assorted things of interest related to the Java programming language"
Because they are cool, fellow cool kid. Like Facebook or Twitter, but in Java.
Learn java with great examples. Must visit the website. http://www.ashtpoint.com
Stream.forEach is good for performing side effects at the end of a pipeline. What if I want some side effect (like logging) in the middle? Is it idiomatic to have effectful lambdas?
It's simple. `(a, b) -&gt; comparisonFunction(a, b)` is an explicit function implementation (lambda). It happens to have a name: `comparisonFunction`, which can be passed instead of the implementation. It's like anonymous classes vs. named classes in the old days. At some point, factoring out frequently used logic into an ordinary, named class makes sense, and at that point, you'll pass `new MyClass()` around, instead of `new SomeInterface() { implementation here }` What's not to like about that *option*?
[removed]
FTA: &gt;Here's the first, written in the imperative style: int result = 0; for(int e : values) { if(e &gt; 3 &amp;&amp; e % 2 == 0) { result = e * 2; break; } } &gt; Now consider the same code written in the functional style: int result = values.stream() .filter(e -&gt; e &gt; 3) .filter(e -&gt; e % 2 == 0) .map(e -&gt; e * 2) .findFirst() .orElse(0); &gt;Both code snips achieve the same result. In the imperative-style code, we have to read into the for loop and follow the flow through the branch and the break. **The second code snip**, with function composition, **is much easier to read. Because it flows from top to bottom, we only need to pass through the code once.** &gt;In essence, **the second code snip reads like a problem statement**: Given the values, select only those greater than 3. From these, choose only even values, and double them. Finally, pick the first result. If no value exist, return zero. Emphasis mine. For me that's the reasoning. Less indentations and nesting and keeping stuff in your head makes code easier to read. No one here is advocating for writing 100% of your Java in a functional way. It's another tool in the toolbox.
I have two questions the come from reading this article that would prevent me from wanting to use Lambdas. 1) It is not explicitly stated, but I would assume findFirst() process the entire stream then returns the first. This is not as efficient as breaking out of a loop. 2) If I needed to step thru a lambda expression in debug mode at runtime, would it work the same as a regular function?
If you ever want to start using a highly available distributed MultiMap also take a look at Hazelcast. http://docs.hazelcast.org/docs/3.8.3/manual/html-single/index.html#multimap
The stream API has a specific method for this: peek(). Basically a 'forEach' that also returns a stream with the original contents.
Nice, thanks!
"Hello, and welcome to our creative writing tutorial.. Today we're comparing Final Draft, a type writer, these clay tablets and mineral paint in a cave. *lots-of-nonsense-pro-and-cons*" 
What's that JAVA you're talking about?
Is my computer super fast? Because it seems 20 times faster than the dual Xeon® CPU E5-2620 v3 @ 2.40GHz. Mine is i7-2670QM CPU @ 2.20GHz with Ubuntu 16.04. Sum = 2611012509269025238; time = 2854; or 28.54 ns / iter Sum = 2611034288117583861; time = 2910; or 29.1 ns / iter Sum = 2611034649197224534; time = 2937; or 29.37 ns / iter 
As for JSF: &gt;Ready to use components like Apache, Infragistics, Richfaces, etc. "Apache" is not components, Infragistics? Not mentioning PrimeFaces, which is -the- component set? This seems written in the mid 00-ties. &gt;Bookmarking facility is not considered Yep, definitely mid 00-ties, talking about JSF 1.2... 
CompletableFuture has stuff like this: https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#exceptionally-java.util.function.Function-
If you read on long enough the author reveals he was using a very old version of the linux kernel, and that on a newer version the same approach is taken as in Windows. It's 3.17.4 vs Windows 10. 
I'm mostly on your side of the fence, but lambdas are likely: a.) a better expression of dimensional concerns. If you need to express what happens to N elements, speaking about the transform is more important than getting the _for_ statement correct b.) A realization of lambda calculus, which is some really sweet theoretical work. So I have trouble using them, but I think I get why other people are hot on them.
Cool thanks
Wow! this should be the first line disclaimer in the article. A couple of weeks ago this article had good discussions in r/programming and I don't remember any one pointing it out. As someone who doesn't work in unix environment, I would have had no idea that 3.17.4 is an "old version" of kernel unless mentioned. 
I was wrong to say "very old" - "old" would do - here's the version history: https://upload.wikimedia.org/wikipedia/en/timeline/0524617db2978c680355379ec91ac978.png 
ah...thank you for clarifying it.
While it's true it's not "very old" since it's from 2014, it's still a major version behind; the latest kernel release as of right now is 4.12.4.
Please stop your **self-promoting** posts. You have gravely exceeded the threshold for self promotion without any other contribution. Also, instead of just posting tutorials, you should **actively participate** in the subreddit discussions. Just posting stuff is not acceptable. You also should read the [**reddit wide spam rules**](https://www.reddithelp.com/en/categories/rules-reporting/account-and-community-restrictions/what-constitutes-spam-am-i-spammer) because your posts constitute **spam** as per the following point: + If you flood a Reddit community with posts or comments, you may be considered a spammer. Instead, post one or two times and see what happens. These is a verbatim excerpt of the **reddit spam rules**. We want people who participate in the subreddit in discussions and not only *abuse* reddit as a self-promotion platform. Your posting history shows zero participation in threads other than yours. This is not what we want here. If you do not want to participate and only self-promote, you are not welcome here. No matter how good your content actually is. This is your first and only warning. Next time, you will be banned.
If you really want me to stop, then, of course, I will. It's not my intention to annoy hundreds of people, even though only one complained and I have a few up votes in every post I make. Nevertheless, I am posting links to software development posts in software development subreddits, I am not posting links to cooking posts or the likes. And I get hundreds of views from the JAVA subreddit (for example), which means the developers in this subreddit are indeed interested in reading about these subjects... right? So I don't get how this is spamming. Even the reddit spam rule you mention it does not say it **is** spam, it says it **may be considered** spam, depending on the contents and who reads it. Furthermore, if it's a post about software architecture layers, does it fit only in an architecture subreddit or in a DDD subreddit? Both architecture and DDD relate to the design layers, so then if I am considered a spammer for posting in both of them, in which should I ask for comments? Even LtAramaki, the guy that complained, some time ago gave me good feedback on purely architectural posts that I posted on r/php or r/java... so its kind of weird that he is complaining now. I've been posting these articles 2 times a week because I was writing them during the past 6 months and now they are all finished (I wrote 16, and writing a few more). I am interested in getting feedback, so I can learn if what I say in those posts is correct or if there are better ways of doing it, or if I am just factually wrong. I do not do this for self promotion, I get nothing out of it, my blog is a simple free wordpress blog with no ads that give me money (although maybe wordpress.com might put adds there, I don't really know nor care). Anyway, as I said before (https://www.reddit.com/r/java/comments/6q28zt/architectural_styles_vs_architectural_patterns_vs/dl1uf0k/) if the moderators wants me to stop, I will. It's ok, I have a life outside reddit. :) Wish you all a happy life, even LtAramaki. ;)
As I've said and as you admitted: + You are only posting **your own** content. The problem is that besides posting your own content, you are not participating in the subreddit in any other way. You never post links from other sources, you never take part in other discussions. Only posting your own content and not participating otherwise is the very core of the problem. You only seem to get your own content out but are absolutely not interested in other's content. Here is where the catch is. Were the old reddit rules still in place, which allowed **one** self promotion in every **ten** other contributions, you would already have been banned **reddit wide** some time ago. The *quality* of your posts is not up for discussion here. It is the lack of other, non self-promoting, contributions and participation. We do not tolerate people who abuse reddit as pure self-promotion platform. We want **active participants**. If this is not the way you want to go, we unfortunately have to part.
[removed]
So there's a performance bug in Java's currentTimeMillis() implementation on Linux, where it uses gettimeofday() instead of clock_gettime() with a coarse timer (even the TSC method is ~3x slower or worse than the coarse timer, which has sufficient precision for currentTimeMillis()). Is there a bug filed for this? It seems to warrant one.
Having a solid understanding of dynamic web projects is an easy way to advance quickly. Jsp, JQuery, and Jersey. These I managed to learn these 3 to an effective (but not great) level in a month. Jsp is like jquery but server side and in java. Jstl (a nice feature for jsp) is like html in syntax and easy to understand. 
This is surprising... From a product point of view, your ideal is to have content and discussion, which i understand, but you are saying that reddit prefers to have no content and no discussion to having content without discussion... interesting... And if someone else posts my articles its ok, but if i post them its not ok... very interesting... Maybe i can convince LtAramaki to post my articles here... :D :D :D Anyway, as i said, its your rules and i abide by them. I won't post here anymore. Live long and prosper ;) 
Wasn't the step to 4 an arbitrary one for Linux?
awesome, i appreciate the help! 
&gt; A **JS** framework provides a solid foundation ... A web application **javascript** framework is designed to support the development of dynamic websites, web services, web resources and web applications. In this article, I have scooped the information about top 4 **Java** web frameworks. Stopped reading right there. 
True, probably because those languages "lost" - it was C-like procedural with an OO flavor that ended up being commonly used, other than Javascript which is in its own corner. I've always loved the idea of Smalltalk, but it was before my time.
In java 6 they added annotation processing hooks to javac. As long as they are on classpath at compile time it works. This is why mavens doesn't need plugin
Wasn't the step to Windows 10 an arbitrary save-the-face after Windows 8.1 for Microsoft?
It was solved ages ago. And pretty much anyone I know in the industry that cares about such things have been using userland + spinlocks since about 8 years ago anyway.
I believe that Windows 7 could just as well have been another service pack to Vista, but wasn't due to markiting issues. For Windows 10 I believe that they changed the core enough to warrant a name change. As well as the release plan changed from discrete updates into a rolling release. (Windows also usually bundles big UI changes as new major versions)
I didn't actually intend this to be a perma-fork, but I've given up waiting for the owner to answer my pull request. Key improvements: 1. AESCounterRNG can now accept 256-bit seeds even without jurisdiction-policy files, and 320- and 384-bit seeds with them. 128 bits of the seed will be used to initialize the counter. 2. AESCounterRNG.setSeed now does something (as long as it's called after the constructor has returned or deserialization is complete). When the key is below the available maximum length, it's extended with the input; otherwise, SHA-256 or a prefix thereof is used to derive a new key from the old key and the input. 3. CellularAutomatonRNG.setSeed now replaces the prior seed.
&gt; 1) It is not explicitly stated, but I would assume findFirst() process the entire stream then returns the first. This is not as efficient as breaking out of a loop. The article doesn't state it, and I don't know why you'd make that assumption. The JavaDoc for Stream::findFirst() [here](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#findFirst--) says it is a "[short-circuiting terminal operation](https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps)". This means that it will stop when it finds the first entry. &gt; 2) If I needed to step thru a lambda expression in debug mode at runtime, would it work the same as a regular function? That depends upon your IDE or debugger. In the case of IntelliJ IDEA, yes, you can set a break point in, or step into (even asyc) lambdas. I can't speak to others, but I'd be very surprised if you couldn't do the same in NetBeans and Eclips, given that IDEA added that functionality back in version 13, a couple years ago. [1] 
I actually have no idea what those are. I'm a noob Java coder. Everything was going well until generics and similar data structures (maps, sets, trees, lists). Can say I got around 50% understanding. With lambdas, it's like 20%. The article really raised it to maybe 30-40%
The first thing you need to look up is "first-class functions". Then "higher-order functions". And then know that "first-order functions" is the opposite of higher-order functions.
https://github.com/Sberned/spring-flow-statemachine
Your refusal to participate in threads other than your own speaks a clear language. You don't care about the community at all. All you care about is to get exposure of your own content, regardless of its value. Maybe it's really better if you leave.
I understand your point, and its fair, you guys want people to participate. I get that, i really do, don't get me wrong. But, I am not **refusing** to participate more, i just can't. Unfortunately i have little time to participate the way **you** would like me to. I work, have a personal life and study and write a lot. Furthermore, when it comes to java i am not experienced enough to pass judgement. (Although i confess i could do better in the php subreddit) I came here really to get feedback about my thoughts on software dev practices and concepts. If ppl can give me feedback its great, if not, no problem. The voting on my posts has been nice, so i actually thought i was giving a positive contribute to this community. Unfortunately, from what you and **one** other user tell me, it seems i am damaging this community. First it was because the content was not pertinent, then cozz i was spamming, then cozz i was self promoting, but in the end its actually because i dont participate enough. So, no problem, no bad feelings, i stop posting content here. I apologize to the community for the damage i made, and thank every one for the feedback given, either by comments or votes. Sincerely, best of luck to you and your subreddit. 
I'm stoken about this. Pattern matching is a feature that should have been added in 7, if not earleir.
I see, I happen to be old enough that I was using Smalltalk for university projects, long before Oak got renamed into Java and announced to the world.
[removed]
I'd consider contributing to an open source project. It seems like you're 9/10ths of the way there really with some financial software experience - you just need to show proficiency with a particular technology. You might be better off trying to enter that kind of a role through a grad scheme if you're not that long out of university since as far as I can tell, those kinds of employers value any kind of STEM subject and often put grads through training anyway.
Yes that and maybe get Java certified
Why not work for Wall Street or the NSA?
If serious - I don't want to move to the US
Sounds like a great idea - will certainly look into that, thanks!
Take ocjp certifications and go through kathy sierra and bert bates book. https://www.amazon.com/SCJP-Certified-Programmer-Java-310-065/dp/0071591060
[removed]
Came here to say pretty much the same thing... I have no degree and have taught myself programming. Working on Open Source has been how I have become successful in the industry and now I get job offers and conference invitations all of the time. I love my work and working with Open Source...
Whatever the equivalent is there, where they use math.
Apply for junior roles as a java dev
Honestly, I really enjoy programming, did a bit of financial analysis/more traditional banking and found it a bit boring/non-inspiring. Programming I feel like I'm actually making something tangible :)
There is no magical "course", even less so in London (in UK the "courses" and certs are rightly scuffed at - for some reason in USA they sometimes are taken seriously...). You sound like you are quite far down the road already. Download IntelliJ IDEA, install SDK and start playing around. You'll want to have the following in your public GitHub account (the one thing that _will_ matter): * Some kind of spring based web app, ideally if aware of AWS, GCE or (shudder) Azure * A CLI utility or two (if you are looking at high end jobs a lot of these are about batch jobs and plumbing) * A few java open source projects clones where you have contributed a PR or a bugfix to the upstream repo Also check out various java interview questions resources and use them as a study guide. Lots of these questions are silly, but are there for a reason. Covering them will get you sorted out and through the doors and maybe in 5 years time you'll actually start working on some interesting code.
+1 for working on open source. Also try out any frameworks they might be using. Just writing code in java is important. What I've found to be even more important in hiring though, is just a general understanding of how to build software. If you know how to solve problems, it's not that hard to figure out how to do what you want using a particular language. 
In UK a java certification can be a certifiable offence. Comes under mental health act section 3.
Did you just post a link to Java _6_ certification guide? (OP - ignore sactal's post. He is retarded.)
Lol 
If you are working professionally in VBA and have a fair bit of practical experience with C++, and enjoy programming, then I'd say just start some side projects in Java. You can put this on your resume and it would also give you something to talk about in an interview. Not sure if it is the same in the UK but in the US some hands on experience is going to carry more weight than a couple courses from a resume standpoint. Since you specifically didn't ask about how to learn Java I'm assuming you feel comfortable learning on your own?
thanks for setting me straight. For some reason I overlooked the "short-circuiting" qualifier when I read the docs.
My intention was to direct him to the author: Same author different book obviously with java 8 OCA Java SE 8 Programmer I Exam Guide (Exams 1Z0-808) (Certification &amp; Career - OMG) https://www.amazon.com/dp/1260011399/ref=cm_sw_r_cp_api_W5CHzb6XVWQ69
Yep, not worried about the learning part - more worried about best way of demonstrating it to the employer :) thank you!
TL;DR The Oracle certification and the Spring boot getting started guides. Long story: Spring boot because you want to work in finance and in London. They are all moving to spring boot. Source: I work in finance in London. We lack on people that do the right thing, most people just do something that works. Java benefits are on maintainability, you need to build something that is easy to read, learn and change. I work as a Java dev for 10+ years and moved to London from a foreign country a while ago. My first employer in London confirmed my CV got more attention because of the 2 Java certs I had: Java5 and web (servlets). I read the SCJP guide fully before taking the course and was already working with Java. Can confirm I did learn a lot of details of the language from the book. Not a waste of time at all and only had to pay for the books and exam. Other than that, find something to build and put it on GitHub, build APIs, that's where java excels. Tips: - Google the best solution. Don't just build something that works. - Don't build something that a library can provide, Apache commons and Guice provides loads of everyday logic, they are maintained, tested and used by tons of people. Building something yourself will always be more buggy and less performant. - Build what's on the spec and let your business know its limitations before building it. Your business know better on what to invest effort on and what risks they can accept. - Build something limited to what the spec says and easy to change. Build only what you need at the moment. Don't try to predict the future, let your boss decide what needs to be built now. Flexible code is harder to test and change. - Test everything you build, this is not an option any more. - Use the tools you prefer regardless of licence fees, even if you have to take it from your own pocket, this will make your day better. - Always validate your inputs, people will tell you what you'll receive but then they'll change it at some point, you'll know it easily if you have validation. - Be a team player and learn devops basics, share the burden.
When I used to interview developers, I asked vey fundamental non language specific questions. If people had a good understanding of OOAD, I'd probably branch into questions about how they approached projects and stakeholders and stuff like that. For me I care about how you think and problem solve, and how you work with others. If you have those I don't care if you don't know the language or framework or whatever. So I'd recommend learning good design principles, good development principles (like testing strategies, how to release updates into production with low risk, etc), and how to more effectively deliver value to the people using your work. Having a math background is a big plus for a lot of things. I can't recommend any specific courses (there are a ton out there though); the head first books looked decent when I looked at them for someone wanting to pick up java / ooad many years ago. 
sure! Also I'm kind of curious about you (lack of) opportunity to get into Java within the bank you work for. Do they not have anyone working in Java, or is it just that you haven't been able to get the opportunity to work on those teams? I don't know exactly what kind of work being a VBA Dev entails, I can imagine anything from basic business productivity and process automation type stuff to more analytic support (like loading datasets into excel for someone else to analyze?). Maybe there is an internal move you could work toward where management's opinion of you goes deeper than your resume.
Why do we need JVM level support for fibers if kotlin has them now and quasar provides them to Java in the current JVM? Or am I not getting b something?
The practice problems for the Oracle cert and the accompanying book is what you need to stand up to interview questions. You don't even need the cert itself. The material will get you knowing the edge cases of the language, which really helps you pass for a knowledgeable dev. Also check out /r/cscareerquestions 
This is the simplest and best advice. You're already a Jr. dev - just shift to a Java based role and you'll be fine. Banks have a slightly higher level of entry for the "big stuff" (aka, a Jr. role will be harder to find) but you could always start at a non-bank, snag a couple years of experience and then head back. Still though, I'm not sure why you're targeting an industry so specifically. Do you have the perception that developers make more with banks?
You seem to have a good programming foundation, just apply for a Java junior role while doing some open source development to get around the JVM. The companies are always looking for Java developers.
If you are at an investment bank and working on VBA then I assume it is FO aligned team? Also you are a recent grad so why not just make a move internally? No one will expect you to be an expert in Java. Also tbh there is Java and then there are the frameworks. You can easily pick up the syntax and working in a team on a Java project makes things so much easier when it comes up to picking up frameworks. You will also find that large investment banks usually have their own frameworks. Anyway, what is the end goal in terms of career? Making it to MD as a tech is ridiculously hard esp as a Dev expert so if I can understand what is it that you want then I can provide a bit more info. With your background I would have thought QR or QR/Tech role would have worked well.
Apologies, I didnt want it to come across as that - I have no real preference for an industry, just theres tons of banking jobs in London. Once I seriously look into it I'll definitely look at industries other than banking too! Thanks for the advice :)
Thanks for the advice, I will certainly look into it!
Thank you for the very detailed answer, will take it all on board! :)
I work at a small-ish bank and we get majority of our solutions from FINTECH firms so theres minimal requirement for coders/developers - majority of our IT dept is essentially business analysts haha. I actually work in the Risk dept - I'm developing some VaR based Stress Test models that are easy to run ad-hoc for a non IT person - which is why we do it in VBA. I will inquire about an internal move but I'm not holding my breath - never heard of anyone using Java here.
Thats an interesting perspective - I will definitely take it on board, thanks a lot! 
I know this isn't what you asked, but consider something other than Java. My reason for saying this, is that most companies that utilize Java are larger enterprises, who are still stuck on the mindset that without a degree in CompSci or Engineering - most places will filter you out for new grads. That's specifically the culmination of mine and other persons experience. Additionally, with a background in Math, you might consider a big data route - this typically is a higher-end salary cap field. You'll probably really enjoy this. Smaller companies, design firms and startups are all about what you can prove you can do over what you've 'learned'. You'll also find they employ less archaic architectures. I know this is r/java but damn I'm glad I'm writing in Go/React. If you REALLY want to stay the Java route, buckle in, and just start picking up courses on Udemy, Lynda, Team Treehouse, Codewars, etc. Open source, fleshed out portfolio and active Git profile will definitely show your commitment. Source: I'm self taught and full-time dev. 
The technologies you learn will help you stand out. Spring, guice, hibernate, even apache commons, jetty/springboot for web shit...struts is still kind of a thing. Also the Java 8 features are super fucking important. They changed the game completely
Just added a linux build. Could someone test if it works properly?
Courses are a means to an end. Have code that you worked on available. I loathe when people come into a job interview without a [Bazaar, Git, Subversion, Monotone, CVS] public presence. Certainly you did some code for yourself you are proud to show off to the world? If you have a github on your CV, I already know much about you. You know how to use some type of version control (we might use something else but you have the basics). You are passionate. You like to work in X domain. I can see hours of your work when I get a few moments. Interviews are when everyone on the team has an open cycle. Later I can look up your work when I am ready to make final decisions on the pool of applicants. Open source contributions are awesome, but sometimes out of the scope of reality for an entry level position. Also, I loathe when my peers open up an IDE and expect someone to code on the spot in an environment they have never seen with everyone watching. I don't think on the spot coding is a representation of day to day abilities.
Build something 
No problem, btw, I could maybe hook you up with jobs in the future. Nothing atm to be honest but pm me if you need more tips or help getting your cv tidied up.
You'll want to ask in /r/javahelp. When you do make sure to include what you've tried with source included if you can - people aren't just going to give you something to copy/paste.
[Why Shouldn't I Work for the NSA?](https://www.youtube.com/watch?v=UrOZllbNarw)
In the USA certs are not taken seriously 99% of the time. The exception is networking (which many still don't take them seriously) and some sys admin position because the vendors give discounts if you have certified people. In development no one takes certs seriously that I've ever seen.
Since this is help with *Java programming*, it should, as the *plenty hints* on the page indicate, be posted in **/r/javahelp**. Please, **read** and **follow** the [**Posting Guidelines**](https://redd.it/48eykt) there before posting. **Post removed:** programming help
Also, Blocking Queues works well with the EventBus/pub-sub pattern. You can even get both of those working well together with guava.
Quasar &amp; Kotlin continuations require complicated compiler transformations and they have many limitations. Continuations really need JVM support to be good.
I don't know about other countries but Masters in Math includes algorithm design which could help OP
....something something premature optimization...... Something something Knuth.... Something something Big O before constant run time....
the irony of pressler leading the charge for contnuations is that his own package (quasar) implements continuations but doesn't expose them to the userspace. and if you happen to ask about it, you [get lied to and flamed](https://groups.google.com/d/topic/quasar-pulsar-user/3bIGT5UA3x8/discussion) for anyone that is interested in continuations on the jvm right now take a look at (my fork of kilim) https://github.com/nqzero/kilim - specifically the [Continuation class](https://github.com/nqzero/kilim/blob/master/src/kilim/Continuation.java) and [an example of using it](https://github.com/nqzero/kilim/blob/master/src/kilim/examples/Xorshift.java) to calculate xorshift 