You are of course free to do so. However, that would entirely defeat the purpose of standardisation for interoperability. It would only work on systems with that special program present, whereas `/usr/bin/env` is universal and works everywhere.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
He has listed md5 and sha-1 under "How not to store passwords" section, and the one he actually recommends is bcrypt. Did you not read the article properly or did he edit the article after your comment?
Servlets are already invented. Sorry and thanks for playing!
We all know what we really need is an EnvFactoryFacadeRepositoryImpl
In one of the previous projects we've used Hazelcast (distributed) and Caffeine (local) caches behind JCache interface and it worked out quite well. You could possibly try the same approach: program to JCache interface then just switch provider to the one that suits the problem. Any of the 3 mentioned for distributed and a more specific one for local caching.
Nope, I don't buy it. Maven is typically used at build time only, and the whole point in it is to make it easy to resolve and deploy dependencies that are not in the standard libs, so if you *do* want to include it in your app, in most cases *the very tool itself obviates the need for it to be in the standard library*. So you say "especially" useful for scripts, but unless you can give some other examples I'm gonna say that it's "only" useful for scripts. And even then, you should probably think very carefully before making a script dependent on an internet connection to work. Is it really worth it? Even if something is "basically standard", there has to be a very good reason to bundle it with the JVM. Maven might be standard at build time, but it is very, *very* rarely used at run time, so why should the JVM be bloated with it? Or would you just like it to be in the JDK not the JVM? Not very portable, at that point any script which uses it is just a script for developers so you may as well just require them to install Maven too. And what functionality would you like to be included? The entire build tool, or just the dependency resolver? Presumably the Oracle/OpenJDK devs would have to re-implement whatever subset of features you want under some javax namespace API, right? What does that duplication of work really buy us? I think very little. It's just a maintenance burden.
It looks like in your [submission](https://www.reddit.com/r/java/comments/8w91sf/java_application_development_services_offered_by/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
same here. one of our former developers introduced vaadin. after a while everything was mixed, which ended up in a massive need of refactoring. I would totaly recomend using a clientside frameworrk like react or angular
Wow, exhausting answer, thanks. Hope I'll find some time to try to setup it and play with it more. Ad multistore - the features you mentioned sound more like multitenancy, but the use case we often do in one shop is, we've shared products and categories (so maintenance is simple), but some products are country specific and enabled only for their stores. I'm clicking around there but can't find how to do that. Is this possible?
I found undertow pretty easy to use. My app is under 10mb, for everything.
It took me 2 years to get this done. Hopefully it renders alright on mobile.
There is actually both - you can configure the system to run in a multitenant setup, too. But that is not really required for setting up multiple stores. So yes, that is possible. In fact, with our existing clients we never really had to run it in a truely multi-tenant situation - i guess for SaaS it would make sense to turn it on, but in all other cases you can just configure the system to have more than one store regardless. 
In Vaadin 7/8 you can use `addStyleName` as well: https://vaadin.com/api/com/vaadin/ui/Component.html#addStyleName-java.lang.String-
&gt; One route I'm actually thinking about is just moving back to C# and using Kendo. I was discussing this with a friend last week. Now after Java licensing, and part of C# is open source, I'm wondering how the trends would look like soon. I would say it can be a nice pick to limit your choices and use one single platform, and a risk at the sametime for the same exact argument. Unlike Java, there is no way out and there are no alternatives. &gt; hackish A feature request on Github usually receives a response pretty quickly :) Give it a try when you have some nice ideas that you can't find in the framework https://github.com/vaadin/framework After all, this is how Open Source works, derived by the amazing community like yourself. &gt; When I referred to "the cool stuff" I was referring to charts and the designer by the way. There should be a lite version [..] , and I may hate the UI for all I know. In this day and age a product without a lite version absolutely screams "we don't have confidence in this system." But Vaadin offers a trial period of the **full** version, out of confidence. We know that some people create multiple accounts to extend the trial period and receive new licenses.. but most just ask nicely to extend their trial period and I'm not aware of a single time we refused such requests. I have to say that I like the lite version idea though :) Written it down as part of the voice of the community. &gt; but a massive portion of it isn't using your component system. A composition of Vaadin components into bigger components? You are talking about [this](https://bakery-flow.demo.vaadin.com/) correct? It uses **zero** external components.. 
Its been a while since I have used GWT, some of the issues i encountered were resource intensive compilation(memory, time) and difficulty setting up the dev server. React is really simple and easy to embed in existing projects, setting up a compile and dev server is really easy, fast and lean.
Clearly not written by someone with English as native language, but the amount of spelling mistakes and weirdly formatted sentences is way to high.
Thanks so much for responding. Did you use community version of Hazelcast? I really like the features of Hazelcast but some useful stuff like distributed dictionaries are in PRO version. 
Wasn't JavaFX going to be deprecated?
There are snapshots of JavaFX 11 available now (added after your comment) in a maven repository, can get them with a build tool that offers dependency management: http://mail.openjdk.java.net/pipermail/openjfx-dev/2018-July/022088.html
Nope, it's being moved out of the JDK into a separate download. It's still available, and will have its own release schedule. There's an [Oracle Blog](https://blogs.oracle.com/java-platform-group/the-future-of-javafx-and-other-java-client-roadmap-updates) on the subject that goes into more detail on reasoning.
[https://www.webtoolkit.eu/jwt/](https://www.webtoolkit.eu/jwt/) The widget-gallery is a nice display of the features: [http://jwt.emweb.be/jwt-gallery/gallery](http://jwt.emweb.be/jwt-gallery/gallery)
At the time we used pro version as the client already had licences for it. I'm not sure if this is still the case as that was a few years ago. If we had to pay for it I might reconsider :)
It’s the core TomEE developer. For him this is relatively good English really. I’ve seen much worse from him, so he either improved or had a somewhat more fluent friend edit it a little ;) 
More like yes please. We are all abt reinventing the wheel
"Is English a Good Language for Writers?" You may want to revise this before posting publicly, as It's rife with issues.
To be honest, it could be either one, when I read my comment now I realize that it's quite grumpy and I had a bad day when I wrote that. I remember that he wrote that md5 and sha1 was popular choices, and I felt the need to point it that it's bad to legitimatize algorithm that are broken and where there is better alternatives available.
Oddly enough, you need to make an account to take it...
To be fair though, that seems to Oracle-talk for "this will be abandoned soon". Open source, then lay off the entire internal team.
(Disclaimer: I work for Vaadin) Have you tried the 30-day trial for the Pro Tools (Charts, Designer, Board, etc)? Also, the demo is a great place to get a feel for the UI whether you like it or not: https://charts.demo.vaadin.com/ColumnLineAndPie PS: I'm your guy when you want to get trial extensions for extra couple of weeks at no cost :)
Then why are they bothering to separate it out? It was already open source, just tightly coupled with JDK internals.
Having an unmaintained chunk of code within the JDK is a security problem waiting to happen. Pushing it out of the JDK makes it easier to slowly starve it later. 
It wasn't within the JDK.
Would depend on the workload, right? I mean, you are effectively increasing object size, which decreases cache coherence. And while the memory access might have a high probability of hitting L1, it might not if the application is doing calc heavy work (like an encoder, for example). All that being said, I wouldn't expect too big of an impact on my apps. After all, most java apps I work on are IO bound and I wouldn't expect that too many others are using Java for things not IO bound. Just musing really. FWIW, I'm basing most of my assumptions on performance on what I remember from /u/shipilev 's videos about Shenandoah. I'm assuming that C4, ZGC, and Shenandoah all have similar performance characteristics because I believe they are all using variations on the same approach. From there I remember something like 10% hit on compute heavy ops while GC isn't running and something like 50% hit when it is running.
The best programmers are the ones that can relate concepts. X is like Y, and I know Y, so I can get up and running with X. The more you know, the easier it is to make these connections. For example, Spring's reactive streams are like javascripts promises are like some functional programming concepts. Three completely different ideas but knowing one helps you get up and running with the other two. So learning what you're learning may never come to play *directly*, but it helps you make analogies and reason about things you've never done before. Learn everything you can, and especially in school, don't stop to question if what you're doing is applicable later, because it all will be - just maybe not in the way you'd expect.
Some of my most favorite concepts are : How to name your variables and classes; the basics of on how the jvm memory management and jit optimizations work; how to use generics properly; immutability; how to stop clugging your memory with strings. Day-to-day stuff. &gt; I'm wondering if there are any practical usages of these concepts which are applied in a developer's day to day activity or are there any much more important concepts a fresher should get comfortable with, before joining a company for a software developer role. For your culture ? Absolutely. But 90&amp;#37; of the time, for busines apps, you will be better off leaving multithreading to specialists and using the stream API with parallel set to yes.
&gt; using the stream API with parallel set to yes. Wrong. Very very wrong. You can kill performance and you have no idea why.
&gt; I'm wondering if there are any practical usages of these concepts Yes there are, no question about it. If you're asking: should I study X? The answer will always be : YES, Hell Yes. The more you know, the better you are. 
 public void encode(String password) { for(int i = 0; i &lt; 10; i++) { BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder(); String encodedPassword = passwordEncoder.encode(password); System.out.println(encodedPassword); } } Wut fuck? You're supposed to provide an encoder bean to Spring bud. If you have a method handling your encryption I don't think you're doing it right. Maybe I'm wrong but...I'm pretty sure I'm not. @Bean public PasswordEncoder encode() { return new BCryptPasswordEncoder(); }
I like the spirit of this answer, so have an upvote. Should I study the nuances of Java applets and Adobe Flash? :p
Definitely. You will learn what to **not** do when designing and developing future systems. 
The same is true by doing whatever with executors.
True. Except with executors (or threads in general, even if you create them/launch them manually), you at least should have a clue of what's going on, you started that concurrent operation, the "runtime-&gt;run" code you wrote yourself. stream-&gt;parallel can do things behind your back without you even being aware of them. sure, most of the time it'll be fine. but you still need to know wtf you're doing.
Agreed. But this is true for any lib/framework you may wish to use.
80% of the code I write is just plain imperative, single-threaded business logic. Practically never need any of those ten-dollar concepts, outside of job interviews that is.
They can now release updates at a different schedule than the jdk. 
System.out.println
/r/learnjava /r/javahelp
&gt; Imagine learning piano for the first time. But you are forced to learn all the music notations first. I dont know about you, but in my past they taught notation before how to play when I was being taught a new instrument. On top of that, I don't see how Java's hello world needs any more concepts than that in C++. Its all about how the teacher teachers. Sure, a bad teacher could spend a year talking about all the semantics related to using the System. and how its a class and whatnot, but thats usually not what happens.
I’m curious what is the use case for a no op GC 
That's a deep revision number!
Please stop doing this. I wanted to know what developers who work full time had to say. In those subs, I see more students like myself
You may want that, but that still doesn’t mean it’s the right subreddit. /r/cscareerquestions is also a good resource. 
But our time is finite and if you're working for a company, you probably don't have much time learning X things that could connect to Y. You probably can only afford learning things cinched to Y directly. That is what I wanted to know regarding which particular concept do java developers seriously work on the most or what technology people work with most.
&gt;way to high.
Is there any chance of seeing artifacts for aarch64/arm linux? Is it possible to build openjfx for those archs myself, or would I be wasting my time? 
Sorry, im new to this but whats going to be the most likely scenario here? Will they push an alternative library once JFX is starved? Are they going back to swing or will they go as far as abandoning GUI libraries once and for all? 
"Write your stream pipelines to run in parallel and never run them in parallel." As I always say.
JRebel was a life changer for me... does anyone have any good alternatives? I would gladly pay for JRebel but the licenses are too costly and I can't afford them right now.
Right, but /u/nikanjX suspects that the intended release schedule is “never”, in which case what's the point?
What is this? 1992?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Are we discussing verbatim strings here? 
TyTz
Wasn't this supposed to be in 11? Also, how is it 2018 and this webpage has no word-wrap?
Oh, so your question is: Out of technologies A, B, C and D, which ones do you think my future hypothetical employer will find more valuable? The answer to that question is obviously: X. Technology X is the most valuable. However, in order to master technology X you have to rely on insights provided to you by technology A and B and C and D *all at the same time*. Without understanding A and B and C and D you cannot possibly grasp X.
The `transform()` method seems a bit odd. I actually think it looks nicer, but it could be useful for every type, not just String. It reminds me a lot of the pipe forward operator of F# and similar.
Template strings would be much more useful than this IMO. Granted, there is a big variety of code out there so my experience isn't necessarily representative, but I can count on one hand the number of times I've wanted to embed a multiline string literal in my code in the last year, whereas building strings with embedded variable values is practically a daily need and is one of the reasons I enjoy working in Kotlin more than Java these days. `"Hello " + world + ", how are you today?"` or `String.format("Hello %s, how are you today", world)` vs. `"Hello $world, how are you today?"` It's a minor thing but do it a bunch of times in a row and it becomes a noticeable irritant to have to do it the top way. If Java is going to introduce a new string literal syntax and assign one of the few remaining punctuation characters to it, I'll be sad if they waste it on something I hardly ever use, rendering the character forever unavailable for a thing I actually *would* use a lot.
Java now has different release schedule than before, a new version every \~6 months, if a feature doesn't make it into java X, they have more 6 months to stabilize it, fix issues and add it in X+n.
Yea, I wish string literals would support templating.
It's just the mailing list archives. It depends on how people format their emails...
Uh, yeah. Finally! What?
JFX won't be starved that's FUD.
it will, or rather templating is just the next step since templating is not just about formatting or concatenation under the hood; hence I think they really need to stabilize the raw string literal before anything else and yeah I wished for a RSL release just in time for JDK11, but in the end I survived without it so far, I can wait a little longer OT: but in my opinion what they really need to fix is type-erasure in generics for God's sake
I think it depends on where you're going to work on what. You may work somewhere for years without really having to think about concurrency all that much or it may be a thing that you come into contact with daily. Most likely it'll be somewhere in between. I think it's hard to say what "Java concept" I use most in my work. I think the streams API is very high up there for things worth studying, especially because it usually (as long as you're careful what you're doing and you don't force it when unnecessary) produces a lot cleaner code than the equivalent code one would've written with Java &lt; 8. Same for method references. Wrapping your head around what you can do with them and understanding when and how to use them takes a while, but can radically change how you approach some problems, so I think it's definitely worth studying.
unsubscribe please
In some application, after the start-up there is no more memory allocation (or almost nothing). So the GC is going to lose some time. Some high performance application like complex problem solving or game exploration are often like that
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Is it? I can't see it in the proposal [http://openjdk.java.net/jeps/326](http://openjdk.java.net/jeps/326)
Wonder if something like: `#!/usr/bin/clojure` will happen? 
&gt; Its all about how the teacher teaches. While I agree that 'how the teacher teaches' is one giant factor. The ceremony that Java forces you is still a factor. That new feature in Java 11 that allows for `#!/usr/bin/java` is one of many improvements needed for teaching Java to beginners. &gt; On top of that, I don't see how Java's hello world needs any more concepts than that in C++. Wrong. There are differences. For example: * Your `public` class name should be the same as your sourcecode filename. This is certainly one more lesson to teach than other more relax languages. **No good teacher can escape this fact.** And then there's a hard reality: **Not all teachers are good.** And this is where a tool like Java should help us humans.
It looks like in your [submission](https://www.reddit.com/r/java/comments/8wicaz/dinoloop_convinces_an_experienced_java_developer/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
sorry it was a thought of mine, because of some discussions about it on Twitter some time ago: if I'm able to find it I will post it here :) basically although Java started to speed up itsown releases pace, they keep a language feature per release, raw string literal is something, string templating is something else and I think there won't be anything else for JDK12 (beyond JVM fixes and JDK libs updates)
We don't increase the object size, we do everything through the object header by using a small number of bits to indicate phase and state, thus the simple compare-and-jump for every object reference. Cache coherency is not affected by this method. Our performance testing shows only if you stay *inside* L1 cache will you really notice anything. There may be some apps that work on a *very* small data set in this way but the applications Zing is used on are typically big data and not just L1. Shenandoah is different to Zing and ZGC. Shenandoah does not implement a read-barrier so, whilst they are able to perform more of the GC work concurrently they still have STW pauses (which Zing does not) and will still resort to a full compacting GC under extreme conditions giving potentially very long GC pauses (which Zing will not).
Building maven support into the language itself would cement the current structure in place, and make it impossible to evolve the maven environment.
Yes, but if string templating is not supported since string literals are released as stable, it won't be supported later because it will break backward compatibility. [https://stackoverflow.com/questions/3655424/string-replacement-in-java-similar-to-a-velocity-template#3655963](https://stackoverflow.com/questions/3655424/string-replacement-in-java-similar-to-a-velocity-template#3655963)
I got excited but then I got disappointed by login requirements.
&gt; I can count on one hand the number of times I've wanted to embed a multiline string literal in my code in the last year I wish for that feature every time I write SQL.
but such example it's not a raw string literal, maybe there will be some issues with the following: JDK12: final var value = 12; final var text = `raw string literal ${value}`; String text will be "raw string literal ${value}" let's suppose templating on RSL for JDK13: final var value = 12; final var text = `raw string literal ${value}`; String text will be "raw string literal 12" in other words if you have to use Velocity (or any other template engine), you do have to use object Strings as always. 
Logging framework: SLF4J + logback @ work, mostly log4j2 at home (side projects, etc). Logging stack is normally rELK (redis + ElasticSearch + Logstash + Kibana). 
This is not about Java at all, most quizzes are about (PL)SQL, assuming you also have knowledge about Oracle's database. There are a few quizzes about logic that don't have any language requirements though.
That's a very sad job
slf4j + log4j at work. Logs go to sumologic.
log4j or log4j2? 
group:artifact:version could be seen as universal for any package management system. 
We know it depends on how people format their emails - that's what we're asking - \*why\* does it depend on how people format their emails? Why doesn't it word-wrap them no matter how they were formatted, like almost any other website does with text?
Java.util.logging, for a library with minimal dependancies I'm working on.
+1 to this, doing the same thing on a private project.
Because who cares? It's just a basic data-dump archive, for posterity and transparency. Its purpose is to retain information, exactly as given. There is no css on the page, it just dumps the entire message content into a &lt;pre&gt; element. If you want to consume the content in a fancier way then you can just join the list and read it in your own email client. But then again, I can see why you might look at it differently. I don't think what you're saying is terribly unreasonable, I just think it's not the only reasonable way to look at it, and that it's not terribly important.
Both actually. Some projects still use log4j 1.x.
I'm not professionally working as a dev currently but a "devops" engineer. I've got you guys a gem here though. All our logs go to email. If email doesn't work the app crashes.
Join the dev mailing list and get involved. 
JavaFX is just a library now like any other. This means you can get fixes and updates more frequently. 
Same here, I use what is built in. The only enhancement I'd like to see added is a printf style logging call. For now I use something like logger.fine(String.format("This is my message: %s", message)); That unfortunately must perform the **String.format** call every time where as something like logger.fine("This is my message: %s", message) could skip that format call if log level isn't active. I know that slf4j and others have that basic ability but I don't see the need to add a dependency just for that support. Perhaps the built in logger will get that feature in the future, or I'll just create an application specific function layer to do it myself if I determine performance is impacted. 
Each line/event to email or batch?
slf4j + logback because spring-boot said so lol. all logs are aggregated in our own ELK stack because it works great and we can’t afford a hosted solution
Each event
Log4j2 with async appenders. I have logs going to the conventional files and also to CloudWatch for further processing.
I will be making this suggestion today at work. Log4j was getting boring anyway
Why would you put natural language text into a &lt;pre&gt; element though? That's not designed for that.
In one of my companies we did that too (but only for ERROR level logs). Imagine that. Coming in the morning, checking ~800 emails (~795 of them is usual, not important.). It was awesome. Never seen logs getting ignored so fast.
According to [StackOverflow](https://stackoverflow.com/a/37612418) you should be able to check if the log level is active or not. Though I just log at that point with String concatenation, so (I am not at the point where the logging would be a big performance hit :) ): logger.fine("This is my message: " + message);
SLF4J + Logback on stdout with JSON formatting, then EFK stack.
Not getting to play with fancy shit has little correlation with how fulfilling a job is.
Use a lambda: ``` logger.fine(() -&gt; String.format("This is my message: %s", message)); ```
Great! Now I know what to do before I quit :)
How about creating a class that wraps your logger ? You can create methods that accept an array of String or even objects, and make the formatting / level checking once 
Many years ago now I had the great idea to make the application I was working on send error level log messages by email. All was going brilliantly well right up to the point when I fired it up for the first time. Unbeknown to me there was a teeny tiny mistake in the code that sent the email. It sent the email just fine but then failed shortly after, raised an exception which it logged at error level and well I'm sure you can guess the rest. It took me about 5 seconds to realise what was happening and kill my application but that was enough time to crash the departments mail server. You don't really get a feel for how fast computers can do things until they start doing the wrong thing.
We use pretty much the same. Some teams use *graylog* for collections, but *logstash/kibana* are used commonly too
Has anyone tried [Flogger](https://github.com/google/flogger)?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
If you are writing a library that other people will use then you should really be using a logging facade like slf4j.
&gt; I know that slf4j and others have that basic ability but I don't see the need to add a dependency just for that support. Except by your very admission your pattern has a flaw that using Logback would avoid (or other loggers): logger.trace("This is my message: {}", message) 
Lol. It mirrors how ludicrously complex (and unnecessary) Hibernate is. 
Slf4j over logback, json formatted to stout, then AWS CloudWatch, and then DataDog. A backup of the CloudWatch logs are shipped to AWS S3 as well.
Looks interesting.
http://hotswapagent.org/ is very good too.
That's what I was saying when I mentioned an application specific function.
I stated that, but I also said I didn't think it justified having to bring in an external dependency as I have options to handle it if needed.
Yes, you can check the logging level which could be used either in a wrapper capability or inline with an if check and just not call logger at all. 
I looked at that a bit, I know it provides the same basic bypass model if the level isn't active, but haven't taken advantage of this approach.
That's what I was going to use, however it had two deal breakers for me: 1. I can't find a way to remote sync the new files (this is not a huge deal breaker since Hotswap Agent supports watching files to sync, so creating a simple app to automagically sync new compiled files from IDEA to my dedicated server shouldn't be hard) 2. It only supports Serial GC, which is a HUGE deal breaker since my use case for JRebel was keeping it running on a production server and using it for "bug fixes without restarting the entire application" For now I'm using JRebel's trial license, it is only for two weeks, but hey, better than nothing until I can find a good alternative for it. (which doesn't seem to be any... so probably I will migrate to Hotswap Agent)
It's not logging but you really want to look in to Sentry.
It provides a *better* bypass model, because it also doesn't allocate the array of varargs that your delayed format example does. A lambda that doesn't capture any variables, like this one, has a singleton instance.
Log4j with async, it's boring but boring is good for logging.
why the downvote for stating facts?
The main benefit of using SLF4J for libraries is it allows end users to pick their logging library without having it forced on them. The api jar for slf4j is 29k and has no further dependencies. Having interpolated messages is just a nice added bonus. If you're writing an application, then the choices are larger, as you'll be the only one picking the output library. 
&gt; We’ve made a difficult decision. As of July 5, myJRebel is no longer available. Wow. No notifications or communication, they just turned it off. I couldn't figure out IntelliJ was showing me jRebel license activation errors. I guess that's why. It's a one-year discount. I'd look out because I'm a long time jRebel user that use to happily pay until they cranked up the prices every single year until it was completely unaffordable. (Eventually it would have cost me more than my IntelliJ subscription, laptop lease, Linode servers, and Adobe Cloud subscription combined annually.) It's a pretty good product, but the company itself is greedy to the point where it's hard to deal with them. I'm not sure if they still do it, but their pushy used cars-style sales calls were legendary.
That works fine until you want to log a large object with a custom `toString()` implementation. 
Logging is SLF4J with logback (because that's the default from Spring Boot and it works fine for my needs). Spring Boot also pulls in the log4j-over-slf4j jar too, which is nice. We also log exceptions to Sentry so we get alerted to problems quickly and can prioritise issues better.
I actually saw it coming, they did shut down new licenses a few months ago, so it was just a matter of time until they shut down current licenses too. I would've paid for JRebel, but it is too pricy for a single not enterprise just for fun developer. If it was 99$ every year I would probably pay for it, but it is just the first year, then you need to pay 550$... yikes.
SLF4J + Logback on the elastic stack, read with Kibana. Because we inherited it. It does seem to work really smoothly though, last project used Splunk which is pretty bad compared to Kibana
I have used Infinispan in the past. It performed well for our workloads.
I'd say that's varies greatly from person to person.
In desktop app, I use my own util backed by colored System.err output, file logging, and UI. This way I don't have to pull bloated enterprise deps larger than the actual app ;)
&gt; Wrong. There are differences. For example: &gt; &gt; Your public class name should be the same as your sourcecode filename. In my experience, our school taught java with Netbeans at the start of the CS curriculum. In netbeans, when you create a new project, it asks you for a project name and then names all the files for you and creates the basic main(args[] ) boilercode. So you really could name it pretty much whatever you want as long as you conform to the naming conventions, which is a thing all languages have. Yeah, I get that not all teachers are good, I just think with java its easier to find self-help online and also there are fewer bash your head against the wall moments at getting started.
&gt; There is no css on the page, it just dumps the entire message content into a &lt;pre&gt; One `pre { white-space: pre-wrap; }` rule would make it readable preserving formatting...
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
https://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/net/SMTPAppender.html You're welcome ;)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I hate those. Make a nice app, 50K in size. Add a dependency, 35MB! Like, wtf?
You can use jul-over-slf4j, but it's not ideal. At least it's not a custom logging framework like one of the libraries we use. You can pass in a LogScanner class, but it only has a single method that just takes a `String` so you have no idea about priority etc.
Man, I'm really behind in my logging game. I don't even know how to use those frameworks. Alrgiht, another thing in my TODO list
Hosted solutions can be nice for a few niche reasons, but other than that, they're wildly overrated. We use greylog (or is it graylog?) at one division where I work and it goes unused 99% of the time. When we have to research something, it's awesome. The division I work in, we just log to a file on the server (10 app servers) and ERROR level logs also have DB connector and they go to MySQL. We delete logs after a week.
Yes obviously I realise CSS could sort it out, that's why I mentioned the omission and gave a justification for it...
Damn automoderator, you are failing today.
FWIW, I started using [jOOQ](https://www.jooq.org/) to write SQL queries in Java a few years ago and have never looked back. It is a fluent API for building queries in code with type safety and a bunch of other nice features. It felt a little weird when I first start off but quickly became second nature.
Hell yes these are important. If you do anything involving multi-threading (which a LOT of big enterprise java applications require), then you need those skills.
True but it does construct a hidden class with a static method, although that should only happen once.
I worked with a misguided individual who did that, insisted on logging POJOs (or POKOs in this case) to stdout via System.out.println. Unilaterally. Because he thought it was a good idea. Ignored log level, thread, stack trace, enclosing class scope, ability to enable/disable trace and debug logging. Even java.util.Logger beats that useless mess. 12 FACTOR!
slf4j + logback (using spring boot) Backend is the Google Cloud log thing
Thats just bulls*it
Logback and loggly with some custom code on top that produces json logs. 
Hasn't it been available as a plugin for a while? I know I've had it installed for about a month.
seriously?
I've heard and had brief exposure to the ELK stack, but never heard of it being used with redis; how does redis fit in the pipeline exactly?
SLF4J &amp; CloudWatch
&gt; Straight source, however, is prone to all sorts of obfuscation. Imagine this . . . /* This is a harmless comment. \u002A\u002F\u0020\u0020\u0053\u0079\u0073\u0074\u0065\u006D\u002E\u0065\u0078\u0069\u0074\u0028\u0030\u0029\u003B\u0020\u0020\u002F\u002A What could possibly go wrong? */ What the Java compiler sees is... /* This is a harmless comment. */ System.exit(0); /* What could possibly go wrong? */ That is because the Java preprocessor occurs _BEFORE_ the lexical analyzer. Thus even before comments are identified. 
A hello world program that does not use the letters E or O. /** * Chall3ng3, a H3ll0 W0rld program that doesn't use the * letters E or O. */ public class H3110W0rld { public static v\u006Fid main( String... args ) { Syst\u0065m.\u006Fut.println( "H\u0065ll\u006F W\u006Frld" ); } } 
How to make it happen. In /usr/bin, create a clojure.java file using the shebang. That single java source file has enough code in it to grab its parameters, and launch a suitable JAR file with those parameters.
interesting! You find its search features better than Kibana? I’ll have to check it out. Similarly to your special treatment of Error-level logs, we have ElastAlert set up to send any logs at ERROR level or with the phrase “Exception” in them to a slack channel. 
SLF4J won the war.
After it's in a Docker container who cares what technology it uses.
We basically log messages into a redis queue (as JSON), and logstash reads that. The reason for doing this is mostly scaling, buffering and resource management: We have a few 100 app from which logs are collected, and some of them are producing a LOT of logs - somewhere in the TB range.
Meetup.com is used quite a bit in my local area
Well, that's a historical debt. The designers now can't just add keywords at their leisure, or they risk breaking existing code. They only can repurpose or overload existing keywords, or put the reserved identifiers to use. The annotation mechanism precisely exists to save the day in such cases, and and IDE helps ensuring that the @Override is put where it belongs to.
@Bean
It's mentioned in the JEP for raw literals that it may be considered on the future.
A backend that has pluggable backends that has pluggable backend that has pluggable backends.
Intellij understands Angular, React and Vue.
Yup, that's it.
Lambdas aren’t implemented with hidden classes - they’re just normal methods in the same class I believe and a method handle object to them is created by the bootstrap method (not an expert).
But what about more global events? I would like to have a list of upcoming, popular conferences in Europe.
Quite a few OOP languages already had `override` keyword before Java was even born. Other languages have contextual keywords to avoid such issues regarding breaking changes. In any case Java already does some small breaking changes between major revisions, we had the Java 9 blowup for naughty libraries doing reflection, and now they are going to do another big one by removing all deprecated methods.
[Java Magazine from Oracle](http://oracle.com/javamagazine) (free) publishes a pretty comprehensive schedule of Java conferences and events in every issue.
Java User groups in your area
Checked exceptions in lambdas
SLF4J + Graylog
I have limited experience with Kibana, so I don't know that I would feel comfortable making that claim. But greylog works good and just putting the data in a DB works great.
Coursera is a pretty good place to start with, but I've read Java books almost religiously and would recommend Effective Java by Joshua Bloc after you get the basics down.i started with Core java by Ray Horstmann, then went to Effective java, and it worked out perfectly.
When you get to the bottom of it. You see Ricky Martin.
Flogger is sweet. I will try to use it in all new projects.
&gt; So you really could name it pretty much whatever you want as long as you conform to the naming conventions wrong again. Convention by definition (a way in which something is usually done, especially within a particular area or activity.) is optional. In Java it is a language rule that the filename should be the same as the `public` `class` (singular) in the file. In contrast, a convention would be that, in Java you can name your class(and file) using `camelCase` _should you optionally desire to_. If you let me. Let me improve my argument: A Programming Language that allows you to double-click on your source code file to run it makes a such PL better at teaching beginners than PL that requires you to `javac` `java` or run using a full IDE `netbeans`. For example python. In fact, I just tried. Typed python into google. Clicked `https://www.python.org/`, click download. Opened installer, next, next, next, close. Then in my desktop, create file called `hellworld.py`. Right-click &gt; edit (but see that there's also an "Edit with IDLE"). Type-in `print("Hello world!"), save. Then open cmd, go to Desktop, then `py helloworld.py`. All steps are very plain, no hidden fees. &gt; In my experience Well in my experience, all my programmer colleagues also do marketing at the same time and they're all very good at it. --- Also regarding that piano lesson example, I believe it a common believe (and I say believe since I don't have the time to look for a scientific study) that learning instrument is easier when you are able play actual songs and enjoy it at Day1. While learning instrument by learning music notation and reading sheets _ofc_ is harder. Now there are ofc exceptions like you.
[https://docs.oracle.com/javase/8/docs/](https://docs.oracle.com/javase/8/docs/) It is the only thing you need
well idk what to tell you. downloading the netbeans jdk bundle and typing "System.out.println("Hello World");" is about as easy as it gets. It took up less than half of the first 45 minute lab for all 20+ students to have that part done. &gt; learning instrument is easier when you are able play actual songs and enjoy it at Day1 yes, and you can also easily learn how to read basic sheet music in day 1. You do both. "Here johnny, this line here represents e, e is here on the keyboard, .." &gt;Now there are ofc exceptions like you. I dont think my experience here is an exception, neither my experience at a pretty common public university or my experience in learning the piano or my experience in band class. I think they are pretty typical actually.
There is not a lot of carryover from Java to Python so I would expend too much energy finding a "Java for Python devs" cladd
I suggest the fully-intereactive and free course on Codecademy https://www.codecademy.com/learn/learn-java
Bad bot
Over in /r/learnjava we tend to recommend http://mooc.fi/courses/2013/programming-part-1/ It is free and pretty good, it requires you to complete the assignments correctly in order to get the next set of assignments which provides some good structure that some online classes don't have.
May I ask what configuration did you use it in? Did you get a chance to use it in distributed cache mode? Any problems I should be aware of?
cs61bl
I admittedly have not read books on any programming language. I tried to pick up a MongoDB book, but I could not build that habit enough to retain much. Are there any advantages to reading over watching a video? What would make one book suggested more over another?
It pretty much depends on if you are a visual or a traditional text learner. Sometimes that interactivity helps visual learner and the reading aspect helps the text learner. From my experience i rank my programming books by how detailed they explain when you might need to use a function, instead of just telling you what something does and moving on.
Cool thanks for this
&gt; does anyone have any good alternatives? Unit tests
I know that Udemy is now a whipping boy, but I'm enjoying this course https://www.udemy.com/java-the-complete-java-developer-course/learn/v4/
Is the sound broken for anyone else?
[https://www.udemy.com/java-the-complete-java-developer-course/](https://www.udemy.com/java-the-complete-java-developer-course/) \-&gt; i'm not associated with or paid to promote this course, i just think it's a good one
Not having to ship unmaintained code in the jdk?
In Java it is common to pass around passwords as `char[]` and `Array.fill()` them with zeros after use. Strings are considered unsafe because they might linger around in memory longer than intended until they are GCd. Building a small utility class around `char[]` that does what you want should be easy enough. Most crypto libraries should have something ready to use available. 
That doesn't explain why they didn't just drop JavaFX entirely.
What if I wanted to clear the `char[]` object from memory instantly? i.e. in .NET, `SecureString` can come from unmanaged instance thus doesn't have to wait for the GC to kick in. 
You cannot explicitly remove an object from memory in Java, as all objects are managed. But you can overwrite primitive types with new data. `Arrays.fill(password, 0)` will overwrite the memory the password is stored in. Put this in a `synchronized(password)` block to prevent thread-local caching and you are as safe as you can get in Java. 
If only I can find something like this for other languages. 
Oracle documents 
Jenkins has a [`Secret`](https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/util/Secret.java) class. While it can't be used out of the box, it can certainly be repurposed to remove Jenkins dependencies. 
This. The difference between zeroing the managed array object in Java and zeroing an unmanaged array object in .NET is just semantics. The end result is equivalent: the secret data that was in the array is no longer in memory. The only difference is how each environment cleans and reuses the memory later.
Yeah. That 54k Slf4j will add will definitely matter. 
Yeah exactly. Did you add the documentation .jar by mistake? Even Guava, which is rediculous in size and IMHO should not be used in libraries ever, is 'only' 2.6MB in size. 
If that POJO contains sensitive information (email, names, etc.) you'll be in breach of a bunch of regulations. That alone is reason enough to just revert his change and have a stern talking with that individual. This is never ever acceptable. 
It probably messed up a join somewhere. 
You could also overwrite it with random bytes for extra security.
Why do you need a course? If you have experience in coding, you should be able to pick up a new language just from reading a few articles and picking apart some open-source software.
&gt; In Java it is common to pass around passwords as `char[]` and `Arrays.fill()` them with zeros after use. What guarantees to we have that the JIT won't optimize the call to `Arrays.fill` away?
I don't get the appeal. Just run in debug mode with intellij and most refactoring gets hot swapped without a restart.
What app can't you restart, and isn't load balanced?
This is insane versioning. I'm so happy I don't use hibernate at the moment.
Fill it with 0s then log it. 
Mhhh, something going wrong while filling them and then logging all passwords in plain text seems like a security problem waiting to happen lol.
The `synchronized(charArray)` block around the `Arrays.fill()` call mentioned in my other answer.
&gt; Most crypto libraries should have something ready to use available. E.g. [OWASP SecureString](https://github.com/OWASP/passfault/blob/master/core/src/main/java/org/owasp/passfault/impl/SecureString.java)
Minecraft Servers, you can balance it depending on your game mode (example: minigames) but other types (like survival) are hard to be properly load balanced due to the nature of the game.
I imagine ByteBuffers might be a possible solution, as they can make use of unmanaged memory 
Really ? Planned downtime for an update is unacceptable ? You can't just take one server down at a time ? Hot swapping code in sounds like the wild west.
I am seeing lot of you people using Elastic search , Logstash and Kibana. Could someone explain what is the use case of this stack in the context of Logging ?
The fact that Java manages objects and memory allocation/deallocation for you is not the problem here. You'd have to zero-out the password in any language, even C, because a `free()` does not necessarily do that for you. Using direct off-heap `ByteBuffer` is actually worse than managed heap memory, because the chances that a different process can gain access to the password after java freed the buffer is pretty high, while heap memory is likely to get re-used and re-initialized and therefor overwritten by a different allocation pretty fast in an active VM. 
 /** * Glorified {@link String} that uses encryption in the persisted form, to avoid accidental exposure of a secret. * * &lt;p&gt; * This is not meant as a protection against code running in the same VM, nor against an attacker * who has local file system access on Jenkins master.
Someone was interested to contribute and installed a gitlab server. Just in case anyone is also interested in contributing...
Sololearn
This is a really bad example, because it creates a copy of the passed in char array and does not document this behavior. So, the caller would *still* have to manually zero-out the original char-array and might get a false sense of security from using this class. The clear method is not synchronized, and the class is not `AutoCloseable` so it is easy to forget to clear it. 
Agreed, I was assuming zeroing the data before releasing it anyway. Just that with unamaged memory maybe it is easier to avoid the data getting copied by mistake.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; Planned downtime for an update is unacceptable ? This is what I currently do, except that... you know, restarting the app makes the players leave the server, and this sucks. &gt; You can't just take one server down at a time ? Well, there is only one server, if you shut it down... well... &gt; Hot swapping code in sounds like the wild west. tbh I never had any issues with hot swapping with JRebel, aside from a very slim chance of crashing the JVM when hot swapping, but this is a very rare issue. Anyway, now I'm trying to not rely too much on hot swap/JRebel and implement new stuff (like unit tests) to avoid bugs :)
The functional programing Abatraction 
Click on the link only to see that the actual version is 5.1.15. Classic 3 level semver. You're welcome
No one clicks on the link anymore, these days?
This release fixes exactly 1 issue. Noteworthy?
You know a good implementation?
No. I never felt the need. I'm doing web stuff mostly and headers are passed in from the Servlet layer as String values anyway. Adding additional layers of complexity usually does more harm than good. The password is in memory anyway.
Meh. [Medium wants me to pay for reading this article](https://imgur.com/a/J3u5Mie)
It was naive but not _that_ naive.
Thanks for the knowledge!
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Here is a good post on structuring your code with Vaadin https://vaadin.com/blog/is-mvp-a-best-practice-
You're right, all things are related, but some things are more related than others. 
Try Derek Banas on Youtube. The guy is doing a great job with his tutorials
I've learnt Java with Sololearn and it was very easy to understand.
Does that work just as good as jRebel? I noted the option to "updated classes" on frame deactivation. 
They are literally using `0` character to zero memory. It doesn't matter, but it's funny how often it's used by mistake ;)
&gt; In the end it pays off... True. And then you're stuck with JavaScript.
I liked Angular 1, starting with 2 it seems like it tries to be like React. React sucks. 
Workable editor, not an IDE.
&gt; Your team has capacity to have a separate JS developers to work on the "frontend"? Microservices are going to kill Angular and React; developers will need something like GWT or Vaadin because they will need to work front to back. Ironic but true. No enterprise wants to get stuck with JavaScript.
jhipster node yarn monolith Did I miss any? &gt; You really do not need to fiddle with [entities] if you do not want to. If it needs to run in the enterprise it will need entities or it will not pass due diligence and a buyout opportunity will go out the window.
And increasing cost.
Please going forward try and keep these questions to /r/learnjava or /r/javahelp 
I think it was more seeking best practice advice from colleagues rather than something like [Help, BigDecimal is weird!] :-)
Have an up vote.
I had stopped using it after I switched from Spring in WAR on Tomcat to Spriing Boot. The auto reload feature of Spring Boot is "good enough".
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The built-in JVM hotswapping is very limited. If you add a new method it can't hotswap.
Still handy to have both jOOQ *and* raw string literals available - jOOQ has a lot of "plain SQL" API. E.g. DSL.using(configuration) .parser() .parse(` SELECT * FROM (VALUES (1), (2)) t(v) `);
I'd hardly call it very limited, it works fine for my daily work. A restart now and again ain't too bad.
if you had multple servers, you would load balance between them. And when an update is due, just update one at a time. Th euser won't see downtime.
It used to require a desktop application besides the IDE, now it requires just a plugin in the IDE.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
u/cornerwings tried to submit this but didn't have enough karma.
there's another way to interact with C from the jvm using graalvm: https://www.reddit.com/r/java/comments/8s7sr8/interacting_with_c_using_graalvm/ this way does not require creating a native image. however, extracting data that is beyond a primitive type isn't something i've tried yet. 
I am using log4j2 but I wanna try another one. I saw most guys here recommended slf4j. What are some good things offered by slf4j over log4j2?
Wow, Java is going to be adding Value Types. That's a bit more complex than I'm used to in Java. Maybe they've found a way to simplify such a complex subject. And fibers. Nice! I used µthreads at work. It was in house, but it worked quite well. Anyone who is doing any serious network programming will rejoice when this one hits.
Does the guide talk directly to the db or do you have a server running that exposes an api? Assuming the latter I'd I'd write a Web app in something like react or angular, assuming your senior manager buy into it.
I'd take a look at https://github.com/update4j/update4j.
Vaadin is pretty awesome if you want almost pure java but a smart Web UI. 
Unfortunately no, there is no separate server with API, currently everything is bundled in the GUI app. Great design, I know... My idea is to extract the logic and (somehow) create the APIs that frontend would use.
Please, follow the plenty hints on the page and post such questions in /r/javahelp
The way to go in the modern world of web development is to use a pure JavaScript client (using something like AngularJS) with a REST API and a java backend based on the framework of your choice (such as Spring or Jersey with Guice). Personally, I would stay away from frameworks that dynamically generates web pages. They are limiting and ultimately not worth the “convenience” of allowing you to use Java or a Java templating language in my opinion.
Is that mean that with Fibers we can use JDBC as a non-blocking api and have the same "performance" as Node.js 
Yeah sololearn is great
You could use Java Native Packaging and provide the app as a stand-alone application. 
You can find things on meetup.com by subject which removes the geography from the results.
If you're pressed for time, the Java Native Packaging mentioned elsewhere in the thread is your easiest solution. You'll likely have to get past the signing requirements of the native OS you're deploying to, but that's just a matter of biting the bullet, spending the money for a cert, and updating your build process. If you have *any* amount of time to do otherwise, turn your DB calls into JSON-over-HTTP services, and start validating identities and session validity server side. (And hope that whoever is responsible for auditing your PCI DSS compliance doesn't see this post, because it sounds an *awful* lot like you're only evaluating these things client-side right now.)
(Non-free)
Yes, I have come to the same conclusion, but the choices are overwhelming. There React, angular, vue... It’s hard to decide what would be the best one four our needs since we will probably not use many of the features. Currently I lean towards Angular + Jersey since we already have experience with Jersey. I will try to make proof of concept for one or two most used functionality. If you can recommend any good tutorials it would be greatly appreciated. 
I would recommend Angular 6 or React based frontend - SPA web apps allow pretty straightforward migration of existing workflows (quite contrary standard Spring MVC based Request / Response model), as it's still application running on client side that doesn't throw away all of it's state when it loads new page. The real pain with Request / Response based MVC solutions is that you have some of the state on the client, some of the state on the server, you need to write part of the frontend in JS, rest of the logic is in Java. That's why it's so much better to have everything in the client and just use REST services when you need to do something on the server. It also has better performance, client can cache lot of data, it has very low latency as it doesn't need to contact server to perform every operation. We have rewritten several Swing / SWT apps to Angular and it was pretty straightforward task - we could keep most of the app logic and workflows and in the end, it was just different language and widgets. And as we're Java devs, we got very easily familiar with TypeScript and Angular (strongly typed language, dependency injection etc.). 
Yeah, I love Java, but those are the times when I wish it was just little bit less conservative. Template strings would be really great for lot of use cases.
This is unfortunate, because JavaScript is a steaming pile of crap, and browsers are wildly inconsistent in their bugs and supported features. This is a truly dark timeline for app developers…
That doesn't really sound right - you need to handle escaping when working with raw values in SQL, otherwise you might very well have a SQL Injection. And parametrized queries are superior in terms of performance and security. But nevertheless, there are many useful cases for template strings in Java. 
Can't wait for the miracles 5.1.1.5.2 will bring! :-D 
Maybe little OT, but I just wish they'll merge the Project Loom really soon... Current Java approaches to concurrency / async processing aren't really great...
Pity there's no longer any good way to make GUI apps with it, now that JavaFX is being semi-jettisoned. Browsers as app platforms are a dumpster fire.
I believe this can't really be implemented in Java in a library - GC can move (copy) your data, also there is nothing preventing the OS from swapping it to disk (and no OS securely cleans the swap by default).
That's wrong and insecure. How do you know GC didn't copied the array from one location to another? How do you prevent OS from swapping the memory ? I don't believe there is any way how to implement this in Java without JNI (and even then, passing the data to Java is going to be very tricky). 
Definitely sounds like good idea to split the code base into server and GUI (no matter what you choose). You can also use Swagger to automatically generate the REST API documentation and/or client stubs. 
The common answer is web based, and honestly something like GWT gives a pretty good alternative if you are predominately a Java shop. I ran into an issue years back where we started with a GWT application doing similar things with data. We started running into issues with the amount of data some of the queries would pull in because what would happen is the browsers would think a given JavaScript function was not responding and kill the pull. So we ended up switching off GWT and over to WebStart talking to our backend to get around the problem. If you decide to go with web based solution, either something like GWT or JavaScript with Angular, make sure you don't run into those type of issues. Perhaps we need something like an updated Castanet Java distribution tool, something perhaps like the Minecraft launcher that is a small local install that simply fetches the jars/libs needed for a given version on request.
You can buy time by using getdown which can be a replacement for java webstart. In parallel you can start migrating to a newer ui framework, this will help in maintaining business continuity without the risks of a big-bang approach.
It's much better now than it used to be. And more important - you don't need to write the code in JS (in fact, my personal opinion is, you actually shouldn't if you're doing big project you need to support for years). You can write the code in TypeScript or Dart and just transpile to JS (think of JS as an modern, web assembler :-D). TypeScript borrowed lot of ideas from C# (actually, same guy designed both) and Dart is based on Java syntax. Both can provide type safety. And if you use framework like Angular, it will handle most of the polyfilling / transpiling to legacy versions of JS / ES automatically for you with it's tooling. It's not perfect, but far from the terrible experience that was called JS development just couple of years ago. 
From my experience, migrating from Java GUI to Angular is much more easier for devs than migrating to React for example. Lot of similarities, lot of similar concepts. Also, check out Angular Dart - Dart is language that Google created and borrows lot of ideas from Java. And it's fully supported for Angular - [https://webdev.dartlang.org/angular](https://webdev.dartlang.org/angular). 
If you're new to the whole js thing, I'd go for angular and typescript. Angular is fairly opinionated so it's easy to pick up. Typescript makes the transition from Java easier in my experience. 
I believe it would require some update to at least driver code - but I am pretty sure everybody would be willing to do that as the advantages to fibers are really great.
Why do you think so ? JavaFX was just moved outside core JDK, but nothing really changed. The fact is it never belong to the core JDK in the first place. But it's true Swing / JavaFX seen very little love for few last years. 
But then you would have to do shitty JS / TS.
&gt;Nice! I used µthreads at work. It was in house, but it worked quite well. Anyone who is doing any serious network programming will rejoice when this one hits. Just curious - why didn't you use Quasar instead ? Btw, the guy behind Quasar is now working on the Project Loom at Oracle :-) 
Spring Boot with Thymeleaf
I share your frustration over the ecosystem. I mean, it really is terrible and NPM is like a freight train of shit cutting through your living room at 4am. Whenever I do front end development I find myself spending an inordinate amount of time dealing with stupid shit compared to backend development. However, TypeScript is a real time saver when it comes to building anything but the simplest of apps (and if it isn’t to your liking there are a variety of other decent languages which transpile to JS) and browser inconsistencies are much less of a problem than I can ever remember. I mean mobile puts a bit of a wrench in that, but I don’t know how much of a concern that is for someone doing an emergency port of a JWS app...
Are you determined to do a full port to new tech? I mean, if this app sees regular development and new features it would probably be worthwhile since I imagine it is hard to hire desktop Java devs compared to web technology specialists, but if it basically works and is in maintenance mode, why not fix just the broken part and replace the webstart part but keep the core app as a Java thick client?
&gt;The target is, Java as one of the best language for data science applications. I'd argue with that. Java's syntax is very verbose, and writing mathematical formulas, or even complex algorithms is pain in the ass. Exhibit 1: [quantum tunnelling calculations which I wrote in Java when I was still at the university](https://pastebin.com/rx6Txwk3). One simple solution here is to go functional here - that might make code more understandable. However the functional capabilities of Java are crippled (comparing for example to Haskell), so there is still a big room for improvement.
You should see how [Nd4j ](https://nd4j.org/)has been made inspired by numpy!
Have you tried running it like this? I tried with a small example and it gave me a null when I made the getMember call. Not sure if I got some file paths wrong but after seeing Thomas’s tweet, I assumed it can’t be done and didn’t attempt further debugging. (Your example seems to be in Scala so not sure)
Or the reality that most software is over-engineered.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Right tool for right job, why would you want to use Java for ML?
I'd go farther and say there is very little reason to use Java in a data science application at all when we have Scala and Clojure.
I think the source could be made much more readable in Java if lambdas and static imports were used. But still - Java isn't Haskell and for the record, it shouldn't be. There are very valid use cases for both languages and I am more than happy to have the choice :-) 
It's not jettisoned. It's stand-alone now and is being updated continuously. In fact with native packaging and jlink you can now build fairly small truly stand alone applications (not requiring any installation)
Are either of these widely adopted in DS companies/applications? I'm learning Scala right now. I enjoy it, but question whether I will ever be able to utilize it in a corporate setting.
Good stuff, Rahul. I'll be looking into this more. I think there are some ways to simplify the api a bit more to make it less verbose as well.
&gt; the guy behind Quasar is now working on the Project Loom at Oracle That guy is literally the speaker in the video in this post.
Yeah please dont make java another c++ that tries to incorporate every paradigm ever created
Twitter uses a lot of Scala and Walmart uses clojure extensively. It's out there but a little niche. I'd say 90%+ of the data science and deap learning jobs I see are Python but that might be partially a West coast thing. Learning Scala should teach you functional programming which I personally think is the most important thing you can learn for DS.
I don't think C++ has tried to do that. It's a hybrid language, just like Java is now. They both have some imperative, some OO, some type parametric, and (lately) some functional notation. And in both languages, those features don't always play well together. C++'s biggest problem, and it's biggest strength, has always been binary compatibility with C.
 return conditionA ? conditionB ? result1 : result2 ? conditionB ? result3 : result4 And more nesting, if required
Yeah, I'd like to see Loom in JDK too :)
I have. I'm p certain that you have a wrong path, I used a relative path in my example. Try using the absolute path to the bc.
Hi!
Prepared statements still accept SQL. They look like this for me: private static final String SELECT_USER = "" // + "SELECT hash, id " // + "FROM user " // + "WHERE name = ? " // + "" I would definitely prefer this: private static final String SELECT_USER = """ SELECT hash, id FROM user WHERE name = ? """
We wrote it with thread pools 9 years ago, and in C++. I worked for *The Internet*. We were using µthreads mostly for DNS server software and the like.
Ah, sorry. OP was talking about template strings and I misread what are you quoting and assumed it was about template strings. Which are terrible idea for SQL statements. Multiline strings are of course fine and I would welcome them as well for writing complex SQL / JPQL / whatever queries. 
I don't have it (so obviously haven't read it), but I heard from other people that it's quite good: [https://www.apress.com/us/book/9781484231647](https://www.apress.com/us/book/9781484231647)
&gt;(And hope that whoever is responsible for auditing your PCI DSS compliance doesn't see this post, because it sounds an *awful* lot like you're only evaluating these things client-side right now.) As much as it sounds surprising, there is nothing in PCI DSS preventing you doing exactly that. Although, there is no discussion about the fact it's terrible practice from security point of view (the only mitigation would be having the user login into the database with his credentials and handling the ACL there - model that was common in 90s)
Not looking to start flamewar and for the record, I like Spring MVC with Thymeleaf, but I believe SPA web app solutions are usually easier for transforming desktop applications as you can keep most of the workflow and benefits (like client side data caching) from the old desktop app.
&gt;C++'s biggest problem, and it's biggest strength, has always been binary compatibility with C. And compatibility with C++ as well. The language has to maintain at least some degree compatibility with older C++ version. The language could benefit greatly from simplifications. It's still great language though, although, I like Rust more now :-) 
Yes, the app is regulary upgraded with new stuff so I believe that port to new tech would be the best way forward. But we would probably do this gradually and first port the part of the app that is used by most users.
I said “*semi*-jettisoned”. It's standalone and that's great (building OpenJFX 9 and 10 was a *bitch*), but who's actually going to work on it now? Does it actually have a future?
Java's functional system supports multi-threading natively using whatever thread pool you defined, so this actually makes it potentially very powerful when it comes to tuning and scaling artificial intelligence calculations.
You must not have to support IE11 and Safari, then. Also, CSS layout is still a complete joke. I ran circles around that garbage with `GridBagLayout` in the early 2000s!
&gt; And if you use framework like Angular, it will handle most of the polyfilling / transpiling to legacy versions of JS / ES automatically for you with it's tooling. Like with Babel? Have you seen how many things Babel doesn't support? All the quirks and caveats with what it does support? That abstraction leaks like a sieve!
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I had Dart and TypeScript in mind :-) And honestly, I don't really see the issue there, corejs will provide vast majority of the stuff (except things like subclassing arrays and proxies - stuff that I really don't need), so I really see no issue here. What quirks and caveats are you talking about ?
[insall4j](https://www.ej-technologies.com/products/install4j) is another fine option. It's fairly trivial to provide a desktop launcher for JWS apps -- don't start over from scratch just because JavaScript web frameworks are trendy. The JS ecosystem is both shittier and more volatile than Swing/JavaFX. If you think migrating now will future-proof app, you're likely mistaken. I mean, whatever JS framework you choose today will probably be either deprecated or radically altered in another ten years' time.
There are also some code samples on [github](https://github.com/richardstartin/vectorbenchmarks) (they do require you to build the vectorIntrinsics branch of the panama repo.)
[IcedTea-Web](https://icedtea.classpath.org/wiki/IcedTea-Web) implements the JNLP specification and is available for Linux and Windows. Additionally Oracle intends for their JDK to be equivalent to OpenJDK by Java 11 and Red Hat provides a [OpenJDK ](https://developers.redhat.com/products/openjdk/download/)distribution for Windows that includes IcedTea-Web (in Java 8u151+). A standalone IcedTea-Web MSI Installer for Windows is available [here](http://icedtea.wildebeest.org/download/icedtea-web-binaries/1.7.1/windows/). Oracle's implementation may be deprecated and removed, however the final JNLP specification will be perpetually available.
Logs are fine as long as they are read (and understood) by someone. Elastic + Kibana makes this possible if you have thousands of logs by displaying only what is important (this is where Elasticsearch come in play) Also if your logs have anyting to do with business logic Kibana helps visualize what you do. For example lets imagine that you log a specific message each time we sent an SMS to a client among other unrelated stuff. Using elasticsearch we can easily search for those messages in files distributed on various servers and Kibana helps visualizing that log message (per day/month etc)
https://www.manning.com/books/microservices-patterns 
CTRL+2 for extracting fields, variables and methods. I bound CTRL+2+C for extracting constant as well. 
I've not used it yet - but I'm quite intrigued by Google's new [Flogger](https://google.github.io/flogger/) API - the "fluent logger", which aims to to keep a more cleaner/consistent API: ```java logger.atInfo().withCause(exception).log("Log message with: %s", argument); ``` Instead of overloading `.log()` with throwables that mess up var args, or a custom `{}` format string, you ultimately end up with an interface with very few `.log()` overloads that take a standard printf style format. Want an exception logged? That's injected via a call to `withCause()`. I also like the idea of the `atInfo()` style methods, if that log level is disabled, then a NO-OP log object is returned so no need to litter the code with `if debug` type constructs. If the argument you're passing to the log line is expensive to render, you can wrap it with `lazy( () -&gt; some.argument() )` which will defer the actual rendering. There is support for system logging, and log4j logging ( and probably wouldn't be hard to add an slf4j backend as well ). Code wide it may be more verbose, but it does seem to give more clarity - and I love some of extra features, like `atMost`. 
As much as would be required for the described product is free, no? https://vaadin.com/license
"Big data is a lot like teenage sex: everybody talks about it, nobody really knows how to do it, and everyone keeps their embarrassing stories to themselves."
You are right. Java is way too verbose to be used in data science. Maybe Kotlin is a good compromise between java and python. 
You could definitely work on your code style, it's all over the place. You have a lot of implicit if else blocks where I assume you only mean to execute the following line (which is very oddly formatted anyways) but you are only using the indentation and new line to differentiate these which is made even harder to read since you also using new line on brackets which is also an odd choice since the open braces aren't even in line with the close braces . 
The dev group is pretty active
Java needs a static set of operators for Objects extending Number like BigDecimal etc...
I'm currently working through this one. Pretty good so far, I'd say. https://www.manning.com/books/spring-microservices-in-action
Thanks
https://www.goodreads.com/author/show/1435036.John_Carnell
I work with the author of the book. I highly recommend it.
IntelliJ community edition. Made by same creators as Pycharm. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
So umm...$2.50/hr? yea that’s not gonna happen.
lol 100$ week
is this a joke?
Thats not the normal going rate?
Do you mean the openjfx-dev mailing list, or…?
blockchain + buzz words + 100$/week?!! incredible 
Just to be clear, I am not talking about full time, may be just few hours here and there. My prime goal is to find some one who likes crypto in the same way that I do, so it's not really about the money...
You need investors, not developers. You get the developers after you have the money.
Not to be an ass, but if you want people to trust your crypto coin.... it's spelled "peer to peer". Pear is a fruit.
LOL
Did you start a thread in the bitcointalk forum?
PyCharm is made by Jetbrains. They make a wide variety of IDEs. Their flagship project is IntelliJ Ultimate which actually includes PyCharm as a plugin. There is a free version called IntelliJ Community Edition which is all a beginner probably needs. In the interest of completeness there is also Eclipse and Netbeans. However, since you already use PyCharm you will be right at home in IntelliJ Community.
This does not even have Evey elcipse users favorite. Alt + F4
You don't have to rewrite your application just because your deployment mechanism is being deprecated. Just use javapackager to create a self-contained package. https://docs.oracle.com/javase/9/tools/javapackager.htm Do note that javapackager is also being deprecated but there should be an open source equivalent before that happens. If you don't want to use javapackager just create a fat jar with gradle or maven and make that available for download.
IntelliJ is by far the best 
Because there is still a need for desktop apps.
tnx, but I can't edit this post. I hope you like the rest of it
I am a dev not a marketing person, I do my best
Yep, way easier to say then to accomplish 
I have few in cryptocurrency and blockchain devs. I figured that what I really need are java people
Alt + tab to Intellij amirite
I would tell you I prefer netbeans but you will have to click the plus arrow after Jetbrains marketing team gets done with me.
- First what makes your solution better than what is already out there? - Second, I assume you are looking for developers in really poor countries
And if you have a valid .edu email address, Many of the Jetbrains products are free, including the IntelliJ Ultimate edition.
&gt; GridBagLayout At work, some applications are adopting JavaFX, which doesn't have GBL/GBC. It doesn't have layout managers at all. According to the people who are using JavaFX willingly and like it, that is a good thing. GBC is just difficult and has too much boilerplate. These are also the people who insist on using the Netbeans GUI builder. Their Swing application is also one of the only ones [where I work] that falls apart as soon as it uses anything but the Windows theme. I just wait for the day that Oracle, Microsoft, or Apache changes things enough with a new version of something [Java/Swing, Windows, Netbeans] that their stuff falls flat on it's face. Or a client wants to use their application on literally anything but Windows. That will be a great day for everyone else who has been telling them they are doing it wrong.
Comes in seventeen seperate books and no table of contents or index
The have the same key bindings across all those products ( I think ) so you won’t have relearn commands
We just use GitHub issues to track new features and bug fixes. It's a solid way to organize consumable units of project work. Is that what you mean?
Sounds about what I’m looking for. I’ll have to check it out, thanks!
Go with VsCode. Probably the best editor out there and it is not going to eat your ram like intellij
Isn't VsCode built on the infamously memory hungry electron ?
Oh maybe, that I don't know. I have been using both (intellij and vscode) and vscode is a joy to use. I will not deny that intellij is great for all the little nice things that it has like when refactoring or navigating code but overall I always find it overrated. I use it because it is what my teams feels comfortable using.
Well... PyCharm was made by the same folks who built IntelliJ.
Give eclipse a try
What you're talking about is kanban or scrum board. Easiest one to use for small and personal projects is Trello or a bunch of sticky notes. Read up in agile practices and agile software development lifecycle. (SDLC)
I highly recommend it. I also recommend, in general, you start your issues with a single short sentence: "In order to &lt;achieve some goal&gt;, we should &lt;do some thing&gt;" Then you include a bullet-point list of "acceptance criteria", AKA things you think should be included in the code code you include as a part of that issue for you to consider the issue "done". Then you add any extra commentary/links at the bottom. You don't have to be dogmatic about it, but it's a helpful template to process your ideas. Sometimes my GitHub issues are as short as "In order to keep the project doc clean, we should refactor the README". Which is incredibly bland, I know. But if you have a GitHub issue (or pull request) associated to the code you check in, that way you can reference those issues later in *other* issues later. Plus you can always go back and add comments to GitHub issues, even after the code was merged in. 
I don't think that fibers will change any API from blocking to non-blocking, it's just that having a blocked fiber isn't as bad as having a blocked thread. But yeah fibers should give around the same performance without async/await stuff. I think the reason why async/await exists at all (not sure about this as I'm pretty new to programming and wasn't there when async/await became a thing) is because having all your running threads in a blocked state is a waste of resources and you can't create more threads because thread context switching is expensive, thus async/await was the solution. With fibers, context switching is not expensive, so you can create a lot of fibers without worrying about context switching polluting your CPU. Basically to a programmer threads and fibers should be the same, it's the implementation that's different. Your fibers will still get blocked, but it's not really a bad thing as you can create more fibers to run other things while this one is blocked. 
Trello is exactly what I am looking for, thank you for your help!
Yep VSCode is a great editor. But I suspect it will be sometime yet before it can do all the java-specific stuff that the more integrated IDEs can do.
Please, for the future: follow the rules and ask such questions in **/r/javahelp** as is indicated in many places on this subreddit.
Sorry about that, I thought r/javahelp applied only to problems with the actual code, not questions in general. Thanks for letting me know though!
Questions like this are why I left r/javahelp. OP can’t even Google search or read the ‘About’ section of this sub before posting.
&gt;logger.atInfo().withCause(exception).log("Log message with: &amp;#37;s", argument); this looks really bloated to me, too much typing and harder to apply with live templates.
i don't ge-- ooooohhhh
On the outset yes, it is seemingly more bloated. But there's no reason you couldn't just: ``` var info = logger.atInfo(); ... info.log("foo"); ``` A majority of log entries probably don't contain stack causes, so that part of the call would be elidded. The reasoning behind those API choices are [documented](https://google.github.io/flogger/anatomy) on the site. Doesn't seem to be that it'd be that much harder with live templates.
Always nice to meet another Netbeans fan...
Depending on what you want to do in general it’s not about advanced mathematical skills, it’s about being organized and learning how to structure your code. I remember my professor explaining all the sorting algorithms like bubble sort, merge sort etc. and added a remark that both of these are trying to achieve the same target and both are running on the same machine so why is the other one faster? Yes you can definitely understand algorthms try to understand it by picturing them line up at the grocery store or something. Visual representations help a lot in your learning.
Take my upvote you sneaky bastard. 
Javascript is very flexible but that just means you have a higher chance of naking mistakes. Reason for Nodejs rise in popularity because of the asychronous style of programming and achieving high through put and even frontend people can hop on easier since it is the same language they are use to writing in. Well Java also supports asynchronous calls if you look at Project Reactor for example so it can also achieve the same thing. They you can also utilize multi-threads.
True. That was 8 years ago and I am not writing such "balls of mud" anymore. ;]
PyCharm effectively *is* IntelliJ with the Python plugin bundled with it and with bits of Java support disabled. New features turn up in PyCharm and after a bit of delay the Python plugin gets released with the same features.
Netbeans
Sam Newman's book [Building Microservices](https://samnewman.io/books/building_microservices/) is the best book I've found on the topic, hands down. Beyond just the idea of microservices, I found the book described what agile system architecture looks like. I refer back to it all the time.
I recently purchased and read this 'Learn Microservices with Spring Boot: A Practical Approach to RESTful Services using RabbitMQ, Eureka, Ribbon, Zuul and Cucumber' https://www.amazon.com.au/dp/B0782L1GDR/ref=rdr_kindle_ext_tmb Really great book imo. Its the first time I've actually understood what microservices are since the author guides you through coding a real example and talks about pros and cons. I'd recommend this to anyone who wants to code their first microservice by following along rather than just reading the book without doing anything. 
That's soo true...
You can everyone them to use google authenticator. It's pretty straightforward to setup. I saved these instructions from somewhere I can't remember: **Install google authenticator:** sudo apt-get install libpam-google-authenticator google-authenticator Say yes to everything and save the scratch codes. #Force users to provide login with google auth sudo nano /etc/pam.d/common-auth #Add this line to the end of the file auth required pam_google_authenticator.so sudo nano /etc/ssh/sshd_config #Change this line ChallengeResponseAuthentication yes #Save and restart sudo systemctl restart sshd.service If you can login from another terminal, proceed: sudo nano /etc/ssh/sshd_config #Add the following UsePAM yes AuthenticationMethods publickey,keyboard-interactive **Then:** sudo nano /etc/pam.d/sshd #add this line to the top of the file: auth [success=done new_authtok_reqd=done default=die] pam_google_authenticator.so #Comment this line by adding a # in front of @include common-auth #@include common-auth #Save and restart again. sudo systemctl restart sshd.service Logging into a new SSH session should now ask for the verification code. You'd probably have to look after something specific to your case obviously, but as you can see the setup is pretty straightforward
&gt;At work, some applications are adopting JavaFX, which doesn't have GBL/GBC. JavaFX `GridPane` has roughly the same capabilities as GBL. It has more sensible default behavior, though, which can reduce boilerplate. &gt;It doesn't have layout managers at all. Sure it does: the various `Pane` subclasses. The only big difference is that, instead of layout managers being separate objects, they're built into specialized equivalents to `java.awt.Panel`. It's a more elegant design, but it's not that different. &gt;These are also the people who insist on using the Netbeans GUI builder. I once made that mistake. The result was a horrible mess of inscrutable generated code, for which the only editor barely works. What a nightmare. Scene Builder is much better. I made that mistake because, at the time, said GUI builder was new, hot, and shiny. They called it “Matisse”, and touted it as a great advancement in GUI design tools. I drank the Kool-Aid, and only realized too late that I had made a big mistake. &gt;Their Swing application is also one of the only ones \[where I work\] that falls apart as soon as it uses anything but the Windows theme. That's not Swing's fault. The aforementioned GUIs I designed with NetBeans' GUI builder work fine cross-platform (Windows, Linux, Mac). …But not without a lot of struggling to make sure everything is properly lined up, resizes correctly, and the like. NetBeans makes it very easy to design a GUI that will completely break if the theme is changed or the window resized, and hard to design one that won't. JavaFX has a similar trap: `AnchorPane`. Do *not* use it. It's fixed positioning, which almost guarantees that your GUI will not resize properly. Unfortunately, Scene Builder makes it seem like it's *not* fixed positioning. It helps you lay out nodes in an `AnchorPane` with spacing guides and snapping, giving the impression that the nodes are positioned and sized relative to each other. Try previewing your layout and resizing the window, though, and you'll see that it's a blatant lie—they only have pixel offsets relative to the edges of the pane! [That's not to say that CSS is any better…](https://developer.telerik.com/wp-content/uploads/2017/05/css-mug.jpg) &gt;That will be a great day for everyone else who has been telling them they are doing it wrong. They certainly were, but again, their choice of GUI toolkit isn't what they did wrong.
This is *off-topic* as it is not directly related to Java. Please, direct such questions to more general subreddits, like /r/learnprogramming or /r/techsupport. **removed**
Sure, sorry
We use Jira for this, but if all you need is a kanban board, it may be a bit over-sized.
Is there one, that installs IntelliJ? Would be my favourite one.
Yeap I used to develop for a big time hardware developer, whom used IBM db2 as a database for some sensitive data. The tool used to manage the database is built on the same framework as Eclipse. It would Leake data like crazy. Had to close the app and reopen it every few hours... Broke down and wrote my own command line tool for it... 
They say notepad++ because they want you to code without the assistance of an IDE, no code completion no compilation error checking. This way you get to solve your coding issues. Once you have mastered that you can switch to a full blown IDE, I use Eclipse, it works fine for me intelij is also very good but it is commercial so there is that. 
Do a kickstarter or go fund me campaign. I’ve seen people I know irl do it successfully for stuff I never thought would get funded. It just takes some tenacity. 
I think it's a very poor book. It's based on the naïve notion that everything that is not micro-service is bad-evil-awful monolith, no matter how one can manage code in modules and decoupled components. It doesn't provide any valuable practical advices. For example, not even a page on security, nothing on testing, only few words on versioning. I found it very fluffy.
Eclipse vs IntelliJ - who wins?
i think if you have $150 or your company has $500 its a worthwhile investment to use IntelliJ.
This is not about OOP, but about *Design Patterns*. Though related, they are completely different concepts. Further, the *Builder pattern* is a classic pattern for Pizzas.
`Observable` was depricated in Java 9. Use `PropertyChangeListener` or similar - or even better go with the [`Flow`](https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.html) (pun intended).
We use Redmine
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
🚨Run! It is the reddit police! 🚨
Spring Microservice in Action Cloud Native Java Building Microservices - All theory.
Functonal and Reactive Domain Modeling by Debasish Ghosh. 
Community edition is free 
&gt;JavaFX GridPane has roughly the same capabilities as GBL. It has more sensible default behavior, though, which can reduce boilerplate. The big thing I found it missing was GridBagConstraints.RELATIVE. Without that, it really isn't worth using over nesting other types of panes. That was one of the big advantages that GBC had IMO: You can just throw things in sequentially. and it just works. &gt;Sure it does: the various Pane subclasses. The only big difference is that, instead of layout managers being separate objects, they're built into specialized equivalents to java.awt.Panel. It's a more elegant design, but it's not that different. I know. I don't find it very elegant; each Pane works slightly differently from every other pane. With Swing's Layout Managers, you have one panel that works the same every time, the only difference is what parameter you pass into the add() call for the layout manager. This means you can have one specialized panel for your framework that adds certain special features (such as holding a key combo + hovering to show extra info that is useful when attempting to track down a component). With JavaFX, you would have to individually reimplement every pane, Including any custom ones with a custom layout. Again, all of that is avoided on Swing by pulling layout managers out of the Panel. &gt;I once made that mistake. The result was a horrible mess of inscrutable generated code, for which the only editor barely works. What a nightmare. Scene Builder is much better. &gt;I made that mistake because, at the time, said GUI builder was new, hot, and shiny. They called it “Matisse”, and touted it as a great advancement in GUI design tools. I drank the Kool-Aid, and only realized too late that I had made a big mistake. I would say that they just made a mistake years ago, but they continue to use it for new parts of the application. And they continue to make the same mistakes that causes the UI generated to not work well on other L&amp;Fs. Gui Builder &amp; GUI Builder code is actually banned from most other applications since it is so bad. &gt; That's not Swing's fault. The aforementioned GUIs I designed with NetBeans' GUI builder work fine cross-platform (Windows, Linux, Mac). I agree. I completely blame GUI builder making it easy to create panels that don't work well when resizing and hard to make ones that do. Their application is basically the only one with that issue, we have like 10 or so other large Swing applications that handle it just fine. Most of them are developed in Metal and actually used in Windows theme by the end-users. &gt;JavaFX has a similar trap: AnchorPane. Do not use it. It's fixed positioning, which almost guarantees that your GUI will not resize properly. Unfortunately, Scene Builder makes it seem like it's not fixed positioning. It helps you lay out nodes in an AnchorPane with spacing guides and snapping, giving the impression that the nodes are positioned and sized relative to each other. Try previewing your layout and resizing the window, though, and you'll see that it's a blatant lie—they only have pixel offsets relative to the edges of the pane! Good to know. &gt;That's not to say that CSS is any better… Don't remind me about the mess that is CSS in JavaFX.
More like, assemble your own machine. Don't need to re-invent the wheel, but don't buy an entire vehicle just for its wheel :P
Yeah, not published yet. But good one. While you can focus on java only books, imo, having the patterns in mind avoids to make basic and costly mistakes...
Not for me. I use Spring Boot. 
The order should be vice versa! First show how to build a pizza, then use the pizza to show further concepts. A ``Margarita`` class simply sucks and contradicts any further effort for using abstractions 😉 Besides that: too short for novices, to basic for advanced devs. There is the excellent book from the head first series after all - it's much better to refer to that one than writing something on your own! 
Thanks :)
Thanks for the reply. I'm working on a legacy system. We put the important event into SQL DB like you said sending email, sms etc. We do some analysis on those data. Do you think we can use ELK stack instead of SQL solution ?
Protip: if you replaced mutable Pizza with immutable Pizza (e.g using Lombok), and instead of writing builders wrote functions that returns modified copy of whatever pizza arrives as an argument, you could compose recipes easily and with less boilerplate. Also the solution would be more SOLID than original builder pattern. Actually, quite a lot of OOP design patterns become obsolete if you can mix OOP with FP. They were designed to work around limitations we no longer have.
If it really had everything one needed, then they wouldn't really be able to charge for the enterprise, would they?
Has everything you need, not everything you want.
Cm’on really! Someone posted an article of a new Eclipse release and only thing you have to say about it is to suggest to pay for a competitor product...
Yeah the mailing list
I replied to a question. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
and you had to use db2.... a moment of silence for this poor soul
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
lol. that's a dumb and wrong statement.
Are there rules of thumb for what causes score corruption? It seems like I've had issues with how the solution clones itself, but sometimes the corruption goes away just with some code simplifying, which makes me think I'm missing the real cause.
You have a lot of hatred for JS given this and other posts here. It's improved substantially in recent years. The tooling isn't at the same level as Java, but it's getting pretty damn good so far. Browser inconsistencies are only a problem if you need to support IE and other super old ones.
I develop spring boot projects all the time with community edition. It's just Java. Sure the are some sugar in the paid edition, but nothing crucial.
IMO, there's a lot of religious dogma in the software engineering world with way too much fervor behind it. "This (tm) is the best! The Only! Anybody not using This (tm) disgusts me and I pity them." Some frameworks work well for some applications and not well for others. I don't think it's appropriate to say with any surety that neither Spring nor Hibernate have no place. Advantages of Hibernate (or another ORM): time-to-market, cross-platform support. Those are the biggest ones, really. You can add persistence to an application very quickly and expand it as necessary at low cost. One application will work on Oracle, MySQL (as well as anything works on MySQL), Postgres, or even some non-RDBMS data stores. Drawbacks: can be slow as fuck for large and complex queries. Spring: it's really not a bad thing. If you want to use an OSGI framework instead of Spring, that's cool, it's tomato and tomahto, IMO. I've met some people that think any line of XML is equivalent to being fucked by the devil, but, you can do your config in lots of different ways that require no XML at all. There are so many ways to do what you want with Spring, that I am really not aware of any logical resistance to it. That being said, if you do want to go full-OSGI like Apache Karaf, that's different and you wouldn't want Spring. To me, they're interchangeable in concept, so not a big deal. Learn Spring and learn Hibernate. Implement Spring in new projects (Spring Boot) if you can. Implement Hibernate in new projects, too. When necessary for performance, jump directly into SQL. For most projects, I find Hibernate covers 90-95% of use cases easily and quickly. The 5-10% left I can do as one-off joins with custom ResultSets (which you can probably do by digging in deep in Hibernate, if you want). I would be curious to hear what the silverbacks at your shop have to say against Spring and/or Hibernate aside from, "it's not how we pray here".
TypeScript supports structural types only. This is still unsafe. [The Dart FAQ](https://www.dartlang.org/faq) describes a number of flaws that make Dart inferior: no pattern matching, all type parameters are covariant, etc. Unless it can match Scala in expressive power and compile-time safety, it's a hindrance, not a useful tool. As for Babel, see [the table of features it supports](https://kangax.github.io/compat-table/es2016plus/). Bear in mind that I do not have the luxury of ignoring Edge, Safari, and IE11.
Installed Photon today (for work), works great. I'm really exited about some of the new features and fixes (e.g. proper test-classpath separation, Java 9/10 and module support, ...). It installed without problems, converted the workspace flawlessly, detected and installed some missing dependencies, and fells nice and fast. New releases are always exiting. Eclipse constantly improves and there are always some nice and useful goodies in a new release. My employer would pay for any software I ask for, and I had access to IntelliJ Ultimate already (OpenSource contributer license), tried it, and it was nice, even better than Eclipse in some parts, but the difference is not big enough to justify a switch for me (or my team. Mixing IDEs in a team sucks). Eclipse just works. Thanks to all the contributors for such a great piece of open source software. 
Why is it that you need to switch? If you likd the styles (and othe features i assume) of netbeans why not just stick with it?
[https://editorconfig.org/](https://editorconfig.org/)
&gt;It's improved substantially in recent years. The tooling isn't at the same level as Java, but it's getting pretty damn good so far. I realize it's getting better on paper, but that doesn't help me much, because… &gt;Browser inconsistencies are only a problem if you need to support IE and other super old ones. I do. I also have to support Safari, which is also notoriously behind. This isn't a personal blog. I have to support whatever browsers my customers use. Unless I run it in Electron or similar, that is. Pair that with Scala.js or Flow, and a decent widget toolkit that will work with one of those languages, and we might be in business. I'll have to look into that possibility. What IDEs are people using for their JavaScript projects these days?
Hibernate and other ORMs are really good at returning correct results from a database. They also make it very easy to do so very inefficiently, but not in a way a naive developer would notice during dev or tests. So they have a rep as being poor performing.
I don’t like Netbeans at all. The problem is my team’s code style was created several years ago for Netbeans and I would like to use Intellij IDEA.
Is the team style based on any existing standard? Such as the Google style guide, etc? If so, it may be easiest to start there, and tweak that to match your existing settings.
They are quite good, but very overbloated.
There’s a recent blog article that I came across on this subject https://blog.frankel.ch/on-containers-frameworks/ that I found interesting. For me it’s about time-to-market, or about how long I have before a drop-dead date. If I have time to generate the jooq handling code I’d need for a DB then I might, but hibernate will get me there and just work. Maybe later there will be time to rethink or review actual usage patterns. In the meantime I have too much work to do to argue with framework deniers.
I'm building a java app using undertow as an embedded webserver, a logging framework, and gson. My app is &lt; 9mb, feels good.
&gt; There are so many ways to do what you want with Spring, that I am really not aware of any logical resistance to it. Its unnecessary, overbloated, relies on magic, and is about 50mb to start ? Don't learn spring, use its core concept DI. Don't learn hbernate, learn sql properly.
Add-ins that you don’t need but are nice to have 
I do as well on CE. 
This
Couldn’t agree more. 
What does it lack exactly and does Eclipse have those features? I haven’t used Eclipse in at least a year so who knows, maybe I’m missing out? It’s never a bad time to learn about new tools that could make your life easier. 
Yeah no kidding. 
I really enjoy writing Spring apps. It first appears to be a bunch of magic, but do some digging and it really solves a lot of problems for you. You can quickly whip up a lot of sturdy services with just some spring boilerplate. I'd write with Spring for the rest of my career if I could! : P
I'm a pragmatic sort of fellow and I often have to make decisions that favor time-to-market over perfection. &gt; unnecessary Not a valid argument, IMO. Lots of things are unnecessary, but make your job easier. You could write code in Notepad, but an IDE makes it easier. You could hand-write byte code, but a compiler makes it easier. You could hand-build a list of dependencies, but Maven makes it easier. You could write your own DI system, but Spring makes it easier. If my team came to me and said, "fuck Spring, we can write it ourselves", I'd say, "yeah, no". &gt; overbloated Sure, don't disagree that you could get by with less. Who uses all of Spring? At the same time, unless you're doing embedded systems or mobile apps, I don't care about this. You might, and that's fine, I don't because I just don't see a pragmatic argument here. &gt; relies on magic This is the same as saying, "I don't understand how it works". Clearly, it's not magic, I know you don't really think that, but, it's all Java code and you have the source. If something's happening in there you don't understand, you can figure it out pretty quickly. &gt; 50mb to start Same argument as "overbloated", my response is, "asked and answered". &gt; Don't learn hibernate, learn sql properly Agreed that SQL should be learned and it will definitely improve your usage of Hibernate. However, using Hibernate allows more people on my team to be more productive, faster. Yes, somebody who really knows the shit out of SQL should have a look at your mappings, and whatnot, but I can have somebody who doesn't know a whole lot of SQL do 80% of the work and we all get to happy beer time faster. Also, the cross-platform stuff is really fucking nice. Unless you really need to for performance or exotic SQL reasons, it sucks to have a different variant of your SQL for each platform. And, unless you're really careful, something will creep in to your SQL that runs fine on Oracle, but not on Derby, or whatever. And God help you if you stray into stored procedures. Look, I don't mean to be combative and belligerent here. That's not my goal and I don't want to offend. However, I don't think you really presented much in the way of sound reasons against.
I wrote web apps in 2000. Plain servlets (no JSP even), plain JDBC, plain everything. I would not go back to that world for anything. I wrote my own code generation tool for the tedious crap. It was that bad. Spring and hibernate do not fit every niche, but when they do they are fantastically useful.
Relying on magic and being overbloated are closely aligned. When there is a production issue with millions on the line, every second counts. And having to jump through 3rd party jars, and layers of introspection is not a good starting point when debugging. You think having a library of 3rd party jars and having to maintain version consistencies across multiple projects is easy peasy and nothing to worry about ? Hibernate doesn't help if you use stored procedures, it makes things worse. Cross platform ? Postgres4life. More to the point, for any complex query you have to pull hibernate out of the equation, and for simple inserts and updates - yeah, I can write them in less time that it takes me to maintain the versions/download the updated jar or whatever. In my exprience a reliance on spring/hibernate is similar to the dunning kruger effect ... noob &gt; I don't understand they must be shit intermediate &gt; These are great I don't have to do as much experience &gt; Ah, I see they don't actually do that and I don't really need this. And now this doesn't work with that, and my app is 10x the size. And yeah thanks for clarifying that I didn't actually mean real magic, I'm sure people were confused by that.
I learned SQL before most of my other programming languages, including java, and thus can whip up most CRUD commands quite fast. The problem I faced with a JPA (like Hibernate) is that it requires a whole lot of additional boilerplate. Writing my own SQL against a simple JDBC data source was much easier to understand and produce. In most cases my applications don't need all that functionality. The people behind Spring Data also saw that, and aimed to reduce the boilerplate by introducing conventions and code generation. Once you understand how that works, it's fast to set up. My applications also haven't needed the web services part of Spring Boot. I'm still researching whether I can use Spring Data without all the web services functionality. The last challenge I face is that I really want my data entities to be immutable, and most of the JPA and Hibernate tutorials I see all assume mutable java beans. Short of the repetitive boilerplate, the java beans methodology as well as most of the generators I've seen make mutable entities by default. Recently I learned that newer versions of Hibernate can be configured to pretend data access is immutable, but that doesn't make the class instances themselves immutable. That said: when I did write a full-blown data manipulator using java, I dug through Spring Data and Hibernate's source code to find out how they solved issues I was facing. I got a good look at their complexity and abstraction. It's versatile, impressive, and well-made. It's also quite complex. Good luck debugging that. 
I use Spring and Hibernate everyday. I'm not quite sure why you are lumping the two together. They both accomplish very different things and can be used independently. Like anything, choose what is best for your particular business needs. Weight the options against each other but at the end of the day it should be you that makes the decision based on many different factors. I have no idea why you think Spring is going away anytime soon. For Hibernate, I can start to see the writing on the wall. JPA kind of broke a lot of the earlier Hibernate stuff and wrapped it into it's own libraries. It just seems like there is less and less of it the way things are evolving. I for one have always hated Hibernate. For someone that is decent at writing their own queries it's just a huge pain in the ass and I feel like it constantly gets in the way. Unfortunately for my team it was 100% mandatory as we needed db vendor-agnostic queries. There were other ways to handle this requirement but Hibernate just did it better and more seamlessly. 
Imo if people aren’t using Hibernate or similar for an app fronting a database of medium-and-onward size they tend to reinvent the ORM. 
&gt; I wrote web apps in 2000. Plain servlets (no JSP even), plain JDBC, plain everything. Jesus. A lot has changed since 2000. I'm not trying to be a dick but have you seen a modern web app?
I use WebStorm. More accurately, the WebStorm features built into intellij ultimate. It's really amazing, it gives you tools like refactoring, usage and declaration finding, and intellisense suggestions that are wonderful. It's not as good as with Java, but it's way better than you would expect for JavaScript. It actually auto downloads typescript type definitions and uses them to provide the intellisense for the relevant JavaScript APIs. You can also transpile your JavaScript code, which helps eliminate a LOT of the browser issues while still letting you write in modern JS.
Definitely. So fast to get features out with Spring Boot, as there are just so many sensible defaults. And that I love is that for every preconfigured bit, there is generally a not to painful way to tweak or override it if the defaults won't fly. For basic CRUD apps/operations, Spring Boot with Spring Data JPA / Hibernate / QueryDSL can get you stupid fast access to basic server side paging/sorting/filtering of data sets.
You touched on some of it. Hibernate is trashed as a performance killer. Spring tends to get a bad rap because you spend all your time (allegedly) debugging spring issues if you use it.
There are many cases where Hibernate generates bad queries and you can do nothing about it as it's the nature of its operation. You can't, say, make it fetch several 1:1 tables into a single object via a join. It's not an option. But in SQL I do this all the time.
Hibernate is a bit of a black box. It works well for most cases but can hide important information. It's also not all that hard to live without I don't know how anyone could hate Spring. Once you understand the core principle of how dependency injection works, everything else is pretty straightforward. You can take or leave particular modules (MVC, Security, Cache abstraction) as you like. The majority are really well designed to offer a lot of functionality without locking you in.
I'm the guy that once re-invented ORM because I didn't think I needed Spring or any fancy frameworks. What a nightmare.
Over reliance on automagic can lead to big problems, sure. It is therefore recommended to inform oneself about inner workings of the automagic in question. It should be noted that spring framework doesn't really have that much automagic, while spring boot actually does. Let us also not kid orselves, every framework we use has some "magic" in it an that's why we use it. How many programmers know exactly how tomcat creates an http request object before passing it to the servlet? My guess is not a lot. It's not about writing sql statements, that's the easy part. It's about maintaining them. Like you stated above, changes in production do occur and we use frameworks not only for ease of writing but also ease of maintenance. And I don't want to be condescending but no experienced professional in any field will say "this tool is the worst, it should never be used" nor "this tool is the best, it should always be used". Spring, nor hibernate, are silver bullets. But they do fit quite well for a vast number of use cases.
&gt; And I don't want to be condescending but no experienced professional in any field will say "this tool is the worst, it should never be used" nor "this tool is the best, it should always be used". I never said that, and of course the same statement is true for the opposite. 
From memory, that was mentioned in the original JEP as something specifically excluded from _this_ JEP, but may surface in a subsequent one. I hope something like that comes along tho, would be very handy.
Keep in mind also that frameworks usually help in something generally underrated but equally important: maintenance. It's easier to maintain a big project that uses a framework properly than one that has todo everything manually. And I don't favor frameworks that much.
maybe you can open source it.
Try out Spring vs DropWizard and Hibernate vs QueryDSL and see what you think?
Have you tried Java EE instead? I havent used much Spring but for what I've read I like better JEE(6/7).
Two ways, as I see it. Jpql (or hql) will let you query whatever you want. Create a view in the database and map your view to an entity. Also, I was under the impression that if you mapped your @OneToOne and turned off lazy loading, it would actually fetch the tree. Just map all the entities to the columns you need only, to avoid fetching *. Either way, I think going this way is not the point of hibernate. For crud it rocks, making stuff easy and abstracting the data layer. For the rest, I sql is so good at letting you cross data, I don’t see how the current annotation based joining can be an advantage over a simple join. The overhead of having to create and configure multiple entities vs having just one mapper for your result query is not worth it.
Log4j2, because it provides all features that we need, and coworkers are way too lazy to try out other logging frameworks.
Hibernate can cause deadlocks when updating a single row. I hate it. 
Brian Goetz discusses it [here](https://youtu.be/jDU-JALUDd0?t=23m47s). He seema to be open to it as long as the language can restrict it to numerical types.
&gt;Mixing IDEs in a team sucks I'd be interested in why do you think that? 
That's not really about code style that much, it only covers some basics like tabs VS spaces. Nothing Java specific though.
I have also wondered how well hibernate works in the case of 2+ joins in terms of object creation and memory usage. I use it, with flyway, which is nice.. but wonder as load ramps up if it will handle the load or we will be stuck rewriting a lot of the db layer directly to sql.. heck.. makes me think sticking with JDBC directly would have been better. but then you gotta deal with caching, thread locks, etc. To me that is the main lure of using something like hibernate.. it handles all the nitty gritty crap most people either dont know about at all, or how to solve those issues. 
Also Gluon main business started off from JavaFX. So if anything we can think of them as the Qt for Java.
I have done both and frankly, one is not way better than the other. My biggest concern with spring is you are heavily locked in with spring-isms. They are not bad.. just that if you ever wanted to go away from it, you basically look at rewriting. Honestly, if I do any rewriting it will be with Go for any sort of back end microservices/db/networking work. 
Nope you decide once and then are bound to bash against competitors for eternity. 
are you deploying to a raspberry pi? why does this matter?
Just because your database becomes more filled doesn't necessarily mean the memory requirements of the orm need to grow at the same rate. You can always stream data, even with orms.
I mean, hibernate and spring aren't the only options. There are a lot of alternatives "in between".
The problem I had with it is that it remains a lot of magic even when you spend a lot of time looking under the hood. Especially spring security is bad there.
pretty much any framework has limits. as long as your far away from a non-std. way opposed to the thing your framework does, any framework is great. things like jpa have limits, even jdbc with native sql will not fit your needs at some point. the first time i met spring was when we were still doing osgi, and it was horrible. now when im doing web stuff spring boot is essentially the best and fastest approach. other than that always try to stick to JSR-like stuff. anyone (in my field) can do bean validation, can understand jax mappings, jackson dtos and can do jpa and knows what cdi is. so with that out of the way you can find people and have them implement your business stuff without the need for them to learn your own code.
&gt; From bad performance to making it, allegedly, harder to code and debug (because you're now coding to the framework), there is some VERY strong opposition in-house. Where do you work and how can I get a job there?? That's probably awesome. Hibernate is terrible. There is literally never any reason to use it other than "I have to because of my job". For complicated cases it's terrible. For easy cases you soend just as much or more time typing out annotations as you would simply writing the query directly with something like spring jdbc. Spring is more of a mixed bag with it doing a decent job of simplifying some stuff, but then in other areas you get into some real wackiness with 15 ways to do something, or unexpected behavior (like I'm looking at a project where the "architects" thought dependency injecting parameters into rest controllers would be a good idea, not realizing having instance variables eould have threading issues and end up with the wrong data because of race conditions). 
&gt; But Hibernate can't do this particular mapping. Yes it can. select new Family(mother, mate, offspr) from DomesticCat as mother join mother.mate as mate left join mother.kittens as offspr `Family` doesn't even need any annotations. It just needs a suitable constructor.
HQL doesn't fully participate in Hibernate's unit-of-work / identity-map patterns. It's supposed to address edge cases like producing data for reports, the objects you fetch this way can't be updated, deleted or otherwise modified to the DB, and you're essentially writing an SQL query up there with the tiniest bit of sugar.
The day I found Spring Data JPA was a happy day for me. It cut out so much boilerplate with running JPQL queries. In all by one case all of my repository classes are not classes at all, but interfaces, with annotated method definitions. The only one that isn't is because we need a dynamic query string.
Spring will support many of the JEE annotations in addition to its own. For instance you can use `@Inject` instead of `@Autowired` and Spring will know what to do with it.
The best you can do is to make your setters protected. The main issue I've had is with id fields. Spring Data JPA really helped reduce the boilerplate required for JPA queries. And yes, you can use Spring Boot without the web front end. Just don't include the web starter.
Subtile differences in automatic source formating, mostly. I'm sure there is more, but that alone can be really annoying and clutter up your commit history to the point where git-blame is practically useless.
[Jooby](https://github.com/jooby-project/jooby) is an alternative to Spring if you wanted choices there. 
Great selection, especially Spring Microservice in Action if you want some practical advice.
Probably you are using it wrong if you get to conclusion that hibernate is terrible. Or you just maintaining pretty old pice of code with just bad architecture. I've seen really big restaurant ordering system handling thousends of requests in hour wihout any performance problem. Hibernate is just a tool and how you will use it depends on developer. 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/microservices] [Good book(s) on microservices ?](https://www.reddit.com/r/microservices/comments/8xn79n/good_books_on_microservices/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
They are strong frameworks/ORM. And their advantages and disadvantages are the same as any web-fw/orm. If you want and if you need something like that, they are exceptionally good. Instead of Spring, I recommend Struts2.
Thanks. That was how I was thinking of it as well. Something like what we do with String.
&gt;From bad performance to making it, allegedly, harder to code and debug (because you're now coding to the framework) Sounds more like opinion from incompetent developers to me. Seen some "senior devs" that invent their "bicycles" that are actually unreadable, unmaintainable, full of bugs and could be replaced by few config lines from spring framework. Same for JPA/Hibernate: it's tool you can use on any desired level of precision (from ORM to native) and on every level it's cleaner and simpler than JDBC boilerplate (and every bicycle you are going to invent for this). 
I would not touch Hibernate with a 10 foot pole.
&gt;You can't, say, make it fetch several 1:1 tables into a single object via a join. Why not? Just map it like you would map a view - for example using @Immutable &amp; @Subselect or just create named view in database. Also you can consider using fetchgroups / entity graphs etc. I think the biggest misconception about Hibernate is that you have to use JPQL / HQL / EM API for everything. That's simply not true and it can lead huge inefficiencies. Hibernate is very efficient tool even when working with very large databases (we use it on several projects with thousands of tables and dozens of TBs of data), but you have to pay attention to what you are asking Hibernate to do. If somebody considers Hibernate / JPA as something that shields from having to think about database - well, it's not going to work (at least for non trivially small databases). When I see somebody doing this - my question is always and why do you even use SQL database in first place if you don't want to take advantages of it's strength ? You could easily use a NoSQL one that might very well work better for that kind of development. If you pay attention to what Hibernate does, what queries does it execute, write native (SQL) queries where needed, Hibernate is going to be great tool, saving you lot of time without sacrificing performance. 
&gt;Spring: it's really not a bad thing. If you want to use an OSGI framework instead of Spring, that's cool, it's tomato and tomahto, IMO Well, I have done lot of development in OSGI environments and personally, I hated the version &amp; dependency management. It works quite well when there are bundles without dependencies, but it can get complicated a lot with transitive dependencies. I always found Spring DI much easier to use, but that's just my personal opinion. &gt;Drawbacks: can be slow as fuck for large and complex queries. Why do you think so ? You can always use native queries, map views to DTOs etc. We're using Hibernate on top of several databases with sizes in dozens of TB (and no binary data, only structural) and thousands of tables and we aren't having issues with Hibernate's performance. 
Well, this is usually the result of poorly designed transaction management. If you're still facing the issue, you can always set hibernate.order\_updates to true and it will order the updates according to entity type and PK value. But 99 &amp;#37; of the issues I seen were direct result of huge, long transactions, which are performance killer for SQL anyway that forces database to maintain huge Transaction Log / REDO | UNDO etc. 
oracle.com
I recommend using wolfram instead of wurst
Are you familiar with different frameworks? EJB/Spring? If not then in my opinion learning these are suitable for an intermediate Java developer. I can recommend Spring In Action. 
Maybe it would be good idea to tell us what are you trying to learn and what do you want to use java for. 
&gt; Maybe later there will be time to rethink or review actual usage patterns. In the meantime I have too much work to do to argue with framework deniers. https://i.imgur.com/sDHJilb.jpg
[Lukas's Law of Analogies](https://mobile.twitter.com/lukaseder/status/880003993946251265) applies
The *official site* is not good enough? https://www.java.com/en/download/manual.jsp
Yep, and now with Java 8 default methods, it's even easier to just keep it in the repository interface when you need the occasional behavior tweak or something
THIS. I would highly recommend to anyone to take a weekend or two and come up with a small simple app idea and do it with plain servlets and JDBC. Then you'll understand why these frameworks exist. 
because sometimes when you look at your fatjar built with Spring/Hibernate and on your terminal you read more or less 50Mb, you say: "really? I just wrote 4 classes!". So you start to wonder what am I missing here? why Spring needs so many libraries just for some Rest and Crud? So is it that useful for such operations? I don't think so, but a lot of people are pretty convinced that Spring is a silver-bullet for anything. 
hurray for Jooby! 😀 although I would love to see it without IoC container (Guice in this case)
another valid solution can be Vert.x
my thoughts on that are pretty pragmatic. These tools exist and are (very) popular for a reason, ORMs allow programmers with somewhat iffy SQL skills to have "averagerial" performance, as long as they follow some standards. No need to delve into intricate details of your RDBMS query optimizations; and also allows you to easily migrate between RDBMS ( but, actually, that is a very specific use case for most applications ). Spring Framework, on the other hand, was a better J2EE, before JEE was JavaEE ( now, JakartaEE ). Injection was revolutionary by then... today, not so much. But it has built a strong foothold on many shops and applications around the world, so, it retains its relevance. With Spring5 it is trying to go with the new trends ( reactive, kotlin, etc... ) i would take a look, just to keep the resume "fresh".
&gt;My question is, will i be able to begin coding my first application with knowledge regarding java ONLY or do i need to learn about XML and/or other stuff?If you have any tips, they would be greatly appreciated!! XML is going to be least of your worries when developing an mobile app. And yeah, you need to know it, but that thing is trivial compared to for example designing the app architecture. Same as knowing Java is only fraction of required knowledge to write an app. There are many tutorials on Android development, also I am sure many books, so go slowly from beginning and learn about Java, gradle, Android APIs, Android app architecture &amp; workflows, layouts &amp; UX and most importantly, try to understand what you're doing instead of just copy pasting code from tutorials. It's long road from Java beginner to good Android programmer, but it's no rocket science either. 
Again, why does the size of your jar matter?
Hey, thanks for the quick answer. I guess i'll start and learn on the way.Should be more enjoyable this way i guess.
Java is for programming, XML is one of many configuration file formats. In Android, the XML format describes the UI. If you have a good IDE, it will write the XML for you, but you should never depend on that. Also, it is possible to create the UI purely in Java, but I don't think it's a good idea to do that, unless your UI widget has really complex behavior.
Why aren't you asking this question in the proper subreddit /r/androiddev? Also, here is not the place to ask any questions about Java development as is clearly outlined in many places in this subreddit. There are /r/javahelp and /r/learnjava.
Just remember that if you're learning on the go and not rewriting / refactoring the whole app from time to time, you're probably not doing it right :-D No offence hear, it's natural to make a lot of mistakes when learning something quite new, the point is to learn from them. 
Hey, thanks for answering. I had no idea there was a reddit such as that and idk how it didn't cross my mind.Sorry about that.
I don't use that side of it at all. I hand-compose all the scoped components [the way it should be](https://paulhammant.com/2018/04/10/it-turns-out-we-didnt-need-dependency-injection-containers-after-all/).
To be fair, thousands of requests per hour is what I'd call a rounding error. My current project is built to handle 50,000 requests *per second* under peak load, and even that would be insignificant compared to a really heavily hit site. Can you do that with Hibernate? Probably. Would I? No. There's better tools for the job regardless of load.
me neither but all the Jooby modules needs Guice under the hood anyway (if I'm not wrong) 
When you are saying rewriting/refractoring the whole app, what exactly do you mean? I should rewrite and rewrite my code again and again to improve it in some way you mean?
because under the hood seems to have too many things that I don't need, this is why the size matters: size is an index to let you know if you're involving something you don't actually need; for instance just create a plain rest service with crud operations with undertow and jdbc and create the same with spring boot, the difference here spring involves a lot of modules you don't even know you're using, Spring Container is always there, but you're really need an IoC Container for your app? and what about Hibernate? you really need an ORM for crud? in other words just use what you really need, because the old mantra "get the job done" has no meaning if you don't know what you're doing
Well, yeah, pretty much. Not as a general rule but don't expect you will get everything right from the beginning. Android development has a lot of catches - activity workflow / stack management, services &amp; binding, adapters, shared preferences, ... So do not expect you'll get it right from the start - probably you'll make a lot of mistakes so when you figure them out later (and trust me, you'll, because they'll bite you when you least expect them to :-D), go and refactor / rewrite the code with new knowledge in mind. 
I'm not talking about http request mate. I m talking about database operations without reading cause there is elastic on read side. (Cqrs). I think the main issue of using hibernate is that making too much coupling between architectural layers. We r using onion/hexagonal architecture and in any time we can implement new adapter for persistence domain object. 
As a developer with many years of Java experience I can say that Spring and Hibernate are definitely beneficial, especially if you are implementing a web application and or web services. They help make things like transaction management, request dispatch, and of course dependency injection easier. I find that people that may speak negatively about a framework probably never really tried to use it so their opinion may not be informed. My advice is, build some services with these frameworks and include a web UI. You'll find that they take care of many things you would otherwise have to code yourself. You will also run into an occasional vague error that will require much Googling, but that's how you let. After doing this you can have an informed opinion and be able to talk with specifics about the pros and cons of each framework with your coworkers. Show them your work and perhaps they will look at them in a different light. 
Jooby's innards - perhaps, but my components don't use require()
I, too, didn't like OSGI over Spring. I'm with you there. WRT the "slowness of Hibernate", I am a fan of Hibernate, and advocate for its use. Out of the box, it is possible to generate queries that perform very poorly. It is also possible to work around that within Hibernate, as you suggest. I was trying to present an even-handed viewpoint.
Great article. Really enjoyed reading it. Only one minor observation: when you talk about Spring Boot it felt like you genuinely like it and hence some bias. I am from the opposite school: I don't find Spring Boot and anything that leans on it, that 'simple' all the best
ok but what about Jooby mods? how do you use them? you need require anyway, right? or did you find another way to take advantage of them? 
I alternated between responding and just letting this go because I seem to have offended you, judging by the sarcasm in parts of your response, and I was afraid that we might have passed the point of constructive intercourse. However, I decided to respond because somebody else who is deciding on whether tis nobler to Spring or not to Spring might benefit from a few more thoughts. &gt; You think having a library of 3rd party jars and having to maintain version consistencies across multiple projects is easy peasy and nothing to worry about ? As I am sure you are aware, this is one of the most difficult things to manage in an enterprise Java application. It's certainly not easy, as you suggest. One benefit of Spring, in particular Spring Boot, is a curated list of the most common 3rd party libraries built into their parent pom that are guaranteed to be interoperable. For our application, which is 10+ years old and well over 1M lines of (our) code, their pom covers all but a small handful of JARs. The number of JARs that we had to explicitly provide a version for because of this went down by about 80%. This is a lot easier than trying to manage all the JAR dependencies in-house.
I learned basics of Spring but I lack more advanced aspects of this framework. Its only most basic knowledge.
Actually I am trying to learn new things from Java 8 and newer versiins as long with Spring framework.
&gt;I'm not talking about http request mate. I m talking about database operations To be clear, each http request in my above example would map to at least one database transaction. Usually multiple. I don't mean to take away from your example and I'm sure it's a solid project performing well, but a few thousand transactions per hour isn't really something I'd consider a compelling example of a database layer handling load. &gt;I think the main issue of using hibernate is that making too much coupling between architectural layers. Hibernate doesn't really prevent you from properly laying your application. Hell, spring with data-jpa out of the box gives you a pretty decent layered architecture as a starting point if you're dead set on using JPA. I'm sure Hibernate is also a great tool used when used well, but it's also a very awkward level of abstraction and makes a lot of things more complicated than they need to be without giving any real payoff for it. Libraries such as Slick, Quill, Jooq, Doobie etc provide a much simpler approach to the problem, and can scale to much more complicated scenarios much easier, without sacrificing anything for it. From my own projects, when a client requests JPA or Hibernate specifically, I'll usually budget a lot of extra time to implement the database layer. This isn't out of bias for one tool over another, it's just that from experience I've found that something I can whip up with Slick in 15 minutes will take me all day with JPA. 
Thanks. That's basically why we choose JEE, to be as standard as posible.
I like that suggestion. I've been taking this approach with front end development as I want to do full stack. The three big JS frameworks, angular Vue and react, ive taken time to work with them all and get a feel for what they all offer. I'll probably give spring another look at some point in the near future.
I have worked on a mixed IDE team before and we didn't have a problem. Both IntelliJ and Eclipse let's you configure code style settings.
:-) I think it’d be the reverse though, someone cane up with the wheel and offered it to labourers and the people carrying stuff on their back claimed it was too complicated to maintain.
Hello, I’m the author of this article. I’m glad that you liked it! I do like Spring Boot, as it makes my life easy... Easy is the key word here, I think it is easy, but not necessarily simple. I put the point in the article: * The inherent complexity of the framework Spring Boot tries hard to simplify spring, but can only do so much. The other approaches are simpler. Thanks a lot for the feedback
&gt; the objects you fetch this way are read-only Correct, you should always write custom HQL for all your read-only queries and use DTO projection for those queries. You should only query with entities when you need to update or delete.
Effective Java is the single best book to take you from beginning to intermediate knowledge of the language
No mention of Dropwizard?
Boot is good until you start developing the app more but the old Spring with XML all over the place (I like XML for what it was designed for, Spring wasn't what it was designed for); I find it hard to believe the old Spring XML won converts from J2EE (as hard as J2EE was). For fun, it's hard to beat Spark Java but Spring (Boot) has so many useful things built it like security (generally) that it should really be the default pick. I feel like there has to be something better and lighter and more fun than Boot, keep hoping, maybe Pivotal should hire Per Wendel so they can build some fun into Spring. 
While it might deserve mention I personally see little reason to use it over spring boot. And that comes from someone who’s generally anti spring
Read some stuff online that made it seem sketchy, I ended up downloading after I posted this anyways... ty tho :p 
Wolfram? Never heard of it... I’ll look into it go, but I just installed wurst 
&gt; Read some stuff online that made it seem sketchy Seriously? Java.com is the *official Oracle site* of Java. There won't be any more official site.
Lol. Thanks now I feel stupid. But I ended up coming to that conclusion anyways. 
And I am looking for books like this.
I’ve been developing in Java for 10 years and let’s just say I’ve seen some shit in production. I don’t think it’s fair to lump spring in with hibernate so I’ll evaluate them separately. Spring is a great framework compared to what came before it and spring boot addresses a lot of what makes vanilla spring annoying to work with. That said it uses a lot of magic and it can surprise you in ways that you don’t expect. It makes heavy usage of proxies which means it pollutes the shit out of your stack traces. My current work place has dozens of microservices running on spring processing, in some cases hundreds of thousands of requests per second at peak (data ingestion pipeline). There’s nothing about spring itself that prevents you from scaling a properly architected application. Hibernate/JPA is a horrible piece of technology that lures you in with how well it handles the easy cases. It works perfectly for demos and prototypes but as soon as you need to do something complicated it can get to be unwieldy. It builds a very complicated metamodel on top of SQL that can behave in very unexpected ways. You end up needing to be a hibernate expert as well as a SQL expert to leverage it well. I’m sure it’s possible but it’s, in my opinion, completely not worth it. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/8xplh7/build_successful_before_completing_all_the_code/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I admit, I had never thought of it this way
Yeah I know SQL very well and I can easily handle my own queries. The only thing that makes hibernate appealing is getting out of the JDBC resultset parsinf boilerplate. But then again, I've never really looked at other libraries out there, so maybe there are some that can help?
LibGDX allows for seamless cross platform development This means you could code once, and run it on not only Android, but also iOS, Windows, Mac, and browser. It is a framework that *can* be complicated, but you have the freedom to literally ignore all of it and simply use it for it's input and graphics handling. I'm building my own game engine that isn't using any of the built in Scene2D stuff, but if you're a better programmer than (most likely) it isn't that hard to implement. You don't get any of the built in layouts that Android Studio allows you to manipulate, but you also then aren't restricted by them. You can make your app look and behave exactly as you want. And, again, it has the plus of being a single code base for exporting to iOS (that's two platforms with mobile app stores), and Desktop. 
Modules? I wasn’t aware they used DI.. show me a sample script...
The goal of a tool is to improve upon not using the tool. Hibernate does not do that. For simple queries hibernate involves typing out numerous annotations scattered across every object you use. It is not faster or cleaner and it scatters everything used to created the query across several properties or objects. For simple queries it's faster with less typing to write the sql query than it is to write out the annotations. Hibernate fails to be better than writing the query directly. Devs something think the queries are complicated to write because they haven't written them - they are not, and had they spent the amount of time looking at the sql queries that they spent learning hibernates annotations they'd be ahead. Complex queries are no different, they're just as complicated in hibernate or moreso than they would be in straight up sql. &gt; I've seen really big restaurant ordering system handling thousends of requests in hour wihout any performance problem. You're saying that underlying database is capable of thousands of requests per hour and that did not sufficiently impede database performance to be noticeable. That's not a plus for hibernate, just a possible lack of a drawback. Hibernate cannot make database access faster than writing the queries simply by hand. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I would like to note that although LibGDX is aimed at game development, as this user mentioned, it doesn't have to be. I use it to create software that runs on Android/Desktop without too much extra stuff Also, you can create Android specific and Desktop specific code, you just have to ask Libgdx what it's running on, and use a switch statement to run appropriate code. 
It’s a very goog book.
Have you learned patterns yet? After REALLY "groking" Effective Java, I suggest reading the seminal book ["Design Patterns"](https://smile.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=sr_1_1?ie=UTF8&amp;qid=1531234457&amp;sr=8-1&amp;keywords=design+patterns+gang+of+four). Being able to talk about applications using a pattern language can convey huge amount of information in a compact format is a godsend. Also, application behaviors can be discussed using patterns, which are known are proven examples of good design. Learning from Effective Java will help you to understand WHY these patterns get used, rather than just rote memorization of patterns.
Have you tried using TornadoFX? [https://github.com/edvin/tornadofx](https://github.com/edvin/tornadofx)
JDBC is definitely not outdated. It is still the standardized way to connect Java to a database even though all these ORM abstractions exist. Also, JavaFX is one of those technologies that is used behind corporate firewalls heavily and usage doesn't get advertised for that reason. Also, TornadoFX is pretty nice and makes JavaFX much more fun to use. [https://github.com/edvin/tornadofx](https://github.com/edvin/tornadofx)
If you are looking to understand stream, functions, and lambdas, AND you already have a VERY solid grasp of previous versions of Java, I recommend ["Java 8 in Action"](https://www.manning.com/books/java-8-in-action). There is a newer version coming out later this year, ["Modern Java in Action"](https://www.manning.com/books/modern-java-in-action) if you can wait. Java 8 in action does a pretty darn good job of explaining streams, and then how to apply functions, and naturally lambdas, to streams.
&gt; Sounds more like opinion from incompetent developers to me. Seen some "senior devs" that invent their "bicycles" that are actually unreadable, unmaintainable, full of bugs and could be replaced by few config lines from spring framework. I've definitely seen people try to reinvent some of the things spring does and make a real crapshow of it as well, yeah. That's why I didn't universally bash Spring because sometimes it's better, and sometimes it's worse, it depends on the specifics of the situation you're using it in. &gt; Same for JPA/Hibernate: it's a tool you can use on any desired level of precision (from ORM to native) and on every level it's cleaner and simpler than JDBC boilerplate (and every bicycle you are going to invent for this). I completely disagree. With Spring sometimes it greatly improves upon writing the code by hand. For example Spring Mvc vs servlets Spring Mvc is much better. For Spring Mvc for Rest, spring is certainly better than writing custom code to create Rest endpoints without spring. But it's never that way with Hibernate. You can use something like Spring Jdbc or Jdbi that gets rid of a lot of jdbc's boilerplate and it's **always** better compared to writing hibernate. Even straight up jdbc is often easier to read despite it's verbosity compared to hibernate because it keeps the sql in one place, whereas hibernate scatters the query across various annotations. &gt; "Architects thought.."? It's likely not even competency of architects to deal with race conditions on a class level, but "senior" developers f%ckup that had no idea how DI works in your framework. And it's definitely not the problem of your framework. The "architects" are often doing kind of stupid stuff themselves, but spring could have also been better written so that this doesn't become a problem. If you're smoking in a car and the seats catch on fire, you can blame the guy for smoking in the car, but you also have to ask why the f the car manufacturer made the seats out of highly flammable material when obviously some people were going to smoke in the car. 
Take a look at IntelliJs enterprise (or ultimate or whatever is called) and you get all those features in Eclipse for free. You simply cannot beat the value proposition. And if you come and say: "But I don't need that", that's fine, but you are in the minority. Developers in the real world need those things. Now, it would not be a problem to pay $100 or whatever it is per year for a company to give its developers that enterprise IntelliJ, if it would mean an increase in productivity, happier workers, etc. Except it doesn't. There are indeed fanbois who eat up everything Musk is shitting and praise every dumb design decision from JetBrains without thinking, and those would be happier. At that moment though one would have to ask himself if its worth employing them. Which is a different discussion.
That's one of the problems with hibernate though - maintenance is more of a pain using hibernate vs not using it. I've used hibernate, jdbc, and hibernate is always the biggest pain to maintain afterwards. Spring jdbc is the best, jdbc is verbose but the sql query is usually sitting in a String somewhere and it's fine. Hibernate is by far the worst. You can't just look at the sql query and see what it's doing, you have to go through a whole bunch of annotations which are frequently scattered across several files trying to figure out which tables and properties are involved in the query and even then there's no guarantee you found all of them. That's just not an issue when you can just look straight at the sql query and see that info right away.
You have to learn the similarities in order to spot the differences, or you might end up making a lot of false assumptions that come back to bite you later.
Spring-Jdbc or MyBatis will work perfectly for that
Spring JDBC I just looked at and it looks very interesting. Also jdbi seems fascinating, I like the fluent API, I'm very fond of declarative programming styles.
Check http://micronaut.io , it's from the Grails team with compile time DI. 
Maybe you should consider Kotlin as language because Google declared it as their first-class language for Android. [src](https://techcrunch.com/2017/05/17/google-makes-kotlin-a-first-class-language-for-writing-android-apps/)
I come from a C/C++ and Python background. I found Effective Java by Bloch to be a good, well-organized set of Java patterns that you can use right away. It skips over a lot of the programming fundamentals and thus assumes you have a fairly diverse programming skill-set that you want to now apply in writing Java. It does use some JRE and JDK specific terminology sometimes, so you may want to read up on topics mentioned that you aren’t familiar with.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://techcrunch.com/2017/05/17/google-makes-kotlin-a-first-class-language-for-writing-android-apps/) - Previous text "src" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
The official Java tutorial is actually very good (unlike the Java EE one that is ridiculously verbose and full of marketing speech).
There's also the r/learnjava and r/javahelp subs
You can just look at the sql it runs in the logs...
You do realise you're probably using Hibernate under the hood with Spring JPA right?
You've obviously never worked on a Node app then
Yes, however the Hibernate API and what is supported with JPA has changed quite a bit. 
I mostly also like Spring and especially Spring Boot. But what I really hate about it is their SpEL (Spring Expression Language), especially the overuse of it, for example in Spring Security. I don't like that we are developing in a compile-time time-checked language like Java and then we have to define logic or constraints in SpEL, which is just a string that contains code (ugh!) and gets interpreted at runtime. Refactoring these is also only possible because IDE manufacturers are doing a huge effort to support it.
Try to deploy to your customer through a not so good VPN and you'll see that... it matters
One to ones is one area hibernate is weak at, but it is not that bad. Most of the cases the performance penalty is negligible so you don't have to do anything special about. It is mainly bulk operations that it could become a problem, but there are lots of workarounds to handle these cases if you understand how hibernate translates to SQL. If you don't need a OneToOne mapping for your task, then convert it to OneToMany to lazy load while using a database constraint to ensure data integrity. If you need to load the relationship for most tasks, then just change the data model so it just uses one table. You could also load both entities with separate queries then uses Java to map them together. Worst case, you can fall back to doing pure SQL.
He means that you will probably at some point realize that your code is a horrible spaghetti-like mess that is impossible to work with, and that it would be *much* nicer if you started over with a different structure. 
[GraalVM](https://github.com/graalvm/) or the tons of project in the Apache space.
My project, [Caffeine](https://github.com/ben-manes/caffeine), passes Javac lint, SpotBugs, PMD, ErrorProne, and NullAway analysis. Previously I have triaged issues from HuntBugs (abandoned) and IntelliJ's static analyzer. There are also millions of tests executions using a parameterization based on specifications. I tried to run against Coverity for OSS, but at the time it couldn't run on MacOS (I should try again). CheckerFramework required invasive changes for its null test and cannot be used with ErrorProne, so I didn't adopt it. I don't know if you'll find issues and I certainly hope not. It is an example of trying really hard to use every available free tool, within reason. But no matter how hard one tries there is bound to be a bug or two lurking. If you find things that I can fix, I'll certainly be appreciative.
If it gains as much momentum as Spring then I'll definitely take a look.
If developers adopt modules as introduced in Java 9, then maybe these kinds of problems can become a thing of the past. My hopes are not high, though. I think they're a great idea, and *I* don't even use them.
Refactoring isn't rewriting, it is a controlled set of transformations that let you change the shape of existing code to something nicer, without scrapping it.
Thanks for the link, but seems to depend on Kotlin which I don't use.
Certainly, because it would probably be better than all the others: https://xkcd.com/927/
Also consider JDBI. I find it a decent balance between raw JDBC and full ORM. MyBatis is similar.
A first-class language, not their first class language. 
hell no, I never did indeed 😀 but what do you mean about that? 
I've actually been looking at JDBI today, after other conversations. The one thing I'm not seeing is performance stats, since the big negative for Hibernate is how it harms performance.
I never had this experience despite being in mixed environments for the last 5 years, that's why I am asking. As for formatting, both Eclipse / IntelliJ can be configured to use the same style configuration (not sure about netbeans though, but I am out of touch with NB for the last \~10 years).
Well I used it for 2 years solid, and the only performance issue I ever had were bad queries or queries w/o indices so on the SQL side. There isn't that much under the hood, so I would be surprised to find a significant bottleneck. You must do any caching yourself, which I think is better anyway. Caching SQL results is darn weird. JDBI is based around annotated interfaces, so it was easy to write a caching version of each DAO which "implemented" the interface and then called back into the factory provided implementation of the interface. Then I could cache only those queries which needed it. Implementing cache invalidation in this architecture was a slight challenge in the case of a clustered solution.
Unfortunately, that's not true. If you are debugging spring issues, it's probably because they don't understand how spring works which causes them to have issues in the first place. If, as a coder, you are properly handling your exceptions, you shouldn't be debugging spring issues. Where I have seen Spring issues, is in the logs for kafka connectors that output logs to a different service but the real issue is something else right BEFORE the spring issue. For me, that is a matter of setting up your logs correctly, having understanding of the back-end flow, and knowing where to go diagnose. I honestly think that's a very broad statement that somebody said because they struggled too much setting up Spring, which is a little heavy-duty but still very easy. There's also a plethora of resources, tutorials, and books on Spring which makes it easy to learn and the Spring team is very dedicated to answering questions on SO. If they want to trash Spring, they gotta come up with better reasons than that (and there are bad reasons just like any other framework). 
Tad hard to, if any of your libraries are not modular (which is probably all of them).
Are you from Germany? If so, may I ask the name of the company? 
Great resource: https://docs.oracle.com/javase/tutorial/
Its Kiwigrid
Building Microservices by Sam Newman is excellent. Not sure what jeenajeena is referring to... Building Microservices dedicates an entire chapter to security and another to testing.
yeah, vert.x is great
Thank you!
&gt; I've met some people that think any line of XML is equivalent to being fucked by the devil, Literal LMAO - very accurate.
&gt;Why do you think so ? You can always use native queries, map views to DTOs etc. We're using Hibernate on top of several databases with sizes in dozens of TB (and no binary data, only structural) and thousands of tables and we aren't having issues with Hibernate's performance. In my experience, a lot of the time, performance problems boils down to a few things (or queries) so you just really need a reliable way to identify those (and you need even if you don't use hibernate).
We do at work and seems to do fine. Unfortunately, I dont know spring boots that well myself, so cant gibs too many details
LambdaMetaFactory spins a class that inherits that interface. Non capturing lambdas will end up being a Singleton tho
As for the simple HTTP endpoints and stuff, it does just fine. When you try to deploy a fully fledge Spring app with dozens of libraries it gets a bit nasty, tho. Lambda has a size limit, and for large apps you'll need to do deployments thru S3. Also, if your app is continuously alive, it would work fine, but for scenarios where you don't have enough requests to keep it up, and response time needs to be under a second or two, it sucks because cold starts.
That's the lib the vendor provides, FaaS are fairly new concept so you aren't going to have a plethora of other options right now. I've used aws-serverless-java-container and the docs were ample. https://docs.aws.amazon.com/lambda/latest/dg/java-programming-model-handler-types.html
It's ... okay. If you are starting a new project from scratch, I highly recommend just using node instead. Once you start getting a decent sized project with the usual bells and whistles, your war size starts getting way up there. You will basically have to use a rather large instance (at least 1024 mb) to get decent performance (since cpu allocation is based on ram) which in turn causes rather large cold/warm spin up time. A few of our apps started Spring Boot apps but were rewritten in to node to save costs. Once we had a decent sized app, our war sizes were well in to the dozens of mb with cold startups approaching 45 seconds -- these same apps with the usual Tomcat setup would have sub 10 second start up. Depending on what you are trying to do, you might be better suited to use other AWS services (EC2/Beanstalk, etc). A side note: the point of lambda is usually to act as glue between most AWS services. If you are attempting a web app type application, you are usually looking to have dozens of 30ish line lambdas hooked up to API Gateway to handle your requests for things. This is pretty much the exact opposite of the point of Spring Boot -- this isn't to say that it's not possible though.
You can get cold starts even if you're app is continuously alive. For instance, if you get a spike in the number of requests, lambda might decide to spin up a new instance that would be subject to cold start.
True, forgot that!
&gt; Of course, we understand that sun.misc.Unsafe is an incredibly important part of the Java world and using it can be the most efficient way, or even the only viable way to solve many practical problems. That is a horrible bandaid. 
That's the exact opposite of what he, and Oracle said...
&gt;Take a look at IntelliJs enterprise (or ultimate or whatever is called) and you get all those features in Eclipse for free. This is not true. Also, I was speaking to IntelliJ CE not Ultimate. I’ve used both IDEs and my personal preference is IntelliJ because the features I use most are smart refactoring and fast contextual assistance. The debugger is powerful, the UI is super intuitive, and I find everything to be generally more stable than Eclipse (from a year ago). I’m not saying IntelliJ is better or vice versa. They’re both good IDEs, choosing one comes down to development style and personal preference. It’s clear you have a strong bias to Eclipse which is fine but, you don’t seem to specifically even know why and feel the need to attack everyone else. Your opinion isn’t the source of truth. People are different. &gt;Except it doesn't. There are indeed fanbois who eat up everything Musk is shitting and praise every dumb design decision from JetBrains without thinking, and those would be happier. At that moment though one would have to ask himself if its worth employing them. Ironic. 
If the app is deployed to enterprise clients then this might require some pre-clearance. Infosec departments can be picky about what browser plugins are installed. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/8xwl8c/as_a_36_year_old_science_teacher_which_of_the/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Please, ask such questions in a more general subreddit, like /r/cscareerquestions, /r/cscareers, /r/learnprogramming. This subreddit is not for questions of your kind, plus it is only Java specific.
Fun fact: The new internal jdk.internal.Unsafe returns an Object as field offset. It warns that you should never treat it as an Object and only pass it to the corresponding Unsafe methods through. The replacement for field offsets are [Variable Handles](https://docs.oracle.com/javase/9/docs/api/java/lang/invoke/VarHandle.html).
I'm glad you found it good! May be I was looking for a deeper and more detailed book. For example, this is literally *all* that Building Microservices says about end to end testing. I'm copy-pasting "End-to-End Tests End-to-end tests are tests run against your entire system. Often they will be driving a GUI through a browser, but could easily be mimicking other sorts of user interaction, like uploading a file. These tests cover a lot of production code, as we see in Figure 7-6 . So when they pass, you feel good: you have a high degree of confidence that the code being tested will work in production. But this increased scope comes with downsides, and as we’ll see shortly, they can be very tricky to do well in a microservices context." That's all. To me, End to end testing is one of thee most critical topic in a distributed micro-service architecture. Honestly, I was expecting more. 
A lot of the slow startup time is from the ecosystem. Not from java itself. But to make it go faster you need to no do certain things or change frameworks. Firstly don't use a servlet container. Use a netty based web layer like ratpack or similar. Don't use claspath scanning. There is no API from java to do classpath scanning and if you ever look how it's implemented you will see why it's slow. Don't use refection at startup. Relfection can be very fast after a bit of warm up time, but during app start this can't happen. Both spring and guide use relfection to create beans. Try Dagger2 which doesn't. Avoid runtime byte code generation. That use of @Transactional you have, convert it to use TransactionTemplate. Look at what other libraries use runtime byte code generation and decide if it's worth it. Be aware of what java agent you have configured. The agent can scan and manipulate ever class as it loads. This can slow down startup time. 
So if you want C-like performance from Java, should you use sonething like GraalVM, Kotlin Native, or aot compilation?
Lol I now know exactly where you work. Source: I work there too
IMHO you really should not be using Spring Boot for Lambda's. Spring is designed for long running services. Lambda's are literally functions that get called and then are gone. Different paradigm. Lambda's should be extremely tiny and simple too, if you want long running more complex microservices you're better off using ECS/EKS. 
**log4j2**, simple, well-documented, fast and reliable. log data is being written to text files. to work (view/search) with generated huge log files, (10-20-30 Gb) I use **glogg** (for Ubuntu Linux OS). for those, who are interested, you can install it via commands `sudo apt-get update` `sudo apt-get install glogg`
lol xD And have an upvote! 
https://news.ycombinator.com/item?id=17499137
I started to avoid Spring when its magic hit me in my face with 100+ stack exception pointing towards runtime-generated code and Spring internals, with no way of knowing what's going on. That's maintainability hell. I started to avoid JavaEE when I tried to have a session-scoped LoginManager which could read users from a database - that's stateful bean and it just generated tons of NoBeanInScopeExceptions. I started to hate Dependency Injection when I had to turn every UI component (a PersonTable fetching list of Persons) into a managed bean in order to be able to access a bloody database. Java is not bad per-se; the problem is that it attracts crowd of complexity people giving birth to mammoths like Spring and JavaEE. Example: often all your project needs is to access a database. In Spring you need to include tons of libraries, create @Transactional-annotated services which will be enhanced in runtime, and inject them into your web layer somehow, only to have a database transaction. In reality all you need is to have a stupid function which will start the transaction, run given block and then commit the transaction afterwards: db { em.persist(Person()) } . That's database transaction in Kotlin. In Java 7 it was so annoying since you had to write new Runnable(){} etc etc, in Java 8 it's better but still sucks: db((em)-&gt;{ em.persist(new Person()) }). I saw the immense simplicity, yet at first I was afraid to make the move. Everybody is using Spring so it has to have a value, right? There must be some wisdom in DI and bean caching and all that, because so many corporate apps are using Spring. But then I looked at that 100+ stack exception and it made me so angry I made the move. Nowadays, from time to time I tend to be angry at myself - how stupid I was before, to blindly follow all Spring jarheads to let them dictate what I should use. You don't have to use Spring Boot - nowadays even retarded Eclipse is able to launch your WAR app just fine by a single click of a button. Or just use Intellij Ultimate. Use proper tools; don't let flawed tools require you to put workarounds into your code. Yes, I perceive Spring Boot as a workaround for Eclipse not being able to launch a WAR app. You don't have to use DI just to have a database transaction - just call your db{} method from anyplace you see fit. You don't have to use Spring because it does X - there is a library for that which you can use right away! For example: do you need REST client? Use Retrofit directly. Do you need JPA? Use Hibernate directly and pass EntityManager instance into the block of your db{} method. Drop Spring and embrace the freedom of you being in charge of the way how you structure your code, how you instantiate classes and how you call them. Now, after 3+ years without any DI nor Spring nor JavaEE, I believe your gut feeling is absolutely correct. I believe Spring mutilates the way of thinking of its practitioners. Spring is the way into complexity, its practitioners think in terms of complexity and if you seek simplicity it's next to impossible to find common grounds. Don't waste your energy arguing, follow the simplicity path. Oh great this sounds like a cult or something :-D I nowadays believe that you can replace Spring simply by the features of the Kotlin programming language. I've summed my thoughts in this blog post: [http://mavi.logdown.com/posts/3472486](http://mavi.logdown.com/posts/3472486) . I am now eating my dogfood by using this: [http://www.vaadinonkotlin.eu/](http://www.vaadinonkotlin.eu/) in my projects. Try it out, in the worst case you'll lose a week of experiment time.
Yep! Time will tell I guess.
Actually, there is similar warning in objectFieldOffset [javadoc](http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/sun/misc/Unsafe.java#l656) in JDK 8: &gt;Do not expect to perform any sort of arithmetic on this offset; &gt;it is just a cookie which is passed to the unsafe heap memory accessors. But nevertheless some libraries still treat it as a raw offset, so the problem appears.
To get a basic app working you end up downloading half the internet. There is the good 'ol node_modules directory which for even small projects can have tens of not hundreds of thousands of files in it. It's kind of a side effect of projects pulling in a separate library to check if a number is odd.
Another glorious day in the JVM! A day in the JVM is like a day on the farm. Every meal's a banquet! Every paycheck a fortune! Every formation a parade! I LOVE Java!
Damn dude thats very optimistic. You are either very sarcastic, or you've landed at a really good job? 
I think the whole point is that you don't have to use 300 jar files and 500MB of memory to run a lambda. Don't use Spring if you don't plan on running your own endpoint.
People who are using such arguments have unfortunately a very limited understanding about computer science or software engineering. Performance is only one (imho smaller) aspect of a system. Maintaining a system, extending it and keeping it safe are imho much more important aspects. Only the thought of writing plain SQL in conjunction with JDBC feels strange (debugging nightmare). I would rather have (at least for a business application) a full type safe query system (e.g. Hibernate + criteriaAPI or queryDSL) than a minimal improvement in performance. If your DB is not performing well, you can also throw money at the problem (It is 2018, even my desktop has a 6-core cpu). You could use a DB cluster. The performance increase is incredible (see postgresql + wal). You can also leverage DI without Spring (Guice, Dagger etc.). 
querydsl is not an orm
It would also help if spring supported [parallel bean initialization](https://jira.spring.io/browse/SPR-8767).
&gt; It's ... okay. If you are starting a new project from scratch, I highly recommend just using Node instead. I think it's rather strange to use the wrong tool for the job and then because it's wrong move to a completely different ecosystem. Not that there's anything wrong with using Node for lambda, it's just that the performance with Java isn't worse if you use it the way it's intended. A 'lambda' is similar in size to a single controller method in Spring. A cold-start for a Java lambda is the same as for a Node lambda, the other 44 seconds are Spring which really is not suitable at all for stuff that is not long running.
Haha, this is actually a quote from Aliens that we sometimes use to cheer ourselves at work: Another glorious day in the Corps! A day in the Marine Corps is like a day on the farm. Every meal's a banquet! Every paycheck a fortune! Every formation a parade! I LOVE the Corps!
This. Don't use lambda just because it's hype or use it the way it's intended to work.
Ohh. Hahahah. Okay I wasnt too far off asking if you were a little bit sarcastic then. 
Oracle stopped supporting the ARM version of JavaFX a [while ago](http://www.oracle.com/technetwork/java/javase/jdk-8u33-arm-relnotes-2406696.html#CACHGFJC), so presumably it is at least somewhat non-trivial... 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
[removed]
I haven't seen many caused by solution cloning - you can always plug in a custom solution cloner to prove that's the case - in that case I 'd very interested to understand what the generic solution cloner is missing, so I can fix it. But let's keep the support questions together (so the entire community can see it) @ [https://www.optaplanner.org/community/getHelp.html](https://www.optaplanner.org/community/getHelp.html) so let's continue there.
It looks like in your [submission](https://www.reddit.com/r/java/comments/8xz517/are_your_dyslexic_please_fill_out_my_survey_about/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This is incorrect, it’s easier to think of lambda functions as stateless docker containers that auto scale. The one difference is you can’t really do background work in a lambda as they’re only running when invoked. The bigger problem with using spring (and java in general) is that lambda execution costs rise with memory usage. A lot of modern java frameworks assume that memory is abundant and cheap which isn’t the case on lambda.
&gt; The new internal jdk.internal.Unsafe returns an Object as field offset. Could you provide more information about this? I have visited [jdk10 sources](http://hg.openjdk.java.net/jdk10/jdk10/jdk/file/777356696811/src/java.base/share/classes/jdk/internal/misc/Unsafe.java#l948) and it still returns *long*.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I haven't personally tried it but I seen there was a talk recently about Spring Cloud Function at SpringIO that I believe was aimed at AWS Lambdas
So which demonic reincarnation nof itext is this?
More info here: https://github.com/LibrePDF/OpenPDF and https://github.com/LibrePDF/OpenPDF/wiki/OpenPDF---License-MPL---LGPL-background-info
No praticular tips on Photon but on updating Eclipse in general: - make a backup of your workspace before using a new eclipse version on it - download eclipse fresh instead of doing an update - re-install your used plugins before opening existing workspaces. you can select and copy the list of plugins in Help &gt; About Eclipse &gt; Installation Details and you can also select and copy your existing plugin repos under Window &gt; Preferences &gt; Install/Update &gt; Available Software Sites. usually all plugins can be reinstalled within just a few minutes.
No.
You might have to bite the bullet on this one and add them manually in intellij
Another great library to edit and create PDF's, yet there's still no OSS, performant, bugfree way to actually display it a PDF in the Java ecosystem. (-&gt; ~~IcePDF~~) 
yes, I moved to germany about 3 years ago, russian part of german start-up was closed and I was valuable enough to be moved to the main office
why so?
you should continue reading :) '...as we'll see shortly, they can be very tricky...' He goes into the detail describing the many test scopes including unit tests, services test, end to end tests. he discusses tradeoffs, implementation, mocking, stubbing, and more. There is an entire section on 'Those tricky End-to-End Tests' By pasting 1 small blurb int he Testing chapter, you are gravely misrepresenting the content.
In your face, iText.
Personally I hate everything that spring boot stands for!
nice
Java sucked before Spring. Spring fixed a lot of the dumb things in Java (in particular they brought dependency injection to Java). Then Java fixed what sucked too. So the core of Spring isn't as necessary as it used to be. Many of the Spring libraries (like Spring Data ReST) are great though, and do things well that others don't do at all Spring XML also sucked, but you don't need to use XML anymore Hibernate is great for CRUD. Don't use it for advanced queries though. Use a library like JOOQ or QueryDSL
&gt; hibernate Wrote jOOQ the other day. Never looked back
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt;If this is your primary way of interacting with Hibernate, you're not using 90&amp;#37; of hibernate, nor you need it. Might as well use jOOQ or something. Yes, if 90&amp;#37; of your usage are things that don't fit the framework, then you shouldn't use it. In my experience, though, its more like 1&amp;#37; of the work that needs things like that.
Implement something fun (e.g., tetris, chess, etc.). Google things as you run into issues. It'll come back quick if you start using it again.
What module or engine or whatever should I use? I completely forget what we used in high school.
You don't necessarily have to use any engines. You could implement chess using console writes instead of using a graphics library. If you'd prefer to play with graphics, just Google "how to draw graphics in Java".
Not exactly what you are searching, but does your company use zscaler? Mine just switched from an inhouse proxy to zscaler and now we have to add its certificate to the cacert manually. 
A number of cert auths aren't in the jdk even in 8. You can launch your server using a system packaged one, create and manage your own or just import into the default cacerts store. 
For me, the thing that Spring boot/dropwizard/jboss etc solves is a boring one, I just want something that: 1. Lets me get started fast 2. Has good community support 3. Got most of the things I need Spring boot is that, dropwizard, jboss, standalone tomcat etc isn't
I would love to hear you elaborate on that, it might be that you know some drawbacks that I've missed :)
Does this help? I was looking at this article . . . # Using Mozilla's Certificate Authority List for Java SSL [https://www.petefreitag.com/item/830.cfm](https://www.petefreitag.com/item/830.cfm) Okay, it does . . . \#!/bin/sh curl -o certdata.txt 'https://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt?raw=1' perl mk-ca-bundle.pl -n &gt; ca-bundle.crt java -jar keyutil-0.4.0.jar --import --new-keystore trustStore.jks --password changeit --import-pem-file ca-bundle.crt So where does that [mk-ca-bundle.pl](https://mk-ca-bundle.pl) come from? More googling . . . and I find this: [https://github.com/curl/curl/blob/master/lib/mk-ca-bundle.pl](https://github.com/curl/curl/blob/master/lib/mk-ca-bundle.pl) It looks like it is part of curl. The next question is where does that keyutil.jar come from? [https://github.com/use-sparingly/keyutil](https://github.com/use-sparingly/keyutil) So this seems like a possible solution. But here I find Mozilla's cacerts in PEM format: [https://curl.haxx.se/docs/caextract.html](https://curl.haxx.se/docs/caextract.html) I think keyutil could import that into a JKS keystore. But can openjdk directly use a cacerts.pem keystore?
Perhabs this is related: https://blogs.oracle.com/jtc/openjdk-10-now-includes-root-ca-certificates No clue about certificates here.
Maybe some codingbat challenges?
&gt; You build a microservice to render the web pages and serving the static assets So now microservice just means "thing running on a server"
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
 just use editor.conf, or do not auto format. We are mixed no problemo.
Indeed. Crazy world, this actually sounds more like a web server/container/app, but it sounds not cool enough nowadays.
You probably need to publish the cert trust chain in your servers. We had to do this recently (but only for Java clients). Look at the `.crt` files published to the server, and verify that they go back to a trusted root.
Why is this on r/java? The article has virtually no mention of it.
I'm out-of the loop, what does this comment mean? 
Or just use Apache Camel with Apache MQ that works amazingly well for this kind of application.
I'm out of the loop. What does this comment mean?
iText changed their licensing and everyone scrambled to use something else, none as good as iText. But I haven't tried using it in years so maybe that has changed.
Have you tried the Qualys SSL tester? This sounds like you’re missing intermediate certs between yours, and the root CA.
Tutorialspoint https://www.tutorialspoint.com/java/java_quick_guide.htm They have many sections such as basics, concurrency, etc. You should download intellij ide and create a grade based project with Java jdk 8+
Goddamn. That is one detailed piece of research. Bravo. I'm gonna go down this road when I get into the office tomorrow. Thanks.
Doesn’t this belong on r/scala? I see no mention of Java in this article.
It seems that OpenJDK 11 b21 from Oracle still does not support HTTPS fully. Can be tested in jshell: `new URL("https://xkcd.com/").openStream()`. I patched my OpenJDK using cacerts from https://www.azul.com/downloads/zulu/ ;)
Oh now r/java likes kubernetes 🙄
Write a game with FXGL.
I heard many developers refused to fork it out of respect for the orignal developer that gotten screwed somehow. I think Jasper reports made millions off of it and he got nothing for his work. And his government made him pay large amount of taxes. Something like that. Not sure. But that was ages ago. So I guess people have to forgotten and have now forked and created newer versions. Gotta try this one out. 
Plus checkstyle and the [maven checkstyle plugin](https://maven.apache.org/components/plugins/maven-checkstyle-plugin/) exist. And the canonical build is gonna be maven based anyway if I'm defining it (I dislike xml as much as the next person, but maven just works), so that'll have a checkstyle pass among other things, whatever random ide/editor devs use on their desktops doesn't matter very much (and anyway I think checkstyle plugins exist for the big 3 (eclipse/intellij/netbeans) - so you can have a setup with checking within the ide that is against the exact same style definition as used during full maven runs).
At my current job I had no clue what in the hell Spring was or how it worked at all. While I am still a little sketchy on the details and some best practices in Spring, it only took me a few months to become quite confident and Spring. When I see an exception I know where in the app it is, it's remarkably easy to parse the stack trace. I have not encountered weird Spring issues as many claim, but I might not be doing the alchemy required to get it into such a weird state.
Is there any reason to use this over apache's pdfbox?
What does this do that PDFBox from Apache doesn't? I don't mean this in a competitive way. More like a Venn Diagram way
What do you mean? I have no experience with Camel and just googled it. How does it replace what's in the post? I have a similar type of application I want to build where I envision: web-page renderer (service?), API, both of which access a DB service (separate container?), and possibly another for running a queue? But I'm a mobile dev and have no experience with these tools so determining what the right approach is or what to use is daunting.
Would rather use cloud foundry for this. K8 is so much overhead for application usages. Regardless, thanks for sharing the article
Codewars
Why the hate?
It looks like in your [submission](https://www.reddit.com/r/java/comments/8y781t/biocrates_ag_is_looking_to_hire_a_java_software/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thanks for the words will be checking your code and blog.
Okay, will check your code and blog. Thanks for the thoughts
Camel is a really powerful and easy toolset to add high availability and resilience to a platform through load balancing, queuing, routing, splitting, priority validation and throttling. It implements a number of EIP's and supports a whole range of protocols. For example my last project involved receiving syslog messages from a waf, converting and queuing them then sending on as REST requests to a service layer. The service layer wasn't resilient so we used camel and Apachemq to buffer and prioritise messages. At about 1800 messages per second the Camel layer could buffer about an hour's worth of traffic in the case of a service layer outage and throttle waiting messages through when the load was too high. Much better than just scaling the backend to meet peak load. 
Theres a utility called Key Store Explorer (kse) that is pretty useful for managing trust stores
As some others have mentioned, double check your own server's setup. It may be old and slightly wrong, which the old implementation maybe didn't check but the new one is more strict about for better security, like versions of crypto algorithms in use.
You need this for most multi-user systems, sure. I don't quite get why you are asking, though. 
Just out of curiosity really... I mean if I were to make a software for a family business, I might skip this since they probably trust each other well enough to not mess it up...
Security Principle of Least Privilege. Yes. It's common to have role-based access. 
also if this was needed for 99&amp;#37; of the multi-user platforms out there, I don't see it talked about so much, considering it's usually the hardest part to code for
We *clearly* have a **"No job offers** rule here. *removed**
what does your project use if you don't use spring and hibernate? and how do your coworkers perceive them as better options for the task?
sure, gotcha. thanks
So... I was a dropwizard user before Spring boot was a thing. At that time dropwizard was described as an opinionated framework; i.e. the guy from Yammer who started it looked around much like the author of the article above for something that would be leaner for running a service and for every part of his desired stack he surveyed the market and asked himself what the best application server would be, the best JDBC library, the best web layer, etc all there on merit alone. And on the seventh day he saw that it was good, or something like that. You could make different choices, but you wouldn't because he'd done a great job and it gave you a whole community running the same great libraries and versions all the way down, with good documentation. Then Spring came along, already with the biggest reputation going for suffering from not-invented-here-syndrome and ripped off the idea but as they went down the same list a guy appearing to have tourette's shouted SPRING!! out as the answer the for the best library for every single question. Convenient. Except the application server. Where they picked Tomcat instead of Jetty, maybe just to be different and because there wasn't one with spring in the name. But where I'd moved from JBoss which was booting with my app in 30-40 seconds to dropwizard which started in 3 seconds, because they'd picked Tomcat an empty spring boot app on the same hardware was up at 20 seconds. That's before you've sold your soul and the best of breed libraries to lock yourself into spring. Of course, you can swap out even the application server with spring boot but by then you've shifted your position away from the community and thrown away the reasons to choose an opinionated stack in the first place. Don't get me wrong, it's just my opinion, it obviously works, some ~~of my best friends~~ decent devs I respect are spring boot users, but I think the whole philosophy sucks in a world where dropwizard is already a thing.
Sure, but spring-boot is only good if you need to do things as designed by it's developers, if you have to do something a bit differently then the price is high.
I wasn't talking about scripting, but about Maven dependencies, if you try to remove Guice from Jooby nothing is going to work, because it's pretty based on that. You can do whatever you want by initializing your objects by yourown, but you keep in your dependencies something you may not need. This is what I meant, nothing more. 
&gt; --password changeit thats a hint
Not really. If you want to do the same thing as you've been doing, the right way to do that in the new model is to stick with 'LTS' (Long Term Support) versions. So, right now, you'd target and run java8, and then at the end of the year or so, you'd target java11. If memory serves, after that you'd target java14 which should arrive around march-ish 2020. Your 'window' for switching from 8 to 11 has been reduced somewhat, but that's the only major effect. Consider the non-LTS versions as beta 'look at all these cool new features!' releases, great to try new things or if you have no problems committing to a rigorous update regime, but definitely not for anybody who has no particular interest in being guinea pigs for new features.
No, it means that you have to use LTS versions. 8 is a LTS version. 11 will be a LTS version. 9 and 10 are not LTS versions. It's good to be aware of the new developments, but you should ignore them for use in prod.
Scala != Java, hence *off-topic*. **Removed**
http://www.oracle.com/technetwork/java/eol-135779.html But what I'm reading here is that Public updates will be "no longer applicable" starting java 11. Also they state: Java SE 11 however is an LTS release, and therefore Oracle Customers will receive Oracle Premier Support and periodic update releases, even after Java SE 12 is released. But in our case we are not customers....
http://www.oracle.com/technetwork/java/eol-135779.html But what I'm reading here is that Public updates will be "no longer applicable" starting java 11. Also they state: Java SE 11 however is an LTS release, and therefore Oracle Customers will receive Oracle Premier Support and periodic update releases, even after Java SE 12 is released. But in our case we are not customers....
&gt; I mean if I were to make a software for a family business, I might skip this Of course you would because all software is different and has different features and requirements. 
 &gt; &gt;EDIT: sounds like LTS will be only for customers. Am I getting this wrong? Yes, you are. 
After a LTS release reaches EOL, only paying customers receive updates. At that point, as a non-paying customer, it is wise to migrate to a newer LTS version.
I agree with you. But with mentioning the: &gt; Even after Java SE 12 is released. Java 12 will not be an LTS.
You could use a jdk from Azul or adoptopenjdk. 
As that very link says, OpenJDK and oracle's JDK are interchangible, the differentiator is effectively that oracle's JDK is for paying customers, OpenJDK is for you. This article is specifically about the support roadmap for __oracle JDK__, not for openJDK.
I was also under the impression that even for LTS you would need to be a paying customer
They are using it as an example, the full text is; &gt; For example, Java SE 9 was a non‑LTS release and immediately superseded by Java SE 10 (also non‑LTS), Java SE 10 in turn is immediately superseded by Java SE 11. Java SE 11 however is an LTS release, and therefore Oracle Customers will receive Oracle Premier Support and periodic update releases, even after Java SE 12 is released. This example demonstrating that Java 11 (an LTS) will continue to get support while Java 12 is released.
For JAVA 8 (current LTS version), comercial users end of public updates is January 2019. That is for "non-paying" commercial users. At that point you will be forced to migrate to JAVA 11, unless you are fine with not receiving updates anymore. For premium customers, they get extended support until March 2025. After JAVA 8, non-paying commercial customers should be using openJDK. 
I hope it will not happen very soon, I still cannot migrate to version 2
Just copy over the cacerts file from the old Oracle JDK.
It's clearly written Oracle Customers though... 
Don’t really understand why you are getting downvoted, to me it seems a good question. Anyways, I worked at a community software firm for a year (still a student at uni, so not representative of general real software engineering experience). We had a system in place which let admins-users choose what kinds of access a user has, by default everything was off of course. I think it is standard to have such a system in place, but it is indeed not easy to develop, lots of places to create small bugs that could have large impact.
Exactly, so if you migrate to Java 11 and you are not a paying customer the only way you will be receiving free updates is to be always upgrading to newer versions of java 
No wonder watching these prices. 
I think we agree :) I'd have not built Jooby on Guice, but I'm beyond impressed at what Edgar has achieved.
This is the ticket where they are handling the EOL: [https://github.com/spring-projects/spring-boot/issues/13575](https://github.com/spring-projects/spring-boot/issues/13575) Seems like they want to EOL it with the Spring Framework 4.x line (which will I think be supported till 2019, [announcement here](https://spring.io/blog/2016/06/10/spring-framework-4-3-goes-ga)): &gt;the 4.3.x line will enjoy an extended support life until 2019
Could be just me, but I've completed stopped using \`null' everywhere. The concept of having nullable objects opens up a variety of problems that need to be handled with. Everytime I deal with an object of which I know it could be non-existent, I use Optional&lt;T&gt;. Otherwise, I just use the actual object.
When the EOL is announced, it'll be with 12 months' notice. The [current plan](https://github.com/spring-projects/spring-boot/issues/13575) is to make the announcement later this month when 2.0.4 is released. That will mean that 1.5.x releases continue until July 2019.
Unfortunately I think it may be true that they won't provide builds with backported updates. But this does not "kill Java" for small businesses as you can just use the builds provided by [AdoptOpenJDK](https://adoptopenjdk.net/support.html). They run all the tests Oracle do for their OpenJDK builds afaiu, and more besides, so you're not running something less stable. If you're not paying for support anyway you don't miss out.
2019 it seems. What's your problem with version 2?
While the LTS version is not EOL you will receive updates.
You can read out certs even in a password protected keystore. It just protects the private info. So why bother if it's just a truststore? Try it: keytool -list -keystore /etc/pki/java/cacerts Enter keystore password: ***************** WARNING WARNING WARNING ***************** * The integrity of the information stored in your keystore * * has NOT been verified! In order to verify its integrity, * * you must provide your keystore password. * ***************** WARNING WARNING WARNING ***************** 
Another option is just take the cacerts keystore from the Oracle JDK and swap the file out...no need to go hunting for individual certs.
But that is until Java 12. Like it says in the page: " Java SE 11 however is an LTS release, and therefore **Oracle Customers** will receive Oracle Premier Support and periodic update releases, even after Java SE 12 is released. "
No, that is until the next LTS, that being JAVA 14
absolutely :) I tried to talk to him about it once (it was 1.0 release more or less I think), but it was too painful to get rid of it (not impossible though)
No where in that page says that and a LTS comes every 3 years, java 14 will be out in January of 2020. The next LTS should be java 17.
Because this is a solved problem, mostly. The existing frameworks (Spring Security, Apache Shiro, whatever) are mature and easy to integrate and the concepts (from an application point of view) are not that complicated. Enterprise AAI and IDM is a different beast, but you don't need that for a family business.
https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html http://docs.jboss.org/hibernate/orm/5.3/javadocs/
Read the [Core Spring docs](https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#spring-core). The first section especially. After that dive into [more of the Spring docs](https://docs.spring.io/spring/docs/current/spring-framework-reference/). For Hibernate, start with the [JPA tutorial](https://docs.oracle.com/javaee/7/tutorial/partpersist.htm#BNBPY). It's not Hibernate specific, but really you want to know JPA, not Hibernate. Most of the time Hibernate will be your JPA provider, but it's the JPA documentation you want to know. If you ever get into a situation where you need Hibernate specific stuff, like @LazyToOne, you'll know you need it because you know JPA doesn't provide it.
What's the blocker(s) preventing you from doing so?
We're concerned that could be considered to be a breach of licensing. Even though I don't know how they would ever catch us doing that, better safe than sorry. The whole reason for moving from Oracle JDK to Open JDK is because Oracle has seemed to be getting a bit lawsuit happy lately. We're almost positive we're in compliance with all of their license terms anyway, but it's a better-safe-than-sorry manuever.
IANAL, but I don't see how the collection of root certificates contained in the JDK cacerts file can be said to be Oracle's property – they are all provided to Oracle by their respective owners. But yeah, I understand the better-safe-than-sorry approach. The brute-force way of doing it is of course to list all of the certificates in the Oracle file, download them manually from their vendors and construct a new cacerts file yourselves.
When I looked at it a month or so ago Spring data JPA has some major changes to the repository interface that’ll be a fair amount of work to update existing codebases
Understanding the magic behind the framework is a [noble goal](https://8thlight.com/blog/uncle-bob/2015/08/06/let-the-magic-die.html), and is actually very important to using the frameworks properly. I've seen some truly disastrous code written with Hibernate by people that did not know or care how their usage of Hibernate translates to SQL. To understand what Hibernate is doing, check out Martin Fowler's [Patterns of Enterprise Application Architecture](https://martinfowler.com/eaaCatalog/), particularly the data source patterns. Hibernate is a mapper (Object Relational Mapper or ORM, as opposed to Active Record used in Rails). Try implementing these patterns without a framework. Spring is a Dependency Injection framework. But I prefer to look at it as [Dependency Inversion](https://lostechies.com/derickbailey/2011/09/22/dependency-injection-is-not-the-same-as-the-dependency-inversion-principle/). To really learn how DI works, try [manually wiring dependencies](https://www.javacodegeeks.com/2010/12/dependency-injection-manual-way.html) Also, DI is one of the SOLID principles. Definitely learn this, since it really helps to write Object Oriented programs. MVC is a pattern for developing web applications, basically starting in Java with the original [Model 2 Architecture article](https://www.javaworld.com/javaworld/jw-12-1999/jw-12-ssj-jspmvc.html). This ancient article describes how to do manually what tools like Spring MVC automate.
Thanks m8.. that was really thorough and helpful answer !
Correct me if I'm wrong folks, but this is just a good reason to adopt the open JDK. That's what my company is doing right now.
I used to think like you as well.... but experience will show you that your users are never to be trusted to not mess things up :)
&gt; Oracle Customers But only for Oracle Customers. 
While this is interesting overview I don't understand what went wrong in the first case \&gt;the front-end and the backend are tightly coupled — *in fact it can’t process applications without the backend* Well the same is true in the "after" situation. If the backend is not available can one buy something? \&gt;the front-end and backend have to scale in concert — *if there aren’t enough backends, you could drown in traffic* Why is this the case? The diagram shows that there is a load balancer in between. So I could have 3 frontends and 300 backends \&gt;if the backend is unavailable, you can’t process incoming transactions. Same in the "after" case. If only the queue and frontend are available, can the users actually buy something?
Just write a little compiler to transform the code.
Great! 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Graceful degradation and reprocessing. If the backend isn't available, but cached resources or safe defaults are, you can use them. If the backend is only up and down moementarily the end user need never know. Example: let's say your not talking about an entire store page but instead a recommendation engine shown on the page. If the recommendation engine is down but it's front end isn't, just show some defaults or a cached version. If someone tries to buy something and a backend service is down, the message will sit in a queue till consumed. If something needs backend to process it's own message and isn't passing it along, it can error out and put it back on the queue to try again later and move on to the next one. Tight/Loose coupling is about whether or not two services can do their job without the other, or with different services entirely. If I'm only communicating via rest and queue then I can replace the gui webapp front end with something crazy like voice chat front end with an natural language processing library without even redeploying much less changing the backend if they're loosely coupled. Think about a real storefront. You can reasonsobly take orders even if you can't find the keys to the storeroom because the boss went AWOL for lunch.
Please cite an official Oracle documentation about these claims. I only find conflicting blog posts about what you're saying.
They are like stateless docker containers that can only run for 5 minutes. The problem with java etc in a lambda is the start up time. If your lambda runs for 3 or 4 minutes them that's less important but can be a big part of the costs and delays for small lambda. 
You can do all for this with circuit breakers. No need for a queue. And actully for java several good libraries exist for that. Have you used Circuit breakers before? [https://github.com/Netflix/Hystrix](https://github.com/Netflix/Hystrix)
Great idea thanks!
Thank you! Seems that a I need to start migrating stuff.
nice, my problem was fixed yesterday =) now I just need to wait for the release https://jira.spring.io/browse/SPR-16189
nice, my problem was fixed yesterday =) now I just need to wait for the release https://jira.spring.io/browse/SPR-16189
That is the point though: There is no LTS support for openJDK, only for Oracle JDK and that is only available to Oracle Customers.
I think the point is that there is no LTS version of openJDK. 
&gt;That is the point though: There is no LTS support for openJDK. [ citation needed ] 
https://adoptopenjdk.net/support.html &gt;In addition, every three years one feature release will be designated as the Long Term Supported (LTS) release. We will support LTS releases for at least four years. Satisfied?
https://adoptopenjdk.net/support.html In addition, every three years one feature release will be designated as the Long Term Supported (LTS) release. We will support LTS releases for at least four years. Satisfied? 
Tgis can be found with the simplest of searches on duckduckgo: https://adoptopenjdk.net/support.html In addition, every three years one feature release will be designated as the Long Term Supported (LTS) release. We will support LTS releases for at least four years. 
See above. &gt;at least not through Oracle
It is stated that non-paying customers should use openjdk. Why should I give a fuck about oracle, when it is stated that oraclejdk and openjdk are interchangeable and the people behind openjdk are supporting LTS versions of openjdk for 4 years?
It's not bullshit. AdoptOpenJDK It's a community effort and we'll see how well that goes. It's basically the difference of using RHEL and CentOS.
OpenJDK itself is maintained by Oracle. AdoptOpenJDK is basically a fork of OpenJDK that aims to backport all LTS patches that Oracle provides to it's paying customers. It is absolutely not the same. In the future we will have Oracle JDK 11, OpenJDK 11 and AdoptOpenJDK 11, all being potentially different in code.
I've found that it depends a lot on how much "help" you want from Spring, I mainly use it for the http endpoints/thread pool and dependency injection. So I'm pretty much free to add whatever I want. But I see your point and I definitely recognize that pain from the old jboss days
Which version of Spring Boot was this and what kind of hardware is this? I just tried writing a super bare bones dropwizard app and a super bare bones spring boot app and both start in like 5s on my laptop. And I know tomcat gets a bad rap but it's pretty good nowadays, check this comparison between jetty, tomcat and undertow. Unless I'm missing something I'd actually say that the fact that DW uses jetty instead of tomcat is a drawback: [https://examples.javacodegeeks.com/enterprise-java/spring/tomcat-vs-jetty-vs-undertow-comparison-of-spring-boot-embedded-servlet-containers/](https://examples.javacodegeeks.com/enterprise-java/spring/tomcat-vs-jetty-vs-undertow-comparison-of-spring-boot-embedded-servlet-containers/)
I was curious to see 2.0 a few weeks back, I reverted everything due to the JPA changes. I fail to see the benefit. They could have created new repository interfaces instead of wholesale changing the old ones.
Thanks for the link. I was talking about Oracle jdk which was what this was about, otherwise I miss understood it.
I thought this particular issue had been resolved when Oracle started adding the root certs to OpenJDK 10: https://blogs.oracle.com/jtc/openjdk-10-now-includes-root-ca-certificates What version of OpenJDK 10 are you using? What certificate count do you see when you run the command listed in the blog article linked above? &gt;jdk-10\bin\keytool -cacerts -list | find "Certificate" /c 
There is no 32-bit Java for Windows anymore.
It doesn't include all CAs yet. See [JDK-8193447](https://bugs.openjdk.java.net/browse/JDK-8193447): *most* certificates were added in 10 but some are still missing.
Hm, what would naming suggestions have been? &lt;code&gt;NewCrudRepository&lt;/code&gt;? We haven't broken any APIs in almost a decade and a major version seemed to be the exact right time to do stuff like this. It's mostly search and replace anyway.
To add to the other comment, 80 of the 104 certs in the Oracle jdk have been added to the open jdk.
I am the best to ask for naming conventions, but again, and even after Googling, I can't wrap my head around why the decision was made. Breaking an API for little, or no, benefit, seems less than ideal. In any case, thank you for your time and contributions and responding to my rant.
That's too bad. I just compared the cacerts file in Oracle JDK 1.8.0_152 (104 certs) to the one available in OpenJDK 10.0.1 (80 certs); these are the certs missing in OpenJDK 10: affirmtrustcommercialca affirmtrustnetworkingca affirmtrustpremiumca affirmtrustpremiumeccca aolrootca1 aolrootca2 deutschetelekomrootca2 entrust2048ca entrustevca entrustrootcaec1 entrustrootcag2 globalsignca globalsigneccrootcar4 globalsigneccrootcar5 globalsignr2ca globalsignr3ca godaddyclass2ca godaddyrootg2ca starfieldclass2ca starfieldrootg2ca starfieldservicesrootg2ca swisscomrootca2 ttelesecglobalrootclass2ca ttelesecglobalrootclass3ca 
Yep, I see that now. Hopefully the gap is closed in OpenJDK 11.
I didn't consider it a rant. Feedback is always welcome. [This ticket](https://jira.spring.io/browse/DATACMNS-944) has quite a bit of the rationale. It's not that we've changed the signatures at will. The request to make (the previously named) `findOne(…)` had come up multiple times and we had to put this off to this new major. Dropping the need for identifiers to implement serializable wouldn't have been possible without breaking code either as the previously chosen method names would've resulted in name clashes. These clashes were causing headaches on the old scheme as it in corner cases it wasn't possible to distinguish the overloads of methods that could take both an identifier or entity from one another. The new naming scheme solves all of those issues.
I appreciate the explanation. 
AdoptOpenJDK builds the binaries from the OpenJDK. The code is tested with the OpenJDK tests and the binaries with the official JCK. The only difference between the codebases are the potential backports. Though those are also tested with the backported tests.
Exactly! 
If you want the JDK for free after puplic EOL of Oracle JDK 8 (end of December 2020), I only see these options: * Switch to OpenJDK 11 builds and update to the newest JDK every 6 months after that. However I don't think there's "a lot of manpower" needed to "chase" the latest version =&gt; the updates are so small, that they are mostly comparable to the updates you have now within a version. * Switch to other builds that support LTS. Such as AdoptOpenJDK, Azul Zulu (idk), OpenJ9 (expected)
Thats not official Oracle documentation. AdoptOpenJDK has not affiliation with Oracle.
If it works, don't fix it
"iText was originally published by me (Bruno Lowagie) as LGPL" oh my god I never knew why iText had 'weird' package names (com.lowagie)... it was just the author's surname...
Oracle will not provide any public JDK build [after Java 10](https://medium.com/codefx-weekly/no-free-java-lts-version-b850192745fb). Then you have to switch to OpenJDK if you want continue using Oracle builds. However there you have no LTS. Any official documentation and presentation and Q&amp;A by the Oracle people states this.
I have indeed and wish I got to actually use them more. Product I work on has hystrix/feign clients for all endpoints (generated no less), but unfortunately no one uses the degradation because the services are heavily dependent with lots of up/down stream dependencies (how our services are architected isn't something I'm directly involved in, and I'm only just now crystalizing my own understanding of the very overly complex domain), so there's no real way to gracefully degrade most features and what we wind up with instead is a "try/retry/rollback" approach with queues.
OpenJDK has no LTS.
Oracle will not provide any free JDK anymore outside OpenJDK. JDK 10 was the last free build =&gt; No more public LTS
&gt;then, the VM will make an arbitrary choice as to whether or not to make any changes to fields this thread performed visible to other threads unless you've done a good job on reading the java memory model to ensure propagation of these changes" It's never actually doing that though, is it? Doesn't visibility in absence of volatile or other means of guaranteeing visibility depend entirely on whether the access that may not see the change has been JITed out of existence?
Around the time of the 1.0 release I think - I can remember now being told by a manager we should use spring boot because it had reached 1.0 and dropwizard hadn't. Ouch. The hardware was the same for all, a local linux server of the period, certainly dated by today's hardware. As for that link - I've just loaded a dropwizard app that used 16MB of heap space after starting, so whatever is involved in a bare spring boot app using Jetty consuming 300MB is nothing short of frightening. Anyway, even with a 20x increase in memory use, it's not really the technical differences so much as the philosophical ones which irk me.
Red Hat provides an unofficial Win32 build…but, well, unofficial.
So what does that mean in terms of updates?
I suppose the author did not work on adoption of a big legacy project, full of bugs and lack of documentation, where part of the existing documentation is outdated and does not reflect the current picture. The steps suggested in the article should be done with big caution.
OpenJDK will stop building version 11 when version 12 comes out. If you wan backports (i.e. LTS) you need to go somewhere else.
Azul still has it: https://www.azul.com/downloads/zulu/zulu-windows/
It means you have to update to each next release of OpenJDK, or find some other LTS provider (Oracle, Azul, AdoptOpenJDK, etc).
Bingo JPA changes are only thing stopping me from going 2.0 in older codebase. But our newer project is fully embracing 2.0.2 now. 
Updates move into the OpenJDK whenever a new version is released, that is every 6 months.
Yes. Worth its wait in gold pressed latinum.
IIRC the openjdk will be the same as the Oracle jdk, the only difference will be the licensing and the support. This is why Oracle is moving all its features in the openjdk project (e.g. mission control)
Type “reboot now” in terminal to restart server 
Learn integration testing and performance testing techniques and adopt a test-driven development mindset. Every task you do should be able to demonstrate with a test case that it a) works as planned b) handles common error cases and c) is performant.
Spring is great framework, easy you can make any big apps and systems, I hate SQL and Hibernate and sql dbs it is shit, I like NoSQL dbs like Mongo, with Java - Spring Boot - Vaadin - MongoDB you can make fast great apps deploy to cloud etc., without Spring you should write another own tools, it is wasting of time and you make more mistakes and bugs, and nobody will pay you, Spring rulessssssss yeahhhhhh
If your updating an existing app, id probably try to find out if the app is running in application container/manager like jboss, glassfish. (It may not be using any) or if it uses frameworks like spring. Then I would start researching performance enchantments, caching and etc with those frameworks etc. 
Also performance testing can be tricky. Alot depends on the environment / situation you are running in. Sometimes the answer is architectureal, i.e: add load balancers and more app instaces (/ containers), sometimes it can solved in the app itself. I've always used the old tool jmeter (from Apache) for load testing. You can also mock up fake soap backends with soapui. Though there may be better tools these days. 
Are you okay with anyone knowing the password changing who you trust? That having been said, if they are in the position to do that, you might have a bigger problem.
Are you joing a Dev team, or a project team where you are the dev? If your joing a Dev team, just ask them. Shouldnt be anything wrong with a junior Dev asking what to brush up on. If it's just you, I would try to find out as much info about the app as possible; architecture, code, documention, test plans. What you'll end up doing will really depend on the architecture. For example, if it's running in a app management system with multiple instances and load balancing. You be messing about in those app managers. So you might want to focus on understanding those. I.e it could anything from jboss to fancy new cloud things. If on the other end it could just be a single application. I Usually the app would be using an application framework like spring. Which if it is, I would read up on / understand, because when you first use it, it seem to do alot of "magic". It would be good to get the code so you know how it connects to the soap services, for example I've had loads of performance issues with JWS (the native java soap library). If you can grab the code and start playing with. Compile it, put it in a VM or container, mock up some soap back ends and play with it. You'll understand alot about it after that. Sounds like you'll be doing alot of load testing. I personally use some older tools, jmeter for load, soapui to mock up soap backends. Btw soapui can also generate you JWS code based off wsdl's. Performance issues can be a bitch. There are alot of gotchas. Garbage collection (if the app freezes for 3 seconds every hour), disk io (especially on virtualised servers), app running out of memory. 
Hey, fatdunky, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Good bot
Start a side project with all the tools, but you dictate the requirements. So you can concentrate on the tools. When you are in the "real" project, everything will look kind of similar and you will have the bigger picture in mind.
Typically networking and multithreading go hand in hand. So definitely crack open *Java Concurrency in Practice* by Brian Goetz. Thread safe code is very important 
Stupid question, but have you had many regression issues that were jdk version related? I ask because we keep up to date on the jdk, but haven’t run into anything ever that wasn’t our fault. I’m just wondering if our experience is unusual?
Wsdl makes me think that this is going to be based on systems integration. It would be helpful to understand what soap is and how to execute request/response (Java-WS or whatever you use). Another useful thing to learn would be integration/service testing. SoapUI will be extremely useful.
You basically described my day job.... Smart bear soapui. Groovy is you friend.
If you will be working with soap webservices and ready briefly on what that is, read about SOAP format and WSDL. Don’t go too deeply yet just get a general sense of how it works. Get a good feel of xml format. Most likely you will have existing code to learn from so don’t worry. Depends on what language you will be using. But if it is java then Apache CXF is a likely library you will be using to do it. Just know what marshalling and unmarshalling is.
So you suggest any resource in particular to learn those skills?
Thank you everyone for you answers!
Well, what do the logs say? There should be something more specific in the logs that you can google to help.
adding to what other commenters already said, choosing to design your solution with a reactive franework either it be rx or any, should NOT be your default go-to design and it's case by case basis. Hype programing is a thing those days.
No not at all. But I also can't update and put everything on prod and pretend it's okay... 
Goo lot
You should check out http://micronaut.io/ (from the people that maintain grails). It's a (heavily) spring boot inspired framework with a focus on startup time and memory consumption, and has first class support for [serverless functions](https://docs.micronaut.io/latest/guide/index.html#serverlessFunctions).
Did you want that or was it just a choice you had to make? Sounds fun! 
Good idea! See you on the other side slick
My guess would be snakeoil (aka antivirus-software) preventing some files to be written, so the installation fails.
Also, the examples only look nice and clean if you ignore the `...` parts. It's tempting to think that with new pattern X or framework Y everything will magically be simple and readable again, but that only works in blog posts and tutorials where you can skip the ugly and annoying parts or focus on very specific problems that conveniently fit the advertised pattern. Medium is full of articles like these. 
That must be the worst advice ever, unless I didn't see the sarcasm tags ;)
/s :) 
Shouldn't the first question be "Why"?
The best advice is: Do code archeology with a decent IDE. There's nothing more enlightening than using 'Show Call Hierarchy' or something to that effect on a large code-base. (assuming you can get access to their code early) Look at the entry points of the service and explore the code from there. Look at the existing integration tests (if there are any) and step through the code. Learn about the domain model and terminology. Adapt the code style (even if it hurts), you want a common code style throughout.
It looks like in your [submission](https://www.reddit.com/r/java/comments/8yiob9/ebean_orm_question/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thank you very much. This was it. :)
I just tried it, and I dont think you will want to use it: `➜ Downloads time python` [`helloworld.py`](https://helloworld.py) `Hello World` `python` [`helloworld.py`](https://helloworld.py) `0.01s user 0.00s system 98% cpu 0.018 total` vs java 11: `➜ bin time ./java ../../HelloWorld.java` `Hello World` `./java ../../HelloWorld.java 0.96s user 0.07s system 224% cpu 0.458 total` Also, probably some config changes are required, but it doesn't work now out of box now: `➜ Downloads ./HelloWorld.java` `./HelloWorld.java:1: error: illegal character: '#'` `#!/home/Downloads/jdk-11/bin/java` `^` `./HelloWorld.java:1: error: class, interface, or enum expected` `#!/home/Downloads/jdk-11/bin/java` `^` `2 errors` `error: compilation failed`
Let me try to clarify this as succinctly as possible with sources for reference: 1) Oracle is switching to an LTS model with one release every 3 years being designated as such. JDK 8 starts the LTS model with JDK 11 being the next. JDK 17 will be the next one after that, not JDK 14 as some people have said on this thread. 2) Oracle now produce two JDK binaries, the Oracle one (under the Oracle Binary Code License) and an OpenJDK one (under the GPLv2 license with classpath exception). 3) As of JDK 11, there will be no functional differences between the OracleJDK binary and one built from OpenJDK source. Things like Mission Control and Flight Recorder have been contributed to OpenJDK and things like Java Web Start and JavaFX will be removed from the Oracle JDK binary. 4) JDK 8 *public* updates will end January 2019. Non-commercial users will still get automatic updates until the end of 2020. 5) Oracle binaries of JDK 11 will no longer be free for use in production, only for development, testing and demos. Donald Smith, Oracle Product Manager tweeted about this, https://twitter.com/DonaldOJDK/status/977971082706612224 and the Oracle Java SE support page makes this clear, http://www.oracle.com/technetwork/java/javase/tech/eol-135779.html 6) OpenJDK binaries from Oracle will only be provided until the next JDK release (i.e. six months). This means that there is no LTS for free. Oracle will *not* backport fixes from newer releases to older OpenJDK versions. See Mark Reinhold's presentation on this, https://youtu.be/HqxZFoY_snQ?t=715 7) Users who wish to continue to use JDK 8 or JDK 11 beyond the end of free public updates will either need a support contract from Oracle (https://youtu.be/YauqubC8FKM?t=1282). Alternatively, they can choose another supplier like Azul (full disclosure, I work for them). https://www.azul.com/products/zulu-and-zulu-enterprise/. 8) The AdoptOpenJDK project is building free binaries but it is not clear yet who will do the (potentially complex) work of backporting fixes to older JDK versions from the current one. Next year will be a very different year for Java users...
Perfect thank you! 
I feel that throwing the JDBC API away and starting from scratch, while providing a wrapper to support legacy JDBC drivers, would be a better approach. These additions all make sense, but they only clutter the already large JDBC API even further. Isn't there an effort already to build a new, async-aware API that also delegates to JDBC if the driver lacks native support for it? Put work into that, and let JDBC slowly fade out. Also, "let ResultSet extends Iterable&lt;Object[]&gt;"? Raw object arrays? Really? 
Perhaps support NULL by making a specific SqlType.NullObject that gets used.
In regards to the request throttling, I'd suggest not configuring this within the application itself, but instead deploying a gateway to manage incoming requests. I have experience with Kong, which is easy enough to set up and has a configurable rate-limiting plugin out of the box.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Well, the link is great anyway!
Good. ;)
I used hystrix/feign at a past role and it was great. Obviously, it only really makes sense for some cases. For example, we had a recommendation engineer whose job it was to provide recommendations about what products to display in sidebars to users. If that service was down, we would fallback to a static set of content or an empty list (depending on various factors) to prevent it from crashing and give the user a good experience. 
For the performant test id look into Gatling.io
&gt; These additions all make sense, but they clutter the already large JDBC API even further They're just a few convenience methods. Does it hurt to continue maintaining one of the most used APIs in the JDK? &gt; Isn't there an effort already to build a new, async-aware API that also delegates to JDBC if the driver lacks native support for it? Put work into that, and let JDBC slowly fade out. ADBA isn't async-aware, it's completely async. Working with it synchronously will be a rather big pain. And while a new API could indeed be created that takes care of both sync and async access, this isn't being done. In any case, just because you want something new and shiny doesn't mean the old and boring must not be further maintained. Even COBOL gets updates regularly. &gt; Also, "let ResultSet extends Iterable&lt;Object[]&gt;"? Raw object arrays? Really? It was just meant as a placeholder type to prevent bikeshedding the concrete row type. Which it failed to prevent ;-)
Yes, that was suggested later on
I can only drill so far down an email thread before being blinded by stacked indents.
1. Java tutorial - you need to know basics 2. Book: Java 8 in action - Almost 95&amp;#37; tutorial was out of date or showed you bad practices, use this book to learn the good parts 3. Exercise: Spring Boot project - Spring Boot is a standard in the industry (or spring framework, but they're similar, spring boot is easier to start with, SB is based on SF) 4. Exercise: JHipster project - More industry practices combined with web development and some devops, TypeScript, Docker, Gradle, code quality, test coverage, performance tests etc. 5. Book: Effective Java 3 - Best Java 7,8,9 coding practices to improve your Java skills and write better code 6. Book: Spring 4 in Action - Improve knowledge of Spring, learn some concepts you didn't learn before in the exercise, jump on another level 7. Book: Java concurrency in practice That should you give you a year+ of solid good quality, industry standard practices lessons.
Yep, I wanted to move to Europe 
What do you think, will Jakarta rise or fall, considering that the competition (Spring) is not sleeping and is strong?
If they could just put re-implement JdbcTemplate I would be more than happy.
Somebody correct if I'm wrong, but JavaEE was just specifications. Same will be with Jakarta. Implementation was possible by multiple vendors with different interpretations. That is why Pivotal is one of participating members.
What about JOOQ? 
How do you even reddit?
jOOQ would profit from these improvements, of course.
&gt; use in production, only for development, testing and demos I never know what this means for ISVs. In my opinion, ISVs *never* run their code in production, only ISVs' customers do. But IANAL...
One benefit of Jakarta EE is that there is no vendor lock-in. You can switch the application server that runs your project without changing the code. This means that support costs will not skyrocket. Your code is written to an API. There are many application servers implement this API built by Tomitribe (creators of Tomcat), Payara, RedHat, IBM, and others.
These days you can run Spring Boot on Netty and that makes the whole experience a bit more lightweight. It is still Spring, but it starts much faster. For super simple REST endpoints- Javalin and Spark Java are fun. I actually also started with Dropwizard before Spring Boot basically dominated the enterprise. Didn't mention Dropwizard here, as I wanted 4 somewhat different approaches to simplicity, and Dropwizard and Spring Boot, are a bit too similar here (although, you may prefer Dropwizard choices).
If you want to do Java web dev I would recommend you to start with servlets and tomcat as servlet container. It'll help you to understand how a client-server communication works and how work most of legacy web apps. Then take a look at Spring MVC. it's a useful abstraction based on servlets (or Netty/Jetty). Finally try Spring Boot which is based on Spring and helps to build you application fast which is great for prototyping. 
Not most of the time, but it does happen. One example is a change of behavior in `String.split` going from Java 7 to Java 8. This [StackOverflow](https://stackoverflow.com/questions/22718744/why-in-java-8-split-sometimes-removes-empty-strings-at-start-of-result-array) post describes the behavior in detail. https://stackoverflow.com/questions/22718744/why-in-java-8-split-sometimes-removes-empty-strings-at-start-of-result-array
In a friggin year? What am I? Horribly dumb? No way I could do that in one year.
On that note, has anyone come across any reliable case studies of reactive architectures yet?
Is “Java concurrency in practice” still valid? This book was released in 2006.
I think instead of creating a new Freeable type, it would be simpler/saner to use autocloseable. Per the javadocs: &gt;close() closes this resource, relinquishing any underlying resources.
&gt;&gt;I can only drill so far down an email thread &gt;&gt;before being blinded by stacked indents. &gt; How do you even Reddit? I manage.
&gt; They're just a few convenience methods. Does it hurt to continue maintaining one of the most used APIs in the JDK? Actually, I think yes. The JDBC API is an unholy mess already. It is inconsistent, out-dated and full of bad design decisions and anti-patterns (`Statement.execute(String sql)`? Parameters start at `1`?). Adding more stuff to these god-objects and more ways to do the same thing does not really improve the situation. Adding convenience methods to JDBC may actually hurt maintainability, hinder progress and make it harder to argue for a new approach. Keep JDBC as it is, keep it painful and inconvenient. That's the best way to encourage people to come up with something better. 
The book mostly covers whats available in java.util.concurrent which has not changed much,
Gonna be difficult to shoehorn tdd into what sounds like a big ol dirty monolith..mocking daos, delegates, etc.. in theory your right but anyone who has worked in these projects may have a more cynical mindset ☺
&gt; It is inconsistent Examples? &gt; out-dated Thus my suggestions. Suggest yours! &gt; Statement.execute(String sql) What's wrong with that? &gt; Parameters start at 1 They do in SQL &gt; That's the best way to encourage people to come up with something better. So, use jOOQ already ;-)
&gt;&gt;&gt; I can only drill so far down an email thread before being blinded by stacked indents. &gt;&gt; &gt;&gt; How do you even Reddit? &gt; &gt; I manage. How is it different?
Clean Coder by Bob Martin covers the strategy of testing. I'm at a loss for technical tool resources - I learned JUnit as an intern and fell into companies that use Jenkins and Pipelines for CI.
"Object oriented programming" why would I care about it in java of 2018? Yup. Basics, standards and backbone hasn't changed. There are obviously new things like executors, Futures, new kinds of thread pools, taskExecutor and @async (in spring) but it's still based on the same backbone.
I've done testing on both ends. I agree with you that it could be difficult but understanding what you can do with automated testing helps. Even if you cannot implement automation the ideas of what to test and when still matter.
The release element is very well documented in my opinion on the Maven Compiler Plugin site. It only works with JDK 9+ The release element maps directory to the -release command in javac (in versions 9+) https://docs.oracle.com/javase/10/tools/javac.htm#JSWOR627 "Compiles against the public, supported and documented API for a specific VM version. Supported release targets are 6, 7, 8, 9, and 10." 
See also: https://youtrack.jetbrains.com/issue/IDEA-173143
Source meant what Java version could compile your sources. Target meant what Java version could run your classes. But there was a gap where you could run into runtime issues because you used an API in a newer version and compiling could not catch it. Say you did source 8 and target 7, you could use java.time but run into runtime issues. Target 7 is only for the class structure. So they added release to check for this and also to verify you don't use internal code that only the JDK itself is allowed to use.
Please please please learn Maven or Gradle, is not a java framework but its used every day as Java professional.
I never saw this kind of portability in JavaEE there is too much spec that is up to implementors. I can not see it working if you try to just switch from IBM WAS to RedHat it will never work. I had problems with porting between IBM Liberty profile and OpenLiberty.
They're kinda trapped by JDBC4. There's a LOT of stuff that's already relying on it. Deprecating or moving off that would be really difficult
Jpa? 
my 2cents: on the subject of plugins, i have Infinitest and MoreUnit installed on every IDE, also like to have Sonarlint, PMD, CheckStyle and SpotBugs on Eclipse ( although i dislike Eclipse very much, and love IntelliJ ). since, in my particular case, there are no business analyst around to cooperate with the functional tests, i am biased towards spockframework with groovy ( but spock also works great with java ) for my behavior testing, no need for separate gherkin files... yes, on the integration testing front, since the application will be deployed on wildfly, you will want to have arquillian as your runner. But for your database testing, you probably will want it to be mocked by something on memory ( hsqldb is great for this ).
 &gt; &gt; &gt; &gt;
I read it all already, man. Sorry, I don't think it was just a small blurb: it was the whole "End to End Test" part. Now, my goal is not to convince anyone. You found the book useful, and I'm perfectly happy with this. I found the whole book really very sketchy. And honestly, it taught me very little. May be it's my fault, may be I had too high expectation.
Be prepared to do admin/remedial work when someone unsure about what to do goes into an area they don't understand and "tries out" a feature that you thought no one would touch. As you spend time trying to fix what they did, you'll realize that limiting what users can do--even if they're family members--has benefits. 
Aside from the other good comments here. Write a simple contact book web application using servlets and jdbc. You will then understand the underpinnings of the stateless request/response model of the web and direct SQL. Once you've gone though that pain you will have a deep understanding of why certain frameworks like Spring and ORM etc... exist. 
Spring makes use of JEE implementations (e.g. Servlet, JPA, JMS). And some improvements in JEE even came from the Spring community. So Spring is not competition for JEE and vice versa.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
True, there will always be those issues. But it is not like you have to rewrite it all to a new API.
It was never really safe to have a higher source than target. In older JDKs, you also ran into issues where Java internals were rearranged between versions, so for example, if you were using Java 8 and wanted to use `-source 1.7 -target 1.7` you'd need a copy of the 1.7 rt.jar and tell Maven to use it (I forget the exact command to do it).
I haven't kept up with JDBC. Have they added support for the java.time things yet?
I think you would need to check this with Oracle (who have plenty of lawyers to help you :-) ). I suspect that ISVs can develop their software without a support agreement but once it's deployed for use it would need a support agreement.
I don't know, the jdbc ecosystem is pretty big and beyond some warts (and the obvious verbosity) jdbc is quite usable. Replacing jdbc wouldn't lead to anything better than what we already have with frameworks like jooq, jdbi, jpa and it would break the whole ecosystem on the *use* site (abstractions, connection pools, etc). Async is a valid point but I think it could be bolted onto jdbc. The rest can be solved satisfactorily by higher level database apis.
Depends on what spec you are working with. Some of them, notably, in my experience, portlets(fucking portlets), have too many details undefined making moving servers problematic. It also doesn't help that some application servers do dumb things like put classes onto the classpath by default(Suck a dick Websphere). If you stick to the servlet spec though it should be easy to move. I feel like if you are migrating from a servlet container like tomcat to an app server it is easy. Seems like the application servers are what create the specific lock in.
&gt; The AdoptOpenJDK project is building free binaries but it is not clear yet who will do the (potentially complex) work of backporting fixes to older JDK versions from the current one. I believe red hat has told their paying customers that they will support java 8 until 2020. And since the license they are working under is gpl (with a classpath exception) that means that the rest of us will get any patches they put out too. I don’t know if they’ve made any commitments yet regarding java 11, but I’d be very surprised if they don’t commit to supporting that longer than sixth months too. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Re e2e Refer to my previous comment
So, does this mean I could actually be using Java 10 to compile my Java 8 code that must run on a Java 8 vm? Without any rt.jar nonsense? Wonder if there's any benefit to doing so?
/r/javahelp /r/learnjava 
Moving between application servers is not half as difficult as moving between Spring and JavaEE. Source: done both, and while neither is pleasant, I'd rather move between application servers.
There's going to be a multi-tier thing. 1. At the finest-grained level, you have environment tests. This includes, but is not limited to the test suites of your libraries and runtime, heartbeat tests for your network connections, and similar tests to ensure that the things you assume work are, you know, on and working. 2. Your unit tests. It's not "wedged in there". You should be doing TDD. The second D is both design and development. And running those tests should be a part of your build process. 3. Integration tests. There are ways to do this. Use an in-memory JavaEE application environment or spin up a cloud instance, deploy to it, and run the suite against that cloud instance. This is how you test network interfaces, database access objects, and the like. Run this after a build succeeds (meaning it compiled, unit tests built, and the final deliverable artifact is generated successfully). Since you're doing REST, RestAssured is your friend. 4. Functional tests. Hello there, Selenium. Automate all the things. Again, run these against a cloud server or continuous integration box. 5. Monkey tests. These will monkey about with your bytecode and try to make things fail. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
it really should be set up no matter what its for becase one family member could use it in the wrong way to there advantage or agaisnt you. If your using it for out of family memeber then its quit a dumb question to even be asking.
I wish the OAuth support would catch up in Boot 2.0/Security 5.0. They basically gutted all the convenient autoconfigured OAuth server beans in an effort to “better align with other Spring projects” but before they had any real support for OAuth resource or authorization servers. We roll our own using various customizations and the upgrade added a lot more configuration that we couldn’t sort through in a short enough time to be useful. 
The theory is valid, but if you code like the examples in this book you will get some talking-tos by co workers. I'm not sure about a newer book, but find something in which the theory and implementation match the real world today. The underlying principles of concurrency may be as hard as ever, but frankly concurrency implementation is much, much easier these days. Functional interfaces, Streams, CompletableFuture, and Executors completely changed the way you do concurrency in practice for the better. 
It's really not all that much if you really jump into it with two feet. Personally I'd consider #4 to be extremely optional, and I'd replace #7 with something a bit less dated. 
I second this. You should learn this after #2 on Akerro's tutorial list. Maven and Gradle are important enough that I'd consider them fundamentals. You need to learn one very well, and be relatively familiar with the other. They are extremely frustrating to learn, but you'll understand once you learn them. You will use one of them in basically every single project you write. Really you should use one of them in ANY project with dependencies. 
I don't think it's so much about learning frameworks as it is what you can learn from frameworks. Plus, you aren't suppose to know everything. In the real-world, you will be on a team with junior and senior people, and you can always ask them. I don't think books are necessary, as there's a lot of free resources available online, you can consult Google and StackOverflow as needed. You didn't declare whether you wanted to go down the UI or API side of development, but I will speak to the API side since that's the side I went down. Also, you don't have to learn these frameworks in any specific order. Think of it as a multi-headed beast, they are non-linear. You can learn some of one, then switch to learning a second framework, etc. For a build framework, I would recommend Maven getting started. It has a static XML structure and it's the easiest to understand and troubleshoot. Gradle came after Maven, and is more like dynamic JSON, where it feels like you write code as part of your project definition. Plus, Gradle had a 24-hour dependency caching quirk I didn't like the last time I used it. You need to learn a logging framework as well. Three popular ones are log4j, slf4j and logback. You can also use sl4fj on top of log4j. The oldest is log4j, but I still see it used in practice 10 years later. Which one(s) you learn are not really important. Just don't use System.out.println() or System.err.println(). Learn how to write unit tests. JUnit and Mockito (mock non-static methods), maybe with PowerMockito on top (to mock some static methods). The Spring Framework is a dependency injection framework. To me, Spring is configurable, inversion of control, and programming to interface. However, Spring and Spring Boot has introduced a whole bunch of @Annotations, that I consider black magic. You should really understand plumbing within Spring, before you start using the annotations shortcuts to hide the plumbing. I would exclude Spring Boot and microservice architecture from your initial pass. Similarly, learn a data-binding framework like Gson or Jackson. They can convert Strings to and from complex data model objects. Kind of an aside, but avoid Java's Reflection API initially. That's another kind of black magic. There are also caching and persistence frameworks like Memcache or Hibernate respectively. I don't have anything in particular to say about either, but I'm noting these so you'll be aware of them. Feel free to Google them. Version control: You have Subversion or Git. Subversion is the more simple and straightforward option, but Git is more flexible and complicated. This isn't necessary to know initially, but once you start working with a team, you will need to know this. You can learn about branching, merging and pull requests. Java 8, 9, 10, etc: Streams are convenient, and knowing the latest features is nice-to-have. You can "de-nest" for-loops, but this is not as important in my opinion. It is the same concepts, just re-dressed so you can write cleaner code. Agile, Scrum, Kanban and Lean are software development frameworks. Don't learn any of these. Each company I've worked at does it differently and they may not actually be for the best. From there, there's a bunch of technical subjects, like web servers, HTTP protocol, HTTPS+certificates, security that aren't particularly bound to frameworks. Learning how to debug issues is invaluable, and that doesn't just mean using a debugger on your local DEV environment. Then there's some non-technical concepts like team and social dynamics.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
nice article
To achieve effective non-flaky CI you need to mock all the things. For unit tests mock the local dependencies. For integration tests mock your external dependencies. You can use API contract testing to make sure that you have mocks that are accurate. Only have a hand full of slow automated flaky tests that test the full test/staging environment to see if all connections are live. If you CI mainly has tests that depend on a full test environment being live you will have a bad time. You can run your UI tests against a mocked backend, they will be much faster and less flaky. You can even set up contract testing for your own backend API to generate the mock server for your UI tests. For tests involving your database use an in-memory database like H2 or use docker to run an instance of your actual DB brand. Have sql scripts that initialize your test DB before you run your tests. 
All I wish is prepared statement. SetInt, set Double, etc to take an uppercase Object variant of their parameter, then bind a null instead, if they're null. Ditto returning uppercase objects for result set, and simply returning null when they're null 
Yes
And also: https://youtrack.jetbrains.com/issue/IDEA-195472
The maven plugin supports the &lt;release/&gt; element perfectly fine, but IntelliJ doesn't pick it up, you'll have to duplicate the information in the classic &lt;source/&gt; and &lt;target/&gt; elements, see: https://youtrack.jetbrains.com/issue/IDEA-195472
They're aware of `Autocloseable`: &gt; However, it is not too late to retrofit this by adding a new Freeable API (this is optional, prevents repeating the fix) and letting Freeable delegate to AutoCloseable. The point of an additional interface is to write: interface Freeable extends Autocloseable { abstract void free(); default void close() { free(); } }
Yeah I already use JUnit in my personal project, but I haven't felt the need to use continuous integration yet. Clean coder has been in my reading list for a while, so it's about time to start reading it
Maybe, if you don't also try to run the code with 10 in a constant fashion. Depending on your code, 10 may very well be missing classes (from certain modules) by default that 8 provides.
In the professional world you will have to deal with bad code and coders who don't care and don't want to improve. Learn to deal with that: refactoring, unit testing on the code side, diplomacy on the team side
Without Jakarta EE, Spring will likely sleep...
Oops, copy pasted the title, then accidentally put an enter in it, which I corrected, but then it ended up like that :O Where's title editing when you need it?
Project page: http://openjdk.java.net/projects/jdk/12/ (nothing interesting yet)
It looks like in your [submission](https://www.reddit.com/r/java/comments/8ys6k1/download_uri_error_please_help/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/8ysady/java_design_pattern_suggestion/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You don't do that in reddit
All the time. Then again, when I started using Java, the javadocs were the only source of information available online and we used to buy books for the actual examples.
Maybe I should write a JEP...
A lot of the more complicated classes actually have example code inside the Javadoc and the documentation of classes I write will also Cain tain example code if I think that this is helpful. I don't think classes like ArrayList need example code inside the Javadoc. It's obvious from the documentation how to add or access elements and do other typical things, so any example code would be relatively useless and just add noise. Common IDEs also tell you when you're writing suboptimal code, for example adding things in a loop when you could have used addAll. 
The Javadoc has always been terrible. I can't understand why they don't put in examples either. It's one of the worse parts about the language in my opinion. The [Java tutorials](https://docs.oracle.com/javase/tutorial/) and [Java EE tutorials](https://docs.oracle.com/javaee/7/tutorial/) are good however. I just wished the Javadoc at least linked to them.
they release new versions faster than angular
Actually I’ve been thinking about doing this. I really want to see a null coalescing operator in java. Not sure where to begin though
On a related note, is there a tool for writing docs like sphinx provides for python? I'd like to write API docs and prose documentation in one system, and have it understand my code as well. 
Considering the new 6 month release cycle...
These major version numbers are accelerating something fierce. 
I agree that the official docs are pretty bad, I never used them while learning Java. If you're still learning Java, I recommend just adding "stack overflow" or "example" to your google searches.
&gt; does that mean that now, every half a year, we'll have to update Based on my experience it's very common in the "enterprise" to run on an outdated JVM. The new release cycle won't affect this...
If you want to make JUL async, \[this\]([https://github.com/a-hansen/alog](https://github.com/a-hansen/alog)) is small and the license lets you do anything you want with the code such as copy and rename it.
Check \[this interface out\]([https://github.com/a-hansen/alog/blob/master/src/main/java/com/comfortanalytics/alog/Alogger.java8](https://github.com/a-hansen/alog/blob/master/src/main/java/com/comfortanalytics/alog/Alogger.java8)), it doesn't require the host project. Basically you can: \`\`\` finest(finest() ? complexMessage() : null); \`\`\` The message isn't generated if FINEST isn't loggable.
If only they increased the major version on LTS releases it would be better 
The problem is that most companies will only upgrade to LTS versions (why upgrade a minor that is only supported for 6 months), which after Java 11, will only be out with Java 17 in 2021. So yea, no luck for us with raw strings.