&gt; I like Java as a language but kind of hate EE. Why?
this isn't recruitment spam. There are quite a lot of java devs that would like to try scala out, hence me posting in this sub. 
I kinda agree with you at most points. Only Spring is not a direct fork of J2EE, but initially (and still largely) a wrapper API with its own component model. This "Summer" that you speak of would have to be a new API too really, not using any of the Java EE packages for a starter, and perhaps even not all the API classes either (because of IP). It looks like Java EE guardians really like Java EE, and want that to continue. Not start a new framework. If the framework is just a new name and renamed packages, I could see it happen. If the entire user facing APIs have to be designed from scratch (wrapping the existing EE implementations), I'm not so sure...
Also, JavaFX is faster and in my opinion simpler to understand. 
Definitely Java FX
&gt; This "Summer" that you speak of would have to be a new API too really You aren't perhaps talking about Lagom, by coincidence? &gt; It looks like Java EE guardians really like Java EE, and want that to continue. Not start a new framework. If the framework is just a new name and renamed packages, I could see it happen. If the entire user facing APIs have to be designed from scratch (wrapping the existing EE implementations), I'm not so sure... We'll see :-) The dynamics of forks are unpredictable. When interests clash, and no authoritative entity makes the decisions... That used to be called anarchy in other contexts. Let's see how strong (and homogeneous) this "community" really is.
&gt;Starting with JavaFX 2.2 and Java SE 7 update 6 (7u6), the JavaFX libraries are part of Oracle JRE 7. A standalone version of JavaFX 2 is available for Oracle JRE 6 users (Windows only). http://www.oracle.com/technetwork/java/javafx/downloads/supportedconfigurations-1506746.html
The only problem with that is that the JavaFX versions 2 and 8 are not entirely compatible. JavaFX 8 differs from 2 so that applications written with JavaFX 8 can't necessarily be compiled with JavaFX 2.
&gt; But who knows what they are thinking :( Whatever it is, it doesn't look like they have ever been [*objectively* wrong](http://finance.yahoo.com/echarts?s=ORCL+Interactive#symbol=ORCL;range=my)
LGPL? forbidden at work.
Unless you want to have tables representing 2D object arrays , then JavaFx is the way to go.
Stock prices have very little to do with a company's long-term prospects or strategy.
Are you the fucking [oracle](https://en.wikipedia.org/wiki/Oracle)? That's strictly your opinion which also smells biased. Don't tell that crap to people like it's the pure truth just because you believe it. Nobody gives a flying fuck what you believe. If you have something like that to say, than back it up with arguments and proofs.
I couldn't zoom out more than 30 years on Yahoo! if that's what you mean by "long-term"
Microsoft did an internal study of a team with and a team without TDD http://www.infoq.com/news/2009/03/TDD-Improves-Quality &gt; The pre-release defect density of the four products, measured as defects per thousand lines of code, decreased between 40% and 90% relative to the projects that did not use TDD. The teams' management reported subjectively a 15–35% increase in initial development time for the teams using TDD, though the teams agreed that this was offset by reduced maintenance costs. I think that sums it up. If you have 35% more time to give now, to save 90% of bug fixing later, TDD is for you. I do all java. Sometimes I TDD, sometimes not. There's nothing unique about the combination of Java and TDD that i can think to mention. You write asserts in JUnit or TestNG, you write the code. Straightforward. It's definitely a learned skill, requiring practice working and thinking this way. It's not magical but the costs and benefits are plain to see. It dovetails with Agile and Extreme Programming. If you're not a tiny startup, there's a good chance that compliance with TDD combined with adopting an agile methodology will get you making better software with less chaos. 
I'm in a startup. I'm mostly talking about adopting agile. If there's 4 devs in the whole company who know each other real well, corners get cut. No reason not to do TDD, other than it's hard to justify the time when we're in crunch mode with limited runway and need to get to a minimum viable product. If I'm working 60 hour weeks I won't turn it into 80 hours by blanket enforcement of TDD. I'll use it selectively where I know it will help me get done faster. All sorts of healthy habits get abandoned in crunch time. I'm not saying our code is untestable, just that our coverage isn't as great as it could be. This is just personal preference, of course.
It would be nice to know what's in the book. Table of contents and a sample chapter (preferably not the Intro chapter) would help justify the $35 price.
I run a small Java team which work on a small project basis, primarily covering back end systems, integration and J2EE. I insist on TDD, and the tests suites form part of the deliverables we hand over to our clients at the end of the project. My devs are all pretty experienced and comfortable working with TDD, but we occasionally get a new guy or two who struggles with it. We plan in a way to give them more time as I'd rather have them learn and get comfortable then not work in TDD. TDD is often a difficult sell to a customer as they often don't see it as 'productive code', but we regularly prove the benefits of test coverage when we later get asked to add new features and during bug fixing. I find most resistance to TDD is from 'lazy developers' who basically don't want to do the extra work, or have to think about designing their code in a modularised way that can be easily tested, or produce tests that are too tightly coupled to their code making it harder to change later. However, I've definitely seen benefits over the years I've been practising it.
There are a good many companies still developing desktop applications. It's not as common as it used to be, granted, but they wouldn't develop JavaFX (and continue to do so) if the market was completely dead
I'm curious, does TDD automatically imply "Test-First"? That is, do you write your tests before writing any production code? Or does it just mean, ensure that you have reasonable test coverage for all of your code?
You can embed swing components in javafx with varying levels of success. I embeded a JOGL view into a javafx window pretty easily. this is the class that allows it https://docs.oracle.com/javase/8/javafx/api/javafx/embed/swing/SwingNode.html
You can embed swing components in javafx if you want, though not all work perfectly.
I think part of the answer to your question can be found here: http://martinfowler.com/articles/mocksArentStubs.html "TDD's origins were a desire to get strong automatic regression testing that supported evolutionary design. Along the way its practitioners discovered that writing tests first made a significant improvement to the design process." So, initially the benefit was strong automatic regression testing in which case having reasonable test coverage doesn't necessarily require test-first. However, as Martin Fowler points out, a goal of TDD is to improve design and we lose this if we aren't writing the tests before we start working on production code.
Yea, I'll just blow it away and start over... I didn't do anything except get the social logins working for google and twitter... It's a really neat project for folks that want to do something quick (and don't mind a little magic). I'm not sure I'd use this for a work project.
What about the Hints built into the IDEs?
JavaFX is nice to use. The only thing keeping me from using JavaFX is that Linux distributions do not come with JavaFX out of the box. For most of them you have to manually install the Oracle version. That is a deal breaker for my use cases. Swing is tried and true and still easy enough to use so I still use that. When Linux distros start supporting JavaFX in the JDK better I will start using it.
I don't use TDD as a replacement for design. Quite the opposite, code *has* to be designed in order to be able to write suitable unit tests. And I don't appreciate personal insults when I was simply giving an opinion and my approach to TDD.
Better than $500 * person * months
I do agree with you. While I love java and hate javascript so much, people need to ask themselves why they're making a desktop app. Chances are it makes way more sense to run it in a browser. There may be cases where a desktop app is better, but it's rare these days.
Did Python 1.0.0 support anything other than Amoeba OS when it was released? Not that it matters, I'm just curious.
There's also fb-contrib (am on mobile, someone please link) adding even more checks to FindBugs.
Thank you for a good answer to my question. I will probably focus my attention towards JavaFX.
There's also other tools like Teamscale that integrate or replace these checkers, as well as provide additional, more complex analyses like clone detection or architecture conformance analysis /shameless selfpromotion :P
Don't forget: * javac -Xlint:all * Error-prone * Android lint * Infer https://github.com/mcandre/linters#java
What's the difference between the two?
what about readability, lambdas already made that much harder
Think: Spring Roo wrapper around Spring Boot, but with command line at the beginning only and minus AspectJ magic. Also, with hipster.
Probably one does what you want, and the other does something else.
This is quite informative! Would you like to share some resources on TDD or key pointers (you mentioned that you get new guys in the team, how do you guide them ) ? 
Where is sonarQube?
We assign mentors (usually the more experienced team members, but can vary depending on project and resourcing requirements) to new guys who will help them get to grips with things like our methodologies, coding standards, etc. If we end up with a team consisting of a lot of guys without TDD experience (rare, but my teams can vary depending on other projects/resources within my company), we'll occasionally run TDD workshops where one of my senior guys or myself will go through a fill worked example of TDD, and then point the new guys in the direction of suitable resources so they can self learn (although we support them as much as required). In terms of resources, there are a number of books we have on our internal "recommended reading" list: 1. The Clean Coder : A Code Of Conduct For Professional Programmers by Robert C. Martin (http://www.amazon.com/The-Clean-Coder-Professional-Programmers/dp/0137081073). This is a good book for developers in general, but has a good section on TDD. 2. Test Driven Development : By Example by Kent Beck (http://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1458766760&amp;sr=1-1&amp;keywords=kent+beck). Kent Beck is one of the leading proponents of TDD, and this is well worth a read. I find that the fact the text is example driven really helps our developers relate TDD principals to actual real life situations. 3. xUnit Test Patterns : Refactoring Test Code by Gerard Meszaros (http://www.amazon.com/xUnit-Test-Patterns-Refactoring-Code/dp/0131495054). This is a bit more advanced and goes above why and how to use TDD - in fact, it's not specifically about TDD, but rather just unit tests in general. However, it explains ways and patterns that can be used to design your code *and* your tests correctly in order to produce quality tests. There's a lot of information on the web, but I find sometimes books are just the best source.
[removed]
Is this a WIP? Curious if they have a scheduled date for feature parity. 
OK cool, I'll look into it.
I personally feel like JavaFX is more intuitive and less cumbersome than Swing -- but if you plan on making a very intricate program your best bet is probably with Swing (due to its libraries and current resources). 
* You want to recruit people. * You post in a place where it’s inappropriate to do so. Hence, recruitment spam.
YES! Switch to JavaFX. The UIs look a lot nicer, it is very easy to use and it is just structured nicer. Also, Scene Builder and FXML are amazing!
Thanks, I'll take a look at that!
TDD doesn't imply test-first, it requires it. Some folks take this to mean that you write your whole test suite first, but that's not the case. With TDD, you write the smallest unit test that will fail. For example, instantiate a class that doesn't exist yet. Then you iterate like crazy on that until you have the desired functionality using [red/green/refactor](http://www.jamesshore.com/Blog/Red-Green-Refactor.html).
Prewrite test = bad; Postwrite test = good? Why?
&gt; it just makes that crap code properly testable An interesting side effect of this seems to be an increase in modularity and a decrease in coupling, overall. That actually makes testable crap code quantifiably better than the alternative.
BDD is a fantastic way to piggyback on TDD from the QA side of things. Think of it this way: I don't need to know how the implementation works, I only care how it behaves and *that* it works. That's what the user cares about, which is what we're really delivering. I'm on a TDD+BDD team, and it's great. TDD works great on the dev side, BDD works great on the QA side, and even when it comes to writing requirements. They work together very well.
I'm not directing this at you, but it brought up a rant inside of me that just had to come out... I think the code coverage metric is really misleading. The only thing it can do is point out lines of code that are _literally never run during the test_. You can then look at those lines of code and determine if they are worth the testing effort (sometimes yes, sometimes no, sometimes the design should be improved so it can be yes). However, seeing covered lines of code doesn't really mean a lot - because you could be _executing_ the code without asserting anything about it... which really just tells you that it doesn't throw some random exception out of nowhere. It can be a false sense of security. Therefore, I think the first thing to determine is if the tests actually cover the relevant cases you can think of, and do they cover the edge cases, etc. Do you have unit, integration, and end-to-end tests, and test at the right level of abstraction? If all that checks out, then take a look at coverage and see if anything was completely missed accidentally (usually rare failure cases) - but don't take green lines alone to mean "it's tested".
Last i heard, they were working on support for JavaFX. I don't see how useful it'll be though, given that the default layouts in JFX do more than what most people will need.
TDD implying test-first implies that it requires it.
I'd love to know why that is. So, you don't use Hibernate?
I worked on a codebase where the team was proud of their 80%+ code coverage. Most of their tests were meaningless though; e.g. asserting that a returned value from a converter is not null, using a hacky utility class to game code coverage by reflectively invoking private constructors, etc
&gt; The only thing it can do is point out lines of code that are literally never run during the test. But that's the point. For us developers the mental model of what our code actually does is pretty complex. Such a tool simply points out the bits you forgot to cover. People who don't use it this way and just artificially get their coverage as high as possible simply don't 'get it'. This isn't just coverage: stuff like agile development, tdd, unit testing, etc. tons and tons of developers 'do' it without understanding and following the philosophy behind it.
&gt; TDD is often a difficult sell to a customer as they often don't see it as 'productive code', but we regularly prove the benefits of test coverage when we later get asked to add new features and during bug fixing. I wrote a [blog post](http://www.niels.nu/blog/2016/testing-for-managers.html) a while ago on this subject. It's aimed to managers who think like this but I guess the same arguments apply to your case I think (even though I think that if a customer wants to decide on how you develop stuff he should hire his own developers). Tests are simply part of your software. Software isn't 'done' without proof it works. 
The article recommends Spark for REST APIs. But even for REST APIs Spark is only a good choice for small applications. Compare the REST capabilities of Spark and JAX-RS, and you'll see that Spark is pretty simplistic.
As I've already written earlier, Spark is a great choice for microservices. It may be tedious to create something non-micro with Spark, but I believe it's not what it was created for. So to sum up, use a proper tool for the job you have, and I think Spark is a proper tool for microservices and prototyping.
AngularBeans dont use REST, it use a JSON-RPC like protocol, so yes the framework is coupled with AngularJS, But, when using GWT/vaadin/JSF-primefaces/ you are more coupled not only with JS but also with the CSS and HTML generated. At least with AngularBeans you clearly now and see with what your code is dependent. in the other hand using a REST approach grant you the total separation (like Jax-RS, Spring MVC, JavaEE8 MVC 1.0) but : you will be too HTTP centric and low level. think about it : you need in the same app to use websocket and sockJS, uploads, images or other binary data, jax-RS ,HTML5 form validations, model updates... all those stuff you will implement manually. with AngularBeans you have all that without using server side rendering. so it's kind a hybride framework. There is always a price to pay (abstraction and productivity Against genericity ) :) 
 We can't standardize AngularBeans like it is now, because it is actually a too specific integration. But, i always thinked about it as a proof of concept of what should be a modern web framework. And we can easily create a new implementation that can be used with any JS/typescript framework in this situation i think we can think about a JSR "Single Page Application Integration for Java". what do you think ?
Supporting unicode fonts? PITA for international users. I had to use the 2.0 release candidate for it and it had a lot of bugs. It would open files (like fonts, logos) and wouldn't close them.
I don't really have an opinion. Well, I do, but it is not at all in favour of single page applications, so I'm afraid it wouldn't be constructive...
I detect a weird bias against the label "Java EE", but why? JSF, several JMS providers and the implementations behind JPA (EclipseLink &amp; Hibernate) were available before they joined Java EE, but CDI for instance wasn't. But what does that take away from Java EE? Do Debian and Ubuntu have no impact because Emacs and Vim can be downloaded seperately? Or do you perhaps think you can't use JSF in Java EE, since only operations can install and update Java EE, but you can use it seperately in WEB-INF/lib, since you (Dev) and not they (Ops) own the .war?
I work with a _large_ legacy codebase, and my argument from personal experience is that TDD does lead to better design. I've had to recently make some changes to the functionality of a large class, and the whole thing is untested, dependencies everywhere, repeated code... TDD is much easier when writing fresh code. The particular case in point, i had to mock endless dependenices to test the fucker. Only then can i start refactoring, with the instant feedback loop of the tests. I could never imagine just jumping into a critical component (financial) and just start hacking about and modifying the code. The fact that alot of our codebase just *works* is amazing to me everytime i open a new class file. On the flip side when working on personal projects it depends what im going to use it for. If i'm knocking up a little webapp for some home automation stuff then probably not. But in enterprise systems yes. Test Test Test Test Test.
This project name is so terrible! What is a hipster? It is a narcissistic idiot trying to be different at any price, not noticing he does the same as all the other hipsters trying to be different. Please rename the project.
There is no such thing as unconstructive opinion :) i really want to now all the pro and con of everythink :) so your welcome. 
"standards can't cover everything" i agree, but we can think at a standart that consider all mdern needs in term of web dev. at least an SPA oriented standart ? 
TeeSpring CafePress
NullPointerException
 Lets.talk("Distributed"); // or your favorite topic (in green)
Thanks for the link - I agree with your opinions. The reason our customers seem to think they can decide on our development practises is because we often work in mixed teams alongside customer developers during projects. We do insist on establishing test as part of our "definition of done" though, but as you point out, tests are often sacrificed when the pressure ramps up. Also, often when we provide estimates during sprint planning (we usually work in Agile), sometimes our scrum masters/PMs have a habit of splitting out the estimate time for writing tests and "productive code" which is often reported back to client management - I've been fighting a battle recently to try and make the scrum masters/PMs on my current project understand that it's not an option to differentiate between tests and "productive code".
Totally agree. I can write tests to produce 100% coverage with 100% pass rate, but it doesn't mean I've actually tested anything worth while. This is where we try and engage business analysts and testers to verify that our test cases are actually testing the business requirements on our projects. I'm more concerned about testing the business requirements fully than having 100% code/branch coverage.
wishing this was not in video format.
yeah. there are tricks to writing testable code. a book would give you ideas about encapsulation, mock objects, DAOs, etc i didn't read a book on it. i learned it piecemeal but a book would have taught me faster.
They control the platform and the development tools. Of course they would have to fall in line with what they decide. But, in the case of Android and Java, specifically, Google has been nothing but conservative.
Type inference is useful for the not uncommon case where you don't care about they type, or the type is obvious from context. Explicitly stating the type of a variable can add noise and make the code less readable. In the cases where you would want a comment to identify type, just don't use type inference.
The microservices addition is great and came at just the right time for me. I'm at the point where I spend my effort entirely on business logic and a little bit of angular. A module from the market place is broken with 3.0 though. It's the most popular one, (Material) so hopefully the author updates it.
Yeah, what’s with all the stupid “let’s make a video of something that is particularly well suited to a website which you can read *at your own pace* and which lets you *copy and paste code*” shit that’s going down lately?
Use a variation of "Cunningham's Law" and write some code with a mistake in it. A compile error for volume of reactions, Big O to separate a bit of chaff.
I am basically new to SparkJava and Rapidoid. How do you feel rapidoid? How do you compare this with spring-boot or tomcat based servlet containers? Any information of production usage of rapidoid?
These are capabilities that can be added to JSF, which is already a standard that knows how to bind client-side events to server-side event handlers. Otherwise, and which I think is better, the JavaEE spec should (and does) cover server-side standards like WebSockets, and the JS library itself should provide the connector, as with HTTP.
That website is so ugly.
Make love not *.war
 DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument(); It helps if your co-workers are overweight
[cpu time](https://benchmarksgame.alioth.debian.org/u64q/performance.php?test=fasta&amp;sort=fullcpu)
&gt; It should be a black box test, where only the input and output should be considered. -&gt; &gt; But then it's not testing the language but the coders competency to write good code … to choose an algorithm.
&gt; Am I missing something? October and November 2015. [Default comparison for HiPE](http://benchmarksgame.alioth.debian.org/u64q/erlang.html) from the home page.
I've misunderstood things before, and I hope to misunderstand many things in the future -- perhaps what you wrote is easily misunderstood.
 class TshirtBackend { public static void main(String[] args) { System.out.println("Tshirt backend"); } }
That could reflect on either writer or reader so I'll agree with you there ;)
Oh, I guess I picked on a case which is covered by default, but then how do you compare Erlang to something like Python?
Spark maintenance has not come to a halt. Like most open source projects Spark is maintained by very few people doing this on their spare time. There will be periods of low activity followed by periods with a lot of activity.
I find this whole idea of ideal for microservices confusing. I mean isn't essentially an MVC framework without the view technologies, but replacing it with json serializers. 
Java: Keep it classy Ask me about my HotSpot Verbosity is the soul of JIT
If you want to play with something with a different paradigm, you could give [vert.x](http://vertx.io/) a try. It seems promising.
I don't think so (sadly). The support forum has been a ghost town for the last couple of years. There is no official release of their libs anymore, event after the changes to have 1 jar for Swing, and another one for JavaFX support. (And I can't use releases after that since it broke stuff). MigLayout was extremely helpful to code complex panels of many small components, like entry forms.
I think the main complaint is that the video goes a bit slower than some people would prefer. If you put these into a text document for people to try on their own, it would allow them to go as fast or as slow as they like. 
I have to agree with the others, this would be much better in text format. The video forces the viewer to consume the content in the speed of the video, which was way too slow for me. I had to skip 90% of the video because I was just interested in the puzzles and solutions, and the explanations were (to me) self-evident. So having a text where I could skim through to get to the interesting bits would have been far more enjoyable. 
Great suggestion! [Here](http://docdro.id/SG0fO3Z) are the slides.
If the pace of the presentation is too slow, YouTube (at least in desktop FireFox) has an option to change the speed to 1.25x, 1.5x, or even 2x.
[Slides](http://docdro.id/SG0fO3Z)
throw new EventException("Exceptionally awesome event");
The link says that *some projects* are licensed ASL while *most* are licensed LGPL. This doesn't mean that anything is dual licensed. Hibernate core ([the ORM](http://hibernate.org/orm/)) is LGPL. [The validator, for instance is ASL](http://hibernate.org/validator/). Don't believe it? Let's have a look at [org.hibernate.Session](https://github.com/hibernate/hibernate-orm/blob/master/hibernate-core/src/main/java/org/hibernate/Session.java). LGPL. [Wikipedia](https://en.wikipedia.org/wiki/Hibernate_(framework%29). LGPL. Still trust your lawyers? :) Anyway, I'm still curious why it's forbidden...
Little by little, Javascript is chipping away market share from Java/Ruby/Phython on the backend. Java EE Guardians exist to keep Java relevant in the backend, since Oracle and other big silicon valley companies seem to be focusing on Javascript these days. 
Splitting hairs convo over.
I'd leave the gray in the content area, change the header with the company name to white and the top message banner to bright blue.
Why do you post it here, where people from all countries see it, if you don't accept relocation?
Thanks for the link to a great article in the end: http://manuel.bernhardt.io/2015/11/13/5-years-of-scala-and-counting-debunking-some-myths-about-the-language-and-its-environment/ :)
Yeah, the main advantage of text is that *you* can dictate the speed. But text has also another important feature: you can find something you have already read much easier. Let's say some weeks from now someone asks me a question about Java that is somewhat related to those puzzles, and i want to show him one of the puzzles because it demonstrates a good point. With the video, I have to watch the whole video again to find the part I'm looking for. With text, I can scan the text quickly and jump directly to the passage I want to find. I think videos are great for shocasing things that are graphical (e.g. tutorials for 3D modelling), but not so much for coding. For things that are mainly textual, are generally prefer text. I think it's very telling that the whole video only shows slides with text. So to me, it seems that a textual format for presenting this information would be better. With the slides at hand (thanks for sharing, /u/fredoverflow) this is way more interesting for me, as tose puzzles are nice brain teasers and certainly eye-openers for people not so experienced with Java.
Where do I sign to be a Java EE Guardian?
Not always, but it can be.
I earn literally 22632.02USD per year and I'm quite rich in my country as C++ developer.
Even for France, where I live, this would still be a huge amount.
Why wouldn't you just say "Chief Software Architect"? 
For a chief architect? In Australia architects are paid much more than that.
It's early days at the moment, but if you join the Google Group linked in the article, you'll get all the information you need as it comes about. 
I still don't understand what the main selling point of Spark is over Spring Boot: Boot is just as easy to get started with and unlike Spark can easily support large enterprisy applications: you also get all the Spring DI / Data JPA goodies for free. 
Try grep -c for instance? EDIT: hm okay, on my Mac it does seem to work now. Maybe this is legacy info. Downvote probably deserved.
Startups in the UK, Netherlands and Germany don't even pay half of that for local staff. 30k/euro after taxes for people with a CS degree and 10 to 15 years of work experience with a title of (chief) architect, lead developer, lead engineer, or related is not uncommon. Established companies is another matter, so it depends really...
Java is really starting to catch on you guys
It's factually true that the site is more functional now than it was. Now 25-35% weekend visitors use their mobile phone. It's just that simple.
Now let's *try* for 100
A position like this would pay €70-80k, I've seen up to €90-100k too, like [this one](http://www.indeed.nl/m/viewjob?jk=e332275c3610d587&amp;from=serp)
Many other subreddits experienced the same drop. I am not entirely certain, but I think it was when Reddit readjusted the subscriber numbers so that those who deleted their accounts weren't counted.
As much as I love to bash Javascript, a minor bit of code here and there for handling events like this is the perfect use for it. Just saying...
Exactly, you got it! Mine is the most trivial/intuitive answer, the example given by /u/juckele is far more interesting =)
public abstract &lt;T&gt; Shirt setBackend(String logo); Something something, generic unimplemented &lt;t&gt; shirt backend.. Making sense is so potato.
I work in a startup in the UK, in a less senior position, for more
welcome to the dark side
OSX, latest version. I'll check those out.
[It was me](http://imgur.com/Nd0tR7b)
If your looking to write an desktop java app that accesses a secure, central db, consider putting web services in between. In this way, you can limit db access to well defined use cases.
this `val/var` thing is a _double-edged sword_, overall I like it - but it does make it harder to understand what type the object is... maybe I should start using hungarian notation, lol - I really hate that though.
use hadoop or spark
im very new to anything outside of a desktop app. can you please explain a little more? 
What part of “please seek help with Java programming in /r/javahelp” do you not understand?
There's always a demand for junior Java devs. If you know Spring, that's good. You'll be asked to work in other technologies, which might be daunting at first, but if you put effort into it, you'll eventuyally get the hang on it. Before you know it, you'll be a senior and working on more complicated modules. Source: I learned Java (JSF) 3 years ago. Eventually I learned Spring and Hibernate (all necessary tools). It was hell, but now I got a good job with all that experience :)
Next question is *how* do you generate the list of permutations? Just use [std::next _ permutation](http://wordaligned.org/articles/next-permutation)!
Yes.
We just set it up &amp; starting to appreciate the whole CI thing. Any idea when non-beta V2 will be released? 
Spring is used in many enterprise java shops
If you are new and don't grasp certain design patterns like MVC, learning the Spring MVC framework will give you a good introduction to the concept + boost your experience with the Sprint framework (a double whammy)
He is making a good point unlike many critics of local type inference. However, local `final` is rarely used nowadays, because effectively finals are available for closures and anonymous classes. I personally never use `final` variable declarations, although most of my variables are finals. So `var` and `final var` is probably the best choice: `final var` is available but not used.
&gt; I am much more interested in changes that extend the language and improve its performance What do you have in mind? I'd like to have three features for performance: * async/await to write concurrent apps * [value types](http://openjdk.java.net/projects/valhalla/) * [application isolation](https://en.wikipedia.org/wiki/Application_Isolation_API) (to split huge apps into smaller pieces with independent GC, so GC could work faster with shorter pauses)
[removed]
I don't know. I only know that they have their own distributed FJPool. Cliff Click (the former CTO) spoke about it a lot.
Another option is to suppress the crapware offers. Apple -&gt; System Preferences -&gt; Java -&gt; Advanced -&gt; Miscellaneous -&gt; Suppress sponsor offers when installing or updating Java
Hell yes.
6th of April according to the [rough timeline](https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+2.0)
Some form of named parameters ([C#](https://msdn.microsoft.com/en-us/library/dd264739.aspx), [scala](http://docs.scala-lang.org/tutorials/tour/named-parameters.html)) is high on my wish list, even though I don't think it would improve performance. I keep running into this issue where I want to make an immutable object with lots of properties (think 10+), and I have to choose between: * Having a constructor with lots of arguments (bad for readability and somewhat error prone for the caller) * Making a `Builder` class like Effective Java suggests (involves lots of boilerplate and repetition, doesn't really eliminate the problem -- I still need that big constructor to exist) * Finding some way to artificially decrease the number of properties (e.g. split the properties across smaller objects) * Making the object's constructor directly responsible for finding more of the values, so that I can say `this.fieldName = value` (e.g. make it read from the database, but I wanted it to be a dumb container of values) * Giving up immutability so that I can say `object.setFieldName(value)` Named parameters seem like the ideal solution to this problem. There are other potential language features that address this (object literals/initializers?), but named parameters seem to give the most bang for the buck. They'd be useful in other situations too.
In most of Europe that'd be an extremely good salary, UK included. US and a handful of other places (e.g. Aus) have exceptionally high salaries for software engineers.
here's a better, more relevant link: http://bruceeckel.github.io/2015/10/17/are-java-8-lambdas-closures/
"magic" "hard to read" == unfamiliar
val and var look alike too much... I wonder how many concurrency bugs will be introduced because someone declares var member instead of val, and the class isn't initialized safely.
Proposal is about local variables, not fields, which still have to be declared with types. Also, delcaring something `val` or `final` does not solve concurrency issues, because immutability of variable does not imply object immutability.
Immutable should be default in new programming language developed from scratch (like Rust), new features of java should be consistent with older features (that's what Stephen talks about).
Keep in mind you can run the big "pipeline" plugin features in Jenkins 1.X. But like all plugins, you should probably spend some quality time testing them out.
What year you dropped here from? Java is just as performant as any other language. Sure you can't squeeze out that last bit from your graphics card, but for 90% of the applications it is performant as hell and can outperform many others
No comments here. Like nobody cares about jigsaw. (I don't).
I could never quite figure out what I didn't like about async/await until I read this article: http://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/ 
&gt; Java is just as performant as any other language. Bwa-ha-ha. No, it is not. It has huge problems with GC which could be partially solved by: * value types * multiple heaps per process * something else I don't like unique_ptr Lack of value types is also a huge performance penalty due to cache misses, cache pollution and excessive memory consumption.
From the comments: &gt; To me the problem is simpler. This feature is all about making the writer's job easier at the expense of the reader. In my opinion this trade-off should never happen. I hear this a lot in regard to `var` or `auto`, and I find it to rarely be true. You cannot honestly tell me that the first is more readable than the second. Map&lt;CrazyThing, StrangeObject&gt; m = new Map&lt;CrazyThing, StrangeObject&gt;(); var m = new Map&lt;CrazyThing, StrangeObject&gt;(); Not only is the first version crazy long and full of details, it actually leaves you with doubts. Is one side some covariant of the other? Are all the types the same? Also, if I need to change the type, I have to edit both sides. Meanwhile, the second version is shorter and tells me that what I see is what I get.
Nifty lib... but LGPL license prohibits adoption in my shop. 
In essence I suggest you build a central app that exposes the data your desktop app needs access to. You handle concurrency, security and logging there. This frees up your desktop app to focus on ui and work flow. Java has a lot of frameworks that make standing up such a central app pretty painless. Spring Boot comes to mind. 
Good Java code would look like this: Map&lt;CrazyThing, StrangeObject&gt; m = new HashMap&lt;&gt;(); var m = new Map&lt;CrazyThing, StrangeObject&gt;(); Anyway, `var` with `new ...` is fine, more problematic are method calls like var m = service.crazyThingToStrangeObject();
Yes, value types with project Valhalla is definitely something I am looking forward to.
Gotta love those "legacy systems" that can't be pushed past Java 5.
What bothers me is they're putting things into core language spec while said thing should be a feature of IDE. Is it that hard to ask eclipse to do an auto replace or sorts in local variable definition? I don't think so. 
Tools like Stash or GitHub make reviewing in the web browser quite common. That said, using `var` in C# certainly does not make code reviews harder. I've been doing it for years and no one has ever complained about not being able to see types. On the contrary, hiding the types makes it easier to see the business logic.
Actually I find the opposite to be true. In C# I occasionally need to expand var into the full type when working with complex LINQ expressions. Especially groupings, which make it hard to predict what the real structure of the collection is going to be. But in the last 3 years I have never once needed to expand var because I didn't know what type a service method returned. If I care, which usually I don't, then I just hit F12 (go to definition).
I use both, but always check out and review in my IDE for anything but the most trivial of changes
OP already mentioned having this suppressed: &gt;I can't find info anywhere on what junk they're trying to install **and I have sponsor offers suppressed**.
What I'm more concerned about is the ubiquitous presence of setters and default constructors everywhere: applications, frameworks, libraries. One might think that this is only issue about immutability and performance, but it is a lot more issue about not being able to enforce class invariants through the natural construct of an OO language, constructors. One possible solution for this problem is the official parameters API introduced in the Java 8. I've successfully started the effort of harnessing that API to eliminate the requirement of setters/default constructors in Jackson library (see the [parameter names module](https://github.com/FasterXML/jackson-module-parameter-names) which [should soon be integrated](https://github.com/FasterXML/jackson-databind/issues/1090) into the jackson databind itself and turned on by default for Java 8 users). Unfortunately, I wasn't as successful on hibernate ORM side (see this [mail](http://lists.jboss.org/pipermail/hibernate-dev/2016-March/014521.html) on hibernate dev mailing list or the [issue](https://hibernate.atlassian.net/browse/HHH-9440) on their jira).
I long for the day when all ORMs understand how to call constructors on immutable objects.
The one problem is overly verbose code that hides the actual business logic amongst the boilerplate. The keyword `var` isn't about it easier to write code, it is about making it easier to read it. *** It is the same thing as having real properties as opposed to getters and setters. alpha.setFoo(beta.getBar() * delta.getBaz()); alpha.foo = beta.bar * delta.baz; With code-complete, neither of these is actually harder than the other for me to write. But removing all of the noise makes the second one easier to read.
The code is maybe verbose (this is a matter of point of view) but your answer confirms that it does not solve any problem. BTW, Some people claim the opposite: it complexifies the reading. As a teacher I can tell you that this kind of thing will complexify the courses and the understanding of the language. Having several ways to express the same thing. always induces an increase of the complexity of the language. Maybe, you can consider it is worthwhile, but never forget that it does not simplify the language. When there is no issue which is solved I think it is a bad idea to introduce syntactic sugar. 
&gt; As a teacher ... Last night I meant a man who teaches 4th graders how to write code in C so that they can program their Arduinos. If a 4th grader can understand enough C to program a micro-controller, then either you're teaching 3rd graders or you are grossly underestimating your students.
No one has ever accused me of not liking "statically typed procedural languages", yet after using `var` for literally years I've yet to see any of the doom and gloom predictions about not seeing the type actually the way I read and write code.
The reason we never had this for Java is because the JRE always backward compatible and you can tell the compiler to build with compatibility for any previous version.
Installing Java is the easy part. The hard part is automatically *switching* versions based on projects/directories, in a way that integrates well with version control, IDEs and other tools. http://jenv.io/
But in practice it isn't backward compatible is it? Just the other day I was dealing with that issue were Javadoc formatting problems are now errors when they used to be warnings. This prevented me building three or four real-world projects in Java 8 without modifying the Maven configurations.
Yep! It shuffles your list into the next lexographically greater ordering!
Ignoring the installation of the jdk, and for Mac only, I have a homebrew jdk switcher for the command line: Ref: https://github.com/paul-hammant/homebrew-tap/ brew tap paul-hammant/tap brew install switchjdk source ~/.bash_profile switchjdk 7 ~~It needs work to handle the other jdk vendors who were not known to me up to this moment.~~ Edit: Zulu JDKs supported now.
on a side note: automatic directory-based switching can be achieved with glorious https://github.com/kennethreitz/autoenv. I highly recommend you check it out.
Amazing name, won't cause any troubles ! :P
If you really do, vote on those issues or make an even greater effort, discuss, contribute pull request, anything :)
The generated bytecode is compatible; the javadoc tool doesn't guarantee compatibility like that and, indeed, with Java 8, it's become much more strict. However, even if you're javadoc is horribly non-compliant, it should have no impact on the runtime behavior or compatibility of your code.
Saying that you are underestimating your students isn't a personal attack and I resent the accusation.
Right it doesn't impact on runtime, but it does mean if I try to compile some projects with JDK 8, it won't work without modifications (a real world example I encountered recently is https://github.com/jruby/jcodings, so it's not theoretical). Therefore being able to switch to JDK 7, which I think is what this tool is for, is useful.
Some projects that depend on byte code manipulation can be sensitive to versions. I do a lot of Android OS development and always have to switch my java version depending on what Android version I am build. Older versions of the OS require Oracle Java 6 and nothing else. If you try and sneak a different version past the build system you on the road to strange build issues.
Eh this lie again.
I've seen a coding standard that recommended against var. Ecery developer on the team ignored it though so...
On a side note, Red Hat's enterprise version of Apache Camel (there's more like Fabric, etc etc) has had these features for months. 
I have to second this. The return type of most objects is fairly obvious, especially in the context of other code.
Redhat have alternatives, which is essentially a clone. It's a shame if other distros outside of RedHat and Debian don't have it in place, but it has been created twice now so I would be curious as to why not.
No other language has an IDE as good as Intellij for refactoring. Reafactoring makes it all worth it while doing TDD. Observe: https://vimeo.com/33403686
"Wow, this nvm tool is fantastic, I wish I could use something just like this for my java stuff" - nobody ever 
A method that tries to solve the Travelling salesman problem through brute-force has a time complexity of O(n!).
Check your Task Scheduler (In the "Active Tasks" section) for anything that could launch and use java (check the time when it happens and the time the service starts) Java doesn't just launch itself. An application that uses java launches a jvm instance and is probably not optimized (or encounters an infinite loop or something if it never stops).
/r/techsupport
I use it to match my work Java version on my home laptop to reproduce jvm bugs. 
If you are legitimately experiencing jvm bugs on a frequent enough basis that you need this, you must have a very interesting coding style.
Magnolia cms is really good.
This is likely a problem with one of your applications, not with the java platform itself
How? Like this: * [Site rules](https://www.reddit.com/rules/), as linked on every page. * [What is spam](https://reddit.zendesk.com/hc/en-us/articles/204536499) * [Self-promotion on Reddit](https://www.reddit.com/wiki/selfpromotion) Your whole activity (with this account) on Reddit is promoting "coralogix". Every single comment or submission in the last months is about that. Compare this to the rules linked above and ask yourself: [am I a spammer](https://reddit.zendesk.com/hc/en-us/articles/204536499)? Also, as a bonus, here's your submission history. domain submitted from|count|% :-|-:|-: [coralogix.com](/search?q=%28and+site%3A%27coralogix.com%27+author%3A%27ArielAssaraf%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|12|36% [self.devops](/r/devops/search?q=%28and+author%3A%27ArielAssaraf%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|4|12% [self.funny](/r/funny/search?q=%28and+author%3A%27ArielAssaraf%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|6% [infographics.economist.com](/search?q=%28and+site%3A%27infographics.economist.com%27+author%3A%27ArielAssaraf%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|2|6% [self.startups](/r/startups/search?q=%28and+author%3A%27ArielAssaraf%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|6% [i.imgur.com](/search?q=%28and+site%3A%27i.imgur.com%27+author%3A%27ArielAssaraf%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|2|6% [vimeo.com](/search?q=%28and+site%3A%27vimeo.com%27+author%3A%27ArielAssaraf%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|3% [imgur.com](/search?q=%28and+site%3A%27imgur.com%27+author%3A%27ArielAssaraf%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|3% [pypi.python.org](/search?q=%28and+site%3A%27pypi.python.org%27+author%3A%27ArielAssaraf%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|3% [bitbucket.org](/search?q=%28and+site%3A%27bitbucket.org%27+author%3A%27ArielAssaraf%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|3% [npmjs.com](/search?q=%28and+site%3A%27npmjs.com%27+author%3A%27ArielAssaraf%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|3% [i.ytimg.com](/search?q=%28and+site%3A%27i.ytimg.com%27+author%3A%27ArielAssaraf%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|3% [newsecuritybeat.org](/search?q=%28and+site%3A%27newsecuritybeat.org%27+author%3A%27ArielAssaraf%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|3% [linkedin.com](/search?q=%28and+site%3A%27linkedin.com%27+author%3A%27ArielAssaraf%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|3% [self.startup](/r/startup/search?q=%28and+author%3A%27ArielAssaraf%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3% subreddit submitted to|count|% :-|-:|-: [funny](/r/funny/search?q=author%3A%27ArielAssaraf%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|5|15% [webdev](/r/webdev/search?q=author%3A%27ArielAssaraf%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|4|12% [devops](/r/devops/search?q=author%3A%27ArielAssaraf%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|4|12% [java](/r/java/search?q=author%3A%27ArielAssaraf%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|3|9% [Economics](/r/Economics/search?q=author%3A%27ArielAssaraf%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|3|9% [java_programming](/r/java_programming/search?q=author%3A%27ArielAssaraf%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|6% [startups](/r/startups/search?q=author%3A%27ArielAssaraf%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|6% [programming](/r/programming/search?q=author%3A%27ArielAssaraf%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3% [csharp](/r/csharp/search?q=author%3A%27ArielAssaraf%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3% [dotnet](/r/dotnet/search?q=author%3A%27ArielAssaraf%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3% [Python](/r/Python/search?q=author%3A%27ArielAssaraf%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3% [node](/r/node/search?q=author%3A%27ArielAssaraf%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3% [elasticsearch](/r/elasticsearch/search?q=author%3A%27ArielAssaraf%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3% [prodmgmt](/r/prodmgmt/search?q=author%3A%27ArielAssaraf%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3% [gifs](/r/gifs/search?q=author%3A%27ArielAssaraf%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3% [startup_resources](/r/startup_resources/search?q=author%3A%27ArielAssaraf%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3% [startup](/r/startup/search?q=author%3A%27ArielAssaraf%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3%
&gt; the point is that this is an informative post and if any post promoted by a commercial company will automatically be tagged as spam there will be much less quality content out there. Don't give us that crappy excuse about "quality content". You could have submitted this as a text post. Or a link to pastebin. But you didn't: you post on your company's blog with the intend of it generating views, impressions and this advertisement. Please note that this is explicitly mentioned in the guidelines for self-promotion: [ I worked hard on that, I make no money from it, it's original content!](https://www.reddit.com/wiki/selfpromotion#wiki_but_it.27s_not_spam.21__i_worked_hard_on_that.2C_i_make_no_money_from_it.2C_it.27s_original_content.21__i.27m_not_a_spammer.21) It's not "the content" that's bad or spam, it's that *you* and others are targeting Reddit for advertisement. 
We still use Struts 2. The application works and is not where we spend much of our time.
Have you thought about embedding external tools through an iframe? 
Won't serve all your purposes exactly (Velocity Templates vs JSP and a few others) but I have to self plug [MySaasa](http://www.mysaasa.com)
Jahia is another option. Tomcat 8, JCR and JSP.
Try this, open a command prompt then try to run the JAR. Post the output here since that should give you actual details on why the application fails to launch.
Piggybanking this as OP probably isn't too experienced with the command line: To run a java file off the command line, use `java -jar &lt;File&gt;`. OP might need to replace "java" with the full path to the Java executable if it isn't in his PATH for some reason.
It isn't exactly a debate though. I'm talking from experience of having used it for years, and likewise not having it for a decade. Very few people who are against var have actually tried it on a non-trivial project and are speaking from fear that they might be right. I'll grant that personal experience doesn't trump a formal study or survey. But it sure as hell beats nothing at all. *** Another gentleman was worried about teaching var to students might be hard. I'm not a professional teacher, but I do mentor the occasional high school student. Not once did var become a problem. Again, "I tried" beats "I'm afraid it might be hard" in terms of evidence.
&gt; I'm looking to provide capabilities such that log output can be viewed INSIDE the web-application itself (no external application) That's not going to be easy. The ELK stack (specifically ElasticSearch, Logstash) can get you most of the way. You could run also run an external Kibana then iFrame it into the log viewer page of your application. &gt;Everything I've seen basically sits external to the web application itself where I'm looking for something more integrated. What are logs best at? Telling you what is going wrong in the app. How are you going to view the logs of your crashing app, when the app that is broken is the one that is supposed to show you the logs? Seriously consider why you want your log viewer in app. Who is going to be the consumer of these logs and when are they going to need access to them the most?
Or http://direnv.net/
liferay
Count my vote in for Liferay. There were just two things I hated back when we used it around 2011: - The way the intrusive way the SDK required integration with Eclipse and special paths for the Ant build. Which was problematic to our CI builds - Many of the nice features require the enterprise version, which our customer wasn't willing to pay for. Otherwise it is quite powerful and offers lots of nice integrations how to code your portlets.
Yeah, the Debian alternatives are generic, though. You can even add your own programs with relatively little effort.
goog could've helped sun out and payed for java, but they decided to try to do an end run around a financially weaker company. they got no-one but themselves to blame for oracle breathing down their neck now
The Sling project is more or less "owned" by Adobe who use it as part of AEM which is their super expensive enterprise CMS solution. Ditto for Apache Oak which is the current generation of java content repository. Take it as a positive that these projects are unlikely to die so long as Adobe needs them, but it's a negative that they are purpose-built for a specific platform. Sling also doesn't handle any of the authoring-side stuff.
While it is based on velocity and not JSPs, dotCMS is gonna be the easiest of all these tools to work with. Especially if you put your web-app's context in front of the dotCMS context and only use dotCMS for articles and secondary pages.
Google should have bought Sun. That doesn't mean that Oracle aren't evil.
That it is... but writing the authoring stuff necessary for a super-inexpensive small CMS solution turns out to be pretty damned easy. The SlingPostServlet is a startlingly powerful swiss army knife. In all honesty, my biggest worry is that someone is going to write a dead-simple open source analogue to the AEM authoring UI, and piss Adobe off something fierce. Those guys are singularly focussed on current-quarter profits; whatever reaction they would have would be very fast, and fired from the hip.
RASP for Java does seem to hold a lot of promise. Overall I tend to agree with sentiment of the article. Expecting developers to write secure code is a non starter.
it's not invented, it's an application of copyright as written, and that the supreme court knocked back an appeal of their ruling shows as much
This is the best tl;dr I could make, [original](http://www.networkworld.com/article/3048814/oracle-seeks-93-billion-for-googles-use-of-java-in-android.html) reduced by 84%. (I'm a bot) ***** &gt; Oracle is seeking as much as US $9.3 billion in damages in a long-running copyright lawsuit against Google over its use of Java in Android, court filings show. &gt; Oracle sued Google six years ago, claiming the search giant needs a license to use parts of the Java platform in Google&amp;#039;s market-leading mobile OS. The companies went to trial over the matter in 2012 but the jury was split on the crucial question of whether Google&amp;#039;s use of Java was protected by &amp;quot;Fair use,&amp;quot; which permits copying under limited circumstances. &gt; At issue in the case is Google&amp;#039;s decision to use Java as the basis for its Android operating system without obtaining a license from Sun. ***** [**Extended Summary**](http://np.reddit.com/r/autotldr/comments/4cbvo3/oracle_seeks_93_billion_for_googles_use_of_java/) | [FAQ](http://np.reddit.com/r/autotldr/comments/31b9fm/faq_autotldr_bot/ "Version 1.6, ~48062 tl;drs so far.") | [Theory](http://np.reddit.com/r/autotldr/comments/31bfht/theory_autotldr_concept/) | [Feedback](http://np.reddit.com/message/compose?to=%23autotldr "PMs and comment replies are read by the bot admin, constructive feedback is welcome.") | *Top* *keywords*: **Google**^#1 **Oracle**^#2 **damages**^#3 **Android**^#4 **Java**^#5 
No, copyright was never about abstractae. That's what patents are for. Also, it wasn't an appeals court who was actually knowledgeable about copyright, but a patent appeals court, because this was formerly a patent based case. Oracle originally didn't claim copyright over abstract API ideas, they had a bunch of patents and a few lines with copyright problems, which where deemed insignificant by Alsup. Look at the precedence, APIs have never been subject to copyright. We're not talking about actual code, by the way. Google used a clean room reimplementation of said abstract APIs. The question is: Can companies prevent other companies from writing compatible code or not?
Can we please return to discussing 50K now?
Cliff most certainly knows his shit, but no, he's not the best speaker -- rushes too much, reads too much from his slides. None the less, I thought it was a reasonably honest treatment of a usually flame-worth subject, and thus worth posting. His former coworker at Azule, Gil Tene, is a better speaker, and Martin Thompson is even better yet, IMHO. All of them are expert in their areas, though.
I would post all my opinions about Adobe but I'm worried they'd trace my account and drag me out of my home to the Adobe Summit.
What are they sueing Google for exactly, isn't java free? 
Its just greed on Oracle's part. They make billions from tech giants for their database software and other tools. A well designed API is like the wheel, you want to use it because its more efficient than driving on octagons. So you can see why its silly to try and copy-right it...
&gt; No, copyright was never about abstractae. That's not necessarily true. When the Federal District Court ruled against Google, they cited prior case law which ruled that [Structure, Sequence and Organization](https://en.wikipedia.org/wiki/Structure,_sequence_and_organization) are subject to copyright. It's the same legal principle by which [Tanya Grotter](https://en.wikipedia.org/wiki/Tanya_Grotter) was ruled as copyright infringement of Harry Potter. &gt; because this was formerly a patent based case. It wasn't only a patent case, it was both a patent and copyright case. Oracle lost the patent case. &gt; which where deemed insignificant by Alsup And Alsup was overruled by a higher court. Google tried to take it to the Supreme Court, which refused to rule on the issue. &gt; Look at the precedence, APIs have never been subject to &gt; copyright. I'm not sure about that. There is plenty of precedent in this area, which the higher court cited. The Java APIs - embodied in the package structures and method names of the Java class library - is clearly the result of creative expression. Thus, qualifies as original under section 102(a) of the Copyright Act. The issue at hand is a differing interpretation of section 102(b), which is what separates the idea from the expression of the idea. Ideas cannot be copyrighted, only expressions of ideas. The Supreme Court came up with the [Abstraction-Filtration-Comparision Test](https://en.wikipedia.org/wiki/Abstraction-Filtration-Comparison_test) test to separate ideas and expressions. The filtration criteria are specific expression due to expediency (limited range of options), external factors like industry standards, or are derived from the public domain. The lower court decision that because the Java API contains a functional component, that 102(b) overrules 102(a), making the Java APIs not copyrightable. However, the higher court ruled that the Abstraction-Filtration-Comparison test still applies, and based on the application of the test, that the Java API is protected by copyright. In applying the AFC test, the higher court cited a number of precedents, which lead to its conclusion that the Java API is in fact protected by copyright, and asserted that the lower court did not actually apply the test, and jumped to a conclusion regarding 102(b). Regarding the question of *interoperability*, Google didn't just implement an interface to allow interoperability with existing functionality (for example, like the nVidia and ATI drivers which implement Linux APIs), it provides its own incompatible implementation of the Java platform, including all of the APIs (based on Apache Harmony). Since compilation to Dalvik does not erase Oracle's copyrights, all of the copyrighted expression is included in Android, in a manner not in compliant with the copyright license. The nVidia and ATI cases are very interesting. The drivers are proprietary, but the interfaces are GPL. To avoid a copyright issue, the proprietary parts and the GPL parts are distributed separately, and only assembled locally on the user's computer. The "shim" which allows interoperation between the proprietary parts and the GPL parts is GPL, in compliance with the license. Thus, in your question, what do you mean by "compatible" code? 
Oracle JDK is free as in beer. Open JDK is free as in freedom. Android is (was?) based on Oracle JDK, by way of the Apache Harmony project. Another fun subject which saw Apache rage-quit from the JCP. From what I can tell, Google has moved Android to the Open JDK.
That's how you make one of the biggest companies in the world to switch/make their own language. 
Huh, perhaps I've just seen too many bad talks, but I thought Cliff was good in the video - it was insightful, interesting and pretty well delivered.
They just copied the bits they wanted and left the rest. This goes against what Java is all about which is a common platform across the implementing OSes. Write once, run anywhere.
I think shorugoru has it pretty much covered, but your knowledge of this case is very lacking
Every non-trivial software has bugs. That is just the nature of it. If you are in college and taking classes, they should also tell you about code coverage, and which coverages exists. there are many, and they measure different things. But you'll soon notice that you can never test for all inputs, especially not in reactive systems, and have to create equivalence classes. You may resort to static analysis, but that only goes so far. Hell, we can't even prove that the collatz-algorithm terminates. If your code is &lt; 500 lines, then chances are that you have the complete mental model of everything that happens in your mind and can look at the state globally and make good assumptions about the things that hold true in your code. But once you start getting into bigger projects, you will encapsulate your code. You will have to *document* your code. You will need to state what your code does, what it expects to be and what side-effects it has. And you will need to trust every other person that he documents his code, and that if you read his documentation and work with it that you understand what he means. And suddenly, your program sometimes does not do what you expect it to do. This can be because you interpreted the documentation differently then the author intended (human language can be deceptive), this can be because he forgot to document a certain behavior, it can be because he has his platform/environment configured differently then you. maybe later the mdoule your code depends on changes. the changes are subtle, and only noticeable in some rare cases that don#t happen often. Now you need to isolate them in order to reproduce what went wrong, and then pin-point that is not your code, but other code that introduced the bug, and make your code work around it. and the more other software you use, the bigger your software stack gets, the more likely it will be that in some level, there is a bug.
They did prove it, then google switched to OpenJDK to be within a valid license.
That would have been so amazing on so many levels. Probably. I'm not sure OpenOffice would have survived.
Not correct. Sun demanded this interoperability thing for programms claiming to be Java, as was the case with Microsofts Java implementation for Windows. Google never claimed that Android is Java and they never licensed it as Java-compatible, therefore they are under no obligation in this regard.
That doesn't matter in fair use, that had to do with the licensing of the Java trademark. They didn't violate the Java trademarks, but that doesn't mean they didn't violated fair use in their copy of the API. Fair use is a given which applies to all copyrighted materials, regardless of Oracles trademarks or software licenses.
"Lately"? When was the last time that company did anything remotely not evil?
You are completely misinformed. The interoperability requirement is **specific to the Java license which Google didn't sign** for Android. Therefore it doesn't apply. It has **nothing to do with fair use.** 
Interoperability may be a requirement in the Java license, but it's also a requirement in Fair Use when reverse engineering projects. I suggest **YOU READ UP** because shouting things doesn't make them true. https://www.eff.org/issues/coders/reverse-engineering-faq &gt; Fair Use: The fair use doctrine allows users to make unauthorized copies in certain circumstances. Courts have found that reverse engineering for interoperability, for example, can be a fair use. Google argued their copy was fair use, and not subject to licenses. Fair use copies require interoperability to be fair. 
Clean room implementation or not, harmony stilled copied the APIs, and wasnt ever challenged legally, but it aimed for compatibility with Javas ecosystem, something that Android never fully aimed for. As for Microsoft yes one was a license issue and the other is a copyright, however Google actively avoided licensing because they knew they would violate the license. Actively avoiding available licensing and copying instead isn't fair, it's a conscious decision to steal. They made a choice to solve their problems with litigation instead of just choosing to play by the rules of the copyright holder. Allowing people to copy like this basically means the big guy can copy anyone because they have resources to do it in a clean room. Personally I want copyright protections for my products, I don't want people to just bypass the licenses and do whatever they want given they have money for engineers and lawyers. While Google and Oracle might both be monoliths, this isn't good precedent for those that need copyright protections.
the courts have already decided copyright infringement has occured. all that is left to be decided is if google has a fair-use defense for the copying they did
Yes, but in determining damages, the fact that Oracle practically gives Java away so that everyone can do with it whatever he likes is not unimportant. It calls into question the value of Java. That's what I was trying to say
 ln -s /opt/myjvms/jdk1.6_80 /opt/java
oracle argues that the damages are from lost licensing fees they would have gotten if google had gone through the legal channels to get java or a java-like on their platform.
google didn't release android under the gpl. It is confusing because there are multiple licenses. To comply with the standard java license, they would have to implement java completely. To comply with the GPL the resulting product must be released under the gpl. Google did neither so would not have complied with either license.
they reimplemented an open source api. That should be legal and there's a long tradition of companies doing it. 
Garbage
That doesn't really answer his question, though. You can modify the OpenJDK in a non standards compliant way 100% legally. 
It's different because Sun already offered Java for free on Windows. Microsoft was fragmenting it for the purpose of fragmenting it. Google did it for the purpose of providing a new operating system where the language wasn't currently offered in a useable form. That's a huge difference. 
But they didn't offer actually Java on Android, did they? They gave us another J++, a Java look-alike, for Android. My Java applications run on Windows, MacOS and Linux just fine. Android, not so much.
Sure you can, but you can't then distribute it as an alternative.
how so? iirc they were suddenly not not asked for a counter offer and it was sold to oracle.
Swift is open source now. Doesn't that mean Google is free to use it?
What's a good Java ( or Scala) static site generator ? Something like Jekyll or Middleman 
Fucking oracle
Could always send to Cloudwatch? That's what we do and it works well enough.
[Do not reuse public identifiers from the Java Standard Library](https://www.securecoding.cert.org/confluence/plugins/servlet/mobile#content/view/59965716) 
Google did exactly the same thing. The majority of the Java API aren't available on Android and in some cases one is even advised to use Android alternatives and make use of the existing Java APIs only for compatibility purposes with existing code.
Because they thought ~~to~~ they could screw Sun and get away with it. EDIT: Typo
looks like it could be useful. I'll give it a try on my next profiling session.
Thanks for clarifying that. 
Cliff wrote HotSpot's optimizing JIT, and pretty much proved to the world that JITs are not only viable, but extremely competitive. Yeah, he knows his shit... [This is another of his talks](https://www.youtube.com/watch?v=vzzABBxo44g), this one, more recent, is about general VM design.
they implemented an open source api under an incompatible license, that's never been legal. they'd probably be fine if their code was gpl instead of apache2
Oracle can still seek damages for the time that that option wasn't available. that's how the courts work.
I don't think it's about relevance then, and bias is the entire thing.
You seem to be speaking as if Google was any different. What we see is two corporations fighting each other for money. edit: to to two
OpenJDK?
&gt; You can modify the OpenJDK in a non standards compliant way 100% legally. Only if you continue the OpenJDK license – which is GPL. Or if you aren’t in the US.
In fact, for us developers it’s a horrible case. Android has no try with resources, no Streams, no Lambda, no JSR-310. Android has their own implementation of Lists, of SQL clients (not jdbc conform) and so on. We nowadays have even two completely incompatible infrastructures built on java. Working on Java EE and Android code I often have to rewrite code 60% just to get it working on both.
I would be over the moon if they switched to Go, it's become my favourite language by far
What did they have to "pay a few cents" for (I assume you mean license) - they didn't use any Sun/Oracle trademarks, or any code from them. Does Oracle "own" the Java keywords like they now claim to "own" the package structure of the libraries?
It sure would have solved a potential risk. Maybe Google did not buy Sun because they did not want to pick up the SPARC hardware and support contracts?
Pretty much, it's Apache 2. They would have to build, or improve on existing, GUI libraries for Android.
The great thing about JMap or SMap is that people who are used to Map = java.util.Map can see at a glance whether or not it's a javaslang.Map. Prefixed naming also means that IDE tricks like "Organize imports" can easily format code that mixes javaslang.Map and java.util.Map. Don't forget that even in ASCII we've got a 26 character alphabet, 52 with capitals ;-) For greenfield development where you're explicitly trying to abandon the limitations of the standard lib, overriding names from JRE is a little bit useful, but it makes it so much harder to adopt for partial conversions. Based on the GitHub stars it's clearly not stopping a whole bunch of people, but it's been enough to stop me.
Google doesn't provide an implementation of Java. They provide a cross-compiler/transpiler to run Java programs on their VM (Dalvik or ART) running inside Android. It's no different than writing a Java program and transpiling it to JavaScript using something like [JSweet](http://www.jsweet.org/). Are you going to complain that JSweet is "fragmenting Java" because you can't run Swing GUI programs through JavaScript?
I stopped reading when I saw the graphs; that's no defence. [This](http://www.infoq.com/presentations/java-vs-c-performance?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=Java) is a defence. Java is definitely not slow. It might have been back in the 1.2 days, but thanks to HotSpot JIT and 15-20 years of improvement in the compiler and VM. It might use more memory, but memory is considerably cheaper than developers. 
Especially as running Ruby code on JRuby can make it perform better, especially with multi-threaded code, thanks to Ruby's use of Green threads and a GIL that limits paralallisation.
They could have used the OpenJDK from day one and fork that in whatever way they wanted. The license permits that. But copying the code and releasing it under another license is not allowed. Now Google did something in between, and that's perhaps a gray area, but the case is complex and I would not feel qualified to say anything about that. What I do know is that there were at least 2 ways that seem totally safe: 1. Negotiating the license with Oracle. If the GPL was/is problematic for Google, then the owner of the code (Oracle) can grant another license (for a fee, in this case). 2. Acting according to the rights and limitations of the GPL licensed OpenJDK.
Sometimes 'bugs' come in the form of missing requirements that you were never informed of (due to back requirements, architects, multiple hand overs). In large IT projects, I've found this is very common that when software is handed over to the customer anything they think is missing is automatically a classified as a bug not a change.
Here's [one](https://www.reddit.com/r/talesfromtechsupport/comments/38aama/ha_ha_a_virus_written_in_java_thats_cute_must_be/). Note that there's a couple hurdles when writing a Java virus: 1. The target must have a JRE installed. 2. The JRE must not be running with a SecurityManager. If it is, you'll need to do some low-level exploit to break out of the sandbox. Now infecting other class files is pretty difficult. The JRE uses a bytecode verifier to ensure the class file hasn't been tampered with. There are tools that can modify bytecode in a way where the verifier is happy, but it's a bit tough to get right across JRE versions.
Javadoc seems a lot more useable
9.3 Billion!!! Can a brother borrow $10?
But it should be noted that an interesting idea
You could view it in CloudWatch UI or write some custom code to the data.
&gt; Killer of Java? It is one of the most used programming languages nowdays. Oracle is the killer of java
As someone who has never really dug too deep into the VM rabbit hole, this was an interesting read. How did you end up getting into writing Virtual Machines? As a hobby it would make sense but in a professional setting I'm curious as to why someone would want to reinvent the wheel (unless motivated by strict technical requirements, I suppose). 
Absolutely. The wheels are probably already in motion, even if this case goes nowhere.
**laugh**
Google implemented their own JDK and had to reimplement the base api to get it to work (for example things like ArrayList or String). Oracle just smelled money in that, so they did what any [evil company](https://www.quora.com/Whats-so-bad-about-Oracle) does.
&gt; There would likely not be any easy injection points in a class (nop instructions) since that is generally not added by compilers at all because it is pointless. Just because its not a simple insert at address or after some prefix or pattern doesnt mean its hard. &gt; JARs can also be signed, which means modifying them would be detected because their encrypted signature would not match or their hashsum would have been changed. So remove the signature and have the virus sign it with a different key or leave it unsigned. If the program knows the expected signature and checks for it in unexpected ways (such as concat of 2 bitstrings from 2 different classes), the lack of a signature or the wrong signature would be detected. But preventing a program from being modified is not a solution for opensource. Also, anyone can unknowingly sign a jar thats already infected. &gt; If a Java program is running and the underlying JAR is modified, it is possible for the JVM to toss random exceptions since the ZIP structure would have changed As it should. I meant modifying a file and waiting for it to be started later, but it would still have to call functions on the File class if it doesnt wait for the program as it is to write a class or jar file on its own which is rare. &gt; Viruses would likely want to catch ALL exceptions, because if an exception is thrown then it will have be detected, then a bug potentially reported and discovery. You say that as if the virus must define new functions instead of just using stack and arrays. &gt; Thus, it will have to add entries to the constant pool to be used as external references to do malicious things. It could derive all constants from stack ops, such as start with a parameter x, subtract x from x to get 0, ~ to get -1, - to get 1, &lt;&lt; to get 2, 4, 8, then OR some of them.
&gt; The JRE uses a bytecode verifier to ensure the class file hasn't been tampered with Not true. It uses a bytecode verifier to ensure its any well defined behaviors.
I said partly. Linux is of course better designed.
Just add JAVA_TOOL_OPTIONS envvar with an instrumentation agent to convert bytecode on the fly. [Jayatana](http://stackoverflow.com/questions/26074446/picked-up-java-tool-options-javaagent-usr-share-java-jayatanaag-jar-when-st) infected this way all Swing-based applications causing major app crashes and broken (not-so-global)JMenuBar...
&gt;So remove the signature and have the virus sign it with a different key or leave it unsigned. If you're relying on signed jars then your system is probably going to reject unsigned jars. And since the only way to re-sign a jar is to unjar all the classes, make a new jar, and then sign that new jar, you might as well just replace a class in the jar with one of your own making.
Lol... :P
&gt; Just because its not a simple insert at address or after some prefix or pattern doesnt mean its hard. I meant it in a way where if a virus wants to infect as discreet as possible that with most generated code, it would require more work for the virus. Discreet being modifying existing methods and not adding any new ones. There are bridge methods, but they are usually only created in specific cases (accessing private/protected fields/methods between inner classes and anonymous classes). It would be more difficult because more work is required and this also means that the virus has to be much larger so it can copy all of its infecting logic to more classes. Viruses work best when they are standalone and do no rely on "virus.jar" being in the classpath. They also work best when everything is swarming with infection. &gt; So remove the signature and have the virus sign it with a different key or leave it unsigned. If the program knows the expected signature and checks for it in unexpected ways (such as concat of 2 bitstrings from 2 different classes), the lack of a signature or the wrong signature would be detected. But preventing a program from being modified is not a solution for opensource. Also, anyone can unknowingly sign a jar thats already infected. This would all be up to the user to make sure that signed JARs are only of the key they expect. They could sign their JARs with their own private key and check those before they are launched, perhaps even by a separate user which cannot even touch the JARs (so if either side gets infected, they cannot infect each other in most cases). Of course, if the user does not care for their own security, signing and all of this stuff is pointless anyway and the virus writer would need not worry about it. &gt; As it should. I meant modifying a file and waiting for it to be started later, but it would still have to call functions on the File class if it doesnt wait for the program as it is to write a class or jar file on its own which is rare. It could do this, the Java SE library includes methods which can be used to access JAR files. Using the standard class library the infection code would have to write out an infected copy of a JAR and replace the uninfected one. Otherwise if the virus contains its own ZIP handling code, it can append to the JAR and move the structures over. Note that JARs (being ZIPs) being able to be used as polyglots means that they can be attached to EXEs, ISOs, and anything else. So to reduce detection, the virus would have to make sure the data before the ZIP is kept intact. If not, if a user tries to mount a JAR which is also an ISO, then it would fail. &gt; It could derive all constants from stack ops, such as start with a parameter x, subtract x from x to get 0, ~ to get -1, - to get 1, &lt;&lt; to get 2, 4, 8, then OR some of them. The constant pool of a class contains references to other classes, fields, methods, constant field data (if they are assigned a known value at compile time), strings, and invokedynamic stuff. When it comes to the actual byte code, some instructions refer to the constant pool to do things (such as calling a method or adding a value to 0xCAFEBABE). Otherwise, the byte code itself only performs operations on: int, long, float, double, and objects. Thus if a virus wants to call another method or access a field, then it must have a constant pool entry pointing to that method/field. Even if the virus has to use reflection, it still has to refer to the reflection API in the constant pool. Only after that can it use your derivation scheme using `StringBuilder` and the reflection API. Barring this, the only infectable classes would be those which call the appropriate APIs. You cannot in any way perform an `invoke(static/virtual/dynamic/special)` without a constant pool entry. &gt; You say that as if the virus must define new functions instead of just using stack and arrays. A virus can add new methods, and that would likely be easier to implement, however adding new methods requires adding to the constant pool because the name of the method and its descriptor (arguments and return type) must be added to the constant pool. For exceptions, any code can throw an exception. If code that the virus infects does not normally throw an exception and infected code causes an exception to be thrown, then the virus would have given away its position. The virus also must properly propogate exceptions it should not handle if it interferes with the normal operation of the program. In general the best viruses should infect and keep the program it infects as if it were ran if it were not infected. 
On the flip side, they did invest a lot of time thinking about these things, and they got quite a few things very right...
Not sure if it backfired, or if it was simply part of the business plan. Time to market vs. possible claims 10 years later: Who cares. If they hadn't just gone ahead with this, but properly licensed Java and discussed all legal things back and forth with Oracle, they would have never been able to catch up with Apple. They absolutely needed to plagiarise / hi-jack Java's popularity in the market. Look at this discussion. 80% of reddit thinks Google did something good for the ecosystem, rather than thinking that Google highly profited from the pre-existing ecosystem, and the momentum this brought to Android for free.
Thanks, this doclet still in development, some features are missing but it is stable enough to be tested. I am looking for people that can try it and give me feedback. I really think that this doclet will perfectly suit small size projects where standard doclet is quite heavy. Plus it allows the documentation to be hosted in github
I'm sure you could, but it'd be sub-optimal. Anyone who is going to download and run your virus.jar could probably be persuaded to download and run your virus.exe. Depending on what you want the virus to do, you might need to write system specific code anyways, and any target that doesn't have a JRE is immune. So now if you write some Windows specific code you can target some Windows machines, but not all. If you'd just written virus.exe for Windows to start, you could hit the machines without JREs.
Yes, there are: bad code. :-)
Ok, my bad. Thanks for pointing out
Posting your benchmark code would be interesting. Can you put it on github or something?
[Yes](http://lmgtfy.com/?q=why+does+linux+have+less+viruses+than+Windows)
Right, but being aligned to a page boundary will mean that you're less likely to clash on TLBs.
The Apache Cassandra folks wrote [OHC](https://github.com/snazy/ohc). Prior to that they were using CLHM (Caffeine's predecessor) with off-heap values. As GC was more impactful than absolute concurrency, a fully off-heap hash table was an improvement. There is [discussion](https://issues.apache.org/jira/browse/CASSANDRA-10855) of bringing Caffeine's policy into their library if the on-heap caches are migrated. Intel's [Apache Mnemonic](https://github.com/apache/incubator-mnemonic) incubator project looks like a really neat approach. This uses code generation of JNI backed objects instead of serialization. This is the approach that I'd explore if Caffeine was to offer anything directly, as I think it is the right long-term strategy. MapDB has a JCache [adapter](https://github.com/jankotek/mapdb-jcache). Note that JCache's CacheResult annotation is not an atomic load, but rather a racy get-compute-put operation. I am not a fan of this JSR as I think it made too many design mistakes. Feel free to ping me directly if you'd like to discuss further. -Ben
Note that this still represents combining characters as separate. “Give me a stream of codepoints” or “…of UTF-16 units” is easy enough, but “…of *characters*” is a much harder problem to solve than it may seem. Unicode is a complicated system. Has to be; human writing is complicated.
MapDB author here. Its fixed in MapDB3, only single thread can load value for a key. If you are worried about concurrency I would use HTreeMap directly.
Would just like to point out that Turing completeness has *absolutely nothing* to do with anything. The ability to perform any computation does not imply the ability to circumvent security, or to access any part of the computer.
an lead to one million of problems. With operator overloading you cannot immediately say what x=y+z is doing without knowing the type of the element!
I don't think Java is particularly memory intensive. You can tune memory usage with JRE args. But a lot of memory is for things that could alternatively be written to disk and loaded as needed--however that's what page files are for so it's often easier to just keep everything in memory and plan on using swap. Anyhow obviously this comes down to implementations of particular apps/libs. After loading the JRE and its overhead (30 MB?), it's not inefficient for an OO language.
Hi, Daniel chiming in :-) I made the decision to name Javaslang's collections like Java's for these reasons: - Scala also has mutable and immutable collections with overlapping names - I highly suggest to embrace immutability. Use Javaslang collections by default and fully-qualify Java's - java.util Collections are Dinosaurs. The only possibility I see to provide a transition to modern collections is to substitute them, starting with the name. My vision is that Javaslang's collections will be the new default collections for Java. Maybe this goal will never be reached but I believe in it and I can say that I've tried it. The purpose of Javaslang is to add 'slang' to the original Java language. If this slang is adopted by people, it will eventually be part of the original language. Like in real/human languages. 
Suggestion from CPU optimizing specialist: over-zealous / inappropriate loop unrolling by a compiler. ...which would quite closely fit the observed behaviour. The code is a tiny loop with potential early-out, and mistaken unrolling would cause such spikes. It would also happen at regular intervals like this. Finally: it would only show up for tiny sizes (as is happening here). And ... multiples of 100 would be more likely with a compiler (human limited) than with hardware (physical bits limited), IME. Next step: I'd better decompile the java code, and see if I can get a post-JIT dump of the final assembly too.
Hippo has community edition (apache 2 license) http://www.onehippo.org/
Use Apache Spark (http://spark.apache.org)
Important to note is that Liferay isn't a pure CMS, but actually a full blown Java Portal. Part of it is a CMS, but Liferay isn't only a CMS, but also a Document Management System, a blog, a forum, ... . For a lot of scenario's the CMS part might be sufficient and it is very customizable, but you should be careful before going down that road as it might impact some stuff you wouldn't expect. Also at a certain point you'll run into the limits of Liferay as a CMS and you'll want CMS features that Liferay doesn't have and can't be forced/customized into at which point a migration to a real CMS will be a PITA. Lastly: Liferay tends to have a lot of recurring bugs and even though the CMS is one of the oldest parts, that too has a lot of bugs, definitely when you need I18N... hopefully Liferay 7 will change this...
If you know cs fundamentals and how to program in one language, resources like this is all you need to start with a new language. Any other resources like this?
&gt; are there any public statements about this Not that I'm aware of. But you said yourself in the past, that this kind of insight are shielded from public by NDAs :) We'll never know for sure (until we meet someone at some conference speaker's dinner who says things they didn't actually say, while drinking 1-2 (or 7) beers) Also interesting: Michael Rice and Bruno Souza's opinions in this interview: https://www.youtube.com/watch?v=CONDgjrOTv8
At my last place, this was a rather involved story with lots of related subtasks all handled by one guy (not me). Some background- this was a GWT application for a multidimensional spreadsheet application. The basic server configuration was such that there were at least two servers (ClientServer and AppServer). ClientServer was responsible for handling the inital page load, GWT rendering and basic interaction whereas AppServer did the heavy duty number crunching and rendering. There was load balancing involved, so horizontal scaling for AppServer was easy to establish. Basically, what ended up happening is the dev created a custom appender so that all server's logging output would be copied to a queue. The client server would poll the app server queues and merge in its own logging output and send to the browser, where the output would be rendered in a div container. The polling rate was set in an XML file, and only administrator accounts were able to see those logs. One neat part of the browser side implementation is it was possible to select the logging level from finest to error. The downside for this is it only showed the current logging output, not past output. Nor was there any text filtering/search available, though that may have changed since I left.
Thanks, for anyone else who may find this discussion, I found this appender (not yet tested) https://github.com/jprante/log4j2-elasticsearch 
Thanks
Check this out http://zeroturnaround.com/software/xrebel/ Provides UI to your webapp, shows DB queries, errors, etc. Also should work through cluster.
This is the blog which talks about Java and J2EE technologies. Small posts covering different/random topics. Do let us know if you are interested in knowing some other topics.
Haha aite thanks 
I agree with your last argument. However you still do not prove that "var" is added anything at all or solving any existing problem. 
Looks accurate to me.
Most blog posts give information or offer a solution to the problem they pose. This post is just a rant. 
An advice from someone who does this for a living: stop going over the lines of code, get a decent hardware-counter profiler that can also go into machine code (generated by JIT), and profile. Bad news: you would probably have to move from OS X to Linux/Windows for that. Otherwise, asking performance questions without MCVE is a torture for anyone who can actually answer, but has no time to speculate.
No one is saying that we should overload the `=` operator. Stop inventing problems we don't have.
Yeah, I used to have those tools at former employers. Not here though - so I figured I'd see how far I could get with simple direct measurements, and was surprised how far it went. I wonder if the OS X JDK does a lot less optimizing than the windows ones?
My solution to the problem is in the post, but it is buried in the final paragraph. For you, I have extracted it out of the post, http://units.d8u.us/maven?q=joda-time; change the q parameter to what you want to find.
It is unlikely that generated code is dependent on platform here (-server / -client differences notwithstanding). You may get lucky peeking at numbers, but if you want to systematically get somewhere, use a profiler. If you are using JMH, then ["perfasm" profiler](http://hg.openjdk.java.net/code-tools/jmh/file/7cff26ccc4d3/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_35_Profilers.java#l319) would highlight the hot generated code. 
Ok. My example remains valid for the only one + operator :-) Maybe one day you will stop to do dialectic and you will oppose arguments instead of contesting my words (and not my ideas)
Now your example only has one possible location for the bug on that line. Which is exactly the same if you had a single function. P.S. Words like 'dialectic' don't actually make you sound smarter. It just makes it sound like you are desperate to cover for the fact that your arguments are unsound.
You do not understand that with operator overloading a + may lead to a bug. This is not obvious at first glance. Nowadays in java, there is no hidden function behind this +. With operator overloading you MAY have a function. So it is more complex to debug. Note (I try to be more precise for you), that if there is no operator overloading then you will write x.add(y) when you need a + equivalent and in this case you may have a bug in this function. However, with operator overloading you need to check ALL THE TIME whether the operator + that is used is overloaded or not. And you do not need to do that currently. Sorry for you but that's sound! I like very much your Post Scriptum :-) It is a good example of dialectic :-) 
Actually, Oracle will **deprecate** the plugin in Java 9. It wont actually be removed until a later release. 
There will probably be a settlement where Oracle gets Android royalties.
Truth
&gt; cs fundamentals should include experience in different paradigms, including functional.
Error: name of t-shirt must be less than 30 characters. 
Shameless plug, but my static site generator [Griffin](http://github.com/pawandubey/griffin) is as powerful as JBake and way faster than any other generators in question. Not as mature though, as it is just a side project for me.
In that case complain to the state board of education, that university needs to get its license to be able to teach compsci revoked, and the previously provided degrees have to be revoked, too. Those universities are hurting the standard of computer science immensely – having a degree in compsci should be a comparable level of quality as being an engineer.
&gt; resources like this is all you need to start with a new language. OK, how about: * [J Language](http://www.jsoftware.com/) * [Erlang](http://www.erlang.org/) * [F#](http://fsharp.org/) 
I'll take a look, thanks!
Based on what criteria? I'm not arguing against your point, but I am curious what standards you would cite in support of that. It's arguable that functional programming has been heavily marginalized in mainstream industry anyway, so it's not a gap many people really feel.
I was thinking of it as similar to [packed-objects](http://www.oracle.com/technetwork/java/jvmls2013sciam-2013525.pdf). I think both are good analogies. The project has a long way to go before its usable, but the ideas are attractive. I think moving to runtime codegen (ByteBuddy) would be nice, and the Java 10 FFI JSR seems like a good fit. It could be really nice someday.
Not all - non profit orgs (such as certain standards bodies) aren't. 
You may or may not be welcome!
I think that it would be good to keep going. You can accomplish a lot with Java EE. You'll pick up a useful set of core concepts that can help you with learning newer Java web technologies. Keep the following in mind though. If you want to use the latest and the greatest technologies, then consider expanding outside of Java EE, unless you want to implement Java EE to mimic those new technologies. In time, after the dust has settled for each of those technologies within their respective markets, Java EE will incorporate the things that stick. That being stated, you might prefer a different stack that's considered "more up with the times", such as Spring, Vert.x, etc.
&gt; "But, but the JVM is slow to start up..." &gt; &gt; &gt; &gt; Do you see us using Java for short-lived processes? well. you would be more likely to do so if startup time was fast. if java 9 delivers this, i imagine people will start using java (more often than now) in these scenarios.
&gt; pfff who says it needs defending it can be helpful to push back against anti-java nonsense that can push away potential users.
"JBoss Community Edition, (or after 2014 know as WildFly) releases of the JBoss Application Server prior to version 6.0.0.M3 are potentially vulnerable to this flaw if the default authentication settings are applied" If you're using default JMX console authentication on something open to the web, then it's not just this ransomware you should be concerned about....
But what makes you think that programming paradigms are so fundamental to CS? Many would say they are not. Most CS professors and researchers (incl. many Turing award winners) are not too familiar with, say, pure-FP. Programming languages and semantics are just one (relatively small) subdiscipline of computer science. It is just a part of "[theory B](http://cstheory.stackexchange.com/questions/1521/origins-and-applications-of-theory-a-vs-theory-b)", and all of theory B is smaller than "theory A" depending on where you study (in Europe "theory B" is larger compared to the US). In any event, it is not by any means clear-cut that programming paradigms are fundamental CS.
Because it's computer science, not a programming study? Part of computer science is being able to develop new programming languages, and to understand others. Part of compsci is also highly theoretical math, which is only possible if you understand its applications to programming.
I think most people who talk about speed are just silly. For some 90%~ of necessary optimizations I've seen, most have occurred from RDBMS improvements or simple horizontal scaling, NOT in the application layer.
&gt; One standard that exists for computer science, which most universities globally use, is "copy every course the MIT does 1:1" One could do worse, but thankfully, they do not do that. The needs of the students vary by the region of their eventual employ and the goals of the school itself.
less verbose = less lines of code at the end It is also more pleasant to read (because there is no longer any mixes of ., -&gt;, * and &amp;)
Hum! I think that if operator= is not overloaded then you may be right, because there is no alternative definition. That is, either it does not exist or it is syntatic sugar (ie. for add function). This is not the case for = 
Interesting comment on AS vendors also being cloud vendors who want to enable AS alternatives in their platforms. I haven't thought about it this way yet.
Indeed they do, but that's why there are specialised studies (economic computer science, technical computer science, theoretical computer science, software engineering). But when the course you provide is just called "computer science", it should reach the same or more skills as the MIT course. Otherwise how could a company ever expect anything? Having a degree in computer science should be alone in itself, and should mean one shouldn't have to do fizzbuzz or radix trees in job interviews — as those things should be mandated as basic knowledge by the study.
Things you should look into are JSF(2.)/Spring and Hibernate. Those are technologies most companies hiring juniors in. If you through in some SQL knowledge and you will be actively help develop a web tool with backend. I am just generalizing and there are certainly other stuff Juniors will be hired to do, but when I was looking for a position, pretty much everybody asked for it. 
&gt; basically all the EE committee has to do is cherry pick the stuff that's proven to work and be popular. It's what they in a way do. Perhaps not entirely, but it should boil down to that. Still, even that picking what works and integrating is apparently a lot of work. &gt;Secondly they also seem to miss a big problem with Java EE and that is it's usability in small projects I agree. There are three main forces in Java EE. The biggest traditional one only thinks in terms of big enterprises, multiple teams, separate operation teams etc. They are of the opinion that things like data sources should always be defined outside the application and maintained by operations. Then there's the other force that wants to make Java EE suitable for the smallest and easiest development projects. For them defining an embeddable data source is perfectly acceptable. In that case Java EE is not that much more than a series of libraries (the active running application server with an admin console and management features is largely ignored). The third group is the one that wants EE to scale both up and down. Traditionally the first group had the most say in Java EE's direction, but even since Java EE 5 the second and third groups are gaining in influence. I'm a supporter of the third group btw ;) 
Not a junior and working in France so some things may differ but I 100% confirm Spring and Hibernate. I don't know about JSF though, I haven't worked with that tech for a long time.
Well. I work as a consultant so I use whatever the customer requires me to use. I've worked on plenty of EE projects as well as plenty of Spring projects. For me personally EE doesn't bring anything to the table that Spring doesn't while in the mean time Spring is much **much** easier to use for my own pet projects. In a previous project it took me a lot of time to get the EE CDI to work outside of the EE container (glassfish, a royal pain in the butt) while with Spring Boot it's painless. The EE committee also seems to completely have missed the boat when it comes on the shift from .war deployment to standalone runnable applications. Containers are a thing now, even in production. We want to be able to quickly run a Java based REST service and just as easily create a docker container from it. Spring gives you that for free. I can't remember the last time I created a .war outside EE projects where I was forced to. The Java world is moving fast. And what I keep reading from a lot of 'fans' of JavaEE is basically that you should use it because it's a standard. Who cares? We're Java devs who have access to probably the largest and most mature OS ecosystem in the world. I don't care if it's standard. All I care about is if it makes my job easier. Spring simply does a lot better job at this.
Depends if you are doing a Web interface or not.
Java is typically used in the back-end. So it's the 'server' that serves whatever information to whatever client. This can be mobile apps, web applications or other software. How these communicate differs from application to application, some via REST, some older applications via SOAP, others communicate via a message bus (ActiveMQ, ESB) or queue's (Kafka). What most projects have in common however is the build ecosystem (maven, gradle), logging (slf4j, log4j, logback) and testing (junit, mockito). So I would focus on these first. Desktop UI's aren't built a lot anymore and JavaFX superseded Swing on that front. Servlets and JDBC are often not used directly anymore but still power the technology on top of them. I would suggest you look at a bunch of vacancies in your area and see what tech is most in demand.
I am playing around with spring boot (I dont use it at work because it is not enterprise enough...) and I LOVE it. I would highly recommend it for anyone with a little java experience who is trying to get into java backend stuff. The main reason is, that it is so easy to get something up and running quickly. For me, it is much more fun to learn by doing. Getting into concepts by actually building stuff. It is also well documented and there are tons of tutorials out there. It has its negatives too, like any framework. It can be hard clearly see and understand individual Java EE specs, and know what they do. There is tons of framework "magic", that can be hard to debug when something actually goes wrong.
Of course it depends a lot on the company, but being fluent in the Spring framework is something quite a lot of companies ask for, almost always combined with JPA/Hibernate. Understanding the concepts of modern day caching, JMS and security is a must too. TDD is almost always in job descriptions, although rarely actually used as it should be in bigger companies/projects. Writing clean code, good tests and understanding the broadly used technologies will get you quite far. The only reason I'd still expect Swing to see in a job description would be maintenance of older projects, which of course isn't really something everyone would like to do. In the modern companies in Belgium, I see a big shift in becoming a full stack developer. Learning not only backend development, including database interaction, but also frontend is becoming essential. To give you an example: the more modern companies I know ask for java developers with frontend experience, mostly Angular. Although you'd expect frontend people to work on the interface, having this skillset as a java developer will land you in general better positions. This is of course taken into consideration you like creating (business) web applications and have some know-how of frontend.
One of our clients who contracted us mentioned that Java, for them has a lot of scaffolding involve(Seed files and etc). So I wanted to personally see what he meant. 
&gt; Why would you even want to take it outside Java EE? Testing? And this is really a typical attitude of overconfident developers. "Since I can't imagine a use case you shouldn't need this". Pisses me off to be honest. &gt; But the Oracle spec lead was against it Well guess what. That's why we're against EE. &gt; Java EE is a great and stable API in and of itself. Even when you don't care about standards. There's a lot of mature implementation technology behind it. Same with Spring. Works perfectly. And it's used in the wild in production just as much as EE is. &gt; What standards mean is that you can switch vendors, with a minimal rewrite of your code (a switch is never 100% trivial), but if you don't care about that you have some basic assurance that your vendor is prevented from going crazy with changes. Big switches like these happen how often exactly? I mean; how often do you switch from one DB vendor to another which still being able to use your current implementation on top of JPA? 
Maven
1. Oracle's lawyers are idiots as they can't show it's same. For example run apache http client jar on android and java. It's same. Idiots. 2. If Oracle's dumb lawyers win, I'm happy. I get paid a salary to work. Why should companies get code for free, why do they need me. Copying and violating a license is bad. Even GPL and other code I write, respect the license.
That's true of any programming job.
&gt;Testing? Arquillian? &gt; And this is really a typical attitude of overconfident developers. "Since I can't imagine a use case you shouldn't need this". Pisses me off to be honest. I'm pissed off by that too, but in this case I was wondering why for all of those frameworks and platforms it's never needed to have things usable outside them. Angular, Qt, MFC, Cocoa, Ruby on Rails, Django, you name it. But only in Java 'we' always want every piece of every framework to work outside it. Why this difference? &gt;Big switches like these happen how often exactly? I mean; how often do you switch from one DB vendor to another which still being able to use your current implementation on top of JPA? We have a long running product (going 14 years now) and we switched 3 times. So in our case, once every ~5 years on average. But I don't understand your reply to my quoted text, where I said that if you *do not* care about switching vendors, a standard still helps to keep your one and only preferred vendor into line. For example, I can still do `request.getParameter` in my Java EE app. Same code from 14 years ago still compiles and works. If i twas a JBoss API, I probably would have had to change it 4 or 5 times already. One version it would be `request.getParameter`, then next version `request.parameter` then `request.getParam`, then `request.param` and finally the entire method would just vanish and I would have to acquire the parameter in "some other way", since JBoss would be "exploring alternatives" (but then this alternative way would never be published anywhere and promptly forgotten about) Of course `request.getParameter` is a joke example, but this has happened with lots of more complex APIs.
You can check out the Hartl Rails tutorial, that should be straight forward for you. If you are looking for Scaffolding, then you could check out Grails. 
Did you make a UML diagram yet? That used to be a suggestion from an old manager of mine. UML. You can tell we're both not young. I'm at least in a situation where the old crap I'm looking at was written by me. So ... at least I know who to blame.
Go find a cool open source project and contribute to it. Expect lots of feedback during code review. You learn a ton.
We are using spring boot to power a lot of microservices (fintech company), it's a good idea to learn it, it's really nice. I would just stay away a bit from ORMs, they're a bit too magical and get iffy once you need complex queries.
Second this. Focus on fundamentals. We hire devs based on that that don't know our frameworks and they do fine.
Given that WebKit and Blink forked because Apple and Google couldn't agree on browser development priorities, I can't imagine Google ever deciding to let Apple set development priorities for Android by relying on Swift.
&gt; spring boot (I dont use it at work because it is not enterprise enough...) We use it at a very large enterprise.
One very exciting space is the data space. We use Java to processes and analyze (production) large amounts of data. Everything from recommendation systems, machine learning, Natural Language Processing, Image, Video, Audio Analysis etc... We use tools like: * Apache Spark (not to be confused the web framework that I wish would change it 's name) * Mahout * MLLib * GraphX * Spring 4.0 * Confluent.io You should be familiar with Algorithms, Data Structure, Statistics, Parallelism, and Concurrency in the space.
&gt; Ditch Java, learn Scala You should learn as many languages and Scala is good one to get a taste of many language paradigms, but some drawback to the "Ditch Java": There is a lot of unknown in the Scala space (changing language direction) some of the tooling (static analysis) in Scala is lacking compared to that of Java. However, there is a lot of "built in" tooling for Scala that are add-ons for Java (Lombok, AutoValue, parts of Spring,...) Lots more companies are looking for Java folks.
&gt; like making seed files What are "seed files"?
&gt; It was meant a snarky remark Just in case somebody gets the wrong impression then :)
What /u/errandum said. When you are fresh out of college no one is questioning if you know this technology or that. They want to know that you have the basics down, can think for yourself and are willing and eager to learn. 
Either
between the lines here, most of the java dev jobs are web, oddly enough not mine, but i've talked to a lot of recruiters like Dick
Git! Everyone uses Git. Everyone you want to work for anyway. Java is big and there's no guarantee you'll use what you train on, but you *will* use git. Or learn mercurial, same thing. Maven is the next most popular thing i can think of. Or learn Gradle, same thing. 
That doesn’t help for hiring people nationally, or even globally, though.
Excellent tool
Camel and JMS for sure. I'd also suggest learning the basics of Fuse/ServiceMix for anyone learning Camel.
I will take Maven and Ant any day instead of having Gradle turn my PC into an airplane with 100% CPU usage.
I can definitely recommend 3) and 4) for sure. 2) has a particular style - many people enjoy it, some might not, so read a few pages first. I'm not personally familiar with 1) and 5). I will also add [Clean Code](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) for design patterns and general organization. If you're a beginner, it's probably okay to take that book at face value. However, once you get more advanced, you'll discover the parts where you can bend/break the strict rules he sets up there.
There's an alternative, which is using different media types for each kind of account (like [custom media types](https://developer.github.com/v3/media/)), and the URL is provided by the server as one of the instructions to the client for sending a reply. Kind of like an HTML FORM. That way, the client isn't so coupled to the server, giving the API author more freedom to make changes (like reorganizing URLs).
&gt; Qt signals usable outside Qt? It would be nice if they were. Gtkmm (the C++ layer of Gtk) packages its signal library as a generic component. So, you can use signals in your own application, even if it isn't a Gtk UI application. In the Java world, the observable library for JavaFX is completely independent of its host ecosystem. So, if you wanted to write a Reactive application in Java 8, that without any third-party libraries, you can do so, today! &gt; Is the MFC dialog box usable outside MFC? Yes. Dialog boxes in Windows are defined in RC files. You can bind a Windows Dialog Box to MFC, plain old Win32, Visual Basic or .NET. This is actually one of the very nice things about UI development in Windows. In Java, a Swing UI is tied to the Swing API, and a JavaFX UI is tied to the JavaFX API. Assets are not really sharable between technologies, so migrating from Swing to JavaFX means completely redoing your UI. &gt; Is the C++ std lib vector usable outside C++? By its nature, it cannot exist for anything but C++. TL;DR - Since when did easily reusable components become a bad thing?
If you are concerned about busy waiting, is there any reason not to replace the `ConcurrentLinkedQueue` with a `LinkedBlockingQueue` (in this particular thread per actor scenario) and use `take()` to wait for new messages? That way you could free the poor man from `Thread.sleep()` completely and have the messages processed in a timely manner.
Well, you're right, but it's not something I'm going to lose sleep over either. When you consider any candidate, you have to look at their specific experiences and skills in total. Assuming everyone is a replaceable cog in a machine just because they claim to have finished a computer science degree will net you some very unhappy development teams and managers and a very high attrition rate.
&gt; I was wondering why for all of those frameworks and platforms it's &gt; never needed to have things usable outside them. A few does not imply the whole. The entire Unix design philosophy is about tiny, isolated parts that can be reused in different many different ways. The Spring philosophy is about maximizing reusability, probably because Spring was built around its DI. Every part can be used somewhere else, you just have to implement the right interfaces. Want to use JPA with Vert.x and ditch servlets? No problem! Want to plug MongoDB into Spring Data? Go for it. Of course, if you're not careful, this can lead to some bad combinations, like mixing Mexican and Japanese food. But, I think Spring is attractive to those who think that might result in an interesting combination and are not afraid to try!
"Dont use java, use java!"
Go and learn core Java from good books like Effective Java, JCIP, topics like Generics and Collections. After that go to Java EE. Swing you can skip, almost all companies use some framework but it will be based on Servlets and JSP. Depends on framework , how low-level you need to know. If you are interested, learn about Java EE- Servlets and JSP. This will take time. Then you can look into a particular MVC based framework. Many companies use Spring+Hibernate combination. But no need to invest too much time into that as various companies use various frameworks and anything specific you learn about a framework won't be much use to you unless you start working on it (on your job). So nail the idea in case of Java EE. Same thing about JMS, JDBC, DI, JNDI, learn the concepts. Things like Git, maven, gradle etc aren't something you should waste your time on. Nobody will ask these in interviews. Although Git is fun and it can be useful for you in other ways. But these are not topics you can't pick up quickly, so don't worry about these. P.S. Java EE is not an absolute requirement. You will find lots of jobs with just Java. But in terms of career development it is useful to know Java EE tech stack.
Can you suggest a few.
You can't escape Javascript. It's everywhere. 
&gt; "What are the technical skills that are essential for becoming a Java Developer in modern job market? (self.java)" Not Java Seriously, you need to learn JavaScript/NodeJS and AngularJS for front-end style development.
Buy a Mac, under the hood, there is still a Unix heart beating. All your beloved commandline tools are there. brew is like apt-get, it's basically the missing Mac package manager. edit: I also switched from Linux to Mac, because of the same problems you mentioned. I won't lie, it's not the same feeling but it's close to it, without the hassle with drivers and configuration hell. Now the only thing I'm missing so far is a decent tilling window manager.
Thanks for your input!
http://blog.codefx.org/java/dev/features-project-jigsaw-java-9/
A lot of shops are using [MyBatis](https://en.wikipedia.org/wiki/MyBatis). You can write pure sql and have it mapped to an object. The queries are only as complicated as you make them and there isn't anything too magical. I'm not sure you are going to find many devs still writing raw JDBC. 
Right now, I use extjs, but for years I did backend exclusively without Javascript anywhere (:. 
In particular, you need to learn how to deal with missing dependencies in NPM. You'll be king of devops in no time.
IntelliJ on Ubuntu on a Thinkpad X240. Does what I need. I've used Linux for 18 years, so I have a lot of familiarity with it. It mostly gets out of my way these days. Couldn't get the soft buttons to work on my touchpad (it's not the best X-series thinkpad); bought an external mouse. I can't imagine myself being very productive on Windows. I would miss the shell too much (future notwithstanding). I've mostly discounted OS X because it means Mac hardware, and I feel I can get better hardware for the price elsewhere. Never been a big OS X user, so it's not a massive draw for me. Use what every works for you. For me that's Linux. I'd be an idiot to say it's perfect for everyone.
&gt; here's fundamentally no reason why you'd expect Java desktop platform code to run on a mobile phone I don't think it's that straightforward. I would certainly expect Java desktop platform code to run on a tablet.
For an Oreilly book, I really hated the Head First series. It seemed aimed at the same target as Program Java in 24 Hours/Java For Dummies type books. I would certainly recommend Effective Java. If you have some Java experience, it will certainly bump you up to the next level. It's a little dated these days, but definitely worth reading though. I was always impressed with the Manning Publications books on various frameworks and topics.
&gt; Before starting this job some developers didn't even know what a WSDL Is there a surgical procedure available for me to unlearn what a WSDL is?
A quick and dirty way is to use future chains, atomic computations, and a shared executor. That avoids the ugly dedicated thread and sleeps in the article's code. ConcurrentMap&lt;String, CompletableFuture&lt;Void&gt;&gt; dispatchQueues; public CompletableFuture&lt;Void&gt; dispatch(String queueName, Runnable task) { return dispatchQueues.compute(queueName, (k, queue) -&gt; { return (queue == null) ? CompletableFuture.runAsync(task) : queue.thenRunAsync(task); }); }
Maven and gradle do more than just resolve dependencies. You will still need either one for "module management". A separate tool is needed simply to grab every single thing needed to make your program run. Beyond that, You won't want to be the one hand crafting the modules. Maven/Gradle could easily slide into that role (especially since they are practically already there).
How about WildFly ? Anyone knows ?
Anyone who says Java is slow doesn't know what they are talking about, and should learn to just STFU in those cases. I have many complex and big Java apps that are faster to initialize and load their data than many other native apps, and by a long shot at that. TLDR: **If its slow, its not because of Java. You just need better developers.**
Fedora, with Intellij and vimkeys. Fedora has given me the fewest issues by far of any distro. 
When the goal is high performance and low latency, some do. I still do :p
Thank you for all the help! I will have a look at a few of the ones mentioned and use one as my foundation ground moving forward.
I've been a Java dev for a little over a decade now, and I don't know half of the stuff people are listing here. My recommendation is to learn the basics: data structures (which to choose when and why), basic algorithms, inheritance/polymorphism, overloading, concurrency and thread management. Learn how to write solid unit tests. Learn how to write clean methods with informative names (no doWork() methods). Learn how to figure out how code from external libraries work, so you can trace through it when stuff goes wrong. Learn how to read and understand terrible code. Be able to identify why one approach is faster or more efficient than another, either in time complexity or memory management. I say this because these things are useful with any Java job. Learning specific frameworks is nice, but what if a potential company doesn't use any of the frameworks you know? Use the basics to get in the door, then learn the extra stuff your company uses. No company should expect you to know everything they use.
Some random google search led me to [this](https://github.com/mybatis/mybatis-3/issues/98) and it appears you are correct if these tests are accurate. Pretty interesting. 
Yeah I'm sure there's a bit of that. But I still think there's the bleeding heart purists out there - if fact I suspect this is why Oracle forced the 'Java EE Guardians' out - they wouldn't listen (perhaps to their credit) to the sales lines.
Please separate Java EE the API from Java EE the implementation. Java EE is quite productive in small projects, and creating a RESTful endpoint is also quite easy. From an implementation perspective, you can use a traditional appserver with built-in clustering (nice for enterprises that haven't gone cloud) all the way to WildFly Swarm and a pom.xml to create a runnable jar out of your Java EE app with NetFlix OSS integration (and more) if you want cloud-centric apps.
how will that replace maven/gradle?
I don't think you understand the scope or purpose of a build system if you think that jigsaw eliminates the requirement for either of them. 
No need to be condescending about it. At a certain complexity level it becomes difficult to fully know and understand every method of every API you're dealing with and an IDE such as IntelliJ IDEA can help there. The IDE does a hell of a lot more than just indexing and code completion- being able to debug and step through code, inspect variables and execute watch statements at the push of a button greatly speeds up bug hunting IMO.
Standards have their place. Without a Servlet standard, Spring would never have penetrated the enterprise by layering on the choice of popular Java EE application servers. Even today, Spring Boot relies on a servlet container, and you can switch in Tomcat, Jetty, or Undertow - brought to you by Java EE. This isn't intended to bash Spring in any way, just that its Java EE and a standard specification that gives Spring this flexibility.
Windows desktop. I assimilated with the Borg long ago.
First, CDI 2.0 will address Java SE support. Second, platform decisions are revisited every 3-5 years. It happens more than you think because you actually have choice. I can say that many companies switch vendors (having been at Sun, Oracle, and now Red hat). Sometimes it's cost, sometimes it's vendor consolidation (or move away from a specific vendor), sometimes it's support, sometime's its performance, etc. Enterprises do like choice.
&gt; XML is difficult to read Not really. It is verbose but it isn't particularly difficult. Maven's xml is pretty simple, there aren't a lot of attributes and the tags are fairly simple. This &lt;dependency&gt; &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt; &lt;artifactId&gt;gson&lt;/artifactId&gt; &lt;version&gt;2.3.1&lt;/version&gt; &lt;/dependency&gt; Isn't significantly harder to read than this group: 'com.google.code.gson', name: 'gson', version: '2.3.1' or even this 'com.google.code.gson:gson:2.3.1' 
Both these options are acceptable.
I work for a network security company and I can attest to the technologies listed by petemal67 as well. In addition to the basics of Java and what petemal67 mentioned: * Design patterns and data structures - more often than not, new developers can write code and do it fairly well but lack the knowledge to use design patters to solve problems. **Solving problems with software is the primary job of a developer.** . Most likely you will get asked a questioned relating to these 2 topics in interviews. They don't always expect you to be able to answer them (as a junior developer)... but it you can, it will go a long way. * A good understand of a web server and how http requests work will go a long way as well. Here is a great read/article for building a simple web server (note: it's in python but the concepts are sound.) https://ruslanspivak.com/lsbaws-part1/ * Soap and RESful web services with rest being more popular. * Spring is fairly popular in the enterprise world and is a great framework to be familiar with. * IntelliJ is awesome and is leaps and bounds better than eclipse these days imo, even if you can only use the community edition. Although, I recommend buying a copy or subscription for yourself (maybe your company will let you use your personal copy). Hope this info helps. Don't think you need to know all these things inside and out. Just be familiar with what they are and used for. Learning specifics will vary based on the problem/project you are working on. Remember to always keep an open mind and if a different technology better fits the project/problem, don't be afraid to use it.
Here's the secret, it deploys 50+ vm and Microsoft get paid by vm.
Laptop, Debian+XFCE, Eclipse. I don't happen to have any problems with Linux, but I tend to read "Debian on [computer model]" articles before buying, and also check to see if it's Ubuntu certified. I personally hate Mac and Windows, but I'd choose Mac over Windows. Also, why spend $2500 on a MacBook Pro? Get a MacBook Air.
Scala: a great way for functional fanatics to write code that no one else can read.
I should add that Effective Java 2nd Edition covers Java 5, which is "good enough" (or 6, but there's very little difference between them). Anything that doesn't cover generics is frankly a waste of everyone's time these days. The change to the language and library was huge. Especially in the collections. Adding lambdas to the language in 8 was a massive change, but one we've only really got the experience to say how to use it effectively, and the rest of the book still applies. Once Java 9 is out, I think the language will have changed enough that I'd struggle to recommend a book that old.
There's been a lot of good stuff in here. I would add that you should also know how to adapt. Over my career I've seen git emerge, countless frameworks both Java and JavaScript. I was in the JavaFX beta before it was nerfed into a useless library. I know how to build interfaces in 5 languages, can interface with 3 databases, and am working to learn my 4th application server. My company specifically hired me, in the company President's words, "We need someone like you who can adapt." So, as others have said, you should know the fundamentals. Then, go and learn what drives them. Frameworks are nice to have in your toolbox, but you need to know what makes them tick because there's going to come a day when someone asks "Will Swing do that?" and you need to know the answer or at the very least how to find it.
Windows 10's multi-desktop feature is a life saver when you work in an interrupt-driven environment. Yes, it's old hat to Linux and OSX, but it's still awesome. I've been using NetBeans, Cygwin, a local instance of WildFly, and a separate VMware server that has several VMs based off an OVF templates containing CentOS+WildFly+MySQL+PhpMyAdmin. We also maintain some PHP apps (including a firebreathing clusterfuck of a Magento e-commerce site), and I've found PhpStorm to be far superior to NetBeans when dealing with network drive-based sync for a codebase the size of Magento's. The Magicento plugin doesn't hurt, either. I was not as happy with IntelliJ IDEA (Enterprise); it didn't seem to comprehend my Maven EAR projects as well as NB does. If my machine were capable of using another 16 or 32 GB of RAM (e.g., a multiprocessor Xeon-based workstation machine, instead of a single-CPU i7 rig), I'd strongly consider switching to a local instance of VirtualBox or VMware Workstation (haven't had great luck with Hyper-V).
Everyone on here is saying they need a shell...how about now that Windows 10 will include bash shell? Me personally...Windows laptop. Linux VM if needed. I have a MBP actually, running boot camp onto Windows 7...MBP hardware is great, OSX on the other hand, don't see what's so great about it.
Thanks that makes sense. It's much better to use http://www.liquibase.org/ for that since * it's language agnostic * it's database agnostic (e.g. it has database refactorings that don't use SQL at all) 
True but I don't think it's replacing enterprise heavy Java web applications or web services anytime soon.
Microsoft will soon have user space ubuntu, maybe you should wait?
We'll get shell to Windows as well :)
I use Android RDP into an Amazon EC2 with Windows Server and hide out in the bathroom all day. Jk. Surface book + Amazon EC2
There's no labels on these axes. In Genson slow or fast? ![readme image](http://owlike.github.io/genson/images/genson-data-bench.png)
So, from fastest to slowest it is Jackson &lt; Genson &lt; GSon. Except `Genson optim. Double`, whatever that is, which is instantaneous in Serialization, and twice as fast as everything else in Deserialization?
&gt; Everyone on here is saying they need a shell...how about now that Windows 10 will include bash shell? You're still running in Windows. When I have to use windows I always install Cygwin anyway. But I strongly dislike how windows treats it's user as an absolute moron and at the same time installing stuff is so incredibly convoluted. 
IntelliJ and Fedora on a Lenovo X250.
Maybe it is a personal preference, I'm not complaining, but there are formats that offer adequate capabilities that are less cluttered, and more straight forward. The example you provided is fair, but when faced with many dependencies and plugin configurations, I like to have a more efficient presentation. Xml is overpowered for the purposes of maven and similar tools.
I think this is an excellent idea that will truly move Java forwards.
Main advantage of maven is that it is a very mature piece of software. But I also root for gradle.
Don't buy the core Java books - they are for SE 7 and being updated for SE 8 which come out in September. I found that out he hard way - doh! Pick up Java 8 in action by Manning Publishers. I have the concurrency in practice book and it's very good. 
I was a Linux user since 1995 until recently. I also have code in OpenBSD, and love that distro but recently I made the plunge and bought a macbook air. OSX is fantastic, everything just works. I'm with you regarding fiddling with things, it was grand when I was 16 but I can't give up my weekends anymore.
Ubuntu Linux + Intellij IDEA Thinkpad + two 22'' monitors at work and a Dell Inspiron + one 24'' monitor at home :)
Windows on laptops since 2003, which incidentally also triggered my slow move away from GNU/Linux back into Windows as main OS. Nowadays an extra reason to be on Windows is that I have gotten back to .NET, besides doing Java and C++. As someone that also cares about discrete GPUs, I have the same problem regarding MacBook Pro prices, specially given that ThinkPads W541 costs 1000 euro less with much more juice. My favorite IDE is Netbeans, although many of our customers do force Eclipse on us. Android Studio for Android, but have slowly been using Visual Studio since they introduced mixed developed support for Android NDK projects.
Not specifically Java, but I highly recommend reading ["The Pragmatic Programmer"](http://www.amazon.com/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X). 
&gt; but about going through hoops to avoid using simple things from &gt; your environment, because you always want to abstract away &gt; that environment. You've just described Java. &gt; eventually inventing their own unholy toolkit that practically would only run on Motif &gt; anyway. You've just described AWT, SWT and Swing. In any case, creating another toolkit is a stupid strategy for writing cross platform UIs, because you're working at way too low level of an abstraction. Either use an existing one, like Qt or wxWidgets, or better yet, use a [hexagonal architecture](http://alistair.cockburn.us/Hexagonal+architecture), which lets you have UIs that actually follow the HIG of the platform but are still completely interchangeable. Spring Data is a perfect example of hexagonal architecture. It provides APIs which implement high-level data access *patterns*, like [`CrudRepository`](http://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/CrudRepository.html), and the access layer to MongoDB is written to implement the pattern. &gt; Closer to home here, I've seen web apps trying to avoid using the Servlet API You've just described web frameworks. The Servlet API is very low level, and people avoid it because it doesn't map to the way many people want to write applications. There are those who want to write web applications like desktop applications, and create a component abstraction over the Servlet API. Or, they want functions with proper datatypes, and create routing and databinding abstractions over the Servlet API. But again, if you write your application using hexagonal architecture, you could switch from Servlets to Vert.x, which are completely different, without the application being aware of it. &gt; And that is quite limiting and slows down the development of those APIs. Perhaps, but it makes JavaEE more useful. The entire reason why J2EE sucked so bad was that everything was dependent on the app server. JavaEE modularized the platform. Now, if all you want is ORM, you can use just JPA running out of `main()` instead of the monstrosity that were Entity Beans. &gt; Is for instance MVC.NET usable outside .NET No, why would it be? That's like asking if JSF were usable outside of Java. *However*, [ASP.NET 5](http://docs.asp.net/en/latest/conceptual-overview/aspnet.html) is a significant redesign which breaks up ASP.NET into a bunch of independent components hosted in NuGet. ASP.NET is no longer going to be a monolithic platform, but components which you can mix and match. Sound familiar? 
I am a full time Rails developer and this is the only answer but I stay far, far away from the scaffolding command. This book is exceptional and free to boot. 
Certificates in most cases are wall decorations, if getting a job and such you should be able to say that you are a certified Java SE 7 developer but you know how to handle the stuff Java SE 8 has to offer.
You must provide the source code to the LGPL library, and any modifications you made to that LGPL library (if any). You must allow a user to replace a version of an LGPL library with a different version of that LGPL library. You don't necessarily have to SUPPORT such a configuration of your product. That is, your tech support department can say this is an unsupported configuration. The main thing the LGPL protects is the freedom of the user to (1) have the source to the library, and (2) if the vendor of the closed-source product disappears, to be able to use updated versions of that LGPL library within their dead end product. Therefore, LGPL is less desirable to a commercial vendor because it imposes additional burdens. Some shops won't even allow LGPL at all. 
&gt; You've just described AWT, SWT and Swing. With the difference that there's at least a dedicated team working on it, and those things have that as their purpose. What I was talking about was just embedded (entangled) in an application. Over the years the effort put into it may have been comparable to Swing, but ironies of ironies you couldn't re-use that for any other app. &gt;You've just described web frameworks Not really, since the web framework would still use the Servlet API internally and often allow you to use it directly as well. The web framework would provide conveniences but not abstract Servlet away both internally (not use it itself) and externally (not let the user use it). &gt;The entire reason why J2EE sucked so bad was that everything was dependent on the app server. But why would "the app server" be something you should not depend on these days? It's just the collection of a set of libraries and some glue. I can understand that back in the days the "app server" had to be avoided since it meant "IBM", "WebSphere" and $100.000 per seat. So people used "Tomcat", since it was free and you could just install it. These days, you can download TomEE or JBoss and use them. So you don't need to avoid or be independent of the "app server". You also don't try to be independent of the JVM, but that's (IMHO) since the JVM has always been free to use and was never exclusively sold by IBM as multi-gigabyte expensive thing. &gt;Now, if all you want is ORM, you can use just JPA running out of main() instead of the monstrosity that were Entity Beans. But what does that have to do with using JPA within Java EE? You can now use JPA within Java EE instead of that Entity Beans monstrosity (which are btw pruned from Java EE). &gt;No, why would it be? That's like asking if JSF were usable outside of Java. Usable outside Java EE, and yes, that's what people have been asking for. It's a mixed blessing. It has been holding back JSF, and has caused duplication. &gt;but components which you can mix and match. You can also do that within the Java EE platform, as Liberty demonstrates, but just as the modular JDK with well defined dependencies. E.g. JSF depends on Servlet, CDI and Bean Validation. 
Darn it, I've barely finished migrating my code to jOOQ's [generic generic type based API](http://blog.jooq.org/2015/04/01/dont-be-fooled-by-generics-and-backwards-compatibility-use-generic-generic-types/) and now this comes along. Oh well, time to dive in again.
I've participated also but in my case it was just my wish. In my opinion certificates are only for you. If you want to structurize your knowledge. Nothing more. 
It is fast, there is a full benchmark here http://owlike.github.io/genson/Documentation/Benchmarks%20&amp;%20Metrics/. Though at some point, speed shouldn't be the main criteria for choosing a json lib.
Doctrine looks a lot like JPA (Hibernate is an implementation). Java hasn't really been about XML for quite some time now. It's all [annotations](https://docs.jboss.org/hibernate/stable/annotations/reference/en/html/entity.html) now. 
You mean [Doctrine](https://en.wikipedia.org/wiki/Doctrine_%28PHP%29) for PHP, right? Java has lots of options like it. Hibernate, at you mentioned, implements the [Java Persistence API](https://en.wikipedia.org/wiki/Java_Persistence_API) of which you have multiple choices other than Hibernate. Beyond that you have [JDOs](https://en.wikipedia.org/wiki/Java_Data_Objects), [jOOQ](http://www.jooq.org/), and a host of other frameworks. Not sure what you mean about XML love. Many Java frameworks have moved away from XML and towards annotations for configuration.
I mean has not. Modern Java projects hardly have any XML at all.
Just to point something out . . . Twitter was using Ruby and switched to Java in 2011. Twitter’s Shift from Ruby to Java Helps it Survive US Election http://www.infoq.com/news/2012/11/twitter-ruby-to-java https://www.quora.com/Why-did-twitter-move-away-from-Ruby-on-Rails Here's a five year old video: https://www.youtube.com/watch?v=ohHdZXnsNi8 
you java people. I am a php people. I graded with java knowledge and gave it up for php. We are different people :D
I am now interested in this JPA stuff and want to re-teach my self the concepts of java by writing a small throw away wrapper.
Except that people actually do it already.
It will be totally worth the trouble diving in again. For at least the next 364 days.
If you're spending that money I'd go for the Dell Sputnik XPS, version 5. I had its predecessor last year and absolutely loved it. They pushed all the drivers upstream so I was able to install the Mint Cinnamon desktop with no driver hassles. Its a beautiful machine that could handle running a search server, two heavy application servers, a database, plus Intellij (with a 2GB heap) to work on a large multi module project. Obviously that wasn't its everyday load, but it's handy to be able to stand up a full stack when traveling. It also fits perfectly on an airplane tray table. Also, dual 4k monitor support on the new model! I've since moved jobs and am now saddled with a macbook pro which I absolutely loath. I find the key bindings, window management, and file navigators all utterly horrific. I try and stay inside IntelliJ as much as possible to cope. Command-shift-4-left click to screenshot, wtf! No # key anywhere on the UK version of their USB keyboard! The macbook pro also uses lots of main memory for 4k monitor display, not segregated GPU memory, so.....you'll have to unplug your monitors if you want fast builds or accurate bench marks! &lt;/endrant&gt; Man I miss that Sputnik. 
We use MyBatis as well and some ORM magic here and there.
The definition of blogspam right here. An "article" with no words, just a bunch of links – many of which could have been submitted on Reddit directly, and indeed were previously. 
You should try to broaden your horizons and generalize less.
+1 for X240s. I use an X240 (I "upgraded" to one from an X61s) and they are great.
They'll still be a ton of jobs in Java EE, the code will live on for decades. Source: work for a bank, EE 5/6 is the "new" stuff as oposed to C CGI scripts and FORTRAN/COBOL.
Some good suggestions already, so I'll toss out a slightly left field but nominally relevant suggestion: [Writing Compilers and Interpreters: A Software Engineering Approach 3rd Edition](http://www.amazon.com/Writing-Compilers-Interpreters-Software-Engineering/dp/0470177071) It's a practical "let's build a compiler together" book. Uses Java, and focuses on building up the project, chapter by chapter, rather than being a survey of the comp sci/theory side of compilers that you'll find in most compiler books.
[removed]
I have a colleague who's wanted Ultimate for a while but has other priorities. Could surprise him Monday morning?
&gt; I already have an IDE of choice it's netbeans isn't it. 
I looked into Dell's Precision models and they all look good. I had a very bad experience with the only local reseller (I'm living in Paraguay). A few years ago I paid upfront ($1920) for a Latitude E6510 with a very detailed and specific configuration and 45 days later received the most basic possible with a crappy display and a small battery that didn't last 2 hours. They wouldn't accept it back (I sent the box the next day, they sent me back immediately). We had a very long email discussion until I finally accepted that I've been scammed. Never again.
Being based on the websocket JSR is surely a very good thing. Following the JSF mailing list I got the impression that PrimeFaces was being asked to provide the websocket support in JSF itself, but it never happened. Then BalusC did the implementation for Mojarra, it's in the latest JSF 2.3 milestone. The OmniFaces version is a variant of that.
Newer Java is a completely different beast if you haven't touched it since 5 or 6. So many quality of life improvements like generics, and lambdas. As well as just being straight faster. 
Applets usually are not permitted access to use the entire capability of the class library, so you may be using classes and methods you are not supposed to use. Generally this includes the file system, reflection, and a few other things.
People here just hate certifications, wrong place to post it.
&gt; As startups grow, most engineering teams hit a point where they find it necessary to add some amount of process to keep things in order. Often, they jump from no process directly into a relatively-heavy process such as Scrum. While Scrum works very well for projects with mature architectures, it doesn’t fit into fast-moving environments where the foundation has not yet stabilized. I mean, it does exactly that right at the start. &gt; Agile/Scrum is a great system Oh, is this like an april fools thing? 
I made this using a jframe, not sure if that matters, but would you like the source to see which methods I would need to change? or could you link me to a list of the methods and classes that don't work?
They're the worst X series I've used, and I've had a number, including an X30 and an X200s. * New keyboard (which isn't terrible, but it's not a Thinkpad keyboard) * No hardware mouse buttons (and softbuttons that don't seem to work under linux) * Insert is fn+End, or if FnLck is turned on so you get working F buttons instead of function buttons, End is now fn+Ins * No capslock light. There's lights for FnLck and the mic mute, but why the hell no capslock light? On the plus side, the backlit keyboard is a nice addition. I'm thankful that the X250 reverted the lack of hardware mouse buttons, but it didn't fix any of the other issues.
IntelliJ is an absolute requirement. Dev server runs Ubuntu and has 96GB, 16 cores, which is usually plenty.
Depends on the requirements of your business.
Also your experience with the language, the time you require for development, what the infrastructure is ... I think the point being made is that it is a pretty broad question. I mean I could say yes, since I like Java, and know I could do something pretty quick and dirty, though that has 2 issues: * I have no idea about the requirements * I am biased since I like Java
I think i want it too be a single page website basically though using angular. Should I choose a different backend instead of using Java?
Maybe? Your question isn't really answerable. Do you or one of your employees already know Java know Java well enough to build some web services? Then go for it. If you're just starting out and you don't know Java or you have an employee skilled in say PHP then just do it in PHP or whatever you feel comfortable learning quickly. By the time the language matters you can afford someone to refactor or rewrite. 
Please read the sidebar.
HP 850 G2 (i7, 12 GB RAM, 256 SSD) + 22" Samsung monitor. Eclipse. Dual boot Windows 10 - Ubuntu 15.10.
Lots, actually. My favorite is [Solaris Studio Performance Analyzer](http://www.oracle.com/technetwork/server-storage/solarisstudio/features/performance-analyzer-2292312.html). But for small benchmarks something like ["perfasm" profiler](http://hg.openjdk.java.net/code-tools/jmh/file/7cff26ccc4d3/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_35_Profilers.java#l319) would also do. Other examples: perf + [perf-map-agent](https://github.com/jrudolph/perf-map-agent), etc.
I'm goin too a bootcamp in about 2 weeks that focuses on java. This is a business idea that I will be building on the side. I just wasn't sure if the spring framework would work good for a real estate website. I plan to build it all myself over the next year or so
Simple answer? Yes. Answer with reasons? It depends. 
Are you the one building it?
If Java is the language you'll be learning, then it's definitely the best one to use to build out your web application. You'll have to look into web frameworks like Spring, Play, Spark, Ninja, Grails, etc. since they will make your life a lot easier.
Well, any language would do, but yes, java would work and there's opportunity to make it strong and reliable with java.
That's my little secret... 
Having used Scrum extensively, I'm not particularly keen on it. Half the time, getting teams to do it properly instead of cargo culting is a big challenge in its own right, then there's all the overheads of the various rituals and meetings (occasionally made worse with the cargo culting, too), then there's the fixed, rigid sprints. I've found an approach more similar to kanban to be cleaner.
That depends on sooo much more than the category.
It's called "future certification test" marketing.
/r/java and /r/php are garbage man. Lots of kids and imposters. "You're not ready for scrum", written by someone who appears to have just learned about scrum. Lmao
I think the value from a dev team perspective (as distinct from business value) is that the focus of scrum is on continuous improvement. That's why retrospectives are built in: it forces you to ask yourself what isn't working and remedy it.
Are you learning to program? Spring and Java in your first project would be jumping into the deep end. There is a lot going on to take in. Though if you must, then give spring boot a try. It provides recipes for common projects like webapps.
If you have to ask, no. Honest answer. Java is good for bigger projects, and there's a decent learning curve to climb.
Java is a fantastic language, perhaps the best programming language, for many backend/API needs. If you have already started coding in java for your backend, stick with it.
Yes, and Scrum as a framework isn't needed for self reflection (I'm saying this from an engineer's perspective). I suppose, moving towards any agile approach is a good thing, but frankly, Scrum is heavyweight at the best of times, often done badly, and often just used as a way for people to make money out of companies as agile coaches. Lean and agile approaches are good, but I'm just not keen on scrum.
Is it common in php world to create a question thread and then act like an asshole to anyone who responds?
Yeah I'll be going through a java bootcamp in about 2 weeks and was going to work on this on the side and implement the stuff I'm learning from the class. We will be learning the spring framework also
of course we aren't ready for scrum. we can't even define a process.
On mobile so can't see sidebar currently
I've worked with so many introverted engineers who don't want to rock the boat (or alternately "we've always done it that way" types) that I've found calling out process improvement explicitly in the process itself to be a necessity. You're correct, of course, that scrum isn't necessary for this, but in my experience (ranging from embedded software in medical devices to green field development to a company with a huge legacy code base trying to adopt agile--so places where scrum has added process and places where scrum has removed process compared to the before state) it's the biggest win of adopting scrum, and I think the prevalence of scrum is a win for this reason. 
It's not. 
I guess I can finally throw this away :) adf43@orange:~$ cat ~/bin/run_java.sh #!/bin/sh #creates a simple program around the parameter on the command line #compiles it and executes CLSUFFIX="${$}" rm -f /tmp/RunJavaTest${CLSUFFIX}.* echo "public class RunJavaTest${CLSUFFIX}{ public static void main(String args[]) throws Exception{" &gt;&gt; /tmp/RunJavaTest${CLSUFFIX}.java echo "${1}" &gt;&gt; /tmp/RunJavaTest${CLSUFFIX}.java echo "}}" &gt;&gt; /tmp/RunJavaTest${CLSUFFIX}.java javac /tmp/RunJavaTest${CLSUFFIX}.java if [ "${?}" = "0" ] then java -cp /tmp RunJavaTest${CLSUFFIX} fi rm -f /tmp/RunJavaTest${CLSUFFIX}.* 
As the obnoxiously large "submit text" button mentioned, you should probably be posting in /r/javahelp. 
Since you couldn't follow the directions for where to post your question, I suggest you hire a tutor to explain the tutorials to you. Or, you could learn to pay attention to and then follow directions much more precisely before you try and learn to program.
Considering I'm paying monthly at the minute I wouldn't pass up an opportunity to get one cheap.. what's the cost?
Go ahead, see where making fun of people that are trying to explain something to you it takes you.
Yeah mint is pretty good on my thinkpad, except the mousepad has weird quirks that I had to sort out with some kind of synaptics tool. Apart from that I think everything works out of the box
Linux and intellij
Then why are you calling nutrecht silly? Also, that's the second time in this thread you're using that phrase. Think about it.
I just read the title of this post up to the word “MySQL” and then instantly decided that I’m not going to click the link.
read the sidebar and still don't understand
&gt; I think i want it too be a single page website basically though using angular. Should I choose a different backend instead of using Java? Use JHipster
Interesting. Is this intended to be used for the same scripting applications as Groovy, or is it more of a rapid prototyping tool?
Out. Of. Context. Silly Man. Out. Of. Context.
No mention of [BeanShell](http://www.beanshell.org/)? It can be used as an interpreter: $ cat test.bsh #!/usr/local/bin/bsh System.out.println("Hello world"); $ cat /usr/local/bin/bsh #!/bin/sh java -cp /usr/share/java/bsh.jar bsh.Interpreter $* $ ./test.bsh Hello world or as a limited IDE: $ java -jar /usr/share/java/bsh.jar
I can't wait to use it to test stuff like RegExp or formatters
I suddenly crave McDonalds. No idea why.
&gt; Please seek help with Java programming in /r/Javahelp 
There's also [javarepl](http://www.javarepl.com) which you can use via their website, or a downloadable command shell. OS/X users can install with: brew install javarepl as well. What would _really_ be nice would be a `javarepl-maven-plugin` which automatically used your dependencies. But you can easily use `maven-exec-plugin` to do something similar. 
Mostly another tool in the tool belt - it's often handy to have a quick interactive means of exploring an API and seeing what data comes back and manipulate it. Often I'll do that in IntelliJ IDEA during a debug session and their evaluator, but having more of a REPL is sometimes nicer. 
True, I can see that it would be useful in that way, I was just wondering if it can do anything else like accept a file as input to process?
For quick checks when you're not coding something already, anyway. E.g. does `int i = (int) (4.6 + 3.2)` yield 7 or 8? Does `Stream.of(1, 2, 3).filter(i -&gt; i % 2 == 0).count()` work? Etc... This can be useful for: - Bloggers - When you want to answer questions / comments on reddit / Stack Overflow / in a chat with coworkers, etc. - Etc.
Oooh, an auction on reddit. That's novel. As no one has placed any bid yet, here's mine: USD 0.02
http://directmemory.apache.org/ 
I just wanted to thank everyone for their responses! I am starting off with the "Effective Java 2nd edition" and working on deciding what a another book to get is. A lot of the comments here have given me a good starting point. 
Of course, but if OP (and/or their team) has no experience in Java, but experience in other languages, then Java will almost always a bad choice compared to writing it in the language they do know. If they know nothing, then learning Java is not a bad idea (although writing a real estate website with no knowledge of programming might be trying to run before they can walk). By asking if Java is a good choice, they're implying that they don't know much about Java, because if they did, then they'd know the answer.
Removed though similar functionality is supposed to replace it. If you need unsafe not a bad idea to wrap its usage assuming the library you are using will adapt its implementation with newer versions of the language.
Few questions: * I tried benchmarking your lib a while ago, but it didn't deserialize data at all. Is there anything special which needs to be done when you are trying to deserialize POJO from another jar? * How can I format joda DateTime as string (so it doesn't lose timezone) * You seem to mention JVM serializers for comparison, but your library is not in that benchmark (at least not official). How come? I tried debugging why your lib didn't work in my bench (https://github.com/ngs-doo/json-benchmark) and it seems it didn't find any "mutableProperties" even though there are public setters; nor did it use ctor with args. I'm in the process of updating that bench and I guess if I don't fix that I'll replace your lib with something else ;(
Just to add my opinion here too, I was very anti apple for a while, but got a MacBook Pro to build an iOS app without the hassle of a hackintosh. The MBP has been so much easier to set up and use as a dev box and the trackpad really is all it's cracked up to be. Nothing like the cruddy touchpads on HP's or Dell's. For a dev machine, I will probably not go back to windows. Ruby / Python / other dependencies plus PATH management is just a hassle. It might get better with Windows 10 including some version of Bash, but I wouldn't count on it.
Is it OK with the reddit community guidelines to post a link to ones blog every week? Shouldn't the links be posted individually?
The problem I have is that your blog is an exact copy of Jonathan Giles [JavaFX links of the week](http://fxexperience.com/2016/04/javafx-links-of-the-week-april-4/) with out attribution. Jonathan has been doing this for years and if you are going to copy the content of his site verbatim at least give him credit for it. 
* If you are not doing something exotic, it works out of the box. What problem did you have? * Use JodaTimeBundle with the configuration you want by providing a custom format and disable serialization of dates as timestamp with GensonBuilder.useDateAsTimestamp(false) * No I just cloned the project and used this class https://github.com/owlike/genson/blob/master/genson/bench_results/GensonBind.java to benchmark Genson with the other libs. I never took the time to make a pull request to jvm-serializers project. Without more infos it is hard to help. If there are setXXX methods they would definitely be used by default. If you don't provide a no arg constructor but have one with arguments you need to enable this option useConstructorWithArguments. You should definitely explain what problem you have on the user group http://groups.google.com/group/genson. There it would be easier to help you.
[Here](https://github.com/flaxsearch/luwak)'s the main GitHub repository.
I didn't. It didn't deserialize anything; only serialization worked. Well, to be more specific, here is the old configuration: https://github.com/ngs-doo/json-benchmark/blob/master/Benchmark/src/main/java/hr/ngs/benchmark/SetupLibraries.java#L263 I tried your option (useDateAsTimestamp) but it still ended up serializing number for DateTime I think you should try and submit Genson to JVM serializers. It's much more reliable source of information, than various forks which were not merged upstream.
&gt; this graph is what I would call the marketing page where I can't use the space to explain technical details You're not selling insurance to grandmothers using a cute mascot, you're selling a technical work to a technical audience. It's true that the parsing speed and memory consumption of a json parsing library is a technical detail, but so is its API. &gt; Do you think if I add on the axis what it represents(time) would be enough? No one says their library is slow, bloated, and inefficient. But when I write benchmarks, I sometimes find that they actually are. Lots of benchmarks actually test classloader performance because they're too short. And of course performance depends on input - maybe one library is faster for json &lt; 1kb and another is faster for json &gt; 10kb. To me, a benchmark means *nothing* unless I can - Understand what the benchmark was. 100 trials of 10 byte json? 100k trials of the exact same 10k json? 100k trials of random json between 1k and 100k size? Without this data, I have no way to know if the benchmark applies to my usage. - See the benchmark code, to see if there's any mistakes or accidental cheats (e.g. if a competing library is designed to have a long-lived buffer, and you're destroying it after every message) &gt; I can't use the space If you don't feel you have space to back up a claim, then don't make the claim. Maybe you'd be better off just saying "Performance very similar to Jackson and Gson" with a link to your more detailed benchmarks. For a lot of applications, performance probably isn't the biggest reason for picking a JSON library anyway. No benchmark is better than a sloppy benchmark imo. Don't make a claim you can't substantiate / don't want to take the time to substantiate. Prioritize the reasons your library is good and focus on those. 
It's [here](https://www.reddit.com/wiki/selfpromotion#wiki_here_are_some_guidelines_for_best_practices.3A). ([Site rules](https://www.reddit.com/help/contentpolicy) at the bottom of every page -&gt; Prohibited content that [is spam](https://reddit.zendesk.com/hc/en-us/articles/204536499) -&gt; [Guidelines for selfpromotion](https://www.reddit.com/wiki/selfpromotion).)
IIRC that's a rule of thumb rather than a hard number, but I do agree that it's a gray area. Seems to me like it's not a problem if the content is appreciated, especially since OP seems to only post it every other week or less. 
I already explained. mutableProperties was empty so it skipped over all properties. Anyway, timestamp works if configured before. Regarding string/stream, the bench actually sends byte[] buffer with a length. But most Java JSON libraries don't support that. So i quickly tested whats faster for each library and left it there. There are various codecs which claim to be the fastest codec alive, yet when they are submitted to the upstream, all kind of issues prop up in their code. Therefore, only merged codecs are mostly considered valid. Therefore you should not put the burden on everyone else which wants to validate your codec, but rather submit it to upstream and get it validated once.
I saw unsubstantiated performance, with no link substantiation, and stopped there. Later, I saw that you did have a great benchmarks page. Link to it! &gt; Maybe you'd be better off just saying "Performance very similar to Jackson and Gson" with a link to your more detailed benchmarks.
This thread happens over and over and it frustrates me. Downvote if you think its spam, upvote if you think its useful. Useful goes to the top, spam to the bottom. I use /r/java to share my work and get feedback, then give feedback to others when they post their work. I think a lot of people here are going to have most of their work be self-submissions. If we don't want people to get feedback on their contributions to java on /r/java, then what *do* we want them to do here? Find other people's obscure work and get feedback for this other person on their behalf?
**mutableProperties was empty so it skipped over all properties** I understand but this doesn't help much, for example what is the class that is being deserialized? You could try to isolate it in a single main class which just deserializes to that target class, that way you would assert where the problem lies and would have a test case to submit =) 
But an image looks soooo much better :p I will add a link to the detailed benchmarks next to that graph. Thanks for the suggestion :)
Well, I gave you link to the benchmark. Other libraries work (most of them). Sorry, I don't have time to debug your library, but I am certainly interested in PR if I'm doing something wrong.
Sent you a PM.
xml is a string
XML is a language! 😉
As you have been told in your [previous post](https://redd.it/4dah0a) such questions should be posted in /r/javahelp as is indicated in *many places* on this subreddit. Please, in future, post your questions in **/r/javahelp**. **Post removed:** Java Help - should be in /r/javahelp 
Questions like this should be posted in /r/javahelp as is indicated in many places on this subreddit. **Post removed:** Java help - should be in /r/javahelp
We do it the hard way: we keep four isolated processes that we must keep manually synchronized. Fucking bullshit, so time-consuming.
None of this was troll. I was serious. What comes close to Doctrine in Java. 
[removed]
This is not my blog btw. And I got contacted by a moderator some time back, that mod had no problem with the posts.
Doctrine itself was heavily inspired by Hibernate. From the Doctrine Homepage: &gt; Doctrine has greatly benefited from concepts of the Hibernate ORM and has adapted them to fit the PHP language. So yes, of you are looking for something like Doctrine, Hibernate is a good start. But actually, Hibernate nowadays is just *one* implementation of the more general JPA. There are a few implementations out there that are similar, and each have their strengths (Eclipselink for example).
I don't really get the question? Are you asking about the differences bewteen JPA and Hibernate (Hibernate implements JPA and has some custom extensions), or are you asking how to write your own JPA implementation?
Btw, If I understood the post about FX "shadow" properties methods correctly... its just a Lazy property initialization right ? so there was no need to use a 'new' word for it right ?
Says the project has been retired.
Machine: Dell Laptop (Inspiron 5558 - i5, 8GB RAM, Full HD, build somewhat looks like Mac) OS: Windows 10 (Liked the multi-desktop, not much of a CLI fan(its 2016!) ) Software: Eclipse Mars for Web dev, Android Studio for Android dev Previously: Lenovo laptop with Ubuntu. Linux (w/ Bash) is good but lots of other minor OS issues which were so irritating. Have to go through ton of manual editing for a simple setup. Future: Definitely want to try Macbook. Fear of getting proper(&amp; cheaper) support if anything goes wrong. (Only rich people buys Mac (in India)).
DirectMemory is dead for a while.. Some alternatives: - Chronicle Core https://github.com/OpenHFT/Chronicle-Core - Apache Ignite http://apacheignite.gridgain.org/docs/off-heap-memory - Apache Geode, etc..
There are languages that have full support for intersection and union types: http://ceylon-lang.org/documentation/tour/types/
Java has it too. In `catch` blocks: catch (SQLException | IOException e) { }
I still don't understand why this isn't a compiler error. In my understanding of the problem, the compiler is defaulting to an assumption that the variable is of a type which is a combination of: 1. The class on the LHS of the assignment 2. The return type of the generic method (in this case an interface constraint) If we've written Integer on the LHS, surely it would make sense to check that this type extends the interface, rather than thinking it's a subclass of Integer which does implement the Interface.
Wow, the only thing in the SE 8 exam desc thats actually for SE 8 is &gt; Write a simple Lambda expression that consumes a Lambda Predicate expression Why is this test 250$? It sounds no harder than fizz buzz
Does this help make the case for reified generics? Would this kind of bug be possible with reified generics?
The only good thing I have gained from having certified in SE6, was the course I had to take in order to do de exam. I really learned a lot of how the technology works internally and how I can use it to model stuff. But again, that was from the course. I guess that by certifiying at least once, you can show and prove that you really know the basics of the language.
&gt; one of the requirements was to maintain backwards-compatibility. It may be time to move on. It's causing all sorts of issues trying to add functional bits to Java, performance being one.
I learned something new with `strictfp`
I switched from Eclipse to Intellij around two years ago, and I feel like I can't go back. What's your reason for disliking IntelliJ? 
I'm almost sure it's me but doesn't the insistence on type erasure for compatibility reasons mean that Java generics are basically a moot point If only the JVM supported generics and they where better handled...
It's not an actual license. It's a coupon code that will give you a 100% discount when purchasing the license, so the license will be registered to your name. JetBrains expressed to me that I could in fact do as I wished with the coupon when I won it. 
To be honest, I find the developer experience is very similar between my Macbook Pro and Xubuntu 14.04 on a Lenovo T530. Both have an SSD, reasonably high-spec CPUs, and plenty of RAM, which is necessary for Java work (16 GB in the Mac, 8 GB in the Lenovo). You might want to look at the [System 76](https://system76.com/) laptops built for linux. My software stack is nearly identical across both Mac and Linux: * IntelliJ, I copy settings over * I literally copy and paste my .bashrc between them, almost everything works fine * Sublime Text (for notes, doc editing, and stuff that does not need a full IDE) * Vim for one-off text editing * Meld for diffing/comparison * Docker (via docker-machine on Mac) for when I need specific environments or throwaway systems. * Terminator for terminal emulator on linux, iTerm2 on Mac. Similar features, I think terminator is a bit better. As long as you get a system with solid hardware support, you don't need a Mac, but they do seem to get better battery life. If you plan to use it for gaming, photo editing, or non-professional stuff, pay the Apple tax and go Mac (for commercial software availability). Only things that are annoying on Macs are changes in line separator, and a handful of command line tools that are subtly different in BSD vs. Linux.
Thank you for your opinion! I have never heard of someone switching from Eclipse to IntelliJ and deciding to return to Eclipse. At least, not people who tried to use IntelliJ for at least a week or so. I love IntelliJ. I loved Eclipse, but something about it made me feel uneasy. I'm totally a sucker for UI and Jetbrains products all have Darcula which Eclipse just can't really beat. The smart typing and little shortcuts that can save me between a second or ten seconds of typing are really great and I've started to use templates more recently than I have before, and my work time is reducing quite a bit. I do have many gripes with IntelliJ, though, but I can't see whether or not I'd have them or similar ones with Eclipse because I haven't used it in a few years and I don't really remember. **Firstly**, the licensing system Jetbrains uses has changed twice or thrice, I can't remember, and I dislike how they've done it. I wouldn't be surprised if they moved to a 'monthly subscription = access to all programs' or something of the sort. **Secondly**, it runs sluggishly on my system, when it really shouldn't. I have a fairly good, a bit dated, processor (i5 4670k @ 3.4GHz), and a 1TB hybrid drive, but indexing can take anywhere from a full 2 minutes up to 5 whenever the program updates or has to rebuild the index.. It's really a pain in the ass. I have no idea why it runs so poorly. I've reinstalled multiple times, disabled all plugins i'm not using, etc.. It also lags the hell out any media players while it's indexing, and it's not even using 50% of my CPU at that point, so they're doing something wrong there. **Thirdly**, there is a well-done plugin system but it feels cheaply implemented. If you ever get a chance, you'll see for yourself that it just looks thrown together to add a window for managing/installing/uninstalling plugins, and a very brief description. It's a mess if you're installing plugins for the first time, and there are many dead plugins or plugins without rating that make it more of a waste of time. **Finally**, there are many small bugs which appear and can take weeks or months to fix. They do a great job at fixing most bugs, some that are likely occurring for the 0.1% of its users, but it gets done eventually. A few minor things: The copyright profile makes no sense since it is in the global settings but apparently it's per-project. Why is not in project settings? I have no idea. Things like that bother me, quite a bit, but I haven't really cared enough to submit a ticket and likely wouldn't receive a fix unless more users complained about it. I'll stick with IntelliJ, but I can understand why some don't want to make the switch. I hope Jetbrains continues to improve it, because it really does a great job of giving a central IDE with support (external, mostly) for frameworks, WYSIWYG GUIs, etc. 
Do any OS libraries still support 1.6 or earlier?
You can have a look at [Graylog](https://www.graylog.org/), which provide [an API to query your logs](https://www.graylog.org/blog/8-tips-tricks-2-using-the-graylog-rest-api).
Why not? This is really a union type. The fact that it is syntax sugar for duplicated catch blocks in byte code is a compiler implementation detail...
Certifications will help you get jobs where certifications matter most - much more than qualification and experience. I've met people who managed to pass certification who couldn't tell the difference between an interface and a class. It's just an irrelevant paper to please a certain audience. If you want to please that audience, repeat the process for Java 8 and 9, don't ask questions.
Glad you were able to make up your mind and are happy with the result! &gt; The trackpad is **amazing.** This was exactly my first reaction too, when I got a Mac for work! The hotkeys come naturally, most of the shortcuts are the same, if you replace the Ctrl key with the command key. Except for the terminal... command C/V do copy/paste (no Ctrl+shift C/V), and the ctrl-w/ctrl-c works the same. I will warn you of two subtle command line tool changes that tripped me up: the sort command does not have the --parallel argument anymore, and sed is subtly different: in place editing mostly. Instead of md5sum, use md5. I still feel like an OSS sellout sometimes, because I was thrilled to work for a major Linux company (and currently am paid to do open source), but... the pangs get less every day.
I can't seem to find any reference to a "with" keyword, what am I missing? Can anyone provide a link to an explanation/documentation of "with"? 
http://dexvis.com/doku.php
JavaScript is the simplest way to write things in the web browser. GWT (or things that use GWT like LibGDX) can let you compile from Java to JavaScript if you really have a preference for Java development.
Stupid question ... when I look at a chart like this one ... http://dexvis.com/vis/nvd3_pie1.html What technology is being used to render the animation and interactivity in the chart? I understand it's Java/JavaFX, but am I seeing some kind of Java Applet, or is it rendered on the web page as Javascript or HTML5 or something else? Thanks!
It actually is javascript
Id stick to basic Java for now, read some books, learn the language. Eventually transition into an IDE, GitHub, JUnit, Maven/Gradle and take it from there. I would work on your basic skills first though.
I know this is super old but I'll reply anyway because maybe it'll help you. I know [Elasticsearch](https://github.com/elastic/elasticsearch/issues?q=is%3Aopen+is%3Aissue+label%3Aadoptme+label%3A%22low+hanging+fruit%22) so I suggest it. It looks like [RxJava](https://github.com/ReactiveX/RxJava/issues?q=is%3Aopen+is%3Aissue+label%3A%22PR+welcome%22) and [spring boot](https://github.com/spring-projects/spring-boot/issues?q=is%3Aopen+is%3Aissue+label%3Aideal-for-contribution) are good as well. 
An obvious application would be to specify properties you expect various components to satisfy, in order to enable static analysis, e.g. for the [Java Pathfinder Verify API](http://babelfish.arc.nasa.gov/trac/jpf/wiki/user/api).
What does RC1 stand for?
Release candidate. Meaning it's nearly there and the actual released version shouldn't be much different. People will test it and play with it and if no issues, it can become an official release. 
I hope the ! was ironic.
Think of a proxy like an `extends` of your class. It looks/acts just like your original class, with the caveat that additional actions may be added. This is used for things like Lazy Loading (only pulling everything into memory when it's about to be used) and Dependency Injection (creating a web of proxies and then instantiating them in the proper order)
A must read: http://www.ibm.com/developerworks/java/library/j-jtp02183/index.html
That's a pretty brilliant idea.
Would be nice to have some example code in that blog piece.
As mentioned, stick with pure Java for now before getting too exited about tools. I'd certainly start using IntelliJ IDE- I disagree with learning without an IDE. They're immensely useful and IntelliJ is the best there is (IMHO: not looking to start a flamewar). I'd also begin with Maven fairly early. Although Gradle is almost there in terms of being much better, maven is still more popular and will is a good place to start. 
Not for me specifically, usually an article like that will have a few simple examples. It's just good tech writing to do so. 
Try using long instead of int. Your "crash prevention system" can be extended. Recursion is a good tool to use here. Once you figure that out, try using the dynamic programming approach instead of recursion. Try and figure out why dynamic programming would be a better choice.
I don't know what I'm more surprised by: the nifty visualization tool, or the fact that someone actually *used* JavaFX for something real.
Take a look at code weaving.
Others have summarized this in one sentence, but here is another example. In my hobby project, I want to use a .jar which can only be provided at runtime. After starting the application, the jar is added to the classpath, however the classes/methods/fields are all obfuscated to things like afc, b(int,int), ... Now I'm using reflection to manually search and use the required things (searching is done on init). Which is a lot of bloat-code: https://github.com/CXgamer/MC-ticker/blob/master/src/sim/logic/RWorld.java In v2, I would like to create an annotated interface which I can directly call, and generate code at runtime, to replace the bloat.
Viviscape has an advanced experience in developing Java based enterprise applications and provide advanced technology of Java development services for enterprises and elite organizations. Java is now become the powerful aspects of enterprise technology today.
We use annotations as machine-processable documentation in [jOOQ](http://www.jooq.org). For instance: @Support({ CUBRID, INFORMIX, ORACLE }) SelectConnectByConditionStep&lt;R&gt; connectBy(Condition condition); The above `@Support` annotation indicates that the SQL `CONNECT BY` clause is supported by three databases: CUBRID, Informix, and Oracle. At some point, we'll implement either - An API preprocessor which produces a custom API that guarantees to work on both Oracle and SQL Server, for instance (by removing methods from the API that lack relevant annotation info) - JSR-308 checker implementations (see http://types.cs.washington.edu/checker-framework), which emit errors if for instance a user uses MySQL-specific API in a context where Oracle is required. In general, annotations are a used for: - Documentation - Adding workaround-y constraints on a type system (regrettably, short of better options, like improving the language. In my opinion, the checker framework is dead already before adoption) - Adding aspects / behaviour (such as transactional behaviour), although, here as well, annotations are usually just a workaround. Aspects could also be injected based on method signatures only, which would allow runtime behaviour overriding, rather than the hard-wiring behaviour via annotations. - Adding workaround-y configurations like Spring (or JPA) does. This is only a temporary solution to a problem that was equally well solved with XML, but suddenly, everyone despised XML for no sane reason at all. If you're in for the long term, skip using annotations excessively. They're useful only because Java's evolution was so incredibly slow over the past decade. There are better ways to use advanced language features (which Java might not yet have).
More iconic, really
Sorry, but that blog post is *completely and utterly useless*. The [**Oracle Javadoc Page** for the **Math package**](https://docs.oracle.com/javase/7/docs/api/java/lang/Math.html) provides by far more value since it at least explains also the parameters (e.g. that the angle for the trigonometric functions must be in *radians*, not in *degrees*).
From the author of the popular book *"Why you should design a yellow-on-black website"*
Yes. Sputnik runs on pull-requests, so it does not analyze whole source code. It's intended to be part of a code-review process for changes in your project. Eg. when someone forks your repository and submits you some change it automatically checks that submitted code meets your code-style rules 
Notice that while class level annotations are more or less interfaces in disguise, field and parameter level annotations, like @Autowired, are not so easily translated to annotations. Most things you do in Spring using class level annotations can also be done implementing interfaces. But remember that Spring tries to be unobtrusive. Once your class implements a Spring interface, your code is strongly tied to Spring. With annotations, some people think you have a somewhat softer tie, because...I don't know. XML makes your code 100% spring free, but... it is xml.
Just for the sakes of transparency, do you have an interest in the project?
Changed, see the "edits" branch.
I work at TouK which leads development of Sputnik.
Thanks for getting this right.
&gt; and you need to be prepared to respond to them. OK, so suppose I'm a Dropbox developer and when retrieving one of the files I'm getting this IOException. What should I do now? Send user an error? What should I say in that error? The thing is that such cases usually make my whole program not functional, and there is nothing I can do from my code in order to recover.
Black background with white text, then a gray background with dark dark gray text for code snippets in x-small font size.
Yes. Giving your user an error message because something beyond your control went wrong is exactly what you should do. It's far more useful to the user than simply having your application fail.
Well, I think I'm gonna reply to my post by myself for you to understand my point. I am saying that my program *should* fail. And the load balancer (or something above my program) will see that and print a kind "Service not available" to user - because there's no point it telling him "Your file is not available for some UNKNOWN reason". And why fail? Because my program is useless after that, this is like a database fail which leaves no sense in keeping program alive.
I see your point, it's annoying when Google drives quits almost every day for no reason... (windows 10) ... but that really is a reminder to them to build better software ... also their "unexpected error" dialog is not that informative... but I guess Google doesn't have the money to hire real programmers unfortunately :( [I think they only had enough for Guava - which I like a lot :)] - so i just use their `throw new propagate(exception)` a lot, which is kind of a cop - out but I'm lazy... 
I'm not going to ignore it. If it were RuntimeException, it would either crash my program or will be handled in some general exception handler in case it is a web service. And I would like this much more than propagating that unexpected IOException through all my code to say user "Sorry, something went wrong".
&gt; some UNKNOWN reason But the reason could be known, and even if YOU can't do anything about it you could even direct the user on how to fix it. I.e. is the file simply not there or a you lacking permissions? Did you try to save a file and couldn't because the user exceeded his quota? Is the app configured correctly? Is it maybe sensible to log the error somewhere or maybe post it to a monitoring service so that you can investigate it if it is not an isolated issue. Should your program maybe continue with another file or should it stop completely and try to rollback previous changes. These are all questions that I can't answer without knowing what your program is really supposed to do, but that you should be answering for yourself. If your app is really that simple that it just grabs a file from Dropbox, then yes, maybe you don't need to handle the exception and then feel free to rethrow it as a Runtime exception. Most of the time this is not the case though.
Using this advice I could retry every action in my program a couple of times.
this is so fucking amazing thanks A LOT for this
Seriously? You gave a hypothetical situation: &gt; I'm a Dropbox developer and when retrieving one of the files I'm getting this IOException. Since we are talking about a network connection instead of a local device, it would sound reasonable to attempt to recover from the IOException. I wouldn't do a retry if a different outcome would not be reasonably expected. This is one of those times where you should use your best judgement. 
The usefulness of checked exceptions is that they make the out-of-your-control faults of the API explicit. If you only had unchecked exceptions you could write 100% contract compliant, correct code and it could still fail. It's a defensive programming paradigm.
&gt; Pointer access Doesn't exist in Java. &gt; Unchecked exceptions are usually contract violations / errors in program execution logic That's an assertion error &gt; Out of bounds array access Assertion error Here's another similar view: &gt; Most exceptions such as FileNotFoundException, IOException, and so on are sign that we as developers have missed a corner case. The exceptions are used as away of informing us that we, as developers, have messed up. So if we did not have checked exceptions, the exception would be throw and the main method would print it and we would be done with it (optionally we would catch all exceptions in the main log them if we are a server). &gt; Checked exceptions force me to write catch blocks which are meaningless: more code, harder to read, and higher chance that I will mess up the rethrow logic and eat the exception. Checked exceptions are what make Java an easy language to learn but annoying language for a seasoned developer. They force the code to be ugly, full of nested blocks and error handling, Checked exceptions are still bugs in the system. They might be bugs in a different bit of the system than your little JAR, but they are still bugs in the system. If someone else is changing the file you are reading from so you get an IOException... guess what, that's a bug. Unless your system design is designed to routinely read from files which disappear, you still have a bug. Most exceptions are also terrible for fidelity. Wow, IOException.. yeah that's useful. It tells me jack. Either I'm reduced to parsing the exception message manually (and yes this happens quite a lot) or I have absolutely no idea why reading stopped. Did my permission get revoked? Was it deleted? I have no idea. SQLException is really famous for this. It could be a duplicate key, a table not found, a database not found? How do you tell? You can't. You have literally no idea if it's a permanent or temporarily failure. It could even by an IOException (anyone looked at a SQLException's root cause for this). Checked exceptions are terrible http://googletesting.blogspot.co.uk/2009/09/checked-exceptions-i-love-you-but-you.html PS: If you want another peice of proof. Useful features in a language are copied. It's notable that Scala's API removed them and no other API has added them.
You can mark unchecked exceptions as being thrown to do this. Then you can configure your IDE to mention it. See: https://docs.oracle.com/javase/7/docs/api/java/lang/Integer.html#parseInt(java.lang.String) for an example
&gt; Pointer access &gt; Doesn't exist in Java. &gt; Wat? NullPointerException doesn't exist? &gt;&gt;Most exceptions such as FileNotFoundException, IOException, and so on are sign that we as developers have missed a corner case. As I explained above, no, not really. Even if you write 100% contract compliant code you can get into exceptional behavior because you have no control over all resources or even all parts of your application. &gt;&gt;Checked exceptions force me to write catch blocks which are meaningless: more code, harder to read, and higher chance that I will mess up the rethrow logic and eat the exception. And the alternative is what? You don't catch exceptions and your program crashes. &gt;Wow, IOException.. yeah that's useful. It tells me jack That's why there are more specific subclasses of IOException, like FileNotFoundException, UnsupportedEncodingException, etc. If something throws IOException for a multitude of reasons than that is bad API design, but that doesn't make Checked Exceptions bad per se. &gt;Checked exceptions are still bugs in the system. Who claimed the opposite? The only thing I wrote that is remotely close is that the cause of the bugs are different. The root cause for Checked Exceptions is usually outside of the programmers control whereas for Unchecked Excetptions it isn't. &gt;SQLException is really famous for this. It could be a duplicate key, a table not found, a database not found? How do you tell? You ~~can't~~ can. You call `getErrorCode()` and use your SQL Server vendor's documentation to look it up. PS: It's quiet funny that you seem to argue that the existing Exceptions, such as SQLException, are not granular enough, whereas the linked article by Miško Hevery seems to claim that application layers being forced to catch and rethrow their own exceptions is the cause for lost fidelity. I think the specific example Miško mentions is pretty bogus since a) there is no SQLDuplicateKeyException in the standard java libs, so you would have to rely on the SQLExcetion and getErrorCode(), b) Hibernate increases the fidelity of the SQLException type c) Hibernate does expose the original Exception to you, so if you care about it you can get the error code yourself. There are a couple of other things in the article that rub me the wrong way like claiming that converting everything to Runtime Exceptions gives him close to 100% code coverage is a bit silly. His code didn't become better tested, but rather the uncovered execution paths just became less visible.
 try { java.io.Class.someOperation(); } catch (IOException e) { throw new UncheckedIOException(e); } Added in Java 8
Yes, it's an API standardised wrapper, to acknowledge the fact checked exceptions were a terrible idea.
Yep 
I checked that out but I was really surprised by the fact that the database was downloaded in 2 seconds. I find that surprising for a file that is supposed to contain the ip addresses of every device in the world. I'm probably mistaking so if you could clarify that for me, it would be greatly appreciated.
It's always a bad sign when you open a tab and almost instantly start squinting. Fortunately we live in an age where you can just disable CSS.
See TCP. And of course not everywhere.
Aaaahhh ok, that makes sense. What tutorials do you recommend ? I was going to use this one but if you have anything else, thats cool to : http://www.mkyong.com/java/java-find-location-using-ip-address/
What you consider is irrelevant - that's not what this subreddit is for, [as is explicitly stated in the sidebar](http://imgur.com/mKuNx44).
We're not using Sonar, so I think this issue should not happen with Sputnik. I'll check in detail and let you know. Thanks for the link!
They are also splitting J9 into modular components to make the JIT, GC and other components available for other language implementations.
What if the transfer failed because the server killed it because it is overloaded? Suddenly server load increases even more because every failed transfer immediately triggers several more attempts, exacerbating the problem. The clients cause server load to increase further when this is most problematic. This problem can't just happen with 'obvious' server communication such as a tcp-connection, but also when accessing files, because they might be on a different computer, and you can't always tell just by looking at the path. Do you have a retry mechanism with exponential backoff in all places where an IOException can be thrown? In many cases giving up straight away is not a bad choice.
My guess is not crashing - which requires you to at least catch it. 
But why should the programmer be forced to handle `IOException`, but does the compiler not even blink when presented with `(new Object[0])[-1]`? Either will crash your program, and adding `try { ... } catch (IOException e) {}` just to get your code to compile is actually worse because it swallows the exception that might have helped diagnose the problem. It seems to me the primary reason for `RuntimeException` and its subclasses is because having to insert catch blocks for every array index and pointer dereference got annoying real fast, surely the same argument applies to all other checked exceptions: they're annoying. Informing a user of the exceptions that might be thrown (either with a `throws` clause or in the documentation) can be valuable, but Java forcing it on developers is one of the reasons I really like C#.
We haven't used Java EE in years now (and are handling millions of real time transactions every day). More lightweight, micro-service frameworks like Dropwizard, SparkJava, etc. work just fine in most cases....without all the complexities of EE. And let's not forget Spring Boot, which pretty much competes with Java EE heads-on. So let's not make a big deal out of it. I'd rather Oracle focus its resources on the JVM and the language itself. 
It's also explicitly stated in the sidebar : "don't pollute the discussion with things that should be settled in the vote count." If you can't bring something to the table involving a possible answer to the question than don't say anything. Also downvoting every other comment on the post because you don't think the post belongs here is completely irrelevent. Thats what the general button of the post is for.
At this point, I don't think anyone cares about JEE. Spring/Hibernate pretty much killed it off. JEE just regurgitated those ideas to stay relevant. Core Java is still being moved forward, slowly. But JEE? It wouldn't be a loss to just let it die. 
~~Web~~API-Design for Dummies
Yeah, Spring fans are laughing about this, of course they are. And Spring fans always want to think Spring is used everywhere and Java EE nowhere. But in reality they are used about as much. And without Java EE let's see how much innovation will still come from Spring. Remember last time IE 6 had no competition anymore? MS abandoned the dev team! Citing that browser technology was done, could not be developed any further. IE 6 for crying out loud! 
WLP is partially closed source. IBM provide the RI for JBatch for one thing. "[Up to 40% open source](https://developer.ibm.com/wasdev/websphere-liberty/)" apparently, whatever that means.
I think JEE has done a good job adapting to changes during all the years it has been around. No, JEE does not try to be on the leading/bleeding edge but waits for the best approaches to shake themselves out and then incorporate those things into the JEE technology stack. This has made it a mature choice for those business wanting to ensure longed lived levels of stability in their coding and development investment. Developing with JEE is much easier than it has ever been. Just use what you need and not worry about the rest... but the rest is there when you do need it.
Hardly ever seen a more useless page in regards to Java. Stick to the [Official Oracle Java documentation](http://www.oracle.com/technetwork/java/javase/documentation/index.html) and you have roughly a thousand times more value. If all your tutorial posts have that quality, you might as well close down and delete the blog.
IntelliJ IDEA?
Yes.
I would like to use the same IDE for all of them, my computer doesn't have memory enough to install more than one program.
I prefer Intellij, but I use both Intellij and STS(eclipse) for mostly Scala, Java, and Python.. If you throw Ruby and PHP into the mix and don't want to shell out money, eclipse has update sites for both of those as well. 
JGrasp bruh
&gt;write bug free code. 
"Everything discussed here is subject to change", slide 2.
Well, you can install the python plugin into intellij idea and have everything in one application, however, if your computer is really that limited, I'd advise you to upgrade it. No matter which IDE you use, programming can be tedious when your tools are dragging their feet.
You can use Eclipse for Java and install the PyDev plugin for Python development. Eclipse also supports various plugins for HTML, CSS, and JavaScript. 
IntelliJ is the best. Eclipse is great, but I would suggest keeping separate Eclipses around for projects in different languages, it seems to make things easier, and it's easy to do. Personally I didn't experience a notable productivity bump switching from eclipse to intellij and at this point I don't plan to buy a personal license or lobby for my employer to get me one. 
If possible, put Linux on it with a super light distro and window manager. Something like arch with i3. It would take up hardly any space. Then either use pycharm or even vim with a few python related plug-ins.
&gt; without all the complexities of EE. Which complexities would that be exactly? 
Hopefully things will change. For now you can't deny Oracle is scarily silent on all fronts regarding Java EE. Spec leads have all but completely disappeared and Java EE 8 developments would grounded to a halt if it wasn't for that small handful of EG members that can likely spend an hour or so after their day job on the spec. I keep hoping Oracle will change the situation, but it's been some 6 months now of near total silence...
&gt; Spring/Hibernate pretty much killed it off. Spring would have wished that, but it's not even close. And Hibernate is firmly in the Java EE camp. It's creator Gavin King co-designed JPA (which Hibernate implements) and invented CDI, the modern heart of Java EE.
What do you think about IntelliJ IDEA?
I do agree but want to add some things. While at my workplace we do use eclipse as java ide I found it really horrible when dealing with things not java or maybe xml. We use webstorm for the webpage stuff (html/javascript mostly) which is pretty good, and I heard similar of the other jetbrains editors (dunno about how they price things for small users though). If you just start, a more lightweight solution might be recommendable, I really enjoy vs code for small projects. 
netbeans 8.1 is free (and Free), simple to install and supports all the technologies you listed. i found it easy to use when i started, and still do - especially the key bindings, which allow multiple profiles and include an emacs-inspired profile out-of-the-box 
The best. Worth the money too even if the CE is probably good enough for most Java developers. Feels nice to support a great product.
IntelliJ or Netbeans both have their pros and cons
I always thought eclipse was the best Java IDE. Then I tried IntelliJ and changed my mind in about twenty minutes
&gt;It's not a single comment. It is a single comment. &gt;look for the infoworld one, and Reza Rahman's blog Without more info about the comment by OP, there's no way to know whether he's basing it on Reza's earlier comments. So, no way to know if it's new information or old info being repeated.
Seriously.. A single bullet point, on a single slide of 45 page presentation by a red hat employee. Talk about a misleading title.
Took you that long? You should probably upgrade your RAM
It's mostly comparable to Eclipse but it's not free if you use the Pro version which is needed if you develop on the JavaEE stack. We use both Eclipse and Intellij where I work so it's really personal preference. You can evaluate the Pro version for 30 days before it reverts to the Community version.
CE is still better than Eclipse for me. Really, Eclipse is pretty ok, just not nearly as good.
And, [some of it is already on GitHub](https://github.com/eclipse/omr)!
is it? 2016 grinds to a halt every keypress with 1.5g in js node stuff. what a joy.
I started out working on mainframe and doing Java on the side in my own time, so I was kinda in the same boat you are in now. Originally, I had a lot of mainframe on my resume because it was all that I had worked on on an enterprise level. A lot of companies see that you don't have relevant Java experience and will look the other way. That's what happened to me and was the feedback I got even though I knew what I was doing. If you're confident in your skills like I was, you could always put a spin on your CV that shows you've worked in Java. The mainframe app I was working on was starting to build a distributed web app and there was some Java and Spring involved. There wasn't much built though yet, but I knew a good amount of Spring and Java. I embellished a little on my resume to make it sound like a bigger project. That was good enough to get companies talking to me. If they're smart, they will tech you in an interview. This is your chance to prove that you know Java, Spring, Hibernate, etc. I've known a lot of friends and previous co-workers who have done this as well. I get why companies do it, but it makes it difficult to make a language jump if you don't show that you've worked on it in your current job. Also, be sure to include any projects you've done on the side. It will only sweeten the deal. If you aren't confident, just make sure you build projects using those technologies and understand how they work. If you still aren't confident, then you probably will never be which is normal! I was terrified when I switched jobs going from full time mainframe to full time Java. It wasn't that bad. You just have to do it and put yourself in the situation. Let me know if I can help in any way. Best of luck and happy programming!
Gradle, gradle, gradle, I made you out of goodness.
Agreed. Keep on! Spring + Hibernate is used in many enterprise apps. For my team, when looking for a new/junior developer, having someone understand Spring IoC, Hibernate transactions, and AOP, in depth would be a blessing. Knowing transaction boundaries, propagation types, AOP, and more than "@Autowired" would be welcomed. Keep digging in and continue on your path to more learning.
I see about 60% IntelliJ, 35% Eclipse, 5% Emacs.
I wish some would develop an editable version of http://freemind.sourceforge.net/docs/Serving%20Freemind%20maps%20in%20a%20browser/freemind%20applet.html
Four
Eclipse.
omg will give that a try. thx.
You can pull up the doc on any method with ctrl-Q
I have a couple gripes with IntelliJ. One of them being that thr maven runner was set for the whole project and even after I changed the module version to be Java 8, after I build the jar with maven it would fuck up my settings and change it to Java 6. It ended up slowing me down. I do like the auto complete in dependencies. 
Haha I am using in my OOP class at the moment. It is only marginally better than notepad! to top it all off our computer lab doesn't have up to date versions so if I want to move code from my computer to those computers I have to copy the code out and into a new file or else it won't compile
I am not sure from where did you get the information that Play is dying. Play is a very good full stack framework. If you are really skeptical about it and you are looking for enterprise-y stack, you can use Spring framework (with spring loaded would give you almost like Play's hot reload feature).
[removed]
Last my few bugs was fixed recently so i suppose Play is very actively developed. Who said you that? Version 2.4 and 2.5 brings many improvements it was really big job do you think dying team would do that? In alternatives I really see no competition for Play. Spring is slower in terms of running and development in comparison to play, but has less breaking changes between versions. Play is going forward very fast so in few cases I've stayed in ie 2.3 version and will not upgrade. 
&gt; Javascript [Jay, Javascript](http://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm)
I had the exact opposite. In Intellij I only had to learn ctrl+shift+a and from there I could find everything I wanted to do, Eclipse requires me to Google everything.
It's like the difference between a great $20 burger and a crappy $5 one. "Just name one feature yours has and mine doesn't" doesn't really work, when the difference is in the execution, not the feature list
Why?
I recommend to have a look on Spring. With the advent of Spring Boot and Spring 4, coding has never been easier and faster. If you invest few hours in understanding how to set up some simple projects you will be amazed by its power.
What makes you think Play! is dying? [Play 2.5.1](https://groups.google.com/d/topic/play-framework/5WOpHRwHBW4/discussion) has just been released a week ago, Play 3 features are being discussed, Play is also under the hood in the new [Lagom](https://www.lightbend.com/lagom) framework.. I think it's as alive as ever. You say you get the impression "the more you read on it" - what did you read?
I think this concept is fantastic, and will lead to improved code. However, it is not really an automated code review. It is an automated static analysis only. I wish it was possible to get the benefits of a manual code review from an automated process, but alas, we are not there yet. 
Instead of something like your suggestion: OrderedSet&lt;Book&gt; booksByTitle = new OrderedSet&lt;Book&gt;( new KeyComponentProfile&lt;Book&gt;(Book.class, Title.class)); Just use: Set&lt;Book&gt; books = new TreeSet&lt;&gt;( Comparator.comparing(Book::getAuthor).thenComparing(Book::getTitle)); No need for verbose utilities any longer.
I would suggest Play only if you want to develop in Scala. If you want to develop in Java, I think that there are several better looking alternatives: someone has already suggested Spring, I'm taking a look at Spark and Rapidoid for my next personal project.
Can vouch for dropwizard, great for APIs.
I downloaded both of them, I also worked with eclipse a few time but I was wondering why IntelliJ was the best for all of them. I have to admit I like it, although I still don't know the keywords.
Well, what I meant with that is that it is more obvious how to use. Beginners can figure it out, while IntelliJ is packed with features that might not make sense to them.
Another shred of information, another puzzle piece, call it what you want. If it was only this comment and everything else was going well it wouldn't be that important and could have been dismissed. But with the current state of things, I found it to be newsworthy.
A lot of the time I've seen play mentioned in questions, theirs some people that say the person should switch to Spring. I also asked some of my teachers and most of them seemed to have the same opinion. But if it's not dying I might stay with it for a while longer since I've really enjoyed working with it.
We use Play! in production (Play-Java). We're not on the latest version, but very close to it (2.4.3). It's definitely very active and still very useful. I like Spring a lot, but getting it up and running compared to a Play! app is like walking a bullet over to the target versus just firing the gun, at least in my experience.
JavaEE and Spring are the juggernauts in this area. Everything else is a flavor of the week in comparison. We've all seen things like play, dropwizard, and ratpack come and go before. JavaEE and Spring are guaranteed to be supported for a long time to come. You will find lots of people who know these technologies, which becomes really important when someone other than yourself needs to maintain this. Think about it this way, large enterprise apps that are built on JavaEE are commonly expected to have a lifecycle measured in a decade or more. That's hardly a small feat and something that is really difficult to accomplish with a framework that might not be here next year because everyone moved on to the next shiny trinket.
Ya, from the responses, I guess I misjudged / misinterpreted quite heavily. A couple of teachers at my uni I talked too also told me Play! wasn't relevant anymore but I don't know how experienced they actually are with server applications in the first place. 
Like I said to others, it's mainly because while looking at answers I saw a decent amount of "you should switch to Spring". After that, I asked a couple of Uni profs about it and they told me the same thing more or less but I guess they aren't that informed on the subject. I actually upgraded to 2.5 from 2.3 this week and I've been loving it! Even if I chose Spring for my next project, I'm still staying with play for my personal website since I really do like the framework.
Well ya, that's the reason I asked the question since I know for a fact that that I won't be the one maintaining it in the future. I want to avoid someone else having to learn a dead framework. However, a lot of people seem to think it's not dead / is going to be alive for quite a while so I'll have to weight my options a bit more since I really do like using Play!. I'll probably give Spring another try this week and hope my experience isn't like last time, where everything I did seemed like shooting myself in the foot. 
Ah cool. Like inline or can you drag it around and reposition ? 
It's a panel that you can move around the screen and resize. You can also dock it with in the toolbars (e.g.: bottom run/debug, or side maven/ant/databases). However, you have to Ctrl + Q even if it's pinned to update the documentation display.
Intellij IDEA completely blows everything out of the water (most Jetbrains IDE's do). I used Eclipse and Netbeans for years and the switch to Intellij was hard at first, but I will never EVER regret switching to it.
I'm trying to get IntelliJ Ultimate for our team. I've asked our person in charge of software licensing to get me a couple of copies as proof of concept. We're still using eclipse and RAD here. Ugh.
this seems to equivocate the notion of "innovation" with "bleeding edge".
I enjoy using `akka-http` for APIs.
Play is growing if anything, but it's still a small piece of market share compared to Spring, JEE or even DropWizard. There's a lot of overlap between them all.
Eh?
Thanks for that! I used Intellij idea to generate the project last time but I'll give this a try this time. 
What exactly is the Spring method of writing html/css/javascript for the client? What is the Spring method by which data/objects are translated between client and server?
Spring Boot has massively improved the getting started experience. The downside of that is that it's added a lot more magic (and hidden complexity) to the process, but overall, I think it's probably worth it.
aren't you forced into using sbt and activator in order to use play? yikes.
i think the idea is to make use do most of the work so we really need to figure out what is going wrong and not let the software fix everything for us. But I will chat with my professor for sure! I would love to use community edition on all the computers! just got it and it does all the things that I love that other IDEs do
Modern RIApps tend to use REST+WhateverJS on top of it. For REST services Akka-HTTP (or Spray) is one of the best tools available. For JS pick up one you like the most. Server-side generated pages seems to become obsolete soon. Amazon Lambda will outmatch the rest.
Play + Java is "meh" Play + Scala is "cool" my 2 cents...
It's one of those things where you just have to try. I know, not the answer you're looking for :/
In the examples given, there is no Book#getAuthor method; there is only the Book#getAuthors method, which returns a collection of Author objects. One of the main points of OrderedSet (indeed, the reason for its existence) is that it automatically manages composite-key indexing based upon attributes contained in collections (like multiple Authors for a single Book).
Does the free edition works with Java EE + Spring?
Like all the cool people in this thread. IntelliJ or die! I use Jetbrain IDEs for every language and I haven't been disappointed in the 10 years I have been using their products. 
If you're new Netbeans If you're somewhat mature, IntelliJ IDEA If you're the type that likes to completley tweak your envionrment with plugins Eclipse.
[removed]
An attempt to clarify with a concise example... Book class, with the following attribute get-methods: getAuthors -- returns collection of Author objects (a Book may have multiple authors) getGenres -- returns collection of Genre objects (a Book may be classified in multiple genres) getTitle -- returns a Title object (a Book has only one title) Order these two Books by a Genre|Author|Title composite-key: Book 1: Title: Dictionary of the English Language Genres: Nonfiction; Reference Authors: Merriam, George; Webster, Noah Book 2: Title: A Walk in the Woods Genres: Nonfiction; Travel; Quest Author: Bryson, Bill Following construction and population of an OrderedSet, invocation of the #entrySet method will return the following entries: Key-components (composite-key) Value ========================================== ========= Genre Author Title Book ------ -------- ------ -------- Nonfiction Bryson, Bill A Walk... Book 2 Nonfiction Merriam, George Dictionary... Book 1 Nonfiction Webster, Noah Dictionary... Book 1 Quest Bryson, Bill A Walk... Book 2 Reference Merriam, George Dictionary... Book 1 Reference Webster, Noah Dictionary... Book 1 Travel Bryson, Bill A Walk... Book 2 AFAIK, nothing in the Java Collections Framework, and nothing in the Apache Commons Collections will automatically do this.
Six
You're using Java EE.
I actually just updated from 2.3 to 2.5 when I saw they released a bug fix version. And ya, I agree with Java being a second class citizen, but it hasn't bothered me that much apart from having to learn the basic scala syntax. However, I do see your point and that's one of the reasons I'm going to end up going with Spring for this. It seems like it has both more tools and is more stable at the expense of usability (by that I mean it's harder to get started up with it, but apparently that's pretty much fixed with spring-boot)
I guess I'd call myself a junior developer, and I've spent the last month teaching myself Swing. Is it really on the way out..? Should I stop what I'm doing and look elsewhere? 
Thick clients are mostly on the decline right now (but I'm not sure if that's just a short term trend, but seems to be logical), so from an employability standpoint I can tell you server side Java frameworks are still huge (and even growing). Spring is the big one in my area (Midwestern United States). People do seem to be buying fewer PCs and more depending on mobile, so all the server work applies toward that platform as well. Fwiw 
I still use swing. Once in every while I give javafx a good shake, and every time I come to the conclusion that swing is still a better choice. Netbeans' GUI builder is still my favorite tool for building GUIs, and swing is simple, reliable, and with one function call on startup, looks pretty much like any other native app, whatever platform you're on. FX is supposedly the new shiny, but as you say, it doesn't fit in with other desktop apps, the GUI builder isn't particularly nice to use [and doesn't integrate with my IDE], and frankly I don't find "styled with CSS-ish syntax" to be a compelling deal.
Swing doesn't behave properly on high-DPI displays. This may/will change with Java 9, but at this point, it can't compete with native (or SWT) on newer hardware (Surface Pro, Retina MacBook, etc...)
So the growth in popularity in java lies outside of java ee?
Hey, any way to learn programming is good! If you're teaching yourself you're already doing something right. Programming trends come and go, and even though swing may be old, you're still learning! The cool thing about swing is that it works, and will continue to work. Programming is all about what you can enable people to do, not about how you enable them.
That is true... At least Oracle changed the L&amp;F on Mac OS to comply with the new design of Yosemite/El Capitan.
To answer your question specifically, it could be. But i would first scope and document your requirements clearly before checking out specific tools and technology for an implementation. For instance, i have built real estate sites in the past using nothing more than static sites along with a CMS, and it proved to be more than adequate for the clients needs. Order of consideration of technology: 1) Small number of static pages: Consider static site generators like jekyll 2) Large number of static pages: Consider a CMS 3) Small amount of dynamic functionality needed: Consider PHP and/or Python and/or Ruby on Rails, especially existing solutions written in those languages/frameworks. 4) Requirement to handle high volumes/integrate with existing legacy systems: Consider Java ( esp. frameworks like grails, play etc ) Just my 2 cents.
Swing will most likely not be removed from the JCL for a long time or never until the death of popular use of the JVM, as it's not dependent on native gui components (maybe someday it will be implemented with JavaFX), so if you are wondering about making a simple app for yourself or a small tool, it shouldn't matter if you pick Swing over JavaFX. And Swing is capable, for example, Jetbrain's IDEs are Swing apps.
I just draw everything I want with a Graphics2D and use JPanels, Borders, and Layouts to help organize the UI.
Ahh I guess I was more wondering how a proxy determines which context it's being called in and thus knows which specific instance of the proxied class to pass the function call on to. I know it uses cglib or one of those aop libraries for building the actual proxy classes. For example if I had a controller that called a method on a singleton bean which uses a proxied bean that is scoped to the http request. How does that method on the proxy know which http request scoped object to proxy method calls to? It must be something related to the current executing thread that is handling the request. Either way I'll go read up on cglib some more. 
Btw for couple of years now with Spring you don't have to use XML files at all. 
.....Why not HTML? Why not use spring boot, that launches a browser on startup. Then just have the runnable jar on the desktop, which you double click to start.... I am not a spring advocate, but the same can be done with any kind of embedded JavaEE framework. Build a webapp, and double click to run it. 
I'm a senior Java dev working at a startup, after 18 years working for a global enterprise company. Pm me if you like.
Funny, I have been paid in the last two years to develop .NET and Java desktop applications. It has been a stream of fresh air not having to deal with CSS, HTML, JavaScript compatibility and framework of the day issues. 
Download the JDK (not the JRE). Install it. Then you can use the same commands in the Windows command prompt that your tutorial shows in the Linux terminal.
Have you tried scene builder for GUI building capabilities? It's a dream to work with in my opinion.
You need to download the [Java Development Kit (JDK)](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) for your respective architecture. Also, check out the following free and excellent tutorials: * **University of Helsinki MOOC** [**Object Oriented Programming with Java**](http://mooc.fi/english.html) - text based with exercises that need be completed and submitted before being able to proceed. (Uses Netbeans as IDE) * **Java for Complete Beginners** by John Purcell (probably the best and easiest entry into Java) - video based (Uses Eclipse as IDE) - the three links below lead to the same course hosted on different servers. I would use the Udemy link because it has an active community where you can ask questions and get answers. * [CaveOfProgramming link](http://courses.caveofprogramming.com/course/java-for-complete-beginners/) - John Purcell's site * [Udemy Link](https://www.udemy.com/java-tutorial) * [YouTube Series](https://www.youtube.com/playlist?list=PL9DF6E4B45C36D411) * **Derek Banas'** [**Java Youtube playlist**](https://www.youtube.com/playlist?list=PLE7E8B7F4856C9B19) with the accompanying site [Newthinktank](http://newthinktank.com) which will get you up to speed quickly. Yet, I would still suggest to use an IDE, simply because it assists a lot when writing Java code (syntax highlighting, autocomplete, direct Javadoc access, direct error indication, etc.) Java is a verbose language and thus a text editor, like Sublime (which is excellent, BTW, no doubt about that) is not really the proper tool. An IDE will make your start into Java much easier (especially when you use the IDEs that go along with the tutorials that I've listed above).
&gt; For example Caffeine uses strictly O(1) algorithms, has fixed overhead (for a given a max size), and decorates ConcurrentHashMap which protects against hash collision attacks. cache2k protects against hash collision attacks by using randomized hashing. The count of hash collisions is made available through JMX. There is also a synthetic measure of the hash quality. This and more metrics are consolidated into a single health value, making it possible to monitor and react on it. There is no degrading to a tree, which was introduced in the HashTable in Java 8. This, however, requires all key classes to implement comparable as well, which is quite rare. I see it as a higher priority to detect and react on bad hash code implementations. The own hash table implementation has two major reasons: 1. The object overhead is lower. Per entry there is only one object needed, instead of two (if there is not an additional timer object) 2. The hash table is protecting against key mutations and therefore memory leaks. &gt; Cache2k (from my understanding), uses O(n) and O(lg n) algorithms on write with O(1) on read, retains a large number of ghost entries, and uses a custom hash table. Cache2k uses the Clock-Pro algorithm, but, its augmented for production use to protect against outliers in the access pattern that might trigger a stall on eviction. A quick look on a busy production cache shows that we need about 10 entry scans per eviction on average. However, there is no hard protection to limit the number of entries evaluated for an eviction run at the moment. The results may slightly vary for different access patterns, of course. Stimulating a O(n) runtime for eviction is not happening for real world access patterns, but maybe it could be an attack vector. "O(lg n) vs. O(1)" , well, that is a little like the merge sort vs. quick sort debate. While one algorithm looks better in an academic evaluation, a real implementation can still show different outcomes. As I understand it, Caffeine is recording each cache access. For each access some list mutations are done by the eviction algorithm. To make this fast, the list mutations are done by a separate thread to leverage the CPU cache. In case of an eviction the algorithm instantly knows what entry to evict, since the actual sorting is done on behalf of each access. The cost per access is quite high, there needs to be an object allocation, a queue operation and some list mutations. There are unpredictable latency problems in this solution, because of GC dynamics and thread starvation. Nitsan recently posted: [GC 'Nepotism' And Linked Queues](http://psy-lob-saw.blogspot.de/2016/03/gc-nepotism-and-linked-queues.html) Also, it requires the use of `sun.misc.Unsafe`. IMHO the main benefit of the Caffeine approach, is to be able to come up with a very efficient eviction algorithm, since more information is available derived from each access. The main design principle of cache2k is: "Don't do it, unless really needed". It might happen that the cache is not evicting a single entry, since the memory is sufficient. Why bother with eviction on every access, then? &gt; You might want to write an article describing the design (and therefore trade-offs) in your implementation. Yes, good idea. Will do it a little later this year. Right now, I want to concentrate to polish the rough edges and do more documentation. Caffeine is a good inspiration!
jvisualvm, which is part of the jdk , use swing, jetbrain suite also...
Alright, thank you!!!
HTML / browser tech has come a *long* way. Look here, for examples. https://www.chromeexperiments.com/ All of it is done using HTML and javascript. All of it can be bundled together in a stand alone jar, with some kind of MVC framework on the back end. The kind of things that web apps cant do, like database, access to local resources, and everything you mention, is all mittigated as you run the whole thing locally, including the server....so it can do everything that a 'native' app can do. Just that the rendering of the GUI will be done by a browser. 
Your statement is nothing not reasonable. Java EE is the most widely used framework and used by the vast majority of java web applications. Even Spring applications are dependent on it. It is not going anywhere. Your link is true but I do not get the fear over this.
Generally the Linux/AArch64 port would mean HotSpot meaning that you get a JIT on this system. Zero and JamVM (which is faster than Zero) work on Linux already (they are architecture independent), although they are interpreters. This just means that for AArch64 that Google does not have to write their own JIT. At the minimum for compliance, only the base module might be required.
I've used JavaFX, and it's shit. For anything that doesn't need sub 10ms time, you should just use a a web front end. 
SBT is required (though I wouldn't call that a negative), activator is just a wrapper around SBT with a template plugin preinstalled.
We use the [Netbeans Platform](https://netbeans.org/features/platform/index.html). We then use [JNLP](https://docs.oracle.com/javase/tutorial/deployment/deploymentInDepth/jnlp.html) for deployment. 
Google already announced a while back they were moving to OpenJdk for android. [Here](http://openjdk.java.net/projects/mobile/android.html) are the implementation details.
What gets me is Java FX isn't really "new" anymore. It is the Java GUI framework. Swing is supported for backwards compatibility. Yes, JavaFX isn't as full featured as it should be. Yes, folks can still use Swing.
Desktop and web development are two different things.
You've clearly not used JavaFX as much as others. It has its own issues, but it's not "shit." Swing has issues too. Java just doesn't have the GUI ecosphere to really bring lots of eyes to it. Cross platform was won by web many years ago, but there's still a place for cross platform thick clients -- even when sub 10ms time (whatever that is) is required. Sounds a little like web scale to me.
I feel so archaic... I haven't had the time to learn a new graphics library like OpenGL or LibGDX, so I still use Swing/AWT for game development.
I agree that web products are more popular and users find them easier and more convenient to use but desktop applications are still useful for resource intensive tasks. Also, there are companies, especially in the government sector, who are given limited use of the internet so most of the applications they use are desktop apps.
It's a *local* application. Html doesn't require Internet to run. I have, and you can easily build desktop apps with an html front end. 
I build all my java apps, even desktop ones, with an html5+js front end. It frankly blows JavaFX out of the water. There are literally thousands of front end Javascript projects, JavaFX can't compete with that kind of front end development. 
Me is a Swing developer too. I have no problems with Swing whatever. 
I think it is a good thing that you decided to get your hands dirty to understand a bit better how things work under the hood. You should bear in mind though that frameworks are the result of years and years of man hours and it's a fact that a one-developer custom implementation will never be able to match the quality delivered by a framework, where thousands contribute. Long story short: play and experiment as much as you like on projects that are not too critical or where you don't need to guarantee enterprise-level features. In projects where you have constraints on time and quality your best bet, most of the time, is to go with frameworks.
From what I have seen so far there are a ton of SWT-based applications, especially in the medical field which are based on Eclipse RCP. It is also sad to see that some companies move from Java/Swing to C#/WPF because of the way Swing looks like. (and since Mono is usable now, there are nearly no cross-platform worries).
I suggest that you have a look here: https://spring.io/guides/gs/spring-boot/ Most of the time JS and CSS will be served by the web server as static files, whereas HTML might be a static file as well or it might be dynamically generated by Spring. The data usually is passed using REST services or web sockets. The role of Spring is to make it easy for you, as developer, to transform the data from the serialized format (for example JSON) to the in-memory format (your Java class) and viceversa. A small example. Assume you have a *Greeting* class like this: public class Greeting { private final String content; public Greeting(String content) { this.content = content; } public String getContent() { return content; } } A service like this: @RestController public class GreetingController { @RequestMapping("/greeting") public Greeting greeting(@RequestParam(value="name", defaultValue="World") String name) { return new Greeting("Hello, "+name); } } Once you launch the server, if you invoke this URL: *http://localhost:8080/greeting* you get: {"content":"Hello, World"} If you invoke *http://localhost:8080/greeting?name=Giordano* {"content":"Hello, Giordano"} So, to answer your question, this is one way you could use to pass the data to the client. 
Well basically they just use the rendering engine and write all the components themselves. 
The issue with using webapps that try to mimic thick clients is they usually don't fit the feel of the OS. In many cases that's probably good (slack is a good example), but in many other cases that's highly unfortunate. 
As a student JShell looks like a nice feature for me! 
Can some explain what the module systems benefits are and how it will affect my code? I've seen countless explanations of the module system itself but no explanations of why it's advantageous over using the class path and what changes, if any, will be required in my code. 
As a student, it'll definitely help. It's the #1 reason I use BlueJ as the IDE when teaching [their 'code pad' does more -- also allows double-clicking on objects to bring up a gui-view of its fields, which is neat -- but 90% of the time I'm just demo'ing the result of some expression.] The one thing that is annoying in BlueJ's version of the interpreter is maintaining the distinction between expressions and statements. So typing `2+3` results in `5`, but `2+3;` has no result. The annoying part is if calling a `void` function, the semicolon is required, and for non-`void` expressions using the semicolon is *not* what you want. This confuses beginner students, understandably. So I understand the distinction, but for usability I hope that `2+3;` (showing 5) and calling `main(null)` are both allowed in JShell.
The only gains I see in using a browser as an app platform is the seamless delivery mechanism and the sandboxing. Everything else is done better, more easily by native apps, with much less overhead. Web technology is great to deliver hypermedia, and scripting is fine as long as it's meant to complement browser capabilities for a certain media type (search, playback controls, appearance, etc). But I believe there is a line beyond which native apps just make more sense. Actually, mobile apps are the first step back in the right path.
One benefit is managing dependency collisions. Let's say you depend on libraries A and B. A depends on C 1.5, and B depends on C 2.0, which has an API incompatible with 1.5. If you ship with C 1.5, B breaks, and if you ship with C 2.0, A breaks. Modules will allow you to declare the specific versions A and B depend on, resolving this conflict. Out of the box, I think the new modules architecture is optional, so old code should continue to run as-is. I think this will only break things if you're using OSGI (or something similar), or anything in the `sun.*` packages, which will be hidden under the new system.
It's been a couple years since I used it, so that's cool. What do they use now? Yaml? JSON? IoC annotations only with no need for any bean descriptors?
Not relevant. Google is not moving to the openjdk jvm. They have only imported a subset of the openjdk libraries.
I seem to remember there was a lwjgl demo, have a dig through the back history on the main sites news items - it was a raytracer but I seem to think it was using ray marching....
Agreed in full. What I'm seeing more and more these days is a hybrid: using concepts like partials to send chunks of client code down to the browser when needed.
Desktop applications are on a decline in the software development world. The new gui is a web frontend of your choice by exposing your data as json via http (MVC) for the front-end to consume. It doesn't really have drawbacks and if you use something like bootstrap then the application also works on your phone or tablet. 
So I debugged your library and it doesn't like setters which return type instance, only void.
Dapper on trial? LMAO.
As a full-timer worker bee I think it ought to be useful for debugging real apps as well. I already use "evaluate expression" in IDEs for this sort of thing, so this is a more formal way of running commands by hand to do stuff. 
That can be true, but if you choose a richer framework which is actually more comparable to a desktop UI framework, then your pain can be much reduced to non-existent. In this case, I'm thinking about frameworks like Ext JS and SmartClient. Anyway, most LOB apps don't need web presence, so putting up with an installer is a minimal tradeoff for not having to deal with web server deployments + web soup.
Thymeleaf is great. I've been using it in Spring boot for about 6 months now. For the stuff you want to render client side, just marshall objects into json and return thru a different API. For what it's worth, I am working on moving a product using thymeleaf into production where I work (Fortune 50 company, program has a 99.999% uptime SLA)....but the primary interface is REST/JSON. Work smart, not hard...
I use the groovy console for a Java shell. The only thing it lacks is decent support for Java 8 method references. It handles streams with it's own lambdas well enough, but if I want to prototype out something that'll eventually be pure Java, it's a pain. Looking forward to trying it out, but I'll miss the nice groovy syntax for lists and maps, and having println in the global name space.
Many sites use it in production, most sites that have millions of users started with server side rendering and turned out OK. It's not look everything is gonna fall apart just because you render your views server-side. Unless you have 1 billion users waiting at their desk for you app then don't follow the hype, even then, it's not impossible to scale it. If you plan on having a mobile app later that consumes rest then build it as a service from the get go and write the front end as a Javascript client. All in all, optimize shirt when you need to. Get working...
Theoretically yes, but it's so mind-numbingly difficult that I doubt it will happen.
I think JAX-RS is generally thought of as part of Java EE: http://docs.oracle.com/javaee/6/tutorial/doc/giepu.html ... it's certainly "next generation" Java EE. But I think most developers like the logic that Java EE == sucks, therefore JAX-RS != Java EE.
If you want any advance components you are pretty much going to do that no matter what GUI framework you use. Them being able to do so in Swing just shows that Swing is that capable I'd say.
Kotlin is your best bet. Edit: Oh, and [Haskell is comparable speed-wise](https://benchmarksgame.alioth.debian.org/u64q/haskell.html), but not better.
Oh god I hope they don't start using magic underscores. That brings back nightmares of perl.
&gt; No, an access is recorded into a ring buffer so none of that is true. I wouldn't say so, if I hadn't made the observation. I filed an issue https://github.com/ben-manes/caffeine/issues/59. You also did put it on the roadmap: &gt; Explore a bounded write queue to throttle writes (for synthetic tests) and be GC-friendlier Next you write: &gt; A write is replayed through a linked queue, but one has to take very hostile steps in a lab environment to artificially make it look bad by dedicating all cpu cycles to new insertions. This is true for interactive applications operating at low load factors. Analytical applications regularly operate at 100% load. Those might suffer as well. I don't see an "artificial test" really as an argument: If there is a very simple artificial test, that makes Caffeine crash, how can you guarantee that it never happens in practice? In fact, tests should always shed light on corner cases and extremes to detect problems. Anyways, I am very sure that you will solve this, if it really becomes problematic for a user. However, it is not an easy task to make it as robust as other caches not relying on a separate thread. &gt; Like its predecessors Caffeine doesn't require any background threads (unlike cache2k). cache2k doesn't need any background threads, for normal operation and eviction. If you do specify an expiry, cache2k utilizes one timer thread per cache. For the upcoming 1.0 version I will stick to that. For later I have some plans to optimize this and use a shared thread pool.
Whyyyyy &lt;\/3
Everyone since the first EJB versions agrees that life's too short to write boring, manual CRUD. No one wants to write trivial SQL statements like `SELECT * FROM x WHERE id = ?` or `INSERT INTO y (a, b, c) VALUES (?, ?, ?)` millions of times. There are already hundreds of APIs that make this boring work much easier. Either sophisticated ORMs (e.g. [Hibernate](http://www.hibernate.org)), or simple ActiveRecord APIs (e.g. [jOOQ](http://www.jooq.org)). Let's not forget that SQL's strength lies in allowing users to express (very) complex reports in relatively easy ways. Take, for instance, this simple query running a report of cumulative numbers of H2, HSQLDB, Derby questions per date on the Stack Exchange data explorer: SELECT d, SUM(h2) OVER (ORDER BY d) AS h2, SUM(hsqldb) OVER (ORDER BY d) AS hsqldb, SUM(derby) OVER (ORDER BY d) AS derby FROM ( SELECT CAST(CreationDate AS DATE) AS d, COUNT(CASE WHEN Tags LIKE '%&lt;h2&gt;%' THEN 1 END) AS h2, COUNT(CASE WHEN Tags LIKE '%&lt;hsqldb&gt;%' THEN 1 END) AS hsqldb, COUNT(CASE WHEN Tags LIKE '%&lt;derby&gt;%' THEN 1 END) AS derby FROM Posts GROUP BY CAST(CreationDate AS DATE) ) AS DailyPosts ORDER BY d ASC [The results can be plotted easily as a graph](http://i.imgur.com/4vy3xZ2.png). Source here: http://data.stackexchange.com/stackoverflow/query/469282/java-in-memory-database-popularity-by-time#graph I dare you do something as easy as the above with anything other than SQL, or any API that encourages the use of SQL. Vendors... Instead of treating SQL as something smelly, do appreciate its value for what it was designed for.
http://developer4life.blogspot.ie/2012/03/6-things-they-didnt-teach-me-at-academy.html
One really neat thing about Thymeleaf is that it is pure HTML with a few "th" attributes thrown in. Meaning you can prototype your HTML with in the browser from the filesystem, without the app server. While that is cool, the coolest part is a web designer can easily work with the Thymeleaf template. I've had a web designer make massive changes to the templates I gave him, without needing any special instructions from me. In fact, whenever he did something to break the template, Thymeleaf produced very readable error output that he was able to figure out on his own how to make the template work again.
I'd go the way of using spring purely for making the restful API's. Then it means all changes for front end logic/presentation can be done in Angular. You will manage all the data in Java. 
JavaFX, the library is pretty extensive, can be extended easily, easy to layout things exactly like you want, and with css its pretty easy to style things so they look nice. On a side note, i think if i had to do a desktop app, i would have a look at Electron, there is alot of momentum behind that project. 
I don't think so ... it's a very simple CRUD ... 
I had SpringBoot projects with 100+ controllers and 50 or so entities. Startup times were in the tens of seconds. So, I can't say what's not working for you, or maybe they had introduced bugs in the meantime, but it should and usually it does move much much faster.
You may want to profile your startup because you're almost certainly doing something very wrong. Startup for even a really heavy setup never takes me more than 30s. A vanilla install is 5-10s. For it to take 2+ minutes it must be running a load of processes at start time. Are you using any PostConstruct annotations to run batch jobs at startup? Another possibility is that you have some external dependency (DB, distributed cache, something) that isn't responding and the initializer is waiting a long time for a response.
You're definitely doing something weird. Some of our production Spring Boot microservices are over 20-30k lines of code (dozens of JPA entities), and tend to start up in well under 10 seconds. Try cloning some of the sample Spring Boot projects that they have on GitHub. Those should start up near-instantaneously, so if they're slow for you then the problem is with your machine. If they start up quick, then the issue is with your project. 
All I got now: spring security, thymeleaf, jdbc, data-jpa, web, session, devtools as dependency.
Will try that
If you're using a remote database, can you switch to in-memory one to see if that speeds it up?
&gt; the ability of using thymeleaf for server-side templates, which simply render angular templates, Would you mind expanding on this a bit? I'm working in an old codebase which uses JSPs, but we're starting to modernize. Both Thymeleaf and Angular have been put on the table as technologies to adopt -- but not in combination. I'm interested to hear how you are using them together. 
I switched from a local postgresql to a H2 still the same.
Annotations and Java code. No shitty DSL. You should look again at Spring (Spring Boot to be more precise). It's one of major ehnancements in whole Java ecosystem. 
When the JavaBeans specification came out, people assumed that "oh, this is how you are supposed to create POJOs". With getters and setters. This is a misunderstanding. The purpose of JavaBeans was to provide a standard for the creation of software components that could be "glued together". Unfortunately, getters/setters for every class are now so entrenched that it's hard to find developers who have even been exposed to immutable objects in Java. I'm working in what's typically considered a "legacy" codebase; both old and largely without unit tests. One bit of code I've seen looks similar to this: public void setupForm(HttpServletRequest request, BaseForm form) { if (form == null) { form = createForm(); // (This is an abstract method which subclasses override to construct the appropriate form) } // several lines of code that calls a bunch of setters in the form request.getSession().setAttribute("form", form); } This method is in a class hierarchy of controllers; meanwhile there is a (roughly parallel) class hierarchy of forms. These hierarchies exhibit the common anti-pattern of reuse-via-inheritance and as a result the code is so horribly coupled and inter-dependent that it's very difficult to understand and modify; refactoring is a nightmare. Setters aren't always evil -- but they are always a smell. 
Thymeleaf is used to create AngularJS templates. We still use a mixof XML config, so if you're a Java config purist, look away: *Thymeleaf Spring Configuration* &lt;bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver" p:templateEngine-ref="templateEngine" p:characterEncoding="UTF-8" p:order="2"/&gt; &lt;bean id="templateResolver" class="org.thymeleaf.templateresolver.ServletContextTemplateResolver" p:prefix="/server/template/" p:suffix=".html" p:templateMode="LEGACYHTML5" p:characterEncoding="UTF-8" p:cacheable="false" /&gt; We then use Spring MVC to serve up the templates. Here is a simple example controller: @Controller public class HomeController { @RequestMapping(value = "/templates/home", method = RequestMethod.GET) public String home() { return "views/home"; } } This would load a template within /server/template/views/home.html, which is a Thymeleaf template, that simple renders an AngularJS template. On the AngularJS side (v1.x), we use ui-router, which routes to the specified URL and hits the server to pull the template. AngularJS then does its thing and populates the template as it would a normal client-side template. The Thymeleaf template structure is broken down into a hierarchical pattern / convention. Different areas of the application fall under the term of modules. Here is an example of the directory structure convention: * template * elements * forms * fragments * modules * &lt;module name&gt; * elements * forms * fragments * modules * views * views This allows us to define server-side templets that can be reused across the site, but keep things organized. So I can create an angularDropdown.html template, that defines what a dropdown element would look like as an AngularJS template, defining, for example maybe the style and directive to use. Here is an example template: &lt;div data-th-fragment="dropdown(model, callback, options)" data-th-remove="tag"&gt; &lt;div data-th-class="'ui ' + ${#strings.isEmpty(cssClasses) ? '' : cssClasses} + ' dropdown'" data-th-attr="name=${#strings.isEmpty(name) ? '' : name}, data-ng-class='{disabled: ' + ${#bools.isTrue(disabled)} + '}'" data-dropdown-toggle&gt; &lt;div class="text"&gt; {{ [[${model}]] }} &lt;/div&gt; &lt;i class="dropdown icon"&gt;&lt;/i&gt; &lt;div class="menu"&gt; &lt;div class="item" data-th-attr="data-ng-repeat='option in ' + ${options} + ' track by $index', data-update-dropdown-model=${model}, data-value='{{option}}', data-callback=${callback}"&gt; {{option}} &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Reuse to this level can get messy, which is why we stick to the hierarchical layout to help things get placed in locations where we would expect them to be. There is an up front cost to all of this, but we can easily change the behavior of the site with a very high level of control, without losing granularity. It all depends on the scope of your application. Our is large and a standard SPA structure just wouldn't cut it. So small micro sites, this would certainly be overkill. 
Thymeleaf: &lt;tr th:each="prod,iterStat : ${prods}" th:class="${iterStat.odd}? 'odd'"&gt; &lt;td th:text="${prod.name}"&gt;Onions&lt;/td&gt; &lt;td th:text="${prod.price}"&gt;2.41&lt;/td&gt; &lt;td th:text="${prod.inStock}? #{true} : #{false}"&gt;yes&lt;/td&gt; &lt;/tr&gt; JSP: &lt;c:forEach var="prod" items="${prods}" varStatus="loop"&gt; &lt;tr class="${varStatus.index%2==1?'odd':''}"&gt; &lt;td&gt;${prod.onions}&lt;/td&gt; &lt;td&gt;${prod.price}&lt;/td&gt; &lt;td&gt;${prod.inStock?'yes':'no'}&lt;/td&gt; &lt;/tr&gt; &lt;/c:forEach&gt; What looks easier to you???? I don't care that Thymeleaf is pure HTML..... its more difficult for a human to understand than JSP. Thymeleaf is for development shops, where the HTML designer doesn't want to learn JSP, and so the JSP person has to forget JSP, and put up with complicated and obscure crap. 
I do, I do!!! I use Angular for essentially 99% of the application, but Thymeleaf for setting up system variables, so that I can have the same build in a Spring Boot Docker instance, and have my docker-compose pass in the dev, QA, live box and other specific environment variables giving me the same build on DEV, test, QA and live! This gives me the ability for fast clustering on Live with exactly the same build on dev, and better testing of versions because I'm not using a different build with grunt deploying to different environments. Really the best way to go. Oh, and use Spring with Jackson for server side, and Angular client side, only use Thymeleaf for passing to the client things that only the server would know, such as the API URL. Edit: I only use Thymeleaf because it is bundled in Spring Boot, otherwise any other Java templating tool would have been used to pass in environment variables, but I use those particular buzzwords together.
Angular is not shite, I have seen some good enterprise apps written with it. Building 'a' app is not enough experience really. We made a number of responsive complex apps with it, that other massive global corporations loved. 
I only gave this a quick read, but it looks like Google would have to rip up large portions of its code, write a runtime for the compiled language Swift, and they would still have a proprietary language they don't control at the end of it all ( Apple vs Oracle ). Not a lot of motivation there for them to change. If they are going to make those huge financial sacrifices they would be better off writing their own language so it will not be Apple who sues them next time, or whoever owns the language they move to. 
If you follow the sources to the original The Next Web article it has some hilariously inaccurate statements which make no sense. There was a post on /r/programming which did a good job tearing it to shreds.
I had a team of 20+ that could do some good stuff with it, and didn't moan any more than normal. We looked at a number of frameworks, and decided that angular was the best for our needs.
I chose angular because I thought it was best for my needs too, but I really regret it now. It is quite easy at first, but it gets very ugly when you add things like server-side form validation, translations, large amounts of code reuse, etc... When your apps consist of many views that don't have much in common, Angular *may* be a *decent* choice. However, when you have about twenty similar forms to manage, Angular starts getting in the way and React becomes a clear winner.
You don't need the "odd"-class, you can select every other row with pure CSS as well (tr:nth-child(2n+1)).
Ha ya. The revised headline "Google eyes being kicked in the crotch with steel tipped hiking boot" 
I'd argue that Android Java isn't really Java, sure its a language with Java syntax but the core libraries and whole environment and the RTE are totally different...
Don't do it Google! Go kotlin!
Swift is open source and not proprietary at all. It was open sourced awhile ago: https://github.com/apple/swift/blob/master/LICENSE.txt
*"allegedly"* - Now that is some premium journalism right there!
If you fully embrace akka + java8 play is quite nice to work with but if you dont have use cases for large distributed services and message based architecture then its a super awkward fit I agree.
lol why would we go back to the hellhole that is C++? Might as well just force us to write all of our apps in Assembly.
why would having Android depend on Go ruin it?
It'd be the other way around, bloating Go with Android stuff would ruin Go. Though I suppose if it was just a separate library then it wouldn't be a problem. I believe Go is designed to solve a different kind of problem though, and might not be suitable for the task. In any case, Google have proven that they can make a successful language that's enjoyable to work with, and that has great tools. It'd be nice to see them pull that off again and make something amazing for Android.
The mod removed the description, but yes the top comment solved the problem.
I've got no dog in this fight, but would you mind elaborating? 
Swift has a larger ecosystem than Dart, and mobile developers already use it. If there was a framework that could make code portable from iOS to Android (think something like Xamarin) they could attract iOS developers. Swift is also open-source now and can run on the desktop on OS X, most flavours of Linux, and now thanks to the new [Ubuntu subsystem for Windows 10](https://www.reddit.com/r/swift/comments/4e57hy/swift_works_under_windows_now_thanks_to_the_new/), it runs on Windows 10 (previous versions of Windows are out of luck), so it's by no means limited to mobile devs. Also there's already a Dart stack in development for portable iOS and Android apps called [Flutter](https://flutter.io/). It's still very early stages and not at all ready for live apps though.
Resources and priority and, in part, because I quit working for Oracle :-p. I am the author of the JEP and was working on this JSON parser before I left. It was delayed because a much better API will be possible in Java 10 with value types though it is my belief that the Java community will have settled on a small number of JSON parsers by that point and won't need another. TLDR; There are lots of good 3rd-party JSON parsers already available.
They sure do help though.
no, it is the apache license, not the gpl
RestTemplate is about a billion times easier, and uses HttpClient in the background... 
Tomcat [comes with a bunch of examples](https://github.com/apache/tomcat/tree/trunk/webapps/examples).
Or [Golang](https://godoc.org/golang.org/x/mobile/cmd/gomobile) which they've already started with mobile support.
Awesome!
Yes. Almost a year before on the nose.
That seems an overly broad statement. It can be forked and redistributed if one of the licenses are adhered to. Since this discussion seems to be in the context of the open source license, I don't see what grounds google could have been sued under had they continued to use the open source gpl license instead of the apache license that they likely preferred for commercial reasons.
But wouldn't that same concern theoretically keep Java off of Android too? But.. there it is.
2 people can speak the same language. Completely different engines running the same thing. 
Actually you're pretty much completely wrong. All that defines a programming language is the syntax. It is a language. It's tools, libraries, and runtime are all things either built with that language or another, but the language consists solely of syntax and semantics. 
the Java GC is run on a daemon thread according to [this article that I found](http://www.javaperspective.com/daemon-threads.html). I had to look it up. it's possible that ART runs a different paradigm. I'm also not sure that Go is world stopping or if I'm misunderstanding what that means. 
Get rid of java
Mobile support is done by the Go team. Android team already stated multiple times that Java is the only language that matters. The NDK is there for legacy code and keeping game developers happy, nothing more. And it is pretty bad supported anyway.
Dart failed and they are just pivoting with zero support from the Android team. I doubt it will pick any traction.
All 4 are fantastic books in their own area, but i would not really classify them as intermediate/advanced esp with respect to java. I would classify them as required/mandatory reading for any intermediate programmer who's been working with code for a while - across languages. Just my 2 cents.
JavaFX + ControlsFX
Another question... What are your experiences with Thymeleaf vs. other server side templating technologies (JSP, Freemarker, Velocity etc.)?
May be https://github.com/benas/todolist-mvc ?
+1 Java is heavyweight and bloated.
With Java EE as explained in the article, applications are often very lightweight. Now with JavaScript frameworks the opposite is true. Yes, you can write lightweight apps with them in theory, but a simple hello world often results in 100mb or more of dependencies.
Only skimmed the article due to time and pretty much all points are valid; however, I wouldn't call Java heavyweight due to the binary sizes or the startup time of the container. I would simply call it heavyweight due to the runtime requirements of the JVM. Semantics, I guess. If I compare a Java based (web)app with something written in, let's say, Go, the Java app looks rather heavyweight. All in all its a rather pointless label. As the linked post says it comes down to developer productivity. Wether your app uses 300mb of resident memory or 30 is in most cases of no consequence.
But what else would you call a "bloated", "heavyweight", "monolithic", "arcane" "legacy" application? (I.e. any application written by those imbeciles before *"I"* joined the team)?
Article is good
"Ok"
This is mostly a development enviroment problem. Sun/Oracle/Java didn't really do anything to solve environment issues (yes there is Netbeans which I hear is decent now, but meh); you need to learn and use an amalgam of tools to work with Java in an enterprise environment. That's why I loved C# and Visual Studio, where most stuff was built in pretty well.
Modern JBoss versions contain a module system (can't speak for other application servers, but I assume they do too) If you add the Spring artifacts you use as a module then you get all the advantages mentioned in the article while still being able to use Spring if you so choose (on top of that you can add anything else you feel you need as a module as well, allowing you to strip the generated war even further down than suggested in the article). See [here](https://www.jboss.org/quickstarts/eap/log4j/index.html) for some documentation.
Can we please point people looking for programming help to /r/javahelp? Thanks!
PM me if you like. 
That barely commented 4,000 line shell script that builds your entire project, sends the JARs to off-site servers, reboots the off-site servers, then checks if they were started successfully.
Finally! This was my biggest gripe against the android platform.
Spring was written as a lightweight alternative to JEE4, which is horrendous for a developer to work with, and is the reason why Java had such a reputation for AbstractFactoryBuilderFactoryImpl classes and XML. Much like LDAP is lightweight compared to X.500, but is in no way "light". Hibernate was a response to things like EJB2 and JDO. JavaEE 7 is lighter and easier to use as a result of things like Spring and Hibernate, because earlier versions were so terrible. I feel the author is conveniently forgetting history when they complain about people talking about heavyweight, because JavaEE was the original heavyweight framework. Thankfully it's not any more.
https://docs.oracle.com/javase/8/docs/technotes/guides/concurrency/changes8.html https://docs.oracle.com/javase/7/docs/technotes/guides/concurrency/changes7.html
Yes, Java EE 4 was a horrible, heavyweight framework, but it was released in 2003. That is 13 YEARS ago! Most of these issues were solved or at least improved in Java EE 5, which was released in 2006. It doesn't make any sense to complain about something that was bad 13 years ago and massively improved 10 years ago.
Thread spool was java 7 I think? There is also completable Futures. And Reactive Streams. Its not like Doug Lea is just being a bum, he definitely is working on things, and adding them to the JVM. You can look at the JEPs, its all listed there. There is more planned for Java 9, look at [JEP 266](http://openjdk.java.net/jeps/266). Then, while not explicitly concurrency, Lambdas are absolutely great for concurrency, and make your life easier. Futures + lambdas is a god send.
CDI (Weld) is already part of Java EE, don't need to choose it explicitly. It has no or very little xml config. CDI is a big proponent of the no-XML approach. Other platforms also need build systems, databases (with drivers) and tests. That has nothing to do specifically with Java.
Spring kinda tried to claim the title lightweight without explaining what it technically meant. At a conference I once asked Rod, and the explanation boiled down to: Spring is lightweight. Lightweight is Spring. 😖 Vividly remember how enraged some people were when Java EE had lighter weight alternatives to Spring (in terms of memory usage, startup time and MB on disk, as well as subjectively API simplicity). The complaint was that Java EE hijacked the term! 😮 (See old Spring vs Java EE threads at TSS) Througout the years Spring has executed a very successful campaign to imprint in people's minds that Java EE is heavyweight and EJB is bad, even when that had long not been true anymore.
Indeed, and Spring has provided such build before with Tc Server. The other way around, you can put all individual Javs EE jars in a war. Bottom line; Spring and Java EE aren't that different and both can be used as installed modules on the server or in the .war. 
It's factually the same language. As for your separate point about the strength of a runtime's ecosystem, you can use the vast majority of the same libraries on Android as you can on the Oracle JVM. You can use both intellij and eclipse. You can use maven and grade.
I was thinking more in the way of comparing Swift, Go, Dart and Java. That is, the main difference between developing in Swift and Java is the ecosystem of the languages, not so much the syntax itself. 
Excellent! Ive been waiting for good CDI support in Vert.x.
Adding &lt;dependency&gt; &lt;groupId&gt;com.google.guava&lt;/groupId&gt; &lt;artifactId&gt;guava&lt;/artifactId&gt; &lt;version&gt;19.0&lt;/version&gt; &lt;/dependency&gt; To your &lt;dependencies&gt; block in your pom.xml file is pretty simple to me. If you want even simpler then use Gradle which would require the following added to your build.gradle file: dependencies { compile 'com.google.guava:guava:19.0' }
this seems easy, it didn't seem documented to me - maybe I was blind :(
gamlielov - You have no idea how useful to me the information in that article would have been had I read it ten years ago. Thanks for posting it!
In one word, liberating. However it was (and still is) a risk.. I was at my previous company for 18 years.. So it was a real leap of faith (+ as good payrise to offset the risk).. But 100% worth it.. 
Amazon gift card. You're professor will very likely already own any noteworthy book you can come up with.
What helped me start with Maven was good IDE. Let it create some groundworks for you, them mess with it until you understand how each part of it work.
Certainly not "Mastering JavaFX 8 Controls"! It's just a list of controls with very basic descriptions, most of which are worse and less detailed than the normal Javadoc.
The getting started docs for Maven and gradle are a little rough.
Ah, that's the very type of book I'm trying to avoid! Thanks for the warning.
[Ivy](http://ant.apache.org/ivy/) is a subproject of Ant that does only dependency management. More akin to something like npm or pip. Maven is a much more comprehensive build management system. It can be a beast, but if you start from an archetype and just make tweaks, it's extremely useful. You might be inclined to think you can get away with something simpler, but very frequently you'll outgrow it and find yourself doing a homemade version of Maven once your project gets far enough along. 
I'm not really that interested in desktop development, only web. 
Lightweight, they cut all of the comments out!
I don't hate the Android SDK; it all essentially revolves around the Android lifecycle, once you get a grasp of that it becomes easier. But any large SDK like Android is going to be a bit of a pain on top of your typical Java.
you've hit the nail on the head. maven (or the creator sonatype) tries to do: * artifact hosting * binary hosting * dependency management * build system and the end result is it's bad at almost everything, or at least is uselessly verbose 
which parser was the JEP api closest to ?
Has anyone used this? Is it worth it or should I just learn at my own pace?
Wow. Only one comment spreading FUD about Java as if it were still version 1.2
Mostly like none of the current parsers. The API was more like STAX or expat XML parsers. It was explicitly intended for streaming applications and stream transformations. It was also a layered API so it could be subsetted for compact profiles which might not include any parsing beyond token stream. The "top" layer API would have been most like Jackson jr. (which is what I am using in my current work).
What about Play? I'm trying to select between the two.
&gt; Embedded systems suck, no matter the language. Weeeell ... I wouldn't say iOS development sucks at all. The IDE has its quirks, but besides that, I would say it's pretty cool.
What do you mean no it is not? It most definitely is winning in popularity in micro services 
Lol what? Async service is there since long time ago: @Service public class FacebookLookupService { RestTemplate restTemplate = new RestTemplate(); @Async public Future&lt;Page&gt; findPage(String page) throws InterruptedException { System.out.println("Looking up " + page); Page results = restTemplate.getForObject( "http://graph.facebook.com/DatabaseConfiguration.java" + page, Page.class); Thread.sleep(1000L); return new AsyncResult&lt;Page&gt;(results); } } Or you mean servlet async? @RequestMapping(method=RequestMethod.POST) public Callable&lt;String&gt; processUpload(final MultipartFile file) { // returning callable will make it async return new Callable&lt;String&gt;() { public Object call() throws Exception { // ... return "someView"; } }; } 
I'm guessing that the first question was asking what the integer division of 45/4 would be. In this case it would be, "11", because integers are always whole numbers and do not care about remainders/fractions. The second question uses the modulus operator '%'. Which only cares about the remainder of the division. In your example 25/1 has no remainder and therefore 25%1 == 0. For a second example 25%2 == 1 because 2*12==24 with 1 left over.
The reason why 45 / 4 = 11 is because they were being divided as integers and when you divided integers Java will round down to the nearest whole number. 25 % 1 is going into modulus division. In modulus division your answer is the remainder from dividing the two numbers. 25 / 1 = 25 therefore there is no remainder, meaning 25 % 1 = 0. 
the root cause is (appears to be) a failure to separate concerns, but practically speaking, some examples are: * before you can do anything you have to look up the library name and version. compare this to npm or apt-get, which provide simple search and install commands * to install a new library during development, you either change your xml file or issue some cryptic command * to get the corresponding source, you need to both modify the xml file and issue a cryptic command * can't install from github or other sources in an easy way (if at all) * because the pom.xml has both the dependencies and the build controls, you can't always count on the dependencies being separated from the build (this has only been a significant problem for me once - the build system transformed one of the dependencies before using it, and i needed to recreate the transformed source for debugging. this sort of thing could be done with any tool, but having the deps and build together somewhat encourages it) * lock-in on artifact hosting * requires libraries to provide a pom.xml, even if they don't have any dependencies * IDEs have a bad habit of automatically assuming that a pom.xml file means i want the project managed as a maven project (trust me, i don't) - i assume that this is an IDE problem, but again the all-in-one design encourages this behavior * installing just a single dependency triggers downloading hundreds of packages (i'm often working on a low bandwidth connection) maven's viral and infects everything it touches, instead of augmenting existing tools and making them better 
&gt; Any thoughts? You've been skipping class and the first couple chapters of the text? I'm serious. These are basic questions in how integer maths works in computer/programming. If your first project is going well, then you aren't having some odd mental block with comprehending programming, you're just not paying attention to the all of what is being presented to you. Not thinking 'computer math' or forgetting '%' is the modulo operator would be one thing, but even afterwards you're confused. There is important and basic parts of the content of the course you've completely missed somehow, and if you don't figure out how and correct it, you'll run into major trouble by the end of the course.
No not at all we are like on chapter two.... last thing we covered was If and then statement.
You must have been a wonderful teacher.
Hey I am currently a hopeless computer science major. My schools program is terrible and I am trapped in a Java coding class that uses BlueJ to code. I am sure the stuff is simple for those who actually know how to do it, but I am just not taught a thing. That saying I WILL PAY ANYONE…. ANYTHING TO HELP ME OUT WITH THESE HOMEWORKS.. please message me… i am desperate 
In this context, I think by desktop he means web/back end development, not desktop applications.
Currently learning JavaFX myself, thanks for posting this! 
I know we engineers are introverts..but you may want to develop a relationship with your TA, teacher, or fellow peers, rather than asking reddit. It will help you much better in the long run. Second, if your project is going well I assume you know how to write a hello world project. You could experiment, and put those quiz questions in a program and see the result, then understand from there. Trial and error and experimentation will take you far, as well. Third...test taking skills. This wasn't an algebra test. 11.25 as an answer from 45/4 would have been too obvious. 
OH: "Man, I'm just not getting this maven stuff. I went to the maven website and read the docs for an hour and I still don't understand the first thing about it." "Well THERE'S your problem."
Try OpenShift. Doesn't have that limit.
There is a free MySQL option, but it still requires you to confirm your account via credit card.
Thanks to all those providing feedback on OrderedSet. Based on your comments I've made revisions to the introductory paragraphs in both the README text and the Javadocs (see the links in my original posting to go there), with an eye toward explaining more effectively up front what differentiates an OrderedSet from the standard ordering/sorting options available.
Still the best Java conference (IMHO)
The Android API is one of the worst-designed out there. If Google adopts Java 8, they should really re-think their API. It stinks.
Can you offer some support for this claim? I've found it to be pretty flexible and powerful over the years. The amount of things I can do easily with the newish design support libraries alone is mind boggling to me. 
Thanks for your question. Based on your query (and others like it on other forums), I've revised the opening statements in the README and Javadocs, to try to clarify the focus and usage of OrderedSet. Please check it out if you get a chance! Thanks very much!
very nice article on GC. A must read!
Yeah I agree with Gradle being far better I just wanted to understand the complaints of Maven to see if any of its pitfalls also applied to Gradle
Given the Java EE situation at the moment, I'm really curious to see how many Java EE talks there will be this year. Normally Java EE news and talks are quite an important aspect of JavaOne.
dyno goes sleep in two reasons a) you freee time ending b) you haven't request from internet i do somthink like this in linux bash watch -n 10 "wget youherokuapp.com" 
Openshift doesn't have limit but less usefull
I'm thinking about using JavaFX myself - Do you have any sources where I can read more about the java/chromium idea?
Implemented the right way (no syntactic sugar) they won't require getters or setters, so, less methods. 
You're being downvoted because you're asking for homework help, which is frowned on. Instead, why not try submitting specific questions you have to /r/learnprogramming or /r/javahelp ?
I've worked with Java since Java 1 - pushing or past 20 years now - and recently started developing in the Android SDK in my spare time. I am boggled by how shit it is.
So you would have the equivalent of a public field but still have a method for it in the vtable?
The problem with these questions is that they are specific to a single JVM. There is no requirement in the specification to have young, old, and permanent generations. You do not need any generations at all. The same goes for which algorithm is used and when. The only real part of this are the potential algorithms which may be used to act as a garbage collector and there will be many. From the JVM specification: &gt; For example, the memory layout of run-time data areas, the garbage-collection algorithm used, and any internal optimization of the Java Virtual Machine instructions (for example, translating them into machine code) are left to the discretion of the implementor. &gt; The Java Virtual Machine assumes no particular type of automatic storage management system, and the storage management technique may be chosen according to the implementor's system requirements. The heap may be of a fixed size or may be expanded as required by the computation and may be contracted if a larger heap becomes unnecessary. The memory for the heap does not need to be contiguous. &gt; Although the method area is logically part of the heap, simple implementations may choose not to either garbage collect or compact it. This version of the Java Virtual Machine specification does not mandate the location of the method area or the policies used to manage compiled code. 
https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html This feature was added to allow functional programming
Android SDK is actually pretty easy. You might want to take a look at other languages if you think it's difficult. I find Android much simpler than the world of apis that exist for the very sophisticated options of Java backend.
No, he is suggesting that they should be supported at language level, so we wouldn't have to write unnecessary getter/setter methods.
If only there was a European edition. That 11h flight / 9h jetlag / ridiculous hotel pricing :-/
Advantages over protobuff?
It's very different stuff. Protobuf serializes annotated classes into extensible binary format, which *is* protobuf, and understandable by other protobuf implementations. Kaitai Struct, on the other hand, focuses on parsing arbitrary (i.e. pre-existing) binary formats, such as object files, network packets, archives, media files, databases, filesystems, etc. into in-memory representation, i.e. classes. You can't, for example, parse PNG image with protobuf. On the other hand, you can parse protobuf-encoded message with Kaitai Struct, although it probably won't be as useful as receiving it properly with protobuf.
I've not used it beyond 'hello world' but really liking what I'm seeing in [Kobalt](http://beust.com/kobalt/home/index.html) from Cedric Beust which looks inspired by gradle, but using Kotlin from Jetbrains. Tempted to switch one of OSS projects to using it. 
If someone wants to make a definition for java object serialization that'd be really handy to call some http-based java remote services that use java serialized objects as payloads ( https://docs.oracle.com/javase/8/docs/platform/serialization/spec/protocol.html ) I'd give you a high-five if you did it. 
No problem. Assuming Heroku isn't slimy with billing practices, I've already confirmed my account.
[Somebody make this sub](https://www.reddit.com/r/SomebodyMakeThis/)
I really like how this makes it easy to open source formats. A few years ago I had to write a zip reader in Java and had I known this library I would've given it a shot.
Of course it's close. /u/stevoski111 simply misspoke what the 42% represents; "close" doesn't refer to the percentage, it refers to the description of the set. i.e. "all methods" vs "all methods that are 5 bytes long". It's a figure of speech, not a claim of numerical accuracy being near to an acceptable range. 
While the JVMs that use GC explained in article are in a majority it would be nice if it at least mentioned that that is not the only way to do it and there other types out there (like Azul/Zing).
What is close is these two statements: &gt; 42% of all methods in Java's API are accessors &gt; 42% of methods that are 5 bytes long are getters The 42% number is correct, just applied to the wrong thing.
.Net properties just implement hidden getters/setters along with metadata describing them. Even auto-properties do this, they're just syntax sugar to automatically create a backing field and the get/set methods for you.
Ok, excepted that the article presents the GCs that can be used by 99% of the developpers... So you refuse an interesting explanation that could be useful for 99% of the person because it does not mention unusual GC... That's not serious. You look like scientific reviewers :-) 