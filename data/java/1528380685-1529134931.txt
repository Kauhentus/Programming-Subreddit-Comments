My point is that they should say as much rather than pretending the open\-sourcing was some invitation to let the community participate.
I get "Error: unable to access jarfile &lt;path-to-jar-file&gt; I have verified that the jar is in that path and tried making it executable etc. What would be the reason?
Just go to the Java compiler errors/warnings section in the preferences and set to ‘info’ or ‘warnings’ anything you find useful.
They say they find Nashorn challenging to maintain, why would they replace it with something even more difficult? It's the right move, they should just concentrate on Java and stop putting a gazillion features in the core. If people want these sort of integrations they should just do it themselves as a lib. (LWGL for example)
Nope. **native-image** builds a fully AOT compiled elf binary. http://www.graalvm.org/docs/reference-manual/aot-compilation/
Here is the workflow: git/bag&gt; ~/graalvm-ce-1.0.0-rc2/bin/native-image -jar build/libs/bag-1.0-SNAPSHOT.jar -H:Name=bag Build on Server(pid: 25655, port: 45535)* classlist: 894.23 ms (cap): 1,209.29 ms setup: 2,263.85 ms (typeflow): 4,462.78 ms (objects): 2,179.84 ms (features): 100.40 ms analysis: 6,877.09 ms universe: 344.71 ms (parse): 925.38 ms (inline): 928.53 ms (compile): 4,883.32 ms compile: 7,245.02 ms image: 1,034.24 ms write: 213.22 ms [total]: 18,950.73 ms git/bag&gt; file ./bag ./bag: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=4adbe71cf730d15c39c80b7f8c2f144c2743d748, with debug_info, not stripped git/bag&gt; ls -lh ./bag -rwxrwxr-x 1 pwoegere pwoegere 6.5M Jun 7 16:36 ./bag git/bag&gt; time ./bag usage: bag [-c &lt;index&gt; [-a &lt;alternative alias name&gt;]] -a,--alternative &lt;alias name&gt; create an alias with an alternative name -c,--create &lt;index&gt; create an alias with the suggested name -h,--help print usage -l,--print-all print a list of all suggested aliases -p print a list of suggested aliases bag version 1.0 by Stav Shamir real 0m0.004s user 0m0.001s sys 0m0.003s 
It is not my benchmark, but one from Oracle. The total time is unimportant, at least for long running applications. It takes a few iterations for the JIT compiler to kick in and optimize the hotspots. The time used in the last iteration is the important time. Graal starts much slower, but is a lot faster once the JIT has done its work.
it almost certainly will. if you use java 9+, pieces of graalvm are already integrated in your jvm. you can enable graalvm's compiler to perform JIT compilation in your code instead of C2, though i forget the exact flags to do it. GraalVM will almost certainly be fully integrated into openjdk, hopefully with openjdk 11, but maybe later.
They have gone out of their way to keep the best optimizations out of the open source project, which to me (a non-native english speaker) sounds similar to running with a limp.
Team treehouse has a series on spring boot which is alright. 
[Jooby](https://jooby.org), [Dropwizard](https://www.dropwizard.io/), and [Play Framework](https://www.playframework.com/) are all "three lines of code" type frameworks, though they do require being familiar (to some extent) with the surrounding tooling (Maven, Gradle, SBT), but they'll get you coding web apps in Java really quickly. I don't know of any MOOCs for them, but the online tutorials are reasonably straight forward. As others have mentioned, Spring Boot is a good option too, but that's kind of the "Django" of the Java ecosystem: It's everything including the Kitchen Sink, which can be a lot to grasp if you're just starting.
So here's something I haven't quite figured out: which parts of Graal are included in OpenJDK? I think some parts have been packaged together, but I'm not sure what. Specifically, is the Graal's JS engine part of OpenJDK or will it be? I'd rather my Java application not require a different runtime environment (the Graal VM) just to run an application with JS functionality.
Could you zip and send me the installation directory?
If you want to distribute a CLI it's nice to have a compiled binary. Installation and distribution of Java apps is definitely a heavyweight and often a little brittle. The installer for this script, for instance, assumes the user has java installed and in his `PATH`, and that the version of java is recent enough. If any of those assumptions fail, this won't work quite right. It's not a huge deal, but a compiled language would definitely be the more natural choice here.
It looks like in your [submission](https://www.reddit.com/r/java/comments/8pb7ha/generating_the_famous_thx_deep_note_in_java/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Come and talk to us directly, in [https://gitter.im/graalvm/graal\-core](https://gitter.im/graalvm/graal-core), or [https://oss.oracle.com/mailman/listinfo/graalvm\-users](https://oss.oracle.com/mailman/listinfo/graalvm-users) to get support for experimenting with using GraalJS. We're interested in sand\-boxing, as we use this ourselves in for example the Oracle Database.
At the moment only the JIT compiler has been included in OpenJDK, and only on Linux and only as an experiment optional. To get everything in one package today, get GraalVM. It's possible that GraalJS could be made available as a Maven module in the future.
And Groovy 2.5 is now out!
If you use Groovy, you could [use groovy-sandbox](https://github.com/jenkinsci/groovy-sandbox) to restrict what commands can run. Depending on how you implement it, you could do either a blacklist or a whitelist. If your scripting setup is solid, it should be pretty easy to define a whitelist.
Not our own database we use postgresql and jee entity beans and spring hibernate. But we design the models in RAML and generate the pojos we use in resources as well as entity beans yo reduce code and avoid manually maintaining them. At least to some degree. 
It's missing "honesty". They are okay to reimplement a JS engine but they can't be bothered with Nashorn (which was already a replacement for Rhino and so incredibly recent Java 8) And frankly, how can you propose to deprecate something in place of something else that is just in a alpha state. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/8pbnkb/questioning_a_job_tech_test_with_rxjava/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
How huge is the resulting binary?
&gt; The installer for this script, for instance, assumes the user has java installed and in his PATH, and that the version of java is recent enough The same is true for any scripting language, yet people are happy with Python scripts.
Does the CE GraalVM cross compile? Can I run it on Linux and get native images that will work on MacOS and Windows?
&gt; How huge is the resulting binary? From the response posted by /u/woepaul, 6.5M. &gt; ls -lh ./bag &gt; 6.5M
I see. This is good to know!
Thanks for the tool. Will certainly look into it!
Java makes it easy to include the runtime in your jar these days with javapackager, and then /u/woepaul shows a way to produce a native executable with GraalVM above.
I'm not familiar with RxJava, but I would think that your REST request response would be your event. You know, network latency and all. And your request should be done on its own thread, to not block the UI. So I don't see a problem with the use of RxJava...
Maybe they use RxJava and want you to learn it a little before starting work there?
That's pretty neat, I had heard about GraalVM but didn't realize it had this sort of functionality. Is this different from the AOT compilation with jaotc in Java 9+?
True the compiler is part of the JDK but when you build an application with a bundled runtime you're usually only bundling the JRE. Nashorn is delivered in the JRE libraries so you didn't need the full JDK to use it. I just looked at the Oracle site and apparently it is now allowed to include the byte code compiler and tools.jar in a distribution as well. At one time that wasn't the case. Depending on how you setup your SecurityManager scripts can be fairly locked down on what they can do. No I wouldn't write my own mini language, I've tried and I've never gotten it right. JavaScript or Java code is what I prefer and since Oracle lets you bundle the tools.jar now with a deployment I might be looking more into the on-the-fly compilation model.
I was using it to compress the jar for a Swing application deployed via Java Web Start. Got really good compression out of it which is really important when an update triggers a few hundred plus downloads at once in a call center at shift change.
We don't have that. 
Before the rise of MVVM and MVI/Redux, RxJava was mainly used to handle API call results. Shout out to /r/androiddev for more info.
Here is the github issue - https://github.com/oracle/graal/issues/407
If it is still in Java 11 I think we will have enough time to transition to an alternative. Fingers crossed its still in 11. 
It will still be in 11, which is the next LTS release.
I'm just getting excited about `Predicate::not(Predicate&lt;? super T&gt; target)` Now we'll be able to write ... .filter(not(String::isEmpty)) ... instead of .filter(s -&gt; !s.isEmpty) 
As a separate module sounds good. 
+1
If this makes Maven and Gradle able to run webpack inside the JVM rather than calling out to node, then I'm all for it. :)
77% listen music during coding? How it doesn't disctract them?
Hell, I listen to podcasts while coding...
I have two options: listen to music or listen to co\-workers eating, sniffing and mumbling ;)
The best is instrumental.
Need something to drown out noisy coworkers/side conversations
Wow. Do you comprehend everything, or use it like a background murmur?
It's mostly background murmur unless something really interesting comes up.
I'm not surprised that Jetbrains is #1 on a survey conducted by Jetbrains. I'm a little skeptical of that particular result. 
Gotta love the "Open Office Layout"! I was recently moved to sit right next to Ops, with the main monitoring screens. I've legitimately had to take my laptop to the lunch room to work sometimes.
I’m not. Their product is widely considered the best IDE for Java and other languages. I’d venture to say it would be higher% if it was free or eclipse wasn’t free.
I bought headphones precisely because I did not want to be distracted by a noisy coworker.
For me, it's important that the music not have words, so that it's a pleasant background experience that drowns out distractions. In other words, it helps me focus.
Our approach is different. Both solutions are able to AOT-compile java bytecode. But we do so [under closed-world assumption](https://github.com/oracle/graal/tree/master/substratevm#introduction). While jaotc is AOT support **for** the JVM (thus requires the JVM) we on the other hand build *standalone* *images* (elf executables or shared objects) that do do not depend on anything but libc and zlib: git/bag&gt; ldd ./bag linux-vdso.so.1 (0x00007ffda63c4000) libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00007fddfba08000) libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00007fddfb7e9000) libz.so.1 =&gt; /lib64/libz.so.1 (0x00007fddfb5d2000) libcrypt.so.1 =&gt; /lib64/libcrypt.so.1 (0x00007fddfb3a9000) librt.so.1 =&gt; /lib64/librt.so.1 (0x00007fddfb1a1000) libc.so.6 =&gt; /lib64/libc.so.6 (0x00007fddfade2000) /lib64/ld-linux-x86-64.so.2 (0x00007fddfbc0c000) If you compile with **--static** we build a fully static executable: git/bag&gt; ldd ./bag not a dynamic executable git/bag&gt; file ./bag ./bag: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, for GNU/Linux 3.2.0, BuildID[sha1]=a686f2cfebd85be421f070a946e6a8df569e1397, with debug_info, not stripped
The Community edition of IntelliJ is free.
You’re not wrong, but a lot of what makes IntelliJ so powerful is the built in framework support, among other features, that are only available in the Ultimate edition. Personally I use both Ultimate and Spring Toolsuite depending on what I’m working on.
https://www.jetbrains.com/research/devecosystem-2018/ Key takeaways Java Most **popular** primary programming language JavaScript Most **OVERused** overall programming language Go Most promising programming language LOL
I think they're sad Kotlin didn't win Most promising programming language
Personally, I am surprised that only 59% of developers actually write unit tests.
Yeah, it’s certainly worth the money! I know a few who just use Community, though.
Yeah, it’s certainly worth the money! I know some who just use Community, though.
&gt; I’m not You're not surprised that a Jetbrains survey found Jetbrains to be #1? Next thing you know you'll be telling me that JUnit is the best, according to a statement from the JUnit lead. Ford's are the best according to the Ford spokeman! Honda's are the best according to the Hinda smokesman! Reddit is the best according to the reddit CEO! &gt; Their product is widely considered the best IDE for Java and other languages. ...by the Intellij CEO? I mean I've used both. Had a lot of stupid bugs trip me up over the years with Intellij. Same deal with eclipse to really, but every time I use Intellij I'm kinda disappointed that I find it about the same as eclipse.
I have netflix running on one monitor and I code on the other.
Most learning Python, I wonder why /s
Good bot
If I wasn't a bot, I would have sent you a picture of myself. Because I look totally grateful.
This.
&gt; ..by the Intellij CEO? No, by the 6000 developers surveyed. Did you actually read the article, or did you just come here to practice being a complete bell-end?
python renaissance
I am shocked, shocked, to find out the Intellij fanclub freaks out and namecalls if someine finds their product mediocre. Shocked.
Yes, any organization committing to to a language on a large scale needs to be sure it's going to try to keep up reasonably with the other viable alternatives into the future, and there are many now. Even though "but it's fweeeeee!!!!!" as some of the more sycophantic have said variously here. So's everything else too, that's simply utterly meaningless to decision makers. The time of going a little fallow means Java seems to be a bit behind, but all signs are quite positive (despite modules and JDK9, but at least it's over now). I think people who do real work at scale are really excited by value types, and it seems clear from what developers have said that it could move faster with more resources, or openness to collaboration on it, which is why *sackings* is annoying. With the current centralized decision making model, fewer people at Oracle even makes direct contribution harder and less attractive to be honest. It would also be helpful it were possible to contribute more like other open source projects, more corporations might be willing to invest more then i.e. if all important decisions aren't seemingly just made centrally within Oracle regardless of what contributors, who spend a lot of time and money doing so, think. I also think that is changing, and all credit to those working to change that. 
definitely, i'm really cliché and listen to classical music while coding but i have to say it really helps
I'd dispute the "and other languages" part of that. Best for Java for sure though.
I'm not, at all. Worked at Rockwell Collins, all tests were text docs to be executed by hand on a physical box. Got a presentation from a team living in the current century of software dev and everyone was hyped up about their Tdd and automated test runner. Now that I'm finally on a team living in c u r r e n t y e a r I have no idea how they pass all the testing the gov puts their software through.
Go is definitely more deserving of the title. I love Kotlin, but Go is obviously much more popular
At least to me this seems like something that might work simply as a bash script or something and not require the overhead of running a jar.
Oh well in that case, good idea :)
Serious question: if the SQL parser is an "ongoing effort" as written in the article, how can the database engine be taken seriously?
The SQL generation works fine. It's entirely different to write SQL and parse SQL.
What about doing the old rock band thing and destroy your instruments (PC) at the end of the show.
Ok, then why does it need a parser?
I worked for Santander bank and was pretty much the same. Most of the developers don't even know how to write unit test. Some friends and I try to implement to at least write unit test for happy paths but upper management said that it was a waste of time.
"will miss the JDK 11 train"...
My experience in the Python community is that people there complain a lot about how obnoxious distributing apps is. For my part, I'm happy to run my own Python script or Java program, but I'm definitely less happy having to deal with someone else's!
Thanks for the tip! Still not used to building such small Docker images. I guess I was basing it off Golang examples that install ca-certificates with apk, but that's not an issue until there's SSL support. I can't believe how quick you addressed my ticket from last night. I really appreciate it. I'll be keeping a close eye on GraalVM. I can't wait until SSL support and cross compilation land. Great work!
I hate IntelliJ and always opt to use Eclipse when I have the choice. You’re not being oppressed by the IntelliJ IDEA establishment, you’re just being a confrontational dick and getting called out for it.
&gt;It's not a huge deal, but a compiled language would definitely be the more natural choice here. Java *is* a compiled language. Not compiled for bare metal, true, but still compiled. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; You’re not being oppressed by the IntelliJ IDEA establishment, you’re just being a confrontational dick and getting called out for it. "Psychological projection is a theory in psychology in which humans defend themselves against their own unconscious impulses or qualities (both positive and negative) by denying their existence in themselves while attributing them to others.[1] For example, a person who is habitually intolerant may constantly accuse other people of being intolerant. It incorporates blame shifting." 
It looks like in your [submission](https://www.reddit.com/r/java/comments/8pgziu/abusing_archetypexml_in_maven_to_create_a_custom/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It's a beginners language so it's easy to pickup and a great stepping stone in to more competent languages.
What a stupid rule! Question: What will happen if *all* subs will adopt this rule? Or even worse: All others will demand for more then 10 points 😈 Besides the possible intentions of this rule: What about a really superb posting was done by a newbie? How can a bot judge this (yet)? 
Go is a copy paste language lacking 40 years of research on language design. I mean some people like that, but let’s be honest. Kotlin is for creating product, Go for infrastructure plumbing.
&gt; Go is a beginners language so it's easy to pickup and a great stepping stone in to more competent languages. There is truly nothing new under the sun. That "beginners language" thing is dangerous. You get a whole bunch of people learning a half-baked language because it's for "beginners", then you have a whole bunch of people who are using this language, and software projects and companies are going to follow them. Suddenly, you're seeing a language that's straining because it's being pushed beyond its designed capabilities, plus you have programmers picking up techniques from programming in the language and carrying them over to other languages they might use, techniques that are sub-standard but were allowable in the "beginners language". Am I talking about Go, or am I talking about BASIC?
Oh goody, that will give people more time to argue about it.
This is the best explanation of the Command pattern I've seen. And the examples of its use in very different situations really woke me up about where to use it.
Yes, I also can't fully concentrate if music has words. :) Also I found that rain sound can greatly reduce noise from my coworkers, so I created this mix: [relaxing music with rain](http://www.youtubemultiplier.com/5a87000ee26be-relaxing-music-with-rain.php).
Different cost centre ;-) Yeah, well, I guess Oracle is still learning how to run this "continuous delivery" thing on the Java platform.
&gt; when you build an application with a bundled runtime you're usually only bundling the JRE That's right. I have never worked in an environment where the runtime wasn't the JDK, so can't comment here. &gt; Nashorn is delivered in the JRE libraries so you didn't need the full JDK to use it. I didn't know that.
&gt; Can i use Django with React? Is that possible? Definitely. Nothing you described here can't be done with Django AFAIK. So there's frankly not really a need for you to go to Java. 
It doesn't _need_ a parser, and only got one recently (in 3.9). From that version's announcement: &gt; [jOOQ users are used to creating SQL statements by "manually" creating a SQL expression tree through the jOOQ API. But nothing should prevent us from parsing string-based (and vendor-specific!) SQL statements into jOOQ expression trees. In the future this can be used, for instance, to translate (and format) one SQL dialect into another, making jOOQ not only an excellent SQL client API for Java, but a general-purpose SQL API.](https://groups.google.com/forum/#!topic/jooq-user/zlDXGePK7e8) One use is described in https://www.jooq.org/doc/latest/manual/code-generation/codegen-ddl/: getting a database's schema from a DDL script.
PHP?
We should switch to Libre Office Layout
Do note that jOOQ is not a "database engine", it's a SQL language abstraction API (internal DSL) that supports 25 RDBMS SQL dialects. Thus far, jOOQ was "only" an internal DSL, whose functionality was limited by the Java API that represented the DSL. With the parser (a relatively new feature), the same DSL can now also be used as an external DSL, which looks a lot like what you would run directly on the underlying RDBMS. That means that the API is exposed to a huge number of additional features (vendor specific DDL storage clauses, built-in functions, etc.), which weren't supported by the internal DSL yet. People may not have been missing too much functionality from the internal DSL, because it is written in Java, not in SQL. But with the parser, this changes and the expectations of supported vendor specific SQL features increase. Supporting all those features is an "ongoing effort".
I see, thank you. It seems there is a tool in GraalVM to allow to make binaries that start much faster as well.
&gt; getting a database's schema from a DDL script. That was the main driver for adding the feature - the main immediate value to existing users &gt; take an application written in plain JDBC and using database-specific SQL and use jOOQ to translate it to work with another database. That will be one of the most important new features in the long run, possibly even a new product, once it matures.
Yes, that is the thing I'm most exited about. I hope they make it work on embedded dev boards like Raspberry Pi.
Javascript?
What I don't get is why the GraalVM cannot give us something like graaljs.jar I am in the very same situation and I would like to figure the best way to transition from Nashorn (and I am also quite gutted because Nashorn did work quite well for me)
Maven or Gradle.
Hello, got some points for you to consider from quite other perspective since no 1 i saw mentioned it and imo as a dev is as important as functionality or even more :D 1. You should focus a bit more on readability of your code for instance: too much nesting (ifs, fors etc), more splitting (methods are too big, too few classes) 2. naming of variables: all those ks, it doesn't hurt to name them even if the scope is narrow 3. conventionHolds(char c) method is a bit silly :P 4. read on try with resources 5. you could introduce some custom exceptions 6. as some1 mentioned you really shouldn't give access to Players fields 7. e.printStackTrace(); don't do that, logger is your friend :D it may seem like ranting but it really matters, Keep developing your skills, cheers :D
Is it really that bad? I haven't looked into it, but you speak about it like it's a child's toy being treated like a power tool. 
JPMS is not able to provide two different versions of a class (from different framework versions for example).
RxJava would be a good fit since you can use it for parallel execution, retry on connection error, different kinds of processing (filter, map, ...). I would, however, prefer the more modern and very similar \[Reactor\]([http://projectreactor.io/](http://projectreactor.io/)). But may you shouldn't try to change their tech stack during the application process ;\-)
I have been told the same. I now just lie about how long it's taking.
We do use Maven. The point I'm trying to make is that if an SDK uses an old version of a dependency, and the tracing library uses a new version of that same dependency, you can't really do much, other than not use on of them, because if you use the old one (via exclusions), it will fail for one reason, and if you use the new one, it will fail for an other reason. I was just curious whether the module path mode is able to "hide" these transitive dependencies.
I sit in a three person room but still \- people are not statues, they make noises :)
&gt; Is the Java 9 module system supposed to solve dependency conflicts? In a first step, it creates them ;-)
No. But you will get a compile time error now: [https://stackoverflow.com/questions/45283886/using\-different\-versions\-of\-dependencies\-in\-separated\-java\-platform\-modules](https://stackoverflow.com/questions/45283886/using-different-versions-of-dependencies-in-separated-java-platform-modules)
Go is awful. It ignores the last 40 years or so of programming language design, and is basically like C from the 70s with a GC and more typing.
Isn't that kind of what it's supposed to be though? A memory-safe language suitable for systems programming? 
Huh what is this now, stack overflow?
The JPMS has no concept of module versions. Which makes sense, as I see it primarily a way of modularising the JDK. I think it was a bit ambitious to market and push it as a generic solution for modularising Java applications. I have been using OSGi for the last 6 years, and while it's not perfect, it's pretty damn close and I haven't had a NuSuchMethodError or ClassNotFoundException surprise me for a long time.
It's entirely possible that they are using RxJava in production and want you to incorporate it in the task to show that you know your way around the framework.
&gt; Implicit Joins &gt; &gt; ... This looks super useful! &gt; jOOQ 3.11 is the first release that is formally integration tested with Java 10. To use jOOQ with Java 10, use the Java 8 distribution which has not yet been modularised, but contains Automatic-Module-Name specification to be forward compatible with future, modularised jOOQ distributions. Does the free edition work with Java 10? I've updated jOOQ dependencies in my side-project from 3.10.7 to 3.11 and I'm getting 'Illegal reflective access by org.jooq.tools.reflect.Reflect (...) to constructor java.lang.invoke.MethodHandles$Lookup(...)' errors when running it. Guess I'm just missing something...
I apologize for my cynicism. Could you elaborate more on how to test it ? How do I modify my Java program: String myJavaScript = "2+2"; new javax.script.ScriptEngineManager() .getEngineByName("JavaScript") .eval(myJavaScript); 
I jump between that and dubstep that sounds like a couple of washing machines having sex, it’s great. One day I’m mourning my code over Lacrimosa, the next I’m dancing!
http://www.graalvm.org/sdk/javadoc/org/graalvm/polyglot/Context.html is what you're looking for with graal. I've not tried this yet myself, but supposedly the equivalent code for what you're doing would be: import org.graalvm.polyglot.*; class Polyglot { public static void main(String[] args) { String myJavaScript = "2+2"; Context polyglot = Context.create(); polyglot.eval("js", myJavaScript); } } The link above goes into how to inject values/objects into JS and lift them out of the JS instance as well.
Bad bot
No. Module system isn't supposed to solve class collision problem. OSGI may help but, as you said you are maven user, I would suggest you to take a look at maven-shade-plugin.
We solved this with mavens &lt;dependencyManagement&gt;, you specify once what version the project uses and no other version can be imported, including all levels of child dependencies. https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Management
&gt; Does the free edition work with Java 10? Yes &gt; I've updated jOOQ dependencies in my side-project from 3.10.7 to 3.11 and I'm getting 'Illegal reflective access by org.jooq.tools.reflect.Reflect (...) to constructor java.lang.invoke.MethodHandles$Lookup(...)' errors when running it. Guess I'm just missing something... Maybe not? Perhaps a bug. Would you mind filing one with a way to reproduce the problem to https://github.com/jOOQ/jOOQ/issues/new
Sounds exciting! Immediate feedback: It would be good to have some sample graphs in the documentation, especially since it’s a visualisation tool. 
Yeah. I mean I wish it supported more modern JS language features (I'm still only using the JDK 8 version, so maybe 9/10 have more), but it was still an excellent tool. If it gets removed from the JDK without a viable replacement, that will cripple a feature of my company's application.
&gt; fetch some data from a REST API RxJava works fine for this. I'd prefer using Retrofit with an RxJavaAdapter. But their question is ok. 
You are probably right. I could put some more information in the documentation to explain the dependency calculation. Thanks for the suggestion! However, the project is not for visualisation :) Its aim is to verify automatically the structural properties of your projects, so that you can have immediate feedback at build time and you can also have additional quality gates in your CI servers. I started with a project that was originally intended for visualisation ([https://github.com/hcoles/highwheel](https://github.com/hcoles/highwheel)) but I adapted it for other purposes.
The Java module system formalizes the notion that having multiple versions of the same dependency in a single application doesn't work with Java. This was true in the classpath situation (even though you could get lucky then), and now the module system won't start your application if multiple versions of the same module are present. So, does it solve this problem? That depends on your point of view. As mentioned later in this thread, you'll still need another tool (Maven/Gradle) to prevent this situation from arising. If you really need multiple versions of the same library, OSGi has got you covered, as well as the Java module system with its ability to have multiple ModuleLayers, each containing their own version of a given module. Both are not something you can use out-of-the-box for your typical classpath-based application. It will take effort, so only indulge in this complexity if you really need to (hint: don't).
Historically there has never been a great way for working with OSGi and Maven together imo (sorry Apache Felix). But lately there's been a lot of work getting Bndtools (the "official" build tools) working nicely in Maven environments. For anyone interested the best place to start is undoubtedly here: https://enroute.osgi.org/ but bear in mind all the latest tutorials have just been redone and are very new so there may be some rough edges still...
Wouldn't this work? `.filter(!String::isEmpty)`
Any reason you're not using NIO.2? I've also been developing something similar recently; let me know if you want to team up and create the ultimate library ;) https://github.com/jhg023/SimpleNet
So here's the part that's bothering me: the JS engine may be removed from the JDK soon, and it's proposed replacement is an entirely separate VM, which doesn't support Windows AFAIK. It's a a separate commercial product. This really feels like a loss to me.
It's a no\-go for me too. Unless they provide it as a standalone dependency I could put in my pom. But still, it's another dependency for something that was included in the JDK by default.
Oh, and also the Windows version is during development.
Oh, also the Windows version is under development.
do they (jpms developers) have any plans to address the jar hell problem?
I completely agree. I can live with this functionality being a separate dependency. In my opinion, executing JS in Java isn't such a huge problem that it needs to be included in the JDK. I just want an alternative that isn't such a hassle to adopt.
There's a difference between a language that's free of undefined behavior pitfalls that are a legacy of programming realities from decades ago and a language that avoids useful features for the sake of "simplicity" that can lead to bad programming habits. Two points come to mind: * The exception handling system is essentially returning a status object from a function call that serves as the exception object. This is a *bad* programming practice in other languages. For example, Ruby discourages just throwing strings when you want to raise an exception because differentiating between exceptions essentially requires a comparison between magic objects (like a comparison on a string) instead of a type check that's a lot less fragile. * "Composition over inheritance" got implemented in Go as "composition, **no** inheritance". This means copypasta between classes that could share something like 90% code behavior - doesn't matter, you have to reimplement everything - which both increases the code base size and makes maintenance a lot more fragile because you'd have to update common code in every class. If you want an example of this, check out the back-end code for [Grafana](https://github.com/grafana/grafana), especially the database interfaces. Digging through this code for a few days to track down some performance and SSL setup issues were enough to turn our whole team off from ever wanting to have anything to do with writing Go ourselves.
You can also exclude Maven from pulling in a bad dependency, like your example of an outdated Netty dependency. [https://maven.apache.org/plugins/maven\-jar\-plugin/examples/include\-exclude.html](https://maven.apache.org/plugins/maven-jar-plugin/examples/include-exclude.html) Let's say you have a library which for the sake of example I'll call "Library" (which would be the old Netty library from your example), and in addition your dependencies section in your pom has DependencyA and DependencyB. It's not visible, but DependencyA in turn uses Library version 1.0. Meanwhile, DependencyB uses Library version 2.0. What often happens then is that Maven sees DependencyA first, and it imports DependencyA along with all its dependencies, including Library 1.0. Later it sees the pom entry for DependencyB, and works to import DependencyB along with all its dependencies. There's a conflict now because it sees that DependencyB has Library version 2.0. Maven isn't very good at resolving conflicts like this, so it just chooses one. In most cases, it chooses to keep the other version (Library 1.0) that it already saw and placed in the dependency tree. But you don't know this! Now, when the application runs, it makes a call for some new method that exists in Library 2.0 but not in Library 1.0. You get things the dreaded NoSuchMethodException. Or you may even get a ClassNotFoundException for the case where it is looking for a class that only exists in Library 2.0. Using the link above, you can see how to explicitly tell Maven to exclude an old dependency (like Library 1.0). Just place the excludes tag under the entry for DependencyA, so that Maven won't import Library 1.0. This means when it's importing DependencyB's stuff, it will import Library 2.0. If you want to see what dependencies Maven is choosing, you can always run "mvn dependency:tree". When I run this, I always redirect the output to a file because normally it is so long that it scrolls off the screen and you can't see it all.
The reason for io over nio is to make sure that the encryption keys are fully read before trying to perform any operations with them, the last thing I want is to try and figure out that a decryption operation isn't working due to a partially read public key D: it'd be cool to work together and try and get a fully working library out there for the java community! :)
I only use Ultimate. What does Spring tollsuite do better?
Come on, 7 posts under this one they say it will probably be a maven module. It's not like this subreddit has thousands of topics every day. A polyglot VM seems like a loss to you? OK.
Thank the MBA bean counting dumbfucks for their open office fad.
I'm not. In many organisations the attitude is "tests are nice ... maybe one day ... now lets ship features and worry about that later".
I like the Boot Dashboard, devtools integration, and some of the context menus that are spring context specific.
Go is not for systems programming. It's barely typesafe, either (lol interface{}, lol no generics, lol typed nils)
If you're curious, I did some preliminary comparisons between nashorn and graal using the language shootout's n-body benchmark: [this is the code](https://pastebin.com/kALBUQG4) it can be run on either a graalvm or a regular openjdk. It will use graal's polyglot engine on graalvm and nashorn on openjdk. graal results: [info] m.c.n.bench sample 21 7705.536 ± 173.220 ms/op [info] m.c.n.bench:bench·p0.00 sample 7415.529 ms/op [info] m.c.n.bench:bench·p0.50 sample 7692.354 ms/op [info] m.c.n.bench:bench·p0.90 sample 8036.286 ms/op [info] m.c.n.bench:bench·p0.95 sample 8059.775 ms/op [info] m.c.n.bench:bench·p0.99 sample 8061.452 ms/op [info] m.c.n.bench:bench·p0.999 sample 8061.452 ms/op [info] m.c.n.bench:bench·p0.9999 sample 8061.452 ms/op [info] m.c.n.bench:bench·p1.00 sample 8061.452 ms/op openjdk results: [info] m.c.n.bench sample 10 31829.734 ± 566.012 ms/op [info] m.c.n.bench:bench·p0.00 sample 31172.067 ms/op [info] m.c.n.bench:bench·p0.50 sample 31776.047 ms/op [info] m.c.n.bench:bench·p0.90 sample 32413.581 ms/op [info] m.c.n.bench:bench·p0.95 sample 32413.581 ms/op [info] m.c.n.bench:bench·p0.99 sample 32413.581 ms/op [info] m.c.n.bench:bench·p0.999 sample 32413.581 ms/op [info] m.c.n.bench:bench·p0.9999 sample 32413.581 ms/op [info] m.c.n.bench:bench·p1.00 sample 32413.581 ms/op 
I'm even more surprised by people who do only unit testing and no systemic testing by professional testers. If I had to choose between the two approaches I'd definitely toss out unit testing - not only it's very expensive to write but it also cannot, by its very nature, catch all problems in a software system. Let me make clear though that I'm not advising against unit-testing: the effort put into write the test cases is well worth it and you should always do both unit testing and traditional testing in any serious project.
IntelliJ has the boot dashboard and devtools integration. Not sure what menus you are referring to though. 
I need to use it more. I grew up on eclipse so I’m definitely more comfortable with it.
Removing language features because other proprietary tech does it better is idiotic. Lets just remove regexes from the language because perl does it better, and you can exec perl code from java. 
 Not to be a douche, but have you considered the official documentation? Spring documentation is some of the best around, so I suggest you start with that. Understand mockmvc, mockito and good design and you should come a long way on the documentation alone. Good luck!
graal will support windows eventually. all the experimental stuff targets linux first.
did you not read your own post? &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.graalvm&lt;/groupId&gt; &lt;artifactId&gt;graal-sdk&lt;/artifactId&gt; &lt;version&gt;1.0.0-rc2&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;
graal's not proprietary. you can download the source of graal CE right now.
Me too but IntelliJ is all I use now. When I screen share with people with eclipse I feel lost now looking at eclipse. The $500 is steep but totally worth it!
it already seems to be: http://mvnrepository.com/artifact/org.graalvm/graal-sdk
At least it makes it explicitl instead of implicit...
I recently worked on a C # project in which early developers decided to use Code First with the Entity Framework. Oh God, what the hell. Although it was a small project
That's the dependency used for java api. The whole engine is not available as a dependency and the application has to be launched using GraalVM that's downloadable similarly to any other jdk
Gpod thing JavaFX(with Java7-8) had poor support to embedded html... If it would be the case, I'll probably learn this tech. 
If you rely on JS/Java integration then Graal is a major benefit to you as the purpose is to improve the polygot support. If this JEP gets approved it will likely show up in LTS Java 14 which is a ways away. Also deprecation is not the same as removal
&gt; so only indulge in this complexity if you really need to Often you have no choice. It's very common that a Java application has many dependencies and these dependencies in turn have transitive dependencies. It's inevitable to run into a version conflict. Just look at slf4j / some logging framework...
No. [Quotes](https://blog.codefx.org/java/dev/will-there-be-module-hell/): &gt; It is not necessary to support more than one version of a module within a single configuration. -- *Java Platform Module System: Requirements – Multiple Versions (Apr 2015)* &amp;nbsp; &gt; A module’s declaration does not include a version string, nor constraints upon the version strings of the modules upon which it depends. This is intentional: It is not a goal of the module system to solve the version-selection problem, which is best left to build tools and container applications. *--State Of The Module System – Module Declarations (Sep 2015)* &amp;nbsp; &gt; The module system isn’t suggesting any solutions, it is instead leaving this problem to the build tools and containers. --* Alan Bateman on Jigsaw-Dev (Oct 2015)* 
Keep track of [JIRA Maven Shade Plugin](https://issues.apache.org/jira/browse/MSHADE-234)
very well said
completely agree with all of you. This is insane. Nashorn was also relatively new and it worked well
Hey, you again :) Multiple versions of the same lib on the classpath is a recipe for disaster. It might work in some cases as I alluded to, but that's just getting lucky. Hardly a 'feature' to build upon. To solve this problem you need multiple classloaders. Both OSGi and the Java module system (through ModuleLayers) allow for this. As said, both come at a price. It's far easier to restrict to a single dependency version for your application on the classpath through build tooling. This is not possible if you have (transitive) dependencies which both depend on incompatible versions of the library, but it's not a given that a multiple-classloader setup works in all these cases either. Classes of different versions can still be passed around in the application and end up in unexpected places, leading to runtime exceptions. I'm afraid there's no silver bullet for this one.
[removed]
10 has more JS language features but not full ES6.
As mentioned above that won't work without using GraalVM. There is hope for a standalone GraalJS engine in the future though.
I can assure you there exist methods that prevent that problem from occurring. If you're interested, my Discord is Jacob#9660
Man, the lack of a hot deployer kills me. 
Graal dev here. All graal languages already run on stock hotspot as a jar dependency. But not yet as fast as on GraalVM as we cannot leverage Graal as the Compiler there. We currently need a slightly modified version of the jdk to support that. We are committed to support this in future versions including maven deployment of the languages.
&gt; (disclaimer: I wrote Java 9 Modularity for O'Reilly) Does the book contain the thought process behind selecting that particular water fowl for the cover? I'm almost more curious about that than the modules themselves, hahaha!
Hmm I'll definitely take a look into that once all of the encryption stuff is up and working. I've sent you an invite :)
I agree I'm not worried about it being removed way in the future, I'm more concerned about there being no new features in 11. GraalJS does sound better, but it doesn't support Windows for development and it means I have to deploy a new VM to production.
I would seriously recommend changing your package names to match the Java coding standards. They should be all lower case and preferably a reverse domain name. CamelCase package names are not the norm.
https://www.reddit.com/r/java/comments/8pk5tn/evaluating_javascript_in_java_with_graalvm/e0cprzf says it does work on Hotspot; just not with the same performance yet.
why don't you leverage https://github.com/JigarJoshi/otr for e2ee encryption. it has simper API around it.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I thought the rationale was more that JavaScript as a language is evolving too fast and would require too much effort to maintain Nashorn. That in combination with the existence of an alternative...
That's certainly something, but it still seems like we're going from a VM which comes with JS out of the box, to one which doesn't. So much for using `jjs` / `jdk.nashorn.tools.Shell` as an out of the box JVM scripting option.
An alternative that May be released soon (or may not) that has existed for a very small amount of time so who knows if its buggy or not, or if its a drop in for any current uses of Nashorn. If they want to mark it deprecated and stop working on it, thats fine. Just seems odd to explicitly remove it.
Yep, Eclipse beats all others out in configurability. Too bad the IntelliJ fans feel like they have to troll a genuine post; JetBrains loosing revenue?
No it doesn't handle multiple versions of the same JAR. Try OSGi to do that.
This doesn't seem to work with transitive dependencies which defeats the whole purpose. 
Of course this won't work in a needed method or class in Library 1.0 is not also in Library 2.0.
Just use Java 11:) No JAXB - no problem
"Dependency management - this allows project authors to directly specify the versions of artifacts to be used when they are encountered in transitive dependencies or in dependencies where no version has been specified. In the example in the preceding section a dependency was directly added to A even though it is not directly used by A. Instead, A can include D as a dependency in its dependencyManagement section and directly control which version of D is used when, or if, it is ever referenced."
I think this is also an advantage. You can stay on an older graal.js version while you can upgrade your jdk or vice versa. Please note that we bring python, Ruby, r and native languages to the same platform. We cannot include them all by default.
Um... Netty? (Someone had to say this) Seriosly, doing a versatile and high-performing library is VERY non-trivial task, so doing it solo might be a difficult endeavour. If it's a pet project - that's great, of course, but if it's intended to use in production, the it would be nice to know what advantages does your library provide against mature and well-known networking libraries.
Sorry for a late reply \- I didn't get a notification that there's a response to my comment... Weird. I proposed the name `withItems` since it would follow a (maybe not yet) well established naming convention: [https://docs.oracle.com/javase/tutorial/datetime/overview/naming.html](Java Date-Time: Method Naming Conventions)[https://projectlombok.org/features/experimental/Wither](Project Lombok: @Wither annotation)
I've never heard about netty before, it seems like a very interesting and feature full project which I'll definitely have to do more digging into. I guess the main differences between netty and this project (from a quick glance over their site and docs) is mainly the ease of use, this project aims to allow someone completely new to java to setup a server/client infrastructure in a matter of minutes without the need to learn what may seem complex or advanced concepts. It's a pet project of mine but I do hope to have it production capable with enough work from myself and with some help from the wider community.
Ah thank you for that, being a php developer I don't really know too much about java conventions, I'll be sure to change that next commit :)
Hmm I'll certainly look into it, I'm wary about using third party projects for encryption standards however, especially when said project talks about saving all messages in future updates. I'll definitely take it into consideration though, thank you
When I open the article in Chrome, some longer lines of code are indeed partially hidden. Unfortunately, this is largely due to DZone putting a fairly large banner on the right part of the screen. Decreasing the zoom in Chrome may help, though.
The source code normally resides in `src/main/java`, resources in `src/main/resources`. Testing in `src/test/java`. You could use Maven archetype (or similar for Gradle) the generate the project setup. Using a build system is recommended anyway. Also please don't prefix variables with `_`.
Thanks for the Tipp, but I was referring to overall linebreaks, which do not exist. So you just have lines over lines til the end, like a textblock.
https://xkcd.com/1172/
What's the standard for class variables in java? Is it all caps? Also, sorry if this is a stupid question but what would you use as the reverse domain name package folders if there is no domain for the project? Do people use the github domain link for example? Say com.github.networkapi? I've never had much experience with maven before but once all of the encryption stuff is implemented I'll work that in as the next release. Thank you for the tips, I appreciate the advice :D
Do you know where I can get the GraalJS runtime dependency? I'm currently getting `No language and polyglot implementation was found on the classpath. Make sure the truffle-api.jar is on the classpath.`
Can you elaborate your questions? Are you looking for libraries for statistics (mean, median, standard deviation, regression, correlation, tests) or stats for others things?
the first one 
I know Apache Commons has some statistics library: [http://commons.apache.org/proper/commons\-math/userguide/stat.html](http://commons.apache.org/proper/commons-math/userguide/stat.html)
Yep
Hacker news post?
While I'm a big fan of xkcd, my case isn't an esoteric use of a misfeature - it's the exact *raison d'être* for the feature. 
Best for PHP/Ruby/Python also, no amount of plugins will bring other text editors to Intellij level.
Also posted here 5 years ago: https://www.reddit.com/r/java/comments/1ds953/jvm_internals/
&gt;What's the standard for class variables in java? Is it all caps? Convention for fields and variables is camelCase starting with lower case. Constants, like public static final, or enum values are all caps with underscores. &gt;Also, sorry if this is a stupid question but what would you use as the reverse domain name package folders if there is no domain for the project? Do people use the github domain link for example? Say com.github.networkapi? Yes some projects do use the domain of where it is hosted. The real goal here is for the package to be globally unique so there can never be any collisions.
&gt; What's the standard for class variables in java? Is it all caps? All caps only for final static class variables. Non-final are camelCase starting with lowercase letter. Here are some styleguides, all similar: * [Oracle](http://www.oracle.com/technetwork/java/codeconvtoc-136057.html) * [Google](https://google.github.io/styleguide/javaguide.html) * [Twitter](https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/styleguide.md) &gt; if there is no domain for the project? Do people use the github domain link for example? Say com.github.networkapi? Github is fine, or come up with something that could be a domain.
The only thing I remember was reply protection, where server generated one time param/nonce for use with next request. You cannot authenticate without some sort of secret and js client cannot keep/generate secret without user input or else anyone can just do the same and use your api...
I am very interested in this too. Looking at the same problem for a bigger project and have never seen what the best practice here is.
Just an FYI if you use IntelliJ, there is the awesome Maven [Helper](https://plugins.jetbrains.com/plugin/7179-maven-helper) plugin that is indispensable for projects with dependency issues. Also, IntelliJ can show the effective Pom in the editor for you. Both things are possible on command line, but way easier with IntelliJ. 
I'm almost sure it doesn't work this way with implicit / transitive dependencies. Like if you include libA which wants Apache Http 4.3 and libB which wants Apache Http 4.4 and you put a dependency management in a parent Pom of Apache 4.3, maven will still include 4.4 because it's algorithm picks the highest version. I'll find the StackExchange where this is discussed, or just write a test myself.
I've been using this for months now and have never found this to be the case, a problem can arise when they change package or jar name between versions tho.
You can learn Java very easily using this app.This app also has easy to understand videos to give you perfect and concise knowledge of the basics. Java - Apps on Google Play
You can learn Java very easily using this app.This app also has easy to understand videos to give you perfect and concise knowledge of the basics. Java - Apps on Google Play
http://mvnrepository.com/artifact/com.oracle.graal-js/nodejs-archetype/0.1 http://mvnrepository.com/artifact/com.oracle.truffle/truffle-api/1.0.0-rc2
Hide the rest service from outisde access by using a different port. Examples here: http://tech.asimio.net/2016/12/15/Configuring-Tomcat-to-Listen-on-Multiple-ports-using-Spring-Boot.html 
It's easy enough to de\-obfuscate the javascript or use a network sniffer to see what port is used. I want something closer to machine\-to\-machine authentication between the UI and the backend service.
Repost bot
https://stackoverflow.com/questions/42582239/javafx-rotate-rectangle-about-center
You could do something similar to cross-site request forgery protection, which essentially protects against the same problem. Spring Security [includes CRSF protection](https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html) and is easily installed via the `spring-boot-starter-security` dependency. All you need to do is include the CSRF token in a `meta` tag in your HTML page that hosts the Angular page, which is required to make the first REST call. After that, with each subsequent REST API call, return the next CSRF token through the `X-XSRF-TOKEN` header. Note, this pattern introduces state to your API requests, because the server has to correlate the CSRF token provided by the UI with the token stored on the server. For what you want to, I don't think you can avoid this.
Agreed, it's too early, we don't know how OSGi will work with JRT files yet either, it's all very new. We should copy the code to github and maintain it there.
Thanks! That got me closer, but now getting: `A language with id 'js' is not installed. Installed languages are: [].` Is there a published jar for GraalJS?
One of the solutions is to use an ip whitelist ... Only allow incoming requests from trusted ip addresses. If the list is going to be large, you can maybe use a subnet range approach similar to what aws does
Eclipse doesn't really have a good refactoring feature The ide that's closest to netbeans in refactoring is intellij, the later is a bit better imo ... The community edition should be able to help you out
JDK11? What the fuck?
And a release every 6 month? This is going to be a nightmare for deployment. 
You do realize you don’t have to upgrade every six months? 
I do realise that among my userbase some will upgrade others wont and that I need to factor that into my desktop apps. Every 6 month probably mean that you have to make sure your app will work on at leat 6 versions of the jre. 
Optionally your apps bundle their own jigsaw optimized runtime (which may save you some size), or not. The extra size of the runtime is neglectable these days anyway? The over all positives to this release cycle outshines any eventual problems in my opinion, coming from someone who works for the slowest moving entities known to man, banks.
Such questions belong in **/r/javahelp** as the *plenty hints* on the page indicate.
The crazy thing is- whenever I see the Spring team present at conferences they all use IntelliJ Ultimate, even though their website pushes the Spring Tools a bit.
I would secure the service endpoint path using spring security and hasIpAddress.
Had the same problem therefore I assumed that it's not possible to run the engine without the vm. Would love to see the solution 
https://askubuntu.com/questions/1037646/why-is-openjdk-10-packaged-as-openjdk-11
**There really is no way to do this** ([see this SO-question](https://stackoverflow.com/questions/13478748/how-to-make-my-api-private-but-usable-by-mobile-application)). I would suggest serving the data to the UI through a Back-End templating engine like [thymeleaf](https://www.thymeleaf.org/). 
You could limit the cross origin requests to only the location of the client where you expect them to come from, but that only works if the client is running in the browser. Outside the browser you can completely simulate anything the browser client does. So there's really no way to do this; you can't control the client and anyone can see what your client is doing. So security by obscurity will only put up a small hurdle. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I suspect it is just trolling at this point. Or bots. They can't actually like the IDE that much. It simply is not that good. 
LWSL is an open source socket library made in Java using JSON packets. It is used to create small backend applications such as verification servers, rats or other simple tasks. More information on the github.
so far I haven't found it. but i have found the minimum set up for running the polyglot engine with js on openjdk 8. So, you need the graalvm sdk and the truffle api as I said, but you also need two jars from graalvm ce. specifically: ```graalvm-ce-1.0.0-rc2/jre/languages/js/graaljs.jar``` and ```graalvm-ce-1.0.0-rc2/jre/tools/regex/tregex.jar```. Once I have those on my classpath, i'm able to eval the js program ```2+2``` using the polyglot engine in openjdk 8. If these aren't published on maven (and I don't see them yet), then they'll probably be published soon.
Few things I've noticed: You probably wanna change the xyz.baddeveloper package name, as it seems like a placeholder for me. It seems you're often ignore the exceptions. For example: in SocketClient.sendPacket. As a user, it would be good to know if the packet was actually sent or not. (As the exception is ignored, its hard to know) I recommend you support SocketFactory, in order to customize the socket creation. (Or any similar socket factory interface) (For example in order to use SSLSockets)
Thanks for the tip, i’ll add that to the todo!
Very cool.
Feel free to make a pull request if you made any changes 😋
Thanks 😊
JPMS *can* do this, the other comments aren't the whole story. The issue is it doesn't do it by itself. Java 9 provides APIs that can be used to load conflicting modules into a single module graph, and it improves classloaders in various ways. However, this can rapidly get very complicated (imagine a library that uses Netty 3 stores an object from it in a global variable that's then passed into a library that expects Netty 5). It's up to another layer of software, app containers, to resolve the conflicts and tell the JVM how to link the app together.
You could always make the sendPacket method return a Boolean indicating successful or unsuccessful packet transmission
IntelliJ? It's Ok, mostly it borrows feature ideas from Eclipse, so does Visual Studio. At least Microsoft gives away a functional version of VS, JetBrains' IntelliJ Community Edition is barely usable for web development, similar to what we called Crippleware in the 80's and 90's but the Ultimate version is good, I wouldn't pay for it but they do at work.
I am not able to create native image. I got "zlib.h not found" Looks like Graal VM adds the disadvantage of compiled language within java ... 
With CSRF protection, you can make interacting with the API hard enough that the user would have to implement traditional web browser functionality, such as parsing HTML to get the CSRF token. If you want to get more elaborate, you put the CSRF token in generated Javascript, now requiring the non-browser client implement a JS engine, and if you want to be extra evil, have that JS check for the existence of browser APIs, which would require server side JS engines be tweaked to simulate parts of the browser platform. The idea is that you want the user to come through the browser, not through a bare HTTP call, so you make the client jump through a lot of hoops that a browser would not have to. Since the browser platform is open, it is impossible to prevent outside access, but you can make things difficult enough that the non-browser client would have to simulate large parts of a browser, to where it's pretty much the same thing. You have to go through the UI.
The best is https://github.com/tdunning/t-digest It’s made by a real mathematician. It’s deeply tested with published papers behind it. 
or even compile it binary with GraalVM
I prefer exceptions in this case. A failed transmission isn't something to quietly ignore (i.e. if you never capture or check the return). You can also have a greater variety of errors (e.g. timeout, no sockets available) instead of just pass/fail.
In my head I was thinking something akin to PHP PDO functionality in which it won't throw an exception but will return true or false and you can call getLastError for further information if necessary
You can easly make that outside of the program. Surround it with try / catch(Exception e) and return false if it gives an exception. Cool idea though.
Actually, you should call both in every run() finally clause. /s
https://shipilev.net/jvm-anatomy-park/. This was a good link that was shared.
Imo gradle is fine. The only issue is dealing with deps conflicts And a notation to automatically upfate deps But that likely exists as a plugin
[Bazel](https://docs.bazel.build/versions/master/tutorial/java.html) is gaining popularity. We recently started using it at work. I miss Maven. 
To me those are the wrong kind of questions. What problem do you have with the existing tools that new tooling should solve? Just copying existing tools because reasons doesn't help anyone.
&gt;You probably wanna change the xyz.baddeveloper package name, as it seems like a placeholder for me. it's a real url though...
I had a wish list once or designing a new build language/system. Here's what I had on the list IIRC: #1: A real language with a real grammar. Only developers write compilation processes anyway, why waste time with a verbose declaratory file format like XML, YAML or JSON. Those are less flexible and more prone to errors and end up wasting our time a lot. #2 Make it compiled and kick the interpreted language habit out. Every build system I've ever touched is somewhat interpreted. I want to have good IDE support, which means indexing, auto-completion and advanced analysis tools. Opening a gradle file in Idea to me is still painful. It's wrong in many cases and it's completely slow on auto-completing anything. #3 No VM required to run the build. Get the compiled byte code to a stripped down runtime just like an interpreter would, but you interpret the byte code not the language #4 The grammar needs to be simple, clean and concise without excess. I don't care for lambda functions in a build file, it makes the exercise of maintaining too freaking long, specially when you have devs who think they're artists and need to have pretty code everywhere. #5 I'm fine with the way Maven dependencies work. What I don't want is to see blocker hell where a project can't even be built because the dependency system is "trying to help you". In other words no feature enabled by default. #6 With #5, the archetype system is a must or any kind of templating, inheritance or inclusion instructions is needed.
&gt; Do you want an npm like experience for Java NPM (the registry) is a complete shit show and the maven repository is much more stable/deterministic. It would be nice if Maven central can serve up metadata such as a link to the github repo and a short description of the artifact though. The CLI of NPM/Yarn is somewhat useful (much prefer adding dependencies via the command line than hand editing the package.json). &gt; Gulp/Grunt/NPM scripts/Flavour of the month build tool in the node.js world The Java ecosystem is just so much more stable and you don't have to re-learn the latest and greatest opinionated build tool every few months. Granted, tools such as gulp and grunt are so flexible but gulp/grunt builds can be hard to maintain. If you like reading through build scripts to try and figure out what they're trying to do, gradle and ant have you covered! 
Yeah, its my website.
Care to expand on this? I am considering a move to Bazel (or Buck or Pants for that matter)
Instead of `AssertionFailedError` you can use `java.lang.AssertionError` or create your own exception, so you don't have to depend on junit at runtime.
I would like to be able to specify the gpg key that the package is supposed to be signed with, or some other form of trust anchor. That way i don't have to trust the people that runs the server with the packages, I only need to trust the author of the packages.
&gt; This has resulted in two very entrenched camps... Has it, though? I mean, both Maven and Gradle use the exact same dependency repository format. In a sense, they are two "API's" that sit on top of the same "database". For 90% of users, they are far more alike than they are different. If I'm working on a project that uses Maven, then I'm fine. If I'm on a project that uses Gradle, then I'm fine with that too. In the rare, hypothetical case where you're in a completely greenfield situation... and there isn't already any CI or build server infrastructure in place to bias the decision... then I'd probably pick Gradle, but only because I've been using it more recently. Most of the time, the build system is something you monkey with for the first week of a project, and then hardly think about ever again. Of all the things to have strong opinions on... this-framework versus that-framework, Java vs Scala vs Kotlin vs whatever, etc... I just can't imagine a build system being the hill to die on for any reasonable person. I likewise don't really have much interest in yet another alternative that points to Maven Central, either.
Thank you
I'm also curious on this. Not looking to make mock objects, I'm looking to run and test against a running (test) system with real database, etc.
Sorry. I never tought someone would call himself/herself bad developer voluntarily.
Bazel is a pile of shit for java. Prepare to feel like your asshole is being grinded out with a 5 inch thick rusty drill. 
I have a daemon thread running in the background that just rolls random numbers every fives minute and when it hits 1/1000, it send invokes stop and destroy on another random thread to keep the QA testers busy. How do I upgrade to the new version without these features? 😞 /s
Hahaha 😂
So how do I patch this crucial but ancient and unmaintained library without accessing its private variables in Java 9+ ?
Looks nice. But no tests? Hard to trust and they are compilable (example) documentation
There’s a small documentation in the readme. CircleCI auto-tests it. https://circleci.com/gh/StijnSimons/LWSL/tree/master
Lol
&gt; Do you want an npm like experience for Java? Oh god, why would we?
Drone with a robotic arm flying through the server room, unplugging random cords.
Declarative is so much easier on the long run imo. I don't like disecting and debugging a complex build script written in some DSL (gradle wave).
But in theory it’s amazing. 
No, npm and all the JavaScript ideas should be left for JavaScript developers. Gradle and CMake for Android projects 'cause Google, and Maven for everything else.
Sure. We've only been using it for a couple of weeks, with Java and Kotlin. I've tried to stay away from most of it, but some issues that have come up: * It's a lot more work to setup (one build file per package?) * We couldn't import kotlin-jackson-module (because it has inline functions?): https://github.com/bazelbuild/rules_kotlin/issues/18 * The IntelliJ plugin didn't work with the 2018 version of IntelliJ until very recently * The IntelliJ plugin seems pretty clunky/tacked on compared to the "native" support for Maven * There are fewer plugins available. I could easily deploy things using Heroku maven before. These might all be solvable issues, it's just that I don't particularly want to solve them. I'm not crazy about Maven, but it's very well supported, and it works fine. Sure, it takes a while to do `mvn clean install`, but if you're running from an IDE it's more or less instant. 
You keep an ancient Java 8 installation around and eventually upgrade the code to something else. 
Thank you, @DrDeprecator
A lot of what you pointed out are problems Gradle Kotlin is trying to solve.
Still runs on full blown JVM which is still overkill to me.
"Eventually" needs to be before January 2019.
there already is graaljs.jr. it's inside the graal ce download. of course, it should be on maven central along with graal sdk and truffle api, but I assume it will be soon. In any case, you can pull the graaljs jar and the tregex.jar that it depends on out of graal ce, put them on your classpath, add graal sdk and truffle api to your maven library dependencies, and you have a working polyglot engine for js on openjdk
Just use Maven. Yes it's XML - get over it. If your objections are that superficial consider yourself lucky, there's more important shit to do.
 It would be nice if Maven central can serve up metadata such as a link to the github repo and a short description of the artifact though. That's in the pom
I meant it would be nice if that metadata can be extracted from the pom, indexed and presented on https://search.maven.org
+1 I’d rather not make Java’s dependency management “ecosystem” look like JS, with 35 different solutions to solve 10 different versions of 5 different problems, with one building on another. Just trying to get started with a simple node.js project requires waaaay too much setup. More time should be spent improving existing solutions vs creating new ones. 
What you’re asking for is not really supposed to be within the scope of unit testing. It’s more integration testing (which you referenced). Take a look at JMeter. You can embed it within your application as a library and make an external integration testing solution. You don’t HAVE to use it for load testing, it could simply be send one request, check the return status code, check the return value and move on). There is an argument that JMeter may be overkill for that, but it provides an easy way to verify the return, allows you to set it up using JMeter desktop app and then you can move into testing latency under load. 
Why remove? Why they can't simply keep functions throwing as it is not? There are loads of code, e. g. legacy libraries, which contains parts which are never executed, but still need to be compiled. Those JDK developers simply break these libraries with no profit at all. Visibility of work instead of providing a value. Typical Oracle. Oracle Java is doomed, and maybe it's a good thing for other better programming languages and environments.
&gt; Thread.destroy() has never been implemented, and it has always thrown NoSuchMethodError to the caller. Thread.stop(Throwable) was changed to be non-functional (it throws UnsupportedOperationException to the caller) in JDK 8
&gt; Thread.stop(Throwable) was changed to be non-functional (it throws UnsupportedOperationException to the caller) in JDK 8 This doesn't answer why method should be removed instead of keeping it non-functional.
&gt;With Java projects we really only have two options when managing project builds and dependencies; Maven and Gradle. No, you also have Ant + Ivy, which I thought was the foundation of Gradle.
There is the nebula plugins for that. They should be what you need for older versions of gradle. For 4.8, I guess gradle has native support for resolution rules.
It clutters the API. At some point it’s not unreasonable to expect people rewrite or recompile
Why bother taking your trash cans to the curb every week, you've already put the bag in the can?
Try http://mvnrepository.com/
Why in the world would you want to keep obsolete, non functional code in any codebase? 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Why buy a drone when you can employ a cleaner with a hoover?
You can still use JVMTI to cause a thread to throw any exception asynchronously.
Gradle user here. I still like Maven, but Gradle is making our lives much easier. We first moved to Maven (from Ant and no dependency management) about 18 months ago. Then moved on to gradle to take advantage of incremental builds, etc. Now we're experimenting with skipping the war step for local builds and adding a `./gradlew project:fast` option that copies everything to our tomcat location and bounces the tomcat server. That's another 15\-20 seconds per build saved. Now a full build has gone from \~2 \- 3 minutes (or longer for older machines) to about 1 \- 1:15 in build time. If we skip the war step for subsequent builds that's 40\-45 seconds per build. Take in the incremental build portion and if your scope of work was limited to just JS or Java, then 20\-25 seconds tops. Depending on the breaks. &gt;Do you want an npm like experience for Java? As others have already said, definitely not. With `groupId`, etc. it makes it near impossible for collisions of names and the the process to have a library removed is extremely difficult. Basically if NPM had followed an already established model, the `leftpad` fiasco would never have happened because Kik wouldn't have thrown their weight around because they would be identified by their `groupId`. That and `leftpad` wouldn't have been able to be deleted in protest. The other big misstep of Node / NPM is not having a single global `node_modules` location. I have \~10\-15 gigs of `node_modules` on my machine from various projects. M`y .grad`le `/ .`m2 directories are 3 gigs in comparison. Adding libs command line could probably be done with a plugin. But to make that useful, [mvnrepository.com](https://mvnrepository.com) would have to have those options available like npm does. But as it is adding one line to the dependencies in `build.gradle` file is just as fast. &gt;How would you manage your dependencies? yaml, json? I think the syntax is good enough and no need to bog it down with JSON or worry about yaml and indentation. The Groovy syntax takes a bit of getting used to, but outside of unfamiliarity it is not that bad. &gt;Would you have another JVM DSL that then encourages multiple implementations by different teams; think Gulp, Grunt or Yeoman tools for node.js? Gradle runs tasks just as well as Gulp or Grunt but faster and in parallel when you allow it to \- so some of our newer build scripts is just calling Grunt as Grunt still has its place for some of our front end stuff. But I can now run them parallel via gradle and have my next task wait on all three of them to complete before building the war, etc. and fail the build when appropriate. (We used `grunt-concurrent` for a bit, but realized that it never actually failed the build!)
Why? You’re writing Java software to run in the JVM.
What about using a Java library for building projects, with regular Java.
The purpose is not the same, we shouldn't run a virtual machine just to orchestrate a build process. I have no issues with writing full blown applications in a VM, that's just not the same scoping.
Because my initial thought was that ideally we shouldn't run a resource hungry virtual machine just to do simple orchestration that can be achieved with a bash script. I run Gradle right now on Jenkins for 50+ builds and the gradle daemon is periodically killed because of x/y/z reasons (probably memory). I know it can be fixed, but why should we bother? If this thing was just a normal process that builds and exists with very little bootstrapping (e.g. not a vm), I'd be happier.
I'm not brave enough to throw my own OperationUnsupportedExceptions, so I invoke this and the JVM throws it for me! Why would they just break my workflow like this??? -- someone, probably
The Doctor asked me to say "You're welcome."
See also: http://marxsoftware.blogspot.com/2018/06/good-riddance-thread-jdk11.html
It may be unmaintained but working library (or even third-party lubrary) with parts which are not used. API removal requires explicit change to that library which may be complicated in large projects. 
https://xkcd.com/1172/
Trash cans occupy space in the bin, but having unused source code is cheap (now we have terabyte hard drives), but being forced to update that code is on contrary expensive, because it requires human intervention.
Imaging a library which was not patched for several years. Nobody cared about that library until today when compilation of the large project broke. Developers must not break backward compatibility unless it’s necessary. Method removal is not necessary. 
Just stop. 
So it should be kept around because some library is doing something like: try { thread.stop(); } catch(Exception e) {} //LOL ? Hell no.
I'm really surprised that Subversion issue is so low that it's within the "Other" category.
JVM startup times aren't that large though. Don't most build systems already simply interpret build files.
God damnit people are asleep and I'm dry heaving trying to not laugh XD I love this
I see /u/stepancheg's point. It _at least_ deserves a proper discussion and not auto-dismission with "just stop". And it probably has gotten, in proper fora. I've personally worked with legacy systems where just the act of deploying it would require a day's or more work. In addition we've got to track down John who quit a year ago because no one remembered to ask him for the password before he quit. Now if the sole reason for me having to do that is because someone removed a noop method then I'd be mildly annoyed. Not pissed but annoyed. Library developers need to take the cost they're inflicting upon consumers world wide into account. Again - they probably have and I support this decision 
This looks pretty cool, though I'd probably not past long at a company where things were so locked down that I couldn't install apps that I needed. Also, might want to list which apps it installs in the Readme so people understand what they're getting. I dug into the scripts, and it looks like Java, Maven, Eclipse, Node, VS Code, Atom Chromium, etc. Also, I'd make IntelliJ Community edition a possibility as it is more popular than Eclipse. Also, maybe Tomcat or TomEE and the JDK API docs. 
Except if you're a library developer and relied on the implicit dependency in the past :)
There is "polyglot maven" and I once had a coworker who was proud of his YAML Maven config ... However, I think he wasted about a week to implement it and no code snippet from the web (e. g. depency xml block) works out of the box, but he liked the syntax better.
I haven't used it yet, but [Kobalt ](http://beust.com/kobalt/home/index.html)is a new build tool for the JVM.
Well, there are companies still running 1.4 in production with Red-Hat 5 servers....
When java 11 hits this becomes obsolete, I believe with the built-in websocket capabilities.
Websockets aren’t the same as sockets. Even then, not all prople rely on the same standards
Still more-or-less using the same idea, json packets shot back-and-forth. Not 'exactly' the same perhaps, but chances are if you're just going to be slinging json packets back and forth.. You're probably just going to use websockets.
Could be. Until then, there isn’t anything like it.
[Actually there is, its just experimental.](https://docs.oracle.com/javase/9/docs/api/jdk/incubator/http/WebSocket.html) I've been using it with relatively consistent success though; and I hear the changes going into JDK11 finalization are minimal.
No, thanks. Gradle is fine. 
Would the hasIpAddress method work here?
http://projects.spring.io/spring-cloud/
I wouldn't use something like this in a production environment. I'd suggest you handle exceptions or allow the user to and add some level of logging so that admins have some idea of what's going on. There are a few other quirks in the code base but it seems like inexperience if anything. Seems like you've tried to create a REST api if anything. This is very strict to JSON - my application doesn't use json so I couldn't use this even if I wanted to.
Agreed. I find it hard to understand the craze of using json or yaml these days. Sure it's a bit more compact, but you lose the schema that allows putting documentation, autocomplete and validation straight to your editor/IDE instead of having to search the web and constantly tabbing back-and-forth. Maybe having dependencies as a single element with group/id/version as attribute instead of element would have been better, but there are plugins that help with this, e.g. https://plugins.jetbrains.com/plugin/10580-laconic-pom I also prefer my build **descriptor** to not be a turing-complete script.
Similarly SoapUI which also supports Rest APIs. This can also be used for Maven testing through a plugin and work quite nicely with variables and prerequisites etc.
I just want maven with a terser xml format and some of the performance improvements that Gradle has, like a build cache. 
It doesn't matter what code does if it is not executed. It can be something like `MyLittleThreadUtils` in some aux library, which is never called or something like that.
Thank you for the advice.
Arguably, statisticians aren't mathematicians. Probability theory is a branch of pure mathematics. Statistics is in a way more akin to science than math, but can also be practiced in a purely theoretical way (which I guess makes it more like "applied math" than science) :D
So your solution is just to always let that stuff in no matter what?
Also, Gradle
or https://javalibs.com
As a member of an "overbearing" IT department, please understand that in large organizations most times it is not the choice of whatever technician you get, but a policy set in a lot of cases by an overbearing Security Office that is a separate group and has zero stake in end user experience. I would love to do things again that allowed my users to be more productive and subsequently take some burden off of my own shoulders. It makes my life easier when my users are happy and honestly is the best part of my job. That being said I can't wait to finish my CS degree finally and hopefully do more developing than what up to this point has been a hobby and this automation project is an amazing idea that I will point any users I have that need it to.
It depends. JDK requirements on backward compatibility are much stronger that requirements for other libraries. The code should be deleted only when it's necessary for some reason. For example, CORBA was removed, because it occupied too much space in the resulting zip.
I have a work laptop that sucks pretty bad as far as being locked down. Binary executables save me from going crazy, that said, I'm a contractor there, so I do the dev work on my companies laptop, drag and drop onto slack, and then run slack on their laptop (which is definitely NOT approved)
Maven and Gradle are much\-much more than dependency managers. I use my Maven descriptor with specific goals in a Gitlab CI file to: \- automatically close a \-SNAPSHOT version, increment the build number, and start a new \-SNAPSHOT version \- commit back everything to git \- create Docker images of a Spring Boot app from Dockerfiles and push them to a remote Docke registry All with Maven, for a Spring Boot app running in a Docker container. This is so much more than managing the compilation class path for you.
I plan on having an article on this very subject soon 🙂 If you can’t wait, the article will, in part, be based on this presentation. Link to the code is on that page as well. Long and short for your Q: check out [Spring Cloud Contract.](https://cloud.spring.io/spring-cloud-contract/) 
i would much appreciate if you share the link here or make a new post in r/java!
Yea I’ll post the article here. In my initial post, not likely. If I do cover it, it would only be at the contractual level, is the auth header present? is it a valid format? Deeper stuff like, is the auth expired? Are the correct roles present? Likely won’t be included as that gets too deep into implementation issues. 
Gradle user here, I love you gradle! (maven is ok) Check out gradle kotlin dsl a year from now(its a pile of garbage currently) but they are working on it. I know lot of people don't like groovy. no npm thx! never used make really so ye dont know, but honestly I dont think so. I use as much json as I can, because everybody knows json. 
Gradle seems great to me, gives you the build by convention of maven and the power to customize your build however you see fit like ANT. It is the best of both worlds. Right off the top of my head I can't think of anything I would do differently in a greenfield build tool.
&gt; which I thought was the foundation of Gradle ANT is a first-class citizen in Gradle but ANT is not the foundation of Gradle. That ANT support is probably less important these days, but certainly made it easier for people to migrate from ANT to Gradle when that was going on in earnest. 
Things maven is missing are ideas we can take from Bazel/Buck: - Incremental compilation for class files - Doing smarter checks on skipping modules if nothing has changed - Skipping some modules based on the ABI of the module (generate an interface jar) 
That'd be a moot argument these days with the module system going in and allowing builds to be done with minimal output. Then again, one of these has been deprecated since.. Java 1.2?
Have you looked at the Gradle Kotlin DSL? https://github.com/gradle/kotlin-dsl
yes...
Cute dog in the thumbnail.
Don't be silly, you don't need a robotic arm. You just need a drone with unshielded props.
I think I had encountered some small issues from 3.9 -&gt; 3.10 as well. I believe there was a change in the generated classes to use OffsetDateTime rather than java.sql.Timestamp (generated from a Postgres schema). It wasn't a huge deal, as I wasn't using the generated jOOQ classes as my application model.
And there's more stats related stuff in commons math; distributions, linear algebra, and least squares.
aka a chopper
It looks like in your [submission](https://www.reddit.com/r/java/comments/8qd5kl/why_have_an_abstract_class_with_no_methods/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Oh boi
jshell?
Dude I am completely a noob in this so ... Lol
Hackerrank.com or codefights.con
Let me check , thanks 
Yes I need to improve the readme quite a bit but I wanted to start getting more feedback on the project. If you're so inclined I'm willing to review PRs for adding other tools if you have the time.
"All I see are the apps where they teach you to learn Java that's all" what do you mean by that? 
I meant no disrespect to overbearing IT workers. I used to intern as one of them at a help desk.
Your use case is similar to my motivations for making this in the first place.
/u/waqasvic I think you are confusing a full programming language ( Java ) with scripting languages like Python, where there are commands you can run like shell commands. Java doesn't work like that. If you want to learn Java make sure you have the JDK installed on your computer. That, a shell command console, and a text editor ( Notepad on Windows ) is all you need to start. Go to the Oracle site, follow their tutorial, then go to Amazon and get a highly rated Java book for beginners. Avoid "learn Java fast" titles, you will get a shitty education. Java is one of those things where you take time to learn it right and get a big payoff. 
You don't need to change anything. Non-module code can still use reflection on other non-module code without restriction.
Oh I'm not offended at all, haha. Need to have thicker skin than that to work with end users. Nah it was more a general statement, because I run into that issue on a daily basis and had legitimately just gotten off the phone with a user complaining about how "locked down our computers are" (I work for a state organization that in the last decade lost a bunch of PII). Sorry if I worried you about that!
Any plans to @Deprecate [VK_SEPARATER](https://docs.oracle.com/javase/10/docs/api/java/awt/event/KeyEvent.html#VK_SEPARATER)? ;)
Current CVE scanners can't scan your image if you don't have a package manager in them. I use distroless only for Go binaries that need ca-certificates and nothing else. 
I haven't compared the search speed, but IntelliJ search is pretty fast, even in big projects. And IntelliJ has structural search and replace, what can be useful sometimes.
[Compare Hello World in java with one in python](https://qph.fs.quoracdn.net/main-qimg-4b668ad2c9f0185fc11c6eddeb0590cc-c)
Well, that question comes with a little nuance. An interface is a static concept. In runtime there no "interfaces", just objects that **implements** interfaces. The general answer is "Yes". 
http://www.learnjavaonline.org/ is a browser app. You can type and execute code in the small area below. Went there through the google search https://www.google.de/search?ei=CHEfW9_XAY2kwALZgpz4CQ&amp;q=online+java+shell+learn+java&amp;oq=online+java+shell+learn+java&amp;gs_l=psy-ab.3...2270.3245.0.3403.10.10.0.0.0.0.119.665.9j1.10.0....0...1c.1.64.psy-ab..0.5.371...0i8i7i30k1j0i8i30k1.0.5qthIRMnrjs
Best, you head over to /r/learnjava and read the *sidebar* there. The *Free Tutorials* section lists some excellent learning resources that all have a "Getting started" section that tells you what you need, where to get it, and how to set up the development environment. In particular, the MOOC [Object Oriented Programming with Java](http://mooc.fi/english.html) from the University of Helsinki is highly recommendable. On Android you can use *AIDE* to enter and execute Java programs, but I strongly recommend using a proper computer.
/r/learnjava is for learning Java.
Like I wrote, one is a scripting language and one is a general programming language, two different animals designed for two very different sets of tasks.
Wouldn't you always at least want busybox in order to inspect your container for information in case problems pop up?
 That was my understanding too before i read the article. What happens is actually equivalent for most purposes (i cant think of a counter example but that doesnt proof anything). 
That is a weird way of doing this. Makes me wonder why they didnt make an explicit parent interface IObject or something. 
I assuming it comes up when doing reflection, e.g. when iterating over the methods declared in a type. But Java does also provide a method to check if a method is synthetic (added by the compiler rather than by the programmer).
Thanks for the feedback. Indeed, there had been a few unfortunate glitches around the support for JSR 310 types
In my opinion: There might be a few valid use cases for this, however that would require proper documentation. The example you provided doesn't seem to be one of them. In general, an abstract class is mostly used to extract common functionality/properties from the subclasses. By making a class abstract with no actual abstract methods can signal the developer that using this class directly, without extending any of the methods from the superclass, is not the recommended use case. Having no methods at all, might mean that the class should be used as a marker superclass (like Serializable). Without further looking into your example, I can't say what it actually does. For me, it would be better to declare Transformer as an interface rather than an abstract class. Having no declared methods might mean that some reflection based framework would use this class, based on the methods you actually write yourself. Like writing some transform() methods with some arguments, and the framework would choose an appropriate one to call based on the arguments. But the again, without proper documentation, its hard to say. I've also seen some examples that are just plain bad API design. 
If you read the comments on that post, this guy ripped the content from another blogger. OP is an asshole.
One could argue that Interface does not inherit from Object, but it's implementors do. That's why Serializable.toString() would still work...because whatever is implementing Serializable will have a .toString() method.
Thanks for that. I was under the impression the Gradle was using Ant tasks under the covers but it appears that it will support Ant scripts directly and give access to Ant tasks via AntBuilder.
Right. The method would exist in runtime. But the code wouldn't be a valid Java program without this part of the spec.
Agreed
If you're not wanting to make an executable jar then what you're looking to do is create a self-contained application that bundles the JRE with the code. There's a number of tutorials on the web on how to do that, you might want to look at [Oracle's packaging docs](https://docs.oracle.com/javase/10/deploy/self-contained-application-packaging.htm)
Not trying to troll here, serious question, why would you build a distroless docker image that has nothing but your application and not just compile the application directly for the target platform? Is it security or platform mobility or some other benefit that you are looking for by putting it in a container?
Come friendly bombs, fall on [java.util.Date](https://docs.oracle.com/javase/10/docs/api/java/util/Date.html).
I'm guessing Object.class.isAssignableFrom(SomeInterface.class) would return false though not in a spot to verify.
One option is to make a batch file: put a JRE in a subdir and make a batch file that calls javaw and references your jar?
&gt; IObject Urgh, I think I threw up a little in my mouth. The C# convention of using I in interface names just looks wrong to me. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Once upon a time spring was about replacing complicated ,designed by comity, J2EE api's into something far more easy to use without having to use a heavy framework Now it appears they want to do the exact opposite. https://viralpatel.net/blogs/html5-server-sent-events-java-servlets-example/
Most of the "content" that this certain person publishes is ripped off somewhere and unfortunately changed for the worse. Sorry to read that it also caught you.
Imho "Manager" and "Advisor" are too general. I'd go with "Chooser" or "Picker" maybe "Selector" because they are more descriptive.
Sounds like you are trying to use a strategy pattern. If so, the class name should end with "Strategy".
You're literally describing a \[Factory\]([https://www.oodesign.com/factory\-pattern.html](https://www.oodesign.com/factory-pattern.html))
Unit-Test each service in isolation, add an integration test from the user perspective (browser-based testing with Selenium Webdriver).
In my example that's true. So do you think including the pattern name in the class is a good idea?
Nice.. as one who is all about good API design.. I will admit when I first saw this I thought you were giving a slide show on how to develop a good REST API using Java technology. E.g. JAXRS, JAXB, etc. I find today that it is somewhat misleading and/or confusing to refer to what is usually an SDK as an API, even though they are more or less the same thing. You design your SDK API (which is what you are referring to). I wonder.. if today when API is so synonymous with REST and 3rd party integration via http/rest calls, if it might be time to either coin a more specific name that represents SDK API, or if when referring to an API that is wrapped in an SDK and not a micro-service API, it should be specifically declared as such? Not trying to cause any sort of chaos or piss anyone off... I am just eluding to the fact that today the use of API is used in a lot of similar yet different contexts, and while underneath they still mean the same (or similar) thing, I am sure I am not the only one who gets confused (even for a short while) when the use of API is referring to an SDK API. Thoughts?
 Yes \- that's the usual convention and works for most patterns (e.g. Factory, Command, Visitor etc). There are some deviations e.g. Observers are usually suffixed with Listener instead
While I don't use it because Oracle is the sole owner, the popular choice of late is https://www.graalvm.org/ (specifically the [AoT compiler](http://www.graalvm.org/docs/reference-manual/aot-compilation/)).
Launch4J sort of works though can be tricky to handle automation. Gradle can generate solid start scripts for Win and Unix in case that's enough for you (.bat for Windows, Jar in a folder next to it)
From documentation. &gt; Specifically, this method tests whether the type represented by the specified Class parameter can be converted to the type represented by this Class object via an identity conversion or via a widening reference conversion. See The Java Language Specification, sections 5.1.1 and 5.1.4 , for details. Funnily enough, this Javadoc is out of date, as 5.1.4 is now 5.1.5. Anyway, 5.1.5 is like: &gt; A widening reference conversion exists from any reference type S to any reference type T, provided S is a subtype of T (§4.10). Interfaces are subtypes of Object due to 4.10.2, as mentioned in the linked post. So it returns true.
How does it "pick/choose/manage"? Meaning do you call it with parameters to describe the kind of object you want and it choses the appropriate implementation? Or do you just call a method without parameters and it provides you with an implementation defined at startup / context creation?
A little bit unrelated but... what's the point of sharing slides? I feel like it's incomplete info, and I'm losing all the extra value a conference/seminar has. 
It is probably a marker class. Just a way to mark all those class and maybe do something with them in a grouped way in the future.
Sounds more like Factory.
It's actually quite useful because it makes it easy to find interfaces and their matching default implementations (e.g. `List&lt;T&gt;`, `IList&lt;T&gt;`).
Videos of my presentation from various conference will come online eventually, but I get asked on Twitter and in emails from people who can't be at my presentations if I can share my slides, so that they may learn as much as they can. I guess another way to put it is if there was a downside to putting these slides online for people to potentially learn from, I wouldn't do it - but all I can see are benefits. I've received many dozens of 'likes' and comments from people on Twitter (see @JonathanGiles) thanking me for the slides, so it doesn't seem to be all that bad :-)
Doesn't the AoT compiler currently only do linux?
I would hope context would help out a little bit here - a *Java API* should refer to an API used by developers to create something in Java. Creating a *REST API using Java* is what you assumed I meant, but your way of clarifying it is also the correct way to state it to avoid confusion, in my opinion. I would hate to see the original definition of the term 'Java API' be replaced by a newer definition, when there are perfectly good ways to separate them (Java API vs REST API using Java). It's like people complaining that when you say python, you never would have expected them to mean the snake (even though it was around a lot longer than the programming language) :-) FWIW, an SDK is typically regarded as a superset of an API, as it also contains documentation, code samples, and other materials.
I love slides. When done right you can grasp the core message in a few minutes instead of listening to a presentation that lasts for hours. I found these slides to be very well suited for reading.
That was the case originally but I haven't checked lately. Granted I have seen [substrate VM commits for Windows support](https://github.com/oracle/graal/commit/205e604f9b1cc9719974a550639457217052e52d) but I think the Oracle JIRA referenced is internal.
Yeah, I sounded a bit harsh in my original comment. I did not mean to look down on your effort to share knowledge. Thanks for sharing your presentation, I forgot to say it!
Ignore that, Gradle is the spawn of Satan!
fair enough.. i like it. good luck on your session.
I guess it's also interesting what Server Sent Events are: [https://www.html5rocks.com/en/tutorials/eventsource/basics/](https://www.html5rocks.com/en/tutorials/eventsource/basics/)
Forgot about that, you're right. Unless it is using reflection on the JDK itself such as sun.misc.Unsafe or private constructors for performance reasons (e.g. what Eclipse collections did).
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
**Marker Interface** Real Time example with parking system Introduction: Marker Interface in java is an interface with no fields or methods within it. It is used to convey to the JVM that the class implementing an interface of this category will have some special behavior. Hence, an empty interface in java is called a marker interface. Marker interface is also called tag interface by some java gurus. In java we have the following major marker interfaces as under: 1. Searilizable interface 2. Cloneable interface 3. Remote interface 4. ThreadSafe interface 
If this really works, but only if this REALLY works, it would be amazing!
That's a great idea
You should try it out, I think you'll be impressed
count down until ML makes software engineering obsolete?
I'm sceptical. First, as someone who still has his training wheels on, this is more confusing than helping to me (but that's a personal opinion and I think with time I'll have my own snippit DB of stuff I type over and over again). Seeing as it pulls from public code, how do they ensure decent code quality? Also, what about naming conventions? I'll be sure to give it a spin though.
Shameless plug: I was hoping to see a mention of tools like https://revapi.org that try to help people avoid accidental API changes, but then again that's maybe a little bit orthogonal to API design itself..
Please see the updated readme.
I use this for Java streaming examples since it's so close to the code in eclipse. It's usually better than searching in Google.
Are you using Grade or Maven as a build tool for this project?
10 yrs 
Microsoft built this using Bing code search a few years ago. [https://blogs.msdn.microsoft.com/visualstudio/2014/02/17/introducing\-bing\-code\-search\-for\-c/](https://blogs.msdn.microsoft.com/visualstudio/2014/02/17/introducing-bing-code-search-for-c/)
Seeing this makes my toe nails curl up. It looks like the perfect tool to spill even more unmaintainable boiler plate code all over the place instead of striving for a less cluttered approach that is designed to avoid needless repetition of the same statements and types.
This is pretty much what [IntelliCode](https://techcrunch.com/2018/05/07/microsofts-new-intellicode-is-a-smarter-intellisense/?guccounter=1) delivers.
Short answer: pointless. Long answer: it is pointless to have an abstract class that is completely empty.
I'll try it tomorrow.
&gt; Your code stays private &gt; Codota doesn’t upload your code to the cloud. To learn more about the information that’s being sent to our servers to provide code insights, check our FAQ From the FAQ: &gt;Codota only extracts an anonymized summary of the current IDE scope. It does not access other files in your codebase, and does not access other resources on your machine. The anonymized summary sent to Codota is only used for prediction and suggesting code to the user, and is not stored on our servers. &gt; Codota does not track individual keystrokes, and does not transmit values of literals (such as the content of Strings). All communication with Codota servers is done over https. In other words, it sends your code to their servers, but they promise it will remain anonymous.
Greatest programming language ever and for ever!
trying it out. It provides a keyboard shortcut that searchs for code snippets. The first result is javadoc. the others are from spring boot projects, I'm guessing it simply searches the most popular open source projects. Haven't experienced any dynamic synthesis of code yet ?
Concur that it’s similar to the other massively overhyped products in this space. Feels very similar to when blockchain started taking off and a marketing page netted you $100 million.
Wow, thx for the details
It does make me wonder why they didn't just make it a marker interface instead.
Its’s not AI,it’s just a bunch of if statements (This is joke please don’t roast me)
Lol yeah ok. Any developer worth their salt knows this will never happen.
AI is already taking over every other job, might as well take over programming too
Ehhhh in the field we're in, you should know better than to say never. 10 years is wildly, fantastically unrealistic, but who knows what AI will look like in 100.
I think it will be less than 10 in certain areas. Most business web apps are fairly easy,, but it will depend on NLP advances 
Good point. I will try to work that in to my slide deck for the next time - I have used revapi in the past so I am familiar with it.
I think the joke is that it's always 10 years away.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I'm not sure what that would even look like. Even if the code is easy, it will never be easier than writing the specs right? Somewhere somehow we have to define what we want to do.
Looks good man. When I get time this weekend, I will give a test on a brand new Windows 10 VM. This would be awesome if it worked as a non-admin user. And if I get time this weekend I will try to find a group policy template for Windows domains to test. Because the average corporate user's desktop on a domain is why more locked down than a home user. If you need access to a Windows domain server license for testing, let me know - I have some unused MSDN accounts and some free Azure credits. 
Quality is ensured based on the popularity and reliability of sources (i.e., a highly-upvoted Stack Overflow answer or official API doc will show up at or near the top when searching and will affect dynamic completions far more than a random or downvoted snippet).
Thanks man! My original motivation for this project was a pretty locked down corporate Windows machine that I got tired of asking permission to install or change versions of any software so I set out on this journey of portable-only software and I'm loving it! Definitely let me know what your results are. I'd be curious to know what the group policy would secure that would prevent this from working.
As for the search, I‘m pretty sure it does a lot more than just search popular projects. What did you search for when trying it out? As for dynamic completions, they definitely work for me. It gives me options for completions after I type the right side of a line, and it even prepends Code when necessary.
&gt; I‘m pretty sure it does a lot more than just search popular projects. Why ? I haven't had a single completion offered its been "plugged in" all. I can switch to its search by doing x2 ctrl, from autocomplete as show in pic https://imgur.com/a/C0obMrV , but thats it. 
Oh, I was never worried. If you're restricting admin access to corporate machines to avoid support issues after they mess up their machines or limit damage malware can do, I totally get it. It's the other school of IT thought where users should only be allowed to run programs that are deemed "worthy" and "blessed" that I take issue with. This project runs counter to that philosophy.
I think you haven't actually seen the code synthesis in action - would be great to get it working and then give your review. To try it, please make sure that the Codota desktop application is running and connected to your IDE. We're going to remove that requirement very soon. Now, try writing in your IDE: PreparedStatement s = (import java.sql.PreparedStatement as suggested by IntelliJ). You should see a special Codota autocomplete menu popping up, suggesting you insert the term connection.prepareStatement(sql) If you choose this option it completes the statement for you and even prepends it to add definitions for "connection" and "sql". If you already have a connection in your context, it generates code that uses that connection. Now don't tell me that's grepping open source java projects :) 
Yeah, having worked directly with userbases in support for quite a while, they'll always find a way to fall victim to a phishing scam or malware. The worthy and blessed mindset of IT is ridiculous, that's an IT department that doesn't realize that they're there to support business operations not punish users, and you're right they exist and this project is totally necessary in those environments especially. 
&gt; PreparedStatement s = yeah, that then gets me the codata popup working. But I've been using it all day, coding for the past 4hrs - no other suggestions.
(Codota CEO here) Not exactly. To provide code suggestions, Codota needs some information extracted only from the file you currently edit (e.g. which APIs you used). It doesn't send the source code itself, nor does it send any information from other files in your project.
(Codota CEO here) OK, that mostly depends on which open source library you use. If you're using proprietary APIs that Codota wasn't trained on, it cannot provide suggestions unless you get it for your own code (talk with us if you want that). For open source, we cover many popular libraries, but obviously, there's still a lot of ground to cover.
Yeah there's a big difference in some corporations. Sometimes devs get administration access, sometimes at least they'll install what you want in moderation, and sometimes they just lock it down - only signed executables can run which would probably mean this stuff wouldn't work. I tend to quit or opt out of those third kind of jobs. 
(Codota CEO here) Boilerplate is a fact of life and depends mostly on the design of the APIS and the language itself. Given that boilerplate is required, would you prefer having to learn how to do the mundane wiring yourself? Isn't it better to have machine complete the boilerplate for you? The maintainability of the code depends on the developers, we just give them more powerful tools.
Which libs have you ~~grepped~~ trained your ai on ? 
Yes, because in Java every class ultimately extends java.lang.Object (including the implementor you will write for your java interface)
I found that the name of class on its own is usually difficult to convey much information. The package name helps, but what I think is the secret recipe for success is to come out with some metaphor which applies to the whole set of classes. So if you define the concept of Bean (nothing to do with the edible seed/fruit/veggie) then it makes sense to read classes like "BeanFactory"
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Hello There, Could you please detail? What is the minimum karma I should have to be able to post within Java ? Thanks
Ok, so I took some time out and had a look at the implementation in OpenJDK, while it's probably the most up to date implementation, it's mostly written in C\+\+, so needs to be compiled for each platform. I didn't try to determine how much it depends on internal JVM api code. I also looked at Apache Harmony's implementation and was pleasantly surprised, it's written in java, it's modular, and its only dependency is the well regarded asm bytecode library. It will be a lot easier to maintain. It's a little out of date, designed for Java 6 bytecode, but I think it's well worth getting up to date if we want to provide long term support. I've copied the module from SVN and converted it to Maven and it's already building and tests are passing. I think we should also look at implementing a Pack200InputStream. It can be found here: [https://github.com/pfirmstone/pack200](https://github.com/pfirmstone/pack200)
&gt;Isn't it better to have machine complete the boilerplate for you? Depends. How can we be sure that the machine doesn't suggest to insert exploitable code because it found many examples just like it? This is not much different from people blindly copying code from StackOverflow because it was the most popular answer there, even though it was not the *correct* answer...
I tried some time ago and I was not impressed \- it was nothing special. Let's see if there is some progress there.
Codota is a source of information, and copying blindly is usually a bad idea. Still, would you rather live without stackoverflow just because there are also incorrect answers there that people might copy blindly?
Actually, the answer is _no_. I recommend reading the article! :-)
That's probably not a good idea, you may have bridged it on the surface, as in you probably wrapped it with Flux.deffer() or something, but you will still pay the price of blocking threads somewhere. Your real problem is that Spring Boot is trying to autoconfigure your redis connection, but it's defaulting **spring.redis.host** to **localhost**. Have you tried setting this property to where your elasticache is located?
Its interesting that Spring has wrapped a standard in its own flavour, and shipping it out as a spring innovation. Using Server Sent Events is pretty easy
But it's not Spring article. And Spring didn't wrap anything.
But you need to somehow monetize your business... if you not getting any money from us directly (via sales or subscription) it must come from data... so question is what data you collect and what are you doing with it?
Monetization is based on a version of the product for professional teams for use with proprietary code bases (there’s a section on it on the site and on the FAQ)
That looks like premature over\-engineering to me. The author probably did that because \`BodyTransformer\` and \`SceneTransformer\` \*may\* have shared methods in the future (e.g. \`getName()\` for logging) but thats only a guess. There is no technical reason to have empty abstract classes.
Sigh... ``` A JavaScript error occurred in the main process Uncaught Exception: Error: libgnome-keyring.so.0: cannot open shared object file: No such file or directory at process.module.(anonymous function) [as dlopen] (ELECTRON_ASAR.js:173:20) at Object.Module._extensions..node (module.js:598:18) at Object.module.(anonymous function) [as .node] (ELECTRON_ASAR.js:187:18) at Module.load (module.js:488:32) at tryModuleLoad (module.js:447:12) at Function.Module._load (module.js:439:3) at Module.require (module.js:498:17) at require (internal/module.js:20:19) at Object.&lt;anonymous&gt; (/opt/Codota/resources/app.asar/node_modules/keytar/lib/keytar.js:4:12) at Object.&lt;anonymous&gt; (/opt/Codota/resources/app.asar/node_modules/keytar/lib/keytar.js:58:4) ```
What if you just said the specs and then gave it three example existing apps and it gave a few options ?
I really appreciate that you’re here, responding to privacy concerns! It says a lot about your confidence in your product! Wouldn’t you need to be sending the code on the line you’re typing at present? If that’s the case, over the lifetime of the program, most of the code would end up getting sent out. Not that it would be feasible for someone to reconstruct an individuals code, but does this change for a business?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Is it possible to Port this plugin to other IDEs?
Will play properly in a container and will respect system resource limits set by container manager.
My real problem is that the implementation of reactive and blocking Redis have no common interfaces. The AWS SDK implicitly creates a (blocking) RedisConnectionFactory, along with (blocking) RedisOperations, RedisTemplate, etc.... The problem of the host can be solved by manually querying the AWS servers for the URL of the Redis server and feeding it to the connection, but this way I'd be completely bypassing the SDK for connection management since the only type of connections that it can do is blocking ones.
They're a teaser and do contain a substantial part of the info.
Would be more useful if it had TLS support out of the box
I've thought about doing such a talk myself for quite a while, great material in there. A lot of stuff that I've seen many people do wrong is being covered. In my version, I'd be covering also how to work around a few of the missing features in the Java language without risking forward compatibility. These include: - Union types (very useful for API method arguments, need to be emulated through overloading) - Type aliases (very useful to give union types a name) - Named and defaulted parameters (through argument objects) And also: - How to design powerful SPIs (an art that is not mastered by most) - A rant about annotations ;-) Tons of other interesting things to cover...
What is the "default" implementation of the `List` interface in java? :)
For Eclipse, see [https://www.eclipse.org/recommenders/](https://www.eclipse.org/recommenders/)
Do you expose your API also as an animal-sniffer plugin? https://www.mojohaus.org/animal-sniffer Could be really useful!
I tried it out. I am not sure what it does. Seems to just be doing a google search for me and presenting the results all pretty like. Oh, it is also an Electron app. No thanks. Burn it with fire.
Yes, in this case, if you want a truly reactive Spring Cloud Gateway, you'll have to remove Amazon's SDK and go with the ReactiveRedisConnectionFactory that's defined by spring boot. What you currently have with bridged application is not reactive since you have a blocking calls to redis which will be delegated to other worker thread pool (outside of the main event loop). You'll also have this same problem in your other services which use non reactive data stores (MySQL, Postgre etc) and you won't see a full benefit from reactive in them. Currently it seems that it's better to stay with Spring MVC for apps which interact with such data stores and go reactive for other apps.
well, going reactive regardless of the cost (in this case, removing the AWS SDK) is not my goal what I want to achieve here is an implementation based on Spring Cloud Gateway, AWS SDK, Spring Cloud and Redis that would work on the current non-reactive implementation AND future reactive implementation without making any changes to the code in other words: I want to use whatever Spring Cloud is offering now, and make my code future-proof for prospected implementation changes in the future
OK, [tried it](https://diff.revapi.org/?groupId=org.jooq&amp;artifactId=jooq&amp;old=3.10.7&amp;new=3.11.0) Got: &gt; Error &gt; &gt; Backend returned HTTP error status: 524
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
That's cool, just be aware of the possible consequences of adding a blocking calls to your API gateway which might not be apparent on the first look. Is there any specific reason why you want to use AWS SDK in this case? Do you gain anything other than having fully autoconfigured connection factory instead of having to add properties manually?
(Codota CEO here) &gt; Seems to just be doing a google search for me and presenting the results all pretty like. Codota doesn't do google search or anything like that. We have our own code analysis, learning, completion, and search technology. &gt; Oh, it is also an Electron app. No thanks. Burn it with fire. We're going to release an improved version of the plugin that works directly from IntelliJ without a need for a client app - hopefully next week we'll release it. &gt;they also might want to eat their own dog food and use Codota when they write Codota: Sorry about that. We obviously use Codota, but it is still a young product and unfortunately has issues.
(Codota CEO here) &gt; If that’s the case, over the lifetime of the program, most of the code would end up getting sent out Yes, but we don't send the code itself but some abstraction of it. For instance, we never send any string literals to Codota as on they're not important for providing suggestions but might in some cases contain information you don't want to send out. In any event, this information is sent over an encrypted connection to Codota and isn't persisted in our system. We do keep anonymized statistics of API usage.
(Codota CEO here) Codota is still a young product and unfortunately has issues. We're going to release an improved version of the plugin that works directly from IntelliJ without a need for a client app - hopefully next week we'll release it. Once it's out it will solve this problem and many others.
Alright, that sounds pretty promising! Again, great job responding on a space like reddit. It’s really helpful for us users to feel more comfortable with your product!
It's possible that this class was created as a marker, but usually Interfaces are used for this purpose. I suppose that this class was inserted as an "extension point" for shared functionality. Extending from an abstract class has one big advantage over implementing an interface: It allows you to add functionality to a set of subclasses without having to change the subclasses. However, just adding an empty abstract class really doesn't make much sense: 1. you can always (or often) insert such a class at a later point of time (if you control all existing subclasses) 2. usually the functionality on an abstract class has to do with state held there or as (empty) strategies that are called from other methods on the abstract class 3. with the advent of default methods on interfaces with Java 8 this use cas became somewhat obsolete
I agree, this does seem possible.
\&gt; If you're a seasoned developer and follow the Java community, updates etc. you might think to yourself \*why did this update come so early?\* Java 9 was released just recently in January, to which a lot of developers still didn't migrate and a lot of people still don't use the Java platform module system, which is the main new feature of the previous development kit. Is it just me or is he asking the question on everyone's mind and then goes on to give more reasons for why this is a valid reason without actually providing an answer?
&gt;If you're a seasoned developer and follow the Java community, updates etc. you might think to yourself **why did this update come so early?** Java 9 was released just recently in January, to which a lot of developers still didn't migrate and a lot of people still don't use the Java platform module system, which is the main new feature of the previous development kit. Is it just me or is he asking the question on everyone's mind, then goes on to give reasons for why this is a valid question without actually answering it?
Did you start writing your library without doing a market research?
&gt; but it is still a young product and unfortunately has issues. Getting an error almost immediately doesn't give a good first impression. &gt; Codota doesn't do google search or anything like that. I didn't think you were actually doing a google search, rather it was analogous to a google search and not offering much beyond that. I having trouble grasping the value of Codota. Do you have a demo video or something like that?
In the last paragraph are you referring to the `var` (Local Variable Type Inference) feature? If so, Java is still strongly and statically typed. There is no dynamic typing or duck typing. The type of a variable declared with `var` is established at compile time, and it cannot change over time. It's (mostly) as if `var` is a shorthand for an explicit declaration of the type that was inferred.
I hope the var keyword can be used along with gson in order to avoid having separate declarations for each different object that you deserialize. The garbage collection interface sounds cool but I wish someone could explain what the motivation for it is. How is this any different from just letting garbage collection run in the background (I ask because i wonder if you can make your own set of conditions that allows you to define when garbage collection should take place)
Both Python and Java are strongly typed (in contrast - JavaScript and PHP are weakly typed). Python, however, is dynamically typed, and Java - statically. Now, static typing can be come in the dumb form (as in old Java) and with type inference (as in Haskell and to some extent in Java 10). So, what you see there is strong static typing with inference, not a "compromise". Speaking of Python, it has static typing in form of type hints (https://www.python.org/dev/peps/pep-0484/) for those who desire it. Whether static type inference is the same as dynamic typing with static hints is an interesting philosophical question. Probably not, but functionally they are very similar.
I should have emphasized it more, but it's known why Java 10 was released so soon. It's because Oracle decided to pump out smaller updates more frequently, as I have described in the last section. I'll try to fix the article to reduce confusion if it arose.
(Codota CEO here) &gt; Getting an error almost immediately doesn't give a good first impression. I totally agree - our team is looking into this problem. &gt; Do you have a demo video or something like that? Have a look at this video - https://vimeo.com/266112246 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thank you for your questions and looking forward to hearing feedback about the product. It's not perfect but we work day and night to make it better.
ah, my bad. I'm studying for finals and didn't read the entire article (shame on me). I suppose mentioning it briefly in the paragraph where you talk about it would help. Thanks for getting back and otherwise good job!
Thanks for the explanation! Makes a lot more sense now!
Thanks! I will check codota out again when you have the intellij plugin that doesn't need the electron app ready to go.
JapiCmp ([https://github.com/siom79/japicmp](https://github.com/siom79/japicmp)) is in that camp, too. Using it for Hibernate Validator to make sure we don't break anything in the API and also it's the basis for the AdoptOpenJDK API diff report: [https://github.com/AdoptOpenJDK/jdk\-api\-diff](https://github.com/AdoptOpenJDK/jdk-api-diff).
Can you elaborate on type aliases? And what'd be your talking points on SPIs? I'd be tempted to do such talk, too :)
No problem! Good luck with your finals! :) Thank you!
Correct. To add to what you said: the equivalent in C\+\+ is `auto`, and the whole purpose is tha`t au`to an`d v`a*r deduc*es the type, not that the*y era*se the type. So you can write something like the following: var str = "Hello World!"; var str2 = str.substring(0, 5);//Note that str has not been erased to an Object; it's still a String in every way that matters var str3 = str + str2; //str.add(5); Will not compile; var is still a String, and does not have List methods or any other non-String methods var str4 = 17.5; //str3 = str4; Will not compile; str3 is a String reference, and cannot be assigned a double, or any other non-String object The intent is to deal with situations where a type name might be unwieldy or cumbersome to write out, especially when it's a compound type or just has a long name: Map&lt;Integer, Optional&lt;String&gt;&gt; properties = new HashMap&lt;&gt;(); properties.put(5, "Hello!"); properties.put(10, "World!"); properties.put(17, "Wlecome to the"); properties.put(23, "wait, was \'Welcome\' misspelled? WTF??"); properties.put(35, Optional.empty()); Iterator&lt;Map.KeyEntry&lt;Integer, Optional&lt;String&gt;&gt;&gt; iterator = properties.entrySet().iterator(); var iterator2 = properties.entrySet().iterator(); for(Map.KeyEntry&lt;Integer, Optional&lt;String&gt;&gt; entry : properties.entrySet()) { //Too much boilerplate } for(var entry : properties.entrySet()) { //Much easier to understand } See that even though `iterator` and `iterator2` are the same type, and both versions of the `for-each` loops do the same thing, the latter versions are easier to read and comprehend. No loss of type\-safety, just a loss of verboseness.
At work we use Spring Tool Suite (STS) instead of plain Eclipse. Its free but as good as any commercial tool. For profiling we use the commercial YourKit profiler which is really good. Even the Pivotal team uses it for Spring. We had used the commercial JTest before but now rely on JUnit and TestNg. 
You managed to totally overload the poor little AWS instance it runs on :) You can try downloading [http://search.maven.org/remotecontent?filepath=org/revapi/revapi\-standalone/0.8.0/revapi\-standalone\-0.8.0\-standalone.zip](http://search.maven.org/remotecontent?filepath=org/revapi/revapi-standalone/0.8.0/revapi-standalone-0.8.0-standalone.zip) unzip and run: `./revapi.sh --extensions=org.revapi:revapi-java:0.17.1,org.revapi:revapi-basic-features:0.7.2,org.revapi:revapi-reporter-text:0.9.1 --old-gavs=org.jooq:jooq:3.3.0 --new-gavs=org.jooq:jooq:3.4.0` (which will reveal to you that I effed up and released it with a snapshot dependency but it works anyway).
While I envy the speed of the analysis that japicmp achieves, revapi does IMHO a much more thorough analysis of the API including such things as use-chain analysis to reveal (indirect) introduction of non-public classes into the API. But overall I am very happy to see that many projects choose one or the other to check their APIs. Revapi is used for example by Apache Camel, Neo4j, Mulesoft, XWiki and others. INRIA Spoon has quite cool integration of revapi into their CI process where it automatically checks the API changes of incoming PRs (e.g. https://github.com/INRIA/spoon/pull/2054).
Can you run the installer from a command prompt and see if it's telling you something? 
Command prompt doesn't come up with anything. But I found an App Crash Report, I can link it, but IDK if it tells anything useful.
Which OS? Which JRE?
Windows 10, and any version I've tried (Version 8, 171 both 64 and 32 bit versions, and version 10)
I object but not strenuously
Ivy and ant
Isn't cradle just a higher level interface to maven repos?
Check out some jars in your project like spring and hibernate.
Wrong. Npm hides all the modules in a directory. Have you ever looked at all of them? Anyway try spring.io and download one of the example zips from the guides.
And you should know that eventually. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Do you have a github? 
Not yet. Not sure yet, what I can publish.
Create a github account and add a read me file to initialize the repo. Edit the read me with an overview. Post the link to the repo here.
Whatever you have now. Also you should reply to the person you're answering. That way they're notified that you've replied. 
Yes interested, but what do you want to build ?
Type aliases are useful once you have union types. A jOOQ example: alias ColumnExpression = String | Name | Field&lt;?&gt; The union types allow for preventing overloads like: select(String) select(Name) select(Field&lt;?&gt;) And the type alias allow for avoiding to repeat the union type declaration all the time. SPIs: stuff like this: https://blog.jooq.org/2015/05/21/do-not-make-this-mistake-when-developing-an-spi/
May I ask you which editor you used? I just opened your project and my Editor (Intellij IDEA) is sparkling yellow because of things that could or should be different. This may be a first step for you.. To find an editor that fits your needs and that you enjoy.
i don't know, seems like a huge amount of work for such a small benefit, or i'm wrong? If a loop is so perfomance critical, it's better off done with actual ints or some other custom tailored technique. They're already introducing a huge number of new concepts in java, with legacy one still there, i don't think making another type of iterator is worth the extra complexity
How do you define such type alias in Java, though? I'm somehow still missing what your solution is.
First thing I see is, be consistent with using "this." I see you doing it on and off, doesn't really help with the readability of the code.
Wont kotlin kill java?
I like the idea of a `NoDiscard` modifier. I've wanted stuff like that a few times when I've built fluent APIs. Things that build and configure objects to perform and operation that are immediately discarded. It's an edge case but it's easy to miss the operation off the end without anything like that. One specific example recently - I was creating a a page object for a selenium test. It worked with a grid containing objects so it had lots of fluent calls like: page.findRowFor("User A").findRoleColumn("Admin").findDeleteButton().click(); I wanted to be able to assert things like the state of the button so I want a proper button object but it's also very easy when you're coding the tests to forget to call click(); as you're so busy concentrating on finding the button.
In other situations (because when have idiots not misused tools) it would lead to code like: Object trash = foo(); trash = null; Because some asshole decided you *had* to accept the returned value, but you have a use case he didn't consider.
Yep - very true. Everything can be misused. In the example above though there is no point finding anything if you're not going to do something with it so there are certainly situations where it makes sense.
There are two ways: If you're in control of the union type's component types then you do: interface AorBorC {} interface A extends AorBorC {} interface B extends AorBorC {} interface C extends AorBorC {} That is a "union type" *and* "type alias" emulation in one go. If you don't control the types (e.g. `String`), you have to pretend there's a type alias, which essentially means, always remember to overload every method that takes one of the three (e.g. `String`) with the other two (e.g. `Name` and `Field&lt;?&gt;`). For the API user, it doesn't matter really. The API feels the same way. For the API designer, it's much more work and there's risk for inconsistencies, if one overload is forgotten. And sometimes, it cannot be done, due to generic type erasure.
Yeah thanks. Nothing personal, but I don't easily run code that I download from the internet on my machines... ;-)
`var x = c.this$0.charAt(c.cur);` `$0` what?
Did any of the other jvm languages harm java?
I believe he makes the case, that cursors don't require heap allocations and don't require escape analysis, and therefore can be more easily optimized by the compiler than iterators.
The article is trying to show what the compilers (both javac and jit) are seeing. Here `c` is the `CharCursor` inner class for a `CharSequence`. The cursor would do something like: var x = CharSequence.this.charAt(...); to access the containing instance's method. Behind the scenes there is no inner / outer class distinction, just a nest class `CharSequence.CharCursor` which holds a reference to an instance of the containing `CharSequence`. Here that field is called `this$0`.
Was any of them as cool as kotlin?
Funny, reading the list of requirements for what the replacement tool needs to do, I kept thinking back to the [Marimba's Castanet](http://web.mit.edu/outland/share/lib/castanet/tuner/lib/doc/introducing/introducing.html) tool from back in the early 90's.
Just looking at Uno.java, you use a lot of repeated String literals for the Colors and Faces of a card. If nothing else, these should be turned into constants so you're less likely to be burned by a typo, but a better solution would be to turn them into Enumerations because these values are well-defined states. public enum Color { RED, YELLOW, BLUE, GREEN, WILD } // omitting all numbered faces for brevity. public enum Face { ZERO, ONE, ..., NINE, PLUS_TWO, PLUS_FOUR, BLOCK, FLIP, WILD } 
It’s mentioned in the comment above. [Inner classes receive a reference to the outer class](https://stackoverflow.com/a/27146544) as a synthetic constructor parameter and private member called `this$0`.
The key background is probably: &gt; While wonderful in theory, the escape analysis fix is fragile in practice. ... Value types [...] do not require any analysis in order to enjoy their optimization into groups of local variables. It would be nice if the compiler could optimise (i.e. inline everything, use local variables) the commonly written, and simple to understand, iteration code. However it's proved to easy to defeat escape analysis.
Whats your pay scale?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I use vscode, is it really necessary to use an IDE? Or is there a way to make things better for compatibility with simple projects? I actually enjoy a lot my editor but as you say it sometimes lacks very specific functionality so I use Intellij IDEA at my job whenever I have to deal with this SAP Hybris implementation...
Depending on who you ask, all of them.
Yeah, I didn't have any rule or notion on when to use it so I tried using it in every instance variable, however it started to look weird after a couple methods. How do you use it? Never unless there can be a confusion?
I think I saw this coming when I programmed that but I just forgot... I'll make sure I add this today. Thanks;
Java Applets - OK Java Web Start - OK JavaFX - Wow really? That seems surprising.
I can tell you that in the enterprise Java apps are developed to be maintained for decades. 
Only where absolutely necessary i.e. shadowing of a class field.
Yeah, I was surprised about JavaFX too, since this should have been the next big thing
I know, i have been there ;)
Ok I'll take care of that, Thanks! 
It looks like in your [submission](https://www.reddit.com/r/java/comments/8r28c6/can_someone_explain_this_code_to_me/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
They are just moving JavaFX to separate module - https://www.reddit.com/r/java/comments/82qm9x/javafx_will_be_removed_from_the_java_jdk_in_jdk_11/
It's on it's own which is better since it can be continuously updated without having to wait long periods of time for new JDK releases. It's all good. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
In retrospect, I'm glad none of our projects ever tried moving to JavaFX. I like being able to rely on shit being there all the time, instead of hunting down "where is this code hosted this week?" and hoping the JRE on the other end still works. 
Of course we have a reason! using the official SDK would make our application future-proof because in theory any update to the internal implementation of AWS services would be reflected automatically in their SDKs. Otherwise we would have to keep on tracking the changes they make to their services and updating the code on time to make sure that our application wouldn't stop working.
I can guarantee to you that STS is far far from being as good as IntelliJ. I have worked on both and can easily tell you that the tools that come with IntelliJ (autocomplete, static and dynamic analysis of dependencies, and over all stability of the IDE) made a huge difference in my productivity.
Keep dreaming. That's just the media spin. The real message you should take away from moving JavaFX out of JRE is 'We can't be bothered with that anymore it is slowing us down, and we don't really care about it anymore'.
I agree with your opinion, it is hard to tell without proper documentation.
Ah ok, Well I guess that makes sense.
&gt; ... about the sun.misc.Unsafe class. This class is not part of the JCP standard that is defined by all classes under the java.* and java.* packages and therefore, *normally, no developer should use them*. Sigh I really hate this kind of argument. "Don't blame us, you shouldn't be using that". Arguments like that are all well and good, except for the fact that there's probably no other way to implement certain things without using stuff like that. So it's basically a choice between doing breaking the 'you shouldn't use that' rule, or breaking your functionality. So.. not much of a choice really.
Personally as long as your code is properly formatted I couldn't care less. You do give up IDE specific features - debugging tools, autocompletion, and in IntelliJ especially, quick-fixes and tips for common mistakes etc. But each to their own if the code on the other side is of similar quality.
Follow one scheme and follow it everywhere. I've been on teams where it's used everywhere regardless and others where I only use when explicitly needed. Depends on the project style - for this just pick whatever you are happy with.
What you mean 'just'. Not a biggy? I think it is. a) more hassles around ensuring its there when your app needs to run b) more hassles around ensuring the version you provision is compatible with the user's jre. c) a sign that they probably are divesting themselves and don't want to maintain it at the same pace as the JRE (and don't kid yourself, 'different pace'... doesn't mean 'faster')
Pretty sure [Quercus](https://www.ibm.com/developerworks/library/wa-quercus/index.html) killed off Servlets, JSF, and every other web framework ;) 
While I can see your point to some degree, in this case ElastiCache is just a hosted Redis or Memcached service (https://aws.amazon.com/elasticache/) so any changes are more then likely to happen on the side of redis, rather then the AWS. SDK won't help you in this case since any changes that do happen will more then likely require a driver update. If you guys want to have hosted services such as redis, take a look at pivotal cloud foundry (https://pivotal.io/platform). You can host it on top of your AWS (https://aws.amazon.com/quickstart/architecture/pivotal-cloud-foundry/ ) and you can run various services on top of it, such as redis. And since it's Pivotal's product, it integrates much better with spring boot apps, it can autoconfigure these services in your apps without needing additional libs or SDKs
I think the real message is that they are going to open source it and/or allow a different "interested" community of developers maintain it so that they dont have to allocate resources for it.
From community owned to Oracle owned, but if there is no non-Oracle maintainer, can't blame them for shifting priorities towards something they own and have a premium version of.
Just like Cameron Purdy puts on the comments, regardless of recent actions Oracle has rescued Java and invested lots of money improving it. It sucks for these people, and I have been in similar situations, then again no one else seemed that interested in saving Sun from Oracle's acquisition. 
I think Nashorn and Graal.js are quite equivalent in terms of being community or Oracle owned: both are open\-source projects developed and maintained by Oracle.
To my knowledge, `sun.misc.Unsafe` was never (widely?) applied to otherwise unsolvable problems but rather as a considerably faster alternative to&amp;mdash;arguably untenable&amp;mdash;canonical solutions; and then, in true leftpad-fashion, that ended up biting the entire ecosystem.
That is certainly interesting. I'm having a meeting with the management in within the next 15 minutes and I'll be talking about this subject. Thank you!
Okay so what, in what you just said, is really different from what I said? I.e. they don't care anymore and it will be up to someone else to pick up the slack. The question is really, who, if anyone is really going to pick it up? As it stands now, I think the project is probably dead (or more accurately going to die a slow death as it fails to keep up with the increased pace of JRE releases).
What do you mean by properly formatted? You mean something like following a style guide and religiously sticking to it? What are your recommendations for properly formatting code outside of an IDE?
I agree, each time style is different and is always a good practice to have rules about this kind of stuff on your team, however for personal projects whats your preference? do you follow any style guide? What good linting tools are available for java? something like esLint for js code, higly customizable, usable in multiple environments...
I find this particular form of AbstractClass to be pointless. If you want a marker, use a marker Interface because you can have multiple interfaces implemented on a class. In this case, for the sake of having a marker, you are denying the implementation any other class inheritance, which is a real waste.
Hmm, that tool sounds familiar.
You said "owned" then used "developed" and "maintained". Oracle's lawyers would gladly tell you the difference. If you're saying for all practical purposes from the dev, maybe, but the question is whether it's worth the chance on new tech. We all have to deal w/ legacy stuff and can't stand on principles, but on new tech we can.
Sorry man.. was just adding my thoughts on what you said. Didnt mean to get piss in your cheerios.
They’re also moving towards encouraging developers to just package a JRE with applications. Requiring users to install Java just isn’t that reliable.
&gt; no one else seemed that interested in saving Sun from Oracle's acquisition You've forgotten the [history](https://abcnews.go.com/Technology/story?id=7395780&amp;page=1). There was a long competitive bidding cycle between Oracle and IBM, until the price went high enough that IBM withdrew. 
Proper and consistent indentation is the big one for me. Plus maybe where you put your curly braces etc. You can follow a strict guide if you want, but really for small personal projects just find something your comfortable with. Using an ide just makes it easy to keep things consistent which is the most important thing 
Proper and consistent indentation is the big one for me. Plus maybe where you put your curly braces etc. You can follow a strict guide if you want, but really for small personal projects just find something your comfortable with. Using an ide just makes it easy to keep things consistent which is the most important thing 
I agree that IntelliJ must be better, but in a budget-crunch situation, the best free option is STS for Spring based development. I wish I could get the resources for JRebel and IntelliJ Right now its .... just free tools :(
What the fuck? It's a far superior direct replacement for rhino! They just added ES6 in Jdk9! Why would they deprecate it instead of just...not giving it updates? I'm gonna have to turn off so many warnings...
Hey, TheRedmanCometh, just a quick heads-up: **jist** is actually spelled **gist**. You can remember it by **begins with g-**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
bad bot
what the hell...LOL
I did not, IBM was not interested enough to outbid Oracle, it is not like they are a tiny company counting pennies. 
I always use this. if it refers to a class variable. So every time unless I can't use it Makes it easy to see in functions if its a class variable or a variable in the function. Totally depends on the person though
Hum, don't really know how you'd call that union types or type aliases. To me, it's just inheritance and accepting the super\-type as method parameter and then method overloading. I like your post about SPIs, parameter objects are great for keeping APIs/SPIs evolveable. I'm also using the "call a method on the parameter instead of returning something" style more and more (even used it in Bean Validation 2.0), as it gives more flexibity, e.g. if a method may "return" zero, one or n values.
It looks like in your [submission](https://www.reddit.com/r/java/comments/8r4lem/hiring_sr_java_software_engineer_cape_girardeau_mo/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
There is no JRE anymore you dolt. It's just the JDK. You can now build totally stand-alone applications. There's no need for webstart or other random runtimes for deployment. Go away now and cry to mommy.
bad bot
I think many people will just rewrite Web Start impl. from scratch, because it's not a rocket science...
Yeah this is exactly why I started using this every time I used an instance variable
This is basically the same problem Microsoft has with undocumented APIs that they end up being forced to maintain backward compatibility which is probably the cause for a good percentage of their security issues.
The getdown project mentioned in the article goes in that direction. Their "rationale" wiki page explains "why [they] decided to replace Java WebStart", even before it was even deprecated: https://github.com/threerings/getdown/wiki/Rationale 
Haven't tried this myself but you can look at https://www.codingame.com/start There is also leetcode, if you just want programming questions to work on.
Oracle is arguably better than IBM
I have a suite of applications that have been directly impacted by all of these, and have worked out mitigations for all of it. JDK 11 and JavaFX - there's an EA build of OpenJFX-as-a-module that stitches JavaFX back into the stack. It works, and works well. I was most pleasantly surprised by the fact that I could jlink everything back together... but the resultant command lines are hilariously complicated. JNLP - this one is a fustercluck. What used to be a 20-minute job in CI to do a build-pack-sign-deploy cycle with JNLP now takes over an hour and three different hosts and OSes - I have to jlink, package, and sign each one separately. For Linux, AppImage is the most reliable option for my use case. On Windows, MSI is the only real option, and SmartScreen is a nightmare. Apple's offerings are every bit as bad. Modularization feels an awful lot like something that's being rammed town the Java ecosystem's throat; I have yet to hear anyone come out with a success story around modularized apps.
I feel really pissed off that they said that was the GUI toolkit that deprecated Swing, and now I'm gonna have to jump through hoops to use it. Between this and possibly dropping support for nashhorn...honestly Oracle can go fuck themselves. I love Java as a language, but I might be done with it sometime very soon.
There are exactly 0 alternatives to the kind of black magic you use that class/package for. 
Strictly truthful bot, but strangely inaccurate bot.
As I said in the beginning: &gt; In my version, I'd be covering also how to work around a few of the missing features in the Java language without risking forward compatibility I may have forgotten to use the word "emulate". &gt; I'm also using the "call a method on the parameter instead of returning something" style more and more (even used it in Bean Validation 2.0), as it gives more flexibity, e.g. if a method may "return" zero, one or n values. Interesting, so in order to return n values, you call the method on the SPI parameter object several times? Kinda like a "pipe"?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Sorry, I'm pretty new to reddit. That's what my curren app looks like: [https://imgur.com/a/Sd9ju78](https://imgur.com/a/Sd9ju78) I did not upload any FIX code yet. Only old REST client code.
Think of it as a scaled down version of metatrader, but not bound to a specific broker. So it could could connect to more than 1 broker, too. This would make some strategies a lot easier.
I guess at this point, I can only offer a collaboration. But at least there should be a lot to learn in this project. And it might lead to some profitable bots, too.
If a product isn't making enough money, maintaining it is more of an expense and you are a famous company with a brand that has a huge community around it, better open source it and cut your cost. Any other move might damage the brand value and bring community backlash.
Come to the Kotlin side! All the ecosystem with fewer frustrations! 
Well I mean that's still on the JVM so that doesn't really help me sadly. As far as a language goes...probably gonna go right back to C# if I change. 
Absolute nonsense. *Way* less hassle to ensure it's there when your app needs to run, because it'll just be a normal jar like any other e.g. maven dependency. That's the whole point, no more internal api "SDK" bullshit, just a library. And how is it difficult to ensure it's compatible with a user's JRE? It'll just have a minimum supported version of Java, again, just like literally every single other dependency of your app. What's the problem, exactly?
How is adding it as another maven dependency "jumping through hoops"? That's their aim in decoupling it, just another jar or two. And graal already has faster and has more complete and up-to-date JavaScript support than nashorn anyway so I think that's surely the right call. Honestly the redundancy just confused me wrt what their intention was with splitting resources like that.
&gt;How is adding it as another maven dependency "jumping through hoops"? I have to add it to a lot of legacy projects or just keep an older jvm around, and swap between. &gt;And graal already has faster and has more complete and up-to-date JavaScript support than nashorn anyway How about ES2016?
Because Graal.js is already better.
Like I asked in the other thread is there ES2016 support with Graal? Because if not it's a very large step back not forward no matter how performant it is.
Yup! Graal supports ES2017 in fact and can run most node apps OOTB. And yeah that's the nature of these things, there are always a few breaking changes with a new Java release. As far as support goes, not needing to modify any code and just adding a couple more jars to the class path is a pretty simple change I'd say.
Was that you in the other thread too? Coincidence. Well yeah for the sake of other users I'll repeat that graal supports es2017.
while not really a game, I use [hackerrank](http://www.hackerrank.com) to learn new languages, in addition to completing [r/dailyprogrammer](http://reddit.com/r/dailyprogrammer). 
Only x86_64 Linux, as I understand it.
As I understand it, though, Graal is only an option on x86_64 Linux at this point, though.
You don't have to insinuate that there is some greater reality being hidden, Oracle has stated publicly that they view the future of the UI being JavaScript.
It looks like in your [submission](https://www.reddit.com/r/java/comments/8r7497/help_in_creating_a_class/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
[IcedTea-Web](https://icedtea.classpath.org/wiki/IcedTea-Web) implements the JNLP specification and is available for Linux and Windows.
Sounds like it’s time to move to electron
I actually tried Electron, launching a Java subprocess and doing IPC with it over stdin/out. It worked really well cross-platform, but the deployables were *fat*... like "yo mama so fat she thinks that nesting two runtimes in a single application is lightweight" fat.
The main uses of the unsafe stuff I'm aware of are for offheap memory stuff that isn't possible any other way
What are you installing Java for? Surely not a browser plugin? Download the zip and run it without installation. http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html 
Has anybody watched the entire video to provide the TLDW highlights?
I'm trying to run this Glucometer software for a family member, but it won't run without installing Java.
Yes it will. Do as I said, Run your app with `java -jar whateverApp.jar`. If your app is an EXE and tries to find a Java installation, put `java/bin/` on your path and/or set a JAVA_HOME to `java/`, where "java" is the folder you decompressed Java.
Finally got it working, just before your reply I found out how to add it to my Path and got it working. Thanks!
Seriously? Read the sidebar on how to post code. 
- Java RMI - Not a technology per-se but please stop using java.util.Date, java.util.Calendar and so on. Move to java.time package https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html 
Nah pretty sure it works with Windows. The AOT didn't used to but I think the bug tracking that says it's fixed now.
JavaFX is not outdated! 
Actually, JavaFX was removed from the core JDK because Oracle wanted its development to be handled separately from that of core Java. In the future, it will be handled more like an officially sponsored library rather than an actual part of the Java language, like Swing. And on the topic of Swing, it isn't really outdated. Both Swing and JavaFX have their strengths and should simply be treated as individual libraries. While a lot of the conventions used in Swing are a bit outdated compared to recent developments in Java (such as anonymous classes/implementing event handler interfaces everywhere), it's still a perfectly fine thing to use in a new project if it suits your needs although JavaFX does tend to be nicer to use.
Older versions of Java EE (not sure about the newest one) should be avoided. Also, axis/cxf/jax-ws (soap) should be avoided in favor of rest (jax-rs) 
* Entity EJBs * Struts * Ant * All those org.omg packages, but nobody ever used those anyway. 
They are fighting for a lost paradigm though, and worth avoiding. But that's my 2c.
ADF
`java.util.Vector`
Desktop applications are still a thing, though. If you want to develop en editor for some arcane file format for example, you probably don't want to host that as a web service. And users would find it weird if they download and install an app only for it to open a browser to localhost. And the argument that users don't want to install Java is becoming obsolete as well, with the release of Graal.
what paradigm?
If you're stuck on an old version (1.6, like myself), at least try to use Joda Time or ThreeTen.
Java serialization?
Surely Struts is outdated, and you'd be better off using Spring MVC (or whatever), but Struts is simple and solid, if you need something simple with small libs. Just be sure to skip the mess that is Struts &lt;= 1.1 packages. I'd say the same about Ant, it's simple and solid, if you need something more complicated, then use Maven or Gradle.
RMI is a nightmare 
JSP is fine if you're looking for something quick and simple, that is almost ubiquitous in servlets. What I don't like about JSP is the piss poor documentation.
&gt; Interesting, so in order to return n values, you call the method on the SPI parameter object several times? Yes, exactly. So in Bean Validation 2.0, we have an SPI interface, [ValueExtractor](http://beanvalidation.org/2.0/spec/#valueextractordefinition), whose implementations may emit one or n values. I didn't like the idea of returning a set/list due to the one value case, so implementations now produce the results by calling method on the receiver parameter of the SPI method. It also gives flexibility to the SPI caller (our engine) how to implement the n values case, i.e. which collection implementations it uses etc. instead of leaving this to the implementor.
Robocode, you need to program a mind for a tank. You can download other people's tanks and make them fight! It's great, a lot of universities use this as an introduction. [http://robocode.sourceforge.net/](http://robocode.sourceforge.net/)
[Human Resource Machine is a great game that teaches programming in general. I found it very interesting. There are also some videos on youtube regarding the gameplay.](https://store.steampowered.com/app/375820/Human_Resource_Machine/)
Swing is like Windows Forms, regardless how HN and Reddit think about it, there are tons of companies still invested on it even if it doesn't do any headlines. JSP is still quite relevant if you are dealing with alternatives to JEE like SpringMVC, Jersey, ... It is relatively simple and easy to integrate with JavaScript based frontends. Actually I would say it is more the other way around JSP and tag libraries instead of JSF (PrimeFaces is the only left standing). Really to avoid CORBA, RMI, Java 3D, JDIC.
Not popular, but I created my [own query application Gimlet](https://github.com/krpors/gimlet) with JavaFX (sorry about the plug). It is a rather nice experience to use JavaFX. I explicitly chose a desktop application because I rather loathe the fact that almost everything is web-based nowadays. JavaFX is not perfect... but I am hoping sincerely that the development of the toolkit will progress better/faster when it's decoupled from the JDK. For other applications and stuff, I recommend you to take a look [this repository](https://github.com/mhrimaz/AwesomeJavaFX). It contains some books, resources, talks, software which makes use of JavaFX.
NASA seems to believe it is the best option for them. https://jaxenter.com/netbeans/developing-nasas-mission-software-with-java https://www.eizo-or.com/global/products/or-software/curator-caliop-vm/ http://www.investorseurope.net/en/atlas-trader https://www.zeiss.com/meditec/int/products/ophthalmology-optometry/ophthalmology-pacs-forum/office.html It is so lost paradigm that Google has given up on ChromeOS as browser only, and was forced to add Android native apps and expose the underlying Linux userspace as means to actually sell Chromebooks outside US schools.
Eclipse-only projects. Use a build system, please!
Why is JDBC outdated? 
I don't understand why people still use JDBC. I mean it's good for learning and perhaps not much of a headache if you're doing a really small fix in your code. But tell me this, you spent 1 hour writing a piece of code and then tomorrow your database changes would you rather spend another hour writing that piece of code for the new database or have it configured with Hibernate in the first place so that you don't have a headache in future.
This is a clever little thing. I am not sure I would want a library for this, yet I think the idea is worth considering. One more thing, Your tag-line goes like "Say Good Bye to Temporary Hacks" but you are not really *saying goodbye to temporary hacks*, you are saying "goodbye to long-term hacks" temporary hacks are still fine. good luck
JDBC is worth avoiding?
You should avoid JDBC only if you want to avoid SQL database access altogether. But that's pretty difficult in most projects.
JSF - if you can avoid it, do it!
Dude, every relational DB driver provides a JDBC interface - it's not outdated; it just not convienient.
JSP/JSF/Servlets in favor of JAX-RS (or spring Boot equivalent) or gRPC (or similar thing) Jboss/tomcat in favor of spring boot/dropwizard/vertx Java serialization in favor of json/avro/protobuf 
How does Graal fit in this picture? 
Wait until you need to serve millions of database reads ( not writes) out of 1000 lines queries.
&gt; Java RMI CORBA 
 java.util.Hashtable
Serialization might be killed and will go to hell.
&gt; Entity EJBs So what should I use instead?
JPA Entities ;)
Apache wicket
Hibernates uses JDBC. You literally can't use hibernate without jdbc.
JPA. You might be confused about what an "Entity EJB" is and think that I meant EJBs in general. Entity EJBs / Container Managed Persistence was Enterprise Java's first attempt at an ORM standard, and it was bad. So bad in fact that when they got around to making EJBs usable in Version 3 of the standard, they couldn't find a way of making entity beans usable and still be compatible with the old standard, so they just deprecated them in favor of JPA.
In favor of what, and why? From what I can tell, it just never caught on, but I see nothing that replaced its use case. The only real issue I have with it is the community for it today exists almost exclusively in mailing lists. 
In favor of more modern frameworks... i worked a couple of months with wicket and the main downside is that it tightly couples view and logic... but it is just my opinion, give it a try, maybe you will like it who knows? :)
I've been working with it for a few months, and and I'm starting to really appreciate it. One thing I particularly do like about it is it keeps the vast majority of web development in java, which is the primary skill I'm looking to hone right now. Unless I'm mistaken here, replacing it with a more modern framework would really amount to replacing it with a javascript framework. 
I'm really glad to hear you like it tbh :) maybe it's just a matter of preference and I am leaning towards the approach of having the right tool for the right job kind of thing. Keep the wicket dream alive :D
&gt; then tomorrow your database changes it's not the case most of the time in real world. How often do you change target database in actual applications? How much time would you invest in migrating queries comparing to all other non-jdbc-related code during such switch?
&gt; and then tomorrow your database changes How often does that tomorrow really happen?
`java.util.Dictionary`
What is a suitable alternative to RMI? I need a lightweight command line app where the first instance automatically becomes the primary server instance and subsequent invocations send it data to process. RMI seemed like a good fit, but I haven’t used it in 15 years.
Because ORMs are terrible.
I believe he's referring to the paradigm of desktop apps because everything is in the cloud! Or, said another way, people don't run apps on their computer any more, they run them on someone else's computer. That being said, there are still a ton of uses for desktop apps. The premise is ridiculous.
And if it does why the heck are you using SQL in the first place.
ORMs also have their drawbacks, even more because modelling relational data to objects is not necessarily what you want 100% of the time. Nowadays I've moved completely away from ORMs unless it's a perfect use-case for it. For the past 4 years without a hassle most of the projects and teams I've worked at have decided to take this approach, there are quite a few options of libraries wrapping JDBC that made working with RDBMSs a breeze without ORMs, actually simplifying a bunch of code in the process. So no, Hibernate is one tool but not the solution for everything, and I, personally, believe that the approach of mapping objects to relational data on the long-term is clunky and a leaky abstraction.
You should probably rethink half the items on your list already, before you add anything else to it: * JDBC - Unless you're using a NoSQL database with its own proprietary async driver, it's virtually impossible to work with a database in Java _without_ using JDBC. All of the major ORM frameworks are just layers of abstraction sitting on top of it. * JSP (in favor of JSF) - There are a lot of traditional-style template systems available today. Thymeleaf, Mustache, etc. But honestly, JSF is such a horrible direction to take, you'd be more respectable just sticking with JSP's. * Swing and JavaFX - Other than _perhaps_ Eclipse's SWT library, you've basically covered every viable Java desktop application framework. Meaning that you're saying Java desktop app development is outdated, altogether. It may be true that desktop app development in general is less important than it was 10-20 years ago... but if you _are_ going to build an app using Java, then either JavaFX or Swing (in that order) are fine.
Ehm wat
If your schema changes constantly you probably don't really have a schema, so you should use a schemaless database.
Apache is like a graveyard for projects - I use to think HTTPd was the exception but nginx has totally taken over for that too.
Jsf is pretty terrible.
Ehm. No.
&gt; JSP (in favor of JSF) I don't know why people keep thinking this. JSF never replaced JSP. When the Oracle documentation says that you should use Faclets instead of JSP, it means as the template for JSF. JSP is not at all obsolete and is faster than its competitors, since it compiles directly to code. It is inconvenient in certain use cases, such as fat JARs, which don't explode.
&gt; JavaFX is not perfect... but I am hoping sincerely that the development of the toolkit will progress better/faster when it's decoupled from the JDK. Well said. So many times in the past, I've had a simple problem (Like keeping the aspect ratio of a Pane 1:1) that I thought should have a simple solution, were only solvable by some obscure hack I found on Stackoverflow (or sometimes not at all). That being said, I really love JavaFX. I used it for my bachelor thesis and multiple other projects and it worked quite well.
`java.util.Enumeration`
About 2 days. Going through such a migration right now, for 3 operations: read, insert, update. Massively different table layout for reading. Most time is spent on testing results. I write raw SQL against JDBC, which I find quite easy. 
You are confusing database connectivity with data abstraction
EJB's, JMX, JAAS, JNDI, good luck avoiding JDBC. 
GWT, Vaadin, Wicket, Tapestry, JSP, JSF, Struts etc
REST?
Agreed. Any build system. Ant, Maven, Gradle. Eclipse uses Ant by default. It works, but it's tricky, and each build is quite labor-intensive. I started with Gradle about a year ago, and by Odin, does that have a steep learning curve, and requires a lot of configuation and testing. But it makes builds reproducible and fast to repeat. 
The OP conflated "deprecated by Oracle" with "things I don't like".
You'll run into Swing and JavaFX. Both build upon AWT. You'll need to know GUI basics, human interaction, and multi-threading. In my experience, only Android Studio brings a good editor for java-based GUIs. If you're developing GUIs for Windows, switch to Visual Studio and use a non-java .Net language. (Source: me. I've used both JavaFX and Visual Studio with VB for years to build GUIs for desktop applications, and web tech for web apps.)
Yes. And though useful and powerful, it's an entirely different beast with its own technology stack, challenges, and learning curve. 
Soft, the fair annotation parser! Nymph, in thy recursive descent orisons Be all my sins remembered.
You can build binary images of your application that include the JVM with Graal
The problem with RMI are: 1. It encourages you to have communications with the server that are far too fine-grained. 2. It's JVM-only (effectively). 3. It hides too much of the networking (especially retries etc) that you should control yourself. HTTP (or REST, if you prefer) solves all of this.
This isn't outdated, but just wrong. Things that are outdated now had their time in the sun and (mostly) their reasons to be used, but this was never anything other than a big mistake.
JavaFX/SceneBuilder is every other GUI tool on steroids. If you're willing to invest the time, it's awesome. I just don't know how many java desktop apps are being developed. 
Author did every single step the wrong way, and still considers this.. thing.. worth publishing. If I was the author, I'd put it away and send DMCA notice to anyone who may have a copy just to make sure nobody sees this abomination. The proper way to fix a bug in a plugin is: check out the sources from git, make your changes and update the plugin version, wrap your updated plugin into a feature patch, publish it on the update site. To debug it, use the Eclipse app run configuration type and use Target Platform - those things are in Eclipse for exactly this use case. 
It's a subset of the conditional compilation statements in C. 
So I have seen a lot about how awful java.util.Date is and how you should use other things instead. Could someone quickly explain to me why it is so awful? Just curious to hear from this community about it. 
You can remove JSF from that list ;)
Why?
Really nobody?? OSGi Avoid at all costs.
If you were around in the early 90's during the initial wave of Java fever out of Sun, there was a group from the original Oak (later Java) team lead by Kim Polese who split off and started Marimba. The Castanet tool was one of the products. It also had a GUI builder that used custom widgets that were all *lightweight*, meaning they simple rendered on a java.awt.Canvas object, managed the event loop itself and didn't rely on OS level peers. Generated forms would be saved off in a serialized fashion to be re-instantiated in the code. We made use of that tool and had a tool that would read the code in then write it back out as Java source allowing us to modify and add it into our builds. There was a good deal of press around what was being referred to as *push* technologies of the time, but most of those were actually polling clients looking for data updates. Castanet was pitched like a television that could tune into channels, would detect code updates and apply the deltas and could even receive true *push* notices from the server.
I think they're talking about RDBMS changes, not table structure changes. E.g. from MySQL to Postgres.
JDBC - Yeh, use it all the time.... For those times where you want to to grab some data from the database without having to model it.! There is also nothing, at all wrong with JSP. Just so long as you avoid scriptlets... 
I agree, I wouldn't call it outdated necessarily. There are parts of the API like handling checked exceptions and avoiding leaked connections that make it tedious and error prone to use: I much preferred Spring's JdbcTemplate just for the ergonomics. You can certainly go the ORM route but as others point out, there is a lot of complexity when you get into large scale or distributed apps. 
Cool! Most people hate Java because the installer is terrible, installs some background update garbage, etc. They aren't wrong about that, but the installer isn't necessary.
&gt;This isn't outdated, but just wrong. Things that are outdated now had their time in the sun and (mostly) their reasons to be used, but this was never anything other than a big mistake. You are right... BUT - at the same time make sure your build system is compatible with eclipse. Hate projects where I make a change, then have to run it on the command line to test it.
Author here. Your version is certainly cleaner, but takes 10x more effort than my version. This is only justified if you're going to do that on a regular basis. For a once-in-a-lifetime patch, my version ("hack") is good enough. Now, why not do something constructive and write your own blog post to help the community get it right?
Back when Swing was first being developed, it was actually a separate component. Gosling was heading up that effort at the time and the JVM team didn't want to include it directly, that is why all of those packages started with javax and not java. Eventually it was simply added to the standard rt jar which also has a number of com.sun packages for the various look and feel implementations. If they were to go back and repackage that as a swing.jar all you'd need to do is make sure you include that just like any other dependency in your project and let the build tool pull it in. So doing that with JavaFX shouldn't be any more difficult. I think breaking down the 60mb rt.jar into smaller jars that you only need to include when you need them might benefit builds. The key here though is that our normal build tools look for dependencies used in standard places like a .m2 directory or pull from a maven repo. So long as the primary build tools can be instructed to also pull in jars from the jdk install directory into the final bundle without too much hassle then there shouldn't be an real differences. List the parts as a dependency like you would log4j or apache-commons and set the jdk install directory as a repo and it should be good.
JDBC? JavaFX? Outdated -- it sounds like you need to spend a few more years in the industry, dude. You're coming off as someone who has no idea what they're talking about. 
`java.lang.Boolean.getBoolean(String)`
* Seam and in general JSF should be avoided. Pure javascript if you have the time and developers to maintain your UI or just plain JSP is better imho. * Apache Axis and RMI in general * Writing low level JDBC is correct, but you won't be avoiding JDBC anytime soon. Also avoid using: Cloneable, Iterator and Checked Exceptions (unless you're writing low-level code)
I doubt it is even worthwhile, as I haven't seen JSF used anywhere. More common is to use a template engine like mustache, stringently test, Thymeleaf and let the web app combine data and html.
RMI is nice if you need distributed transactions.
Java.io too. Use java.nio.
&gt;anonymous classes/implementing event handler This old convention isn't really necessary any longer with the latest Java releases. You can use lambdas or method pointers to do what we used to do with anonymous classes: class Foo { JButton button; public Foo() { button = new JButton("Press me"); button.addActionListner(this::actionHandler); } private void actionHandler(ActionEvent ev) { System.out.println("Pressed"); } doesn't even need to implement ActionListener interface. Also this works public class Foo { JButton button; public Foo() { button = new JButton("Press me"); addActionListener( e-&gt; { /* e is an ActionEvent */ System.out.println("Pressed"); } } First pattern allows using same method for multiple action listeners, second doesn't.
Ant is outdated.
JSF is the ultimate mystery to me. It's an extremely hot button item in this sub. Apparently some minority of devs love it and use it extensively. I've personally never heard anyone in any tech department even say it out loud.
&gt; viable Java desktop application framework Now if you hadn't added that line I could have pointed out that AWT is still in the JRE. Seriously though, I still use Swing quite a bit. I have tried many times to work with JavaFX and it just never *clicked* for me. I'm fine using a scene graph approach for my 3D development work but I can't just get a warm a fuzzy using that in for a UI. Probably just me as I'm so comfortable with the Swing type widget sets and model of UI development.
But that would be solved (mostly) by using ANSI SQL, right?
If that's possible in your application, yeah.
Number one was indeed little surprise, however what I find interesting is number two : "Runtime Exception". Personally, I would consider it bad practice to throw a generic Runtime Exception instead of on of its derivatives. Kinda feels like the unchecked equivalent of:`throw new Exception();` However I am happy to be educated otherwise.
&gt; So, we library developers must act and finally modularise our libraries Why can't these libraries remain as automatic modules for the time being and modularize when you feel comfortable?
Oh. Well several things come to mind: 1. ORMs don't completely remove DB inconsistency in my experience. They certainly aren't WORA. 2. Yeah, who does that regularly. I don't know many projects that need to support multiple RDMSs either.
io has some very useful relevant classes still. 
Yeah, I've still never seen it actually happen. I much prefer plain SQL over an ORM, much more control and capacity to optimise.
Automatic modules may have split packages, which are not accepted by "real" modules :-/ So, the task of modularising is more work than just adding a `module-info.java` file.
gRPC? 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Actually I found it quiet convenient and easy to set up. If your requirements would be fully satisfied by RMI, why would you avoid it?
Why are you trying to answer yourself? You're wrong about JDBC, Swing, and JavaFX. 
Actually I found RMI quiet convenient and easy to set up. If your requirements would be fully satisfied by RMI, why would you avoid it?
 java.util.Date
Well, I would, but reality is, people already did that around 5 years ago, and the process is standard is relatively well documented. For example, https://wiki.eclipse.org/JDT_UI/Howto/Create_Feature_Patch And a quick google will give you a couple more articles 
Most of the awfulness insside of Date is deprecated. The biggest problem is that it represents a single point in time with millisecond precision, and apps usually need more abstractions than that, like LocalDate. And Calendar is the worst. Try the newer time package, if you can. It is nice. 
It's a completely unnecessary abstraction and causes a ton of headaches.
I haven't had an application with only three queries ever. Usually it's 50 to hundreds. With more tables involved, the complexity of such a migration grows exponentially. 
Beautiful
Plus hibernate is awkward to use when you have a complex system... Something like JooQ has Ben happy medium for me. 
Wait, are you misunderstanding something? I am asking that what some are outdated technologies I never said javaFX is outdated instead, i used javaFX frequently in my daily jobs. My question on javaFX is I don't understand why it is gong to be removed from the next version by oracle. My company where I am working still use Swing for the purpose of old projects maintenance. Majority of existing GUI java code bases are Swing and likely will stay that way until the code base rots and nobody maintains it anymore. Majority of new Desktop applications bases are using JavaFX. 
I can't apply that example as it seems to depend on prerequisites that are not documented in the example. E.g. none of these menu items are available in my Eclipse installations: - select the project and choose Export &gt; Deployable plug-ins and fragments - create New &gt; Other... &gt; Feature Patch &gt; And a quick google will give you a couple more articles A quick google *for what*?
Or something like mybatis/JooQ rather than an orm. 
You're totally right, but it should come to no surprise that you see bad practices in this industry...
My code is going to be full of these annotations...
JDBC, JSP (and its JSTL) are very powerful and very useful. No need to avoid them. Also -- if I every needed to build a desktop app in Java I would still use Swing, but I'm pretty old school.
Because people who know what they are doing value performance. JDBC is not ideal, but at least it is not crappy ORM like hibernate. ORMs are bad, fact.
I think it's fair to say that, before attempting to patch IDE, one should inquire as to what are standard practices are, because in the end, what you are really doing here is IDE development. In this case, this means learning about Eclipse plugins and features and p2 and so on. All the information is readily available on the internet and in books (gasp! yes, you might actually want to buy and give at least a cursory look through a book about it), but you do have to be willing to spend some time reading through it. And when you do that, you will need no hand-holding in locating menu items. If you take a view that what you're really doing is fixing the classfile with no need to concern yourself with higher-picture view, you might as well just patch bytecode in the jar and be done with it. But let's be honest, it's crazy, it's dumb and nobody should do that for a whole bunch of reasons. Regular users should use the eclipse/java distro combination that works, and bleeding edge users should do their homework and do things the way Eclipse developers do it.
It seems like I recall it being demoed at one of the JavaOne confs in the 90s. Pretty cool technology, ahead of its time.
This. I have used AWT in the past and have recently tried JavaFX for a desktop app with scene builder. It was a great development experience, scene builder feels better than android gui tools
Java 3d. It's clear that is not supported anymore, although you might be surprised ti know that in my University there's a course that still teach it
I think we migrated RMI to REST, because operations could not load balance it.
Have you tried scenebuilder? It's a gui tool for JavaFX, and although I haven't used it extensively, It felt pretty mature and better than android gui tools in some aspects
Osgi, maven..?? If this is generated by AI bot, then it's quite good tbh.
I throw general exceptions regularly. I always ask what is no the caller going to to with the type information. I only define a specific exception type if the caller can make use of it. If it's going to get passed up the call stack, logged and thrown away then defining different types doesn't do anything useful. Obviously this depends on knowing the calling environment. If I'm writing an api I'd be less likely to use a generic exception. 
&gt;It's a completely unnecessary abstraction What does JSF exactly completely unnecessarily abstract?
Combining data and html using a template is exactly what JSF does ;)
I was just about to say the same thing. Shitty site with lots of ads and the content could have been written by a monkey.
&gt; java.lang.Boolean.getBoolean That one along with Integer.getInteger, Long.getLong etc. are the most mispaced &amp; misleading methods in whole JDK.
&gt; in general JSF should be avoided Why should JSF be avoided? &gt;Pure javascript if you have the time and developers to maintain your UI You mean javascript without any framework like Angular? What if you don't have the time? 
&gt; [...] yes, you might actually want to buy and give at least a cursory look through a book about it [...] Right :) https://www.youtube.com/watch?v=AbSehcT19u0 &gt; you might as well just patch bytecode in the jar and be done with it Indeed, that might have been an even better hack, because I could then upgrade Eclipse until all these bugs are fixed. That was also Rafael Winterhalter's idea: https://twitter.com/rafaelcodes/status/1007581163207217153 &gt; Regular users should use the eclipse/java distro combination that works, and bleeding edge users should do their homework and do things the way Eclipse developers do it. You're right in a way, and then again, you're wrong in another way. Everything is a tradeoff. We can't learn everything thoroughly, there's simply no time. Anyway. You're overengineering this problem :)
&gt; Apparently some minority of devs love it and use it extensively. I think it's the other way around. A monitory but very vocal group of devs hates it, or pretends to hate it since they have interests in alternatives. A small group of others repeats the hate, since they supposedly feel it's the thing you should hate (even though they probably have no idea why they should hate it).
The newest versions of Java EE are great ;)
&gt; OSGi Why? OSGi is still releasing new specs, and there is still a lot of drive behind it, now maybe more than ever
If you think that’s how your post should read, you should consider brushing up on English. 
Applets for sure. Personally, I would rather use JSP as a templating engine + plain Servlets/Spring MVC for server side rendering (would probably choose SPAs) than JSF. JDBC (using it directly) is still useful if you don't want to use some ORM framewrok for everything - ie. database mifrations, setting up integrations test, small utility programs (if you want to use Java). Let alone all this frameworks are build on top of it.
As others have said, JDBC is nowhere near outdated. But as far as things to stay away from, I'd say JPA. Things like jooq are great as an alternative. Really, I'd try to use alternatives to any runtime annotation reflection framework (Jackson can stay tho). They're slow, arcane, and not usually compile checked. 
I'm guessing MVC, since it's supposedly built in to it. 
JDBC is NOT outdated. Yes, there are helper libraries that can abstract away a lot of the boilerplate, but it is still an excellent tool for building and executing SQL operations.
How is Java.io outdated? Yes, NIO has some powerful tools, but I find IO's simpler files and streams to be able to handle almost all cases, with NIO paths and channels only being used in specific cases where they provide additional valuable functionality
I wouldn't say "unnecessarily", but it definitely abstracts too much, namely large parts of the client-server-communication. JSF is supposed to be used in websites. You shouldn't abstract-away the web when you program for websites! That was simply a bad idea to begin with. To say such an abstraction is leaky would be an understatement. Sooo many problems with JSF-based websites are caused by programmers relying on this abstraction and the fix is almost always to break it. Just one example: Not cleanly separating between client and server causes so many security issues. Think of input validation alone. You really have to put work in to know exactly who is sending which data where and if that's a secure connection, if the data have been validated and by whom etc. All of that is critical information that JSF tries to abstract away.
amen to that. JDBC is anything but outdated. Swing is very old, but it's still one of the most reliable ways to make purely-Java UIs. JavaFX has never received a lot of love and has been mostly DOA, but it is the only alternative to Swing out there right now.
You should consider improving the ability on reading comprehension. That's all
upvote for username.
Corba ;-)
Yup, totally agree 
Amen
At the start of my career, I spent probably months trying to monkey-patch things into complex projects like IDE or application server. None of it went well, and I will not do it again. Unlike the light bulb that was designed to be changed by a layperson, you have no idea what you're doing, inserting yourself into a full-blown IDE. Your patches will produce mysterious bugs in seemingly unrelated parts of the product, and you will be lucky if you discover them early (i.e. before you push your code into production). Also you will discover that your patch did not actually solve other issues with support of that new version of java or whatever. And after weeks of wasted time, you will discover that JDT developers are actually not idiots and have produced an actually working version of it in RC/Milestone/HEAD/.., so all you had to do was wait a little and get it there. 
What do you mean jdbc is deprecated?
This list is terrible. Applets and Java Web Start are probably the only two that actually belong there, just because they're not only being deprecated, but the industry is collectively trying to kill any apps that use them. Otherwise, you are clearly way off the mark.
I wrap checked exceptions on Runtimes all the time when I want the program to stop. How do you propose I do that?
I invite you to be specific with respect to my two patches. How could they possibly go wrong?
Developer surveys say JSF is in the minority. Thought works radar [stopped tracking it 3 years ago after recommending devs to avoid it](https://www.thoughtworks.com/radar/languages-and-frameworks/jsf).
Ah the good old “you read it wrong” argument... Look at all the other comments. 
Checked exceptions if you NEED a developer to handle it (in which case, why not build that into the contract instead of relying on exceptions?) Unchecked exception if it's a one-off, horrible thing that can go wrong and doesn't need to be handled specially (log it, abandon the request, return generic what-went-wrong to client) Extended unchecked exception if it's a type of issue you want to handle at the highest level in a special way. (Timeout waiting on resource; system outage; auth'n / auth'z violation that should've been caught by UI; etc...)
I think it's important to differentiate between things that have fallen out of vogue (like Swing) and things you really should avoid (applets, I don't think any browsers support them anymore).
`java.util.Date` Seriously guys, please use the far more intuitive `java.time` package!
`mvn eclipse:eclipse` Please just use m2e.
&gt; I will not do it again I said it and I meant it. I have years of Eclipse development under my belt, and still I will NOT go screw around the JDT internals without spending a few days refamiliarizing myself with its infrastructure and reading through JLS. Precisely because I know through experience how it ends (spoiler: not well). 
I hear you on this one. Drives me nuts. We've refactored streams *out* of our java projects on a meaningful number of occasions because of exceptions. I think the crux of the problem is streams are syntactic sugar, so the underlying bytecode is not being adapted to make this easier. 
There is currently a holy war between the Checked and Unchecked Exceptions brigades. I'm currently siding with the Unchecked Exception contingent, because almost all of the error handling code I see in production systems amounts to `catch(Throwable){ logger.error("Oops!", t); }`
&gt;when I want the program to stop Why do you want to do that? I can't come up with a reason to abruptly stop an application. Well, maybe for a command line util? But most of the applications run in a loop where you want to gracefully handle the exception and carry on.
I appreciate the technical overview. We use JVMTI for security testing (https://www.adversalabs.com). However, you've lost me on the use case. Why would I ever do this in production? Seems to violate a number of security and engineering practices. 
I've found that there are a lot of cases where lambdas won't work because there's more than one unimplemented method in the interface. For example, a MouseListener. Maybe I'm missing something but it seems to me there's still need for either implementing interfaces or anonymous classes. 
I have no idea what on earth you monkey patched, but what could go wrong in *my case*? &gt; and reading through JLS Well, surely, an AIOOBE or NPE does not require reading the JLS to avoid?` I will rest my case: You're overengineering this problem :)
This was suggested to me as an alternative to this: https://blog.jooq.org/2018/06/15/how-to-patch-your-ide-to-fix-an-urgent-bug It was suggested to me by the author of ByteBuddy, so there's a strong bias towards this approach. I'ts just good to know the approach exists and to be able to consider it in the right moment.
But the fact is they made a choice to have method signatures without a throws clause.
Like what? I'm genuinely curious. I make a point to never instantiate java.io.File in particular and my code gets more concise and simpler. Eliminates most of my need for IoUtils.
was more talking about why a generic runtime exception is 2nd instead a number of its child classes, that I would rather use.
I do this regularly in web applications. When something that is required for the request to complete throws a checked exception, I rethrow it as a RuntimeException. This stops any further computing and is then caught by the web framework which immediately presents the website user with an error page.
Well, yes you made a good point. Calling it bad practice probably is a bit harsh. Consistency is key. However, once you start getting into more complex exception handling and you might need to handle different exceptions diffidently (abort/rolback, log entry,...) not using derivatives(common or your own) you will end up shooting yourself in the leg longterm
It's not.
javascript == clean, since when?
For the same reason. If the only thing the caller is going to do is catch and log, there's no benefit to throwing more fine-grained exceptions. For example, say you're connecting to a database. If it fails, I'll look in the DB logs to find out why, but my webapp is just going to show a generic fail whale screen. As a client, there's nothing I can do if I know that the failure was due to a network error or a disk error, so differentiating doesn't really help anyone.
Ok. This is a terrible example. If you don't put any effort on learning the tool, which hibernate is, then you should suffer these pitfalls. N+1 query problem is very common in ORM. And most of the time, if you learn/read documentation, you can avoid it easily.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Streams don’t handle checked exceptions because they’re based on a functional programming model while Java was originally designed as an imperative language. In a hypothetically pure FP model, no data ever “returns” and no errors ever propagate back to the caller. All processing and data only ever moves forward toward the end of the call chain(s). As such, streams are an attempt to shoehorn FP into an imperative language, and the concept of checked exceptions just doesn’t fit because of the implicit design implication built into them that it’s the caller’s problem to deal with it. I’d never expect checked exceptions to be handled well in Java streams without some pretty significant language design changes that will never happen.
This doesn't stop the application, just this one thread handling the request (or however is the handling implemented). Other requests are unhindered.
Yep, you are totally correct. Maybe the OP just meant just that it stops the application for the end user, I don't know :)
I hate to be pedantic, and I don't think I am. Throwing Exception is considered a bad practice. You shouldn't do that. Are you familiar with the class hierarchy under Exception in the Java standard library? Sure it's an unfortunate hierarchy, but both checked exceptions and runtime exceptions are subclasses of Exception. So you aren't only avoiding defining "a specific exception type if the caller can make use of it" but you aren't even indicating whether it was a runtime or checked exception. Furthermore, you force the caller to catch Exception which will catch any runtime exceptions as well. So let's say that you throw your Exception and they catch it, next time the disk space is full or some other environment issue happens that triggers a runtime exception, or if your code checked an array index out of bounds, or whatever, you throw your exception, they catch and log it, and the program goes on its merry way none the wiser.
Yeah of course there's a holy war because damn it when people want to be lazy and ignorant they'll spend more energy than just educating themselves.
The NoClassDefFoundException one being so high up is interesting. That’s likely because people are in some kind of (spring) dependency hell, and often turn to the web to sort out what versions they need. Just a guess.
With the current state of Java, you have to read the javadoc anyways. Important exceptions might be unchecked. Exceptions you can't do anything about might be checked. It's really the worst of both worlds. The dumbest checked exception is UnsupportedEncodingException thrown by URLEncoder.encode. The dumbest unchecked exception is NumberFormatException thrown by Integer.valueOf. Ultimately the problem with checked exceptions is they're making design decisions for you. That's fine if they are custom exceptions you are writing for your application or company. It's less fine when its the standard library and their ideas of what should be checked vs shouldn't doesn't match your reality.
That's the best case. The typical case, I would argue, is just`catch(Throwable){}`.
Or, if you can't move to Java 8, use JodaTime
Didn’t Thoughtworks have Spring people working for them? Recent Eclipse and OmniFaces survey paints a different picture, and please take a look at the recent JSF books being released.
JavaCard API is not outdated, and if you need to interface with a JavaCard Applet via a PC/SC SmartCard reader it’s the best method for Java. It’s also useful if you use the Provider pattern to supply an alternative interface, such as writing a remote server to communicate to a SmartCard via an alternative method such as OTA. This is a big part of how telecommunication networks manage SIM cards, and how banking providers remotely manage payment cards. It’s abstracts compliant ISO-7816 protocols, which is a big time saver. I think it’s niche, but given there’s a lot of reasons to use a SmartCard in more secure compute environments it’s still quite useful in the base JDK/JRE. 
Every single time this comes up it's you and /u/henk53 jumping on me. I assume you two work for Oracle or something.
I would probably still throw a custom RuntimException. If you know what happened, there's no point in throwing a generic exception.
I totally agree. One of my biggest pet peeves when I'm dealing with enterprise code is when the architect decided to use generic exceptions all over the place. It forces the consuming code to have unnecessarily complicated exception handling built into it and makes debugging harder.
True, but bad practices being normal isn't really a good reason to defend it.
But runtime exceptions include the original cause if you just wrap the checked exception into a runtime exception.
[removed]
Look, here is a simple solution for you (you can find an implementation in Vavr): interface CheckedFunction&lt;I, O&gt; { O apply(I i) throws Exception; } static &lt;I, O&gt; Function&lt;I, O&gt; unchecked(CheckedFunction&lt;I, O&gt; f) { return i -&gt; { try { return f.apply(i); } catch(Exception ex) { throw new RuntimeException(ex); } } } fileNamesToRead.map(unchecked(file -&gt; Files.readAllLines(file))) 
NPE being first one is not surprising at all (*cough* Kotlin, Scala), but Runtime... Are people really abuse it so maliciously as a goto replacement? What other possible cause could raw RuntimeException have?
.net wpf apps are decades ahead of any java interface lib
Use a reactive-stream ibrary like rxjava that will additionally in-stream error handling and fine-grained parallelism control.
Likewise, every time JSF comes up, you’re eager to shout how nobody is using it and how you’ve never seen it being used. Do you work for an alternative MVC framework?
Take a look at Vavr's Try structure. It's a decent way of wrapping Exceptions in a functional manner.
Problem with unchecked (that makes me yell at clouds and learn functional programming) is that they are also undeclared most of the time. Which means the only way you would ever know to expect any of them is when your seemingly working code randomly fails in production. While checked exceptions, while adding a headache of wrapping simplest fail-safe code in empty try-catch, are also extremely predictable and will never cause you random unforeseen issues.
No, I just have to deliver working code. I don't even use Java half the time.
More likely they don't know what they are doing, at all.
&gt; why not build that into the contract instead of relying on exceptions Because doing it in a pure Java is a pain and a half. I've seen 2-3 libs that did it and... You get the idea. To build them into contract you need something akin to at least basics of functional programming: Maybe, Either, Ior, Tuples, etc. And implementing them in Java (unlike Scala or Kotlin) is extremely awkward and often leads to even more ugly and unveildly code than just plain dirty checked exceptions
Axis I agree with, but SOAP,0 despite all the hate it gets is still used extensively in serious corporations. Top-tip, don't be a Hipster, not everyone like the abortion that is JSON.
As a maintainer of an EclipseRPC application and thus being forced to use the IDE aswell, I tend to lean towards "everything works so much better in IntelliJ." Even if they apparently have some Java 9+ issues on their own.
What’s wrong with jmx?
I forgot OSGi was a thing. Worked on a very, very complex project a few years back that used this. I don't miss it at all. 
There's generally a small performance penalty with exceptions, iirc. I'm sure there's cases where I'd take a checked exception over unchecked, but I'm having trouble thinking of examples I've run across in my day-to-day work. 
It depends. In theory, but most of the time I see this happening I get a 500 back from the server with no message.
Most of my area at my company uses spring, and 80% of them have no idea what they are doing. Spring is powerful, but teams can run into issues quickly when people copy/paste and don't understand it
This is a valid concern. The pattern I see is a giant try/catch block somewhere close to the user interface that pokemon catches anything that might happen down in the guts. This seems like a sensible defense just because unchecked exceptions are a thing conceptually, but I can't decide if it's an antipattern or not.
In my daily practice this is rarely a problem. I elected a long time ago to (almost) never add "throws" clauses to my methods signatures. It does not mean that I never throw exceptions. Quite the opposite! But I only throw unchecked ones. Should I call a checked exception throwing method from my code, I'll handle it locally if it makes sense or (most of the time) wrap it in an unchecked exception and rethrow it. As a measure of safety I'll usually have some top-level try/catch in my apps, with at least a logger to react to unhandled exceptions reaching it. A consequence of that style of coding is that I rarely have issues using my methods from streams. Note also that unchecked exceptions "pass through" streams, so you still get meaningful (if verbose!) stack traces and the expected behavior (the iteration is halted).
Very true, I've run into that as well. I usually don't use anonymous inner classes in those case, I create a named class to handle them. I may then register the callback function or lambda with that object. 
I work on a legacy project right now with OSGI. I really hate my life at the moment.
Personally, I find File to be a very useful class. Especially for things like programming competitions, being able to do new Scanner(new File("")) is extremely useful. For any application I'm not using for just myself I've used nio, but java.io definitely still has its uses. 
Spring! Very outdated, many needless complexity and xml 
Our internal workflow visualiser 
???? With the JSF, data validation very clear!!! Is bean validation annotation, cannot be simpler. Is with client framework and rest where you meet with problems, as validation need to be done twice! With JSF, not the case! Is template, you bind to bean. End of binding you put annotation. Done! And bean validation annotation we can reuse for entity and Jpa if we want.
Stupid! Jboss and Tomcat are very good and modern! You used Tomcat 9? Please, go home with Spring!!! 😡
Not decent, but genius. Puh now I have to refactor a bunch stuff
You can still do `new Scanner (Paths.get(""))` without missing a beat. Path is much easier to deal with for folder traversal. 
I write Android (and IOS) apps for work. Qt is My favourite framework, not Java but Android (and IOS) related. Hope it helps. http://doc.qt.io/qt-5/examples-android.html 
We really use JSF sooner than Spring. Is JSF nicer and better performance. Only if customer ask (but not many) we use the Spring.
At the moment Graal's native-image doesn't support Swing or JavaFX. There's a static field somewhere in Java2D it can't resolve AOT so it fails on compilation. I'm really excited for Graal but parts of the JRE need to adapt to its conventions. 
what is the deal with `javax`? Is that deprecated? I get a lot of warnings.
Unruly control provides a set of helpers that make this considerably more pleasant, by mapping Exceptions to Eithers [https://github.com/unruly/control/blob/master/src/test/java/examples/ExceptionsInStreamsHandling.java](https://github.com/unruly/control/blob/master/src/test/java/examples/ExceptionsInStreamsHandling.java) ``` @Test public void handling_exceptions_with_result_example() { List&lt;Integer&gt; customerAges = Stream.of("Bob", "Bill") .map(tryTo(this::findCustomerByName)) .peek(onSuccessDo(this::sendEmailUpdateTo)) .map(onSuccess(Customer::age)) .map(recover(ifType(NoCustomerWithThatName.class, error -&gt; { log("Customer not found :(@"); return -1; }))) .map(recover(ifType(IOException.class, error -&gt; -2))) .map(ifFailed(__ -&gt; -127)) .collect(toList()); } ```
Sure, Android Studio is the ideal IDE for making Android apps in Java or Kotlin.
Thank you! This is a probably a stupid question but i want to know how hard it is to develop an app for iOS and Android at the same time?
Thanks!
Totally how I work around checked exceptions, yes.
Meh. For simple projects, maybe. But for some of the more complex (think multi-repo, multi-module) projects I've been working on, m2e tends to get horribly confused, and the only way I can get the project to build is by switching to command line maven. 
I (rarely) use specific exception to signal rare "business" situations. Any other cases, unchecked are doing best for me (they are a must have in stream-invoked code anyway).
I find myself using "Optional" in some of those situations now. Beats a "NotFoundException" or returning null in most cases!
You all need to keep in mind how many 10s of thousands of java developers there are.. I think over a million world wide now isnt it.. or maybe even more? I have worked with many developers from various parts of the world and it is truly sad/unfortunate how many fall into the category of being drones.. not able to think on their own, outside the box, solve issues, etc. I will say for most of them, it is not their fault. It is truly bad management style.. they expect developers to just churn out code and get it done and who cares if its not proper use of exceptions, etc. Case in point.. Java classpath hell and the NoClassDefFoundException.. and its siblings. The biggest reason this happens.. java developers.. most of them.. have no clue how the classpath within the JVM works.. e.g. how Java classloaders look for and resolve classes, in what order, etc. So.. what happens.. they just use whatever library they need based on SO solutions without a thought as to any potential clash of the same library, different versions being used in their code base. Case in point.. I have seen developers build SDKs for others to use and just pull in tons of dependencies without considering that the SDK has to work in ANOTHER application that has dependencies... so what happens.. you either get NoClassDefFoundException, or more likely, due to the same library, different versions, being in the same app classpath.. the SDK stops working because it found the class of a dependency in the main app classpath.. only its a different version.. and the method it is looking to use doesnt exist, or has different signature, etc.. so now you get one of the exceptions about method not found, or method signature issues.. and developers.. who just arbitrarily add dependencies, that dont know much if anything about jvm/classpath/classloaders.. scratch their heads wondering what the hell happened. It ends up wasting hours/days/weeks sometimes of productivity.. all because of the huge lack of understanding of one of the most critical parts of Java. I go out of my way to build SDKs with as little if any dependencies purely because I know exactly what will happen if someone takes my SDK into their app and it has dependency clashes. Either my SDK doesnt work right..in which case I get floods of emails/issues/etc saying something doesnt work.. and you know what sucks about that.. there is no way for me to determine that the issue is possibly because they use a dependency that clashes with one I used. Or.. their app stops working because the dependency in my SDK is found first and breaking other libraries they use.. or their own code. The sad thing is, I dont see a good way to solve this issue. If day 1 every aspect of Java tutorials made it one of the most important things to learn and understand.. I think we would be in a much better place today with this issue, which I would argue is one of the hardest to track down and is one of the biggest problems that occurs... especially since the dawn of tools like Maven and Gradle that just pull in dependency after dependency for you without you having any idea what other libraries a dependency depends on. Sure..you can deep dive on it.. but who does? Only time anyone truly figures out that their app is using 2 (or more) versions of the same library.. is when they get hit by one of these classpath issues. 
With qt-5 the same code can be compiled for Android and IOS (also desktop OSes) , so it's not hard. You can call some specific platform API, usually it's not needed, but if you do it, that part must be rewritten for each platform. In qt you can use two approaches: - everything c++ (qt framework + qt widgets) - logic in c++ and gui in QML (similar to Javascript) The second one (Qml) is the newest and preferred for mobile. Qt is open source, you can try by yourself freely. It's easy. Some more examples: https://showroom.qt.io 
It ain't, that's the point.
Thank you so much for this! This is looks briliant!
Man there is so much wrong with JSP it's not even funny (every aspect of it feels sub-par for most use cases to me), but JSF is equally ridiculous jousting at windmills engineering. &gt;This separation between component tree and user interface allows JSF to support different markup languages (HTML vs XUL) or alternative browser environments (desktop vs smartphones). &gt; &gt;The second function of JSF is to *respond to user-generated events* in the page by invoking server-side listeners, followed by the generation of another user interface (e.g., web page) or an update to the user interface already displayed (possibly through Ajax). In this regard, JSF is said to be an event-driven web framework. DO NOT WANT.
&gt;I hate to be pedantic, and I don't think I am. Throwing Exception is considered a bad practice To be pedantic back, I never said I was throwing Exception. 
I didn’t mean to hurt your feelings or anything but application servers and servlet containers like jboss and tomcat are really not the way to make java backends anymore. Jboss/tomcat = legacy I know Spring has a bad reputation and that actually made me hesitant to try out spring boot but it’s the best framework for making java backends today
https://github.com/ThreeTen/threetenbp
I think it depends on your intended use case. If you want a native Android app, Java and Android Studio are your way to go. If you want to develop games, or want something looking IMHO a bit better, especially as you specified having experience in Unity, I'd go with Unity (which is also cross platform, if that is something that interests you) or other frameworks. 
I think for my simple use case these aren’t concerns. It’s a simple transfer of byte arrays and status between JVMs on the same host. So I’m thinking RMI is a good fit. No need for overhead of HTTP / REST services. I see the benefits of using them over RMI for more modern distributed applications though.
A simple transfer of byte arrays and status sounds like a perfect fit for HTTP, too. Seriously, if you're worried about HTTP overhead, do a test on your local machine. I did that with my simple Java web service and curl and discovered I could "download" 700Mb on localhost in a few seconds. The overhead is not in the code unless you do something truly dumb.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
JavaFX was removed from the standard library because the new 6 month release cycle makes it harder on JFXto push out updates (from my understanding)-- by separating the library, JFX can have updates pushed to it whenever. This may also make it easier to use dependency managers (eg. maven) for it, and it decreases the bloat on standard Java for users who aren't interested in JFX. That is to say, JFX isn't outdated because oracle removed it. It's a win-win situation for both Oracle and JavaFX users.
True but you can extend a RTE with your own that adds a bit more info / at the very least a way to differentiate the thrower. For instance if the DB fails and throws an IO you can wrap it as a DBFail, then when you catch the RTE at the top be more informative about what the user should do vs just returning a 500 and some message. That's at least how I've handled those few "stop all processing here" exceptions in my http/api applications
For standard Android apps that don't require advanced rendering, Android Studio is the way to go. It's pretty intuitive and has a drag-and-drop UI builder that makes it super easy to make things look good. As far as games go, LibGDX is a popular Java game framework. 
Websphere
Some developers use it as a default way to say: "if this variable has this value the model breaks, but it's not my fault, someone changed something without asking (or maybe will be me while testing the change I've made). I hope it doesn't explode in production". 
Wrapping a checked exception you can't reasonably handle in a runtime exception and allowing it to propagate isn't uncommon.
JDBI is fun too
&gt; But most of the applications run in a loop where you want to gracefully handle the exception and carry on. Yes and that error handling may be well up the stack. You can't pass that checked exception up the stack without changing a whole lot of signatures. So instead you wrap it with RE, let it propagate, let your error handling catch and handle it before moving on. That and general exceptions where one of the subclasses is not appropriate and the developer doesn't want to make an entirely new subclass of RuntimeException just to pass along a single String and a stack trace.
&gt; For instance if the DB fails and throws an IO you can wrap it as a DBFail, then when you catch the RTE at the top be more informative about what the user should do vs just returning a 500 and some message. When you need to handle *this* exception differently then obviously a subclass is appropriate. Most of the time we just want the message and a stack trace.
I don't find checked exceptions to be reliable in practice. Half the time I am handling exceptions that will never occur with my implementation. Methods that throw checked exceptions can also throw unchecked ones too. It is hard to foresee every possible exception that you could throw so there will always be holes. I prefer just making everything unchecked and just handling the exceptions only when they need to be handled.
I think I'd bet money the most common use case is wrapping some variant of IOException or IOException itself in RE. What would you use instead?
The problem is all it does is force someone to wrap it in a try-catch. A try-catch that quite often swallows the exception. A try-catch that quite often blocks the actual behavior you want from happening: the exception propagating up the stack... because it was wrapped in a fucking try-catch. Which is why they end up rethrowing it as a RuntimeException.
Nonsense it's perfectly possible to design a stream-like api in Java which behaves that way. Both throwing checked exceptions back to the caller using generics, or passing exceptions forward down the chain, are possible. Where specifically do you see a need for language-level changes? It's achievable today.
&gt; Throwing Exception is considered a bad practice. Comment you're replying to didn't say that.
When you have something that needs to be handled differently you obviously don't use RuntimeException. Most things do not need to be handled differently.
Yeah, I admit that I don't know reddit very well. I still have to learn it. Sorry...
This statistics shows what people ask about on the Internet, not what they throw. I suspect when a library throws a RuntimeException is just confusing. However I would be surprised if they would really do it. It worths some de eper investigation.
This is great, I wasn't aware of Vavr, thanks for suggesting it. 
We probably are at the point where JSPs are also outdated, even though I still use them for legacy development. Everything at this point should probably have the browser running an MVC library and pure rest endpoints on the Java server side.
Oh yeah I'm not saying you can't. Especially if you are consistent! Just writing an alt solution. I've found having a custom RTE subclass per _business type_ of error is helpful especially when coming back months/years later. Like RecordNotFound, DuplicateRecord, InvalidJsonException etc. What I also found useful is using UncheckIOException and similar implementations to avoid pure RTEs for previously checked exceptions. Though I think majority are Guava classes which is it's own nightmare to deal with these days. 
Just found out that the huge old project I'm currently working on at work uses java.util.Date... heh It's not a pretty project, even excluding that. 
I avoid JSF because it's heavy and quite frankly pretty complex to maintain for a UI library which has lots of breakage due to embedded javascript failing. (from Days spent on Seam) I meant pure javascript as in not compiled from some other language like GWT or Vaadin. GWT is my choice for intranet apps. It doesn't cost much dev money to maintain once the app is shipped, and I'm just good at it, so it's easy for me. Where you can keep UI simple it's pretty good. OTOH If you have front public facing applications, you can benefit a lot from a lot of resources that just know javascript and are pretty inexpensive so it makes sense to just go with the next 6 month iterated javascript framework.
Checked exceptions are purely a language feature, the VM doesn't care about them at all. Java always had means to throw them even from methods that don't declare them. Until before Java 8 there was Thread.stop(Throwable) that could be abused for this but is now defunct and since Java 6 we can neatly abuse generics for this: public static void throwAny( Throwable ex ) { ThisClass.&lt;RuntimeException&gt;throwException( ex ); } @SuppressWarnings( "unchecked" ) private static &lt;T extends Throwable&gt; void throwException( final Throwable ex ) throws T { throw (T) ex; } You can catch them with catch(Throwable) or catch(Exception) or by adding some other (potentially dead) code into your catch block that declares them.
 try { myValue = URLDecoder.decode(encodedValue, "UTF-8"); } catch( UnsupportedEncodingException ex) { throw new RuntimeException("Should never happen!", ex); }
&gt; throwing checked exceptions back to the caller using generics Right. So how do you imagine this code would look like with generics? stream.map(this::processButSometimesThrowExceptionA) .map(this::processButSometimesThrowExceptionB) .map(this::processButSometimesThrowExceptionC) &gt; or passing exceptions forward down the chain How do you imagine this? Each `map` will automatically wrap stuff in an `Either`? What if there are 3 chained maps? `Either&lt;Either&lt;Either...&gt;&gt;&gt;`?
I seem to recall having lots of issues with WebSphere, which provided its own JSF libraries, interfering with the alternate JSF implementation used as a dependency by an app. I wasted too much of my life trying to resolve that.
Someone correct me if I'm wrong, but wouldn't this be a good use case for a monad?
This is how I handle it. In java pretty much any statement can throw an exception, so you need to always handle runtime exceptions anyway. 
 @SuppressWarnings("unchecked") private static &lt;T, E extends Exception&gt; T throwUnchecked(Exception e) throws E { throw (E) e; } static &lt;I, O&gt; Function&lt;I, O&gt; unchecked(CheckedFunction&lt;I, O&gt; f) { return arg -&gt; { try { return f.apply(arg); } catch(Exception ex) { return throwUnchecked(ex); } }; } This implementation avoids wrapping the exception in a RuntimeException. `throwUnchecked` works because all *generic exceptions* are treated as unchecked in java. Also, I strongly disagree that wrapping and propagating exceptions through the stream always is better. It all depends on the context. Non-recoverable errors shouldn't not be caught but allowed to propagate to the top of the calling chain.
I've never been able to understand what it's used for.
It looks like in your [submission](https://www.reddit.com/r/java/comments/8rg9ft/program_wont_read_input_properly/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Hey! This looks like *my* code!
&gt; every viable Java desktop application framework https://github.com/libgdx/libgdx/wiki/Scene2d.ui
[KryoNet](https://github.com/EsotericSoftware/kryonet#remote-method-invocation) if you really want RMI (method calls get translated across the network), otherwise TCP can be [really easy](https://github.com/EsotericSoftware/tcpserver).
After Swing, I'm too scared to try it.
All good topics! The struggle I had was to keep the talk roughly in the middle ground. It's one of those topics that most people know most of the stuff, but everyone is not knowledgable in all of the areas. If everyone would leave with one piece of new knowledge, I would consider it a success. Straddling that middle ground in a talk of 50 minutes meant I couldn't deep dive into any particular area, but perhaps I can come up with a longer form presentation (or document) that covers other areas. The other struggle I had was that I kept writing slides that were about good Java engineering practices, and then I had to keep refocusing myself onto solely API issues. That's partly why I have a large (and slightly less polished) overflow section at the end of the slide deck, but even more was cut out before it was even written.
But it's oh so nice! Import, done.
For future reference, this is the project where I used revapi - it is a simple tool to do a check against a list of projects: https://github.com/JonathanGiles/azure-backcompat It in theory would run daily thanks to Travis CI, and then publish the results back into github here: https://jonathangiles.github.io/azure-backcompat/ I never really completed it, but it was a good proof of concept.
This was suggested back in 2010 but unfortunately never went anywhere https://web.archive.org/web/20170313093438/https://blogs.oracle.com/briangoetz/entry/exception_transparency_in_java
Relying on IDE build systems kneecaps you if you want any kind of CI/CD pipeline.
Struts 2 has that security issue.
Sitting boot still need an app server. Isn't the default embedded Tomcat?
Expensive servlet containers are unnecessary with mature open source versions out there. Although Websphere you can use free without support now I think, I don't really know why you would choose it over something like Tomcat.
FYI, if you like Android Studio it's just Intellij IDEA Community Edition with Android tools built in. It's a huge upgrade over Eclipse in my opinion.
oh my god.
But there are already Illegal Argument and IllegalState just for that reason. And they are checked so you know where you should be expecting hem at the top level
The "just in case" "pokemon try-catch" is definitely an anti-pattern. Problem is - you can't really get away from it. Because in client applications it will just lead to silent crash, and in server software this will still happen, only it will be done by the service framework and will expose all of the guts of your stack to the unlucky end user. The only solution i currently found (for pet projects in Kotlin) is going full functional and writing the entire service around the usage of Either and sealed error hierarchy, where only "foreign" untrusty calls at the very bottom are wrapped in try-catch. But that does complicate code a bit and i'm still on the fence if this is a good idea or not.
Yes.
Of course there are better ways to do this, and better unchecked exceptions to choose, but apparently runtime is the default one. I've seen it a lot in production code.
That’s awesome! We rely on it so much in our production system so thank you for your contributions. 
I guess it is preference, I preffer action based MVC models.
There's a patch, and people should not run Apache as root.
I've used it extensively in a previous project. It's really powerful, awesome and easy to use to boot. Thanks!