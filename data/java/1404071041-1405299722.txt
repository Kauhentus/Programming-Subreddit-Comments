Cool. Right now I'm going through your videos. I've got an idea for an app, but I want to use modern versions of libraries and frameworks. So, I'm trying to decide whether to use Spring 4 or Java EE 7. Your videos are leaning me towards spring for now. I'm super irritated with Spring though, the docs and guides on their site are pretty much never for the actual latest stable. Even now, they still use 3.5 on spring.io/guides
Thanks a load, this is perfect for what I want also for anyone who wanted the code : public static void loadClasses(Configuration config, DvZ dvz) { File classdir = new File(dvz.getDataFolder() + "\\classes"); if (classdir.exists()) { if (classdir.isDirectory()) { File[] classes = classdir.listFiles(); for (File f : classes) { int len = f.getName().length(); String ext = f.getName().substring(len - 6, len); if (ext == ".class") { Class&lt;?&gt; c = f.getClass(); System.out.println(c.getName()); try { dvz.addClassPath(c); c. } catch (IOException e) { e.printStackTrace(); } } else { } } } else { dvz.getLogger().severe("Failed to to open classes directory. Deleting file named: " + classdir.getName()); classdir.delete(); } } else { try { classdir.createNewFile(); } catch (Exception e) { e.printStackTrace(); } } }
Have you heard of Minecraft?
Runescape as well.
The people who made A Reckless Disregard for Gravity (Dejobaan Games) is also a great Java game studio.
I think the issue then, is how do I get it to let me delete the tags without screwing up the indices? Android uses SpannableStringBuilder to style Strings, but using its delete() method ends up making me have OOB errors again when I try to style it.
You might be interested in [jMonkeyEngine](http://jmonkeyengine.org/). A game engine written in Java with support for Windows, OSX, Linux, and Android (iOS is coming soon too). If you want to develop 2D games, ~~[Slick2D](http://slick.ninjacave.com/)~~ [libGDX] (http://libgdx.badlogicgames.com/) is probably what you're looking for. 
Maybe you have to reformulate your question, because Spring MVC can use JSP as view technology but currently better is select Thymeleaf as view for Spring MVC
The Android specifics are outside my realm but maybe you can create a new string with the regex match (group 2)? I'm not in front of the Javadoc now but look into the append and/or replace methods on Matcher.java 
OK, so I got it working halfway. I updated the code on [my GitHub]( https://github.com/drinfernoo/CubeUtil/blob/master/CubeUtil/src/com/blango/cubeutil/AlgorithmBuilder.java), but I can only make delete() work on either red *or* green. I elected to stick with my current method, and possibly switch over to using Matcher later, if possible. I thought I had it working, but it only does one color at a time, or else I get OOB :( I would really like to stick to this for now, simply because this doesn't need to be a very robust implementation, and I'm a little more comfortable with String work.
Use [libGDX](http://libgdx.badlogicgames.com/) over Slick2D as the later is not really maintained (and libGDX has a really active community).
The biggest community for this is probably: http://www.java-gaming.org/ And here are a few games that are written in Java: * [Altitude - Indie - Steam-link](http://store.steampowered.com/app/41300/) * [Spiral Knights - SEGA - Steam-link] (http://store.steampowered.com/app/99900/) or probably any other game made by [Three Rings](http://www.threerings.com/) * [Titan Attacks! - Indie - Steam-link] (http://store.steampowered.com/app/203210/) and i think the studio Puppygames has only Java games * [Operation Stormfront - Indie - Homepage] (http://www.operationstormfront.com/)
Totally... The best solution is almost always the one that works :) 
+1 for libGDX. I just started a game using it and the 2D support is nice and simple. Being able to export to other platforms with no/minimal changes is a huge plus.
Not necessarily 'better' but Spring MVC is essentially a higher level abstraction built on top of Java Servlets centered around the Model View Controller design pattern. This pattern promotes seperation of concerns when building your web application. The linch pin of the framework is the DispatcherServlet class which actually is a Servlet implementing the Front Controller design pattern.
Cheers for the correction. I didn't know of libGDX until now, looks pretty impressive.
Well, I really meant smart code. If the trade off between performance improvement and readability (and more important, the ability to debug the code properly) is not worth it, then I'd rather take the slightly slower version of course. I didn't felt major readability issues with most smart code snippets posted here. 
I recently completed a project in which we generate XSL FO, then run it through FOP to generate the PDF report. Not easy, but the results are great.
Thanks for pointing that out. I did catch that after reviewing my video. It is an error, and I've fixed it in the source code link in the description. withSelfRel only needs to be called once.
This. If you find yourself trying to test private methods its a pretty good sign you need to take a second look at your design. Every private method is a class waiting to happen.
+1 for JMonkeyEngine, fantastic modern engine written in Java, I'd say it's on par with what Unity can do, minus the visual editor Unity has. But if you're hacking out a game in Java using OpenGL wrappers, chances are you won't even be using a visual editor anyways, you'll probably make your own. I myself have been using it for a couple of years now, it hasn't disappointed since.
Servlets are based upon a low-level API for handling requests and responses. Web frameworks like Spring MVC are designed to make building web applications, which handle HTTP requests and responses, easier. Most Java web frameworks, including Spring MVC, use servlets behind the scenes. You CAN use servlets to write a web application, but you'll have to handle all of the details manually. You'll get very little help with typical web stuff like validation, REST, request/response body for JSON, form binding, etc. You will end up writing lot of utility code to support your web application. Web frameworks, on the other hand, are designed to make all of this stuff simple. With Spring MVC, you aren't bothered with manually handling the request and response even though you can still get access to them if you need to. Want to return JSON in Spring MVC? Just add a @ResponseBody annotation and Spring will append it. Want RESTful URLs? Easy. Input validation? Piece of cake. Want to bind form data to an object? Simple. With servlets, you'd have to do all of this stuff manually. Using raw servlets can be a good learning experience though. It really helps to clarify how web frameworks make life easy for you!
A good article about Comparator: http://codenuggets.com/2014/06/29/java-comparator/
The author wrote about testing legacy code, which usually doesn't do anything in a remotely sane way.
From [this ticket](http://youtrack.jetbrains.com/issue/IDEA-114783) (the ticket you linked is marked as a duplicate of this), it looks like the issue is fixed in IntelliJ 14.
Thanks for the library! We're currently using it for REST service acceptance testing, and the only issue we've had is the exceptions it throws on (valid) 404. Even that can easily be worked around by calling it in a closure returning an Optional. private static &lt;T&gt; Optional&lt;T&gt; optional(final Supplier&lt;T&gt; supplier) { try { return Optional.ofNullable(supplier.get()); } catch (final Exception e) { return Optional.empty(); } } ... final Optional&lt;User&gt; before = optional(() -&gt; restBackend.user(email)); The client and converter customization options on ``RestAdapter.Builder`` are extremely useful, as well as the ability to submit lambdas as request interceptors. I evaluated Netflix Feign before picking Retrofit, but passed on it because of missing basic features.
(Minecraft was already mentioned.) You can even reasonably make games with *vanilla* Java (meaning: without using OpenGL or any other powerful extension), but their graphics or graphic-performance (Not necessarily both.) would be poor. Though the Steam library does have a few games that could definitely be made with vanilla Java, and they are not bad. If you add the right libraries, you can go pretty far (and e.g. the Steam library has a few good looking and fast Java games), but the big studios have good reasons for not developing their AAA titles in Java. It can probably be summarized with "In Java, the limit is not the Sky, even if you can go pretty far."
I really don't get [that guy's problems](http://blog.joda.org/2014/06/java-8-iterable-woes.html) with the extended Iterable interface.
So, really &gt; Markus and I are both seasoned Java Programmers
Just wondering what you use on the Java server side?
And I experienced the opposite on a project a couple years ago - came in to a project done by 1 guy who liked Grails (and decided it) but the other 5 people eventually brought on didn't like Java and preferred Rails. At least half of the external support tooling they built was done in Ruby, and every few lines was comments in the code about how Java sucked, Rails already solved this problem better, and Java sucked. No doubt Grails was a lot less mature at that point (2009?) but there were many Java-based approaches they could have mixed in to get things done instead of building Rails-inspired things by hand in Groovy, then complaining about speed (among other things). The "finding good people" is almost a red-herring these days - you really need to find available people first, then determine how good they are. Trying to find 'good' people available in any platform is simply hard.
I like ctrl+j and then "pr"+enter. In general, ctrl+j has many templates that save routine typing such as psvm -&gt; public static void main(String[] args) {} Definitely worth getting acquainted with the list if you use IntelliJ
sout + tab for Netbeans as well.
There's a guy posting a tutorial video series using Spring MVC. I'm currently using Java EE at work so I was amazed at the amount of stuff you need to do to get a simple hello world in Spring MVC. I understand Spring can run in plain jane Tomcat, but I'll stick with a Web Profile container for the super ease of use and less configuration.
It's viable, but there's probably better languages out there. Libgdx is interesting though...
mixed feelings on this - puts is pretty universal and will work in any environment (ssh to remote server for in-place checking, etc). Setting up a test environment, setting up debugger, etc - all takes some time and possibly money (thinking here of IDEs - are there free IDEs that can provide good debugger support?)
&gt; OpenShift Came here to say this
Couldn't summarize better than this: &gt; As personal choice, we tend not to use debuggers beyond getting a stack trace or the value of a variable or two. One reason is that it is easy to get lost in details of complicated data structures and control flow; we find stepping through a program less productive than thinking harder and adding output statements and self-checking code at critical places. Clicking over statements takes longer than scanning the output of judiciously-placed displays. It takes less time to decide where to put print statements than to single-step to the critical section of code, even assuming we know where that is. More important, debugging statements stay with the program; debugging sessions are transient. - Keringhan and Pike 
In a previous job, as an 'IT consultant', it was mandated that everyone learn to use vi because it was the only editor we could guarantee would be installed on every system (old versions of Solaris and all that jazz). It definitely had value but some people took it too literally and would not use any other editor. I think it's great to be able to fallback on something like puts if you have to but if you have better tools available to you then make use of them. I think the cost of setting up the tools would quickly be offset by productivity increases. I don't have any studies/papers to back up this though so my evidence is only anecdotal. On the flip-side I see many famous developers, with a track record for producing great programs, who use nothing more than basic tools. 
&gt; Also, I'm pretty sure Rubymine's refactoring tools are exactly the same as the ones in Intelli-J? I have not used Rubymine, but I cannot think that is possible. Without static typing many of IntelliJ IDEA's refactorings would not work.
The issues they mention in the article mostly stem from using a dynamic language. They already mentioned JRuby, switching from one dynamic language on the JVM to another wouldn't help them much!
If you want 'super easy' and 'less configuration' in Spring MVC check out Spring Boot. http://projects.spring.io/spring-boot/ 
Java EE can run on plain jane Tomcat as well. It does not have full Java EE by default but you can just include the Jar flies in your application for the parts you want. You could also use OpenJDK or TomEE.
Adding another layer to configure something overly complex just masks the problem rather than fixes it.
I'm well aware of TomEE, that's why I originally said "plain jane Tomcat". Tomcat is *not* at Web Profile container, it is a servlet container/web server. Huge difference. TomEE can be had in a Web Profile container. 
Figure out something you want to make, and then make it. Learning a language for the sake of learning without a goal is hard.
Well, I like Minecraft so I guess I can start making plugins for that.
I offered TomEE as one option. TomEE is really just standard Tomcat. Each version of TomEE lists the Standard version of Tomcat it uses. Then they just add some jar files and package it up to it to make it EE compatible. Another option is to use OpenEJB and add it Tomcat to make it a full a full Java EE server. If you consider that non standard than just include Open EJB in your application instead. A third options is add the pieces like CDI or JSF as a jar file in your application and run on standard Tomcat. I do not know why so few people seem to know this. I know it works since I have been doing it for years. It is no different than adding a Spring Jar to your application except there is a lot less configuration. Tomcat is a Web Profile container. It is just not a full Java EE container. &gt;While not a full application server, Tomcat implements the functionality described in the Java Enterprise Edition Web profile specifications. Source: http://www.computerworlduk.com/news/open-source/3256894/apache-gives-tomcat-7-java-ee6-support/ 
You can make a game in any language. Even things like excel. What kinds of games are you interested in creating? Java is fast enough and works well for most types of games, but there may be better options depending. My recommendation would be to look at the LibGDX tutorials.
If I wanted to do that, I would use C.
There is some truth there. A Java EE project probably does not really need Maven because the dependencies are somewhat limited. Spring does not even offer the Jar files anymore. Trying to add just Spring Security requires 13 dependencies. Spring security does work very well though so I cannot decide if it is worth it.
This is a problem I was faced with when I worked on this report that compares many popular web frameworks: http://zeroturnaround.com/rebellabs/the-2014-decision-makers-guide-to-java-web-frameworks/
Your terms are all screwed up. &gt;Another option is to use OpenJDK and add it Tomcat to make it a full a full Java EE server. You mean Open EJB? "While not a full application server, Tomcat implements the functionality described in the Java Enterprise Edition Web profile specifications. Most notably, it supports version 3.0 of the Servlet API (application programming interface) and version 2.2 of JavaServer Pages, both part of the recently ratified JEE 6." Source: http://www.computerworlduk.com/news/open-source/3256894/apache-gives-tomcat-7-java-ee6-support/ Tomcat is in no way, shape or form a Java EE Web Profile container. Instead of posting an article that's old (and it explicitly mentions Servlet 3.0 and JSP, I read it the first time you posted it), how bout you just go to the source: http://tomee.apache.org/comparison.html and see that Tomcat is just 2 small pieces of the EE puzzle, the 2 pieces your favorite article contains. http://en.wikipedia.org/wiki/Java_Platform,_Enterprise_Edition#Web_Profile Oh look! There's 18 total standards to be a Java EE Web Profile server, how many does Tomcat implement? 2. I think you might be trolling me, I just don't want misinformation out there.
Thanks! this will help me a lot! 
[vpscheap](http://www.vpscheap.net/linux-unmetered.aspx) 
Cool, if you have any questions, let me know, we have more data that didn't make it into the final report too.
I don't think that this would be a good idea since your object would need different fields and methods in other contexts. If you would use your model classes in different contexts they will probably become a mess. See the [bounded context](http://martinfowler.com/bliki/BoundedContext.html) concept from domain driven design.
such as? the more the better! :) 
You are right I did screw up my terms. I did mean Open EJB (I corrected that shortly after posting but not fast enough :) ). The last sentance of my post was incorrect Tomcat does not support the full web profile by default. What about the rest though? You ignored the main point that you can run Java EE applications on Tomcat by either adding the Jar files to the server or your application. That is the important point and the reason I responded to your post. 
Insanity or incompetence - you take the pick.
Take a side job as an evening barista.
Repls are better than debuggers. I program in HTML5/java and the java tooling is a joke when you are used to be able to open Chromes console.
This feels biased. It's either talking about an older version of EAP (AS?) or they've got something ... off. (Many XML files?) It also neglects to mention JBoss Cache or Infinispan as far as caching goes.
care to elaborate? I know that JSF does not have implicit support for REST and mainly uses POST. (I have no experience with RESTful apps and I do not know what the benefits are. if you could give me an example, I'd really appreciate it). Also thanks for your reply, I have more things to look up now and learn. PS: Also, I'm fairly new to the web scene so please take me slow!
You should have standalized on ed. That way nobody would want to use it if they didn't have to.
N-dimensional arrays are not unique to Java. They are a basic programming concept common to many languages.
I get that though. If I'm going to "toss a few jars at Tomcat", I'll just use TomEE though. The current crop of Java EE servers are so much more lightweight than they used to be it's ridiculous. They only start up services as needed and are fairly lean. My original point was about Spring MVC and how much work you needed to do to get a simple hello world vs my comfy couch that is Java EE where you can literally just have one xhtml file and have JSF for free. I'm big on people using whatever technology they like on their own projects and I'd never tried Spring before so I was just pointing out that I was surprised at just how much work was needed for the Hello World.
He's just spamming his crappy site. Just report him and it'll go away.
Absolutely. What makes a game successful is largely whether or not it is fun and people like to play it or not. The language its written in has little if anything to do with how successful your game is. If you have a great idea and you flesh it out well and the game plays well and people like it, it will be a hit. Naturally some languages make implementing some things easier than others and they all have their strengths and weaknesses but focus on your idea first.
When I have a file I want to see two parts of, I normally want to view them both together and then hide them both together. I don't want it docked taking up space when I switch to another file. 
I think you mean HTML5/Javascript. TBH, it's like Java but with better hot code replacement (which JVMs do partially).... on those occasions where you don't need to reload the whole page from scratch.
This. The guy showed his inexperience with the "no good debugger" comment. 
1. Java 2. ??? 3. Profit!
&gt; tl;dr Dude changed to Java because he likes Java and is trying to find odd excuses to not like Ruby. Which is probably what makes this post more stupid than the sum of its parts. It's a completely acceptable reason to choose a language over another, why use a tool you don't like if you have a choice?
Search for tutorials on Bukkit Plugins, and see if you can follow one. Then modify it a bit and see if it still works.
Take a look at the /r/javahelp wiki. Plenty tutorials there. For ideas, look at /r/ProgrammingPrompts 
learn android, do side projects, everyone needs android right now.
Alright, thanks. I will try that.
Took me a couple seconds to get this...bravo.
`#nanomasterrace`
well, it accurately answers my question, right down to short client interaction. +1
Please notice the absence of snotty comments from Eclipse users.
Better if we could put thoughts/comments on the page itself
Everyone always seems to miss the point. The core issue is that a dynamic language does not have the information a static language has at compile time. You would need to eval most of the code to support the features I regularly use. I have hopes for things like core.typed in clojure. This offers the ability to provide type annotations which an IDE could respect. Does groovy offer something similar and does IntelliJ respect them?
And of course I cant keep the formatting right....
I find JasperReports to be quite useful. If you just need to show the favorite colors as a wraparound, comma separated field value, rather than a sub-report, I would simply make the field textbox on the report call a static method in your Java code, passing the collection valued object from the bean. The expression will need to specify the fully qualified class of the static method you are calling. The static method could create a StringBuilder. Then iterate through the favorite colors, adding each one to the collection, with a comma if it is not the first one. Then return a single string that looks like: Red, Green, Blue. Then print the "Red, Green, Blue" in the field on the report for favorite colors. 
Java
I fully agree! I've also updated the post to emphasis the constraints I was under while attempting to improve a very poorly designed system. 
Actually I did mean Java (server side) and the debugger sucks compared to the repl in Chromes debugger. Don't believe me? Okay, try to test if a hashmap includes a specific element. A repl allows you to run code to test for inclusion, the debugger allows you to click a ton of times to expand properties... Anyway I seem to have hit a sore point here, judging by the number of downvotes.
Tomcat 7 doesn't support EJB. Glassfish, Websphere, JBoss, and WebLogic do. 
&gt; In my experience, most of the snotty comments come from the IntelliJ users. I'm assuming that was /u/cyanocobalamin's point
Hmm... good point. Don't know how that whooshed over me.
poor Dijkstra .....if only he knew he was a release name for something related to java, considering his dislike for the language he'll be rolling over in his grave :(
That's because you are an Eclipse user and thus of subpar intelligence, ha ha. (puts on monocle and sips tea)
Yeah, what a mess of a post you made. But I'll help you out anyway. Firstly to get proper formatting in reddit indent each code line by at least 4 spaces. You can't use Java stuff with Wordpress (or even if you can, you should not). Java and Javascript are totally different languages. I ported the drawing code to javascript. This should render something similar to the original code: http://jsfiddle.net/gxhc5/8/ It uses html5 canvas so it requires a somewhat modern browser to work. Lol. what a monster of a logo. Also the code is using some custom commercial font "Cooper Black". To get the text to show up correctly you would need to purchase the font, host it online, and link to it in the css. Note that if you have the font installed locally on your machine it will show up for you but not for other people who don't have it.
Also, instead of drawing the text a better option would be to create an image from the text and use that.
Hi! I didn't put my house number in on the order. Hopefully you can help. My order number is GJ-20140630-2VFRJ186ZI‏ Many thanks in advance.
The only time I've had to use that is when someone messed up really badly!
With Scala you can get both debugger AND repl.
casting is your answer! double x = Math.random(); int i = (int)x; This will cause any decimal from the double to be dropped (so it is NOT equivalent to Math.round). You should be aware of what you loose when you cast (for example casting a long to an int can cause overflow if the value is larger than what can fit into an int).
Ah, thank you! I can't quite understand all about casting from search results for it, but I guess that will come with time.
You have to give them credit for at least trying out Ruby for 2 and a half years.
What is the exact error message? What platform are you on? If you're on Windows, you can run the installer with a verbose logging option so it will give you more information. I don't have time to look into it for you now so google it, it's a command-line parameter from memory.
Windows 7 32x. The Error: The wizard was interrupted before Java 7 Update 60 could be completely installed. To complete installation at another time, please run setup again.
I think that you should read [this series of blog posts](http://blog.uncommons.org/2008/04/03/a-java-programmers-guide-to-random-numbers-part-1-beyond-javautilrandom/). It's enlightening about RNG performance in the JRE. *tl;dr* use a Mersenne twister RNG implementation if you need speed over cryptographically sound results.
I came in here specifically to see something like "ZOMG PEEPEL PAY 2 DEV?! LULZ" ... maybe we've reached a new level of maturity. We can only hope.
We just emailed you for the updated house number. Please reply back to that email so we can update your order.
Math.random() always generates a number that is greater than or equal to 0, and less than 1. So, if you convert that to an integer by casting, you always get 0! However, if you multiply the random result first, then casting will get you something appropriate: (int) (Math.random() * 2) Without "(int)", this will generate a random number from (and incl.) 0 to (excl.) 2. With "(int)", you either get 0 or 1. Not 2, because that is out of reach. The probability to get 0 or 1 is equal. So, this is a reliable way to get desired random integers. To get numbers from (incl.) 1 to (incl.) 100, the thought goes like this: "It's 100 different numbers, so I have to multiply with 100. The range starts at 1, so I have to add 1 to my (int) casted random result." At least that's how I do it. I don't like to add "fancy" functions like Math.floor or Math.round. Just a matter of taste, I guess. To get either -1 or 1 as the result, you have to do this: ((int) (Math.random() * 2) * 2) - 1 Because "It's two different possible values, so I multiply with 2." and the result needs to be stretched from the "0 or 1" range to the "0 or 2" range, then shifted by 1 towards the negative.
In simple cases, I always use Math.random() and use some math on it: http://www.reddit.com/r/java/comments/29is0g/beginner_here_just_made_a_simple_program_to/cilfm37
what interest you?
OK try out turning on logging. Use these instructions: http://support.microsoft.com/kb/2545723 Post the last 20-30 lines of the log file here.
I wonder how you get the new Scenebuilder integration to work. Might just not be implemented in this preview.
Usually, it's best to find a project interesting to you and send patches for the bugs in their database to get started. It will help you learn the source code and build your credibility with the maintainers.
Still no love for Thymeleaf? We've been waiting on that for a while now...
Formatted: import java.awt.Color; import javax.swing.JFrame; public class Shapes2 { // execute application public static void main( String args[] ) { // create frame for Shapes2JPanel JFrame frame = new JFrame( "Drawing 2D Shapes" ); frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE ); Shapes2JPanel shapes2JPanel = new Shapes2JPanel(); frame.add( shapes2JPanel ); // add shapes2JPanel to frame frame.setBackground( Color.WHITE ); // set frame background color frame.setSize( 400, 400 ); // set frame size frame.setVisible( true ); // display frame } // end main } // end class Shapes2 and... import java.awt.Color; import java.awt.Font; import java.awt.Graphics; import java.awt.Graphics2D; import java.awt.geom.GeneralPath; import java.util.Random; import javax.swing.JPanel; public class Shapes2JPanel extends JPanel implements Runnable { boolean displayShape = true; private Thread timerThread; public Shapes2JPanel(){ super(); timerThread = new Thread(this); timerThread.start(); } // draw general paths public void paintComponent( Graphics g ) { super.paintComponent( g ); // call superclass's paintComponent Random random = new Random(); // get random number generator int xPoints[] = { 55, 67, 109, 73, 83, 55, 27, 37, 1, 43 }; int yPoints[] = { 0, 36, 36, 54, 96, 72, 96, 54, 36, 36 }; Graphics2D g2d = ( Graphics2D ) g; GeneralPath star = new GeneralPath(); // create GeneralPath object // set the initial coordinate of the General Path star.moveTo( xPoints[ 0 ], yPoints[ 0 ] ); // create the star--this does not draw the star for ( int count = 1; count &lt; xPoints.length; count++ ) star.lineTo( xPoints[ count ], yPoints[ count ] ); star.closePath(); // close the shape g2d.translate( 200, 200 ); // translate the origin to (200, 200) g2d.setFont(new Font("Cooper Black",Font.BOLD,30)); if (displayShape==true){ // rotate around origin and draw stars in random colors for ( int count = 1; count &lt;= 20; count++ ) { g2d.rotate( Math.PI / 10.0 ); // rotate coordinate system // set random drawing color g2d.setColor( new Color( random.nextInt( 256 ), random.nextInt( 256 ), random.nextInt( 256 ) ) ); g2d.fill( star ); // draw filled star } // end for g2d.setColor( new Color(0,0,0) ); g2d.drawString("Pindome Corporation", -200,0); }else{ //g2d.clearRect(0, 0, 200, 200); g2d.drawString("Pindome Corporation", -200,0); } } // end method paintComponent public void run(){ while (true) { try { Thread.sleep(500); } catch (InterruptedException ie) { break; // Thread stopped via interrupt() } } repaint(); displayShape = !displayShape; } } // end class Shapes2JPanel 
I've formatted your code properly above: http://www.reddit.com/r/java/comments/29hsyu/help_me_understand/cilgqu6 What are you doing this for and what is your skill level in Java, programming or computers in general? If you're getting paid to do this for one of your clients it's a bit unfair to ask us to basically do the work for you for nothing.
Yeah I'm surprised not to see that. IntelliJ is pretty nice, but I probably wouldn't pay for it myself. But since work offers to...
What he said
You should keep in mind that using Math.random() * n, etc gives bad distribution and performance, but it saves you from needing to store a reference to Random.
I have had four friends approach me about setting up an android app for thwm in the last couple of months.
Why you don't use java 8?
Thank you for the link, it is an interesting blog. Still, these performance marks apply equally for the linked library. For my project, java.util.Random outperformed both alternative implementations by the Uncommons library. This is likely due to their development around more general issues instead of 31 bit generation. Looking out both performance consistency and best result, the main library beat Twister by about 50% and Cellular by around 100%. I tested a large number of alliterations under standard benchmark protocols under two separate situations. Note that I am dealing with nextInt(~30k += 1k) in my simulation. I will still look into more quick RNG's, but the current bench might be hard to beat.
What are you using the learn?
[Spark](https://github.com/perwendel/spark) and [Jetty] (http://www.eclipse.org/jetty/documentation/current/contributing-patches.html) might be interesting for you. 
Pick something that you use yourself (or want to learn) It is much easier to make good open source contributions if you are personally interested in using the project. "Scratch your own itch", as they say....
How is my approach if used via Random.nextDouble() in comparison to nextInt()?
Use `ThreadLocalRandom.current()`, you can just call it in every method to get the reference that is already stored in your Thread object (as of JDK 8, prior to this it was in a ThreadLocal, AFAIR). Then call its `.nextInt(n)` if you want numbers between `0` and `n-1`. It's faster, more correct and takes as little memory as your method.
Look at Alexey Shipilev's comment above. He is probably the most knowledgeable person about benchmarking java code on the planet. If you don't understand his comment, the gist is that this framework falls short on a number of issues. Seriously, just use JMH.
&gt; } // end class Shapes2JPanel Nelson-HAHA.
Thank you for your help. In my case (single thread), it ended up working 20% faster (but forced me to add some adapter rubbish)
There is a really awesome project called Apache Click. It is a very cool web framework. Unfortunately development almost stopped. It's being discussed whether to put it in the attic. EDIT: Just checked the website. They retired it a few days ago :( What a pitty... https://click.apache.org
Does that meet your performance goal? If so great, and you're welcome. Btw. what "adapter rubbish" are you talking about? Please note that ThreadLocalRandom can be used as a drop-in replacement for Random and there is little cost in calling ThreadLocalRandom.current().
You can use `Random.nextInt(100)` instead of `Math.random() * 100` to get an integer without having to cast. Other than that, it looks good. If I had to nitpick I would say it's confusing to call your loop variable `forloop`, I would have called it something like `counter`.
God dammit! Thanks, fixed.
I've heard that free versions are available.
/r/cscareerquestions
That sounds like a fun project (if it makes sense to subclass Random)...
Hyvä.
To understand about casting of numbers, you need to understand about primitive types. In this simplest case, we have integers and doubles (there are a few more). Java will happily and transparently convert a number from one primitive type to another if it doesn't involve a loss of precision... Integers can be safely converted to doubles, so you do not need to cast when working with a double and an integer when the result is a double. When working with different primitive types in a calculation, the end result will be the largest type with the greatest precision in the calculation. int operating on another int = int int operating on a float = float int operating on a double = double float operating on an int = float float operating on a float = float float operating on a double = double double operating on an int = double double operating on a float = double double operating on a double = double Your system.out contains Math.random() * 100, which is a double operating on an integer, and therefore your end result is a double. When you want to go to a lesser type, you will lose precision. If you do not consciously make this decision, your code could have unpredicted results, so java strictly enforces this via compilation: int i = Math.random() * 100; // will result in a compilation error You have to explicitly tell java that you intend to lose precision on the number... in this case you only care about the whole numbers: int i = (int) (Math.random() * 100); /** * Note, I have had to encase the whole calculation in brackets, otherwise java would consider * you trying to cast Math.Random() to an int, which would always equal 0 as * /u/king_of_the_universe has said below. */ So your output line could be System.out.println((int) (Math.random() * 100)); and your output would be directly cast into an integer, before being passed to System.out.println.
Software integration testing
Pity, I have many clients to whom I'd love to hand such a book on system integration testing.
Did you try installing with the online, or offline installer? Try downloading the offline installer [here - Windows x86 (32bit) version](http://javadl.sun.com/webapps/download/AutoDL?BundleId=90223) and install from this offline installer.
Just hijacking this since i am late to party. You could try table element but it doesn't differ that much from subreport (still have to feed it data source) and do same stuff you do with subreport. Why is it problem to have multiple subreports? They are made for that. &gt;When to Use Subreports &gt;There are several situations when you wish to embed one report into other. Examples of such situations are: &gt; &gt; *Isolating a common layout that is used in a series of reports &gt; *Processing records from a query different from the Master report's query [resource](http://jasperreports.sourceforge.net/sample.reference/subreport/). Just make a new subreport, pass it a new JRBeanCollectionDataSource and do your stuff. EDIT: I suck at formating :) 
Didnt even realize the IP was showing! Ive never taken the time to learn Java. Thus I am a complete and total noob when it comes to it... However thanks for the help, even if it was making a little fun of me...lol. 
Your knowledge! Thank you for sharing it with me! 
Create a temp file for each thread when writing logs then merge them later when the system isn't as busy. Problem solved. 
Log4j2's async loggers have even better performance than async appenders - not least because they use an LMAX disruptor to carry the LogEvents.
The problem with multiple open files is that they carry the risk of disk thrashing (when the system needs to perform writes on many unrelated blocks, the latency penalty of re-positioning the platter is magnified). Also the problem is locking, not blocking on IO.
JDK8 is stable despite its young age. I haven't had any issues with it yet. There is nothing wrong with staying with JDK7 until you feel comfortable especially if you use Scala or something else that doesn't fully support JDK8. If you use Java and it is your personal machine, I do recommend going ahead with JDK8 if only to familiarize yourself with the new language features. 
Yes. The problem is not only to order the log events, you need them on disk. You also want as little code as possible in the actual log call. At best, the log call just puts a log event onto a queue (or in the case of async loggers, a ring buffer courtesy of LMAX disruptor, which has the benefit of lower latency and thus is faster overall). The order is obviously determined by the position in the ring buffer. The logger then assembles the (formatted) log message and gives that to the appender who writes it out. This is all done in the context of the Appender thread. This is more or less how log4j2 with async loggers works.
JDK8 is a future. It supports a lot of new features. If you start new project, JDK8 is recommended. I changed my project to JDK8 and began to code with lamda expression. 
The community edition of IntelliJ is great, I used that for a while before getting a free Open Source license for my project.
I'm great with debuggers but I try to debug only using logger statements, and I commit every logger line that was useful in my debugging that problem. The great thing about loggers is that you can leave it in and you have everything you need to debug an app that is in production, just adjust your logging level. Breakpoints and watches are great but give logging a chance, notice I say logging not print.
IP as in intellectual property.
You may have already done this, but turn off any security software (virus scan/firewalls) You can also try this http://support.microsoft.com/kb/290301 Otherwise, completely remove Windows and install Ubuntu :)
Which can be extremely lossy
There are lots of products and frameworks which are not Java 8 certified yet. 
As far as I know, JavaFX came to replace swing. I'm not sure if that is its official intention, or if it's just what some people mention here and there..
Most of the people I work with use Eclipse, along with SVN for source code control. It has the benefit of being widely supported, widely understood, and there's a big community of fellow users both inside and outside our company. The tool seems to work well, and more often than not if you have a problem, somebody to whom you have access will have the solution. Personally, I edit code in Emacs and have a git-svn front end on top of the SVN repository. For the way I like to write code, this works well for me, but it's far more of a roll-your-own kind of approach. I wrote a bit more about this in a comment from a month ago: http://www.reddit.com/r/java/comments/270llg/do_most_java_programmers_use_eclipseother_ide/chx6q9h (To see what I mean by 'roll your own', my Emacs Java build process is broken on one of my laptops: invocations of Maven are failing with an error in the Emacs cmdproxy process. Google searching hasn't turned up any good solutions, so the odds are heavily in the direction that I'm going to have to fix it myself. I have access to fix it, and I'll learn a lot in the process, but it's still a cost that I have to pay for using this particular tooling.)
&gt; However the book is old and Swing has been "withdrawn". The official replacement for Swing is JavaFX, as it is right now it only ships with the Oracle JRE so Swing is still the most portable UI. &gt; I use Eclipse and I'm assuming there are popular plugins for such things? For Eclipse there is WindowBuilder, afaik it supports SWT and Swing. 
Netbeans 8. It's free, fast, actively developed, well thought, plugins dont look like plugins in Eclipse, but like they were built in. 
&gt; JDK8 is a future. Yeah, Java 8 is the future, so I guess I'll use it in future at some point :-) &gt; If you start new project, JDK8 is recommended. Yeah, but if you are developing an older project, maybe it's wise to stay with JDK7 a little longer. Right now, JDK7 is simply more tested than JDK8. &gt; I changed my project to JDK8 and began to code with lamda expression. Good for you, but in professional environment this is not so easy ...
Swing is established so if you are looking to build and ship stuff right now, it's the way to go. In the end much of what you learn will be transferable to other tehcnologies. However, while it is not officially deprecated, development has ended and JavaFX 8 (so named because it came as a standard part in JDK 8 that was released in March) is named as the official successor. JavaFX is a clean-slate approach that is planned to be streets ahead of anything Spring could ever do. But it is not yet finished and there aren't nearly as much components for it out there. We have been using it at work for a while now, though it's not as mature as one would like. I wouldn't want to go back to Swing in the long run. 
Ehour?
I have been working with Eclipse for years. Mostly with Spring based projects, Maven, SVN, Databases. I got used to it even though it is far from perfect. But about 1.5 year ago I switched to Intellij and my developer's life changed - positively. It is hard to point all the things, but: - it is much faster than Eclipse, especially on Windows - it has much better refactoring tools - much greater maven support, that just works! - great support for other technologies (php, python, ruby) - great support for JavaScript and HTML - database tools are excellent And much more. If your project are IDE independent (e.g. Maven) - go for it. Don't waste your precious time with Eclipse or Netbeans. Have a look at this post: http://zeroturnaround.com/rebellabs/getting-started-with-intellij-idea-as-an-eclipse-user/ Hope it helps. 
Very stable? Maybe on the api front, but the implementation quality stinks. Things like [JDK-8038241](https://bugs.openjdk.java.net/browse/JDK-8038241) keep appearing in minor updates, and you're going to be on hook for explaining those crashes to your clients.
&gt; If your project are IDE independent (e.g. Maven) - go for it. Don't waste your precious time with Eclipse or Netbeans. I wouldn't agree completely with the above. Netbeans has great Maven support out of the box as well. It's also created by the same people that make Java so it's going to support the latest and greatest features of Java/Java EE first. I had experience with Eclipse + m2eclipse for maven because I worked with another company's codebase and it wasn't pretty. Things that just worked in Netbeans required a bunch of resets and delete this folder, now regenerate, now reset configuration data again, clean and build, finally it worked! with Eclipse. Edit: Can't comment on IntelliJ but with maven projects Netbeans doesn't require any IDE specific files either, which is NOT the case for Eclipse. In reality, I like that there's 3 major IDEs. I get to use the one I want but they all benefit from the other's existence for adding new features and trying to stay ahead of each other.
I haven't used Netbeans recently, but other than that I feel like Intellij is the right choice for most professionals. When my colleagues, who are using Eclipse, ask me to help me with some problem, I often start a search on their machine for a class or string.... I typically get impatient with Eclipse and go over to my own machine and find the problem and solve it before their search is even complete. That and the Eclipse users are always fretting about how many modules of the codebase they include in their workspace, whereas I just include pretty much everything. Compiling does seem to be faster on eclipse, though, but everything else is nicer in Intellij.
Right, that's what I meant. It's so stable, the bugs aren't even going anywhere. That said... this looks like a 5.0 issue. I understand how impractical it can be to upgrade sometimes... but 5.0 is over a decade old...
Source: http://blazemeter.com/blog/building-jms-testing-plan-apache-jmeter Semi-commercial blog post.
You are correct that Eclipse is still the most used IDE in corporate environments. I prefer and use NetBeans myself. It has great git and Maven support. Netbeans is free and does not need a million plugins added and configured to make it a complete IDE like Eclipse does. You can also install it along with a couple application servers configured and ready to go just running an .exe file. The tutorials on the Netbeans website are also great.
Thanks
thanks for the help
thanks
what made it cooler than other frameworks? 
I don't know about now, but when I switched from Eclipse to IntelliJ, the latter had a way better (out of the box) support for Groovy and Gradle. (that's why I initially shifted from one to another). 
Streets ahead of spring? I'm curious because I never thought of the two as competitors. I use spring for things like DI, spring-data, etc. Are these things that might actually make their way in to javafx one day? I'm utterly confused!
I always use Eclipse for my project. I don't know why I need to choose others. Eclipse is enough for me. 
&gt; anything Spring could ever do. :P It's okay. I was just confused because it said Spring. Swing makes much more sense :) I'm someone who was lucky enough to get in to Java GUI Dev after JavaFX 2.2 was already around. I've never had to live in the stone age.
Haha damn, I dun goofed.
SWF is pretty decent
Not that it's any better, but why can't you do an out of sync logging with a timestamp on the log? I know it may not be ideal for humans, but would that alleviate any stress?
Don't know which book to recommend, but you have the purchase power in average of only one book. 
well the barrons ap compsci is only $10 and apparently it's good? i will probably buy used on amazon anyways, so the I think I could squeeze in 2 or 3 books. If anything I could get more money, I'm just keen on getting the best material to learn from.
If you're fixed upon Java, get a copy of "Effective Jave, 2nd. Ed.", by Bloch, for sure. No need for a general tutorial, as the Oracle (nee Sun) tutorial is available free online at http://docs.oracle.com/javase/tutorial/, and is very good. It is available in printed form, as well, but I would suggest reading it online or via ebook reader, instead. In a more general software development vein, I'd suggest "The Practice of Programming", by Kernighan and Pike. There are plenty of other great texts available, but the most important thing is to read and write code, lots of it. Given that you're on a budget, I'd suggest used copies. 
thanks so much man. i went ahead and bought effective java, looks like a legit textbook. i'll look into the second book you suggested by Kernighan and Pike once I have more money! :)
It's a great example about Swing bugs: a minor bugfix release in 2014 broke something that's over a decade old. And broke it so spectacularly that a simple EventQueue.isDispatchThread() crashes with NPE. No obscure corner cases on the bleeding edge here.
Effective Java is a great book but has much more advanced topics than you need, or you will understand. [Big Java](http://www.amazon.com/Big-Java-Cay-S-Horstmann/dp/0471697036) is suited for beginners and I'd rather recommend this. Also [Introduction to programming with Java](http://math.hws.edu/javanotes/) which is available online for free. 
Is there a windowbuilder for javafx?
I just started working with JavaServerFaces and this really helps to make that look nice :-D Thanks mate! 
I really disagree with purchasing Effective Java as an introductory book. It's not aimed at teaching the language it's a book full of best practices for people who are already very familiar with Java. Starting with Effective Java is just going to confuse you. Since you are new to programming and also want to learn Java I highly recommend picking up a copy of Head First Java. It's very digestible and has a ton of exercises that you can do. Also, install IntelliJ IDEA. A good IDE goes a long way. When I first tried to learn Java I wrote everything in vim and it suuuuuuucked. Edit: Also check out http://codingbat.com/java
&gt;why can't you do an out of sync logging with a timestamp on the log? It's certainly possible. &gt; I know it may not be ideal for humans, but would that alleviate any stress? No, and that's why it's not done. See, the code to put the log event on the queue already adds the timestamp, and it's so fast that the correct order is already pretty much guaranteed.
already bought the book but i'm going to get the ebooks and download the ide you suggested. thanks so much man!
thanks for the suggestion, i already bought the book but I'm going to read the online one you suggested first and then I'll see if I can get Big Java.
thanks a lot man, i'll look into getting that book once I get some more money. Maybe I'll get it once the school year starts for reference.
Definitely pick up a copy of Liang's Into To Java Programming.
From your post I assume that you are on a windows platform (Because Mac users usually don't install java and linux users have sane package management). Then you may want to go into your System Settings → Software and check the list for other Java versions. If that doesn't bring up anything, search the registry (run `regedit`) for anything Java-related. (Though you probably should know what you're doing if you plan on deleting keys, you could easily render your system unusable). Then throw your hands up, yell "f$ck it" and install linux. ;-)
There is [Oracles Scene Builder](http://www.oracle.com/technetwork/java/javase/downloads/javafxscenebuilder-info-2157684.html).
Do you have admin rights? Btw. this is the part where you should have a backup of all your valuable data.
One option is Safari online. If you get the 5 books a month deal for $15 a month, you would be good for 15 books in 3 months. Check around for a coupon and a free trial period. You will find you only need to read most books only once, sometime there is only a chapter or 3 in them that are worth reading, then they just gather dust. That's not the case for 'Effective java' though, My copy is looking pretty worn. 
This may be due to misplaced ACLs if you are lucky. Otherwise you should probably run a file system check. I'm out of my element there. Go to /r/windowsproblems, they may be able to help you further. The best of luck to you.
Honestly? Spend $50 elsewhere, open up some online tutorials and just start programming. Google your issues, read StackOverflow 10,000 times. 
\**Single* page application. It's like you didn't even read what you linked?!
Save your $50, work through the official Java tutorials, look at /r/learnprogramming and /r/javaTIL. Also not related to Java, but look at (or better, work through) [SICP](http://mitpress.mit.edu/sicp/) - one of the best introductions to computer science freely available.
Over the last 10 years, the need for programming books has diminished to almost nothing. There are a few programming classics you might benefit from, like http://www.stevemcconnell.com/est.htm, but language-specific stuff, not so much.
Would this mean that Android Studio builds finally become usable?
I'm a CompSci major and rarely, if EVER, open up a textbook. I have 2 monitors, one is open to a tutorial/StackOverflow/Google, and the other is my IDE. I find it a huge hassle to even open up a textbook. That's how I learn though, and I understand others may learn differently. But I agree completely, the need for textbooks is essentially 0.
When I started learning, about 25 years go, it was completely different. Instead of the Internet, we barely had Bulletin Board Systems to connect with people with similar interests. Nothing even remotely similar to Google and an easy access to answers. You really had to want to find things out, and had to do it yourself. 
Why I'm not impressed by it: I've used IDEA.
I find it similar today, I mean obviously plus the internet, but trial and error and failing ALOT is the best way to learn. Programming is not something that can be properly taught in a classroom or in a textbook. The person needs to just do it, and figure out their own mistakes.
Been coding for 15 years in Java - I think I've opened a text book maybe... twice?
You think *this* is bad? This is how it looks on Linux Mint 17: http://i.imgur.com/XoOJvIv.png I ain’t even bothering with red circles or any of that ‘cause it’s just glaringly obvious. (SWT can’t restyle native OS components.)
I am most familiar with eclipse and the the company i work at declared it the IDE to choose. So I am kinda stuck with it :D But I am sure eclipse is not the best ide. I personally don't like git and maven support. But I like to take a look around. I tested IntelliJ but it is to early to say. But for quick and dirty scripting stuff I use sublime. Nice and clean editor. 
Try removing Java with [JavaRA](http://singularlabs.com/software/javara/) Sometimes the uninstaller of Java just messes up. Alternatively, you could run the CCleaner Registry cleaner and see if it helps. To re-install Java, I'd recommend to use the offline installer rather than the online counterpart. BTW: Kindly stop swearing - not nice. I can understand your anger (because I had similar problems with uninstalling and reinstalling Java), but still, maintaining a professional attitude should be common courtesy.
That's one of the parts I really dislike about Eclipse (I still use it a lot, though). Each release they add some obscure feature that is used by 2% of the userbase, instead of actually polishing what is used be 99% of the users.
How are them windmills holding up?
Are you trying to insinuate that you don't really exist?
How's that?
No, attitude (for example) by me who is forced to use Eclipse at work. I'd love to use IDEA and in fact use PyCharm privately. Why do you or anybody even comment on an eclipse thread if you don't use it? I don't give a rat'ass about what IDEA users have to say about a program they don't use, why do we need to have this in discussion every time?
&gt; Why do you or anybody even comment on an eclipse thread if you don't use it? You are replying to the wrong person, since I did not start this sub-thread, I am only responding to it. Also, I used Eclipse for almost two years before I switched to IDEA. Also, I wrote about *a specific brainless type of reaction*, not about people who don't have a saying what IDE they use etc. - So, to you: "Why do you even comment on ...?"
I used to love eclipse but after using PyCharm, IDEA and Android Studio I fell in love with them. Their support is also sublime.
It's official: http://www.oracle.com/technetwork/java/javafx/overview/faq-1446554.html#6
Yeah, you're right.
I like intellij too, but I use Vaadin and Activiti. I have not been able to get the classes outside of my Vaadin project to recompile using JRebel. I have to recompile each class I've changed, in an order that doesn't "break" the code. There has to be something that I'm doing wrong or not understanding. Regarding Activiti, Eclipse has a plugin for creating workflows. I don't believe that IntelliJ has one. I know there is a standalone application for Activiti workflow modeling, but I'd like to keep everything under one roof so to speak. I'd like to use IntelliJ, because Eclipse, when I use it anyway, runs sooo slowly seemingly the longer I use it. In fact, waiting for my hung IDE is what brought me to the page now.
Plugins are for that. Eclipse is filled with features that are only useful for that one specific thing... they should be all moved to optional plugins.
Just "Structure and Interpretation of Computer Programs" - http://www.amazon.com/Structure-Interpretation-Computer-Programs-Engineering/dp/0262510871
The fact that the default icons even have those borders (a result of GIF or PNG-8 transparency limitations) is just embarrassing. What year is it!? 
can these icons be replaced manually? 
It’s great, and I love it! However, right now you probably need to be a bit adventurous for it :) 1.1 should come out soon, which is a lot more stable and has some more features (especially in the IDE). [Link to introduction](http://ceylon-lang.org/documentation/current/introduction/)
I've tried numerous times, but I just can't get myself to like dark themes. I always go back to the light one. I was pretty happy with the latest version of Android Studio as well, they ditched the dark theme as the default.
You can create a dynamic web project in Eclipse, add maven support, look some example jaxb on the Internet, and done. 
There is no indication of any android specific feature in the release notes. http://www.gradle.org/docs/current/release-notes What makes it unusable? 
unfortunately swts premise is os non stylable components as opposed to swing... that they even tried to give us a dark theme points to a schism within the eclipse leaders I think. 
Android's Gradle plugin is still in alpha/beta development and so far new updates to Android Studio have often broken backwards compatibility with earlier versions. Nothing to do with Gradle itself.
I'll give you a hint: Never let java try to use the native gtk theme. Its been broken forever. For netbeans I had something added to start it, for IDEA, I'm not sure right now (I'm not at this computer right now). But it looks perfect on linux mint right now... edit: Oh wait, this is not IDEA, but Eclipse... right, it does sucks ;-).
This issue didn't occur with the dark theme on the OSX version of Eclipse. 
This is soo cool! Great find!
They are equal. This is only the joys of marketing...when the version of Java shifted from 1.1 to 1.2, the changes to Java were so dramatic that the marketers decided we needed a whole name so they started calling It Java 2, even though actual version of Java was 1.2. But versions 1.3 and 1.4 were still considered Java 2. There never was a Java 3 or 4. Beginning with Java version 1.5,the marketers decided once again that the changes were so dramatic that a new name was needed (and most developers agreed), so they looked at the options. The next number In the name sequence would be "3" but calling Java 1.5. Java 3 seemed more confusing, so they decided to name It Java 5.0 to match the "5" in version 1.5. this trend goes on and we have Java SE 6 . As of this version, Sun replaced the name "J2SE" with Java SE and dropped the "0" from the version number. Internal numbering for developers remains 1.6.0 the same thing happen with java 7 and java 8.
I usually install a bare eclipse platform and just add the plugins I use. Even support for java is a plugin (jdt). Startup time is blazing fast and there is no unused clutter.
Pegging all i7 cores to 100% usage when building and indexing projects in Android Studio. The only remark about it at "What is new in Android Development Tools" talk, was that is a known problem and they are working on it.
Buy a personal license, it's 200 bucks. Worth every penny.
&gt; Java .. use the native gtk theme That would be swing. And yeah, it has known issues. But eclipse uses swt, which is an entirely different beast and has a ddifferent set of issues.
IntelliJ's Darcula theme looks so much nicer.
&gt; ingle page application. It's like you didn't even read what you linked? Why? If you check the option II.1, and II.2 you can see the same application but in mode SPA (Single page application). The *simple* was a typo 
If you can't find a tutorial, write a tutorial. The research you will put into that will teach you what you want to know better than some step-by-step guide. I rarely use tutorials and force myself to read documentation and understand why things work. That is because I know I will only get stuck again when my knowledge fails again because I didn't acquire that knowledge myself.
do you know any languages, so far? If your just starting and haven't learn any I'd suggest starting out in python. Then when you switch to java or C most things will be way easier to learn. I'd suggest watching youtube tutorials and trying to recreate the apps they make, then similar ones to make sure you have an understanding to how to write what they're using. I learned how to start coding better from youtube than I did in college (you can find better step by step tutorials). Use java foundations to start with. Google it and you should find a free pdf download from a bunch of different sites.
Use BlueJ :))) Edit: I really dont
It's probably just anti-aliasing done against a light-color background. PNG supports a real alpha channel, doesn't it? You could do anti-aliasing that way, but I don't know if people realize it.
Where do I find the logs? I did the "fix it" and updated windows, but found no logs.
I'm really excited about all the changes coming up in JDK 9. Also the whole [value types](http://cr.openjdk.java.net/~jrose/values/values-0.html) thing is just great!
[If you think that's bad](http://i.imgur.com/6mpV1hT.png)
The modular JDK is not very useful. Hierarchical package dependency management / that part of OSGi would be immensely useful, first to library developers, then to software developers.
I am desperate for a dark theme in Eclipse so I can code in the evening without getting migraines, but this is hopeless. The theme on Windows is a bloody half-arsed disgrace too. Looks like they did the absolute minimum amount of work to tick the box.
I 100% second not deploying to tomcat. However you can do this with almost any of the web frameworks. Dropwizard is great, however its kind of an abstraction over an abstraction. Dropwizard is a wrapper for https://jersey.java.net/ which is fairly easy to set up and run as am embedded webserver using Jetty Grizzly as well as Tomcat (I think). Also take a look at Play2 http://www.playframework.com/ This is now a scala web server but it has Java bindings as well. Recently I have been a fan of using lower level web servers and implementing json serialization myself, its really not very hard. My favorite is currently http://undertow.io/ Grizzly by itself is also pretty nice.
My experience was that when I used eclipse, I always felt like it was pestering me. When I finally gave in and gave IntelliJ a go, I felt like the IDE was trying to work with me. I can barely even just type in eclipse any more. The experience is just not intuitive or right.
Well I’m sure it would look better if my OS theme was dark :D The issue is that it’s *not*, and it partially leaks through.
whats wrong with the syntax of a static utility method?
Its extra software on your OS and as such opens a new Attack vector. But if you keep your Java updated the chance of getting Maleware because of Java is very small. Be carefull with the installation. That piece of shit Java installer will try to install the ask toolbar.
Why is akka relevant here? 
I have the same problem on Linux, though.
Yeah PNG definitely supports alpha.
I agree. I was an eclipse user for about 10 years, but switched when I joined a new company where everyone was using IntelliJ. It really is pretty awesome - I feel so much more productive now.
Also, as Peter Norvig said: Teach Yourself Programming in Ten Years http://norvig.com/21-days.html That's a much better, and more honest title than books of the genre... * Learn to program in 24 hours * Learn brain surgery in 24 hours * Learn particle physics in 24 hours 
It's just a name, that has not been taken by other software projects, as far as I know. 
Same here. I'd love to truly love Eclipse again, but having used IDEA, it just can't compete in terms of polish.
As you are explicitly asking for other options as well: You may want to check ArangoDB, another hybrid database with support for documents and graphs (and Java, of course ;-)). Fedger.io use it for their graph viz tool to traverse huge graphs very fast. http://www.arangodb.org 
It's not obvious to me where the issue would be. Did you by chance try to get a thread dump from the code when it was in the locked up state? That would be the absolute easiest way to get this. You can get a thread dump easily by sending a sigquit to the program (a kill -3 in linux). Side note (even though you did not ask). Your use of a BufferedInputStream is not helping. Your already basically following this behavior by having a buffer on line 12. So you just added a second layer of buffering that does not appear to add any value (just an extra array copy when you need to read). ** **Edit** In case it was not clear from my response. You likely have some type of race condition/deadlock, but I don't see any locking that makes the issue obvious. That is why a thread dump would be intensely helpful (as we will see what is locked, and where the thread is currently blocking) And in case it was not obvious, when a BufferedInputStream IS useful is when your either doing a .read() to get single bytes, or reading into a small byte array (sub 1k I would say).
I did not. I'm fairly new to multithreading, but I will look into that. I am running this program on Eclipse, so I will have to figure out how to look at thread dumps on that. Also, thank you for the feedback on the stream. Would it be better to instead remove the BufferedInputStream and work directly with the FileInputStream?
You came in here to start an argument.
Also, nobody cares about your computer. During the rare case a Java exploit is discovered, the real baddies will go after corporate systems. Unless you're an affluent person, they couldn't care less about what you're doing. They have bigger fish to fry.
Ok thanks, not going to install it not worth for just 1 game + i play LoL. I wanted java just to play with them because they are on it alot nowadays cause Lol can get boring after a while, not wort getting risks on my laptop. Thanks :)
I think the likeliest reason is because you aren't closing the request and response objects, and so without the abort the underlying HTTP client is waiting for them to be closed (most clients have a per-host limit on simultaneous connections). 
There is nothing wrong with installing the JRE. 
It would be better to remove the BufferedInputStream, it's not adding any value. Btw, glad to hear you figured it out...thread exhaustion definitely makes sense. I would still recommend learning how to make thread dumps for the future. They would have made this a lot more obvious.
Better than what? Also, I don't see any noteworthy differences from when I used Eclipse on my Arch machines, whatever distro my uni's lab machines are running and Windows 7.
That's a bingo. Every one of the links has a referral network ID on it.
Got it. I will add that to my list of things to learn. Thanks a lot.
I am ridiculously happy to even see someone using the language. It has gotten remarkably little hype for how goddamn great it seems. All these other languages get a lot of noise made about them, Rust, Go, Clojure, etc. But Ceylon looks amazing to me, can't wait for it to become more popular. I am afraid it will die like everything else good :(
Question: Should I be closing the connection for all of my request methods? Or is it only necessary here because I am using the same client for many requests? My other methods generally create a new client and request each time.
While the author has hit on some of the areas a good architect should understand, he's missed quite a few as well. There's a conspicuous lack of persistence strategies, algorithms fundamentals, and patterns/antipatterns, to name a few. The idea that a reading list can somehow replace experience is frankly a little offensive, and the fact that the dzone repost was linked instead of the original suggests that this is someone blogspamming reddit in an effort to route traffic to DZone (for rank) and Amazon (for referral commissions).
I disagree and I think Oracle disagrees. I believe this is mostly driven by a desire to unify the SE and ME ecosystems over the long term (something Oracle has recently attempted to do with ME 8). Oracle is not comfortable with conceding the mobile space.
The same. 
I think you completely misunderstood his point. Java is safe. 
Lombok.
Since you understand what needs to happen but are overwhelmed by the coding part, try writing pseudocode first. Break down the problem into simple, actionable steps and instructions. Then try and implement those steps in code. If you are stuck with a specific part of the code during that process then it might be easier to give you a hand. Pro tip: drawing and working on specific cases help to better understand the problem and generalize a solution 
Yeah, it's not buzzwordy enough for architects yet... well I guess either a lot of people work with decent architects or can't take a joke.
You can claim that, and you wish that you are right. Whether or not it is *actually* true is of no interest to you. I rather came to *end* an argument, one that has been nonsense all the time. But why am I wasting my words, every word will be re-interpreted by you to mean the opposite somehow. I am God, by the way. Do the math.
I'm happy with the Community Edition.
you know what books don't do, teach you to software architect. That shit only comes with experience.
Forgot about that option. I bought mine in 2012 when it was $50 for a short time.
Your sources are *entirely* your brain cells. Too bad the only means you have to fix those are your brain cells.
You could also try asking /r/CoolGitHubProjects
Well, it's almost back up to the usability standards of that 2-year-old nameless bastard half-release 3.8, or whatever shipped with Trusty. The releases between then and Luna have had all sorts of problems on Linux [like this one](https://bugs.eclipse.org/bugs/show_bug.cgi?id=420956).
Is it a yearly license? Or a one-time fee? Or do I have to pay for every upgrade?
Thank you for the explaination.
Thanks, I will take a look at it!
You could always go to the heart of it all, [OpenJDK](http://openjdk.java.net) or look for projects in the areas where you plan to work. 
One-time, comes with a year of upgrades. After that another license is half-price. or try the free edition.
Why does every freaking post about Eclipse or IDEA have to turn into a damn flame war? Seriously, this division is more obnoxious than the emacs vs vim war. Use what makes you the most productive - whatever that may be.
Not much of this problem makes sense unless the instructor already gave you some code and all you have to do is fill out the one method.
Lol no appreciation at all for sarcasm. that being said, my code is strictly copy and paste from stackoverflow to notepad
Sorry, I misapplied "mobile space". What I really meant is more like the embedded/IoT space. That's still totally up for grabs - and there is going to be a lot of enterprise money in that space which Oracle naturally would want to be a big part of.
I didn't see any flaming.. calm down.
I'm not criticising syntax. That's a matter of taste, I guess: prefix (static methods) vs. postfix (instance methods) notation. In the case of the collections API, however, external static methods break encapsulation. Both `Iterable.forEach()` and `Map.computeIfAbsent()` may have default implementations, but the concrete implementation can: - Be heavily optimised with proper knowledge about the `Iterable` / `Map` implementation. That knowledge doesn't belong into an external static method - Enhance the method contract, e.g. with respect to threadsafety. That cannot be done either in an external static method
&gt; If you want to have just a ton of language features why not just use C++? I think, these days, using Java as an example for a language with "tons of language features" is probably not appropriate given the more modern alternatives (like Scala, C#, etc) :)
&gt; but I do think the point of favoring composition over inheritance needs to be particually emphasized in the Java community Well it takes a long time for a senior architect to accept and get over the fact that most of his Java career he was barking up the wrong tree (the design patterns tree). I've made this experience with an architect who put his visitor pattern all over the place. Not a nice environment to code in, when every line of code was a tribute to the architect's genius (which was mainly about understanding the visitor pattern and some other quirky patterns, rather than adding value for the customer)
In general, if any object has some sort of close(), dispose() or whatever method you should be calling it at the appropriate point rather than just to fix incorrect behaviour you are seeing right now. What works today might not if you change it later - e.g. if you had written this code to only do two requests and then came back in a month to do 5, you would be wondering why it stopped working.
Why don't you use IntelliJ IDEA? You get a nice dark theme and better IDE at one go!
Instead of the JRE, you could install the JDK (The development kit.), because the JRE that comes with it *does not* install the browser plugin. Also, the installer *does not* have that stupid Ask toolbar or any other such clutter. The install is like 150 instead of 70 MB, so the choice is easy. If that Runescape thing requires the browser plugin (which is by far the greatest security problem Java has), you're safe as long as you're picky regarding *what* code you run. With the plugin, however, you can't even be picky.
This is a terrible list
Quick question does anyone know how to get Eclipse Luna with the Dark theme to display properly on Mint 17? For me the Toolbar with Run, Debug, new, etc still displays gray. I tried SWT_GTK3=0 but it does not work...
You Want to Become a Software Architect? Stop reading and start coding. No book can give you the experience you need. Reading should be complementary, nothing more, nothing less.
Haha, this is great. They've made a whole bunch of these parodies. Most of them can be found here https://www.youtube.com/user/JavaZoneNo/videos edit: Missing above https://www.youtube.com/watch?v=HXvm76e2X1Q
That would be awesome for Scala as well. Scala has value classes, and when they are used as such (when they aren't treated as another type or used as a type parameter) they don't require object instantiation, but they are quite limited (they are treated as a top-level final class with one private constructor, one immutable variable, and the only allowed members are methods, except those that would provide identity). 
I have some small feature requests and I'm even offering [bounties in Bitcoin](http://www.xeiam.com/bounties) for some of them. Some of the feature requests are probably pretty easy to do. Projects are [XChart](https://github.com/timmolter/XChart/issues?state=open) and [XChange](https://github.com/timmolter/XChange).
Hahahaha xD watched through some of them, omg i gotta go to this thing some day xD
I know but it should be part of standard Java.
Can't tell if joking. Akka and anything Scala related is like the definition of buzzwords..
Yes, of course it's safe if you update it frequently. 
Java 5-Ever!
It is a very good attempt and I'd say it has really good future.They have to improve their documentation. I had wasted a week before given up last time I tried ( 5 months ago). Give it a try, but expect lot of surprises. 
Is the Java driver stable and up-to-date with server? or are you using their objectmapper?
Nah sorry D:
awesome. thanks!
I was joking but it is kind of true. Most development I do involves limiting the "architects" from getting In the way. Most "architects" around me are just now switching from soap to rest. I don't think they are competent enough for Akka or Scala
Because it's not free...
I was going to say. If we're comparing to how the last 2 or so years worth of eclipse has looked/functioned on ubuntu, then pretty much anything works better. There was a very long stretch of eclipse being basically unusable on various distributions.
Just wondering if anyone know of this was based on a movie and if so what movie? It seems familiar.
I have roughly the same hardware and no hangs from Luna. In fact, it's on my side quite more responsive than Kepler. I'm running Windows 7, 64 bits, no SSD, eclipse started with Java 1.7.50, nearly stock configuration for Eclipse, only a few additionnals plugins (Terminals, JAutodoc, Grep Console, ...).
My notebook has like 7 years old and eclipse runs with no issue.
I noticed you are using IntelliJ. Is it possible to work with Spring in the community edition or do you need the paid version of IntelliJ? I've been interested in learning Spring but ~~$500~~ $199 (thanks Crummosh) for the paid IntelliJ version is too much for me right now.
stop suckin at computers..
I updated my eclipse.ini file with these settings. -startup plugins/org.eclipse.equinox.launcher_1.3.0.v20140415-2008.jar --launcher.library plugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1.1.200.v20140603-1326 -product org.eclipse.epp.package.jee.product --launcher.defaultAction openFile --launcher.XXMaxPermSize 256M -showsplash org.eclipse.platform --launcher.XXMaxPermSize 512m --launcher.defaultAction openFile --launcher.appendVmargs -vmargs -Dosgi.requiredJavaVersion=1.6 -Xms256m -Xmx1024m
It was on my front page. I digress, it does look much better. 
I updated my ini file as attached in the main thread...still the same issue.
My Kepler runs nicely. Only Luna hangs all the time.
From [Oracle's](http://www.oracle.com/technetwork/java/javase/downloads/index.html) site.
Netbeans on Ubuntu looks great :)
I want this, customizing preferences for every single editor and file type sucks. 
Thank you. As expected, I blew past that page ignoring it thinking as I don't see JVM flashing in my face its not what I want. Works now, much appreciated.
I've been working with it on a couple of different projects over the past six months or so. Performance is highly dependent upon the specifics of your implementation. They try to spell that out, but as geordano intimated, the documentation is pretty sorry. There's slightly better documentation for TinkerPop and the OrientDB discussion group on Google is helpful, but don't expect to get all of your questions answered in one place. (edited for typo)
That's a good question, I'm still unclear exactly what features I actually use from the ultimate edition. I got my license for free from work.
Try disabling code recommenders. It caused most of the issues I've seen related to eclipse responsiveness 
for strings you don't want to use the == but use the .equals. so you have if(ext == ".class") instead do if(ext.equals(".class")) the reason is that the == when used with strings will check to see if it is the same object and not check if it contains the same string data. 
Hi Nick, Thank you for your feed back. I am using IntellJ Idea Community Edition in the tutorial. I have used Ultimate but there aren't really too many differences as far general Java development is concerned. CE is actually really good for developing Spring applications. I feel most of the things you need are there, good maven support, code completion, xml validation. I've used Eclipse and I feel after using IntelliJ Idea CE that it's actually better for Spring development in a lot of respects.
Hi Wolf, There aren't too many differences I've noticed, but one feature that looks good, but I haven't use that much in the Ultimate version, is the integrated REST client for testing various kinds of input to your web application. There are probably more significant differences, but I haven't compared the applications enough to know what they are.
Awesome. Thanks for the info and the tutorial.
If you really want books or tutorials and want professional (not just any old blogger) take on things. Online libraries like safari, pluralsight and a few others. While I believe "just code" is useful, reading from reliable sources is always good too. Though I never buy books anymore.
A well written article. It's great to see Eclipse catch up to IntelliJ in terms of null annotations and static analysis. However, I find it a bit paradoxical to first introduce @Nullable and then suggest to migrate existing code to Optional. Why not use null *instead* of Optional? I do that in my code base (previously, I've been using Guava's Optional) and am very happy about the proper warnings I receive. With Optional, you get no static analysis and still have to remember to check for "isPresent" before calling "get". Now, as the author states, Optional is a monad, so you can write monadic code, but I'm not convinced that this is...well, pretty, in Java.
Indeed. Even with garbage collected languages you should be considering the lifespan of objects, especially those that hold on to OS level resources (file handles, sockets). There is a nice idiom for this: [Try-with-resources](http://tutorials.jenkov.com/java-exception-handling/try-with-resources.html).
"..am looking to learn a language I can get a high paying job with" This is the wrong mindset. As a successful programmer, you will have many opportunities to make good money. However, as with any profession/craft you must be passionate about it to be successful. Your #1 goal cannot be to get a high paying job, because even if you do, if you don't love, and I mean LOVE to write code, the money wont be worth it. That being said, I know programmers who make 100k+ who use PHP, Java, Python, C#, you name it. It comes down to which language you want to work with. And more often than not, it REALLY comes down to what language(s) you will be required to use in your current position.
Intellij Idea license is 199$ for individual developers
&gt; Optional is a monad, so you can write monadic code Unless I get an OptionFactoryFactory that can be configured using XML I wont use it. Bloat has to be enterprisy and @Nullable/@NotNull/@Whatever annotations do well enough for lightweight code.
Just got mine in, it came with a bunch of post cards and one of those window flags that says "java". I only ordered 200 (for me and my robotics team), but it came in a huge box.
It's absolutely possible to develop in CE. I use both of them, and the only thing I miss is auto-completion in spring xml configuration files.
&gt; Why is Java the most popular language? No idea. Maybe it found a sweet spot (or at least a good compromise) in several aspects: * It's less OO that Smalltalk, but has a more familiar syntax for c++ devs * It's not as fast as C, but fast enough for most apps, and faster than more languages * UI's are strange looking, but cross platform * It's less powerful than lisp's and friends, but it less alien * Not as type safe as Haskell, more type safe than c++ And over the time, it also gain something else: An incredible ecosystem of frameworks, libraries, tools and stuff &gt; Why do Java programs have terrible UI's? Not every java program has a terrible UI.... but many have. I don't know. &gt; Can Java not use the Microsoft Windows look? I don't get the question. You want java program to look less windows-like? it is possible, and easy, using the right look and feel. You want java programs to look more windows-like? It is possible, but hard. There is always something that looks somehow odd in a java program running on windows. Anyway, I think most of us work developing web related stuff, so UI in native programs are not that important. 
Speaking about UI's, check out SWT. It's a graphics library which uses the system's native widgets. So it looks very natural, and works on osx, windows, and linux, all while looking like it was coded just for that OS. It's not without it's drawbacks, but I think it's one of the better options for java GUI work.
thats just a wrapper to easier call it on each platform 
I have yet to regret purchasing IntelliJ or PhpStorm. Hell I even bought SublimeText 3 cause it rocks. I love me some good development tools.
&gt; This is the primary reason almost NO ONE chooses java for Desktop development, only for server-side development, mostly related to Web applications or back-end infrastructure. Lucky that you said "almost", otherwise I would have to call you out. Jetbrains Intellij and other IDEs are all Java, Computer Associates ALM Workbench, IBM Lotus Notes Domino platform, Syntevo SmartSynchronize, SmartSVN, SmartGit etc. are all Java, Mucommander, SOAPUI, DBVisualizer, FreeMind, Vuze, SquirrelSQL, SQL Developer, jEdit, NetBeans, Runescape..... shall I go on? I totally agree with you about the Ask Toolbar thing, though. Totally inexcusable, but note it doesn't install anything other than the Ask Toolbar. I'm amazed and confused that Oracle persist with this strategy.
&gt; Why is Java the most popular language? Because it is the fastest language - and by that I mean that it is the fastest way to write high-performance code for a large application. It took a beating in the past because it used to be genuinely slow, and it still has a slowish startup time, meaning you might prefer something else for an app that has to start up all the time, but the genius of the JIT compiler means that a large app can actually be faster than C, because the JIT compiler can just compile away lots of your (inefficient) code, even removing whole codepaths that turn out to have no side-effects. So the application tends to get faster as it runs (assuming you didn't code a memory leak). Sure if you have a group of god-level C coders they might well come up with something that runs faster, but they probably will need more time to code and optimize it. Another reason that it is popular is because the code is easy to understand and reason about due to the type system - it lends itself well to static analysis. 
thats totally fair, I guess what I'm trying to say is a language design is not to have every feature, its to adhere to some sort of set of design goals, and that IMHO Java was not developed to accommodate tons of language features, just a powerful set thats enough to use for many projects.
The "named parameters" feature is simply amazing.
So, do you mean that JNI is a horrible technique? I would avoid it like the plague, but mainly because I want my code to be cross-platform. And I don't think I would ever want to code any of the things you mention, mainly because I mostly do web work, but also because I don't think any particular operating system is so fantastic that I want to code specifically for it. That's the beauty of the web and Java... if I (or my company) get sick of Windows, or OSX or IBM OS/2, I could very easily just switch horses.
:)
That's still pretty expensive. I don't understand why companies charge so much for personal copies when their money comes from businesses. Give home developers copies for affordable prices and I guarantee more of them will talk their companies into buying lots more copies. A personal copy should be more like a donation. (Yeah, I know about CE and it's great. But It's no where near as powerful as Ultimate)
Check out the strategy pattern. http://en.wikipedia.org/wiki/Strategy_pattern
If you decide to go with swing (which would not be a bad decision to make), check out the [table-layout](https://github.com/EsotericSoftware/tablelayout) over the other swing layout managers. I find that table-layout is so much better than any of the standard managers.
&gt; retarded crappy dinosaur language I'm sorry, I had no idea I was addressing a teenager. So you are quoting Eric Lippert, who worked for Microsoft for 16 years. He codes in C#, which was Microsoft's clone of Java. Lambdas will not change the world. I agree that they might well be useful for multithreaded and distributed workloads, but that's not why you want them. You want them because they are the latest coolest thing. And although I also am human, I try not to let myself be attracted to things that are just new and shiny but not actually useful. It is unfortunate that Google needed/chose to create a parallel platform for Android, but I'd much rather that than Objective C. And .... I once met a guy with a windows phone...
This should do the trick ;) public void foo( @org.eclipse.jdt.annotation.NonNull @org.netbeans.api.annotations.common.NonNull @org.jetbrains.annotations.NonNull @edu.umd.cs.findbugs.annotations.NonNull @javax.annotation.Nonnull @lombok.NonNull @com.android.common.annotations.NonNull @javax.validation.constraints.NotNull String s) {
I was doing a live code event and contacted Jetbrains about a free license, they were able to give me 50% off for a $99 upfront and $50 for upgrades after that. Jetbrains is not so big that you can't just reason with them for a discount. Educators get it for free, startups get 50% off if less than 10 employees and 3 years. I feel like they're trying. I bet if you contact them and offer to fix a bug or two on github, they would hook you up with a license.
InfoQ's Matt Raible? He doesn't work for InfoQ. 
I was hired into an architect role after 15 years as a pro and was handed my first mac. Took me all day to get the right jdk installed. Oracle doesn't support java on os x so it's way harder than you'd think. 
I can't quite parse your question. If you're trying to get a method call to work for either of two implementations try googling "java polymorphism"
Ugh. They should have just use the JSR-305 reference implementation!
You should be able to do something like this: RSSE rsse; public void setImplementation(String orgId) { if(orgId.equals("A")) { rsse = new RSSEImp1(); } else { rsse = new RSSEImp2(); } } //do what you want with your RSSE object
:D
Firefox Mobile. And just about every other Android app.
Take a look at spring-data-rest-webmvc. All that code can be replaced by : @RepositoryRestResource(collectionResourceRel="employees", path="employees") public interface EmployeesRepository extends JpaRepository&lt;Employee, Long&gt;{ } There ... all Employee entities are REST-available.
A consumer-facing application is a consumer-facing application. Your assertion was that nobody writes consumer-facing applications in Java because of the poor UI of Java applications. The world's largest application store (Google Play) consists almost entirely of consumer-facing applications written in Java.
have you increased ram
The second example is a bit redundant as it will always return true. For similar sorts of comparisons you could always create some string constants and only use them, as there should only be the one existing in memory I believe. An alternative would be to create an enum and use that, as == syntax will work on enum value comparisons. Otherwise, nice information :)
&gt; How can this be done? Pretty much exactly like you're doing in our psuedocode. So what's not working for you?
Yeah, I thought I was in /r/learnprogramming
Most java programms use swing for their interface, because it's looks the same on every system. If you use .awt, then your programm will use the UI of windows or whatever system you want to use it.
What is your level of programming experience and what is your goal with your learning? The oracle java tutorial trail is extensive and could be a good place to start if you have some prior knowledge of objective oriented programming. It's a good resource to be used throughout your learning process. You'll find that here: [http://docs.oracle.com/javase/tutorial/](http://docs.oracle.com/javase/tutorial/)
i've learned the basics of programming, but its been a while since i've reviewed. i want to make smartphone apps and games to enhance my skills. and thank you
Google have a great set of introductory tutorials for creating Android Apps in Java that you can find [here](https://developer.android.com/training/index.html). As far as writing games in Java goes, [libGDX](http://libgdx.badlogicgames.com/) (2D) and [jME](http://jmonkeyengine.org/) (3D) are two good resources.
I've been doing the tutorial with the community edition. It works fine but doesn't have intellisense for xml or html. 
Oh, hi, missed you for 3 months. How's the business of spamming your site going? Are you still not doing anything else on Reddit but promoting the same application/site? Are we going to see the biweekly spam posts again for each micro release like we are used to from your posts befor you took the break?
Perhaps throwing a little Factory in there.
:0
You are right, the comparison is pointless. The reason I brought it up was because I tried to write and example like that to show that == didn't work comparing strings. The fact that it did work led me to find out about interning so I try and drop it in when these questions come up.
&gt; yoda comparisons That is a beautiful turn of phrase. I'm stealing it. (I offer describing a short tempered person as having 'nitroglycer-rage' in trade) You are also right about letting the NPE happen. Sometimes you'll want one and sometimes the other.
Switch to the 'new' branch.
It's funny, I've been reading up on C# and I just learned about using statements. Glad to see the syntax exists in Java too. Beautiful structure. Thanks.
Might want to look griffon http://griffon.codehaus.org/ if you want to develop *thick clients*
:) fair enough
Maybe i am missing something here, but doesn't Unity use C# ?
You could define a JUnit test suite to test output of a program, given certain inputs, but you'd have to define a strict interface up front. Proving correctness is of a program is, as far as I know, mathematically proven to be impossible. There are formal verification methods, of course, but I'm not sure how far along they are for Java. I suggest reviewing the code instead :-) 
It supports, java, C#, and Boo
https://www.processing.org It's a an IDE with a simplified Java dialect. It's focused on writing interactive graphical programs with minimal effort. It makes getting started with Java so much easier.
Man, that's the first news i have. Does it have a good support?
I'm not the person to ask lol i just got the program like 2 days ago and i dont know the first thing about any kind of code
Oh, after a little research, i fear you confused java with javascript https://unity3d.com/unity/workflow/scripting Maybe someone there can give you a hand /r/javascript 
No it does not. It supports ***Javascript*** (says so right in the top left corner of the documentation that you linked to). Also that `#pragma strict` would get you a compile error in Java. Java is not Javascript is not Java. Try /r/javascript. But maybe first ensure you know what the actual language is that you're trying to write stuff in.
I'm a moron
| But maybe first ensure you know what the actual language is that you're trying to write stuff in. you make the misunderstanding almost sound unreasonable
You're instantly also teaching a software engineering principle aside from the coding exercise.
The easiest way to learn is to take some simple example programs and modify them to see what happens. Beginner programming tutorials and books usually have some of these, and I'd recommend playing around with this kind of thing until you're confident in your understanding of how those basic programs work. If you want to make a game, the standard framework for any game is to have a while loop, within the loop something to take user input, and then something to output the result. In between you can put some logical statements to figure out what the output should be, and to put information in outside variables to save for later. Start out with the simplest possible program you can (for example a loop that takes in user input and then just prints it back to you) and then change it in small ways to make it slightly closer to what you're looking for, testing it each time. It helps a lot to do things this way especially when starting out, because you're guaranteed to make mistakes, and if you know that the mistake is in a very small piece of code that you just wrote it's much easier to narrow down.
Not the best title for the content.
Get an education copy of IntelliJ IDEA
Add: -XX:+UseConcMarkSweepGC -XX:+UseParNewGC This will use the concurrent GC, which usually eliminates GC pauses. Also, run jconsole and monitor Eclipse for GC times.
It works again.
It works again.
Hi, check out the [Spring Initializr](http://start.spring.io). Just select 'Web' and maybe JPA or whatever backend service you want. Then just click "Generate." It'll serve a zip file with a Maven build that you can import into Eclipse after unzipping by going to File &gt; Import &gt; Maven &gt; Existing Maven Project. This will be a simple Spring Boot-based application (not JAX-RS, but simpler and more powerful). You can follow any of the [guides at http://spring.io/guides](http://spring.io/guides) to get started. Here's [one](https://spring.io/guides/gs/rest-service/) specifically on creating a REST service. You can easily deploy to Tomcat (or any classic Application Server) by following these [steps in the Spring Boot documentation](http://docs.spring.io/spring-boot/docs/1.1.4.BUILD-SNAPSHOT/reference/htmlsingle/#howto-create-a-deployable-war-file). By default, Spring Boot deploys to an embedded web server (embedded Apache Tomcat or embedded Jetty) like Dropwizard or Play. 
thanks. 
If you are looking to learn java step by step from starting and in easy way see this [Core Java Tutorial](http://java2all.com/technology/core-java) It has best core java tutorial for beginners.
1) Learn a little about OOP first. 2) Don't waste too much time on theories, more you read, more you want to read more and less you code. 3) Write code as much as you, Java requires lot of code from guys coming from PHP, Python background, for others its just another day. 4) Find a good video tutorial (there are a plenty on Youtube). Scientists say we remember more percent of what we see and hear then we read. 5) Don't ask questions on Stackoverflow/reddit/etc without searching on Google first. 
In previous courses I start with introductory small programs written with notepad (meh, I have to explain javac/java/jvm/Java dicotomoy) and after a couple of lessons I introduce the use of a IDE. My IDE of choice has always been Eclipse but I explain that other options are available for free as speech (NetBeans, IntelliJ). My plan for next course is to use BlueJ or Greenfoot to better focus the students attention on the language and the programming problems rather than on the tool, and only later start using an IDE.
I will use the TDD approach from next course. Both BlueJ and Greenfoot are tightly related with Junit or test of sort.
Thank you for answer but the course has to be focused on the Java language by its mandate.
Have a look at Alice. It's not specifically related to your question but there are a lot of resources available around it. http://www.alice.org/index.php
http://docs.geotools.org/latest/userguide/unsupported/geometry/build.html
http://maven.40175.n5.nabble.com/Apache-Maven-Invoker-Plugin-1-9-Released-td5798652.html
Give it a try, you might be surprised. It's not really another level of abstraction; it's an opinionated architecture for rapidly building Spring applications. Most of the sugar comes in the form of adapters and configuration factories that the developers have used to establish a baseline for any Spring Boot application based on what you have on your class path. E.g., add the spring-boot-starter-data-jpa to maven with hqsql adapter on your path and it handles setting up the db for you with 0 additional configuration in a "sane defaults" kind of way. You can override or turn off any if the autoconfiguration, but it makes building an application much faster as you can start with your basic out of the box Boot app and start writing tests against it and work from prototype to production with the same implementation. It's incredibly forgiving and the starter packages handle 80% of your dependencies and the auto-configure being opt-in for overrides is really nice. If anything I think this is the perfect approach in contrast to a framework like Rails that markets itself as being extremely opinionated but often very difficult to override, the Spring guys have taken a highly customizable framework and wrapped common conventions around it to introduce optional opinions.
Okay, if I remember back to the days when I first started learning Java, I used to watch TheNewBoston's series, the first few episodes confused me a ton (think it was mainly getting javac to run by adding it to the system variables) in the end I skipped those episodes. I later came back to it and managed to get it working. My personal experience has been to do one or two simple programs in Notepad(++) to show that Java the barebones of writing Java is just text and that the IDE is simple a tool which will aid you in writing you're Java code (ie code completion, syntax highlighting, error checking, compiling etc) That's just my personal experience though, others will obviously differ. Sorry it's late here so my comment might not be the best.
Also a fun way to do it might be to get some existing program or game and write addons for it, for me it was Minecraft/Bukkit. This let's the students see their program doing much more interesting things at the beginning to keep the students interest. Hello World programs are great but could get boring. I'm not completely sure how this would work though, I learnt Java by jumping in the deep end but this may not work for everyone.
If you won't need to reference them later, I'd go ahead and just make them local variables in your constructor.
No problem, good luck with your project!
It's hard for me to compare the current Java trends with what things looked like before. My background is mostly influenced by PHP web apps; I've been doing web dev since ~99/00 when cgi/perl/tcl were about the only strong choices. About a year or so ago I was pretty fed up and went on what had become a yearly quest for something better. I, like what seems like 90% of the PHP community, had an ignorant disdain for Java because the last time I had touched the language was to clean up someone else's mess and it was 1.4, so I never gave it another chance when looking for alternatives. PHP spoils you. You get used to break neck iterations and likely one of the lowest barrier to entries for delivering projects of any language. All of the issues with that aside, I sucked up my bias and found Spring Boot in a very early stage and started playing with it and was floored. I built some distributed applications using Akka, Drools, and Reactor that were handling several thousand transactions a second against a stupidly complex site I was working on at the time without even breaking a sweat and honestly found that I was writing a lot less code and spending more time thinking about application architecture than I would in a normal PHP app. After acclimating myself to more of the Spring conventions, getting a license for IntelliJ vs Netbeans (still an amazing IDE) and using Spring Loaded for hot swapping changes, I think it's faster and more concise to build a Java app on Spring Boot than using one of the PHP frameworks like Zend or Symfony. I'm not sure if that helps with your question about Spring vs ?? but I hope my positive experience is enough to interest you in giving it a good look over. I think overall the best way I could describe working with Spring Boot is that it was just enjoyable and it brought me back to the days where I did this for fun and not to keep the lights on.
In addition to what you listed, I would also understand object inheritence since everything you do in android will be within a subclass of one of the core android classes. Learn about interfaces as well. The biggest challenge ahead of you won't be learning Java really, it will be learning the Android specific stuff. 
Could you give me a very basic example of how subclasses work in android? 
http://www.amazon.com/gp/aw/d/0596009208?pc_redir=1404484364&amp;robot_redir=1
The original visual editor for eclipse (the old one - from 2004) generated Swing code using a very interesting pattern that I still use when coding Swing apps: Each component has a getter method that initializes and adds other components though other getters: protected MyComponent getMyComponent(){ if(myComponent == null){ myComponent = new MyComponent(); myComponent.setX("X"); //initializes myComponent myComponent.add(getOtherComponent()); // adds and initializes other components } return myComponent; } If you look closely, this establishes a very organized initialization sequence. It's like a tree: each component "knows" its child components, and each child will have their own children as well. On the constructor you will just invoke the getter of your root component, and everything will be initialized. I use this even for JLabels. The code is more verbose at first but it is extremely easy to maintain and does not become a macaronic mess.
Look into java.file.io. http://docs.oracle.com/javase/tutorial/essential/io/ Also, look into log4j - it won't take long to learn it, and you will enjoy using it much more than System.out.println, I think.
Write stuff into in a file? Then open/read the file in the program when ready.
 MyActivity extends Activity {
Thanks for the help.
Look into the Serializable class. you can write and load the hashmap as a file since HashMap implements it. Here's a guide that I found useful, http://www.javapractices.com/topic/TopicAction.do?Id=57
I'm surprised no one has mentioned json. That would be the way I would go if I wanted to be able to understand the contents of the file and not worry about bean structural changes in the future. Look at a library such as Jackson to make it easier. 
1) The scope of variable should always be as small as possible. Regardles of language, libraries and type of application: http://stackoverflow.com/a/3979557 2) If the project allows it, use JavaFX2 instead. Swing has been deprecated.
&gt; This let's the students see their program doing much more interesting things at the beginning to keep the students interest. This is an aim I want to achieve in the next courses. Minecraft would be really nice to use but is not available for free (as speech or as beer) but I think Greenfoot will do the job too.
I find that [swixml](http://swixml.org) saves me the hassle of thinking about these things and separates the GUI from logic. 
That's not DI at all - where is the injection? It's two factory classes (that implement the same interface) creating two different implementations of the same interface.
First, you shouldn't be extending JPanel, even though I know this is what everyone does. If all you need is to make a JPanel and add some components to it, just make a static method that builds everything. If you need an object around this JPanel (to interact with other parts of your system), then just pass the already built JPanel in. You also shouldn't be implementing ActionListener or MouseListener in one big class. Instead use inner classes to make a listener per component. This keeps you from having to write weird dispatch code in your listener.
Forget Swing. Use Java FX+ SceneBuilder. It'll save you bags of time and will generally allow you to create a much better gui.
Dependency injection is just "providing all the needed data in the object's constructor". You're thinking of an IoC container, I think.
EhCache is a cache framework that is essentially a HashMap with a ton of config flags including disk persistence. 
We can have SQL-like queries through java through QueryDSL if that is one of your concerns. With regards to jOOQ, it attracted me for the main reason that it really looks like SQL. however Object mapping is an issue for me. How do I go about managing relationship on a many to many. Like what hibernate does but that's just me. Once it finds a way to easily create mapping then I'll consider using in production.
Yeah, CSV will work: custName, dogName, breed, age, vaccinated 
Even that's too much overhead. Stick to good old Java object streams :-) Keeps the code simple and the dependencies non existent.
This exact problem made me re-write my persistence layer recently. I was really enjoying jooq, the procedural SQL is great, but the mapping just isn't where it needed to be for me to use it on a project. Hopefully they improve this aspect of the project. I don't so much enjoy the black box and sometimes ridiculously inefficient queries of full ORMs, but need at least a slightly higher convenience factor to things like jOOQ to make the switch.
Not sure why this is getting down voted, it's entirely correct. For some reason DI has been equated with all of the Spring/Guice nonsense, but it's really much simpler than that. That said, this is a stupid example.
Can you explain the differences between log4j and System.out.println? It seems to me that they are used for completely different things.
Awesome, glad it worked out good for you!
println writes a line to system out. That's all it does. Log4j is a configurable library for logging. Some of the main benefits include multiple log levels for different levels of severity and different output types. If suggest reading up a bit on it. //edit - more: You are using System.out.println in your program to write output to the console, for UI purposes. Many people use System.out.println for application logging. You aren't doing any application logging at all, which is fine for a "toy" application, such as this. However, in more complex applications, you will want to log. And log4j is the most popular library for that purpose. You won't get very far in Java land without learning this simple library.
I have yet to see a coherent explanation of the problem that Guice solves. I don't need a framework to call constructors for me. It's crazy to dismiss building/wiring as a non-important detail of your application. For me, this often one of the most complex parts of the code - I don't want a framework guessing how to do it. Every actual use I've seen relies heavily on Singleton pattern - which we all know needs to die in a fire.
Guice solves the exact same problem spring originally solved before it bloated up, just instead of configuration with XML or piles of annotations you use code. Its quite pleasant give it a solid go before dismissing it. It gives you even more control (due to code configuration) than spring, really I never considered it to be guessing at my configuration.
ok. I'll probably come across it later then and its applications will make more sense I think. Thanks!
 Scanner sc = new Scanner(new File("data.in")); // Declaring a Scanner object naming it sc, which is going to read its input from the file data.in. // new File("data.in") declares the File object the Scanner should use. double a = sc.nextDouble(); // get the next, or in this case this first, double in the input file, store that result in a variable named a. double b = sc.nextDouble(); // as above. System.out.println(a - b); // print the result of b subtracted from a. sc.close(); // closes the stream, read the javadocs on this for more information. This is all basic Java stuff, not at all related to Groovy. 
The file is the InputStream of the Scanner sc. The new scanner is constructed with the input stream calling Scanner sc = new Scanner(instream).Don't remember off hand I'm on mobile, but sc.nextDouble() must call the next set of chars that is recognized by a Double pattern. So you're setting a as the next double recognized and then b as the next double recognized (after a has been recognized) then you're finding the difference and printing it. Hope that helps
Good point, you could maybe get in contact with Mojang and arrange something with them? Their a pretty cool company. I've never heard of Greenfoot before but I may look into it when I get a moment. 
will try that..thx
i don't know how much you have total but give it more , 4 gigs 
Serialization is the process of turning in-memory objects into streams of bytes, and back again. Java has a built-in framework for doing this, in the form of the Serializable interface and the ObjectInputStream and ObjectOutputStream classes. Best of luck -- stick with it, and you'll find that a world of possibilities will open up.
Oops, sorry forgot one: -XX:+DisableExplicitGC This is in case one of your plugins is calling System.gc(). Also, if RMI is used by a plugin, RMI by default will call gc() every minute.
There are tons of ways to write a HashMap to disk and read it back afterwards (I'm not going to link them, because you are perfectly able to search stuff on the internet, and I'm lazy): * The Java Serialization framework * Protocol Buffers, Kryo, Cap'n Proto, and other binary serialization frameworks * JSON libraries (e.g. gson) - JavaScript object notation is a good readable text representation * XML is also a text-based format with good library support, but it's quite complex and a bit too much for your use case. Personally I would go with any of the JSON libraries. Having a readable format usually benefits debugging.
Since you're not new to programming, I'm going to assume that you can already think like a programmer, e.g. decompose problems and generate matching solutions. * read the tutorial @ oracle * read all of JavaTIL * write a few small programs, e.g. a roman numeral printer, a ray tracer or a game of life * Go to Java Help and/or Stack Overflow and see if you can help (you will learn something here)
Ok. Thanks! I do already have experience with the concepts of programming, so I will take a look into some of the small projects you mentioned.
It's great to see people interested in programming in general and java specifically, but it's kind of hard to answer a question like this... If you really are familiar with programming in general, picking up the language itself (syntax, major OO patterns) should be somewhat trivial. The bulk of the work comes with familiarizing yourself with all the libraries that are out there, (e.g., Java Collections, Apache Commons, etc...) and going into more detail with the specialized stuff that fits your interests. (For me, for example, that was ECJ). But there's not much point in doing that in advance of working on a specific project. Or, maybe if you're interested in Web stuff there's Spring, GWT, Tomcat, and some other things. If you're just getting started with serious programming, you should probably go through Oracle's Java Tutorial to start. The next step IMHO would be a some basic data structures and algorithms (look for a text that just happens to use Java for the examples) and then a book on design patterns. After that maybe some overview of software development methods, agile vs. waterfall vs. etc...
What’s with the “I” in front of all the interface names? Is this 1992 all over again?
Ya know, this argument is used a lot against ORM tools, I've used it myself a number of times, but the rather unfortunate reality we all have to face at some point is that somewhere there's a guy who knows just enough Java/PHP/Python/Go/Ruby/JavaScript, etc... to build an application that depends on a database and maybe he's heard people down play ORM, maybe he just has no desire to touch Hibernate or Doctrine, etc... and he starts writing queries by hand and creating schema that use the relational language to describe components in his application. Over time it starts growing, maybes it's acquired by a larger company and he's now folded in with some really senior folks who, for reasons completely unknown to him, look at his application I utter horror and dismay that eventually turns to contempt once the lead sysop has to wake up at 3am because the database fell over and thanks to the applications poor architecture the cheapest/fastest solution for handling growth has been to scale bigger/badder/better hardware and because the application does 50k iops on a raid array of solid state drives, the only option for hardware involves custom ordering a new machine and that won't fix his 3am problems. I'm with you, supporting the myriad of tools that make working with relational data "easy" sucks. We constantly have to make people realize iterating over any persistence layer is a bad idea. Loading an entity graph of 250k objects to produce a user site map is a bad idea. Not managing the inner cache on an entity manager properly and finding several million instances, or even worse, stale references is a really bad situation. Identifying when your chosen IDE or build tool did not do what it should have, why, and how to fix it takes up a ridiculous amount if time. But these problems seem approachable as a set of conventions and standards and at the end if the day, if we really have to, we can short circuit stupid shit at the abstraction level programmatically if need be. More importantly, by virtue of that abstraction, our 3am sysop could lean on the lead developer to modify the adapter being used to allow for things like read/write segregation or something more complex like contextualized connection pools or sharding strategies. You also have a lot more control over what is cached when and for how long. I think we should be boosting these concepts like jOOQ up and promoting them to anyone interested. Let's be honest, if you're qualified enough to work directly against the database and can optimize every query you write, you'll be qualified to know when these tools should and should not be used. I'm comfortable with defaulting to hand holding if it means one less broken unscalable piece of acquisition-ware that ends up creating more tech. debt than what it will ever return due to painful infrastructure growth, endless refactoring, or the ever elusive "rewrite". Just my $0.02
RSBot
Hey there, it would be really nice if you can add some screenshots.
You're looking for something called "hotswapping". It can enable you to reload classes at runtime.
Thanks, that's definitely what I was looking for. I knew there must have been a term for it. Is it something which is practical in action?
&gt; Could you give me a very basic example of how subclasses work in android? Subclasses work in Android the same way they work in Javas. Surprisingly enough that's because you're actually still writing Java. If you're unsure as to how inheritance works you may still want to improve your basic Java coding skills before jumping into Android.
The answer to that is highly dependent on your situation, so I'll give you a solid, "maybe."
Yes it is. Several commerical frameworks are out there with **JRebel** probably the most popular or best known de-facto. Its very popular for developing on servers, so you save the deploy time too and not just the restart of the JVM.
I would say Polymorphism and Inheritance are pretty much a "must have". This implies the basic data types and knowledge about objects. Data structures will not hurt either specially the basic ones like ArrayList, Queue and Stack. 
I know that the first example is meant to demonstrate the framework, but it is not a valid test. It claims that the stack is empty when created. But the setup method calls clear. Thus, the constructor could add 10 elements, but if clear is implemented correctly, the test still passes. Also, `it.shouldSetup()` (and other related methods) seems awkward. When you read the other statements as an English sentence, `it` is refers to the stack. However, in this case, you are describing something that should happen to the stack, not something it should do. Maybe change it to `it.shouldBeSetupWith()`.
Should always privatize your instance variables. Some situations where Switch-Case would have been more legible and if-else's... Other than that really nice. Small methods, I liked it. Keep it up the good work !
It's a simple thing to do in an IDE like IntelliJ or Eclipse to change Java code at runtime and to continue with the changed situation. But only small kinds of changes are possible, otherwise the JRE can not accept the change and will continue with the situation as it was so far. Also, if you change initialization code of objects that already exist, the objects will of course not change, only new ones will. It's also not an outrageous or special feature: I use it all day long. Some typing, "recompile", see how it works out.
Take a look at the /r/javahelp wiki - there are plenty of tutorials listed.
The annotation is to tell any library which doing the injection work that the annotated field should be injected. [difference between two Inject](https://code.google.com/p/google-guice/wiki/JSR330) Basically they have the same semantics, but few difference on what method/field you can annotate.
`@Inject` itself is just an annotation, but it indicates that you want to inject the dependencies of your class, field or method to the injector. This is mostly started by instantiating your top-level object with the injector. [Guice](http://code.google.com/p/google-guice/) itself explains pretty well in my opinion why using DI. The real magic happens when you use modules to map implementations against interfaces. public class ToBeLogged { final ILogger logger; @Inject public ToBeLogged(ILogger logger) { this.logger = logger; } } where `ILogger` could be an implementation of your own, or a provided one. Another way to use it would be to use a `DebugLogger` and a `ProductionLogger` which would log different level of information. In Guice you could bind it like this: bind(ILogger.class).to(DebugLogger.class).in(Scopes.SINGLETON); As you can see, you can even define singletons with it and let Guice handle the singletons and instantiations. Another example of its application would be to save the boilerplate code to instantiation chains and putting all required arguments for the lower level classes into the top level class. class A(B b, C, c) class B(D d) class C() class D() To instantiate an instance `a` of class `A`, you would require the parameter `D d` cause else you could not instantiate `b` with the parameter `d`. This saves the parameter footprint and shows only the real dependencies and no delegated params. **Bonus** * javax.inject.Inject is from [JSR-330](http://code.google.com/p/atinject/) * com.google.inject.Inject is a derived version from Google Read [this](http://code.google.com/p/google-guice/wiki/JSR330) for more detail P.S. depending on the framework you use it could hit load time. [DAGger](http://square.github.io/dagger/) tries to circumvent it by providing a compile time injection instead of the runtime reflection like Guice does.
One thing that has always bugged me about java object streams. What happens when the code changes? How can you version your objects?
The code you posted with the @Inject annotation most likely came from a Java EE application. @Inject is a heavily used CDI (Contexts and Dependency Injection) feature. [Weld is the reference implementation for CDI](http://docs.jboss.org/weld/reference/latest/en-US/html_single/) and I know you can use Weld in a Java SE application but it's not nearly as nice as using it in an EE application. Oracle tutorial here: http://docs.oracle.com/javaee/7/tutorial/doc/cdi-basic.htm
Does this only work with Liferay or is standalone supported?
Thanks. The Oracle tutorial was way helpful. Especially these sentences, which is where I think much of my confusion came from: "The CDI runtime looks for classes that implement the Message interface, finds the MessageB class, creates a new instance of it, and injects it into the servlet at runtime." "In this example, MessageB is the only class that implements the Message interface. If an application has more than one implementation of an interface, CDI provides mechanisms that you can use to select which implementation to inject." Python doesn't have interfaces. I'm not used to dealing with them. It's a bit of a different mindset.
The second example is better than the first, because you can specify a different instance of DatabaseClass. However, the second instance has some drawbacks. In particular, while you have decoupled the lifecycle and configuration of DatabaseClass from Example, you have merely pushed those responsibilities to another class. Of course, you can manually wire together the application in the application entry point. But, a problem arises when the different objects that are wired together have different lifecycles. Some objects may live for the duration of the application, others for a single HTTP request or others for an HTTP session. Java EE offers some other possibilities, such as some objects needing to exist only for the duration of a "conversation". There are some other considerations, such as CMT (container managed transactions), where you would like the method to run in the scope of a transaction. This falls under a general category of "interceptors" which wrap calls around methods to do something, like starting transactions, logging, etc. You can write all this code yourself, or you can let the container handle it. The @Inject annotation is a marker to let the container manage all of this for you. The container will figure out what objects to instantiate and when in the context in which the object is needed, what wrappers to create to achieve certain effects, etc.
For batch processes that take a lot of time none of the suggestions here are really useful. ASM would need a new source definition to re-create your code. JPDA debugging entails a considerable performance hit. What you want is to save and reload your current solution. Consider writing a method to store your current solution on disk and one to read it back. I suggest using simple text formats like CSV or JSON. Then allow reading in the start solution (e.g. via a command line switch) and storing it on program stop (you may write an input handler to facilitate stopping on pressing a designated key). Source: I work in statistical analysis and processing, using mainly Java, among fortran, python and R.
One of the easiest way to generate code at runtime is the [Javassist](http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/) library. It can take a Java source string and generate a class. It also has support for class hotswapping. Other alternatives are CGLIB, ASM, and JiteScript.
That's where serialVersionUID comes in. Theoretically however the java object stream is capable of best effort (EG if there is a new field it leavs it blank, if one is missing it just ignores it).
Writing to a file or to a network stream makes no difference. It's the overhead of the actual serialization process (CPU cycles) that is a problem. As for changing structure Java is pretty good at dealing with that or, if it's having problems, you can always use the Externalizable interface. But all this is by the by. Right now his format is not changing. You should never optimize prematurely. 
Create something. Don't program just to program. Have a goal. Complete it. But first of all, why are you thinking of Java as a good programming language for GUI? The whole industry is moving towards HTML/Javascript/CSS as the defactor standard for "front end development of the future". Use Java for what it's good for. I'm not sure it's GUI. (But then again, I haven't done JavaFX.)
If this happens to you on a regular basis, I'd say you're doing something wrong. How about always coding so that intermediate result are stored to disk? How about always implementing a cancel and resume feature? How about always performing a small sample run first, estimating the total run time on the full data set? It will save you time in the long run although the initial cost is greater. Hotwsapping has its place, but it doesn't sound like your use case is the best. 
Do the java tutorial again to make sure you get around all the main basics. Read up on templating and threads, unit testing, and JEE, even perhaps Android. Find out which IDE + Application Server the company use, and ponder using the same at home. But mostly coding
Learn if they use Spring, if so it could be useful to play with it a tiny bit. Learning GoF design patterns is always good.
I started using JavaFX a couple weeks ago after putting it off for years and I have to say, so far its really nice
&gt; How about always coding so that intermediate result are stored to disk? How about always implementing a cancel and resume feature? I am aware that I am far from an example of "best practice" but most of the stuff I run doesn't take me more than 20 minutes to code, just ends up taking a lot of time processing. The example I gave might have been badly chosen, but for example I would like to just start running something and then add some code to store intermediate results if I need something faster. As for cancel and resume, it would probably take me twice as much time as writing the initial program.
Ask them what they know. Don't be technical, just literally ask "Tell me everything you know about Java." People that have true skill and know what they're doing can list everything they actually do. If its awkward and the person is shy(like most programmers- I kid!) just ask how that works. Or "Tell me what you know about _______"
I've said this many times in other comments: the only way to identify a good candidate is to have them write code for you. Avoid asking a long list of questions. I have hired many people and was never able to identify good candidates until I started providing coding challenges. In the real world, memorized knowledge is almost worthless. Code completion, Google search, and JavaDoc make it unnecessary. Regardless, the key differentiator between effective programmers and ineffective is how well they actually write code. Very few programmers actually have the skill to write programs. Use questions from /r/dailyprogrammer and/or http://codingbat.com, or come up with something yourself. I prefer String manipulation questions. Have them do one question from home and email you the answer. This will help you filter and avoid wasting time. In case they had help, have them solve 2 easy problems or 1 hard problem while at your office, preferably on a workstation (or their own laptop). Beyond that, I ask the following questions: * Given variable 'x', write an expression returning true if 'x' is odd. (Ask at the start, as a filter to avoid wasting time.) * Describe the difference between classes and interfaces. What is the difference between an abstract class and an interface? When would you want to write an abstract class vs an interface? When would you want a method argument to take a class vs an interface? Why might you want to declare a class variable as a interface vs a class? Go deep. This can really demonstrate how they well they truly understand Java and OOP. * I give them SQL DDL for a small database and ask them to write 3 SQL queries against it. That's my whole interview. Anything more is a waste of time, IMO. EDIT: grammar. Removed some content. 
Project Euler is a great, fun place to do some non-GUI programming. 
But if I was writing an application today, would I use/need EJB? Or is that a legacy code issue?
15-20 questions seems really ambitious for 30-45 minutes. when I interview, I usually sketch out like 4-5 questions based on our needs and their resume, and let the interview be more organic after that. I have 30 minutes, and sometimes even with only 4-5 questions I go over time. You want to gauge the prospectives employee's thought process, not their ability to rote memorize answers, so having tons of quick-fire questions seems less valuable to me than a few well thought out responses.
You are exactly correct, that should work. You can also use Money -= cost; Which is the same thing, but may be confusing for a beginner.
- What is new in Java 8? (Find out if they're interested in the latest trends. I doubt they had any in university) - Have you done any projects in your spare time? URL to portfolio/project? 
I found the bug, the method that handles spending money doesn't return bet correctly. I have an if statement that says if(Cost &gt; Money)(System.err.println("You can't spend more than you have!"); } How do I return Cost only if you're spending less than you have. 
Isn't that what JBoss is for?
Here's what I mean if (Cost &gt; Money) System.out.println("You can't spend more than you have!"); else System.out.println("The cost is " + Cost);
Oh SORRY I didn't see you were in a method. I should have read it more diligently. The issue is that the function HAS to return something, so since there is a chance that you won't return something (in the case that cost &gt; money), it won't compile. You need to have it always return something, regardless of whether or not cost &gt; money. I don't know how you're implementing the method, but I would recommend returning -1 if Cost &gt; Money and then wherever you are calling the method checking to make sure it's not -1 and is valid. 
something like this (combining sanguinekorrin's two examples) if (cost &gt; money) System.out.println("You can't spend more than you have"); else System.out.println("The cost is " + cost"); money -= cost; return money The actual way to handle a situation like this (ie where there's input that the method can't perform - like a transaction for more money than the person has) would be something called an Exception, but if you're just starting programming you probably won't have done that yet so don't worry about it.
JBoss is another option, and there are about 12 other options still.
&gt; When would you want to write an abstract class vs an interface? Question has gotten trickier with advent of Java 8.
One thing that I forgot to do was ask what version control they use and read up on it (and preferably practise with it too) if you aren't already comfortable using it 
What would you change about the java language (or improve)?
Tell me which language features of Java you enjoy most. Hopefully they say something like Generics, Annotations etc etc or perhaps lambda expressions, streams.. Then dig deeper and find out how much they understand. A true craftsman knows their subject.
Have them model some real world example that makes use of OO concepts such as inheritance and composition. Add difficultly has they go. See if they make use of Abstract classes, interfaces, enums, overrides appropriately. Alternative. Ask them about functional programing and where it makes sense.
Architecture is language agnostic, and often problem specific. Sure's there's staples and good ideas that are reusable, but for the most part it's problem specific.
A bit away from the context of the thread, but I want to thank you for sharing the codingbat.com link. I never knew about this, and some of those exercises were really fun to go through. Also, they were short and to the point, which is something I appreciate.
Try the diagramming software developed by Nort woods Software Corporation. They offer full graphical diagramming in many languages and have a Java library called JGo. http://nwoods.com Since you're looking for web though you might be more interested in the JavaScript library GoJS which uses the new canvas element. http://gojs.net You can find samples including a Gantt diagram at gojs.net/samples 
I've had the interfaces vs abstract class question before and I was Hoping you'd give a quick breakdown of what some answers are?
Scenebuilder is a separate app that edits the fxml. As far as I know, the only interoperability between it and netbeans is that it happens to edit the .fxml file that your project uses. Just remember to specify the path of your controller in the fxml. 
Well I'm only a very beginner with java but from what basic knowledge I have it would seem like the best way to do it would be to add an element to the appropriate pane that shows the time, and add some method to start the timer to the listener that starts the game when you hit the play button, and then wherever you have it detect an impact to end the game, just also have it stop the timer. I'm sure there is some library to have a clock somewhere. Quick edit: I'm not familiar with github and having some issues getting your code to work on my computer. Anyone have some tips? edit 2: I'm probably going about this all wrong. halp. wat do?
[Head First Design Patterns](http://shop.oreilly.com/product/9780596007126.do) is a good one. A classic of O'Reilly's 'brain friendly' Head First series(imo best in the series). It makes the topic really easy to understand with drawings, quizzes etc. But it may not be for you if you are looking for something more academic and in depth.
Sorry, I'm a little new to JavaFX. Is the controller where your main code goes? Like the event handlers?
Ok, thank you!
looks very useful, nice that it has an archetype!
Try the projects in /r/DailyProgrammer
What nret said. You should also wonder why you don't have to have an instance for the "main" method to be called.
I can't give you complete answers due to the amount of time it would take to type. I'm not the most eloquent writer, but I hope you get the gist of my answers below. I haven't learned all of the Java 8 features, so better answers may exist. &gt; What is the difference between an abstract class and an interface? An interface has no implementation (although this has changed in Java 8) and no member variables. Classes or interfaces may inherit/implement multiple interfaces. An abstract class is a class with (usually) one or more unimplemented methods and perhaps member variables. Classes or abstract classes may extend only one other class or abstract class. Internally, methods dispatch faster for a class variable than an interface variable. &gt; When would you want to write an abstract class vs an interface? You would write an abstract class when you want to provide one or more base method implementations. Some feel that abstract classes should be used for Is-A relationship and interfaces should be used for Kind-Of relationship. However, in most cases, interfaces are the better choice (regardless of the Is-A/Kind-Of relationship), if you think that more than one implementation will be required. Composition is usually preferred over inheritance. &gt; When would you want a method argument to take a class vs an interface? One should prefer an interface whenever possible. A class argument may be used if only one implementation is ever available and no interface exists, yet. 
 final Scanner scanner = new Scanner(System.in); while(true) { // SHOW PROMPT System.out.print("Input how much you'd like to bet: "); // READ INPUT final String line = scanner.nextLine(); // INTERPRET INPUT if (line.equals("q") || line.equals("quit") || line.equals("x") || line.equals("exit")) { break; } Double amount = null; try { amount = Double.parseDouble(line); } catch(NumberFormatException e) { // Slow and dirty but also perfectly reliable way to do this, 100% apt for a console input situation. There's a hole in Java here that you can't do this in a simple way without risking an exception to be created. } if (amount == null) { System.out.println("Please enter a number, or enter q|quit|x|exit to end the program."); } } scanner.close(); System.exit(0);
What is the benefit of this versus a JAXRS compliant library? Why not use a ContainerRequestFilter in 2.0?
I second this book as well as a good starting point, the heads first java book as well might be a good starting point, and then jump into this mentioned above. I would also suggest [Effective Java Edition 2 ] (http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683). This book takes and builds upon the first two books, and teaches you a lot better OOP coding practices, and just how to be better at coding overall.
This is a good book, it's where I started on Java.
Really cool idea. Will probably get attention from the people running the camp too.
&gt; native data types are passed by reference in java Nope. Java is pass-by-value, for both primitive data types and object references.
Do you need that parameter in the method? You don't seem to be doing much with it...
don't get me wrong - i need this in Java not JS. By Web i ment something like Play Framework or facelets 
Try using a static method instead of a constructor. The header would look like: public static int getRoll() This way your not trying to return a value from a constructor. You also don't need to pass in a value so you should and could make a method like this entirely self contained. Good luck =) 
sorry, yeah i meant pass by value for primitive types, but for objects they are pseudo pass by reference. :D 
Wow, really? I don't know anything about Play, but for JSF: that's only really good for interactions through form elements (well, you *can* use it for other things if you mess around with it long enough). You want interactivity and mobile support - so I'd wager your best bet *is* Javascript, e.g. charting with d3js and submitting changes through ajax requests. 
What is 'roller'? Also convention is to have your method names start with a lower case letter, then be camel cased (e.g getMyValue() ). For a better answer your would need to provide more complete code, as it is hard to tell exactly what has gone wrong atm
Pass by reference means that in a case like Object foo = null; replaceFoo(foo); It's possible for foo to have become non-null; this is impossible in Java, because object references are pass-by-value - the callee cannot influence their values in the context of the caller.
Java is [pass by value](http://javadude.com/articles/passbyvalue.htm), so you can't modify your method's primitive parameters (you *can* modify an object parameter's attributes though). You'll have to remove the parameter from the method's signature, and declare it in the body of the method. Or simply return "roller.nextIn(11) + 1" without assigning it to a variable. As Yulfy said, a static method may be a better choice. And method names should always start with a lowercase letter, uppercase is reserved for constructors. 
* Are you doing the interview on the phone or live? I'd prefer live, because then you can put them in front of a PC and have them code * On the phone, ask them about prior experience and be prepared to check if something smells fishy. I once had someone tell me they had 5 years of JSF experience when 1.0 was still fresh. If they have an online portfolio, even better, you can talk about their past projects. This hopefully also makes them feel good and reduces their stress levels. You want the candidate's stress level at the minimum possible. * On site, I'd give them two assignments; the first one pretty obvious, like "read a file of numbers, add the odd and the even numbers and print the sum of each to stdout", and the second (optional) just a bit harder, and at best pertaining to a current project of yours. Have a project/code skeleton prepared so they can simply fill in the blanks. That saves time otherwise spent with boilerplate (which we'll assume they can write or generate), so they can show more of their coding skills. * Finally, have them tell something about their idea about methods, code style, etc. Don't grill them about it, but watch out for obvious mismatches with your company's way of doing things. * Be friendly at all time. Don't try to show your cleverness, it's rude and makes the candidate uneasy. This is about her, not you. * If the candidate hits a snag, get them on another track before they get hung up on a detail. Assure them that this is to keep the time and that you have seen enough of their skill in that department.
Not really commenting on the quality of the article, however there's a disconnect between the title and the article (emphasis mine): &gt;In this tutorial, I'll briefly show how we can serve a web page using spring boot and thymeleaf. **This blogpost won't go into any depth of how thymeleaf works, or how you can use it**. Instead, it will teach you how you can set up your environment with spring boot to serve the pages.
I'd like to have a PEG parser DSL for Java 8, so I wouldn't have to write it, please.
There's a whole pile of them on youtube. https://www.youtube.com/results?search_query=Scene+Builder+with+NetBeans 
Are you sure you need to serialize the engine? Wouldn't it be better to serialize the state of the engine which is captured in the bindings then just reconstitute the engine and install the previously stored bindings?
Absolutely you can. Most places will stick to one set of tools, one web framework, one technology. Smaller places will have a smattering of languages and technologies though. Even if you stick to one framework, as long as you can do it well, it doesn't mean you won't be considered. If you have a proven record in JSF, an employer may take that into consideration if they're looking for a Spring guy. I'm a JSF guy and my resume title is "JEE Programmer" in many a job site.
No, get() reads $t via the data race. There is no happens-before edge between the write of $vt and the (absent) read of $vt. Java memory model does not guarantee $t to be visible. Memory barrier, if any, in Tconsume reading the slot from a ringbuffer would probably be working on the systems where memory barriers are global, barred allowed compiler optimizations. In other words, fragile. Dropping $t altogether and reading $vt directly is the sanest option for portable and headache-free use.
Compare public class ApplicationController { @Inject private ArticleDao articleDao; @Inject private CommentDao commentDao; } and public class ApplicationControllerNoInjection { private ArticleDao articleDao; private CommentDao commentDao; private AnotherDao anotherDao; public setArticleDao(ArticleDao articleDao){/* omitted.*/}; public setCommentDao(CommentDao commentDao){/* omitted.*/}; } Every time we create a new ApplicationControllerNoInjection instance, we need to use each one of the setters manually ApplicationControllerNoInjection appController = new ApplicationControllerNoInjection(); ArticleDao articleDao=new ArticleDao(); CommentDao commentDao=new CommentDao(); appController.setArticleDao(articleDao); appController.setCommentDao(commentDao); Wait a minute, ArticleDao and CommentDao both also have dependencies we need to setup. ApplicationControllerNoInjection appController = new ApplicationControllerNoInjection(); DataSource dataSource=new DataSource(); /* boilerplate datasource setup */ ArticleDao articleDao=new ArticleDao(); articleDao.setDataSource(dataSource); CommentDao commentDao=new CommentDao(); commentDao.setDataSource(dataSource); appController.setArticleDao(articleDao); appController.setCommentDao(commentDao); And we would also need to null check articleDao &amp; commentDao when we tried to use them. This is getting pretty hairy. If we use ApplicationController (with injection), the provider will get ArticleDao and CommentDao and also setup the dataSource dependency so we can just start using ArticleDao and CommentDao and we don't need all the extra stuff. public class ApplicationController { @Inject private ArticleDao articleDao; @Inject private CommentDao commentDao; public void doStuff(){ /*the provider already setup datasource*/ Article article =articleDao.getNewestArticle(); Comments comments = commentDao.getComments(article.getId()); /* other stuff...*/ } } 
&gt;If we use ApplicationController (with injection), the provider will get ArticleDao and CommentDao Where does one typically set up the provider? And wouldn't the provider have to know about the datasource? Seems like it just pushes the responsibility around.
I really like these. I don't ever plan as working as a JAVA dev but I really like these questions. They seem like a good way to prepare for an interview in that they add some vocabulary to things that a lot of people will just simple know how to do but not be very good at explaining.
Thanks. Very encouraging. One of the things that is hard to get a grip on is the vast breathe of java and related technologies. It's overwhelming to someone trying to figure out a way to gain marketable skills through a self-study route.
&gt; 13) How to stop (runaway) thread in Java? &gt; Answer: You can't. I've always found this slightly annoying. So you've got this run away thread. It could be for numerous reasons -- maybe your platform requires a response every quarter second and maybe your code is getting stuck in a third party library and you absolutely, positively have to get it back, regardless of the fact it's going to unsettle the JVM (how much, I have no idea, but maybe in some cases it is more important to end any possibility of that thread continuing) But no, Sun (and now Oracle) has decided the only way to stop a runaway piece of code is to completely shut down the JVM. That's fairly annoying. Doubly annoying is that the documentation and articles like this suggest/imply that Futures will somehow resolve this dilemma for you. Hey, it says it's "cancellable" after all right? [Oh, sorry for your luck.](http://stackoverflow.com/questions/11158454/future-task-of-executorservice-not-truly-cancelling)
If you're using Spring, it will be your provider &amp; you setup things like datasource in configuration. It does push the responsibility around, to Spring (or whatever) instead of you writing the dependency management yourself. Do you really want to setup DataSource and use the setter every time you want to use an ArticleDao? What if ArticleDao was referenced in 20 different controllers and it had 5 more dependencies..You would have to make a setter for each dependency and instantiate each dependency and the dependencies of the dependency every time you wanted to use an ArticleDao or you could just do: @Inject ArticleDao articleDao; And it would be so much more manageable and testable.
I'll second Head First Design Patterns. I'll then raise you a Head First Object Oriented Analysis and Design, and a Domain-Driven Design: Tackling Complexity in the Heart of Software. I would also highly recommend reading Clean Code, and The Pragmatic Programmer.
You're welcome. For a jr. programmer, they may just be looking for good core Java knowledge. As you advance though, you may want to pick an area to specialize in. If you're coding JavaFX, you'll be thin application guy, and your skills may be translatable to AWT/Swing. If you're the front-end web guy, then Javascript / jQuery / etc.. will be your thing but knowledge of the back end will help. If you're the back end guy then you'll be versed in the framework, DB / ORM, webservices, etc...
A StackOverflowError happens when the runtime stack of a program gets too big, usually by recursion. First, what I would do, is to check the task manager to see if another instance of MineTest is running. If the program is a runnable jar, use: java -Xss&lt;SIZE&gt;M -jar &lt;Program&gt;.jar where SIZE is the new size of the stack and the Program is the program you are trying to run. However, if I remember correctly, thats a Java Web Start program, so the exact way of doing the stack size change may be different. 
Here's what my Project Folder looks like if anyone needs to see what I'm talking about. The folder I'm trying to use as the srcDir is MulticastTemplate http://imgur.com/ZF1M8Ju 
I usually use "./src/datafolder/" in Eclipse for when I'm developing something that uses data relative to my sources (actually I use "./datafolder/" so my data isn't with my code). The '.' at the beginning says "in the folder relative to this one". You might want to test it to make sure it works when you jar it up though. 
Thank you so much, this worked perfectly!
Is volatile reads really that expensive for your app? It seems to me that if your app is that performance sensitive java is likely not the right language choice. Have you actually benchmarked it, or are you just assuming? I know you said that this wont "cut the upvote mustard"...but I do a lot of performance programming, and have yet to find a condition where volatile reads were too expensive (particularly if it is not being written to too frequently).
I recommend you google "explicit type casting in Java". The (Object[]) is casting the result of the get method to an array of type Object. My guess based on what I see is that the get method returns an Object type but the object actually being returned is an array. Because you would want to work with the array rather than the Object, you would cast it as this code is doing. If the get method returns Object[], then this cast is not necessary. 
thanks! after googling with that keyword i found this answer http://stackoverflow.com/questions/20096297/explicit-type-casting-example-in-java?answertab=votes#tab-top as good references
Oh. That's a good point, but I see no way to capture state from the Bindings object, and the Bindings object is not serializable.
I've run glassfish in the past, probably 6-7 years ago. Never used Wildfly. Now I pretty much steer clear of EJB and use Tomcat or JBoss when needed. The server complexity is just not worth the hassle in most applications
&gt; What is the advantage of suddenly allowing interfaces to behave much like an Abstract class? One explanation is multiple inheritance (of behaviour). If you're using up an abstract class for common behaviour, all your subtypes will forever be locked into that type hierarchy. For example, if you *think* it is a good idea to create a class that implements both `List` and `MyAPI` interfaces, you *may* choose to extend `AbstractList`. But that will forever prevent you from also extending `AbstractMyAPI`, which might be more useful... (note: I rarely think it's a good idea to mix `List` and `MyAPI`, for the same reasons: composition over inheritance) But that's only a very superficial explanation. In fact, interfaces do not really behave like an abstract class, but [these things are quite subtle](http://blog.jooq.org/2014/05/09/java-8-friday-language-design-is-subtle/).
&gt; IMHO Java was not developed to accommodate tons of language features, just a powerful set thats enough to use for many projects. That probably matches many people's opinion when generics were introduced. I don't think anyone wants to go back to the days before generics. Or did you enjoy writing IKnowTheListType object = (IKnowTheListType) list.get(0);
I don't know how much you know about Java, but Java is not friendly when it comes to memory consumption. There is something the developer did that causes the local runtime memory section of the code to overflow, or use up all its memory. The only way to fix that is to tell the JVM to use more stack space ~~and for the developer to test their code better so it doesn't happen~~. I looked up how to do it with a Java Web Start (the kind of application it is). Now, I've never have launched on from the command line, but I think this method will work. Open your command prompt, and change the directory to wherever MineControl is. Then enter: javaws -JXss3M MineControl.jnlp That should increase your stack space, which by default is 2 megabytes. Hopefully that command works and increases it to 3 megabytes. Other than that and having to go into the magic code in the .jnlp file, there isn't much else you can do.
This isn't Sun or Oracle's fault, it's just a plain old limitation of preemptive threading. Every platform faces this problem. If a thread is abruptly stopped you won't know exactly where it stopped and your program could be left in an undefined, broken state. The stack wasn't unwound and can no longer be unwound, so locks may be stuck and allocations may be leaked. Then the only way to be sure the process is not in a broken state is to restart it anyway. 
https://github.com/wendykierp/JTransforms
https://github.com/Netflix/RxJava/ http://www.grahamlea.com/2014/07/rxjava-threading-examples/
http://maven.40175.n5.nabble.com/Clash-Inspector-Release-0-9-and-asking-for-quick-feedback-td5798342.html
There are situations I don't care where it stops, I just need it to stop. It could be consuming more system resources, it's eating up CPU cycles, it's doing any number of things I don't want it to. Yes, I might lose that memory, yes, I might have some deadlocks between threads, but at least I can just carry on with whatever is left of the JVM. Sometimes stopping a process is more important than freeing up memory or removing deadlock between two threads. I get that Java tries to prevent me from shooting myself in the foot, but there definitely cases where the damage done by a halted thread is much lower than the damage done by a thread that just keeps running unchecked. It would be great if I could rewrite every piece of java to behave nicely in threaded code, but alas, this is not the case. For the record, it is Oracles' fault that their documentation is misleading.
If your talking about a non-JDK library, then try to contact the devs. If you're talking about the JDK, ~~then good luck~~ go to [Oracle's](http://www.oracle.com/technetwork/java/javase/bugreports-140511.html) bug reporter's docs.
does anyone know if there is something equivalent in Eclipse ? I use quite a number of features, but I always feel like there is something popular/useful that I'm NOT using.
You don't have a way to gracefully stop your "service" so this is not really a complete implementation. Graceful shutdowns which don't require something akin to "kill -9" are important. But I agree with everyone else, if there is already a feature which does this, use it! 
Is it bad if I can't answer one of these questions? I mean you'd assume that the majority of developers don't know **everything** about their language, I find that I learn new things about Java - and other languages - everyday. D:
Thank you for this. I've been using IntelliJ for longer than I'm willing to admit, and I've never learnt more about it than I have today. The inline documentation even has relevent screenshots. It seems to be a common feature among JetBrains applications. RubyMine also has a useful productivity guide.
I know most of these and I haven't touched Java in years
Yes, and the fact that you have been able to make sense of any one of those frameworks speaks to the fact you'll be able to pick up whatever you need. 
"Java" is too big now to master all of it. I'd recommend getting a solid working knowledge of the language itself, study either UI or backend development until you're an expert, and dabble enough in the other to talk about it conversationally.
What's the bug? (I strongly suggest asking StackOverflow about the bug, because it's significantly more likely that you just misunderstand the intended behavior.)
haha not at all, but i did find this interesting as an example of why generics needs to be carefully considered before adding to a language: http://golang.org/doc/faq#generics 
you are probably correct but I wanna challenge it anyway
Most of these are not Java specific. "What is a semaphore in Java?" The same thing it was when Dijkstra was talking about semaphores in 1965...
You pretty much have to. Anyone who says they know "all of Java" is lying because it is too big. For example I am pretty decent in servlet programming, smart cards, SSL, keystores and other security stuff - also have done a bit of JNDI related stuff and MDB programming but I know nothing of embedded Java or low level JDBC or CDI
Perhaps you mean Servlet 3.1? This is definitely not in Tomcat 7, but is in Tomcat 8 which TomEE does not use yet (it will in TomEE 2.0). TomEE 1.x is an Oracle Java EE 6 Web Profile Certified server, which does include Servlet 3.0. That does not mean there can't be bugs of course, but it is compliant with the Servlet 3.0 TCK (test suite).
You don't need the annotation. Any interface with a single abstract method is a functional interface. This was one of favorite design decisions in Java 8. Many of your favorite old interfaces support lamdba expressions in Java 8 with no changes.
There's already a bunch of built-in functional interfaces that should cover a lot of usecases. Check out [java.util.function](http://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html). I try to stick to these as much as possible.
Yeah, I've still been including it to be slightly more explicit (mostly so someone new to the construct wouldn't add something breaking it. Unlikely, but possible).
Thanks, I thought I saw something on that but didn't look over the docs enough. I'll see if I can replace my littering with anything built in, which is generally preferred.
Btw: "if (xyz instanceof myType[])" is possible (You can check for array versus plain type.), so if someone would really want to rape Java and all the support the compiler supplies, they could use this end-all interface: public static interface UniversalMethod { public Object method(final Object value); } 
Try to figure out what you were doing when it hung and see if there's any consistency. I had this problem with an older release and realized it was whenever I clicked into XML ediitors, so I swapped out the default one and got it working. For a while though, I was certain it was hanging randomly and couldn't find a solution. Also enable the memory usage bar so you can see if there's huge spikes of memory right before the hangs.
Try to figure out what you were doing when it hung and see if there's any consistency. I had this problem with an older release and realized it was whenever I clicked into XML ediitors, so I swapped out the default one and got it working. For a while though, I was certain it was hanging randomly and couldn't find a solution. Also enable the memory usage bar so you can see if there's huge spikes of memory right before the hangs.
Also, there isn't question number 5.
&gt;For example, if one thread takes 100 millisecond to do a job, you can use 10 thread to reduce that task into 10 millisecond. This is just wrong. Not every task can be made parallel. 
&gt; *Generics may well be added at some point. We don't feel an urgency for them, although we understand some programmers do.* Looks like a description of Java, too :)
Plus there's the overhead of creating threads, (potentially) splitting the task up, starting them and (potentially) synchronising the result, which is before you consider the impact on hardware where you may get resource contention. Threads in Java might be fairly cheap, but there are definitely costs to consider.
Not really what you are asking for, but there is a plugin that will tell you that there is a more efficient way of doing certain tasks. Example, if you switch editors with the mouse a few times you will get a suggestion to use the keyboard shortcut instead. Edit: the plugin is called MouseFeed http://marketplace.eclipse.org/content/mousefeed#.U7zk9qBBsm8
Good project for students, but not sure I could use the plugin in the real world. It'd lead to dependency hell. A lot of projects use [semantic versioning](http://semver.org/). At a high level: &gt; Given a version number MAJOR.MINOR.PATCH, increment the: &gt; &gt; MAJOR version when you make incompatible API changes, &gt; MINOR version when you add functionality in a backwards-compatible manner, and &gt; PATCH version when you make backwards-compatible bug fixes. &gt; &gt; Additional labels for pre-release and build metadata are available as extensions to the &gt; MAJOR.MINOR.PATCH format. I use it to determine compatibility when I run into "dependency clashes." But the concepts behind semantic versioning are not enforced. It'd be nice to have a plugin ala the "Clash Inspector" which compares the APIs of "dependency clashes" for compatibility via reflection along the lines of the unenforced assumptions in semantically versioned libraries. Better still, limit the API comparisons to those actually used upstream (i.e.: ignore irrelevant API differences).
Yes its for liferay, read more in our blog
Nah, not benchmarked yet, I'll be doing that today, but I did want to follow through on my revolutionary construct above, so I could patent it and make millions off it (ah well, back to the day job). I reckon the reads won't necessarily be that expensive in isolation, but I also don't want to set up a pattern that's going to be reused and eventually have a performance impact. But that's just me pre-optimising, when I should be burning that bridge when I'm on it (or something like that). Cheers for the input!
You're welcome! I was pleasantly surprised when I found this feature, and also very confused about why I had not discovered it sooner... The documentation looks like the same as the 'tip of the day' that pop up when starting their apps. I left this turned on as it seems like a great way to learn all the shortcuts, but in practice I just seem to quickly close it so I can get coding.
&gt; Once it finds a way to easily create mapping then I'll consider using in production. Yes, we'll be working on that part of the feature set in the future. But we won't try to imitate Hibernate. It will be better integrated with Java 8's functional data transformation features. [As documented in this blog post](http://blog.jooq.org/2014/04/11/java-8-friday-no-more-need-for-orms/). So, stay tuned!
&gt; Hopefully they improve this aspect of the project. With your help and insight (e.g. in the form of feature requests on the [user group](https://groups.google.com/forum/#!forum/jooq-user)), we might get there faster! What do you think? &gt; but need at least a slightly higher convenience factor to things like jOOQ to make the switch I understand. It would be helpful to learn about what concrete things were missing the most.
Just this morning a colleage and me had at work some issues with the Java classloaders. I call this timing, wow.
Makes sense. Thanks for your help.
The ScriptEngine has the **getBindings** call which would allow you to retrieve the bindings for a given scope level. The Bindings interface is a subclass of a Map and unless you provide your own implementation of the Bindings it will likely be a SimpleBindings object. So at this point you simply need to be able to serialize the Bindings map. There are a couple of ways you could do that. If all attributes in the Bindings map are primitives or Objects that defined the Serializable interface you could use the ObjectOutputStream. If they are not, then you could use a tool like [XStream](http://xstream.codehaus.org/) which does an excellent job of turning any object tree into an XML document and being able to read it back.
Thank you! I will definitely start reading up on the Timers. I am currently using Glassfish 3 but will be upgrading soon.
Thanks OP. 
It would be, but the ObjectIterator handles circular graphs (A-&gt;B-&gt;C-&gt;A) to prevent following the same branch twice (see the StringGeneratorTest.testCircularGraph() unit test). Is this what you're thinking about or something else?
[“Considered Harmful” Essays Considered Harmful](http://meyerweb.com/eric/comment/chech.html) In any case, everything has good uses and bad uses.
That was what i was thinking of. Had those problems when developping [this tool](http://sourceforge.net/projects/unitilsobjectvalidation/) This is not final at all and there are still bugs
Cool idea. Post a topic when it's ready. I have some experience with rules-based systems and DSLs -- would love to weigh in then.
Hm I run all my JPA tests against an in memory h2 database with no problems
Thanks for posting this! Very timely for me. Title question: "Do you really get Java classloaders?". That would be "NO!"
No, thats the program that runs it, Java Web Start. What the shortcut is saying is that javaws is what runs the program, but really, its code goes into javaws to run (Java programs run on a virtual machine). No Java programs have a .exe extension, unless they are part of the JVM. Interesting stack trace. The overflow is happening because there is something that keeps calling itself in a recursive call, which is what I was thinking. I say this because two methods keep getting called, Cache.getCacheEntry() and Cache.followsRedirect(). But unless you are the developer of MineControl, there isn't much you can do. I'm sorry. I'm just curious, but have you just switched from console Minecraft to PC Minecraft? I did the same thing, and it was hard learning the controls, but I got used to them and now I prefer the keyboard controls over a controller. 
It's pretty obvious that applying unit testing to everything without considering the context of the test might not be very useful. 
Well, what's the behavior you are expecting vs what is happening? Have you read the docs to see if you are wrong?
This just in: Poor practices considered harmful News at 10.
The flip side is when you show the ability to adapt and learn new languages and technologies quickly, that skill carries from job to job better than any specific knowledge would.
I'm your Guardian Angel 0:-). Btw, avoid chicken for a while ...
I tried all the suggestions provided in this thread. Nothing worked. I found the actual reason which is weird. Please don't start blaming me. I, for some reason, renamed the eclipse.exe to eclipseLuna.exe. And when I renamed it back to eclipse.exe it started working. I don't have any idea why it would behave differently for an exe name change. Any one knows???
That's possible if you're using basic SQL. This gets more complicated if you need to use database analytic modules or any database-side programming such as PL/SQL or TSQL.
True. Those are relatively rare (not as rare as they should be) Sometimes they are used appropriately, often not 
&gt; not as rare as they should be I try to use them as often as I can. It provides another layer of abstraction to the database structure. Providing an interface to the database via PL/SQL and TSQL packages allows database developers to more easily modify the database structure without touching application code and vice versa.
I for the most part tend not to write any database code these days, I mostly use very standard table layouts (auto-generated) and I let Spring Data generate all the database code and tables. I guess it all depends on the types of app(s)
This is not specific to `return`, this will also happen if you throw another exception in the finally block. That's just how they work. If you have read the specification of the language this should be no surprise.
Old but gold. Also [Project Jigsaw: Phase Two](http://mreinhold.org/blog/jigsaw-phase-two) &gt; The primary goals of this Project are to: &gt;* Make the Java SE Platform, and the JDK, more easily scalable down to small computing devices; &gt;* Improve the security and maintainability of Java SE Platform Implementations in general, and the JDK in particular; &gt;* Enable improved application performance; and &gt;* Make it easier for developers to construct and maintain libraries and large applications, for both the Java SE and EE Platforms.
Late reply, but Community edition, which is free, is awesome! It's what I use and there's only a few differences between it and the paid version. 
As Brandon mentions, portability is very low on my wish list. I'm sure we'll upgrade our production hardware one day, but whether or not this software is kept, or refreshed as well, it's another question. Also, it would take a serious uat hammering anyway. The choice of using java for a system like this certainly isn't just about speed and throughout (like you say, if it were, we would have gone lower level). Libraries, build systems, development tools, ease of use and so on are also important factors, and I haven't seen any other language come close on those criteria. So it's worthwhile trying to squeeze as much performance of it as possible and wrapping up those concepts in neat reusable units. 
Official JDK 9 list of features will be available [here](http://openjdk.java.net/projects/jdk9/)...
Thank you!
Thank you!
I think it's much better than the "tip of the day", even though--as you say--it does seem to be the same content. When I first open an application, it's because I want to do a thing. Having a pop-up appear as soon as I start is just annoying: you're keeping me from doing the thing I set out to do. I'm fortunate to have a second monitor, which means I can maximise this window on my second screen and refer to it **as I'm coding**. That's significantly more useful, I think! "Huh, it says I've never used 'Quick Definition Lookup' before. Let me give it a try.... ctrl+shift+i, eh? Aaaand my life is changed." Honestly, if I saw the same thign in the Tip of the Day dialogue, I would be like "I'll give that a shot after I do this one thing first" and then I would forget what the hotkey was and give up.
No. Java was garbage in 1999. Java was garbage in 2005. Java was garbage in 2010. Java is still garbage. The only time you use Java is if you're writing minecraft or if your business model is to sell shitty consulting services of middleware purchased by people who don't yet realize Java is utter garbage.
1) More the reason that the keyword should only be needed to be used when the app demands it and the user is forced to make a considered and informed choice. If the keyword was *nonvolatile* instead, and worked in the opposite direction, users will only choose to use it if they needed bleeding edge performance. Given that the Java approach has been to sacrifice a little efficiency to ensure that people don't shoot themselves in the foot, i find this an odd choice. Not to belabor a small point too much, but ... 2) Yes that result/behavior is expected given the way it is supposed to work. i.e. push stuff out to main memory every time. Not sure how that affects the argument, though. (Note that I understand that the way I was suggesting makes the less efficient way the default, but it gives you one less way to shoot yourself in the foot, and still leaves the door open for the optimization when needed).
I've used [jMonkeyEngine](http://jmonkeyengine.org/) to make 3D games and would recommend it.
Unity 3d. It can compile to a bunch of things.
OH! It's also worth pointing out that volatile was not part of the language spec initially. I believe it was introduced in version 1.5. So that's really probably the best argument, they did not want to change previously established behavior when they introduced the new features.
Shit, you got me there. 
I hate to register to see the code.
I'm amazed Java ME is still a thing. I remember writing little apps with it as a kid! Apparently now, it's being positioned as a platform for the "Internet of things".
Unity isnt a java game engine, If you want to do java 3d games, I agree with jswhitten, JMonkeyEngine. Im using it for my game and its awesome.
Good ol java
Mandatory [libGDX](http://libgdx.badlogicgames.com/)
Maybe this article can clear things up to you http://zeroturnaround.com/rebellabs/why-im-so-excited-about-migrating-from-swing-to-javafx-2/
This article provides an example using XML to build a user interface. Are you able to (easily) create reusable components in JavaFx as we can with Swing? For example: &lt;Label text="Red:" GridPane.columnIndex="0" GridPane.rowIndex="0" /&gt; &lt;Label text="Green:" GridPane.columnIndex="0" GridPane.rowIndex="1" /&gt; &lt;Label text="Blue:" GridPane.columnIndex="0" GridPane.rowIndex="2" /&gt; &lt;Slider max="1.0" GridPane.columnIndex="1" GridPane.rowIndex="0" /&gt; &lt;Slider max="1.0" GridPane.columnIndex="1" GridPane.rowIndex="1" /&gt; &lt;Slider max="1.0" GridPane.columnIndex="1" GridPane.rowIndex="2" /&gt; This is very repetitive. I would rather write something like a SlidingLabel, which is a label with a slider, and have my own component to add them as rows: component.addRows(new SlidingLabel("Red"), new SlidingLabel("Green"), new SlidingLabel("Blue")); Or even: component.addSlidingLabels("red", "green", "blue"); One of the greatest things with Swing (or GWT, Wicket and similar Java-oriented UI frameworks), is that it is very easy to reuse. Once you drop Java and OO in favor of XML, you lose reusability (please let me know if I am wrong here) and your UI quickly grows into a huge mess with lots of duplication, you are unable to refactor anything. Swing is surely outdated, and adapting the layout of custom Swing components is a pain in the ass. I don't know anything about JavaFx, but let's say you need to create a panel for inputting name/middle name/surname of a client and reuse that in 10 different screens. Some screens don't display the "middle name", some will display the labels on top of each field, and some will have the labels on the left of each field. How hard would it be to do that in JavaFx's custom component in comparison to Swing?
If you're looking for some inspiration for small varied projects you could try the challenges at [/r/dailyprogrammer](http://www.reddit.com/r/dailyprogrammer/). You can post your solutions in the comments for critique. 
Looks pretty fun. Once you've tweaked it to your liking, I'd advise you to learn how to code the game completely without the aid of Greenfoot. It will be a tedious task, but very rewarding in the end knowing that you developed an entire game yourself. Edit: feel free to contact me if you need help with anything at all! 
Thanks, you could incorporate it, if you have the time. I will start to add the items.
daily programmer is basically to enhance you algorithm skills I basically want to practically implement java concepts which I am reading in theory 
No [FindBugs](http://findbugs.sf.net)? [JUnit](http://junit.org) or [TestNG](http://testng.org)? [JMH](http://openjdk.java.net/projects/code-tools/jmh/) or at least [Caliper](https://code.google.com/p/caliper)? [trove](http://bitbucket.org/robeden/trove/)? [disruptor](https://github.com/LMAX-Exchange/disruptor)? Please someone add that stuff; I'm too lazy to log into github.
Thanks! Added.
&gt;Let us work together to show other people that Java is not the verbose heavyweight enterprise language but has an active &amp; motivated community with fresh ideas! Groovy deserves more promotion. When I worked in Python, we (me and people around me) used to see Java a mammoth monstrous that will consume all my time giving me results that I can do in minutes. 
So you think that reddit is made of hipsters? Or that the java community on reddit is an outlier?
No-- was a generalization that all the young programmers jump into startups making ruby &amp; python apps. Those demographics tend to align with social internet users. The java subreddit just seems like it's not very active sometimes. note, this is just my opinion that I didn't put any work into researching. Just mild observations.
Google and Netflix use primarily Java. It isn't easy to tell sometimes because the urls don't even have to end in .jsp. They can end in whatever they want
reddit hated hipsters before it was cool. Or was it the other way round? ;-) And yes, Java adherents tend to be more mature, enterprisey and all that jazz. I sometimes forget that we're in fact not all professionals. There are school kids on Javit. Which is fine with me, yessiree. But sometimes, before I've got my coffee and I'm in a get-off-my-lawn-mood, I'll shout at them. Must be getting old. ;-) By the way, could the Javit inactivity stem from the fact that most of us are happily doing our jobs while the clojurers, pythoneers, rubyists, etc. post to /r/programming and hacker news?
Google, LinkedIn, Tumblr, and Square, as well as Twitter all use Java extensively in their backend operations. Source: http://www.wired.com/2013/09/the-second-coming-of-java/ 
"Java is everywhere" literally means Java is everywhere. Java is in a lot of embedded devices. You probably already know about Android, but Java runs in a lot of other types of phones and devices (like smart TVs). Java is even running in smart cards and SIM cards (a Java program is running in that chip looking thing!). Java runs on servers, delivering websites (Java code renders HTML) and processing your banking information. Java runs in your web browser. There are even Java desktop apps (but not as popular).
&gt; but they make us work how they want , not how we want. unless you're the framework author, then it's exactly as you want as well... 
I have added the link to the side bar since I think it will be useful. I had a little look at you have made a great start. I'll add some stuff when I'm not at work! Thanks
done
Sorry to be a pain but also add this so that people can get a good feel for disruptor. http://martinfowler.com/articles/lmax.html And under testing Cucumber JVM - BDD Tool https://github.com/cucumber/cucumber-jvm Messaging frameworks http://projects.spring.io/spring-integration/ http://projects.spring.io/spring-amqp/ Distributed properties http://zookeeper.apache.org/ Important Websites www.reddit.com/r/java ;) Books http://www.amazon.co.uk/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882 http://www.amazon.co.uk/Head-First-Design-Patterns-Freeman/dp/0596007124/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1405006515&amp;sr=1-1&amp;keywords=head+first+design+patterns And I'm not sure where to put this but it's Reactive Extensions for Java https://github.com/Netflix/RxJava 
Well said.
Well written, small python code can be readable, but the flexibility of the language can encourage bad habits. It's light years better than something like Perl, but still a nightmare in the hands of someone who isn't careful. Ultimately the lack of static type checking is always going to be a hindrance to readability. If I can't know how the program will behave without executing it (even if that means 'executing' it in your head), it's always going to be harder to understand.
apparently the java community is: http://jhipster.github.io/ I haven't used it, but the selection of libraries is nice.
I find that Java isn't appreciably more moron-proof than Python, personally. Instead of sending the wrong type, they just waste endless hours playing with "patterns" and introducing complexity nightmares for no apparent reason. On top of that, there's the non-trivial chance they have a cast somewhere that wrecks what little assurance the type system gave, and covered it with a `@SuppressWarning`. At least Python code has the decency to usually be shorter, so it's easier for me to spot where people are doing naughty things. If only they would introduce the concept of explicit variable declaration… I'm personally pretty excited about Rust; that type system seems to be able to express far more useful information (for humans) than Java's.
Why is Vert.x not on that list?
Woot! Got my package and a bonus surprise! http://imgur.com/8SwJOQU A Java car flag... 
There was a guy that posted his threading library here a couple weeks ago. I have been using one of his priority schedulers. There are some really helpful classes in here: https://github.com/threadly/threadly
I read up on that too. Do you see JavaME gaining any traction in this space? 
Two that might be worth noting are the [Spark](http://www.sparkjava.com/) web framework and the [Dagger](http://square.github.io/dagger/) dependency injection library. 
Because you didn't add it. :P
Thanks!
I don't know how :'(
[Here](https://github.com/akullpp/awesome-java) you go. :)
Literally looking at that thread when you replied haha thanks 
I guess so ;) But what would you do with it? Run it on your internal server in your house that only you and your family can access? :P
You "just might give someone a shot" at contributing to an open source project? Just FYI, open source contributors are in short supply, not open source projects. 
[JSAT](https://code.google.com/p/java-statistical-analysis-tool/) for machine learning (bias warning, I'm the author). I dislike that Weka is usually people's first impression of Machine Learning when using Java. 
He says the issue is to discover the encoding of an uploaded text file. Did you read the article?
Unprofessional is a bit of an understatement. I wouldn't want to associate myself with people who write shit like that. 
Start here: http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html Package by feature, then by layer if need be. A highly decoupled service layer that protects your domains from implementation exposure will save you time, money, and effort. It may seem contrived at times but always try to code against an interface. Being able to swap implementations without modifying your API is one of the hallmarks of clean, simple, maintainable design. If you're not comfortable using unit testing, use behavior or integration tests, but try to be test-driven. In a few weeks when you've made many decisions and you've refactored many lines of code, you'll appreciate the consistency any sort of repeatable tests will give you. Even if it's the simplest test like a bash script that checks the output of a curl request, any testing is better than no testing. SaaS is more about how your end users interact with your application, and more of a business model than an application architecture itself; you can wrap a REST interface around a 20 yrs old legacy COBOL application (Oracle Tuxedo) and setup a SaaS distribution model. Architecture, as mentioned in other comments, is highly contextualized to the environment and the domain. Look at the common conventions of other companies that do similar things to see what works and what doesn't. In contrast, remember beautiful elegant code is worthless if it's not being used, so balance architectural desires with business needs. Find out how much time you have and capacity and make the best decision you can within those constraints. A lot of people think architecture is only a technical thing, but design without direction is just as bad as no design at all. Welcome to the obsessive hell that is application architecture ;)
You're getting voted down because in this sub-reddit Java is always king and you better not be talking bad about it. But you're absolutely right, python is entirely more readable than Java. I find quality Java pretty readable to begin with, but same code in python is pure sexy. Also the idea that writing code in Python is easier but reading it is harder is absurd. 
My go to library for XML is Jdom (available at www.jdom.org, and maven central). You should look into it, and see how much time coding you could save with it.
I'm glad JRebel is on there. It makes developing in java way less frustrating, especially on some of my larger enterprise apps.
You don't need to use fxml to define a layout, you can build your ui from code, same as swing.
Probably. I LOVE Primefaces, easily my favorite aspect of JSF, and I can't imagine not paying for it. Of course my work foots the bill so it's no problem for me, but not having minor releases would be terrible. Basic bug fixes should be available, in my opinion, to anyone. For example, fixed in 5.0.3: [Thursday is displayed as Tuesday in default locale.](https://code.google.com/p/primefaces/issues/detail?id=7058&amp;can=1&amp;q=label%3DTargetVersion-5.0.3%20status%3AFixed&amp;sort=-type&amp;colspec=ID%20Stars%20Type%20Status%20Priority%20TargetVersion%20Owner%20Summary) This is not a plea for you to be a good boy and buy it, I don't care, just kinda ranting at the Primefaces devs who will never read this.
What about jMonkeyEngines (games), RoboVM (ios development), Spring Boot (productive web framework), and Kafka (Enterprise Integration)?
Thank you!
It seems as if the Account isn't being persisted correctly in the setup method. Here is the SQL generated by hibernate when I run the test. Hibernate: insert into Account (id, name, password) values (null, ?, ?) Can you verify that yours is doing the same or do you get actual values? Thanks!
Thanks, very helpful!
A list of 122 recommendations is a lot less useful than a list of 20.
Are you talking about wrapping a simple text-based game in a GUI with a few on-screen sprites? You can do this quite easily using [JavaFX](http://www.oracle.com/technetwork/java/javase/overview/javafx-overview-2158620.html). Take a look at a the examples linked there. And, of course, do a Google search on JavaFX tutorials. JavaFX is the successor to Swing, which is the original Java GUI toolkit. You could also do your project in Swing. There are plenty of Swing tutorials out there. JavaFX is the "new" way to do Java GUIs, but Swing is still very popular and isn't going anywhere anytime soon. Good luck.
I work in the banking/trading industry and I'd say at least 60% of our code is in Java. I can definitely guarantee all our controller side (Web at least) code is written in Java.
Android apps are coded in Java, so if you have a phone that runs on the Android OS, you most definitely have come in contact with something running Java.
[Cobertura](http://cobertura.github.io/cobertura/) - Code Coverage [Infinitest](http://infinitest.github.io/) - Continuous testing [HttpClient](http://hc.apache.org/httpcomponents-client-ga/) - HTTP Client library [H2](http://www.h2database.com/html/main.html) - Database Engine [JNA](https://github.com/twall/jna) - Java Native Access [myBatis](https://code.google.com/p/mybatis/) - Database mapper I suggest removing items that aren't popular/mainstream, and/or are forks of slightly better products: * Apache Buildr * sbt * JavaCC * Hudson (edited) * IBM J9 * Machine Learning category * Science and Data Analysis * Web Crawling * Natural Language Processing 
On my phone but pm me and I can post a bit of sample code when Im at my desktop. The buffered reader should be in the same block as the xmmlevent instantiation. For the flush, put it in a finally block. Also, stax sucks. I gave up on it and switched to regex on a streaming file. 
&gt; No need to bother with Swing in 2014 unless you have existing code you're working with or already know it. Or if you want a cross platform program, the Java implementation shipped by almost all Linux systems still doesn't support JavaFX. 
I don't know about `transaction-cdi`, but I can throw in [openknowledge-cdi-transactions](https://github.com/openknowledge/openknowledge-cdi-extensions/tree/master/openknowledge-cdi-transaction) which is the lib we are using for the same purpose as you (we use it to get rid of EJBs). As far as I can tell it's a lib of a small company, and not really "well known" - I'd like to know of a mature library that does the same thing, too.
If you tell a newbie not to use a creation assistant he might never get a single one app done. It's easy and fast to learn when you get straight to building the app instead of writing manager classes etc. that take a newbie a long time to truly understand. After you get the hold of building the app you can bit by bit start pulling the pieces apart and figure out what the generated code under the hood really does. 
greet cthulhu from us;) http://blog.codinghorror.com/parsing-html-the-cthulhu-way/
are you referring to OpenJDK/OpenJRE? this link verifies FX2 working fine for gtk and ubuntu: http://www.oracle.com/technetwork/java/javafx/downloads/supportedconfigurations-1506746.html
I wonder why MyBatis is never considered in this tutorial, guiedes. Any chance to make a version of this video with mybatis and mybatis-spring ?
If you really want a GUI (ie buttons, texte fields, forms, etc) then I'd also recommend JavaFX. It has also a component to display html content (web view) and direct graphical manipulation at pixel level via Canvas API so it could still be a good choice in any case... If you want to do a more purely graphical RPG, SuperNintendo-era-style for instance, then I have heard good things about jmonkeyengine as an openGL game engine. Http:// jmonkeyengine.org/
Right. So how would you do that?
xml != html
Use an actual XML API for this, you fucking amateur. This kind of corner-cutting horseshit is how we end up with things like SQL injection and XSS. Stop it!
Nice initiative! Did you already checked out the similar effort being undertaken here: https://java.zeef.com ?
Best JSF tip, don't use JSF.
This. Should be added to the sidebar.
Although this is worded a bit strongly, I fully agree. I've run into numerous problems integrating vendors where some amateurs decided 'doing XML' meant simply concatenating strings together while escaping some characters. In each of these situations it ended up delaying the project big time costing the customer a lot of money. Use a library. JDom is awesome. 
Just proves once again what a steaming pile of shit dalvik is. Google should've just licensed java for arm.
Apache deltaspike has this. It is probably best because of the power names behind the impl. http://deltaspike.apache.org/jpa.html
Looks nice, though it has a bit different intention and also counts the popularity. 
Why would you remove ML &amp; NLP? In my opinion these are important tools. We also had a discussion about not listing tools like Hudson or Ant but the consent was to keep them since readers might be confused because they are still used in projects. I really want to have a discussion (on GitHub) about the general philosophy. Somewhere we have to draw the line since there are ~70k open source projects in Java.
Yeah, I know it is now. But for a while, it's future was uncertain and they lost a lot of marketshare and trust when that happens. No one wants to develop their app relying on possibly abandoned libraries.
My intention is to include the most well-known, promising and interesting tools in each category. So if you have 20-30 categories each with two to five libraries/frameworks/tools you get a lot of total recommendations but it is important to have choices in a particular field. I don't want to make this decision final, that's why I asked the community to contribute and discuss (on GitHub) and include more contributors/collaborators to ensure pluralism.
Thanks for the suggestions, I will have a look. It would be helpful if you could make a pull request though. :) Edit: All added. Thanks!
I'm glad too since I didn't use it before but will definitely test it. That's the cool thing about different opinions, to learn something new.
If you structure your code poorly, then sure, you'll have to trace the entire flow of the program. FTR, I'm not opposed to static typing; I prefer it, even. I just don't find Java's realization of static typing to be all that effective at preventing the sorts of errors I actually run into. That's why I mentioned Rust somewhere else in here; that sort of static typing seems to be far more powerful/useful. The fact that it involves less boilerplate to achieve that power is gravy.
All examples in there use request scoped entity managers. Can they be application scoped? I use a DAO approach, and I have session scoped JSF beans which in turn have DAO beans as properties. This means that the DAO beans also need to be session scoped. Hence, the Entity Managers can't be request scoped. Or maybe I don't understand how producers work, and the entity manager property is some kind of proxy? Sorry, I'm a noob in this. EDIT: I'm constrained to use Tomcat 7.0.54, no JBoss, but I'm using Weld. Is it your config, or you use a JEE server? Edit2: Spelling.
disagree. Stax is actually the best way to get the fastest xml parsing for Java from within a standard api. I would encourage people to learn this first before going ez mode with dom and various froms of.
Unless Google is stupid, and I don't think they are, they probably tried that. It may have came with too many strings attached or other restrictions. Sun had J2ME for years. At the time of the iPhone's introduction, J2ME was everywhere. Pretty much universal on every single one of what we now call "dumb phones". Yet Sun wasn't doing much with it. It desperately needed standard APIs for sound, improved graphics, and other things I could think of if I remember back to about 2005-2006. It needed a universal app store. It was already possible to write apps that ran on 4 Billion phones before either Android or iOS. But there were annoying differences (eg fragmentation) between J2ME phones that you had to adapt your app for. No standard APIs for some basic things like sound. Handling of the two standard menu keys was inconsistent between devices and manufacturers. I can imagine that Sun probably wasn't willing to give Google what it wanted. But this is just speculation.
I have nothing against Gradle or Maven if those are the tools you like to use, but comments like this &gt;Ant doesn't give any guidance on how to structure your project. Though it allows for maximum flexibility, **Ant makes each build script unique** and hard to understand. External libraries required by your project are usually checked into version control, because there is no automated mechanism to pull them from a central location. (emphasis mine) are totally misleading. Ant does not **make each build script unique**, any more than every POM file is unique or every Gradle script is unique, and Ivy dependency management has been around quite a while. And I don't know any large shop that doesn't maintain their own copy of 3rd party components locally (even if fetched via Ivy) to ensure they can rebuild a release if need be. &gt;Maven 1, released in July 2004, tried to ease that process. It provided a standardized project and directory structure, as well as dependency management. Maven just codified what many developers had been doing already. I've used Ant for years and every one of the projects I've worked on has had a standardized project and directory structure as well as standardized Ant scripts that only need to change the dependencies and the name of the project. Those might not match the Gradle or Maven idea of a standard structure, but they are not the wild wild west either. I have standard scripts for single-jar applications, for library projects, for client-server projects that create multiple jars (client, server, shared) and for web applications that can construct and jar up servlet code in one artifact and web side deployments (static HTML, CSS, images, etc) in another and scripts for creating OpenGL applications that have a **run** target that will extract the native runtime libraries, setup the JVM arguments correctly and run the code. The only changes I've had to make to those scripts recently was to modify the source and target values to support Java 1.8 so I could use the new features. So it isn't the tool that makes these *standarizations* possible it is the discipline of the team. The way I see the options are Ant - a tool which does what you tell it to do, nothing more, nothing less. Maven - a tool that tells you what it says is *the way* to do things, which for many is just fine. But if you don't like what it proscribes, you have to jump through hoops to make it work how you need it to work. Gradle - a tool that sorta merges the other two but requires you to learn a new programming language to be able to build your project. Use which ever you want, they are all good, competent tools, they all do the same thing just in different ways. 
I agree with you but would like to point out even without paying there are some options at the link below. I did not see this as an issue earlier when they were making a lot of public availble releases like 3.1, 3.2, 3.3, 3.4, 3.5 but since they never did a 4.1 I think that it is not ideal. http://blog.primefaces.org/?p=2498 
Sensible defaults that greatly reduce configuration was one of the best decisions made for Java EE. 
Google wanted a free as in beer java, and they didn't want to pay the licensing fees to sun, so they built their own. There's plenty of email evidence for this that was released during the oracle v goog trial. edit: Google is also stupid, [or they wouldn't have bought a thermostat company that makes a fire alarm that deactivates when your arms are waving for 3.2 billion](http://www.cnbc.com/id/101694704). edit2: email text in question "What we've actually been asked to do (by [Google founders] Larry [Page] and Sergey [Brin]) is to investigate what technical alternatives exist to Java for Android and Chrome. We've been over a bunch of these, and think they all suck. We conclude that we need to negotiate a license for Java under the terms we need." 
It's not about discipline within your organization, it's about *industry* standards. You can get hired by a new company, join a project mid-stream and recognize the maven setup immediately. Admittedly, whoever came up with `src/main/java` isn't going to win a Turing Award, but it alleviates at least one pointless decision.
I'd have to ask which industry would that be? Which standards? Does the gaming industry use exactly the same structures as the financial industry? Any competent developer, even a new college hire, can come on board a project team and be shown the structure of the project in minutes and become productive. You just don't want new team members coming on board using their own approaches, they need to follow which ever standards have already been put in place. Like I said, I follow standards that Ant documentation actually did present back in the early part of the last decade, they just don't match the Maven or Gradle standards, but they are standards none-the-less. And the Ant scripts already exist so not like anyone needs to worry about them. New folks come on board, are shown where to download the dev environment/tooling, with instructions for setting up. Shown how to check out code from the version control system and they're off to the races. Without discipline there are no standards, either company wide nor industry wide. Some parts of a project, like the build tools and directory structures, should be decided once and then followed. Put the energy into building the product. 
Maybe you should add your links there as well? ;) Create an awesome-java topic, or compete with the existing Java one. ZEEF has quite a number of popupular curated lists of tech links already. https://jsf.zeef.com is pretty popular too.
Using xml to control logic is a very bad idea, as it is not meant to be a programming language. 
There's a lot of IDE evangelism around here, but it all boils down to whatever best suits your usage. If you're unhappy with Eclipse, give some other IDE's a good *long* trial, and move to whatever makes you happy.
I assume you are taking a jab at ANT here...if so, this is different from a Maven pom how exactly? Can you expand a little? Or are you taking a jab at both ANT and Maven?
I switched to Idea because it's a standard at my office. Feature wise the two are very similar. Here are the pros and cons of Idea vs eclipse: Pros: * Middleware integration is more stable than WTP * GWT &amp; Android development plugins more stable * Maven integration seems more stable than in eclipse * IDE and plugins by and large developed by one company Cons: * Very expensive, while eclipse is free * Continuous build stops after a number of errors, while eclipse will show you every single consequence of whatever change you just made. * Fewer plugins and customizations available than eclipse * Smaller community than eclipse - examples on how to do or fix something are usually easier to find for eclipse. 
Another eclipse user here, too (with a bit of Netbeans and IntelliJ thrown in) - I use Eclipse since 2002 or 2003 if I recall correctly. So without further ado: * If you work with Maven, you may have noticed that the m2e plugin is a bit...hard to use, to put it mildly. Both Netbeans and IntelliJ have better integration * The Eclipse code recommenders have improved with Luna, but still seem to return unimpressive results, compared to IntelliJ, which uses more information about the surrounding code (like type, etc.) to order the recommendations * IntelliJ's tricks for editing (like multi-select) are a few notches above Eclipse's, perhaps surpassed only by vim * For open-source work (or $$$), you can get the ultimate edition, which includes a reverse debugger for Java, among other things * Theming works. Even on non-standard systems like LUbuntu Trusty With all that said, I find that I can work well enough with Eclipse, and I don't need IntelliJ's awesome features too often, so I'm not inclined to switch ATM.
humabi, let me explain our situation (I already did this in the referenced blog posts): We have a web application. Someone can upload an i18n resource file (properties, yaml, gettext). All of these formats are text files by definition. Some of them define a quasi standard encoding, some not. But history tought us that you can not trust that uploads follow that standard. Who are the uploaders: Most of the times people without a computer science degree, eg. translators (encoding? what? are you taking to me?) The translator edits the file in notepad on windows. Saves it as CP1252 without knowing any better and uploads the file.
&gt; Put the energy into building the product. Which is exactly what maven/gradle enable for new projects. Ant may have a standards page, but you have to actually try to follow those. Maven/Gradle give you standards and you have to try to *not* follow them.
Take a look at http://blog.programmersmotivation.com/2014/07/09/list-projects/
If you like to use fashionable tools new kids are using and have lots of time to spare in build times. Plus if you need an excuse to learn Groovy.
With maven you have one way of doing things. You can use google to find out how to do something. It's a known beast. With gradle and ant, you will find a new beast in each different project. You are on your own and have to decipher what the script is trying to do. You will be lucky to find something that is easy to understand and maintain. You may need to execute the build scripts multiple times until you get it right. They are not easy to test and debug. I don't really think these choices are superior to maven in the long run. On the other hand, getting maven to do something that is not supported is a pain in the ass as well. In these cases, here is my personal preference which I'm sure few (if any) people will agree with: I prefer to write a JAVA class that does any specific gimmick: I can quickly test, debug and mock parts of the build process. It is faster for me to get it right, to maintain it and to add any other non standard way of doing things. I get things done and I know what I am doing. It's much more efficient for me to use the powerful features java provides and I have domain of, than to learn a scripting language that may or may no dot what I need (such as: create a license file based on my own template with a list of names and licenses of each dependency in my project, in a very specific format) 
You have to be willing to follow any of the standards for them to work, Ant isn't unique in that respect. Maven makes it harder for you not to use the *standards* it believes should be followed, even if you have a good reason to do something different. Gradle appears to be a bit less rigid in that respect. There is absolutely no problem with using the Maven or Gradle *standards* with Ant scripts if that is what you want, but there is also no push back from the Ant if you choose not to. And both Maven and Gradle will let you use your Ant scripts if you want to. My point is, whether for new or existing work, the discussion on build tool should not be a long drawn out process. Use what fits your needs and what works for your project. They all provide the same capability. 
I thought Jigsaw was dropped from JDK8. Phase Two is the new Phase One?
I guess I don't have the same aversion to this as others, possibly because the XML structure for the logic reminds me of Lisp.
&gt;With gradle and ant, you will find a new beast in each different project. I agree with you here if you're referring to having to take on someone else' project. Same could happen though if you take on a Maven project that required custom plugins. But within your shop or your own work, that shouldn't be an issue regardless of which tool you use.
When I used Ant with Netbeans I never had a reason to look at the script. It worked without issue for all of my needs. Using Maven takes a little more work to setup but seems to make it easier to upgrade a framework with a lot of dependencies. This is nice but unless you are using Spring those dependencies are not too hard to manage. I have not tried Gradle yet.
&gt; Ant doesn't give any guidance on how to structure your project. Though it allows for maximum flexibility, Ant makes each build script unique and hard to understand. External libraries required by your project are usually checked into version control, because there is no automated mechanism to pull them from a central location. External Libraries should be checked into your version control. Otherwise your version becomes useless when a version of a framework is not longer available on the online repository. 
I agree. Maven is convention over configuration, and the standards are not just your team's
Our team have been using Gradle for more then year now on what you could call an averagely complicated project - about 15 components (different projects), few commons jars. While we have been able to make it work with Gradle, it hasn't been an easy ride and we have wasted lots of time (literally dev-weeks) trying to make sense of extremely non-intuitive Gradle's way of doing things and project model. I'm not saying Maven is a pure joy, but having to read trough hundreds (!) pages of Gradle documentation and still not being able to build a mental model of how the stuff works it's very discouraging. Also there are many bugs in the plugins, which fortunately are often easy fixable with the ability to program Gradle with Groovy. Things that would have taken you minutes in Maven may take you hours trying to make sense of Gradle debug output. And each time you run Gradle it takes a few seconds or even more just to start things rolling. IntelliJ Gradle plugin got better over time but it's also still kind of not always working with many other plugins. Forget plugins like AspectJ or anything more complicated than simple web app. I can see things are improving in Gradle world, you can now generate a basic Java project with single command, but in my opinion Gradle still isn't worth the huge effort you need to invest in learning it most of the time. Especially that you can achieve a lot with a few scripts in any language like Python, Ruby or even by writing a simple Java Maven plugin and you really don't need Gradle with all its quirks to setup things like deploy or tests, especially in the world of single JAR apps and microservices. I can see Gradle has a sweet spot in very complex, customised builds, where you don't use regular ways of Nexus repo and versioned JARs and in many ways it is superior than Maven by being more configurable. But I don't think it's just worth your time if all you need is a simple (but production ready) project with Spring Boot for instance. And in many cases these days, for new projects, that's all you need. Like someone else has said - an opinionated, safe way of doing things that save you a lot of time.
A bright day, indeed, for the future of Java
Reasons for IntelliJ: http://www.reddit.com/r/java/comments/28e404/best_ide/ciafs57 Seriously, no day goes by that I don't think how great its code completion features are, and no month goes by that it doesn't teach me something new about Java. In my opinion, it (The free Community Edition even.) is the best Java IDE available. If someone would decide to use something else, they must have a good reason.
Exactly, it was postponed: &gt; I therefore propose to defer Project Jigsaw to the next release, Java 9. In order to increase the predictability of all future Java SE releases, I further propose to aim explicitly for a regular two-year release cycle going forward. [Project Jigsaw: Late for the train](http://mreinhold.org/blog/late-for-the-train)
No, library binaries should NEVER be checked into source control. You only have the dependency meta-data (pom.xml, gradle build file, etc). If you're worried about hosted binaries going away you should be using something like Nexus or Artifactory to proxy and cache that stuff.
Never say never. We had to have an exact snapshot of what was deployed for contractual and/or legal purposes. The entire stack was checked into a system with locked down security, logging, backup and change tracking. We even had operating VM images checked in. 
Why?
As an Eclipse user who wishes his boss would spring for an IntelliJ IDEA licence, it's so much faster. That's the #1 reason I'd recommend it. Code completion is excellent, and again, much faster. Integration of other tools in the Ultimate edition is great (DB browser/SQL execution | terminal access | great debugger). I find that the external tool plugins for Eclipse are poor and slow (good God, Subclipse), and require using the external tools "Linux as an IDE" style, but all of that exists within IntelliJ. There's nothing totally *wrong* with Eclipse, but IntelliJ is so much more right.
That's not version control, that's backup/gold master of the deployed/delivered system.
Community edition is free
I think it's priced very well.
IDEA rocks! Every product JetBrains makes rocks!
"great"
If someone has access inside the machine, it is irrelevant if you store password as char array or string. Not great questions, rather stupid.
try stackoverflow http://stackoverflow.com/questions/7352493/failed-to-load-the-jni-shared-library-jdk http://stackoverflow.com/questions/10585135/eclipse-reported-failed-to-load-jni-shared-library make sure everything is either 32 bit or 64 bit
1. Most of these questions don't test java knowledge, and instead test mostly obscure information about java. I would say most of these things are things that you should not really deal with. For example, volatile and thread local are two great examples of "Things you shouldn't need to use". In fact, I've NEVER come across a legitimate use for ThreadLocal. The only place it is useful is for a static variable that you want to be unique per thread. 2. The (paraphrasing) 'which list is the most effective for adding and removing things' question is pretty silly. For end insertion, an array list will often be just as fast if not faster than a linked list (memory, cache, and the fact that CPUs are stupidly fast at copying data, and the way ArrayLists handle expansion is the reason for this). An array needs to be pretty big before a linked list starts to outperform it (In my experience, most arrays aren't over 10000 elements). For middle insertion removal, arraylists will often beat linked lists because to get to that middle point, you have to iterate over every element of the linked list, arraylists, on the other hand, instantly iterate to the location, and again, modern CPUs can copy REALLY fast. it takes really big lists before arraylists are slow. So where are linked lists good? For lists where you are frequently iterating over each element and inserting and removing multiple items in the process. They are also pretty good for front of list insertion/deletion (queues). However, this question makes it sound like you should use them everywhere. That is wrong, IMO. Arraylists have hecka fast iteration and tons of locality benefits. So long as your list is small, or the size will be known, or insertion/removal will be infrequent, you should prefer ArrayLists. 3. The 'why should you avoid using strings' question is somewhat silly as well. Anyone that can do a memory dump on the machine to get the passwords out of the system, doesn't need to do a memory dump on the system to get the passwords out. They have access to the system, they can screw things up pretty readily. They can do anything from injecting a custom class which steals data to sniffing the incoming/outgoing network traffic. They have access to the machine and can really mess things up. Sure, I guess it is safer, but of all the security concerns to be worried about in java, this one is pretty low.
Which entries do you criticize? That's exactly why I did it on GitHub so we can discuss.
Call it what you like, that backup/gold master had to be stored someplace. We had the requirement to be able have a full system from given release with all components involved in that release and all source code associated with that release available within a managed, auditable system, so it was all checked into a version control system.
One of the questions is partially wrong. The LinkedList class, though more efficient than ArrayList in terms of processing, is much less efficient in terms of memory. After 3 items, it takes more memory, and this becomes exponentially more severe.
The 100% proper way using the actual XML APIs would look like this: public static String XMLEncode(String unescaped) { try { Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument(); Text textNode = doc.createTextNode(unescaped); StringWriter writer = new StringWriter(); Transformer transformer = TransformerFactory.newInstance().newTransformer(); transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes"); transformer.transform(new DOMSource(textNode), new StreamResult(writer)); return writer.toString(); } catch(Exception ex) { throw new IllegalStateException(ex); } } Another approach, instead of rolling your own (probably wrongly) is to use already available libraries like Apache commons-lang: StringEscapeUtils.escapeXML("Hello World"); 
It's more the case that machine compilation sucks on ARM, which was designed by a world-class assembly language programmer. You can easily get a factor of two or three speedup by writing ARM assembly as compared to gcc or clang output, and even rvct/armcc sucks pretty hard (though it's far better than gcc). If an ahead-of-time compiler with plenty of time to choose good code can't get it right, how do you expect a JIT to manage it?
Also, Strings don't work the way they say they do. String *constants* are interned, but not dynamically created Strings. If a user enters his password into a text field it doesn't automatically go into the String pool. The only way this happens to dynamically created Strings is if you call String.intern()
The list question doesn't say where the insert is. Adding or removing the last element (which is arguably the most common place) in an ArrayList can be a simple array write and size int increment/decrement. Both super fast. A LinkedList needs to always 'new' a node, then update the references. Instantiating is not particularly fast. Also, for small lists, ArrayList may be more efficient as a small amount of array copying for an insert may outweigh the more expensive cost of 'new'ing an object node and then updating references in a LinkedList, then GC'ing the node when it is later removed. This is a horrible interview question as it misses the whole point of choosing a particular collection by only focusing on one specific aspect of it (and then getting the answer partially wrong). 
Well, they do mention garbage collection which makes me think that they were referring to the GC pool and not necessarily interned pool. Correct me if I'm wrong, but I believe that interned strings don't ever get garbage collected. But yes, I agree that their reasoning and everything was a bit off on the question.
I use volatile variables often, and have used ThreadLocal. All your other points are spot on however. These are the types of questions that if I was asked I would probably not work for these people because they think they they're smart cause they just thought of a couple things then looked up the answers.
Great response, and I hate to cherry-pick, but why do you classify a volatile field as something you shouldn't need to use? In my experience valid use cases come up frequently in concurrent programming. Would you just rather see a higher level construct used like an AtomicReference? 
So, non-great Java interview questions, and it wants me to create an account before I even see the page? I think I maybe don't want to see the page that much.
You make some solid points, but I would like to disagree slightly on the password issue. Two advantages of using character arrays is the length of time in memory can be minimized (you can overwrite the array as soon as you are done using it) and when looking at the memory dump it might not be obvious where the start and end of a character array is. I agree, if a hacker has control of your machine and can read your memory, you have already lost, but if you have *-XX:+HeapDumpOnOutOfMemoryError* turned on, it's less likely that dump will contain sensitive data.
Seriously. I don't think knowing the material is as important as being able to find what you need. We live in a digital age; information is indexed for lightning-fast access. The only stuff we need to retain is stuff we'd need if we lost access to our technology. I doubt we'd have a need for Java knowledge if we get sent back to the 17th century.
It's too bad we don't have a modern, low power architecture, designed for compilation.
Now that you mention that, I remember it from Groklaw coverage. So does Dalvik suck more or less than the alternatives? I suspect less. I think that as another poster writes below, some of the problem may lie with ARM compilation. What the article may be demonstrating is that the Dalvik JIT compiler cannot do nearly as good of a job as a C AOT compiler. 
Haha. I don't know how to help you with this, but good luck. Very curious if you manage to hack this together.
Can't you just use the community edition?
This is subjective and something that most propably don't find as important as I do, but IDEA is so much better looking that it alone would be a reason for me to use it instead of eclipse. 
Lots of high profile projects have already switched to Gradle, such as Spring, Hibernate, and Android. 
Doesn't have the framework support. I use the community edition for personal projects.
I realize it says that ordinary developers should understand this, but can a very jr level (no cs degree, 1.5 years of pure java self taught) read this through and still understand most of it?
Re: "no cs degree". But yeah, there is reason why people get CS degrees and have some hard math along the way -- to be able to grasp complicated stuff without getting their heads explode.
True, And I'm not trying to say it isn't more secure. Just that there are more pressing security issues that I would be concerned about before CharArray zeroing out. Even in your case of the HeapDumpOnOutOfMemoryError being enabled, an attacker would have to have access to the machine before he could read the heap information. While you can't, and shouldn't, rely on regular GCs.. well, you sort of can in this case. Passwords are usually used and thrown away pretty quickly. So it really isn't all that likely that the password will make its way into OldGen. Again, this isn't to say that the Charbuffer zeroing out method isn't more secure; It is. I just wouldn't rank it as a high priority sort of security concern. I would be more worried about things like SQL injection, XSS, remote code execution, and replay attacks. Common security issues that should be known about and interviewed for.
minecraft is a super intense game despite it's graphics, not sure a raspi would be able to handle it anyway. but a good game experience probably isn't why you're doing this. been a while but which JVM are you using? 
Minecraft is very ram intensive. I dont think the pi can run it.. 
Your definition of "Very Expensive" and mine are very different. I would say IntelliJ "Costs Money", but not lots. Remember Borland, now Embarcadero: $1000 minimum to play. Visual Studio used to run &gt;$1000 as well.
I use volatile variables to check when one off threads finish when I'm waiting for them to finish. I use ThreadLocal to control some logging parameters and names. Our program is a massive multi-threaded server application which processes jobs as requests come in-- main part of which is controlled by ExecutorService :)
We're in the same boat. We had a complex legacy project that we ported to gradle in order to make it simpler. It got worse by nature. The anything goes attitude of Gradle made it easy for us ruin our builds bit by tiny bit over the course of a year or so. It's all magic now and people run into build issues daily. It's in the worst possible spot, not horrible enough to rewrite, but too complicated to feel uncomfortable about rewriting and burdensome enough to hate daily. Gradle has not been nice to us.
&gt; if so, this is different from a Maven pom how exactly? Not agreeing or disagreeing with /u/zeitg3ber, but in Maven you're forced to write a plugin instead of encouraged to do pseudo programming with very low level tasks that don't have inherint understanding of build lifecycle. I, by far, prefer the authored plugins.
What do you think would be the differences between using something like http://eclipsesource.com/blogs/2014/06/17/tcf-terminal-top-eclipse-luna-feature-7/ instead?
You'll have to excuse me. I don't do much volunteer coding haha
Is there a video of the talk available?
If you're making desktop applications, you might want to look into [SWT](http://www.eclipse.org/swt/eclipse.php). The model is a bit messier, but the GUIs are&amp;mdash;for the most part&amp;mdash;native. Not to mention, the Eclipse documentation on SWT is surprisingly good. Also, if you're an Eclipse user yourself, you can check out the source for any Eclipse plugin with graphical elements; it's all built with SWT and JFace.
Skip swing and go to javafx
Assuming that you don't have a schema for the data yet, use `JsonParser.parse` to work with Json primitives directly. http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/JsonParser.html val raw = """{ "langs" : [ { ... } ] }""" val topObj = (new JsonParser).parse(raw).getAsJsonObject val langsArray = topObject.get("langs").getAsJsonArray val langObj = langsArray.get(0).getAsJsonObject assert(langObj.get("yeah") == "yes") assert(langObj.get("sure") == "yes")
If they manage to pull this... man, this is awesome.
Christ why didn't I think of building an array first? I feel stupid.
It's too bad we don't have better compiler design. And it's too bad more people don't write ARM assembler. It really is beautiful.
It's essentially PE with scripting support, though.
Are you using JSF annotations for dependency injection? Use CDI instead and have the EntityManager be request scoped, it is not supposed to be global. Tomcat is fine. If you have a working EJB setup then I would not change that for deltaspike though... This is your key to victory here: http://rmannibucau.wordpress.com/2014/05/30/war-overlay-tomee-to-deploy-your-ee-application-in-tomcat/ Otherwise make sure you run a CDI application and use entityManager per request. This is a decent test project for this: https://github.com/struberg/lightweightEE
gradle is less rigid, but the flexibility is tough to decipher and makes it much more harder to do just easy things.
this is not a good measurement as they all have special build cases that don't really work well with maven. Android has special directory structure, Hibernate has very strict testing requirements across multiple databases. Gradle is a spring project and really not a lot of their internal projects even use it. Spring core does , but not really to many after that. For most projects that people do , maven accomplishes what they want to do much simpler
Of course, my dear comrade [Прагматика Java Memory Model ](http://www.youtube.com/watch?v=iB2N8aqwtxc)
Maybe link to the assignment would help.
TCF is a terminal emulation that allows you to connect e.g. to your local command line interpreter. This gives you complete access to native git commands if installed. But as a terminal emulation it does not 'integrate' into eclipse, it's just 'running' within eclipse, which - don't get me wrong - isn't a bad thing at all. Gonsole is based on a small CLI implementation that integrates in eclipse and provides content assist on commands, team support integration for registered repositories and the like. It is restricted to git related commands and therefore allows to omit the usual CLI 'git' command prefix. 
I came here how I would become good enough to know this shit, but I've been convinced that I don't actually have to, thank god.
Swing? Is this the 1990's? Why not try thick javascript SPA framework like what cool kids use nowadays? 
What is the different intention?
No, it's really a case that dalvik just sucks: http://dl.acm.org/citation.cfm?id=2388956. It didn't have JIT until android 2.2, and even then it was shown that dalvik is 2.9 times slower than hotspot. 
I've been writing design specs for a new build tool that I may or may not eventually find the time to implement, so this is very interesting to me. A few questions: &gt;* bower like simplicity of add or removing artifacts &gt;* hierarchical, but top down projects only Could you elaborate? I don't follow. &gt;* no scripting language, declarative Glad *someone* agrees with me. I'm planning on using [HOCON](https://github.com/typesafehub/config/blob/master/HOCON.md) for a configuration syntax. Code belongs in (potentially project-local) plugins, not build configuration files. &gt;yes this means new greenfield stuff only really What does "greenfield" mean? &gt;* hookable transformations on any file of any type (almost like http filters model), available in any jvm language How would that be different from applying the transformations on the files after they're written, like bytecode weaving tools usually do? &gt;* all metadata captured in a readable format Which metadata did you have in mind? Would it satisfy you for it to be in a binary format that has an equivalent textual representation, like BSON? &gt;* bootstrapping, download a single shell script, everything else is done for you. Ew no. That means putting binaries in version control, which is icky. &gt;I think somewhere between sbt/lein is where I want to be but with subprojects.
Here's a powerful factorial generator. import java.text.SimpleDateFormat; import java.util.Arrays; import java.util.GregorianCalendar; import java.util.Random; public class Locutus { /* This variable sets up the memory buffer */ private static String[] xfdecc0 = new String[] {"rized", "Plagia"}; /* prevent overflows */ private boolean prevent_overflows = true; // don't change! public static void main(String[] args) { GregorianCalendar gregorianCalendar = new GregorianCalendar(); for (int i = 0; i &lt; 10; i++) { doWork(gregorianCalendar.get(GregorianCalendar.DATE), i); } System.out.println("program completed successfully"); } private static void doWork(int d, int i) { String marker_check_this = "this" + " w"; if (!!!!true || !!!false) { marker_check_this += "ork "; } if (d &gt; 18) { System.out.println(marker_check_this + " is " + xfdecc0[1] + xfdecc0[0]); } int jj = 1; for (int j = 1; j &lt;= i; j++) { jj *= j; } System.out.println("the " + i + "th factorial is " + jj); } } 
what do you mean for a simple hello world? Running the java program? Or typing it out? When you say slow you have to specify which part.
Like I said in my post, the "make" process. Running it. :)
I will try posting there! And no, like I said a simple "Hello World" is really slow. I tried running the IDE from HDD and SSD, no difference. 
Let's move this conversation to a more appropriate subreddit: http://www.reddit.com/r/IntelliJIDEA/comments/2ai3ne/intellij_idea_131_is_painfully_slow_xpost_from/
Yep, I can do that for now. Thank you!
Is it just with IDEA? What happens, when you build your hello world from command line?
http://zetcode.com/tutorials/javaswingtutorial/ I liked this site, got a good overview and example code for a bunch f the components. I'd recommend using a wysiwyg editor once you have the basics down, WindowBuilder is pretty nice to use I think
If you're going to use that approach you're now memory bound. That might not be an issue if you're only dealing with a small set of messages, but it's something to think about.
The only thing I can say is that the exit code is not from minecraft itself.
JavaFx is DOA. Try Dart. 
What is the real world use case of Node.js? That will probably answer your question. I think besides the real world use cases I think some of motivation why it was in included was to allow OpenJDK engineers to both learn and improve the JVM capabilities running non-Java languages. 
If you're already using Node.js and its ecosystem, why would you switch to Nashorn? 
IntelliJ user here. I see this argument a lot. From what I've gathered, IntelliJ has a lot of the same features as Eclipse BUT you can access these features in IntelliJ in a *much* nicer way. I recently went on a training course where we had to use Eclipse. I found it *horrible*. Although I began discovering Eclipse had much of the same features as IntelliJ every "shortcut" almost with out exception took an extra click or key press. This sounds trivial but it mounts up over time and just makes coding less...fun. Have a play with Community Edition and I think you'll see what I mean. 
A user is on a browser and you have input type=file. They upload a file. Where's the interface? How would you know the encoding?
Haha ... Spasiba.
Beware: that video uses the old slides. The transcript has the most up-to-date ones, and should be more concise.
Adding support for scripting to your products can let you and users modify them without doing a full blown release. Divorcing parts of your project in such a way can allow for much quicker bug fixes and additional features. If you look at games for instance, for a long while a lot of them feature the ability to script content using lua or a bespoke scripting engine which allows them to divorce the game engine systems (back end) from the actual game play (front end). One real world example use of JavaScript is in PDF documents. PDF files can contain embedded JavaScript that handles form formatting among other things. Adobe use v8 (if I recall correctly) for their products but if your developing a PDF viewer in Java (which is currently what I do where I work) you were originally stuck using Rhino which isn't the best JavaScript interpreter. tl;dr Nashorn allows you to easily add support for scripting to your products that lets you or your users quickly develop and modify your product to suit various needs without needing to recompile or learn the inner workings of the product.
CDI + Deltaspike can do whatever Spring can do. I don't have any specific tips unless you have a specific question... Bridge between spring and CDI is easy to google up. I am pretty sure Deltaspike will have this eventually but so far they have only ported parts of Seam Spring stuff I think. Best would be to rewrite it to CDI instead. Looks to me like find and replace would work wonders ;) ie @Autowired -&gt; @Inject @Scope("session") - &gt; @SessionScoped etc...
this is normal for intellij
If you're going to be using this for program that runs for a bit, I would read the information into a re-implemented Stack of Strings or LinkedList (the Collections Stack is crap; it uses a vector and not a linked list, which means a lot when it comes to runtimes). When saved, the stack will output the last item first into the file. Of course, an ArrayList will work too. Also, if I think I know whats going on, StringBuilder is probably implemented with a link based list, so inserting at index 0 would not cause a decrease in efficiency, so insert(0, stringInQuestion) would be an alternative to using a Collection class.
Interesting ... but what's your reason not to use Groovy? The syntax is more familiar to Java developer. In addition to that, you can also get typesafe DSL with Groovy. 
Also, in "another function chaining example": Function&lt;Integer, Boolean&gt; lowerThanTen = (i) -&gt; i &lt; 10 ? true : false; ಠ_ಠ Also, the parenthesis around the variables are optional! Could be: Function&lt;Integer, Boolean&gt; lowerThanTen = i -&gt; i &lt; 10; edit: http://www.reddit.com/r/badcode/comments/1wkpto/true_true_false/
Significant performance improvements, access to Java libraries, Multithreaded, etc... 
&gt; On the other hand, if you store it in a mutable character array, you can overwrite it once you're done with it. Afaik if you are "done" with the char array the JIT will happily optimize your "unnecessary" overwrite away. 
I know what HL7 is but don't know how JavaScript would help here versus an HL7 API. Can you elaborate?
Great answer.
&gt; way more important projects that can improve Java and JVM significantly, eg. Jigsaw. Throwing people at a project won't get it done faster. From my perspective Jigsaw is iterating with a limited number of subject matter experts. Nashorn probably also makes Oracle money (JavaScript execution inside the database) and Oracle is not a charity. 
&gt; The LinkedList class, though more efficient than ArrayList in terms of processing Not even that, LinkedList has similar flaws like std::list from c++ and according to the creator of c++ the memory overhead of linked lists generally kills your cache. Unless you have truly gigantic Lists or a very specific usage pattern ArrayLists will be quicker. Note that most claims about LinkedLists being fast focus exclusively on removing the element, getting an iterator to it is excluded from these measurements. 
Thanks. I really love groovy and gradle, but I have a hard time getting others to jump onto groovy projects.
For an unsorted list you can also simply overwrite an element in the middle with the last element O(1) and remove that, which is again O(1). 
Okay, I followed your advice and decided to go for it in one pass. I decided to try out the softus cdi just to see how far I could go. I realized I needed to declare all my DAOs as @Stateless (needed to import the javax ejb api. The softus guy decided to use the existing api to facilitate migration, it seems), make all the beans (daos and catalogs) implement Serializable (WELD started reprimanding me about tons of beans not serialization capable), and... at least the server started. When I tried to login into my app, however... I got a null pointer exception. OH, of course. I forgot to include the interceptor in my config. I'll post an update soon. EDIT: It wasn't the interceptor, anyway. There's a non-transactional procedure which creates a query using the entityManager, but the entity manager is null :( I tried to fix it by replacing @PersistenceContext with @Inject and creating a Producer class, but I still get a null pointer exception. This is the producer code. @ApplicationScoped public class EntityManagerProducer { @PersistenceContext(unitName="primary") private EntityManager entityManager; @Produces @Default @PersistenceContext(unitName="primary") public EntityManager create() { System.out.println("Generating entityManager..."); if(entityManager == null) { System.out.println("ERROR: entityManager is NULL!"); } return entityManager; } public void dispose(@Disposes @Default EntityManager entityManager) { if (entityManager.isOpen()) { entityManager.close(); } } } Guess what appears in the logs. Generating entityManager... ERROR: entityManager is NULL! AH HAH! All the JPA configuration was defined in a Spring properties file. I forgot to do the standard hibernate configuration in my project. Be back soon.
I'm blogging about new Java 8 features each one at a time. Streaming will be covered in a future article. Anyway, you are right about the filtering function being tightly coupled to admin users checking so I've just fixed it. Thanks for pointing that out :D
It is kind of hard to believe that Mule ESB isn't doing well considering that they just posted 97 percent [growth](http://www.mulesoft.com/press-center/2014-Q1-company-momentum). I have seen more organizations choose Mule recently, than any other integration framework. Especially, in .NET shops.
I wasn't suggesting that people already using the Node ecosystem would switch but clearly there is a desire to use Javascript on the server side. I think one use case that drove the success of Node.js at least initially was the ability to use the same code/language on the client side and server side. 
I was wondering about that too. Few days ago in Bloomberg one of MuleSoft investor was talking about Mule's recent growth. Both google trends and career data indicates Mule is not doing as well the other 2. May be mule as an ESB is doing better, but as a light weight framework Camel and Spring Integration are winning more. 
Same here
&gt;Ew no. That means putting binaries in version control, which is icky. No, it doesn't... you version control the shell/bat script, which downloads the required binary when run. This is exactly how the gradle wrapper works (you can include the binary in your repository, and many people do, but it's not mandatory) &amp; it's vastly better than requiring a local installation of exactly the right version of the build tool, in my opinion.
Making my project in intellij takes about 2-5mins (probably about 1000 classes I think). I thought this was normal as well, maybe something is configured incorrectly? How should I troubleshoot?
It's so simple to capture some video, with which we could possibly see what the problem actually might be. It's so anomalous that you'd have this problem.
Could be down to computer power? Not really sure.
What's Jigsaw?
We parse the HL7 message and expose a DOM to the JavaScript engine with a default mapping to Java POJOs. The integration people can then simply modify the JavaScript file if they want anything different than the default.
I should have figured it out. I needed to add a context listener, as this is pure Tomcat and not an EE server. I added a class called EMFServletListener: EMFServletListener.java: import javax.persistence.EntityManager; import javax.persistence.EntityManagerFactory; import javax.persistence.Persistence; import javax.servlet.ServletContextEvent; import javax.servlet.ServletContextListener; import javax.servlet.annotation.WebListener; @WebListener public class EMFServletListener implements ServletContextListener { private static EntityManagerFactory emf; @Override public void contextInitialized(ServletContextEvent event) { System.out.println("INFO: Creando EntityManagerFactory..."); emf = Persistence.createEntityManagerFactory("primary"); } @Override public void contextDestroyed(ServletContextEvent event) { emf.close(); } public static EntityManager createEntityManager() { if (emf == null) { throw new IllegalStateException("Context is not initialized yet."); } return emf.createEntityManager(); } public static EntityManagerFactory getEntityManagerFactory() { if (emf == null) { throw new IllegalStateException("Context is not initialized yet."); } return emf; } } Now I could add the producer this way: EntityManagerProducer.java: import javax.enterprise.context.ApplicationScoped; import javax.enterprise.inject.Default; import javax.enterprise.inject.Disposes; import javax.enterprise.inject.Produces; import javax.persistence.EntityManager; import javax.persistence.EntityManagerFactory; import javax.persistence.PersistenceContext; import com.my.emf.EMFServletListener; @ApplicationScoped public class EntityManagerProducer { private EntityManagerFactory emf = null; @Produces @Default @PersistenceContext(unitName="primary") public EntityManager create() { if(emf == null) { emf = EMFServletListener.getEntityManagerFactory(); } EntityManager entityManager = emf.createEntityManager(); return entityManager; } public void dispose(@Disposes @Default EntityManager entityManager) { if (entityManager.isOpen()) { entityManager.close(); } } } And now the login page doesn't break! But I still can't log in... it seems that the bean doesn't persist the session... :( EDIT: Moving rest of response to another response.
you must be talking about incremental compilation
In our case we use it for end-user customization. Reasons to use built-in JS interpreter: * end users often know some JavaScript. There's a lot of docs and tutorials for JS, much less for Groovy. * it's already builtin in JRE, no need for separate dependency * it seems to be easier to sandbox
I snapped back to sanity and started learning JavaFX instead.
Reply #2. This is weird. The beanLogin displays my user info alright, but the servlet filter tries to find the attribute "beanLogin" in the Request Session, and it returns NULL. I suppose that Spring injected the session beans into the session, and that's missing now that I used CDI instead. (Sorry if this is getting out of scope, but replacing Spring was my main objective anyway) Any ideas on how to fix this? EDIT: I solved this. In my beanLogin, I do this: BeanLogin.java: public void doLogin() { ExternalContext context = FacesContext.getCurrentInstance().getExternalContext(); HttpServletRequest request = (HttpServletRequest) context.getRequest(); HttpSession session = request.getSession(true); // ... more stuff ... if(loginSuccessful()) { loggedIn = true; session.setAttribute("beanLogin", this); // This is the part that Spring did that we now have to do! redirectToHome(); } else { String errorText = "ERROR: Unknown user or wrong password."; showFlashMessage(errorText); } } and in my LoginFilter: LoginFilter.java: public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { String contextPath = ((HttpServletRequest)request).getContextPath(); HttpSession session = ((HttpServletRequest)request).getSession(true); BeanLogin beanLogin = (BeanLogin) session.getAttribute("beanLogin"); // Now we can check if the user has logged in correctly. } So far, so good. Now all that's left is to see if transactions work! (But still, I feel as if this was only a workaround. Maybe I'm missing something?)
this is why groovy will usually lose to js.
Ja, kom op man! Beetje in een voor anderen niet te begrijpen taal gaan lopen lullen hier. Dat schiet natuurlijk niet op hè? Als we op deze manier allemaal in ons eigen taaltje gaan lopen te ouwehoeren dan gaat het al snel heel erg onduidelijk worden hier voor iedereen. Ik stel voor dat je gewoon in 't Engels schrijft. Veel makkelijker voor iedereen toch? Bedankt man! :)
これはおかしいです！英語を使用してください！
Disclaimer: the one line is several thousand characters long and has more angle brackets than most Brainfuck programs.
Don't think so, specially when Mule themselves have [compared](https://www.mulesoft.com/resources/esb/mule-vs-camel-comparison) to camel. I would say light weight integration framework without the need for lots of proprietary connectors which could be deployed to existing infrastructure has greater need than introducing a full fledged ESB. 
ART exists because google is still dumb and won't license java proper. It's just finally getting features like parallel GC and generational gc that openjdk has had for years, and it's making dumb choices like AOT compilation when java benefits more from a *good* JITC. If google would pony up the cash, they could have a good, well-tested vm *today* with support for not only java 6 features, but java 7 &amp; 8 as well! Instead they opt for technology built out of pure NIH-syndrome, fragment the java community, and waste tons of money. 
Tired of what we have available so why not add more to tire us out more. 
I've used both camel and spring integration pretty extensively. Spring integration is a complete turd. Its XML hell. Camel has much better DSL support and, ironically, much better spring support. As spring moves towards more java (or groovy) configuration the core of spring integration will have to be redone since it's so deeply tied to xml. 
It can be integrated and used with JavaFX, if you care about such things. Building web UIs for applications in general is also not a terrible idea. http://docs.oracle.com/javase/8/docs/technotes/guides/scripting/nashorn/javafx.html
You override #hashCode when you override #equals. The contract for hashCode must use the same fields as equals. Here you are only using the object id so there is no point in overriding hashcode at all. You are creating unnecessary work.
Considered ok? I guess depends. Do you have a properly implemented toString? If yes then it would work but I don't see it as something that would pass code review. If you don't have an implementation of toString then no. Edit eclipse can generate hashCode and equals for you 
I agree... spring integration felt impenetrable for all the xml hell. We use a mix of camel and java dsl and spring for wiring only and its been great
I'll restate what saki682 said - most IDEs such as Eclipse, NetBeans, IntelliJ, etc. can create a good hashCode() method (and equals() method) for you. They will even let you select which fields you want to be used as part of the calculation. In NetBeans, just right-click in your code, choose "Insert Code...". If "equals() and hashCode()..." isn't an option, you have probably sub-classed something that already implements those methods, in which case you want to try "Override Method". So in general, there isn't much *need* to use toString().hashCode() as your hashCode method.
Could you provide the link to javadoc for the java 8 feature? Maybe I'm missing something.
*8 lines
Update 3. I managed to create the entity manager producer. There's a little problem, tho. Changes aren't saved back to the database. Maybe it's because I need to specify a transaction manager. Maybe I'll ask about this in other post. Again, thank you for all your help.
same here. nothing on google is coming up
Best blog for Spring Web MVC version 4 http://jabahan.com/spring-web-mvc-4-easy-tutorial/
The engineers who write the JVM are smart as fuck. You should never try to subvert their JVM unless you have serious problems. source: I've met them, they're bad as hell.
If you are implementing a class with no specific requirements, and no overriding of the "equals" method, then there is no point for you to write this code: The built-in hashCode in java.lang.Object gives essentially the same behaviour, but it does it more efficiently. I.e. you're artificially slowing your code down for no real change in behaviour. If you ARE overriding the equals method, then you MUST implement your hashCode to define the same sense of equality (see the javadocs for java.lang.Object for details), or else your code is buggy. So unless your definition of equality is "has the same toString representation", this is an incorrect implementation of hashCode.
You can start it by your own but you will never finish it. *Eclipse MacLuna*
Please give feedback here if you try out the archetype :)
Sucked compared to what? Cause they certainly beat the hell out of dalvik's JIT. The only time dalvik was more performant was when both vms were running in pure interpreted mode. Also, Oracle has been focusing a lot on the JVM on ARM for the past 2 years, so in all likelyhood, java 8 for arm is even more performant than java 6. Finally, Google's shown no reservation spending billions of dollars on much more frivolous things, like a company that produces hilariously flawed fire alarms.
&gt; the Collections Stack is crap; it uses a vector and not a linked list Nonsense. What a Java collection uses as it's implementation completely depends which one you pick. You can decide for yourself if you want to use a linkedlist or an arraylist for example. I don't understand why you think it uses a vector; that collection has been deprecated since Java 2 or so. &gt; StringBuilder is probably implemented with a link based list Heh. No. You can easily find the source online. It uses a character array that it modifies. Inserting at the front is expensive.
&gt; This is an informal sketch of proposed enhancements to the Java Language (and secondarily, to the Java Virtual Machine) to support generics over primitives (and eventually value types). This is a very early draft, intended only to describe the overall goals and approach. Unfortunately, Goetz said [here](http://mail.openjdk.java.net/pipermail/valhalla-dev/2014-July/000000.html): &gt; I'll just answer one question that's probably on everyone's mind: no, none of this is stuff we're targeting for Java 9. This is the early-stage explorations of stuff that hopefully will make it into a later release.
You should report an issue, so JetBrains can fix it. They will probably need a CPU trace. btw: I had a project which took 20 minutes to build, and after exclusion in McFee it took 4 minutes.
No its not! 
[here](http://docs.oracle.com/javase/8/docs/api/java/util/Objects.html)
Se habla español!
If you know anything about a console you would understand. Read a book! 
Someone needs to a stab at mavens unyielding rule. The problem really lies in tooling support and open source adoption. That is why maven dominates today...
This is just wrong
I started with swing using the Netbeans' build in GUI editor, using their tutorial. There might be something similar in Eclipse. https://netbeans.org/kb/docs/java/gui-functionality.html As you get more comfortable with things, you can try to get away from using the editor. Here is a page explaining some of the options you have regarding GUIs in java. https://stackoverflow.com/questions/7358775/java-gui-frameworks-what-to-choose-swing-swt-awt-swingx-jgoodies-javafx I recommend Swing to start off. Best of luck to you, sorry I couldn't be more of a help.
I also started with Swing in NetBeans, but switched to Eclipse with plugin WindowBuilder, because I experienced some weird behavior from Netbeans GUI editor. WindowBuilder is also more fun, because it lets you fiddle deep with the Swing objects, because it parses the code for a GUI editor View, rather than the view code being generated from some forms in Netbeans.
I you want to learn using Netbeans is not the way to go. It will create a bunch of code that you will never understand. Go to the documentation, figure out the class hierarchy and start coding. You will see things happen plus everything will make a lot more sense
In my opinion, swing was one of the easiest things I've learning in java. It shouldn't take very long to accomplish your task, my suggestion would not to use net-beans GUI editor unless you don't plan on using GUI for any other applications. Oracle provides a great trail http://docs.oracle.com/javase/tutorial/uiswing/components/ I would suggest to start there, then move to something like netbeans once you understand everything, just to speed things up
It's best practice to avoid collisions as much as possible, but not required. From the [documentation](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode%28%29): &gt; * If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. * It is not required that if two objects are unequal according to the equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. This means `hashCode()` can only depend on fields used by `equals()`, but isn't required to use all of them. `{ return 0; }` is technically a valid `hashCode()` implementation.
Check out https://github.com/ and just browse the projects there
The oracle tutorials are great? You can use Netbeans GUI designer 
mvn archetype:generate -DarchetypeGroupId=no.bouvet \ -DarchetypeArtifactId=maven-archetype-eventsourcing \ -DarchetypeVersion=1.0.2 \ -DgroupId=com.domain.myapp \ -DartifactId=myapp cd myapp mvn clean install mvn jetty:run 
Vote it down, it's advocating for a non-java approach to frontend development. /s I've seen this sentiment often on this sub-reddit for whatever reason. eg. http://www.reddit.com/r/java/comments/26vrze/id_like_to_build_a_modern_web_app_using_java/chx0lpp?context=5 
I noticed that too. Meanwhile Twitter for one has gone back to serving ready to render HTML ;) The non-java and client-side advocated also frequently try to play the "natural to web" card. But personally I don't see why a client-side application (often single page) that runs in the browser and does small JSON requests in more natural to the web. If anything the web is originally about servers returning HTML documents, not primarily (or naturally) about glorified RPC endpoints returning JSON to be rendered by client-side applications. "They" cite only advantages, but there are tons of disadvantages as well. A site serving ready to render HTML is very lightweight on the client. Pages can be rendered instantly without using much CPU and without needing much memory. Client-side applications then again can easily require 500MB per tab to do some rendering and peg the CPU. Websites really have to start stating minimal system requirements, which IMHO is crazy. 
Hey, I'm in the exact same situation as you. I decided to make a small GUI that let the user build a football/soccer league table and allow it to be saved/loaded. I too used Swing, however there are other GUI frameworks, such as JavaFX (the latest - I believe) but I wanted to try Swing first. In my opinion Swing looked a bit difficult at first, but once you get the feel for it and you start building the window you'll enjoy it. It certainly beats those rubbish command line programs you were talking about! Before you start though, have a look at some YouTube tutorials and the Swing doc is useful to some extent http://docs.oracle.com/javase/7/docs/api/javax/swing/package-summary.html Good luck with your project.
&gt; I looked into both, and I still stand by Stack being implemented with a vector, as it says in its Javadoc. I misread what you meant; you were talking about the Stack collection, I thought you were talking about the entire collection framework. Apologies. &gt; For the StringBuilder, you are right. Honestly, that doesn't make sense to me, since popping a node that holds a String to the front or end of a Linked List would be easy. I suppose its for adding things to the middle of the builder. Thanks for setting me strait on that. It's mainly meant for just appending stuff to a string. If you need to randomly put strings together you're better off using a LinkedList. But that's a very specific use case, stringbuilding is typically sequential. 
No I think you misunderstood and missed my sarcasm, I advocate for client heavy javascript. Server backend only for REST end-points. Clients have tons of processing power that's sitting there under utilized. Why spend your server resources rendering html when you can get your clients do that for you and have better experience for both. Today we live in a mobile world and if your designing your backend to serve html you have to rewrite data access all over again for native mobile apps. Why not share the same REST endpoints and write this code only once?
Try rewriting it in C++ :p
I would avoid swing, write a webservice to return the data, and use AngularJS (or something like that) for a web gui. Not a huge call for swing developers these days.
While this poster is correct about there being little demand for Swing developers, I disagree with his conclusion. Learning Swing will teach you the basics of GUI programing which you won't learn from a web application. Android's approach to GUIs is very similar to Swing's, for example we see the same sort of class hierarchy (EditText inherits from TextView) and listeners are also used extensively in Android. I would personally stay away from window building packages. Write all of the code by hand so you're forced to learn about the different layout styles, and you have to align everything 'by hand'. Then once you understand that, you can begin using window builders to speed up the process, while still having the ability to dig in when you need fine-grained control.
&gt; Clients have tons of processing power that's sitting there under utilized As a smart phone owner let me tell you something: JavaScript heavy websites half and sometimes even quarter my battery life and render annoyingly slow. Since my battery is a limited resource I have to avoid these abusive websites. JavaScript is not an efficient way to run heavy weight tasks, servers can often do so using much less resources and sometimes even cache the results. If you want a good user experience keep client side JavaScript to a minimum. 
Nice, you read my article twice. So did you figure it out now? 
I don't like this at all. The type system should be *unified.* Then we won't need any of this crap.
&gt;Clients have tons of processing power that's sitting there under utilized. Yeah right, typing this on my iPhone and let me tell you I avoid sites using too much JavaScript as my battery won't even last a few hours with them.
&gt; It takes less CPU to transmit a minimal data structure than it does large pre-rendered HTML. Pre-rendered HTML sounds silly, as the server isn't transferring pixels, is it? HTML still needs to be rendered. Anyway, with *ready to render HTML* there may be a small difference in transferring cost between such HTML and JSON, but with JSON actual rendering still has to start! This is a cost that comes on top of the transferring cost and is one that's all too conveniently often forgotten. &gt;A REST endpoint is for transmitting data structures, not rendering HTML, it doesn't map 1:1 logically. You can't just re-use the same endpoints to serve both rendered HTML and consuming data usecases. You SO missed the point. Who's talking about REST endpoints rendering HTML??? I'm talking about REST endpoints that transmit data, which can be used by both clients and server side components such as backing beans in JSF. A JSF backing bean can directly contain business logic (highly frowned upon though), it can call out to an EJB, to a CDI bean specialized in business logic OR to a REST endpoint. 
Is automatic specialization not a unification of the type system? What would be better?
I'm curious too for such ressource !
&gt; Pre-rendered HTML I mean this in terms of rendering a template (ie. jsp) to produce static HTML. But you already know this, you are just nitpicking. :P &gt; With server side templating / rendering you can use the exact same REST endpoints Was a bit ambiguous but I see what you're saying now. Still maintain it's silly. Especially if your goal is to create interactive modern websites. 
It would be easier to help you if you posted your entire code base. You can turn Checkstyle off in the Builders part of the project settings if you're not using it and just want the issue to go away. Usually Checkstyle settings for the project are in an XML file called CheckStyle.xml in the project root. The error message is saying the format of the XML file isn't as expected, with "1:50" indicating the problem is at column 50 on line 1.
Automatic specialization is not unification. It is a workaround for the lack thereof. It is also a huge waste of memory due to all the specialized classes that get generated. Actual unification means being able to store an object reference or an unboxed primitive in the same field. That would improve the performance impact of collections containing primitives. This shit will only make it worse.
Tutorials Point is an excellent resource
Oracle's tutorials are excellent 
Udemy has a bunch of Java courses. They aren't that uncommon, except perhaps on the websites you're looking at.
Codingbat.com 
You can try EIMACS and learn Java through their AP Computer Science Course. It's around $20 but it's pretty good. They have interactive exercises, several graded labs for each section and a test. But you probably won't learn about building GUIs and things outside of the APCS curriculum because the course is designed to fit the material for the APCS Exam. I would just use it to get a background on Java then learn the more practical stuff through Oracle Tutorials. 
The answer nobody is saying- Java isn't the popular 'hipster' language. Whereas RoR, nodejs, etc are, hence why you'll find those languages on all the mainstream code education sites. 
http://www.learneroo.com/ there you go.
Ktbyte.com has a java series similar to codecademy. They were giving away free codes a while ago on here and I got one. I've done a few of the lessons so far and it's not bad, they hand wave away a lot of stuff to start to give you an easier time. But it seems to be decent.
and C++
Because java is so damn strict. Other languages allow a bit of leeway in anything you do, python / js etc. A new user to programming won't understand many of the underlying computer science involved when using java so they're likely to give up. Much more unlikely in python. It's the same reason c#/c++ isn't on those sites either. 