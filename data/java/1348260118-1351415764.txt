Well at least the author (me) tried to give an example and explained his ideas. Simple as that ;)
The point is that obviously someone finds mocking frameworks useful, because they wrote one, would be a good idea to find out why they think mocking frameworks are useful? How they intended it to be used? From Stan Silvert, I am getting hearsay, because he didn't write a mocking framework so I'm getting his interpretation of what mocks are for. And if you think JSFUnit demphasizes the utility of mocks, I still say you don't get it. Put another way, mocks deemphasize the importance of JSF. Mocks facilitate the Dependency Inversion Principle, which coupled with the Liskov Substitution Principle that is facilitatedc by the expectations set by mocks, you could in principle transparently swap out web frameworks. The application does not depend on JSF, JSF (or the adapter layer) depends on the application.
I never stated that.
That may well be true if we're talking about actual proper logic, like the `add` function, or perhaps some tax rule, a "duration resolve and overlap" calculation, etc. I have plenty of unit tests for these that I find very useful. In the overwhelming majority of cases, I don't need to mock anything there since the methods that do these calculations are sufficiently independent already. They work on their input and produce a result and rarely have any (internal) dependencies. Now, 'their' point regarding the idea that there are deep flaws in the thought that one can replace JSF or any sufficiently complex system by a mock and have meaningful and useful test results is what got me thinking. You keep explaining me the theory behind mocks, but if it wasn't clear from the article: I've been creating unit tests and mocking out dependencies for years. I've followed the advice and theory to the letter. But this new "movement", got me thinking. At the end of the day, what do I actually gain from it? Whether I've got a Service Facade EJB, a JSF backing bean or even a plain old Servlet, the mock isn't capturing the intricacies and subtleties of the real code. As Andrew Lee Rubinger put it &gt;An EJB is only an EJB inside an EJB container There is *no* abstract application running on top of JSF backing beans, but rather the backing bean *is* the part that needs to be tested and the backing bean IS JSF. &gt;you could in principle transparently swap out web frameworks Years ago, we did actually try to write our code like that; to be independent of the GUI toolkit, independent of the standard libraries, independent of [...]. We ended up with essentially writing our own GUI toolkit, standard library and what have you. It turned out to be an enormous maintenance burden and a big impediment for getting new developers up to speed. As it turned out, we never swapped out the GUI toolkit anyway, so we payed a huge price for nothing. Worse yet, even though we had unit tests (with mocks!) and an elaborate abstraction layer, the code wouldn't run correctly with an actual different GUI toolkit at all. When it was time to -really- run the code, shapes just wouldn't render correctly, or layouts were off, resizing would clicker like crazy and all other sorts of visual glitches. **That** were the real issues, and mocks, abstraction layers and unit tests didn't even begin to capture any of them. I'm sure that if we had been in the business of creating abstract GUI toolkits, we could have perfected it. But we weren't. We were building a bookkeeping app at the time, and in hindsight we would have been far better of using the GUI toolkit that we had directly. &gt;I still say you don't get it. I just spend a very tiresome reading of an "is-so, is-not" debate (http://www.reddit.com/r/java/comments/zp032/paul_grahams_java_predictions_fail) and I don't want to fall into the same trap. Mocks have their usages and it's not a black/white case, but I'm getting more convinced by the day that there's a LOT more to the NoMock movement than just a bunch of grumpy people "who just don't get mocks". I'm sorry that I couldn't get this point across better in the article. 
On your next iteration you should consider introducing some object oriented concepts into the design. For example, consider creating an object for each type of attack (FireAttack, WaterAttack, ect) and maybe they will extend a base class Attack since they all do effectively the same thing. Similarly you should have classes for the Dragon and the Human. Dragon may extend a base class Enemy. Designing it this way makes it easy to add new attacks, enemies, and reuse code that is common among similar classes. One last note, you should map attacks to numbers so instead of typing 'fire' people can just hit 1 ect. Have fun!
Saying "you lost bla bla bla" isn't going to make me lose, saying HOW I lost is going to do it. Obviously you have no retort. Fuck off.
No, what makes you lose is that you made a challenge and didn't complete it. You're all talk buddy, good bye!
You said you can do the problem in 10 minutes, do it or fuck off.
Demonstrate that a problem exists first asshole. This hasn't been a problem since 2001.
Google App Engine isn't so bad.
I have been thinking on this question a lot, trying to figure out what does programming mean. Because if you don't know what you are trying to accomplish/teach you won't probably teach all the correct things. First, explain them how a programmers feel and frustrations - it makes them expect that and hence give up less. Explain them the ambiguity of the languages. Explain the basic concept of trying to explain things to a computer. Explain that CPU isn't some magical beast, but a well defined simple thing. Explain how problems are solved - step-by-step, trial and error and not the whole problem at once. Explain the need for these abstraction/functions in terms of human capabilities. When helping use leading questions. The longer version [is here](https://github.com/egonelbre/spark/blob/master/basics-of-programming.rst), it explains those things in depth.
A lot of people giving you advice on coding but I am going to stay my hand and say good job my friend!! This is much more entertaining than my first game I wrote (although I was 11). I hope to see your next game.
&gt;That might well be true or not depending on exactly how you look at it: technically it's the proxy that internally starts the transaction. From the point of view of the code that calls the EJB, the called method actually does start the transaction. I admit I just don't understand any point of view that says the method of the bean closes over the transaction. It clearly doesn't unless I'm missing something significant. From all points of view I'm aware of, the transaction closes over one or more methods in one or more objects. If you want to unit test a transaction, that's cool, just mock some ejb methods that it closes over and configure them to respond in different ways, then make sure the transaction manager rolls back or commits in the right cases. &gt;An important point is that if you don't test the EJB bean in an actual container, it's simply not an EJB. It's like testing a Java class at the binary level via a C tool (so there's no heap allocations, no garbage collection, no nothing). So in the context of a unit test, it's not an ejb. What's wrong with that? You have a session bean that books passage on a cruise liner. You want to make sure it does the right things in the right order: issue the charge, mark the customer's account for billing, reserve the cabin, order the meal preferences, etc. That's a valuable unit test and has no need of an ejb container. &gt;As far as I know, even the most strict unit test followers, do not mock away the JVM. They test Java classes via TestNG or JUnit, and those run on a *real* JVM. I list the thread here...why would you mock the jvm? I don't recommend mocking even reliable objects with simple dependencies of their own. Like a hash map, don't mock that, just use a real one. &gt;So why do some people then so desperately want to test EJB beans, CDI beans, Servlets, etc outside of the container in which they are supposed to run? Is there even a theory that says you should do so, or did it just follow from practical limitations in the past, which people are now following as law? I guess I don't see why you wouldn't want to unit test outside the container. I will say one problem with unit testing some code that uses frameworks is that it's very difficult to mock the framework because the contract of the behavior can be so complex. For instance, if you're using hibernate and you want to test some method that creates and runs hql, you cask find yourself in a situation where you don't quite know what to have the mock return because you're not quite sure what hibernate would return exactly. That makes unit trying impossible in some cases and you just have to run up an in memory database that hibernate works with, then pray it behaves the same as your real DB.
Start by learning how to implement a basic depth-first search. In simplest terms backtracking is equivalent to search with pruning, where at each node you decide if you want to continue the search with its children or not. After that you could try looking at some solutions to, for instance, the [knapsack problem](http://en.wikipedia.org/wiki/Knapsack_problem) and try implementing them yourself.
While I agree with you that such a competition would certainly inject an element of fun into the coursework, I would also caution against such competitions. Graphing speed of the solution encourages students to cut corners and follow the specification rigidly. Especially in Java, this ill-prepares them for the real world, where generic extensible solutions are preferred over heavily optimized ones. This is an introduction to programming course, and the emphasis should be on clear, well reasoned, well formatted code; not on premature optimization and avoidance of high level constructs for the sake of reducing overhead.
I'm not in the position to change that - I have to help the students with the material. Furthermore, those "big picture" ideas I was asking for are not tied to a specific language at all.
Thanks. The longer version was an excellent read; well written, too.
v.nice! The best advice is zero51423's bit, about re-factoring your code to have a helper function `spellcast`. That'll make it easy to add 20 more types of attacks very easily. Some small style tips: - use `if-else-if` for the choices of spellselect. I know, it works either way, but when I glance at your code and see '... else if...', I'm cued in even better that this branch can't happen if the previous one was taken (rather than making me look at the code more closely and conclude that for myself). - you need only declare your variables where you use them. So rather than `int possw = wposs.nextInt(2);` at the top, you could have that inside the block for `if (spellselect.equals("water")) ...` (Well, this point actually gets auto-subsumed by having a helper `spellcast`, but the idea might still apply elsewhere.) - you only need one Random object, and you can just re-use it. (It's like: you don't need to buy a separate die, every time you want to roll a die.) Keep up the great work!
How do I get this to run properly? Eclipse gives me errors when I copypasta: "Exception in thread "main" java.lang.Error: Unresolved compilation problem: at killthedragon.main(kill.java:4)" I'm a total noob, but that is a project that looks interesting to me. Also, this: "import java.util.*" seems weird.... Thank you for your help. EDIT: The format is a little...off, sorry.
I have, still the same thing. The class name isn't important I guess? I tried several. Oh and I also made the brackets at the end, so that Eclipse doesn't show me an error.
I really like [Java Simon](http://code.google.com/p/javasimon/) for its simplicity. You may also want to look at [JavaMelody](http://code.google.com/p/javamelody/). 
 import java.util.*; public class killthedragon { public static void main(String[] args) { String spellselect; int hp = 160, dhp = 200; //mine and the dragons hp. int fireball, fmin = 20, fmax = 25; //fireball spell int firerange = 20 - 25+1; int swingsword; int waterblast, wmin = 30, wmax = 35; int lightningbolt , lmin = 35, lmax = 40; int forloop = 1; System.out.println("*******************"); System.out.println("* Kill the Dragon *"); System.out.println("*******************"); System.out.println(""); System.out.println("It is your quest to kill the dragon"); System.out.println(""); System.out.println("You have 4 ablilitys"); System.out.println("You can use fire bolts"); System.out.println("You can shoot water blasts"); System.out.println("You can harness the power of lightning"); System.out.println("And you always have your trusty sword."); System.out.println(""); System.out.println(""); System.out.println("Do you want to play on hard or easy?"); for(;;){ for(int i = 0; i &lt; forloop; i++){ Scanner scan = new Scanner(System.in); Random fposs = new Random();//the possiblitiy of the spell casting the spell. int possf = fposs.nextInt(2);//it will make a number between 1 and 2 Random wposs = new Random();//water posibiliy int possw = wposs.nextInt(2); Random lposs = new Random(); int possl = lposs.nextInt(3); Random dragonposs = new Random(); int dragonhit = dragonposs.nextInt(3); Random critial = new Random();//for a critical hit int crit = critial.nextInt(5);//yea Random fire = new Random() ;//fire fireball = fire.nextInt(25 - 20) + 20;//fire ball within the range of 25 though 20. weakest spell. Random water = new Random();//water waterblast = water.nextInt(35 - 30)+30; Random lightning = new Random(); lightningbolt = lightning.nextInt(40 - 35)+ 35; Random sword = new Random();//the trusty sword swingsword = sword.nextInt(17 - 15)+15; Random dragonattack = new Random();//the amount of damage the player takes. int playerdmg = dragonattack.nextInt(27 - 25)+ 25;//dragons dmg point range. System.out.println("How to do you want to attack?"); System.out.println("Do you want to use fire, water, lightning, or swing your mighty sword?"); System.out.println("fire is 20-25dmg, water is 30-35, lighning is 35-40. sword is 15 but will hit every time."); spellselect = scan.next(); if(spellselect.equals("fire")){ if(possf != 1){ System.out.println("Your spell missed entirely."); } if(possf == 1){ if(crit == 1){ System.out.println("WHOOSH! you did "+ (fireball+10) + " damage. the dragon still has "+ dhp + " HP"); System.out.println("You got a crtitical hit!"); } dhp=dhp-fireball; System.out.println("WHOOSH! you did "+ fireball + " damage. the dragon still has "+ dhp + " HP"); } } if(spellselect.equals("water")){ if(possw != 1){ System.out.println("Your spell missed entirely"); } if(crit == 1){ System.out.println("SPLASH! You did "+ (waterblast+10) + " To the dragon. it still has "+ dhp + " left."); System.out.println("You got a critical hit! "); } if(possw == 1){ if(crit == 1){ System.out.println("SPLASH! You did "+ (waterblast+10) + " To the dragon. it still has "+ dhp + " HP."); System.out.println("You got a critical hit! "); } dhp = dhp-waterblast; System.out.println("SPLASH! You did "+ waterblast + " To the dragon. it still has "+ dhp + " HP."); } } if(spellselect.equals("lightning")){ if(possl != 2){ System.out.println("Your spell missed entirely."); } if(possl == 2){ if(crit == 2){ System.out.println("ZZZZZTTT! You shocked the dragon doing " + (lightningbolt+10) + " Damage. it still has "+ dhp + " left."); System.out.println("You got a critical hit!"); } dhp= dhp-lightningbolt; System.out.println("ZZZZZTTT! You shocked the dragon doing " + lightningbolt + " Damage. it still has "+ dhp + " left."); } } if(spellselect.equals("sword")){ dhp= dhp-swingsword; System.out.println("DING! you swung your sword and did " + swingsword +" damage. the dragon still has "+ dhp + "HP."); } System.out.println(""); System.out.println(""); if(dragonhit != 1){ System.out.println("The dragon is attacking....but he missed."); } if(dragonhit == 1){ hp= hp-playerdmg; System.out.println("The dragon is attacking. the Dragon did " + playerdmg +" damage. you still have "+ hp + "HP"); } System.out.println(""); System.out.println(""); if(hp &lt;= 0){ System.out.println("You died, but your bravery will never be forgoten...what were we talking about."); System.exit(0); } if(dhp &lt;= 0){ System.out.println("YOU WON! YOU KILLED THE DRAGON!!!"); System.exit(0); } } } }} EDIT: This is the code I used, thanks for the effort. EDIT: IT WORKS :D I copied it in here, copied it back...Oh, well, now I'm gonna try it out.
I have been able to prove that the synchronization on Math.random() is a real bottleneck in production code. It doesn't need to be 50-100% to be significant (especially for something so easy to fix). I don't understand why you say the article isn't about thread local randoms... it discusses a provided version of that as one of three options.
I realized Sokoban is an extremely easy and fun starting point: http://raysforge.net/repos/Sokoban/src/net/raysforge/sokoban/Sokoban.java
Facing this so many times, there a multitude of problems that can cause this: 1. Your JPanel/JFrame hasnt executed: setFocusable(true); 2. You have to add to your JPanel/JFrame: addKeyListener(name-of-object-implementing-keylistener) 3. Once you created your JFrame, JPanel you have to request focus explicitly with: requestFocusInWindow();
Sudoku is a really easy example [no, really!] of something that can use backtracking to solve. I cannot strongly enough recommend you actually *try* this as an exercise [link at the bottom for concrete examples, if you like]. First, you write three functions: * "make sure that the number in position X, Y doesn't conflict with anything in its row" * "make sure that the number in position X, Y doesn't conflict with anything in its column" * "make sure that the number in position X, Y doesn't conflict with anything in its box" Now, starting at the top left, go along the rows of the puzzle. At each empty spot in the puzzle, you fill in a number and call those three rules. If any of them fail, then go to the next number. If all of them fail, then you return [backtrack]. A hokey pseudocode solution that solves an empty starting grid [non-empty is a trivial addition]: function solveSudoku(puzzle, x, y) { if(y&gt;9) return true; // If we're past the end of the puzzle, this was successful! for(int i = 1..9) { puzzle[x,y] = i; // put i in the slot // If any of these three fail, try the next value for i if(rowConflicts(puzzle, x, y)) continue; if(columnConflicts(puzzle, x, y)) continue; if(boxConflicts(puzzle, x, y)) continue; // Getting to here means you've found a value for i that might be valid // Figure out what the next box will be nextX = x+1; nextY = y; if(nextX &gt; 9) { // If we've gone past the end of a row nextX = 1; // Go to the start... nextY++; // ///of the next row } if(true == solveSudoku(puzzle, nextX, nextY)) { // Recurse // Found a correct solution! return true; } } return false; // Backtrack! Failed to successfully fill position (x,y) given previous boxes! } The point is that it doesn't necessarily have to fill the entire puzzle to check a solution; it goes through the puzzle trying numbers. Every time it finds a candidate that doesn't violate any previous rules, it goes on to try the next box. As it goes down, it'll find situations where it can't complete it because of previous boxes. Then it backtracks a bit and tries again. If you need a visual view, there's some videos on youtube. For example, [this one](http://www.youtube.com/watch?v=JtTThE93WNI). Around 20 seconds in, he clicks "solve", and you can watch it go. It highlights green as it goes down, and red as it comes back up. [Project Euler #96](http://projecteuler.net/problem=96)
A couple of things I see...first off, you ask the user whether they want to play on easy or hard, but then don't give them a chance to respond to that. So why ask? Also, you account for the possibility that the user responds with fire, water, lightning, or sword, but if they type anything else, then their character just does nothing and the dragon attacks them.
I think we might be talking past each other. I'm not arguing that you shouldn't test EJBs in the container. You should. I'm just saying that's not a unit test. But that's ok, unit tests aren't the be-all end-all of testing, they're just one kind of test. I still advocate for integration tests and other kinds as well. If I worked on a project with EJBs (which I would avoid at all costs) you bet I would test them in the container. But it seems to me that you're arguing unit tests for EJBs are useless. The only thing I'm saying is that the very phrase "unit test for EJB" is nonsense. You can't unit test an EJB. You can integration test an EJB. If you take it out of the container, you're right, it's just a Java class with none of the EJB stuff. The step too far, I think, is that you seem to be saying there's no point in unit testing that Java class. Of course there is. It has the same value as any unit test anywhere. It just doesn't tell you anything about how that class performs when you use it as an EJB. Doesn't mean it's totally pointless...those tests can still add a lot of value. &gt; What I meant is that from the point of view of the code calling an EJB method from within a non-transactional context (meaning no transaction is already running) that method starts and ends the transaction. There is no user visible code that does this, and thus no code that the user can copy and/or call from a unit test. The calling code doesn't know anything about any transaction, though. It only knows the contract of the method it's calling. When an EJB is in an EJB container, it guarantees to the caller that all of its work will complete, or none of it, but it won't leave things in a halfway state after a failure. That's it. The fact that it uses a transaction, or only does something that can be atomic, or uses magic, or whatever doesn't and shouldn't matter to the caller. How that method fulfills its contract is up to it. The fact that it happens to use a transaction to accomplish this, fine. Now, if you're treating this as a normal Java class for the purpose of a unit test, then you may still only test the contract that method specifies. If the contract of the method is, "If this class is deployed in an EJB container, this method guarantees transactionality, otherwise it doesn't,"...then the caller in this case (the unit test) shouldn't bother trying to verify transactionality. That's better left to an integration test. But again, that doesn't make a unit test worthless...far from it. &gt; If you're in a mock environment, where does a transaction manager comes from? How do you start and stop the transaction and setup the entire context like you're supposed to do? I got way off track here. I thought you were saying that the authors of the transaction code have no use for unit testing. Now I think you probably didn't mean this, I just got your meaning all wrong. &gt; If you go down this path, you're recreating the work that the EJB container (via the transparent proxy) does. Well, yes, I think we agree here. I did say that if you're trying to unit test something where you have to mock a Hibernate-mapped object, for instance, good luck. The problem here isn't with the idea of unit testing, the problem here is that Hibernate and other such frameworks suck. They specify such complex contracts that they can't be expressed clearly (and the folks that implement the framework even don't understand most of the time *exactly* what the contract is.) Frameworks like this are just lame. The erode your ability to test code. But that's because they're lame, not because the idea of unit testing is bankrupt. &gt; The container is not just a framework, but it's an environment that makes the bean what it is. No way, I disagree with this. Take a session bean for instance. It's the business logic that makes the bean what it is. The fact that you can then plug that bean into a container that makes it more than that by adding all sorts of other things to the contract is fine, but those behaviors are being conferred upon the bean by the container. In other words, they're not intrinsic behaviors of the bean, and this is why I say the bean doesn't encapsulate them but rather is encapsulated *by* the container at a higher level. Transactionality and security contexts and all those behaviors are intrinsic *to the container*. Now you'd better plug that bean into that container just right so it confers all the right behaviors you want onto that bean. And that's complex, and therefore you need to test it too. And those behaviors extrinsic to the bean probably don't make sense to unit test because the framework is lame and doesn't specify contracts well enough. So fine, you do integration tests. But at the end of the day, if my "book passage on a cruise liner" bean doesn't do the right business logic in the right order, a unit test will fix that behavior and tell me so. This is perfect and exactly what I want from a unit test, and I can get it. This is still the part I don't get about what you're saying...you seem to be saying that the code in the bean isn't worth testing to make sure it's doing what you expect. Why not, though?
Most of them are a bit outdated. And of some books new versions have been released. These 2 books still seem nice though : - Object Oriented Software Construction - Applying UML and Patterns How about 15 euro's + postage for just these two (i live in holland too)
My suggestion would be to keep in mind the following: 1. Try to minimize the amount of non-important information you're throwing at them. Someone already mentioned this, but basically don't waste time confusing them with information about memory, bits, how the JVM works, bla bla. Separate the specifics and teach them programming concepts. Even if someone asks you what "public static void main(String args[])" means just say you'll answer it later. The less you bog them down with this stuff the better. 2. Teach in an iterative manner. This is something hard to do. But I believe in my experience the times I learned best was when things started very, very small, and in each "chapter" or "lesson" a new thing was built on the previous examples to make something better. For example, let's say your end goal is to have your students program a calculator. Step 1 should be a hello world program (printing to System.out). Step 2 should be hello world, but using swing to make it appear in a window. Step 3 could be adding a button that changes "Hello world" to "Goodbye world". You see how each step is a very small difference, but to an amateur it seems like something entirely new and different? Do you see how eventually, every small step could eventually lead to a working calculator program? In my experience what holds most people back from programming, and this applies to many subjects, is simply their fear. By teaching them in small, iterative steps much of that fear disappears. As for examples, it depends on each "lesson" you're trying to teach. I assume you already have some general rubric or goals or topics you would like to cover throughout the course? You mention teaching them "main concepts", but there are simply too many topics to teach in one semester. Which concepts do you want to teach?
Thanks for the reply. I tested your programm and i only updated (like you said) my 32-bit versions of java. All my 64-bit JDKs and JREs are still in place. I could not test if it uninstalls the JDKs, because i have no 32-bit version installed. Anyway, great programm you wrote there.
I just want to say that mvn eclipse:eclipse is a dated and ugly hack and using m2eclipse is preferred way. Which comes bundled with Spring version of eclipse. So whlile I'm judging only the cover it still could have better
I think it goes a long way; let's have a look e.g. at binary search. Instead of just showing them the algorithm, I probably would start with something like "Student A pick a number! Now student B try to guess it.", in order to get them involved and not just passively listen to what I preach. At this time, I would give them a few minutes to think about their technique in small groups to come up with a verbal strategy. After going through their answers I would ask things like "Why is this approach working?", "Are we able to replace numbers with characters?" "A sequence of random numbers?". By this time they'll probably recognize the required ordering of the elements - all by themselves. Finally I would show them the actual algorithm and end it with some examples like "This is how X searches their massive amount of data". Of course this approach takes more time than just showing them the raw material, but I think it's worth it.
I think that's a great way to teach in general. Involve the students, and explain it in a simple manner that anyone can understand. That being said, and this may be just my opinion, but it seems binary search is not something I would cover in an introductory freshman course. I guess it depends on the length of the course. I also think nearly every programming course I've ever taken or observed was horrible... perhaps you've been luckier. I just feel binary search is extremely technical, mathematical, and hard for a novice to understand. 
These are great news. Date handling was probably the ugliest of more commonly used parts in java. I didn't like it because it seemed to overcomplicate things for no apparent reason. Many of my braincells were eaten upon by bugs. Especially in cases where the Calendar class could not be used.
&gt; Date handling is a complex problem, and in Java has a lengthy and less than glorious history. That's putting it mildly.
Real men just use UNIX timestamps. But seriously, I can't wait to stop using those fatty Calendar objects.
An even better strategy for managing form values is when you need access to important consistent values on a form (such as user input that may need to be accessed across many forms of an application). You should provide a class with a storage mechanism for the values and can be publically accessed by anything in a way like my code I've written for an app before. Some of the code is omitted but you can convey the meaning of what I am trying to show. http://pastebin.com/aUvmNuzp This way, you access the value in the same way you write the value to the storage.
It's okay if it's awful (your word, not mine.), because no one knows the language as soon as they pick it up. Just send me a link of the paste, even in a PM if you don't wish to publically show it, and I'll try and find why it's saying what it's saying. It's difficult to understand why it's broken unless I can see it.
Okay, change this line: String myvar="abc"; to: private static String myvar = "abc"; You don't have a visibility modifier on the field, which is often-times something you don't want to do and will allow other classes in the same package access to that field. So I put "Private" on the field so the value is private to that class only. The reason you were getting the error you got is because the method you are wanting to use is indeed static, but the variable you're trying to return in a static way, is not static. So make the variable static and watch it fix the issue immediately. Hope this helps. edit: here's the pasted modified version. http://pastebin.com/Nr2yTgaL
The keyword for stating a variable cannot change is "final". :)
I create a GUI were i made a color panel an proceded to create different shoes using g.draw or g. fill to create him.
This is great, Add a couple more holes in the sponge. :D Make it random if you can Also, chose*
Smooths the pixels, if you will. Softens the edges 
&gt;An artificial environment will always make invalid assumptions about the behavior and stability of that environment. I agree with this. For basic environments it might be cool to say: the mock sets the expectation, but for large complex systems this is just unrealistic. You'll then get mocks of say a server which allow you to set the number of cores and give you back an increasing amount of data, but totally forgets that in the real system after a certain amount of cores memory bandwidth limitations kick in. And it's not about this specific example and not even about mocking whole severs, but just about the idea that when you mock you often oversee small little details and interactions that make all the difference. It's like a scientist claiming he can predict the exact location down to the milimeter where a ball will land after I randomly throw it away. He only has to know the exact mass, velocity, direction, air pressure, temperature, wind, etc. Sounds pretty cool in theory, but for all but the most trivial throws in the most controlled circumstances this is totally useless.
Thanks for sharing the information.
&gt; com.sun.image.codec.jpeg.JPEGCodec is Sun proprietary API and may be removed in a future release You really should not use that class for encoding images.
Thanks mercde for sharing the valuable information.
Plus, scaling is already available: http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(java.math.BigInteger,%20int)
Jersey client is easy to use http://jersey.java.net/nonav/documentation/latest/client-api.html#d4e609
I would agree with the above, but instead recommend the [Spring Integration framework](http://www.springsource.org/spring-integration), which is designed for exactly this use case. The example in the article could be rewritten similarly to the third code block in [this section](http://static.springsource.org/spring-integration/docs/2.2.0.RC1/reference/htmlsingle/#bridge-namespace) of the documentation. The reverser would be a [Transformer](http://static.springsource.org/spring-integration/docs/2.2.0.RC1/reference/htmlsingle/#overview-endpoints-transformer). Hope this helps!
Scanner scn = new Scanner(System.in); 'Scanner' is the object you are calling. The next bit is the name, 'scn'. The = operand is an assignment, it's telling the ide what your new object is equal to. It's like "int one = 1;", what you've done is this 'int = one = 1". Do you see the problem? Hope this is some help. Send me a pm if you need help. 
the first 3 lines of your first method: Object system; // TODO Auto-generated method stub Scanner scn = new Scanner(system.in); I don't know what you are trying to do with the var named system, but to get a scanner object for interaction, you will need to use: Scanner sc = new Scanner(System.in); "System" is a resource available by default from the jvm "system" (like you have already) is just a basic object as you declare in the 1st line. It will not have the same properties as the System resource with a capital S 
See this stack overflow question: [Java serialization of multidimensional array](http://stackoverflow.com/questions/1467193/java-serialization-of-multidimensional-array). As an aside, Java doesn't have multi-dimensional arrays. It's a single dimensional array, where each element is a reference to another array.
You could wrap the array in a class that implements Serializable, like so : class Cock implements Serializable{ private static final long serialVersionUID=123456789012345678L; int[][][] vagina; } Serializable is what you implement for classes you wanna save. The serialVersionUID is what you gotta have in a class that implements Serializable. My Eclipse ide generates it for me. I'm pretty sure that will work.
This needs to be in /r/WTF... 
Just thought it should go here since it was java related 
Be careful with integer arithmetic on divisions
I'm trying to figure out if this is how someone views Oracle, or how Oracle views programmers. As someone forced to use Java, I'm going with the latter.
Okay so I followed this and I'm not sure what is happening my array is being created and prints as @4760a26f, right after save it prints as such but then I have it reload it and now it's @712d0ef5 does this only work with arrays of integers? EDIT: blocks = (Block[][][]) save.readObject();
Is there anything else to it other than that line of code? It didn't seem to do anything for me.
I like [this one](http://www.youtube.com/watch?v=b-Cr0EWwaTk) too
...wat?
You've mixed up the assignments in the constructor of class "cat". Also please: * try debugging for yourself. the error will be obvious once you step into the constructor * consider posting to /r/javahelp if you need help * please adhere to the language conventions, i.e. capitalize class names. "Cat" not "cat". 
And what is your question and/or problem? Don't just quote your homework assignment, and some code without explanations. Don't let us run the code ourselves to discover what's wrong with it, but do ask specific questions where you are having problems. Also: /r/javahelp 
http://code.google.com/p/snakeyaml/wiki/Documentation#Dumping_YAML
http://www.youtube.com/watch?v=8Px-GHPxB4I VIA SOAP!
A more common pattern for your Cat class would look like this: public class Cat { String name; String color; public Cat(String name, String color) { this.name = name; this.color = color; System.out.println(this.name + this.color); } } also consider implementing toString() instead of a System.out.println in your constructor.
&gt; I want to write Java like they do at Oracle What? Badly?
But Windows, man.
Litigiously
public static void main(String[] args){} is always good to start with
Which libraries would you use in C++ if you were to do this? It's possible there is a similar library for image processing in java. I would have no idea though.
posted in /r/Java :]
Apparently that's Jenny Skavlan, a Norwegian actress. As a Norwegian I find it weird that I haven't seen this before. She was in Dead Snow by the way, if anyone has seen that.
Sounds like you're looking for OpenCV.
[XMPP](http://stackoverflow.com/q/6453944), if you dont like reinventing wheels.
How very... Scandinavian. Yet the creator appears Russian.
[Java sockets](http://docs.oracle.com/javase/tutorial/networking/sockets/index.html) would be a good place to start. 
For those of you who don't know what this is, this one of several [promotional videos](http://jz12.java.no/videos) for the Norwegian Java conference [JavaZone](http://www.javazone.no). Check out Java-4-Ever, it's way better.
Javascript is not Java, and Java is neither dead nor invincible.
&gt; the mock sets the expectation, but for large complex systems this is &gt; just unrealistic. Not only is it realistic, it is necessary, and mocks support the larger practice of structured programming. This is the principle called "abstraction", where you create "artificially" isolated environments that can be analyzed in logical isolation. If you didn't have languages that could support this, I highly doubt that you could create substantially large, complex systems as every part would depend on every other part, and no sensible assertions could be made about the behavior of the system because it always "depends". &gt; totally forgets that in the real system after a certain amount of cores &gt; memory bandwidth limitations kick in. No, not "totally forgets". It's just not relevant to the *logic* of the class under test, and using the tool of abstraction, is pushed into another layer as an integration issue. Otherwise, every component of the system is dependent on every other component of the system, and that would be a huge mess. &gt; It's like a scientist claiming he can predict the exact location down to &gt; the milimeter where a ball will land after I randomly throw it away. No, not at all. The scientist is making measurements of an existing system that does not have a *logical* basis, only a *physical* one. This is an illogical comparison to computer software, which are not measured but created, and are based on logic. And this logic can and must have invariants, pre-conditions and post-conditions independent of its larger environment. There's a reason Computer Science is in the realm of mathematics and not the physical sciences.
&gt; Years ago, we did actually try to write our code like that; to be &gt; independent of the GUI toolkit, independent of the standard libraries, &gt; independent of [...]. I think this is the crux of the issue. If you are getting the point where you are creating an abstraction of a GUI toolkit, you are acting at way too low a level of abstraction. This suggests you are looking at the problem backwards from the standpoint of abstraction. The needs of the UI are driving the design, and not the needs of the components *operated* by the UI. It's interesting that where you have found failure in applying this method, I have found resounding success. Even before mocks. Things like undo/redo, automation and scripting became easy instead of essentially remote control of the GUI. I've developed some very complex UI applications in my time, and I've only created very simple interfaces for the components. I've never had to recreate an entire UI toolkit and I've never run across the problems you're talking about. This is the beauty of the traditional UNIX model: components connected by simple interfaces. The GUI *serves* those interfaces, not the other way around. Mocking allows you to discover these simple interfaces in bottom-up fashion, for a very simple reason: mocking discourages complex interfaces because it makes mocking difficult. If you start creating imaginary UI toolkits, stop. You're doing something wrong. TL;DR: JSF, EJBs, etc. should be the mortar that binds a bunch of independent components together, which are the bricks. Mocking is a practice to keep the mortar and the bricks separate.
Are the contents the same? Those numbers you mention do not matter whatsoever except when you're doing a reference comparisons.
While there is no 'correct' way, there is a recommended way where classes should be camel case and first letter capitalized. It's usually good to stick with convention for maintainability and compatibility with external projects. http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html
While some may argue that there is no "correct way", I would say that there is in fact one, and it's called the [Java Coding Conventions](http://www.oracle.com/technetwork/java/codeconv-138413.html) (JCC). This is a very detailed standard that the community almost universally agrees upon, at least when it comes to identifier casing. If you're naming classes likeThis, you're doing it *completely wrong* and the next guy to maintain your code will be ME, and I'll be driven damn NUTS by the utter pointless diversion from the standard. In my experience, if you make strange diversions like that, there's a large chance that your code is downright strange in general. So tell that to your teacher.
I feel your pain, and I would look very hard at Guava. It can replace many Apache Commons libraries, and a lot of thought has gone into its API design.
Seconded XMPP. Not only are the wheels invented for you already but you have a built in audience and servers to use it with, and they all (typically.. Facebook..) federate with each other.
I just had something similar with Apache api. When doing ftp stuff if I used changeToParentDirectory() it would only work when it wanted to. For no reason it would decided it didn't want to work and half the time didnt change to the correct directory anyway. As soon as I switched to changeWorkingDirectory("/") everything worked reliably.
I hope this is just a poor example and not the idiomatic way to do a checkbox list using those libraries. 
they we're not the same, every entry was null once loaded
Challenge not accepted, for now.
Isn't it just so bloody annoying? We can't be the first to have these problems, they should pull or fix what is broken, surely? That would save us all a lot of headaches.
Look into using ImageJ! It is the only image processing library I would recommend. http://rsbweb.nih.gov/ij/index.html
I wrote one years and years ago. I wouldn't design it the same these days but might be a start. http://codeviewer.org/view/code:2a0e
This isn't about listeners. It's about concurrency and a Java List.
Wouldn't cock be a member in Vagina?
I was trying to do some work with LibreOffice's API about a year ago, and I'm wondering if you came across any documentation for registering a listener with the spellcheck. I was looking to have a function called when a misspelled word was written in non-headless mode (though I doubt the process differs in headless mode) but couldn't find anything that explicitly spoke about it. I've read the provided documentation for both LibreOffice and OpenOffice in regards to the spellcheck API, but I couldn't find anything on it. Again, this was some time ago, so things might have changed. Happen upon anything like that? I'll go through your source and see if I see anything there. Edit: Yup. I had something very similar to your program written in Python that would use the spellcheck externally to create a list of misspelled words in an open document and speak them using a text-to-speech program. I think that Java is the language to use when interfacing with the {Libre,Open}Office API.
I was just spewing random genitalia. It's how we did it at the place I used to work. The boss started it. He called everything fuck, dick, pussy, cunt, fuckhole, assdick, etc. He has code tourettes. I guess I caught it. It gives you a lot of options.
Neither. It's just entering the limelight...
Yes, link is very helpful, thanks!
So what do we do to prevent from being attacked?
Disable java in browser and dont run random java programs
The comparison to Outlook in my mind is also a bit of apples to oranges. One would expect that an application whose main purpose is to display email and calendars to be pretty low-risk from a security standpoint, whereas a language runtime environment would have many, many more potential vectors. Granted that we should probably be past applets by now. But comparing a software product whose main purpose is to run code versus an application that has no business running any code is a bit disingenuous.
&gt; Alternative languages can be split into two groups: those that run on the JVM (Scala, Groovy etc) and those that don't (Python, Ruby). [FAIL](http://www.jruby.org/).
Xtend is statically typed and compiles to plain old *readable* Java. Groovy is a dynamically typed language which compiles to bytecode and has different runtime characteristics than Java.
It is an FLOSS project, you can either help fix the code or at least tell them about any bugs.
so if xtend is compiling down to *java*, it's more like coffeescript? is that a fair comparison?
For your first issue, I think what you want is FileUtils.copyDirectoryToDirectory. File srcDir = new File("c:\\users\\doooode\\my documents\\"); File destDir = new File("i:\\backup\\"); FileUtils.copyDirectoryToDirectory(srcDir,destDir); If you run this, you will end up with a folder i:\backup\my documents\ with everything inside it instead of the contents of my documents put directly into i:\backup\.
My advice is to start the habit of test-driven development early on. Go find a list of the first 100 prime numbers and write a small method which calls your code to verify that it works against this list (choosing ranges between 2 and 541. Or go choose a larger list (there are lots of them out on the internet). Once that runs (and fails because you haven't written your code yet) you can focus on stepping through your code and compare it against the expected behavior. Put log lines in explaining what your program is doing and why. Then as you read those log lines comparing them to what it should be producing, it should become evident where you went wrong. I went through college (heck I went through my first 4 years in industry) not doing test-driven development and I regret it. Fortunately, I've since developed that skill and my coding is much better, less buggy, and less frustrating.
VBox = Top to Bottom,in order of controls. HBox = Left to Right (for LtR cultures) layout in order of addition. myVBoxLayout.add(topControl); myVBoxLayout.add(bottomControl);
Underscores should only be used in constants (static final variables), and you should not ever start a variable with an underscore. Also, constants should be all caps. http://www.oracle.com/technetwork/java/javase/documentation/codeconventions-135099.html#367
GridBadLayout is really nice.. but damn it can get annoying for a beginner like myself
I find lambdas in Xtend (e.g. strings.map[toUpperCase] or numbers.filter[it &gt; 5]) pretty readable as they almost read like a sentence. 
Inb4 Oracle ignores this one until there are exploits in the wild, too.
Meaning, I have to use slf4j in order to use libraries that use slf4j. If I write an application that uses log4j and include a library that uses slf4j, I cannot simply include that library. I now have to convert my application to slf4j. Thanks, but no thanks. We've chose our logger ... it's log4j and will remain log4j. We simply don't use libraries that require us to convert to slf4j.
It's easier to find vulnerabilities and prepare exploits with open source implementations around. IcedTea and OpenJDK arent very different from the Oracle binaries. This is also the first time in the history of Oracle where they had to deal with several million installations of it's software running on machines exposed to the internet (they're a middleware and database giant, not a consumer facing company). There are bunch of other factors involving Oracle, that I suspect are at play here, but it is probably not wise for me to speculate. You can easily contrast this with the approach that Microsoft takes to security. Granted they're worse than the *nix guys, but they've gotten better over the past 10 years.
I am not sure about Rich Faces but to do this in PrimeFaces it would look like this. &lt;p:column selectionMode="multiple" /&gt; 
Stop Immediately and learn: JavaFX.
I personally like the average of RGB, as the grayscale is deeper and seems to display more detail. You'd think the luminosity method would be best. But, it washes out too much detail.
Does ComputerScienceRetreat have a package declaration and/or any Import statements?
You say the course is so basic that you don't know what an important statement is, so I have a question. Did you write all of this or was part of it written by the instructor? I second poorlyObfuscated's import statement question. Edit: just a friendly tip (not a criticism) comment more. Comment everything. It may seem self explanatory but it will help you develop good habits.
Ah, fixed that part up and it reduced a large portion of errors, I've got the assignment done now!
this is bad too of course: * System.out.println("Andrews Tip: " + andrewsTab.get Tip(.16)); should be * System.out.println("Andrews Tip: " + andrewsTab.getTip(.16)); there are 4 spaces between get and Tip
Where is ActivityTab.java ? is it in the same directory as ComputerScienceRetreat.java? You should be able to do: javac ActivityTab.java successfully on its own. (Since it depends on nothing else.) Your errors are all referencing this ActivityTab class from your Driver Program. Focus on getting the smaller class to compile first.
hmm... interesting. never saw this. thanks
I believe Google wasn't considering an acquisition in the first place. When Jonathan Schwartz went shopping for suitors to acquire Sun, it was IBM and Oracle who were known to be interested. Schwartz believed that the bloodbath after an IBM acquisition would be larger; the rest is history.
This.. gave us nothing, really. It's basically "look at garbage collection" with no indicators of how to monitor it, no indications of patterns to look for (like the classic sawtooth pattern), no indication of what the different collectors do or the options to tune.. 
Yup, skener1 is a Scanner, but after adding that part of the code the whole switch statement just gets stuck in an infinite loop, even if the case is not default. Or am I missing something?
Also, you don't really need a switch or all of those cases. A quick rewrite would give this (the || operator stands for "Or" as in "this or that"): if (a1.equalsIgnoreCase("Yes") || a1.equalsIgnoreCase("Yes.") a1.equalsIgnoreCase("I am") || a1.equalsIgnoreCase("I am.") { System.out.println("Sentence1"); else if (a1.equalsIgnoreCase("No") || a1.equalsIgnoreCase("No.") || a1.equalsIgnoreCase("I am not") || a1.equalsIgnoreCase("I am not.") { System.out.println("Sentence2"); else { System.out.println("Sentence3"); } You could probably also strip any periods out of a1 prior to the if statement and cut out two of the conditions that way. Unless you just really want to use switch statements, which I guess is fine. I'm not really a big fan of them, but you could at least set a1 to all upper or lower case, like so: switch (a1.toLowerCase()) { // Cases here }
Like I said, I'm just a beginner and the switch statement seemed like a logical way to go. Still, your solution is designed better than mine. Thank you.
If you wrote it this way, it would only be an infinite loop if the input to the skener1 Scanner is infinite. The loop will end when the input to your scanner ends. What is the input to the scanner?
Question: If I have an application built on log4j, and one day I include a library that uses slf4j, can I use that library without having to convert my application to using slf4j also? My answer: No. I would have to convert to slf4j. This is the problem I've run into in the past, and there are libraries I've not used because they required me to convert to slf4j. Your answer: ?
I think it's fine either way, I just personally don't like switch statements. I've actually been wondering a bit lately when one is more appropriate than the other. Honestly, it probably mostly just comes down to personal preference, and neither approach is necessarily right or wrong.
Those benchmarks aren't very good. It doesn't test the exceptional condition, which is the expensive part. Also, the regular expression version isn't optimized -- the regex is compiled on each go. Correcting for this, here are my results. ByException: 1052 ByRegex: 708 ByRegexCompiled: 247 ByJonas: 26 That's a lot more in line with that I'd expect. Despite all this, optimization is a *really* poor reason to write code a particular way. Clarity is so much more important, which in this case is in almost the exact opposite order from speed. In my opinion, the (plain) regex is the cleanest solution followed by the exception solution, with the Jonas solution being the worse. The exception one loses points for relying on exceptions for normal code flow, but it's still clearer than the rest (and probably the most portable). 
It's the project folder (the folder that bin is in).
it'll be relative to where the program is run. However, as i'm still learning too, I'm not sure if that means it'll be in an executable jar or outside it but wont be hard to test.
You're right, I managed to fix it.
PS buffered reader is the way to go most times. save operation time by putting it all in memory!
What you describe is a small part of grid computing. Take a look at WebSphere Compute Grid for an example of how it can be used. Moving workload easily between systems would be a very useful function to have.
With the default String hashing function, collisions are very common with String based keys for large number of keys. Therefore ya it is way to speed up collections.
java.util.Scanner doesn't have anything to do with directories; it's about parsing input, probably from a java.io.File - so you should be asking where a new File's relative directory would be. And that would be the current working directory; the directory you are in when you invoke "java". For eclipse that should be the project folder. You can check by doing `System.out.println(new java.io.File(".").getAbsolutePath());`. It should be the same as `System.getProperty("user.dir");` (see [java.lang.System.getProperties\(\)](http://docs.oracle.com/javase/6/docs/api/java/lang/System.html#getProperties\(\))). now if you want to provide the file with your program and find it independent of where it is run from, your best option is to package up the project as a jar (so invocation is now "java -jar your.jar"), put the text file in your project source so that it is copied to the jar; then you can use `getClass().getClassLoader().getResourceAsStream("relative/path/to/file.txt")` which returns an InputStream (don't forget to check for null) which you can feed to the Scanner.... Because it uses the classpath to find the file it will work in Eclipse and when you package up your project (or if you run it directly on the command line a la `java -cp bin fully.qualified.MainClass` which is what eclipse does iirc) it will always work the same. which should be fine as long as you don't intend to use the program to write to it of course. oh, and, /r/javahelp ...
reply @ http://www.reddit.com/r/java/comments/10mxnt/whats_the_file_scanners_default_directory/c6f0vkt - let me know if that helps.
You don't seem like someone particularly receptive to reason, so I won't bother.
As others have mentioned you should use the interface in any public API of your own class or interface, for the reasons given, and more. As to your specific question around instantiation, the difference is that one declared variable can reference any list and the other can only reference an array list. Declaring the variable as list gives these advantages: * the code can be easily refactored to use a different list implementation which may provide performance or other advantages over arraylist. * the implementation, if unimportant to the rest of the methods can be injected at runtime by a dependency injection framework, reducing the coupling of your class, leading to more configurable and maintainable code. * the reference can be reassigned to any other list further down the method, if for instance you want to reassign it to a returned list from some other interface. Disadvantages: * you will not have access to implementation specific methods of the class (though this is also what helps with easier refactoring. my 2nd advantage above is not applicable if you *must* New the variable there, but you should really think about whether you can inject it and break that dependency. On my phone, so apologies for brevity and any formatting errors.
Not all Maps are HashMaps - there is also TreeMap. There are two types involved in the assignment List myList = new ArrayList(); The left hand side and the right hand side have different types. In fact, any variable with an object assigned to it must have a variable type, and the type of the object it holds.
Thanks for the massive response :&gt; Okay, so I found out that when I run the program from command prompt, it looks for files like it should do in the bin directory, or wherever it's being ran. However, in eclipse it looks in the workspace folder. I'll try and find a way to fix this, but maybe you know a way? Thanks again :D
Sounds a lot like Code Mobility you're describing. Take a look at this recent project on Google Code: http://code.google.com/p/mobility-rpc/ One suggestion (not my own) for what you are describing is to use this technique to gather sensor data from a geographically diverse set of machines. Where the 'thread' or object traverses the machines gathering collecting and collating data.
As you said Map and List are the interfaces. By themselves they are useless since they don't provide an implementation. The corresponding classes HashMap and ArrayList are some implementations, although implementations exist too and you could even build your own as long as you implement the interface methods. Now about your question wether you should favor to declare a variable as Map vs HashMap or List vs ArrayList? For internal variables within a function it doesn't matter to much, although you should stick to the interfaces. The reason is that even in your own code you could decide to change the implementation ans swap an HashMap for a LinkedHashMap and you will not have to change your declaration type. Another reason is that you could decide to synchronize the collection or make it immutable and you can only use the interface from that point on. Let's say that you want to return a List an you have this code: List&lt;String&gt; foo = new ArrayList&lt;String&gt;(); MyClass() { this.foo.add("hello"); this.foo.add("world"); } List&lt;String&gt; getFoo() { return this.foo; } If you want to make sure that no one can modify your list you can simply do: List&lt;String&gt; getFooReadOnly() { Collections.unmodifiableList(this.foo); } If you would be using ArrayList as the return type you wouldn't be able to accomplish this. With the interface you can swap the implementation while keeping compatibility. You can also do the same to synchronize a list with Collections.synchronizedList(). There are moments when using the class does make sense. So far the only occasion that I found that fits that need is if you're going to serialize the collection to a method that takes Serializable as an argument. In the android framework this is common, in that case you need to use the class or to cast the interface into a Serializable. 
There's another factor to take into account which is not mentioned here already: when the JVM knows the specific implementation of the method which will be called it can hard-code the jump to it or inline it. Calling a method via the interface (unless there were only one possible implementing class loaded, which will probably not be the case for List and Map as they are used a lot by the API classes) requires a virtual method call, which has more overhead.
So, you are basically saying that adding 3 lines in you pom.xml is too much work? Then why on earth are you even logging? It's WAY too much work! just let things crash and let the users figure out themselves how to report meaningful bug reports...
May be you should use [OSXAdapter](http://developer.apple.com/library/mac/#/legacy/mac/library/samplecode/OSXAdapter/Introduction/Intro.html#//apple_ref/doc/uid/DTS10000685-Intro-DontLinkElementID_2) as a starting point
How, where? I never heard of FLOSS before .... . 
I believe if you make printStars a static method, you won't have to instantiate an object of the same class to call it from main because main is a static method.
It all stems from Java's use of Objects. The main method is static, which means that there is exactly 1 instance of it. It doesn't matter how many instance of printTriangle you have, there will only ever be 1 instance of main. The printStarts method isn't static, so for every instance of printTriangle, there will be a different printStars. The new keyword creates a new instance of it, there could be 0 instances, there could be a million instances, each one might give a different output depending on the values of its member variables. Because of this, it isn't possible to call a non-static method from a static method with first creating and specifying the particular instance you want to use. If you add the static keyword to the deceleration of printStars, it will becomes static also, and you will then be able to call it from main. I hope this helps, although I fear my explanation may go over your head if you've not yet been exposed to objects and classes. 
The way OP wrote it, I find the switch more readable. Though I would probably use regular expressions and/or equalsIgnoreCase.
Lots of people giving good answers here, but just in case none of them did it for you, you're thinking of "printStars" as a function. It *is* a function, but unlike the functions you're probably familiar with from C, Perl, JavaScript or Python, it is also part of a class and an object. Each of those languages supports the notion of having a function as part of a data structure. (For C, it's a function pointer. For Perl, it's a function reference. For Python, I actually have no idea.) But in Java, functions *do not exist* outside of classes. So, you always have to tell it what class a function is in. It's called a "method". But that's just a word that means "function belonging to a class". In fact, in Java, it's much more common to call them all methods, and "function" is less common. (It's still correct, and people use it, but they are *methods*. Also, some languages make a distinction between procedures and functions, but "method" includes both.) So, a class is a collection of data and methods. But you could think of those as global. The data and methods on the class itself are called "static", like your main method. It's available as soon as the class is loaded into memory. The java environment is actually calling "printTriangle.main" for you. (As an aside, "printTriangle" is a bad name for a class. Every class should start with a capital letter.) You can allocate a block of memory for an *instance* of the class. Anything that doesn't have "static" in front of it, like "printStars" is something that belongs to an instance. It's an instance method. You create an instance by using the "new" operator on the class. It allocates memory for the instance and then calls the "constructor" for that class, which is empty if you have not written one. So then you have an instance, named "ps" of the class "printTriangle" and you can call that instance's "printStars" method. This gets to be important when you have many instances around and each one has different values stored in the member variables for that instance.
what he is trying to do is, sort the results from the game, by the # of tries, and if those tries are the same, sort by the shortest time (time beeing a double) :/ we are lost lol
 public int compareTo(Object o) { Node n = (Node) o; if(n.getTries() == this.getTries()) { if(n.getTime() &lt; this.getTime()) return AFTER; else if(n.getTime() &gt; this.getTime()) return BEFORE; else return EQUAL; } } And as for the sorting: ArrayList&lt;Node&gt; players = new ArrayList&lt;Node&gt;(); // magically fill the array with elements somehow... Collections.sort(players); Obviously you'll need to handle the cases where the number of tries aren't equal as well.
Isn't this a duplicate of http://www.reddit.com/r/java/comments/10n3c1/jdk_bug_migration_moves_to_jira_public_system/ ?
You're welcome, and thank you for appreciating it because it took some time to type out!
I think it would work better if you made a constructor for "item" that holds the name of the item and accepts user input as arguments. Or better yet, the name if the item as entered by the user will create a new instance if "item". So, when you enter "apples" , that is assigned to a new instance of "item" and the rest of the args will be assigned to that particular instance. I hope I made that clear enough. 
This made a lot of sense. Thank you.
http://lmgtfy.com/?q=servlet+hello+world
A while ago I wrote a 3-part [article](http://obscuredclarity.blogspot.de/2009/11/hello-world-java-web-application-in.html) just for people like you. I also published a bunch of [Hello World webapps](http://xeiam.com/hellowebapps.jsp) demonstrating various common web app concepts, which are available on [Github](https://github.com/timmolter) too.
What about Java 8 being a better Java (than Java 7)?
is your command prompt running in the bin folder? that would be why... eclipse runs via the command prompt (sorta) in the project folder. which is why it is preferable to reference included resources using the classpath.
Yes you can so this all in one class all inside the main. Read the javadocs on scanner or file reader. That will help. 
Is the file in the same directory as your .java file? If not you have to use the full path probably. (c:/documents /..... /file.txt)
How about neither. I like the job security, tools and available libraries for Java. And Java is a good and solid language compared to the other two (come on scala is a minefield for anyone that is not an expert, and I don't want that in a workplace nor do I want to try and hire people who know it, talent pool is to small). let's just say I won't Bet my career on them but your can feel free to pick one and see if you can find a job :)
So 8443 sounds like an SSL port. Did you set up SSL in JBoss? It should also be available on an HTTP port. I think JBoss listens on 8080. 
"This Operation is not applicable to the current selection. Select a field which is not declared as a type variable or a type that declares such fields" I want to reiterate that I'm very new to this, so I could be making a very simple mistake. The only code I have is opening and closing my class so far. I could have typed these methods out in the time it's taken me to figure this out ;) 
Try port 8083, it looks like that is the default for tolven-jboss-4.2.2.GA.zip that you probably installed. (tolven-jboss-4.2.2.GA\server\tolven\conf\jboss-service.xml) However, instructions I found show to use 8080. [(Instructions)](http://wiki.tolven.org/doc/index.php/Installation_Guide)
How so?
Not statically typed, so kinda not a better java.
Doesn't change the fact that it offers nothing significant over Java while adding some serious pitfalls if you are not highly proficient and it is nowhere near as supported as a language.
Format.formatArrayNumbers(int[]) Did you know about the Arrays class? java.util.Arrays.toString(int[])
Or better, give the object of class A a reference to the instance variable directly so it doesn't have to ask the object of class B for it.
Groovy (2.0+ with @CompileStatic, Groovypp otherwise)? Fantom?
Actually, it's the old way to do an Iterator.
I always refer to this site: http://javarevisited.blogspot.com.au/2011/08/enum-in-java-example-tutorial.html Explains it pretty well I think
This step is the same if you import a library that uses log4j, so I don't see your point.
[lmgtfy](http://lmgtfy.com/?q=Borland+Together+plugin+for+Eclipse)
Inferred returns and optional semicolons, and I thought I saw some loosely typed variables too, but I guess it was just inferred types. Honestly, I would probably enjoy it if I got used to it.
The optional semicolons are actually really well done, and not a problem at all. Generally a line end will count as the end of a statement unless you have an incomplete statement on that line IE: val x = "hello " + "world." Inferred returns also work pretty well. The only return point in a function that will be inferred is at the end, so for example: def returnHi = { println(5); /*do stuff*/; "hi"} def isA(x: Char) = if(x == 'a') true else false Both work perfectly well. The return type of the first function is a string (this can be manually specified too), and the return of the second is a boolean because if acts like an expression like 1+2 in scala, not a statement. 
Scala does offer significant functionality over java, this article just focuses on scala as a nicer java, not as a language with significant features of its own. One that I am particularly fond of is streams: def fibStream = { def fibHelp(x: Int, y: Int): Stream[Int] = (x+y) #:: fibHelp(y, x+y) 0 #:: 1#:: fibHelp(0,1) } println(fibStream.take(8).toList)// Prints List(0, 1, 1, 2, 3, 5, 8, 13) Streams allow scala users to define list-like structures that are generally not possible with other constructs. In my example, I have defined an infinite stream of the Fibonacci sequence, and I can pull from it, iterate through it, or anything else as needed. The elements of the stream are not calculated until they are needed, so if I were to iterate over this stream one element by one element I would have a static usage of ram. 
We're talking about [Enumeration](http://docs.oracle.com/javase/7/docs/api/java/util/Enumeration.html), not [Enum](http://docs.oracle.com/javase/7/docs/api/java/lang/Enum.html). Of course it's entirely possible that the OP meant the latter. 
Nevermind then ..
Optional semicolons makes a ton of sense to me. If the compiler can tell me "You're missing a semicolon at line 30, column 38", why can't it just put one in?
Eh yep, I'm wrong. Didn't give it a good enough look. [sarcasm] Who look at documentation anyways? [/sarcasm]
You can re-write that a lot cleaner like this: public int compareTo(Object o) { Node n = (Node) o; int result = Integer.valueOf(this.getTries()).compareTo(n.getTries()); if (result == EQUAL) { result = Double.valueOf(this.getTime()).compareTo(n.getTime()); } return result; } And delegate to the compareTo method on Tries and Time. That way you don't have to worry about all the comparisons and ordering yourself, because it's already done there... Also - don't use floating point numbers for this kind of thing. They aren't exact. Use a Long and measure in millis, and you will get much more precise results... I used Double above because that's what you had in your code, but it's very possible that you will have unexpected ordering because of it...
Like I said, I'd probably enjoy it after getting used to it, and having coding standards would resolve most of the loosey gooseyness.
Yes, I agree... My example was intentionally verbose for educational purposes, although I don't think I made myself clear enough anyway.
The main difference is that Enumeration works better for static sets - when you can't change the contents of what you are looping over - and Iterator works better for dynamic sets - when you can change the contents of what you are looping over. In particular, Iterator gives you the remove() method to remove the item you are looking at from the collection, which Enumeration doesn't allow. Iterator is also safer to use in a threaded environment where other threads may be modifying the collection that you are working on, and *should* fail if the collection gets into an inconsistent state compared to the iterator...
Exactly. Slf4j is not a logging system per se. It's a logging api (call it a facade if you prefer) that focus on the main features that you will find on nearly every logging library. All the hard work of really logging is delegated to the logging library YOU decide to use in the end (log4j, JUL, commons logging, logback, system.out...). At load-time, they look for a bridge (if there are more, an error is raised), and all the calls are transfered using the bridge. And as a bonus, it comes with some little helpers, like automatically performing a "if(log.isDebugEnable())" wrapping arround the log, or using string interpolation to avoid concatenation if the logging is disabled. 
You're likely out of luck on this. Oracle maintains the official compiler, and would have little reason to port it, and GNU compiler can't be licensed for that environment. 
ConcurrentModificationException falls under new functionality. From the vague question, I was assuming that specifics weren't needed. In most situations where performance would matter, CMEs would matter even more.
Well, when I needed to brush up I just ran through Head First Java, which is very much a beginner book. There are tons of java books out there, just find ones with lots of good reviews. I haven't seen %4d before (though I'm hardly a java expert), but some quick googling reveals that it is telling the program how to format the output, apparently specifying that it is a decimal (the d) and to print a minimum of 4 characters (the 4). System.out.printf is just a way of saying "write out some stuff" usually to the console, and the arguments in parentheses specify 1) How to write it, and 2) What to write (in this case, the result of multiplying i and j together). Does that make sense? Seems like a rather contrived and silly example, especially since I don't see how throwing fairly obfuscated things like "%4d" can possibly help anyone's learning experience in the beginning of an Intro course, but oh well. It does bring up another point, which is that most of your questions can probably be answered by googling. Between stackoverflow, reddit, blogs, ebooks, and the actual java docs themselves, you'll be able to find the answers to most of your questions without actually buying a book.
Well, not really. Receiving a binary stream via rs232 from a pic. Sorry. On phone with baby.
&gt;I haven't seen %4d before (though I'm hardly a java expert), but **some quick googling reveals** that it is telling the program how to format the output, apparently specifying that it is a decimal (the d) and to print a minimum of 4 characters (the 4). This. Google your butt off. You're not the first person to get confused and you won't be the last. Learn from other people's confusion.
I would highly suggest checking out the [Character api](http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Character.html), especially some of the methods involving upper case and lower case. Java also allows using the "&lt;", "&gt;", "&lt;=", "&gt;=" and "==" operators for comparing character, I would recommend experimenting with that. To get keyboard input try using the Scanner class, google will turn up hundreds of examples.
Thanks I already did that :) I wanted to discuss the plugin usage with other redditors if possible.
Effective Java is pretty good
If you have an iPhone, download iTunesU app and there is a class with a whole bunch of lectures for intro to Java
Is there a separate subreddit for enterprise architecture discussions, and not just homework help requests? How about what should I use for transaction management type questions? soap vs rest? Etc...
In my opinion "Effective Java" is not the best choice for beginner. I would rather recommend you "Thinking in Java" as a good starter.
There's actually a separate reddit (/r/javahelp) for homework help style questions. But they all get asked here anyway...
+1 for Thinking in Java. I have been programming for 10+ years and this book got me up and running with Java in few days. It has excellent chapters about generics, and you should try to do all the exercises.
catch-exception looks like a very nice addition to JUnit.
It's GPL'd, which is incompatible with the App Store. Assuming that no third parties have submitted code patches, someone could theoretically license it from Oracle under different terms and put it on the App Store, but who knows how much that might cost. 
Table of Contents - Java Programming 
oh wow! that looks great! I'll get an iTunes card for that! Thank you :)
The main problem I see with this is that if you have a good algorithm, you would make more money by not sharing it with others
Yes, otherwise it'd be ugly to have the second level of the array be an `Enum[]` with constant `suit = 0` that should be `SUIT = 0`, and ditto constant `rank = 1` which should be `RANK = 1`.
Second this, both the head first series and especially Effective Java is a must read :-)
In that case the syntax would be `cards[0].get(SUIT)` and `cards[0].get(RANK)`.
mouse over the field and hit Ctrl+1.. It would give you some options.. select generate Getters and Setters..
I'm not too keen on understanding, but I just learned about this topic yesterday in one of my own programming lectures. So, for example, let's suppose you want to make a calendar of some sorts. You could represent the days of the week in this calendar using the integers 1-7 (or 0-6 if you're a computer scientist). This could work, but now you have about 4 billion places to screw up. To mitigate this flaw, you could use enumeration, which is used much in the way that classes are, i.e. public enum DayOfWeek { /* class body */ } With enumeration, you can enumerate (for lack of better words) the different objects that can be created (i.e. SUNDAY, MONDAY, TUESDAY, etc.). Using this and the enum class header, Java creates a new type called "DayOfWeek," and the only objects of that type that can exist are the ones named after the header. The rest of the "class body" can contain constructors, methods and fields, just like regular old classes.
... So there it is; my mistake! Thanks.
you make a good point on the day to day algos. what kind of vetting do you do for the market? obviously, when trading options there can be significant real money risks for traders that use the algorithms. what kind of testing and more specifically edge case testing is there to protect your customers?
Um what now? Can you provide an alternate description of what you're trying to accomplish?
Nope, Indigo here. I want to upgrade because there is so much wasted space all over and my debugger doesn't seem to work entirely correct. Might hold off for a while though, as I'm on OSX so... can't expect too much.
I have not looked at it but I am adding a link to the showcase. At a quick glance it seems to have a large set of quality components.
Aha, thanks for the heads up. I'm using Android SDK, and just started earlier this year... so I don't think I have other options. Meh, I wish XCode had an Android SDK but that's a bit blasphemous. I made random command prompt Java code with XCode and really liked the UI. edit: XCode rather hehe.
IDEA has an Android plugin too.
Interesting....................
I think there are just there to communicate intent and usage of a type, not for the compiler to use. It's a standard way of communicating type constraints for an API. Instead of finding this detail in the docs after you run into a problem, your IDE or favorite bug checking tool can warn/prohibit you from making mistakes. As with wildcards in generics, the normal Java programmer will only stumble upon them when using a library.
Who the hell cares? Nobody uses applets any more anyway, save corporate intranets, and the sandbox isn't really used anywhere else. The vast majority of what Java is used for today is not affected by the "basic security" you're talking about.
I use it and have had no problems yet. I am on a Linux machine and primarily use it for game and android development.
At work I have to use Eclipse and I haven't had any problems with Juno on OS X. Currently using it with viPlugin, Android SDK, and the WebSphere Liberty Profile plugin. That being said, I still refuse to give up IntelliJ at home.
I've not seen anything on Java Batch support. Has anyone written anything up about it? I normally have difficulty parsing through the practical stuff vs the fluff on the JSR pages.
Length of Array in Java: Yes, it is much easier than in the C/C++. The array.length property in Java does this. It is not a method, it is property of arrays of any type. Therefore, determining array length of any type in Java is easy and you might have been in a fixed state, that you can do it. Right? So let's start it.
Check if a String is Empty in Java: What does this mean? Nothing, check whether the length of the string is 0 or not. That's it and nothing more than that. Looking simple? Yes it looks, the isEmpty() method makes it much more easier than you do in other programming languages like C/C++, like just determining the length of the char array, and checking if it is 0 or not. If it is, then it is empty if it is not then it is non-empty. Here is how-to.
I've not read the JSR, but I've been looking forward to a feature like the one you're describing for a long time now (several years). To address your concern, I believe the following is a view that is self-consistent with your idea and consistent with all of Sun/Oracle's documentation and API. * Classes and interfaces already do not fully characterize a type: List is a class, List&lt;String&gt; is a type but not a class. * [] is not a type nor a class. String[] is a type and a (dynamically defined) class. * Just like List&lt;String&gt; is a different type from String, @NonNull String is a different type from String. * I don't know if the JSR defines such a concept, but I'd also like to see a @Nullable String, and an option to flag warnings whenever you use a type like String without the @NonNull or @Nullable annotations, just like you get a warning if you use List without specifying a generic parameter. * Just like int can implicitly convert to long, @NonNull String can implicitly convert to (raw) String, and @Nullable String. The reverse is not true. * Just like convert a long to an int requires a cast, converting a @Nullable String or a (raw) String to a @NonNull String requires a cast. It might be even better to borrow ideas from Scala's match syntax: public void printNullableStringLength(@Nullable String s) { match(s) { case null: System.out.println("String was null"); break; case @NonNull: //Safe to dereference since we know s cannot be null here. // (unless you forgot to break in the previous case?) System.out.println("String length is " + s.length()); break; } } except I'm not quite happy with the above syntax, and I'm not sure how to make it better without just basically copying Scala exactly, as oppose to morphing the Scala syntax to feel more "Java-ish".
I thought JCACHE died years ago. Great to see it revived. Hopefully it can reduce vendor lock-in.
It nearly died, but was kept in a kind of zombie state. Then some guy called Greg Luck came along and revived the thing.
False. The issues you're talking about are irrelevant to Java applications for the desktop or server. They are only relevant in two contexts: Java applets, and Java Web Start. Both of these are only used extensively in secured corporate intranets.
Well surely you've done averages before? And it's really not that different in Java. private static double findAve(int[] numbers, int cnt) { // Iterate through the array and add each value to a field (int total) // return total / count; } Simples :) Once you have that working, you can implement your methods in a way like this: for (int i : numberArray) { if (i &lt; findAve(numberArray) { System.out.println(i + " is below the average"); } } Making sense? Once you have those done, to find the min/max you can iterate through the array and check if the current number is less than the current min. If it is then assign the number as the new min. Once you reach the end of the array you can return min as you know it will be the lowest value
I've been using it since it came out on WinXP. I haven't had any stability problems, but switching between editors (Java/XML/JSP) takes way too long. Once I'm editing the file I don't have a problem, but when you are doing web development with a Spring context, Maven POM, XML, Java, and JSPs, it really slows you down! Hopefully they will fix this soon.
 int numberOfMatches = 0; while (inputFile.hasNext()) { char[] line = inputFile.nextLine().toCharArray(); for (char c : line) { if (c == character) { numberOfMatches++; } } } Try this?
Try this: int matches = 0; //Loop through file for specified character while (inputFile.hasNext()) { String lol = inputFile.next(); for (int i=0; i &lt; lol.length(); i++) { if (lol.charAt(i) == letter) { matches ++; } } } System.out.println("Numbers of matches for \"" + letter + "\" in \"" + filename + "\" = " + matches); EDIT: Oops, got ninja'd, haha...
So many statics
What do you mean by plugin support? What goal are you trying to accomplish?
The vulnerabilities in the Java sandbox allow privilege escalation if and only if the Java application in question is already executing arbitrary Java bytecode. Normal Java applications (desktop or server) do not execute arbitrary code to begin with, nor even enable the sandbox at all, making this a non-issue for them. There is no vulnerability that can be used to force any given Java application to load and execute arbitrary code. An individual application might have such a vulnerability, but that would be a different issue specific to that application. The sandbox itself doesn't load any code; it just applies restrictions to code that is already loaded.
yes try that, or try hitting it twice if that doesn't work. Also, you're sure it is YOUR manifest file being included in the jar and not an auto generated one right?
Correct. The sandbox has holes. If you're not using the sandbox to begin with, they don't matter.
Because deadline.
Thank you for the reply! My main problem is really just adding graphics created in two separate classes, each extending JPanel, to the JFrame in my main class. Maybe the way I've structured everything is just incorrect. Thanks anyway!
I know this isn't exactly on topic, but could you explain emacs for me? 
If you're doing your personal projects in python, ruby, javascript, etc, then I totally agree - SublimeText is awesome. For java, however, god help you. When you have a ton of imports to type out at the top of the file, it gets old really fast. Or when you want to rename a variable - Ctrl+Shift+R in eclipse and you know it's statically checked, or grep for it and end up accidentally changing too many occurrences and breaking the build. There are just many classes of errors you get to avoid when in an IDE. It feels slow because it's indexing all of the source code so it can incrementally compile every change you make as you type, which is a huge productivity gain. I think using an IDE for Java has way more upsides than it has downsides.
I'm curious how big these personal projects are? I honestly can't imagine being within the same order of magnitude of productivity when working with multiple 100K+ LOC projects without an IDE in Java. Plain text editors are great in the type of projects where you're actually familiar with every single LOC within the project. This isn't ever true in enterprise java development. Also, IntelliJ is much more enjoyable to use than eclipse. 
It comes with a nice manual explaining the basics, but if you want to know why I use it, there is a bunch of reasons: 1. It's really easy to extend. Emacs is actually an ELisp (Emacs Lisp) interpreter with built-in functionality for text editing, but anything that you could do with LISP, you could do in emacs. That's why there are so many extensions for doing so many things, including reading email, editing your blog and chatting in IRC. 2. Macros. Oh, god, macros. Everything you type in emacs is actually a command (when you are just typing letters, it's a insert command getting into action). You can use a macro to store every command you type and repeat later with only one command. You can repeat any command with C-u &lt;number of times&gt;, INCLUDING stored macros. 3. Rectangle manipulation. You can insert, delete and modify, besides normal selection, rectangle selections. Really useful for a lot of one-line comments. 4. Lots and lots and lots and lots of functions that makes it faster to "reach" code parts without using the mouse. Need to get to a line that contains "printf"? C-s printf RET. Need to go to line 100? M-g g 100 RET. 5. Everything is on the alphanumeric keyboard. You don't need the home, end, insert, delete, page up, page down, arrows... everything is at the reach of your hands. 6. If you don't remember the shortcut keys of a command, you can use M-x &lt;name of the command&gt; to use it anyway. I didn't managed to remember a lot of shortcut keys, so I use it often. 7. You can access any shell directly inside of it. This may seem irrelevant, but the next point will show why this could be useful. 8. Buffers and windows. Buffers work more or less like tabs (in fact, I made Ctrl+tab a shortcut to switch between them), but you can switch to a specific buffer with C-x b &lt;name of the buffer&gt;. There are also windows, which you can create with C-x 2 or C-x 3 and close with C-x 0 (or close all besides the current with C-x 1). They allow you to open two files (or two, or three, and also things that are not files) and visualize them at the same time. You can, for example, visit a file in one window and the bash in the other. This is REALLY useful when accessing something through SSH (yes, you could have similar results with screen or tmux, but then you'd need to log in twice). 9. You can run emacs as a daemon and open different clients for it. Why would this be useful? Well, all the clients share the same buffers (if you modify one, the others will also update themselves with the modifications in real time). So, you can edit a lot of things, close the client, and emacs will remain there, exactly as it was. 10. You can edit a file through FTP, SSH or anything directly through emacs easily. No need for downloading, editing and uploading again. You don't even need emacs installed on the server. Seriously. 11. Keep in mind that a lot of these things are also valid in vi/vim, but vim users focuses only on text editing, so you won't find a lot of extensions for things that aren't text editing (and I think vim doesn't have a daemon nor separate windows). I prefer emacs, though, because I don't like vim's modal editing, I prefer shortcut keys. That's my personal preference, and you should be aware of that. 12. Lastly, but not least, you can play Tetris on emacs (M-x tetris).
You can do some modifications on your .emacs file and your .Xdefaults for changing its appearance. I don't know how far this modifications go, though, since I don't have problems with most of it. But my modifications, for instance, are these: http://i.imgur.com/oaMQE.png (No, my emacs does not have a wallpaper. It is just transparent, so I can see my desktop's wallpaper). I changed the background to black and the foreground to green (because hackerish), set some transparency and got rid of the menubar and toolbar (I didn't use them at all, it was just a waste of space for more text).
What languages is it used for? And does it work with Windows? I'm intregued, but overwhelmed. 
You can develop pretty much anything on it. It's (in theory) just a text editor. Compiling, debugging and stuff should be left to more focused tools, as make, gcc, gdb, rake or whatever. And yes, it does run on Windows. I don't know if .Xdefaults would work, though. I think you should look for other methods for changing the colors. Oh, this reminds me: emacs also has its own package manager. It's really new (it was an extension on emacs 23, now it is built-in in emacs 24, which is the most recent version), so it's far from perfect. But it's really useful for extending it. Also, emacs has a fork called xemacs. I never checked it out, but maybe it will attract you.
&gt;Why did IDEs like eclipse become so prominent in enterprise dev jobs? Because working without autocomplete is really slow and awful unless you are 100% in your own code, or code you're intimately familiar with. Because ctrl+clicking a symbol to jump to its definition is far faster than the alternative. Because "find and replace in files" is not a refactoring operation. It's a "break the project" operation. Because a good IDE does static analysis as you type. If you think you don't need static analysis, you're the guy who needs it most. Because vi can't attach to a running process for debugging. If you aren't ace at debugging, you aren't a software engineer yet. (println debugging, while useful, doesn't help with everything) Because notepad doesn't integrate with my version control system. Because I can't be bothered to remember what obtuse namespace contains the class I want to use. IntelliJ + Java is awesome. Visual Studio + ReSharper + C# is awesome. Eclipse is awful.
I agree. I had to slowly make this transition as I picked up Java. I love -- *love* Python, Sublime Text II, and my command line. However, for java, being that it's so verbose and such a pain sometimes, you just need the editor. It's honestly pretty begrudgingly that I use an IDE, but once a Java project reaches a certain threshold, it certainly makes things a hell of a lot easier. 
I work on an enormously-large (400 MB ZIP file'd WAR) STRUTS web project and I can't imagine not using the numerous benefits Eclipse provides over a Text Editor. I'm sure I could get used to it but as others have said, for me the simple corrective stuff as I type, my formatting macro (CTRL SHFT F), using CTRL SHFT R to find files in our forest of libraries, using WickedShell cmd-line plugin , Quirks, Debugging....sorry, it's not even close for me. Am currently using 8GB of RAM so performance isn't an issue. BUT...for your resume, anything you can add in the line of acronyms and experience is a good thing so I salute your abilities to work seamlessly in both environments.
There's nothing wrong with using a text editor. The reason IDE's are so popular is because they often make things a hell of a lot easier (Eclipse is the perfect example, especially when writing Java) and I also believe there's nothing wrong with that. To each their own, I guess.
I'd suspect productivity. I'm not sure if any studies have been done, but I'd imagine it would take longer to develop an enterprise app without an IDE. It would probably also be more difficult to maintain.
Why did Eclipse become so popular? I'll tell you: because Java devs like ourselves deserve to be punished for some unknown sin. I don't know who we offended, or what we did. But it's really the only explanation that fits the facts.
&gt; Now when I use eclipse I can't tolerate its sluggishness. Eclipse has rarely been praised for its responsiveness and speed. It seems that Juno, the latest iteration, is the worst offender and is particularly slow. IDEs offer boosts in productivity that are harder (but not impossible) to get with powerful text editors. Did you try IntelliJ ?
Did I count wrong or was that way over one line? 
The list of advantages of an IDE over a text editor/command line is a mile long. A text editor has it's place editing a shell script or configuration file but falls way short as a development tool. If you find your IDE is sluggish you need to talk to your boss about getting you a proper development system. There's no excuse for having a sluggish system when you can buy a very powerful system for $600 these days.
Eclipse for java. Vim or sublimetext for all else.
Community Edition is free and meets all the needs of an SE developer. Otherwise, IntelliJ gives away free copies like crazy at most Java User's Groups. I think I've picked up almost every major version for free just by attending the local Java User Group meetings. 
I use Eclipse for editing/debugging code, that's it. For everything else (building, servers, version control) use command line. EDIT: One of the best devs on our team uses emacs, so to each their own. The editor doesn't determine the programmer.
Because a text editor alone is not a development tool. You also need make/rake, find, git, etc. See my post here: http://www.reddit.com/r/java/comments/10z40e/why_did_ides_like_eclipse_become_so_prominent_in/c6i191y
I'll never understand this craziness. Beyond just debugging, there's so many things tied in to having an IDE with a deep integration with the JVM (assuming (maybe wrongly) you're using Java) and Java syntax. Code generation and refactoring, analysis, Spring wiring, quick javadoc referencing, etc. When I have this argument with people tied to the editor and command line, they always seem to pooh-pooh these things as unnecessary, or show me how they do something similar in their editor, only half as well. I do understand preferring lightweight and responsive, so that is a better argument to me. It doesn't affect me, in that the machines I work on are beefy enough. But I think people who go with editor+command line are just tying their own hands. (My own brother being one of them, and he just might chime in here to tell me I'm nuts.)
People use IDEs because it's easier than not using an IDE. You just have to rename a Java class that's used in 20 other random places to see it. 
If you don't have line 3 you don't need line 1 so it is a one liner no matter how you count it. 
Emacs has autocomplete, and it works fine a lot of times. You can make template documents easily enough. It doesn't have auto-import, though. But yeah, I don't use emacs for Java, either. Other languages, on the other hand...
I only use eclipse for Java development. I don't know if I made that clear before, but that's true. But I understand why people like emacs.
I understand what you're saying. IDE's are certainly still applicable though. Just because modern operating systems can multitask easily, it doesn't make IDE's pointless. It's still nice to have all your development tools at your fingertips.
You are mixing configuration with using the api. BasicConfiguratior.configure() only needs to be called once at startup and logging will output to the console. For toy projects this is enough. Changing the logging level is optional. private static final Logger logger = Logger.getLogger(LoggingOneLiner1.class); is using the logging API, not configuring it. This line of code wouldn't change if we wanted to alter the configuration. BasicConfigurator.configure() is pretty useless beyond toy projects and developer utilities anyway since logging to a file or a network receiver is typically how production code is configured.
Not to sound like a smart ass, but that's why you Google as much as you can now. Learn more for later use. 
The code bases in a typical enterprise environment are sufficiently large enough that trying to work in a non-IDE becomes an exercise in futility. Imagine you now have to maintain something with 10,000+ classes/interfaces/whatever along with all that code spread across hundreds of different modules and projects. If you can do this in emacs/vim/texteditorOfYourChoice then fantastic for you. Most people cannot or will not work this way. Eclipse is popular because of the cost. IntelliJ is far superior but less popular because of its cost.
Today, i easily did some refactorings in IntelliJ IDEA in a few hours that would have taken me *days* to do with a text editor. Or more realistically, i would not have done them at all because it would have been a ridiculous amount of work and i had to be done today. I would not have done them at all if i didn't have my powerful IDE. I'm not confusing anything. When something nearly impossible suddenly becomes easy and quick, that is **power**. 
I'll die before I go back to a text editor. For quick scripts and glancing one file they're the best. But I can't imagine trying to tackle a 2886 java files project with intertwining dependencies without my IDE. From my cold dead hands I tell you. 
An IDE isn't slow compared to the power you get. Of course an IDE requires more CPU and memory than a simple text editor. So what? People used to complain about Emacs being slow too. Get a better computer if it is such a problem. It's like complaining that your car uses gas, when the alternative is to get out and push the car.
LOL All I did was agree with you originally, and somehow it got your panties in a twist thinking that I was trying to start an IDE vs TE debate. I wasn't trying to "add to the discussion", I was just trying to agree with you. I think what we have learned here is that you have a confrontational personality.
Well, i don't agree with you. Your claim that text editors are more powerful than IDEs because they use less CPU and memory is to me completely ridiculous.
Not only that but I think Eclipse does it better. People keep talking IntelliJ but who is using IntelliJ. Who uses IntelliJ for a little bit and then returns to Eclipse for bigger projects.
Fantastic. Have a nice day!
Java Delete a Folder: One of the easiest ways to delete a folder is to apply a smart logic. When you have got it into an idea, you will have to immediately recall that it is 'repeat' what can do the things go. Well, if i want to delete a folder, then all i need to do is to delete all the files in it including the folders and finally the folder itself. Here i have written a simple method and also explained it how-to delete a folder in Java.
The only thing better in my opinion than an IDE like Eclipse or Netbeans, is VI. And VI is lightning fast. Learning VI is not lightning fast. Nor installing all the features you'd have to to get it to run like Eclipse. 
If you'll be happy I just change my mind and represent it as RGBA :))
[ServiceLoader](http://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html) can be used as a *very basic* plugin system.
Eclipse gained a ton of traction because it had intelli-sense since before 1999 and java is verbose. It supports all the enterprise boilerplate and techniques with a little plugin system. Speeding up Eclipse is an art relating to the memory management of the JVM, complicated by plugins that are designed inefficiently - does it give me intellisense or static checking, we're done! feel free to improve our 200k lines of uncommented plugin code if you don't like it. My first personal project Java program was about 500k lines of code. Without an IDE I would have given up in a week. I cannot remember the last time I designed a Swing UI in anything other than Netbeans, but end up porting the code to Eclipse for development. I have had the pleasure of interviewing some ex-Sun developers who still did the same thing (circa 2009). I would never willingly use a text editor for Java.
&gt; I'll never understand this craziness. It always happens when a n00b discovers the command line... it takes them awhile to notice that most of us weak and pathetic IDE users always seem to have 3 or 4 terminal windows open alongside our IDE.
Lots of CPU idle time, DUH.
It's so cute when the kids think they know what using DOS was like.
I'm seriously confused. What about the IDE is less powerful than the text editor? If you can code, debug, revert changes, update projects, commit to source control, and test all in one application that also sports factoring tools, how is that not more powerful software? I don't want to come at you aggressively, I just really don't understand your perspective. Is a flip phone more powerful than a smart phone because it boots up and makes calls more quickly?
I do all my Java development, hobby and professional, in Emacs but it didn't become comfortable for me [until I wrote some extensions](https://github.com/skeeto/emacs-java) to help manage Java's verbosity. 
True
As Generic said, your else if is nested within your first if block, which seems to be an error, but the actual problem is that you have semi-colons after your if's on line 27 and line 51.
Doesn't matter; wrote better code.
slf4j ... because it isn't enterprise ready if your logging system doesn't have an abstraction layer above it! (I sort of kid, the use you point out is good but the fact that slf4j even had to come about is just depressing)
I will never use Eclipse again after using IntelliJ.
Your switch statement is incorrect. Remember after all your statements, you should add `break` to the end. This exits the switch statement, or else it will flow through the entire thing. For example: int n = 1; switch(n) { case 1: System.out.println("You picked 1"); case 2: System.out.println("You picked 2"); } This would print "You picked 1" then "You picked 2" If you pick 1. If you pick 2, you just get "You picked 2". The proper way to write this would be: int n = 1; switch(n) { case 1: System.out.println("You picked 1"); break; case 2: System.out.println("You picked 2"); break; } Hope that helps. Let me know if you have any questions.
I used IntelliJ for a month. And have used Netbeans for a year or more. IntelliJ has all of the features of a typical Java IDE but it never blew me away. Some people had various plugins and/or knew the cool shortcuts. I guess that is great for smaller shops that appreciate those things. I guess with larger software shops that I have been with, developers come and go and never appreciate or learn those aspects of IntelliJ. So normally Eclipse is good enough as an IDE. 
Guys thank you so much for the help. I got it up and running fully... I'm new to this subreddit... is this the right place to be posting questions like this? This is basically what I got: import javax.swing.JOptionPane; public class AreaCalculations { public static void main(String[] args){ JOptionPane pane = new JOptionPane(); String userShape; int shapeNumber; userShape = pane.showInputDialog("Please choose the shape for which you would like to know the area\n1.Circle\n2.Sqaure\n3.Triangle"); shapeNumber = Integer.parseInt(userShape); JOptionPane.showMessageDialog(null, "You have selected " +userShape); String areaOfCircle; int areaOfCir = 0; int areaOfCirSquared= 0; String areaOfSquare; int areaOfSq = 0; int areaOfSqSquared= 0; String areaOfTriangle; int areaOfTri = 0; double areaOfTriSquared= 0; String baseOfTriangle; int baseOfTri = 0; double oneHalf =.5; switch(shapeNumber) { case 1: areaOfCircle = pane.showInputDialog(null,"Please Tell me the radius of the Circle"); areaOfCir = Integer.parseInt(areaOfCircle); areaOfCirSquared = areaOfCir*areaOfCir; JOptionPane.showMessageDialog(null,"You're Area of the Circle is: " +areaOfCirSquared*3.14); break; case 2: areaOfSquare = pane.showInputDialog(null,"Please Tell me the length of one side of the Sqaure"); areaOfSq = Integer.parseInt(areaOfSquare); areaOfSqSquared = areaOfSq*areaOfSq; JOptionPane.showMessageDialog(null,"You're Area of the Square is: " +areaOfSqSquared); break; case 3: areaOfTriangle = pane.showInputDialog(null,"Please Tell me the Height of the Triangle"); areaOfTri = Integer.parseInt(areaOfTriangle); baseOfTriangle = pane.showInputDialog(null,"Please Tell me the base of the Triangle"); baseOfTri = Integer.parseInt(baseOfTriangle); areaOfTriSquared = oneHalf*areaOfTri*baseOfTri; JOptionPane.showMessageDialog(null,"You're Area of the Triangle is: " +areaOfTriSquared); break; } }//Ends main(String[] args) }//Ends the class
I've been using IntelliJ extensively for years five years in an office with ~7 others doing the same and I know of no such feature or plugin. I suspect it's just one of those things that Eclipse does better.
This is the correct subreddit for posting these types of questions, but it's unclear why you posted your code up a second time. Do you have a question or a request regarding the code?
IDEs will make our life easier. Of course, editing the code in editor and issuing the commands by yourself is always a great idea to keep yourself on the hunt. i.e.; you'll get to learn more and more and you never forget things I use Netbeans at work. But for my personal work, I use ANT or MAVEN script to issue commands.
What would be the best oo way to leverage polymorphism and avoid using switch and multiple if statements? [Chain of responsibility] ( http://en.wikipedia.org/wiki/Chain-of-responsibility_pattern )? 
&gt; Also, on switch/case statements, normally we don't use them as a best practice. Is that just your opinion? switch/case statements have a purpose and are a perfectly valid way of solving a problem
There's /r/javahelp for questions :-)
I had an awesome time. Definitely good to see my friends in the community. 
Spot on. 
I didn't mean that A should access B.foo, i meant that A should be constructed with new A(foo).
Here are the errors for everyone else who is following along: Test.java:17: cannot find symbol symbol : variable y location: class Temperature return c_temp = (y * 1.8) + 32; ^ Test.java:22: cannot find symbol symbol : variable x location: class Temperature return f_temp = (x - 32)/1.8; ^ This means that there are no variables named "x" or "y" in your Temperature class. You already used the methods setFahrenheit() and setCelsius() (which, by the way, should be void methods because they don't return anything) to set the values of "f_temp" and "c_temp," respectively, so these are what you should be referring to instead of "x" and "y" in the methods toFahrenheit() and toCelsius(). It seems to me that the returning of "f_temp" and "c_temp" have been reversed in those two methods, but I guess this depends on how you intend for the Temperature class to be used. As a side note, I would probably have toFahrenheit() take the celsius temperature as a parameter and return the conversion right from there (same for toCelsius()), eliminating the need for storing the values in the class and needing the setCelsius() and setFahrenheit() methods. Test.java:37: double cannot be dereferenced System.out.println(input.toCelsius); ^ The compiler is interpreting this as trying to access the field "toCelsius" of the "input" variable which is the primitive type "double" (this does not exist). I think what you intended to do here was call "temp.toCelsius()" as you did on the line about it (this would also allow you to remove the duplicate call).
I would call colorchangebutton.getBackgroundColor() or whatever the method is and store it in defaultColor, then when reset is called, set it to that. Also use setBackground, not seatBackground.
This worked perfectly. Thanks
I've attempted to use at least a dozen different "Free" UML plug-ins for Eclipse, the majority of which were either free for a month or flat-out cost over $100. Not a single one of them worked, and I've eliminated the desire to even pursue such a niche tool anymore.
I quite like the ones that generate small UML diagrams for each class as part of Javadoc. Of course, few projects actually generate useful Javadoc regularly.
lol UML diagrams
Why not just put a log4j.xml on the classpath and be done with it? That's all I ever do. I actually use slf4j though, with log4j as the backend, so it's possible that slf4j does the configuration for me...
Personally I much prefer developing in Scala than I ever did Java. Seems funny that the semicolon option bothers you in terms of readability when java suffers from verbosity such as having to repeat long winded types all over the place in declarations. Suppose it's whatever you're conditioned to.
I have found UMLs to be good for getting projects started. Just make a few base-classes and some general thoughts about how-to layout your code. But after that agile takes over and the code layout grow into something different. 
Verbosity helps with maintenance. I am glad for it when I look at code written while back or by others. I don't just write code, I also support and curate several open source projects and Java verbosity is a definte plus. I would hate to review and merge terse/dense code. I have better things to do with my brain.
The default layout is preventing your location / size settings I think, frame.setLayout(null); // will let you place components in static positions. (but all your components will have to be placed)
Well, take variable declaration. You shouldn't have to specify the type twice, once one the left hand side and once on the right hand side. It's noise without value. As for maintainability, writing in a mostly immutable functional way helps a lot and Scala helps a lot. I'm also finding that my code is at least 30% less and without as much noise, whilst still being readable - all benefits for maintainability in my book. Sure you can shoot yourself in the foot but you can with most power tools. And Java isn't exempt. I've experience of several Java code bases that have been a nightmare.
Example: You have a superclass / interface Person which declares a Method "String getName()". What this does it telling the compiler (and everyone working with your superclass) "every Person has a name". For OO to work you must be able to reason about your types. If you declare "MyPerson extends Person" you state: everything you can do with a Person you can also do with MyPerson. Thus any code working with Person-instances should also work with MyPerson-instances. If you were allowed to reduce the visibility of any method that would not be the case anymore. There would be no more guarantees, so within a method void sendInvoice(Person person){ Invoice inv = new Invoice(); inv.setRecipient(person.getName()); } could never be guaranteed to work, since the caller might call our method with a subclass of Person which has a reduced visibility for the name method. In short: you would make reasoning about your code far more complex.
But you may not be accessing it in the same class. You can call p.func() anywhere. More explicitly, you could have a collection of parent objects in a third calling class. In reality, those could be parent objects or subclass of parent objects. If you cast them all to parent objects and call p.func() on them, you would expect that to work. According to the contract set forth by the parent, func() is public. Making func() private in some subclasses would break that contract. The calling code might fail, depending on whether the calling code had a subclass object or an actual parent. I hope that clears things up. 
You asked not to give Liskov substitution principle as the reason, which is hard, because that is exactly the reason why reducing visibility is not allowed. LSP works on the assumption/requirement that an object of a class A should be replaceable with an object of a subclass of A. In your example you should be able to have an instance of TestClass in place of a parent. One guaranteed property of parent class in your example is that when you have an instance, you are (syntactically speaking) allowed to call the method func. For LSP to be in effect, you must be allowed to call the same method for any instance of subclass TestClass also. If the visibility was reduced, this would not be true. You can of course ask, what is the point of LSP. That is hard (for me at least) to explain from ground up, but this kind of subtyping is in the heart of object oriented programming (it's a requirement for working polymorphism), so I'd go as far as to say that you cannot really do OOP without LSP in place. So, this feature is Java's way to guarantee LSP compliance in syntactical level. You can still break the principle by other means (by e.g. not implementing the method of a subclass according to semantic contract defined in super class).
I have used conceptual models. Generating them from code just tends to give you something, that is not useful. Then again it is nice to move these boxes around, when you want to procrastinate. 
The "project" in Eclipse is "module" in IntelliJ IDEA. See [official FAQ for Eclipse users](http://www.jetbrains.com/idea/documentation/migration_faq.html). You can have multiple modules opened in a single IDEA project (what is workspace in Eclipse :)
Essentially, yes. There is no technical reason for it, rather its a logical one based on an agreed upon premise. 
aside from the hideous XML, liquibase is a great tool. However to really use it right your QA and production teams need to be on board with automated schema changes. This is pretty rare. Still it is nice to be able to, as a dev, point it at an empty database and have all of the structure created for you. [Groovy Liquibase DSL](https://github.com/tlberglund/groovy-liquibase) is fantastic and gets rid of my biggest complaint (the xml).
Sedan extends car, overrides drive() as private. Now try to drive it.
Damn, lost my haiku formatting
Well, the nextInt() class will grab the next integer from the Scanner. That should do it...
It just keeps providing more text boxes. I don't know why. I did realize that if I put a period after the numbers then it would stop because it's not an integer. It's kind of a cheat, but it works! Thank you though!
Liquibase is fantastic! However, there are some caveats... Things get tricky when you have multiple clients on multiple versions of your software. You start having to maintain an "install" version of the script and an "update" version of the script. That being said, it's MILES better than maintaining sql scripts by hand.
http://liquibase.org/manual/formatted_sql_changelogs
Sure. However (at least in the Grails plugin for liquibase and I believe in the one I linked) you can run arbitrary code here. Now there is some question whether this is good, but I think as long as the process you run is repeatable, that is given the same input it produces the same output, then you are fine. This makes some forms of data migration incredibly easy.
Now try to pass your Sedan to 3rd party class that expect a Car and it tries to drive it.
&gt;Eclipse IDE for Java Developers &gt;Version: Juno Release &gt;Build id: 20120614-1722 No performance or stability problems as far as I can tell, and I use it quite a bit. The new UI is quite nice, it looks less 2000ish and more 2004ish. I suppose though too, that I wouldn't see any performance problems if they were occurring. I have an 8-core 3.1GHz CPU and 16GB of RAM. :P
Isn't that exactly what liquibase was designed to handle? It should be keeping track of which changes were already applied and only applying what hasn't been.
I have 16GB of RAM and a 2.5GHz Intel Core i7, however performance isn't my complaint, it's instability and bugginess.
Try this: Before the loop, set total equal to start. Then, total = total * rate.
Get rid of your "start" variable, it is the source of your problems and makes no sense. simply initialize "total" to 100 and replace: total = start * rate with total = total * rate.
I'd have a look at Java in Easy Steps, I haven't read it but when I learnt C programming the Easy Steps book for it was a really nice book to read (I did supplement it with other books) they have small tasks on each page so if you learn more by doing it might be handy.
http://www.reddit.com/r/eclipse/
I imported ant project from svn last night and tried both hierarhical and flat view as well as package explorer. I didn't change anything
170 users. I have better chances of geting an anwsear here
If this is the case then it probably means the folders containing the .java files are not recognized as source directories. Right click on the project folder, go to Properties, select Java Build Path, go to Source tab and make sure the parent folder of the first top level package folder is a source directory. Are you using an old version of Eclipse? I've found recent versions are usually pretty good about recognizing source folders and setting things up correctly when you create new projects from existing source.
When I checkedout project from svn I didn't set it as Java Project and that was the problem. Thanks for help.
Also, it would be great if some experienced Java guys could look it over, and hopefully the series, and give me some tips. 
Also noticed the title is wrong. My bad. Should be: to Java, a blog series to help ME &amp; and others learn Java
Here's our setup flow: * Liquibase logs in as system and creates the database (on ORACLE, this means creating the tablspace, user, permissions, etc. for a client.) * Then liquibase logs in as the user and creates their database. * All Create-Tables are run. (Each is a separate SQL file included by liquibase) * All Triggers are run (all as one file, because we almost never change triggers) * All views are run (each as separate files) * All blocks (procedures and pl/sql) are run (Each in their own file). In order to prevent as much duplication, our update process is as follows: * System logs in and sees if there are changes to be made, then makes them. * User logs in and does liquibase updates that contain * Table updates * Client specific data additions/modifications * All views and blocks from the first process are recompiled. * Check for invalid objects in database, fail if &gt; 0. We would like to switch more to liquibase xml for everything to make our db more portable, but we inherited an ORACLE layout, and conversion is a low priority at the moment.
I was going to include an oop explanation in the post, but I wanted to think of a different twist on the explanation, the normal Car has a colour, a make, a name and an interior description is over used in my opinion. 
I will never use Eclipse again after using NetBeans.
I've actually had pretty good luck with Oracle's [Java tutorials](http://docs.oracle.com/javase/tutorial/): They're free and up-to-date.
Good idea. I think boolean flags should be used sparingly anyways. Nothing is worse than having to look up the javadoc every time you want to understand what it means in practice. Especially if there are more possibilities I love enums or named constants.
Well one big thing for situations like this is to look for a pattern. The pattern I immediately saw was the fact that the points added is 1 less than the dice roll for 3 and 5. So for your if statements simply do if(d1==3||d1==5) numberPetals1=d1-1; Also I will point out. You dont need numberPetals. Just add to the total as you go along!
It might be because of legacy code with global variables I've had to deal with lately, but I really hate functions that take no parameters and return either nothing or an int. It gives the impression that nothing changes, and it's not explicit what affects the output of the function. It'd be like if every day you poked me, and I told you the time. But one day, someone really angers me in the morning, and when you poke me I punch you in the face instead of telling you the time. If you explicitly asked "what's the time?" instead of just relying on my mood when you poke me, you wouldn't get punched in the face because someone else messed up my mood without you knowing. (Holy crap that was a contrived analogy) My point is, why have calculateAllPetals() take no parameters, when you can instead have it take a parameter "d", return the points, and call the function 5 times? That gets rid of the redundant if's. And then pull those last 3 lines out into their own function. It's better design too, as you have a "calculatePoints()" and "calculatePetals()" function, instead of one "calculatePointsAndPetals()".
Heres what I came up with: [Here] (http://pastebin.com/ak05CSbw)
I'll agree that the class methods seem iffy. If youre going the method for everything route, you should have a calculate dice method, a calculate petals method, and a print dice/petals method. I don't agree with your thoughts on evaluating each dice one at a time, when a single method to roll all dice, and a single method to calculate the points would be the best. Flexibility is usually a good thing, but you need to gauge what is too far. All points will be calculated at the same time. Why not just write all the ifs in one method, as it will always be done like that? It's only a few more lines honestly, for simplicities sake. Edit: Grammar nazi'd my own post.
Well if I was actually doing this, I'd have the calculatePoints() take an array with a for loop instead, but that's not allowed. But I think calling the method 5 times is simpler. As it currently is, an outsider has to read all ~70 lines of that function to make sure each dN is handled the same, whereas with 5 calls it's obvious they are handled the same.
I think the better solution is to not design APIs that use random booleans. E.g. a ResponseType instead of a responseIsFile-boolean, and a Protocol (possibly an Enum) instead of an enableSsl-boolean.
Good call. I missed that. I'll update it.
Nothing worth while.
or try this: while(true){ //code here System.out.print("Would you like to run the program again? y/n: "); string input = cashmonay.next(); if(input.toLowerCase.contains("y")) break; } the toLowerCase method converts the string to lower case and the contains method checks to see if the string contains the string that you put into the method. the break statement takes you out of the loop
after you declare everything you can start the loop around line 25
Thanks for the reply. I got my program working. Have a nice day/night!
Well, I think I may be supposed to call a method 5 times, but I wasn't quite sure how to write that for when I calculate the totalPetals variable. This is the first programming class I've ever taken, and I'm really new at all of this.
Would just calling Main(fakearray) not work?
This will save any string as a text file. fileName is the full path of the file you want to create. import java.io.BufferedReader; import java.io.File; import java.io.FileNotFoundException; import java.io.FileReader; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; /** * Shows the File Chooser window, and saves the string passed to it. * @param content * @param fileName */ public static void save(String content, String fileName) { try { String text = content; System.out.println(fileName); if (fileName != null) { FileWriter writer = new FileWriter(fileName); PrintWriter file = new PrintWriter(writer); file.println(text); file.close(); } } catch(IOException error) { System.out.println("Save error"); } }
Ok, cool thanks man. Would you care to elaborate when you say "switch statements on strings"?
c++ compiles to machine code. java compiles to byte code.
http://lmgtfy.com/?q=prompt+for+user+input+java+command+line
Boolean tags prevent overloaded methods that clutter up the code and require twice as much maintenance.
I didn't post the main class, because I didn't think I needed it to explain what I was trying to do. Anyway, I got everything figured out thanks to the great help I received here. Although... I've never seen an actual program with comments before, so I didn't really know what to do with them. Where am I supposed to put comments explaining a method?
Well speaking for myself I would say that a big plus with IDEs (especially) Eclipse is extensibility with plugins. For example, for things like generating UML diagrams from code or static analysis.
I'd just be happy with better interfaces to CUDA/OpenCL from Java... the libraries I have used for this were pretty lacking, although they perhaps have evolved a little since then.
All of the main committers are working on Jenkins: http://en.wikipedia.org/wiki/Hudson_(software)#Hudson.E2.80.93Jenkins_Split
Looking at the second code example, it seems like the `retrievePerson()` method might sometimes fail to release the semaphore if a `RuntimeException` is thrown. Shouldn't it all be wrapped in a try/finally block with the `releaseReadLock()` call in the finally, to ensure the semaphore is released? Or is there some trick I'm missing?
Hi jonzo, Yes you are correct. I only wanted to show how the semaphore is used and therefore did not put much thought to the other details of the code. But i agree with you 100%. Thx for the comment :)
So I can get a write lock even though you've got a read lock? Sounds unintuitive..
You have three if statements dealing with the user's choice of ROCK PAPER or SCISSORS. He's saying that in the future instead of having three if statements, you can have just one Switch statement that keys off of the user's choice, since Switch(String) is valid now.
Thanks. I wasn't sure if there was some magic going on behind the scenes that I didn't know about!
Actually, I think that website it just being retired. Hudson moved to the Eclipse Foundation. http://www.eclipse.org/hudson/ Shows a 3.0 rc in August, so at least a little more active. 
Hey, Well i have mentioned it as a dirty ready :). Thats why i have mentioned not to look at the intrinsic details of the code. I just wanted to show how a semaphore can be used for locking purposes. Anyway i agree with your point made here. Thx again for your comment.. Cheers
Seems like B is a bug in the JDK then?
Basically, Oracle tried to exert more control and the community got pissed and forked it. So, it's the typical Oracle management screw-up of open-source projects. The full story is here: http://jenkins-ci.org/content/whos-driving-thing
I use eclipse and occasionally use the if(true){return;} trick to, well, return without executing code during development. Some time in the last year or two it started giving me a "Dead Code" warning on the unreachable line after the if block. Yes, just a warning, but it clearly "Sees What I Did There^TM."
Sometimes this kind of approach is prohibitively expensive to implement, and sometimes it defeats self-documentation at another level. For instance, if I see this code, I'm going to assume that your connect method works with any protocol, even one I write myself. This is a different connect method from the one above, that forces you to choose between SSL and not SSL. You may find it ridiculously hard to implement a connect method that is completely protocol agnostic because you have a ton of libraries to help you deal with SSL vs. non-SSL, but nothing else. So you've introduced a much bigger documentation problem. This is not to say your approach is completely bankrupt, just that this is maybe not the best example. (FWIW, I prefer the builder method in the article.)
You get meaningful autocompletion if you use an IDE, no matter if debug symbols were stripped or not (Don't you just hate method(String arg0, boolean arg1, boolean arg2, boolean arg3) ?). You can document the enum type itself and each option with javadoc comments. You can easily add more options later. edit: and you can see what's up *without* investigating the called method, just from the source code, without the need to remember what the first and the second boolean argument were (how could I forget that?)
So a cluster of GPU accelerated J2EE containers? Server side ultra fast message and transaction processing? Server side graphics cluster rendering using Java? Will server boards will suddenly have to include the appropriate PCI-e slots and chip set to allow the big honking GPUs? What about rackspace? I guess in this case it wont matter because they would just be leveraging integrated GPUs in CPUs.
In the following example, we will talk about indexOf(String), indexOf(String, int), about their uses, explanation and a sample program.
This is where named parameters are nice, a la Scala: server = new MockServer(response = responseMap, responseIsFile = false url = SERVER_ROOT, ssl = false)
This was done to enable something roughly equivalent to "`#ifdef DEBUG`" in Java. If the compiler complained about unreachable code because of a constant if-condition, then setting your `DEBUG` constant to false would break your build when code like this was encountered: if (DEBUG) { logSomeDebuggingStuff(x); } Note that even though it doesn't complain about the unreachable code, the compiler does know about it, and will actually strip out all of the dead code in the resulting class files. A big difference between this and the preprocessor approach used in C is that the dead code still has to be valid code in Java.
Post it [here](http://stackoverflow.com/questions/tagged/homework+java). No one is going to just do your homework for you.
what about sitting down with classmates or your professor to help guide you and to show you how to think this problem through? You gotta start learning to think critically on your own instead of relying on the internet to have an answer for everything.
Thanks, you've been very helpful. My professor doesn't really go into comments very much, so it's nice to know what the standard is.
&gt;how Orcale will behave with regards to the platform long term. That's a question on everyone's minds. But until know they seem to do well. Java EE 6 was mostly still Sun's thing, but with Java EE 7 it's all about Oracle. Till thus far things seem to go in the right direction.
As someone with intimate knowledge of orcale as a company and it's general strategies both with customers and acquisitions so far this fits their MO. Early on in an acquisition there is always talk of continuing support, expanding feature sets for the more niche customers, staying on efforts that may compete with existing oracle efforts for the sake of compatibility etc. Over time the position becomes more Oracle-centric until typically 3-5 years in you are being told what to like with little or no input. New features get targeted toward certain sales goals rather than dealing with the existing customers needs. The acquisition of Java is unique for Oracle so they may continue to play it straight though honestly I fear a slow death spiral that will likely be on a longer time line than traditional acquisitions simply because of the scope of Java. When I say death I don't necessarily mean the platform will die, but I can easily see a world where Java users that do not develop with the Oracle stack becoming second-class citizens. This would lead to a slow dropping of the platform over the coming decades eventually leaving Java solely to Oracle and those maintaining legacy systems. This is not something we will see in the short term however. I would imagine for the next 5-7 years things will seem hunky dory. EDIT: If you don't agree, please give a cogent argument rather than downvote. I have brought this up more than once and every time it gets downvoted mainly because I think people don't like to hear it as a possibility. My fears may certainly not come true, but working for BEA, getting acquired and then working for Oracle (as well as spending quite a few years going head to head with oracle product sales and service teams both as a competitor and a customer) gives me a perspective I don't think most people see.
I might have used the term incorrectly to refer the enterprise ecosystem filled with application servers (Tomcat, Jboss, Glassfish, Weblogic) and web services, EJBs, JSPs etc. It's now Java EE I think.
Java does have a native way to access SQL databases. It's called JDBC. Android can use any modern JDBC driver for the database you want to connect to. See [here](http://stackoverflow.com/questions/4447692/jdbc-connection-in-android) for how. Be sure to put the appropriate JDBC driver JAR file into the libs folder of your Android project so that it gets bundled in the APK. I don't think there is any way to run a PHP script from Java without jumping through a few hoops. You wouldn't want to do that anyways, as PHP scripts usually run on a web server.
The biggest thing I see is a chase for enterprise features that their products specifically need instead of language and platform enhancements that support a wider base of developers. They could also start making additional compilers and runtimes tuned for their software and systems but not entirely compatible with everyone else. What I basically see is a lot of the platform being ignored for the latest enterprise feature set. Due to the breadth of the community OSS efforts and alternate runtimes and compilers would likely be the order of the day should it ever come to pass. Remember that in Oracles world they only profit from Oracle and at the moment there is little incentive to maintain Java for the community except to maintain appearances and keep customers on baord. The things we are talking about are most certainly more than a decade out and a lot can change in that time. I certainly don't want Java to be negatively affected by Oracle owning it, I just don't hold out a lot of hope. I realize in the past Oracle has been very active in Java and somewhat of a friend of the platform. I see this more as a necessity than a desire. They needed Java, and they didn't own it and as a result had to play nice if they wanted to get changes they needed to support their strategies. This is no longer the case. The only reason to stay friendly at the moment is to keep customers from running away and creating a PR mess. If oracle follows their classic MO they will wait and move things around so that by the time they make such moves it may piss off customers and users but they won't have as much power to rock the boat. I have seen Oracle do this over and over, they do a similar move with customers, getting them embedded with Oracle and then switching reasonably priced licencing agreements to a game of "how much you got" when renewals and services come around. I realize Java is a unique case so it may not go that way at all. But excuse me if history has me wary. That said like other platforms I will still work with Java, it will certainly be relevant for the next 20 years. The big question is how relevant will it actually be to NEW development outside of Oracle's ecosystem and will Oracle make any moves to push that along. 
For Sun I see it as more analogous to Microsoft's position. The platform is a means of expanding the reach of their core sales (hardware, services, OS). There was a vested interest in maintaining and expanding the reach as far as possible. Oracle on the other hand, does not need everyone in the world to use their platform, they just need them to understand it enough to pay too much for it. IBM is a software/services company but with their huge patent portfolio (most hard drives and processors today carry some kind of IBM patent license) and R&amp;D divisions they don't have to be as aggressive with their software in order to maintain or grow the business. FWIW I have also gone head to head as well as worked with IBM global services and sales teams. 
I agree.
&gt; Ruby is dying. Really dying not like they keep saying Java is dying. What evidence do you have of that? I'm not disputing the point, but I am curious.
World's tallest midget.
" non-Oracle Java users second class citizens it will be sold as a value-add" Yep, it could happen. I imagine that you might not be able to get Java runtime/compiler outside of some research license or you pay some fee. The big shops will still use it. Do you see anything on the horizon that is Java like? besides .NET. I think the "Java alternative" needs everything that Java has at a minimum. * It needs a virtual machine just like Java that runs on multiple platform. * It needs to stick the static typing paradigm like Java but maybe does a better Java. Java still doesn't guarantee type safety at runtime. * Something object oriented, maybe with some functional programming. Scala is a good Java replacement but it still runs on the JVM ... so in reality, it still shares a lot with Java. * Needs some of the Java security * Needs most of the built-in libraries that Java already has * Might need big company support. Unfortunately, it takes a lot of momentum to push a programming language especially with so much infested in Java. I wouldn't be surprised if Java is king in the business community for the next 20 years.
I would say the current big push for parallel computing will eventually give rise to another big player like Java. For the current x86 based systems I see the current platforms fairly entrenched with a new languages popping up every few years. Really IMO these days its about the tooling. You can have the most awesome language in the world with great syntax and features but if the platform lacks solid tooling (IDE's, build systems, etc) you are going to have a terrible time getting any traction. Out of the current crop of platforms and technologies I don't currently see anything that has the push behind it to make it a real enterprise grade platform that would get heavily picked up by the big corps for anything other than small projects, internal tools and simple hacks.
Static Typing "Much Longer" - Yes, 2 to 3 SECONDS longer. Knowing your datatypes, as a programmer: PRICELESS. 
If my worst case happens the OSS community would be charged with carrying the platform forward for the masses. If we were to see some splitting of platform users I would imagine initially most OSS java projects would hold onto the last "open" version of the compiler and runtime they can have. Likely due to the size of the community, barring any major patent or copyright issues we would eventually see compatible compilers and runtimes from the OSS community as a matter of need. The question there is going to be how much of a move like that revives the platform vs just buying time for users to move to something else. 
Hah, awesome. Do you enjoy the work?
I felt so cool for knowing what would happen. I like to think that it was originally a flaw and they left it in for questionable debugging purposes.
It looks like you are trying to launch the 64 bit version of Eclipse (x86_64 launcher) with a 32 bit jvm (the (x86) in the path to the Java executable).
Every answer in [this thread](http://stackoverflow.com/questions/4945178/cannot-run-eclipse-jvm-terminated-exit-code-13) might help. But it's likely that you are using a JVM that isn't capable of running that particular version of Eclipse. Either a lower version than required or the wrong memory address length (32 bit vs 64 bit). You could install both at the same time. 
The modulus operator (%) gives you the remainder when dividing the right-hand argument with the left-hand argument. 3480 / 100 = 34 with a remainder of 80. You are using the remainder (80, in this case) as though it were the quotient (well, sort of - simply subtracting the quotient from the change won't give you correct results. why?). Then you subtract the remainder (80) from the change (3480) and get 3400. On line 14, you get the remainder of 3400 / 25, which is 136, r = 0. And you do the same thing again for dimes and nickels. Hopefully that's enough to help get you down the right path to fixing it.
Open a console (start-&gt;cmd.exe) then type java -version and java -d64 -version The -d64 will tell you if you have a 64 bit installed. Are you sure you are running a 64bit version of windows on a 64bit machine? If not, just install a 32 bit version of Eclipse.
I felt exactly this way for years (who cares about verbosity, especially with a good IDE). Then I spent time with scala and started seeing the other side, and it's not about the typing speed, it's about the reading and understanding. I do think there's a hidden mental cost to reading the boilerplate, even though your brain learns to jump to the one line of your anonymous runnable that actually does something. Now I'm on a c++ project, and I think Java is the best thing since sliced bread.
Proguard has a reverse obfuscator for stack trace purposes. [see documentation](http://proguard.sourceforge.net/index.html#manual/gui.html)
Wonder how they compare against ObjectDB. Edit: [Here](http://www.jpab.org/ObjectDB.html) are the ObjectDB benchmarks. Would be nice to have an updated list that includes Batoo JPA.
try deleting your eclipse profile folder. Always seems to rectify problems on Linux. This is useful as you've reinstalled several times, it could be pulling from that profile's settings?! Not quite sure if windows stores it in the same place, but it could be in C:/Users/&lt;username/.eclipse 
Would this help: void go(){ int bacteria= 1; int counter = 0; while (bacteria &lt; 10000){ bacteria = bacteria * 2; System.out.println("Bacteria count: " + bacteria); counter++; } System.out.println("It stopped at: " + counter); }
Yeah that website is completely broken on mobile. I don't know what they were thinking. I might have left a comment about it, but it was too difficult to tell. 
You could probably actually put this.count++; instead, too.
Whilst it is useful to have classes of tuples for cases like this, I personally wouldn't be worried too much about the number of specialised classes I create for simply returning results, as this at least provides 'meaning' to what that tuples of objects actually are.
My Mistake. I was calculating 1 bacteria gives birth to two bacteria's. Sorry for the confusion.
Yeah, wow, this is ridiculous. There's no way OP could miss a month of class in a beginner course and then code out a bunch of classes, setter/getter methods, use generics, etc. It looks like the prof was looking for something simple, like a couple for loops, and got this mess. I haven't ran this but I don't think it would count properly. Every time Node.makeDivision() is called, two new nodes are made, but then the left Node is set to this Node. While syntactically correct, wouldn't this increment Bacteria.count twice, when it should only be incremented once?
Hmm, I don't see Ruby dying at all even though I'm not a big fan of the platform (or to be honest a lot of the community). It solves a need pretty well and there's jRuby when you need it to scale.
It's not clear to me what the question is, but here's how I'd go about answering the question as posed: public class Bacteria { public static void main(String[] args) { int cnt = 10000; int gens = howManyGenerations(cnt); System.out.println("Producing " + cnt + " bacteria requires " + gens + "generations"): } public static int howManyGenerations(int n) { // Twelve lines of boilerplate for a one-line money shot return Math.ceil(Math.log(n)/Math.log(2)); } } 
Indeed. And the code I posted answers that question [although obviously it's not helping with the main thrust of your original post]
Irony http://imgur.com/Rh121
I always use Random. The reason is that if a class depends on random number generation, it actually has a dependency on another thing whose job it is to generate random numbers (you could even make the argument this is a hidden I/O operation). It's damn near impossible to write a unit test against a class or method that calls a global function because you have no access to mock out the response for that function within a test. This is even more the case for classes that rely on randomly generated numbers. Passing a Random into a class that needs access to random numbers makes it easy to unit-test that class, as well as substitute in alternative RNG as needed, for example using SecureRandom which implements the Random interface, providing a more even distribution of generated numbers at the cost of speed. Random number generators, at least in Java, tend to mutate state internally - which is dangerous for multi-threaded programming. You want to minimize the amount of state mutation in a program to enable multi-threading, and Random turns the mutable state for random number generation to be scoped to an object rather than to the entire global space as Math.random() does. Other benefits of using Random over Math.random(): * You can pass a single instance of Random into the first class that needs the ability, and pass the same instance around into lower classes as they require it as well. This means that, on your program runs, if you output the seed number somewhere like into a log or temporary file, you can seed your program with the same seed value and generate exactly the same behavior, deterministically. This makes debugging issues that arise in your program much easier. * The Random interface is superior, allowing you to request random booleans, byte sequences, doubles, floats, longs, and ints. It also allows you to request a random int within a specific range. All of these let you avoid inserting the same boilerplate math that uses a Math.random().
Under the hood Math.random() uses the Random class anyways. On the first call to it it initializes an instance of Random (this call is synchronized but as it is static it only happens once so this doesn"t really matter in practice). After that it keeps calling nextDouble() on this instance
Float.MIN_VALUE is positive: &gt; A constant holding the smallest positive nonzero value of type float, 2-149. It is equal to the hexadecimal floating-point literal 0x0.000002P-126f and also equal to Float.intBitsToFloat(0x1). Source: http://download.java.net/jdk7/archive/b123/docs/api/java/lang/Float.html#MIN_VALUE Edit - oops, just realised my copy and paste of the quote's stripped out that "-149" should be superscript. Doubt anyone's been confused by it but that should be 2^-149, rather than the 2-149 that I've put which would be -147...
All the people telling you to use Random are right, and there's one more reason: It has better method signatures that are less error-prone. It's slightly easier to avoid an off-by-one error using Random. So, summing it up: * More testable. * Faster * Easier to not screw up. * Better suited to multi-threading.
Remember to use a decent seed.
Upvote for a very informative post. One minor comment on the mentioned benefits: &gt; You can pass a single instance of Random into the first class that needs the ability, and pass the same instance around into lower classes as they require it as well. Just be careful about doing this with multi-threaded programs since while the provided Random implementation is thread safe, subclasses may not be. So if you have code or a library that accepts a Random instance and then uses it across multiple threads, then you need to ensure that the provided RNG is actually thread safe (or most likely just mention it in the javadoc).
I don't use java, but the majority of the devs do. We are a telephony company and we use java for everything. Pure java on the backend and jsp on the frontend.
As others have pointed out, Math.random() comes from an internal Random, which itself is governed by a lock like all Random instances are. You may be thinking of the new Java 7 [ThreadLocalRandom](http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadLocalRandom.html) which doesn't have a lock. Unfortunately, ThreadLocalRandom has been [plagued](http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7051516) [with bugs](http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6955840) and I don't personally trust it enough to use it. 
TBH desktop apps are usually .NET - that's what I've seen anyway.
Just giving this a quick mental swag, you could fix this by having the Random use an int internally (this is what Random does anyway) so it's always 32 bits no matter what. If you ask a Random for a double, it could generate a second int using the first as a seed (effectively, internally calling next() and using its response). This could be done lazily for optimization, so any instance of Random will still return the same values for subsequent calls to getDouble or getLong, but it will only be calculated as demanded to improve performance. As for the object creation issue, I'm going to defer to [Brian Goetz and argue that object creation is so trivial](http://www.ibm.com/developerworks/java/library/j-jtp04223/index.html) on the JVM that it shouldn't be a performance concern for virtually any program. As for ease of use, I'd argue that it's only easier to do it the way that it currently is designed because it's just how the library is, so people are used to it. Had the library been designed the way I describe, as RNG libraries typically are in functional programming languages, people would be used to it. Of course, it would also be very easy to make a RandomWrapper that internally stored a Random and had it get replaced with the result of getNext() upon each call to a (synchronized) method. RandomWrapper would be interacted with exactly as Random is today.
You don't need reflection. You just need to store information about what the user wants, and then construct different POSs based on what data was entered. You don't need reflection to do that unless you want to allow the user to write his own java classes (protip: you don't).
Hi all, OP here. I wrote this post on my blog after working on 3-tier web apps for years. The problem I would invariably run into is this. At some point, you have the UI layer of your app collect some data from the user that has to be passed to the back end server. Sometimes that data is rich and has a lot of rules and it all must be internally consistent. What is the best way to validate a complex value object? A long time ago, Struts provided a validation framework that didn't work, followed by lots of other frameworks over the years. None of them ever seemed to get this right. Well, I believe I've found the answer at long last. If you have the same problem in your application, take a look and let me know what you think.
the answer lies within your question and java.io
Have you ever had the pleasure of using OAM (Oracle Access Manager)? It's probably the greatest software product ever created. Our company uses oracle products top to bottom I'd realistically estimate that 95% of problems with our app in pre-prod/prod are environmental issues, and aren't bugs within the code. The entire development team here quite dislikes the technology stack imposed upon us.
Oracle is awful, and your troubles stem largely from using Oracle products. Try Tomcat or Jetty with Postgres and suddenly life sucks a lot less (though to be fair, Tomcat configuration isn't well-documented).
The obvious answer is to save to a file. The idea of having a program "communicate" with other computers, or with the filesystem, is known as "I/O", for input/output. If you google "java file io" you'll get this as the first result: http://docs.oracle.com/javase/tutorial/essential/io/
serialization
Java Date/Cal. Under Sun was horrific, Oracle has allowed the process to replace that piece of crud. For that I like Oracle, I have also never had issues with their RDBM. What are you doing that a simple driver can't perform?
It looks like the problem exists in your project configuration and not in your code. The issue lies with your project's classpath. Right click on your project, then click properties. Then in the left hand list click on "Java Build Path". Check the "Projects" tab that is then presented in the right hand window. Look for something called "Viscerence" and then try removing it. Save your changes and try to run it again.
yeah well ... but you can use regular expressions on strings. That would be my approach. As he only wants to get the URLs you dont have to parse the whole HTML and break it into the single tags. Your approach was my second idea, but as you stated, it seems a bit too complex for such a "simple" task
Okay, use case time: Hibernate blows up. Stack trace message is incredibly uninformative... let's say "Failed to convert to internal representation". It doesn't tell me what mapping bombed, so I need to drop into the debugger to try to figure out the column that got grouchy. The Oracle driver, being binary (and unavailable via public Maven repo as well), makes it impossible to debug at its level, forcing me to dig a hell of alot further into the stack trace to find the column name. Use case two: Oracle knowing better than me, supposedly. I use a newer Spring library than Weblogic provides. I properly configure weblogic.xml to prefer whats in my WEB-INF. Weblogic STILL won't get out of my way, and Spring Security screams that the Spring version is wrong.
If you can use a library, use [JSoup](http://jsoup.org/). Using regex will only cause problems for any slightly complex HTML. 
For common tasks like handling HTML you should really first check for existing libraries, because chances are high that someone much more familiar with the matter at hand has already spent a significant amount of time on developing something you can reuse.
First try Java -version in the console and see if u have the jdk installed and not the jre. Make sure JAVA_HOME points to the root of the JDk not the bin. Also use 1.6 not 1.7 
I sort of expect a new version of this book every time there are significant API additions. Changes to 1.6 weren't terribly significant compared to changes from 1.4 to 1.5 so I wasn't expecting a book on 1.6. 
NO 
There's nothing in this list :(
System.out.println prints whatever you put in the parenthesis into the console. In this example it prints "It stopped at: 14". This is because it prints whatever string you put in the quotation marks PLUS whatever else you want. (the value associated with the count variable) There is no limit to how much you tell it to print, just be sure to put the + between variables. 
Try watching thenewboston. he explains most of this in his tutorials.
Try java -version in your console. If it returns absolutely nothing, then you installed it incorrectly. Either way, your best bet is to uninstall it, then delete the folders if they're retained (the ones on Program Files), and then try and install it again. Also, if you could copy the code in the Batch file, that'd be great. It may be looking into a specific directory rather than just java in the classpath.
I've not done this for a while, I used to use TagSoup. Is this the same code or a separate project? Mozilla's HTML5 parser in Firefox is actually using this one http://about.validator.nu/htmlparser/, which they cross-compile to C++. So I presume it's very good at dealing with nasty inputs. Anyone used it? OP: are you familiar with XML processing in Java? These libraries will allow you to write a SAX parser, which I recommend because it just streams through the file without having to load the whole thing into a String upfront. A large page might create a very long String and be memory-intensive. You also don't have to worry about whether your algorithm for finding links is efficient as a streaming parser will scale linearly in time with the size of the page. There are lots of tutorials for XML processing in Java online, try to find a recent one as the best practice has changed through the different versions of Java. Actually, is SAX still the best way to write a streaming parser without using too many extra libraries? I tend to use XMLPull if I'm doing anything complex, but I wouldn't recommend it in this case.
can not un-see.
That's what I did the first time around. Uninstalled all things java and then deleted the java folder in Program Files and then erase it from environmental variables.then reinstalled jre and jdk and added it back to Path. I'm going to repeat the full uninstall like you have suggested and then install 1.6 instead later tonight.
The JSR-310 process to replace Date and Calendar was started before Oracle took over ownership of Java.
What do you mean by "ceiling is not working"?, as I understood it, the condition to paint the ceiling wasnt working? This is your code for that part: String roof = ("Paint the ceiling? y or n:"); System.out.print(roof); roof = reader.nextLine(); if (roof.equals("y")) { roof = reader.nextLine(); double PYTOTAL = ((CEILING * premiumpaint) * 1.05); System.out.println("Gallons of paint needed:" + CEILING + " Total cost of paint:" + PYTOTAL + "$"); } else if (roof.equals("n")) { double PNTOTAL = ((ROOFLESS * premiumpaint) * 1.05); System.out.println("Gallons of paint needed:" + ROOFLESS + " Total cost of paint:" + PNTOTAL + "$"); } Note that in the if body you have a keyboard input: roof = reader.nextLine(); I believe that shouldnt be there, right?, if thats so, then just remove it. It seemed to not be working because the program was waiting for the input, wich seemed like the program stopped. Also, you only need 1 scanner object for all the inputs. Hope this helps :)
The user name is CollageStudent24. They are asking for homework help. But since they didn't format their code properly, no one can read it so they will get very little help. They also haven't asked for a specific question. Specific questions will get much more attention than one that asks for help without telling anyone what the problem is. pastebin.com 
Will do that in just a bit.
In a way, unless you're physically holding a mirror up to your code it's not *really* reflection, right? /s
Well, I go: File &gt; New &gt; Java Project Name it "Game" Then... nothing. I have no where to put my code. Screen shot: http://i.imgur.com/eVWIj.png
Well, I go: File &gt; New &gt; Java Project Name it "Game" Then... nothing. I have no where to put my code. Screen shot: http://i.imgur.com/eVWIj.png
Does your assignment only want you to check numbers between 1 and 100? If you want to check to see if a number is prime, you only really need to check the numbers between 2 and the square root of that number. An algorithm/technique you might find useful is the Sieve of Eratosthenes. Implementing it, of course, might be a bit trickier. But it's not too bad, especially with loops. EDIT: I just re-read your original post. One thing that might be of use to you is to know that every composite number between 1 and 100 (really, between 1 and 120) has at least one factor of 2, 3, 5, or 7. Though hard-coding that would be a mistake, since it would keep your program from being easily modifiable.
Since you're a newbie and it's an online course, I'm guessing that control loops are what you're most familiar with. Recursion is not typically covered in-depth in online courses teaching to beginners. The best thing to do is to write in plain English how you would approach the solution if you were a computer. A lot of designers use this 'pseudocode' approach to delineate what functionality they're looking to emulate. From what's been posted here, I'd say you have a solid start. You're looking at a fixed set of numbers, so consider using a 'for' loop and having a control loop variable 'i' that starts at 1 and increments once with every iteration, not to exceed above 100.
Possibly, I'm not sure what version we're using exactly.
That's correct. You'll need to import the input and output streams to write lines through your FileWriter instance. Also, I think you may need to shift 'return true' to being inside the scope of your isPrime method's for loop. Otherwise it's going to always return a 'true' any time the method is called.
Logging frameworks
Your test is incorrect. For example it would say 21 is a prime number.
Don't forget that 1 is not a prime. EDIT: Also negative numbers and 0 are not primes. It is kind of important as when you call a method isPrime it should return true only in cases of primes.
That would be because of your 'return true' statement on line 47. Returning also exits the method, so the FileWriter code is never executed.
Just noticed what the others pointed out as well, as Saltor66 mentioned you can move return true down, or move: FileWriter out = new FileWriter(new File("assign5out.txt")); out.write(String.valueOf(theNumber)); into the if(isPrime(number)) check forgot you should also be closing the FileWriter when done with it, http://pastebin.com/9biCq4JR
As mentioned by Saltor66, the "return true" will immediately return, so no code after that can be called. The compiler is smart enough to detect this and treat it as an error. I assume you're trying to collect the numbers for which isPrime=true in the file. If so, just move the 'return true' statement to be the very last line of the isPrime method. You may also need to open the File only once, because I think you're going to overwrite the file each time (I could be wrong, I forget the default behavior). Regardless, it might be a little cleaner to open the file once in the main() method, and just do a call to 'write' in the place you're currently printing the primes to System.out.println
Drag and drop the files in your old project into the "src" folder of the new project
at the moment I think that, that could be my mistake (the JPanel is lower, not higher in the scope).. would making the add Label method return a a JPanel with all the components solve that problem. 
Thanks, I have never created a List before, but it sounds like it will work. 
not sure how updated this is, but pssh or parallel ssh sounds like what you need
1 click == .bat script and ssh to a primary host [func](http://func.et.redhat.com/) [bashreduce](https://github.com/erikfrey/bashreduce)
It's not the most efficient, but super putty (http://code.google.com/p/superputty/) allows you to open multiple instances of putty and execute a command over all putty instances. Of course this isn't the best option if you have 20 hosts as it would require you to open 20 putty instances, but it might be cool to look into.
To refine your question, you should say that you want all the addends to be prime. In your example for 8, you give 7 (prime) and 1 (not a prime). But your reason for rejecting 7 &amp; 1 is because 1 is "too low", not because "1 is not a prime number". Or am I misinterpreting what you're looking for?
install a proper shell (since you're on windows, try cygwin) for host in $(cat your-hosts.txt); do some-command-with $host; done where your-hosts.txt is a file with 1 entry per line like: someserver 1.3.3.7 you.get.the.idea but really, logging to a central server as has been mentioned already is probably a better solution
As suggested by me: &gt; but you can (and should) do it this ssh and a key if you're planning to use it. And the reason I did not use it is because I was controlling and messing with mobile devices. At the time, a public key was not an option. sshpass is not a bad utility to use. Depending on your needs. (We ain't talking about development for a NASDAQ company, I hope. :)
[This article](http://www.linuxjournal.com/content/creating-centralized-syslog-server) may be of some help to you. 
You could have it return the JPanel and add them to the JFrame in the same spot the method is called. That's probably the more correct way to do it. But you can also have the method add the JPanel to a global JFrame without returning anything. Either will work, the important thing is that the JPanel is instantiated in the method (ie - JPanel myPanel = new JPanel(); ) so that you get a freshly instantiated JPanel each time the method is called. So if it returns, it would be like this: private static JPanel getPanel() { JPanel pnl = new JPanel(); //Do Stuff to set up your JPanel return pnl; } Then in your main code you would just say: myJFrame.add(getPanel()); To do it without returning, you just make the getPanel method return void, and replace the return line with myJFrame.add(pnl). In both cases your JFrame (I'm calling it myJFrame) needs to exist outside the scope of the getPanel() method (You can't do your myJFrame = new JFrame() call inside the getPanel() method). This is most likely true already.
Ah, didn't see that part. Were you logging into mobile devices, or from them? I've always found mobiles to be firewalled if they're on the cellular network so there was no way to SSH into them.
[GSH](http://linux.die.net/man/1/gsh)
Why did you post this to /r/java? 
There's a conceptual problem: It's not automatically meaningful to try to compare different types of objects. What would it mean to say that a Dog is less than a House, for example? Check out http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Comparable.html for the standard way of dealing with this in Java.
what you said for .equals() and == is correct most of the time except for Strings. JVMs handle string literals and string objects differently to control the heap memory. Here's a useful [link](http://www.javaplex.com/blog/inside-string-working-in-jvm/)
Disclaimer: I have never actually used them in Java Last semester we discussed this in a software development course. If you know SQL relate it to CHECK constraints. A CHECK guarantees that a field is between a certain range of values that you define. You can use an assertion in java to do something very similar to that. Now I've never used them but I remember that you have pre and post conditions that you have to satisfy. The parameters that you pass in have to satisfy a condition and the state of the program after the method has to satisfy some condition. I think of it like introducing ACID database principles to OO programming. You can guarantee that no bad data will get into your program. 
Small tip: == when used on objects essentially means 'are these two references pointing to the same object?', its not that it can't be used.
&gt;I learned that those operators only work for primitive types This is not quite correct. The `==` operator works for every type; it's just not always the behavior you want. For reference types, `==` compares the objects *to see if they are exactly the same object*. But you can create two objects and give them the same values, which would make those two objects logically equivalent. They would still not be the same object. For example: String a = new String("foo"); String b = new String("foo"); System.out.println(a == b); // false, because they are two different newly-created String objects System.out.println(a.equals(b)); // true, because the objects are logically equal (they have the same text) b = a; System.out.println(a == b); // true, because now the two variables refer to the same object &gt;I want to know what other operators there are for reference types Well equals is a method, not an operator. It is [defined on the Object class](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals%28java.lang.Object%29), which means it is inherited by all classes (all reference types), and there are a few other methods inherited from there too. By default, though, a type's equals method does exactly the same thing as `==`. It is up to a particular type to override that behavior. String, for example, overrides it to compare the characters of the text. The only operator unique to reference types is [`instanceof`](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/op2.html) (scroll down). Also, `+` and `+=` are overridden for Strings to do string concatenation, and the operators of primitive types can be used on their corresponding reference types via [autoboxing and unboxing](http://docs.oracle.com/javase/tutorial/java/data/autoboxing.html).
Somewhat. You could pass in some boolean expressions as parameters and then "assert" them to make sure that everything is gravy before you execute the method and then after as well. I was just doing some reading on them and it says that you usually turn assertions off when you would launch an application since it slows things down. It is more of a safety blanket for the programmer to reassure them that their logic is right. A function with a pre and postcondition might look something like this: int returnsMoreThanZero(int x) { assert precondition() : "precondition failed"; x++; // now we are about to return but want to check the postcondition assert x &gt; 0 : "postcondition failed"; return x; } You don't need both a pre or post. You might only need one. It is up to you. You can use as many assertions as you want in the method. I think the basic idea is just that you are saying that at any point of time during the program something needs to be true. If not we need to bail out. Hope this helps.
Glad to see Friday afternoons are as productive at Google as else where..
TIL Josh Bloch recently left Google. I was wondering why he was using his gmail instead of his work account...
Assertions can be very helpful for development and debugging purposes. Especially if you've got some convoluted series of recursive calls, stuff like that -- where it isn't easy to discern when/where/why something is going wrong. Obviously, the better option is not to get yourself in that situation in the first place, but sometimes it happens and/or sometimes you're working on code someone else wrote. Assertions are a good way to perform "sanity checks" while your code is running, without sitting there and stepping through it in the debugger. If you're releasing a program, it's probably good to disable the assertions, cuz you don't want your app to just arbitrarily crash on your user because of a corrupt internal value -- at the very least you'd want it to handle the problem elegantly. But they're super handy for verifying internal consistency as you go. They should *not* be used in lieu of proper input cleansing, proper error handling, and/or conditional statements like "if ( foo == 0 ) { return null;}"
assertions are meant to halt the execution of your program when a condition that MUST be met is unmet. java has a built in facility ("assert some-boolean-condition"), but you have to explicitly enable it, rendering it relatively useless. it's better to write your own Assert class and use that for making sanity checks in your program. Littering your code with assertions is a good practice when done right, it enables your program to fail fast and make it easy to detect any issues with the software during testing. 
Where did he go? I've been to some of his talks, they are awesome.
Funny how everyone goes along with it lol...
Well eclipse is written in java man
Build system, Version Control, dependency mgmt, CI, logging, enviroment variables, IDE setup, Unit testing setup, shortcut changes maybe, bug tracking, maybe code snippets / auto-completion for particular things potentially, browser setup, decent shell if one windows setup and customization for osx/linux too.
Only because it's novel. If idiots posted this kind of shit in the bug tracker on a regular basis, the reaction would have been much less cheerful.
You need to consider the scope of the variables. Your int variables don't exist outside of the shop method.
fyi i find printf is better for these console things... also 'equalsIgnoreCase'
I'm checking the size every time an item is removed. When there's only one left, I get it. So no out of range exception here. The problem with List is that there should only be unique items in the data structure. So every time I add an item, I'll have to check if it already exists. This is in addition to the check for the size every time an item is removed. So, do I check if the List.contains(item) before adding it, or do I just use a set that does it for me?
I'm guess you have to use the Swing API and use a JList and its methods to store integers. You fill said listboxes with a random number generator. And then you find the union and intersection. Also, be careful to use addElement instead of add on a JList.
Which part(s) don't you understand exactly? &gt; Design a Java GUI application Create a graphical user interface. Probably using Swing &gt; to display two lists of integers I'll assume you know what java lists and arrays are and how to create, walk them. &gt; generated by a random number generator, Hint: java.lang.Math &gt; and find and display their intersection and union. [Basic set theory:](http://en.wikipedia.org/wiki/Union_(set_theory)) Union is simply all the values in both lists Intersection is the elements the lists have in common. &gt; Use of any array, list, collection, searching or parsing API is not allowed Sounds like he doesn't want you to use Java's built in functions like Set.contains() but use your Java knowledge to write an equivalent algorithm yourself. 
As I was reading the comments, I realized that maybe a LinkedHashSet would probably be the way to go. Right as I was reading your comment. Thanks! Edit: Actually, I didn't realize that a LinkedHashSet doesn't implement getFirst(), so for my purposes, I have to use the exact same set.iterator().next() method you demonstrated for a HashSet (unless I'm wrong). Using a TreeSet (SortedSet) isn't really the best option because I do a *lot* more searching and comparatively rarely need to iterate over the one item once I find a solution. I think a HashSet is still the best way to go. I only want unique items (no List), lots of searching (no Tree), only ever use the iterator once (when there's only one item left). Performance-wise, a LinkedHashMap is unnecessary since maintaining the LinkedList is a performance hit for no gain.
Yes, a set is the right way to make sure that you have unique elements. I think the problem isn't in the line of code you listed but in your code around it. I think you have your loop setup oddly. Maybe just try something like this: Set data = new HashSet(); methodThatPopulatesSet(data); for( Object datum : data){ doWorkHere(datum); } data.clear(); The set will end empty and you will be able to process each unique element in the set exactly once. This syntax was added in java 5 and is commonly called a "for each loop".
It would be nice if it were that simple. I know how to use the foreach structure. The problem is that there are multiple sets of data and they each affect the others. I'm not simply checking each item in the set in a loop. Other sets of data are being operated on and removing the possible values in the neighboring sets of data. Thank you for the input, though.
1. Get a debugger. I recommend the one that comes with [Eclipse](http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/junosr1) 2. Learn how to use it. I recommend [this tutorial](http://www.ibm.com/developerworks/library/os-ecbug/). 3. Put a breakpoint on the if statement. 4. Look at what the value of removedSpaces and reversed is. 
Looks like the error is in the one of the PalidromeTester methods... Does it get an error, or does it return true? Both can't happen. At any rate it's much cleaner to just replace the "if" statement with just return removedSpaces.equals(reversed);
Oh, I didn't mean to sound offended. I understood why you made the suggestions you did. I was only trying to explain why it wouldn't work. I appreciate the help in thinking it through.
Get yourself familiar with the following topics will help: - Design a basic GUI program and using basic controls (Button and List) - Random number generation (Math.random | class Random) - Usage of collection (I think you will only need to use an ArrayList)
I don't know what your IDE is or how you are executing the method, but it sounds like it may be in your test code or your test param. How are you executing the method?
I know it's a class assignment, but class assignments like this annoy the hell out of me so... * Don't write your own reverse method. Just use StringUtils.reverse instead (From the excellent Commons Lang library) or else StringBuffer.reverse from the core Java libraries. * Don't iterate over the entire string removing spaces like that. Use String.replaceAll instead. * Comments / Javadoc. Just because it's a homework assignment is no excuse to not comment your code! And on occasion, when you comment your code you realise what you've done wrong. * If you can't make it work, write unit tests to reproduce the bugs and then fix them. Once the unit tests pass, the code works. Those last two are things that - when I was at uni - weren't covered at all, but are very important if/when you start developing professionally... Otherwise - actual useful answers. You're checks are case sensitive, so in your code "bob" is a palindrome but "Bob" isn't. Also, you have an assignment (Line 9) that should be a comparison. The entire program can be simplified down to: /** * Determine if a given string is a Palindrome or not. * A Palindrome in this sense is any string that, when spaces are removed, is the same backwards as forwards. * This implementation does not take the case of letters into account - so Bob is a palindrome. * @param input The input string to check * @return True if the input string is a palindrome. False if it isn't */ public static boolean isPalindrome(String input) { String strippped = input.replaceAll(" ", ""); return stripped.equalsIgnoreCase(StringUtils.reverse(stripped)); } 
I'll do this by showing 4 lists. The first two would be a list of generated numbers using Math.random. The 3rd would be the intersection (common numbers from column 1 and 2) and the 4th would display the union (all of the numbers from 1 and 2). 
This line may be causing you problems boolean tested = PalindromeTester.isPalindrome(userInput); You only need to include the class name for calling a static method when the method is outside the class, try replacing it with: boolean tested = isPalindrome(userInput);
yeeeah downvotes ... lol
Check out how not-highly reddit thinks of that. http://www.reddit.com/r/programming/comments/yf7ud/til_double_brace_initialization_in_java/
First, there is no inner class there. There is a nested class. Nested classes have zero cognitive load. They're just classes inside another namespace, period. Second, it's anyone's guess why the author of that piece used ImmutableMap.&lt;String,Integer&gt;builder() when the normal way to do this is new ImmutableMap.Builder&lt;String, Integer&gt;() that's nothing more magical than instantiating a generic class.
And I totally agree with most of that. I don't use it, I just thought it was interesting, that's all. 
Just for the record non-static nested classes are called inner classes, this guy was using it is a way that hid the fact it was static from casual inspection, on looking at the javadoc it is indeed static. All this, arguably, is more to think about (which way should I do it, with the static method or building my own instance, what's the difference). I think you are confusing the fact that you understand it and it really isn't too hard to understand, from the fact that there is an easy/simpler way to express this.
See my comment below to 710_113
I could filter this for primes but I think there is a simpler way to do it. I'm thinking that some sort of recursion could help by finding sums to smaller terms until base cases of 0, 1, 2, or 3.
What are you using to parse the XML? JAXB? Apache Commons Digester? When you have packaged the files into a Jar file where is the XML file ending up in the directory structure? i.e. is the path still the same? A Jar file is basically just a zip file so if you open a jar file inside winzip or winrar you should be able to see all the files that have been packaged.
I should have said that it finds all unique sets of prime addends. Also, it uses recursion as you suggest. Here is a sample output: &gt;16 = 3 + 13 &gt;16 = 5 + 11 &gt;16 = 2 + 3 + 11 &gt;16 = 2 + 7 + 7 &gt;16 = 2 + 2 + 5 + 7 &gt;16 = 3 + 3 + 3 + 7 &gt;16 = 2 + 2 + 2 + 3 + 7 &gt;16 = 3 + 3 + 5 + 5 &gt;16 = 2 + 2 + 2 + 5 + 5 &gt;16 = 2 + 3 + 3 + 3 + 5 &gt;16 = 2 + 2 + 2 + 2 + 3 + 5 &gt;16 = 2 + 2 + 3 + 3 + 3 + 3 &gt;16 = 2 + 2 + 2 + 2 + 2 + 3 + 3 &gt;16 = 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
Written from the perspective of someone branching out from .net/C# into the Java realm. Lots to like ( lots looks very familiar). One thing I found attractive *and* frustrating was the checked exception. Here's why.
Well I see a religious war starting here fairly soon.
Is this an area of contention among Java devs? I found it to be both annoying and cool. I have heard in the past that some don't like this feature of the language, but I would be interested in hearing from both perspectives . . .
I guess the part I am attracted to (and I may be misunderstanding the point) is the fact that client code is forced to either handle or propegate such things. It is irritating, to say the least, but that part of it is something I feel might make an interesting *option* for an exception. Not in all cases, but perhaps a language construct which allows the dev to decide "this bit of code might throw an exception, and I want to require the client code to recognize that fact, and deal with it." I could be way off base here - I am self-taught and have no formal training. I did *not* like the way you had to do that *anytime* you throw an exception. But it would be cool to somehow state "this class might throw this exception, and you need to handle it, because it represents a critical failure."
Excellent point!
Makes complete sense. Thank you for the well-stated reply. 
First, it is an if/then statement. blankX is a variable and blankYY is a loop counter for a for/next loop. % is a modulus operator. The modulus operator asks for the remainder after a division. So, if blankX is a multiple of 10 the remainder of (blankX % 10) will equal zero. IF that statement is true, the counter variable, blankY will increment +1. Essentially, this would be useful in some sort of base 10 counting system using blankx as the ones digit and blanky as the 10s digit.
Putting aside the aesthetics and convenience in the IDE for a moment, I have a much bigger issue with collections in this respect. In short: Sun got immutability badly wrong. You can see this by browsing the many collections abstractions that document "optional" operations. Whether a class is mutable or immutable is part of its contract, it's far less useful than it could be to leave the caller guessing. I won't go so far as to say that Guava completely solves this issue–because ImmutableX still implements the X interface in all cases so that these classes can be treated as collections–but it is better than the standard Java collections in that it gives callers an actual descriptive type to pass around. That's to say, if I have a Map I have no idea if it's an immutable instance, but if I have an ImmutableMap I know for certain. This is the problem with the second code example in your post. unmodifiableMap() always compels callers to be forever doomed to hand around objects of type Map with no clue as to whether it's mutable or immutable. Even worse, if the code that created the map kept a reference to the underlying object passed in to unmodifiableMap(), it gives every indication of being immutable, but of course can still be mutated unexpectedly. And, to top it off, since the underlying object is actually still mutable in principle–even if not in practice–with only a veneer laid over it, none of the performance benefits of immutability are realized by the standard Java collections. The much better way to handle this from the get-go would be to create separate hierarchies for mutable and immutable collections, immutables with builders and mutables with methods that directly modify the instance. If it were me, I would have probably done something like this... /** Marker interface that denotes access semantics, says nothing about mutability vs. immutability. */ interface View {} /** Methods that access a collection. */ interface CollectionView&lt;E&gt; extends View&lt;E&gt; { /* ... */ } /** Methods that access a list. */ interface ListView&lt;E&gt; extends CollectionView&lt;E&gt; { /* ... */ } /** Marker interface that denotes mutation semantics, definitely indicates mutability. */ interface Mutator {} /** Methods that change a collection. */ interface CollectionMutator&lt;E&gt; extends Mutator { /* ... */ } /** Methods that change a list. */ interface ListMutator&lt;E&gt; extends CollectionMutator&lt;E&gt; { /* ... */ } /** A mutable list. */ interface List&lt;E&gt; extends ListView&lt;E&gt;, ListMutator&lt;E&gt; { /* ... */ } /** A builder interface used to build immutable collections. */ interface Builder&lt;V extends View, B extends Builder&lt;V,B&gt;&gt; { V build(); B getThis(); // see Angelika Langer's getThis() trick } /** Marker interface that denotes immutability. */ interface Immutable {} /** An immutable collection. */ interface ImmutableCollection&lt;E&gt; implements Immutable { /* ... */ } /** An immutable list. */ public class ImmutableList&lt;E&gt; implements ImmutableCollection&lt;E&gt;, ListView&lt;E&gt; { public static List.Builder&lt;E&gt; builder() { return new List.Builder&lt;E&gt;(); } // ... methods specified in the ListView interface ... public static class Builder&lt;E&gt; implements Builder&lt;ImmutableList&lt;E&gt;, List.Builder&lt;E&gt;&gt;, ListMutator&lt;E&gt; { // ... methods specified in the Builder and ListMutator interfaces ... } } This might take a little bit to wrap your head around, and I just kind of dashed this off so it could probably be more well thought through, but the basic idea is that if you ascend too high in the hierarchy, you lose the ability to know whether you're dealing with a mutable or immutable object (which presumably means you don't care). Unlike the current collections, where you are often *compelled* to ascend in the hierarchy to level that obscures mutability/immutability. The basic idea is to collect all the access methods into views, all of the mutate methods into mutators, coalesce both of those on mutable objects and split them apart on immutable so the immutable gets the view and the immutable builder gets the mutators. I think the syntax is more natural for callers too. ImmutableList&lt;Foo&gt; fooList = ImmutableList.builder().add(new Foo()).build(); I haven't run this through a compiler but I believe it would work without specifying generics...not 100% sure about that so things might need to be rejiggered but I believe the basic idea is sound.
I'm recently going the opposite path of the author...long time Java dev delving into the world of C# .Net. I gotta say I find the concept of the checked exception a mixed blessing. On the one hand, it provides the developer a way to deal with certain unexpected conditions that might arise in a graceful manner. On the other hand it forces developers to deal with certain unexpected conditions that might arise...even if that means just passing the buck. I suppose in the end it comes down to a variance of opinion between those who rail against verbose code and those who either don't mind it so much or view it as a mode of self-documentation. Personally I find myself in the latter camp when all things are said and done. When I consider how much effort it takes to type code vs how much effort it takes to say...flip burgers or dig ditches, I'll take a little extra typing, tyvm. As for people who have to read the code, well, humans are great at recognizing patterns. After you've trained yourself to recognize the various basic "handle or throw" exception handling patterns in code, you tend to kind of just glaze over it without having to expend any extra brain cycles to comprehend it. In my experience with C# .Net so far, I have to say I love just being able to pass the buck so to speak without having to worry about extra keystrokes unless I decide that for a given exception condition there might actually be something I can do about it. It is liberating yet at the same time empowering. It's sort of like the difference between having a micro-managing boss vs. a boss who just delegates everything and accepts no responsibility. Where is the balance? Well somewhere in between I suppose as in most things in life. That's just my $.02. I welcome and encourage intelligent counterpoints.
This is an excellently reasoned argument. And it is absolutely correct in all the scenarios where it is correct. But a well designed API might nullify it. Not to take the wind out of your sails at all, it's just that there is almost never an answer that is always right in all circumstances. I feel like the java checked vs. unchecked exception handling mechanism is a way of a developer choosing to either take responsibility or pass the buck. And as with most things in life, the path chosen will depend on the scruples and the work ethic of the developer in conjunction with the intended end result of their work.
The fact that the number parsing routines in the JDK throw NumberFormatException without providing an isParseable() is the first thing I'd change if I were CEO of Oracle.
Author here - no counter point, really. I have learned some new things about how the Java community feels about this. I was perhaps a bit effusive in my article, having just "Discovered" the check/specify policy and all. The more I think about it, the more I think a middle ground might have been to allow the *developer* to explicitly add the "throws" clause onto a method signature, thereby requiring handling for a specific type of exception. If no throws clause were added, things might proceed as they would in the C# world. Add the throws clause, and the Check/Specify rule comes into play. In saying all that, I guess I am thinking more of framework design, or other use cases where the code author is creating an API in which a potential exception might manifest itself, but within a context where *how* it is handled would be a decision better left for the client code. Not that it matters - Java is what it is, and C# is what it is. But I think the above scenario is what I found attractive. 
Modulus (%) gets you the remainder. So if BlankX divided by 10 has the remainder of 0 then add 1 to blankY. In other words, the if statement is checking to see if blankX is evenly divisible by 10, and if it is then add 1 to blankY.
Thank you for this.
You are all so freaking helpful. Thank you so much.
I'm glad I could help!
I am using the DOM parser. Basically the document builder to parse the file. The user profile is pretty small so DOM should do fine. Am I wrong in that? When I package the files there are no XML files. When the user opens the app creates a profile the profile data goes into the the XML file which is created, and its saved in the profiles source folder. I just unziped the JAR file and I can't see any of my source folders, basically all the resources are in main folder that is show when I unzip the folder. Do i need to keep everything in the bin folder of my workspace project? After seeing this I feel like I am creating, saving, and storing files completely wrong, so that its effective when I create my application runnable. Anyway suggestions, resource that i can read look into.
I need to read through this more detail but it is worth pointing out that unmodifiableMap in collections returns an UnmodifiableMap as the underlying type although it is just declared as Map in the return type. Nevertheless you can tell it is one in the similar way to Guava. However I do see your point around actually returning an instance of the ImmutableMap makes things clearer in some ways. Again need to read though your alternative solution above.
I'm a fan of methods declaring their exceptions. It forces the designer of an api to think about what could go wrong and throw the appropriate exceptions. And so it also forces the user of an api to think about what can go wrong in a call and needs to deal with that eventuality. After all, a method signature is a contract between the caller and the implementor, it defines what arguments the method requires, what it'll return for a successful invocation and what the error cases may be. Having checked exceptions makes the error cases visible and explicit instead of hiding them. You'll also have to deal with the error cases while coding/compiling instead of later reading logfiles only to discover an uncaught runtime exception was thrown trough half of the system (if it was even logged by $cluelessdeveloper) and caused even bigger secondary problems and the symptoms exposed by the system and reported by the user were of course yet another entirely different thing. Alright, so you catch that sucker but forget that as a side effect some resource isn't being closed or you still hold some references you shouldn't and have a nice memory leak on your hands, oh and what about locks that won't be released? So yes while it may be tedious, it's important to think about the exception cases and handle them. Otherwise you'll end up with brittle code that fails all over the place, with an incoherent exception handling strategy (if any). In short: a mess. But *you* don't care because you've quit your job from that sucky project where everything's broken all the time and some other poor guy is left to deal with it. And no, robust code does not have a single catch(Throwable t) at the end of the main method! Sorry for the ranting but that's how many projects develop, I've seen it too many times!
People disagree on them. Fashion has turned against them generally. I do think that many (not all) of the problems people have with them are down to poor API design. I personally like explicit failures, and in the sort of systems I work in (self contained, no API exposed to the outside world) they have been great. Java got "unlucky" with large parts of it's APIs as best practices got figured out both after and because of many parts of the standard library being written.
Yes, but ImmutableMap implements Map (it sort of has to make it usable with other APIs), which expose the mutating functions, granted they don't work and throw exceptions but it's still a Map. As you are saying the whole collections API would need to be re-factored to fix this and wouldn't work with any APIs that currently use the collections api, which is most apis.
Such an anti-climax, I was expecting a heroic story. So sad.
A dynamic module system provides java with many things, to simplify it gives a deployable unit of code, a code life cycle, and inter code services on the JVM. The deployable unit is the bundle - it may contain many different classes, packages, etc. These bundles may consume and/or provide resources to the runtime. The life cycle of bundles regulated how bundles are introduced, live, and become removed from the environment. The service notion is that a bundle may publish to a registry an interface, other bundles query the registry to gain access to the services according to an interface - these bundle are then wired together. I've encapsulated a lot in a very very brief statement here, there are a lot of good resources for deep dives into the whole framework. Karaf is an OSGi runtime environment. On their own an OSGi core may be difficult to use as you're required to programatically interact with the running OSGi core. Karaf provides a set of commands for interacting with the core, and all sorts of additional tooling for making using OSGi easier. One of the great benefits here is that you can switch core providers and still use all the karaf commands and tooling. The difference between a jar and bundle is in the Manifest file. A bundle is in fact just a plain old java jar, its manifest file however contains a set of special OSGi headers. These headers describe the jar contents as resources it imports from the environment, and resources it exports. There are also headers for naming, version, etc, etc. The process you've described of using maven and spring is actually one of the regular use cases in Karaf. It's not uncommon to deploy a spring file into Karaf's deploy folder and allowing karaf to provision objects via maven and follow the spring instructions to build an application. In a more general case however groups of bundles are installed to Karaf as a feature (application). Some of the more common places you'll hear about Karaf in is with Servicemix (an ESB), Geronimo, CXF (web services), Camel (routing - EIPs), and ActiveMQ (JMS) based projects. I hope some of the above helped. edit: I should probably write a little on why a bundle would be superior to a jar - both seem to do similar things. The problem that some have with jars is that once you've created one a bunch of information is not provided for making it useful. The jar's developer has undoubtedly tested it with a specific class path containing a certain set of class versions, and may anticipate their jar working properly only within this range. A bundle developer is going one extra step forward to provide the jar's user with information on the environment the jar is to operate in, and what version ranges the jar's imports expect, and what services it exports to the world. From the point of view of the integration person, or systems operator that needs to get an OSGi based application running they have a better chance of getting the app running as intended because the OSGi environment enforces all the versioning and classpath issues. A jar based project leaves these issues to integrators and operators to resolve on their own (see Jar hell).
One of my favourite OSGi resources is "OSGi in Action" - it really lays out the reason for using OSGi, its benefits, and dives deeply into the surrounding technologies. It's a long read however, so plan to spend a good bit of time with the book. There are also other smaller, more concise, books coming to market on the subject - I'll post on that when they are available. The defacto place for information is the OSGi Alliance website, where you can download the specification for the OSGi framework. These specs are intended for people implementing the framework as opposed to operating one. Both Apache Karaf and Eclipse Virgo (another OSGi runtime) projects come with small demos that show using bundles, however for meatier examples I'd click on each communities articles page for blogs containing examples or links to GitHub hosted demos.
I'm not 100% sure about this, but isn't it the case that every float value can be represented as a double value with zero loss of precision? If so, then the "bug" that the article author found has more to do with conversion to decimal (for when the value gets displayed to humans) than with a float vs double precision issue.
Just from quickly looking it over (not running or anything), I'm going to guess that this only prints one prime number, not the first n. As Nebu hinted at, you might want to consider where you declare pos at. EDIT: nvm, misunderstood the for loop at line 19. Your main problem is a logic problem there. 
http://stackoverflow.com/questions/how-to-ask
Rather than give you the answer, I'm trying to figure out what your mental model is and to determine where it doesn't match Java's specification, such that if I correct your mental model, all your future Java programs will be correct, as opposed to only having this one particular program be correct.
Ok, thanks a lot for taking the time for this, though. import java.util.*; public class ArrayofN { public static void main (String[]args) { Scanner a = new Scanner(System.in); System.out.println("Enter an integer 'n'"); int n = a.nextInt(); All good upto here, just asking for the variable 'n'. int[] arr = new int [n]; This specifies that the number of slots in the new array 'arr' is 'n'. for (int c = 0; c &lt;= n; c++) { This says that int c keeps looping and incrementing while it is greater than or equal to n, so the loop inside runs 'n' times and assigns numbers to a slot 'n' times. for (int prnum = 1; ((prnum%i==0)&amp;&amp;(i&gt;(Math.sqrt(prnum)))); prnum++) { Another while loop, this time I have an int prnum that is to be my prime number. It starts out as 1, runs the check to see if it is a prime number, and if it is prime, it executes: arr[pos] = prnum; i++; pos++; That assigns position 'pos' to the variable 'prnum', then increments pos, so it works with position 2, then 3, etc. and increments i to test if prnum is prime or not. System.out.println(arr[p]); p++; Prints out position p is the array, earlier defined as 0, then increments it. I'm really unclear on looping. Does the program loop back after the increment to that it makes a difference? Thanks again!
Wonderful answer. Thank you! Just ordered "OSGi in Action." :)
Some hopefully helpful hints. Anything inside a loop block runs each iteration of the loop. That is. for (;;) { int i = 0; i++; } Means i never ever gets past being 1, and then is immediately reinitialized to 0. You can (and should) initialize variables outside of the loop. However, a for loop like this for(int i = 0; i &lt; FOO; i++) says to initialize "i" before running the loop. Run while "i &lt; FOO," and finally execute "i++" after each iteration. Combining the last two pieces of information these are all effectively equivalent (the only difference really being what scope i is available in) int i = 0; for (; i &lt; 10;) { i++ } and for (int i = 0; i &lt; 10; i++) { } and for (int i = 0; i &lt; 10;) { i++ } and int i = 0; for (;;) { if (i &gt;= 10) { break; } i++; } Something else. Your array is not needed. If your task it to simply print out the first N prime numbers, what you really need is to loop n times (which you have... technically you have n+1). And then calculate the **next** prime number, starting from some initial value... say 0? Keep track of the last prime number, and start looking for a new prime from there. When you find it, print that value out and loop again starting at the next number. 
Why did you link to the blog instead of the blog entry?
This is absolutely one of the main problems when working with large OOP projects. Everyone gets bit by this eventually. I recommend using a modular approach to application architecture. See [this book](http://www.amazon.com/gp/product/0321247132/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321247132&amp;linkCode=as2&amp;tag=nihongengogakujy).
When I had my first *real* job in the industry I had to learn a huge java code base that this company had build in the last 10 years. What worked for me was to use pick simple and small bugs/feature requests and try to find the code the was doing it using the debugger. This way you get pretty fast an overview over the code structure and will be able to navigate faster to the code you want to look at. Also you will be productive very soon which also helps to keep you motivated. 
No code there. However, I'm assuming it's because you're not doing your comparisons correctly. Have a read of http://docs.oracle.com/javase/tutorial/java/IandI/objectclass.html (Read all of the Java Trails, but that one in particular will probably solve your problem)...
I love Play framework because of its relative simplicity and how similar it was to the PHP MVC frameworks (i made the same switch as you a while back). Why don't you start creating a small Play framework project and do the basics. I think what happened is your company probably extended it so much that it made Play seem complicated, (which is what happens with every Java framework..) Other then that the most used frameworks are Spring/Struts. Hibernate is a common ORM (but it can get very complex for even medium projects). Its good that you are learning backbone.js though, its a new technology and its good to keep up with the trends.
The real problem with checked exceptions is far far too many of them end up representing programmer error, rather than predictable stuff that still can't be helped no matter what. The latter *should* be checked exceptions (ie, network timeout). But there are very few things in the latter category, and people used them for all kinds of stuff they shouldn't have.
Java without a framework is just like PHP without a framework. Its a bunch of hacked scripts and web pages. Honestly I have always found frameworks are much easier to learn then doing it the old fashion way. The tutorials out there always get you through the basics, and any company is going to use a framework. Its really up to you how far you want to go without a framework. I guess the biggest thing you really need to look into that are framework independent (or have framework-specific implementations) is JavaBeans. http://en.wikipedia.org/wiki/JavaBeans Understanding JavaBeans is essential to any Java web development regardless of framework, so that's the best place to start I guess. Its also important to understand that in Java, most frameworks place heavy emphasis on the philosophy of either convention or configuration. So when you pick up a framework to learn, make sure that is the first trait that you identify. The transition for me was actually really easy. Java was my first language, but I never used it for web development. Then I learned PHP and did web, and when I went to Java web it was no big deal. Now I'm at ASP.NET MVC web and its pretty similar to Java. For me at least, once you learn MVC methodology, learning them across languages is just about understanding the new conventions and syntax.
Interesting. At the end I would think that an EJB is filled with POJO's, Servlets, JSPs? and a bunch of XML's right? I like the idea of being framework agnostic because there are so many to choose from that I would not know which one to pick up first. 
Similar to how one doesn't look into the inner workings of String, Collections, or just about any library. All you need to know is *what* the class/library is *supposed to do*, and have a high confidence that it's actually doing just that (usually via unit tests).
I don't really get this, how would I make it so it adds to the total everything they say yes?
I'm sorry, I meant that when using the do statement, when I ask them if they want another pizza, how do I make it so that the amount of times they say yes will be added to the price. Thinking that a large pizza is 12.49 I'm sorry, really vague there
spaghetti bad 
I would say that generally OOP code it a bit harder to write and a bit harder to understand than procedural code, but is generally easier to reuse when requirements change later, which is why this approach has come to dominate. Of course good engineers strive to make their code readable and well organized so that the higher level pattern is easy to follow, but ultimately you are trading local if/thens and loops for calls between objects. I think the secret of maintainability is, whatever you are programming in, that you make obvious the things that work together that will need to change together when requirements change. Basically when you know you need to change X, you would like to know/worry as little about the rest of the system as possible and that the things involved in X are obvious. 
 if(reader.nextLine().equals("yes")) total=total+12.49; same thing as total+=LARGE; where LARGE is the variable you defined previously. 
Wow it is really hard to debug a program when you can't see it in action. What exactly is this program supposed to be doing?
Should the second to `if`s be `else if`s instead?
The else is only for the if on line 5, so choice will end up 3 or 4.
Alright, thank you. I should have been using **else if** rather than **if**, correct?
Yes. Also please try and format your code properly - it makes it easier for everyone to read and follow.
Thank you so much, those debugging methods let me know the problem was with the if-else statement. The problem ended up being that I should have been using **else if** instead of **if** for lines 3 and 5. And thank you for telling me about equalsIgnoreCase, I was able to cut out a line I had earlier. You have no idea how much this meant to me, thanks again.
Sorry about that, it's probably pretty obvious but I'm just starting out. What could I do to make it easier to read?
Recursion plays with my mind. Only because I can't see anything else jumping out at me - I think it might be that you pass tree.root as a value to the method - so setting node = new TreeNode(i) sets that node to something new, but since node isn't actually tree.root, only a copy of it, tree.root is never updated to be anything but null. Also did I mention that recursion fucks with my mind?
...yeah... Can't imagine why I didn't catch that. Thanks a lot. I really appreciate it. 
oh good sir of reddit. thank you for your kind suggestion, however, i m afraid i'd have to keep off trees for a while!
Your `insert` function is broken. Variables are passed by value, so changing the value of `node` inside the function has no effect outside of the function (i.e. once it returns). Try making `insert` a method of `TreeNode`: public void insert(int i) { if (i &lt; node.value) { if (left == null) { left = new TreeNode(i); } else { left.insert(i); } } else if(i &gt;= value) { if (right == null) { right = new TreeNode(i); } else { right.insert(i); } } } (untested)
Don't move your classes into your JDKs bin directory (or any other directory of the installation), that won't do you any good. For one thing, $JAVA_HOME/bin is part of the $PATH, that is, where the system looks for binaries like java itself and you seem to be mixing this up with the CLASSPATH, which is where java will look for class files. So to make your *current situation* work you would have to do something like this (haven't tested this): "java -classpath $JAVA_HOME/bin Main" Ok now for the proper setup. You don't put stuff into your JDKs directory there are very very few cases where this is needed, just running some java code isn't one of them. You somewhere have a directory with these java files, and you compiled them using "javac *.java" and you can just run "java Main" right there where the classfiles are, no need to set the classpath because the JVM always uses the path from where it's invoked as default classpath (plus what's in $JAVA_HOME/lib) Now to advance this a little bit, use of the default package is discouraged and can often lead to problems so I'd suggest you set up a little project structure with a source and bin directory like most IDEs do for you anyway. rm *.class mkdir -p src/mypackage mkdir bin mv *.java src/mypackage edit the java files and add "package mypackage;" as the first line the next step is to compile the java files that are now in "mypackage". we now tell javac where to put the class files (-d parameter) and supply the main class, the source path enables javac to find the rest of the sources that Main depends on so you only need to supply the entry point to your program. However, this doesn't always work (when using reflection) and then you'd need to list all or at least the indirectly referenced sources explicitly. javac -sourcepath src -d bin src/mypackage/Main.java and now we run the program. since the main class is now in the mypackage package we need to reference it accordingly, plus we need to tell java where it can find the classes (classpath option). the java binary itself is found by the commandline trough the system's PATH but the CLASSPATH tells java where to look for classes. java -classpath bin mypackage.Main and the output: Jacob et Laurie ont respectivement 27 et 25 ans. alternatively, you could also do "cd bin" and then run straight "java mypackage.Main" I hope this little drill has cleared up a few things and you now have a better idea how path/classpath/directories/packages relate to each other. **Edit** I just noticed the comment about the jar. I presume there is none (maybe netbeans creates one but let's create one ourself, shall we?). The jar is just a collection of classes and sometimes some extra info (we'll need that). jar cvf project.jar -C bin mypackage This creates a jar file project.jar and we tell jar to look for the mypackage package in bin. So now we can run it: java -classpath project.jar mypackage.Main But it's a bit tedious to always supply the main class. So we add a manifest which will be packaged inside the jar and java can use that file to find the main class. So let's do that: mkdir src/META-INF inside that new directory, create a file MANIFEST.MF which contains this: "Main-Class: mypackage.Main" now recreate the jar file. the only difference is we now reference the manifest too jar cvfm project.jar src/META-INF/MANIFEST.MF -C bin mypackage and now we can call the programm in a much more convenient way: java -jar project.jar alternatively, you don't have to create the manifest yourself. There are many cases where you need to maintain such a file but to just set the main class there's a little shortcut so the jar utility will generate the manifest for us: jar cvfe project.jar mypackage.Main -C bin mypackage So, and now you also know the basics about how jars work :) **Edit2: formatting**
You seem to be using variables named ...time to represent positions, not times, which is confusing. And take this code snippet, for example: for (int y = 0; y &lt; height; y++) { if (ytime &gt;= height - 1) yo = -1; if (ytime &lt;= 0) yo = 1; for (int x = 0; x &lt; width; x++) { if (xtime &gt;= width - 1) xo = -1; if (xtime &lt;= 0) xo = 1; pixels[xtime + ytime * width] = 0xFF01FF; } } The only things that change during those nested loops are y, x, which aren't used anywhere inside the loops! So why have the loops at all? And putting if()s inside the loops is pointless if the expression doesn't change from one iteration to the next. For example, ytime &amp; height never change so the first if expression: if (ytime &gt;= height - 1) Will have exactly the same result every single time. If your pixel array is 1000*1000 you're executing those inner ifs 1,000,000 times for no reason! You might as well move the if()s it to before the for()s, for exactly the same result. Not that it will fix your problem, though, but it's a start towards better code. Another coding tip; in render() your 2 for() blocks are identical, other than the variable names used. This is a great example of where you should take that code, put it in a different method and call it twice, rather than have the same code copied 2 times. A great technique for figuring these things out is a [dry run](http://en.wikipedia.org/wiki/Dry_run_(testing)); grab a pencil &amp; paper, write down the names of each of your variables across the top of the paper, and below the names write their initial values. Then using your finger, follow the lines of code, one at a time, following the code where you think it will be going based on the variable values on your sheet, updating your sheet of values every time the corresponding variable would change. i.e. *become the processor* and you will quickly understand why the code isn't working as you think it should. (sounds very Zen, but it works).
Lwjgl actually.
For some reason i completely forgot about the javaDocs. Thank you for all the info, lot's of options. Ya, I was trying to stay away from the C++ resources because I figured it'd be a bitch to try to figure out how to translate it to lwjgl. 
WTP does work, but is limited. Hot-code deploy in the JVM only works for code within a method, not for any other changes to a class. WTP can incrementally deploy artifacts like faces-config.xml, but that alone does not reload those changes. JRebel contains hundreds to thousands of plug-ins where it (sometimes with brute force) hacks into a framework in order to let it reload something. Many WTP adapters also face the problem that their vendors are in love with restarts. Change any little character anywhere, and the GlassFish WTP adapter will redeploy your entire application. JBoss AS 6 used to be cool, but the AS 7 adapter now does the exact same thing. With JRebel you have a much more consistent incrementally deploy, it covers a far wider range of possible Java class changes and a far wider range of framework config files, annotations, etc that can be refreshed. Unfortunately, JRebel is in no way perfect. There will still be changes that it simply doesn't reload, it doesn't cover all existing frameworks in every possible version (would be nearly impossible), and on a select few occasions introduces problems of its own. Yet, JRebel comes highly recommended as it allows you to go into this uninterrupted code-observe-modify-observe loop much better than any other tool out there. 
EVERY program should be like that. Chrome's update handling is awesome. Version 1 of Chrome was awful but it had a good updater so improvements could easily be pushed.
LWJGL. JOGL has even less documentation. Also, a lot of what you will do graphics wise has nothing to do with LWJGL, it's OpenGL for which LWJGL just gives you bindings. Learning the graphics programming is about learning OpenGL, LWJGL just gives you a connection to that. That said, LWJGL also gives you openAL and openCL and some other goodies, so it's a must for games (minecraft). 
references in java are references to an object, not to the named field. so when you make the assignment to node, all you're changing is the local value of that variable, not the value of the field that was passed in if you write insert() to be a loop instead of recursive, it will be a lot cleaner the ability to refer directly to fields in the manner that you wanted to is something that would make java a more versatile language. but might also make it dramatically harder to debug (because it would be harder to find all usages of a field)
It sounds to me like Java does not know where to look for the classes even though they might be in the same folder. By running the command java -cp . Main you can tell java that you want your classpath to include the current directory from which you are typing the command to be included on your classpath. EDIT: Alternative answer is to modify you classpath to include the dot eg windows: c:\\existing\path\to\java;.; unix: /existing/path/to/java:.: you may require a restart after.
this should instead be one of the top comments! haha. I chuckled at your joke yesterday. 
When what he should be saying is "You need to think about managing the JVM's memory management holistically - heap size, garbage collector, generation sizes, etc. - rather than just thinking about one piece of the puzzle."
You might want to look at something like [Apache Axiom](http://ws.apache.org/axiom/) for this. Look at their Stax implementation. When you say "lengthy XML file", what do you mean by "lengthy"? 1 MB, 100 MB, 1000MB, more?
As stated in another comment....sax is probably the best place to start assuming the XML file you have is just something you have created. If the XML you are importing has a schema associated with it...you could also use JAXB http://www.oracle.com/technetwork/articles/javase/index-140168.html. This allows you to generate java classes to work with your XML file. Regarding the best way to structure a java project...check out Maven. Its a great tool for creating projects with a well known structure. 
You need http://jaxb.java.net/
&gt; If you use dependency injection coding approaches, you may have one piece of code that requires 30 classes... This could only happen if you are using dependency injection without understanding how to *properly* use it. The point of dependency injection is **not** to simply allow you to inject dependencies everywhere. The point is to make it easier to *invert* dependencies properly. http://objectmentor.com/resources/articles/dip.pdf If you are inverting dependencies properly, and you have designed your code around the idea of encapsulating invariants and isolating them from each other at various levels (architectural level, subsystem, modules, packages, and classes), then you should only need to understand the entire system at a high level except for the part you're modifying directly. Ideally, if the classes/modules you work with follow the Open-Closed Principle as they should, you shouldn't even need to modify those classes directly but rather just use or extend them as needed. http://objectmentor.com/resources/articles/ocp.pdf
eww maven. [Gradle](http://www.gradle.org/) is much nicer.
DOM is **horrible**. I wrote a lightweight wrapper around DOM called XML Wrappers. [Check it out on Github.](https://github.com/JeffreyRodriguez/XML-Wrappers-for-Java) It's also in Maven, instructions on the Github page. However, if you're parsing a *really* big XML file (10MB or more is probably on the large side), SAX is definitely the way to go. Sorry, but XML Wrappers currently only supports DOM ;) While I'm here, I might as well plug my other project: [JavaScript Object Graph (JSOG)](https://github.com/JeffreyRodriguez/JSOG)
I don't think that is the case. The int will be autoboxed to an Integer as a parameter. I wonder more about setting an int to a Comparable and calling compareTo on an int. That is if data is ints, and not Integers. All that aside, yes, switch to left.data &gt; right.data and skip the comparable stuff or just switch to using Integers instead of ints.
You're missing a basic understanding for work safety.
Is there an easy way to leave comments inline on GitHub?
What is the advantage between a JSON over an XML? 
You can only leave comments on a commit or pull request. You could comment on this large commit for instance: https://github.com/joelg236/ScriptReader/commit/26d1778c427ff81168c51c649b768e4e6065432f
Cool, I'll give it a try...
Looks solid. Ide love to see examples of the language. If I was looking at it for evaluation of some sort (business, school) Ide want to see examples. 
Your conception of how graphics work in Java is a bit backwards. With your current program, you're manually calling the draw methods of the graphics for the window-- and you're only calling them once. Once you've drawn on the window once, you never draw on it again. For whatever reason, the repaint() method of the Window is being called, which clears the Window's canvas and then "re-paints" all of the components contained within it-- which in this case, is no components. The "quick fix" for this is to again draw the smiley face onto the window. Unfortunately, we'll eventually run into the same problem-- for whatever reason, the Window will end up repainting itself eventually, and it's far too hard for us to try to manually draw to the window every single time. Instead, we specify *how* the component (the smiley face) should be painted, and let the window worry about when the repaint needs to happen. Here's the correct way to do it: package Lab06; import javax.swing.*; public class DrawFace { public static void main(String[] args) { // The code that you already had // [code omitted] // ... /*Draws face in window*/ // SmileyFace is now a subclass of component SmileyFace smile = new SmileyFace(); smile.setSize(size); // Because SmileyFace subclasses from component, we can add it to the window window.add(smile); window.pack(); window.repaint(); } } And the SmileyFace class: (Notice that none of the variables or functions are static now-- remember the difference between static and instance methods) package Lab06; import javax.swing.*; import java.awt.*; // SmileyFace now extends Component, which is the lowest level class that can paint to a window public class SmileyFace extends Component { // size is now private int instead of static int-- instance variable instead of static variable private int size; public SmileyFace() { } /*Recieves size*/ public void setSize(int s) { size = s; } // Instead of public static draw(), we now override the public void paint(Graphics g) method in component // This is the method called by the Window every time it repaints itself. The Graphics object passed to // paint(Graphics) is the Graphics that draws to the Window-- the same Graphics that you were getting // earlier using Window.getGraphics(); /*Calls all methods to draw all 3 parts of the face*/ public void paint(Graphics graphic) { // notice that the Graphics parameter is now passed as an argument to all of the draw methods, // instead of having them access a static Graphics drawHead(graphic); drawEyes(graphic); drawMouth(graphic); } /*Draws head*/ private void drawHead(Graphics graphic) { graphic.setColor(Color.yellow); double loc = ((size - (size * .75)) / 2); graphic.fillOval((int) loc, (int) loc, (int) (size * .75), (int) (size * .75)); } /*Draws 2 eyes on the head*/ private void drawEyes(Graphics graphic) { graphic.setColor(Color.black); graphic.fillOval((int) (size * 150 / 500), (int) (size * 150 / 500), size / 13, size / 13); graphic.setColor(Color.black); graphic.fillOval((int) (size * 310 / 500), (int) (size * 150 / 500), size / 13, size / 13); } /*Draws an arc shape for the mouth*/ private void drawMouth(Graphics graphic) { graphic.setColor(Color.black); graphic.drawArc((int) (size * 150 / 500), (int) (size * 225 / 500), (int) (size * .4), (int) (size * .3), 180, 180); } } A brief summary of the changes: Instead of manually calling the paint ourselves once at the beginning, we simply specify how the window should draw the component on its canvas whenever the window needs to repaint itself. This way, we don't have to worry about painting manually ourselves-- the window will handle everything.
There's a couple of different way's I can think of off the top of my head depending on exactly what you want to achieve. The first is you could build a Map or HashMap which has an array of your numbers as the key. The value or result of each can then easily be looked up. The alternative that springs to mind is to use the Strategy Pattern [This] (http://stackoverflow.com/questions/10175805/how-to-avoid-a-lot-of-if-else-conditions) stackoverflow article shows examples using both methods (albeit for XML parsing)
Thanks, I'll check that out!
Hasn't that been deprecated? 
Allright, I got it now..Thank you very much for the help!! :) 
Far from perfect, but this method should give you the number of characters that appear in two strings: private static int sim(String s1, String s2) { int result = 0; for (int i = 0; i &lt; s1.length(); i++) { int pos = s2.indexOf(s1.charAt(i)); if (pos &gt;= 0) { result += 1; s2 = s2.substring(0, pos) + s2.substring(pos + 1); } } return result; } I didn't test this extensively, so there might be bugs.
It's untested code. Obviously OP just wants to let us know that it's not safe to use this at our places of employment.
SAX = old event based parser. Each element fires an event which calls a method you write. Slightly difficult to use but low memory over head. DOM = old object tree based parser. Entire document gets read into a in memory tree. Easier than SAX but uses more memory. StAX = newer pull parser. You call a method to ask for the next element of the doc. You deal with pieces like in SAX (low memory overhead) but with a much easier programming model. JAXB = XML to Java object binding. If the XML doc as a schema then JAXB can generate custom classes for all of your XML types. JAXB will load the doc into a tree of objects. DOM like but with classes that represent you XML grammar instead of any XML grammar so it is easier to use. I'd say consider JAXB if you've been spending a lot of time writing XML schemas. If not use StAX. As for the question about XML being the best choice, it depends on the information you are storing. Show an example. For some types of information a Properties file might be a better choice. As for problems making runnable JARs, start using the NetBeans IDE. If you create a Java Application project then a runnable Jar will automatically be created for you when you build your project.
Upvote for you, I wholeheartedly appreciate when someone gives a well thought out response that includes code samples illustrating the answer to the question, and with comments no less. Bravo.
Hahaha
Your problem is that you do not have defined what _comparing_ is in the context of your project - what do you want to acheive?
How do you evaluate a spin? If I play your slot machine and pull the lever and three values come up, how do I know as the user if I should celebrate or be disappointed? How do I know how much to celebrate if it is good? You haven't defined the rules of comparison for us, so there's no way for us to really help you in any meaningful way.
You don't seem to be using privacy as effectively as you could. In the Statement class you have public fields and in the Instruction class you have methods that should be "hidden in subclasses". You may want to consider a private field with a public getter/setter for the first and a protected (visible only to subclasses) method for the second.
Misleading title. Oracle has not made any announcement concerning that fix schedule. They could very well issue an out-of-cycle patch update, like they have done in the past.
I can see them not really caring about applets. No one else does, after all. But sweet `$DEITY`, does Larry have *no* concept of the PR damage this is doing to his company?!
Oracle has not had to engage with the unwashed masses much in the past while high up in their enterprise towers with multi-million dollar license renewals and embedded customers that would have to completely change the way they do business if they told Oracle to go screw. Now they have to deal with normal every-day developers and the public thanks to java. This is not something they know how to do well. They are much more used to saying "this is how we are going to do it and you are going to like it, oh and by the way, your fees have gone up another 20% this year"
Actually, that might not be correct. Your code will go through each column for each row; a total of row*column evaluations. His only does row OR column evaluations since both row and column are decrementing every time through the loop. This might be more what he's looking for... &gt;for(int i = row-1, int j = column - 1; i &gt;= 0, j &gt;= 0; i--, j--){...} 
It sounded like a bit of homework where the professor wanted wanted him to learn how it could be done.
Java will be replaced, but Oracle won't?
As much or as little difference as you would like. The big reason I like Gradle is for its sanity in project definitions. There is no XML, it's all code (which makes some tasks significantly easier to do in Gradle than Maven). It's a lot cleaner, and when you use the gradle bootstrap people need zero dependencies in order to build and run your project they just need the source. You should get in to the habit of this structure src main java com..... etc (if your package is com.reddit your directory is com/reddit/ test java Because this is the Maven way, and Gradle can use this convention. Everything in the Java ecosystem is pretty much set up to assume this structure. [Here](https://github.com/jdigger/gradle-template) is a good base project to show Gradle (and you can use it directly to build with gradle and your project)
It is kind of a horrible name, no offence to Stephen.
Correct. Oracle has a stranglehold with Java right now, but it will adapt as technology changes, just like it has adapted from what it was before Java existed. 
Here you go... http://pastebin.com/WjfSUzda I'm in the process of learning Java myself and I'm not sure why you tried to format your input string in such a way. It is much easier to simply parse the string and transform it into a double. Also, the underscores in variables are quite annoying as well so I removed those.
*disclaimer: i haven't done messaging, but here's some ways i would research to solve the problem* what first comes to mind is, if your DB is the bottleneck, try the [aggregator pattern](http://www.eaipatterns.com/Aggregator.html). i'm not sure if you lose durability though. another idea is to put a passthrough "filter" in the message pipeline that maintains an internal count; when the count passes your batch size, send a message on a separate control channel and reset the count. the consumer should be listening on the control, and when it receives the notification it gets messages from your main channel. that should protect durability. but you might even be able to just use a [control bus](http://www.eaipatterns.com/ControlBus.html). if there is no "Session.recieve(int count)" then you could probably just loop until empty or a high level count is reached. commit en masse to the database and commit. one thing to keep in mind is to make sure you are attacking the right problem. are you sure the DB is your bottleneck? BTW I highly recommend [Enterprise Integration Patterns](http://www.amazon.com/Enterprise-Integration-Patterns-Designing-Deploying/dp/0321200683/ref=sr_1_1?ie=UTF8&amp;qid=1350611991&amp;sr=8-1&amp;keywords=book+enterprise+integration+patterns).
Save items in the consumer in some durable manner, or move them into a separate "buffer" queue until some threshold is triggered. Then do a batch insert when you're holding enough items to make it worthwhile. I've found for our distributed logging aggregator that holding a few connections to the database in a pool for the consumer to do inserts with is performing well. The session creation is the slowest part, individual inserts happen in a couple of milliseconds at most. How are you currently doing your inserts?
A few comments: * It's a little hard to tell exactly what's going on without some example code. If you could post an example (legal) program and describe what it does at a high level, that would be really helpful. * It's customary to name your packages after a domain name you own, just to make sure it's globally unique. I suspect you don't own the domain corresponding to your package name (org.reader). Works just fine, just goes a little against custom. * You seem to be using fairly good OOP practice. For example, each type of `Instruction` inherits from a common base class, etc. Good deal! * Your parser (the part that turns program text into `Instruction` instances) is a little unusual. Typically a programming language uses [tokenization](http://en.wikipedia.org/wiki/Tokenization) first to split program syntax into atomic units like keywords or numbers called "tokens," and then [parsing](http://en.wikipedia.org/wiki/Parsing) to determine the syntactic relationships among the tokens, which correspond to program semantics. This language just seems to look at each line atomically. Again, it works, but it goes against custom, and you may find those techniques to be A Better Way. Also (selfish plug), I'm currently writing [a series of blog posts](http://sigpwned.com/content/stork-example-programming-language-10-steps) about how to implement a simple programming language called "Stork" in Java. ([The last post](http://sigpwned.com/content/stork-example-programming-language-lesson-4-variables) is step 4 of a planned 10.) In particular, you may find [post 1](http://sigpwned.com/content/stork-example-programming-language-lesson-1-tokenization) (about tokenization) and [post 2](http://sigpwned.com/content/stork-example-programming-language-lesson-2-expression-parsing) (about parsing) interesting. My code is also up on [github](https://github.com/sigpwned/stork) with [tags](https://github.com/sigpwned/stork/tags) corresponding to the different posts, if that's useful. Regardless, great work! Always great to see folks learning about how to build programming languages, especially so young. :)
False. Split is not exactly a basic method (at least not a simple one). How do you think it works? The SDK and java.util package (which I mention later is where the regex package is located) are meant to make things *easier* for us. There are a number of deprecated and worn out classes/methods and if you were to notice a way they could be improved upon, you should look into it (You'd probably be wrong, but that's not the point). While it would be inefficient to do this manually, it is good to at least do though experiments on how Java does it. And in principle, it doesn't seem that inefficient. It's good to try to understand how the built in methods work, and this idea is a pretty good guess IMO. The `split()` method in java.lang.String does a large amount of checks that are explained in the docs [here](http://www.docjar.com/html/api/java/lang/String.java.html#2311), and the method eventually calls the `split()` method in java.util.regex.Pattern. The `split()` method in regex's Pattern class can be found [here](http://www.docjar.com/html/api/java/util/regex/Pattern.java.html#1191) (I haven't looked at it enough yet to understand how exactly it works)
 for(String permNode : page.permissions) { ... } You might get uncaught NullPointerException here if "page" would be instantiated using PageCreator(ArrayList&lt;String&gt; list, String header) constructor. 
Oh, and also: avoid copy/paste. I mean, there's no point in writing this.head = header; this.msg = list; two times. Looks much better this way public PageCreator(ArrayList&lt;String&gt; list, ArrayList&lt;String&gt; perms, String header) { this(header, list); ... }
We need to wait for a leak, or for Adam Gowdiak to release his research, and then we can put together a Metasploit module. Then Oracle will deign to recognize the actual risk. So, it's all up to Adam, basically. [Bug him about it](http://www.security-explorations.com/en/contact.html).
Sorry yes it is! It was a task set in University last year and the lecturer was referring to it as a slot machine and the name has stuck. I will check that out, thank you
Sorry, it is less of a slot machine and more of a guessing game. You type in three numbers, three random numbers are generated and it checks if you got 1, 2 or 3 numbers correct. 
Thank you!
Actually, I prefer Adam's policy of working with the software vendor rather than releasing sploits to the wild. What I sort of wish is that he would work with vendors of other OpenJDK-based Java releases besides Oracle, as more often than not the vulnerabilities in JavaSE are in upstream OpenJDK code, not just in Oracle's proprietary changes. But, my understanding is that he is not willing in that regard, and harassing him is unlikely to change his position. Perhaps you don't understand the sheer engineering effort involved in putting out updates for Java. There is a reason why CPU's go out on a regular schedule, and every effort is made to keep any vulnerabilities from being known and abused between updates. I'm not just talking about Oracle effort, but all involved in distributing JDK to end users, and the end users themselves (including large organizations running critical infrastructure on JVM). At each level, from Oracle to downstream vendor to end user, there must be QE to ensure things are running smoothly post-update. At the end-user level, there may even be interruption in critical services when updates are needed. To imply that Oracle does not recognize the risk is... just wrong. There is almost certainly someone (probably a group of someones) who have considered the vulnerability's nature in detail, and are working towards (and possibly have implemented) a fix, but have decided that the risk of pushing a fix before they are absolutely sure it is correct and will not cause other problems is higher than the risk of this particular vulnerability being exploited in the wild. In other words, they don't think it will leak or be figured out before the next scheduled CPU. Every round of CPU's includes fixes for CVE's that range in age, for example October included CVE assigned in [March](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-1531) but which could have been known to Oracle for some time before that. This did not go into July CPU, and as I did not hear any shitstorm I presume it was not exploited in the wild.
How would you compare your tool with those listed here: https://github.com/eishay/jvm-serializers/wiki/Home/1076e0f1f28c6bcc1106d1844948ced18d889954
did you get a resolution? FWIW -a texttransfer is a String. A filetransfer is a String[] (of filenames). From what I understand from your post, this may suit: 1. Use a filetransfer (this alerts Finder/Explorer to accept a file) 2. Finder will call the setDragData method in your Dragsource code. 3. In the setDragData, check if files are requested - and if so, this is where you would mackle your 'file' together. Best if you do actually create a file first - a tempfile - that you supply to Finder via setDragData. You can only supply a file name (not contents) via this method. If this is not palatable, it is entirely possible to roll-your-own transfer type (so, not TextTransfer or FileTransfer, but rather myTypeTransfer) - but I can't help with that, it's beyond my expertise.
Of course it prints out all of them; you loop through all and print them in that for() loop... What do you *want* to happen? Also, managing pairs of a arrays is a PITA. If I were guessing, what you really want is a hashmap [although ordering isn't preserved]: HashMap&lt;String,String&gt; defns = new HashMap&lt;String,String&gt;(); defns.put("dog","leaves hair everywhere"); defns.put("cat","likes to mark"); defns.put("sheep","welsh amusement park"); To then implement what you're doing right now: foreach(String word : defns.keySet()) { System.out.println(word + "\t" + defns.get(word)); } 
[Why a volatile is different in C/C++ and Java](http://blog.vinceliu.com/2010/06/why-volatile-is-different-in-cc-and.html). edit: This is often overlooked when talking about the crossplatform abilities of Java: The [consistent memory model across platforms](http://en.wikipedia.org/wiki/Java_Memory_Model).
[Uhm, the OP's post its a link to an article / post about it.](https://rodrigopsasaki.wordpress.com/2012/10/19/volatile-english/)
You makes changes, publish and restart which is perfectly fine for local development. I do not try to hot deploy anymore on Tomcat, I just know it rarely works.
Order doesn't matter, as long as the three numbers match with three randoms. This isn't so much about the requirements of the program and making it work - it runs how I want it to. I just wanted to know if there is an easier way of taking three numbers and comparing them to three other numbers rather than the way I have done it. This is a side project I was working on just for practice and wanted to learn a more efficient way of doing it. 
Oh, right you are. Good catch.
userNums and slotNums are both arrays: int matches = 0; for (int i : userNums) { for (int j : slotNums) { if (i == j) { matches++; break; } } } System.out.println(matches+" matches!"); EDIT: this will only work if you don't accept duplicate numbers for user input or slot numbers.
The article doesn't mention that other common Java threading constructs like "synchronized" and the java.util.concurrent.atomic classes provide the same memory guarantees (changes in one thread will be visible to all threads). The volatile keyword is for when you don't need any of the other behaviors provided by those other constructs.
There is another purpose for marking something as volatile, as it's a way to force ordering. The JVM can reorder your code if the result is the same when executed by a single thread for example it can change when variables are assigned and unroll loops. Using volatile specifies a point where the JVM may not reorder an operation.
Normally setLocation (or setBounds in other situations), function will work fine. *Unless* there is a layout in place that alters this behavior. This may be the case for you. Because the use seems so simple, I would say that not using a layout (is that possible?) would be a good idea.
It appears that the my computer or IDE were bugging out. When I started my computer up this morning and compiled the application, it worked perfectly fine just as it should.
Google Java anti patterns.
Thank you kind ninja. Hopefully I can have a success story as well. 
This is really helpful. Thanks so much!
This explanation is very good indeed. One of the most cogent I have seen. Unless you can be assured of processor affinity in a multithreaded environment, mark any fields that are going to be accessed (either read or written) by multiple threads volatile. Of course as the author says, this comes at a cost so you must carefully design your solutions. You as the programmer should know when you are incurring the overhead of volatility and try to avoid it if possible. But if not, know when to use it. In the age of multiple core CPU's being the commonplace rather than the exception (that's now), the volatile keyword is one that is extremely crucial to comprehend fully.
I'll have to check that one out. I think I may be "that guy" when it comes to impenetrable code. Sometimes I open something a month old and have absolutely *no* idea wtf it does. 
Clean code (and anything else by uncle bob) might just change your life ;)
Wow I didnt know this existed! Thanks so much!!
Don't have a compiler handy, but line 7 seems wrong, Child is not a superclass of Parent.
anti patterns are bad OOD, the worst code does not even use OOD
On quick inspection I thought you were linking to my profile page, I was mortally offended for a second or so. ;)
Here is how a straight A's student of my university parsed JSON file in her last year. http://pastebin.com/uvHubgRR Reading it line-by-line, and substring-ing on JSON elements. &amp;#3232;\_&amp;#3232; 
Ted very well might be an influential and inspiring speaker (I've never heard him speak) or a fascinating person (never met the man), but holy fucking jeebus-with-a-hockey-stick does that blog post come across condescending as all fucking get out. If his blog is an accurate representation of his interpersonal skills, I'm not surprised that people are going out of their way not to include him in an endeavor that relies on having decent interpersonal skills. 
Just because all the 'hot' things are happening on the web and mobile platforms it doesn't mean that a solid knowledge of Java isn't a good thing. Java has its own web-based capabilities and if you spend time learning how to develop applications in Android you'd be surprised how little of a transition you'd have to make. On that note, you can learn and have fluency in more than one language and, in-fact, nowadays if you don't you're going to fall behind. Employers in the software industry care more about whether you've completed projects and, if so, how you approached the problems that came from them. Learning a programming language is a matter of having a reference manual, it's the concepts and the architecture behind those that are difficult and, for the most part, they are language agnostic. Complete some projects in Ruby on Rails and then port them to Java. Learn from the problems that will arise. You could even put those ports on Github and expand your portfolio. tl;dr: Languages are easy; concepts/patterns/idioms and architecture are not only the difficult part, but largely agnostic. Remake your Ruby on Rails projects in Java just because you can. Stop blocking yourself from doing projects in Java just because they can be on the web. Employers look for completed projects and good practices not fashionable language choices.
Thank you for the suggestion. I tried calling super.paintComponent(g) but to no avail. I just can't seem to figure out *why* it's not displaying my JList...
I would take a different approach. Generally, when making GUI apps, one doesn't need to override paintComponent unless you are making custom components. What you want to do can be easily handled by the standard Swing components. Have a look at Layered Panes: http://docs.oracle.com/javase/tutorial/uiswing/components/layeredpane.html You can add a JLabel with your ImageIcon to a LayeredPane "behind" your other components.
More troubling than the substr-ing it's self is IMO where the params for the substr() come from. 
Ohh LinkedList&lt;E&gt; isn't too bad. My data structures class we build a specific version of LinkedLists for ints (which we learn to generalize later on) If you want some tips, I can help you out.
Google uses Java extensively. Java isn't really good for desktop applications because quite frankly the UI options are horribad. It's wonderful for servers though, but it takes a bit of practice to produce elegant code. It's easy to be ham-handed in java.
Programmers are like actors, they never want to be typecasted. Diverse skills are generally a good thing, so don't fall into the trap of identifying yourself as anything. It worked for me.
/r/thecherno, he has a video series going on now for java game development that are very descriptive and helpful.
what kind of computer do you use? do you have a programming text editor?
They are really helpful if you are new to programming in java and want to make games
I also have eclipse. I haven't used it at all though.
eclipse will be better in the long run. Most versions include a java compiler. But if you're not used to IDE's notepad will do to start with. Get a simple main program running and then try to figure out how to do stuff until you're comfortable with the basic control structures and syntax. In java everything is in a class, and it has the same name as file it's in. So if your class is Play then it's in a file named Play.java. This is what hello world looks like: public class Play { public static void main(String[] args) { System.out.println("Yo, world!"); } } then compile it (from the directory containing Play.java) $ javac Play.java This will create a Play.class file. and run it: $ java Play (should print "Yo, World") There's millions of things on the web to use to learn about Java, anything is fine. Just keep trying stuff out. Best way to learn is to just try to make the code do something. 
It is worth noting that it is very, very hard to get a complete education from the Internet. I'm 95% self-taught when it comes to programming. However, I once took AP Compsci (Java) in high school and I realized that there was actually a lot of stuff I missed. Mostly relating to theory and higher-level programming abstractions, etc. That's not to say you can't get a functional knowledge of programming online; just keep in mind that it's very hard to get everything just from internet tutorials. 
I'd highly recommend this series of videos http://www.youtube.com/view_play_list?p=84A56BC7F4A1F852
No way! C is 10x better for games than java, if anything he should learn C++
I'd argue against don't use an IDE - as long as you're aware of what happens behind the scenes. Basic IDE usage is just a text editor + compiler anyway, so as long as you understand how Java compiles and executes code there's no reason to force yourself into using a plain text editor.
I'd argue that one should use an IDE *only* for Java as a way to wade-through the verbosity of Java code.
I wouldn't recommend you start using eclipse at first. Use notepad first, learn to code with no help from IDEs, then use an IDE once you understand programming. I'd say once you're writing multi-class programs, start using an IDE. 
As I await responses, I will read Java for dummies.
&gt; Last year (...) I learned (...) Java No, you didn't.
How is writing Java like writing classic Russian literature? You have to introduce 100 names before anything can happen.
You start by learning some C. Already know some C? Port your C programs to Java. Trust me on this. Start at a lower level than the language you want to work in. It will serve you well.
Eclipse is programing on easy mode. It handles a lot for you, which can be useful if you are not too experienced as a programmer.
You could try reading [Head First Java](http://www.headfirstlabs.com/books/hfjava/)
Obviously you keep learning, but you can learn a language in a month. You don't learn all of it, but you learn a significant portion, and I think that that allows you to say 'I learned java'.
I don't think so... Saying that here is kind of like saying, "I know math" to a person with a doctorate in some kind of math when you've only taken high school algebra or calculus.
I'm not claiming to be smart, but the java standard library is composed of over 600 classes. And it took me 3 years to get about half of that. And most of it is useful somewhere in most applications. I wouldn't call anything less than knowing a significant portion of just the language *standard library* as knowing the language. And that won't get you a job using it, you need other frameworks like J2EE, struts, the Android API for apps, or external library bindings to something like qt, gtk, sdl, etc to be able to use it for anything practical. And I know I wouldn't have learned design patterns, templates, threading, object serialization, the JNI, byte streams, bitwise arithmetic, polymorphism, and access modification in a summer. Again, not smart, but that seems like a lot for 2 - 3 months. And just *reading* it won't help, because you will forget 90% of that by next year if you don't actually use the skill at all.
Ah, I can see what you're saying. I guess he would do better to say 'some java'.
&gt; relating to theory and higher-level programming abstractions These don't make real world applications or get implemented in 99% of situations anyway. Besides knowing where to look for answers to some of the theory problems (convex hull, graph search with A*, sorting with qsort, genetic algorithms, design patterns like decorator or state) memorizing or even learning most of them is a waste, as long as you know where to go for solutions. 90% of programming is finding a library that implements what you want already, and making it work right in your chosen language. And most of that time is just understanding the libraries and tools you are using. 
Easy mode is bad for beginners. It is important to understand how compilers work, how the Java import statement searches for what to include, how packages work. Autocomplete makes a newbie not gain the muscle memory needed to really know how the language flows. Also, Eclipse by default supplies you with a basic build system, but if you want to learn maven or ant later on you better have some experience compiling by hand and making your own jars. I wouldn't say start with vim, because there is a difference between learning a programming language and learning to only use a keyboard for text editing, but notepad++ is great for starting out.
agreed, c/c++ is better for games, but i tried learning that when I was 12/13, made no sense, at that age java would have made so much more sense.
A good place to learn C is [The C Programming Language](http://www.amazon.com/Programming-Language-2nd-Brian-Kernighan/dp/0131103628).
thanks for formatting that, I spaced
Google.
No one uses C for games anymore. It is factually incorrect to say that C is good for games. These days, all games are developed in object-oriented languages, and for games this usually means C++, C#, or Java. There is a very good reason for this. Games have the following properties: * Highly non-deterministic * Very large-scale (both in code size and effort size) * Impossible to get significant percentage code path execution * Built on abstract concepts No sane person would develop a modern game in C. In fact, most game developers don't even use a medium-level semi-abstracted language like C++. They use abstraction layers built with languages like C++ (we call these abstraction layers "game engines") because it's impossible to do a modern game entirely programmatically, and doing big, abstracted projects in low-level languages is painful and stupid. So not to be a dick, but you are completely wrong here. No serious game project in the last 10 years has been written in C. Probably a lot longer than that. If you want to do games, you learn OO languages and OO principles. That means C++, C#, or (more recently) Java.
The currently ranked number 1 post in the subreddit is "I'm 14, and I want to learn java. Where should I start?" I'd venture to say that thread might be a good place to start! 
Buy the book of Deitel Deitel (author) it was my holy bible till grad as bachelor applied informatics. now i'm an industrial engineer and i still recommend is, applies lots of good programming techniques especially for OO-java programming.
**Complete the following steps in order:** 1.) Bachelor's degree in Philosophy 2.) Bachelor's degree in Physics 3.) Bachelor's degree in Electrical Engineering *Only now are you ready to begin learning Computer Science proper.* **Complete the following steps in order:** 1.) Construct all simple logic gates 2.) Build a hardware platform from said gates 3.) Design and implement a machine language on said hardware platform 4.) Design and implement an assembly language for said machine language 5.) Design and implement a virtual machine and translator using said assembly language 6.) Design and implement a high-level language and compiler to use said virtual machine *Only now are you ready to begin learning Java proper.* **Begin learning Java** 1.) Read the Java tutorial. 
Don't get carried away and try to make GUI applications right now. In my opinion, GUI toolkits on Java are painful, especially compared to achieving the same thing in C# with Visual Studio. Keep in mind that Android uses Java for apps and mostly for games, so if you have an android phone or tablet, I recommend you get a decent introduction to android game development and try it on that (you don't need to root it or pay Google for the privilege). But figure out how to write basic command line programs first. 
It's not a case of remembering *everything*. It's impractical to even attempt to remember every single thing. What is important is being able to think "oh, yeah, I remember something that did something like what I need, let's have a look.." and then find a solution and make it work. Sure, if you're an academic, I suppose it is important to be able to recite everything, but when you're building things for a living you'll often come up with something you haven't faced before, and what is important is being able to adapt and learn exactly what you need to complete the project. &gt; And just reading it won't help, because you will forget 90% of that by next year if you don't actually use the skill at all. Exactly. I even forget stuff I have used before, that's why I keep snippets with usage for myself, and boy have they come in useful over the years!
I'm not saying he has to learn pointers, although I'd encourage that too, because I think to program well you have to understand the difference in by-value and by-reference passing of parameters... but I digress. He should learn **some** C. Not all of it. I believe you need context to learn something well. Best to spend your time thinking "I like Java because it doesn't do stupid things like C does" rather than "Holy hell *why* did Java get designed like *this*??" Because the answer to the latter question is always "Programming languages are just another technology. Better ones are developed over time like anything else"
C is *lower* level than Java. Like 6502. Closer to the metal = lower, not higher. And it's specifically because shortcuts are bad that I advise taking the *longer* road to learning it, not jumping into it with both feet. Languages have relationships. C begets C++, C++ begets Java. Understanding the C languages helps me understand why Java does what it does, and Java helps me understand why Groovy does what it does. So, if you would explain, what exactly is your complaint? 
This would be good, too, for someone that wants to do games in Java. Flying Spaghetti Monster knows there are too few good examples.
I respectfully disagree with this sentiment. Something about python's design means that it seems like the easiest, sweetest OOP language ever, but the further I get into it, the more I dislike working in it. But that's partially because I'm a stickler for statically-typed languages. Duck-typed langs kind of scare me. If you can code stably in Python, more power to you EDIT: statically-typed, not strongly-typed. cigonsal FTW.
In fact, I come from a Java background, I'm terrible at C. If you'll indulge me, I've actually put a lot of thought into my code style. I place things like `public` and `@Override` etc on the line above the method name, because to the human brain, names are relatively signal and types are relatively noise. It's the reason meaningful variable names are important. I keep my fields uninitialized so that the body of the class appears more like an outline than an implementation, which I suppose is C++-like a la header files. I keep the fields package-visible only during development, because it's nicer and quicker to read; I make them private when I finish writing the class. I put opening braces on their own line for classes and methods because the additional whitespace helps me recognize at a glance more important things from less important things like if, for, switch, try: procedural constructs and anonymous inner classes, both of which are implementation details.
Check with your high school to see if they have programming courses.
I'm also 14 and just started learning Java here lately. Not sure if it's a good source but I've been watching [mybringback](http://www.mybringback.com/series/java-2/)
I've revised the class according to your advice but the problem persists. If it'd be helpful I can include a screenshot of the JFrame that gets displayed, but it's probably exactly what you think it is. http://pastebin.com/teKFKrTk
Assuming you are talking over a specific port or range of ports, you need to use port forwarding. Your public ip is going to be something like 1.2.3.4, while your computer is behind the router and named 192.168.1.100. There is no way that the router Automatically knows that something coming into your router from the outside is meant for 1.100. You need to define, within the router, that stuff on port 8675 for outside needs to be send to 1.100.
Not necessarily useless... What if you have four internal computers. From outside your router firewall, all I see is 1.2.3.4 You want activity sent to port 80 to go to computer 1.100. How does your router know that you want port 80 to go to computer 1.100 and not 1.101 or 1.103? Port forwarding. It says that traffic I receive on port 80 from outside needs to get sent to this specific computer. You need to log into your router and configure port forwarding to the computer you need it to be.
Java SE Embedded is a Java SE compliant runtime optimized for small footprint devices, available for multiple architectures including ARM v5/6/7, x86 and PPC. It is a product that Oracle licenses commercially for embedded use. The JDK is a generic Java runtime and development kit, intended for developers and server-side applications and is available on architectures such as x86, SPARC and - now - ARM. It is free for general purpose use, with commercial support available under the Java SE Support program. source: https://blogs.oracle.com/henrik/entry/oracle_releases_jdk_for_linux
OP wants to learn language A. You responded by telling him to learn language B with no reason or explanation. My complaint is that your answer to the OP was misguided at best, misleading at worst. My response was mocking you; sarcasm. Learning C as a precursor to Java is pointless as the principles learned from C are identical to those learned from Java. Further, it will only serve to confuse a new student as C is function-oriented and Java is object-oriented. These are two very different disciplines. Memory management will probably be your next argument for learning C first. My response to that is to read the Java Virtual Machine Specification if you want to truly understand how Java memory is managed. Java OO differs from C++'s implementation, as well. Further, OO is much easier to learn via Java than C++ for a new developer. Lastly, if you truly want to understand how Java works, study the Java Language Specification and learn Java bytecode. The fact that you know C may have helped you transition to another language but it is not a required course and it certainly won't help you to "understand why Java does what it does". And should the OP find his way back to this comment, know this: none of this is required knowledge to start learning how to program in Java.
This is what i did. I started learning Java in April, previous programming knowledge = 0% Started of my learning that Java was a language, like Python, and you can write it in text files (that was how little I knew). I did some Python studying out of book and internet tutorials (using the newBoston Channel, look him up LOTS OF good videos on everything)... stopped for like a few weeks... decided from reading on the net that Java will be good to learn so that I can make android apps.. so step 1 - learn JAVA. started with [Sams Teach Yourself Java in 24 Hours (Covering Java 7 and Android) (6th Edition) (Sams Teach Yourself...in 24 Hours) to learn some of the basics](http://www.amazon.com/gp/product/0672335751/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0672335751&amp;linkCode=as2&amp;tag=wwwthegympres-20") I found it good up until you learning what Methods are, learning what Object Orientated Programming was not intuitive for me at first... did my head in.. so I tried the Stanford Computer Science Department (CS106A) Course](http://www.youtube.com/view_play_list?p=84A56BC7F4A1F852) Its not as hard at it might sound, it's actually pretty basic and easy to follow, and lecture is not bad if you stick with him. But i recommend you go all the way through it (i didn't lost patience after I got the most basic! hang of how to use Objects in Java). Also definitely do the course assignment and handout work involving Karel the Robot, once you use him, you will start to get a good feel for programming, I have to say that helped the most. From there I would start thinking about, if you could make an application to do something what would it be? and start looking youTube tutorials. And start coping the code. This channel helped me understand how to do Swing Applications (I read through the Sams book about using swing (you will learn what its for later). Once I started creating GUI, it was easy to start working on the project seriously.. Now after 7 months I have to say I started to feel like a very low level intern.. but I am able to program enough that I can read tutorials, understand them and apply.. From here on out its just practice and constant reading. I have been working on my projects maybe 1-2 months now and a bit, and I am learning as I go along now.. Which is more fun (frustrating at times), keeps me interested instead of just learning without practical application (this way I find I learn best, trial by error). The thing is if you are invested and doing something you want you are FAR more likely to invest hours working on it, all those hours will add up eventually. So Its am learning exponentially now. Best of luck.. ask questions at r\javahelp also. If you need a hand PM me, i can try to help. 
The only thing I don't like about him is he teaches things in an odd order for example when he tries explaining event handlers and using implementation he doesn't really describe what implementation does and what an interface is. but a few tutorials later he goes on to describe them.
You're taking this way too hard. Kid asks "How should I start Java". Everyone else here is telling the kid what works for them, including me. And perhaps you should have too (or maybe you did, but I didn't see a top-level response), because learning the byte-code, while not something I'm entirely sure about, is still something I wish I had done when I was starting out. It would certainly address a game's need for performance. What worked for me is learning the C langs first. I didn't say they were required, I said they'd help. Even in response to memory management... garbage collectors were created *because* C memory management is a pain in the ass and dangerous all at the same time... If you're just starting out, especially as a kid, you'll have extra energy that's better spent getting the lay of the land. Precursor languages, byte-code is a good option, too... maybe some very basic OOP patterns. If he charges in doing immediately what he *wants* to do, like I did with OOP'd C++ and speghetti'ed my code until it was literally (and I literally mean literally) incomprehensible, he'll have to start over on many things. I hope he doesn't have to make the mistakes I did. Oh, and if you didn't like the terseness of my advice: I was using my mobile phone, and the kid was going to get PLENTY of other advice. Thread's OP was just asking for perspective, not asking us to design an academic course for him. We all came to Java (and probably other langs) from different directions, and we all managed to make it work IRT Java, or we wouldn't have subscribed to this subreddit. So you don't have to get all prickly when someone doesn't give the advice you'd offer. **TL;DR**: Kid asked for advice from everyone. I added mine. Ease up on the harshness.
You might want to add some Javadoc, just in case you leave this project for a bit and want to come back later. Also, do it so the readers can understand what the purpose of the class/method/field is. Trust me, it will be worth the time.
The comments in the program should be enough to understand whats going on. Plus it's not complicated :P. This is for a class assignment. The program works just fine but I want to learn more and want some tips on how to write this program better. Thanks guys!
That would all depend on how I planned on using *list*. If I wanted *list* to reference a of list of **Parent** typed objects or a list of object whose type was one of **Parent**'s subclasses then I would do this: class Main { public static void main (String[] args) throws java.lang.Exception { ArrayList&lt;? extends Parent&gt; list = new ArrayList&lt;Child&gt;(); } } //==================================================== class Child implements Parent{} interface Parent {} If I wanted *list* to reference a of list of **Parent** typed objects or a list of object whose type was one of **Parent**'s super classes then I would do this: class Main { public static void main (String[] args) throws java.lang.Exception { ArrayList&lt;? super Parent&gt; list = new ArrayList&lt;Object&gt;(); } } //==================================================== class Child implements Parent{} interface Parent {} I don't know when you would ever want to do this. The java docs give a much more useful example of using the **super** to add a lower bound to the class hierarchy of a generic parameter [here](http://docs.oracle.com/javase/tutorial/extra/generics/morefun.html). Basically Comparator&lt;Object&gt; and Comparator&lt;String&gt; could both be valid Comparators for Set&lt;String&gt;. The Set interface uses wildcards with a lower bounds in the setter for the Comparator to allow it accept Comparator&lt;Object&gt; or Comparator&lt;String&gt; as a single parameter. Also in your pesudo code are were defining three different type variables named *list* if you were to do this in actual code it would throw an error as well.
Sort method. public void sort() { a = (E[]) new Comparable[size]; int position = 0; int count = 0; Node currentNode = head.next; while (!currentNode.equals(tail) &amp;&amp; position &lt; size) { count = 0; while (count &lt; currentNode.count &amp;&amp; position &lt; size) { a[position] = currentNode.data[count]; position++; count++; } currentNode = currentNode.next; } Comparator&lt;? super E&gt; comparator = new Comparator&lt;E&gt;(); insertionSort(a, comparator); for (int i = 0; i &lt; a.length; i++) { System.out.println(a[i]); } } Main call causing the error. cl.sort(); Error stack trace: Exception in thread "main" java.lang.Error: Unresolved compilation problem: Cannot instantiate the type Comparator&lt;E&gt; 
Wait, what
I really recommend Data Structures and Problem Solving by Mark Allen Weiss. The first 3 or 4 chapters are all about the basic constructs of the language, so it's suitable for beginners. I know I might get some heat about recommending a book about data structures, but Weiss hits on a lot of topics and his code is really, really good. There's some theory in there, especially during the Algorithm Analysis chapters, but, again, he writes very efficient, and very readable code. A very good place to start learning I believe. 
In line 2 of your sort method, what is the type of variable a? Is this all part of a linked list implementation? Why are you casting it to E[] right after you declare it as a new Comparable[]?
&gt; I'm a stickler for strongly-typed languages. Are you perhaps confusing statically versus dynamically typed with strongly versus weakly typed? Python is not statically typed, but it is strongly typed.
That's how I was told to do it by the professor. He said initialize the array as comparable and cast it to E[] because you can't initialize a generic array. The type of variable a depends on the type of 'ChunkyList' that was created. public class ChunkyList&lt;E extends Comparable&lt;? super E&gt;&gt; extends AbstractSequentialList&lt;E&gt;
::reads Wikipedia on Python:: &gt; Python is strongly typed, forbidding operations that are not well-defined (for example, adding a number to a string) ... ::scratches head:: ::reads Wikipedia on Static Typing:: &gt; A programming language is said to use static typing when type checking is performed during compile-time as opposed to run-time. I think you got me there... "Statically typed" would be the term I'm looking for, not "Strongly typed". Oh god, I wonder if I've been interchanging those terms out loud for long. O_o 
That's how I learned. I owe half of my basic Java knowledge to Mykong :)
if i read you correctly: it is true that people do symbolic math on computers, but i don't think many people would choose to do it in java. searching for "java symbolic math" came up with some good links on stackoverflow, also try "java symbolic derivatives"
[Here ya go...](http://docs.oracle.com/javase/specs/jvms/se7/html/index.html) the official vm specs.
It's a hell of a lot to read and even more to remember, but it's very detailed and useful**, at the least as a reference.** EDIT
Yeah while appamaniac does bring up good points that are drawbacks to bucky's tutorials, the fact that he moves quickly, speaks well, and has short segmented tutorials really makes up for it.
This is how I learned java. Bukkit has a great API that's really easy to understand if you already know the ins and outs of minecraft. Once you get the syntax down of your first language it's really exciting to see what you can do with the API. Once I started getting better with plugins, I started to learn more about java itself, and my code became for efficient, I learned the importance of good convention, and I finally was able to grasp what a repository was (I mean, who *isn't* confused the first time they hear about it?). I consequently learned java game development and then game dev in other programming languages all in the time span of about a year. Starting off with Java and minecraft as my first real programming language, *may* have given me a bias towards OOP languages, but at least I have the experience from all the plugin development I've done these years to explain why I like it more. Also, learning java learners are much better than becoming the winy visual studio noobs who are afraid of code they have to visualize themselves. 
Seems someone didn't understand the reason for my comment. I understand that OP is being cute with his question but he used an infinite loop that could tie up the system as it does not explicitly release control for event handling. Since the OP is going for their certification, they should understand that the proper approach is to invoke yield() on the current thread. Hence, the thread comment.
I didn't think so because I believe (but I may be wrong) that `super.paintComponent()` automatically took care of forwarding the message to my subcomponents. Because all my class does is keep track of a JLabel's position, and it does that with `setLocation()`, `super.paintComponent()` should be doing the drawing itself. If I do have to override paintComponent, I don't know how, because I don't know how to draw a JLabel.
That's a good idea. I hadn't thought about that. 
What may help you is the actual API documentation.. http://docs.oracle.com/javase/6/docs/api/ You can search for ArrayList and see all the methods that operate on that type of object. The API is very useful because it allows you find components you need to use without having to write them yourself. creating an arraylist is as simple as adding these elements to your code: at the top of the class file, you need an import statement like this: import java.util.ArrayList; and in the middle of the class, in a method or as a class variable, you need to create the array by doing the following: ArrayList theList = new ArrayList(); Then you can look at the link above of the documentation for arraylist to see how to get and set things in it. 
http://www.youtube.com/user/TheChernoProject?feature=watch Watch his game programming series 1-17 are up currently. You will be making games and learning the basics (and more) very very rapidly. He also goes into detail about every single line of code and what is does/means.
&gt; ArrayList theList = new ArrayList(); Please don't do this. 
For those wondering, the correct syntax would be, for an ArrayList of Strings : List&lt;String&gt; theList = new ArrayList&lt;String&gt;(); 1. It's not Java 4 anymore, for god's sake use generics and type your data structures. 2. Declare your variables with the interface you need, not the implementation.
Well, it's not the syntax. OP's syntax is right too in earlier versions of Java. It's the principle of program to an interface, not an implementation that's being violated.
You're right, "syntax" is not really the right term here. It's just ugly as hell :)
You are right that that example is fine, but it gets bad when someone comes in and splits it into a few lines. This causes a StringBuilder to be created twice and toString() be called twice. x = "foo" + bar; x += "baz"; So I would say it is really just important to understand what it compiles into and so long as you know that then it is fine to use either based on the situation.
If he's going to try to explain how to write better code probably he should have only declared StringBuilder on line 4 in example 1. No need to create an object in the method if the validation fails. Also for JSON there's Jackson and XStream which are both good libraries.
&gt; Java ist not C++ You don't have to declare the variable outside the loop in C++ either. Not even in C. (only If you're using older C standards like C89 or ANSI C) *Edit*: I've just checked again. C99 allows variable declaration anywhere inside a block; **C89** only allows it at the beginning of a block.
If you check for null explicitly, and you want to throw an exception if the input is null, the correct exception type is IllegalArgumentException.
That was part of my point, "use either based on the situation." The main point being "know what you are doing." It's fine to use the plus if you know it isn't a performance problem in the situation you are using it. But you would be surprised how much a simple habit can affect performance. If the better performing code can be equally clean, it's not a bad thing to favor it even when it isn't really needed.
Honestly, is it necessary to explicitly state that? One should assume that 99% of methods are going to go wrong if passed a null argument. While I agree with the idea of documenting exceptions in general, I think this guy's first suggestion of covering up the error is the real non-obvious behaviour, and as such *that* should be documented if it is implemented.
I was going to say the same exact thing. Author doesn't seem to know what he's talking about.
The innermost loop seems quite redundant. You already know where the 0 is going to be in the array, so there is no need to search for it again. Why do you have an array of strings if each is only going to contain a single character? Might as well use a char array. Even better you can use StringBuilder, since invoking a print statement for each separate char will also slow things down, so why not print everything at once? Instead of using an array of strings (or chars), you can just use an instance of StringBuilder using as capacity the length that the array would have. Using the setCharAt(int, char) method you can manipulate the different chars in it and when you want to print it just invoke its toString() method and print that.
&gt; final StringBuilder sb = new StringBuilder(); It should also allocate initial space for faster appends - new StringBuilder(input.length()) &gt; indexOf("!") If you really care about performance use char version: indexOf('!')
I really don't like the idea of algorithms checking for null. Like the man said, 99.9% of code is dealing with user input. That's where you catch your empty inputs and null values, not when you're actually doing the work.
I purposefully left out parameterization so as not to have to explain parameterization, as well as not using the interface. I try to teach to the audience. There is plenty of time to cover that stuff later. This is not r/programming :)
First point: he claims that functions that don't accept `null` should null-check their arguments, and return `null` in turn. That's very, very far from a generally applicable recommendation. There are cases where it semantically makes sense to do so; and then there are at least just as many cases where if your code's called with a null argument, it means the calling code has made a hopeless error, and if you return `null` you'll see one of these cases: 1. The calling code will get a `NullPointerException` in some spot very far removed from the place where the actual bug exists—because most of the spots that were supposed to consume the object that was not supplied decided they didn't want to touch the problem. 2. Even worse: the calling code does **not** get a `NullPointerException`, and because of this **behaves incorrectly**. It will likely then produce a wrong result—without any indication that anything went wrong! Second, the guy doesn't know how the Java compiler treats string concatenation. His "bad" string concatenation code is not only just fine (the compiler turns it into `StringBuilder` code), it is also the more readable. The bad case is the one that [hanlon points out in this comment](http://www.reddit.com/r/java/comments/11xo2v/a_useful_rant_on_how_people_write_java_code/c6qg92x)
Edit your post and paste in the code.
An example that makes use of bad practices is a bad example.
Let's not go there. ;)
^ This. If you give my method a bad argument, sorry. I'm not going to waste time bloating code for this. For example, I won't return `null` when `null` is given as input. It may make *The User* think that *I* caused `null`.
Can you also post the stack trace of the null pointer exception here? It tells you exactly what line you get the error on. 
This line: Kontaktlista[] KONTAKT_LISTA = new Kontaktlista[0]; Would initialise an array of 0 length. This code here, is the issue: temp = new Kontaktlista[KONTAKT_LISTA.length+1]; for(int i=0; i&lt;KONTAKT_LISTA.length;i++){ temp[i]=KONTAKT_LISTA[i]; broj = KONTAKT_LISTA.length; } Because when we go further down, we hit this line: temp[KONTAKT_LISTA.length].telefono.setOPERATOR(operator); Because the for-loop above doesn't run (because 0 is not less than 0), temp[KONTACT_LISTA.length) is referring to temp[0], which is null. This is your issue. 
Not sure why you got voted down. You're right - returning null is usually incorrect behaviour. 
I stopped reading after this ridiculous line: &gt; "all engineers should be paranoid; if you’re an engineer but don’t feel paranoid just quit your job!"
I'm a big fan of using the appropriate operators in my "concise" code. public String reverse(String string) { return (input != null) ? new StringBuilder(string).reverse().toString() : null; }
I would like to add the question "Why not replace that array with a vector?" (Or perhaps there is a better suited container type).
I don't think you understand what "example" means. Although... OP should have noted the availability of StringBuilder#reverse() in the example.
let is the new var ;)
HOIST BY MY OWN PETARDATION!
To be pedantic, StringBuilder only became part of the library in Java 5, so probably not that many sites advocated using it before. StringBuffer was there before, but I have no idea about the optimizations guaranteed by JLS at that time.
If you _really really really_ care about performance you're gonna write everything in assembly. Or a murderer IDK. 
There always seem to be two ways of looking at it. Yes, dedicated preparation for tests helps us sharpen our focus and learn a thing or two along the way. But on the other side, simply achieving the certification does not prove who is good and who is not. I choose to do certs provided my company offers incentive to take them. If they didn't, I probably would rather let my experience speak for itself, and demonstrate skills at a job interview. Many interviewers see attainment of certs as evidence in itself, but be prepared to back it up with a demonstration of skills. **TL;DR** Certs are nice, but are devalued unless some incentive lowers your barrier for entry.
Its only worth it, if you work in industries (e.g. as a consultant) which demands it often. Just look through profiles in the sector you work or plan to work. Otherwise, it is just a slight advantage. With the fast changing architecture paradigms (in the Java world), those certifications become outdated fast. And certifications tend to be product centric, so you are more likely to buy products of the certifier.
Sorry for that messy repository, working on clean up and proper packaging. I added a compiled package under the [downloads](https://github.com/pfirpfel/SplitCuber/downloads) with a very basic readme.
Download [Eclipse](http://www.eclipse.org/), open the project in it, and you should be able to build and run it. But now there seems to be a download which should be easier for you: [Splitcuber-0.1-Windows-EasyUse.zip](https://github.com/downloads/pfirpfel/SplitCuber/Splitcuber-0.1-Windows-EasyUse.zip)
I've been interviewing candidates for the past few years and never met a certified anything. This is maybe a way of establishing bona fides if you have a degree from a country I've never heard of, but really I'm only looking at your last few years of experience.
They do. And that's the trick... being able to spot true self-improvement over cramming for an exam. 
I've been working as a consultant since 2004 ('been working in IT since 1999). I don't have J2SE, J2EE or J2EA certs. Although I am sure my "expert" knowledge in java could benefit from any of these courses, the truth is, I am yet to be in a situation where I needed one (for employment). Most of my peers don't have them either and they are very good, highly paid industry experts. Perhaps this is all due to the fact that in Europe consultants are always in demand and perhaps industry experience takes precedence over educational experience. 
It's not a book, it's a 27 page blog post. I was hoping to take the PDF and read it on a flight. :( 
Hello, That is why I called mini-book and not a book. Why can not books ( or mini books ) be online? =P I am sorry, but I did not had time to create the PDF. Too much work.
`boolValue == true` is always the same as `boolValue`
The way you do it in the world: http://docs.oracle.com/javase/6/docs/api/java/math/BigInteger.html#isProbablePrime%28int%29 The way you do it for a test: http://stackoverflow.com/questions/2385909/most-elegant-way-to-write-isprime-in-java TL;DR; here's the code if(n &lt; 2) return false; if(n == 2 || n == 3 || n == 5) return true; if(n%2 == 0 || n%3 == 0) return false; long sqrtN = (long)Math.sqrt(n)+1; for(long i = 6L; i &lt;= sqrtN; i += 6) { if(n%(i-1) == 0 || n%(i+1) == 0) return false; } return true; 
That is ok. I was too much hard work to write the content, I do not have time now to write a PDF. I am not sure about if you can find the same kind of content in PDF like my post. Usually it is possible to find PDF of books, illegal. ^^ Thanks anyway.
By the way, there's no need to declare your `int i` at the top of the method -- this isn't C. :-)
IOException, it is declared first in the catch block.
Lol! this is one of the biggest challenges in modern science.. :)
A beginner's isPrime function will look something like this: if N mod 2 is 0 return N is 2 for i := 3; i &lt;= sqrt(N); i += 2 if N mod i is 0 return false return true First check if `N` is even. If it's even, we return `true` if `N` is `2` and `false` if it's not, because `2` is the only even prime so we need a special case for this. Next, loop over all the odd numbers from `3` to `sqrt(N)`[1] [2]. Check if `N` is divisible by any of those numbers and return `false` if it is. Finally, if the loop has finished because the function didn't return `false`, return `true` because we've proven by exhaustion that `N` has no divisors, so clearly it must be prime. [1] In most languages, you should either store sqrt(N) in a variable so it isn't recomputed with each loop iteration, or you could simply write the loop condition as `i*i &lt;= N`. [2] It is true that any non-prime number will have a divisor lesser than or equal to its square root (Google that for confirmation and explanation). 
BigInteger.valueOf(X).isProbablePrime(certainty) certainty is The probability that the new BigInteger represents a prime number will exceed (1 - 1/2^certainty). The execution time of this constructor is proportional to the value of this parameter. For most applications, that's close enough (I use certainty=90 when doing some of the Project Euler problems).
The most obvious, easiest way to implement this for a number n is to simply loop through all the numbers x from 2 to n-1 and check if n % x == 0. If any are, it's not prime. This is hugely inefficient though. An easy optimization is to only loop through 2 to the square root of n. You can reason that if you divide by a factor larger than the square root, there must be another factor smaller or equal to the square root, and so you'd have already tested that one. Another optimization is to only test the prime numbers between 2 and the square root of n instead of any number. You can use the Sieve of Eratosthenes to generate the list of primes up to sqrt(n). And after this, there are many, many more ways to further optimize the problem. If you're new to this type of program, start with a slow solution that works, then improve from there.
I'm amazed that there are still people who have never heard of bugmenot.com, which allows users to share generic login info because fuck stupid spammy registration policies. They've got a chrome app too, so I can't remember the last time I registered for shit.
"This one time I had a three way with Ruby and Groovy and Java walked in on me and I was like 'java pls' but Java dumped me anyway. My life has been meaningless since that moment."
Personally I believe I've found ecstasy. Javascript &amp; HTML5 on the frontend. Java with Jersey on the backend. Java seems to enjoy the backend. 
or you could say !boolValue
I think you'r missing the point of the euler problems
Do your own homework. 
I stopped trying to use bugmenot a while back as it seemed to work less often. 
I would say that it doesn't compile (empty try block and catching checked exceptions) 
Thanks for this useful link. I didn't read it completely yet, but I will. One of things I wanted to get clarification on - in page 2, when discussing 'Reasons that led to the creation of JPA', you only talked about the disadvantages of JDBC. My understanding about how JPA came about has to do with Hibernate. JDBC was sub-optimal, Entity EJBs were a pain to use. So, Gavin King created Hibernate. Sun wanted to standardize the ORM technology (provide a consistent API) and thus created JPA, with a lot of contribution from Gavin King. Can you (or someone else) confirm if my understanding is correct? 
Hello, I cannot tell you if about this history. I know that JPA came from EJB Entity Bean, but I can not tell you which one came first. To create a powerful platform Sun decided to split EJB Entity Bean from the EJB. But, JDBC was the first to be created so the reasons that led to the creation of the Hibernate or JPA first, was the same presented there. [= 
All decimal literals are assumed to be of type "double". If you want a float you have to ask for one manually: float weight = 2.34f; or float weight = (float) 2.34; Update: Wow. Three guys responded with essentially identically formatted comments. Who says programmers aren't spontaneous?!
Because in java a number like "2.34" is considered a double data type. In order for java to recognize it as a float you either have to cast it to a float float weight = (float)2.34; or you can specify it is a float by putting an 'f' after the number float weight = 2.34f
What OS you use?
What was the problem with Eclipse? It's an IDE - not just a compiler. [You can compile with javac command line](http://docs.oracle.com/javase/1.4.2/docs/tooldocs/windows/javac.html) You could also check out other IDE's such as IntelliJ and NetBeans. Also, check you have the JDK installed. 
netbeans nigga
Windows 7
This could be rewritten in a more elegant way but I have it so you can see what's happening. You essentially want to use String.split to split the string and parse those strings into integers. import java.util.Scanner; public class Time { public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.println("Please enter a time (hh:mm:ss): "); String timeStr = input.next(); String[] tokens = timeStr.split(":"); int hour = Integer.parseInt(tokens[0]); int minutes = Integer.parseInt(tokens[1]); int seconds = Integer.parseInt(tokens[2]); System.out.printf("Hour: %d, Minutes: %d, Seconds: %d", hour, minutes, seconds); } } 
instead of System.out.println("Please enter a time (hh:mm:ss) : "); String timeStr = input.next(); use String timeStr = JOptionPane.showInputDialog("Please enter a time (hh:mm:ss) : "); I could be wrong. I'm kind of testing myself lol. Someone please confirm if I'm right. 
I like bagi2009's answer, String.split. But let me ask you this, why store hours, min and sec in separate variables. Use SimpleDateFormat (http://docs.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html) and just get a real Date object out of it. Then you can turn that into a Calendar object (or leave it as a Date) and do whatever date manipulations you want.
I see. But, by leaving out Hibernate, you are leaving out the fact that JPA is the standardization of ORM technologies (if I'm right). I think that missing detail is important in order to understand why/how JPA came to be a part of JEE technologies.
&gt; Short answer for OP: Because it's float and floats can't have decimals. That's not a good short answer... the three responses all have the correct short answer, "In Java, decimal numbers are, by default, considered to be the double type. In order to tell Java you want to use a float, you must explicitly cast it, or include 'f' at the end of the number."
Except they're not short, thus my short, one-sentence, simplified answer. But it doesn't matter anyway because "short" is a largely matter of opinion.
it was an assignment for a class. i had to display the number of seconds since midnight. thats why i had to store variables.
Could you elaborate a little more as to what exactly you're trying to do?
You could look at CKEditor which has plug ins to point users to a server list of files.
If you're trying to open a file with an EJB, don't do it. you're not supposed to do this. Short blogpost about this issue: http://weblogs.java.net/blog/simongbrown/archive/2003/10/file_access_in.html If you want to open a file for further processing, you need to supply it somehow to your bean, except via the filesystem. Overloading a classloader to accept files within your Bean may work, but that breaks many assets the container provides to you. Uploading the content of your file to your EJB with a client through a MessageQueue may also work.
is your file called teach, or Teach? If that isn't it, that's a class path issue. It means that a class found at build time was not detectable at run time; so a setting is borked in the Project.
Ya. Fuck those guys trying to make some money. You can always use an ad blocker. 
I was going to disagree; I more expect NPE to be thrown by the JVM from a null dereference (the '.' operator or autoboxing) despite what the JDK does. But in looking that the class hierarchy of IndexOutOfBoundsException I might be changing my mind on that point. I'd rather that NPE and IOOBE be subclasses of IAE if that is the intent; but I am not quite decided especially since it is possible to have a method that requires a non-null index that also satisfies some other property (even, prime, etc). Now you have to catch three exceptions or check for all three cases yourself. Which is why I have the reservation despite the JDK implementation; just because the JDK does it does not automatically make it a good idea (Properties extends Hashtable, abuse of checked exceptions, etc). One way to do it is to create a new exception that somehow encapsulates all three, or your own exception hierarchy... but then you almost beg the caller to consider catching 4 exceptions because the other three are standard.... ([At least in Java 7 this is easier to do](http://docs.oracle.com/javase/7/docs/technotes/guides/language/catch-multiple.html).) It's been far too long since I've read that book. Every Java developer should refresh their memory from that book every six months. I am way overdue...
if Teach.class is in the folder "teach", as in /teach/Teach.class, you need to execute it from the folder one level above the "teach" folder. Folder structure example: myfolder/teach/Teach.class &gt; cd myfolder &gt; java.exe teach.Teach For java, package and class naming must match compiled folder/class naming. Classpath issue
 short answer = (short)"In Java, decimal numbers are, by default, considered to be the double type. In order to tell Java you want to use a float, you must explicitly cast it, or include 'f' at the end of the number.";
StringBuilder, yes; but StringBuffer was available in Java 1.4, and single-expression '+'-concats are optimized by the compiler to StringBuffer calls. I don't think that behavior is defined by the JLS. ___ public class Concat { private Concat(){} public static String CONST = "woop"; public static void main(String[] args) { System.out.println(CONST + "dedoo"); } } ___ $ javac -g:none Concat.java $ javap -public -c Concat.class public class Concat { public static java.lang.String CONST; public static void main(java.lang.String[]); Code: 0: getstatic #2 // Field java/lang/System.out:Ljava/io/PrintStream; 3: new #3 // class java/lang/StringBuilder 6: dup 7: invokespecial #4 // Method java/lang/StringBuilder."&lt;init&gt;":()V 10: getstatic #5 // Field CONST:Ljava/lang/String; 13: invokevirtual #6 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder; 16: ldc #7 // String dedoo 18: invokevirtual #6 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder; 21: invokevirtual #8 // Method java/lang/StringBuilder.toString:()Ljava/lang/String; 24: invokevirtual #9 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 27: return } ___ $ javac -g:none -source 1.4 -target 1.4 Concat.java warning: [options] bootstrap class path not set in conjunction with -source 1.4 1 warning $ javap -public -c Concat.class public class Concat { public static java.lang.String CONST; public static void main(java.lang.String[]); Code: 0: getstatic #2 // Field java/lang/System.out:Ljava/io/PrintStream; 3: new #3 // class java/lang/StringBuffer 6: dup 7: invokespecial #4 // Method java/lang/StringBuffer."&lt;init&gt;":()V 10: getstatic #5 // Field CONST:Ljava/lang/String; 13: invokevirtual #6 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer; 16: ldc #7 // String dedoo 18: invokevirtual #6 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer; 21: invokevirtual #8 // Method java/lang/StringBuffer.toString:()Ljava/lang/String; 24: invokevirtual #9 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 27: return } ___ "javap" output for a class compiled with jdk 1.4 (yes, I still have one on my system) is identical.
I think it's a classpath issue. Your compiled code should be in a folder structure something like this: bin teach Teach.class To invoke your program, you want to: java -classpath bin teach.Teach Obviously, you can rename bin to whatever you want, but under it, your folder tree has to match the package declarations of your classes, and you need to point java at the top of the tree, not at the folder with your .class file. (Unless your class doesn't have a package declaration, but that's going to be messy for any moderately sized project) EDIT: Oh, and you can apparently skip the "-classpath bin" bit if you cd into bin before invoking java.
He's using Netbeans is the problem. most of this shit is done behind the scenes by NB. I've ONLY ever gotten NoClassDefFoundError from NB. Edit: Please note that I use NB as my primary IDE at work. I'm not talking shit. It's just the nature of hte beast.
Trying to make money is one thing, but it's disguised as an answer... Maybe a spammer, though.
"Two point three four f." I don't see any decimals in there.
Hmm, I'm going to make this a quick reply. Just scanned through the JLS for Java 5/6 and 7, and [this](http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.18.1) is what I could find: &gt; An implementation may choose to perform conversion and concatenation in one step to avoid creating and then discarding an intermediate String object. To increase the performance of repeated string concatenation, a Java compiler may use the StringBuffer class or a similar technique to reduce the number of intermediate String objects that are created by evaluation of an expression. So yeah, my bad - the optimization involves creation of new StringBuffers; optimization using StringBuilders may occur (as noted by 'similar technique'). And it is optional, so it really depends on the compiler not on the JVM at runtime. [The JLS 3rd edition also defines this behavior.](http://docs.oracle.com/javase/specs/jls/se5.0/html/expressions.html#15.18.1.2)
Okay, this makes sense. So I decided to bypass NetBeans for now and just work in the terminal to see if I couldn't figure out the error. [In this picture](http://i.imgur.com/WLTdb.png), you can see that Teach.java is in a teach folder. And in the terminal, you can see that I compile Teach.java (successfully) and then try running it, to get the same error. The neophyteness is killing me here but there's some ridiculously simple error that is still escaping my attention. 
I'm close here but something's still wrong. Please see the update.
RE: the screen shot, you don't include any file extensions when invoking java. Not Teach.java, not Teach.class, just Teach. And you may need to cd .. first.
Yes, very close! "java -cp .. teach.Teach" should do it. When you run the program, you need to give it the name of the class (including the package), which for you would be "teach.Teach". It expects "Teach.class" to be in the "teach" subdirectory, so if you run when you're already in that directory, you need ".." as your CLASSPATH.
I use Netbeans for my Computer Science degree. But I much prefer http://www.sublimetext.com/ Once you see what features it has, it pretty much blows the others out the water!
On page 9, you say &gt;The @Id annotation is used in the entity Car to inform the JPA that the DogHouse will have the same id as the Car. Do you mean Dog instead of Car here?
Everyone's covered what the answer to this is, but I've got a somewhat related question - when declaring a float, is there any difference between using "f" and "F"? For example I was expecting the following to throw a compilation error, but it compiles and runs ok, and outputs true: public static void main(String[] args) { float f1 = 1.01f; float f2 = 1.01F; System.out.println(f1 == f2); } I've dropped the compiler version to 1.2 and it's still happy that the two values are equal. I've always used the lower case version, and can't see this changing (lower case for primitive types, uppercase for a classname), but is there any reason/advantage for using one case over the other?
If I into the teach directory and run "java Teach" it works. And yet this does not. Do you know why?
The compiling line works, and yet the second gives me a "NoClassDefFoundError: teach/Teach". Do you know why?
Have a feeling this is a really specific question, but just in case anyone else ever stumbles upon this here's the solution I found. Add this line: &lt;property name="user.home" value="{FILE}" /&gt; in the resource tag of the supplied jnlp.
Thanks for the tip! I already edited there. [=
Well, what is your problem? Do you get an error? You don't know how to compute the median?
write down your steps on how you would solve for the medium for the following set of numbers (2, 5, 8, 3, 9). if you can do that, you can write the function
https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/let
You need to ask yourself the steps you take on paper to work out the median. Break it down into idiot proof steps, and then look for how you might implement those. Please try very hard to do this, or you will find yourself struggling increasingly more as you continue your learning. If you are on a college/university course, make sure you understand how easily questions like this can be found. Make sure, for your own sake, not to post marked assessments!
A working template. Just making it easy for anyone who's thinking about building a site using some of these technologies.
This is a way to use a BufferedReader without getting in an infinite loop. BufferedReader infile = new BufferedReader( new FileReader( args[0] ) ); String line; while(line = infile.readLine() != null) { list.add(line); } 
Median is a little more complicated than that. The array would need to be sorted first and even then you'd have to account for when the array has an even number of elements.
[This page](http://blog.ryanrampersad.com/2008/12/stop-input-skipping-in-java/) explains it better than I could.
Many devices support SNMP, I'm sure a java library exists for this purpose. Good luck!
This type of application would be exceptionally complex. You would need to find a way to bypass captcha too... Good luck.
Arrays aren't the most efficient way to find dupes. Consider using a set, or a hash map (perhaps mapping strings to counts).
What I was thinking is that I can grab the URL of the captcha picture and display it in the gui for the program so the user can enter it in manually. 
Remove Multiple Spaces: http://stackoverflow.com/a/2932439/409025 Remove Non-Alphanumeric: http://stackoverflow.com/a/1805527/409025 countOccurrences: http://stackoverflow.com/a/275969/409025 public static int countOccurrences(String haystack) { // Trim and replace multiple spaces. string after = haystack.trim().replaceAll("[^A-Za-z0-9 ]", "").replaceAll(" +", " "); // Assume Names are separated by spaces // If empty, then no names if (after == "") return 0; // Otherwise... atleast 1 name int count = 1; char needle = " "; // Count Spaces, one word per space for (int i=0; i &lt; after.length(); i++) { if (after.charAt(i) == needle) { count++; } } return count; } haven't done any checking, and not really good at java...
There's quite a few discussions about this in [JGO](http://www.java-gaming.org/index.php) atm. Like this [one](http://www.java-gaming.org/topics/what-tiles-are-currently-visible-in-a-viewport/27616/view/topicseen.html) for example.
Awesome, thanks. Can you give me some tips on how you found that? I know that you just have experience, but what can you tell someone new to this?
Thanks for the edit. Couldn't see anything for a while.
[Here you go.](http://pastebin.com/E5DV4XtN) The comments in green are my notes to you about optimizations, and the comments in grey explain the algorithm. If you have any questions, feel free to ask! :) Edit: I forgot all about StringBuilder, which is what CharginTarge was talking about. [I've added StringBuilder here along with some notes about it.](http://pastebin.com/962Q61SP)
I get that it's just a template, starting point, example etc. But it would be nice to see better password hashing. If someone just picked this up and ran with it, they could be left with just plain MD5ed passwords? Just the first thing I looked at BTW..
Why use a row array? for(int i = 0; i &lt; n; i++){ for(int j = 0; j &lt; n; j++){ System.out.print(i == j ? '0' : '*'); } System.out.println(); }
You are thinking of a program that is called a web browser, like Firefox or Chrome. It can do what you want. 
Interesting. I get this: javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=bold,size=12] When I run an compile this: public class T { public static void main(String[] args) { System.out.println(javax.swing.UIManager.getDefaults().getFont("Label.font")); } } 
I am in a very similar position to the OP. The single biggest tool I've found to help me is getting a good IDE. My team uses IntelliJ IDEA. Watching my team members "navigate" through the code is done entirely with searches - search for a file name, search for a method name, etc. No one ever uses the hierarchical tree pane to get around. Java seems to lend itself to large scale complexity and the IDE hides a lot of that complexity.
I have some code in Python that uses Ctypes to do some dll interrupt commands. Does this mean I can easily port that to Java?
Ok, here's some hints. First, you obviously need to read the file line by line. You have that figured out in your infile.readLine(). Next, you don't know how many lines you are going to have so you are on the right track with using a container class like List&lt;String&gt; but I might suggest an alternative. You need to count unique strings then graph the lengths. So it sounds like you need to keep track of how many lines you read, detect and count duplicates and track the length of each string. You might consider instead of simply maintaining a list of the strings, maintain a map. That map could use as the key the string itself for example then when you read a line you look if it is in the map, just increment the counter for the number of times it was seen. If it is new to the map, the count is set to 1. Once all lines are read, you can then process the map, count all entries with a count of 1 (total unique lines) and build a list of lengths from the key's length itself. 
As you seem to know Maven (as a hobbyist I only know to close it when opening eclipse) do you have a suggestion on what would be the easiest way to start familiarizing oneself with it so that it is a useful tool instead of a confusing feature?
I've been in a similar situation a couple times. For me, the best way to get a handle on a huge code base is NOT to try and determine some overall architecture or study the hell out of the code. Get some bugs to fix. It'll force you to follow specific code paths and while you won't get some grand overall idea of the code, you'll begin to understand pieces of it. After fixing several bugs, you'll begin to develop more of the big picture.
I don't think anyone here answered your question. So here's my take: get the project running locally, change small parts of the code to do different things, set breakpoints in your IDE and step through the code.
build and deploy the app locally, if possible. Pick one small piece of functionality and trace it through all tiers, ignore all other rabbit holes for the moment. Once you understand that, pick the next one and so on. How to eat an elephant? one bite at a time.
Forget Eclipse for a while. Learn Maven on its own, only using pom.xml files you write yourself (follow Maven docs, it's not too hard), and mvn from the command-line. Work from Eclipse for editing the pom.xml if you prefer, but make sure your final build (the one that produces the jar/war/ear/whatevar) is run from the command-line. Once you're familiar with Maven, you can learn the particular Hell that is its integration with Eclipse (got better, but still bothersome).
Learn how to use an IDE's debugger. Reading System.out statements is ok, but they can clutter your code; stepping through the code saves you having to write statements which cover all eventualities.
Intellij is fantastic, I put the money down for a personal license because I find it so infinitely easier to develop in.
I never did try to learn Maven via CLI so my little experience with it is only with Eclipse. Good to hear that its the plugin, not the tool, that is the weakness in that situation. Will try it out again sometime
I would not suggest rooting through SVN to figure things out. It is probably best to get your company's recommended IDE (probably Eclipse?) and check the code out, if at all possible. If it is anything like our project, SVN is just going to show you about 100+ java files in 50+ folders and you will never learn how the code is tied together that way. If you check it out in Eclipse, it should set the project and packages up in a way that's much easier to navigate. From there, you'll be able to open up classes and CTRL+click to jump around between code in different classes to navigate the code flows. From there, your best bet is to take a look at the pom files, to see what your project is dependent on. It might be dependent on other software libraries within your company or pretty common/open source tools like log4j. You might also want to do a search for **public interface**. Good programming practice dictates that any substantially complex code should have its implementation built around an interface. The interfaces will give you a rough idea around the entry points into how the code is coupled. If you see a something.java interface, you should see a somethingImpl.java implementation of that interface nearby, which is going to be the meat of the code. For example, if you see **public interface OrderManager**, you might see methods for setting up, creating, cancelling, and updating customer orders. You'll want to look for some class, likely OrderManagerImpl, which will show up as **OrderManagerImpl implements OrderManager**. From the interface, you'll be able to see your methods *createOrder, updateOrder, cancelOrder*, and you'll be able to find their implementations in the impl.java. Java files ending in **Dao.java** is another popular convention for writing Hibernate Data Access Objects; basically interfaces that work with pojos to help abstract some of the complex database operations your application might be doing. Your project is almost guaranteed to be Spring-wired, so if you see a class with some private objects with setters/getters, try to find that object in the Spring config, and once you get comfortable, you should be able to see how things are wired up.
Sounds mostly like an in-house matter; the other programmers there should either be able to show you how to get around their code, or that company is going to be hopelessly lost in the long-term.
Hi Bread - I like you was looking for the same thing for my future placement year - The problem I found with most places was that they required a "permanent visa" Basically they wanted you to live there for as long as you could, some food for thought at the least. Google is your friend in this case.
In other news Steve Jobs has turned in his grave. 
As someone who has had to use Oracle ADF, run for your fucking lives.
They had a couple of Java on iOS talks scheduled but they were all cancelled last minute. 
Completely agree! Why ADF...
If I felt like being a bit more mean-spirited, at risk of making the code a bit messier, I'd put in more ORDER clauses: SELECT word FROM dict WHERE word LIKE 'a_b_c' ORDER BY word NOT LIKE '%q%q%q%', word NOT LIKE '%q%q%', word NOT LIKE '%q%', RANDOM() LIMIT 1; That way it'll preferentially return one with fewer of the characters the user just typed, if it has no choice [user gets a prize if they can coerce the computer into choosing a word that has four of the same characters remaining, or something] Extra thoughts [no, you've got me thinking now, this is actually kinda cool]. If I were extra malicious, instead of returning one word, I'd grab them all in my code, and generate a histogram of unknown characters and pick word least likely to be matched. Except an attacker could implement the same thing. So now you'd have to pick something... maybe, a random distribution where the least-likely letter combinations are more likely to be chosen? There's probably still a viable attack against that, though. I guess that's actually fairly moot, since the current word doesn't actually matter, all you're doing each step is doing the most malicious thing you can. Hrm. Maybe there's something there, though. Since I've probably made your assignment really easy now: If I were implementing this then the awesome thing would be to implement the attacker, rather than the evil hangman game [since that took 20 seconds and a SQL one-liner]. The character histogram thing would be really neat to see, or maybe there's a more interesting attack [likely starting with words that have combinations of letters or something]
Oooh Ooooh more thoughts: The naive algorithm I described will end with the game converging on the same word each time. And just about any intelligent attacker I can think of will do something similar. A primary goal of the attacker is [I think] cutting the problem space as fast as it can. The goal of the game is to maintain the problem space as large as possible for as long as possible. At least early in the game, instead of just "picking the word with letters least likely to match", I think a better implementation might be to consider each letter choice by the attacker as splitting the dictionary into two sets: Words that match, and words that don't. Naively, the evil game might choose the set with greater cardinality. More in-depth, though; each step [and this begins to sound like a dynamic programming problem], what the evil game *really* needs is the tree with the maximum number of branches. Each time an attacker picks a letter, the game needs to completely rebuild both trees in front of it, and simply pick the one with greater depth. Or maybe greater branches. Except an attacker could be doing the same thing; each step, the attacker rebuilds the same trees and assumes that the game is going to choose the deeper one, and so deliberately picks the item in the deeper tree. Self-evidently, this will presumably converge on the same word each time. That word needs to be more than ten deep and the game becomes unwinnable. Except the attacker knows this and might try to beeline for that word, or something. Your new term for today is '[walls and ladders](http://blogs.msdn.com/b/oldnewthing/archive/2012/01/17/10257351.aspx)'. ... Ah, I got it. The attacker needs to build a tree containing every word, making the deepest point of the tree as shallow as possible. Each step the attacker gets to rebuild that tree, making the entire thing as balanced as possible each time. I suspect that the English language is large enough as to make the evil game able to win in every scenario, but I'm not sure
I'm brand new to Java and haven't encountered Set&lt;String&gt; yet. I guess I'll have to take a look at it.Did your hangman thought of a word of random length? If so, were words of different lengths stored in different Sets at the start of the game?
Actually we used a word length determined by the user. My set only had words of that given length. Set is like a list, except there are no repeats. The TreeSet implementation is good for storing words in alphabetical order.
I appreciate the long and thoughtful reply, but I wasn't really thinking about optimization. But it seemed to me that your code still calls two O(n) operations in the loop (arraycopy and append(char[])). From personal experience arraycopy isn't faster than a for loop. So I benchmarked the code, and your code is faster. So I guess the overhead from calling n^2 appends and the comparisons are significant compared to two assignements. And the actual printing dominates the runtime by a couple of orders of magnitude anyway. I also optimized the code a little more private static void buildGridString(int n){ StringBuilder sb = new StringBuilder(); char[] row = new char[n]; Arrays.fill(row, '*'); for (int i = 0; i &lt; n; i++) { row[i] = '0'; sb.append(row).append('\n'); row[i] = '*'; } return sb.toString(); } edit: It's definitely the method call overhead that is causing the difference.
It looks pretty decent IMHO. &gt;One thing I cannot change is the name of the variables otherwise things like total would be called sumOfDice. Why? &gt;I tried making pointCarry a method of two variables but that would not work. Why? Also, I personally really hate leaving out braces for if statements. But that's just me. Next, style where I am is to put a space between `//` and the start of the comment. This is pretty universal. Something that might be more specific to my people would be the two spaces _before_ `//` rather than 1. Also, typically for Java, people follow the 1TBS, since that's what's automatically generated by Eclipse and that's what most of the examples in the Java documentation look like. Java typically uses 4-space tabs. If you use Eclipse, ctrl+shift+F will automatically format the entire file for you. It's great. In general, though, what's more important is that you follow a consistent style, not that you follow any particular style at all.
Yes it is Phonegap for UI and device services but also seems to include an embedded JVM for running local Java business logic and calling web services. For a nice diagram see: https://blogs.oracle.com/mobile/entry/adf_mobile_released
I don't know if this would work, but i would suggest making one thread for the game loop, with a boolean variable such as "waitingForGui", and as long as its false running the loop. When you need gui input set it to true. Then attach a mouse or mousemotion listener to the gui component you want, and within the listener set the waitingForGui to false when the input is obtained. This would be my first guess.
Well, anyway, in the future, if you want to rename variables, Eclipse can help you with that too.
Which means it is actually **not** running on iOS.
It depends, there's normally a simpler way to use GUIs in most game engines. What game engine are you using? What type of GUI are you talking about? One built in to the game engine or a separate Java Swing/AWT GUI?
Here's how I would do if it I was coding a card game from scratch. If it doesn't apply to whatever you're doing, feel free to ignore. First, a game engine for a card game probably doesn't need a thread running in the background or anything. Let's make a "model" class that handles all the card game logic. It has the state of the game and everything else that the card game needs to run. The game is likely event driven -- when I lay a card down, I can call methods in the model to lay down a card. One pattern that might be useful would be to have the "model" notify the GUI whenever it changes it's state -- after all, when the model changes state, it's time to redraw the GUI. If this sounds good to you, look into the Observer and Observable classes in the Java API. This way, the GUI handles an event, the controllers/eventlisteners tell the model what to do, and the model tells the GUI that the state has changed (and how, if necessary). You can then redraw the GUI accordingly and go to the next turn or whatever it is you want to do.