If we're just talking about a single web server, then it is possible to just embed [Jetty](https://www.baeldung.com/jetty-embedded) in your application. With Jetty you can configure layers of [filters](https://www.eclipse.org/jetty/documentation/9.4.x/cross-origin-filter.html), [handlers](https://www.eclipse.org/jetty/documentation/9.4.x/resource-handler.html), [servlets](https://www.eclipse.org/jetty/documentation/9.4.x/proxy-servlet.html) and even [jersey resources](https://nikgrozev.com/2014/10/16/rest-with-embedded-jetty-and-jersey-in-a-single-jar-step-by-step/). I think [this](https://github.com/terminological/jetty-jersey-swagger) is a great Jetty-Jersery-Swagger example. It shows how to host the Swagger documentation endpoint for your Jersey jax-rs endpoints (the Swagger documentation is generated for viewing with the swagger-ui, but not saved in a file by default). The Jetty-Jersey-Swagger setup is powerful and relatively simple for a single web server, but it isn't quite a full micro service solution. The Java micro services that I maintain are made up of some web servers, some processing nodes and some storage nodes. Jetty supports a [distributed](https://examples.javacodegeeks.com/enterprise-java/jetty/jetty-session-clustering-example/) setup, so you could have a pretty highly available gateway to your micro service cluster. From there you could have a bunch of distributed storage/processing nodes that are built off of [Hazelcast](https://hazelcast.com/) and [Hazelcast Jet](https://github.com/hazelcast/hazelcast-jet) or [Apache Ignite](https://ignite.apache.org/). There may also be a need for high-speed messaging between the nodes in your micro service cluster and that can be handled by [JMS](https://en.wikipedia.org/wiki/Java_Message_Service) [libraries](http://activemq.apache.org/) or an RPC library like [Apache Thrift](https://github.com/apache/thrift).
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://en.wikipedia.org/wiki/Java_Message_Service) - Previous text "JMS" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Hi, at present, this framework is still under development, and the invisible watermark only implements the LSB spatial domain. LSB is very poorly robust and does not support lossy compression, so I am going to make a watermark added to the frequency domain in the next step. For an Android framework, I think it is enough to provide these two interfaces.
For the emojis in the commits, you can try this tools: [cz-moe](https://github.com/huangyz0918/cz-moe)
Awesome!
&gt; I don't know about Excelsior JET (it's expensive for me anyway). It does support JavaFX, and the Standard Edition is free.
Im very new to java. Can anyone explain me what minimum specs are needed on embedded device to run a JavaFX programm (lets say a simple calculator with GUI)
But standard edition can be used for commercial projects?
Yes, it can.
Excuse my ignorance, but are OpenJDK and OpenJFX on Android/iOS going to be a thing, without *commercial* packages from companies like Gluon or CodenameOne? Gluon maintains open source [JavaFXPorts](https://bitbucket.org/javafxports/), but I don't really understand the relationship between JavaFXPorts, OpenJDK/OpenJFX and Gluon VM/Mobile.
That's cool. 32-bit and Windows-only but that's already useful in many scenarios. Thanks.
It does seem that Graal is the response to slow start up times we've had to deal with for the last 20 years. Java hasn't been good at short-lived processes until now.
I work for Codename One. We don't use JavaFX for anything other than a few small features in our desktop simulator and older desktop ports. We have a strategy to remove it entirely in place because we don't think it has a future. Since we don't use JavaFX our native iOS binaries clock as low as 3mb and our Android binaries clock under 2mb.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
[http://javaonexperiance.com/](http://javaonexperiance.com/)
There is a discount application form at https://www.excelsiorjet.com/micro#apply
[https://dzone.com/articles/should-oracle-spring-clean-javafx](https://dzone.com/articles/should-oracle-spring-clean-javafx) The TL;DR is that it's been years and multiple attempts. It still didn't succeed. This isn't a debate, even the hardcore FX fans accept that as a fact. They claim that this is due to people leaving desktop in favor of mobile which is probably partially true. There were/are many attempts to put JavaFX on mobile. Try creating a hello world and compare the size/performance/compatibility of any such solution to pretty much anything. It's an inherent flaw that can't be fixed. 
Is Azul planning to follow the same approach as Oracle for it's Zulu releases? Which would mean free Zulu community releases are only available for 6 months and LTS releases are only available for commercial customers? Or will Azul make LTS updates available as community releases?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Okay, JavaFX isn't the most popular GUI framework. But why does it even matter since it's still being developed by good programmers?
Nah, I just settle for the coffee.
No dude
Obsolescence anxiety. Some people get super nervous when they even think about non-mainstream stuff. Sort of a herd instinct.
One big takeaway from the article was the link to the BellSoft builds of JDK / JRE. For Linux. For amd64 linux desktops. For ARM 64 bit and ARM 32 bit Linux on Raspberry Pi. [https://bell-sw.com/](https://bell-sw.com/) [https://bell-sw.com/java.html](https://bell-sw.com/java.html) [https://github.com/bell-sw/Liberica/releases](https://github.com/bell-sw/Liberica/releases) [https://github.com/bell-sw/Liberica](https://github.com/bell-sw/Liberica) &amp;#x200B; Yet another source of prebuilt binaries. &amp;#x200B;
This is already mentioned in the Alternatives section: &gt; ##Alternatives &gt; Use nested classes as holders for single lazy variables. &gt; [...] &gt; (N.B. The above workarounds do not provide a binary-compatible way to evolve existing static constants away from their current reliance on &lt;clinit&gt;.) If you use a constant using a nested class, you can not simply change that without changing the contract. And there might be a better way to do that tomorrow.
Yes, it's mentioned. I'm saying it can do everything better. There is no "contract" with this pattern. You'd obviously not expose the field public because you'd never do that in Java anyway. If there isn't actually an advantage to lazy yet, why add it?
That's what `--add-opens` is for. And that is not going away.
Wait . . . now I'm confused. :-) I thought it was . . . if it ain't broke, fix it 'till it is. &amp;#x200B;
It was developed by great programmers but they over designed it. It's now a huge framework. As a result even the best programmers can't possibly maintain something this big and keep up. The idea of "open source will fix it" is nonsense. If it had any merit JavaFX would have been far better than it is, it already had years of "open source" and still suffers the same problems. Back when we were at Sun the JFX team was 100 developer strong and the project just wasn't designed to scale down. It's over ambitious. There are bugs in JavaFX on desktop that are just embarrassing, we had to explain to users that media can't play over HTTPS in our simulator because for some reason JavaFX didn't support that... The webkit support is a nightmare. Desktop Java is still a pain to deploy, javapackager is awful. As I said on mobile it's a non-starter. Then there's the issue of keeping up with even desktop OS's. Windows is moving to UWP (which we support BTW) and FX probably won't. Mac OS/iOS are moving to metal and deprecating OpenGL. Rewriting the rendering pipeline of JavaFX on metal probably won't happen, it's ridiculously complex. Last but not least: why use JavaFX? I'm a huge Java advocate, but I want to pick the best solution to solve the problem. The only thing you might argue for FX is that you like the API. That's OK but I don't write apps for me. I write them for our users and in every other count FX is a disadvantage: \- Large binaries with "problematic" deployments \- Works on fewer platforms than many alternatives \- Buggy with slow fix cycle etc. Some might argue that JavaFX apps look good but I can't think of a platform that can't get similar/comparable result with any other platform. It's mostly developer/designer skill.
Nope: [https://www.reddit.com/r/java/comments/9dsxxl/javafx\_11\_early\_access\_on\_embedded/e5kisws](https://www.reddit.com/r/java/comments/9dsxxl/javafx_11_early_access_on_embedded/e5kisws)
Hmm...sounds like a nice idea for a Maven plugin. Checking your dependencies and POM configuration for Java 11 compatibility, with a side order of updating them if possible.
I don't know if this is helpful. Today over on this thread . . . [https://www.reddit.com/r/java/comments/9dsxxl/javafx\_11\_early\_access\_on\_embedded/](https://www.reddit.com/r/java/comments/9dsxxl/javafx_11_early_access_on_embedded/) I discovered a source of pre built binaries . . . [https://bell-sw.com/](https://bell-sw.com/) [https://bell-sw.com/java.html](https://bell-sw.com/java.html) [https://github.com/bell-sw/Liberica/releases](https://github.com/bell-sw/Liberica/releases) [https://github.com/bell-sw/Liberica](https://github.com/bell-sw/Liberica) &amp;#x200B; &amp;#x200B;
Why don't you learn something new and answer your questions yourself? :) It's the best way to learn r/https://gluonhq.com/developers/samples/
Don't get me started on ImageIO.
That's to be expected with any Java program and isn't related to GC. Java is optimized for throughput and long running applications. At startup it will be slower until it can analyze, compile, and optimize your code
It depends on your use case. I work on a very small team creating apps meant to be used on low end hardware in the developing world, with most likely no internet. We're trying to share as much code as possible via Kotlin, and only re-implement the view layer on Android. JavaFX was the only thing that made sense for me because Electron isn't going to be good for Audio processing with low powered devices. I looked into Qt, but the Java bindings look to be dead. Java bindings for GTK apparently don't exist for windows, and that project also looks to be dead. GTK# looks to be cross platform for desktop, but I'd like to stick to Java when it comes to Android.
What about Swing?
Eh, I'd say it is pretty normal and not all that bad for say, the parallel collector. Objects that are too large can be auto allocated into old gen, and eventually that will tip over if you deal with big things a lot. (this is even more true with G1. It actually was even worse for a little bit because humongous regions were only collected on full GCs in previous incarnations). You don't want to spend ALL you time running major GCs, but if you trigger one once every 1-&gt;5 minutes... not a big deal IMO. (unless you are highly, HIGHLY sensitive to latency)
this is true whether the jre is bundled or not. either you have to remember to update every system you control, or you update the software. 
&gt;Why don't you learn something new isn't asking question how someone could accomplish this
It's not dying. The API is used in android app development. It is also very Heavily used in business backends. It is one of the most used languages in existence.
No. [most popular programming languages ](https://stackify.com/popular-programming-languages-2018/) 
If working on Android also add non-static inner classes. Threads and AsyncTasks in particular need to be careful
Very helpful article. I'm currently struggling with this exact issue at work - an application that has to be restarted approximately once a week because of out-of-memory issues. The most frustrating thing is that I can't seem to replicate the issue in my dev environment, even after putting it under a load 100x the typical production load. I can only conclude that the issue is somehow related to the production environment, but what that difference could be, I don't know. 
[https://github.com/emacs-lsp/lsp-java](https://github.com/emacs-lsp/lsp-java)
It looks like in your [submission](https://www.reddit.com/r/java/comments/9e0wsw/i_would_like_help_beginner/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I once had a program that created object graphs so large that the garbage collector couldn't work out when they were garbage in the time it had to do it's job. I solved it by nulling all of the pointers in the tree when I was done with them.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Normally I'd agree with you, but this is a backend application that has no users as such. It's essentially a message router. What makes it hard to troubleshooting is that it runs on a threaded framework that is a "pipe and filter" model. So, one thread creates an object, then passes it along to another thread that modifies it and passes it along, and so on. So the thread that created the object is far removed from the last thread to use it. Using Visual VM as a profiler (the only one I have available) tells me only where the memory was allocated, but I already knew that. What I need to know is which thread refuses to let it go.
Could be as simple as dropping a log statement in the constructor and overriding the destroy() method with a closing log entry. Let it run until you get close to the OOM, then remove the log statements and analyze the file. If you find broken pairs, that might help to track down the culprit.
With a heap dump in VisualVM you can analyse the full reference graph of the entire heap. You can usually find out the root reference and get a lot of insight by just looking at some random instances of the leaked objects.
I think it would help to use something like flight recorder for production which you can then analyze offline.
I think it would help to use something like flight recorder for production which you can then analyze offline.
I think it would help to use something like flight recorder for production which you can then analyze offline.
I think it would help to use something like flight recorder for production which you can then analyze offline.
I think it would help to use something like flight recorder for production which you can then analyze offline.
I think it would help to use something like flight recorder for production which you can then analyze offline.
I think it would help to use something like flight recorder for production which you can then analyze offline.
I think it would help to use something like flight recorder for production which you can then analyze offline.
I think it would help to use something like flight recorder for production which you can then analyze offline.
What the specification calls "inner" classes, as opposed to "nested" classes (non-static vs. static) poses the same problem in any environment. Android just has a tricky lifecycle on top of that, and runs in a constrained environment that makes leaking extra painful.
What the specification calls "inner" classes, as opposed to "nested" classes (non-static vs. static) poses the same problem in any environment. Android just has a tricky lifecycle on top of that, and runs in a constrained environment that makes leaking extra painful.
This article is disingenuous. Half aren't real leaks and there isn't much in the way of explanation. It's semantics, but if you read this article and come away with "this is how leaks happen" then it's because you don't know what a leak really is and consequently have not learned how to avoid them. 2.1 is not a leak; you asked for a class variable and got one. There's a close variant of it that does cause leaks, however: a cache-like variable (usually a map) that is continually filled with objects at runtime without any transitive cleaning mechanism. That one is insidious because, given how many frameworks, including Spring, work, the cache variable may not need to be static: it is enough for it to exist in a permanently allocated bean. Java has `WeakReference` and `PhantomReference` for problems like that, although if you specifically need a cache just use an off-the-shelf implementation. 2.3 actually _still_ [suffers from an obscure potential leak](https://www.reddit.com/r/java/comments/97rqbt/best_and_worst_java_exception_handling/e4aocb5/); and 2.4 isn't "similar", it's "the same", only some resources are managed by the JVM and some aren't (now you're not just leaking JVM memory, you're also leaking sockets or file descriptors at the system level). 2.5 is not a leak either, although in this case it's only because the author fails to establish a uniqueness definition for `Key` (and then turns the problem on its head and spins it that way). Instead it's a correctness error: `Key` was supposed to be unique by `Key.key`, which requires fulfilling certain contracts (`equals()`, and ideally `hashCode()`) that `Key` does not fulfil. Conversely, by not fulfilling those contracts, `Key` reverts to the default uniqueness definition which is correct but potentially inefficienct. In other words, adding objects with default `equals()` and `hashCode()` to a set does not inherently leak memory, but may cause you to spend more than strictly necessary. Again, there is a variant of this example that _will_ cause leaks, though it's still about correctness: calling `map.remove(new Key("key"))` will not remove anything because the argument is a new unique object that doesn't exist in the map.
Good read. Never knew about the hashset without having a .hashcode set. Calling the System.gc only hints the garbage collector to run, it doesn't guarantee to do this.
If it were to guess, i believe it would be because the hash table cannot ever remove the object because it has no key (or no method to compare and find the key) and hence always keeps a reference to it. It is a guess though.
Nope, objects do have a key and a hashcode by default, they are just based on object _identity_, basically `==`. Adding two different objects with the same content to a `HashSet` will store the two objects separately, which may not be what you actually wanted. No actual memory is leaked, same with most of the other points in the article.
It's not possible to have "no key". `Object` defines [hashCode](https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--) (and [equals](https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-)), so any object you put into a HashSet will always have a (default) method for generating a key – albeit a possibly very inefficient one. The problem is that the default `hashCode()` will use an arbitrary propery of the class (IIRC it uses the location in memory) to determine a key, and thus it can't "know" what your code's logic defines as "the same" object. In the articles example the `Key` class clearly has a single propery `key`, and you'd assume/think/know that `Key` objects having the same `key` value are really the same thing. But because there is no overriden hashCode/equals the JVM uses the default method, and determines every `new Key("key")` to be a different object, hence you can add multiple instances with the same `key` to a HashSet.
Most of our simulator code is Swing. Unfortunately basic things (for 2018) are missing from it. Everything from video to proper web view... So our code is Swing with touches of FX. Swing is dated, it can't be used on mobile. I wouldn't start a new project with Swing where even simple things like retina support are a problem. Its deployment suffers from similar problems to FX so the same basic issues I stated for FX apply to Swing. There are currently very few actively developed cross platform desktop frameworks. The market mostly moved onward to web.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Maybe using javafx. 
Definitely possible, but asked in the wrong subreddit. /r/java is not for help with Java programming; that's what /r/javahelp is for.
Thanks! I'm gonna check this.
Sorry for the mistake. It's true I ask to fast. Thanks for you to still answer. I'm gonna check this out too!
Interfaces can't have fields and they've only been able to have private methods since Java 9, so if those restrictions apply to you then you'll need an abstract class.
&gt; they've only been able to have private methods since Java 9 Just a note: the first time I read this I thought you were saying that since Java 9, interfaces can *only* have private default methods, which is not true. Reading again, I realize you mean that Java interfaces gained the ability to have private methods just recently, in Java 9. Just in case anyone else shared my confusion!
Unfortunately I'm on Java 7. But still, it's possible I could run a separate instance on the production server and do a heap dump from there. Thanks for the suggestion!
Good suggestions, thanks! Unfortunately the message classes are in a library I don't control, but I might be able to rig something up.
I'll give it a shot, thanks! 
You can mimic algebraic data types with classes, something that's not really possible with interfaces as of yet. I saw a power point slide with sealed interfaces in one of the Java One talks though, so there is hope.
You also might want to try out a commercial profiler like YourKit or JProfiler for analyzing the heap dump - VisualVM is nice for a first idea of what's wrong, but commercial profilers offer more thorough analysis and inspection tools.
I wish I had that option, but this is on a government system where they strictly control the software available. I could request a new tool, but it could be many months in the approval process.
Yes, interfaces gained public default methods in Java 8, and public *and* private in Java 9.
Abstract classes can have state, interfaces don't. Abstract classes are for inheritance, which may or may not be a bad thing. Interfaces are to give (unrelated) classes a certain feature. 
Is there a benefit of using `break` over the following? public void jumpForwardExample() { method1(); if (!condition) { method2(); } }
Aye-aye cap'n I'll join your crew as well!
abstract classes can have class variables, but using them makes them less proficient, because lookup of those variables is more costy then variables from the current class, especially if you have deep Inheritance trees. Also interface inheritance fits better with the Subtyping design pattern. Therefore modern programming lang i.e. Go only support interface inheritance. 
He’s looking for subscribers.stream.filter(Subscriber::worksRemote).filter(Subscriber::willingToShareSalary).map(s-&gt;f(s)).average();
There is, _if_ you replace "method2();" with a larger block of code: the "break;" statement is always going to be one short statement (so short, in my style preference, it can be affixed to the end of the `if` without brackets), whereas the "otherwise" block can be long. By using the `break` trick you avoid an indentation level. But mostly, I was showing a strictly better way vs. one of the tricks shown in the original article 😄
The difference between interfaces and abstract classes is mostly conceptual and as such you are approaching this from an entirely moot point of view. Interfaces declare a concept or purpose, while abstract classes define behavior (I'm sure someone else can describe that much better than I do here). You don't pick one or another because of what it can or cannot do, you just pick the proper tool for the job as expanded upon on decades of object-orientation theoretical work (modeling, system analysis, software architecture, so on and so on...). If you want to describe a shape, then Shape is your interface. Geometric Shape might be an abstract class, for example. It depends upon context but whether to use one or another should always be a 100% a question of software architecture and design and never (or seldom) an implementation consideration. You wouldn't use a scissor to pull a nail out of a wall. In the same way, you shouldn't use an abstract class when an Interface is the right tool.
No, not “in place of interface”, but with it. I highly recommend reading Effective Java. In it Joshua Block discusses skeletal implementations which combine the benefits of both interfaces and abstract classes: https://stackoverflow.com/questions/13436995/why-and-when-to-use-skeletal-implementation-in-java
An interface is like when a grader provides level ground. Depending on the building type being planned, you might need an intermediate base (abstract class) or the permanent base (classes) at the base. The good thing about OOP is, you can always add an abstract class later on if it increases the integrity of the design. Another aspect to consider, "[DI] killed the [OOP] star". 
Dependency injection is an oop concept. DI and delegation have some advantage to plain and stupid inheritance, though. 
&gt; Dependency injection is an oop concept. Not really. https://stackoverflow.com/questions/1005473/must-dependency-injection-come-at-the-expense-of-encapsulation "When we use IoC/dependency injection, we're not using OOP concepts. Admittedly we're using an OO language as the 'host', but the ideas behind IoC come from component-oriented software engineering, not OO." 
You can read more about records [here](http://cr.openjdk.java.net/~briangoetz/amber/datum.html).
From Oracle's Java Language Complete Reference: A primary motivation for the default method was to provide a means by which interfaces could be expanded without breaking existing code. Another motivation for the default method was the desire to specify methods in an interface that are, essentially, optional, depending on how the interface is used. It is important to point out that the addition of default methods does not change a key aspect of interface: its inability to maintain state information. An interface still cannot have instance variables, for example.
An interface is a contract, a promise. If you implement Closable, you promise that this is a resource that can be closed, like a Http connection, a file reader or a database connection. An abstract class is like a generalization, such as Elephant and Mammal. You can not create a new Mammal, but you can create a new Elephant. A lot of animals can swim, but it's not strictly related to its type, so Swimming might be an interface that Elephant implements.
Right. As the top comment said, it's all semantics. It's nearly impossible to have a true memory leak in Java due to the JVMs garbage collection. Putting objects into a map and having your application lose control over the key to that object to be able to remove it later technically isn't a memory leak in a classical computing sense, but it is semantically the same as your C application reserving memory and then losing the pointer from scope and never freeing it.
DI is not an OOP concept. DI is also used in functional programming.
You can do DI with languages that don’t have objects, like Haskell.
Abstract Classes describe what something IS Interfaces describe what something DOES
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
No it is very different: in C when you lose a pointer you have no hope of recovering that memory, while in the Java Map case you can `.clear()` the map, iterate over the keys, remove references to the map itself, ...
Yes I understand the functional difference. I'm very familiar with both environments. My point is if your application *doesn't do any of those things*, assuming there's an intended mechanism to remove items that no longer works due to a bug, then it is effectively the same kind of leak. What you described are ways you could fix the leak in Java. Just like there are ways to fix the leak in C.
brb ... publishing a couple extra projects with internal access to maven central
Fields are a lot more convenient as far as not having to re-define behavior in your derivative classes. Sure you can sort of define fields by having abstract methods that return stuff, but making the fields in every child is a pain. Also constructors are...kind of a big deal. 
Could you get Eclipse MAT available? It’s basically designed for this type of problem if you can get a hprof dump.
Not sure, I'll check when I go back to work. 
Can we link to the article instead of a twitter post linking to the article? Anyway, the article is [here](https://www.infoq.com/articles/democratizing-stream-processing-kafka-ksql-part2) with part one [here](https://www.infoq.com/articles/democratizing-stream-processing-apache-kafka-ksql] The title of the articles is "Democratizing Stream Processing with Apache Kafka and KSQL"
The superclass implementation would also always win over the superinterface implementation, `default` methods included.
Haskell still has immutable (sort-of) objects and interfaces and that is enough for DI. Also all I'm saying is that DI happens very naturally and almost automatic in OO languages, not that you absolutely require an OO language for DI. 
Why would you write toString implementation when there is nothing to make string of. That's just a waste of code
The interface could define toString() in terms of other methods that the interface requires. Just because an interface can't hold state doesn't mean it can't access state; it must do it via method invocation. However, this might not be useful terribly often. 
"Oh you're trying to make memory more efficient in Java?" *dbza popo voice* You're all going to fail
I hope you realize that currently all JAXB implementations produce this error and there are literally thousands of projects that depend on JAXB. I agree with OP: we need a clear deadline. This is the sort of thing that shouldn't be done by waiting for people to fix the issue. People will not take the initiative to fix it. Let's set a date and make as many announcements as possible and then when the time comes bite the bullet. I'd like to a deadline of Q3 2020 (roughly 2 years). This should give people plenty of time and will let businesses develop plans around this issue.
**TL;DR** `-XX:+UseStringDeduplication` will only eliminate string duplicates in Old Generation.
No, we will continue to provide our community builds of Zulu based on OpenJDK for as long as we support each version. However, there is a difference between our commercial and community builds. For our commercial builds we (Azul) are actively backporting security and bug patches from the current release to ensure that our customers get these as soon as possible after Oracle release them. Our community builds are built purely from OpenJDK source, so there will likely be a delay between when the patches are released and when they make it into OpenJDK. This will depend on who takes over as project lead of the relevant OpenJDK update project and how quickly backported updates are upstreamed into the repo.
Looks like he copied the original article to Medium.
Also, it doesn't actually deduplicate the String instances, just the backing char arrays, so for short strings it saves less than expected. It just sounds like the author decided 4G was too much heap, took a heap analysis tool, misjudged its results and then used an option that didn't do what they actually wanted
This article was posted one month ago: https://www.reddit.com/r/java/comments/94nfkc/a_disappointing_story_on_java_memory_optimization/ I have a well optimized memory!
Also says it's not worth interning as the strings are not around for very long, but then still has loads of duplicates in the heap dump. Surely these would just be tided up by normal GC?
I'm not familiar with the tool, maybe it includes unreachable strings too. Or the application has enough requests running that they *are* reachable. It's hard to tell from the post alone.
Project Valhalla should manage that in the future.
As mentioned in the sidebar, this question would make more sense in r/javahelp than it would here.
I apologise I posted this on my phone.
tl;dr switch (e) { case RedBox(int height) -&gt; System.out.printf("Red(%d)", height); case BlueBox(int height) -&gt; System.out.printf("Blue(%d)", height); } I'm excited about this feature.
Can't come soon enough
&gt;I hope you realize that currently all JAXB implementations produce this error FWIW, there's a system property you can set prior to loading any JAXB classes to solve this; I'm not at work or I'd find the name. (It disables some optimization in their code path. I didn't do any research on the exact effects, it was literally a case of "doesn't break my code, turns off unavoidable warnings about other people's stuff that my users will complain to me about otherwise, done".) This wasn't the code that prompted my post, it was one of the other fuckton of warnings about third-party code which I can't do anything about yet are still going to be printed out to my end users.
Interesting, so you can use objects as switches now? Cool.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/coding] [Crafting Java policy files, a practical guide \[x-post from r\/java\]](https://www.reddit.com/r/coding/comments/9eebgs/crafting_java_policy_files_a_practical_guide/) - [/r/programming] [Crafting Java policy files, a practical guide \[x-post from r\/java\]](https://www.reddit.com/r/programming/comments/9eeb8p/crafting_java_policy_files_a_practical_guide/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
[This other document](http://cr.openjdk.java.net/~briangoetz/amber/pattern-match.html) explains the syntax rather than the semantics.
Decent advice. Much better than typical internet forum advice, which runs something like this: Q: Help! I'm getting a SecurityException! A: You must be running with the security manager. Turn that sh*t off! Q: Can't. We're required to run with it. A: ... Q: Guys, I figured it out! I just needed to use this policy file: grant codeBase "..." { permission java.security.AllPermission; }; 
Neat. How would you combine two decorators? Let's say I want both logging and auth, how would I set that up?
&gt;Along the way, we will encounter strong and diverse opinions about how null should be handled (ranging from "null is just another value" to "kill it dead, now, dead, now.") Ha, someone reads this subreddit! Especially the comments on any post about `Optional`. ;)
Part of this syntax is coming from switch expressions, which should be with us in Java 12. Just in case people haven't been keeping up with the forthcoming language features.
I want 10x more code. I'd much, much, much rather debug straight-forward verbose code, than someones magic-filled shitty perl golf.
It looks like in your [submission](https://www.reddit.com/r/java/comments/9egap4/nested_for_loop_not_printing_what_i_want/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
As long as I don't have to pay Oracle for long-term bug and security fixes, I'll happily switch over. 
Are you using specific memory parameters (for the JVM) or just going for the defaults?
Wow, that's some badly written Java. How many indents?
As long as you're making a docker container, surely the bytecode must go. I think that a bit of the 'automagic' of frameworks like Spring (i.e. heavy on class proxies and reflection and stuff) will probably have to be rewritten as purely functional - version 5.0 introduced a new functional web framework so thats probably on track.
An old (wise) developer once told me, for each line of code you remove, add one line of comment. 
See you later Scala!
Xray has not given me too much insight yet, I find the reporting kind of minimal, but I am hoping forcing everyone to submit build info will hopefully improve things a bit. &amp;#x200B; The OWASP tools it quite good (using the gradle version), but I've adviced the teams to run it only before doing spring planning (every 2-3 weeks) - the reports can be quite long and complicated. &amp;#x200B; Perhaps also look at tools working directly on the source code - like Snyk - with automatic pull requests and such - free for open-source projects. Limit the reports to weekly though. Snyk can also be integrated with JFrog Xray - although I did not try it. &amp;#x200B;
I beg to differ
hmmm. seems a bit fishy. presumably the java has javadocs and some comments "for effect".
Very interesting!
More smooth garbage collection (as in smaller but more frequent hickups), somewhat better organization of memory areas.
But you can still get Rhino as a regular dependency?
Are we finally getting a GC which gives back memory to the system? The last place I worked some juniors thought Java already did - which ended up costing the customer dearly.
You forgot to include how to write unit tests using in-memory databases, which is kind of a big advantage when using an abstraction like Hibernate.
Not sure I like that it can work as an instanceof over a non-sealed type. I had some reservations about Scala's construct for the same reason. Instanceof and casts are generally not something to use unless you can restrict them so they're complete and cases cannot be made impossible by refactoring.
that the next LTS is in a month?
Yet. 
Extra points for an image which is regularly scanned for security/vulnerabilities.
Yes. Early returns / guard clauses are great. I do prefer the return statement on a new line, though.
Would you be able to write those tests using @RestClientTest?
IMHO one of the major advantages of Hibernate is that you should be able to unit-test using an in-memory database (which uses it own Hibernate adapter during testing of course). 
Need typeclasses first, before we can merge the languages. ;)
I really like the way [Undertow](https://www.undertow.io) designed its handlers because there is no before / after concept. Everything is through composition. Here is a little helper I made to [chain undertow decorators together](https://www.stubbornjava.com/posts/logging-gzip-blocking-exception-handling-metrics-middleware-chaining-in-undertow). return MiddlewareBuilder .begin(BlockingHandler::new) .next(CustomHandlers::gzip) .next(CustomHandlers::accessLog) .next(CustomHandlers::statusCodeMetrics) .next(MiddlewareServer::exceptionHandler) .complete(handler);
I think it is relevant to Java because this is a Java lib. In addition, I thought other JVM languages will be interesting in this subreddit as well.
scala warns you when your match isn't complete, and i use -Xfatal-warnings to make that an error instead.
I hope it doesn't turn out to be as crappy as Brian Goetz's other "innovative" language additions such as functional interfaces and lambda expressions that have totally ignored the fact that Java has checked exceptions FFS.
That first sample also doesn’t set comment or comment url in the clojure side... 
One can only hope that decent tuple support arrives (sometime after value-types) and we can replace exception handling with typed errors being passed back functionally (followed by a two-decade transition period for all libraries). This works exceptionally (heh heh) well in Rust. Certainly something has to be done with the current mismatch of exception-handling and Streams. Lambdas themselves can propagate checked exceptions just fine of course, even generically. But you can't express the throws as a generic list and you can't elide generic arguments for some NOP default so the code gets ugly fast or you have to double up on functional interfaces.
Currently you'd need to create a Decorator that calls both actions. But that's an interesting remark, there could be a way to join then together! I'll think about it. Thanks :)
Very interesting, I did not know this Undertow lib, I'll take a look at that to gather inspiration. Thanks! :)
Thanks for your post. I really appreciate it. I also read through some other posts, and also read the post where you [crafted a policy file by hand][1]. I happen to notice that [Spring uses cglib][2]. cglib is a unsafe library to use in a sandboxed environment. One of the problems here is [`net.sf.cglib.core.ReflectUtils`][3], here with it's worst offender: public static Class defineClass(String className, byte[] b, ClassLoader loader, ProtectionDomain protectionDomain) This allows anyone to load any class at runtime with any permission. Also worth mentioning is the [cglib wiki][4], where it is suggested that you simply give it `AllPermission`. You can also specify `-Djava.java.security.debug=access,codebase=file://...` so you don't log any permissions that are not required by that codebase. [1]: https://blog.frankel.ch/jvm-security/1/ [2]: https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cglib/package-summary.html [3]: https://github.com/cglib/cglib/blob/master/cglib/src/main/java/net/sf/cglib/core/ReflectUtils.java#L455 [4]: https://github.com/cglib/cglib/wiki/How-To
That's not how learning works 
Not really a java dev anymore but here's my take on it: java is good for Enterprise stuff. You can make desktop apps, web apps, server apps, etc. It's hard to use a compiled language for scripting, since it kinda negates the point, plus Java's verbosity makes it less useful for scripting. You can use it like C in the contexts above, however there are some lower level things like drivers, real time computing, even OS and kernel stuff that aren't as suitable for Java. Basically Java is good if you want to work in your average enterprise, but it is not a good multitasker. 
Would it be good to learn python with java, or not? Becuase I’ve been told that python shouldn’t be used for serious stuff and to only use it if your a beginner.
Java and C are different in many ways, C does not know the concept of objects. C is in fact functional/procedural language. However, learning C will help you learning C++ which is, somehow, more similar to Java. Java can do pretty much anything you need to do. Tasks that cannot be completed using the standard Java, can usually be accomplished using technologies such as JNI or NDK You do not have to learn JavaScript unless you want to write JavaScript code. By the way, Java and JavaScript are completely different things &amp;#x200B;
Both are good for your standard programmer. Web developers might benefit more from Python. If you want scripting I would definitely do Python. Bias alert: I do all my programming in Python and Go nowadays. 
We could solve this with true sum types. But nulls keep this from being a real solution.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I think use java if ur trying to make more of a design software. But C++ can be used for task completion softwares.
There's no byte code on native images, a native image is a pure elf binary and the docked container used is an alpine image with only the glibc installed as by default native images are linked to glibc. Spring new framework will not ease the work for this and in fact it is quite hard to get it built as a native image, I haven't seen a real world example yet.
Deliberately bad Java practices. Also, this is terribly written code. Author should read "Clean code" and/or "Refactoring" by Fowler. Also, not using try-with-resources shows lack of understanding in general. 
what the hell does that even mean ?
a bit old ;) Published on Aug 2, 2017
Hmm, behind shortcuts? probably no easy solution in Java. I guess you can somehow write a program that takes your current wallpaper and adds some notes to it and assign it back as a wallpaper, leaving an impression of running behind the icons on your desktop.
python is slow, I wouldn't use it for anything other than scripts. Java is very good for long running applications, e.g. the backend of a web-app
Maybe that could be the easiest way to accomplish what i want.
Very nice. Didn't know about the logging option inside the JVM yet. I vaguely recall using a mock implementation before the logs and generate policy files, much like pro-grade: http://pro-grade.sourceforge.net/
Hey I post stuff about SQL:1999 and SQL:2003 features that are unheard of by many
Reminds me of SELinux where enabling permissive mode and sifting through the logfile is the most time-efficient way to craft rules :)
Right. Did you count the comments / Javadoc that you put in Java but not in Clojure code? And I don't just mean "useful" comments, but what on earth is this? /* * (non-Javadoc) * * @see java.util.Map#remove(java.lang.Object) */
Sure, but is anything left unspecified or on auto detect?
I used to read the "Scala is 5x less verbose than java" articles and tried to write the code in java using the same amount of lines than in Scala. Is not always possible, but most of the time you got Java to be 1.2x Scala, by abandoning java conventions (getters, setters) and using Scala conventions (like if /then /else in one line), using the ? instead of if and a couple of helper functions . Pattern matching, scheduled for Jdk13, will make java even closer. Never tried with clojure yet... 
While I agree with you when it comes to code you control, sometimes you need to do a series of unrelated type tests for which there is no alternative to an "instanceof + cast" chain. At least those scenarios get the benefit of a more concise, less error prone syntax.
[oh god, I never thought of that.](https://i.imgur.com/2Ej4sCr.png)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Ok, so here are some answers. I should point out I'm a professional Java developer, but I haven't really worked with C very much. &amp;#x200B; Java is one of the most widely used programming languages out there. It generally ties with C in terms of the widest usage in actual professional software deployments. It is primarily used for server-side applications. &amp;#x200B; Because it is so widely used, there is a LOT of documentation on the subject. There are books like Essential Java and Java Concurrency in Practice that are excellent. Even older Java books, which may not have the newer features in them, are still excellent because the fundamentals of the language are still the same. There are also many courses online, both free and paid, that you can take to learn it as well. &amp;#x200B; As for Java vs C, they are more different than similar. The similarities are mostly syntax-related, because Java's syntax was specifically modeled after C's. The differences are everything else. Java applications run in a very different way from C applications, so you're going to want to focus on the fundamentals of Java if you're getting started. &amp;#x200B; As for using it like C, the answer is "kind of". You can certainly build similar applications, but the actual way of building them will be very different. Again, Java is not C, you have to build applications the Java way, but the types of applications you can build can be similar. &amp;#x200B; As for scripting, in general Java cannot be used for scripting. Java 9 includes JShell, which does provide some scripting abilities, but Java is not intended to be a scripting language. &amp;#x200B; JavaScript, despite the similarity of the name, has nothing to do with Java. JavaScript is a completely different language that only has the name that it does because Netscape wanted to capitalize on Java's popularity for marketing. If you're learning Java, ignore JavaScript entirely, they have nothing to do with each other. &amp;#x200B; Java is what I would call a general-purpose language. It can do almost everything any language can do. That being said, there are strengths and weaknesses to every language. Java is better with headless (meaning no UI) applications, that run server side. It's better when you don't need fine-grained memory management, since all of Java's memory management is handled by its built in Garbage Collector. It's better when you need large enterprise level applications rather than small, quick little apps. &amp;#x200B; Hope some of this helped.
This was a well written article, I particularly like how you name your test methods. I do think, however, your third example was too brief, as you are thrice replacing one line of code into its own method, and when looking at the test, i immediately wondered what objects were involved, information which could have been present in the test while simplifying the readability. And while there is a documenting quality to abstracting away the details, that information is already in the test method's name. You make an excellent point about when to write tests, and how that really should be integrated into writing code.
&gt; fields default methods and static concurrent maps with weak keys would like a word with you.
&gt; With Records (case classes) and pattern matching the marginal difference between Scala and Java *will be too small to matter* This is nonsense...
Java can be used for everything (at least on top of system functions) on "3 billion devices". ;-) With Java 11 there is also the possibility to use single .jv files as scripts with a shebang: [https://securityonline.info/jdk-11-will-introduce-shebang-symbol/](https://securityonline.info/jdk-11-will-introduce-shebang-symbol/)
It’s pretty cool, although not entirely fool proof and it does slow down things a bit.
Until you've done some moderate amount of programming you may have a hard time understanding the value in design patterns. My advice is to make something simple that works and then if you find a problem that you can't find a good solution to, or if you find your code too tangly, too brittle, too hard to modify, etc., consider looking at how a design pattern might help.
Yep, I wrote about pro-grade here https://tersesystems.com/blog/2015/12/22/an-easy-way-to-secure-java-applications/ and wrote about some of the problems with securitymanager and sandboxing here https://tersesystems.com/blog/2015/12/29/sandbox-experiment/
this is pretty exciting, hopefully it won't be too long before we see bits of this in a release
It looks like Java 6...
I downvote all SO answers advising how to use `java.util.Date`. It's quite often. 
I can't answer the first question because I haven't seen the license text. The price is 25 USD per server per month. Oracle JDK and OpenJDK are effectively identical apart from the support. They've been busy open sourcing things like Mission Control so it can be shipped with OpenJDK. Just use OpenJDK unless you need paid support. 
[removed]
can you source 25$ per server per month ?
[See here.](http://www.oracle.com/us/corporate/pricing/price-lists/java-se-subscription-pricelist-5028356.pdf)
Isn't this feature like 3 or 4 years away from now?
http://www.oracle.com/us/corporate/pricing/price-lists/java-se-subscription-pricelist-5028356.pdf It's 25 USD per processor, where "processor" is number of cores multiplied by a factor. According to [this table](http://www.oracle.com/us/corporate/contracts/processor-core-factor-table-070634.pdf) for pretty much everyone, that's 0.5, so a four core server will need two licenses.
Thank you for sharing 
Well, it solves the SecurityException 😅
Did you run any performance tests? Because looking at the source code, a few more lines of code are executed, but I don't believe there's anything significant. All in all, checking for a Security Manager is done in every case anyway.
Do you think so? It's already too small to lure people from Java to Scala.
In the Scala code bases I work on I can't imagine this being a problem. The clues should be pretty obvious which of these two scenarios you're looking at: the fall through match or "default". - if you're matching over String, Integer, etc: then clearly you don't control the hierarchy of those classes and you could reasonably receive anything as that argument. Hope you know what you're doing. - if you're matching over a sealed type that you do control, you don't need to declare the default case because you have already handled all possible inputs. New sub types will trigger a compilation failure if they're added and someone will have to decide how to appropriately handle that new type at that point. 
You edit a file by clicking on it. What are you seeing now?
When I click my project, underneath it pops up with "JRE System Library" and "src". 
It does not seem to give me an option for creating a new class from right clicking src
I figured it out! Thank you for your help!
That's a fair point about the default case, thanks.
It’s a getter. Hopefully it retrieves the underlying field `id` of the object returned by `getVector1()`
Please, post such questions in /r/javahelp.
In my current job I've seen these given-when-then method names and in my experience it's a bad idea. While it makes some tests a bit easier to read in many cases you hide the actual content of what's being done behind a description that often doesn't explain enough to understand the context so you have to jump into the methods again. When you need a nother similar step that doesn't quite do the same as an existing one you can either duplicate it and adapt it (bad practice) or try to use parameters and then it gets unreadable very quickly. Even worse is trying to adapt existing tests after functionality has changed. 
Glad to hear! Have you encountered any bugs or weird behavior in JavaFX?
lmaooooooooooooO!
From: if (cookie.hasExpired()) { i.remove(); // remove expired cookies } else { result.add(cookie); } To: cookie.hasExpired() ? i.remove() : result.add(cookie); From: if (cookie == null) { throw new NullPointerException("cookie == null"); } To: Objects.requireNonNull(cookie, "cookie == null"); From: ByteArrayOutputStream os = new ByteArrayOutputStream(); try { ObjectOutputStream outputStream = new ObjectOutputStream(os); outputStream.writeObject(cookie); } catch (IOException e) { Log.e(LOG_TAG, "IOException in encodeCookie", e); return null; } To: try (ObjectOutputStream outputStream = new ObjectOutputStream(new ByteArrayOutputStream())) { outputStream.writeObject(cookie); } catch (IOException e) { Log.e(LOG_TAG, "IOException in encodeCookie", e); return null; } Also, I see that most of the CookieMap methods are just copy pasting default implementation. Why not use: AbstractCookieMap extends AbstractMap Then you will have to overwrite only entrySet method. Also, removing non-essential javadoc and comments would also help, as code should be the only source of the truth. And there are a lot of small changes which can be done, to shorten this to 1/2th or maybe 1/3th of the Clojure version. I am not arguing that its going to match Clojure version, and for me, its fine. I'd rather have more explicit code than have to map complex methods in my mind, but this is just bad Java code in general.
this would be really suboptimal and difficult to work with
Do you have your own blog? It was really helpful ! 
But do you also downvote all SO answers explaining how `public` / `protected` / `private` works? Because that's 23 years old and still state of the art, and hasn't changed too much.
I mean in general activating the Java SE Security Manager is a performance hit since so many things (file access, socket access, ...) are constantly checked. Especially in a server (where, granted, the SE security manager doesn’t make much sense) that can mean tons of checks per second.
Thanks, I'm definitely reading those!
&gt; But do you also downvote all SO answers explaining how `public` / `protected` / `private` &gt; works? Because that's 23 years old and still state of the art, and hasn't changed too much. &gt; Exactly, that hasn't changed, so why downvote it? `java.util.Date` however is obsolete with `java.time.*` and has been for a while.
I do have my own website: https://billykorando.com, but decided to use medium for my blogging. Better exposure and if an article ever "blows up", I don't have to worry about my website crashing. Thanks for the compliment, glad you found my article helpful! 
Thanks for pointing that out, I will try to get my blog updated to make a not of that.
How does this work when you package an application as an EXE?
1. The Oracle JDK ([java.oracle.com](https://java.oracle.com)) will still be available for download for JDK11 and can be used freely in development, testing and demonstrations. However, in order to deploy it into a production environment you will need a Java SE subscription from Oracle. This will apply for \*all\* versions of JDK 11, not just the ones where LTS starts (i.e. 11.0.3). 2. The price varies based on how many machines you want to license. Simplest way to understand the way Oracle counts processors/cores/sockets is to read this: [https://www.oracle.com/java/java-se-subscription.html](https://www.oracle.com/java/java-se-subscription.html) 3. I wrote a blog post on the changes in JDK 11 that eliminate the differences between the Oracle JDK and OpenJDK, [https://www.azul.com/how-do-we-define-java/](https://www.azul.com/how-do-we-define-java/). This covers most of what you need to know for this question. There are a few other JDK-internal differences around the implementations used for colour management, fonts and rendering engine. Performance-wise there should no noticeable difference as they use the same code-base for the JVM and libraries.
GraalVM currently has official builds based on Java 8. There's no current builds of GraalVM based on Java 11. The Graal compiler has support for Java 11, but GraalVM has other components which are not there yet. The Graal compiler however can be built individually and added to Java 11 as a JVMCI compiler. OpenJDK builds for Java 11 include a snapshot of the Graal compiler, so if you download Java 11, for example from [http://jdk.java.net/11/](http://jdk.java.net/11/), you can enable Graal compiler by adding the command line flags: -XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
What do people hope to achieve by posting this in a pro java community? Should this not go into a Clojure circlejerk community instead? 
/r/java isn't a place to ask for help with your homework. See /r/javahelp
Note that without additional information about the code or existing design and questions about that, javahelp doesn’t like those posts much either. http://whathaveyoutried.com/ is the issue with such questions. 
Not really for all levels, some beginners books and one not Java related "advanced" book
Don't do that? It's a clear case of tail recursion that's better solved by a simple loop. 
Not really. There are several books that aren't advised for beginners. And those which are for beginners can also be read by intermediate programmers for additional knowledge.
Its do able. Try writing it in pseudocode. Then program something that parallels the pseudocode. 
Where can I find examples or similar examples?
I'm struggling to find a compelling reason to use it. It seems like its only useful if you are running untrusted code within your VM?
Which is probably related to Android Studio ;).
I was expecting actual good info and not someone who misunderstood what he was doing. Lol @ interning strings as a memory leak. A real interesting memory leak could be bad deallocation of Threadlocals, or that try-with-resources bug (that I didn't know about) posted above. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
That's what I thought. Does that mean I have to compile with 11 and run in 8?
&gt;I figured it out! Thank you for your help! What was your problem, was it the perspective suggestion? Others might have the same problem.
I'm sorry, but that's an intuition. If there's no metric behind, there's no way to take that into account.
If you cant trust your libraries you have bigger issues. Any reasonably sized project is going to need access to things that could damage your system. Restricting access to things seems counter intuitive. We write code to perform tasks and it naturally accesses the things it needs to run. If you are restricting that than you are breaking your own codebase. if you cant trust your codebase, either because it is malicious, or because you dont know what its doing in the first place than you shouldnt be running the code at all without an audit. This all seems to come back to the premise of untrusted code executing, which is silly because its your code you are executing!
You know exactly what all your dependencies are doing? You trust them completely? You don't think they have any security bugs in them?
That explains why I find commented code sections everywhere!
Its always useful to know a scripting language or two, you get a lot of power in an easier to execute package. Don't listen when people say not to use it for serious stuff. Many of your use cases are going to be IO dominated, in which case it doesn't matter. The one big exception is scripting languages are mostly worthless for game development, but, so is java.
It looks like in your [submission](https://www.reddit.com/r/java/comments/9f1dgb/input_in_tableview/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I did not realize that this release was doing away with the traditional BCL license. Good news. 
It was that I am a complete newbie to Java and didn't realize I needed to create a new class in order to start coding
"1. Avoid... 2. Avoid... 3. Avoid..." - I guess you can speed up SQL by not using SQL.
I honestly think the best way to understand and make SQL faster is to just know what it is doing. Primary key/Clustered Index. Stores the rows in sorted order based on the columns in the key/index. That is to say, if you do a clustered index on a, b, c. Then it will sort first by a, then by b, then by c. Nonclustered indexes/regular indexes are that, only with the clustered index tacked on. So a nonclustered index of d, e, f would be sorted by d, then e, then f and the data stored in it will be a, b, c. Now, if I want to get something out of the above table, will that be fast? Answer, probably no (depending on how many values a and b have) because you have to go through ever a and b to match on the c. If I want it by d, how fast will it be? Very fast, because that is the first column in the clustered index. If I want it by a, how fast? The fastest, because a is the first column on the clustered index. It has to do almost no seeks to find it. &amp;#x200B; Knowing this information, it should be pretty easy to deduce what will be fast and what will be slow. It will also help you to shape your indexes and figure out what to avoid (for example, a clustered index on a, b, c, d, e, f, g, h, i, j, might be bad because all your non-clustered indexes need to store that information). The tips on "don't use wild cards" and "don't use functions" because if you thought about "how would I do that?" it becomes pretty clear quickly that there aren't good solutions to do those fast. As for the tips on "Don't mix order" and "don't use different column types"... well, honestly I just disagree with those as tips. Those are things that the SQL optimizer can certainly optimize away, even if your indexes are ordered differently from the select order. However, all that being said, sorting in the db is probably a bad idea anyways, especially sorting on non-indexed columns. Why? Because how would you do that as a programmer? Well, first you have to get all of the items into memory, then you need to start sorting them one by one. If you rely on the index ordering, that is basically free because sort order is a property of the index. However, any unindexed thing will need separate sorting, which you might as well do in application space.
With 12 landing part of it, I could see it very soon indeed on the latest version (though at least 2 years away for non-lts). Most of these amber improvements on the horizon will probably land fairly quickly.
&gt; To overcome this challenge and tune this SQL query, you can index the function’s result, by using Generated Columns, which are available starting MySQL 5.7.5 Or you could not use a dumpster fire of a DBMS - on an actual database that cares about consistency and correctness, like Postgres, this is a one line fix - use a function index. This article is written in such an insane immature style that it makes my teeth hurt. You could summarize it in one phrase “avoid the PHP of databases, MySQL.”
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
There has been a rendering issue we have had with certain machines where in place of a control, such as a button, a white box is rendered instead. That is the only serious issue I have encountered. On that application we have about 10k deployments and we’re talking maybe a dozen reports of this bug. That is the only bug we have run into with JavaFX, and we’re not even certain it’s a bug in the library. 
Yes.
Signing of cryto providers being required existed to satisfy US export control. The policy changed to not require signing and Java has been slowly updating to the laxer and easier to comply with standard. The OpenJDK change has been in place since Java 9.
Oracle JDK and OpenJDK will be functionally identical. The was a post a few hours ago that lists all the difference between the two JDKs.
Removed as **off-topic**. This subreddit is about **Java**, not about SQL. Spam somewhere else.
This one: https://www.reddit.com/r/java/comments/9f18tx/oracle_jdk_releases_for_java_11/
JDBC as it won't take much time, but will give insight and understanding whats happening behind a lot of abstractions (JDBI, mybatis etc). Next follows Spring. And to truely understand Spring, it might take you some time. Best to download Spring Pro Developer certificate questionier and try to answer all questions backed by few resources (official documentation, spring in action, spring design patters etc). Then Hibernate. Then jsp + servlets.
JSP + Servlets may be before Spring. The way to understand Spring REST Controllers through Servlets. 
[removed]
Just start by creating a simple REST service in Spring and work from here. JSP is dead technology and servlets are becoming less relevant with the move to reactive stacks. Benefit is also that Spring has [tons of tutorials](https://spring.io/guides/gs/rest-service/).
&gt; I want 10x more code. You should take a look at Go. No magic, painfully straightforward.
A good example of memory leak is the following one. Suppose, you write a kind of stack of objects. The stack is represented by an array of your objects for instance: `MyObjects arr[];` Then a position index is used: `int pos` Now when you push an element the code looks like: `arr[pos++]=myobj;` and when you pop an element it looks like: `pos--;` In this case, you can have a memory leak, because arr\[pos+1\] continues to refer to your object, so it is not possible to reclaim its memory. It is subtil and difficult to see in code. The right code of pop becomes `arr[pos]=null; pos--;` Now the memory of the previous value of arr\[pos+1\] can be reclaimed, because there is no more reference to it
I agree. This would be the proper way. But in order to understand Servlets, you would have to start from JavaEE, look into "naked" servlets. Handle directly request and responses yourself via doPost etc methods, which is just a lot of work. Especially as beginer. Thats why I'd rather suggest play with Spring Boot REST controllers. Then try to recreate services without autoconfiguration and start to dig into Spring. Just to get up and running, instead of getting lost in configuration and low level stuff.
I agree. But in real life, you have to prioritize. And I believe, juniors need to firstly understand how to build simple apps rather servlet internals. 
Absolutely. But when something "crashes" in Spring internals or so you need to fully understand how it works under the hood. And there that "internals" are nedded. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
When something crashes, yes, you are either left alone to find/google or you lean on more proficient colleagues in work environment.
But if all coworkers like you're in trouble😂
Then you research. As a developer for almost a decade most of my work is research how something should be made or what went wrong. Writing actual code is boring grunt work :D
Generally projects which consist of only junior developers don't last very long, so it's a good place to learn :)
Just exaggerating :D It's not good habit to hope for somebody
Agreed. But its unreasonable to firstly learn everything and then start working :) Its a gradual process which I think should start from Spring rather than servlets. That is all :)
Here I am - still on Java 9
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You are on your own. Most of us are on Java 8, or 7 even!
Lol Java 6 😭
I so desperately wish I could work in java 8 at my job... we are stuck with 6.. currently trying to work out what it is gonna take for us to get to 8 on some of my free time because I desperately want the stream API among many other things. 
That's not a bug, that's you not knowing about operation precedence order. Decrements are executed after getting the index you seek. https://introcs.cs.princeton.edu/java/11precedence/ That's why the elements is still in memory, because it is still referenced. 
This puts into perspective how they handled JavaFX a little while ago: makes it seem like less of an abandonment and leaving it to the hand of the FOSS community and more like one of the steps in an essential reorganization of the Java technology (among other steps that came before and other I'm sure will follow). The fact that people have reported Oracle is still actively working on JavaFx as part of its open-source community goes along with this fact. I guess we'll never know what their intentions or real thought-process behind all recent changes was, especially considering they're not being super forthcoming with their reasoning but my initial cautious suspicion is giving way as we see a more coordinated plan moving forward. Looking at the whole of all recent changes I'm optimistic for the future of Java and, even though change can be scary, happy to see the development pace for the language picking up pretty fast! I'm excited to see what's coming up next!
The problem is not the precedence order. The problem is that in the first case the reference is not set to null We can resume this probleme as follows: when an object is removed from a data structure, be careful with the internal reference to this object in the data structure
I'm on 7 because we can't get customers to upgrade their WAY old instances of Weblogic. 
This sounds like a release announcement, but it isn't. http://openjdk.java.net/projects/jdk/11/
No, with the move towards Web Reactive (which uses Netty underneath) you'd be working servlet-less. 
I get ptsd whenever someone says hibernate. Haven't had to use it in 5 years thank god
If nothing else, is Kotlin an option? It can compile to Java 6 bytecode and has near-perfect interop with Java, and can provide fancy features like lambdas and higher-order functions
This is just the same information that was posted directly from Oracle https://www.reddit.com/r/java/comments/9f18tx/oracle_jdk_releases_for_java_11/
Well, the full title is "Oracle JDK Releases for Java 11 and Later". OP edited the title.
Java 9 is an odd choice. You're brave enough to do the big migration from 8 to 9, but the small jump from 9 to 10 is too much? :) 
Looks cool!
Yeah... It is like pulling teeth to get our guys to move past 8. They don't want to migrate from jersey 1 to jersey 2...
Why aren’t they using apis as helpers to the monolith?
consider yourself lucky.....Java 7 here and there is no roadmap for an upgrade.....
Nicely done! I've used H2 as a build db since I wrote the original flyway &amp; jOOQ gradle plugins (since taken over upstream). It is hard to justify to folks to write for both the H2 and the production db dialects, even if low effort, especially when you have to coerce to dialect features by hand in Java code. I'll probably give this a spin as I've been wanting to switch away from H2 but never found the time to do it properly like you did.
In all likelihood OP probably meant it as "Upcoming Oracle JDK releases for Java 11". I doubt he was trying to clickbait or mislead anyone at r/java...
That's right.
You should not be on 9. 10 or 11 or 8, sure, but 9 is a bad choice. It is not an lts release.
With phone interviews, you should aim to get a general feel, that's all you can do realistically. Ask them about recent projects, the kind of technology they used and especially what problems they faced and how they solved them.
Going to try it right now
Looks interesting. I will give it a try.
&gt; My goal is to have a conversation about work they've done This. Quizzing can be either hit or miss depending on their experience, or just not a good indicator because some people have better in-the-moment recall that isn't really relevant. Ask open-ended questions ("What have you done with Spring Boot?") and you're really looking more for how much it seems like they're tap-dancing around a lack of knowledge. And if they happen to bring up something they do have experience in, ask them about that. Ask for their opinion about something that doesn't If you're going to do a coding exercise, give them a laptop to do it on. And about half of what I'm looking for is, "Does he seem like a prick?"
very interesting. it seems it addresses a number of things I needed addressing in javafx. I might integrate it into an application or two this month if I have the time.
Some pointers what I think works independently of any specific job. 1. What are your thoughts about X (say spring)? What are advantages? Disadvantages? Your experience? 2. How do you rate yourself in Y (eg Java) on a scale from 1 to 10? (I stole that one off Reddit somewhere. People will answer mostly like 6-7 which does not tell you anything. The next question does (and is a bit mean): what does a 7 differentiate from a 6/what made you a 7? People should tell you the last thing they learned. Average people might tell you about language things like streams, above average people often tell you more general things like learning about when to build from scratch and when to use 3rd party) 3. Ask about the innate problems of microservices and see whether they understand that if you are not careful you are getting the classic issues of distributed systems and assumptions about sequential execution don't hold any more. How did they previously solve it? What was good or bad about these approaches? Anything they learned while failing with a previous approach? Ok. These are only three themes but they allow you to talk in depth about their previous experience and see how they think. Also it is almost impossible to create canned responses for such interview fragments.
Even take Springboot
Hibernate is where your productivity goes to die, so maybe put that one last in your list.
I can see that. I really like it, personally, but I can definitely see how it gets a bad rap. It's a pain to setup every project, but once it's up and running, it's a breeze. I've used it for so long though, maybe I've got Stockholm syndrome. 
And im just sitting here still using swing bc im too bussy/lazy to learn FX :/
I do a 60-90 min pair programming exercise. It’s 2 parts. First we write some basic practical code and then open ended questions about what we built. Part 1. We start with a prebuilt vanilla hello world app. Language/framework doesn’t really matter but for convince I have Python/Flask, Java/Spring, Node/Express, and Typescript/Angular starters. The candidate picks the one they are most comfortable in. The exercise is pretty simple and take 30-45 minutes. Take some user input -&gt; massage the input -&gt; make a http api call -&gt; return results to the user. Part 2. We talk about what we built. The conversation is usually pretty fluid but if I need the candidate to open up then I have a couple basic questions. What/how would you refactor? How would you improve the performance/reliability? Or if there resume states they are in expert in X then I ask if/how X would be applicable. 
A lot of the answers here seem to be suggesting mostly very open-ended questions. I think that's a terrible idea. Open ended questions select for people mostly for people who are good at talking about themselves under pressure. That's a useful skill to be sure, and you can certainly rule out some candidates based on being terrible communicators, but most of your candidates will likely be barely able to code their way out of a wet paper bag, and the 'good at talking' axis is almost orthogonal to the 'good at programming' axis. For a junior position, the single most important thing is to have the candidate do some actual coding. It doesn't need to be a tricky problem - choose something that any semi-competent programmer should be able to do, but with enough complexity that they'll have to make some decisions. Do they make good decisions? If you point out problems their decisions imply, do they adapt the solution effectively? For a more senior candidate, some sort of design problem is really the way to go. Pick some moderately complicated system that you're familiar with, and have them talk through their approach to solving the problems that system solves. Otherwise it's a lot like the junior candidate question: do they make good decisions? When you point out shortcomings in their decisions do they adapt effectively? You want to hire people who make good decisions. But everyone makes mistakes, especially in a stressful interview. What you want most of all is people who will quickly pick up on their mistakes when they're pointed out, and correct effectively. If a candidate just makes good decisions, that's fine too, but honestly, you learn more when they do make mistakes, so ideally you calibrate your question so that at least some minor mistakes happen for a good candidate.
Can I interview at where you work? Please?
I can’t emphasize enough on how important it is to do a coding exercise on a laptop. As a developer I never write code on a white board. Like who does that? Architecture yes. Database design yes. But write code? Never. So I don’t get it when someone makes me do a binary search tree on a white board. Laptop is second nature to any developer and if the interviewer is testing how good the developer is at coding then the exercise should be on a laptop. 
There are multiple distributions of Java available, including two from Oracle: the Oracle JDK and OpenJDK. The Oracle JDK is free to use in development, but not in production. The Oracle JDK comes with commercial support for three years for LTS releases or six months for non-LTS releases. The OpenJDK is free to use for what ever purpose you want. It has six months of non-commercial support from Oracle and probably longer from other members of the OpenJDK community (like redhat or IBM). The two releases are functionally identical upon release. Just use OpenJDK and ignore the Oracle JDK. 
[Hope this help.](https://community.oracle.com/thread/4147212)
This is great!
&gt; and the 'good at talking' axis is almost orthogonal to the 'good at programming' axis. I know plenty of good communicators who are great programmers and just as many poor communicators who are also terrible programmers but it is a lot easier to train someone to program than communicate and I know who I’d rather have on my team. 
JavaFX is super simple. You should learn it. 
&gt;The Oracle JDK is free to use in development, but not in production. The Oracle JDK comes with commercial support for three years for LTS releases or six months for non-LTS releases. Oracle indicated that are going to provide releases of JDK 11+ under a dual license [GPLv2+CPE](https://blogs.oracle.com/java-platform-group/oracle-jdk-releases-for-java-11-and-later) / Commercial. To me this means that those releases will be be free to use in production (or am I missing something?). **But**, afaik, public maintenance release will be only until the next GA availability release. Which would means that after GA, maintenance releases of previous JDKs will be released only under commercial license... (they should really clarify this mess). 
Sure beats my recent interview which consisted of a time limited "match the next picture in this sequence" test.
AdoptOpenJDK builds are the only thing you need to use. https://adoptopenjdk.net/ People will say openjdk is the one to use, but there is a subtle distinction to make here.. Openjdk is produced by oracle from the reference openjdk code. But they are only promising to produce builds for java 11 for 2 security patch cycles, which ends up being about 6 months. to continue to be up on security, you must upgrade to java12 after 11 support stops. With adoptopenjdk, you will not have this problem. The interesting thing is that fixes to openjdk 11 will continue as oracle and others make the changes, but oracle just stops packaging them. adoptopenjdk will continue to package and support the changes happening in java 11 branch of openjdk. 
Were you interviewing as professional captcha solver?
Still trying to figure out what is happening in 9.
I suggest the following to find the better suited candidates: * give them code and ask them to point out what problems they see and how they would improve it * ask them to build unit tests and make changes to that existing code. * ask them to refactor the code for readability, then performance. * observe how the person reacts to all this: how he tackles the issues, debugs and tests everything. It's never an exact science, but in my experience this is most helpful to find the people who will fit better into your team. Asking about past projects and stuff doesn't really help to weed out candidates as there are many devs out there who happened to stay employed for long enough to mention a given project in their resume, but were a liability most of the time. Put candidates in front of code and let them work with it. Give them pre-existing code to play with instead ONLY random problems to be implemented from scratch. If you rely on talking only you may end up wasting time with people who are professional bullshitters: they give incorrect answers with such a confidence you almost end up questioning yourself. 
OpenJDK is released under the GPL. The Oracle JDK is released under a commercial license. The former is free to use everywhere. The latter is not free in production. They've clarified this many times over the last few months.
Remember that you don't *have* to move to the module path just yet. You'll be pleased to know that the upgrades to 10 and 11 are much smaller.
It looks like in your [submission](https://www.reddit.com/r/java/comments/9fgfvn/create_a_small_java_application_that_prints_out_4/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Release notes: https://github.com/spring-projects/spring-boot/releases/tag/v2.0.5.RELEASE TL;DR? No massive new features, but lots of little bug fixes.
Sure. All I'm saying is that if you ask really open ended questions you are testing almost exclusively for communication skill, and specifically, for communication under pressure. Lots of good programmers with overall good communication skills under ordinary circumstances will do very poorly in that sort of test, and plenty of terrible programmers will do well. Note that the process I suggested still depends heavily on communication skill. If a candidate can't talk through problems and discuss pros and cons of solutions gracefully, he's going to have a bad time. But I think it's maybe not as easy to train someone to program than your response implies, and I think it's kind of obvious that you want to hire people who can both communicate and program.
Very informative and nicely written. Thanks, Marco!
You are welcome @walen :)
A topic everyone takes for granted but very few people actually keep consistent with. Great read. 
Well, it is just a maintenance release, but I noticed it today and didn't see any other post about it so thought it would be nice to mention it anyway.
This blog post from Stephen Colebourne (@jodastephen) explains things well. "Java is still available at zero-cost" https://blog.joda.org/2018/08/java-is-still-available-at-zero-cost.html
I'll be attending and speaking about creating microservices with Spring Boot, Angular, and JHipster. I'm also doing a talk on OAuth and OIDC. https://oracle.rainfocus.com/widget/oracle/oow18/catalogcodeone18?search=%22raible%22
I like "What are disadvantages of OOP"?
Excellent post.
I'm missing [Flogger](https://google.github.io/flogger/) in there.
Concise and well written, learned something new about logging. 
&gt; Don’t fret too much about static or non-static, final or non-final, just make sure to be homogeneous in your choice, throughout your entire project. Why?
Articles like this is why I subscribe to the sub. Awesome, thanks OP :)
Finally got around to updating my blog article. Thanks!
Great post.
A really really REALLY important thing when it comes to conferences is to make sure you interact with people. Attend the social stuff and actually engage. I cannot tell you the number of times where a convo I had with an attendee or speaker that lead to an important insight or a useful connection later down the line. If you go to a conference, only attend the talks, but don’t really talk with anyone you aren’t getting the full benefit. As for talks /u/pjmlp gave a good list, but also make sure you attend Venkat Subramaniam’s talks. He is one of the best presenters I have ever seen. Even if you don’t think the talk might be useful, definitely check it out unless there is something you really want to see in that time slot. 
Lots of fun towards the end there. Would also like to mention performance for exception handling in Java. It's rather slow. So don't use it for normal and expected "errors". I've seen exceptions throw for EOF, which made the code easy to read and understand but performance suffered. Have also used them in data structures for communicate the need for a lower node in a tree structure to grow, changing to return values doubled my performance on that one.
This is simply not true. Reactive is fine for some cases, but in many cases (most I would say) needs are just not there. JDBC is not reactive (yet), your stack is not fully reactive and most team members are not going to be familiar with the approach. 
That's so funny you mention that speaker. The head software architect at my company who is organizing this told me the exact same thing! I already scheduled three of his talks based on that recommendation!
Exceptions are fast if you don’t fill the stack trace. Most exceptions have a constructor that take four parameters imcluding a writeaeStckTrace boolean which you can pass false to not create the stack trace.
For easier maintenance. Our project suffers from this "heterogeneous Logger declarations" thing, where the `Logger` instance may be called `log` or `logger` or `LOGGER` or `LOG`, depending on the class and the personal preference of whoever wrote that class. This means that now and then I am debugging some class and I quickly type `log.debu`-- only for IntelliJ to put a nice, red wiggly line beneath `log`. So now I have to stop my debugging train of thought and fix that. Sure, I can just put the cursor right after the `log` and press `Ctrl+Space` to autocomplete... only that won't work either because this particular instance just happens to be called `LOGGER`, all caps -- something I can only find out after Ctrl+F'ing the hell out of "log", case-insensitive of course, because of course `log` and `LOGGER` are different enough for IntelliJ to not see any relation whatsoever between them. So now I know how the logger is called, but I am in a different line and have to go back ← ← ← to where I was before so I can finally type `LOGGER.debug("I don't really remember what I wanted to put here");`. If you define all your `Logger` objects with the same name and in the same way, you can take all that off your mind: `logger.debug()` becomes just another Java "instruction" like `System.out.println()`. You don't need to worry about `System.out`, you just type it. The same should ideally be true of `logger`.
Sorry, let me ask a pointed question. Why would you ever declare a logger anything other than private static final?
Sorry, let me ask a more pointed question. Why would you ever declare a logger anything other than private static final?
The Oracle JDK will have long term support (i.e. updates) until 2025, not three years. The LTS support strategy means there is a new LTS release every three years (JDK 11, 17, 23, etc) but support does not stop when the next LTS is released. We (Azul, who I work for) also offer LTS support commercially (at a much lower price than Oracle).
That more pointed question is better answered [here](https://stackoverflow.com/a/3842839/6404321). Re: standards, why would it be so? Sure, `static final` constants are usually all caps, but can a `Logger` be considered a constant? And what if it is just `final`? And what if nobody wants it to be uppercase because that means holding Shift every time I want to add a logging statement and it looks weird to be calling methods on a "constant"...? Hence (I guess) the author's advice to not fret too much about this ;) and just be consistent.
Your assumption is incorrect. Oracle has stated that it will only contribute to each OpenJDK source code project for six months. That means the updates (bug fixes and security patches) will not be contributed by Oracle after the next release. Someone will need to backport these fixes from the current release to earlier LTS ones. AdoptOpenJDK have stated that they, as an entity, will not be doing the backporting. Someone like Red Hat or IBM will need to do this work.
JDK 10 is not an LTS release either. Remember that LTS only applies to the Oracle JDK, which requires a commercial subscription, as of JDK 11. Essentially, all releases from JDK 9 onwards only get six-months of free updates from Oracle.
Great post. A couple things. 1) A section on security. Specifically on log forging. 2) A mention of lombok @log annotation. https://projectlombok.org/features/log 
I don't see how coding under pressure is any better. Making design decisions with you breathing down their back - not exactly a good representation of actual day-to-day work.
The only major difference between now and in a fortnight/after January is that if you want free point releases from Oracle you have to upgrade your JVM every six months. If you're happy to not get bug fixes and security updates after six months, or you're happy to get them from someone who isn't Oracle, nothing changes.
Exceptions thrown and caught within the same compilation unit and without a stack trace are nothing more than a \`goto\`, even.
That picture tho
Enjoy it when you can!
Sidebar in /r/learnjava (old reddit only). Not a book, but an excellent course: MOOC [Object Oriented Programming with Java](http://mooc.fi/english.html) from the University of Helsinki. It has plenty graded practical exercises. Next time, please address such questions to /r/learnjava.
The java/sun/Oracle tutorials are perhaps suprisingly good. They include examples and assignments, but no overarching project if that is what you are looking for. My recommendation is for you to find an seemingly trivial problem in your life that you can solve programmatically. Solve that using the knowledge you gained in the tutorials. The trivial part is key here. There will always be bells and whistles you can tag into such a project to practice newfound skills. Hell, large companies seem to follow that strategy too. My argument for something personal over say joining an opensource project is that it forces you to look at the full stack from code to operations on say a server or deployment on your phone. Lots of valuable real world problems to be had there.
You poor thing. 
Great article! I would have liked to see a discussion of some of the shortcomings of the MDC. Specifically, when working across thread boundaries. This comes into play a lot once you start doing async operations.
* This is not a deadlock. This is threadpool starvation. Big difference between the two. Deadlock requires two thread trying to acquire resources locked by each other. This is jobs waiting on jobs that can't complete because the pools thread count is exhausted. If the pool were infinitely sized (and the machine could handle it) this would complete. * There is a 100% way to prevent this. Don't wait, react. That is sort of the whole point of RxJava and completable futures. By blocking on tasks, you effectively miss the entire point of RxJava. There are plenty of RxApis and future apis which will transform futures from one to the next. That is what you are supposed to do (in completable future terms, then compose or biApply etc. In RxJava terms, map/flat map.) * Timeouts are a hack to hide bad architecture. .get()/.join() should be viewed as extremely dangerous things that you shouldn't generally touch. &amp;#x200B;
[removed]
To add to what everyone else has said, I want to also mention I love the simple, minimalist blog setup without any bullshit. I wish more blogposts we'3re like this.
Thank you!
You might find what you're looking for [here] (https://www.reddit.com/r/learnjava/) bud. There's a subreddit just four you.
https://docs.oracle.com/javase/tutorial/
There is a youtube channel called newboston that was a huge help to me.
It looks like in your [submission](https://www.reddit.com/r/java/comments/9fmlqx/sql_case_when_in_hibernate_criteria_api/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
https://codingbat.com/java Start solving the problems. If stuck ask here or google. Good luck!
Why not? 
This is official &amp; javafx 11 is open source??
Exactly what I came to comment. He has some great stuff.
Still been needing to get into Kotlin, but, JUnit 5 has gotten easier to use as of recent. With the 2.22.0 release of surefire, you no longer need to add all the dependency configuration to your surefire setup. Go into more depth here: https://medium.com/@BillyKorando/whats-new-in-junit-5-3-c276eb8507f1 JUnit team also supports a BOM which also helps with some of the config headache: https://keyholesoftware.com/2018/04/30/whats-new-in-junit-5-2/
Still been needing to get into Kotlin, but, JUnit 5 has gotten easier to use as of recent. With the 2.22.0 release of surefire, you no longer need to add all the dependency configuration to your surefire setup. Go into more depth here: https://medium.com/@BillyKorando/whats-new-in-junit-5-3-c276eb8507f1 JUnit team also supports a BOM which also helps with some of the config headache: https://keyholesoftware.com/2018/04/30/whats-new-in-junit-5-2/
Yea Venkat is great, finally got to see him live earlier this year and one of the best presentations I have ever seen. Another great presenter is Jessica Kerr (@jessitron). Again someone you absolutely have to make time for to go watch. 
&gt;The Oracle JDK is free to use in development, but not in production. I'm not quite sure I know what you mean here. What, exactly, is the difference between "use in development" and "use in production"? Does that mean I can use the Oracle JDK on my desktop to write and test code, but then I would have to recompile that code under OpenJDK before deployment for anyone else's actual use?
There are, I just added a note to the Readme file with the maven dependency info, have fun!
Yup, will put the MDC shortcomings in the next revision of the guide. Thanks for bringing it up!
Hi! Could you elaborate more on the log security/forging point? Never had to deal with log forging before, but am more than willing to learn here :) Also, will put lombok in the next revision of the guide, thanks!
Flogger is awesome and more people should know about it! 
You should say upfront that you want $5 for it 
Happy? 
Never thought of writing on this topic. Very well written. Are you going to cover Flogger as well?
I read somewhere that you shouldn't use getBytes. It's an insecure command. 
It is such a shame for google to share library in a state like this. I literally can't find documentation, just a little "look! fluent api!" showcase and that's all: go look for sources.
"Do not duplicate code." is a little too generous and not correct in all cases. Robert Martins had a good point in his clean architecture book by saying that the purpose of the duplicated code is relevant. If you have two functions which are for different use cases but they have the same code right now then don't mix it up. If you do so you have to rewire it later when the use case change differently. Or, what is even worse, you have to try to work around with weird parameters or if statements. So maybe the statement would be something like "Do not duplicate code for same purpose".
Yup, Flogger will be mentioned in the next revision of the guide.
&gt; Does that mean I can use the Oracle JDK on my desktop to write and test code Yes &gt; I would have to recompile that code under OpenJDK You don't need to recompile You would need to install OpenJDK on your production servers, not Oracle JDK. 
Non-blocking is the secret in the async sauce.
I personally focus more on scenario based questions like What you will do in so and so situation.. kind of. This shows their problem solving capacity. One may not everything, but his approach to the problem matters a lot. 
I don't know how official these release notes are, but yes JavaFX is open source.
Realbraindumps offer your 1z0-808 Dumps Questions Pass really helped me prepare for the 1z0-808 Dumps Exam . Visit the 1z0-808 Real Braindumps to prepare and make sure you pass on your first try. The valuable [1z0-808 Exam Questions Answer](https://www.realbraindumps.com/1z0-808-braindumps.html) will enable you to gain confidence. You can check the interface and verify the quality of these practice tests by downloading the free demos. We claim that premium quality 1z0-808 Exam Braindumps would make your exam an easy attempt. &amp;#x200B;
They're the official OpenJFX (and by proxy JavaFX) release notes. And yes, **Open**JFX is **open** source for many years now. You are welcome to contribute.
I love javaFx and especially fxml which for me separates concerns. I will set this up and compare it to a simialr application I am developing as a gradle standalone app using swt and rxjava via goomph [goomph](https://github.com/diffplug/goomph). Some issues i have run into with javafx is precise pixel locations and transformations say for a touch event and a model(chart) display set up via a graphical context. That was my motivation for looking at swt and wrapping native widgets, ie resizing and complex widget layouts. 
This is so beautiful I want to cry, in the next peer review the call me picky regarding my comments about logging code I will point them to this article.
So, it sounds like you are really talking about the **JRE** rather than the JDK. I know they often get installed at the same time, but they are, technically, two different things. I know you know this, but new Java users may not immediately grasp the distinction you implied with the terms "development" and "production."
https://www.owasp.org/index.php/Log_Injection
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It’s not just an intuition. Google is your friend. I’ve definitely seen benchmarks in the past where running with a security manager is much slower. There’s likely a reason it’s disabled by default. That said, such benchmarks should be redone on modern hardware and with the latest jdk.
Wanted to pass word along here on r/Java about the excellently makes LavaOneConf. LavaOne as suggested in the tweet is looking to model itself after [JCrete](http://www.jcrete.org). I spoke at LavaOne last year and it was an amazing time, attendance was a little on the... low side, but there were A LOT of great speakers/presentations as well as can be seen here: https://twitter.com/java/status/955826709198073856?s=21 To my knowledge the plan is again to hold the conference on the north shore of Oahu (island where Honolulu is located), which offers a much more initiate setting. I say this because it’s going to give you a real opportunity to connect with some of the best Java speakers on the planet. Not being negative about the really big conferences, but when there are thousands of attendees the amount of face to face time an attendee can have with a speaker can be limited. It can also be overwhelming for speakers if dozens, hundreds, of people want to talk to you. LavaOne can be an opportunity to have real conversations with speakers and other attendees in amich more relaxed setting. Planning is still underway, but looks likely that there will be another great line up of speakers again this year. So while on its face it might seem hard to justify attending a conference in Hawaii, the real opportunity to learn and connect might make it more practical. Also tickets are typically cheaper, so the comparative cost to other conferences might not be as extreme as it might initially seem.
What you are referring to in your examples is Spring Boot, not Spring Core. As /u/hutthuttindabutt suggested, read the documentation, both Spring Framework and Spring Boot reference documentations, from the very beginning to the end. Also, you can enable `--debug` mode in Spring Boot and `TRACE` level for `org.springframework`. This will tell you a lot what's happening under the hood.
Does this open the door for other compliant JDKs without a license fee? 
No
Nice post! I looking for a good tutorial As well. I mean how spring boot works and all that. I am read about java annotation and even that I cant find any use of it or how it being use in spring boot.
What I take from this is that inevitably, when integrating to libraries written in c++, memory leaks, high cpu usage, and all sort of bugs are going to be there, no matter how many years elapse of attempting to iron them out. I don't have a doubt about the expertise of the people involved in writing this software, I just don't have faith anymore in the traditional ways of writing this kind of software (OOP full, pointer full). It's too big to be manageable.
Flogger is currently in a sort of "pre-publicity" stage. But the link here IS to a page of documentation, which has links to three more pages, and all the APIs are well-documented to our knowledge. I'm certain that it's not sufficient, but maybe you could indicate what other documentation you want to see?
write an application or tool, like an address book, that will let you try out features without screwing your team over. Use this app on a daily basis and if it breaks, fix it. Due to the apps limited scope it should be easy to understand what broke, rather than a complex legacy team project. Reading only gets you so far, you need to build to understand. 
If you just want to understand the core of it, I would recommend [tiny spring](https://github.com/code4craft/tiny-spring).
For anyone who's interested, there's a JSR for image recognition in Java: https://jcp.org/en/jsr/detail?id=381
/r/javahelp
sc.nextLine()
&lt;\thread&gt;
Checks the [Javadoc](https://docs.oracle.com/javase/10/docs/api/java/util/Scanner.html). Yep, [`scanner.nextLine()`](https://docs.oracle.com/javase/10/docs/api/java/util/Scanner.html#nextLine(\)) &gt; Advances this scanner past the current line and returns the input that was skipped. This method returns the rest of the current line, excluding any line separator at the end. The position is set to the beginning of the next line. &gt; &gt;Since this method continues to search through the input looking for a line separator, it may buffer all of the input searching for the line to skip if no line separators are present. The Javadoc are one of the Java developers' most useful resources and OP will find getting acquainted with them most beneficial.
Don't post pictures of code ffs
Thanks! &amp;#x200B;
I figured it out now thank you
Fuck off bitch &amp;#x200B;
I figured it out without you. Sorry you had to click the link lmao😂 You may be the laziest motherfucker out there.
Maintain a proper attitude here. **You** are the one who did wrong on all accounts: 1. *Wrong subreddit.* /r/javahelp is for help with Java programming 2. *Screenshot of code.* This is a complete no-go in *all* programming related subreddits as people willing to help would need to re-type the code 3. *Foul language.* We have zero tolerance for misbehaving, abusive or foul language, and for derogatory statements Consider this a warning. Further misbehavior will have consequences.
Looks like many people still using previous version of jdk. The migration takes time. 
&gt; Someone like Red Hat or IBM will need to do this work. Or Azul perhaps :) 
Fuck you
I mean great but does this really stack up to something like Gatling?
OMG, some of that code is really bad .... Example: `ArrayList&lt;Double&gt; list = new ArrayList&lt;Double&gt;(1000000);` `for (int i = 0; i &lt; 1000000; i++) {` `list.add(random.nextDouble());` `}` Use **list.size()** instead of **1000000** in the for loop. &amp;#x200B;
Please, enough with best book questions. This question is asked every week here. Use search. That should be your main skill as developer.
I never really thought about it much myself, but it does make sense from a re-use perspective. If you don't create a completely new object build(), the other methods would have side effects if you build multiple objects. Eg: SomeBuilder b; b.setUrl(x); b.setPort(y); HttpConnector c = b.build(); b.setPort(n); HttpConnector d = b.build(); // Expectation: c uses port y, d uses port n // At this point, both c and d might be set to port n, // if it was a reference to the same object. ---- Spring takes it to the extereme by creating a completely new builder every time an operation is called: https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java That's taking it to the extreme because it's not intuitive why something like this wont work when you spit it up over multiple lines: RestTemplateBuilder b; b.setUrl(x); b.setPort(y); b.setProxy(p); // b now only has the proxy P set because // each call created a new builder. Eg, it is supposed to work like: b.setUrl(x) .setPort(y) .setProxy(p).build(); Or b = b.setUrl(x) b = b..setPort(y) b = b..setProxy(p);
IMO Builders could be used in numerous ways 1. The Builder always returns the same object (like in the linked example) 2. The Builder always constructs a new object 3. The Builder build() method can be only called once (and probably must be called), as it consumes the resources contained in the Builder object. Every one of them have use-cases, but I think it should be stated in the documentation.
Sure, you can do it all sorts of ways. But my point is that your 2. option is the best way. What good use cases can you think of for the other options?
I think Font is immutable so this shouldn't be a problem.
I only thought of it because ages ago I ran into a builder which didn't return a new object each time build was called. And due to that I had to create a builder for each object I need.
Option two can use more memory, trigger GC more, more effort to code. All you have to do is document whether or not the builder is safe to be reused or not. You could also have a builder that returns itself but also provides a copy method for the best of both worlds.
There is no best way. There are multiple ways and you should choose the one that suits your problem the best. &amp;#x200B;
Please don't say it is extreme just because they decided to design RestTemplateBuilder as an immutable class.
In this case the builder is intended to only be used once, however it should null out the font member to prevent accidental re-use.
Isn't that the most extreme way of making sure the user is forced to create an object with no side-effects though? With the first builder pattern described by OP, by adding one more parameter, you just add a new buildWith(X) method and change the constructor in the build() method to use it. With an immutable class, you have to refactor every method, because each method needs its constructor updated. Depending on your object you are creating, if you have to add or remove fields a few times, it could get needlessly complex.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You right lol
You realize the dude said ffs right? Sorry bout it
This dude had no intention of helping me so thanks for your input
I do think that would be better. But then you have to do null checks so I'd rather just have it return a new instance.
True, I was referring to a more general way. Eg. Rather than returning null on the second call. I'd rather have a new instance.
You are correct, but some ways are better than others. And I'd still claim that in most cases it make sense to have a new instance returned for each call to build. But again, I'm well aware that there is no one perfect way to create a build
Actually I didn't explain properly - I didn't mean it should return null, but rather that it should clear the fiild after build is first called, and then throw an exception if it is called a second time (by checking if the field is null). 
It looks like in your [submission](https://www.reddit.com/r/java/comments/9g3ta3/what_is_the_correct_way_to_export_java_home/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Well spotted.
Yah, while it's technically a builder, it's a terrible one to use as the example that n00bs would work from. It hasn't been very common in my experience to run into objects that have all these builder-like methods baked into them, and these effective clone operations like Font has. Normally it's just an immutable object with a complicated constructor that the builder conceals. In this example, Font is doing most of the things a builder would have done.
IIRC the idea was so that you could build different rest templates based on your needs (different timeouts, interceptors, message converters, ...). I think it works quite well, since you can define some RestTemplateCustomizer if you need your RestTemplateBuilder to have some default configuration.
Appreciate it everyone!
This is so true! I have seen people who can do an amazing talk (architecture, microservices, you name it), but they could not write a while loop to save their life! If you are looking for programmers, they absolutely need to be able to program. Writing a couple of loops (even on paper) is nothing extraordinary to ask.
I don't think async network io wasn't possible using javaline which uses jetty. Cert web is a better choice if you're looking to go fully async.
I don't get it. What database is he hitting against? I'd like it if Javascript could communicate with a database directly, but it seems awfully risky to me. Most people think that database servers are not safe if they are on the internet. I'm a database guy. This looks intriguing to me, but I really need An ELI5 tutorial 
Can you explain what you mean that jetty is not fully async? Will it block until the client recieve the data?
It's a Java server and a Postgres db, you can see the full example here: https://github.com/oshai/postgres-jj-example/blob/master/src/main/java/oshai/Main.java You can add any sort of auth you want in front of it.
Javalin doesn't switch into async mode until you give it a `Future`, so the reading of the request body is still blocking. The writing of the response should be async though.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
For example `Boolean.valueOf`, no need to create useless `Boolean` instances.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/coding] [Reactive Java all the way to the database with jasync-sql and javalin • r\/java](https://www.reddit.com/r/coding/comments/9ga8e6/reactive_java_all_the_way_to_the_database_with/) - [/r/programming] [Reactive Java all the way to the database with jasync-sql and javalin • r\/java](https://www.reddit.com/r/programming/comments/9ga8d7/reactive_java_all_the_way_to_the_database_with/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I don't think this has anything to do with the builder pattern?
Good stuff. Thanks for sharing!
Be sure to be utilizing [Gradle](https://gradle.org/) and [Maven](https://maven.apache.org/) for managing your dependencies. It's the standard way to handle dependencies in Java and it will make your life easier.
Intellij might be a bit heavy, but I think it adds a lot of value. It's hard to pinpoint exactly what it does well though. It has a lot of handy, little features like when you highlight a variable name, all references to that variable will be highlighted. Intellij on the other hand only allows a single project to be loaded at a time (it can load a single multi-module project). Eclipse has got to be my favorite editor at the moment though.
Vavr was built in an attempt to bring Kotlin features to Java. With this library you are able to utilize the functional programming paradigm (which is only partially supported by Java at the moment). This library reimplements streams and collections in Java, but the reimplementations are built on top of different fundamental ideas. For example, all of the Vavr collections are immutable. Another example, Vavr streams are able to handle checked exceptions. There's a lot of value gained when a library adds support for a currently unsupported programming paradigm.
Thank you for your concern. I write and maintain microservices for a fairly big bank, which I M fairly sure are not monoliths. Thanks for making assumptions on behalf of me while representing the entire java community. I was obviously (or perhaps not so) within the context of Eclipse and its multi project approach with workbenches (or what ever they are called).
You were obviously using bad English as well. ;) You never mentioned Eclipse and you are obviously using multiple projects or modules since you're using the microservice architecture. There are times when it makes sense to use multiple projects instead of 100+ modules inside of a single project. You'll figure that out someday.
Holy shit. I don’t even know what to respond at this point. I hope you don’t go through life making all of these wild assumptions thinking it makes you look better or smarter.
&gt; Should the caller really care how the value is obtained The caller does not need to know how the value is obtained but he must know which methods consume a lot of time/network/cpu/memory/whatever. 
So you're saying that my assumption of multiple modules is wrong? If that's true then you have a monolithic codebase... You said that you don't have a monolithic codebase and you don't use multiple projects. So it's pretty safe to say that you're using multiple modules within a single project.
I tend to use `findXyz()` if there is work involved and `getXyz()` for getting without work being involved.
Oo yay! Would be great to see a spring-data reactive implementation using this. Does jasync-sql implement enough for JPA?
I’ll make it dead simple for you: one service equals one IntelliJ window. 
I’ll make it dead simple for you: one service equals one IntelliJ window.
There's nothing as fun as finding out last Monday that the fucking logger configuration pulled something off the network (and silently failed because the resource doesn't exist anymore). Almost 1s on startup because of this.
I don't get behind the idea that methods should be verbs. Often, it just bloats the words. And actually, you don't follow it: You call the method `area()` later, which - of course - is the perfect name for it. I mean, not even the Java library heeds that rule. `hashcode()`, `toString()`... In the same way, `byId(...)` is equally clear.
The caller probably shouldn't, for the most part, but the programmer should. And if coding/naming connection is consistent it can serve as a hint that the function might potentially not return immediately or require external resources.
Well said!
I think it's probably best treated as "generally a good idea" rather than "do this EVERY TIME NO EXCEPTIONS." If your code is perfectly clear to a third party, then I would say you've achieved the ultimate goal. More often than not, I feel like making naming methods using verbs helps to achieve that goal, but I wouldn't bend over backwards in order to do it I suppose.
how do you suggest learning JSP and servlets? There is a dearth of content online, do you agree?
Read Java EE books
&gt;They are semantically equal in conversational English I play get with my dog. I say, "retrieve!", throw the toy, and sometimes the dog brings the toy back. It was quite the fetch to wind up with such a wonderful dog. I'm inclined to say that the synonyms are semantically equal much of the time in both conversational English and Java writing, but there's likely exceptions for when one term or another really must be used. (as in your excellent examples)
I see your point but that's a really bad example. You can replace "retrieve" with the more colloquial "go get it" and fetch in its nominalised form is hardly the same scope
What's your alternative then?
That's one way to tell them apart, yes. Bear in mind that many people will assume `findX()` methods imply DB access, though, specially those who have used Spring Data.
But if you change the implementation of `fetchFoo` to use hardly any resources, you might need to change it to `getFoo`. I guess it's also a question of boundaries. If your method is "internal" (only used in/by your own library), then it's okay to convey extra information about how a value is obtained. If it's an API method, I would be more hesitant to leak this kind of abstraction.
&gt; But if you change the implementation of fetchFoo to use hardly any resources, you might need to change it to getFoo. I'm not sure this kind of change often happens. This kind of change reveals an architecture refactoring so, yes I think I can rename the method and change the javadoc. It is important to know if a method consumes something because it can changes how client will used your API. In a perfect world this is not the case but I don't believe in a perfect world. The simplest example I have in mind is when using an ORM you often have lazy loading and you don't want to do this kind of thing: for (Client c : myService.getAllClients()) { List&lt;Order&gt; orders = c.getAllOrders(); // here a request is done because orders is lazy loaded. } The client needs to know that Client.orders is lazy loaded. 
*shrug*. It wasn't meant to be a perfect example; I'm just trying to get at some of the usages where not all terms fit equally well. Feel free to come up with your own, better examples; my point was that there's obviously a difference in usage of those words in common English. I agree that it's not the same scope, but I'd also argue that talking about "getters and setters" is hardly the same scope, either, because there's no option to say "fetchers and setters" or "retrievers and setters", because that's just not what they're called.
What is wrong with using double to count cents (not dollars) if you want to have exact amount in cents?
&gt; I think it's probably best treated as "generally a good idea" rather than "do this EVERY TIME NO EXCEPTIONS." This applies to every rule in these books
Starting a new spring boot project, it seems the easiest/simplest thing to do. You don't even know it's there unless you have a need to configure some detail. I appreciate other libraries look good but as JPA is all set up and managed for you it is more effort to switch.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
heroku or aws .
It is not a full JDBC implementation and I am not sure exactly what is JPA requirements. can you point me to that?
JPA exports a blocking/synchronous API so it's not possible to use a non-blocking/reactive programming model there.
Care to explain what's exactly reactive in the code in the medium article?
&gt; Zerocomment. :-) Good one 👍 &gt; it could be a problem especially for a large code/json base, couldn't it? Not really. There are two ways to see at it. 1. Performance tests are not actually verbose 1. Also Zerocode allows to reuse the existing test, by simply providing the `Class#testMethod` to the Load runner + First one : + When we simulate load/stress, actually we have a **single JSON payLoad** or a single JSON with `multiple steps` for a given scenario, and **dynamically** change the fields i.e. randomize the ID, Name etc etc for every parallel user in the runtime(framework takes care of it). See how to have [random numbers, UUIDs, random strings](https://github.com/authorjapps/zerocode#generating-random-strings-random-numbers-and-static-strings) by simply parameterizing the fields. + When we have different payLoad, they(all scenarios as separate JSON file) also appear only **once** in the `resource` folder. And dynamically keep on changing the payLoad/fields in the run time. + 2nd one : + You can simply reuse your existing Unit tests or End to End tests to generate load. Hence no new JSON files are needed for the performance testing. Note- JSON payload(request and response) here means the JSON equivalent of the Objects too. If the contract or API data format is already in JSON it's very good, otherwise, if they are e.g. Java objects, then the framework serializes/deSerialzes to/from java/json format. Basically the hassles has been taken care by the framework, enabling developer/testers to focus on testing very easily without any distraction. **Zero distractions !** 
That's what I was wondering as well. The code is using asynchronous APIs, not reactive ones. 🤔
I will add that to the post.
You might as well change the title of that post here then as it's quite misleading.
The thing is: you don't see that here. It's an asynchronous API, not a reactive one.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/coding] [Java Reflection, but much faster \[x-post from r\/java\]](https://www.reddit.com/r/coding/comments/9gkang/java_reflection_but_much_faster_xpost_from_rjava/) - [/r/programming] [Java Reflection, but much faster \[x-post from r\/java\]](https://www.reddit.com/r/programming/comments/9gkajp/java_reflection_but_much_faster_xpost_from_rjava/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
&gt;I mean, not even the Java library heeds that rule. `hashcode()`, `toString()`... Do as they say, not as they do. These are methods from over 20 years ago. Bad names are the least of your concerns when it comes to code from that long ago. The `finalize()` method (which is a verb, incidentally) is being *removed*, for example. Serialization is on the radar too. So better not 20+ year old code as an argument. One case where you don't want method names as verbs is in the builder pattern: `House house = HouseBUilder.floors(2).rooms(6).build();` This is better than `setFloors` and `setRooms`, which you will use on `House` itself in case it's mutable.
That's the approach Spring Data has used for quite a while already. See the reference documentation's sections on [object creation](https://docs.spring.io/spring-data/commons/docs/current-SNAPSHOT/reference/html/#mapping.object-creation) and [property population](https://docs.spring.io/spring-data/commons/docs/current-SNAPSHOT/reference/html/#mapping.property-population).
[already posted a while ago](https://www.optaplanner.org/blog/2018/01/09/JavaReflectionButMuchFaster.html).
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Instead of invoking the Java Compiler, you could also do some trivial bytecode manipulation. Basically, compile a template and only change the constant table.
DigitalOcean
Or even just use ASM to generate it quickly. Simple ASM + a classloader leads to some really succinct code.
Isn't reactive just a type of async API?
You don't really need full ASM, you only have to change some things in the constant pool.
Can anyone confirm the following: &amp;#x200B; In the class \`AreaCalculator\` the method \`calculateArea\` has to be corrected from &amp;#x200B; \- \`calculateArea(Collection shapes) \` &amp;#x200B; to &amp;#x200B; \- \`calculateArea(Collection&lt;Shape&gt; shapes) \`
Those all sounds like implementation details of an async API to me but I will watch the presentation to see if it changes my opinion.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
For more information (source code for the demo and Java Grinder): [http://www.mikekohn.net/micro/playstation2\_java.php](http://www.mikekohn.net/micro/playstation2_java.php)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
For more information (source code for the demo and Java Grinder): [http://www.mikekohn.net/micro/playstation2\_java.php](http://www.mikekohn.net/micro/playstation2_java.php)
It would be interesting to see how [ReflectASM](https://github.com/EsotericSoftware/reflectasm) performs in comparison.
In the logging and throwing section, it's probably worth mentioning that sometimes you want to add extra context to your situation, in which case it's a good idea to wrap the exception in a custom exception with that information. I'd also mention that because exceptions are just Java classes, you can create custom fields inside them to record all the required information. 
As /u/mp911de points out, JPA is designed to be blocking so isn't the right API to extend. ReactiveCrudRepository looks good though? https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/reactive/ReactiveCrudRepository.html
The one you absolutely should not use is Java serialisation. Just don't do it. It's tricky to get right without digging yourself into a compatibility nightmare and is a major source of security bugs. Just do not use it.
You may find more help over at /r/javahelp
I've had good experience in the past with Kryo for speed and ease of migration in objects. This is a bit out of date, but [this repo wiki](https://github.com/eishay/jvm-serializers/wiki) has had some decent performance information in the past.
One thing that is tangentially related to performance is debugability. When it's hard to debug, performance suffers as well because it's harder to understand code and makes things better. I was impressed by the Dagger DI library generating the object creation graph based on the DI configuration DAG. It isn't only the fastest possible way, it's also the most debugable way. 
Completely unrelated, but his opening Shakespeare quote: &gt; And so, from hour to hour, we ripe and ripe. And then, from hour to hour, we rot and rot; And thereby hangs a tale. In the original pronounciation is actually a below the belt joke, see this video at around the 8 minute mark: https://m.youtube.com/watch?v=gPlpphT7n9s#
Netty is kind of ring buffer, right? It is used in jasync-sql. In addition you can add coroutines or rx java on top pretty easily. I plan to write another example with webflux. Will that be qualified as reactive?
Or just use reflectasm https://github.com/EsotericSoftware/reflectasm
"Your scientists were so preoccupied with whether or not they could, they didn’t stop to think if they should." -Ian Malcom All kidding aside, this is cool as hell. Great job!
I've used a few of them and they all have there caveats and quirks. For example, Jackson is fine if you want to serialise bean style classes into JSON, but I never use bean classes so I instead want field-based serialisation. Trying to get Jackson to do this is a headache - if you can get it to work you may find your classes are now smothered in Jackson annotations. I usually start with Jackson, give up and switch to Gson, then give up on that as well due to some other quirk. Then I bastardise my types so the serialisation framework likes them and ring-fence them so as to never use them for anything else. Then I have to write converters between the interal types and the serialised types, and I realise that it would have been easier to just hand-code the internal types into JSON. The entire experience is enervating. I think the fundamental issues are Java's type system - it's not very algebraic in nature and has various quirks and inconsistencies that make round-tripping data via a serialised format quite tricky. Also, there's the fact that it's very difficult to deserialise data back into its original class - what if it doesn't have any empty ctor because all of it's fields are final, etc. I hope that once we have Value Types, then the problem becomes several orders of magnitude more easy. Also, avoid Java Serialisation, it's widely regarded as a mistake, and will eventually be deprecated and probably removed.
Code coverage is a silly metric, you just end up writing tests just to write tests, one thing you can do is actually instantiate all the dependencies you are mocking, and just make the proper assertions. If all the dependencies are tested thoroughly and the business logic is painfully simple, I'd say there is no need for a test, but that is an uphill battle not worth fighting. 
So if I'm reading this correctly, adoptopenjdk will update their free jdk 11 for 4 years? It seems like the one to get if you don't want to pay
I'd like this simplified even more.
See title
https://www.azul.com/files/Java-SE-Lifecycle-131-a.jpg
So, Java 8 wont receive any update after 2019. If one want to keep their projects using Java 8, they should either ignore safety or stick with non-oracle vendors implementation. &amp;#x200B; &gt;!RedHat rocks! !&lt;
Yes
Huh? I thought that Java 8 is supported non-commercially until 2020: https://blogs.oracle.com/java-platform-group/extension-of-oracle-java-se-8-public-updates-and-java-web-start-support
Could be an older image. I just picked the one that made the most sense. :P
Or just don't use exceptions, period. (at least not when you can avoid it) Either&lt;Error, User&gt; findUser (final String uuid); is clear, forces callers to think about and handle both cases (or just pass the Either higher up), supports map, flatmap etc etc etc. 
It's not Scala. I have no real interest in debating. I will just encourage anyone who has a nagging feeling that coding with exceptions is needlessly complex, bug-prone and difficult, and that it's made worse by differing opinions on how to do it, to look into using Optional, Either, Try etc types instead.
I have a more comprehensive version of that graph at https://yawk.at/java-support/
For personal use it will be supported until 2020. The recent "JVM release is a process, not an event" blog post by oracle says as much too.
Security is not the only thing they update - there is also timezone data that changes from time to time - (EU DST change coming next year, thats pretty critical :D)
"non-corporate" is a pretty bad restriction and probably not something you should actually be using.
Can you explain why you're starting out with Servlets (which are rather low level) and JSP (which is deprecated)? There are simpler ways to start. Also; /r/javahelp is more suitable for this. Best to post your topic there. 
There’s also stability fixes to consider
This graph is excellent, but doesn't quite match the latest info from the vendors (I stress this is not the fault of yawkat), so do double check the appropriate vendor site as well.
https://blog.joda.org/2018/08/java-is-still-available-at-zero-cost.html and https://blog.joda.org/2018/09/time-to-look-beyond-oracles-jdk.html
Brilliant thanks, was running around on my phone so was too lazy to link
Indeed. Aint Oracle forcing us to dev our projects in a way that is easy to "upgrade" upon Java versions updates?!
hey... I was kidding... hehehe
Yes, it will. It's a good plan.
It's good for Java, I doubt it will work for businesses. They will just be left with outdated JDKs, increased costs to migrate to new versions (with recent introduced bugs), etc.
I changed the title of the post so it will be more accurate, but I don't think I can change it here, thanks.
Just curious. How will the reflection approach's performance change if the getMethod call is made static so that it executes only once? I am assuming getMethod will be called on every iteration of the benchmark and I think that might be the major bottleneck rather than the invocation itself.
I believe you are talking about serialization of \_structured data\_ rather than serialization of \_object graphs\_. There are libraries that are tailored to this job. For example, Cap’n Proto, FlatBuffers, Protocol Buffers, Thrift, Protostuff, etc.
I've used XStream for years, it has never had an issue dealing with any of my object graphs.
This IS about OpenJDK.
I am very sure the various OpenJDK vendors will still continue to contribute and produce security patches for OpenJDK.
I am talking about serialising arbitrary Java data into data formats such as JSON.
Sometimes it's easier to use the target type for the state of the builder - in which case the `build()` is somewhat of a noop. I would've preferred though that the builder was reusable a la class Builder { private Thing thing; private Thing safeThing() { if (thing == null) thing = new Thing(); return thing; } public Builder property(Value value) { safeThing().setProperty(value); return this; } public Thing build() { final Thing result = safeThing(); thing = null; return result; } }
Note.js is Java**Script** and has nothing to do with **Java**. Please, once and for all: spam somewhere else. **Removed**
Very clean and well written also mentioned most of the scenarios usually developers face.
Sorry I mean RedHat's OpenJDK
Yes there's an amazing number of large orgs and individuals involved in OpenJDK. It matters to their bottom line.
You could, but check their free updates and support policy for your O/S. Their strongest offering is naturally around RHEL
Oracle JDK 8 will still get updates for personal use until December 2020, correct? 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; &gt; Java 8 won't receive any security update after 2019. Are you sure? I thought Oracle JDK 8 will still get updates for personal use until December 2020?
Weird that there is a "Use the non-commercial build in a commercial setting." but not a "Use the non-commercial build in a non-commercial setting." when the latter is exactly what I am planning on doing.
Very cool. It reminds me - way back in early 2000's when Sun was working with Sony on Blu-Ray which uses Java for the embedded UI. Sun was discussing with Sony to open playstation to have full Java on it. If anyone remembers back then Sun was demoing Java3D frequently too. Sony declined at then end because they all want exclusivity. WORA scared them away. Too bad.
Mods: Pin this please. 
And for future releases everybody who doesn’t want to update their Java version every 6 months (which is just about every company) is going to be relying on third party support or paid Oracle support.
I completely understand what you mean, the problem is im not allowed to share anything ^^ but still your right, it is being shared between around 30 services. I already talked to some co-workers. They also say the same thing, Id rather spend time on integration tests. 
I'm not sure I understand what "Java data" is. If you are talking about Java primitives or "dumb" data (data carrier objects, plain data, records, structs, etc.), it's one thing. But not every object in Java are like that. Some of them have invariants to establish upon construction, non-trivial behaviors, etc.
&gt; which I don't recommend by the way I like this bit :-)
Wow, that is actually looking good.
Lovely, thanks for that! 🙃
That's not supported in Spring Data JPA though.
I personally use both Zulu and AdoptOpenJDK builds. Zulu gives me the extra comfort that I can go for paid support if I want it. Disclaimer: I’m the head Cat herder at Adopt 
I can relate to that reaction. The issue is: those conceptual differences leak into the APIs and allow / prevent certain things. \`CompletableFuture\` is designed in a way that it returns one value. I.e. if you want to work with 1 million result records, all you can do is asynchronously read those into a list allocating the corresponding memory. A reactive streams based API will allow you to produce a \`Publisher\` (or \`Flux\` in Reactor) to stream those one million elements, i.e. you process them one by one instead of accumulating and then processing the list.
fixed! 
Congratulations! JavaFX has the best API for cross-platform GUI development. Eventually it will become the best implementation too!
Lots of nice fixes: https://github.com/javafxports/openjdk-jfx/blob/jfx-11/doc-files/release-notes-11.md#release-notes-for-javafx-11
It looks like in your [submission](https://www.reddit.com/r/java/comments/9gw2im/syntax_error/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This task is far too broad. Sorry, maybe I missed something. Could you please explain how Value Types will help us in serializing objects "several orders of magnitude more easy"? From what I understand, Value Types may help us in solving the data part of the problem, but I'm failing too see how this is going to help with objects.
I think it's good, because a year ago I worked in a fintech where they used java5 on production for many customers. You know long time ago java5 was marked as abandoned? We had to patch JVM, introduce new timezone support, SSL3 and TLS1.1, we developers were responsible for implementing this r/https://www.timeanddate.com/news/time/russia-saratov-time-zone.html in java 5 JRE. This was a nightmare, but since the plans for faster releases and paid support were announced they started migrating everything, including build system in ant and repo in SVN to java7, maven and git. Once they move to 7, they will move to 8 and then to 11. Not bad plan and forces sllooooooowwww moving companies to upgrade faster to pay more for support.
I don't know if those using spring-data's repositories need JPA's persistence and Entity management, but its ORM annotations (`@Entity`) are still relevant. Is there value in exploring a ReactiveCrudRepository which uses JPA annotations on Entity classes just to perform object-table mapping?
[removed]
I have written in the past about my pet project so I hope I won't be boring for the community. [MockNeat](https://github.com/nomemory/mockneat) is a Java library that can be used in different scenarios, for example, a better random generator or a library that enable developers to mock objects with arbitrary data. Receiving feedback from the community I've added some [new features](https://github.com/nomemory/mockneat/wiki/MockNeat#sqlinserts) that allow the generation of arbitrary data for relational databases. What made me happy is that in recent months a few bloggers started to write about it, it attracted one or two contributors and looking at the download analytics in jcenter() some big names in the industry have it as a dependency somewhere. 
I'm sure Oracle one day will stop any free update on java and we have to pay for any patch... Time to use third party builds.
It won’t just be Red Hat of course, although we’d love to see them lead the effort as they’ve proven they’re good stewards of previous OpenJDK update projects! 
All of the articles I have read that try to clear up the confusion regarding Java licensing don't actually clear up anything. It is all still about as clear as mud. This suggests that the licensing model is FUBAR. I am just going to download java from somewhere, use it, and hope I don't get sued. 
In short, to avoid that concern use Oracle’s OpenJDK build and upgrade versions every 6 months. This is $free and free as in use. OR choose an OpenJDK binary from another provider Azul, AdoptOpenJDK, Red Hat, IBM et al, several of which provide $free and free as in use options.
I once dive into Java timezone data, where it comes from, how it's encoded, etc. You can download a text file from IANA that's basically a logbook of all the weird decisions and pragmatic choices they made. For instance, Amsterdam time originally had a seconds offset, but the offset only allows hours and minutes so they had to round it. Human time is weird.
There is now a plan for releases and there will be LTS release every 18 months, so big companies can plan ahead knowing when next java will be release and when abandoned.
I would like to see JFoenix too in their Community section.
Using your example of one million divided by three, BigDecimal is superior. The ArithmeticException is the correct result. The exception even explains the exact problem that the division results in an infinite decimal expansion. The exception prevents you getting an unexpected inexact result. Floating point arithmetic would happily give you an inexact result. But floating point was never intended to be exact. Accounting is intended to be exact. People want their paychecks to be exact. And an excuse about floating point math isn't going to cut it. If you are doing a division, then specify the precision you want using MathContext. final BigDecimal one_million = new BigDecimal( 1_000_000L ); final BigDecimal three = new BigDecimal( 3L ); final BigDecimal q = one_million.divide( three, MathContext.DECIMAL128 ); System.out.println( q ); Furthermore, after doing the division, you then multiply it back to see if there are any pennies left over. If so, then you begin divying those extra cents out amongst the results. In this case, there would be one person who gets the extra penny. I've dealt with this very problem in accounting software. Suppose on a PO there is an extra charge, and we're going to prorate it across the cost of all of the accounts that are paying for the PO. Suppose Math Club, Computer Club and and Science Club jointly order a box of blank DVDs. There is an extra 14 cent cost to spread across these. Fourteen divided by three will give you four with remainder two. So you take those two extra pennies and add them to the account numbers for any two of the three accounts. That is, one club will get charged a penny less for the shared box of blank DVDs. Everything is exact. You don't use floating point. All pennies are accounted for precisely. Auditors are happy. Employees are happy with their paychecks. The IRS is happy. I do understand that some floating point math is used in some financial calculations. For example, calculating interest. Once you calculate those payments, they are frozen into exact cents. If your monthly payment works out to be some fraction of a penny, the bank will use their choice of technique to determine what monthly payment they want. After that it's all exact arithmetic. Another example is that in inventory you might measure some quantities as floating point. Such as gallons of gasoline in a tank. Once a dollars and cents value is determined, you're back to using exact cents. In other words, when talking about MONEY you don't use floating point for the money value. As for floating point calculations, I've found that I can do everything I want with BigDecimal and not even use floating point at all. The results are what I expect. I control the level of precision I want, out to any limit imagineable. If I'm working a trigonometry problem, I'm happy to use doubles. If I'm calculating satellite position from ECEF coords into lat/long coords, then of course I use doubles. If calculating satellite bearing and elevation, then of course I use the law of cosines and doubles. But NOT for accounting software. Not now, not ever. 
The problem is that you assume that moving from 8 to 11 (or X version) will create no issues for every project. The reason moving from Java 5 to Java 8 was so easy, is because minimal changes had happened between these versions. If Java is moving faster now, there will probably be more problems when upgrading. There are many new bugs in Java 9+ because of these changes. I'm fine with it, because I believe programming projects (including a language) should move forward, but only if the LTS support is good enough to justify it. 2 years is too little. Java 8 was released 4 years ago, and looking at the plan will have support for 4 more years. We will have to see what support that will be though, and imo the next LTS versions should have at least 4 years of support. (which is nowhere mentioned in the article)
That site has an expired SSL cert
This uses FXML. While it works, not exactly what I was looking for. I was looking for more of a build/deployment option for the web where the application was written in Java, not FXML.
It can be added if it supports JavaFX 11. There was a call put out recently asking for projects that wanted to be listed and that supported JavaFX 11.
The move from 8 to 9 is admittedly challenging. I'm expecting the impact and change to be less going forwards. Partly because the change sets will be smaller and partly because I think Oracle and the OpenJDK community learned a valuable lesson with 8 --&gt; 9 and will try to avoid that headache again.
I was disappointed when I heard it was being removed from the JDK, but this could give the project the opportunity to grow at a pace independent of the JDK. I hope it succeeds because I prefer JavaFX over Swing or AWT. 
As long as the binaries pass the "TCK". What is the "TCK"?
I strongly appreciate this article, especially the focus on development costs. I feel that many people in today's world are, for lack of a better way to describe it, whiny entitled brats. There is a problem in several corners of the software development world where monetization of hard work becomes challenging, which then makes it difficult to support continued work on the project. This is because of how many of us have become unwilling to fork over any money for what we are getting. &amp;#x200B; I tend to view Oracle as one of the "big bad" companies in the industry, and I haven't changed my view on that. However, this article has helped me see that Oracle trying to get at least some revenue from Java isn't the end of the world. Now, I say this with some reservation, because I don't trust Oracle not to make things worse and possibly do a lot of harm to the Java community in the process, but thus far it doesn't seem too bad.
It looks like in your [submission](https://www.reddit.com/r/java/comments/9gz0f8/ood_issues_in_oracle_jdk_sources/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The Technical Compatibility Kit. Implementations must pass this test suite to claim compliance with the Java SE specification
Yes that's correct!
Looks interesting. Now I just need to learn Chinese to figure out how to use it. 
What’s chinese? Is that like java but faster?
Yeah. Must have happened recently. I was checking their site last week. 
That's what you get for downloading Netbeans ;)
I was so let down when I finished the rest of that comment and didn't find out...
Could you expand a bit on what you still find confusing? Happy to try and make things clearer for you.
It looks like in your [submission](https://www.reddit.com/r/java/comments/9h2q1i/optimising_code/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
There is no EU DST change coming next year as no one has decided on anything yet. And if it happened, it wouldn't happen the same year.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/9h396w/netbeans_platform_is_it_still_a_thing/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Pretty sure I have to upvote this comment for truly non-biased reasons. I don't think I will be attending at this stage...
Can someone explain to me what is teh difference between the SDK download and the jmods download? And when i add the dependecies via maven do i need any of the above?
`getMethod` is only called once in the benchmark. Have a look at the profiler screenshot.
 &gt; Or maybe using DI makes you a bad programmer? What has gone so wrong in our industry that *this* is even a question? No. The answer is no. Using DI does not make you a bad programmer. Using DI *incorrectly* makes you an average programmer. Not using DI almost certainly means you write awful code, which makes you a bad programmer. :)
That still doesn’t make it reactive. 
Jeez. In my view, DI (or similar patterns) is an consequence of the Single Responsibility Principle: This part of code (method/function/class) does X, but there's a bunch of functionality about finding the appropriate configuration and the right services that does *not* belong to X. 
Holy shit isBlank should have existed long ago. Strip though is just replace without parameters
I believe, it's more about implementations interchanging and, specifically, making testing easier. You can still introduce a class/module that handles "finding the appropriate configuration and the right services" in a way that violates DI.
Or click through to the English `README`. https://github.com/alibaba/arthas/blob/master/README_EN.md
Guides, javadoc and comments are in chinese so it is hard to read them if you don't know it. But since it is chinese project that is understandable. Time to learn new language :). But from code perspective just from fast peek needs exception handling improvements. And these are just from fast check... `catch (Exception e) {` `e.printStackTrace();` `}` or `catch (Throwable t) {` `//` `}`
That's what you get for using Windows Defender 
Good article, but that fixed nav bar is a travesty.
That's basically what they did with OpenJDK
It just seems....pointless. Like why bother producing 2 JVM systems one open one closed. If you're gonna open it...open it. I mean it's really cool that they are keeping up openjdk don't get me wrong. Just...why 
Hahaha that's hilarious because I did the same thing! I thought replace replaced one instance of parameter one and replaceAll replaced all instances. I had no idea it used a regex early on. Tbh strip is kinda the same story. It should be stripSpaces or something. Strip sounds like it'd take a parameter, and remove that. 
Why are you **reposting** an article that was only posted **one day ago** [**here**](https://redd.it/9gnsup)? This is spamming &amp; karma farming and thus against the **reddit terms of service**. **Removed**
I'm sorry! I didn't know that it was posted yesterday. Since it had not been posted as a direct link, I didn't get the notification that it has already been posted. Thank you for informing me.
&gt; Strip though is just replace without parameters What do you mean by that?
Space is not the only whitespace character, so no, it's nothing like `String.replace(" ")`
They use proper logging in the server-part of the tool. In a command-line utility, I wouldn't judge too hard. Ignoring an exception is sometimes the right thing to do. 
Considering that there are books which claim *Spring Framework is all you need to write effective Java application* (without any mention what kind of Java application they mean), and that how many people started to think *DI=Spring Framework=reflection*, I can imagine how someone who doesn't like runtime reflection make a similar simplification (*reflection is bad=DI is bad*). Which is stupid, but people are lazy and they don't want to check facts, so if you talk to them this way it is easier to convert people en masse. ¯\\\_(ツ)\_/¯
This article is so biased it's insane. DI is AMAZING *if you do it well* just like OOP. Also Spring isn't the only DI system. Guice and Dagger are very poweful. Also it's justc AOP done right. DI isn't exactly unique. That being said I practically see Spring as a gift from the gods. You can literally make a bean for ANY COMPONENT and it just magics it into place. The system is so fucking good for efficient dev it's insane. Spring changed my life in dev. I have 5 custom scope annotations I've made utilizing their system. Spring is SO GOOD why do people hate on things that are good? With spring and react I can AOP+OOP+webdev ridiculously complex applications in a few days. Idk my whole overarching point but spring and guice are the oinnacle of AOP. AOP is just as valid of a paradigm as OOP AND SPRING CODE INVOLVES OOP in the implementation! DI is a gift horse from AOP a bunch of ourists are looking in the mouth. You can maje your own frameworks guys it's not even very hard. Tbe *paradigm* is the important part. 
All other whitespace chars I know of are just unrendered unicode shit. Can you elaborate? Not trying to be dickish I'm sincerely interested
Tab?
Well shit I guess that should've been obvious
The documentation for `Character.isWhitespace(int codePoint)` lists: &gt; * It is a Unicode space character (SPACE_SEPARATOR, LINE_SEPARATOR, or PARAGRAPH_SEPARATOR) but is not also a non-breaking space ('\u00A0', '\u2007', '\u202F'). &gt; * It is '\t', U+0009 HORIZONTAL TABULATION. &gt; * It is '\n', U+000A LINE FEED. &gt; * It is '\u000B', U+000B VERTICAL TABULATION. &gt; * It is '\f', U+000C FORM FEED. &gt; * It is '\r', U+000D CARRIAGE RETURN. &gt; * It is '\u001C', U+001C FILE SEPARATOR. &gt; * It is '\u001D', U+001D GROUP SEPARATOR. &gt; * It is '\u001E', U+001E RECORD SEPARATOR. &gt; * It is '\u001F', U+001F UNIT SEPARATOR. 
Wow I have applications those things would break TIL
I answered relating to "Strip though is just replace without parameters". `trim` removes whitespace at the begging and at the end.
For now `apache.commons.lan3.StringUtils`is your friend
No, it doesn't. It strips leading and trailing whitespace as per `Character.isWhitespace()` http://hg.openjdk.java.net/jdk/jdk/file/3fabe59fe4de/src/java.base/share/classes/java/lang/String.java#l2653
[removed]
Now can I get String.equals(String... value) and maybe equalsOr(String... value). Always annoyed by comparing multiple values to a single string in a code block. If all or any are true do X.
Use a switch? switch (val) { case "a": case "b": // do the thing break; default: break; }
You possibly want switch expressions, which are coming as a preview in Java 12. This means you'll need to enable a flag to make the compiler understand the language feature.
Or use the more general Objects.equals(s1, s2)\`?
Or use allMatch: `Stream.of(s1, s2, s3).allMatch(s -&gt; myStr.equals(s));`
Nice, even better!
There is also `noneMatch` :).
replaceAll is evil. For example, `"/some/filepath".replaceAll("/", java.io.File.separator)` does not work on Windows. Github issues are full of such error reports.
Well, yes, but it was for demonstration purposes :)
An Karanir Thanagor..
That works but I feel like it’s not any better than If(x.equals(y) || x.equals(z)) I really just want If(x.equalsOr(y, z))
Do you mean that the resulting string is not "\\some\\filepath", or that it does return "\\some\\filepath", but this path does not work on Windows? If it's the former, that is really odd, but if the latter, that should be expected.
indeed
Which Netbeans? 8.x from https://netbeans.org? Or 9.x from https://netbeans.apache.org? Or a nightly build?
There are several Java implementations of Either. I have one in [trylambda](https://github.com/nullterminated/trylambda). My motivation for writing trylambda was dealing with exceptions thrown in Java 8's lambda expressions. I notice the author didn't touch on exceptions during stream processing. As u/bedobi points out, once you have an Either type, you can return exceptions instead of throwing them. This is a similar to returning Optionals instead of null. The return type makes the method caller account for the exceptional execution path. It also permits postponing error handling in async situations like parallel stream processing.
[removed]
We use this Gradle Script plugin for all our Android/Java library projects. 
Funny we have been doing something similar at our job. What we are doing which handles large files well is to use commons-csv which accepts an InputStream (you will probably need to wrap the InputStream with ZipInputStream or GZipInputStream). From there you can iterate over the rows.. commons-csv will not load everything into memory and will only be streaming row by row from the InputStream so it won't be impacted by the size of the file. So afterwards it is pretty straight, you can insert to your Database the data of each row on your preferred mechanism. 
How did you download that data file? I'm playing around with some internet examples and I get the error "The import import org.apache.commons.net.ftp.FTP; import org.apache.commons.net.ftp.FTPClient; cannot be resolved." It has been awhile since I touched Java.
It seems you are having issues with core Java topics, you need to import the "commons-net" library from the package manager you have available (Maven, Gradle, etc...) that will allow you to use those classes. I would suggest you move this question to r/javahelp which is more suited for helping you with this.
You want /r/javahelp The question itself is a non-sequitur: if the file is hosted on an FTP server, then yes, you would use the ftp protocol to acquire it. You're really talking about three things (I think): (1) acquiring a file via some network protocol, (2) uncompressing that file, and (3) loading it into MySQL. None of these things necessarily require Java to do; indeed, a batch script would be less work unless maybe the data needs parsing/manipulation before it hits your database.
You missing some dependencies. In above case its [apache commons net](https://commons.apache.org/proper/commons-net/download_net.cgi). Either download the zip, unpack the jar and put it on the classpath or better add the [dependency](https://mvnrepository.com/artifact/commons-net/commons-net/3.6) using a build tool like Maven.
I do have first 2 of the process done in a batch script, though I don't know how to load it into MySQL in a batch file. My command prompt doesn't recognize 'mysql' 
Thanks for the help with adding dependencies. Just needed to add dependency tag to pom.xml and build.
Good, did it work? Maybe FileUtils.copyURLToFile - which delegates to IOUtils.copyLarge - is better suited. ([Apache Commons IO](https://commons.apache.org/proper/commons-io/)). E.g. from IOUtils.copyLarge Javadoc: &gt; Copies bytes from a large (over 2GB) InputStream to an OutputStream. 
I'll let you know next week. I got to wait for IT to make ftp download process work because of some firewall issue.
\&gt; Is there any substance in Dependency Injection (DI)? Is this something you should be using in your application? Or Everyone needs DI in a way, and everyone can roll their own, after all it's nothing but initializing your objects with their dependencies. However, doing it properly by following OOPs best practises and patterns/testability involves some work, and you end up with your own in house DI Framework no one wants to maintain because of lack of community. In have mostly used DI frameworks for infrastructure code which has proven incredibly useful.
Some interior whitespace would be even better. What does this do? " a string ".strip() 
`"a string"` 
That requires extra memory allocation though. equalsOr may also if it's varargs.
While this will make getters much concise, it won't help much with setters, because they're a statement. private String name; public String getName() { return name; } public void setName(name) { this.name = name; } would become private String name; public String getName() -&gt; name; public void setName(name) -&gt; { this.name = name; } I'm curious to see how their introduction in C# changed the language.
[FTFY](http://cr.openjdk.java.net/~briangoetz/amber/datum.html): record Foo(String name);
It's not clear to me from the JEP that your setter would require curly braces. The lambda form doesn't need braces. This works, for example: static int x; void foo() { Runnable r = () -&gt; x = 1; r.run(); }
This is documented behavior, though somewhat buried, and perhaps somewhat surprising to anyone who isn't used to any of ed, ex, sed, vi, vim, perl or python (etc.), which all use a similar replacement string syntax. The issue is that the replacement string can include backreferences, and so `$` and `\` are not treated literally: &gt; Note that backslashes (\\) and dollar signs ($) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string. Dollar signs may be treated as references to captured subsequences as described above, and backslashes are used to escape literal characters in the replacement string. To fix that code, use: "/some/filepath".replaceAll("/", Matcher.quoteReplacement(java.io.File.separator))
If and when we get data classes. 
I guess you're right, because assignment is an expression, not a statement as I originally said. public void setName(String name) -&gt; this.name = name;
FTFY, current day Java: public class Foo { public String name; public Foo(String name) { this.name = name; } }
I don't mean to sound like an ass, but it's a bit funny that controlsfx is listed when it still uses internal JavaFX APIs and requires devs and end users to add command-line flags to compile and run applications that use it.
Chrome says it expired in February (!)
I do like C#'s properties. 
 abstract class DelegatingList&lt;T&gt; implements List&lt;T&gt; {} Now what? class DelegatingList&lt;U, T extends DelegatingList&lt;U, T&gt; &amp; List&lt;U&gt;&gt; implements List&lt;U&gt; { private delegate T aList; } Now what?
Now let's hope we get some OpenGL support with it.
I'm not sure what you mean here? There are quotes from KBC, Zeiss, and a.i. solutions, none of which are involved in OpenJFX development, other than being users of the technology, obviously.
There are a few ControlsFX branches. The 9.0.0 branch in particular enables almost the entire library to work under 11, and what doesn't work is going to be removed until OpenJFX had more API to fill in some gaps. In my opinion that qualifies it to be considered to be supported under 11, and I know some users choose to do that already.
Why both `=` and `-&gt;`?
We'll still have to rely on external web services for left pad though :(
Because they do different things. `=` is saying that the method is the same as the method handle, and will return what ever the original method returns. `-&gt;` would return a method handle (and ignore the parameter). public boolean isEmpty(String s) = String::isEmpty; public Predicate&lt;String&gt; isEmpty(String s) -&gt; String::isEmpty; Does that make sense?
Oh, I never thought about it like that. Thanks!
:D
&gt; public static Foo make(int a, int b, int c) = Foo::new; This is particularly nice
Make it static. 
Just like in Kotlin? https://kotlinlang.org/docs/reference/delegation.html#implementation-by-delegation
These are really nice. My only complaint is that common utils' `isBlank(string)` allows you to check for null in addition to zero-length or all-whitespace strings, which is *really* helpful.
The DI framework is the thing that handles "finding the appropriate configuration." Otherwise everything you said is actually an aspect of SRS, that your components should be simple and modular and thus easily injectable.
But null is not a blank string?
It looks like the initialization of methodHanfle and getterMethod are both done in the constructor. If the initialization is happening only once in both cases, any reason why a static getterMethod may not be more performant than an instance field getterMethod? Since static vs instance seems to be making a difference in the case of methodHandle, I would assume that it would make the getterMethod faster if it was static. Lemme see if I can replicate the benchmark with static getterMethod later this week.
99% of use cases checks for null in addition to emtpy and blank string, so it's convenient to have it in a single function.
Haven't read the article yet, this can be useful for a "quick and dirty" but extendable factory method, making the constructor protected/private, isn't?
This sort of delegation has all the problems normal extension has, except for being able to swap out impl. Don't do it, even though lombok allows you to. I wrote on the problems with extending like that a while ago: https://javachannel.org/posts/how-not-to-extend-standard-collection-classes/ - the proper solution is to just exhaustively implement abstractlist.
the second example should do like scala instead ``` //Predicate[String] == String =&gt; Boolean in scala def isEmpty: String =&gt; Boolean = String.isEmpty _ ``` i'm not sure why the parameter ```s``` is even there if it's being ignored
[I couldn't resist](http://mail.openjdk.java.net/pipermail/amber-spec-comments/2018-September/000008.html)
Important to note also that specific syntax is probably not set in stone at this moment.
There's a subtle difference between "there are quotes" and "there are only quotes". Fine, I exaggerated, only 5/9 "testimonials" are by OpenJFX or vendor people. I have really never seen a website put up "testimonials" by the vendor. What does it even mean? :-)
And I merely wanted to [nerd snipe](https://xkcd.com/356) you, hoping you'd spend a few hours finding the solution ;-)
https://www.jetbrains.com/student IDEA Ultimate is free for students if anyone were actually interested in checking that out. 
I'm not sure I'm getting the difference then. In my code, i'm doing the equivalent of returning the method handle as you said, not using the isEmpty method as the implementation like 1.
Of my two examples, the second is almost certainly a mistake, and you'd normally never write that. In particular because it ignores the parameter, making the method confusing for any users.
would you post what you would write to clear things up for me? thanks in advance
There isn’t much really
adoptopenjdk are just builds of openjdk and openj9 r/https://github.com/AdoptOpenJDK 
I doubt allocating a small array of pointers is going to significantly impact your program. Heck, there's a good chance the JIT would optimize away the allocation.
Very informative! This really clears my concepts. By the way, is Red Hat's default jdk (the one that they say they will support for at least 6 years) "OpenJDK, the distribution"? My reference: https://access.redhat.com/articles/1299013#OpenJDK_Life_Cycle
You joke, but we can now implement this much more concisely in Java 11: public static String leftpad(String string, int padding) { return " ".repeat(padding) + string; } 
The only extra allocation is for the List object. The returned list is backed by the array that's passed in. So that's 16bytes on a 64bit JVM.
You'd need a static method for that to work. String.isBlank(string) vs string.isBlank()
You can't call a method on a null value anyway, so it's kinda moot.
* public static String leftpad(String string, int padding) { return " ".repeat(Math.max(padding - string.length(), 0)) + string; } Not that nice. (Also repeated implementations are not nice)
Well i dont want to, its about as annoying as window updates
My story works best for JDK9+. I'm not entirely clear on how JDK8 works, but I definitely know There's a concept called 'OracleJDK' which is a free product for version JDK8 (it won't be free starting with 12, and it's being phased out as a non-commercial concept for 9-11), and oracle did promise a certain amount of support for this, possibly that's all this red hat page is linking to. I'm pretty sure red hat would default to oracle's OpenJDK8 distribution (which, unlike Oracle OpenJDK distros starting with 9, is supported for quite a while).
But updating is annoying aswell. If java does all this to my ram what on earth will it do to my bandwidth
My blog may help too: https://blog.joda.org/2018/09/time-to-look-beyond-oracles-jdk.html
That could be added though? jasync-sql gives us what we haven't had before: non-blocking SQL down to the driver?
First, when it comes to terminology, I think it's simplest to use OpenJDK to refer only to the OpenJDK project (what you call the source repository). Donald Smith, a Java product manager at Oracle [writes](https://blogs.oracle.com/java-platform-group/oracle-jdk-releases-for-java-11-and-later): &gt; Ideally, we would simply refer to all Oracle JDK builds as the “Oracle JDK,” either under the GPL or the commercial license depending on your situation. However, for historical reasons while the small remaining differences exist, we will refer to them separately as Oracle’s OpenJDK builds, and the Oracle JDK. So it's best to call the OpenJDK builds by Oracle, the "Oracle OpenJDK *builds*". &gt; but unlike oracle's distribution they WILL support versions for longer, particularly the LTS-marked versions This is inaccurate; see [here](http://mail.openjdk.java.net/pipermail/jdk-dev/2018-August/001830.html): &gt; AdoptOpenJDK *as an entity* will not be backporting patches, i.e. There won't be an AdoptOpenJDK 'fork/version' that is materially different from upstream (except for some build script patches for things like Win32 support). I.e. *if* members of the community (Oracle or others) backport security fixes to OpenJDK, *then* AdoptOpenJDK will provide builds for those.
GraalVM is really interesting. I can't wait to start using it but I'm still yet to see any non-trivial examples. &amp;#x200B; It seems that there's tons of potential in the microservice space, but my understanding is that Graal doesn't support reflection and other classpath introspection commonly used by existing Java service frameworks. Is the intention that Graal eventually will support existing frameworks like Spring, or should we expect that building native images will only be possible in apps not dependent upon introspection-based DI?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Part 2 is coming up (soon, next week) where I'll talk about the limitations I've encountered. One of the things that worked perfectly was Sparkjava, a non-reflection low overhead web framework. Spring-boot has some trivial examples working, they are working hard to get more and more support.
Hi all - project lead for AdoptOpenJDK here. Ron is correct. Our ‘support’ means providing well tested and TCK’d binaries. Lots of our volunteers are involved in actually maintaining OpenJDK source for their respective orgs (or as individuals). But as an entity we will not be maintaining a separate source stream. We don’t want to see fragmentation!
Thanks for that page, it is very informative. I don’t understand one thing though. Who is going to write security patches for openjdk 8? I get that Oracle is going to stop providing builds, but are they still going to backport security code patches to 8?
[This looks promising](https://spring.io/blog/2016/09/22/new-in-spring-5-functional-web-framework), but usure how it has materialized (article from 2016).
I'll treat GraalVM as an optimalization option for now - the sad thing is that stuff like dynamic code generation probably will not work so as a performance goes it might be one step back and two forward. 
Spring and Graal teams are [working together](https://jira.spring.io/browse/SPR-16991). Especially, last comment keeps me optimistic: "I think we can consider initial support finished from a Spring Framework 5.1 perpective for now since most remaining issues are on GraalVM side. We will continue to collaborate with GraalVM team to provide repro projects and create issues. The first step to reach will be to get Spring functional application supported. The second milestone step will be to get JavaConfig supported. The third step will be to get GraalVM supported on Spring Boot side. We will fix remaining issues as part of Spring Framework 5.1.x or 5.2 releases." by Sébastien Deleuze.
For a little help try the [Bytecode Outline plugin](http://andrei.gmxhome.de/bytecode/) \- it generates the code for code.
[removed]
See e.g. http://cr.openjdk.java.net/~briangoetz/amber/datum.html interface Node { } abstract record BinaryOpNode(Node left, Node right) implements Node; record PlusNode(Node left, Node right) extends BinaryOperatorNode(left, right); record MulNode(Node left, Node right) extends BinaryOperatorNode(left, right); record IntNode(int constant) implements Node; And also: http://hg.openjdk.java.net/amber/amber/rev/727ca44aff68, https://twitter.com/jeffreymaxwell/status/984079813941125120 I've never seen a formal specification, though. Seems like a simple "under the hood" change to the JLS
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
If you are using vendor-supported Linux distribution, it stands to reason you are better using distro packages built by that vendor. RHEL is a case of such vendor-supported Linux distribution. When talking OpenJDK-as-a-binary, Red Hat implies java-*-openjdk packages in RHEL and other RHEL-related distributions.
If I understand correctly the main difference here is that we still get all the results when they are ready and not line by line in a flux. instead, result set keeps all results in a list. It is probably possible to change that and might consume less memory.
I dont like the concept, because I get negative vibrations from other projects defining unit testing in XML. As complexity grows, it gets terribly hard. &amp;#x200B; This might be a valid 'API' approach however, might I ask if your approach could be integrated somehow with an existing OpenAPI (Swagger) service definition file? Kind of hard to see how complex sequences should be handled though. Possibly you could write the JSON test defintion and then use a plugin to generate a concrete unit test so that all this Junit code crap can solve itself automatically - I would not enjoy the manual creation of those unit tests with the runner and insertion of file name and stuff. Junit 5 and Gradle. &amp;#x200B; There is no such thing as zero code; just zero Java code ;-)
Does it also support JSON-logging very well? I've written a [tool](https://github.com/skjolber/json-log-domain) which attempts this, but in general there is no free lunch (always some kind of definition is necessary) - probably best to combine this with Open API definitons.
Would you mind pointing out where I might be able to find resources for what you suggest? Last time I checked, there were proof-of-concepts for rendering OpenGL buffers onto JavaFX nodes but they were spotty with performance *because* the functionality was not officially supported.
How does Graal with the native-image model work when your application is dependent on binary libraries? For example, if I have a 3D app using lwjgl3 the native libs are packaged in a jar and expanded at runtime then loaded. If I want to turn that application into a native image will it link the native libs or do i need to package them up in the same directory for delivery?
Yes - or use OpenJDK from an alternative provider 
Sorry replies to quick before. So the answer is yes or you can also use OpenJDK from another provider like Azul, AdoptOpenJDK, IBM Red Hat etc
Those don't really change anything, Adopt and Redhat are basically self support, Oracle, IBM and Azul charge for support for back versions. Upgrading every 6 months is only doable if the upgrade is 100% backward compatible and your development cycle can absorb it. Just appears like there's not much incentive for new Java development going forward if you stop getting fixes and security patches for your platform after 6 months.
&gt;Strip though is just replace without parameters Not really. It's a unicode-aware evolution of **trim()** SO [Difference between String trim() and strip() methods in Java 11](https://stackoverflow.com/questions/51266582/difference-between-string-trim-and-strip-methods-in-java-11)
That makes more sense. Thanks
It would be better if Pivotal would follow semantic versioning. Spring Boot 2.0.5 broke my build today for some strange reason. 
The absolute #1 performance tip fro Hibernate is to not use it. However, if you find yourself having to use it for some reason then all the Hibernate blog posts on Vlad's blog is an absolute must read: https://vladmihalcea.com/tutorials/hibernate/ Also, stop doing read-only queries with entities!
That may be true but it doesn't remove the need to perform a full regression test on every upgrade to confirm that.
I look forward to the day I can flip a parameter in my pom.xml and get an ELF binary instead of a jar.
What would you suggest for interacting with the DB, if not hibernate? 
That's kinda up in the air. AdoptOpenJDK have explicitly said they're not going to do backports. Oracle almost certainly isn't going to (they said "at least six months", so assume "exactly six months" and then you won't be disappointed). The expectation is that someone like Redhat or IBM or volunteers will do it. AdoptOpenJDK will provide builds of OpenJDK for multiple years. But that only matters if there's changes to build.
I would recommend checking out [Speedment](http://www.speedment.com).
Was wondering the same thing about JavaFX. JavaFX WebView and Java have almost everything they need to be a solid challenger to Electron; a GraalVM native "linker" would clinch it for my use case.
But that was true before, too, when you had to upgrade an "update release" every 6 months. I'm not 100% sure, but I think there were no security patches to 8u20 after 8u40 came out.
That's what I was afraid of
Can you not drop down to imperative and manually wire up an observable? 
&gt; Upgrades from 8u20 to 8u40 are considered patches. Changes from Java 8 to Java 9 to Java 10 to Java 11 are considered upgrades. That's a matter of terminology. What matters is that the cost of what you call an upgrade is now significantly lower than it used to be. &gt; Patches are expected to be backward compatible so testing was lighter. But they weren't always 100% compatible. &gt; If the patch itself was not a security fix then we may not have even upgraded. Yes, but again, I don't think security patches were backported to old updates, so you'd have to update eventually to get the security patch, even if that's all you wanted. &gt; upgrades have to be fully tested for backward compatibility. You also had to test update releases for backward compatibility. Some of them had pretty major changes (just not to surface APIs).
Preventing mis-use by idiots isn't generally a good guiding criteria for language design.
You and I may understand the difference in terminology, but folks outside of IT (security, compliance, legal etc) view major version changes as more significant than what appears to be build number updates. I don't recall every hitting any situation where a build update had compatibility issues, perhaps I've been lucky there. It isn't that security patches needed to be back ported, the issue is if the change is a security change then generally we're required to install the update. If the changes weren't security related and not issues our code experienced, we weren't mandated to do so. Same situation as soon as a release is out of support, security mandates upgrades.
Yeah the version numbering change caused a minor issue with 10 as a tool I use didn't recognize it. And you're correct on security patches and need to educate folks on when a release isn't a major release and thus not considered out if date.
Jdbi 
&gt; need to educate folks on when a release isn't a major release and thus not considered out if date. So in the interest of education, I'll repeat: *there are no more major Java releases*. The decision of whether or not to remain on an LTS version should be made by assessing the impact of releases under the *new* model, not that of the old one.
I hear what your saying but decades of software version numbering schemes are pretty ingrained.
Understood your frustration. I agree with you 100% on this about `Unit Tests`. I wouldn't go for unit testing in that way too. As you highlighted, this lib is not for unit tests, it's for API testing mostly for `Functional Testing`, `Feature Testing`, `Integration Testing`, `End to End testing` and `Performance Testing` along with capability to mock interfacing application APIs using WireMock. JUnit as `Unit testing only` is loosely used across industry, but JUnit is a framework, not only for `Unit Testing` only, but also for many capabilities like above n much more. This framework saves time and energy over other frameworks is, it's JSON based, that means there is no need of using any ~~plugins, feature files, English statements/grammars~~ to represent a test &gt; I would not enjoy the manual creation of those unit tests with the runner and insertion of file name and stuff. But a complex scenario which could be thought via creativity needs to be manually created first, then put into the automation pack. Such automation scenarios can not be built manually. &gt; might I ask if your approach could be integrated somehow with an existing OpenAPI (Swagger) service definition file? Yes, why not, you can help us raising an issue defining the requirements, followed by a PR to embed this feature into the lib, if it helps the community please 👍 . Sounds like a good idea! Yes, thanks for your feedback and please bring on more to improve it !
No it isn't but I also feel, coming from C#, that this feature is not one that yields more readable or maintainable code. You start to open the flood gates then you get all kinds of crap...take a look at what they've done and have proposed with C# all under the guise of being 'more readable'. 
SQL prepared statements. Springs template helpers.
If you care about performance, then do not use hibernate or spring data. I wold suggest do not use any JPA implementation. There are many alternatives: spring jdbc, mybatis, jooq, apache cayenne.
I find it amazing that the same people who say global variables are bad, reflection is best-avoided, etc., will then happily say "Use this global mutable Map&lt;Key, Provider&lt;?&gt;&gt; which we'll reflectively use whenever you want anything". Before I used DI, I would add my dependencies as constructor parameters, and yes it was annoying when X instantiated Y which instantiated Z, and Z grew a new dependency that X and Y didn't really care about, but that made me think more about dependencies and the resulting code was easier to follow. Anyway, back to debugging a Guice startup failure..
Jdbi or Spring Jdbc. They're basically jdbc, if you updated it with modern simple designs.
There are several lightweight JDBC helper libraries out there: https://stackoverflow.com/questions/7137929/lightweight-jdbc-helper-library-alternative-to-apache-commons-dbutils
Ebean. Super easy and fast http://ebean-orm.github.io
Thank you. So glad this is top comment
This is why I don't really use Kotlin. So many "improvements" for simpler/more concise code actually make it quite unreadable.
Oh man! Hibernate. I’m so glad that JPA is a thing! 
More like a Ferrari to a Fierro.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
A little off-topic, but I've never yet jumped on the Docker bandwagon, so I don't really understand why you would wrap an already bloated executable (5.6 Mb for a Hello World!?) into a container. Why not just use the executable? Surely the whole point of a native executable is that it runs by itself? 
Many thanks to all the great guys here. I would like to sort out the possible JDKs on the market. Is it true to say that (correct me if I mess up something) - Oracle's JDK =/= Oracle's OpenJDK Oracle's JDK binary is here: http://www.oracle.com/technetwork/java/javase/downloads/index.html Oracle's OpenJDK binary is here: http://jdk.java.net - The OpenJDK repository can be found here, http://openjdk.java.net/. Many binaries are built based on these, but repository =/= binaries built based on repository - Binaries built based on the OpenJDK repository include: (1) Oracle's OpenJDK Built by Oracle, available at http://jdk.java.net/ Free to use. Rely on community support. (2) OpenJDK for Red Hat Built by Red Hat. For example, for Java 1.8, it can be installed on RHEL by using like "yum install java-1.8.0-openjdk". Red Hat has a policy to support major versions of it for 6+ years, said here: https://access.redhat.com/articles/1299013# Free to use. Supported as long as my RHEL is supported. (3) AdoptOpenJDK Binary built by the AdoptOpenJDK project. Free to use. Rely on community support. (4) Azul Zulu Binaries built by Azul. Free to use. There is also a paid version, Azul Zulu Enterprise, with Azul's commercial support. If I miss out something, please let me know, thanks bro.
Anyone else here using MyBatis ? tried hibernate when it first came out and never liked it, tried mybatis and totally stuck with me 
The main reason is to isolate an application and it's dependencies into a single package that can be deployed anywhere. For Java there's not that much of a difference between packaging the fat jar in a container and deploying it in a k8s cluster versus deploying it in an application server, but many (if not most) applications have more stuff 'going on' that they need to have installed to function. Aside from that, container orchestrators (and k8s definitely won that war for now) handle a ton of stuff for you like scaling up and down, service discovery, security, encryption, tracing, etc. In the industry you generally don't see just docker by itself. Docker is basically just the packaging format. This way of working really begins to shine if you have all the CI/CD and orchestration set up as well. Basically automate all the things :)
Almost anything you want to do can be done with microservices. Whether it's a good idea is something different though. But in the end you're the one's who have to create it and enjoy working on it. So try to figure out a subject together first and foremost, then figure out how to create an application for that, and then figure out how to split that up into different services. For example; if your application will let users log in you could have a 'users' service that stores everything related to a user. 
It's worth noting that these are all general performance tuning tips, not even necessarily strictly RDBMS or even ORM related: * **Fetching only the data you really need**: That's such a low hanging fruit, regardless of what clients / servers are communicating * **Streaming pitfalls**: This is also applicable to many system interactions where data is transferred from A to B. As soon as data gets bigger, streaming is the way to go, and buffering is not. * **Optimizing the number of database roundtrips**: Replace "database" by "server", and you get again some very general advice. Vlad mentioned the fetch size, which helps. But the elephant in the room is N+1. Don't send 1000 queries to the server if you can send only 1 doing the same thing. [I've also blogged about this in the past](https://blog.jooq.org/2017/12/18/the-cost-of-jdbc-server-roundtrips/) * **Statement batching**: This is the same as the previous *"Optimizing the number of database roundtrips"*, but using a different technique * **Connection management**: This is the same as the previous *"Optimizing the number of database roundtrips"*, but using a different technique * **Database-level processing**: Again, as mentioned before, don't implement parts of your data processing logic in the client, when you could have moved that logic to the server. Ideally using SQL queries. If you must, using stored procedures. * **Caching**: Obviously, again general advice
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I dont really understand why hibernate is still being developed since the release of JPA 2.1. It seems far less error prone and simpler to understand.
Check JHipster project for generating a nice template where to start developing with the best practices already implemented.
That's true. Performance tuning is similar no matter the framework you use. In the end, it's just a matter of doing more with less work. However, there are some guidelines specific to JPA and Hibernate, like using the right identifier strategies and choose only associations that render efficient SQL statements. 
Hi [u/triplecmd](https://www.reddit.com/user/triplecmd/), Could you please help detail your steps when apply javametrics by IBM. I try apply following [https://github.com/RuntimeTools/javametrics](https://github.com/RuntimeTools/javametrics) (spring boot) but nothing happen.
Sure, there's a mix. I've updated my comment so all your sections are now "categorised".
Just try to persist `JSON` attributes with JPA `AttributeConverter` alone and see if you can do it. Just like many others, you'll notice that you need something more flexible than that, which gives you the ability to control what happens at the JDBC layer, something like the [hibernate-types(https://github.com/vladmihalcea/hibernate-types) project which has no equivalent in JPA alone. Or, try to use a 2nd-level cache provider with JPA alone and see if it works since there is no way to provide a cache concurrency strategy. How about JDBC batching support, SKIP_LOCKED, NO_WAIT, `@NaturalId`, versionless optimistic locking, identifier optimizers, customizable CRUD so you can do soft deletes, audit logging (Envers), spatial queries, full-text search integration (Hibernate Search), to name a few.
Hey! Probably you are missing the -jvm flag. Check this website instead: https://developer.ibm.com/javasdk/application-metrics-java/ It's just four steps! I don't know where is the project where I tested it, let me know if you still blocked I can try to implement it again.
Are you sure you are talking about microservices and not about load balancer in front of several instances of the same application? Microservices don't need to "share sessions" as they communicate by either calling each other or though event bus. It is entirely possible to build a microservice architecture without stateless API instance facing users (it would be dump as hell but still) as having one instance that communicates with microservices to do its job (Actually, one API instance and one instance per micorservice is quite often meet in young products that don't need to scale yet, but want to have that possibility).
An order management system * Microservice for managing stocks * Microservice for user managment and billing * Microservice to manage order It's easy with this domain to extend or reduce the complexity. A plus is to create an high throughput order processor. &amp;#x200B; &amp;#x200B;
JPA by itself is "just" a specification, it's not useful without any actual implementations. Hibernate ORM is one (out of multiple) such implementation of this spec. Besides that, it offers additional features on top of what's specified in the spec (see Vlad's answer to this comment), some of which may find their way into future spec versions, too.
Mostly great advice, only regarding "Database-level processing" I disagree. Whenever possible, I'd prefer implementing business logic / data processing logic in a language like Java over using something like PL/SQL. The available tooling and processes (IDEs, refactorings, testing, CI etc.) are just so much better. I remember working with compiled PL/SQL packages in the DB as really painful in comparison. Of course there are exceptions, where moving the logic into the DB right next to the data just is advantageous due to performance considerations. But I'd treat these cases as that, exceptions, and not the default implementation technique.
Just to be sure: I always recommend writing as much data processing logic with SQL. *If you must*, with stored procedures.
I have a [déjà vu feeling now](https://vimeo.com/267560432).
Oh ja, stimme zu.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Quite sure about what I said, I don't know why you would want to use your approach for a typical webapp, I've just described three strategies to have non stateless webservices with a distributed backend. Your approach is just a way to share information in-between instances and it actually ties into the first approach, but I was actually thinking more in the lines of a redis session store. The assumption is assuming a load balancer, or at least a basic httpd with round Robin, because if you don't... Why would you use a microservice? Then just build a webapp that does all you want, you can have domain separation in the services themselves (rpc or something similar) , but without one of the strategies I described the front-end service would either be non scalable or have to be completely stateless. I believe we misunderstood each other.
As you say, it highly depends on the use case. If your logic touches just 10 out of those billion records and you can select those precisely using SQL, I'd implement that logic in Java. If you need to touch all billion records, sure use SQL for that. I surely wouldn't "write as much data processing logic with SQL" as possible. Of course, YMMV.
And how do you get those 10 rows? And what will you do with them afterwards? :-)
I'd get them via SQL, as said ("select those precisely using SQL"). Your point being?
Looks cool! To ensure that I understand: Is this basically a publish/subscribe application for large scale systems?
Zulu from Azul will give support until 2020 https://www.azul.com/products/zulu-and-zulu-enterprise/zulu-enterprise-java-support-options/
Well, considering that Spring Boot is itself a bundle of a whole list of other dependencies which may seem to follow semver but still break something for your build specifically, we can't just blame Spring.
Debezium allows you to parse the DB transaction log and publish change events to Kafka. 
Shorter != better. This feels like it's solving a non-problem. Not once have I ever felt that I was unable to complete a project on time because I had to type some curly braces for trivial methods. On top of that, I don't even type them - my IDE does, so I actually type the same number of characters the "long way" today as I would in the "short way" described here, so it doesn't affect my coding velocity at all. What it does do is make code significantly harder to read/understand because now you're overloading the arrow/method-reference notation. Currently it's limited to method invocation but now you're suggesting that it could be used while defining methods, too. It requires extra (unnecessary) brain cycles to figure out where the method definition ends and what it's actually doing - especially in the examples w/ multiple arguments. It's unnecessary complexity that adds to the amount of mental cycles required to consume existing Java code - which is 90% of our jobs. This will make reading Java code harder while having 0 effect on our ability to write code efficiently. This seems like one of those things someone suggested because they saw something similar in another language and thought it was cool, but will only make Java worse. Keep Java simple. Keep Java readable. Let your IDE write the boilerplate for you.
I only refer to this: &gt;But to support microservices you need some way to either share the session between nodes, configure a front layer that actually always routes you to the same application instance or use something like JWT (this is the way I'd go). Nothing in microservice architecture definition requires sessions, routing nor JWT. IMO what you described is stateful vs stateless server in context of scaling by adding instances (route always to the same instance vs keep state outside, so that instances are interchangeable).
Yeah, but you have literally written a Hibernate book. I would expect that. Junior, mid-level, and even some senior devs have no idea how to properly use Hibernate and I have yet to be involved with an application that uses Hibernate whose data layer performs well. I am not saying Hibernate can't perform well (it can) I am saying it is too difficult to teach developers how and to convince them to use Hibernate in a performant manner that it isn't worth the effort. To this day I still get blank stares and skepticism when I tell people not to use entities for read-only queries and to use DTO projections instead.
My point is, why not move that logic *also* into SQL? SQL can do more than `WHERE`, you know?
So, you don't use lambdas but keep writing anonymous classes? Stream.of(1, 2, 3) .filter(new Predicate&lt;Integer&gt;() { @Override public boolean test(Integer i) { return i % 2 == 0; } }) .map(new Function&lt;Integer, String&gt;() { @Override public String apply(Integer i) { return i.toString(); } }) .collect(toList());
If you have a webapp, unless it's static, you need that. If you are in a microservice architecture you need what I just said. Thats not a consequence of microservices, but of webapp microservices. Can you have a stateless webapp? Probably. But should you? Probably not.
If we understand by stateless the same thing (no state stored in the instance - everything is taken from the requests and/or external databases) then for years I haven't worked on a webapp which is stateful.
The [tutorials](https://docs.oracle.com/javase/8/javafx/get-started-tutorial/jfx-architecture.htm#A1106308) mention it and you can also look at the [source code](http://hg.openjdk.java.net/openjfx/jfx-dev/rt/file/c263b8ea1909/modules/javafx.graphics/src/main/native-prism-es2).
&gt; At least last time I checked, things like refactorings, finding usages and similar features we get in IDEs were not nearly on that level for (PL)SQL tool I'm glad you asked. Use jOOQ! 😉 you can use Java *and* write SQL *and* refactor your SQL *and* find usages &gt; Coming back to use cases, say I'm implementing a credit worthiness check of customers. This may involve invoking multiple external services, processing the results obtained, maybe also invoke calling a business rules engine etc. No way I'm implementing this in SQL :) Just normalise it all into your database and run a sophisticated query. It doesn't always work in real systems because they're the mess you've just described, but there's no reason why it shouldn't work *a priori*. &gt; Whereas if you have logic in external applications, you can scale more easily (and cheaper) horizontally by adding more application servers. Sure. But I haven't run into a situation yet where the DB (Oracle) would have failed me and the queries I've seen / written produced hundreds of lines of execution plans on billion row tables with thousands of concurrent sessions depending on load 8 cores are usually enough on that system (most work is I/O anyway). I've discussed this in my joint talk with Vlad: https://vimeo.com/267560432 I think this scalability cargo cult is used way too often without concrete evidence. Whereas concrete evidence for vertical scalability of SQL is abundant: https://stackexchange.com/performance
Could be
Possibly, but it seems more likely that they're stocking up on some in-house expertise for long-term support of OpenJDK (for themselves). I doubt they want to pay Oracle.
I do, but that is not even close to an equivalent comparison. Anonymous inner classes make it really hard to find the code that actually provides the meaning as to "what is this code trying to do". You have to sift through multiple lines of annotations and additional method definitions just to get to the "what does this do" whereas lambdas are much more direct. This is not the case with the "problem" that this draft attempts to solve: public String getName() { return name; } public String getName() -&gt; name; There's no scouring the code for the actual logic of the first function. Your not sifting through extra crap the compiler needs to stay type safe and avoid warnings like you do with inner classes. It's just replacing curly braces with arrow notation or double colons. You basically got to get rid of the word 'return'. That's not that big of a win to me given that it will increase the mental gymnastics required to read Java code. It's not better - it's just different - and we don't get anything interesting as a result of having yet another way to define functions. If the community wants to take a swag at first-class properties like C# and the syntax is something like this, I'm all ears. But this just seems like trying to convince people that the barrier between them and great code is a couple of curly braces.
They're listed as a company that may provide support of 8 after Oracle isn't any longer https://docs.google.com/document/d/1nFGazvrCvHMZJgFstlbzoHjpAVwv5DEdnaBr_5pKuHo/mobilebasic#heading=h.p3qt2oh5eczi
Web apps are also getting better at pretending to be desktop ones, and it's supposedly easy to port a web app to the desktop (via electron)
Well, simply take whatever you was provided in request and run some auth service in your server for each query :) From what I see database becomes a bottleneck so late that for majority of people giving up on it it's just a premature optimization. (And quite often they just have N+1s and other inefficiencies). With a normal site you can cache some calculations to redis - that will lessen the load on database for e.g. checking auth with each request. With microservices you can create a dedicates service for auth that just checks entitlements - since it has its own database there are no issues that workload for auth conflicts with workloads for e.g. streaming large results or sth in other context. Then you can optimize by indexing tables, then adding redis cache and stuff. JWT is also an option for optimization - some projects reaches the workload where this or other optimization is necessary, but not as much as people think. In projects my friends and I worked vertical scaling of DB server was sufficient to handle both stateless monolithic apps and microservice-based projects. I mean, take a look at StackOverflow. For a long time [it used one DB and one Redis server](https://blog.serverfault.com/category/infrastructure/page/2/) to handle all visitors! (They mention 2 DB servers but one of them is for the rest of the StackExchange). Even if auth was responsible for 50% of their DB usage - at a time whole stack exchange had &gt; between 12 and 14 Million page views per day I believe very few of us has to worry about reaching such numbers and more. IMHO JWT, microservices and many other things are one of this cases of cargo cult or survivorship bias - Google/Amazon/Microsoft/Netflix etc do this and they succeed, so if we will do the same we will also succeed. Except they started with much simpler solution to prototype and prove the idea to investors and only later on they rebuild to handle such workloads - because with all the money form the customers they could afford it :P (Just developing monolithic stateless server with one DB can get you very far and is quite cheap as opposed to: solving some eventual consistency issues, when you have multiple databases, authorization is complicated because you have to somehow validate if JWT was invalidated/outdated, making sure that microservices integrate well and there are no API/event version mismatches).
If twitter has a VM team and internal JDK releases, why would amazon not have that?
Some time back Larry Ellison made a statement that was something like: “despite Amazon offering Redshift to its customers they still rely on Oracle for their own databases. “ Could be in response to that. 
When it make the code easier to understand, yes.
Well, you clearly know about stuff, but we'll have to agree to disagree in JWT being premature optimization. Setting up JWT takes very little time and if you program your app with jwt in mind from the start, it will take very little extra time. Obviously there are multiple approaches, but now I'll tell you a story. An application I used to maintain (legacy one) ran like a charm. In was used to connect several thousand machines and provide a service (details kept sparse since I actually had an NDA). But one day, the internet somewhere went down. Literally down, the data center spent over 24+ hours not accepting connections. This is cool, each machine was prepared to store information, keep working in offline mode and then report back once they got a connection. They even had several systems where they'd daisy chain off each other so that only one of them (a master of the cluster) would come back to us. Still, the system failed. You see, each request for synchronizing a batch of information required a login. When this was thought out, the load was around 10s of requests per minute. This was completely manageable. But then we went to the 1000s and they had all their minutes to synchronize. So the system failed. Would JWT have saved it? Maybe, maybe not, but it would halve the requests to the database. When going for the hundreds of thousands in total, it matters. Probably something similar to JWT that was optimized for the use case would help even more, but it didn't matter how distributed it was, since the database went down and took several hours (again) to recover and a filter to manage the flow of information was manually put in place. And you know what's funny? This costed more to the company in fines for SLAs (at least it was rumored) and whatnot than actually having built the application to prepare it for the 0.01% chance of data center outage in this scale. So in this case, things you can easily do in one or two days that can avoid having to do them in the future should always be worth it. Back to his question. I gave him a best practices web application microservice manual. It's a school project. Him doing this with several quick wins that divert to the common web app would be better, in my opinion. If easy is all he was going for, than a JSP website following a tutorial would be more than enough. 
Adding in and removing things that improve Java performance on its cloud and/or embedding ways of monitoring the workload of a given instance. These would be typical use cases.
Good read. Helpful. Thanks for sharing 
It looks like in your [submission](https://www.reddit.com/r/java/comments/9ht39l/java_objects_and_classes/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Several reasons. I already had a very basic knowledge of Swing having used it in a small way about a decade earlier. This was a fairly decent sized application with an MDI interface. One window, with its own menu bar at the top of the window (mac style) and then a desktop interface with sub-windows within that primary window. (It wasn't my choice, that's just what I had to build.) All of the machinery to do this with Swing was pretty mature. It worked well on Linux, Windows and Mac. So in practice it wasn't a bad choice. And even in 2015 it was obvious that Swing wouldn't go away anytime soon. Who I was building it for was conservative and given the choices preferred Swing. Also because I could probably develop it in less time. I look forward to working with JavaFX at some point. By now, there may be a good way to build MDI applications. If I were building my own app in JavaFX, I would probably look for a better designed interface than a "desktop" with windows in it that are minimizable to icons. I also had to draw some plots. No existing library that I know of would cut it. I'm talking tens or hundreds of millions of data points. The entire approach of drawing dots is wrong. It's like throwing paint balls at a tiled wall where the tiles are the pixels. I instead took the approach of throwing infinitely sharp darts at a tiled wall instead of paintballs. The square tiles on the wall represent pixels, but "accumulate" the average value of all the sharp dart points which land in that pixel bucket. Then I split the data points up into groups of "work units" and used the fork/join framework to accumulate each "work unit" of maybe a million points into a set of tiles. This keeps all the CPU cores busy and substantially improves performance. Then take all of those groups of "pixel buckets" and smash them together. (Each pixel has a sum and a count, add those together.) With the final pixel buckets, iterate over each pixel, divide sum by count to get average, select appropriate color and draw dot into an offscreen Swing bitmap. Then draw that in one single graphic drawing operation. I had first tried drawing dots from the data points. It quickly became apparent, and hence my paint balls analogy, that older plot dots were completely covered and obscured by later plotted dots. Thus the obscured dots did not have any effect on the visual result of the plot. And hence the approach I took. Also drawing dots is pretty expensive, even into an off screen bitmap. You're working the Swing graphics system. The approach I described above is all pure calculations in data structures. Only one final graphic operation at the end. &amp;#x200B;
If you are able to do what you need using double, then great! BigDecimal is exact in the sense that any repeating decimal value will genereate an exception and it is up to you to specify just what level of in-exactness that you want. Double limits you to its mantissa size. I don't have anything against double. I just don't use it in accounting applications. The VAST majority of operations done are addition an subtraction. Any cases we discussed (decimal quantities, interest rate calculations, etc) that involve inexact math are the VAST minority. They are practically non-existent in the overall application. But things like prorating extra leftover pennies from the remainder of an exact division are fairly common in header/detail processing, such as a check or purchase order, or customer order. 
A 2016 article mentions Amazon SDK in Elastic MapReduce: "Amazon EMR clusters are configured with both Amazon Open Java Development Kit (Amazon JDK), and Standard Edition Java Development Kit (Oracle JDK)." http://www.ateam-oracle.com/using-oracle-data-integrator-odi-with-amazon-elastic-mapreduce-emr/
it's just like OpenJDK except it silently activates every OS microphone
amazon likes java because it only has classes not unions
when the VM does garbage collection it has to do it into a bottle
&gt; It totally baffles my mind why people think it is ok to hit the DB in a loop. I make constant comments that go something like "instead of hitting the database in a loop 100 times why not get all the data you need in a single query?" It does not baffle me. Why? While developers have good tools for refactoring and other dev specific tasks, they have crap tools to see something like that. Especially when it comes to hibernate they will simply not see the true sequence of their db interaction. Give them an APM license that displays it in an obvious way and they will immediately start caring. The troubling thing: our APM ecosystem is rather bad. Funny thing: when it comes to html frontends, it is normal to look into your developer tools to see that network analysis. But when it comes to application logic, most developers have nothing comparable. If you would see a several hundred lines long db interaction chart where everything query is basically in sequence, you would simply ask yourself: omg why are we talking to our db in such an inefficient way? 
I wonder what 'initial refinements for [GraalVM](https://www.graalvm.org/) compatibility' boils down to; sure would be nice to be able to use GraalVM. And great that they're onto the JDK 11.
Yup, they are moving away from Oracle. [https://www.cnbc.com/2018/08/01/amazon-plans-to-move-off-oracle-software-by-early-2020.html](https://www.cnbc.com/2018/08/01/amazon-plans-to-move-off-oracle-software-by-early-2020.html)
Well, yeah we surely have different experiences. :) Usually, when I saw JWT then sooner or later there appeared the issue: how to invalidate it? Like in: user decided to change password and log out all tokens, because someone hijacked his session. If you blacklist outdated tokens, then you have to maintain the graveyard of dead tokens. Of course, you have to check them with each request so you traded checking if token is valid each time into checking if it is invalid each time (less costly initially, but much bigger in a long run). If you want to avoid it, you can somehow encode TTL in token, and once it expire, require renewal. But, then you cannot intermediately logout (only during next refresh), so you are back to square one: maintain list of blacklisted tokens. So it is a simple solution as long as you never have to consider case when immediate invalidation is a must. Yes, for a simple web-application sth like Spring Roo packed within Docker should work. If it's a class project he don't have to bother with performance. And scalability. And several other things. So I wouldn't be surprised if he could do away with a in-memory DB representation or SQLite for simplicity (so stateful server). Not a thing I would do on production in a released product, but for a tech demo? Why not.
One of the best article about why and how reactive programming matters
It's always a pleasure to work with this framework. Always well-designed and ahead of jee
[https://dev.mysql.com/doc/refman/8.0/en/mysqlimport.html](https://dev.mysql.com/doc/refman/8.0/en/mysqlimport.html) &amp;#x200B; `mysqlimport --ignore-lines=1 --fields-terminated-by=, --verbose --local -u [user] -p [database] /path/to/data.csv`
TTL is exactly the strategy we used. We log the user in once, token goes through HTTPS, so getting it would be hard without physical access (or trojan) to the computer. Every time the user does a request, it refreshes and is signed again. If you need immediate invalidation, I'd probably have a dedicated service where the invalidated tokens (or users) would be pushed to the application nodes and kept in memory (and not the other way around, so no database calls are needed). But those are many ifs that I actually never considered. Either way, I don't think we have wrong answers.
I've never been a big fan, especially in enterprise development. For pure DI I'm a fan of Guice 
Axum Zing FTW !
What would be an example of spring making it easier to shoot your foot off? What do you like about Guice? (just curious, I'm always interested to hear people's thoughts). 
Alibaba have heavily customised the JDK: https://jcp.org/aboutJava/communityprocess/ec-public/materials/2017-02-14/Java_at_Alibaba.pdf
I wouldn't call it "always a pleasure". It's still a pain to setup. There's often 10 different ways to do the same thing. While there's a lot of documentation it's often complex and confusing and hard to find what you need in it. I recently tried to setup a spring boot app with database access, transaction via annotation on the method. After 2 evening I lost interest and haven't come back to it. This is what everyone does with the app, it should be easy really.
Any particular struggle you had with this? I work with spring boot doing this all day and very rarely does it disappoint in ease of setup and use.
This is better suited for r/javahelp.
It’s such a pain in the ass to work with and 9/10 devs that work in it really don’t understand it well enough, especially scope. I don’t know how many times I’ve had to explain scope to people. Still, it’s better than SEAM/JSF. 
Is this a comment from the past? Am I back in 2009?
Spring is way more than just DI though
Agreed
it's like some form of Stockholm Syndrome. The sooner I can move our stack over to Node, the more hair we can collectively keep.
That sounds like you're moving from child molesters to murders. Not sure that's an improvement. 
Hmmm where have I heard your [name](https://www.youtube.com/watch?v=Smp96O7brmg) before... Thanks for doing that session btw. I know it's been a long time but I really enjoyed watching it.
I honestly feel terrible for anyone that has to use JSF. Java just shouldn’t be used to build a web UI. It’s a painful conclusion because the Java frameworks aren’t bad it’s just finding people that know them vs react/angular/vue is too hard. 
They literally spelled out exactly what they had trouble with.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
So happy. My request of obtaining client's IP address from WebSession got in (WebFlux).
https://github.com/spring-projects/spring-fu might be of interest to you.
Bugfixes that aren't officially backported, adding optimizations, making internal functions public for various reasons. Adding and removing compiler warnings to suit their own code style. Stuff like that. For example I read somewhere that Google patched their compiler do that the @SafeVarargs annotation isn't necessary anymore. 
It does famously have, like, three different wrong implementations of DI, though.
For general Spring: I'm really no fan of the whole AOP and ThreadLocal approaches. AOP is annoying to test and can lead to subtle bugs down the line - I've had way too many people wonder why their @Transactional did nothing on an unmanaged bean. ThreadLocal is just a terrible idea for the same reasons global state is - hard-to-see side effects and complicated control flow, especially for asynchronous applications.
They have Errorprone which works as a Javac extension. I wonder if the change you mentioned could be done in a similar manner without modifying the upstream code.
I presume that they are not developing their own JVM, but they are customizing the OpenJDK to fit their needs. Something that Twitter itself does. Have a look at https://www.youtube.com/watch?v=M9o1LVfGp2A for some of the things that Twitter has done to improve their own JVM runtime. Of course they contribute some of the fixes they find upstream, but they've said that some "fixes" are not really fixes in a general term, but more fixes for the Twitter runtime
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
As surprising it may sound, there is no visible tracking for this particular link. Yes, I couldn't believe it either, this is Google after all. The only information they get when you click this URL are HTTP headers (including a referrer) and your IP address. As in, there are no tracking scripts, pretty much a single script which puts a header leading to a mobile application when it detects a mobile platform. Keep in mind that I'm in GDPR country, there may be more tracking when not in GDPR area.
Setting up security with OAuth2 + Rest Data wasn't particularly straight forward. 90% of the examples didn't work on the latest version, something always broke.
Spring security is significantly more complicated than what they were talking about. I agree it takes a lot more knowledge and setup to get that right 
It’s not really daunting, I just want to know what the 50mb of jars are for,and multiple plugins. I got a project down to ten mb. 
Everything is documented with multiple guides for each on sites like baeldung. You can find out what it all does if you're really curious. I'm not sure why it matters for the size of your jar. I have colleagues that could build the equivalent in Python and have it be an absolutely tiny footprint but I wouldn't want to have to support it in production.
Dagger II is even better, since it's compile time.
&gt; Always well-designed and ahead of jee You wish ;)
&gt; JSF is a nightmare. JSF isn't a nightmare. 
Security in general tend to be more complex than any other subject in any framework (I'm mainly a .NET developer). Having said that if what he said is right (examples were not working) then that's Pivotal's fault, there's no way around it.
Not to mention, nothing kills a project (personal or otherwise) quicker than over-engineering. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I'm convinced that the top answer given here is correct. https://stackoverflow.com/questions/40107461/google-foobar-power-hungry The only thing to note is that that author means "closest to 0" when discussing the greatest negative number. You would also need to check that the variable got set during your loop.
Spring Reactive still doesn't support relational database?
Yes that's what I always tell myself when I work on Spring projects. But What about [ASP.NET](https://ASP.NET) and Node JS frameworks they setup everything for you (or at least help you a lot)
Well in your example you didn't pass d into changeDog, however I think if you add a setter to your name attribute then you'll be set. In changeDog you'd just use that.
https://reddit.com/r/Javahelp is the place.
You can't. Parameter object's references are passed by value. So you can't change the original reference but you can affect the object of the reference. One way to do what you're trying to do is: Change `Dog d`to a single element array then pass the array to the function and modify the array. Although I'm sure there's a better way to do whatever it is you are trying to achieve here.
You can't (without using native code), full stop. X refers to a thing. You pass X as an argument to a function. The function gets *a copy of* X's own value, meaning that the function can reach "the thing" but not X itself. Here, X is the outer "d". If you have some other way of referring to the variable, like if it's a member variable, then you could potentially reach it that way. If it's simple a local variable in a function, as you've shown, then nope. This is best explained using diagrams, and I only have text and a mobile keyboard. Not trying to do that typing with my thumbs. 
No I understand why java doesn't allow that and I also understand the concept the the copy of the refereyis passed and because of that reason you can modify the actual memory location using that copy but the change in the reference copy won't effect the actual reference. I guess my question was that this must be a trivial problem and what would be the best way to solve this, say in a production code. For example, you could use a third party library which needs to see if the memory value is NULL or not to operate.. then in that case you : 1. can't instantiate in your local scope 2. can't have member fields in picture because it's a third party jar so how would you solve this problem if it's a MUST requirement to check the memory for being NULL as a part of initializing the logic. 
Why not Dog d = DogFactory. newInstance(); ?
uhh, i think it's better to talk about it in terms of hours invested rather than weeks. A lot of it depends on where you're starting from and how dedicated you are to it. If you've never done anything with Java before then a couple weeks is unrealistic, but if you're already a junior dev somewhere then you could probably do it with a couple weekends of prep, and 30 hours over 2 months is pretty different from 30 hours over a week. 
If you don't want to write code or use a library use AtomicReference&lt;Dog&gt;
Please do specify (OCA or OCP) as well. 
GRPC. Data pipelines. Data processing.
What you're basically doing is trying to use a parameter as a return value. People have basically decided that Java isn't going to have that feature. Instead, as u/derrikcurran mentioned, you can have changeDog simply return the new Dog instance. If you want multiple return values, you'll need to create a new class that has a field for each return value, or split your method into multiple methods that each return a single value.
&gt; needs to see if the memory value is NULL or not to operate.. [...] so how would you solve this problem if it's a MUST requirement to check the memory for being NULL If the requirement is "check if NULL or not" then you can pass `d` and test it. If you need to make changes, then only `d`'s scope can do that. Create a value in the function and pass it back, and the caller assigns the value to the *locally scoped* variable. Or you can do something ugly with passing an array, the function fills the array, and the caller then looks inside the array. Or use native methods. 
How are those services?
There are study guides for both exams by Jeanne Boyarsky and Scott Selikoff.
This answer is spot on, but for any beginners reading... &gt; One way to do what you're trying to do is: Change Dog dto a single element array then pass the array to the function and modify the array. Although I'm sure there's a better way to do whatever it is you are trying to achieve here. Please never do this for _any_ reason. The reasons are numerous will become clear with experience but anyone who wants clarification can feel free to message me.
I wish that was the solution!! My logic is setup almost exactly the same as this guy. Thank you for the link though, I appreciate it. &amp;#x200B; I don't know what I'm doing wrong though. Based on the instructions (which are listed in the link, for those who haven't seen them) I think I have it all down pat. I remove a negative value if there's an odd number of negatives, if there's only positive values I remove none because that's the max. If there's only one negative value, I return 0 because it'd be better to just take it offline. No panel can have more than 1000 power. I just don't know what I've missed. 
If you mean in regards to JDBC, sure, but you are still not going to get the full benefit until we have reactive JDBC drivers (Oracle is working on one).
What he is saying is that he read about this reactive thing and now he thinks that is actually solves every problem. It doesn’t. It never will and you are better off understand that than taking advise from someone who don’t even understand the limitations of the tech they are promoting. 
More like event-driven architectures - f.e. Kafka.
I am still very confused. I am not a programmer by profession, not even by education. I'm just some smalltime hobbyist experimenting at home. I would like to publicly release or even sell some of my work someday though. How does this affect me? Am I supposed to switch over to OpenJDK somehow if I want security/maintainability?
It's hard to tell whether this is about Helidon, packaging or microservices in general. Although it might be interesting as a recipe if that's what you're into, it definitely lacks insight about what would make this exciting or important. 
OCA - 5 months. OCP - 6 months. However, I have to say that I was also learning the basics of OOP programming, mostly all topics were new to me.
To me, learning is not a sprint. If you manage to continue learning in this pace, albeit rather "slow" (in quotes, as I think its rather fast), after 3-4 years you'll pretty much have an understand of top 10%. Currently, I work at a huge bank and regular developers lack some basic knowledge, not to mention juniors who cannot list how many access modifiers Java has. Just keep on moving.
Kind of surprised that juniors don't have that knowledge tbh.
It depends a lot on whether you're 'new' to Java or have been using it professionally for a few years. 
You can use Oracles OpenJDK builds and upgrade every 6 months or switch to an OpenJDK build from another provider
Well... They never thought about actually learning the bascis before going into the field. And there is a huge prejudice against any certification, because who needs them rigth? Anyway, like I said, continue learning and you'll soon see that whats thought as an average dev is actually a low level.
Is there a reactive (an actual reactive JDBC) driver available yet? And no - not “but Scala”. I mean, this is hardly a Spring Reactive limitation and the information on this is all readily available in the docs.
Funny. I was thinking the exact same thing when I read your comment. Am I back I’m 2012/2013 where spring bashing was all the rage?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Free shipping if you order 4 or more JDKs
It looks like in your [submission](https://www.reddit.com/r/java/comments/9i838a/creating_compiling_and_running_a_standard_java/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I don't know what you're talking about. Spring bashing never went out of style. 
ASP.NET Core doesn't setup everything for you. You have to read the docs and configure security. The difference seem to be that MS wrote way better documentation and have way better examples. BTW why are we being downvoted? Is because I criticized Spring docs? Is /r/java a Spring circlejerk now?
I’d be happier if they introduced Case classes like those in Scala. I tend to use Lombok/Immutables to accomplish the same thing. 
Have a look here: https://spring.io/blog/2006/06/10/spring-web-flow-1-0. Perhaps not what you are looking for, but it is a start
http://cr.openjdk.java.net/~briangoetz/amber/datum.html
http://docs.huihoo.com/spring/spring-webflow/1.0.x/reference/index.html 
&gt; I will start to work on a legacy system, so that is why I'm looking for it. I wish you the best.
I've seen people begin to specify their restful web services as a specification. For example, that might create a Swagger specification for arrest protocol. This allows clients to automatically generate code for accessing the service in a variety of programming languages much like we used to be able to do with soap wsdl file. also, some other particles and protobuf can utilize a Swagger specification to create custom protocols that are more strict and harder to modify, but more performant at scale. 
 Dependency Injection (DI) is a **software design pattern** that implements **inversion of control** for **resolving** dependencies. An injection is the passing of a dependency to a dependent object that would use it. DI is a process whereby objects define their dependencies. 
See the original download: [https://sourceforge.net/projects/springframework/files/spring-webflow/1.0.4/](https://sourceforge.net/projects/springframework/files/spring-webflow/1.0.4/) It contains a docs folder, with a reference (106 pages in PDF) and not just the API javadocs. 
"OracleJDK is another distribution you may have heard of. Starting with JDK12 there will be no free version of this whatsoever" What's the situation with OracleJDK 11? Is that free (as in beer)? As it's LTS will it be getting updates beyond 6 months?
There is no free-as-in-beer OracleJDK11 at all; OracleJDK10 is the last free-as-in-beer OracleJDK. There's technically still the free-as-in-beer OracleJDK11, but this is the special 'development exception': You can download OracleJDK11+ for free, but only if BOTH: * You promise to only develop with it. * Only for as long as OracleJDK11 is the current release. The day OracleJDK12 comes out, free-as-in-beer developer editions of OracleJDK11 will disappear. If you pay for OracleJDK11, you get support until at least the next LTS version, possibly longer. 
Nice!
I have been using netbeans since 2000, it's perfect for writing small gui apps. My clients are engineers with mostly matlab experience. I can whip out app, big or small in netbeans in no time. Swing gui builder is awesome. I made countless stand alone apps with great success. 
/r/javahelp You need to give way more information.
I'm reading a book by Mala Gupta about OCA 1 and writing general notes. I'm just writing details that are easily forgettable, not every detail. There is a lot more to be done: https://github.com/sake92/notes/blob/master/java/OCA%20-%20Java%20SE%208%20Programmer%20I.md
Yes but why? What happens if I just ignore this for now and keep working on my own stuff? Is it just that I'll end up on a JDK that's outdated and can't be updated? So if I wanna go public all I have to do is switch out the outdated JDK at that point? I just don't understand how this works.
May I have a show of hands of how many of us are still on 8?
Still on 6 lol..
Yes you can stay in an outdated JDK. If you go public (with a commercial piece of software) then you would need to swap to Oracles OpenJDK builds and upgrade every 6 months or use OpenJDK from another provider 
You can't see the benefit of `List.of()`, `String.repeat()`, `Stream.dropWhile()`, `Optional.stream()` or the many other useful improvements in the JDK?
Nothing wrong with 8. It's the LTS release, so waiting for 11 for an upgrade isn't a bad idea.
Yep, I can't. And Lombok doesn't work on jdk11 so you want me to grab some replacements for guava's immutable list but rollback to accessors and constructors in my code.
Days until Java 6 is officially released: **-4305**
Got it. Thank you
✋
Java will soon become Kotlin-ish with the 'switch expression' proposed for Java 12. But, this would only matter me if newer Java versions come to the Android world. 😣
To be honest I almost didn't prepare for OCA at all, mostly because I forgot about the exam date (I thought it's 2 weeks later), thankfully I've been studying Java for some time then because of job change, so the day before the exam I just read some questions, possible answers and how it all looks like. It was sufficient. Didn't try to pass OCP yet. I don't know if I'll even try.
Lombok works on 11 just fine
Is 11 LTS?
Still on 8, anybody want to give your single best reason to upgrade to 11 from 8? (best change in 9,10,11?)
It is.
I'm using 8 too, but jigsaw sounds cool. Decreasing your jar size to half is pretty handy.
We're on Java 10 currently. The most useful features for me personally has been the convenience methods for collections (Set.of, List.of, etc) and the var keyword. Haven't touched the Jigsaw module system yet. I'm sure there are many improvements under the hood, but those are the day-to-day useful improvements for me.
I'm on 10
And I thought Kotlin came to the Android world already?
&gt; Funny thing: when it comes to html frontends, it is normal to look into your browsers developer tools to see a network analysis chart That is a very interesting thought, indeed!
If you're working with soap God help you. The dependencies are a nightmare imo. I'll take this time to ask for any decent set of dependencies for soap/xml marshalling going forward. Everything else in newer Java is great though.
I'm curious: Why do you consider being able to jlink a custom application image a necessary prerequisite to migrate to 11? Even if "stuck" running off the classpath and not using any of the new APIs in 9, 10 or 11, you'll still get the benefit of numerous optimizations in the JVM and core libraries. &amp;#x200B; Also, a somewhat unorthodox way to get \_anything\_ to work with jlink is to fold dependencies and application code into an uberjar and provide a trivial [module-info.java](https://module-info.java) \- I believe I first saw this idea suggested by Stephen Colebourne, somewhere.. (FTR, I'm an OpenJDK dev)
Better GC performance: [http://mail.openjdk.java.net/pipermail/hotspot-gc-use/2018-June/002759.html](http://mail.openjdk.java.net/pipermail/hotspot-gc-use/2018-June/002759.html)
✋ although we use Kotlin, which has a lot of semantics that are slowly being introduced to Java as well.
&gt; Especially when it comes to hibernate they will simply not see the true sequence of their db interaction. Why is that? Hibernate allows you to log all JDBC statements by setting this log appender to DEBUG: &lt;logger name="org.hibernate.SQL" level="debug"/&gt; However, you are not limited to logging statements with Hibernate. The best way to do it is to use a JDBC Proxy too like [datasource-proxy](https://vladmihalcea.com/the-best-way-to-log-jdbc-statements/) which even gives you the ability to [detect N+1 query issues during testing](https://vladmihalcea.com/how-to-detect-the-n-plus-one-query-problem-during-testing/). 
Modules _is_ a big thing, but the need to modularize everything is far from necessary: jlink is useable to create a customized Java image (cut out all the things you don't need, enable aggressive compression etc) which you then use as you'd use any JDK or JRE in the past. 
Oracle JDK 11 is LTS for premium customers only. From what I know there's no free LTS version from Oracle. &amp;#x200B; However free Java 8 support ends in Januar 2019. So if you don't upgrade to 11 you won't get any security patches soon.
It looks like in your [submission](https://www.reddit.com/r/java/comments/9ihk0e/effective_java_3rd_edition_did_it_live_up_to/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Because we deploy on OpenShift, they will only support Java 11 skipping 9 and 10. So yeah, still on 8. [Source](https://access.redhat.com/articles/1299013)
don't toy with my emotions
The best reason to switch is that you have to do it eventually. 8-&gt;9 is the big step for most applications, 11-&gt;17 will be comparatively easy probably.
On 10, and still on the class path. I'm not really worried about jar/package size and have a lot of old dependencies managed via Gradle, so have not figured out/dived into modules yet, and personally they seem too complicated to deal with for our existing project. I'm not at a loss though as we use javapackager with user configured jvm settings and it has been ripped out of 11 without replacement, kinda screwed now looking for a alternative...
[https://www.youtube.com/watch?v=dQw4w9WgXcQ&amp;t=0m43s](https://www.youtube.com/watch?v=dQw4w9WgXcQ&amp;t=0m43s)
Yep, there's no one big API change to point to; just lots of little refinements all over the JDK that make Java 10 nice than Java 8. Java 11 brings us some nice String improvements too.
I'm on "the most recent version that plays nice with Spring and Lombok". Right now that's 8... I'll happily move as soon as that changes.
Do you honestly believe, that i did not know this options when i wrote my comment? 
Yea, I saw that, but that doesn't do me any good if I want to use LTS... That and I can only find reference to jpackager and nothing about the Java class replacement for jvmuserpreferences used to read/write parameters used by the native executable which is also needed. This leaves me in a lurch as I can not go back to 1.8 now and 10 isn't LTS and I build for Mac/win/Linux so ya...
I ran Spring (Boot) + Lombok combo on Java 9, Java 10 and now Java 11 and it works like a charm. 
Still on 7 here!
If you want to give it a second try, https://github.com/moditect/moditect works around this limitation of jlink by inserting module descriptors into non-modular dependencies.
I am pretty sure that this counter doesn’t work !
That's not an API change. That's a language/JVM feature.