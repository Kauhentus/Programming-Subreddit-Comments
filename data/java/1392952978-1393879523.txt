instead of s1==s2 you have to use s1.equals(s2); reason: with == you are comparing the object that is the double (the memory location) not the value in the double. with .equals( you are comparing the value in the object double.
Yeah, frankly with the varying degrees of knowledge of spring on my team, it's best to stick with something everyone knows, which is XML. Autowire is almost a dirty word where I work because some don't quite grasp the concept, but whatever.
Your trying to put code in the wrong spot. Public static double getrandomdouble(){ Code here}
um okay. Can you elaborate?
When defining a new method, the method parameters go inside the parentheses. You however will not have any parameters, so your signature will be defined like this: public static double getRandomDouble() Now you need to define the method body which is where the actual code (implementation of the method) goes. The method body is scoped with curly braces. public static double getRandomDouble() { // implementation goes here } Remember that since your method is defined as returning a value (your signature specifies that you are returning a double) you need to include a return statement in your method to actual return the result. public static double getRandomDouble() { double randomDouble = // your calculation for generating a random double return randomDouble; // return the variable that you calculated } Keep reading up on the basics of the Java language [Methods tutorial](http://www.tutorialspoint.com/java/java_methods.htm)
basically I need a method that creates a random number between 1 and 10000 to be used later in the program. The program is a mathtutor/quiz thing that uses random numbers for math purposes. I think that means the method here needs to be public. I referred to the book to figure out how to make it between 1 and 10000 and it said to use that 1+(double)(math.random)*10000 thing. Then I got stuck because my professor won't answer his emails and i have no idea what those errors mean.
I had all that in the code, I'm just confused about the error I'm receiving after the suggestions on here. - Syntax error on token "+", invalid AssignmentOperator - The left-hand side of an assignment must be a variable so the implementation being 1+(double)(math.random)*10000; has those errors and I don't know how to fix it.
At this stage, you wouldn't be expected to understand exactly what the compiler is trying to tell you, but you need to learn to take a hint. It mentions "+" and you only have one of those in your code, so the problem must be nearby (it is).
&gt; Hell, I would not choose XML any more EVER. Why not? What else would you use? I understand how XML has been abused by ~~some~~ most people/projects using it (things like maven, hibernate, etc.), but for actual data interchange or within-app-serialization, it does still seem useful.
JSON is almost always easier, especially since the node revolution.
Hey, thanks for your answer. The idea of eye reflection: what is actually reflected in a person's eyes (or glasses, other). There was recently an article showing some feasibility, and a previous article had shown what text you could extract, using the PC camera to investigate screen reflections in people's glasses, with OCR. Probably not easy. The sculpture thing: yes it is fun, but also design. If you worked with standard file firmats, you could load your creations into games, movies, 3d printers. The timeline idea is probably a better one. A CRM for your personal network. Make a good set of presentations: whole timeline, timeline for person, maybe timeline for group. Maybe use some fancy zoomable GUI, hyperbolic map. Write standard plugins for sms, mail, contact, calendar, facebook, linkedin, twitter, and independent plugins for any new data source. Include birthdays, anniversaries too. Try to get to current location, current login states. Some data specific to this app: notes, reminders connected to this person. Can you connect it to a hook for incoming phone call/sms? If so, pop it up when the phone rings. Anyway, I could enjoy hearing what comes out of this.
I don't want to be *that guy*, but... http://lmgtfy.com/?q=reading+in+a+file+with+java ...this is pretty easy to find with a quick Google search.
I have "inherited" an application that is used to calculate some data. It was a mess of spaghetti code, and almost took a rewrite to clean up. In a few months I managed to decrease its runtime by a factor of 50 (Â±10 depending on inputs) through a series of improvements (mostly cache-friendlyness, but also good old bit-crunching).Now for good practices: * I try to keep my code clean (I have eclipse warnings turned to 11 and FindBugs active) and well-documented and I have a growing suite of unit tests. I use [infinitest](http://infinitest.github.io) to have tests run on every change. * I make extensive use of logging, and use log4j2 to deliver the logging we want while keeping performance high. No more System.out.println! * I use [trove](http://trove.starlight-systems.com) classes whenever I need primitive collections; or more often than not I'll just use arrays. Though I inherit from Thread here and there (mostly because I have a service where threads with a certain interface can register, so that's why I subclass), I use standard thread pool, Fork/Join classes and sometimes [disruptor](https://github.com/LMAX-Exchange/disruptor). * I write interfaces to abstract layers in my application and I write abstract classes to ensure the implementations follow the contracts. I have a good number of assert statements in my code complementing my unit tests (I am a big fan of this: Unit tests test a specific situation, asserts test all situations arising at runtime). * I bit-crunch here and there (sometimes using int or long instead of BitSet, because the latter would increase footprint and thus reduce cache-friendliness), I try to keep the details within the containing class. * When writing performance-critical code, I will first write a straight-forward, slow and simple solution. This gives me a baseline and an interface to program against. Only when this works, I will drop in an optimized version (which may introduce much complexity, but as it's all encapsulated, I'm good). * I put classes' dependencies in the constructor although I don't use a DI container; I just have the code wire itself up on startup. I find that using a DI container gave me little benefit and made my code harder to follow. The downside is that I have some constructors with more than 4 arguments. I'm not sure what I will do about that.
Wow. That's a very diplomatic way of stating Scala's current state. I'm impressed.
As you said, I am really looking for something to show that I can follow specs and build an app for my resume. I have a few smaller ones I built off my own back but felt this cert would help cement that. However I had wondered if it was better to do than one of the EE certs. Thanks for the advise!
Actually, you're just simply using the wrong Double type. You are declaring your variables s1, s2, s3 as Double (note the capital **D**) which will use the **Double** object type. What you will want to use is the primitive **double** (note the lowercase **d**) type. Objects, such as **Double** cannot be compared with **==** as this will only compare the object references, but not the object contents. For Object types, the proper compare is, as /u/irocgts mentioned, **.equals()** Primitive types, such as **double** can be compared with **==** You need to be very careful with the definition of variables, especially if you want to use primitive types, as all the primitives (lowercase first letter) have a corresponding Object type (Uppercase first letter). Here is a little table of the primitive vs. Object data types in Java: | **Primitive** | **Object** | |:-------------:|:----------:| | boolean | Boolean | | byte | Byte | | short | Short | | int | Integer | | long | Long | | float | Float | | double | Double | | char | Character | Unless specifically needed (e.g. for Lists) always use the **primitive** (lowercase - left column) types as they consume less memory, have less organisational overhead, and (most important) perform as expected (with comparisons, etc.). **EDIT:** as a sidenote: /r/javahelp is better suited for questions like yours. /r/java deals mainly with the language itself. (I guess that's also one of the reasons for the downvotes)
From BlueJ site :) "A free Java Development Environment designed for beginners, used by millions worldwide"
Looks like he is trying to create job security.
Hi Johnson, As far as I have been using NetBeans I have noticed that you can't directly create REST API project. But you need to create a project. Of course this should be Java or JavaEE project. When you have created your project you can create new file and from there you can see lots of options to create different type of files. There you should see RESTful API. However if you don't see such option then it means that you need to add the support for it. If you are using NetBeans 7.4 or 8.0 Beta then you can add RESTful support from Tools -&gt; Plugins. Search RESTful plugin, install it and restart your NetBeans. You should have RESTful support now :) Hope this helps.
First and foremost, all code in Java belongs in a class. class RandomDoubler { ... your code here ... } Next, a class can contain fields and methods (and other classes, but we don't need that for now). Let's add a method that does what you described: class RandomDoubler { public int randomNumberBetween1And10000() { return ThreadLocalRandom.current().nextInt(10001); // 10000 inclusive - is that what you want? } } Now what to do with that class? You may add a public static void main(String[] args) {...} method (eclipse will suggest you make the class public, which you should), make the method static and call it directly like RandomDoubler.randomNumberBetween1And10000() or create an instance (using new RandomDoubler()) and call the method on the instance. Ultimately you should probably go to r/LearnProgramming and r/JavaHelp.
Yeah, was aware of how it worked, was just saying there are members on my team that lack a lot of knowledge when it comes to the new stuff (we recently just got 3.1.2 approved for use over 2.5.6, that should at least give context)
Often you can have your cake and eat it too if you identify and encapsulate the performance critical parts, so your codebase is maintainable and extendable, except the performance critical parts, which in exchange are pluggable. Pluggables are great because you can have multiple implementation, at least one for safety, portability and maintainability, and one for performance. It is not always possible to encapsulate the performance critical parts, but in many cases you can find a more specialized solution for your problem. When neither works I just adhere to the SOLID principles, that way even the performance penalty can disappear over time with a more advanced hardware, compiler and JVM. Those who write horrible spaghetti code often look down on the compiler and the JVM, but there is absolutely no reason to do so. &lt;http://shipilev.net/pub/blog/2014/exceptional-performance/&gt; I would rather write a preprocessor that makes my code more effective than to write unmaintanable, unreadable, rotting code. 
Question: why don't they release some versions and skip it? Case in point, they have 7.0.51 version, but it was not released to the public. Just curious if anyone knows...
Alright, I have to apologize, I overreacted. Sorry
I love your answer. With respect to your last bullet, and not seeing your code, one idea that I have seen, but not used yet, is to use a "dependency registry". It would be a singleton that contains a map/set that contains an instance of everything you want to be passed into a constructor. Then, when you need something, such as a database client, the object that needs it get an instance from the registry and uses it. The beauty of it is that it's simple and you don't have to worry about passing in many parameters into a single class. However, it is a singleton, so it may or may not be something that you like in your code. Anyway, like I said, I never used it, so I can't say if it's truly good or bad, so take this suggestion with a grain of salt.
I have the node class and the tree class. And I have the preorder and Postorder strings. The nodes are A B C D and E A is the root and the rest are all children of A but obviously it could be inputted in anyway. I just don't know how to take the preorder and Postorder info that is parsed in and to create the tree with it. 
In this vein, I find it easier to start by writing well-designed but possibly slow code first, then use a profiling app like yourkit to actually find problem spots in my code and make them messy to wring performance out of them. 
this stands again dependency inversion principle. On first look it may not look like tight coupling but it is, and there's only marginal gain over simply having objects construct dependencies by themselves.
Is the senior dev able to speak knowledgeably/convincingly on why he made particular design compromises? I ask because there certainly are very smart people who will write something that looks ugly, but they know exactly why they did it and can explain why the tradeoff was worth it. You can learn a lot from such people. "It's important to know the rules, but also know when to break them," etc. But it's also possible that it's just bad design and he's citing performance concerns as justification, when the design could've been cleaner without sacrificing performance. Or, he may be guilty of engaging in premature optimization. Knuth: &gt;Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. So, this may be relevant: &gt;A common misconception is that optimized code is necessarily more complicated, and that therefore optimization always represents a trade-off. However, in practice, better factored code often runs faster and uses less memory as well. 
 I do not think the Spring community is larger any more. That was true 5 years ago but most new projects I see are going Java EE. Spring is often used along with Java EE as you are doing. I just do not think that makes sense anymore for most projects. I do not see what Spring MVC is giving me and it adds a lot of complexity. I am sure there are some exceptions where it can still help. I have not had a problem finding an answer to a Java EE question on StackOverflow. For example on StackOverflow if I search Jave EE I get 15,000 post vs 39,00 for Spring. I do agree that it is designed by committee and never cutting edge. This is a good thing to me. I need it to be stable and consistent not the flavor of the month.
To show you can build an application I'd recommend creating a couple of small functional apps under a GitHub account and linking to it on your resume.
This should belong in http://www.reddit.com/r/learnprogramming Also we won't fix your homework. Some random thougts: -You don't need an array when you only need a character for comparison. Just write someString.equals(" ") instead of your someString.equals(space[0]) -You can save a lot of work if you just use someString.split(" ") It returns an array with all the single words. -There is another useful String function called "startsWith". Instead of if(word.substring(0,1).equals(consonants[x]))â¦ write if(word.startsWith(consonants[x]))... Have a look at all the useful String functions: http://docs.oracle.com/javase/6/docs/api/java/lang/String.html#method_summary -Apart from that it's hard to get what you are doing..
Ok, you're looping conditionals are messed up. The problem is you are allowing the conditionals to reach the length of the data and then reading past the length of the data. For example, this line for(int a = 0; a&lt;=words.length(); a++){ will allow a to reach the point where **a == words.length()** but then you are using the value of **a** with this if(words.substring(a,a+1).equals(space[0])) because **a** is equal to the length of the **words** string, the (a, a+1) goes outside the length of the string, resulting in an ArrayIndexOutOfBoundsException. Notice how higher up the the code, though, you account for that with this line for(int s = 0; s&lt;=words.length()-1; s++){ if(words.substring(s,s+1).equals(space[0])){ Spaces++; } } where you run to **&lt;= length() - 1**. The thing to keep in mind is in Java, arrays are 0 based, so to loop through a full array you stop before reaching the length: for(int index = 0; index &lt; data.length; index++) but if you need to do something like data(index, index+1) then you need to account for that in the loop. 
Maybe odd point releases are dev? I'd have to look through the release history to see.
There is a difference. JAAS does not even pretend to be a standard ;) But people think it is. JSF, JPA, CDI are by themselves pretty standard, but there are implementation differences and bugs that ruin it, or you have server specific extensions. A write once run anywhere WAR is also difficult because there's a group of people who think part of the functionality should always be defined outside the war in a server specific way (data source, JMS queues, security modules, etc). 
He's very good at explaining complex things in layman's terms and he's also very good at understanding how complex code interacts. However, this typically means that his code is extremely difficult for others to understand. Since his code is very tightly coupled, it takes a lot of cognitive power just to determine if an unencapsulated object will see any changes from clients or if a class is indeed thread-safe if it needs to be. His typical response to people asking about things like this is "you shouldn't be in my code". He also says he doesn't believe in premature optimization and that everything should be as fast as possible. However, there are places in the code where this is clearly not the case. I see TreeSets used where a HashSet would be more appropriate. There are unnecessary iterations on collections and synchronous calls to remote servers made during asynchronous events. I know there is a lot about programming that I still have to learn. However, I'm just not convinced that this is good code. I'm also not convinced that it couldn't be more performant or at least as performant with proper design.
I do the same thing. It's not a good idea, in my opinion, to start optimizing code if you don't have a base measure to tell you what to optimize. I've used YourKit before for this and it's been very successful for me.
And then one day you need to deal with a value of $220,000 in Japanese Yen, and you're screwed.
This is a great response. I have no issue with writing performant code or even code that is difficult to read (e.g. bit operations) as long as they are properly encapsulated. I'm a big fan of Robert Martin's Clean Code in this repspect and try to adhere to his readability philosophy when possible. To touch on some of your individual points: I don't necessarily have an issue with extending Thread. However, I like to use composition when possible. For instance, I recently had to create a maintenance thread in this application so I wrote a class and implemented Runnable. I passed this runnable to an Executor to take care of everything for me. He told me this was incorrect and I should have extended Thread although I explained I didn't need everything the inheritance would provide for me. He couldn't explain why I should have extended Thread, just that "it was the right thing to do there". /shrug I'll put dependencies in the constructor as well if I want to mark them final. If I need more than three, I'll consider a bean structure or look at object parameters. If those aren't appropriate, I'll create another class to encapsulate that logic.
I don't want to sound like I'm complaining about this individual. I respect him as a developer because he creates some very complex and impressive systems. I'm just trying to determine if, as /u/Vorzard said, you can have your cake and eat it too.
I've just know about Vaadin right now. It looks nice. It depends on how much control do you want to have on your app versus how much assisted do you want to be. If you are advanced at Java and web concepts, my advice is avoid complex or multiple frameworks. Each frame work will add more bugs and more things to learn from its characteristics. But if you don't feel secure playing it at lower levels, better to choose a full solution framework that takes care of security details and stuff like that. Think of GWT not as a framework, but just as a Java to JS compiler.
I'm curious as to what you do to improve "cache-friendliness." Are there established ways of doing this? How do you assess whether code is cache-friendly? Do you have approaches you would be willing to share?
Interesting. Based on what I see from user group meetings and headhunter contacts, Spring is still pretty dominant in my local market. I suppose this can vary from region to region, though. I'm happy to work on either platform, and I have worked on both (about a one-to-two ratio between JEE and Spring projects). Once you get up and running, the similarities outweigh the differences... more so since the lines continue to blur (e.g. Spring incorporating JPA and supporting EJB, etc). If anything, I find that the main driver is a company's selection of server software. If the infrastructure group is heavily invested in a commercial JEE app server (e.g. WebLogic, WebSphere, etc), then the development group is often under a lot of pressure to use it for everything. Companies that have had bad experiences with full stack servers (e.g. GlassFish, yuck!) tend to favor lighter servers such as Tomcat or Jetty (and therefore development frameworks like Spring). This is also true for "devops"-oriented companies, since Tomcat and Jetty instances are easier to spin up and manipulate through systems like Puppet and Chef, etc. Personally, I think that using a full-stack JEE server for *everything*, including specialized things such as REST or AMQP based services, is awfully wasteful. Anyhoo, if you're interested in stability and consistency, I would argue that Spring trumps JEE there. Spring is always a step or two ahead of JEE... but unlike JEE, Spring never deprecates *anything* (which is a drawback in my opinion). You can write a 2006-style Spring app with today's Spring 4.x, and it will basically run just fine. Have you written any EJB 2.x classes lately? :)
Ah. I haven't written Service Locator style code in a LONG while. I don't know if I can really do it justice. Trivial examples are often misleading because the weight of complexity and configuration that you are managing is small, so the different strategies don't show their value/costs. At any rate, SL and DI are both mechanisms for indirection and dependency inversion, but the central nature of service locators has a disadvantage. Consider a trivial example (with very abbreviated style)... class RemoteClient implements RemoteClientAPI { ... public ResultContext executeCall(RequestContext c) { RPCEndPointSupplier supplier = (RPCEndPointSupplier)ServiceLocator.getInstance().get("RPCEndPointSupplier"); UserContext user= (UserContext)ServiceLocator.getInstance().get("User.Context"); ResultContext resultContext = supplier.supply().process("SomeRequest", user); ... post-process response ... return resultContext; } } On the surface this seems simple, because you are simply doing one line for each look up. But your code is now dependent on the framework itself to work in any context. If getInstance() doesn't return something that has all the knowledge needed, your code cannot make sense, so you will always have to configure the locator in all situations, testing or otherwise. Thus, unit testing this class requires configuring fake information into the ServiceLocator. It ends up being a very large amount of boilerplate to get simple isolation required for good unit testing. This can end up, when you add more dependencies than these trivial two, in a very tangled and hard to read, and hard to test piece of code. This code also has two dependencies with different lifetimes, and managing that can be complex. In Dagger (and, frankly, Guice), assuming you are using scoped graphs to manage the different component lifetimes you would end up with something like: class RemoteClient implements RemoteClientAPI { private final RPCEndPointSupplier epSupplier; private final UserContext user; @Inject RemoteClient(RPCEndPointSupplier epSupplier, UserContext user) { this.epSupplier = epSupplier; this.user = user; } public ResultContext executeCall(RequestContext c) { ResultContext resultContext = epSupplier.supply().process("SomeRequest", user); ... post-process response ... return resultContext; } } It's a little longer but easy to read. Now you aren't using a static singleton to manage everything centrally, which means instead of a complicated test environment, you can write @Test public testRequestPostProcessing() { ResultContext result = new CannedResultContext(...someproperties...); RPCEndPointSupplier supplier = new FakeRPCEndPointSupplier(cannedResult); UserContext user = new TestUser(... some properties); RemoteClient clientUnderTest = new RemoteClient(supplier, user); clientUnderTest.process("SomeRequest", user); assertTrue("ExpectedPostProcessedValue", result.getSomething()); } The isolation takes far less effort, even with a sort of JDBC-like, or RPC-like convoluted and layered API. You don't need your tests to involve the framework - they're just plain old java Unit tests, with all configuration limited to the very small amount to set up the test conditions, and all visible right in the test. With a ServiceLocator, your code is dependent on the framework, and you must always have it be a part of the environment. The Dagger/Guice code above can be even terser with field injection. Field injection makes the code terser, but you can't "one-line" the construction as you can with constructor injection. This is a dangerously small example, thought up on the spot, so I don't know if it sufficiently explores the topic. But hopefully it begins to illustrate and you can extrapolate to larger code bases. 
I wonder though what can you learn from an unreadable, complex code that can't handle change, which is the whole reason for object-oriented programming. I think isolating, encapsulating ugly code (as much as you can) is the best approach. That way you only need to broadly understand what the ugly code does, you can test it's behavior, and you can more easily circumvent or replace it. But when the whole project is a mess, you can either abandon or refactor it. Both is a very costly solution. My opinion might be controversial, but I embrace being enterprizy. It beats spaghetti code with meatballs every time. But because the KISS principle is even more important, overzelous enterprizy might lead to the dark side. There is no turning back from there. 
Some things nobody else mentioned: * Anything involving dates and times. (Should be improved by Java 7.) * Anything involving reflection. * The fact that long-obsolete APIs are still around making it hard to find the right API. (Vector, Hashtable, StringBuilder, ...) * The fact that many APIs are pre-generics. * JPA2. Makes my brain hurt. * Anything requiring handling of heterogeneous data, e.g. JSON.
Very cool library! I have some home rolled code that I now want to replace.
I've recently seen a similar case, and the company in question still sells that person as a senior architect, even after they got slammed by an independent audit. A serious warning signal should sound when a senior developer wants to implement their own XML parser, their own web framework, their own database, or similar, when the application doesn't have Google-like requirements.
All right, I probably overstated "should never use", but it uses `Object.equals()` instead of reference equality, which given reference-based cleanup just doesn't make sense. We use `new MapMaker().weakKeys()` instead.
&gt;I wonder though what can you learn from an unreadable, complex code that can't handle change Usually there isn't much to learn from ugly code, but I was picturing the possibility of a senior dev explaining something like, "because of the way the JVM handles X, Y, and Z conditions, I found through testing that [weird code in the constructor] increased performance by 55% in this loop down here.." But far more often, ugly code is just bad code. And design compromises are really not as necessary as they might've been in the past due to how good modern compilers and JVMs are at performing the optimizations for you.
Post a new updated pastebin.
There are a few tools out there to measure cache misses, but I'm on my phone, so google it if you want. My cache optimization techniques boil down to three things: * lay out stuff in memory to optimize for locality. If you need A and B together, put them together. * reduce memory consumption. Pack hot data structures as small as possible without adding too much CPU overhead. Yes, bit fields are a viable technique sometimes. * reduce write access. This is big. If you change a thing to calculate something, then change it back, and you can do the calculation without the change, you can avoid invalidating a cache line. This can make a huge difference.
You are probably right that usage of one or the other varies by location and industry. They both certainly can get the job done. It is just a lot more work with Spring in my opinion. The biggest advantage is with JSF which makes doing a web application front end dramatically easier. You do not need a commercial server to run Java EE. If you want to run it with .JAR files using Tomcat you can do that just like Spring. You can pick and choose which parts or just use Open EJB or TOM EE.
It seems like a lot of reflection and overhead(in terms of code complication and performance) to implement a fairly straight forward design pattern. What advantage does this have opposed to implementing a concrete state machine the traditional way?
Yes. Especially if they have compatible types. That may lead to calling with wrong argument order. Plus, you'll always have to look those calls up. Hardly self-documenting.
Ah yes, good point. Any kind of solution for this? I normally only have a couple of parameters passed to my constructor. But recently I had around 6, it was kind of painful to see. But I couldn't see a good way round the problem.
Sounds like a good use case for the [builder pattern](http://stackoverflow.com/questions/5007355/builder-pattern-in-effective-java), to allow fine grained creation of the object. The Effective Java book that often gets mention on here is a great read, and goes into these ideas in detail.
Isn't this common knowledge?
Which brings up the point, why is OP using Double instead of the primitive type double, in the first place? That's fairly uncommon especially when doing math operations.
I guess fear is the best weapon, I also have found it useful. It always keeps you humble.
Based on this and some of your other comments, I've reached the following conclusion. This developer learned "the way things are done" many years ago and has not been paying attention to some of the more recent shifts in programing. This is the way he has done things for years and it has always worked for him. Why should he change. Unfortunately, this makes it hard to convince them that there might be a better way. And I don't have much advice to help in this situation.
The solution that I stole from javascript is to create an object for the parameters, and just pass the object. I find the builder pattern rarely makes sense in my projects as all the parameters are required. Builder pattern is useful when some parameters are optional.
Wow you really nailed that right on the head. He's been around a while and seems to be pretty resistant to change. 
No worries!
That's the weirdest Java I've ever seen.
I see you're a student on Netbeans. My advice to you, coming from a similar background, is that Netbeans is pretty rubbish. You should giddy up on Eclipse. Edit: Dang, you guys are mad. 
What makes you say that? I'm just curious. I've used a pretty big spectrum of IDEs and think they all suck in unique ways.
Well, just a bunch of handy dandy shortcuts in Eclipse. It seems faster to boot, and seems more widespread in use. I use Spring Tool Suite which is software built upon Eclipse and provided some extra handy spring functionality without bloat. On the other side of the spectrum, I also use IBM's RSA which is built upon Eclipse but RSA is about as slow as Alaskan molasses. I just see most plugins out there configured for eclipse, seems to be the most used editor, and I personally prefer it to Netbeans. Use whatever tool fits your hand though, I suppose. 
I'd hardly call Eclipse any better than Netbeans, if you're looking to actually upgrade to a better IDE then IntelliJ IDEA is the way to go, Community Edition is free and would cover the needs of a student just fine.
Just be thankful he doesn't have to use JCreator. That's what my uni forced us to use in first year. \*shudders*
This mostly boils down to subjective stuff , and a tool suite which someone taking a course probably won't be able to use. Shortcuts are available in Netbeans and Idea too - Eclipse does make it easier to create custom bindings though, although again how handy these will be for someone starting out I don't know. Don't get me started on IBM though, I don't miss the days of RAD crashing on me if I left it as a background process for more than 10 minutes. Edit: As you say plugins are handy for Eclipse - however I'd argue that for someone starting out it's far easier to rely on Netbean's default out-the-box functionality rather than customising Eclipse.
Eclipse needs a lot more plugins because it does not have the features that Netbeans has. People who use Netbeans can use it without modification. People who use Eclipse use Eclipse + a buch of other stuff to make it usable.
This is what happens when C++ and Brainfuck have an inbred baby.
Hello, this is (not) an automated bot! If I made a mistake, please feel free to correct me! You did a single break and appear to not get the results you wanted. To correctly put a break in reddit's formatting, you should either double break, or double space before a single break! Fixed: &gt; cout&lt;" / \n"&gt;; cout&lt;" \ \n"&gt;; cout&lt;" / \n"&gt;; cout&lt;" \ \n"&gt;; cout&lt;" // \n"&gt;; cout&lt;" / / \n"&gt;; cout&lt;" / / \n"&gt;; cout&lt;" / / \n"&gt;; cout&lt;" / / \n"&gt;; cout&lt;" / / \n"&gt;; cout&lt;" _____ \n"&gt;; cout&lt;" | | \n"&gt;; cout&lt;" | __ | \n"&gt;; cout&lt;" | | \n"&gt;; cout&lt;" | | \n"&gt;; cout&lt;" \n"&gt;; cout&lt;" | | \n"&gt;; cout&lt;" \ \| \n"&gt;; cout&lt;" \ \ \n"&gt;; cout&lt;" \ \ \n"&gt;; cout&lt;" \ \ \n"&gt;; cout&lt;" \ \ \n"&gt;; 
IntelliJ IDEA master race reporting in!
DrJava here.
Seconded.
Well, most of reflection was used to discover and manage transition executed actions. Reflective discover and manage those transition actions are done during state machine definition build time, not state machine instance runtime. So it won't hurt performance to much as long as user reuse the definition so called state machine builder in the code. The purpose was to provide a user friendly, intuitive way to declare state machine and also flexibility to extend it. 
Second seconding.
Any number of reasons: * they found a show stopping bug before releasing to public, * one of the bug fixes was rejected by QA, And so forth. Producing a versioned build does not mean that the build is suitable for use.
Second second seconding. It just feels so much smoother. 
Second seconded seconding.
Not really. In fact, I did something similar in the "print 2014 with no numbers in your code" thread at the beginning of the year. I'll see if I can find it. Edit: found it: System.out.println(" ___ \n|__ \\ \n ) |\n / / \n / /_ \n |____|\n ___ \n / _ \\ \n | | | | \n | | | |\n | |_| |\n \\___/ \n __ \n/_ |\n | |\n | |\n | |\n |_|\n _ _ \n | || | \n | || | \n |__ _|\n | | \n |_| \n");
Especially when it's not Java
I'm new to Java and I don't fully know what you mean by that. 
Yes, I will add a picture of my source code when I go back on my computer which might be in like an hour. My code did not look like how you guys wrote it. I literately made a picture of a house in my code. 
In Java, a "garbage collector" comes around to free up memory for unreferenced objects. Let's say you call someMethod() from main(), and someMethod() declares a "String s" variable somewhere. Once someMethod() returns, and main() continues its execution, "String s" is no longer referenced in your program, so that will be something that the garbage collector would delete (to make room in memory for other objects). With some other (usually older) languages like C, you'd have to allocate / deallocate memory manually. He's just making a joke that you don't have any recycle/garbage bins outside your house, so Java won't be able to do its garbage collection job =)
He meant that you didn't draw any trash cans in your picture.
== is an operator specifically reserved for primitive data types double is a primitive data type, whereas Double is not. Either change your assertions to s1.equals(s2); or change your upper case Double declarations to lower case primitive types
Here is a picture of my [source code](http://imgur.com/SaNYsy5). 
Don't forget BlueJ.
I used BlueJ when simultaneously taking a Udemy java course. I can see it's uses, but it was a hassle to figure out.
My CS teacher has the class use it. I prefer eclipse because of it's useful features. Although BlueJ can run class files without the java file and I'm not sure if eclipse can do that.
Yup, that checks out.
I really like JGrasp. Simple and to the point. No heavyweight components required when you're doing a school project. Source: in my third java course. 3 years experience with Java.
Thank you for explaining it I get the joke now. 
Why would you use an IDE to run a class file without source code? Serious question. I guess better wording of question is why not just run from command line?
It's probably a reference to this anime pornstar, Pokebin. She's been getting a lot of 4chan buzz lately, so it isn't surprising that people would try to bring her down a few pigs.
It's great for your first IDE, but it's hard to take it seriously once you get past stuff like printing houses.
You are on the right track. Soon you will have to print Picasso's [Guernica](http://articuweb.files.wordpress.com/2010/03/guernica-de-picasso.jpg). If you success, you can be considered a hacker.
All function arguments are passed by value. More often than not that 'value' _is_ the reference to an object. To put it simply, if you have a function: public void function(Object something) { something = new Something(); } And then you invoke the function: Object obj = new MyThing(); [...] function(obj); Then in `function()` you are modifying the _value_ of the argument, but you are _not_ modifying the value of `obj`. In both cases the values _are_ the references. After the function execution completes the instance of class of type Something will be garbage collected, while the instance of class MyThing will still be referenced wherever you invoked the function.
Thanks for the effort, but your response didn't help me at all. How does passing a reference to an object qualify as passing the object by value?
&gt; I get crashes daily when I use it. I don't know how you achieved that. :-) I use Eclipse daily, and haven't had a single crash in more than six months. Depends on your plugins I guess.
So, are you saying that objects are in no way passed "by reference"? Since (as far as I know) a reference to the object's location in memory is passed rather than a copy of the object, I'd say it's distinctly the case that objects are passed by reference rather than by value. What am I missing?
Yes, they are not pass-by-reference in the C++ meaning: http://www.learncpp.com/cpp-tutorial/73-passing-arguments-by-reference/ If you have some C programming experience, you might think of java's argument passing as passing the value of a pointer - within the function you can change the pointer value all you want, but those changes do not propagate back to the place you called the function from. All changes to the state of the object you've been given propagate back though.
hahhaa :D 
 void someMethod( Object organs ){ organs = null; } Object vitalOrgans = new Object(); someMethod(vitalOrgans); if(vitalOrgans == null){ // pass by reference print ("patient is dead"); }else{ // pass by value print ("someMethod had no affect"); } 
&gt; What am I missing? I think that you're mixing up *objects* with *object references*. See my post in this thread.
Truly a masterpiece. :-)
Haha no not for copyright reasons just because they asked and to show everyone that it literately was a picture
Thanks. I'd like to think so haha. 
Pro tip: Put an @ before the double quotes and you'll be able to type your backslashes without having to escape them. edit: er, you can do that in C#. I don't recall if the syntax holds in Java as well.
I wish you could do that in Java, but that is indeed a C# only feature.
Crap. Sorry, OP.
I'm 99% certain the instability comes from it not playing nicely with Tomcat.
There is a course on Udemy.com. Unfortunately it's not free, regular price $39 but currently there is a 75% discount available (hopefully it also applies to this course) - The Coupon to use is: MOVING75 (offer expires 11:59PM PST, February 24, 2014) https://www.udemy.com/javaspring Couple of lessons have a free preview so that you can see whether it's suitable or not.
Could you pass me an oar? 
How can this work without a `House` and a `HouseFactory`?? It barely checks out at all.
http://spring.io/guides http://docs.spring.io/spring/docs/4.0.3.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#mvc-introduction
So I can help with rowing this damn boat.
Well, there's the Eclipse plug-ins built for integrating with the build system and internal languages, which also use Guava.
There are so many contradicting views on design that I don't understand why people still bother writing about their favorite pet law/rule/word from god.
That's very true. Even though I'm still far away from Spring and Android I bought his courses at one of the previous discounts. I really like his style. The Swing course is also excellent.
You need to understand the concept of Spring DI/IOC first (lots of tutorials online) before try to learn Spring MVC. Once you've understood that, Spring MVC is quite simple, you can looks for free tutorial online and learn from existing project such as petclinic: https://github.com/spring-projects/spring-petclinic/ Or you can buy this all-in-one book (I've read it and its very nice and well structured): http://www.amazon.com/Spring-Practice-Willie-Wheeler/dp/1935182056/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1393085195&amp;sr=1-1&amp;keywords=spring
The JFrame is the window. The JPanel goes in it. You want to draw in the JPanel by overriding its paint() method. Call repaint() in your timing loop.
All blogs listed in this (incomplete) listing are worth following: http://www.programcreek.com/2012/11/top-100-java-developers-blogs
Not to mention the HouseDrawingSpringJPAHibernateDOAControllerAnnotation!
Tell your teacher to look into japplets so your not copying the same thing over and over. http://imgur.com/0MBW0OB Also Intellij master race reporting in.
I would suggest that you learn the spring basics first with these http://javabrains.koushik.org/courses.html tutorials. And after that you should have a look at http://www.mkyong.com/tutorials/spring-mvc-tutorials/ . And after that you should just start programming and if you encounter problems, you'll probably find an answer online.
This is a very good question. I fight with this nearly every day when developing my project (graphhopper.com). Writing elegant code takes time, writing fast AND elegant code takes even more time! But I'm very sure that writing testable code does not take much additional time. Some tricks I do: * prefer *List over *Map * prefer primitive arrays over List&lt;*&gt; * reduce memory usage to avoid GC activity * using trove4j * in rare and extreme cases you can reduce RAM a lot when using [simple arrays and serialize objects into this](https://github.com/graphhopper/graphhopper/blob/13ed4fe6df3817c9c7a1715fb481649b42be07d5/core/src/main/java/com/graphhopper/storage/RAMDataAccess.java). E.g. use the flyweight pattern then * even more extreme use the [UNSAFE trick](https://github.com/graphhopper/graphhopper/blob/01dbfa99b54b3728f9c40c4d29c91d914a843e8a/core/src/main/java/com/graphhopper/storage/UnsafeDataAccess.java) * but performance can be often improved a lot more when you improve the underlying algorithm/logic itself! But even with this performance tunings I play around to still get a maintainable programm and API. Sometimes I just go the Java way of allocating objects sometimes more memory efficient (and therefor often faster) solution, and then I measure. If it is at least 10% faster I'll pick the more complex solution, if not I use the normal Java way of doing it. The most important thing while this is to write simple AND working solutions WITH tests first. Then improve from this base via tuning, profiling, idea trials, etc. And you can easily try out a new implementation until your tests go green, then you should be fine.
Cover linked lists!
Thanks for infinitest hint - is there a CLI version (as I use netbeans)? Regarding DI, I have established for some objects a configuration phase. where you can use setters to configure the object (instead of having a 10 arg constructor). After calling init (or whatever you like) you can use the object and no longer modify some settings (e.g. use a simple checker: if(init) then throw exception). I also use chaining so you can do this like with a named-constructor known from other languages: // named-constructor found in other language new Object(name="test", num=123); // with chaining in java you can get close: new MyObject().setName("test").setNum(123);
Do you have an example for the last point?
Hi StreamingBits, I will cover it but it would be the next chapter topic. In next chapter which will be object oriented programming. It will going to have over 13 tutorials and there are lots of things that I will cover each topic much more deeply than in this basic chapter that is running in my blog. Thank you very much for your notification I will take that up and make sure to include that topic :). I can reveal that I'm tutorial(s) about collections so it's going to be assigned to there.
Yeah I'm lost is this some sort of insult perhaps?
awesome. I will keep in check. I like your website design. Very nice btw
Ah excellent, thanks, I'll give it a go and see how I get on
We're in the same boat -_-
Thank you very much. Most important thing is that my site have been helpful and serve you well :)
I think it will help me a good amount. Your method of teaching seems to be great. I will review all of it today. I am taking my second java class at the university and struggling with linked lists and such. I think your website will be a great resource. I am bookmarking it!
Ha the internet makes me presumptive. At least I'm not the only one who finds it confusing
That's so awesome. This makes me really happy :). If you ever have any suggestions to make those tutorials better remember to send your feedback at contact page of my site :)
No problem thanks anyway. Who knows maybe I'll be writing in C# and can use that tip at a later time =)
It's all about code maintenance. =P When you start to work on the kind of projects with hundreds of classes and dependencies you have to follow patterns to keep it all manageable and understandable for the poor fool they get to maintain the code you make. (Usually yourself 0_0) Sometimes, just by habit, I find myself turning a project nearly as simple as yours into a big monster. I start thinking about stuff like character encoding so it can be viewed in html4 and formatting. What if we want to change one type of character to another! Better create a palette that can be modified! Hmm this seems like it could use a Swing UI for easy configuration! (6 months later) Okay the house isn't done yet, but the House Drawing Framework is looking awesome. You can download the latest snapshot off my Jenkins server!
when I was learning spring/hibernate a short time ago, the following websites were valuable http://www.mkyong.com/ http://www.javacodegeeks.com/tag/spring-mvc/ http://www.tutorialspoint.com/spring/ http://viralpatel.net/blogs/category/spring/ just as a note, as spring 4 is relatively new not all of these sites cover the differences between spring 3 and 4. However, they are similar enough that it should not raise many issues.
You should override the paintComponent method, not the paint method. Here's an example of a [Hangman Swing GUI](http://java-articles.info/articles/?p=349) from my blog.
Exactly. paintComponent method should access the "state" of the game and paint it. But it shouldn't be called directly in game loop, but through repaint method.
What you want to do is learn how to override the paintComponent method. This will be called once the JPanel is created in your jframe and anytime you call the JPanel.update() method. Learn the Graphics library. This is used to draw things to the component. With this, you can draw lines, strings, polygons, etc. And then learn about Blitting. This technique used to only redraw part of the canvas. For instance, if you want to move your square block only one space down, it will redraw only the point the the square is on currently, and then draw it to the space that it needs to be. This creates a much smoother animation since instead of it drawing an entire area of a component, it just updates a small area that needs to be updated.
Great reply, thanks a lot. It's good to know which library I need to look into. I'll read up on it. I had no idea that blitting even existed but it sounds cool and useful. I'll check that out as well.
I love Jenkins, it tells you that you fucked something up right away. It also lets me test my deployment scripts and run end to end tests on my development server all while I'm drinking an Icee. Working with a team it's even more awesome because merging can be done continuously instead of all in a rush at the end of the project. Code review is so much easier when you know exactly when something went wrong. Also, when your project manager is asking for progress, she can just go straight to the dev server and see where you are! SO freaking awesome.
ack! Where's your menu bar?
For me,best reference so far: Manning: Spring in Action, Third Edition Agreed with previous replies, you should definitely have a firm grasp of the concepts before diving into a 'part' of spring framework. i.e. Dependency injection, Inversion of Control and Aspect Oriented Programming. And if you wanted some running samples from Spring In Action book : https://github.com/ultragaylord/spring-in-action-samples a work in progress though.
I don't think that a CLI version would even make sense, as it would need to get information from inside the IDE. Also I don't think there is a netbeans version yet. Regarding DI: What you describe is something that is called "half-assed-Builder". I'd rather go full-ass builder in that case. ;)
&gt; What is a NullPointerException and how to avoid NullPointerExceptions FTFY
Please stop spamming your blog/website.
Off topic question. I have been thinking about picking up MVC ASP.NET as a personal side project at home but I work 9 hours a day doing ASP.NET WebForms and I am exhausted from code when I get home. I try to avoid the computer after that. How many hours a week do you work?
I am a senior developer and have recently handwritten a parser (though for CSV, not XML) because we have a lot of data in those files and the runtime adds up when I'm roughly 50-70% faster than the old String.split based parser. Don't bash devs writing specialized versions of code, unless you've seen the cost-benefit calculation.
And your correctness, speed and maintainability are superior to SuperCSV? The performance you gained was in an architectural component where the risks are minimized and the benefits maximized? Perhaps you are the exception to the people making similar claims, mostly they turn out to have large gaps in their ability to make a comprehensive analysis, like every one of the people I've seen implement their own databases.
Great project, I was looking for something like this. Thanks! :)
What a great project, I can definitely see a use for this
The reason you hear about this is because of C/C++ developers, which were the largest crowd adopting java when it first came out 20 years ago. And so, you have an ass load of books that basically just regurgitate this concept to people who have no context of using C/C++ or other low level languages some 20 years down the line. The only people that need to know about this are C/C++ people coming to Java. You can't throw around pointers in memory with java. Despite some of the terminology overlap you are best advised to think of them as HANDLES. This variable of type X is a handle to an object in memory(heap or stack) and using the '.' operator dereferences it. You can have multiple handles to the same object laying around but the point is that once you have no handles to some object lying in memory, then the garbage collector comes to remove it. If it's a primitive, you can still think of it as a handle to its matching java object and java's 'autoboxing' will treat it as such. The scope of parameters is that they are handles that start and end their life inside the function block. 
Please explain to me what you are doing in a java subreddit?
True, but I don't see the harm in telling someone about an advanced method when it could benefit them later. If he wants to look into it, and implement it, then that's great. But otherwise, then you're right, redrawing the whole canvas isn't going to kill anything. 
if you have the pom.xml and all sources+classes what other information would be required? E.g. Jetty reloads automatically on every code change. The problem with the normal builder is that you'll need one builder per class ... hmmh, okay this could be an inner class as well. good idea ;)
Can't tell if trolling or just stupid...
Details of what you've got so far would be helpful, e.g. what stack (if any) you're using, what your running on (client side or server side java), and what you're trying to do. Best bet is to post those details to /r/javahelp, but don't expect everyone to do your Googling for you.
Why browser-based, and not in JavaFX or something?
You could use server socket.
Fantastic, thank you!
* Correctness: *no*, SuperCSV will parse CSV "more correct" according to standard (including escapes, multiline strings, ...) This however doesn't matter in my case, because the CSVs we get are mostly numeric data. * Speed: *yes*, my solution outruns SuperCSV for most of our use cases. As I said, those minutes add up. * Maintainability: About *equal*. My CSV parser has an easier interface, optimized for the use cases we have. So I lose some time for having to maintain the parser personally, but that's only one class that is used by a lot of other classes, which would get more complex had they used the SuperCSV interface. If I was more deluded, I'd call it a win. Perhaps I really am the exception in this particular case. However I also have re-invented and -implemnted a lot of wheels just for the heck of it. Sometimes these turned out to be useful. So I appreciate your criticism.
Agreed. I was "forced" to use JGrasp and by that I mean I was showed Java via JGrasp and used my choice of IDE/Text software. I wish I was using NetBeans.
Mostly because I wanted to have a project to learn more about JavaScript and WebSockets.
That's a good idea. I can add a button that appears when you scroll back that will jump back to the end. 
I am planning on adding more highlight/filter options. Highlight all lines that match a certain pattern with a certain color, and filter out lines that match a certain pattern.
Oh, i'm not a troll, I'm actually very pretty for somebody of my face. Pics if you want or GTFO.
I have. But I don't know how well they work, I've yet to use java enough functionally 
They work quite well, and get on it! Assuming you don't do anything else, it's the most fun you'll have all day!
Go was developed as a personal project, beginning with a very small group of engineers. I'm surprised by the suggestion that it was ever meant to be anything other than a general-purpose language. If it's part of anybody's plan for world domination I expect that the developers will be surprised to learn of the plan, and not in a good way.
n00b
Come on redditers, we all love to talk about how awesome our apps are... Let's go!
And very painfully. It was tremendously satisfying to finally delete the husk of the google2 hierarchy.
This idea excites me. :)
Nothing in your try block throws "IllegalObjectCreationException". You need to catch NumberFormatException.
Most interesting in recent times was a word search generator. There are a lot of subtle things to worry about. For instance, at first I generated random letters with each letter having a 1/26 chance, but I realized it makes much more natural-looking puzzles if you give each letter a different weight for their frequency in written text. So E has a 12% chance while x only has a 0.1% chance, etc.
My big dream/labor of love project [Retro World](http://www.scarypixel.com/). It's pure Java meaning it's all running under Java 2D using my very own engine. "Java 2D?!?!? Are you crazy?", they said. Well, it runs just fine on a Pentium 4 so I don't see any performance issues to worry about. It failed as a Kickstarter so now I'm continuing the work as a one man dev team... just as it has been from the beginning. The crowd funding was an attempt to get more people on the project as I didn't want it to take three years of my life to complete. Now I'm just working on perfecting a tool set to make this behemoth as manageable as possible by myself alone. I know there's a long road ahead but what else am I gonna do? [Trailer from the campaign](https://www.youtube.com/watch?v=1f9mQoSk_vc) Credit for the trailer music goes entirely to [Clark Aboud](https://soundcloud.com/clarkaboud)
 public static void saveFile(File f, String u) throws IOException { System.out.println("[INFO] Downloading " + u); BufferedInputStream in = null; FileOutputStream out = null; try { HttpURLConnection conn = (HttpURLConnection) new URL(u).openConnection(); conn.setRequestProperty("User-Agent", "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.4; en-US; rv:1.9.2.2) Gecko/20100316 Firefox/3.6.2"); in = new BufferedInputStream(conn.getInputStream()); out = new FileOutputStream(f); byte data[] = new byte[1024]; int count; while ((count = in.read(data, 0, 1024)) != -1) { out.write(data, 0, count); } out.flush(); out.close(); }catch(Exception ex){ //do whatever you want } System.out.println("[INFO] Download complete!"); } edit: closed the streams, i have this in my utilities class and i know i changed it in one of the copies, i guess i grabbed the wrong copy :)
Well, it was posted here a few weeks back, but I would like to talk about some of the cool things I am doing/have tried in my project, [Hakd](https://github.com/Rsgm/Hakd). Sorry for the wall of text, there is a tl;dr of what I have worked with for this. === To start off, it is a game. I spent half of the time on it trying to decide on a graphics engine. At first it was javaFX, which I did not like because the wysiwyg editor was only for static interfaces(from what I have tried). I really don't like javaFx. At one point I used lightweight java openGL, but it was not what I wanted. After several months mostly working on the structure of the game, I switched to the libGDX graphics engine(which is awesome). Later I tried out 3d programming and made a (crappy) 3d visualization of the internet in the game. I liked the idea, it was pretty cool, but it took more work to make it look nice than a 2d map, so I switched back to 2d. I worked on a lua interpreter in the game, and eventually dropped it for jython. Jython is pretty cool and I like it, but it gives too much power to python; python can see any private fields/methods if it has the object. I used to have an apache tomcat server in the game to use for the game store for the players browser. I let with perlin noise generate the maps and help with network spawning using [LibNoiseForJava](https://github.com/TJHJava/libnoiseforjava/wiki). I switched to opengl 2.0 instead of 1.0, for anti-aliasing and and shaders. I still don't know much about shaders, but I will be doing more with them in the future for this. --- **TL;DR**: I have worked with a ton of awesome technologies for this game. Here is a list of most of them: javaFX, lwjgl, libGDX, 3d programming, lua/python interpreters, apache tomcat, perlin noise/LibNoiseForJava, openGL 2.0/shaders.
Either do it like this: http://www.avajava.com/tutorials/lessons/how-do-i-save-an-image-from-a-url-to-a-file.html Or you can use ImageIO: http://www.mkyong.com/java/how-to-write-an-image-to-file-imageio/
That is really cool. How is the 3d done? Is it animations, or is it actually 3d models?
Thanks. It's my own 3D engine built on Java2D. Imagine something like [Sega's early Super Scalar arcade games](http://www.youtube.com/watch?v=eisCeK0HX8A) on steroids.
In the video, it looks like it is just scaling sprites, but your game looks much more advanced than simply scaling sprites.
I wrote a program that takes seismic data from several sensors, puts them through filters then computes RMS values for each channel (a vibration impact value) for every second. These values are monitored for exceedance thresholds, creating "event" reports and daily reports on the findings. 
Please be informative, this is rude and unhelpful.
Thank you very much ;). I wish I could recommend something for you to read but I was self taught through Googling alone without any books. I didn't go to school for this or receive any professional training. I've been programming in Java for about 7 years now but didn't really reach the competency to make my game until about 4 years in. But I'm sure anyone could reach that level in a lot less time as I was really slow and lazy about it at first (it was only an evening and weekend thing). If you want to see some more of my Java2D efforts check out this [Clip](http://www.youtube.com/watch?v=RW9ykHsIPhI). It contains some older Retro World footage but the rest shows some of my earlier programming attempts. Fun fact: I don't know a damn thing about OpenGL. 
You are actually right. It's a combination of scaling sprites and an SNES mode 7 style of rendering. 
Working on cool secret stuff at Google that I can't tell anyone about :)
I recently watched [JavaOne 2013 Sessions](http://www.oracle.com/javaone/sessions/index.html)
Scroll is broken on your website with firefox.
Why Java 2D and not JavaFX? The latter has a 3D scene graph you can use. Better animation support, too.
I'm currently writing an application that interacts with Amazon Web Services. It will allow you to search for your tagged instances and perform a DR failover to another AWS region/AZ. So it needs to scan the existing instances and volumes, get your input on the available zones, create new instances in those zones, wait for them to boot up, stop them, detach the new default volume, create new volumes based on snapshots, attach those new volumes to the new instances, shutdown the old instances. That's just the general breakdown, I'm building a UI on it and there are several little nuances with how it all works at AWS. 
Thank you very much. I'm sure you'll get there soon enough. The secret is time and stubbornness. If you believe in an idea don't let anyone talk you out of it. Just keep on pushing through with every moment you can spare.
How in hell is this in any way worth publishing? Or using? Or creating in the first place? This self-made hash map is worse than Javaâs (letâs face it, quite well done) `HashMap` in always every regard. * It only uses 10 buckets, ever. This means that put() and get() approach O(n) if the hash map ever gets a lot fuller. Well done! * No iteration. * Well, seeing that there is no iteration you donât actually need fail-fast detection of modifications. * Using the binary operator `&amp;` with a bucket size of 10 results in your hash map only ever using buckets 0, 1, 8, and 9. For something pretending to be a hash map this is pretty much complete failure. Please remove the article from the internet immediately. It can only do harm to programmers, existing programs, or Java itself. There is nothing good that can come of it. After having removed the article, please refrain from writing further articles until you have at least basic grasp of data structures, computational complexity, and binary operators.
Speaking of running smoothly, how did you get animation to run smoothly in Java 2D? As far as I know, there isn't a way to get vertical sync with J2D. It never really was meant for animationâ¦
Java stuff I have been working on recently (privately, not work): - Dictomaton: a library to store String sets compactly as finite state automata. Amongst other things, it supports perfect hashing and Levenshtein automata (get all words within a certain edit distance of a particular word): https://github.com/danieldk/dictomaton - Quzah: for one application I needed some functionality to pick N colors that are visually as different as possible (visualization of categorical variables). One cannot simply pick colors from the RGB space, since it is not a perceptual color space (distances in RGB do not correspond to perceived distances). One cannot simply pick colors from a perceptual space such as CIE LAB (many CIE LAB colors are not valid RGB colors). So, Quzah uses simulated annealing to search for n as most distinct colors in RGB space using CIE LAB space. https://github.com/danieldk/quzah Most other recent hobby projects were in Haskell or Go :). At work? Natural language processing and machine learning stuff.
How's Java at Google?
[Application](http://imgur.com/exdOYqQ) to search/browse/play my video collection.
Also see [A Javaâ¢ Parallel Calamity](http://coopsoft.com/ar/Calamity2Article.html) that was linked in the comments.
Decent, though it has quirks just like anywhere else. Lots of legacy code, but also a rich set of internal libraries for just about every hard problem you can imagine.
I wrote a btree based index for our internal chat tool. The chat tool is proprietary but the transcripts of chats you were part of is stored in html and saved locally. Its search function is a little slow. The files are parsed using jsoup. The btree is saved to disk so that whenever a node is serialized to disk, first the size of the node is written. And the children of the node are actually offsets into the file, and the root node is always saved at the beginning of file (offset 0). So to read a child you can just seek to that offset, get the size from that offset and read that many bytes and deserialize them into a node. When you write a child to disk you write its size first to disk. I'm sure it can be done a lot better (I think the serialization makes the building of the index slow). I did this as a side project at work so I could search chat transcripts from command line quicker than the proprietary tool's search function.
That looks awesome! Crazy that it failed as a kickstarter. Do you think you were asking too much?
An optical char recognition program for stock traders. It reads the screen of two other trading programs to observe the price of symbols, as soon as a price goes above or below a threshold, it buys or sells that symbol according to criteria set by user. It has to work in milliseconds, and ended up working quite good.
use gwt much?
Definitely some Bukkit plugins/programs. Extremely fun manipulating the world of Minecraft programmatically, so many possibilities.
I use xbmc for that 
The problem is that you need to find the tests that depend on the particular piece of code you just saved. While this could be done with a file system listener + dependency analysis, it's obviously easier within the IDE, which already has the on-save hooks and the intra-code-dependencies.
 List&lt;String&gt; names = new LinkedList&lt;&gt;(); ?
I wrote a Wicket web app for finding not merged commits in SVN, because at my work, we had so many projects and branches that it was too hard to check everything manually. Then I've added a nice interface for deploying components on our test servers (scripts execution via ssh), automated merging, versions replacing in new branches ala maven-replacer-plugin, and other work related stuff which eases my life. And I almost forgot on [Frame Switcher plugin for IntelliJ](http://plugins.jetbrains.com/plugin/7138?pr=idea) which now integrates multiple IDE instances via JGroups.
Asset management system with a graphdb store. * Allows users to create custom asset types at runtime * Uses CIM subset for initial asset types * Uses Groovy or JavaScript for rules * Time aware, so graph can be queried at anytime in its history * capable of handling one million of assets, tens of millions of edges, on single db server, tens of millions using TitanDB.
Can you give an example? Also, thanks for guava - it's very useful with my science applications.
And I'm doing the same over at Amazon :)
I wrote a program that sits in the system tray and send the current CPU and Memory usage over serial to an arduino. The arduino is connected to an LCD that graphs and logs the data.
That's a nice GUI. What did you use to make it? Is it something Spring is capable of? (I'm new to java webdev.)
Thanks. It's just plain old HTML+CSS.
When Google introduced Go, their response to many of the questions about its design, was that Go's first design objective was to minimize compile times when building massive systems. I was really struck by this because they emphasized it a lot, and because it didn't make sense to me - I had hoped for a more general purpose language. But it also made sense that they wouldn't design another general purpose language: we already have several, general purpose, compile to native langauges (the 'C' family) that are free in every sense of the word and which are extremely well known. I don't know either of Google's new languages - Dart &amp; Go - but with Dart the need and purpose is obvious. Go, on the other hand, makes no sense so one naturally starts to wonder why Google is pushing it.
I don't think we were. We had a very conservative budget and timeline to get it all done within a year and a bit. My share was only to cover my exact living expenses, which was less than I would get at my day job. The money was actually going towards building a team and not myself. Professional music composition costs hundreds per minute and good artists and coders don't come cheap. In the end it might have been a combination of the public's lack of understanding of the actual scope of the game and the timing. Retro World is a full on adventure RPG that includes fully playable games with unique art styles and gameplay (about 50 of them). This wasn't going to be a one trick pony. We also launched a week before the release of the Xbox One and Ps4 which might have hurt our chances at getting greater exposure. 
meet you one day there..one day..
Hundreds per minute? Then just use some different music. Shouldn't be too hard to have some simple looping 8-bit music - when you have money you can always add good music later.
I'm working on a templating engine called [Pebble](http://www.mitchellbosecke.com/pebble). It has all my favorite features from a disparate set of other templating engines combined into one. Inheritance, easy-to-read syntax, byte code generation, autoescaping, concurrent evaluations, filters, and more. It's feature-complete, I just wish more people would test it out before I feel comfortable giving it a 1.0 version number and a "production ready" stamp of approval.
Yeah, if you want professional composition you have to pay for it. There's actually a huge requirement for very specific and unique music to pull this concept off. If this had been a world building game like Minecraft I probably would gone with what you suggested. But being an adventure RPG where you are probably not going to replay the same things over and over, first impressions are lasting. I don't know if I would replay Final Fantasy 7 again because of some musical updates, but that's just me.
**Edit** corrected in the post! Thanks /u/javabeanguy Basically, a very nice tutorial, but you have one flaw in it: &gt;Whenever you initialize the array you must tell the size of each dimension. You can define the size of an array by adding a number value inside the brackets of the initialization process, which look like this: &gt; int[] myArray = new int[10]; &gt;This will create and initialized an array called myArray which size is 11, which means that it has 11 indexes. Reason why it has 11 indexes instead of 10 is because index 0 is counted in, The values would be set for each of element default values which would be zeroes. This is simply wrong. An array dimensioned like in your example int[] myArray = new int[10]; does not have a size of 11, it has a size of 10 with the index ranging from 0 to 9 inclusive. You can prove this by trying to access the index 10 and it will throw an IndexOutOfBounds exception. As a sidenote, you have a typo (the d is too much) at: &gt;This will create and initialize**d** an array called myArray which size is 11, which means that it has 11 indexes.
Mate thank you very much for this notification. I had fixed this before I published the article but it seems that I forgot to save it. I will fix it immediately. I appreciate that very much.
No problem! Keep up the good work! The tutorials are really nice!
Thanks. It's one of the things I actually struggle with the most. My plan was to get a real animator to come in and clean everything up as this is the limit of what I can do myself. Somethings look alright but others don't seem to be hitting the mark.
That's weird. Do you mean the twitter widget? It does the same thing on my Dad's laptop. My brother is my web master so he would have a better understanding of what's going on. My web design knowledge is limited to the barebones CoffeeCup gui editor.
A little more than a year, but I wrote an application that would, given an object's orbital elements, plot it in space, find its current velocity, and simulate it via Newtonian physics rather than Kepler's laws. I plugged in our current solar system, and every known asteroid (at the time, about 600,000 objects), then added a second sun-massed object and launched it on a path through the asteroid belt. [The video is on YouTube](https://www.youtube.com/watch?v=MPfpLDsvOVQ).
good explanation..
That's really strange. I've never seen that before.
Yes, I know that. But who is using JSF ;) ?
I suppose you are asking for Hadoop. This is the quote from wiki: &gt; "Input reader &gt; The input reader divides the input into appropriate size 'splits' (in practice typically 16 MB to 128 MB) and the framework assigns one split to each Map function. The input reader reads data from stable storage (typically a distributed file system) and generates key/value pairs. &gt; A common example will read a directory full of text files and return each line as a record." And this is the method in question that performs it: https://hadoop.apache.org/docs/r2.2.0/api/org/apache/hadoop/mapreduce/lib/input/FileInputFormat.html#getSplits(org.apache.hadoop.mapreduce.JobContext)
http://www.apache.org/dev/release.html *What are the ASF requirements on approving a release?* Votes on whether a package is ready to be released use majority approval -- i.e., at least three PMC members must vote affirmatively for release, and there must be more positive than negative votes. Releases may not be vetoed. Before *voting +1* PMC members are required to download the signed source code package, compile it as provided, and test the resulting executable on their own platform, along with also verifying that the package meets the requirements of the ASF policy on releases. http://tomcat.10.x6.nabble.com/VOTE-Release-Apache-Tomcat-7-0-51-td5012473.html
Cool man. Can you tell us any more about it? Are you using any interesting libraries or technologies? 
You might want to close the streams (file and networking). 
A powerpoint generator program. Adjust some parameters to the templates, and voila. In a few months, I bet that most powerpoint reports done at the company will be done automatically.
That makes sense. Thanks!
Ha! Fair enough. Well, Java 2D usually does its drawing through OpenGL or DirectX, so in that regard, you're not missing anything. I just figured it'd be a problem to not be able to do vsync, though at double the screen's refresh rate, it may not matter.
Wow. That was shocking.
Set your JVM options to take a heap dump on OOM error. http://docs.oracle.com/javase/7/docs/webnotes/tsg/TSG-VM/html/clopts.html Then grab the heap dump the next time you get an OOM, and load it into a heap analyzer. Visual VM should be in your JDK's bin directory, you can use it to look through the heap and see where your memory is going. Once you know that you can start tracking down your memory leak and trying to plug it.
Assigning null to fix a memory leak seems like a bad idea. Objects will be collected when they are no longer in scope or otherwise referenced. If you have a object lying around in scope that you don't need, you need to tighten their scope. As others have suggested, you need to do some analysis to find if you have a leak. It's entirely possible, that you don't have a leak per se and just need a lot of memory in which case you can increase the max heap size as an arg to the JVM.
Oops, thanks! :D
Everything looks fine, except your servlet is in the [default package](http://stackoverflow.com/questions/7849421/is-use-of-javas-default-package-bad-style). In your source directory create a directory 'foobar' and add package foobar; at the beginning of your Java file. Make sure you maintain that directory structure. The class file should go into WEB-INF/classes/foobar. Update the web.xml accordingly: &lt;servlet&gt; &lt;servlet-name&gt;hello&lt;/servlet-name&gt; &lt;servlet-class&gt;foobar.HelloWorld&lt;/servlet-class&gt; &lt;/servlet&gt; 
&gt; your memory leak and trying to plug it. You actually cannot have a memory leak inside of the scope of a GCed environment (in theory - there have been bugs in the JVM in the past.) The only way this is possible is if you are working with unmanaged resources (i.e, you aren't disposing of them properly.) The definition of a memory leak (in an OOP environment) is allocating an object and then having no means of accessing it. Forgetting that you still reference it somewhere isn't a memory leak. Anyways, just wait for objects to fall out of scope (and minimize it's scope as much as possible.) Explicitly assigning something to null for the purposes of GC is an unnecessary complication. It's more likely than not something to do with you allocating too many objects too quickly (faster than the GC is cleaning them up.) Consider reusing your objects. Definition of a memory leak: http://en.wikipedia.org/wiki/Memory_leak
&gt;The definition of a memory leak (in an OOP environment) is allocating an object and then having no means of accessing it. Forgetting that you still reference it somewhere isn't a memory leak. I'm not sure what Oop has to do with anything but this is the definition of a memory leak in a managed memory environment. &gt;It's more likely than not something to do with you allocating too many objects too quickly (faster than the GC is cleaning them up.) Consider reusing your objects. That's not how the GC works. At all.
This type of thing really isn't our (/r/java) forte... This is more likely a browser issue. You mentioned that you attempted to update the settings for Firefox. Did you try IE or Chrome? Same problem there? If you go into private mode do you have the same problem there? What plugins do you have that may block content? What security / virus software are you running - could it be causing this problem? We could go way more into opening the developer tools and viewing the HTTP traffic between you and this website - but I doubt either of us want to go through that. by the way -- what website is this? 
You have seen [Splunk](http://www.splunk.com/) right? How would you compare your project to it? I use Splunk almost daily and find it incredibly helpful for troubleshooting. Our admin team were the first to ask for this type of functionality. Now our developers are starting to love it. The business team is even starting to ask for access because our Java applications print helpful metrics on eComm usage. 
Whether the programmer forgets to call free on a pointer or forgets to deregister a listener, the memory stays allocated longer than the programmer intended. The memory is effectively leaked in either case, the difference is only pedantic.
&gt;No idea why you're getting downvoted. You are 100% correct! Because he is not 100% correct. Largely because there is no one true perfect definition of a memory leak. Most people refer to a memory leak as any situation where their program is incorrectly using more memory than it should. The old most common way was to lose reference to something you allocated. But times change. Not a common way is to create List and then replace it with a reference to an invocation of subList. The code seems correct, but you inadvertently keep references to lots of old data - holding on to more memory than you intended. I think most reasonable people would describe the problem as a memory leak. The functional difference between accidentally keeping a reference and forgetting to free a resource is really a trivial manner. The programmer forgot to do something, and now is waisting memory. 
&gt; I'm not sure what Oop has to do with anything but this is the definition of a memory leak in a managed memory environment. The definition doesn't make sense outside of an OOP environment? &gt;That's not how the GC works. At all. Implying there is a defined standard on how the GC has to collect data - which there isn't? There are many different GC implementations (across java alone) in different individual JVMs. Second of all, the GC runs periodically in the background. It is configured to optimally only collected data when it needs to - it is also configured (optimally) to minimize the CPU time it consumes (more items to collect, more CPU time consumed) it is a trade off between memory and cpu time. It doesn't guarantee collecting all the garbage per a given cycle. If you produce too much garbage too quickly, the GC will fall behind, causing large spikes in CPU time, an increase in the number of cycles run and allocating more heap space (to keep up with the lack of garbage collection.) Anyways, any decent compiler will allocate onto stack space rather than heap space if the object is short-lived (and living in a smaller scope) so you usually don't worry about allocating new objects frequently inside of a small scope.
I find it useful for debugging and step through. Eclipse does that, and then some.
Congratulations, Memory Leak is now an incredibly ambiguous term for you! Do I have a memory leak? I don't know, it's entirely subjective. If your definition of a memory leak is "a variable that can be accessed but I don't think it ever will be." &gt; forgets to deregister a listener, the memory stays allocated longer than the programmer intended. Deregister a listener to a service still being referenced and used? What? How is that a memory leak?
http://en.wikipedia.org/wiki/Memory_leak It is formally defined. I'm not sure where you derive your ambiguous definition from.
I had heard that employers dont like things like github,however I dont know how true that is.
From your description, I'd recommend looking into the Model-View-Controller (MVC) paradigm. The Model reflects the data in the background. The View presents the data from the model. The controller handles the interaction between the Model and the View as well as the business logic behind. Together with MVC, you'll probably need the observer and listener design patterns. For a quick intro to design patterns, i'd recommend: https://www.udemy.com/java-design-patterns-tutorial (free course on Udemy)
Skills matters does skillcasts of most of their talks on their website. Pretty good stuff. Not just java either. Also the uncle Bob clean code videos are pretty good fun. I'd post a link but I'm on mobile. Google it. 
Wikipedia is pretty much the opposite of formal.
that helps. ty :)
In my system there is a pseudo-user, called 'common', who, generously, provides software, data and services to the rest of users (there is only me but... ;-) ). VideoFiles and a database, with information about them, is part of the data offered by 'common'. The database is automatically updated (checking if VideoFiles are added, removed or modified) in one of 'common's services. VideoFiles database's information is gathered using bash scripts: ['SearchForMovieInInetDatabase'](http://imgur.com/zpQKPi9) which uses google &amp; imdb to find information (notice that poster imagefile URL is included) about movies or TV series. ['VideoFileInfo'](http://imgur.com/IWCRoxF) which finds technical information about VideoFiles (parsing ffmpeg &amp; mplayer output). Another script, 'UpdateCommonVideoItemsInfo' ([Dummy VideoFile -videoclip renamed- added](http://imgur.com/ttVX9uQ)) ([Dummy VideoFile removed](http://imgur.com/QIDOlNL)) is invoked every hour to check/update the database. The Java application ['SearchAndPlayVideoFiles'](http://imgur.com/CjHF7tr) doesn't use any external libraries. I have written all of it (except for ['VTextIcon'](http://imgur.com/hKn9TgI), a class I found in Internet) using the Netbeans IDE. I am a fan of code re-use. 'SearchAndPlayVideoFiles' is very small because it uses packages that are part of 'common's software offerings to all users (just me). Some of those packages were written by me a long time ago (I don't use Java very often and I have to re-learn it again and again :-( ): [Package1](http://imgur.com/aEE5bd9) [Package2](http://imgur.com/Hg0UOMn) [Package3](http://imgur.com/8pilQbD) [Package4](http://imgur.com/CKyvEuy) [Package5](http://imgur.com/NCup4u1) [Package6](http://imgur.com/2PsRpxB) [Package7](http://imgur.com/xoZ9By7) Notes: ScrollPaneShowingArrayOfPanels uses a trick: It simulates a Panel full of Panels but in fact it never contains more panels than those that can be seen. Another application, 'ShowVideoItemInfo', that also uses 'VideoInfo' package, allows me to integrate VideoFiles info into the [system's book library](http://imgur.com/ktVcI6q) (another 'common' resource).
You can also have nested and inner classes. (To answer #1)
Also, you should really try it out yourself. 
&gt;The definition doesn't make sense outside of an OOP environment? Not sure if that's a statement or a question but Yes it does. [You can have memory leaks in C](http://en.wikipedia.org/wiki/Memory_leak#A_simple_example_in_C) Anyway you're discussing semantics. If you accept that in Java, memory leaks are defined as "Objects you forget to dereference within reasonable time", then you agree. 
Tons of places to find other definitions of a memory leak. 1. [Stack overflow](http://stackoverflow.com/questions/312069/the-best-memory-leak-definition) 2. [Red gate](http://www.red-gate.com/products/dotnet-development/ants-memory-profiler/walkthrough) - the developers of a memory profiler for .NET. They should know what they're talking about, right? 3. [Oracle.com](http://www.oracle.com/technetwork/java/javase/memleaks-137499.html) - troubleshooting memory leaks. Authorative source, no?
Some general things to check * Are you having any large objects or collections in static variables? * ...In cache objects? * ...added to event listeners? (The event dispatcher will reference your object) 
What? The definition provided. Of course you can have memory leaks in C. The simplified definition I provided (mentioning object reference) does not make sense in a language like c. Don't you see how incredibly subjective and ambiguous \useless your definition is?
You can find stack overflow questions stating the opposite. You've basically recoined 'memory leak' to 'any problem with memory allocation' making it a completely useless term. The definition becomes subjective in your terms and impossible to objectively identify. A true memory leak isn't possible in Java without a flaw in the GC. Anything else is poor resource management.
but putting more than one main() method in a class means that you would have to overload it. It would just make your code really annoyingly hard to understand.
Sure you can, for example loading the same class repeatedly, e.g. through misuse of log4j, a classic.
Oh, the inner classes can be public, not that it is sane to do so. 
The second question explicitly mentioned "a java project", so I thought at least of a package with multiple classes with a main method, not of putting multiple main methods in one class. Besides, the Java VM only accepts the main method with one specific signature or gives an error otherwise: Error: Main method not found in class MainClass, please define the main method as: public static void main(String[] args)
This is a good reminder that our code doesn't live in a frictionless vacuum. Printing to stdout *does* take time. Especially with threads, the effect may be more pronounced due to synchronization.
To quote your source &gt; In computer science, a memory leak occurs when a computer program incorrectly manages memory allocations. And &gt; the developer is responsible for cleaning up references after use, typically by setting the reference to null once it is no longer needed and, if necessary, by deregistering any event listeners that maintain strong references to the object. I'm not sure why you're so militant about it. Nor why it seems so ambiguous to you. Wether the programmer forgot to explicitly free memory or forgot to cause a situation that would allow the memory management system to free the memory seems like a distinction without a difference to me. 
No, my definition is "some memory that ought to have been released, but wasn't because of programmer error". It's not really ambiguous, just less strict than yours.
You're missing the point here and arguing about the semantics of what gc and memory leaks are. The problem is that too much memory is being allocated and not released in a timely fashion. This problem exists independently of what we call it and OP conveyed his issue well enough that someone could provide a reasonable solution. Your nitpicking and calling people wrong through semantics has achieved nothing. 
&gt;The definition doesn't make sense outside of an OOP environment? Sure it does. Haskell has a similar brand of leaks. Or we can use GC in C and still have memory leaks of this nature. &gt;Implying there is a defined standard on how the GC has to collect data - which there isn't? No, I'm implying that no GC is going to throw an OOM exception without first collecting all unreachable allocations, so it doesn't matter how fast they're being allocated, just that they're still strongly referenced.
[JVM language summit](http://www.oracle.com/technetwork/java/javase/community/jvmls2013-2013900.htm) is great. Not all the talks are about Java, but all things JVM instead, which might be even better.
&gt; You can find stack overflow questions stating the opposite. And your wikipedia link references a stack overflow question for the "formally defined" definition. I think that you've just shown the opposite of your own point. 
I was trying to debug an interaction with a library once and was wondering why the application wasn't hitting a particular piece of code when I expected it to. Turns out, the debugger was running .toString() on all the variables which caused some code to be executed before it was fully prepared... (please, please don't run state changing code in your .toString() especially in a library!)
My response was the only one that pointed that out. I am the only person in this thread that actually mentioned the issue of allocating too many objects too frequently.
It's become clear you're incapable of civil discourse. Goodbye.
&gt; Oh my. Please point me to where in the "standards of jvm gcs" that a 'oom' (I know what it means but its a stupid abbreviation) cannot be thrown until all garbage is collected. How about the [Java Language Specification section 11.5.2.2](http://www.cs.cornell.edu/andru/javaspec/11.doc.html#44395): OutOfMemoryError: A Java Virtual Machine has run out of either virtual or physical memory, and the automatic storage manager wasn't able to reclaim enough memory to satisfy an object creation request.
A profiler will show up both issues regardless. 
"... But is still accessible via some means." Here's an example: you create an object, reference it as a listener for some service and then leave the scope it was declared in. Is it a memory leak (by your definition)? I don't know. It depends. Does it do anything when communicated with and provided new data by the listener? Was that the intended behavior? Its completely ambiguous.
I remember writing a really simple socket-based project in Java in college. It was supposed to operate like a simple FTP server with a client able to connect, select, and eventually download files. When the client selected the file to download, and sent it to the server, the server was able to open a new socket and start sending the file before the client was ready to open its listener socket. The files being sent kept having the first few kb of them lobbed of. Adding just a few ms delay fixed it. I'm sure adding a println statement could fix it. I actually just had the server wait til the client sent an OK message informing the server that the client's socket listener was ready.
Allocating too many objects too frequently will not cause an OOM error unless the objects are still referenced somewhere. For example, this code (assuming that the JVM doesn't just optimise it away) does virtually nothing other than allocate memory but it won't fail with an OOM: private void t1(){ int i = 0; while(true){ Integer a = new Integer(i++); } } This code, however, will fail almost immediately: private void t2(){ int i = 0; List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(); while(true){ list.add(new Integer(i++)); } }
Splunk is all kinds of awesome. As I understand it, Splunk does a lot of analysis of your data. TailStreamer is much more simplistic. At its current stage, it's basically a browser-based `tail -f`. I hope to add more functionality as time goes on, but I doubt it will ever compete with Splunk :)
Ugh... take a look at your first example in a profiler. Notice the build up before the GC cycle? Obviously, in this example, on your machine, your heap is very large relative to the build up. If you imagine someone doing that everywhere in their code (with heavy weight objects) you can appreciate how it can become an issue. Your examples also aren't fair at all. The second will exhaust _any_ heap. The first will only exhaust a heap only if it allocates enough between gc cycles and causes enough fragmentation in memory - which is impossible with just an integer if your heap is as large as it is. Even if it doesn't consume enough on its own, it can make a difference in memory intensive applications.
Of course, that's typically how garbage collection works. Allocations come from the free space until it's consumed at which point a GC is forced. I don't see an OOME though.
No.
You won't with just an integer on the heap. Try many different sized objects and a significantly smaller heap to allow for fragmentation and memory exhaustion. Either way, the first is much more difficult to scale than the second for a test scenario and the examples you provided to make your point aren't fair.
No, because main is a static method and super cannot be used from a static context. If you wanted to invoke the main() of a class that you're extending then you can invoke it just like any other static method by qualifying it with the class name. eg: private static class A{ public static void main(String[] args) { System.out.println("hello world"); } } private static class B extends A{ public static void main(String[] args) { A.main(args); } }
This isn't really java. This has to do with incredibly low level (probably native) implementation that is platform specific.
Yeah, Splunk indexing is powerful. Once it reads in data (which it also uses tail I've heard) it looks for key/values and does a very fast index, which is searchable using their out-of-the-box GUI. Their search functionality is the most useful part - since our logs grow so fast and are distributed across many machines. Good luck. 
&gt; state changing code in your .toString() That's... horrifying
Its done all the time (ie for implementation of a iterator, where the outer class implements iterable)
:-)
I have not but I shall now. Thanks!
Wasting memory is FAR different from a memory leak! A memory leak occurs when the running code cannot access the object in stored memory.
On that note, I just submitted a bug report to that library about this.
&gt; In object-oriented programming, a memory leak may happen when an object is stored in memory but cannot be accessed by the running code TIL it is impossible to have a memory leak in C++
The main framework to use for server applications is the standard one from Java called Java EE. It contains pretty much all you need like a very good web framework (JSF), a great ORM (JPA), modern managed beans (CDI) and tons of other stuff to help you with validation, security, transactions etc. Read through the Oracle Java EE tutorial to get an idea of the breadth that it covers.
Usually JPA defines a persistence unit through the META-INF/persistence.xml file. Starting with Spring 3.1, the persistence.xml is no longer necessary â the LocalContainerEntityManagerFactoryBean now supports a âpackagesToScanâ property where the packages to scan for @Entity classes can be specified. This file was the last piece of XML to be removed â now, JPA can be fully set up with no XML.
check out: https://www.bestvendor.com/best/software-development and search for Java on http://www.ohloh.net/
Would it really have hurt you to simply try it?
I'd recommend following a few tutorials, such as [this](http://www.vogella.com/tutorials/SpringDependencyInjection/article.html) one (I haven't used that tutorial myself, but have used others on the site). You should also read up on dependency injection. The concept itself shouldn't be too hard to grasp.
Good: * Spring MVC - makes writing web apps much easier once you get it set up * Apache Commons - lots of good reusable stuff, that's better tested than other libraries. Bad: (though this is a matter of opinion and some other people will likely disagree with me) * Maven. It takes an annoying task - build files and keeping track of jar files - and with the Maven tool turns it into an even more chaotic, time consuming, and difficult task. We started using it at my job, and it's just a never-ending stream of time-consuming excuses. Long story short, in the end we ended up with needing to do more work than we did before we used Maven. Used to be that once the jar files were in source control, one just get the latest and everything worked. Now you have to manually update them on your local machine (because Maven is flaky with the corporate proxy, so we have to use a local Maven repo, necessitating keeping them up to date manually), Maven still screws up our Eclipse project files sometimes when you do an update, to get things running every developer has to create and edit Maven install files in a weird .m2 directory - btw, windows explorer can't handle directories with "." in the name so you have to do it via the command prompt. Etc etc. 
Thanks! I was wondering, is it safe to say that Spring is basically just it's own implementation of JEE? And if so, what benefits does it offer over JEE (if any)? 
Doesn't the Eclipse console do word-wrapping? While not absolutely java-specific, that would be quite relevant to Java.
OK, I'll look into that. Try a google search and see what I come up with. Thanks
I've interviewed people for decades, and haven't found mechanistic tests like these to provide reasonable indication of suitability. Gotchas don't tell you where a person's strengths are, they are for pumping the interviewer's ego. As a technical sanity test, I have people write a simple service, which we then discuss, concentrating on various design concerns from API design to the Java Memory Model.
&gt; Long story short, in the end we ended up with needing to do more work than we did before we used Maven. Used to be that once the jar files were in source control, one just get the latest and everything worked. Now you have to manually update them on your local machine (because Maven is flaky with the corporate proxy, so we have to use a local Maven repo, necessitating keeping them up to date manually), Maven still screws up our Eclipse project files sometimes when you do an update, to get things running every developer has to create and edit Maven install files in a weird .m2 directory - btw, windows explorer can't handle directories with "." in the name so you have to do it via the command prompt. Etc etc. It really sounds like you're using Maven completely wrong in your job. I don't know how you have it setup, but here are my thoughts: * Jar files in source control just seems wrong to me (if you have the code to build the jar, use that - if not, use a build tool). * I've never heard of Maven screwing up Eclipse project files. I used both together for quite a while, and never had issues. I'd definitely suggest using IntelliJ over Eclipse though, as the Maven integration is far superior to the equivalent Eclipse plugins. * You should never *need* to touch the files in your .m2 directory. * Windows explorer can handle directories with . in front of them without issue, unless you're using something prior to XP (though I haven't tried this). In fact, directories with . in front are a pretty standard practice for cross platform applications, as it signifies a hidden directory in Unix systems. See programs like GIMP, certain Eclipse plugins, Android, IntelliJ, Minecraft, etc. * Maven should have no issue with proxies, and I've used it through a few corporate proxies before. Sounds like your network guys should have a look at this. * The whole point of Maven is *not* to update jars manually. Just bang the version into the pom.xml, and away you go. * You might want to look into your company using its own Nexus for Maven. That way you control what jars/versions are there, there shouldn't be issues with the proxy, and it'll be quite fast to transfer from an internal Nexus to your local repo. Maven really isn't too difficult to use, but I guess it can be used quite incorrectly. Every problem you've mentioned doesn't sound like Maven's fault though, and rather a lack of experience/knowledge on your company's side.
I agree with this. Even having a candidate write a couple FizzBuzz or similar style programs on a whiteboard and discussing it is better than a bunch of things that any decent IDE will mark with a squiggly red line. If you want to test someone's grasping of object oriented principles, given them a task to design a simple object model. You are going down the right path asking questions about threading if your problem space depends upon threads -- but if it does I would get into more complicated issues than things that can be looked up in a Javadoc for an API. Bad interview questions are ones that an IDE or Google can answer for you. Good questions are ones that require the candidate to prove they can work in the language or environment. So instead of asking them to interpret some contrived class hierarchy example, ask them to produce one for a quasi-realistic problem space. Get them to show you by doing rather than testing textbook knowledge. Depending on the time available, I would recommend one or two problems that can be worked out on the whiteboard or in an IDE/collaborative interview tool, and then design one program that should meet some set of requirements, but requires debugging. Give them the code and ask them to fix it. I wouldn't include purposeful syntax errors or the like in this. Instead have it have some bug or flaw that would be similar to what they will be working with in your legacy system. Definitely engage with them. Get their thought processes. Collaborate with them if required. Ask them to step through the code they write, ask them to write and run through a test case for their code.
So, the catch here is, never end a log line without the correct punctuation. Or at least a blank space.
&gt;In most JVMs, the Object.hashCode() doesn't have anything to do with memory location Serious question: is this something people actually assume? And if they do, how does it 'get' them to make this a gotcha? &gt; A hashCode() has to remain constant. That's only partially true. It has to remain constant in a given running JVM and only if any data used to calculate .equals() hasn't also changed. Assuming hashCode() is constant and immutable is a gotcha. &gt; Object.toString() does something surprising rather than useful What else should Object.toString() do? You could make an argument that many of the JRE's basic types (including arrays) should have usefully overridden implementations of toString(), but the base implementation can't really make any assumptions about what class it's in and how to represent it. 
Seconded. Well. Thirded.
Are you guys serious? Did you actually read what I wrote?
Web based Java IDEs: + [Ideone](http://ideone.com) + [Cloud nine](https://c9.io/) + [Compilr](https://compilr.com/) + [Codenvy](https://codenvy.com/) + [Koding](https://koding.com/) Maybe one of those is suitable for your needs.
This would be clearer if you used different variable names in your pass by value example. Don't use "sb" in each. Thus when you set "sb=null" it is clearer that it is not setting the other sb to null. 
ANOTHER templating engine? What's the BFD of this vs freemarker/velocity?
Besides the already suggested web based IDE options you can also just SSH into a server and compile/run your code. You could either edit the code remotely (vim or emacs, etc) or use one of the iPad text/code editor apps that will sync your files.
The biggest thing that differentiates Pebble from freemarker/velocity is it's easy-to-use and powerful [template inheritance](http://mitchellbosecke.com/pebble/documentation/tag/extends). You can find similar inheritance patterns in templating engines from other languages such as [Django](https://www.djangoproject.com/), [Twig](http://twig.sensiolabs.org/), or [Jinja](http://jinja.pocoo.org/) but the java engines are lacking (with the exception of [Rythm](http://rythmengine.org/) but that's another story). This feature really shows it's value when you're building very large applications. Pebble also has a much more readable syntax (in my humble, subjective, and highly biased opinion) which is also very consistent with the other templating engines I mentioned above. This consistency helps transition developers from other languages to Java.
Wish I could upvote this response more. Many of the questions on r/java lately have been pure lazyness. Just try it or use google!
To be honest, I haven't tried it yet. I just had a list of possible online IDEs handy so I thought I'd post. For most of my stuff (except SWING/GUI) Ideone is sufficient for now. But from what I remember from looking at their site, it should be possible. I think there is even some form of a tutorial, or instructions somewhere on the site.
Should add that you don't want to unblock unsigned applets if you can avoid it. Instead add exceptions for specific sites in the Java Security settings. &gt; chat itself uses parts from different domains so now I cant load it because of that Can you determine these domains? Does the applet come from a different domain than the chat site for example? 
Why is `transient` an answer for question 1? It's not an access modifier. You could have package-private as an answer instead.
&gt; Are you having any large objects or collections in static variables? Nothing except quite a number of String objects (final and static). They're SQL statements to be shared by DAO instances. &gt; ...In cache objects? ...added to event listeners? (The event dispatcher will reference your object) I think I don't have these in my web application (at least not created by me, I don't know if the libraries or frameworks like Jersey does that). I'll keep monitoring the memory consumption and see what is going on when OOM happens.
Appropriate as a screener for an entry level candidate. I wouldn't insult any higher candidate with such a test. Experience and knowledge are much better gleaned from discussing past projects, discussing knowledge of technologies and getting a feel for their design process by simple design problems that can be expanded into something that sparks discussion. 
I had this going on in a game project for way too long a period of time. I had a good hard crack at the issue initially but then ignored it for ages because I could still see other results and progress as long as I lived in debugland. Not printing out my debug spam was throwing off the timing enough to cause a crash on initialisation.
I'm guessing to weed out the people who really have no clue.
That sir is crazy talk. I mean employers don't want you posting *their* code on public github repositories but being able to look at your personal code on github or similar is damn near a requirement for some places.
Unfortunately the persistence.xml is the only deployment descriptor that is still mandatory. I'm hoping this gets addressed in JEE-8 but all your persistence units have to be defined in the xml file. You can define all the persistence units in the xml and then programmatically switch to the one you want at runtime
What's the type of the Connection object ?
this exception line java.sql.SQLException: org.sqlite.JDBC makes it seem like your jndi connection or jdbc connection isn't setup right. Make sure all your capitalizations are correct, you have the right driver .jar file in the right tomcat /lib directory, and that the /lib directory is on tomcat's classpath.
no, root cause is: Caused by: java.lang.ClassNotFoundException: org.sqlite.JDBC I don't think this is it, but it might be worth a shot, when you (OP) copied in the jar, did you to chown it to tomcat:tomcat? Also check if the jar is not corrupt. 
Yeah, I was hoping that the obvious wasn't the problem :)
Great list.
I don't see an endless loop. But I do see what is wrong in your logic. First, reread the requirements about what n can and cannot be and double check your if statement where you assess num's value. Second, your count should not be going all the way to 71. Third, you will not be putting all these asterisks on separate lines because you are never adding a line break in there. So after the inner for loop, do a System.out.println(); And most importantly you are overriding the value your user entered in num once you start the for loop. I recommend a new int variable, called n, and put the user's value in there. Then use that as the upper bounds in the outer for loop.
Your inner loop should only loop for the line number your are on? for ( num = 1; num &lt;= 71; num++ ) { for ( count = 1; count &lt;= num; count++ ){ }
Effective Java by Josh Bloch. 
finished 2nd edition long time ago :)
As the user that Tomcat runs as can you `cd` into the `lib` folder and `unzip sqlite-jdbc.3.7.2.jar`? If you can, is there a `org/sqlite/JDBC.class` when you do? Are you sure `$CATALINA_HOME/lib` points to the directory you think it does?
Thank you for your help! I got it. Is it customary to place the solution code?
Yes. Learn Java EE 7 first...or Java EE 6 if you work for a company that takes forever to update its app server. Then branch out to Grails. Word of advice: don't toss the term J2EE around. While some people may not understand the significance between J2EE and Java EE, people in the know will think you're stuck in the JDK 1.4 days, which could hurt your chances of landing a job. In Java EE, there are no "plug-ins". And IDE, such as Eclipse or NetBeans, uses plug-ins. I'll take some liberties with my interpretation of "plug-ins" Here's what I'd recommend to learn when you're just starting... Here's the prerequisites: IDE - NetBeans (the easiest IDE for beginners...doesn't mean it's not meant for professionals as well). Using this IDE, you'll be able to focus on actually learning about Java EE and your app server without being confused and distracted by IDE nuances of Eclipse and IntelliJ (they're great IDE's, don't get me wrong). Maven - a tool you can use to build and bundle your project and download dependencies from a central repository on the web App Server - GlassFish 4.0. App servers, such as GlassFish, WebLogic, WildFly, provide you with frameworks that you can leverage. Think of these frameworks as "plug-ins". Basically, follow the Java EE 7 documentation and tutorials offered by Oracle. Focus on getting the hang of JSF 2.2, Bean Validation, and CDI first. Once you get the hang of that, add the JSF component library PrimeFaces to the mix. After all, we live in an ever-increasing ADHD world where people are more wowed by the front-end. JSF 2.2 works very well with HTML 5. Once you have that down, move on to EJB 3.1. This is where your business logic (and db interaction) should reside. Don't stuff your CDI backing beans with tons of code. Move on to JPA next. JPA handles db interaction. IMHO, this is the hardest concept for newbs (there are exceptions of course). Learn how to use JPA together with CDI and EJB so you don't have to worry about time-consuming boilerplate code that will send you off on tangents, which you should focus on later, depending on use cases. Finally, learn JAX-RS....aka RESTful web services. You can use JAXB to convert Java to JSON and vice versa. Once you've gotten the hang of this, then check out Grails. However, be aware that there are other languages competing with Grails, which is built on Groovy. There's other languages built for the Java JVM: Scala, Clojure, Ceylon. Here's a list: https://en.wikipedia.org/wiki/List_of_JVM_languages
Most certainly! It is not uncommon for the original asker to answer his own question. In those circumstances, it is customary. And although this isn't exactly that kind of forum, it is never frowned upon.
Try some of the certification prep books for the Java SE stuff (since they are fast paced) and then the [Java EE tutorial](http://docs.oracle.com/javaee/7/tutorial/doc/).
yes, the name is deceiving. Even some developers trip over this. i think it's enough to know how variables (primitives or objects) behave when being passed into a method call. btw, the example below is a good one. also, the HANDLE metaphor helped me alot when I was confused. when passing by value, you have more than one handles, changing where one of the handles point to doesn't affect the other handles (though when you use one handle to change the inside of the object, other handles will get back to same changed value) when passing by ref, you have one and only handle, if you change where this handle points to, then you can't get access to the original object anymore.
Interesting. How do you handle escaping of Pebble syntax itself in templates. The thing I dislike about Freemarker is that it is simply not easy to escape text containing ${ or #{ which happens to Freemarker syntax. Also, any chance you would be releasing it under a more common license?
Disclaimer: I know nothing about anything. But I am curious and have google. According to the Enterprise JavaBeans 3.0 spec (which I understand to be the current one): &gt;Within Java EE environments, an EJB-JAR, WAR, EAR, or application client JAR can define a persistence unit. Any number of persistence units may be defined within these scopes. &gt;A persistence unit is defined by a persistence.xml file. The jar file or directory whose META-INF directory contains the persistence.xml file is termed the root of the persistence unit. In Java EE, the root of a persistence unit may be one of the following: ... Having read only that one part, I can tell you that persistence.xml isn't required *unless* you want to define a persistence unit. I don't know what a persistence unit is, but it sounds important. If you want to go outside the spec, certain implementations can have other solutions. I hear Spring has one, but that you aren't using that one. Perhaps googling the particular solution you're using can help you?
Yes. This is because printing actually waits until console has acknowledged the data. Also consoles are designed to throttle output because 60s' printer terminals couldn't handle more throughput.
lots of good suggestions in other threads http://www.reddit.com/r/java/search?q=books&amp;restrict_sr=on
That's why I'll usually reserve another line for the ++ statement. Makes code easier to read. Instead of doSomeThingWith(index++); I'll write doSomeThingWith(index); index++;
How do you start tomcat? On what platform are you? If you run through catalina.sh, the classpath is sourced specifically from the startup.sh, AFAIR (it's been some time since I hacked with tomcat), so if you are on *NIX you may want to add your sqlite-jdbc.jar there.
I'd add a few: * [log4j2](http://logging.apache.org/log4j/2.x/) (instead of log4j), using asynchronous loggers will speed up the parts of your code that use logging. * [Eclipse](http://eclipse.org) is also a great IDE (though most cool kids today seem to prefer IntelliJ) * [lombok](http://projectlombok.org) for auto-generating boilerplate (like getters, setters, equals&amp;hashcode, toString). Regrettably, the IntelliJ support is incomplete; on Eclipse it works like a charm. * [infinitest](http://infinitest.github.io) is an eclipse/intelliJ plugin that will on saving a file find all tests that have ties to that file and re-run them. * [trove](http://trove.starlight-systems.com) is a high-performance collection of collection classes for primitive types (e.g. TIntHashMap). Last time I checked it performed equal or better to all other implementations I could find in most use cases. They also use less memory than the default implementations. * javadoc (you already have that one ;-) is great for API documentation. * [FindBugs](http://findbugs.sf.net) statically analyses your code and finds problematic statements, e.g. null-pointer access, incompatible printf argument lists, etc. * [joda](http://www.joda.org)-time/money, etc. Those are ready-made implementations of time/money units with a sensible API. Note that with Java-8, there is a new java.util.time API that mostly copies the design of the joda-time classes. * [Caliper](https://code.google.com/p/caliper) is a great framework for microbenchmarking. JMH (from OpenJDK) is even more powerful, but the learning curve is much steeper than with caliper. * [JVisualVM] is usually part of your Java distribution (though with most linuxes you will have to install it as a separate package) and allows you to watch a running VM, sample CPU and memory usage, threads, and much more.
I'm pretty sure everyone going into their first proper development job felt the same. As long as you are putting in the hours in regards to learning and developing yourself, you will be ok. I'm almost into my second year at my job and still get the feelings at times like I have no idea what I'm doing here. One thing that helped me early on was my team leader / mentor. After my first 6 weeks or so I asked him for a 10min catch up on how things were going with my performance and development. He was honest about the things I needed to step up on, but also in the areas I was doing well. This was a real confidence boost at a time I was considering checking out the jobs section of the local paper! So I would say talk to your management. You are a new grad so not expected to know everything yet. But if you are struggling letting them know early should prompt them to help support you before it becomes a major issue. Chances are they think you are doing fine, and the struggle is all in your head. Is what happened to me. Hope my ramble helps S 
Came here to say Effective Java. Seeing as that's covered, I'd say getting into Guava is another thing that can benefit almost any Java developer.
&gt; The biggest thing that differentiates Pebble from freemarker/velocity is it's easy-to-use and powerful template inheritance. I would argue that this should not be the responsibility of the template engine, but rather an upper layer that manages the templates and assembles them. This is what Apache Tiles does. It does support integration with popular engine framework but add structure to them. Other than that, the escaping feature is nice (I did not had time to test it in deep yet), but I would like to have it based on the type of template (not only HTML) so that we could plug new escaping engines based on context.
The jar file does contain the JDBC.class. The relevant environment variables are as follows: $CATALINA_LIBDIR = /usr/share/tomcat/lib $CATALINA_BASE = /var/lib/tomcat $CATALINA_TMPDIR = /var/tmp/tomcat $CATALINA_HOME = /usr/share/tomcat I will try setting a $CATALINA_LIB variable as well and report back.
Thank you. I'm running linux and launching using an rc.tomcat script. I've not dug into this file deeply but it calls startup.sh to launch the server. I'll report back if I get results.
Tutorialspoints has a "quick" tutorial on Spring that I liked. It gives you a short introduction to the common parts of the Spring framework. http://www.tutorialspoint.com/spring/spring_pdf_version.htm
Thanks. I'm likewise convinced it is a classpath issue; I'm basically unsure how to go about getting tomcat's classpath settings to cooperate. With the suggestions here I suspect we'll get this thing running soon.
There are no particular advantages of Spring that I can think of. It's mainly a competitor of Java EE. There are some differences, but in broad lines there are more similarities. Spring may have some more small high-level utilities packaged up, while Java EE has a leaner and more elegant bean model. Java EE has several implementations. Most are very lightweight, eg WildFly and TomEE. There are also some heavyweight implementations like the ridiculous heavyweight WebSphere (best to avoid). There's only one Spring. That one Spring implementation is more heavyweight than WildFly and TomEE, but less heavyweight than WebSphere. 
Any particular reason I should use this over Commons IO?
As for frameworks/modules, you could look [in another recent thread](http://www.reddit.com/r/java/comments/1yt8h0/tools_and_frameworks_for_the_modern_java_developer/).
Original discussion in [/r/bigdata](http://www.reddit.com/r/bigdata/comments/1ytmc0/looking_for_a_cool_payed_summer_project_in_big/).
I agree. We all have felt like this during the first X year(s). The most important thing to remember is that everyone of those technologies, at its core, solves exactly one problem. If you can identify this core problem for each of the technologies then you are pretty well off. If you can't then ask a colleague: "What does X actually solve? Why don't we do X by hand?". You will only learn the details if you are "forced" to work with the technology itself. For example, I know which problem message queues solve: If a component crashes, you really don't want to lose any messages that were on their way to that component, so you queue them until the component is back online. But up until now I didn't have to work directly with a message queue, so I don't know the intricate details of transaction management for those queues. And that is ok, because if I had to, I would read up on it. 
There is a severe shortage of 25 year old computer science graduates with 10+ years of coding experience and willing to work 80 hour work weeks for less than $40k per year
Only if it works.
What does 'ps -ef' tell you about the java process's actual classpath, -Dcatalina.home and -Dcatalina.base? Where is the common class loader configured to look in $CATALINA_BASE/conf/catalina.properties?
Wow. You have given me quite a bit to research and learn. o_o Thanks! I will be sure to refer to it as "Java EE" from now on!
I've taken multiple Java classes over the course of my college days thus far so I think I'm good with SE so far. (Or at least as far as I can tell) This plus what harmonic gave me will come in handly as I learn Java EE (see I got it right this time) and server/client interactions. Thanks!
Here are some libraries that I have used, and one I haven't, to improve your code: 1. Apache commons: Actually, a set of libraries, but there are many useful utilities in there that can make your life easier. 2. Google Guava: Same thing as Apache Commons with respect to purpose, just smaller and with many different utilities. 3. SLF4J: There are others you can use, but I like this one best because it can use the others with a single consistent interface. Regardless, logging is very important especially if you do stuff on a server. 4. Trove Collections: I haven't used this one yet, but it looks like something that can make a significant improvement in the performance of your code depending on what you're doing. There are many, many others. With the exception of Trove, these are the ones that I have used on multiple projects with good success.
You may want to consider looking into Guice instead of Spring dependency injection. It apparently results in a lot less frustration and is on the upswing as a technology.
Nice work!
Thanks!
you can add directories to the classpath in the catalina.sh (.bat) file
I appreciate your willingness to Google. I wouldn't have come here without Googling so perhaps you and I are of the same vine. I figured that given the sheer magnitude of expertise on reddit, someone who had already done it (or proved it was unobtainable) would see it and be available to comment.
The article is very poor, it just gives a very broad but wordy overview of how static analysis can help with security issues (oh and one sentence about improving code quality). IMHO, The best thing about this article is the link to [FindBugs](http://findbugs.sf.net) - there it is, you can go there directly and skip the article now. I haven't tried HP fortify, but I am curious why the freely available PMD and CheckStyle (who, granted, have a different goal than FindBugs) are missing. A short excursion to Wikipedia shows 14 java-related tools (Ok, they also add ASM, which is more a library, so the actual number is probably closer to 10). So, why is Static Code Analysis important? Because it catches a broad class of bugs (or simply bad code) without the need of a programmer to come up with a test scenario.[An older reddit thread](http://www.reddit.com/r/programming/comments/nov8m/john_carmack_on_static_code_analysis/) of an interview with John Carmack has further analysis should you want it.
1. Everyone feels lost when they started; I joked with my manager a month or two into my job that I finally felt like I was able to pretend like I knew what I was doing. Took another year or so to really feel like it. 2. Out of your list, the only important one is "design patterns", which are covered very well in [Effective Java](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683) - if this book isn't required reading at your company for recent-grad hires, you'll have a leg up on everyone else simply by reading it. You'll score double points if you organize a reading group to go through it together. The other items, while important, are all just individual technologies, and you'll pick them up as you need them. I for instance don't know maven, spring, jetty, netty, *or* hibernate to any particular degree, but I'm confident if put on a project involving any of them I'd get up to speed reasonably quickly. Definitely at least skim the docs, understand the goals of these projects. 3. Your coworkers are (or should be!) your greatest resource. Ask them for help if you're confused, they'll usually be happy to provide it. 4. Your manager is (or should be!) your ally. (S)he wants you to succeed, and as long as you keep on pushing yourself and improving, will have no reason to even consider asking you to leave. Tell him/her you feel like you're struggling. Ask for projects that will expose you to areas you feel weak on, preferably one issue at a time. Ask for a mentor, someone specifically tasked with helping you get up to speed. These are all reasonable requests of a new hire, and your manager's job is to make you successful. 5. The one crime you can commit is not admitting when you're having problems. Obviously being a "self-starter" is important, so do try to find answers to your problems yourself, but don't take that overboard and spend hours looking for something that a more experienced person could help you with. Nobody benefits from you floundering around on a problem for half a day when someone could point you in the right direction in 15 minutes. Two of these five points (3 and 4) hinge on something out of your control - your company culture. Any good company fosters an environment where confusion or lack of knowledge is met with help and support, even across teams - not judgment, isolation, or ego-trips. If you feel like you cannot reach out to your coworkers or your manager then you're in a bad place, and you should get out. At my office I chat with anyone I need to, including very senior engineers, about issue's I'm having whenever I want - I just walk over and talk to them, and (barring emergencies) they're always happy to help, as am I when (yes, sometimes!) the inverse is true. For all the talk of ping pong tables and free lunch, this is the biggest perk I can think of. If that isn't your experience, shoot me a PM, [we're hiring](http://www.tripadvisor.com/careers/) :)
Nice idea but i would not call it minimal. Minimal is Fn + Prnt Scrn :) If you accept pull request i will maybe collaborate if i find some time. The code does not look very good at some places. For example ScreenSnapper.java having 1200 lines - uff, eating exceptions, not using braces, long methods, and so on ... 
Most of those arguments are due to his IDE and not Java itself.
For a pet project, maybe. Guice is nice and simpler than Spring. I also think its equally/more capable at DI. The problem is that Spring is *so* much more than just a DI Framework. Its incredibly likely that his company is using Spring for a lot of the codebase -- JDBC, Integration, MVC, etc. 
I started with Python, and I loved it. Absolutely loved it. I took a computer science course as an elective, where they used Java, and god damn it, it just made more sense. Going back to python and working on old projects get confusing because of the lack of strongly-typed variables and what not. There is nothing wrong with Python, but for me... Java just makes more sense.
static typing and interface can help for big project but not all project are big project
In his defense, java makes it possible to create great editors. For example, if java would allow macros or such shit, writing an editor and making guarantees about refactorings wouldn't be possible.
Declaring method parameters as final makes no difference to GC at all. javac will actually emit exactly the same bytecode final or not. 
#1 reason why I hate C++. Because Fuck macros. 
It helps for smaller projects too.
This is a really poorly designed test. A lot of questions are just testing "gotchas" and most questions can be answered by a quick internet search or learn in 2 minutes. Test them on things that they *can't* look up. Have them write code, how they would build a system that does X, ask them about past projects, but **don't** waste someones time with this test. It will tell you nothing about the person you are interviewing. In all seriousness, if you tried to give me this test (I've been programming java for 10 years, and programming professionally for 15), I would refuse the job because it would tell me that the people that I would be working for aren't very bright.
Static typing and interfaces can help for big projects but not all projects are a big project ;)
J2EEis a large stack. I wouldn't bother with EJBs, at least at first, but your definitely should pick up the whole request/response cycle, JSPs, what can go in web.xml, and taglibs, and then JSF. Not many companies are using J2EE7, but it wouldn't hurt to know what it introduced. 
I hear "Java is slow" a lot of the time. Sure, it's not as fast as C but it's not really *that* slow. I think most complaints are with Swing though. EDIT: I'm being downvoted for speaking about what others have mentioned? Tough crowd...
And the vast overwhelming majority of enterprise applications in use today. Millions upon millions of lines of code, most of it Java. 
We have all these hotshots coming into our Enterprise ready to tell us old guys why Ruby is so much better than Java. I simply challenge them with a real-world situation and ask them to use Ruby to solve it. They usually do and then I change the requirements on them. They grumble and fix it. Then I change the requirements again... then they start to get it.
Please stop writing article solely on the relevance/irrelevance and/or goodness/badness of Java. Jesus fucking Christ. 
"Java sucks" is simply en vogue. New coders get a taste of the latest loosely-typed, functional programming languages and jump at it as if everything that came before it is some sort of monolith. New languages spring to life and die quiet deaths as often as galaxies in the universe, but there are very good reasons certain languages are still on the tip of everyone's tongue when the discussion crops up, even 20-30 or more years later. Java is portable, verbose, strict and flexible in all the right ways. There is a time and a place to use it as the primary language...not every time, nor every place, but its relevance is here to stay for a long time.
Here's an alternative: https://leanpub.com/b/modernjava8 #shamlessplug
In many cases, running on the JVM is faster than equivalent code compiled from C, as the bytecode can be optimized at runtime once the JVM sees which paths are visitted the most.
There is a world beyond simple webapps from cool startups, you know.
Lack of closures is probably my biggest gripe, but you can't really call suckie on millions of human-hours of proven engineering. Java works well in many cases.
I'm sorry, but I don't "get it"... How is Java supposed to be better than Ruby (or any other language) when dealing with arbitrary requirements changes? This is like arguing between using screws and nails. There are some cases where one is arguably better than the other, but in most cases either can be used. And using either one, if you build something and then change the requirements, you're going to end up with a lot of frustration and holes. 
yes! Two minute WSDL queries, here I come! I wonder if an actual human gets up from a terminal, goes to a file cabinet, pulls out a manilla envelope to find the answer, walks back to the terminal, and carefully enters the response in raw xml and then clicks send.
Refactoring and static checking at call sites is generally easier with strict typing. 
The optimizations occur for running applications. C is usually faster and takes far less memory for a one-off process.
Heh, for me it's almost the opposite. I started with Java and recently played around with Python. I love how little I have to type ;P
I've just been learning Java and I have quite a few reasons I feel it sucks that have nothing to do with LoC. * Lack of operator overloading (except for strings) drives me crazy. trying to remember what "a.compareTo(b) &gt;0" evaluates do is a pain in the ass and does not feel intuitive at all. Why can't I just write a &gt; b * Limitation of Generics. I want to make a static method that takes a generic comparable type so I define `public static void foo(Comparable[] a)` and the compiler complains at me. Googling for solutions takes me deep down a rabbit hole of java internals that I want to know as little about as possible. I just want it to work. But it doesn't. Still haven't figured this one out so if anyone wants to chime on the java way to do this... * One class per file is fine most of the time but on the occasion when I'm just messing around and want to throw a couple small classes together this restriction is a pain in the ass. I feel like Java developers spent way too much time trying to protect us from ourselves. But maybe that's just because I've spent 10 years coding in c/c++
Sure, and I agree that helps for some types of requirements changes. For others, strict typing may require tons of cascading code changes throughout the app where dynamic typing may just let you dump a method on a class and have it work. I've seen pkimbrel's argument ("language *X* better supports requirements change") used in support of *both* Java and Ruby by various proponents of either language. The problem is, both sides tend to cherry pick changes that "their" language handles better and ignore or downplay other changes that may be problematic.
I see Ruby as a one-trick-pony. Maybe I'm missing something, but all I've seen are "blog" examples with Ruby. There's so much more in the world of computing that requires more than a data-driven UI. Now, don't get me wrong. Java is not the right tool for ALL jobs. If I AM doing a DDUI - Ruby could be the right tool. The problem with all these arguments isn't that Java is better or Ruby is better - all languages have their place. **Use the right tool for the job.** Back to my requirements change, G_Maximus hit the nail on the head. Strong typing, good development environments, standards, etc., are a must-have when working in an enterprise with dynamic requirements. I'm sure Ruby will get there, but it's simply not there, yet. ** Edited for clarity
...and BTW - this is a great list!
ad operator overloading - there very very few times when I missed it in Java compared to a lot of instances of hating it in C++. But this was mainly because of overusing it. ad limitation of generics - what are you trying to achieve? I don't see a problem implementing static method which works on generic list ... ad one class per file - I think this is one of the very good design decisions of Java. If you need to just quickly hack together few classes, you can use static nested classes which is basically what you want.
&gt; Limitation of Generics. I want to make a static method that takes a generic comparable type so I define public static void foo(Comparable[] a) and the compiler complains at me. Googling for solutions takes me deep down a rabbit whole of java internals that I want to know as little about as possible. I just want it to work. But it doesn't. Still haven't figured this one out so if anyone wants to chime on the java way to do this... Two ways to do this. [This is the first way](https://gist.github.com/rice2007/9216230). The method that will be using comparable will need to have the generic declared to extend the Comparable interface. [Here is the second way](https://gist.github.com/rice2007/9216299). The class is declared generic while extending the Comparable interface. This allows you to use the compareTo() method without defining it yourself.
No, those are all good points tbh. Generics are tacked on and don't mix well with arrays at all. This isn't a huge problem since most devs don't use arrays now. You can use: public static void foo(Collection&lt;? extends Comparable&gt; a) This will accept a collection of any object which extends the Comparable interface. For instance if my class Blah implements Comparable, I could pass a List&lt;Blah&gt; into that method.
Hello! I'm a bot who mirrors websites if they go down due to being posted on reddit. [Here is a screenshot of the website](http://i.imgur.com/Q6JLiRt.png). *Please feel free to PM me your comments/suggestions/hatemail.* _____ [^FAQ](http://www.reddit.com/r/Website_Mirror_Bot/wiki/faq)
Nice thank you. So in Java, the pros almost always use a class that extends Collection instead of an array?
When have you needed closures in java?
Thank you desrtfx, The this.turn() works for my artisticturtle program but when I type the codes into my app I must use tref. Also what do you mean by pass the method a parameter?
Java 8 comes with closures, and they're actually quite concise. 
Not always. The big difference is arrays are fixed in size while collections are dynamic in size. One place you'll see arrays is with varargs. public static void method(Comparable... cArray) { } You can call that method like `method(c1, c2, c3)` and all the args will be turned into the elements of an array or you can pass in a Comparable[] directly.
Well from an algorithmic level I'd imagine some collections are implemented as dynamically resizing arrays. They can't all be linked lists. I haven't even touched variadics in java, that's an interesting case. Thanks for mentioning.
exactly what you do with sizeParamVar (line 5 in the first code block) You should work with that variable for all the distances that you draw (forward) - probably as a factor, the angles (turn) should not be affected. 
Yes and your explanation with " Forgetting that you still reference it somewhere isn't a memory leak." ignores that an object that from the design perspective should no longer be there and from the program logic is no longer accessible in any sensible way still takes up space, resulting in the program loosing free space. In the end there is no practical and only a very pedantic theoretical difference between the two.
Yes, and hopefully not only the pros :) [Here](http://stackoverflow.com/questions/6100148/collection-interface-vs-arrays/6105705#6105705) are some downsides of using arrays compared to collections. 
Java does not really protect you from integer overflow issues, it just wraps back to Integer.MIN_VALUE again which can cause nasty bugs if you are not careful. Some libraries can protect you such as using guavas [IntMaths.checkedAdd(int, int)](http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/math/IntMath.html)
All languages suck. If they don't suck, then you've drunk too much of the cool-aid. I swear, every time I learn a new language I go thru a series of stages. 1. (How do you work this thing): this language sucks because I can't use it like language 'X' 2. (OK I get it): this language is better than language 'X' because you can do this this way. 3. (in the bowels): ok, so now I need something non-standard, how do I get there from here? 4. (Acceptance): This language sucks, but I understand why it sucks and I'm ok with it.
&gt; in any sensible way Subjective.
No completely objective, quite a few languages are define their operations in terms of observable effects and side effects, the same way we can say that an object that only affects observable behaviour by hogging memory is a memory leak. 
&gt; For others, strict typing may require tons of cascading code changes throughout the app where dynamic typing may just let you dump a method on a class and have it work. Consider the person charged with maintaining the code that has arbitrary methods 'dumped in' as you say. I've been there, it sucks, and I have no kind feelings toward the developer who did it.
Just being pedantic, but Python is strongly typed, same as Java. Difference is the static vs dynamic typing. 
I have been learning Java for the past 2 months and really like it. But then, my only other experience with coding is VBA, so what do I know lol.
when you did Connection conn = ds.getConnection(); What's the import line used for the **Connection** object ?
Compare to is as such to allow for the Collections.sort et all to be specified a comparator implementation. Having a useful method name is much easier to have as a programmer than trying to guess the overload of an operator...
Ok that looks fine. 
On the one hand your argument makes sense, since every language that targets the JVM must do so within the confines of the Java object model. On the other hand, there is a very diverse set of languages that DO run on the JVM. You mentioned Scala, but there's also Javascript (Rhino and soon Nashorn), JRuby, Jython, Scheme, Groovy, and many more. So, the problem comes down to defining a way to express the semantics of a given language USING the Java object model, which all these languages have done successfully. Additionally, Java 7 introduced the invokedynamic JVM bytecode which further simplifies the problem, and drastically increases performance (see JRuby). Finally, 'antiquated' is a curious word choice. The Hotspot VM has been state of the art for some time. Java continues to refine and advance the state of the art in the area of GC's and jitting.
I started with Java, dabbled with Python last year, and am currently getting used to C++ this year. It seems that both of those programs helped make C++ easy to get used to since it seems a lot like Java with the variables and braces, and I'm able to think of something in Python and basically convert it into C++.
No test without javascript = no thank you; JS should be for progressive enhancement, not providing core functionality.
Do we really care about a five year old blog post whining about what a seven year old blog post by some douche who was trying to sell his Ruby books says? Come on /r/java, have some confidence and quit worrying about what other communities think. Besides, I went to a JRuby conference in MPLS a couple of summers ago and laughed when I found out how many projects moved from Ruby to JRuby because they discovered Ruby didn't scale. Yep, they needed servers written in boring old java.
Very practical. The JVM is a well established and well supported, so if you wanted to make a new language that runs on a managed runtime environment, it's very practical to compile your language to bytecode rather than developing, maintaining, and promoting your own runtime environment for it. &gt; This mean that it is dependent on java which inherently limits Scala to how java and the JVM progress? Only the JVM should be limiting Scala. If I remember correctly, the JVM spec is even now free of any references to the Java language. The JVM is slowly getting better to supporting different languages like markdacoda said with invokedynamic said too. &gt; How can Scala ever be a successor to Java when it requires java to run? It requires the JVM to run, and that can either still be maintained in one language or another. Scala could also be ported to a different environment (although lose access to the Java Class Library). My guesstimate though is that at least one useable version of the JVM will be around to use until we all die.
and haskell s place is academia.
&gt;strict typing may require tons of cascading code changes throughout the app And in the case of Java, IDE's like Eclipse and IntelliJ make those cascading code changes a one step operation.
Neither of these work for static methods. 
any and all event listener patterns would greatly benefit from closures.
Not pedantic, very relevant. Though I'm sure most of us knew what he meant.
Java sucks. .. Everything else sucks more. .. I've had to deploy a lot of Java applications out in the field, and yeah there is a lot of bloaty crap out there, but honestly every other platform that exists has it's warts, and Java's warts I can live with.
Basically to clarify even more what I am trying to do. I have a String Species and I want to return another String Element based on the first letter in String Species. If it is between A-G I set it to fire, if it is G-N I set it to water, and there are two more settings. I might be going about this completely wrong, but I was going to use charAt[0] of species in an if statement and then have it set it to the desired Element if it matched the criteria 
Well, I don't agree with you. * I've never had **any** problems with keeping jar files in source control. Maven **created** the idea that it was "bad" somehow. Can you name a single practical issue it would cause? I've never been able to find a single one that actually mattered. Whereas, say, seperating your ui controller from your database layer - I could name several practical advantages. I can tell you it's created more work and more hassle to do so, though. * Here's a link to the first thread I ran across on an issue that sounds like ours - http://stackoverflow.com/questions/10564684/how-to-fix-error-updating-maven-project-unsupported-iclasspathentry-kind-4 When trying to fix it, we had no problem finding other users that had had the same problem. * You need to touch them to set them up. And from what I understand from the install instructions for our project, you need to touch them to update your local versions of the jar files. * You cannot create them with Windows 7 Explorer. It will give you an error message. You have to use the command prompt. It's just a minor hassle, but it's one of many. * It does, and since Maven doesn't provide anything useful (imo), it's just one more needless hassle. You can read all kinds of complaints about any open source software trying to deal with corporate proxies if you do a search - it's not just Maven. * That's exactly what I'm saying - we ended up having to do it anyways, negating the small convenience that Maven was supposed to provide. * Using a local Nexus is what they were trying to do. It was just one more unnessary hassle that Maven suggests you do, that you don't have to do at all if you don't use Maven. &gt; Maven really isn't too difficult to use, but I guess it can be used quite incorrectly. Every problem you've mentioned doesn't sound like Maven's fault though, and rather a lack of experience/knowledge on your company's side. This is Maven boilerplate response - it didn't work for you? Well, you must not be using it right? Don't you have weeks of time to invest in becoming an expert on it? Maven just doesn't provide any functionality that would save enough time to justify that kind of investment - even if everything you wrote was true. The task it replaces - is not that hard to do by hand. Using Maven is like hiring someone to open your front door for you. The hassle of hiring, paying, and dealing with having someone standing there all day is far, far greater than the hassle of just opening the door yourself when you need to use it.
Mongo has its own problems. NoSQL is not a replacement for SQL. Know what you're getting and giving up with each solution, SQL included. Use the right technology for the problem.
(1) charAt is a method, not an array, so it is used with parentheses, not square brackets. That is to say, using it should look like this: charAt(0) not this: charAt[0] (2) charAt is a method of String - you need to call it on a String object. String str = "Test"; str.charAt(0); // 'T' (3) &gt; I have a class named &gt; public String Element(String Species) This is not a valid class declaration. Do you mean you've made a method? Can you post the full code? Also, variable and parameter names in Java are traditionally written with camelCaseNaming. The first letter of the identifier should be lower case. If the entire identifier is one word, then it is all lower case. If it's a compound word, then each new word has its first letter capitalized. You also have this problem here: String Element = ""; 'Element' should really be named 'element' for standard Java style. Upper case naming like that is used for classes (eg String). 
And the power function can probably just be standard Math.pow (unless OP is working in some very odd environment). Math.pow(2, 2 - 1);
Yes sorry I meant method. Ok I will change that to lower case. So can I use something like this: String element = ""; public String element(String Species){ if (str.charAt(0) == 'A'){ element = "Fire"; } } ? Would that set the String element to Fire if the first letter in the String Species is A? EDIT: Sorry for the weird formatting. It seemed to have automatically formatted part of my post and not other parts
Assignment is outlandish
How so?
I've worked professionally on 5 or 6 different Ruby (on Rails) apps, none of which was a DDUI. It worked for some of them, not for others. I've also worked in 3 Java/Spring codebases. Also, 2 of the Ruby apps were JRuby running in Tomcat. So anyway. Ruby is a perfectly full-featured OO language, not unlike Java, save the dynamic typing and the rather terse syntax. In terms of performance, it's slower at heavy computation, but most (web) apps don't do this anyway, and generally in my experience at least performance in a web-based application ALMOST NEVER has to do with how rapidly the language can count to fifty million, or how fast it can generate big prime numbers. Anyway, I do Ruby now by choice, so obviously I enjoy it. I miss IntelliJ and the tooling around Java a lot obviously (the Ruby tooling, in comparison, is so utterly inadequate that I find it faster to just write in vim with a few plugins, as do most experienced Ruby developers I know), but by no means is Ruby fit for only blog type things. Hell, even Rails is fit for more than that, and that's just a popular Ruby framework. Edit: and obviously I agree with you: use the right tool for the job. I just think Ruby has a *somewhat* broader range than you do. I worked on a ~150KLOC Rails codebase, and let me tell you that is not fun (150KLOC in Ruby/Rails is probably equivalent to at least twice that, maybe 3 or more times that in Java/Spring, in terms of application scope, but with none of the refactoring / use analysis support of a Java IDE. Seriously painful)
Macros can be great, if used appropriately.
Haskell gets this knock (almost always from people who never wrote a functioning application in Haskell btw) because it is strictly functional, meaning state and side effects are forbidden (but are pseudo-replicated by the use of monads). Haskell is somewhat impractical :) but GHC is one of the most sophisticated and elegant compilers ever written, the performance has gotten very impressive recently, and functional paradigms are starting to become less obscure than they were 10 years ago. Haskell is worlds better than something like Scala, and perhaps slightly better or slightly worse than something like Clojure or F#, when you take platform / etc into account.
Start each line with four spaces to put it in the "Code" formatting block. Hit enter twice to force new lines to actually appear on new lines. What you've done here: String element = ""; public String element(String Species) { if (str.charAt(0) == 'A') { element = "Fire"; } } has a few problems. First, your variable 'element' is declared outside of your new method, which you've given the same name of 'element'. So that's the first thing I'm going to change: public String element(String Species) { String element = ""; if (str.charAt(0) == 'A') { element = "Fire"; } } 'element', the variable, is now within the scope of 'element', the method, and so you will be able to assign "Fire" to it. The next problem is not really a problem, but it's making this explanation confusing, and that's that you have both a variable and a method with the same name. So I'm going to do a rename here. public String getElement(String Species) { String element = ""; if (str.charAt(0) == 'A') { element = "Fire"; } } This is just to make things easier to explain. The next problem is that you have declared your method like this: public String getElement(String Species) 'public' is the visibility - don't worry about that for now, 'public' is a good default choice when you're beginning. 'String' is the *return type*. This method needs to have a 'return' statement somewhere, and it needs to give a String. In this case, 'element' is the variable you want to return, and it does happen to be a String. public String getElement(String Species) { String element = ""; if (str.charAt(0) == 'A') { element = "Fire"; } return element; } The next problem is that, in the if-statement, you're referencing a variable called 'str', which I just used as an example. You don't actually have any such variable - what you probably want to use charAt on is Species. public String getElement(String Species) { String element = ""; if (Species.charAt(0) == 'A') { element = "Fire"; } return element; } And again, this isn't a very good naming scheme, so I'll rename: public String getElement(String species) { String element = ""; if (species.charAt(0) == 'A') { element = "Fire"; } return element; } And now this method does what you're intending, sort of. Right now, if 'species' starts with 'A', then you get "Fire" back. In any other situation, you get "" back - the empty string. You'll want to add else-if clauses to fill in the rest of your logic that you detailed in the original post. Now to actually use this method, you need to call it from somewhere. Since you didn't post your full code, I'm just going to make some assumptions here and give a small example. public class SpeciesTest { public static void main(String[] args) { String species = "Aardvark"; // just because it starts with A String element = getElement(species); System.out.println(species + " is element " + element); // "Aardvark is element Fire" } public String getElement(String species) { String element = ""; if (species.charAt(0) == 'A') { element = "Fire"; } return element; } } Hope this helps. Feel free to ask if you need any more help.
I'll agree. I started in Java and have moved onto Python. Python can be extremely difficult for large code bases for exactly the reasons mentioned in the article. Especially if you're not running any tests, its very easy for a large Python code base to become scary to maintain.
`BubbleSort&lt;T&gt; extends ArrayList&lt;T&gt;`? `int compareTo(T that) {return this.compareTo(that);}`? That's some highly questionable code.
Thanks for your response! I'm aware of the general sentiment. I was hoping to get a more personal account of a detractor. I for one find Haskell's type system to be bodacious. Immutable everything and functional purity prove a challenge when you aren't use to it, but generally they seem to be the right idea for wrangling complexity of entangled code.
That does help very much thank you! I do have another question. Lets say I am trying to do this in a subclass and want to use the string I have set in my main of my super class. I have a class named creature with a series of methods that perform different actions and in my main method I have different objects (I believed they are called) such as creature a1 = new creature("Aardvark", then I have a series of ints set to different things based on methods in the class creature) I want to use the string in a1 and evaluate it based on the first letter in the name and return the proper element string. I have 4 different "creatures" called a1, a2, a3, and a4, but I want my subclass to assign my element String based on the first letter in the name of any of the creatures. Is that possible? 
Great enterprise support. Lots of developers. Stable. Easy. Powerful.
Looks really nice, works fast. Love it C:
I don't understand it either. I asked for help when implementing Comparable on generics, and that was the answer I was given. I looked at it skeptically but tried it anyway. I mean, what did I have to lose? Lo and behold, it worked. I don't understand why. You can copy and paste that code as-is to run it. It'll print you the unsorted and sorted array.
It *works*, yes, but it's bad design to make BubbleSort extend ArrayList, it's completely unnecessary to have BubbleSort implement Comparable, and BubbleSort should be a method, not a class.
First thing I notice here is that in the constructor, you have the assignment: this.element = element; There is no parameter called 'element' in the constructor declaration, so 'this.element' and 'element' both refer to the field, and you aren't really initializing it. You can simply add the method I provided to your cuteCreature class (which should really be named CuteCreature, again) and then do this instead in the constructor: this.element = getElement(this.species); I don't see what need there is for a class to handle just the logic of setting the element of a CuteCreature based on its name. Well, really, you said 'subclass', and this, strictly speaking, means we're getting into OOP inheritance, and that certainly is not needed here at all. What you may have meant is an inner class, but again this is really not needed. Adding a method to this existing class should do. Tl;dr take the method I gave at the end of my last post and copy-paste it into your CuteCreature class. Then, in the constructor, change this: this.element = element; to this: this.element = getElement(this.species);
I tried putting the location in my C: of the file I put in the project folder. It wouldn't compile.
Alternatively, try [OkHttp](https://github.com/square/okhttp) and use its setSslSocketFactory() method.
You dropped this: /s
[Static methods are considered poor because they are more difficult to test.](http://googletesting.blogspot.com/2008/12/static-methods-are-death-to-testability.html) 
It appears you are having lots of syntax errors. An IDE, like eclipse will catch these errors for you and show you how to resolve many of them.
If it wouldn't compile, I am going to guess you are putting backslashes in your path. If you have backslashes they need to be escaped in Java strings. This is done by putting double-backslashes. ImageIcon icon = new ImageIcon ("c:\\path\\to\\your\\picture\\devil.gif"); edit: I tried your code with a gif on my system and it does work if you put the correct path in. 
Does this (is it supposed to) change any state besides cachedStr, though?
I cut my teeth on Java, and I've missed it ever since moving on to other languages (around the time of Java 1.7). I'd need to see some changes before I could move away from the significant investment I've made in .net training now: * Oracle has to drop the bundled Ask toolbar. I don't care if you can unselect it during installation, It doesn't fit a professional programming language to have that sort of garbage bundled with the VM at all. * Java could really use a more elegant solution for installing and updating it on Windows. I humbly suggest that Oracle consider working with someone like Ninite as their official distribution and update platform for Windows. * I have not done anything with JavaFX, but I hope it's quicker than Swing and uses font anti-aliasing by default. * Work with someone line codeacademy to get a good free Java course up. Make sure to cover the creation of Jar files fairly early on so people don't spend the first few months wondering how to make something they can distribute without batch files for execution. * Come up with some kind of response to archiving software stealing the jar file association - it couldn't hurt to add a diagnostics program to the Windows start menu that can fix the Jar file association and even point out when a JVM version is not ideal for the host computer (such as a 32-bit JVM on a 64-bit system and OS). I have had a difficult time adjusting to Windows Forms, and an even harder time adjusting to WPF. I used to hand-code all my swing applications - UI designers are not natural for me. I seriously miss making user interfaces with Swing and I regret that I didn't learn about Java Servlets before moving on to other programming languages. That's my $0.02.
Didn't realize had to do the double slashes. Awesome. It compiles now. Thank you.
You have to do double slashes because a backslash by itself tells Java you want to insert a special character. See here (scroll to the bottom ): http://docs.oracle.com/javase/tutorial/java/data/characters.html
So the file name is a string. That makes more sense now. I didn't make the full connection of how the compiler would read it at first. Thanks, that's a lot of help.
Enterprise typically refers to scalability. JavaEE includes the servlet API, JMS (Java Message Service) API, EJBs, among other things, which makes developing scalable, distributed applications easier. 
hmm what were you trying to do?
You can't just do that and then not explain yourself, I'm pretty sure we would all like to learn the troubles of the JVM. Also, congrats on the cake.
I appreciate the feedback on Ruby. I'll have to check it out. It sounds like it's come a ways since I last looked it.
True platform independence is the biggest part of it, IMO. I've worked at a few large institutions and noticed a very similar application pattern (to be fair, I've worked for all insurance companies - so that may have something to do with it): 1) The dev machines tend to be Windows (although Macs are starting to make in-roads - but that reinforces the point) 2) Runtime environments tend to be mainframe or *nix based. Before Java, we'd use C or C++ to build "cross-platform" applications. However, we'd have so many macros and #ifdef statements to deal with platform I/O idiosyncrasies that we'd end up with spaghetti in a hurry. But as we moved to Java, we found that we could develop an app on a PC or a Mac, build it on a PC or *nix system, and then run it on a PC, Mac, *nix, or Mainframe system - all with absolutely no modifications. Heck, even in the binaries that we built could be simply copied between platforms and used (except mainframe - Java is a pain on an IBM mainframe - stoooopid EBCDIC - bad memories - glad to have moved on). Add in a huge enterprise support base for Java (i.e. Oracle and ironically IBM) and a huge workforce to back the language up - you have a winner. Of course, integration was always an issue - but web services seem to have filled that gap quite nicely (assuming everyone actually follows the standards *cough* Microsoft *cough*).
The only real Java app I've seen that does sound even remotely decently is Audacity. Not sure how they pulled it off, but I'm sure there's something native going on. So we're talking Mac? Given it's *nix underpinnings, I'm guessing that you could open a file stream against /dev/snd (I'm a Linux weenie, so not sure what it is for a Mac).
Besides the fact that it probably shouldn't be global, static variables are accessed with the class they are within. If the variable 'life' is within a 'Player' class then you would access the life variable with a 'Player.life' For java programming questions make sure to visit /r/javahelp next time.
The escape isn't necessary, a simple forward slash works fine. (And is more readable!)
There appears to be something wrong with your setup or somewhere else in your code. I was able to launch this file in debug mode on my (mostly-)fresh install of eclipse. Have you installed any interesting add-ons? Any memorable settings changes? Which version of eclipse?
1. The Ask toolbar is not bundled with the JDK, just the JRE. As a developer, you would be using the JDK. 2. The last thing that I want is my programming language auto-updating itself, introducing syntax changes and class binary incompatibilities. 3. What? 4. There is an endless supply of good tutorials out there. 5. How is this Java's fault?
We really need to see more code, but here's an example that might help. Others can offer additional advice. class MyGameClass{ public int life; //a basic constructor goes here. //maybe we start our game with any number of lives. public MyGameClass(int startLives){ life = startLives; } public boolean isGameOver(){ if(life &lt; 1){ end(0); }else{ return false; } } public void death(){ life--; if(!isGameOver()){ restartLevel(); } } }
While your argument does make sense I don't feel that JVM languages are _NOT_ trying to be a successor of Java. Take [Xtend](http://eclipse.org/xtend/) for example, its goal is to try and modernize Java. Xtend is not meant to be a replacement for Java but serves more as an add-on. It simplifies the boilerplate significantly. With this I feel most of the JVM languages actually extend the language rather than limit it. read more: http://pragprog.com/magazines/2011-12/extending-java as to how will the JVM languages survive when the language is "dead" well they most likely won't but on the flip side I don't see Java dying out anytime soon.
Sorry, I just misunderstood 'state changing'.
Protected would only work if you were extending this class (which is almost certainly not what he wants for this simple problem.) There's also a bunch of syntax errors in this code (class should not be capitalized, your methods lack return types, the first two lines of isGameOver don't make sense...) This is likely to confuse a beginner
[Citation needed]
You're right, sorry it's been a while since I've developed in Java. It was also a simple example that was definitely missing pieces, like a constructor for one thing. I'll fix what I can.
doesn't it need to be public static void? and what would the restartlevel thing do, and end, and I;m a noob and confused. But thanks I understand it a little.
Some algorithms are actually faster with Java than in C because of the JVM Garbage Collector. For example, consider algorithms that make extensive use of immutable persistent data structures: http://en.wikipedia.org/wiki/Persistent_data_structure These structures depend on being able to quickly construct new objects, share references to existing objects and collect garbage once it is no longer referenced. The Java GC will easily beat any naive memory management algorithm written in C (such as reference counting). The only way to beat Java performance in C for these types of applications would be to actually write a proper GC. This is a hard task, and the Java GC is pretty much best-in-class. Even if you succeeded, you'd have something that starts to look suspiciously like the parts of the JVM. You can see where this is going. Add in some other valuable features like dynamic re-compilation, security validation of untrusted code, JIT compilation and you would end up reinventing something very much like the JVM. The JVM is awesome. Say what you like about Java, but the JVM is the best platform for running serious production code in the world, bar none.
I evaluated Haskell a few years back, but found the library ecosystem and integration capabilities seriously lacking compared to the modern JVM languages (Clojure, Scala). Interop with established platforms is *essential* in the enterprise context, and within that space Java ecosystem interop is the most important by far. That's why I consider Haskell as more of an academic language in comparison, although I appreciate it has some great commercial use cases (I've seen it used to good effect in hedge funds / option pricing for example). P.S. I'm a big fan of functional programming in general and like Haskell as a language, I just think that it is perfectly fair to describe it as "more academic" for the above reasons.
You are doing it wrong. Ever changing requirements is the norm in the real world, whether you like it or not. We invented object-oriented programming to be able to handle constant change, otherwise there wouldn't be any reason for it. 
IMO Stack Overflow is the best place for this sort of question... anyway... According to the MediaPlayer javadoc, it doesn't have generic property change support. See http://docs.oracle.com/javafx/2/api/javafx/scene/media/MediaPlayer.html What it does have it a bunch of properties with types like ReadOnlyObjectProperty&lt;Duration&gt;. So what you actually want to do is replace mediaPlayer.addPropertyChangeListener with something like mediaPlayer.currentTime.addListener(new TimeListener()); You will also need to change your TimeListener from a Java Beans PropertyChangeListener into a JavaFX ChangeListener: http://docs.oracle.com/javafx/2/api/javafx/beans/value/ChangeListener.html because that's what a ReadOnlyObjectProperty expects. Note that I didn't test this at all but I'm fairly sure it'll work :)
For small tools the startup time of the JVM is often longer than the actual execution of the program. And the real performance magic of Java, the optimisation during runtime, won't kick in yet.
I said I'm putting a Captain Obvious cape, but still, I think it's not as common as I'd like it to be.
Signed integer overflow in C is unfortunately undefined behaviour and isn't guaranteed to go back to INT_MIN... But yeah, coming from assembler (or from any logical background actually) this doesn't make a lot of sense. 
That isn't a citation. 
As my old old old boss used to say: "EBCDIC is superior because it uses all 8 bits, whereas ASCII only uses the lower 7 bits. This makes texts in ASCII much more difficult to cut (by hand) in a punch card, whereas EBCDIC neatly arranges numbers and letters in the bottom left corner, special signs in the top right corner." "But.. but, we haven't used punch cards since before I was born. Everything is on tape or disk these d-" "Be quiet, then you might learn something. ASCII was designed for paper tape, a much more primitive technology than punch cards. Let go of your attachment to obsolete standards" "Ok, thanks boss"
The Api's don't result in scalability per se, it's the application middle tier that is responsible and even then its a lot of work and configuration. 
If you are looking for a cause many attribute IBM's decision to go with Java over C for their application middlewear. Most others just followed suit. 
Except you can't run it on your servers! Or pretty much anywhere it matters. You can pay thousands of dollars to Microsoft in order to get a crappy non-standard server that no one wants though! &gt;b-but Mono! Is slowly dying. And is behind the standard since Microsoft started trying to get rid of it.
Audacity is written in C++ dude. 
Google "java sound recording"
In your case, you're cherry-picking the thing that makes your language shit.
I've had it both ways. A good project manager will mitigate change. Vague requirements tend to be shitty management and because the team didn't do enough up front design and analysis. 
If your values fit into an int (max 2^30 ) or long (max 2^62 ), you can use bit-shift operators for that, e.g. 1 &lt;&lt; (2 - 1) for int or 1L &lt;&lt; (2 - 1) for long values.
http://benchmarksgame.alioth.debian.org/u64q/benchmark.php?test=all&amp;lang=java&amp;lang2=gpp&amp;data=u64q
I make it a habit of checking if my file is there or not, and printing the full path where I looked. In your case something like: File f = new File("devil.gif"); if(f.exists()) { ImageIcon icon = new ImageIcon(f.getAbsolutePath()); .... } else { System.out.println("Could not find devil.gif, tried + " f.getAbsolutePath()); System.exit(1); // or throw new FileNotFoundException(":("); }
Additionally the platform independence *forwards* helps too. If the mainframe gets upgraded somewhere down the line you can install Java and reasonably expect it to understand the program. It avoids having to budget for a substantial re-write of critical software as well as new hardware.
You can install Ubuntu on a chromebook. Or leave chrome OS on it and use one of the IDE apps available in chrome. Or just get a cheap refurbished business laptop and use that. A site like [SCC Trade](http://www.scctrade.co.uk/) would suit, but suitable for your location. Then just install a Linux distro and away you go
It's enterprise-focused due to early adoption by SAP, Oracle (before they brought Sun), IBM, etc. These were the companies that ran big business (Microsoft was on the desktop, but CICS was in the data center). Therefore they had a lot of influence in business. Also prior to Java, the main enterprise language was COBOL, but that was largely replaced leading to Y2K...and Java was in the right place at the right time.
Yes, C# sucks less than Java (comparing the languages). But .Net sucks more than JVM (comparing the runtimes and eco systems). 
&gt;The escape isn't necessary This is true, Java is wonderful at correcting for idiosyncrasies between OS file systems. But it was a good opportunity to explain escape sequences.
If you are having charset problems, it's not the mainframe's fault; it's *yours* for not handling charsets correctly in your code.
Definitely not pedantic. It's an important distinction.
Develop Java in a web IDE... really?
How mobile is mobile? You can install Lil'Debi on your Android mobile phone, install Java on chrooted Debian. Then get an Android X server, and in theory Eclipse (maybe not, it has native SWT components...) or Netbeans should run. I don't have enough RAM on my current mobile to try that, but it does run real OpenJDK and Java Hello World in chrooted Debian. Oh, and you can connect a real mouse and keyboard either via USB OTG or bluetooth and most recent phones should support it. I guess you could do same thing with a tablet. The only drawback is that Android X servers are not mature. You can get around that with off-screen X server and VNC, but I haven't tried that. I need a new phone to play with, current one is way too old. Other than that, get any cheap laptop, stick some RAM and an SSD into it, and run Linux + whatever Java IDE you want. Chromebooks are nice, but they are a bit underpowered for my taste, and could have more RAM as well. Also, they all have 1366 x 768 displays which suck. I prefer having more vertical resolution on my dev machine. Java development LOVES RAM, so don't skimp on that. Also, I don't think Atom CPUs are fast enough for serious Java development...
You made a way too strong statement about the JVMs lack of platform bugs. With the time I put into finding and working around things that behave differently on different OSs like missing "standard" packages, fd and socket leaks and Runtime.exec driving my overcommit limit thru the roof.... I'll just sit here arrogantly judging everyone who down voted me.
Wait wait wait. JSF is about WEB APPLICATIONS. So you have a server, and a client connecting to that server over HTTP. Server needs a Java Development Kit and will run a Java Application Server, like JBoss or Glassfish or Tomcat that will run the Java Enterprise Edition application with JSF components. Application servers work like HTTP servers, i.e. they all accept HTTP connections, but they provide much much more. Most Java EE applications will also connect to a database, use messaging and other things. Client just needs a browser. What kind of browser depends on the application or JSF components. So what do you need to spec? The server machine or the client machine? Client can be anything capable of running a browser. Server machine- depends on application. Any recent machine will have enough horsepower to run small educational applications. If you are doing something more serious, then you'll know what are exact requirements for your needs. Example server specs: * Intel Core 2 Duo or equivalent AMD CPU * 2 GB of RAM or more. * Enough disk space for OS, application server, application, log files, anything else * Favourite Linux distro preferred, or Windows if you must * Network connection over which the web pages will be served, and an IP address to which the client can connect. * Java Development Kit, official one from Oracle, or OpenJDK. * JavaEE server, depeding on the app, JBoss or Tomcat or Glassfish or Jetty or Jonas. Avoid commercial ones (weblogic, websphere) like plague. You can probably get away with lower specs if as well, but most of computers sold today exceed those specs anyway.
I wonder if everyone has these issues, but, living in Brazil, people speak portuguese, and weird characters like Ã£ Ã§ usually break the code some point or another. 
I can assure you that "large teams of stupid people can't break it" is a lie. It's memory-managed, so that make it less likely than C to do scary, horrible things. Beyond that, it's not really any better than Python or Ruby (probably worse) from a "helps prevent dumb programmers from blowing things up" perspective. Theoretically, static typing should help communicate intent/requirements to other team members. In reality, people just do stupid garbage like making everything a String at the interface level, smothering exceptions without handling them, apparently going out of their way to use the exact wrong implementation of an interface from the Collections Framework, etc. Then, they don't even bother to document anything because "static typing **is** documentation". *shudder* If you're working with competent people, Java does offer some very nice things. Sadly, "fool-proof" languages just make for more inventive fools.
Even after compile time when the types for the generics have been bound? If that's true, then why is there no StackOverflowError thrown at runtime? Not trying to be snarky, but I don't see how this can work otherwise. Edit: To clarify, the type of list in the main method is of Integer. Calling this.compareTo() to will go to the written compareTo() method. It would not be a recursive call, because the type of *this* in the context of this code refers to an Integer object, yes?
This is immensely helpful, thank you. I somehow missed the JavaFX ChangeListener documentation completely. I'll report back if I get this working. And you're right, Stack Overflow would be a good place for a question like this. I'm not sure why I didn't think to ask there... Thanks again! 
Read: Twitter
That should probably work, will tell you when I'll read and test those stuff.
The answer to this is different depending on who and how you ask. :-) The "specialty engines" as they are called now (zaap, ziip, ifls) are essentially just "licensed processors" for certain workloads as you describe, yes. However there are certain optimizations in the system which let that processor work better for that workload than a regular General Purpose CPU. I'm not certain if IBM publishes what those optimizations are (zaaps have always been filled with secrecy and marketing hype) but evidence shows that adding a zaap to a system running heavy java workload will provide better performance than adding a regular CPU to that same system. Maybe the best way to word the answer is that it isn't the zaap hardware that is special for java, but the way it is used? Of course we still need to keep in mind that the z Architecture has special instructions in *all* of its cpus that exist especially to optimize java performance, so the hardware is optimized on that platform regardless.
Just get an x86 based Chromebook like the Acer C720. There are plenty of ways to get the JDK and an IDE on them.
Haha that's perfect. Gotta give them credit, EBCDIC was designed with people in mind, ASCII just cared about computers. :-P For what it's worth, all kidding aside, all java language code runs in the jvm in UTF16 anyway, and you can switch the zOS jvm to run in ASCII mode to make porting easier. WebSphere runs in ASCII mode for that very purpose. Unfortunately that means programmers need to be extra careful reading files/data because the "default charset" no longer matches the "platform charset".
This is a huge problem everywhere, and it's the reason everyone should be using UTF for character data. EBCDIC just exposes this problem profoundly because the basic "Latin" characters are not compatible with ASCII so even the most simple text strings break. If you write a program "properly" by always specifying the charset you expect, your app will work with Portuguese and EBCDIC without a problem. This is why my joking comment about using a CharsetDecoder is kinda true. People everywhere need to stop using String.getBytes(). It is dangerous for more than just EBCDIC.
Oh yeah, definitely javadoc! Thank the programming gods for javadoc! (Now if only we could get programmers to read it.)
And it certainly helps that the biggest selling point for a zaap is that it is cheaper than a regular CP! Never underestimate the "performance boost" of "cash savings". ;-)
I use a c720 chromebook with crouton. Eclipse, sublime text, and nodejs work great on it. Also, you dont have to wait for software to get compiled for arm(or cross compile yourself) like the Samsung chrome book, or any other arm device. Also it has ridiculous battery life.
Cheers.
You're English is just fine. A few little things here and there, but really, your written command of the language is just fine. Java does have a sound library that I have been wanting to play with but haven't quite gotten around to. [http://www.oracle.com/technetwork/java/index-139508.html](http://www.oracle.com/technetwork/java/index-139508.html) [Here](http://docs.oracle.com/javase/tutorial/sound/) is a tutorial. I'd be interested to see what you put together!
almost every single OnXXXXListener has a single onXXX method. Closures would be great for this.
http://www.reddit.com/r/javahelp
You should try Scala. All of the "cool" language features, none of the boilerplate, and all of the JVM awesomeness. 
I acknowledged its advantage over C in the 2nd sentence of my comment. I then went on to point out that many of its supposed advantages over other languages don't bear out in practice all that often.
Not to sound like every self-righteous prick that thinks they are better and looks down on those who need to solve homework problems, but you probably want to ask for more specific help than 'please solve my homework'... All it looks like to me is that you are using us as a means to an end instead of trying to learn the material. Having said that, you will need to do something like this (I won't explain it in code, but I'll try to be specific): 1. create a File object with the "travel.dat" as the name (don't forget to throw the proper exceptions -&gt; Google) 2. if the file doesn't exist on the disk yet, then use the createNewFile() method 3. declare PrintWriter with the file object as a parameter 4. use the printf() method of PrintWriter to write the distance and speed (hint Google "Java printf 2 decimal places") 5. calculate travelTime (I trust you can use division) 6. see step 4 to print to the file 7. close() the file
&gt; I'm sorry, but I don't "get it"... How is Java supposed to be better than Ruby (or any other language) when dealing with arbitrary requirements changes? Because Ruby is harder to maintain and the codebase gets to "stink" much earlier because it's duck typed, no static analysis, immature libraries, shitty tooling, shitty performance, frameworks that make a bunch of assumptions, frameworks that are hard to change, a moving target and dynamicly typed. ...and you can't find many engineers that don't need ramp up time to take it over. 
import java.io.PrintWriter; import java.math.BigDecimal; import java.math.RoundingMode; public class CalculateTravelTime { public static void main(String[] args) throws Throwable { PrintWriter outfile; double distance = 375; double speed = 58; double travelTime; outfile = new PrintWriter("travel.dat"); travelTime = distance / speed; outfile.print("Distance : " + round(distance,2)); outfile.print(" Speed : " + round(speed,2)); outfile.print(" TravelTime : " + round(travelTime,2)); outfile.flush(); outfile.close(); } public static double round(double value, int places) { if (places &lt; 0) throw new IllegalArgumentException(); BigDecimal bd = new BigDecimal(value); bd = bd.setScale(places, RoundingMode.HALF_UP); return bd.doubleValue(); } } 
&gt; Now if only we could get programmers to read it. Now if only we could get programmers to MAINTAIN it.
&gt; Perfect C will always be faster (or at least as fast) This is not true See: http://programmers.stackexchange.com/questions/110634/why-would-it-ever-be-possible-for-java-to-be-faster-than-c
&gt; Read: Twitter Twitter didn't just move to JRuby, their Ruby has since moved to Java for a lot of their backend stuff. 
I've heard a lot of people complain about Eclipse 4 being buggy and slow. I've only used it briefly myself. I've used Eclipse 3.8 a lot. I have been pleased with the speed ( get extra RAM ) and the stability.
&gt; Yea but have you ever used a language with operator overloading? It's a lot more straightforward than using compareTo. I've written very large C++ codebases in game engines for in house and mini studio developers. Operator overloading makes a heck of a lot confusion than it prevents. There are only a few minor mathematical cases where it makes sense, otherwise it's abused. 
modularity and separation of concerns increases your code base. I think there is a misunderstanding of the term "code base" An application has a code base, that code base is composed of modules which could be in separate source repositories. Confusingly if a developer only has the scope of one of those modules/libraries then their "code base" doesn't extend beyond that.
the (thin) client will need a jre matching the version of java the app has been developed against. and a java compatible web browser (ie, ffox, chrome). 
OMG this definitely solidifies my plans on going with a chromebook for my next computer so i can still do dev. 
That blog has some really good posts it seems. Thanks for sharing. 
This is probably obvious to most people, but I thought I would share anyways.
Let's talk enterprise features: **JMX** - Java Management eXtensions - Inspect your running applications, instrument them, modify the running application, monitor the application's operation in real-time **JVM/JIT** - One of the most amazing pieces of engineering technology since the advent of PCs. It iteratively improves the execution of your application bytecode while the program runs. **Strict Typing** - This makes it possible for large teams to work on large code bases and use excellent development environments. **Honorable mentions**: JavaDoc, Reflection, Libraries, Standards, and available support options.
I stopped using Eclipse at 4.1. I really hated the changes from the 3.x version. I now use Netbeans and IntelliJ instead.
Thanks!
That post basically makes my point - that is non-optimal C++. 
For ui listeners? Just put the method to be run OnXXX inside the xml where the component is defined.
That's why I mentioned Mono. Is there any other relevant platform? I don't believe you can just disregard the platform.
I'm partial to the classic GridBagConstraints constructor, from my Swing days... public GridBagConstraints(int gridx, int gridy, int gridwidth, int gridheight, double weightx, double weighty, int anchor, int fill, Insets insets, int ipadx, int ipady) Yes, I know why it's there, but that doesn't mean I can't hate it.
&gt; throws RuntimeException is "the real wtf" ...
I'd like to figure out a way to generify it, but my generics-fu isn't up to snuff. 
Nice! What are the advantages of dagger vs. guice?
Spring provides a lot of different features, of which you can pick and choose from depending on the requirements of your project. One of the key features, which you will almost always want to make use of, is the dependency injection container is provides (DI is good for writing loosely coupled code that can be easily tested). For example, my organisation uses Spring's DI, but then we use Jersey to build web services. Some teams in the organisation use Spring's MVC implementation. You would generally use Spring for web-based projects; web services, websites and web applications. You wouldn't use Spring to build desktop applications, for example. Simply put, Maven is a build tool. It's incredibly useful; you generally define your project's dependencies, and Maven performs the dependency resolution, automatically downloading any dependencies that you don't already have. It does this transitively, too, so let's say your project depends on Hibernate (an ORM), then when building it will download Hibernate and all of _its_ dependencies. Maven does bags more than just dependency resolution, though, it will generally kick off your unit tests, you can configure it to run integration tests, and there are a whole host of other plugins for performing pretty much any operation you can imagine during build time. 
RuntimeException seems pretty lame, but I've sometimes indicated a specific runtime exception which I might be throwing just so it's obvious to others. Like: public int doSomeFancyOperation(String intStringOne, String longStringTwo) throws NumberFormatException; That's a pretty contrived example, but I don't think it's _always_ bad to declare a runtime exception.
what are you trying to generify? The exception or the Object ... ?
He meant that RuntimeException is unchecked. It does not need a throws clause.
Somewhat complementary to the last bullet is the ability to influence new and upcoming language features and enhancements via the JSR/JCP. Some might argue, though, that that's changed since Oracle assumed stewardship of Java.
very true. I was thinking applets... my bad 
if you're calling toString enough that you are slowing down your application waiting for the string to be constructed, you're doing something wrong. s/toString/hashCode and you have a valid point, assuming you don't mind the memory overhead
Depending on the package name your example is not so bad. Feels like analyzing usages would answer a lot of questions too. Anyways this has been brought up a couple of times and what people seem to hate the most (me included) is when the signature has a lot of arguments and especially when there is several args of a type. Also with a lot of arguments it smells because the arguments seem to determine what the method will do. 
Pfft, amateurs... /** * make sure your threadlocals are properly setup before calling */ @PreProcess public Object process(String name, Object cache, Object... args) bonus ref to the two hardest things in comp sci are naming and caching. Edit: you need an unobvious annotation referencing potential aspects or other treatments. Edit 2: remove static. If it's not static, that implies lots of potential side effects that utility static methods usually don't do... Edit 3: really? I forgot Object as a return value? 
it doesn't have to be a Boolean, just do nextInt(). Also for multiple conditions for if statements use else if and don't use semicolons. It should look something like this: if (foo == bar){ //code } else if (foo &gt; bar){ //code } and for future reference take questions like this over to /r/javahelp.
Premature optimization is the root of all evil. Or so they say. How many times do you normally invoke toString()? Because in my experience it's very rare and typically made the most use in testing (where performance, while still good, isn't as big of a deal). If I do a toString() on an object, I'm probably done with it. So it typically is only used once, therefore most of the time doing this would be wasteful since it creates a field that lasts for the life of the object. Secondly, is it really that complicated of a method and using it a lot? I mean, if you're doing something complicated in it, go for it. But if it's pretty simple, you're hardly saving any time or performance. You might not at all, honestly, if you're using toString() rarely. And does it really matter that much? I hardly find that toString() functions are the bottlenecks of programs. Which, an extra field will no doubt clutter up the code a bit more than it would have in my mind. The performance gain is not worth the extra code I say. ... That's not to say that the basic idea doesn't have merit to it. I use immutable classes all the time. I also properly encapsulate them, meaning no getters or setters. I will often do basically the same thing, take in my inputs and precomputate them as needed for the object in the constructor. This of course, always depends upon what the object is and what it is doing. Some people think however you should never do any work in a constructor... I think those people are silly and they don't understand encapsulation and immutable designs and designing tests (that's often their excuse, that it aids in testing). But that's the life of a programmer, we all have our quirks, likes, dislikes, and plenty of opinions on what is good design.
Hell, why not both?
The full quote: &gt; We should forget about small efficiencies, say, about 97% of the time: Premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%. A good programmer will not be lulled into complacency by such reasoning, he will be wise to look carefully at the critical code; but only after that code has been identified. If he's already identified that this is a performance critical area - he shouldn't be lulled into complacency by the fact that _most of the time_ optimization is evil. 
I have been using Eclipse 4.3 for awhile now. It is a bit more sluggish than 3.8 was, but it is usable. Eclipse 4.4 coming this summer seems to have fixed all the issues.
Java's software ecosystem is rife with overkill frameworks and servers like EJB (especially the younger versions), app servers, etc. It's build tools and processes all need to account for these behemoths, and therefore often don't address simpler use cases. So the configuration files are always wordy and numerous, to prepare for the eventuality of any of millions of variations that will occur when the system/components are deployed somewhere. TO confound this, the standards process has been fully infected with large vendors intent on guaranteeing revenue streams, so compliant specifications become very large, and installing any of those becomes complicated, requiring lucrative consultants to actually do the work.
These complaints mostly apply to version 4.2 (Juno) which was appearently very slow, but I never experienced it that bad. 4.3 (Kepler) supposedly improved things on this end.
Weld (the reference impl of CDI) is another DI framework you can use. CDI proper doesn't have any SE API but you still make it work with a few lines of code: https://docs.jboss.org/weld/reference/latest/en-US/html/environments.html#d0e5697 There are several other DI frameworks out there.
There was a method called renameText(String text) which consisted of an unholy regex, no documentation, and was in a class called UtilityBean.
Spring data was the thing I was really after. I just used Spring's DI because I was already "in the ecosystem". I understand that it might not be convention to use Spring in GUI applications... but I guess what I'm asking is are there specific reasons it's a bad idea?
Here is the code fixed. You had three issues: 1. for x you need to use keyboard.nextInt() not nextBoolean() 2. you are missing an if before the else 3. you have semicolons after the () following the if statement, for example: if(x==1); this is saying if x is equal to 1 do nothing, then execute the code in {}. import java.util.*; public class FahrenheitCelsiusConverter { public static void main( String[] args ) { Scanner keyboard = new Scanner(System.in); System.out.println("Enter 1 or 2 for Fahrenheit or Celsius"); int x = keyboard.nextInt(); if( x == 1 ) { System.out.println("Enter temperature"); int y = keyboard.nextInt(); int z = 5 * (y - 32) / 9; System.out.println("Temperature is" + z); } else if( x == 2 ) { System.out.println("Enter temperature"); int a = keyboard.nextInt(); int b = a * (9 / 5) + 32; System.out.println("Temperature is" + b); } } } 
Generic exceptions aren't really "legal" in the sense that you can't declare a generic "T extends ExceptionType" and then say "throws T" if it's a checked exception. You could do something like this though: public interface Interface&lt;T extends RuntimeException&gt; { boolean doesSomething(); T getExceptionObject(); } public &lt;K extends Interface&gt; void process(K ... args) { Interface i = args[0]; if(i.doesSomething()){ System.out.println("does something."); } else { throw i.getExceptionObject(); } } 
Good to know. I am committed to 3.8 at work, but maybe I will try 4.3 at home.
The static constant basically is the number of "="(horizontally) and "|"(vertically). Analyse the pattern: + First part - the top + **+** for the corner + **=** repeated x times for the first horizontal part (hint: for-loop) + **+** for the middle + **=** repeated x times for the second horizontal part (hint: for-loop) + **+** for the end + middle part 1 (repeated x times) + **|** for the left edge + " " repeated x times for the first space + **|** for the middle vertical + " " repeated x times for the second space + **|** for the right edge + middle line is the same as the first line + middle part 2 is the same as middle part 1 (also repeated x times) + bottom line is the same as top line. Now I would recommend to divide the pattern into the individual distinguishable parts and write a method for each of the parts: + top line + vertical line with these two methods in proper sequence (plus a loop for the vertical part) you should find it easy to draw the pattern. **EDIT** BTW: to get the formatting of the pattern right in your original post, use code formatting (start with a blank line above the pattern, then add 4 spaces before each line like this: +===+===+ | | | | | | | | | +===+===+ | | | | | | | | | +===+===+
Yep, I agree with your example ... always good to be explicit
Thank you for pointing me in the right direction :D
BTW: /r/javahelp is better suited for questions like this one
Great results! CDI Everywhere, JCache and EE Configuration would be awesome :-)
Oracle has a [mailing list](http://www.oracle.com/technetwork/topics/security/securityemail-090378.html) you can subscribe to to get security notifications. JBoss appears to have [something similar](http://www.redhat.com/mailman/listinfo/jboss-watch-list). Edit: the National Vulerability Database also has an industry-wide vulnerability [RSS feed](http://nvd.nist.gov/download/nvd-rss.xml). 
Yeah, I think scalability is more about design and architecture, although some languages like node.js have asynchronous design baked in. For that example, vert.x is a great enterprisey stack.
Very true. This thought came about while I was working on the logging aspect of my application in which toString is getting very heavy usage. As you said, the complexity, although little was probably still not worth it though. 
Man, I *really* wish Facelets would get separated from JSF. I love having a component-based templating language but I don't like being tied to using the rest of JSF just to have it. Apache Tapestry is an okay alternative but then you loose CDI support which is a worse fate. (As a side note, why does everyone still love spring so much? CDI is great, let's start using it!)
0) how did u include code in reddit? looks really good. 1) you dont need `;` after if 2) `boolean x = keyboard.nextBoolean(); if (x==true){}`
&gt; Somewhat complementary to the last bullet is the ability to influence new and upcoming language features and enhancements via the JSR/JCP. Some might argue, though, that that's changed since Oracle assumed stewardship of Java. Great point, included it in the initial list with an attribution 
&gt; I think that makes sense. But you can still separate even more using service-oriented architecture. This is of course assuming you are running a service :) If a service is required to run the application (via REST, a client API, interfaces, or by email), I would assume it's part of the application :) Same for the dependent libraries that it important.
&gt; That post basically makes my point - that is non-optimal C++. Yes if you know the data you will be working on, and you know the platform you will be working on then you can write a completely bespoke application and it will blaze a trail. Heck you could write in assembly. However in reality there are very few scenarios where people will take the time to optimize that way and they will simply write code to create the application. When they do that, the JVM (with a strong statically typed language which is not the case with all JVM languages) will typically win in a large project because of the JIT optimizer. But if you want to write a kick ass screen blt, you might want to do something special. And BTW, Java provides JNI for a course interface to do things like that.
Without any actual context on intent, I don't see anything wrong with it. Why would you need to warn about it? What exactly was there to warn against when it worked? Null can be a valid value if you've designed with it in mind. What exactly is your alternative? As is, I see a lot more wrong with that signature than accepting null parameters.
Four spaces in front of each line makes it code. I typed four space and then this text
No StackOverflowError is thrown because BubbleSort.compareTo is never called. If you did call it, it would throw a StackOverflowError. In that method, the type of `this` is `BubbleSort&lt;T&gt;`. This code: class BubbleSort ... { ... public int compareTo(T that) { return this.compareTo(that); } ... } is no different from this code: class BubbleSort ... { ... public int dostuff(String that) { return this.dostuff(that); } ... } 
I NEED HELP. I have a two System.out.prints in a do while loop right before a switch statement but after the first loop both lines overlap, I need to know how to prevent this. CODE:do { System.out.println("Please enter " + Student + "'s first grade in caps(Enter a space when completed): "); Grade = console.nextLine(); System.out.println("Please enter how many hours " + Student + " earned: "); hours = console.nextInt(); switch(Grade) { case "A": totalPoints += (4 * hours); hoursCounter += hours; break; case "B": totalPoints += (3 * hours); hoursCounter += hours; break; case "C": totalPoints += (2 * hours); hoursCounter += hours; break; case "D": totalPoints += (1 * hours); hoursCounter += hours; break; case "F": totalPoints += 0; hoursCounter += hours; break; case " ": escape = false; break; default: System.out.print("That is not a grade letter. " + "Please restart."); System.exit(0); break; } } while (escape); RESULT: Please enter the student's name: Cole Please enter Cole's first grade in caps(Enter a space when completed): B Please enter how many hours Cole earned: 5 Please enter Cole's first grade in caps(Enter a space when completed): Please enter how many hours Cole earned: 
&gt; Java creates applications that run in a virtual machine or browser, while JavaScript code is run on a browser only. [Wrong](http://nodejs.org/).
If you are still up for helping an eager student, I would love to learn. I'm taking a class, but I'm constantly waiting for the other 3 students to catch up and I spend most of the time waiting. Whats even worse is our teacher's "go at your own pace" tactic is more like "go at the slowest kid's pace" and that is not working for me. So if you still have room, I would love a tutor.
Thank you for the input. I just finished up ordering parts for my home machine so this certainly won't be my main dev machine. Good to know the little chrome books are an option
Thanks for the info and link
Not that mobile lol. Just something that I can carry to work and school. I have a sign 10.1 2014 but I haven't come across any purely java ides that stand out to me. And I really don't want to bring that pricey unit to work with me in a manufacturing setting. 
I think we are making the same point - perfect C is rarely written, hence Java is a better option most of the time in those cases.
I see, thank you for your response. I figured with the while != -1 it would continue to prompt for an infinite amount of characters so long as they are not -1 (when it is -1 it will stop) I can't seem to figure out why it isn't doing that. Like I said before, I'm very uneducated in Java and I don't understand very much. Thanks
Thanks for the prompt reply. That definitely makes perfect sense. I just have no idea how to go about implementing that line of code to do that. Ugh, this is frying my brain!
I don't like to use null at all in my programs too. That doesn't mean I make bullshit claim that using it is bad design. That's nonsense. You can never say what function does exactly. If I saw that I'd guess that it creates a client without a given piece of data. Let's say it was just a bool, try this now: Client c = createClient("Name", false); How about an int? Client c = createClient("Name", 5); Is that an age or what? ... With proper names I'd have no problem with any of these. I'd hover over, see a method signature such as "clientStatus", or "age" and it would be very easy to understand as well as yours. ... But okay, let's grant you everything without much more. Sure, you might have a better solution... But does that make this one bad? No. If I came up with a solution better than yours, does that make yours bad? No. We're in a thread with some really atrocious method signatures. Okay, just a few. But yours really doesn't stack up. At all. And quite frankly, you were not justified in making a stink or making comments about your coworker over this almost complete nonissue. This is seriously the worst signature you have ever encountered? Really? There is no reason why this wouldn't be okay in production code. Is it not the best in the world? No code is. But there is nothing logically wrong nor anything that couldn't be understood by just going to the function. That you think because somebody used a null means they don't understand readable or maintainable code is absolutely preposterous. And it's uncalled for. It must be hard working with you if you think everybody who doesn't do everything your way doesn't understand things.
Yeah we agree fully I think. I forgot to mention security. Wanna get married? But only if you truely are that old man 
Facelets were a separate project in the old days, what is holding you back to just use them?
 public NameChangredToProtectTheGuilty(int, int, String, String, String, int, String, boolean, List, List) throws Throwable;
Can the upvoters explain what they find useful about this site? I don't get it. All I see is a bunch of mediocre code.
Codenvy IDE is not bad, has some neat thing built in like pushing to google app engine
Then check out JPA. Some implementations are EclipseLink, Hibernate, and OpenJPA.
I use 4.3 as well as 3.8, both Java Dev edition, and 3.8 is way smoother. Using 4.3 is like talking to someone with a tiny bladder.
Does it have to be real? public &lt;T extends Object &amp; Runnable&gt; Callable&lt;T&gt; iMadeThisUp(Integer long, T... options) { ... }
In addition, it's scraped code too. While "real-world" examples are useful, I generally find for understanding an API you want minimal working examples instead.
I was looking the exact thing but then I surrended to owncloud. &gt; should we start something? Maybe, if we have care to be compatible with existing things (i.e. owncloud web API, support for the Android APP from day-zero); lean down the learning curve for new programmer to join (avoid hipster framework); keep resources requirements lowest as possible (i.e. jetty over tomcat) &gt; Can someone tell me that I am being silly? Not at all.
Beganto is one of the leading Java development company, offering professional custom Java, J2EE, J2ME application development, Java software development services at competitive price. To learn more visit us online.
Not quite. ASCII was designed for a serial medium: paper punch tape. This tape had a number of usability problems, such as breakage, and having to wind forwards or backwards to find something. Serial protocols are obviously no longer suitable for a modern data center :)
JavaFX is a real breath of fresh air after Swing and it has all this extra functionality.
That depends a lot on the IDE you use though. I program in Java and Python, and I'm doing a lot more typing in python, cause I just can't find a python IDE which supplies as many tools as Eclipse does for me in Java. 
I run crouton Debian, but pick what you like!
Why on Earth would you want to do any of this anyway?
What the hell did I just read?
http://docs.oracle.com/javase/7/docs/api/java/net/ServerSocket.html go nuts
Then Netbeans complains that the javadoc is incorrect as it doesn't say what it really does. Personal preference IMO. Though, I don't see how it hurts clarity if you specify an exception that it can throw.
A post about logging with a decent number of pop culture references?
It's a mess on Chrome.
Thanks! That was helpful
Interview with Wildfly architect would have been a better title. It is a shallow comparison from the jboss perspective. "The big difference between TomEE and WildFly is that WildFly offers a great deal more features". No the biggest difference is that TomEE is true open source with a really friendly community with devs taking a big part. Similar approach from jboss kills the business model so they do the same only to build some trust and user base 
Spring in Action. It's an awesome book and it's entertaining. The author is coming out with a 4th edition in the next month that covers Spring 4
&amp;#3232;_&amp;#3232; System.out.println("b.getClass().isInstance(b): " + b.getClass().isInstance(c)); //false 
thanks much for reporting the error, will correct it right away
4.2 was really bad and unusable for me due to horribad performance. Kepler (4.3) has been great 
&gt; Can you name a single practical issue it would cause? I've never been able to find a single one that actually mattered. Whereas, say, seperating your ui controller from your database layer - I could name several practical advantages. Well binary files in general don't play well with SVN (or any VCS). Things like cloning a repo will clone the entire version history, including JARs, which is pointless and impractical. Tools like Maven, Gradle, etc. were developed for a reason. For the m2e problems, I can't really comment. I didn't run into any issues while using it, but clearly you and others did. I would recommend switching to IntelliJ, which has much better Maven support. &gt; &gt; You should never need to touch the files in your .m2 directory. &gt; You need to touch them to set them up. And from what I understand from the install instructions for our project, you need to touch them to update your local versions of the jar files. I still don't understand why you're touching these files. You may have a settings.xml there, generated by Maven, but there's no need to change anything to get different versions of a JAR file. Just specify the new version in your pom.xml, and Maven will fetch it into your local repo. &gt; &gt; Windows explorer can handle directories with . in front of them without issue, unless you're using something prior to XP (though I haven't tried this). In fact, directories with . in front are a pretty standard practice for cross platform applications, as it signifies a hidden directory in Unix systems. See programs like GIMP, certain Eclipse plugins, Android, IntelliJ, Minecraft, etc. &gt; You cannot create them with Windows 7 Explorer. It will give you an error message. You have to use the command prompt. It's just a minor hassle, but it's one of many. True that you can't create them, but why do you need to? Maven does this automatically - you shouldn't be doing it manually. &gt; &gt; Maven should have no issue with proxies, and I've used it through a few corporate proxies before. Sounds like your network guys should have a look at this. &gt; It does, and since Maven doesn't provide anything useful (imo), it's just one more needless hassle. You can read all kinds of complaints about any open source software trying to deal with corporate proxies if you do a search - it's not just Maven. What you should have is a distro of Maven for your company with the proxy settings already configured in your settings.xml. Then, every employee uses that, and no more proxy issues. &gt; &gt; The whole point of Maven is not to update jars manually. Just bang the version into the pom.xml, and away you go. &gt; That's exactly what I'm saying - we ended up having to do it anyways, negating the small convenience that Maven was supposed to provide. Which is why I'm saying you're using it wrong. I've been using Maven for years now, along with plenty of other people. &gt; Using a local Nexus is what they were trying to do. It was just one more unnessary hassle that Maven suggests you do, that you don't have to do at all if you don't use Maven. That's somewhat like complaining that you have to set up a SVN repository to use SVN - except that you don't need a local Maven nexus. I've used the central Maven repo in several projects (from behind a company proxy) without issue. It also isn't complex to set one up, and there's plenty of products to help, like [Apache Archiva](http://archiva.apache.org/index.cgi). I'll answer the rest of your points below, since they're similar. Maven (and tools like it) are extremely useful for handling dependencies, and are much more efficient than doing it by hand. We can take the following example: * You have a library x.jar that you want in your project. You want version 2.3.0. * The problem is, x.jar has dependencies on y.jar (v2.6), z.jar (v0.9) a.jar (v11.2.3), b.jar (v8.2a) and c.jar (v1.1). * Using your system, you now need to manually add and commit 6 different JARs. Also, those dependencies might have further dependencies. In Maven, you add 3 lines to your pom.xml, and you have everything done. * Now, you decide that you actually want to update x.jar to version 2.5.1. Unfortunately, that requires different versions of the dependencies as well. You now have to manually check each dependency, update and commit them. In Maven, you change 1 line. Now I don't see how you can tell me there's no advantages of Maven. Also, I've trained plenty of new employees, and it takes a day tops to be familiar enough with Maven to use it without issue. Using it in more advanced ways does require a bit of googling, but everything is easily found. It definitely shouldn't take weeks to become an expert. &gt; Using Maven is like hiring someone to open your front door for you. The hassle of hiring, paying, and dealing with having someone standing there all day is far, far greater than the hassle of just opening the door yourself when you need to use it. That is an incredibly poor analogy, which is nothing like the convenience that Maven (and tools like it) provide. There's a good reason so many businesses and people use Maven. It's not right for every project (it can be overkill, or simply nothing really necessary), but it's invaluable for others - especially products with a long lifecycle.
It should be obvious when you write it if your toString() method is expensive to compute. If it is expensive, then it would also seem obvious that the lazy optimization is a good idea. 
Reducing the number of hits he receives de-clutters his server logs.
If it's expensive and it's never called (except by a debugger or something), there's no point in lazily initializing it.
What type of jobs do you want? Build that kind of code. Pretty easy.
I'm not an expert, but since you haven't gotten any replies yet, I recently did take a similar class and I can try to help you when I get home if nobody else replies with a better response. There are some tutorials in the Oracle docs that you can find [here]( http://docs.oracle.com/javase/tutorial/extra/generics/index.html) I'd start there. Where in the syllabus are you starting to have problems? 
Since you are familiar with programming and syntax isn't hard to learn, I'd suggest Android. There is a lot of freelance work as every business wants to be in the hands of as many customers possible.
in my data structures class we used Goodrich and Tamassia's "Data Structures and Algorithms in Java". I can't say how helpful it was since we rarely used it, though.
Codehaus support twitter account does not say anything. Maybe someone forgot to renew the domain.
thx a lot
My problem with logging is 'how much?'... Ideally all my DEBUG level logging will print to the log in all environments. This isn't realistic because 'its slow'. How do you all handle the balance between writing helpful logs and it not affecting performance? 
This thread has been linked to from elsewhere on reddit. - [/r/Python] [why does code (4 spaces) in /r/java look better than here? :(](http://np.reddit.com/r/Python/comments/1z4g55/why_does_code_4_spaces_in_rjava_look_better_than/) *^I ^am ^a ^bot. ^Comments? ^Complaints? [^Send ^them ^to ^my ^inbox!](http://www.reddit.com/message/compose/?to=totes_meta_bot)* 
Looks just fine on Firefox with NoScript.
Well, I didn't notice until I read your edit...
I'm at Iowa State University right now and for my Intro to Data Structures we use http://www.amazon.com/Data-Structures-Java-Collections-Framework/dp/0321392795 It's a good enough book, but for most of my study outside of lecture I just find other resources online. I've seriously barely opened this book. I am also curious about something and I have no idea how to ask it without sounding a bit rude so here it goes: Why is Data Structures a 300 level course? Assuming you're either SE or CS, What programming do you do at the other levels if any? Is this actually a course for juniors or do they just call it 300 level because it's harder than say Geology and they dont' want CS people to complain. Just curious, I'm sure I sound rude anyway. Edit: P.S. just looked at some of your homeworks (I'm surprised it let me) and the material is definitely not trivial but do you ever get annoyed that your instructur uses bad variable names and method names?
most important thing is that a instanceof B where a can never be an instance of B will throw a syntax error when using instanceof, but will not if using .isInstance().
So...any thoughts as to when they'll get to work on Java EE 8?
This is, of course, the correct answer. My reply is more ambiguous. The truth is, I don't know. And as odd as it sounds, I don't care as long as it meets my objectives of being something in Java, and able to get in the ground floor quickly. I have 18 years in web development, but I don't want to necessarily leverage that if something else is in more consistent demand.
yes I get annoyed frequently. Also, it is not a course for juniors at all. Most people are sophomores. Check out our programming assignments and our readings if you can. The readings are all online. It doesn't seem to help me any when actually programming. We study a lot of concepts but when it comes to programming... this class doesn't help much.
www.codehaus.org works fine for me. Maybe it's just that codehaus.org doesn't automatically redirect to www.codehaus.org? 
Not really having trouble understtanding basic concepts in the class, but I am having difficulty with programming assignment 2. Honestly I feel like this is ridiculous how it is layed out. http://pages.cs.wisc.edu/~cs367-1/?r=programs&amp;programNumber=2
I know nothing other than I'm seeing the same thing. Sounds like it's time to have another "we should mirror the repos we use" discussion and then never do it.
Well, we get small assignments due every week and we just finished Big-0 notation. Not bad at all. I kind of like that part. I just have trouble implementing it all. But yeah, let me know what you think. And if you get the chance look over my programming assignment and tell me your general thoughts if you want to. Thank you
Async logging? What kind of app are you working on that logging is a bottleneck?
This is great. A book catalog , in addition to addressing a personal need, would be potentially quite deep. I've always specialized in backend services, and this has that. I would be establishing some good Android chops. I could also be tapping into an API so I can provide a barcode scanner for Android. I've read about Spring and have been considering it anyway, and this would give me the opportunity. So upon completion, I'd have a web service, REST, Spring, building an API, Android, and a lot more in my portfolio all at once. And it's something I could add to as I learn about new things, such as JMS, which I had to look up. This is excellent. If I could upvote you twice, I would. Thank you. EDIT: web development is programming. Web development in PHP is not what I'd prefer to be using anymore. It supported me for a long time, and I'm grateful. But if I continue with web development, it's going to be Java or Python I think.
&gt; Goodrich and Tamassia's "Data Structures and Algorithms in Java" I've heard some pretty terrible things about this book on the amazon reviews, I am thinking about buying the new edition that came out this year though 
I'd recommend going to your teacher's office hours (assuming its not always filled with students like some of my CS professors). It sounds cliche but it really does help if you aren't getting the material. 
It appears to be up now. At least for me...
.#2 with Splunk "transaction" is really really powerful. .#4 I wish that scheduled executor service offered integration with the uncaught handler :( have reimplemented scab code many times because of that... .#5 look at MDC/NDC to make this cleaner
You're not looking at this objectively but subjectively. The design would not lead to errors in either case. Both designs can be misunderstood if only looking at the method call. You are never going to design something that can not be misunderstood. If that is what you've determined makes bad code, all code is bad and it's a meaningless statement. Attacking somebody claiming they don't understand what readable or maintainable code is just because they don't agree with you is absolutely preposterous and is "getting personal".
Haha Cheers man. Good luck! If you get stuck or need some help, feel free to message me.
if you wanted, i could send you a pdf collection of my class notes (79 pgs) it covers basically everything listed in your class schedule
So basically, read the Java EE 7 tutorial...
Do yourself a favor and pick up Effective Java by Josh Bloch. It's a fantastic book that you don't need to read cover to cover. That and The Pragmatic Programmer are must-reads. 
What's with the unnecessarily verbose file tree?
More ads than info...
For .#4 you can provide a ThreadFactory that sets the handler on the new thread. And provide the ThreadFactory when constructing the ScheduledThreadPoolExecutor. http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html
I was having a problem with it not executing programs unless I gave it the full path. The weird thing was my path is set correctly and they execute in terminal but not in the program. As this was just something to play around with over the weekend I didn't bother to track down what the program was and fix it.
Can you comment on why the switch to Spring? I've just started a new project with Spring, cause its what I know, but I'm questioning the decision. Should I have gone with Play? Vert.x? Or something else. But glad to see people are still picking up spring. That being said, I found the learning curve for Spring to be quite steep a few years ago. Today's guides, in particular some basic stuff starting with Spring Boot sure help kick start the learning process.
Very, Very Cool. When I first saw TPP I made a vb.net client for doing it. My only issue was the irc stuff, had problems with regex getting the right parts out of the messages.
For somone who has been embedding Jetty into Spring applications for a while, using Spring Boot sure cleans up this process a lot.
The written description of a Berlin Clock is useless. I closed the page right after finishing it and didn't look at the code because it's a blog-smell.
Honestly their documentation is very good, if you know what you want and need to find how to use it. 
if we do System.out.println("b instanceof C: " + (b instanceof c)); it results into compile time error
Awesome, irc is a bit tricky but the irc RFC helps a lot. http://tools.ietf.org/html/rfc1459.html Years ago I wrote a basic IRC library for C#, but the only forum I posted it to has wiped their archives and I didn't think to back it up. 
At run time, the result of the instanceof operator is true if the value of the RelationalExpression is not null and the reference could be cast to the ReferenceType without raising a ClassCastException. Otherwise the result is **false**. http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.20.2 
For me the best book about java is "Thinking in Java" (www.mindview.net/Books/TIJ/)â. And it is free! In fact I found all books from Bruce Eckel the best programming books I've ever read, hands down. The best thing about his books is that they are written in a style you can read and learn even when you are not in front of the PC to write code (so you can read while in the bus, toilet, treadmill, whatever) I also recommend to not skip through. Read every it from cover to cover, there is a lot to learn on this book.
So? That's not what he wrote. b and c in your example are instances. a is an instance in his example. B is a type.
You won't get to runtime if you do MoldyTaste's example. If a cast of the RelationalExpression to the ReferenceType would be rejected as a compile-time error, then the instanceof relational expression likewise produces a compile-time error. Test for yourself: Integer i = null; System.out.println("i instanceof String: " + (i instanceof String));
I meant C class. instance cannot come at right side in instanceof 
Yes absolutely, add me on Skype: Ismaya0 and I can help you out
Also [Clean Code](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) is another must read.
&gt; promptly abandoned programming to do web development because it was paying. PHP has been my specialty. &gt; Now I'm getting back into real programming. Someone please explain to me what this means. Is PHP not a programming language? Don't web developers write programs?
Yes and uncaught exceptions don't make it into the uncaught handler :(
minus - WTF is SPI? Author invented some acronim and does not even explain it.
The author assumed that people know this, but it's true that it is not well known enough. SPI means [Service Provider Interface](http://en.wikipedia.org/wiki/Service_provider_interface). This is (very) commonly used to provide an API with extensions / services. This Stack Overflow question may further help: [http://stackoverflow.com/questions/2954372/difference-between-spi-and-api](http://stackoverflow.com/q/2954372/521799)
I like #4: "Start writing SAMs now!" When you have lambdas and method references in your toolbox, suddenly those interfaces with one method become so, so easy. I love finding them in APIs I use. Reenactment: "Oh, bless these people. Lambdas didn't even exist when they wrote this."
Why vote zaytzev down? It's a legitimate question.
Excellent list, the final methods one threw me until I read the explanation. Needless to say that most developers don't follow these. Returning nulls, and passing T.../Object... are practices that I see consistently violated.
Well, it's actually a bit of a no-brainer, because "lambdas" existed before in the form of anonymous classes. When you wrote an API that encouraged your users to write anonymous classes (e.g. in Swing), then you didn't want to add 5 methods to such interfaces anyway.
Not something I'd choose Java for but very cool nonetheless! I think I prefer it to some of the others that have popped up. Out of interest could you use [awt.Robot](http://docs.oracle.com/javase/6/docs/api/java/awt/Robot.html) instead of the xdotool to simulate keypresses and something like [JNA](https://github.com/twall/jna) to make sure you're in the right window (at least in Windows)? On a side note; it seems like all the implementations of these twitchplays things I have seen are done outside of the VBA emulators source, which is a shame since it is open source (I couldn't get it to compile mind you), so you could theoretically add the functionality right into it! 
Claimed author made up an acronym that is actually used heavily inside the jdk.
Yes please. For every adapter class in your APIs consider making a method which creates an adapter composed of SAMs.
Very much this, except dump JMS for AMQP, where the standardized queue protocol means you're not locked into a message queue provider, which means a far superior negotiating position in all aspects of purchasing.
Anyone can standardize on any of those...I don't think we should split hairs over de facto vs de jure standards, whether they be dictated by the JSR process or more nimble competitors on the outside. Lots of Java EE comes from what people are standardizing on outside of the Java specs themselves. It's a lengthier process than simply creating something like jOOQ and sharing it with the world independently. You'll have your enterprise managers that are interested in big names, packages known to work well together, and broad support channels in both price and vibrant community. Then there are those that want things done the best way possible and aren't afraid to be a little outside of the norm and live more of a bleeding edge existence or what's considered by many to be a 'riskier' decision. Either way companies make their choice and have to live with it until the opportunity and resources line up to do something differently or reboot the infrastructure altogether. PS. I hardly think commercially-licensed Obsidian is lower cost than Apache-licensed Quartz. Simpler perhaps, but I'm sure the writer of *Obsidian's Blog* has a motive behind some of these choices.
&gt; If you were to depend on, say, Google Oauth or some other common RESTful service, would you consider their entire code base a part of yours? I would consider it part of the application's codebase, but not "my" codebase. If it's down, your app is down. If it exposes a security vulnerability "my" users are vulnerable, it's another thing that should be monitored, etc.... 
Yes as mentioned in the blog post it's a 1st year homework. Please explain what are the unnecessary codes. Then it will be helpful for all.
Check out the course on udemy.com regarding the Spring framework. I like it a lot. 
Try this. int invigilatorsNeeded = scan.nextInt(); scan.nextLine(); // flush line String stage = scan.nextLine(); int examDuration = scan.nextInt() Scanner.nextInt() does not go to the next line. So the next call to Scanner.nextLine() returns the rest of the line from the cursors current position.
About final methods, if you're completely in control of your code, then no problem, but if you're writing a library you're making the additional assumption that your code is perfect and its functionality will never need to be extended. Which can make its use a very frustrating experience...
Does anyone agree with number 9? I'm not advanced enough in Java to say for sure that that's a good idea.
You can't clump up JSF JPA and EJB. They are separates so you can't have EJB including JPA or w/e...
I know my comment may have sounded pretentious, but I mean no offense. Web development in PHP has supported me well for almost two decades. For that, I am thankful. The definition of real programming or a real programming language is subjective. It's not worth debating in my opinion. If I offended anyone by my statement, I apologize.
On Linux I build my Java application as normal. It embeds Jetty, so I don't have the container. Now we only ship/deploy on Linux so its a bit simpler than Windows I think. For building the "package", I use a Makefile (a shell script would work as well) that builds the required maven artifacts (our application + dependent jars) and copies these into a "package" directory. I then copy in the JRE, and a script to start it all up. I then tar it up and ship - we also do an RPM. The directory layout of the resulting package is something like: bin/ - start.sh jre/ - contains the jre lib/ - contains our application jar and dependency jars (I usually don't use a super/uber jar). Some will use the maven assembly plugin to accomplish the same, but I prefer to let maven deal with Java, and use shell scripts to build the shipping package. 
This is exactly why it's not worth debating. My definition has nothing to do with code being on the web or it serving HTML. In fact, it's not what I base my assessment on at all. So my definition shouldn't matter to you. It's a personal definition, it's subjective, and yours may be different.
I disagree with 10, using T provides a nice compile time check even though type erasure will remove it. Having a generic Object there tells you nothing about is acceptable or what is expected to happen.
This is a console application. And I have used something like you said I guess. Please join the code review. http://codereview.stackexchange.com/questions/43084/java-fraction-calculator or contribute on Github https://github.com/GigalBlog/Java-Fraction-Calculator-Example
I'm far from the first person to debate the topic. Google the difference between a web developer a programmer.
I've been programming in Java since it was in beta and worked for Sun's Java team for years. FWIW, I strongly disagree with 9.
I work with code bases with millions of lines. An ad hominem isn't going to get you anywhere. People who don't understand that patterns have pros/cons and that you have to be intelligent in using them are huge problems in large code bases. They don't tend to produce good clean code because they're consumed with trying to force everything in a pattern. They typically don't understand when **NOT** to use a pattern, which is typically the most important thing to know. You, and your coworker, both were using objects with state. You want to know what helps a lot of bigger code bases? Designed stateless architectures. Designing stateless with immutable classes is often far better than with state. With less "misunderstandings" and far less places to go wrong. Now, do I call your enum solution bad and you don't understand maintainable or readable code because you obviously designed a suboptimal solution given mine? No. I don't. Do you understand?
I would agree. Final classes are terrible. Final methods and general immutability of key fields increases robustness. Edit: Not always terriblt :)
I think what he means is method(T obj) is ok but method(T... obj) is no different than method(Object... obj). Varargs are generally not great. Edit: Also that the generic vararg is messy and ambiguous.
Throw an exception or better, handle it internally within the method and return a default object that indicates the issue.
If you don't mind me asking; why?
Well, we're talking about an API, so handling it internally isn't an option and this seems like a poor use case for an Exception since an empty result seems like a foreseeable condition.
&gt; when i have to work on other people's code i adapt my style to the style of the code i work in to have it consistent No, that is bad. If it isn't broke don't fix it. You seem to not understand that you change is not something needed, would not fix anything, and has only marginal questionable benefits to people who don't know how to use intellisense. You still don't seem to understand **the point**. The big problem here. You insulting people because they don't follow your style. You seem to continually ignore this. And now you do it some more, I'm angry? Please, you seem to be so angry at your coworker that you'd claim he doesn't understand maintainability and readability. So, uh, apparently that's exactly what you do. It's not going to be settled while you ignore basically what I'm saying. Half my post was talking about this, you completely ignored it. 
I think "handle it internally and return a default object" is referring to using the [Null Object Pattern](http://en.wikipedia.org/wiki/Null_Object_pattern).
On all associated processes that contain classpath information, the following file is part of the classpath: /usr/share/tomcat/lib/sqlite-jdbc-3.7.2.jar This is, in fact, where I have my file. The catalina.properties file also points to the lib directory, including all jar files in that directory, on the common.loader entry. I've also tried adding the file to the shared.loader entry with no results.
I believe, but may be wrong (I need to catch up on this stuff properly soon :) that Java 8 will allow something like e.g. public static Option&lt;Thing&gt; getThingById(Long id) { return Optional.ofNullable(howeverYouFindSomething(id)); } Then your calling code checks whether or not the returned 'optional' is 'present' (has a value) or not, it's never null though, just present (and you can extract your Thing) or empty and you can't. 
This I have tried and it hasn't helped. Looking into the processes themselves it appears that the file is, in fact, [included in the classpath](http://www.reddit.com/r/java/comments/1yuj23/tomcat_fighting_me_can_not_get_a_database/cfr842t). This is a real stumper. I can not understand why this application acts as though it can not find the class it's looking for. I also ran this on a virtual machine in a different version of tomcat and I am getting the same results.
If we are talking about an API you are going to expose to the world, then [the principle of least surprise](https://en.wikipedia.org/wiki/Principle_of_least_astonishment) and being able to clearly communicate intent become important things to strive for. In that method, you can: 1. Throw a **checked** exception with a nice message for invalid ID that is part of the contract of your API, so users of your API will know in advance they have to handle the situation. 2. Returning `Optional&lt;Thing&gt;` which exists in [guava](http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Optional.html) and [JDK8](http://download.java.net/jdk8/docs/api/java/util/Optional.html) for this purpose. 3. Return null and make clients of your API handle a potentially unexpected NPE. OP says that the third option, returning null to other people, is undesirable. I agree.
That was [in another article](http://blog.jooq.org/2012/01/18/if-else-coding-style-best-practices/) :-)
Option 1 is also not great. I'm of the school of thought that checked exceptions are entirely worthless. If you know it can happen, it's not an exception. Option 2 is great, but only if you are using Java 8 or Guava which isn't always an option (both are off the table for my current project).
There is no compile-time check. The compiler can infer anything for T if you don't define an upper bound for T in the declaration. Example: &lt;T&gt; void method1(T... args); // Infers Integer thing.method1(1, 2, 3); // Infers ? extends Serializable &amp; Comparable&lt;?&gt; thing.method1(1, "2", new Date(0)); // Infers Object thing.method1(1, new Object()); There is absolutely no type safety with T, unless you define an upper bound, e.g. &lt;T extends Number&gt; void method2(T... args); But then again, why not just write the actual upper bound? Because there's no difference void method1(Object... args); void method2(Number... args);
Option 1 was widely practiced with EJB 2, a thing that no one really misses nowadays
What is wrong with you? Why have you spent this entire time ignoring the point in my posts? No, you seriously have a problem here. The main problem here is you're dishonest and capricious. Answer me clearly: why do you think it's okay to claim somebody not doing what you currently like in the code means they don't understand maintainable or readable code?
`nextInt` and `nextBoolean` are looking for tokens, so they'll skip whitespace (including newlines) until they get to an appropriate token. Broken down: For `moduleCode`: `nextLine` reads through the newline For `courseName`: `nextLine` reads through the newline. For `studentsEnrolled`: `nextInt` reads the next integer (won't read past the newline). For `hasExams`: `nextBoolean` reads the next boolean (will skip whitespace/newline to get to it, but won't read past the boolean). for `invigilatorsNeeded`: `nextInt` reads the next int (will skip whitespace/newline to get to it, but won't read past the int). For `stage`: `nextLine` finishes reading the line `studentsEnrolled` was on (just gets the newline). Then for `examDuration`: `nextInt` starts on the line `stage` should have been read on, but encounters 'U' instead of a digit to read or whitespace/newline to skip.
Well, finally, a clear answer dealing with what I'm talking about. That's all I really needed for the last couple of posts.
Makes sense. Thanks!
Yeah I was looking for a way to grab and use the X Windows input handlers, but I just couldn't get it to work. I did write it in c# with mono first. Then the vba emulator broke, and I thought I had stuffed something so rewrote it in java. I too looked at using the source of VBA to do this, and my C isn't up to scratch but if you look at CPULoop(int ticks) and maybe put some debugging in around these lines if(systemReadJoypads()) // read default joystick joy = systemReadJoypad(-1);
That doesn't work either. This is probably the most common suggestion I've seen and it has failed to work from the get go. I get the same errors. Furthermore, this causes issues because tomcat wants to load jdbc drivers from a place where it can share them between running apps. This is why I was forced to use datasources rather than drivermanagers in the first place. While I can get the driver to load using the DriverManager class in this case, tomcat spits out errors and forces a deregister immediately. At this point I can think of no legitimate reason this webapp can not find org.sqlite.JDBC and it's driving me batty.
Never really got into it, seemed interesting but never wooed me away from Spring and Webwork/Struts2. i think it made a positive impact on the web app framework landscape (or at least represents one), but would probably go for Spring and/or something like play or grails for all future projects
It's also just as easy to use a CSS where links are a little more obvious. 
Right, but as a framework dev, there are some classes and modules that should NEVER be touched. Your goal, as someone writing an SDK, is to expose just enough, but not too much. Every time somebody does something they really shouldn't because they were too lazy or ill-informed to do it the correct way, that then becomes a "feature" that you have to phase out over several years. It's easier to lock everything down, and let people ask you for specific exceptions. White list vs black list method of thinking. 
In the security world of firewalls, we often see people talk of white-list vs black list. That is, everything's toxic unless we make an exception (white list). For SDKs and APIs, I prefer this approach. I use final as a default way of making a method, until there's a really (REALLY) good reason not too. This prevents people from abusing the API. In addition, when (not if) you break something, their special overridden version of a method might change subtly. But, if you enforce the integration points properly, this shouldn't be an issue. I prefer encapsulation over inheritance all the time. I generally find when APIs require too much inheritance, they're poorly designed. 
Checked exceptions were a catastrophic mistake in Java. I avoid them like the plague, and re-cast them into RuntimeExceptions whenever I'm forced to use them. I'll handle the errors the way I like, thanks. 
I prefer drop-braces in everything, but I also like a lot of whitespace in my code. Give it room to breathe. But that's just my opinion. if ( ... ) { doStuff(); } else { doOtherStuff(); } I just find it more readable. 
I've used it for a personal project very recently and I have mixed feelings about it. Its component and model design is powerful, but it feels crufty with how many classes and interfaces you need to go through. I suspect that if it had a rewrite to rely more on "lambda" interfaces and Java 8 it would feel a lot more comfortable, but next time around I think I'll try a different component based framework.
This isn't java news per se but is important news for the programming language research at Oracle Labs as Gavin Bierman has done [great work](http://www.informatik.uni-trier.de/~ley/pers/hd/b/Bierman:Gavin_M=) in the PL field.
[**+Satnam Singh**](https://plus.google.com/110563483361774700563) [_2014-02-28T16:20:48.025Z_](https://plus.google.com/110563483361774700563/posts/jbgC7JshN2s) &gt; &gt;+[Gavin Bierman](https://plus.google.com/106672410092562861672) leaves Microsoft Research Cambridge to join Oracle Labs. 
I really liked it. Similar to Swing. Another project is Vaadin. But I don't like too complex solutions and using sessions, so I prefer doing just servlet stuff with guice and jersey, plus jquery on the client side. Very lightweight.
I personally like Wicket and use it daily. I think you are right about the love and hate relationship with it. I hated it at one point but now fall on the other side of the debate. I like it because it has sped up my development with the ability to write encapsulated and reusable components. I find myself writing less code if I organize my components with re-use in mind. It definitely makes doing dynamic pages easy. I think my favorite thing is that the authors are very much involved and keep evolving it. The things I do not like about it is that I think the lifecycle of components can probably be improved. There are some lifecycle methods that run multiple times per request and that could be confusing when debugging issues. I also think its not easy to understand when you first get started so the learning curve is not great I do like Wicket but realize its not a one size fits all. It's always good to compare your requirements with frameworks that are available and make a choice on the one that is best going to fit your needs
well, if you eliminate all the probable solutions, the solution you need is the improbably one. You're doing something wrong, it's not the software. Try to think of anything that you haven't eliminated, however improbably. Misspelling of classpath of driver, etc.
Wicket is pretty good but I do not really see much need for it today. JSF with PrimeFaces is s more modern component framework. I find it easy to use and it has a lot more support.
Spring Data is so much more than JPA though and IIRC uses Hibernate.
&gt; So how do you represent an undefined result? Let's say I invoke getThingById(123) where there is no thing with an ID of 123. What should I return? [Guava Optional](https://code.google.com/p/guava-libraries/wiki/UsingAndAvoidingNullExplained)
That's what I came here for. I can't come up with anything else. I'm studying the JNDI and DBCP in general hoping I'll stumble across a solution. I am leaning towards the possibility of a bug. Just because it shouldn't be the software doesn't mean it isn't. It wouldn't even be the first time it's happened to tomcat. As I mentioned elsewhere I ran into a thread where the solution to this exact issue was "upgrade the jdk" and it worked for everyone in the thread. My version of the jdk is newer than the one discussed in this thread, and testing on a vm meant I was using a whole other version still. I've decided to stop pursuing this and am approaching the project from a different starting point entirely. We aren't using sqlite on the actual project, this was just a prototype. Another team member was able to get a connection to mysql using connctor/j and, for him, just dropping the jar file in the tomcat lib directory was all it took.
If you're doing everything from the ground up, I'd suggest using something like jEdit or Sublime Text and not an IDE that wants to do stuff for you.
Thank you very much; this is what I needed.
i'm a netbeans user to get a blank .java file, go to tools -&gt; templates -&gt; java class -&gt; open in editor delete everything, then create a new file and choose "java class" there's also an entry for "java main class" or something like that - you'd have to edit that template to make that one blank too i don't know how to create a new file in java without creating a project first. however, if you create the .java file externally, you can open it in netbeans and the editor will work fine, eg it will provide code assist. you can compile and run it from the command line but probably better to just create a project. if you don't want to create a package namespace that's fine, just put your files at the toplevel (i think netbeans calls it the default package). then you can compile / run / debug from within netbeans 
Another advantage to always putting braces on their own lines is that you can easily insert or comment out else-if branches without having to start the comment in between a keyword and a bracket. Very handy for debugging.
Agreed, and pretty much what he said.
Thank you. If I were to create something on Netbeans, would I have to copy the entire folder of the project for it to run on another IDE or can I just copy the .java/.class file? Basically, how should I go about working on a basic program between two different IDEs when Java create an entire project and the other IDE requires only .java/.class file?
To be fair, he does say when you have full control of the code.
I can make your final method non final with reflection, but it's a real pain.
Lovely pattern.
I loved the *idea* of wicket; it works like I'm already comfortable with and do daily, an MVC-style not dissimilar to every other GUI toolkit out there. I bought books, experimented with it, wrote a few simple apps. In the end, I decided that if I'm going to drink the modern web kool-aid wholesale, then I'm going to use a modern web approach. So here I am, using JSF and primefaces, and I'm very happy. I also feel like the tools to work with JSF and much more mature and capable than the tools to work with Wicket. I still think Wicket is great, both in idea and implementation, but I choose not to use it.
You're missing "else" before "if (tens == 0)".
The last else corresponds to the *last* if, if (ones==0), as opposed to 'if nothing else matches' It may actually make your code easier if you actually directly return the value, instead of assigning to word; that way you never have any elses. 
What about [RubyMine](http://www.jetbrains.com/ruby/)?
There is hardly any need to override a random *concrete* implementation of anything, except if you're patching a workaround into a third-party code base. But then, you might as well patch that third-party code base itself. The whole thing will inevitably lead to the composition over inheritance debate. Making all (most) implementations final is a strong move away from (random) inheritance. *Except* if the author of an implementation explicitly allows subtypes to override a specific default behaviour.
That's true
&gt; Final should, IMHO, be reserved for methods that really aren't correct to override. Indeed, and one school of thought on modern Java (and OO in general) is that inheritance should be avoided and composition be used instead. This is enforced by making public methods (the API of the class) final. The reasoning for this is that overriding exposes implementation details to external code and therefore makes future changes and refactoring harder. If inheritance is to be used, it should be planned for and explicit subclass API should be exposed through protected methods.
russeli as the answer, but more importantly, you learn how to run your code in a debugger (in Intellij/Eclipse/Netbeans etc.) so that you can figure out not just this problem, but all similar problems forever.
Reliance on the checking features of an IDE makes for a lazy, sloppy coder. It's a good exercise for newcomers to learn some things the hard way.
http://launch4j.sourceforge.net/ (http://izpack.codehaus.org/izpack-maven-plugin/) http://mojo.codehaus.org/appassembler/appassembler-maven-plugin/ http://tomcat.apache.org/maven-plugin-2.2/executable-war-jar.html
Nope. He'd become reliant and lazy. Human nature. One thinks one is a seasoned, experienced coder until the day you have to write some code in vim or emacs because circumstances. As a seasoned, experienced coder, I sometimes force myself to code without the assistance of the IDE's various checkers, just to keep in shape. I am code fit. 
http://tapestry.apache.org/integrating-with-jpa.html#IntegratingwithJPA-XML-lessJPAconfiguration
AFAIK the backend developers at a large German site use it. I happen to know a frontend dev there who usually moans that they constrain his options unduly when it comes to js trickery and they always blame wicket. That must mean they are very happy with it, or they would have moved away long ago.
Oh come on. I'm a IT professional who has been working with Java since version 1 and reliance on an IDE has not made me a lazy, sloppy coder -- to not use one would just be fucking foolhardy. And watching the code happen in slow motion is an *awesome* learning experience for a newcomer. Edit: okay, judging from your other response, you aren't anti-IDE, just anti-IDE for beginners, but I still think that's foolhardy. People should intimately learn the powerful tools at their disposal, and the sooner the better. Purposely hamstringing them is a fun exercise but of dubious benefit.
Simple code-formatting in Eclipse would show that kind of bug. (Ctrl+Shift+F)
I'm most certainly *not* anti-IDE (good fucking grief!) but I am adamant that it's in a coder's best interest, especially when working on server-side stuff, to be able to survive and triumph in the worst of environments - one where there is no IDE available. I know too many Java coders who are reduced to gelatinous blobs of crybabiness when deprived of their IDEs.
Is there an all caps method hiding somewhere? Are they using a preprocessor? The second seems like unlikely but there's nothing really stopping you.
I wouldn't that readability is the most important thing. Java has always scared off lots of people because of its verbosity and a big ecosystem (ie many developers actually writing code and libraries) is key to any language's success (Java does very well in this department, but its important to keep devs interested)
But the argument of the linked post is towards multi-line strings. What would be wrong with that (even in the ecosystem you referred to) ?
Java is not interpreted. But that aside, not all languages think about it this way. In general there's a tension between writability and readability. Those two are at odds with each other. Some languages like Perl and Ruby focus more on the writability part, while other languages like Java focus more on the readability part. At the end of the day you decide what's better. Safe a few key strokes and leave your fellow programmers in the dark (Perl) or type some extra ones and be clear to other programmers (Java).
You don't need the word "Java" in that sentence.
JVMs typically have a JIT, a Just In Time compiler, which optimizes and compiles the bytecode to native code on the fly. It's been around 15 years since Java was considered an interpreted language. 
APL.
People use Spring Framework to build simple REST Apps? That's a lot of framework.. 
Along with that, the language doesn't have to be aot compiled to byte code either. Its a common mistake for people to correlate languages like this, but really they're two different things.
We've all been there; stick with it, it's worth it.
Stop shouting, please. Also clarify your question. And better post to /r/javahelp (but *do* read it's posting instructions!).
&gt; JVMs typically have a JIT, a Just In Time compiler, which optimizes and compiles the bytecode to native code on the fly. What languages do you consider to be interpreted, then? For example, do you think of JavaScript as being interpreted?
That SQL query looks awful, but not because the escape characters. A fluent interface (method chaining) would be a more robust solution. The thing that sucks with SQL is that it is a foreign body in Java, and in any object-oriented programming environment, because strings are poor subtitutes for value types, aggregates and capabilities (Effective Java, item 50). [jOOQ](http://www.jooq.org/) solves this particular problem more elegantly. 
Yes, parametrized queries are great / mandatory. The post is 10 years old though, so maybe parametrized queries wasn't a thing that time.
:) Yeah, they've been a thing since I first came across java in ~ '96/97 e.g. http://www.tns.lcs.mit.edu/manuals/java-1.1.1/api/java.sql.PreparedStatement.html#setString(int, java.lang.String) However, at the time, people didn't realise why this was a thing. 10 years ago is 2004 (I got married that year!), and 10 years later people are still doing this. Fortunately, stuff like JPA etc are making it less of an issue, but it's still there. But I stand by my (simplified) statement, "don't build queries from concatenated strings".
Nice brown-nosing to lukaseder right there.
It's more important that your programs be immune to SQL injection attacks.
Please please PLEASE don't use thenewbostons java tutorials! Buy a book. Books are: Reviewed, Up-to-date, written by experts in the field, and use efficient and clean programming techniques.
Why doesn't this mention maybe types? We even have them in java 8.
Found it. Was just a helper method hidden deep that I overlooked even when searching the file. 
You do realize you can do debugging, with a proper debugger, without Eclipse?
I'm sorry but all of the "um" and "um yeah" speech fillers just kill it for me. 
Advice: read Oracle's Java tutorials [http://docs.oracle.com/javase/tutorial/]. They're longer than the site you've linked to, but there's a reason for that. EDIT: to answer your questions. Interfaces declare groups of methods that are meaningful to define in unrelated classes (examples: Cloneable, Runnable, Closeable, ...) See for example http://en.wikipedia.org/wiki/Strategy_pattern Abstract classes may predefine behavior, and declare abstract methods that are meaningful to define *only* in inherited classes. See for example http://en.wikipedia.org/wiki/Template_method_pattern. Or: implementing an interface is a promise to fulfill a contract specified by the interface. Inheriting from an abstract class and implementing abstract methods is a way of customizing other behavior already defined in the abstract class. 
Interface are contracts that guarantee that if a class implements it, you can call the methods defined in the interface. This is very important for polymorphism (object oriented concept, look it up) An abstract class is the same as an interface in that way, as all classes that extend it are guaranteed to have the same interface (callable methods); but on top of that you can share code by creating default implementations of the methods, whereas in an interface you can't write any code.
Thanks for the detailed reply! I'll definitely take a look at the Oracle tutorials. I think I finally understand now after days of frustration! Thanks!
Here's some examples: public interface Barkable() { void bark(); } Of course, you'll have the Dog implement the Barkable interface: public class Dog implements Barkable { void bark() { System.out.println("Woof!"}; } } HOWEVER, why don't you get the cat to do SOMETHING when you ask him to "bark"? It won't be "Woof!" like the dog, but hey you can train your cat do something on upon request, right? Well ok good luck with that. Still: public class Cat implements Barkable { void bark() { System.out.println("*blank stare*"); } } This extremely powerful, because now you could for example put all the cats and dogs in a room (an array?) and ask each of the to bark. The dogs will go "Woof" and the cats will just look at you like you're not being very interesting. In other words, an interface is great when you want to be able to call certain methods without needing the objects to be sub-objects of each other. BETTER - you can implement any number of interfaces. Interfaces are SO worth getting your head wrapped around, as you'll use them all the time later on through just about every pattern imaginable, to save you tons of time. On the other hand, abstractions are a way to define specific behaviour AND/OR to delegate method definitions to subclasses. public abstract class Canine { abstract void bark(); void bite() { System.out.println("A canine bite is often similar"); } final void run() { System.out.println("Assuming all canines run exactly the same..."); } } Here, you cannot call "new Canine()" as it's an abstract class. But you can create : public class Dog extends Canine { void bark() { System.out.println("Woof!"); } } What is great here is that a Dog *IS* a Canine. But if you call the .bark() method, it'll be a Dog bark() being called. You can make a variable like: Canine theDog = new Dog(); theDog.bark(); And just pass it along as a Canine but will have the Dog's bark because that's the object you created. I have created 3 functions: bark() is an abstract METHOD. Its signature is defined in Canine, but its behaviour HAS to be defined in any subclass you want to implement, such as in Dog. You can have wolves bark differently, for instance. bite() is a method for which the Canine has a basic behaviour, assuming all canines bite similarly. But you are allowed to redefine it in a subclass, for example the Coyote might bite differently than most canines. Finally, I think run() can be made "final". Which means no subclass can redefine it. I'm sure that's not anatomically true, but it's past 3AM, ok? :-) Abstractions of classes and methods can be very powerful and useful as well in terms of how and where to define behaviours. Versus the Interface that simply guarantees a certain capacity to respond to a call but has no idea of the actual behaviour. An interface is however better for instances where you don't want to inherit a whole class but simply garantee the ability to respond to certain methods (or get passed around. Ex: put everything that is BREAKABLE on the desk.... Note: I apologize for any error in the code snippets, I've not coded Java in years! Still love it though. EDIT: Made the corrections proposed by hencoappel - thanks!
&gt; What languages do you consider to be interpreted, then? Considering their mainstream, most widely deployed implementations: * Python * Perl * Ruby They all have experimental implementations with JIT compilers (PyPy, Rubinius, etc.), and they are also available on the JVM (Jython, JRuby). But that's not what most of those language users use.
What does APL mean in this context?
How about changing to introduce some composition rather than inheritance? You could split the functionality out of the base class into another that the two concrete classes could delegate some of their implementation to? Another option, if you still want to maintain the same class hierarchy, would be to implement either: A) a protected abstract method that loads the data that could be implemented in the concrete classes but invoked by the constructor in the base class. Obviously this isn't great practice as your concrete classes will not have finished constructing when the method is invoked. B) a private method in each of the concrete classes that could be invoked as an argument to the super() call. Again, not the cleanest solution but at least it's all local to the class. Another cleaner alternative would be to abstract the db layer away a bit more with some value objects - it sounds like reducing coupling with your persistence layer may be beneficial. 
As /u/idontcare1025 suggested: stay off thenewboston tutorials. Even though they are contextually and information wise not bad, they will teach you practices that are frowned upon in Java. Thenewboston doesn't stick to Oracle Coding conventions, etc. Better look at the https://www.udemy.com/java-tutorial/ (free) as he follows standards.
Ill give you a more real world example of why interfaces are useful. Comparable is an an interface that has one method compareTo which takes an object and returns 1 0 or -1 if it's larger equal or less. Now if you use this interface you suddenly allow all code that expects comparable objects to be able to compare two objects of your new type without knowing anything about the internal representation. This means you can have generic sorted collections of objects. Another example is if you have a interface for saving objects to a db. You could have multiple implementations using different dbs without changing the externally facing api. List is an interface that hides the implementation of the collection you use to prevent implementation details leaking into client code. This means you could change the collections implementation to something more effecient. Now if you'd not used an interface all the clients code would also have to change and there is no guarantee it will even have the same methods. More often than not it means it won't change as it would be too much work.
If you use an abstract base class, do the constructor as you would do other methods. Common stuff belongs in the base class'constructor, specific code for the subclasses should be in their constructors. Resist the urge to switch based on type in the base class'constructor. If you absolutely need the program flow, use a factory.
Can you please explain what maybe types are?
Although I'm not a Web development expert, here's my opinion: As for IDE, I would go for IntelliJ. Huge productivity boon and unsurpassed support for all mainstream frameworks. In Java you can use from microframeworks (eg Spark) for simple RESTful sites to full blown JEE compliant servers such as Wildfly. As for deployment in Web production I don't have much experience. 
First off, welcome to the Java world. First you probably want to have a decent IDE. The standard goto IDE is [eclipse](http://eclipse.org/) but [IntelliJ IDEA](http://www.jetbrains.com/idea/) is probably the better one (biased recommendation of course). When developing I'd always prefer Linux, since it's much easier to work with than Windows regarding version control, package managers, configuration and so on. Considering web development you should have a look at everything `Servlet`: official [Oracle docs](http://www.oracle.com/technetwork/java/index-jsp-135475.html) and [wiki page](http://en.wikipedia.org/wiki/Java_Servlet). I also really like [Jersey](https://jersey.java.net/) which builds a RESTful web service framework on top of the `servlet` interface. Last but not least take a look at [Apache Maven](http://maven.apache.org/) it is the defacto standard build tool for the Java ecosystem. That is what I come up so far. Feel free to ask questions.
Two options I can think of, pass the constructor arguments to superclass or use an overloaded **init** method: public class Parent { public Parent(String key) { //do something with key } } public class Child extends Parent { public Child(String key) { super(key); //do something with key } } or if Child needs to do work before the Parent then something like public class Parent { public Parent() { } protected void init(String key) { ///do something with key } } public class Child { public Child(String key) { super(); init(key); } @Override protected void init(String key) { ////do something with key super.init(key); } }
First off, understand that you can incorporate what you've learned about Model/View/Controller architecture almost directly. Learn the basics of the Java language and object model, make sure you're fully exploiting the concept of 'coding to the interface' by writing things that way even when it seems like a waste of time. Then learn Java Server Faces. This incorporates the best of JSP, Struts, and Ajax into something that's relatively easy to learn and quite powerful. I try to be IDE-Agnostic, because I can't know what any particular shop will be using. Most of my experience is with Eclipse, and I've found that I can get quite a lot done in that tool. Learn Maven. 
A real world example. I was handed an in-house API that used the Netscape LDAP library, but I wanted/needed to change it to use JNDI (Java Naming and Directory Interface) instead. My very first step was to create my own set of Interfaces that supported all of the LDAP operations. In conjunction with this I built a package to support invoking the Netscape API. Instead of using "netscape.ldap.LDAPAttribute" I would use my own "com.xxxxx.ldap.LDAPAttribute" interface, with a supporting "com.xxxx.ldap.netscape.NetscapeLDAPAttribute" object that implemented it. Once I had everything working, I was free to create a new package, implementing all of the same interfaces, but this time using JNDI technology behind the scenes. So now in addition I had "com.xxxxx.ldap.jndi.JNDILDAPAttribute" which did exactly the same work as the netscape version, but in a different way. I also used a factory class to create all of the objects, rather than instantiating them directly all over the code. This way I had one and only one class that referenced Netscape. A simple property file change let me tell applications which factory class to use. This class was created using the reflection API, so I never had to explicitly refer to the class name except as a text string. Once I had equivalent functionality, I was able to do a release where application developers could, if they so chose, decide which implementation to use. When things looked stable in the field, I changed the default implementation from Netscape to JNDI. After a while I deprecated the Netscape classes, then then eventually removed them entirely from the package. If the code had been written from the start using interface concepts, the whole job would have been done quicker and cleaner, without the 'gotchas' that cropped up now and then. Use interfaces to define the actions you want your code to take. Use implementation to actually perform those actions. Think of them as a contract between one body of code and another, even within a single small project. Use Abstract classes to perform common actions that will be used again and again. As a basic example, you might have to do many different reports, all using the same input, but with differing output fields. A way to handle this is to build an abstract class that reads the input, iterates over the data, and calls an abstract "emitLine" method. Then you are free to build as many concrete report classes as you want, all of which have to do nothing more than extend the base class and define their own specific "emitLine" method. I have actually been considering doing tutorials of my own on these concepts, because they are so fundamentally important.
JSF is one option but Spring MVC might be closer to what you're used to and Spring is far more prevalent in the professional Java world than JSF. 
Regarding syntax, Java is almost exactly like C# with a bit less syntatic sugar. Ive developed in both and although C# is a bit ahead language wise, java has this whole open source community around it thats really helpful. Regarding frameworks: http://zeroturnaround.com/rebellabs/the-curious-coders-java-web-frameworks-comparison-spring-mvc-grails-vaadin-gwt-wicket-play-struts-and-jsf/ Zeroturnaround comparrison of different frameworks. They also make this awesome product called JRebel, check it out, if you want to develop in Java - it will save you lots of time. Virtual java user group framework research: http://www.youtube.com/watch?v=ygW8fJVlDxQ#t=1389 Only about a month old and really in depth talk about different frameworks. The community is geared towards clean code and TDD, similar to where the ruby is. http://cleancoders.com/ Check out Uncle Bob books or videos
You will hate the lack of properties for getters and setters. IntelliJ's alt+insert helps ease the pain somewhat. Eclipse and other IDEs must have something similar.
I think it also has to do with the (imho) very nontransparent development process and community communication. (try finding the list of features for 4.4 on the main site) I myself use Eclipse, and liked the classic dev branch. However, a simple example on why people could feel why they cannot get a lean install: The most minimalistic branch forces the inclusion of per example Egit. I myself don't want this in my IDE, and there is no option to uninstall it *safely*. I think Eclipse is stable, or I should say I thought Eclipse was stable until I started using Xtend, or even reorganize the toolbar. (which on Linux, under GTK leads to an endless heap of misery). I still use it, I still prefer it over alternatives, but I do not like the fact that there are core problems which everyone can have and go unsolved for YEARS. (see bug tracker for numerous ui and workspace corruption issues). That said, it's something that's fixeable so I'm sticking to eclipse for now.
Yeah I don't see what all the fuss is about lambdas in Java either. Without some sort of closure scope mechanism, it's just syntactic sugar (extreme syntactic sugar, IMO). Counterpoint: It probably made writing the new Streams API significantly easier and less tedious. That's probably an area where the syntax of lambdas improves readability.
Try using the factory design pattern. It would also help isolate your DB resources in the factory class.
A maybe type is an encoding of the possibility of non-existence of an answer encoded into the type system without needing to be a language specific feature (IE: They can be parts of the standard library or an external lib). Their best use is as a complete replacement of null. Here's an example in scala: val option: Option[Int] = Some(5) val option2: Option[Int] = None //multiplies option by 2 and adds option2 to it if option2 exists, otherwise adds 6 val r = option1 map (_ * 2) map (_ + (option2 getOrElse 6)) //r == None if option == None //r == Some(16) in this code //similar code with null val opt: Integer = 5 val opt2: Integer = null val r = if(opt != null) { //scala has java's .equals method mapped to == (opt * 2) + (if(opt2 != null) opt2 else 6) } else { opt } As you can see, the maybe type (option in this case) encodes the same information that the ? in the article does, but it's not an addition to the language spec or a new operator or anything, just a standard library. It does not allow the programmer to access data that may not possibly exist without the programmer dealing with that possibility beforehand (to get data out of an option type, you must at least call the get method, which is the equivalent of using a nullable type without checking if it's null first). It also provides a number of methods and functionality that the elvis operator cannot implement but that is extremely helpful, like the orElse function (in the above case, if we did ```option2 orElse option```, the result would be option2 if option2 was defined, and it would be option if option2 is None). This kind of functionality is coming to java 8 with the Optional type: http://java.dzone.com/articles/optional-java-8-cheat-sheet
Static Factory is how I would do it. The factory can get the values from the database and instantiate a dumb value type that has no knowledge of the database. Separate your concerns, follow the SRP, etc.
Your second code example has a bug. Never call an overridable method from inside a constructor. 
Quite right! Made the suggested corrections. Thanks!
[**+Java**](https://plus.google.com/105864854338131698025) [_2014-03-02T06:20:56.524Z_](https://plus.google.com/105864854338131698025/posts/Wxwd9ciLd2R) &gt; &gt; [#JDK8](https://plus.google.com/s/%23JDK8) will be released very soon and with several new language features. You probably know now about [#Lambda](https://plus.google.com/s/%23Lambda) expressions. But the new version will also provide the [#OptionalType](https://plus.google.com/s/%23OptionalType) monad [1] &gt; &gt;What do you think? &gt; &gt;Learn more: &gt; &gt;[1] [http://en.wikipedia.org/wiki/Option_type](http://en.wikipedia.org/wiki/Option_type) &gt; &gt;[2] [http://java.dzone.com/articles/no-more-excuses-use-null](http://java.dzone.com/articles/no-more-excuses-use-null) &gt; &gt;[3] [http://java.dzone.com/articles/optional-java-8-cheat-sheet](http://java.dzone.com/articles/optional-java-8-cheat-sheet) 
To me, your argument assumes that Eclipse and IDEA are equals and that people just don't "stand up enough" for Eclipse. It's a deeper yet much more simple explanation. For me and most of the developers I've talked to, IntelliJ IDEA is actually a better IDE, overall, for developing Java-based applications. I used Eclipse for most of my 10 year career, but once I switched to IDEA, there was *absolutely* no turning back. In my experience, it's much faster, doesn't lock up like Eclipse would (probably from badly-written plugins), gives you enough info when having issues, and the UI and feature-set is much more focused on your needs as a developer rather than positioning Eclipse as an "Ã¼ber-IDE" whose UI is over-generic and not devoted solely to the developer (ie, the workbench/views/plugins architecture and feature set tries to be general to uses other than as a developer IDE). Every release of IDEA is better than the last, whereas with Eclipse, there were actually updates that made Eclipse *worse*, breaking something that was working fine before, or just removing a feature for no good apparent reason. Developers don't like relying on a feature just to have it, out of the blue, disappear or be broken in the next update (and then relying on someone fixing it for free or having to fix it yourself). We just want an IDE that "just works". IDEA is purpose-built from the ground up to be a Java developer-focused IDE rather than just an open and flexible container for plugins, and it shows. I've lived the Eclipse life and will not soon go back.
Probably A Programming Language, which uses greek characters and is (often) very difficult to read.
I came from .NET and am now working in an enterprise Java environment. We use JSF now but had some older code using spring MVC. Spring MVC is definitely closer to what I was used to.
"Jack of all trades, master of none" comes to mind.
Ex .Net dev here too. Spring MVC is definitely closer to MVC3/4 than JSF or Struts2. You still need to get a strong understanding of Servlets though, that's quite a bit different than ASP. The Spring Framework itself feels very close to .Net. The hardest part the transition was how everything isn't just there, it's pulled in from some 3rd Party library. Since C# was made as MS's answer to Java the syntax is damn near identical, except that Java is a little behind on some things now. I think Java 8 will be pretty close to .Net 4/4.5. I love that I switched. I have fallen in love with Java. It's so much more versatile. I use Eclipse on Mac at home, because I need Photoshop. If I didn't need Photoshop, I would use a Linux machine. At work, it's Win7 and Eclipse. 
No worries. Just thought that the errors might confuse a beginner. 
Definitely IntelliJ. If you used Resharper you'll find the environment very familiar.
Thank you for the time put into the reply, it has helped me quite a lot!
Can I ask you a question? What prompted your desire to switch from .NET to Java?
Java is typically JIT'ed. Yes, it can be AOT'ed and it can be interpreted, but in practice it's almost always JIT'ed.
The attributes of the parent class are final, so they need to be set in the constructor. That's why I didn't go the init() route right off. 
For what's it worth, I began my career using IDEA and, at that point, Eclipse had the upper hand in ease-of-use and feature set. I also liked their flexible approach to plugins (and at that point there were many more plugins for Eclipse). So I switched **to** Eclipse because it was better, and (temporarily) sweared off IDEA. However, 2 years ago I tried IDEA again and found that it had leapfrogged Eclipse in the span of 8 years, and so I switched back to IDEA. So, it's definitely not impossible for me to switch back to Eclipse... Competition is great for everyone, so I hope Eclipse continues to get better.
Also what would you do instead of having an ArrayList of vectors?
What do you mean by "let it all go out of scope"? 
See [java.time.format](http://download.java.net/jdk8/docs/api/java/time/format/package-summary.html) package. DateTimeFormatter "is immutable and thread-safe."
I'm upvoting this because I'm from Cluj too. Cheers!
The same thing that [/u/kristler](http://www.reddit.com/r/java/comments/1zbx66/trying_to_display_circles_not_going_so_well/cfscafw) pointed out. posVelAcc is declared in the constructor. When the contructor is finish then it goes away. Nothing else can access it. Scope refers to the access of a variable and is a pretty common term in programing. eg. int n = 1; for(int i = 0; i&lt;3; i++){ int other = 1; } After that for loop runs the **n** is still accessible because of the scope it was declared at. **other** goes away after the for loop because it was declared inside of the for loop. 
I just create new ones. I found out in a little test that it was much faster to create new SimpleDateFormat objects that having one and handling synchronisation.
Because Eclipse is garbage, and any attempt by the "Eclipse community" to claim otherwise will get shot down like a hot-air balloon in front of an anti-aircraft gun.
So what should we stand up for?! - workspace corruption forcing us to lose time setting up everything again - binding the settings to the workspaces, instead of the editor, thus forcing an import/export dance among workspaces - instead of providing a vertical integration like other IDEs, it forces to rely on third party plugins, many not stable enough - 2nd class experience for web developers, when compared with the tooling other IDEs offer - frankenstein integration between builders and external build tools, while other IDEs use external build tools as their build mechanism. Good luck tracking down M2E integrations - going to delay support of Java 8 until June, while other IDEs already support it - 2nd class GUI designers for Swing and JavaFX Maybe better stop here.
You might want to check out joda time... I've used it a couple of times, I think they tell you explicitly whether each method is thread safe or not... http://www.joda.org/joda-time/
Thanks, but was the article any good?
The whole point of this post was that there us a better date library bundled with Java 8.
Ha misread it. That explains the down votes. 
&gt; doesn't lock up like Eclipse would Anything else I can put up with...
Most people do not choose Eclipse because they love it. They have to use it because it is mandated on their project. People who use Netbeans or IntelliJ have usually picked it and are more passionate about it. IntelliJ seems very popular on this reddit but I have never seen in used in my professional career.
What about Play?
Partly because of a want for change (they say it takes 7 years to master something, so you can live many lives if you take advantage of this), and partly because I am starting to see a resurgence in Java for web - Atlassian, Amazon, LinkedIn, Google etc. I am learning Ruby on Rails, but that only works for roles where you are building small things. Java seems to have made it into the big leagues and the tooling seems way better than when I was getting into .Net
Eclipse is just a huge mess that seems to have been designed by a committee, with ten thousand menu options, very buggy and runs slowly compared to IntelliJ. It seems to be the popular with the kind of devs that choose their tool based on what's the "industry standard", which while not necessarily a bad approach, tends to leave them a step behind others. Another thing I see a great deal is companies that need Eclipse because they rely on some very special plugins. It's really ironic that in a "write once run anywhere" language people use a "write once, run only using a particular IDE and set of plugins, even if there's better stuff out there, but oh god we can't change now because we've chained ourselves to it" approach. Yuck. So why doesn't the Eclipse community stand up more? Because they're either: 1. Devs that don't care much about using the best IDE, they use the "industry standard" for the lowest risk, do their job and go home. Not a big deal, they probably have a life outside of work :) 2. Devs that picked it because it was the "industry standard", and are "too busy" to try out new ones. I've come across people like this a lot. 3. Devs that are locked into it because their company made dumb decisions to rely on Eclipse plugins to do anything, and want to change but can't. They're community prisoners more than community members. 
If you love Eclipse, just focus on making awesome stuff for it instead of what people who don't even use Eclipse think. If you make awesome stuff you will get attention for that all on its own. 
I looked into it, got about 2hrs into some tutorials and what not. Then I realized it was very specific with its server configuration or else it runs at "reduced performance" and I dismissed it. 
There is one useful trick you can do: &lt;T extends Number &amp; Serializable&gt; void method2(T... args);
Can I ask what you like about Eclipse that IDEA doesn't offer? 
Very interested in what you mean by flawed principles. 
And I hope you don't think that I downvoted you. 
&gt;Also what would you do instead of having an ArrayList of vectors? And &gt;Very interested in what you mean by flawed principles. Go hand in hand. I'm not entirely sure what your intention was with the `posVelAcc` ArrayList. Can you explain your reasoning? Even before we get to that though, did my post help you fix your error?
I think Java goes a bit overboard with its verbosity, if the primary goal is writing self-documenting code. Scala, for example, (allows a programmer to) strike a nicer balance IMHO.
Putting on the pedantry hat, do you think of the most common implementation of JS to be interpreted, then?
BlueJ is meant more for starters. After you are done with that class, you will transition to an IDE like Eclipse/Netbeans/IntelliJ. The official tutorials are amazing, but a great started book is head first java.
Eclipse is such a mess that Google abandoned it, at great cost, to migrate their android stuff to intellij.
Yes I feel the same way. I tried idea after hearing how good it was on reddit. But never found any compelling reason to switch. But then again it's maybe just my preference 
Okay, so you got the right idea just the wrong approach. Position, velocity, and acceleration are properties of the `Ball`, you would agree yeah? That's exactly what regular attributes (Like how you've declared `x`, `y` in the `Ball class) are meant for. Lists, like the `ArrayList` you declared, are more for when you need lots of a certain thing, but the key is that they're all *used in the same purpose*. This is directly contraindicative to what Position, Velocity, and Acceleration is, right? They may all be Vectors, but the way you interpret them is completely different. You can't use Position in the same way you use Acceleration. Now compare this to a class, where you have a roster of students. Lets say each student has an ID, and a grade. This is something you might want to use a List for, because they're all going to be `Student` objects, but the *way you use them is effectively identical across any Student object*. Timmy the Student is considered in the exact same way Jeffrey the Student is. The way their Student ID and Grade is interpreted is the same across any Student object. What would make this example an example of the "wrong" usage of a List would be to use the Grade of the Student to store their attendance or something. Now that you've read that, do you have any ideas where you'd put your Position, Velocity, and Acceleration, and in what form? Let me know if you have any questions.
It was the disappearing project settings for me. My project would work fine, then all of a sudden it simply wouldn't execute my jUnit tests anymore, and whether or not the project would actually build was totally up in the air.
Okay so it sounds like I would just say something like class Ball { Chaney2DVector position; Chaney2DVector velocity; Chaney2DVector acceleration; public Ball(float x, float y, float velX, float velY; float accelX, float accelY) { this.position = new Chaney2DVector(x,y); this.velocity = new Chaney2DVector(velX, velY); this.acceleration = new Chaney2DVector(accelX, accelY); } } Thanks for the explanation, that made the ArrayList object make a lot more sense to me. I hope this version of the code is better.
That's correct! Now, everywhere in your `Ball` class (Like your `draw()` method), change the references to `x` and `y` to be `position.x` and `position.y`. With that change made, I think the balls should be rendered at their right spots. Hard to say without trying though.
Please put some indication of what your question is in the title. This title won't help someone browsing know if they are able to help you or not. Also you may find more of what you're looking for in /r/learnjava and /r/learnprogramming
Ha, misread it. Commas are handy
I'm not the guy you are asked, but I have a response. I just started using IDEA about a month ago. My work involves developing SOAP web services. Eclipse has a pretty darn good visual XSD and WSDL editor (part of WTP), and as far as I can tell, IDEA does not provide a GUI to edit these file types. I can't stay in IDEA 100% as I don't want to edit WSDL files by hand...which I'm forced to do in IDEA. Another thing that really caught me off guard was that the Maven plugin for Eclipse (m2) seems to work better out of the box than the Maven support in IDEA. It took me a little while to configure Maven to work in IDEA, but maybe that's because I'm just an IDEA noob.
I develop with GWT. I've tried to switch to IntelliJ, but the gwt plugin is not available on the community edition. I choose Eclipse because it's free.
Hmm... It's still doing the same thing. I changed every reference to x to position.x (likewise for y), and changed every reference to velX to velocity.x (again, same for velY). I have no idea where to go from here.
Can you show me your full updated code again? use something like https://gist.github.com/ preferably.
I created the gist, [here](https://gist.github.com/anonymous/9317867) is the link for it. I think I created it correctly, let me know if I didn't. 
I'm not a pragmatist when it comes to Eclipse, but I think the bigger issue I have is at work I need to use it, and when I am home where I can experiment with different IDEs, environments, etc. I'm usually learning a completely different language, so I've never gotten a chance to actually dig deep into IDEA to learn all the shortcuts. I love looking at new editors, but unless you're willing to really sit down and learn all of the things it has to offer, I feel like my time is better spent at home (where time is at a premium) with something I already know how to use while exploring a new topic, than wasting time on learning an environment.
By modify, you mean to change once they've already been assigned to memory, right? The only place I can think of is within the moveOneStepWithCollisionDetection method within the Ball class. 
That's correct, actually. Now ask yourself. Is that **really** correct, in terms of what we *want* the program to do? Logically, where else should `position, acceleration, velocity` be changed? 
I feel like you're trying to get me to look at one of the other classes, but you mentioned earlier that I made one too many changes... and I only made changes in the Ball class (I think). I'm stumped. 
Yeah, was a good read, one critique I might give is giving code snippets to emphasize points, rather than big blocks.
In your `Ball` constructor, you initialize the attributes of `x` and `y` and so on to be the values that we pass in through the constructor. Your `Chaney2DVector` attributes, `position acceleration velocity` are never touched. In other words, they have default values (Since when you declared them, you declared them to be a `new Chaney2DVector(x, y)` and so on. At this point in the program, `x` and `y` have not been initialized, so they have implicit default values. For numerals (like `float` and `int`), this is 0. Thus, your `Chaney2DVector` attributes all have values of 0.) Does this make sense?
Oh wait, did I never make the change that I meant to earlier? I should have put the vector things inside the constructor, right? What did you mean when you said that I made one too many changes?
I meant, before you never initialized these attributes: float x, y; float velX, velY; float accelX, accelY; float radius; private Color color; What I wanted you to do was to move the declaration of your `Chaney2DVector` attributes out of your constructor, and into your class, like this: Chaney2DVector position; Chaney2DVector velocity; Chaney2DVector acceleration; Then, in your constructor, **initialize** the vectors, like you had before. They should have the values passed in from the arguments. Then, you can delete the first block of above attributes since they're not needed.
I think Ill just stick to Netbeans.
This isn't the most straightforward issue to solve when it comes to android, especially if you're just configuring your environment for the first time. OP, have you set up the eclipse ADT tools yet? I assume this is eclipse. Rather than jumping in and setting up libgdx, your first project should be pure android just to ensure that the sdk and other Dev tools are set up correctly.
Good point, I'll keep it in mind.
Okay so now the balls have disappeared. I made a new gist [here](https://gist.github.com/anonymous/9318855) of the new Ball class. I made the change of putting the initializations inside the constructor, and I'm not getting any error notifications inside the editor. However, when I run the program I get the following errors in the console: Exception in thread "Thread-2" java.lang.NullPointerException at chaneyBouncingBall.Ball.moveOneStepWithCollisionDetection(Ball.java:66) at chaneyBouncingBall.BallWorld.gameUpdate(BallWorld.java:152) at chaneyBouncingBall.BallWorld$2.run(BallWorld.java:134) Exception in thread "AWT-EventQueue-0" java.lang.NullPointerException at chaneyBouncingBall.Ball.draw(Ball.java:52) at chaneyBouncingBall.BallWorld$DrawCanvas.paintComponent(BallWorld.java:164) at javax.swing.JComponent.paint(Unknown Source) at javax.swing.JComponent.paintChildren(Unknown Source) at javax.swing.JComponent.paint(Unknown Source) at javax.swing.JComponent.paintChildren(Unknown Source) at javax.swing.JComponent.paint(Unknown Source) at javax.swing.JLayeredPane.paint(Unknown Source) at javax.swing.JComponent.paintChildren(Unknown Source) at javax.swing.JComponent.paintToOffscreen(Unknown Source) at javax.swing.BufferStrategyPaintManager.paint(Unknown Source) at javax.swing.RepaintManager.paint(Unknown Source) at javax.swing.JComponent.paint(Unknown Source) at java.awt.GraphicsCallback$PaintCallback.run(Unknown Source) at sun.awt.SunGraphicsCallback.runOneComponent(Unknown Source) at sun.awt.SunGraphicsCallback.runComponents(Unknown Source) at java.awt.Container.paint(Unknown Source) at java.awt.Window.paint(Unknown Source) at javax.swing.RepaintManager.paintDirtyRegions(Unknown Source) at javax.swing.RepaintManager.paintDirtyRegions(Unknown Source) at javax.swing.RepaintManager.prePaintDirtyRegions(Unknown Source) at javax.swing.RepaintManager.access$700(Unknown Source) at javax.swing.RepaintManager$ProcessingRunnable.run(Unknown Source) at java.awt.event.InvocationEvent.dispatch(Unknown Source) at java.awt.EventQueue.dispatchEventImpl(Unknown Source) at java.awt.EventQueue.access$000(Unknown Source) at java.awt.EventQueue$1.run(Unknown Source) at java.awt.EventQueue$1.run(Unknown Source) at java.security.AccessController.doPrivileged(Native Method) at java.security.AccessControlContext$1.doIntersectionPrivilege(Unknown Source) at java.awt.EventQueue.dispatchEvent(Unknown Source) at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source) at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source) at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source) at java.awt.EventDispatchThread.pumpEvents(Unknown Source) at java.awt.EventDispatchThread.pumpEvents(Unknown Source) at java.awt.EventDispatchThread.run(Unknown Source) I'm not sure if this is caused by the Ball class or if something is going wrong elsewhere. That's awesome about the article. I never would have guessed that you're 18.
Can you upload your latest code?
&gt; Why doesn't Eclipse community stand-up more to IntelliJ? Because it's not a faith-based argument? 
So telling...
With all of the code you mean? Here's the link to all of it: [New code link](https://gist.github.com/anonymous/9319013)
[Here](https://gist.github.com/anonymous/9319013#file-ball-java-L27), at line 27, you overwrote your `Chaney2DVector` attributes. Remember once you've declared it once, you reference it only by using the identifier from then on, right? You declare it at the top of the `Ball` class, so lines 27 to 29 should not have the type identifier `Chaney2DVector` there.
Is this a joke? Enterprise doesn't mean over-designed. The problem you state in the readme is still solved with 3 conditionals and a default case.
SUCCESS!!!!!! Dude, you rock. I really appreciate you taking the time to help me out with this. If you don't mind, I'm going to save your username... I may end up bugging you again about something else in the future. How do you find stuff like that so quickly? Just knowing from experience what to look for?
Yeah no problem, feel free to pop me a message any time you have questions. As for how I find stuff like that so quickly, I'll walk you through my thought process from when you told me you got RuntimeExceptions: * [Big pile of exceptions](http://www.reddit.com/r/java/comments/1zbx66/trying_to_display_circles_not_going_so_well/cft0pzc), often times the first one at the very top is the most important, the rest is just a stack trace * First two lines: `Exception in thread "Thread-2" java.lang.NullPointerException at chaneyBouncingBall.Ball.moveOneStepWithCollisionDetection(Ball.java:66)` Tells me that it's a `NullPointerException`, and that it happened inside the `moveOneStepWithCollisionDetection` method. Specifically, this part: `(Ball.java:66)` tells me it occurred on line 66. * I know you made some changes to the code inbetween the last few messages and when you showed me the error, so there's almost no hope in guessing randomly at what's wrong. Better to just look at see, hence why I asked for the latest code * Check Line 66, [here](https://gist.github.com/anonymous/9319013#file-ball-java-L66) and I broke it down into its components. The `if` statement is a non-issue, the comparison (less than) is a non issue, and `ballMinX` is a `float`. Primitive `float` types can't cause `NullPointerException` errors to occur, so the problem has to be in the `position.x` line. * Now that we know the problem is related to the `position` object, and that the error is a `NullPointerException`. That means that the attribute `position` (Which should be a `Chaney2DVector`) somehow ended up being `null`. This only way this can happen is it wasn't initialized properly, so we look for all the places where we initialize `position`. * This leads us to Line 27, [here](https://gist.github.com/anonymous/9319013#file-ball-java-L27), and then the error's apparent. With another declaration of `position`, it "shadows" the `position` attribute in the higher scope (The scope of the class) and the narrower scope (Of the constructor `Ball()`) takes precedence. * From there we conclude that the `position` that was initialized in the constructor was in fact not the attribute `position`, but the local variable `position`. Changing this from being a new, local variable to something that uses the class attribute fixes the problem.
So, for something to be "enterprise", it needs to be much more complicated than it should be? You managed to convert 3 lines solution into something that no one can understand.
Exactly. I desperately want to like it; I know it has good capabilities, some of which I could probably use to improve my day. But I can't figure out what those things are, because it's so unpleasant to use
Your screenshot doesn't include the actually errors....go to your Problems tab and copy &amp; paste the errors from there. Screenshots are good too, but in this case we probably need both. Just to make sure you've got everything setup correctly take a quick look at http://blog.osdev.org/libgdx/2014/03/01/setting-up-libgdx.html
I read your latest, on the regex that crashed a server. I'll get to this one too in a while.
How about: textLabel.setText(messageField.getText()); 
Check out the /r/javahelp wiki for a list of tutorials. (But stay clear of **thenewboston** tutorials.) BlueJ is for beginners only, get used to using a "proper" IDE (Eclipse, Netbeans, IntelliJ) as early as possible. 
It's a joke. The issue feed is hilarious.
He has co-authored [this very interesting paper](http://queue.acm.org/detail.cfm?id=1961297) with Erik Meijer, back in the days. Maybe, this does have some influence on the Java language in the long run.
While type intersections are a great language feature in general, I have actually not yet encountered many places where this was useful to me...
One word: [IResourceReferenceDependencyConfigurationService](https://wicket.apache.org/apidocs/1.5/org/apache/wicket/resource/dependencies/IResourceReferenceDependencyConfigurationService.html).
It sounds interesting, and they said they have a link to the source but I couldn't find it.
What do you mean by "specific with its server configuration"
I used to use Netbeans for a few years. It has a really clean GUI and is much simpler to use than the other two. It did however have a lot of bugs where the compiled code cache would get out of step, to the extent most people in my company had to have a bat file on their desktop to delete the cache. It also has poor support for other JVM languages. I moved away from it once I started doing Groovy tests. The NetBeans GUI builder is good though.
No reduce example? I've implemented a lot of functional algorithms in Groovy and Guava and the biggest difference in Java 8 is the characteristics of "reduce" which make implicit parallelism possible. (rather than an accumulator)
I can't speak for the WSDL issues, but Eclipse's Maven support is atrocious, so yeah, you must have been doing something wrong if you consider Eclipse's Maven support better than Idea's. Couple of gripes I have with Eclipse's Maven plugin (the ones I remember anyway): * still keeps lots of information in the Eclipse project file that does not get synced anymore from the POM, and does not read some rather important info from said POM (eg. the source-level unless they finally fixed that) * very often fails to sync SNAPSHOTS * does not use you local Maven repository by default * has the tendency to somehow corrupt its repository (happened to a colleague of mine on a regular basis) * simply freaks out if you put in plugins not explicitly supported by it and will keep on whining about it unless you change your POM to accommodate it instead The last bit is actually a general Eclipse complaint, it tries to claw its way into your projects by force even if you try to keep them IDE neutral. For another example: its VCS support does not do the sane thing and ignore the machine specific project files by default. The amount of Eclipse cruft I've had to remove from (mostly Svn) repositories is staggering. That said, Idea's UI took some serious getting used to (but boy, was it worth it), I also think a lot of its default keybindings are extremely badly chosen (applications should leave the F-keys alone for use by the user) and it has some defaults that make very little sense (not adding a newline at the end of files by default, for example), that said once you configure the thing to your liking it applies these settings consequently, even across third party plugins.
Even worse, the user experience hasn't changed in the 10 or so years since I first used it (ok, it crashes less, I have to give it that). In a lot of cases it's actually become worse (plugin management for one...)
Sure, Netbeans just works, I've used it for a long time, it's got way better keybindings than IDEA. However, it only supports Java properly, support for other JVM languages is miles behind both Eclipse and IDEA and has actually got worse since Oracle took over (yeah, I've been using Netbeans for while). So when I switched from writing Java to Scala I had little choice but to switch IDE as at that point the Scala integration for Netbeans wasn't working nor maintained anymore (I noticed the author picked it back up by now though). I had a brief look at Eclipse, noticed none of the things I disliked about it were fixed (must have taken some effort to get nothing substantial done in all those years) and downloaded IntelliJ IDEA. Barring the rather bad default keybindings it is a pretty damn awesome IDE.
Sadly, that's the only thing Eclipse has going for it and even being a big Free Software proponent I'm more likely to pay for my own IDEA License than to switch back to Eclipse. I'm sorry, but I think it *is* *that* bad.
FYI cloning is still much faster than using the constructor since JDK 1.6 (see https://github.com/scala/pickling/pull/76 for a short discussion)
The code sample doesn't look like pure java. Is this some scala sorcery? SimpleDateFormat implements cloneable thought do should be easy and indeed faster to clone them.
I can never seem to get plugins working either. It's hopelessly screwed up, or at least terribly inconvenient and ineffective. 
I forgot about this link but found it recently: http://java.dzone.com/articles/why-idea-better-eclipse 
Couldn't be more excited. Java has felt stagnate for *years*. Getting all of these new functional tools is a huge step in the right direction, in my opinion. I've been using the preview edition of 8 for about a month now and I'm just absolutely loving it. It makes Java fun again! 
There's a certain sect of the Java community that seems to hate when people take the piss out of the language (hence the downvotes and grumpy comments). I thought this was hilarious. clicking through all the packages actually made me laugh. 
I don't really understand why this is funny besides exemplifying what I assume is some traditional view of java in an "enterprise" env. Any language can have terrible implementations. To me, this is less about enterprise java than just bad design.
I've been using Scala for the past 3 years, but I still have to respond to that [2] link you give. He gives two opposing code snippets: int readPositiveIntParam(Map&lt;String, String&gt; params, String name) { String value = params.get(name); if (value == null) return 0; int i = 0; try { i = Integer.parseInt(value); } catch (NumberFormatException nfe) { } if (i &lt; 0) return 0; return i; } vs int readPositiveIntParam(Map&lt;String, String&gt; params, String name) { return asOption(params.get(name)) .flatMap(FunctionUtils::stringToInt) .filter(i -&gt; i &gt; 0) .getOrElse(0); } And of course we're supposed to infer the latter is superior because A) fewer lines of code, B) less varied syntactic constructs, and C) it's functional. But, firstly, they are not equivalent since the second example introduces a refactoring that the first example could have used, namely a "stringToInt" function that encapsulates the try/catch. The first example could be rewritten as int readPositiveIntParam(Map&lt;String, String&gt; params, String name) { String value = params.get(name); if (value == null) return 0; int i = stringToInt(value,0); if (i &lt; 0) return 0; return i; } Where stringToInt is int stringToInt(String s,int defaultValue) { try { return Integer.parseInt(s); } catch(NumberFormatException e) { return defaultValue; } } Right, so for reason A), we're saving 1 line of code which can be eliminated via: int readPositiveIntParam(Map&lt;String, String&gt; params, String name) { String value = params.get(name); if (value == null) return 0; int i = stringToInt(value,0); return i &lt; 0 ? 0 : i; } But who cares about lines of code, the functional version is better because ... because why? Is it easier to read? I don't think so. A snippet of code that's about converting a string to a number and providing a default value of zero in the event of various circumstances is, in the functional version, obscured by method calls like "asOption, flatMap,filter,getOrElse" that seem completely unrelated to the problem at hand. The traditional java version is obscured by use of local temp parameters. Which is easier to read? Depends entirely on what you are used to, I would think. Though, I have to say, the Option/Maybe style gets unwieldy as you move beyond dealing with 1 optional value to dealing with 3, 4, 5 + all together. As you string maps and flatmaps and filters and getOrElses in one big long line, you start to question whether this is making things easier and simpler. What Option provides that's nice that you don't see in the Java example is the communication that "this might not exist". It is nice to have the map and foreach method for Options and thus be able to write code that just won't ever be executed if the value is null - that is nice, but it's not stupendous. In many many real examples, going full tilt with the monad functions for all your optional values will give you code that's just ridiculous to try to read. In such situations, you find that the traditional Java style of going step by step with local temp variables provides a nice recipe of what is happening. The code may be longer and more varied, but it's talking you through what's happening.
Play is a Scala framework. It works with Java because of the JVM, but the frameworks idiomatic usage is tailored for Scala. It's expected that with Java 8 it will be easier to use Play more in its native style from Java. 
There are hundreds of frameworks in Java, but it's best to start with the two standard ones: Java SE and Java EE. Pretty much every framework builds on those anyway, so you'd best start with the basics. Chances are those basics turn out to be more than enough for you. Especially Java EE has seen huge improvements over the last few years.
Hi @Starbuxman, As a developer using Spring since about 2007, I have misgivings about directing Spring novices to these Spring Boot Guides. Everything you say is accurate, except the part about no magic. The @Auto and @Enable annotations come with a lot of configuration by default, and that's great if you already know something about how Spring Framework operates. The problem is that for someone brand new to Spring, there is very little guidance on how to take that simplest thing and add a new feature, or over-ride the defaults set by the Spring Boot auto-config logic. For example, the logging configuration is inside one of the spring-boot jars, so it's not at all clear how to change logging levels. It's going to be a while before Spring Boot matures to where somebody can use it to learn Spring by example. The documentation is sparse and generally assumes the reader has prior knowledge of all the tedium that has been removed. In fact, I would argue it's important to learn from first principles, by going through the process of manually setting up a project (the tedium of application development). Once you're comfortable with the fundamentals, then you start looking for ways to enhance productivity. 
Annotations are usually used to add some extra meta information to a class or method which can be used via reflection for various purposes. For example I needed annotations for creating custom documentation for an internal API. So I have: @Documented @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface MethodInfo { String description(); String since() default "5.8"; String link() default ""; boolean publish() default true; } Then I annotate various method and can then use a tool like ANT to look for these annotations and generate the documentation. Other common uses are in frameworks like Spring where they use them in lieu of XML configuration. 
AGREE. I work for an extremely forward-thinking manager, who absolutely *will not allow* us to put in more than 8 hours in a day, and preferably we stop between 6-7. He insists we work very hard while we're at our desks, but regular breaks and a one hour lunch are absolutely mandatory. The thinking is that anyone working longer than 8 hours in a day is damaging our most valuable corporate asset, so it is not allowed. Our observations show that we are most productive during the morning hours, with accuracy and productivity falling off after 3pm. This is by far the cleanest and least buggy codebase I've ever been a part of. In five years, we've done maybe 6 days of "crunching" and have never missed a milestone or deadline.
I really wish that people would stop pointing impressionable developers to MySQL... It's a horrible DBMS and it teaches terrible habits. Go out and learn something worthwhile like PostgreSQL or DB2.
We (programmers) are the goose that lays the golden eggs which means that we can work at our leisure and get it right, right? Wrong. We're gonna get squeezed 100 times as hard because 1) they're golden eggs and 2) the golden egg market is inflationary. It's the tragedy of technology or something.
Googled but couldn't really find anything that I didn't already know. That is, if you write php applications, then you're a programmer. Now, can you tell me what *you* think is the difference? Since you wrote about in the OP it'd be nice if you actually explained your question to those who ask, wouldn't it?
Excellent, thanks!
Thanks. So, let me ask a follow-up question, to see if I understand. (I'm taking this from what you said about Spring.) Let's suppose I was writing an application that used some kind of plug-in architecture, so that the app could delegate certain tasks to one or more plugins. I would need some way for the application to find the particular plugins available. At one time, maybe I would have had to configure this all manually (using XML or a properties file, for instance). With annotations, is it possible that I could just configure a particular directory, drop all the plugins into the directory, and have the various plugin classes "marked up" with annotations, so that the application could (via reflection?) load the available plugins and see where to plug them in? Something like that?
Like a teacher I once had told the class, "They finally realized that writing XML by hand is a pain in the ...".
I would be interested in contributing to such a project... I currently use ownCloud and find that it underperforms... A Java implementation could be significantly faster on reasonable hardware. We could also integrate it with desktop items like a tray icon and perhaps even a Linux/FUSE filesystem implementation. The sky is the limit with what you could accomplish. EDIT: Also, I agree about Jetty... Use the maven assemblies plugin to generate an executable JAR file so that deployment is drop-dead simple. The default installation could implement HSQLDB and allow the user to specify an alternate config for customized DB backend...
&gt; but Eclipse's Maven support is atrocious Eclipse *does* have a very nice GUI POM editor... So I guess what I'm seeing here is that IDEA doesn't have a lot of the GUI support that Eclipse does.