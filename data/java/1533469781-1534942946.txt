Yeah this is going to be creating lots of interesting misunderstandings...
&gt; **Deduplication Age Threshold** &gt; It is assumed that String objects either live for a very short time or live for a long time. Deduplicating objects that will die soon is just a waste of CPU and memory resources. To avoid deduplicating strings too early the deduplication age theshold dictates how old a String object must be before it will be considered a candidate for deduplication. This threshold will have a reasonable default, but will also be configurable using a VM option. [Source JEP 192](http://openjdk.java.net/jeps/192) Option: &gt; StringDeduplicationAgeThreshold (uintx) --- String objects reaching this age will be considered candidates for deduplication
I use it as scripting already (ported *.js/Nashorn/jjs)
This is going to make things fun to Google. 
Java's just too verbose for this sort of task IMO. &gt;public static void main(String[] args) Yeah I'll stick with bash or python for scripting.
Ha, I just reached 200 pages today, couple of hours ago. What a great book. Looking for Java Puzzlers probably next
Because beginners coming from Python want to run things, not be confused about compiling or classpath.
I doubt if anyone thinks that this enhancement makes Java the ideal scripting language. I‚Äôll stick with bash and Python for my scripts too. Having the option to use Java this way isn‚Äôt a bad thing though. I might take advantage of it if there‚Äôs a Java library that‚Äôs particularly well suited to the task my script needs to do, or maybe if I need to write a quick script that interacts with some of the classes in my project. In the past, I might have written those scripts in an existing Java package, even though they‚Äôre short-lived, temporary scripts. Now, I can write them anywhere with less ceremony. 
Your tools should do all such stuff for you. In IntelliJ I write psvm And hit return. Can't remember the last time I wrote that line out manually üòÅ
Ok, I can see that, but it's a strange reason to add a whole new feature. Just to make the transition from python easier. Especially as they'll still need to learn about compiling and the classpath (not complicated subjects either) anyway...
Not if we get value types. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
5 years down the road, I can't wait for the big-mega-corp emails: "Hey, do you have that Java file I can run to fix my issue for the Java app with the bug that nobody has ever gotten around to fixing?" "Oh, you mean the one that connects to the Prod DB, changes a few rows, and then messes with the hosts file. Here you go, make sure you run it as an administrator"
This is stupid. If you need a scripting language, use a damned scripting language! It's not like you done have plenty of choice already. /rant FFS, how much more of the Java needs the same feature as language X, quick bolt it on, before it's completely ruined? Newsflash: Hipsters aren't using Java, probably never will. Also, knock it off with wrecking backwards compatibility. /rant
Like var. Fuck var. 
TBH, My annoyance is with JDK9 modules. var isn't so bad.
This could be useful for our nightly jobs. We have a lot of one class programs that just move around data in databases on various schedules.
Installing and booting an IDE isn't optimal for a quick script. Also when in an IDE you might aswell compile it in regular fashion. On a server with no GUI and permissions its no option anyway.
I am in the process on writing a free and open source book on Javalin. Here's the link for anyone who is interested: [https://leanpub.com/javalin](https://leanpub.com/javalin)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Sidebar: NO programming help, NO learning Java related questions! /r/javahelp is the place for your questions
It looks like a java.util.prefs or JShell bug. It writes `\033` as `&amp;#27;` (control char) but cannot read it back: ~/.java/.userPrefs/tool/JShell$ xmllint prefs.xml prefs.xml:10: parser error : xmlParseCharRef: invalid xmlChar value 27 &lt;entry key="MODE" value="colored‚êûtrue‚êû&amp;#10;&amp;#27;[38;2;0;115;150mjshell&amp;#27
This question doesn't make sense. Objects in Java and objects in C++ are created in memory, either on the stack or the heap. C doesn't have objects. In C, a location in memory, either on the stack or the heap, is referred to by a pointer. In Java, you have a reference. Pointers are non-moving, what they point to can't be moved (otherwise the pointer has to change). In Java, the garbage collector moves the object through different generations, yet the reference doesn't change.
It looks like in your [submission](https://www.reddit.com/r/java/comments/94tued/treeset_of_strings_ordered_with_their_length/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Hey, I'm just discovering vertx, what was the problem with vertx ?
There‚Äôs [Segment](https://docs.oracle.com/javase/10/docs/api/javax/swing/text/Segment.html) which implements CharSequence but it‚Äôs part of swing and it‚Äôs for char arrays.
OP is right though, java references are implemented as pointers.
It is helpful for students too, who may not need to learn about the classpath or compiling for months.
Seems legit
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Objects are allocated to the heap. Pointers are stored on the stack. 
Isn't this for Ultimate edition only?
Yes
You must be looking at the Business license. Personal is way less: https://www.jetbrains.com/idea/buy/#edition=personal
What's the watch shown on mobile link pic?
Regarding the "Triggering DevTools" part, \[this SO answer solves this I think\]([https://stackoverflow.com/a/12744431](https://stackoverflow.com/a/12744431)).
It's quite a simple usecase, you're a java dev, you work on mostly java stuff, and need to make a quick fix or run a small service that consumes some files and generates an output for you once, so you just write a quick script that does that, and since it's technically java you have access to the same libraries you use for the rest of your work :)
This one is actually a decent idea. It shows the entire stectrum. Maybe add in a remote database server to store basic transaction logs, products and prices. Securely so the client isn't directly connected via JDBC. It's pretty solid. 
In an hour? Is this bad joke I'm not getting? 
so you're testing a candidate on being a boilerplate generator? All of that is tedious spring boot setup and minimal actual coding. 
Correct, but the Oracle JDK is not. Builds that were previously shipped were composed of the Oracle JDK.
To be fair that's like 5 minutes worth of stuff, I'd expect students to actually know what compilation is already.
Python Node Shell (Bash, etc...) Perl To just name a few. As for learning the language, i don't believe it's helpful.
Damn, I've been using the community edition, launching as a maven project
Most of that project can be banged out in 2 hours, provided you don‚Äôt get caught up in the UI. Probably not going to have time for extensive testing, so TDD is probably out the window. But the business logic is not that complex.
If you remove the UI parts this is perfect for an hour or two test.
Typically, you would only need the Java SE libraries that come with the JRE. If you are doing Java development, you need the JDK, which is mostly used for the compiler (javac) and the archive took (jar). This covers 90% of "core" Java development. Sometimes, you might need programmatic access to the compiler, which requires tools.jar from the JDK. But then you're getting into some very specialized development. As a side note, there is another set of libraries that are very important, which fall under JavaEE and work in a very different way. Java provides the "api" libraries, and you have to mix in third party "implementation" libraries, but that is another story.
An example we use in our interviews is an [elevator control system](https://web.eecs.umich.edu/~baveja/RLMasses/node2.html).
Er, what about dependencies that are not part of the JRE?
There's nothing wrong with it, but it's more than an http service library. It's a concurrency and interprocess communication library that also has an http service library.
This feel so useless. It would be quicker for students ? But they need to learn about compilation and classpath. Running a javac is a quick thing and classpath is simple to understand. As for scripting, I would understand if it could be used as a standalone script file but you will need the JRE to be installed anyway. Just script with regular java.
Generally speaking you shouldn't use them. As it says on the page, jdk libraries may not be available on all implementations of the JVM, so relying on them could cause your code to not work in some environments.
It was on sale for 50% off last week. I bought it immediately 
What you want to cover there won't likely help to find a competent **senior** dev. You can weed out the useless ones with this, sure. But I also suggest this to find the best: - give them code and ask them to point out what problems they see and how they would improve it - ask them to build unit tests and make changes to that existing code. - ask them to refactor the code for readability, then performance. - observe how the person reacts to all this: how he tackles the issues, debugs and tests everything. It's never an exact science, but in my experience this is most helpful to find the people who will fit better into your team.
High surviving generations are bad. It means your memory has survived being deallocated many generations. Who wants old great great great great great grandpa memory in their sweet kickass code? NO ONE I KNOW! Old people have faulty memory, I can't even wrap my head around how faulty a thousand old memory allocations must be. The best thing to do is call for a garbage collection explicitly (System.gc()) like in the good ol' days of voodoo programming. 
ctrl+right click on windows start. choose command prompt with admin privileges.
A bloody beginner has no idea of nothing! Try to remember yourself üòâ And the ease of getting into stuff, like executing a program or having a REPL running to examine control structures or collections or function behaviour. This has been missing to Java! Imho a big reason - besides others - not to start with Java. So imho it's a good *little* feature to add. 
&gt; So how much is this used in actual professional java development? Very little. The odds of you waking up one day and having a task at work that unexpectedly requires you to use one of these libraries is nearly 0. They are used, but you'll know well ahead if you're building, say, a tool that integrates with the REPL.
But then the GC would be running constantly due to large garbage being created. I figure actually fixing the problem is better than putting a band aid on it.
&gt;Are you planning to send it to the moon? Yes. &gt;if not then what you are doing is probably irrelevant and you should instead spend time on producing value. I don't want to be that person that uses system resources just because I can.
Would static final objects increase the amount of surviving generations? Is there a hard limit? Do they even matter if heap size is in check?
In ~20 years of Java coding (front-end, back-end, desktop, web and everything in between) I've used the `jdk.*` packages exactly 0 times. So I guess the answer is: no. That doesn't mean you can exclude those packages from your distribution; some JRE package might make use of the JDK API for who-knows-what. But you as a programmer can mostly ignore it unless you are doing some very specific things.
I did something similar for a previous client where they had a few mis-hires. Basically it was a small REST service that performed some number crunching tasks (basiclly do a POST, do some mathy calculations, and return the results). It was an incremental assignment where they would start with the REST interface, handle validation, then move to unit testing and integration testing, etc. The project was ready to clone in a Git repo; so I handled all the boiler plate of setting up the Spring Boot project. It worked very well in separating out the people who could talk the talk but not walk the walk, which was the main goal. The total interview process was around 2.5 hours; half an hour phone interview, one hour technical q&amp;a and one hour 'peer programming' coding test. Something like this is easy enough to set up yourself (did it in 2 hours or so) and you can reuse it. It's also a good opportunity to have it 'fit' your domain much better than most canned tests do. 
Just a reminder that tools.jar no longer exists from Java 9 onwards. Also, the compiler is now available in the `java.compiler` module in the `javax.tools` package. Again, since Java 9.
Well. If you don't wanna use resources, have a small heap and let the GC do its job.
Thanks, this is coming from the guy that made Hocon as well, which had a lot of the same goals I have in mind, but missed the mark slightly (Not that it's an easy task).
So basically make sure your developer won't provide you quality code if they don't get enough time to do so instead of telling you that it's not doable in that amount of time? Is this like a reverse test?
ws sensitive, dynamically typed and / or cryptic trash
When I use this for interviews, I don‚Äôt time the candidate. Because timed programming tests are idiotic. It‚Äôs a take-home, send it to me when you‚Äôre done type of thing. It‚Äôs just a suggestion. Have a nice day.
All the other comments have totally missed the point. The linked page is about the new module system for the jdk. One of the modules is the basic SE. I haven‚Äôt used the new module system yet, but I don‚Äôt think you can do anything without the se module. 
What a fun frustrating time you must be having.
Is it just me, or does the "classpath exception" seems like a total mess? Do I have to go through each and every file that ends up in a certain JAR to tell if the JAR as a whole ("library") is excluded? What is the meaning then of having a single file have this exception if it is never produced as a standalone JAR? 
It looks like in your [submission](https://www.reddit.com/r/java/comments/95258v/need_help_with_void/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Sure it's not the best way to implement and deploy a five hundred thousand line software product. However, for the beginner this tool lowers the entry barrier significantly. Hopefully, this helps that Java remains an attractive programming language to be to be taught and used in schools and universities. 
this is a test resply on 6 aug
Nobody *needs* scripting languages but sometimes they are convenient.
My guess is they have the stats to back the usage up (or I hope they would do). I wouldn't be surprised if a significant portion of (newish) projects worked on within IntelliJ are Spring Boot nowadays. Having good support for the most popular framework so they can put it in big letters on the marketing material has obvious benefits. They want to suck you in, you're probably less important when you're already using it as, let's be honest, you're not going to use anything else.
Good article but what the everloving fuck is up with that font's Q? 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
AFAIK, every capturing lambda is a new object when the variable it is capturing changes. &gt; The Java version went way up to around 800MB of RAM with the GC working tirelessly as expected. The F# version stayed at a nice 35MB. What is the ram size and initial heap size you have specified? &gt; could we get similar performance characteristics in future Java version with projects like Valhalla/Loom/... . Could you post the gist of your code? There will be definitely be performance improvements from value types.(http://openjdk.java.net/jeps/169) https://github.com/forax/valuetype-lambda
but then you have to use Windows and get in bed with Microsoft, pass.
Learn another JVM language like Clojure, Scala, or Kotlin. Each has a unique interpretation on how to program and will make you a better developer as a result. You'll get to stay in familiar waters too with Java libraries being available.
True story. 
this is a new reply today on 6 aug
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
this is a new reply
&gt; The Java version went way up to around 800MB of RAM with the GC working tirelessly as expected. The F# version stayed at a nice 35MB. Need to see code, runtime versions &amp; flags, otherwise this is a completely meaningless comparison.
What makes you think GC would be running constantly? Are you creating millions of new objects?
This. Also think about what a successful candidate will actually do at your company. More than likely it is not going to be setting up new projects all the time, but rather adding to an existing code base, and so the interview task should reflect that.
Let the candidates do a code review of your existing code base together with two of your current developers for about an hour and watch how they approach the task. Candidates that are able to make sense of the code and can point out some reasonable improvements that you may not have thought of yet may be decent senior developers. The candidates you don't want are the ones that can only find mundane platitudes or can't get any sufficient understanding of the code at all.
Me too
The most straightforward is probably using GraalVM as a faster java (either using the GraalVM distribution, or just plugging the compiler into your JVM implementation of choice with JVMCI). It shows especially results for the code using streams api, or creating many temporary objects, or written in the JVM languages other than Java. For example, Twitter is using the compiler for their Scala services with great success. Native images are useful for deployments to environments where startup is more important than peak-performance: cloud &amp; microservices, serverless, CLI tools, etc. + the benefits of having single standalone binaries as Thunder_Moose wrote. GraalVM's JavaScript engine is node.js compatible, faster than Nashorn (catching up on node actually), and works very well with large heaps. So if you ever wanted to give your node process tons of memory, it can be really good. + you get Java interop so if you have any in-house libraries written in Java you get way better interop than without it. And if you're even a medium size enterprise you probably have Java libraries. TruffleRuby - will be the fastest Ruby implementation, currently it is not 100% compatible with the ecosystem, but it will become compatible at some point of time. It's on the way to be the fastest virtual machine for all languages that can run all of them the same way everywhere. Of course there are things the GraalVM team has to iron out, but for Java and JavaScript use-cases it's ready to be used in real world. 
Capturing lambdas will be improved by features facilitated by the new constant dynamic. Specifically, Java is getting a sophisticated constant propagation mechanism, and if captured values can be shown to be effectively constant then the capture will be elided. You may find that this is the optimisation F# was able to do.
&gt; AFAIK, every capturing lambda is a new object when the variable it is capturing changes. A capturing lambda is always a new object, in any language. Not only if the variable it captures changes, but every time it is created. Every instance of a lambda is a separate object referencing all captured variables. A common error is to capture too much. For example, capturing a field of an object (and therefor the entire object), instead of just its value. // Referencing fields from within a lambda binds `this` to the lambda. // The containing object and all its fields are kept in memory as long as the lambda lives. return () -&gt; System.out.println(field); // Referencing (final) local variables only binds these variables. // The containing object can be collected if no longer needed. final var captured = field; return () -&gt; System.out.println(captured);
Hmm, have you tried specifically opening it as an administrator? 
It looks like in your [submission](https://www.reddit.com/r/java/comments/95a6ve/multiple_installations_of_java_on_the_same_machine/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The JAVA_HOME environment variable is how to best address this issue think. Set the default to whatever user group is most common or wouldn't want to manage it manually. Then either have toggle scripts or set it in the start scripts for the various apps that care which. Regardless of what the path looks like, the environment variable seems to redirect all java executables
your code is certainly badly written.
If you want to access data from the certain partition - you should just specify corresponding WHERE clause in your HQL (or SQL) query. Oracle will optimize the request and will only scan required partitions. So you should choose the right "partition key" (the set of columns) and use that columns in your queries. In this case you will access data from \_specific\_ partition. There is no special syntax to filter data from certain partition - this is controlled only via HQL (SQL) WHERE conditions. You can read this article about partitions - [https://docs.oracle.com/cd/A97630\_01/server.920/a96524/c12parti.htm](https://docs.oracle.com/cd/A97630_01/server.920/a96524/c12parti.htm) and find there (check "Partition Pruning Example" section).
You can also consider wrapping scripts for specific applications that redefine PATH and JAVA_HOME for just that app.
It looks like in your [submission](https://www.reddit.com/r/java/comments/95bcvg/hiring_java_utvecklare_s√∂kes_till_so4it/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
**Sidebar** + **No surveys, no job offers!** Such content will be removed without warning. Also, this subreddit is **English only**
Ask him: Can you do something without spring?
I‚Äôm back with the hotly anticipated secodn part of my series on testing logging in Java. In this article I look at how to test logging statements in your Java application even when you are executing your test in parallel. Perhaps more important though I give an in-depth preview of some of the upcoming parallel features coming in JUnit 5.3 which should be released later this month. Hope you enjoy!
I am working on this ancient(2008) legacy struts application, it has if not the original then very close to the iText library (the jar was commited to svn in 2008) Its very easy to use compared to Jasper. Personally I prefer Jasper, but the learning curve for itext is much smaller. just looking at the code for OpenPdf the application could probably be easily upgraded to OpenPdf.
&gt;I'm interested in people's experience using this library. It is possibly the best PDF library with a LPGL / MPL license. It is used by many other projects, such as Spring and Flying Saucer. &gt; Is it easy? Yes. &gt;Is it versatile? Yes. &gt;Can the output be read by multiple PDF readers? The output can be read by all Pdf readers, since it uses the Pdf standard.
Yes, this is the reason this fork was created: developers who want a maintained version of their iText-based PDF library with a LGPL / MPL license. It has all the latest security fixes etc.
Why don't use GraalVM only instead of classic JVM?
You could try using /r/javahelp
The best way is using docker.
will do thanks for making this possible
Wow. A fork of a fork of a fork of a fork of a fork. [Reminds me](https://www.youtube.com/watch?v=kccONko4xYE)
A GUI application sounds like overkill. Why not make a command line program instead? You mentioned grep, so I'm sure you're familiar with Linux command line programs. Just emulate the design of one of them. It seems like what you want to do can be solved easily enough with the String class. Don't see the need for all the extra APIs. Just keep it small and simple.
The documentation could use some work for sure. I know I struggled to figure out its API. That being said, it is absolutely amazing once you have it figured out.
Why not ask in the IntelliJ subreddit?
Streams are objects and so incur the penalties of objects. When you chain stream operations you get more and more objects. The VM has no lightweight object for throwaway purposes. Valhalla will give us value types which are a step closer I guess.
That's not what docker, (or generally speaking: containers) is for. The goal from using containers is to have this isolated execution environment where you app lives. Containers are not VMs and will never be! You need to rethink your whole logic
Eh? VSC has full Java integration through the Red Hat Java plugin. That includes building, debugging, and so forth in-editor. It *also* has an embedded terminal.
Because vector.add(vector) is *much* better than vector + vector.
What exactly is the GraalVM secret sauce? How is it able to outperform HotSpot? 
In my opinion this is really bad comparison. You are not comparing the same operations in your example. I have made an actual checks with the code as similar as possible and here are the results: @Benchmark public double simpleLoop(ArrayState state) { double sum = 0; for (int i = 0; i &lt; state.values.length; i++) { double x = (state.values[i] + 1.0) * 2.0 + 5.0; sum += x; } return sum; } @Benchmark public double mapReduce(ArrayState state) { return Arrays.stream(state.values) .map(x -&gt; x + 1) .map(x -&gt; x * 2) .map(x -&gt; x + 5) .reduce(0, Double::sum); } @Benchmark public double singleMapReduce(ArrayState state) { return Arrays.stream(state.values) .map(x -&gt; (x + 1) * 2 + 5) .reduce(0, Double::sum); } @Benchmark public double doubleStreamSum(ArrayState state) { return Arrays.stream(state.values) .map(x -&gt; (x + 1) * 2 + 5) .sum(); } &gt;Benchmark Mode Cnt Score Error Units &gt;TestBenchmark.doubleStreamSum thrpt 10 138,957 ? 4,041 ops/s &gt;TestBenchmark.mapReduce thrpt 10 41,517 ? 0,971 ops/s &gt;TestBenchmark.simpleLoop thrpt 10 **530,949** ? 3,440 ops/s &gt;TestBenchmark.singleMapReduce thrpt 10 **473,942** ? 3,252 ops/s As we can see the singleMapReduce which is most similar to your loop has only 10% worst performance here. This is not over 10x you are mentioning. 
It would be even nicer if /r/javahelp were linked on the /r/java as it was a long time ago in a galaxy far, far away.
Exactly 
hm.. why is doubleStreamSum so much slower than singleMapReduce?
install the eclemma plugin
Can you just swap out standard jvm for it?
Do you have to change anything in settings after installing that? Because some programs work with it and others just ignore it
Interesting, but I wonder if ANY application (not necessarily Java) could have got intermittent problems using NFS though the visualized hardware.
If you want to do it quickly, then JavaFX is a good candidate. If you want to use a JavaScript framework for your frontend, then electron is a perfect candidate. Slack and Atom are built on top of this technology.
As I understand it, DoubleStream.sum() uses a different method of summing the values which should produce more accurate results. I assume that it sacrifices performance to do so. Rather than simply adding values `a + b` like `Double.sum` does, it uses a `Collections.sumWithCompensation` operation that is more complicated. Related code: [DoubleStream.sum](http://hg.openjdk.java.net/jdk/jdk/file/a19fda433921/src/java.base/share/classes/java/util/stream/DoublePipeline.java#l416) [Collectors.sumWithCompensation](http://hg.openjdk.java.net/jdk/jdk/file/a19fda433921/src/java.base/share/classes/java/util/stream/Collectors.java#l745)
not how you do loops testing with JMH http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_11_Loops.java
I have never tried grouping controllers and services in modules based on core functionality. What happens if twi modules/packages need to share a service? Put it in common? 
Site may be down due to hug of death
Every single one of those gets a thumbs up from me. Great list.
Commenting to track reply.
It is getting about 400 views an hour for the past 24 hours and if you mess up with cache it may put a strain on my WordPress hosting! May need to finally move it to AWS one day!
Really nice introduction and overview to many out of the box spring features that can get up and running. only wished you mentioned spring JPA since that is what really helps you keep your client code depending on your persistence layer abstracted from the DB details(if you choose to go with ORM/JPA), And spring AOP for logging since it can make life very simple, albeit add a decent layer of complexity. 
Think of it as if you were building a non-Spring application. You will often have services used in many places and there is nothing wrong with it. The question is- do you need the shared code to be a service or would library do just fine? I‚Äôm general, I strive to adhere to Clean Architecture as described by Uncle Bob as it makes easy to read and nice to work services.
What issues would those be?
So I ran the mapReduce with Hotspot OpenJDK from Azul, Graalvm, and OpenJ9 from AdoptOpenJDK all Java 8 and got about 41 ops/s for hotspot, 79 ops/s using Graal and 98 ops/s. Does that seem right? I was floored that J9 was any better than hotspot and even better than Graalvm. The JMH system warns that J9 isn't supported so I am questioning the output. I admit I should have run the other tests, but did it over my lunch break and ran out of time.
It looks like in your [submission](https://www.reddit.com/r/java/comments/95i455/using_recursion_to_search_through_a_ternary_tree/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You should be able to right click "coverage as" junit. Older versions required you to install dilemma. Newer versions I think come with it installed.
So to conclude, Hibernate does support fetching data from partitions via HQL &amp; SQL. But it cannot be done via APIs (like criteria). We are evaluating the usage of partitioning in our app. Since there is lot of legacy code which uses APIs this may not be the best direction out there. Pls correct me if you have a different opinion. Thanks fro your points.
add a shared package between these 2. A thin dependency of course.
Spring JPA or Spring Data JPA?
Some examples for a few of those points would have been nice..
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It is comparable to running a Chrome tab. If this runs on a modern machine I don't think the users would be bothered!
should have said Spring Data as that provides the abstraction the author was mentioning. Spring makes it so even your choice of using data store is abstracted and you can write queries in an query language agnostic fashion. so actually neither, just Spring Data
\[removed\]
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
They are too much greedy and overpricing the product, soon their product will be in lose once the real hotdeployment will be available in java by default.
Yeah, now I'm just generating a bunch of JRebel trial licenses to use, they don't do any checks on the accounts so when the trial expires, I just delete JRebel's config folder and generate another one ü§∑
debugging is not easy for instance. A nice functional code is often very hard to understand 6 months later, because it often contains a lot of tricks, just because it is nice.
And fuck your down votes too. 
&gt; Also, if you have built apps using JavaFX, why did you choose the framework, instead of say .NET where XAML exists for UI You can use FXML + CSS in JavaFX. See output of (SceneBuilder)[https://gluonhq.com/products/scene-builder/] &gt; or even electronJS? Because Electron performance is horrible beyond comparison. Basically emulates the browser to start a VM that runs your app. With no real parallelism too. Also JS is a broken, mind-damaging script ‚Äúlanguage‚Äú.
Hi, I started reading your book. I was wondering if u wanted any feedback and if so if u had a place where readers could do this.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; The code looks very messy. This is because coding GUI like this involves a lot of formatting the nodes and scenes. I would like to separate the presentation layer from the layer that acts on it. Two things: + Utilize the *Model-View-Controller* design pattern to functionally separate the layers + Use FXML for the layout 
That's a great example. Use switch to branch directly to the state. (Even if it has to be by the ordinal() value of the enum. (Maybe switch already optimizes enum switches this way?)
Reminds me of an XmlSomethingFactoryFactoryFactory.
The talk about boilerplate code in Java makes me want to try Kotlin. üòÅ
You still have to read it, so yes it is
The first sentence implied that it was. "VSC isn't an IDE" seems a very popular, if misguided, thought in the Java community. The only reason I'm using Intellij is because I don't have time to fix parametrized unit test running in VSC... and I'd be more likely to spend my time writing a full Java plugin for the real MSVS. Mmm... with an extension so that JVM &lt;=&gt; .NET interwork is possible. *dreams*
The architects are addressing this with [Project Amber](http://openjdk.java.net/projects/amber/).
The main takeaway I got from this is that all the work that went into making ldc a thing that works nicely will have a lot of side benefits for non-targeted things. So, for example, if you write a builder which is itself constant and basically only pushing the code into the constructor of the built item, then all the tricks taught to the compiler will transform all the builder byte code into a direct call on the constructor of the finally built object. As a stand along instruction, I think the main reason you would want this is probably for dynamic languages and maybe even the notion of "sealing" objects. For example, think of a singleton object where the instance only gets set once but maybe not at class load time and maybe from other threads. ldc + sealing will allow you to delay the building of the instance while still getting the performance benefits you would expect if the field were eagerly built as a final field. This particularly could be useful for things like injection, for example.
&gt; debugging is not easy for instance On the contrary, functional codebases are vastly easier to debug. I'd say with a straight face that your average functional codebase has a ten-fold reduction in complexity when it comes to debugging compared to an imperative equivalent. &gt; A nice functional code is often very hard to understand 6 months later On the contrary, referential transparency and functional purity make it much easier to figure out what's going on, and allow you to make changes with confidence without stressing about unintended side effects. &gt; because it often contains a lot of tricks, just because it is nice. If you're used to writing in an imperative style, functional code can be a little confronting at first. You need to train yourself out of bad habits and relearn a lot of basics. But once over that initial hump, it's pretty straightforward. Functional programming is certainly not about adding "lots of tricks, just because they are nice" It doesn't help that Java is a really shitty functional programming language. 
&gt; Most of that project can be banged out in 2 hours I think that's ^^^ what people are rejecting.
Do you have any links?
I'm pretty sure it was mentioned about in one of Brian Goetz's recent JVMLS talks. Almost certainly this one: https://m.youtube.com/watch?v=iSEjlLFCS3E# Iirc the lambda capture elimination was an unanticipated bonus observed during prototyping.
Why not use Kafka's connect API? 
Oh, don't get me wrong. I love Java and I appreciate the things that are being done to get rid of boilerplate code. The talk was showing some Kotlin code though and it made me curious to Kotlin.
And they will deliver it in Java 100 of course
Yes, although I have implemented MVC with .NET and Spring, doing so in JavaFX application does not seem intuitive to me. FXML seems nice. Will definitely look into it.
Have you heard about the [new release cadence](https://blogs.oracle.com/java-platform-group/update-and-faq-on-the-java-se-release-cadence)? A new release will be available every six months. This will allow smaller features to be released now, and not be held back by the larger features in development. One example of this is local variable type inference ([JEP 286](http://openjdk.java.net/jeps/286)).
&gt; The logs were huge Look into the [ELK stack](https://www.elastic.co/elk-stack). IMHO you're reinventing a wheel. Poorly ;)
But if your 'scripts' are complex enough that you really want to have static typing (etc.) why would you not just use for example Kotlin that integrates natively? 
Since this is not directly Java related, but general, it is unfit for this subreddit. You should rather post in a more general subreddit, like **/r/programming**.
Good question. Whether scripts are complex or not then providing IntelliSense was the key factor. Even when writing few lines here and there, then having IntelliSense that helps you get your script written more quickly, than without any help, is the real benefit here. TypeScript is also very good at inferring types, so technically it is not so much about forcing static types, as TypeScript most of the time is inferring types anyway, but more of providing a good user experience. And because types are present IntelliSense can work properly. Another reason why I didn't choose one of the existing scripting or other languages that run on top of JVM is to keep things simple. I combined 2 of the most popular languages which are JavaScript, as TypeScript is simply a superset of it, and Java. Scripting is often times performed by people who are not professional developers. And if you need to start learning a new language just perform some scripting then it is just additional overhead. But because it is a mix of TypeScript/JavaScript and Java it means that a lot of people should be able to jump right into it without having to start learning entirely new language.
First, it is Java, not JAVA. Second... cat log \ | grep "your keyword" \ | sed "s/^beginning //" \ | sed "s/ end$//" \ | sed "more stuff?" \ | jq "." I'm note sure about the last line of [jq](https://stedolan.github.io/jq/), because I keep forgetting how to make it pretty print all output. Also, the `sed`s could be combined, I guess, but too lazy right now.
"TypeScript is unique in a way that through type definitions TypeScript allows to define what can be done on the other side." Can you explain that a bit please? Is that a typing feature not in Java/Kotlin?
Fantastic. I seem to be getting performance with g1gc anyway. Will i see a huge performance increase or just different?
It really depends on the code you're running and the workload. Graal compiler seems to produce especially great results on the code that uses streams, or allocates many temporary objects, or deviates from the typical bytecode patterns produced by compiling Java source, for example when you use a different JVM language. Also note that if the source code is heavily optimized for C2 then C2 does an outstanding job at compiling it, so sometimes there's just not much else for a compiler to do. 
The performance of singleMapReduce is indeed better than I would have expected. But then again, I hope that simpleLoop would not get 10x slower if you replaced the body with double x = state.values[i]; x += 1.0; x *= 2.0; x += 5.0; sum += x; 
I have noticed this. When I code for performance (using for-iterations or while loops), C2 seems to outperform graal for me. Especially if I'm doing a lot of math. I'm hopeful that GraalVM becomes more performant in these areas soon, as I prefer to code in a mix of styles, using scala's functional style in not as hot spots, and using scala's low level style (imperative, mutable, and while loops) when dealing with very hot spots.
If you want to *display* rich text in JavaFX you should use WebView. If you want to *edit* rich text in JavaFX you should use HTMLEditor. The point is "rich text" is just a legacy name for "html." Don't reinvent the wheel the wheel here. 
I'm not sure what the advantages of a "scripting" language are by the time you're in an IDE and have a build process. I don't see any advantage for Java (or Java-compatible) developers to consider using TypeScript. This might be useful for TypeScript developers who really really don't want to make the (small, as they're used to types now) step to Java or Kotlin. If Nashorn doesn't already have a Java class -&gt; TypeScript bridge they'd probably appreciate this!
Adding configuration seems like less work than running a separate process. Actual use cases always vary.
I was going to try it with WebLogic as we still **have** to use that, but not sure it'll work as intended tbh.
You're might right about Java devs. For them it doesn't make so much sense if they already have a preference, such as Kotlin or Groovy, and they would have to implement it for themselves. But others who are not Java devs, it might look appealing, as a lot of applications are running on top of Java. As for the IDE and build process then the IDE is built with web technologies, it means it could be as well embedded in the application. And the build process is there to transpile TypeScript down to ES5, but in the future Nashorn might support TypeScript natively, when this happens build process is no longer needed. There are applications out there that currently support plain JavaScript scripting for their application that are written in Java. For example [ServiceNow](https://www.servicenow.com/) is one of such applications. I'm sure their devs, who currently have to write plain JavaScript, would appreciate the extra help IntelliSense can provide, I personally would.
Kafka Connect is mostly about configuration. Additionally, since article states ETL goals, Kafka is definitely better suited as multiple machines are needed to run ETL jobs. 
The IDE and transpiling is fine, I'm suggesting that whenever there's a build process the "scripting experience" is gone, and it's not too far a stretch to just write Java or Kotlin. This is probably more likely to be used by the providers than the users - Jira and ServiceNow - could use it to provide a TypeScript SDK. They might find it useful to be able to generate the TypeScript definitions from java classes using gradle so it can be part of their CI.
That's true, if there is build or compilation process involved, then it hardly is a scripting any longer. So technically it is something in between, a hybrid approach that provides the benefits of scripting flexibility, without having to build he entire project and restart the application server, but at the same time adds features that strongly typed languages developers are used too.
Try it, it should work as intended. The only thing is that currently you need to warm up the code a bit more to JIT it well. It's because Graal compiler is a Java code, so it is going to be compiled first. So take measurements when you actually reach the steady peak-performance state. I'd be happy to know how it goes, and if you find any issues please don't hesitate to report them to [oracle/graal](https://github.com/oracle/graal). 
It still is under the rules section for help. If you look at the old.reddit version as well it's still there. I guess it was lost in great reddit styling change.
It says on their github page that this is a fork of iText. I worked on a project that used iText recently. Can anyone comment on the differences between them? 
Fair enough.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It's not all about the type system, it's also the similarity. TypeScript syntax is very similar to Java syntax, which makes it more accessible by people who generally are familiar with C style syntax, and especially by people who have written JavaScript/TypeScript or Java before. For products that I have seen that provide Groovy scripting support, they usually only provide HTML embedded editor that only has syntax highlighting. Script writers have to figure out the rest. Through TypeScript language services I can provide a full set of IntelliSense features that are much more beneficial than simple syntax highlighting. In another replay I already admitted that the word 'unique' is too much, I'm sure other languages can achieve similar results. My attempt here is to combine 2 most popular programming languages (TypeScript/JavaScript and Java) for scripting, without creating a new syntax or language. And because I'm not introducing a new syntax, it should feel very familiar to a lot of developers, either from JavaScript or Java side.
&gt; For products that I have seen that provide Groovy scripting support, they usually only provide HTML embedded editor that only has syntax highlighting. Script writers have to figure out the rest. Through TypeScript language services I can provide a full set of IntelliSense features that are much more beneficial than simple syntax highlighting. Ah, now I get it. You can embed Monaco editor on the page and it would feel like VS Code, with more type information, auto-completion, etc. Ok, nice idea. Hope you are successful in your endeavor.
Yes, that's exactly. To provide good experience for those who have to write scripts, mostly in embedded way.
I have written codes in a lot of languages, from Lisp and Prolog to C++ and Java. Even in Lisp we added for-loops for convience because sometimes it is better to design the loop in such a way. Thinking recursive is not really natural and do not help in most of the cases. I don't like the language war and I don't want to discuss about that You like functionnal languages and think that this is the best in the world. This is your opinion and I respect it. I am more pragmatic and I think that sometimes classes and iterative codes is more convenient (and often more efficient) 
Here is some additional background why they choose the current function: [https://bugs.java.com/bugdatabase/view\_bug.do?bug\_id=4045622](https://bugs.java.com/bugdatabase/view_bug.do?bug_id=4045622) While it's easy to produce collections with special chars, it's not that easy with standard words or more realistic strings. For example, because the factor is 31, you typically won't get collisions in real words as there are only 24 characters in the alphabet. Also a HashMap or HashSet always has collisions anyway, even if the hashcodes are distinct because they're reduced to the table size. So some random collisions don't really matter. Using a more complex hashCode function would also slow down the program.
Eclemma plugin will do this for you
Kotlin editor does indeed provide similar features. I guess in the end it simply boils down to the preference of the language.
Stop adding your own scrolling animations to your site. Its annoying, slow, and doesn't work properly for someone who doesn't use the default line/scroll tick value. Haven't looked much into it, but the `smooth-scroll` class on you `body` might be responsible.
:) Monaco supports a lot of languages, but most of them are syntax highlights. TypeScript is special one as it has a language service that helps to power all the rest of the goodies.
Haha yea maybe so. ELK stack looks like a good option. Will try to learn these instead.
Yes. Thanks, will definitely look into WebView and HTMLEditor.
Looks very helpful. Thanks a lot!
I'll remove it. Thanks for the feedback. What did you think about the content?
Random collisions may not matter much, but parsing potentially compromised user input into HashMap keys (e.g. http headers or json objects) can lead to unexpected high overhead and allow DoS attacks or timing sidechannel attacks. Some other language runtimes and most java http servers solved this issue by adding a salting factor to the hash algorithm, so an attacker can no longer generate thousands of keys that all have the same hash value. But if you parse anything user-provided into a standard HashMap you are still vulnerable to this kinds of attack.
`HashMap`s still work with lots of hash collisions, but performance degrades from `O(1)` key lookup to `O(n)` in the amount of collisions, potentially causing excessive resource usage or timeouts.
 &gt; Haha, yes it is, but c'mon! Maybe I'm getting old and grumpy, but I love calling things by their correct names. &gt; My query was not how to do it, but on the separation of the code responsible for the visual vs the code responsible for handling events. Mh, I somehow parsed your post as "I have this problem and I have created this application for it...now I have other problems". My bad. Anyway, I'm not a fan of JavaFX. Maybe you could use Swing? For example it sports the excellent [RSyntaxTextArea](https://github.com/bobbylight/RSyntaxTextArea) which is very easy to use. Also there are quite a few solutions out there which allow you to pretty-print a JSON string. So how I'd design this application in two parts. First, the core makes up all the reading, parsing and preparing of the log files, ideally this would have an API like this: public List&lt;Entry&gt; getEntries(Path logFile); public class Entry public String getDate(); public String getMessage(); public String getJsonString(); The second part would obviously be the UI which does nothing but offer the possibility to set the log file (or directory) and displays these simple POJOs. The reading itself should be rather straightforward and I would already pretty-print the JSON strings inside the core before they are handed out. That means that your GUI code only must be concerned with its own components and displaying the content of the currently selected entry. What I've come to consider a good school of thought is this &gt; Write a library which solves your problem, with your GUI being the first client to use it. That way you must already structure the core in a way which allows it to be easily reused. Don't be afraid to refactor later on, too, it is cheap and easy with modern tools and should always be done to make the code easier to read, understand and maintain.
O(log n) actually. Since Java 8, once a collision threshold is reached, the colliding entries are put into a red-black tree instead of a simple linked list. Still, yes, properly sanitizing potentially evil user input is vital. 
The OP completely misses the point. The purpose of the .hashCode method is not giving unique values, but rather being deterministically uniformly distributed. That is, given that .hashCode is a black-box map from the domain space of Strings (S) to the space of 32-bit ints (I), the defining properties of such mapping are: * stability -- the point of arrival depends only on the point oof departure, and * uniformity -- the probability of reaching any of the target points in I is the same; in other words, the number of paths connecting departure points in S to any given point i in I is about the same for all i in I. Nothing else was promised nor guaranteed. 
He did not say that `hashCode` is supposed to give unique values, he's saying that it's worth remembering that it does not. Because some people make that mistake. Peter Lawrey is no lightweight.
Yes, you're right, I somehow managed to misinterpret him - my bad.
It degrades to O(log(n)) in recent Java versions because of the tree thing I wrote about, which isn't by a bad. 
Does it make sense to start new projects in JSF at a time when frameworks such as React or Angular are popular. What are the advantages of JSF over these frameworks?
The Greek has 24 and had me confused. But it doesn't really matter if it's 24 or 26 or whatever as long as the unicode code points are typically not further away from each other than 31.
https://medium.com/@andrey_cheptsov/making-java-code-easier-to-read-without-changing-it-adeebd5c36de this can help you with boilerplate a bit :)
JSF is like any other component-based framework, but already included in the JakartaEE specs. If you need quick prototyping or just display lots of data JSF is a perfect fit. If you need pixel perfect solutions, you should go with more client-oriented frameworks. Or.. if you write a longer lasting application it could be wiser to write in a way standard oriented way. Migration is quite easy in the JakartaEE world, but not so much in the JS world (Web Standards are probably the best fit)
This is a very good example on how to get started with TDD. But there are some points you could improve in my opinion: * There is no explanation how and when the `size()` method was implemented * You seem to be using JUnit 4, while Junit 5 is already released * Some tests are not named very well. e.g. `populatedStack()` does not tell me, what is really tested. If it was named `populatedStackIsNotEmpty()` i would not need to read the source code to understand what this test is for. [Roy Osherove](http://artofunittesting.com/) proposes a naming scheme, which comes down to `MethodUnderTest_Scenario_Behavior()` so the test would be called `isEmpty_populatedStack_returnsFalse()` * I found the tutorial hard to navigate. Maybe you could add some headings like *Getting Started*, *Method Push*, *Method Pop* and a table of contents * It would be great if there was an option to download the finished source code to tinker with it. Maybe create a Maven project and upload it to Gitlab. Setting up a project with dependencies (like Hamcrest and JUnit) can be hard for beginners Other than that I think you wrote a good tutorial which was very easy to follow. 
Thanks for the feedback! I really appreciate it!
Come on! I know what functional programming is. I don't need a lesson from someone condescending. I do not start the war, I just mention a fact: yes functionnal programming is old, yes it regularly reappear, then it regularly disappears. That's it. This is just the history The history shows that it is useful when you do simple stuff (like printing element or converting element). It is sometimes more convenient. But the history also proves that it is not really used. Currently a part of the most interesting parts of FP has been introduced in some languages like Java or C++ (roughtly the map of Lisp). This part is useful and the other part of FP will disappear as usual Maybe you do not like this, and you seems like a fan of FP thinking that ths is the only way which is superior to any other language. This is just false because, this is not followed by people. That's just the history, there is no FP language that are commonly used, excepted by universities or for teaching or by "2 pages programmers" FP is problematic for one reason: nobody has never succeeded in writing big code introducing without local variables (call it whatever you want), so the nice FP principle is violated 
In my opinion you can make this post a bit broader. Is it really the thing to implement test by test and solve it right away? Wouldn't it be a better show case if you take the Interface (IStack) as a variable, instantiate your Stack implementation before, define explained test cases (which are getting red) and afterwards you try to implement the class while getting green results? This would be a little less wordy. For me it is not understandable why do you use hamcrest? With plain JUnit would be your show case understandable as well. Either you argue at the beginning of your post why hamcrest is very useful for TDD or you don't use it in the post. The direction is good. You can explain the showcase very well but in my opinion you can assume that the reader has a little knowledge and just want to know what the new point is.
If you want to build an internal app for enterprise you don't need Angular an React since there they want stable app and simple UI not some eye catchy website that you need to rewrite it every 6 month.
We have a **no surveys** rule here.
Thanks for the feedback! I like Hamcrest because of how it reads. I should explain why I'm using it. 
&gt;... not some eye catchy website that you need to rewrite it every 6 month. Wait. You really believe developers out there are rewriting enterprise apps because they used Angular or React?
With some exceptions, but people using Angular, React even Vue.js are rewriting their applications every 6 months indeed. Sometimes from Angular to React, if they get the idea that React is the new hype, and then sometimes later back from React to Angular, if Angular seems to be more of a hype anyway. For them the application or tool barely matters, it's only about the hype.
&gt; FP is problematic for one reason: nobody has never succeeded in writing big code without local variables (call it whatever you want), so the nice FP principle is violated I apologise for coming across condescending earlier, but with all due respect I don't think we have the same definition of "Functional Programming". What makes you think functional programming precludes the use of local variables? When I talk about functional programming, I'm talking about the programming model championed by Haskell. &gt; That's just the history, there is no FP language that are commonly used, excepted by universities or for teaching or by "2 pages programmers" I've been paying off my mortgage writing pure functional code full time commercially for a number of years. It's been an extremely lucrative career decision. My current project is around 350,000 loc of pure functional code for a revenue producing, customer facing product sold to large enterprises. 
&gt;With some exceptions, but people using Angular, React even Vue.js are rewriting their applications every 6 months indeed. With some exceptions? Weird. Every enterprise project I've worked on has been using frontend frameworks and no, they are not rewritten or even being upgraded to the new version of the framework. BTW I really believe Vue.js is actually not used in enterprises. Seem to be something mainly used in PHP projects (that tend not being about enterprise apps). &gt;Sometimes from Angular to React, if they get the idea that React is the new hype, and then sometimes later back from React to Angular, if Angular seems to be more of a hype anyway. Never seen that. In fact I've never seen enterprises not being conservative about rewrites or upgrades and I'm not talking about just client-side development. &gt;For them the application or tool barely matters, it's only about the hype. I would like to hear more about your experiences. How many times have you worked on those kind of rewrites and in what country?
I wonder how common it is to believe that String.hashCode is unique. I though it is pretty obvious that it is not unique.
Not sure that has anything to do with kubernetes. Running a single web-app in an embedded jetty has been a thing forever.
And do you only have an opinion, or a rational explanation as well? :P
My point in enterprise world they don't update their stack that often so JSF does make sense for them. I'm not front end guy and i don't like working on the front end, i've always seen the guys who work on Angular and react are more likely to chase other new versions and new frameworks to work on. just look to how the development happened on angular it's everyday new version. 
&gt; i've always seen the guys who work on Angular and react are more likely to chase other new versions and new frameworks to work on. The evidence is to the contrary. The top spots in the JS framework world is dominated by React and Angular, with Vue.js rapidly taking Angular's place. &gt; just look to how the development happened on angular it's everyday new version. This has severely damaged Angular's reputation. AngularJS was at one point the most used enterprise JS framework. But, then the Google decided to rewrite the framework. Meanwhile, Facebook released React and it gained significant ground, and Facebook actually cares about backwards compatibility. When Google finally released Angular, it was really a new framework, making AngularJS to Angular a migration, and if you're going to do migrate, it would be better to migrate to a more stable framework, like React, since Facebook has demonstrated that it cares about backwards compatibility. Vue.js takes the best of both Angular and React, has rapidly filled the gap due to Angular's fall. This is to point out that the frontend developers, especially those working in enterprise, actually do make responsible choices and don't needlessly make changes unless they have to, and judge harshly frameworks that demonstrate instability and poor project management.
It has. But docker really works best with single process containers and kubernetes pushes docker adoption pretty hard - even in conservative enterprise IT landscapes. So one could say kubernetes helps killing java app servers. 
&gt; Is it possible that the whole Java app can crash because of a bug in agent? Yes, agents can do even more than Java code, if they are written in C and use the JVM api - if they are written in java, they can modify any loaded class and code. 
I've seen people confusing hash codes with cryptographic hashes. Can't say if this is a common misconception, but it certainly happens. Perhaps it deserves a remark in javadocs.
In my experience JSF is a complicated beast and causes more headaches then it resolves. If you already have a team of experienced JSF developers then it would be an easy choice. For the rest of us, its easier to serve mostly static JSP pages that you add dynamic behavior to incrementally with whichever javascript framework makes sense for your use case.
In my experience the integration doesn't work particularly well. It has trouble detecting programmatic beans and doesn't provide any functionality that I felt I couldn't live without. Its more annoying than it is helpful.
It depends on the agents, but if some of them do a lot in the PreMain method, this is before the JIT is started so performance will be bad. Some other issues one may encounter: * VerifyErrors due to bad instrumentation(or multiple agents), often due to butchering stack map frames. * Triggering otherwise rare JVM bugs which can result in everything from java exceptions to jvm crashes or even worse, wrongly JIT-ed code producing wrong results. * Deadlocks in classloading due to injected code not expecting something to not be loaded. * Degraded performance due to asking JVMTI to provide certain capabilities that would be otherwise optimized out, e.g. keep current frame local variables so you can get the values. * Anything else a random executable from the internet you don't trust might do
Why would you test logging? Production usually has its own custom logging implementation/configuration so you are just testing that logging calls have been invoked?
&gt; But docker really works best with single process containers It does, but that has nothing to do with anything. You can run single processes without docker. Adding docker is just an unnecessary extra layer. It has a small impact (performance wise) and adds nothing of value to "single process apps". 
At my company we started to migrate to Junit 5. Quite easy (and handily we can keep the existing tests running), though we are nowhere near the Java9/10 switch, which is more dangerous IMO).
I guess it‚Äòs the other way around. Because docker goes mainstream you want single process deployments everywhere. That clashes with the classical java application server deployment model and thus big java app servers slowly disappear. Whether docker as deployment format adds any value or not seems irrelevant to this argument. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/969ar6/does_the_ternary_operator_to_makes_the_code_more/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
1. this should go in **/r/javahelp** 2. The *ternary operator* is *not an replacement for `if`...`else`. It is only for assigning values as result of conditions.
The why would be to ensure the message(s) being printed out are accurate, useful, and don‚Äôt themselves lead to errors. Granted that last one you wouldn‚Äôt really need to capture the logging message to reproduce it. Though for the accurate and useful, you might test that to make sure you are capturing the right values and/or the values being printed out are useful (the classic example would be not calling or not having implemented .toString() on an object. It‚Äôs not super high priority and a lot of logging messages there might not be a whole lot of point in capturing, but there have been several times where I have wanted to verify logging statements and I just wanted to share how it‚Äôs actually pretty easy to do. 
&gt; The code looks very messy. This is because coding GUI like this involves a lot of formatting the nodes and scenes. I would like to separate the presentation layer from the layer that acts on it. You should be following a MVC pattern. Nothing is stopping you from splitting your business logic from your view logic. 
If you care about testing log statements then treating your logger like any other inter class dependency and writing your class to allow setting a mock is going to be the easiest tactic by a long shot. I can't say I ever have cared though.
I can't read the article since your smooth-scroll sucks
I'm not sure I'll ever adapt to this Jakarta name. Jakarta is still just Tomcat 4.0 to me.
Ffs, can you lot decide?!?
Ha! That was my point here -- to refute the earlier post. That one can contrive pathological inputs to make a hash function collide does not prove that hash function is not usefully unique. Hopefully this explains that point of view.
fight fight fight
&gt;it stores objects with the same hashcode into a tree structure instead of lineary. only if the map gets larger than a certain threshold. 
Great write up. I've been eye rolling at the nay sayers claiming "It's a bad hash"! No, you've wholly misunderstood the reasoning and purpose for the hash. Not the same thing at all. 
WORLDSTAR
The duality of man
I understand testing loggers to verify that it work in production. However, if you have a legal compliance to store certain data it should probably be written to a database not to the file system via logging. A database provides guarantees you do not get from a standard local file system. Also, Databases should have a better backup systems than most file systems.
The collision rate the link gives are actually astonishingly high to me. While you wouldn‚Äôt expect it to be a cryptographically secure hash function, one collision out of 100,000 Strings seems unacceptable in many applications.
First of all.. docker adopting to single process deployments is crap. You can run a web app server inside of docker and it is essentially the "single process" running in there. That the app server in docker runs multiple web apps has nothing to do with the concept of docker only running a single process. The web app server spawns threads to handle requests from web apps. Nothing that I have read indicates a docker container should only work with a single thread. I suspect that the concept, not the actual implementation, goes along the lines that it is easier/faster to scale containers when they focus on one thing. If that one thing is running a web app server in a container to make it faster to scale web app containers.. then the web app container is "the one thing" the container does. The number of web apps in that container mean nothing to the container itself. So, docker or kubernetes replacing web app containers is a myth. More likely.. rather than running web app containers on bare metal, like many other services.. web app containers are now being wrapped as docker/K containers and making it faster/easier to deploy and scale in the cloud. 
Jolokia has a Java agent aspect but it is not an instrumenting agent as such. It is simply allowing you to run a [jmx over http] service in your jvm without having to recompile your application. I've never heard of it crashing a jvm, and it would be unlikely to do so since it doesn't instrument byte code or make unguarded use of Unsafe. I don't think jmxtrans does either, so neither of your examples are actual byte code manipulators even though they use the -javaagent option to spin up a few extra objects at startup.
1 collision out of 100,000 is reasonable for a 32 bit hash. For a hypothetical perfect 32 bit hash, you get ~0.7 collisions for 100,000 hashes. The 'birthday paradox' applies here. As you add more items the probability of at least one item colliding with any other goes up rather rapidly. The chance of finding a collision with a particular chosen item is much lower. This crypto stack exchange post describes the math: https://crypto.stackexchange.com/a/39644, and this calculator does it for you: http://davidjohnstone.net/pages/hash-collision-probability
Most server side web applications are not written the "standard" way, using either defacto standards like Spring MVC and DropWizard, or "cool" frameworks like Play, or any number of upstarts like VertX, Jooby or Spark. It's not really that different with JS frameworks except for the absence of an official standard. 
I‚Äôm talking about implementation. Many app servers are just not designed for this. Handling SIGTERM does not work as expected, they may not work as pid 1, they do not exit at all or lose the exit status when stuff breaks... There are a lot of pitfalls you will find with such a setup in prod. I‚Äòve been there. Using multiple deployments in a single image will lead to more problems regarding deployment, CI, scaling, ... but that‚Äòs not the biggest problem to me. It‚Äòs just unnecessarily hard to get a properly behaving setup done at all if you go that route. Many teams never find these problems, but they are there if you look closely at your logs/monitoring. 
always be weary
&gt; with JSF and Primefaces it just does not take much time to do the front end. JSF and Primefaces do not automatically generate UIs. No framework does that. The front end is a product itself that requires careful construction. The lack of time you spend on the front end will be reflected in the quality of the output. &gt; I find that people who had a hard time with JSF usually used a very early version or a bad component library. I've used recent versions of JSF (2.x) and Primefaces, and still not a fan. &gt; I certainly spent much more time on the frontend than actually solving business logic when I used a JavaScript framework. That's different than a *vast majority* of time. &gt; That was my exeperiance with multiple companies and development teams. Clearly other people have different experiences with JSF. I find myself far more productive with a good JS framework than with JSF. 
Smooth scroll has been removed 
&gt; Valhalla will give us value types which are a step closer I guess. What would result in on-par performance then? I thought value types was the last missing piece required.
In that case, will it be a full replacement when it comes to hotspot?
Why should i care about hashCode()?
&gt; web app containers are now being wrapped as docker/K containers and making it faster/easier to deploy and scale in the cloud. And that too, i presume, is just a myth. I mean, you can take your web app container just as easily and deploy it on 100 VMs if you so desire. There's absolutely no need for docker/K in here.
because you want to have datastructures like HashMap and you want them to be fast. 
&gt; I never claimed it did. Really? You said this: &gt; it just does not take much time to do the front end. . &gt; What it does do is give you a team of guys at Primefaces that build and test your components and save a ton of time. At least in my experience, it's exactly the same if you use one of the popular JS libraries like React or Angular. You have an entire community of people developing well-tested components that integrate with those frameworks. &gt; Being statefull also saves a ton of work on the backend Very strongly disagree with this. This is where I have wasted the most time with JSF, figuring out how all of the different scopes interact with the states of the component, how they come together to build the component tree which effects how different callbacks get executed. Like, you accidentally set a state which makes a component invisible in the Restore View phase, and all of a sudden, callbacks aren't being executed in the Invoke Application phase. Or, tearing my hair out trying to figure out why my `@ViewScoped` bean is being created multiple times. I have spent enough time debugging the JSF lifecycle to thoroughly despite it. &gt; It's also a lot less error prone since everything is not so adhoc. If you don't want adhoc, you can use Angular, which is heavily opinionated. React is more popular because people would rather not have the constraints of a framework and would rather use a collection of libraries. JSF to me is even worse because it hides everything behind the heavy handed abstraction of Facelets with extremely bloated AJAX calls and hideous URLs. &gt; Its hard for me to understand why people would want to spend so much time reinventing all that Simple. Frameworks get in the way. JSF is the worst of both worlds, imposing itself both on the server and the client.
APM agents work in one of two ways: * Overload the classloader to capture start/end times for all method calls * Sampling the stack of each thread every x ms. The first method is very negatively affects performance, the second method doesn‚Äôt (as long as the frequency isn‚Äôt too high), but the second method can miss some method calls. Most APM tools do a combination of the above two methods. But yes, they can negatively affect performance and stability... it‚Äôs best to do your own testing.
and struts :P
Okay, so that's 1 out of 100,000 times where the hashmap needs to use \`equals()\` to resolve the collision. I call this "no big deal" for almost any application.
I am new to Java, does java EE application run on server side? Instead application written in Java SE is for client side development ?
But acceptable for many, many more. Consider how many Java programs exist today storing strings in maps that haven‚Äôt come grinding to a halt performance-wise. Obviously there is a tradeoff that needs to be made: Speed of creating a hash value vs the benefit of uniqueness. Java strings are supposed to be general purpose objects and they have served that function well. If one requires a higher quality (but probably more computationally intense) hash algorithm then they would simply define a wrapper class and write their own hashcode implementation. 
I use RichTextFX in most of my projects since moving to JavaFX. If you're just using it for syntax highlighting using regular expressions and the StyleBuilder makes it really simple. I have a pretty simple example that exemplifies this: [Java2HTML](https://github.com/Col-E/Java2HTML)
\&gt; Keep your business logic free of Spring Boot code I use spring dependency injection in my business layer. For anything but very small projects I keep the business layer in a separate module (possible in the same repository) however that module usually (always) depends on spring-context and since my business layer quite often use a data store (postgresql, mysql or mongo) it also depends on spring-data. So how do you achieve the above? When using DI and databases in your business logic. (I can see how introducing a separate module for DAO could eliminate spring-data but... yeah, lots of modules!)
Cryptographic hashes aren't unique either. Of course, they have so many bits and are so well mixed that collisions don't happen in practice.
JavaEE applications typically run on the server side, in a JavaEE [application server](https://javaee.github.io/firstcup/java-ee002.html). JavaSE can be used for anything, because it is a generic programming platform. In fact, some people think that JavaEE application servers are too big, and have created libraries that implement small servers in JavaSE, like [Jooby](https://jooby.org).
Not sure on that one. I'll consider it. Now that the scroll is fixed. Do you have thoughts on the content?
tl;dr: hash functions have collisions Nothing new, but you have to have this in mind when considering the performance of hash-based collections.
Thank you so much. It's amazing how I come across posts on other social media of javascript developers who went through "dll hell", when in reality they haven't touched a mid to large sized C/C++ project. Hell, maven or gradle is a pain to work with sometime. Disclaimer: If you're a javascript developer, I have respect for you. You know something I don't and that's great. But please, if you're going to talk about dependency management of all things, please try out C++ with multiple open source dependencies.
It looks like in your [submission](https://www.reddit.com/r/java/comments/96gucd/using_the_golden_ratio_instead_of_31_reduces/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Beat me to it! That part irked me as well, you could only make a 3 significant digit conclusion if you have 3 significant digits to go off of in your original calculation. In other words, I highly doubt those number would end up the same if they ran the experiment until there was 100 collisions.
Do the RAM requirements change when the application is under load?
Give the state of security concerns I'm excited Transport Layer Security (TLS) 1.3 support! Take that vulnerability scans!
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thank you for using math and sound principles/theories to discuss your retort!
Well written, inspirational, and level headed advice. I especially like the comment about focusing in on one language to master it and getting plugged into your local community. Having peers to bounce ideas and issues off of is invaluable! 
Agreed
Agreed, have you used springs configuration externally before? I'd love to hear about your experience with it!
Im going to ask my team to try this out. We have several batch builds that rely heavily on streams. 
Indeed, there‚Äôs no need for that. We‚Äôve been deploying application servers to VMs when Docker wasn‚Äôt even a dream, let alone a reality. But since people feel they have to use Docket and therefore Kubernetes, it‚Äôs good that Java EE supports it (or is going to)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You should also have a look at the [univocity HTML parser]( https://www.univocity.com/pages/html_parser_about). I built this to handle all sorts of tricky pages where jsoup didn't help much.
I imagine it would be the same as Java 9 or 10 if you don't create a module-info.java
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Any updates to String.hashCode()? 
Maybe this will bring [String.longHashCode](http://openjdk.java.net/jeps/8201462)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
ASM 6.2 has `Opcodes.ASM7_EXPERIMENTAL` for java 11 support. does anyone know if using this for older java classes will cause any problems ? i realize that when java 11 is released, ASM will change the constant to `ASM7` 
&gt; people feel they have to use Docket and therefore Kubernetes, And that, in and of itself, is whats wrong with humans. Why should we use the tool that gives us the best bang for our buck, when we can use the latest and greatest, feel kool, and go bankrupt. 
Thank you! I'll give it a go :)
&gt; And that, in and of itself, is whats wrong with humans. It‚Äôs human nature. Why do humans get drunk, then get into unnecessary fights or produce unplanned babies? &gt;Why should we use the tool that gives us the best bang for our buck, when we can use the latest and greatest, feel kool, and go bankrupt. Because many developers are only in the game to use the latest shiny new toy. They don‚Äôt care so much about the business, but they do care about using Angular 8.2 when all their peers are still on the ancient 8.1.2. Businesses on their turn retaliate by paying peanuts and putting devs in mind numbing open office plans, but... promising they can use the latest Angular. And many developers take the bait, especially the younger ones. 
Many things remind us of Jakarta, but luckily people also have short memories, so they‚Äôll quickly relearn the new meaning ;) Besides many developers from the mid 00-ties may have either retired now or have been demoted to some useless manager role.
In bytecode switch over strings compiles to this: ``` 11: lookupswitch { // 3 -1341359811: 58 -718616130: 44 0: 72 default: 83 } [...] ``` So it's not even a convention at this point
invite invalid. the invite code has expired
https://discord.gg/R9cW2R
Nope. expired again
you could also look into other jvm languages like clojure or kotlin which has a much more streamlined api to do these stuff.
&gt;And after finally finding a decent tutorial on it Please share it!
I believe there are no plans for this ATM (or at least I've not heard of any), given how many different implementations are out there already (project reactor, rxjava, akka streams etc). Also on a side note - due to specific semantic requirements you should be very vary of extending any of these interfaces, if you do use something like [Reactive Streams TCK](https://github.com/reactive-streams/reactive-streams-jvm/tree/master/tck)
Please do and let me know how it goes. Here is one example of a page that is hell to parse with JSoup: http://www.dolarhoy.com/ It's hell because you won't find CSS classes or element IDs to work with (the ones that are used in that page have duplicates). With my parser all you need is to look directly at where the data is and try to create a matching rule specific enough to identify the elements you need in general. Have a look at that page and check this code: HtmlEntityList entityList = new HtmlEntityList(); HtmlEntitySettings currency = entityList.configureEntity("currency"); //the group enables the matching rules to run only on tables that have text //"compra" and "venta". We add fields to the group. Group currencyTable = currency.newGroup().startAt("table").containing("tr").withText("*Compra ", "*Venta ").endAtClosing("table"); //the currency name and timestamp are in the same table cell. //this matches any &lt;td&gt; where the colspan attribute is 4, 5 or 6, then gets the text of the &lt;b&gt; element inside the &lt;td&gt; currencyTable.addPersistentField("currency&amp;timestamp").match("td").attribute("colspan", 4, 5, 6).match("b").getText(); //captures the currency exchange business name currencyTable.addPersistentField("exchange").match("td").underHeaderAtRow("td", 3).withExactText("EN $").getText(); //captures the currency purchase price currencyTable.addField("buy").match("td").withText("?*") //the ? wildcard means one character, * means any sequence of characters .underHeaderAtRow("td", 3) //targets any &lt;td&gt; in the 3rd row .withExactText("Compra").getText(); //that &lt;td&gt; must have text "Compra" //captures the sale price. The rule is similar to the "buy" field currencyTable.addField("sell").match("td").withText("?*") .underHeaderAtRow("td", 3).withExactText("Venta").getText(); //done! Now create the parser HtmlParser parser = new HtmlParser(entityList); //and collect the results Results&lt;HtmlParserResult&gt; results = parser.parse(new UrlReaderProvider("http://www.dolarhoy.com/")); HtmlParserResult result = results.get("currency"); for (HtmlRecord record : result.iterateRecords()) { println(record.fillFieldMap(new LinkedHashMap&lt;String, String&gt;())); }
Kotlin has a reactive stream API? That's good to know. I love kotlin.
Yeah the requirements for the contracts seem very complex, which is why I asked about more native implementations. I'm already looking at rxjava, seems really nice.
https://youtu.be/COgktgJmP_k It's a bit long but it actually walks you through how to properly implement all of the interfaces to use them.
I agrre witht he wikipedia page: https://en.wikipedia.org/wiki/Functional_programming Functional programming tries to avoid mutable data, and to deal only with "mathematical" functions I also programmed a lot with FP when I was young. It was not bad. I think this is a kind of "purity" which is not really good. New languages try to combine the advantages of both For instance, being able to pass a function as argument (the map of list) is interesting and certainly better than the iterator solution (not a bad idea) in most of the cases. However, working only with immutable data is certainly not really possible, but it is quite important to deal with this idea while coding. This is the same thing in general for memory. People thinks that with a GC there is no need to worry about the memory. This is true for a lot of application, but for some others, the memory flow is quite important
I prefer Reactor to RxJava2's implementation (mainly because Spring supports Reactor better), but both are good. Definitely don't try to write your own implementation, though. Unless it's just for fun. ;)
That‚Äôs why I personally advise people to start with Java. You get a lot of help from a diverse community of professionals and hobbyists. 
Actually I hate reactive programming, am l the only one? Seriously it's a nightmare to debug. In debug mode you have to add a breakpoint in every stream, idea can't Juste step into it... 
Really? intellij let's you step into lambdas real easily. It treats them like stepping into a method call.
https://blog.frankel.ch/java-serialization/ &lt;- How do you manage to 404 your own blog?
I find it very odd when programmers learn from youtube videos instead of text 
Do you know - by any chance - a good tutorial that is not an absurdly long YouTube video? I'm more of the reading kinda guy. 
Intellij also has the stream debugger
FWIW - I'm hoping Project Loom finally puts an end to all this SEDA, reactive, etc. idioms. They are all shims to work around problems with threading. We learning long ago with Unix that the ideal system is small programs piping to one another. This is the same inside of a program. Why should I have to keep track of state just to work around limitations with threads? Fibers should solve all this.
Last I tried to use it, it specifically didn't work with Java 9+.
Anything Java has, Kotlin has.
I think the best part is adding back pressure. Very useful in integration software.
But the density of information is much higher. And I can skip stuff I already know since it's organized better. And searchable.
Not to mention that it seems "good enough" for most, and everyone else can (and most likely does) use a different hashing mechanism.
I'd also suggest mentioning that deserialisation of untrusted bytestreams is an incredibly dangerous operation. Serialising via XML or JSON is a much better idea in those situations. https://www.bleepingcomputer.com/news/security/oracle-plans-to-drop-java-serialization-support-the-source-of-most-security-bugs/
serialization ? seriously ? 
I should have said that it's documented in the javadoc. It could only have been more official if it was in the JLS 
Sadly for us, we can't use WebFlux properly until we get reactive JDBC. I believe you can emulate it using Futures etc, but it's not as scalable to proper support.
You can increase the density by increasing the velocity. Watch at 2x as a minimum. If you need something searchable look at the reference. The problem with tutorials is that they are incomplete necessarily incomplete and oftentimes plain wrong. Their job is to give you some context, not the full info. Personally I like conference talks by experts. They are concise and often correct.
A bit late to the party, but I'll add my 0.02 eurocents anyway. First of all, some clarifications: * Reactive streams do not have much overlap with the Observable pattern besides the name. They're more like a cross between Streams and CompletableFutures. * The JDK 9 contains the necessary parts to enable *interoperability* between different reactive flow implementations. Yes, you can bridge between Spring Flow and RxJava Flowables and Vert.x and Akka. Implementing your own reactive streams on top that is a bit like implementing your own UI toolkit on top of AWT (when there's Swing or JavaFX around). * Most reactive stream tutorials are focusing on the wrong abstraction layer - they focus on the primitive building blocks then run out of steam before they reach the more useful high-level parts. The video you linked does that too. Now, I use reactive streams *a lot* on my day job, and it's usually in the context of REST API calls. Wait, what? What do reactive streams have to do with REST calls? Here's an example of RxJava + Retrofit: apiClient .getOrder(id) .flatMapIterable(Order::getLineItems) .flatMap(lineItem -&gt; apiClient.getProduct(lineItem.getProductId()) .map(product -&gt; product.getCurrentPrice() * lineItem.getCount()), 5) .reduce((a,b)-&gt;a+b) .retryWhen((e, count) -&gt; count&lt;2 &amp;&amp; (e instanceof RetrofitError)) .onErrorReturn(e -&gt; -1) .subscribe(System.out::println); If you work with microservices, a lot of information will be distributed across different services and when you need to collect it, all these HTTP calls will take too long to be executed sequentially. Enter RxJava and Retrofit; the latter has the option to return HTTP calls as reactive stream objects compatible with the former. As a result the above 11 lines pack a very significant punch: * Parallel but contained - \`getOrder\` and \`getProduct\` can be configured to be on their own thread pools / Schedulers, so that there's a hard limit on the # of concurrent connections to a downstream service. * Parallel but cooperating - the fan-out on the \`getProduct\` call is 5, no more - you will not saturate the connection pool with a single call. * Retryable - if an HTTP-related error happens, it will retry at most 2 times. (arguably this could be optimized, but this is an example)\\ * Safe on errors - it will always return a value, even if there's an error that happened. * Safe on cancellation - I can dispose/cancel the subscription, and the reactive streams implementation will make sure that upstream operators/reactive streams will be properly unsubscribed from and that running operations (such as running HTTP calls) are properly aborted. Granted, this is just an example and in actual use it does become a bit more complex, but the gist is true. Another place where reactive streams are awesome are JMS message processing - properly configured backpressure will result in a system processing messages as fast as possible but no faster, with a minimum of messages in flight.
If you do your own connection management, feeding JDBC results to reactive streams is relatively straightforward.
&gt; As stated in the article, if you use construction injection there's no need for the autowired annotations. Sure, but the injected class still needs to be annotated with service, component, repository or the like which results in a dependency on spring &gt; Spring data repositories for sql and nosql databases share the same structure (i.e. queries are constructed automatically based on method names) so you must only declare that you are using a repository of a given type and you'll be free to change the actual data source. Same as before, you might have an interface declaring the repository. But as soon as your implementation is annotated with @repository there is a dependency on spring.
The link your script used is `https://blog.frankel.ch/java-serialization/;title=Java%20serialization`, this comment was made to get people to the actual post.
Shit! Many thanks! I wonder how I ended up getting this link
&gt; However, working only with immutable data is certainly not really possible, but it is quite important to deal with this idea while coding. Well, yes it is. I do this every day as part of my job.
Lenovo Thinkpad T series. Fast, light, plenty of ports, good battery, excellent keyboard.
Maybe you‚Äôre running too much / poorly performant apps if a 2016 MBP with 16GB isn‚Äôt enough. Not that it‚Äôs your choice, but if whatever you‚Äôre building requires a local server to run it, it may be the software. 
Have you found any good reactive JMS integration libraries? I've been having trouble with that myself, so if you know of a good one I'd appreciate a pointer.
AFAIK, fibres don't solve issues with parallelism, complex sequencing, or backpressure - all concerns reactive streams address. They just make the "what threadpool do I run this on again" problem go away. That's nice, but not a gamechanger.
You get used to it. But you can also swap the keys in the BIOS
Still better than the finger acrobatics on Apple keyboard for copy paste
I have a Dell XPS with 32GB, it's pretty good. You can also go with a straight up gaming laptop with some extra RAM.
I quite like command + c/v you don't accidentally kill stuff in the terminal.
These are separate concerns really. While you might use a reactive framework to work around the lack of fibers, they are designed to solve a completely different problem. 
I've been pleased with my Dell Latitude, though I know some people have reservations towards them. I especially value the on-location service warranty, where they send a technician to fix your laptop instead of you having to bring it to a service center and go 2-5 days sans-laptop (I'm guessing this service may not be available everywhere in the world....)
I suggest to have a deeper look at \[Reactor\]([http://projectreactor.io/](http://projectreactor.io/)). It is based on Reactive Streams at the core and it makes use of Java 8, what makes it leaner than RxJava with all it's legacy. The Reactive Streams APIs are not intended to be used in "usual" programming, but as basis for libraries like Reactor, RxJava, Akka Streams and the like. All the useful functions like \`map\`, \`filter\`, \`window\` ... are only part of these higher level libraries.
&gt; my 0.02 eurocents That was a pretty big comment for just 0.0002 euros ;)
Maybe. There is a long term roadmap to bootstrap OpenJDK, similarly to JikesRVM. It is known as Project Metropolis, but it is very long term roadmap, so it is open ended if it really takes place.
Depends very much on the enterprise shop.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
... which will happen if someone floods it with identical hashcodes.
Goes back to Dec 1, 2007, so between Java 6 and Java 7. It would have been interesting to see some of the Java 5 and Java 2/1.2 commits. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I also hate it because it's so far from Java the original imperative language. It's like it's an alien dialect. I'd rather use a proper FP language designed for it from the ground up rather than this thing. Let alone the huge technical debt it will be in coming years, if only for people to understand the super clever and unreadable code. This is an abomination.
&gt; There are third party implementations like RxJava I'm looking at, but I'm wondering if there are any plans to expand the JDK to include more concrete implementations. Reactive Streams is an API, it's really just the basics. Implementations like Akka Streams is where higher level functionality comes in. https://doc.akka.io/docs/akka/2.5/stream/stream-quickstart.html
Talk about an endless loop.
When you increment the wrong variable and your while loop never closes...
A change is as good as a rest - after staring at text on a computer screen all day it's refreshing to sit back and watch programming videos on a computer screen.
Cracking the Coding Interview by Gayle Laakman McDowell is a good book for a programming interview
Try a [better suited subreddit](https://www.reddit.com/r/cscareerquestions/)
Would you share the questions?
Internal workings of a hashmap. What exactly and how exactly does hashcode work? Difference between a declaration as a string literal and using new to define a string. Polymorphism - what are the two types with examples. Encapsulation
Every checked AssertJ or Google's Truth? I find AssertJ for example a lot more pleasant to write with it's fluent API.
Yes, and it's a nice step up from 4 with a good parameterized tests library, nice extension system, nesting of tests etc.
&gt; java.base This looks odd. Is this just a VCS glitch or was a primordial module subdivision already there back then?
These are things that you can readily learn with a Google search. While learning these, you'll also stumble across other OO concepts and the inner workings of the JVM. Eventually you'll start doing your own research out of pure interest. Don't bother with interview books. 
I'd go a step further, you should be actively trying to remove java serialization on current projects. You can't really do that without understanding how it works and what it does.
Please show a a more readable way to achieve, say 5 API requests, where 3 should run in parallel, and two depend on the result of another, and you want to combine the data of all requests in a view, with proper error handling/retrying. 
Wow, the code around this is crazy. Java will create a tree. Check if the type is comparable, and ultimately fall back on the object reference for the tree when all else fails. Kind of nuts really. But, guess it truly is log n for any type.
Do you mind sharing what kind of level job at what kind of company it was? Those questions sound a little bit "out there".
If you use Kotlin, you can add it as an extension to Iterator so you can do iterator.stream(), forEach(), etc. Maybe a nice add on for your library?
Sorry I just meant read Effective Java, and then go and build your own system (anything). Because I don't think just reading Effective Java will really be useful without also completing a larger more complex project. Kind of a "apply what you learn" recommendation
That is from the Java 9 modules reorganisation. `java.util` package is in the `java.base` module.
I'm very much inclined to agree with you. Java serialisation was a bad idea and hard to use safely. 
Oh boy do I understand and agree with that. I have an old project that HEAVILY used it. I actively tried to get rid of it, but unfortunately Java serialization handles some edge cases better than pretty much any other serializer (particularly cyclic object graphs.... yeah). We constantly ran into problems where some sub sub sub model would add a new class but didn't make it implement Serializable. Not to mention the fact that the wind blowing can cause serialization to fail. It was just and awful mess that introduced a lot of coupling and heart ache. But man oh man, if this goes through https://www.infoworld.com/article/3275924/java/oracle-plans-to-dump-risky-java-serialization.html It is going to be a nightmare for that project. I'm just glad I'm not on that team anymore :).
IdentityStore implementation classes are typically designed to handle specific credential types. Kerberos ticket, JWT, etc. So you would check for instance type and then cast and validate for that particular credential type. 
Out there?
I know Kotlin fans are generally unencumbered with reading comprehension skills, but this is /r/java, a forum for Java, the programming language. Or are you just not getting enough attention in /r/kotlin?
These interview questions sounds like the kind of thing you'd ask a student to answer who has memorized a bunch of technical details to pass a test. When I interview programmers, I ask them about what tools they've used, what they've built, what kind of problems they encountered and how the tools they chose helped them build a good solution. I couldn't care less how HashMap is and HashCode are implemented. Which is why I asked what company and kind of job is it. Those questions might be appropriate for some other kind of programming job, but necessarily the kind of programmers I hire.
if you need for loop an iterable for (Object o : (Iterable&lt;Object&gt;) () -&gt; iterator) { }
A better solution: import java.util.Iterator; import java.util.Spliterators; import java.util.stream.Stream; import java.util.stream.StreamSupport; static &lt;T&gt; Stream&lt;T&gt; stream(Iterator&lt;? extends T&gt; iterator) { int characteristics = 0; boolean parallel = false; return StreamSupport.stream( Spliterators.spliteratorUnknownSize( iterator, characteristics ), parallel ); }
Good introductory tutorial. One point in addition to the feedback you've received. The initial implementation of `pop()` could have been the simpler `stack.remove(0)`, which might have suggested to you the value of a test that asserts the correct value is popped after two pushes. IMO this mainly proves that writing good TDD-based unit tests can be difficult when you know what the code should do. 
For a long time I really loved java, but it's hard not to say this is a perfect example of why java in 2018 sucks. I spend half of my sloc translating from one type of collection to another. Really wish the community would do a better job of standardizing. 
Agreed. That is also how Guava implements [Streams.stream(iterator)](https://github.com/google/guava/blob/f264e9671e33744b4b7733cf3e4c8eb95be51999/guava/src/com/google/common/collect/Streams.java#L77-L83)
Which is exactly what Guava's `Streams.stream(Iterator)` does. It's a shame that something useful like this isn't in `StreamSupport` directly. I'd be interested to read why `stream()` is on `Collection` and not `Iterable`, given that it is possible to stream the latter.
While it would have been better to have a simple factory method in `Stream`, the Guava library has a lot of convenience methods for converting from one type to another.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; I couldn't care less how HashMap and HashCode are implemented. Wha? Knowing how common datastructures work is immensely useful general knowledge and mandatory for any selfrespecting software engineer.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I'm not so sure. Look at golang. Although there is some sort of reactive implementation, the most common method is goroutines (aka. fibers) and channels. That is sufficient for a majority of use-cases, I would say.
I found this line slightly confusing/hard to follow: &gt; The first non-serializable class in a Serializable class hierarchy must offer a no-arg constructor. It will be used during the deserialization process. Maybe its just me, but perhaps "topmost" would be clearer than "first"? Or else give an example...? 
I've converted logic from RxJava to Kotlin coroutines, and have found that most of these complex issues (parallelism, backpressure, error handling, retry logic) actually becomes simpler, not more complex. The ordinary imperative constructions that I am used to work. Try/catch for error handling, while-loops with exponential backoffs for retrying, backpressure by suspending the coroutine whenever you need to wait on IO. You mileage may vary, obviously, but I would recommend trying it out.
 &gt; Given that information, one may now understand why generating a random value with the IDE will fix the IDE warning but is utterly useless. I always suspected it was useless, and wondered why it's done this way. So is the sensible way to set it to `1L` (or some other "first-version" convention), and increment it with every change? 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Is that true? I think the IDE generates the exact value that would be computed automatically by the compiler, thus preserving backwards compatibility.
Yeah you do all those things you listed AND that depending on the level. You don't want someone using hashmaps that doesn't understand what they are. 
I think their interview style is trying to find people who know *when* to look things up and understand what it means. The "prove it for this arbitrary example" part is somewhat redundant then (I think).
First the good news, you learn a lot by failing. Also, all the answers are easily learned, I even screwed up the hashmap question before in my early days. From the sound of it you are going for entry level, which means they are going to be asking text book questions because you don't have much experience. I'd recommend reading up about Java types, because they are riddled with gotchas. Then you just need to read up on the principles of Object Oriented programming. Those things alone answer 3/4 of you questions. Hashmaps and data structures in general I would focus on the common ones. How do list work? sets? Hashing in general, then just go from there(Hashmaps, use list or something similar for collisions actually). Plenty of resources only about them. Best of luck!
It sucks :( I did the test and it didn't even tell me what questions are right or wrong. It just says "Unfortunately, you have not passed this time. Why don't you give it another try?" 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Could you elaborate on why that is better?
I passed but same thing, I wish you could see a summary containing the questions/answers... 
Wants me to log in = I'm pressing 'back'
#scala
Thx for the feedback [sk551](https://www.reddit.com/user/sk551) &amp; [Pix-I](https://www.reddit.com/user/Pix-I)!
When I want to learn how to do a specific thing, I like reading because I can quickly find what I'm looking for. When I want a general overview on something, I like watching videos.
There's no significant difference at run time, but this is better when someone's reading the source, trying to figure out what the program's doing. The solution in the blog post is a bit too clever. Someone reading along has to wonder, "Wait a second, usually the expectation is that `Iterable.iterator()` can be called multiple times, always producing a fresh iterator. This is only gonna work once. Well, I guess that's okay here, as long as the iterable doesn't leak out, because the stream is only gonna use it once." There's no reason to dump that additional bit of cognitive load on the reader when [`Spliterators.spliteratorUnknownSize(Iterator,int)`][0] exists specifically to turn an iterator directly into the spliterator that [`StreamSupport.stream(Spliterator,boolean)`][1] is looking for. [0]: https://docs.oracle.com/javase/10/docs/api/java/util/Spliterators.html#spliteratorUnknownSize(java.util.Iterator,int) [1]: https://docs.oracle.com/javase/10/docs/api/java/util/stream/StreamSupport.html#stream(java.util.Spliterator,boolean)
The questions are bad. What does `public int start()` return? * The start index of the last match * The end index of the last match * The start index of the first match * None of the above Wait, what? Ohh, you mean something with regex? Also, I took the test about Java, not Ant or Maven. I had to guess too often what the questions are about. And it asked the same question twice.
Hmm I suppose that makes sense. It just takes me so much less time to read than listen to people that it gets irritating. 
RFE: https://bugs.openjdk.java.net/browse/JDK-8181054
Because `jdk.*` packages only exist since java 9.
These kinds of comments are really appreciated, thanks [Johannes\_13](https://www.reddit.com/user/Johannes_13)! Did you also try to [Claim](https://indorse.io/claims/new) your programming skills? What did you prefer, the human validation or the bot validation?
&gt; But nothing in your example seems to rely on backpressure and push/pull does it? So, Reactor's backpressuring is invisible unless you specifically override it with your own options. Most operators (like flatMap) have an internal queue that defaults to a small size (usually between 32-256 events, depending on what you're doing) which once full will stop requesting new data from the upstream until they're cleared. This gives you a nice, automatic backpressure-aware stream that also ensures that latency is handled with some light queuing. Of course, you can and might configure some much more complicated backpressure handling, but that's what you get out of the box. So if `AsyncEndpointService.callEndpoint` is a bottleneck and the flatMap queue fills up, downstream requests for more data will be throttled at that point and the `Flux` source should receive no requests for new data until we've chewed through some of our backlog. &gt; In fact, doesn't flatMap have arbitrary concurrency, which means that your AsyncEndpointService can get arbitrary number of concurrent requests? No, it defaults to a max concurrency level of 16. &gt; And what role does parallel() play here? It splits the Flux into a number of "rails" equal to the number of CPU cores, allowing that level of parallelism. You can pass a different number of rails if needed, or a different thread pool if you're doing something blocking. &gt; I see nothing that benefits from multiple threads here? This is pretty much a toy example I whipped up, but depending on the volume of work you have to chew through it can be quite handy. Consider it stand-in for fine-grained concurrency control. &gt; In our case, the complexity went down, but that could very well be due to the fact that we didn't use very many features, and the ones we did were easily replaced. Yeah, if you're not using asynchronous backpressure and don't need to operate over the whole stream of events as an abstraction, then reactive streams obviously aren't for you. After all, those two features are pretty much their key selling point - don't use a hammer if you're not pounding in a nail. But fibres/coroutines/green threads don't seem to solve even simpler problems. It seems to me that you'd still need some kind of `Future` or `Mono` type to sensibly parallelize operations and then combine them when done, or set up races, etc. I guess a language could provide some special syntax for that (like async-await), but that's less extensible by developers and bloats the language with lots of special case operators. How does Kotlin handle that? Like, take the simple case of executing N requests in parallel and then combining the results. Or executing N requests in parallel and taking the first result, cancelling all other requests. It seems to me that you'd still need a future type for that.
It can do intra-method changes and that's it. Method renaming, adding, class hierarchy changes, class renaming, annotations, \*lambdas\* it can't. Seems super limited. 
I went one step forward and guess what? The service wanted that I fill out my profile. It seems like if someone is brave enough to login and had some curiosity, on this step they will definitely quit. I almost did. However, I did the test for beginner in Java. I would say, that questions are not precise enough. Plus, as it was mentioned already, I want full report on my answers. I like the idea, but some improvements would be appreciated 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thanks for your informative answer
The sidebar here, r/learnjava, r/coding or r/programming will probaboy have some good links for resouces and exercises. The best advice I can give you is to decide to make something, and then learn the things needed to make it as you go. This may be a game, a calculator, or a Twitter clone. It doesn't really matter what, so long as it holds your attention long enough to learn something, even if you don't come close to completing it.
I thought of that too. I will try it thank you
I continue to use with Java because of the platform‚Äôs commitment to stability and compatibility. The language architects are also continuing to work on exciting projects, such as [Valhalla](http://openjdk.java.net/projects/valhalla/), [Panama](http://openjdk.java.net/projects/panama/), [Amber](http://openjdk.java.net/projects/amber/), [Metropolis](http://openjdk.java.net/projects/metropolis/), [Loom](http://openjdk.java.net/projects/loom/), etc. I don‚Äôt have anything against Kotlin, but it just seems like it‚Äôs for users who want to use Java with abbreviated syntax.
Because I have a job. I know that sounds snarky, but in all seriousness, I work on a large (10s of millions of LOC) government project that's been around for years and isn't likely to switch to a new language just because it's cool. We're still on Java 7, if that tells you anything. At home I might try Kotlin some time, although I prefer Scala.
dzone -&gt; blogspot.com -&gt; linksynergy.com -&gt; ??? ..click-bait much?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Why do bother with Kotlin when there is good enough Java or Scala and Clojure otherwise?
I would totally choose Kotlin for a greenfields project. I'm stuck with Java because the product contains a great deal of legacy Scala and I don't to bring a third language into the mix.
&gt;any reason not to use Kotlin https://allegro.tech/2018/05/From-Java-to-Kotlin-and-Back-Again.html In your defense, I tried googling for this and google hides this unless you basically know the article title already. No surprise considering how hard they shill it.
pls ignore the troll.
&gt; I think this is what gets people confused - they see the keyword `var` and they assume all bets are off and types no longer matter. Would a different keyword have helped avoiding this confusion perhaps?
&gt; I don‚Äôt have anything against Kotlin, but it just seems like it‚Äôs for users who want to use Java with abbreviated syntax. And that's probably why Kotlin is so popular: migrating to new syntax for familiar concepts is easy compared with migrating to a new paradigm :)
&gt; Not many know Kotlin and ramping up some on our team has been difficult. Interesting, can you elaborate?
I am removing this post because of the use of redirectors and clicktrackers like linksynergy.com I am also formally warning you to stop using the above means. This is the only warning you will receive.
&gt;Would a different keyword have helped avoiding this confusion perhaps? No! Only education - something mediocre devs often don't have or don't make effort to keep up with new features or acquire deeper knowledge about type systems in general. To think ``var`` would eliminate the static typing is such a weird and crazy idea, that only devs with very low knowledge and understanding could come up with. (Beginners too, but they have a general pardon as they could not have the capabilities yet) 
 This may sound as a stupid question, but what is the point in using var if I can just use generics? 
As a java dev turned C# dev, I use var all the time now and understand it's good practice to do so. 
They cover different areas. Generics let you abstract over many different types in a class or method (Think `List&lt;T&gt;`). `var` is just a way for you to omit information that is already present in local variables. `Foo foo = new Foo();` vs `var foo = new Foo():`
I think it's simply the popularity of JavaScript that causes that issue. Tons of statically typed languages have used the name `var` for decades. 
Thanks for the clarification. 
They're different concerns. You can use `var` only inside a method and only when you are declaring and assigning a variable in one statement. void test() { var count = 1; // int var msg = "hello"; // String var foo = new Foo(); // Foo var bar = getBar(); // Bar } It's completely optional, but if you use it is recommend stepping up your Clean Code habits, so shorter functions and clearer names. One place where local variable inference and generics interact is with the original type inference in Java: the diamond operator. You can't use both at the same time, as the compiler won't know what is the inner type. List&lt;String&gt; names = new ArrayList&lt;&gt;(); becomes var names = new ArrayList&lt;String&gt;(); The type moves from the left to the right. One thing to note is that you have a `List&lt;&gt;` in the first line and a `ArrayList&lt;&gt;` in the second, but it honestly doesn't matter.
&gt; Java has introduced the var keyword Just a small point, but it's not a keyword, but a reserved type name. It's a subtle difference, but it means you can write: var var = "var"; The main reason was to not break any pre-Java 10 code that used `var` as a variable name. The only code that would break is if someone declared a class/interface/enum called `var` instead of `Var`. But that only happens if you're ignoring the Java style guide.
We saw the same thing when C# got `var`.
&gt; but it honestly doesn't matter. I never understood the habit of Java developers to insist on using interfaces for local variables. Sure I've heard the arguments, but they always seemed superfluous.
Long, redundant class names. Especially when generics are involved. 
Kotlin is pretty easy to learn, if you already know Java. I would say, that a developer not being able to pick up the most important parts of Kotlin within a few days is a risk for any project. It is much harder to learn most frameworks.
What you can't do is this: var user; if( test) user = new User("test account"); else user = repo.GetUser(userKey); Even though the type is obviously `User`, the compiler can't infer it unless you put the type on the declaration line. User user; -- C#. I assume Java works the same way.
If you have very specialized tooling for Java that is not available for Kotlin, I could think of that as a factor to stay with Java. Otherwise Kotlin is better in almost every regard.
It's so you can change return types without changing every caller. It's a sensible habit if you don't care if you have an `ArrayList` or a `HashSet` or a `ConcurrentLinkedDeque`, just that you have a `Collection`.
&gt;I‚Äôm looking at you getters and setters Stay tuned for [records](http://cr.openjdk.java.net/~briangoetz/amber/datum.html)!
You actually can use both the diamond operator and var at the same time! `var list = new ArrayList&lt;&gt;();` This is perfectly valid. The inferred type of `list` is `ArrayList&lt;Object&gt;`.
You can, but you shouldn't. Any more than you should use raw types. 
I didn't say they were the same. I just said you should avoid both.
Java has also had type inference for generic methods since generics were introduced in Java 5. For example, you can write List&lt;String&gt; list = Collections.singletonList("foo"); instead of List&lt;String&gt; list = Collections.&lt;String&gt;singletonList("foo"); 
"final var" is my enemy.
Unfortunately we can't use it on android. Android is stuck on Java 7. But why is it stuck? It would be very useful to upgrade Android to Java 11 and use all the new features coming with it.
No you both
Because you have to type six extra characters?
Six extra characters that lead to a reading of "unchanging changing".
&gt;summary containing the questions/answers I see, we'll definitely work on the *summary* part! Thx a lot for the feedback!
I see, we'll definitely work on the *summary* part! Thx a lot for the feedback!
Code is better when "variables" are all final. 
But Kotlin is not for everyone. Some people may prefer Java.
Not so much: https://youtrack.jetbrains.com/issue/IDEA-188689 Please vote for it.
Exactly. Var cripples grokability for humans and IDEs. 
Most of the time they are NOT REDUNDANT why is this myth so damn pervasive? And what the are you saving? Some autocomplete time because if you are typing everything out by hand you have already lost. Name you variable sensibly and the rhs can be obscured because you have all you need on the lhs...unless you have hidden it behind var. 
I'm not sure I can answer for everyone, but for me, it's much more readable using var than what I used to write when specifying types. `var myObject = new ReallyLongObjectName();` To me is much more readable than: `ReallyLongObjectName myObject = new ReallyLongObjectName();` No need for repetition. As an example with some of my own code: [With var](https://i.imgur.com/c7hkGV9.png) [With types](https://i.imgur.com/25t2wlY.png) Ask yourself the question if you really need those objects typed? In a service dedicated to units, you can assume the repo is the unit repo (due to the methods you can call on it as well as the context). You can also assume that units is a list of units, due to what is being done with it. The caveat to this is if you are a terrible developer, who doesn't name their objects correctly. Using var forces you to actually name your shit appropriately. Let's also say I have a method somewhere with a return type of a class, and this method below calls it: `public int DoSomething(string myString)` `{` `var myClass = StaticClass.StaticMethod(string);` `return myClass.IntProperty;` `}` I can mess about with the `StaticClass.StaticMethod` return type as much as I want without affecting code elsewhere, as long as the property is the same. I don't need to run around refactoring all the '`MyOldStaticReturnClass myclass`' to '`MyNewStaticReturnClass myclass`' (which might be easy if you're using a good IDE and in the same solution, but definitely won't be easy if you're pulling in your own nuget or library from elsewhere). This also holds true for if you declare an object as `IEnumerable&lt;Object&gt; objects`, that gets its value from a method. But then decide to change the method to IList&lt;Object&gt;, the functionality is much the same, but you now have to run around changing all of your code. Waste of time. I can in good faith say that after being a dev for around 6 years now, the first two of that using typing, the next 4 using var, that var is much more of my preference now and easier to work with.
And now every C# dev I know uses var over typing their objects.
https://stackoverflow.com/questions/20860931/is-it-possible-to-run-javafx-applications-on-ios-android-or-windows-phone-8
As far as _local variables_ are concern - IMHO they are largely redundant, if there just there for intermediate variables to pass to something else. Arguments and return values are still declared, so as far as _human readability_ goes I think it works better, less diff between revisions for intermediate values/types/shapes that may not ultimately matter change. Looking at some old JOOQ code I had code that read: Record2&lt;Integer,String&gt; row = ...... return SomeImmutableDataObject.create(row.get("id", Integer.class), row.get("name", String.class)); You add a column to the query, now you have a `Record3&lt;Integer,String,String&gt;` which needs to often be repeated in multiple places, the only lines of code that _really_ need changing is the query, and the extraction of fields, not the intermediate typed class, of which we werne't actually using it's type info for since we're using named fields with types. After awhile in this code we dropped the declaration down to just `Record` and it made maintainability much easier - with `let` we'd actually retain a modicum of both worlds, the richer type _where it was needed_ ( compile time check, run time check ) but less churn/noise in diffs. This is not to say it's the holy grail tho.
&gt; var timesTwo = i -&gt; i * 2; This also can't _currently_ be one in a forward-only pass as the resulting type _might_ be `Function&lt;Integer,Integer&gt;` or any other `*&lt;Integer,Integer&gt;` functional interface that happens to be imported. Hopefully in time we might be able to see some form of specialisation where when `timesTwo` is actually passed to another function, the compiler will generate functional interface instance for both (for example) the JDK _and_ Guava's `Function` interface - essentially what happens if you pass a method reference around. 
While I agree that &gt; List&lt;String&gt; foo = new ArrayList&lt;String&gt;() is redundant and therefore probably worth avoiding, I disagree that leaving it the genetic type in the constructed call is in any way clearer. There's probably not much in it, but the redundant version (imho) is clearer by virtue of being explicit. I do, however, think that using var could well make code a little bit not awkward to read. It's possible that I'm just not used to it and would change my mind, but, again, explicit means clearer in my mind.
var doesn't mean changing. var means "compiler I know you know that I know that you know the type, so I'm not gonna write the type because we both know the type" It doesn't mean dynamic. It doesn't mean javascript. It's just a shortcut. 
If you read it literally, but in this case var is a shortcut to avoid writing out a type both you and the compiler know. That's what var means in this case. It's like arguing that a steering wheel is the same thing as the wheels your car sits on. 
I have used both Java and C# in various projects for years, and this is just one of those holy war things. There are a dozen arguments that are all based on subjective criteria, like weather the curly brace should go on the same line or the next line. In the end, who really gives a shit. I like var and welcome it, but there's always going to be those die hards who get defensive because one of the things that made Java stand apart has been taken away from them. 
What benefit is there to hiding the type? Saving 4 characters by typing var instead of string. No thanks I would rather the code be readable. The reason Java is so popular is because it is easy to read. 
Completely agree. This is going to get abused so hard
I do fully agree with you, however I write a lot of groovy right now and use def in the same manner as var. I've altered my habits and those on my team to name methods as getNameAsString for example, to avoid issues like this. I personally think it only makes sense to use var on the lhs when the rhs very obviously returns the object type.
I hate this "var" thing, it hides the type and makes code less readable. What about constructions: `var complexObject = someObject.getSomeComplexObjectStructure();` What type is `complexObject` ? I have to go to the getSomeComplexObjectStructure() declaration and check it.
Yeah, the only solution is to shift the type into the method name... Which is.... I don't even... Really? What have we gained here? 
Meanwhile in JavaScript, we're all adding types back in with Flow and Typescript. 
The latter is better because I look at only the lhs of those lines and know exactly what I'm dealing with. No, it pushes type information into names WHICH IS BAD resulting in a type refactor having to also be a name refactor... Which might be forgotten. Awesome. Without var YOU DON'T NEED TO FUCK WITH THE NAMES the language makes you indicate type properly, clearly and to the precise level of abstraction you intend. 
I use java primarily for two reason, because of the Java Virtual Machine and its associated compilers, the Just In Time Compilers producing highly optimized machine code and the new Graalvm java version providing the best language interop. I work with a few data scientists and now I embedded some R code, this is new and its to early to say how far we can go with this but for small scripts its working really well, I am hoping projects like https://github.com/graalvm/graalpython will get enough support to move beyond early-stage experimental implementation. I think of the JVM as a virtual processor with really high visibility and as RAM and and physical cpu resources decrease in price the viability of the JVM only increases. The second reason I use Java is just its ability to glue so many disparate process together eventually I hope to write applications choosing from e6, Python, R, Scala and java and run it seamlessly on the JVM 
Java has the best tooling. Also: [http://blog.cleancoder.com/uncle-bob/2016/07/27/TheChurn.html](http://blog.cleancoder.com/uncle-bob/2016/07/27/TheChurn.html)
Maybe not `final`, as that is a keyword, but something like `val` might be possible. They did consider it, but decided against adding both, as we already have `final var`.
To be fair, some languages have that feature, for example Dart: int x = 42; print(x.what); // compile time error dynamic x = 42; print(x.what); // runtime error C# also has something like this if I remember correctly. But I totally agree, that shouldn't be your first thought when seeing `var` in a static language like Java as it's very unlikely. In my opinion`dynamic` is also not the greatest feature to have, it's very magical.
Putting types in names is definitely worse. If you are going to do that, better to just not use var!
Type inference sucks. Should be called type obfuscation.
IMHO that, as with most things, hinges more on the stupidity of the developer than the stupidity of the feature. Using var to remove all indication of type is a dumb and lazy way to use that feature. My company has a style rule that var should only be used in Java to shorten statements where the type is still obvious. E.g. Map&lt;String, List&lt;SomeClass&gt;&gt; foo = new HashMap&lt;&gt;(); can instead be written as: var foo = new Map&lt;String, List&lt;SomeClass&gt;&gt;(); Which as a feature I find particularly useful in cleaning eye clutter in test code. 
I'm suggesting that local variable names and types ARE IMPORTANT and if we are going to not bother with them we might as well go nuts. 
That use does not fill me with rage... But what about the fact that your two examples are different now. Is the local variable Map or LinkedHashMap? For that pair of types it may not be important, for others it is. I might have a Cat bit in future I may want to use Animal and use typing to enforce the correct abstraction. I also hate the two different places I now have to look for the type... Consistency is king and var used "appropriately" breaks that. 
I was continuing to agree with you BTW, was just elaborating the stupidity of var. Nope, my name is an Object containing first and last names as fields.
No. You. Don't. Your definition of good name is one that is long and totally redundant in the absence of a stupid construct like var. 
I don't use var when I use Java 10. However, when I write groovy I pretty much always use def, which functions similarly. I did reply to the other guy, don't use a shitty variable name like p and just use p.getName where it's being used. No need to point it to a local variable in a lot of instances. Obviously it depends on the situation, but damn. I didn't know we hated var so much lol
Thank you for restoring my faith in humanity. 
Worth noting that C# has had this for a while now and that the prevailing style it to use var for variable declarations. It makes refactoring slightly easier and (in my opinion) helps readability as well.
Wouldn't it be more readable if you didn't have to scan several dozens of characters in search of a variable name?
C# had these exact same arguments years ago but the community has settled on var as standard. It turns out that the things you list are more theoretical than practical. I found in my few years of writing C# at an all-var shop that I initially thought I cared what type a variable was, but turned out having it not matter. Variables are created because you want to do something with that variable. What matters is what you want to do with it, not what type it is. At least give this article a read: http://blog.michaelbrennan.net/2010/06/why-you-should-always-use-var-keyword.html Looking through your comments on here it looks like you're pretty adamant about not seeing that var could be a good thing. I entreat you to at least try to switch sides and see how C# devs could prefer var for the last 7 years.
My last job was a C# shop and we used 100% var. Coming from a Java background it seemed weird and bad but it was the sort of thing that you just get used to a slightly different workflow, then it's better and more readable.
That is not the main use case of var. Var is used when there is redundant Type information like: OverlyComplexNameGenerator overlyComplexNameGenerator = new OverlyComplexNameGenerator(); vs var nameGenerator = new OverlyComplexNameGenerator(); There is lots of Java code that is overly verbose making it difficult to read. Var is just a tool to help reduce the verbosity when the type information is unambiguous.
Where have you been lately? "Fake news" is anything Google doesn't agree with. It gets shadow banned and you never see it again.
Sure, it's great there. The problem is people will use it where the RHS doesn't show the type, then you need an IDE to comfortably know the type -- readability is reduced. While we often have an IDE, we don't always (eg reading source on github).
I'm saying it's convenient when you can see the RHS type. We are agreeing that it hurts readability when you can't see the RHS type.
They made a small error in their second code. It should be: var foo = new HashMap&lt;String, List&lt;SomeClass&gt;&gt;(); `foo` is a `HashMap`.
With Microsoft muscling in on the Java world, we may as well dump Java and switch to C# and .Net Core.
If you wanted Animal instead of Cat you wouldn't use var. I agree that var trades readability to be more concise. Some people hate Java's verbosity, but I personally appreciate keeping things simple. That used to be Java's charm! Now I see long methods chains, map, etc.
If Kotlin is so similar to Java, then why would I bother switching at all? I would be more willing to make a significant change by adopting Scala. 
Spot the person who didn't read the article.
That‚Äôs not eye clutter, you are literally doing a different thing here. In the first example you are coding against an interface, which is a best practice and there‚Äôs lots of documentation on why you should do that. In your var example (which has a typo btw and would actually be hashmap and not map) your type is now the implementation class and not the interface so you lose the benefit of working with the interface there.
What prevent you from using the old way? 
Nothing, but did you work with legacy code?
You're correct, it's merely a copy paste typo since I'm on mobile. Should be HashMap. Will edit
With that mindset, p.getName().toLowerCase() is equally stupid: What the merry fuck type is the result of p.getName()? Same deal with invokes: foo.doThingie(p.getName()); // Let's say doThingie has a few overloads, which one is invoked? The IDE can help you (mousing over 'var', in most of them, will tell you). More to the point, your brain can help you: If the code turns into a hard to follow mess if you write 'var name = p.getName();', then... don't. This argument is entirely analogous to turning: doThingie(p.getName()); into: UserName userName = p.getName(); doThingie(p.getName()); Let's say there's both `doThingie(String)` and `doThingie(UserName)`, then the second snippet sounds a heck of a lot more readable to me than the first. Note that a lot of style guides strongly suggest aggressively eliminating single-use variables, so they're all either so wrong they deserve such hyperbole as 'merry fuck', or, perhaps, this soup need not be eaten quite as hot as you're serving it. For what it's worth, I fall on the line of: Okay, use it, but stop doing that at the first reasonable sense of doubt, because type names are nice things. Also, the fact that 'var' does not imply 'final' irks me. 
How does legacy code affect the names of components? (Depends on your definition of \*legacy\* of course) But let's assume the name doesn't give you a good understanding of what you get, then you have two options: \- stick to the \*explicit\* type \- rename the component you are calling Nobody \*forces\* you to use \`\`var\`\` in every possible situation!
Object name = p.getName(); Should Java be changed so that only the specific type of a return is considered valid? There are a lot of ways Java features can be abused. var absolutely can be a friend, or could be an enemy. There are a lot of ways var could save a developer from having to write out a lot of boilerplate code as /u/MentallyWill demonstrates also as this blog covers: https://benjiweber.co.uk/blog/2018/03/03/representing-the-impractical-and-impossible-with-jdk-10-var/. If you think var is stupid and terrible then tell your team to never use it, but believing that because your team doesn‚Äôt have the discipline to properly use the var feature means no other teams do is myopic. 
Yes u/dpash is right, typo from copy pasting on mobile. Edited. 
Yes good catch. Copy paste error from mobile. Edited. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
the IDE is fine. it already knows what the type is. this issue is a bug in the IDE, csharp var and visual studio intellisense work fine.
Assume, there's a map, like `Map&lt;Guid, User&gt;` How do `users` and `getAllUsers()` names tell me about the type, and about that I have to use `Guid` as a key to obtain a `User` instance from the map ?
csharp has both `var` and `dynamic`, `var` is static `dynamic` is runtime.
It's not a myth to the millions of C# developers who have worked that wait for the last 11 years.
I did read the article. I just think it‚Äôs amusing in terms of direction that‚Äôs all.
 someObject.getSomeComplexObjectStructure() .getSomeOtherComplexObject() .getAnotherObject() .execute(); vs. var cplxObj = someObject.getSomeComplexObjectStructure(); var otherObj = cplxObj.getSomeOtherComplexObject(); var anotherObj = otherObj.getAnotherObject(); anotherObj.execute(); Is there really any difference in readability here?
I prefer explicit type declaration, because in this case I know the type of a variable I working with.
Because the amount of things you have to do or learn is soo small, that Kotlin will be your best bet regarding effort/usefulness. If you have a team with at least mediocre developers, switching to Kotlin is a matter of a week or two. And you immediately benefit from Kotlin's major improvements, because it is everything that a regular Java developer tries to fix for years with things like lombok, guava and tons of design patterns. You get tooling support nearly on the level of Java and the most important thing: Kotlin was built to remove Java's bad parts, enable many good parts from functional programming. Compared to scala you lack features that kind of prove that they tend to worsen a codebase and many others that are great. But Tooling is not that great. Java interop is not that great. Binary compatibility is... whatever. And switching to Scala is a completely different story at all because the investment is so much higher. You need some very good developers that are able to truly benefit from Scala - put all that in a box and most businesses make a better decision with switching to Kotlin. The thing is: All those arguments are written dozens of thousands of times in the internet.... most likely people like you that try to imagine why switching to Kotlin may theoretically not be worth it... won't ever understand it, because you can only see it when you did it. I recommend to try it out - and I mean try it REALLY, not just two hours and than rage quit.
Plus I prefer to limit the declared type to List rather than ArrayList. var was never on the top of my list for language features, its purely cosmetic-- give me tuples or language supported Optionals.
Did you chose Kotlin for greenfields projects because you didn't want to use Scala, allthough you had to do it in the other project(s)? If yes, why that? Just curious :)
It has a proper specification.
It *is* the reason for it, it‚Äôs just the case that many Hava developers don‚Äôt realize that to be the case. Cargo cult is a common problem in our industry.
Java devs would have just used the List interface for the local variable's type anyways. (Thus negating the "I gotta see the type name" argument.)
Correct. 
If you've worked in pretty much any other modern language - most of which don't require an explicit LHS - you'll realise how little an issue it really is in the real world.
I still don't understand why they didn't add 'val' as well.
What the fuck type. Is that fucking var? Map? List? Set? Panda? 
No. The type is as important as the name. 
Seriously... You don't understand efficiency. 
It does not. This is a bug. `var` works perfectly in JetBrains IDEs for both C# and Kotlin, and you should rarely need the type next to your variable name to find your code readable. Variable names are infinitely more useful information than types are. 
What the fuck is wrong with the former... Its not a. Fucking problem! Consistency is. King for readability. 
Not my point. Edit is what I assumed. 
I want to always look at the lhs and see a type and a sensible name. After that the rhs js implementation detail I should only have to look at if there is a bug. 
I‚Äôm sorry, why is Object person = new Object()... better? Also why must you respond in such extreme hostility? It‚Äôs unnecessary.
I work with Java, C#, Python, JavaScript and other languages. On my opinion, "var" thing is an unnecessary language part for strictly typed languages, like Java, C#. In dynamic languages, like JavaScript and Python, it takes time to understand the return type and act accordingly when you are working with new code base. In contrary, explicit type declaration in Java/C# helps to understand the codebase better.
Yeah I hear what you're saying about consistency, that is important. IMO something like var, if used, should be done judiciously. For example I think the following is another excellent use of var, List&lt;Thing&gt; foo = bar.getThings(); for (var thing : foo) { //.... } the judicious part, I would say is that this use of var is fine when these lines are next to each other, but if these lines were separated to the point where I might have to scroll back up to see what type var was, then it shouldn't be used. 
Fuck no. Use a properly defined class like a grown-up. 
Also, fair point on the hostility, will edit. 
I assume that getName() returns a String because that is the convention. Seriously, if you make getName() return any other data type than a String, then there are much bigger problems with your codebase.
What are you trying to do; write a log for every method call? I would suggest taking a step back; what problem are you trying to solve with that amount of logging?
Both are awful. For the entirely obvious reason that both name AND type are important. 
Fair enough, but I'm trying to think about how often I actually care about the type at declaration time - it's only really necessary when you use it later on at which point specifying the type is redundant. If I really need to know the type then my IDE will tell me with one hotkey/hover.
The main problem with kotlin is that it still feels like a prototype or beta implementation. The kotlin team has made lots of questionable design decisions, but as kotlin is already stable, it's too late to change the language now. Stuff that will be added to Java soon or stuff that has already be added like interface default implementations, streams, modules or value types becomes increasily difficult to implement in kotlin while staying kompatible to both the jvm and old kotlin versions. 
&gt;Most of the time they are NOT REDUNDANT why is this myth so damn pervasive? Customer customer = getCustomer(); Thanks Java, I was wondering what type `customer` can be! &gt; And what the are you saving? Reading time. Compare this staggered mess: String name = Customer customer = Collection&lt;User&gt; users = Map&lt;UserId, Role&gt; rolesByUser = vs this even layout: var name = var customer = var users = var rolesByUser = &gt;Name your variable sensibly and the rhs can be obscured because you have all you need on the lhs...unless you have hidden it behind var. I obscured the rhs and the types were still unnecessary. And here's the kicker: if I ever refactor something like introducting a class called `Name` instead of using `String`, then I won't have to modify most of the declarations of local variables holding names if I was using `var` all the time. Smaller diffs ‚áí easier merges ‚áí faster collaboration.
Dunno, works for Haskell just fine.
There are valid use cases for anonymous inner types. Here is an example... Implementing an anonymous inner type: https://github.com/wkorando/local-setup-example/blob/master/commodities-service/src/main/java/com/bk/commodities/repo/CommoditiesCustomRepo.java The interface being implemented: https://github.com/wkorando/local-setup-example/blob/master/commodities-service/src/main/java/com/bk/commodities/SqlRunner.java The code ‚Äúusing‚Äù the anonymous inner type: https://github.com/wkorando/local-setup-example/blob/master/commodities-service/src/main/java/com/bk/commodities/SqlRunnerProc.java What the above is doing is ensuring that a JDBC connections are propely handled without developers having to write a bunch of boilerplate. While as implemented my code wouldn‚Äôt be a candidate for the car type. Writing out var commodities = sqlRunnerProc.executeSqlRunnerLookup(new SqlRunner&lt;List&lt;Commodity&gt;&gt;... Would be a little easier (and most or less just as readable) as: List&lt;Commodity&gt; commodities = sqlRunnerProc.executeSqlRunnerLookup(new SqlRunner&lt;List&lt;Commodity&gt;&gt;... If you don‚Äôt want to use var don‚Äôt. But just because from your perspective you think it doesn‚Äôt have much use and it can be abused doesn‚Äôt mean it‚Äôs going to be the case for everyone.
&gt;It's so you can change return types without changing every caller. Which, incidentally, will also work with `var`.
The goal of fibers is to allow you to write arbitrary concurrency mechanisms in an imperative programming style that fits nicely with the rest of the language, runtime and standard tooling (so loops, exceptions, stacktraces, debugging and profiling) -- basically how you'd program if threads had negligible footprint and task-switching overhead (i.e. creating and blocking a thread would be practically free). Whatever extra mechanisms are added to "push" streams can then be added to "pull" blocking channels, getting the best of both worlds. On top of that, various control constructs that are more structured than futures can be added in a natural way for stuff like error handling/propagation, cancellation and maybe more.
&gt; Can you post them here for our amusement? ;) Just read this thread. L
Not for every method, but for the methods that are most important to our process. This way, a QA person can track the beginning of the process until the end and see the data all the way through
Consider this case as an example: SpecificBusinessDomainObject specificBusinessDomainObject = object.getSpecificBusinessDomainObject() Vs var specificBusinessDomainObject = object.getSpecificBusinessDomainObject() 
What special tooling are you talking about? Even standard stuff like the Javadoc application is very stable and well supported on Java while Dokka (the tool to generate Kotlin documentation) is a joke in comparison (it's an almost unmaintained open source project and when you report a bug the developers are demanding test cases for extremely basic functionality that should have unit tests already). 
Make something
&gt;If I am using a variable I need to know its type. Thousands of programmers in dynamically-typed languages disagree. Also, Haskell programmers, and to a lesser degree programmers in most statically-typed programming languages that aren't Java, C or Cobol. Also, Java IDE's are probably the most advanced. Just follow the intuition, type a period and pick a suggestion, remove all the red squigglies and it will work fine. What other programming languages do you use?
I do groovy as well (70% of my coding time) and we put into our coding style that `def` is forbidden and that we have to strongly type everything. There's no real benefit in using def; but there's often no intelliJ autocomplete and trivial runtime errors because one forgot to call a simple method. 
If your native language is read left to right, left is the first place you look unless you train yourself otherwise. 
You're on the right track to use AOP for this. I suggest using an [SLF4J extended logger](https://www.slf4j.org/extensions.html#extended_logger) to track method entry, parameters, exits, and return values.
If you'd read it, you would have understood that types aren't going anywhere.
So I can never use [this class](https://hg.mozilla.org/projects/jss/file/tip/org/mozilla/jss/pkix/primitive/Name.java) as a return type? It has to be a String?
lets not forget var items = getItems(); for (var item : items) { print(item); } This code will compile if Item changes packages, is renamed, or if the method decides to return a List, or a Set, or a Collection, or an Iterable. What did I lose by not saying List&lt;? extends SuperItem&gt; items = getItems(); for (SuperItem item : items) { print(item); }
This is helpful but are you suggesting to use them together? Or to prefer to use SLF4J?
I'm not sure about this - I guess I don't really see the point. People talk about your code not aligning neatly in the editor if you have the type info. That seems like a trivial gain. As it only works for local scopes I just don't see a lot of the other advantages. (Yet! - I'm happy to be wrong here!) It's comments like this that give me concern... &gt;&gt; Java has introduced the var keyword &gt;Just a small point, but it's not a keyword, but a reserved type name. It's a subtle difference, but it means you can write: ...because they go to show there are some subtleties that are getting missed, even when we're *actually talking* about "var"... Once we're not focused on it, are these subtleties going to need their own chapter in the next revision of Effective Java...? And going full circle, will we start seeing Hungarian notation creeping in to give some type hinting to the reader...? var strName = "Bob"; God, I hope not. Finally - which of the following is easier to read is pretty subjective... Map&lt;UserId, Role&gt; rolesByUser = new HashMap&lt;&gt;(); var rolesByUser = new HashMap&lt;UserId, Role&gt;(); ...and now we have two ways of defining it - I'm not sure that's going to help make the language any more 'simple to read'. 
I use java for a reason. We can have preferences. 
I don't see a problem with repeating the type to keep variable declarations consistent and containing full information. 
I don't use haskell for a reason. 
Together. You need some sort of AOP solution to wrap method calls which SLF4J doesn't provide.
Serious question, do you work for JetBrains or are you financially rewarded for posting a kotlin question?
Maybe it's just me but the first example doesn't bother me at all. 
I think that's a clear overstatement. Name could be defined as a class or interface (perhaps to capture first name, middle name, last name, prefix / suffix etc). Potentially even an Enum if a name in that particular context was one of a pre-defined set of options. Like the entirety of this discussion, it really comes down to what makes the most sense in this particular situation. If you really care about knowing the type of an assignment (and don't want to rely on IDE code-hints for a method's return type), then don't use `var` \- no body is forcing you to, and you could even use linting tools to enforce that particular standard.
For some people it doesn't matter, for some it's a sign of an "old" language. It's been possible with Lombok for ages, so people could just use that, but it's nicer for it to be part of core Java.
It's like complaining you have to read the whole sentence to get the info you need, because the info wasn't in the first half.
There is a reason Java I much more popular than those other languages. It is easy to read and understand. Doing things like hiding the type to save a few characters make is harder to read. Having multiple ways to declare the same thing make it harder to read. 
Nothing but inevitably you will have to work with code where someone uses bar everywhere because it is "modern". Then you have to try a read that mess and figure out what is going on.
TL;DR: @ComponentScan(lazyInit = true) for dev environment.
&gt; There is a reason Java I much more popular than those other languages. The main reason Java got popular was being the first C-like memory-safe garbage-collected statically-typed language with a free-as-beer compiler that could be used to write an applet, a GUI application, a server and a phone application. The main reasons Java remains popular are stability and backwards compatibility. Adding a new minor syntax feature doesn't change any of those things. Local variable type inference is not a hard concept, it's definitely simpler than things like references, `null`, exceptions, for-each loops, switch statements, lambdas, inheritance, or generics.
I found that Kotlin is a bit of a hassle to integrate into an existing Gradle / Java project. There are 10 how tos specifying 10 different ways how to put the right plugins, dependencies etc in your build file. And Kotlin can only compile to Java 8 class format which might be an issue if you want to use a higher version. I definitely believe in the promises of Kotlin, but there are still some rough edges that need to be polished. On the other hand, Java is working on Amber and Valhalla which closes a bit of the gap.
No one said it was a hard concept. It's a bad concept because it reduces readibility of code which is a major plus for Java.
Even in that case, it would be better to call such an interface NameDetails instead of Name. There could be an extreme edge case where the domain makes since where getName() returns a Name object, but that is exception not the rule. If you want to do something that goes against conventions, you need a real good reason to do so.
But that's precisely how your mind works. Has it not happened to you that in the middle of the sentence, you were like "yea yea I know what you mean"? It's most obvious when the other person says something completely different and you are caught by surprise. You are indeed correct, depending on the language, our mind often extrapolates the meaning based on only a part of the sentence, whether it is spoken or written. Which is precisely the problem when coding. 
Learning data structures and algorithms might not be a bad idea, especially since there are a few textbooks that cover those topics in Java.
I disagree. `var` increases readability, especially when you end up with a complex generic type that you don't care too much about, like some `Map.Entry&lt;IKnowTheKey, IAlsoKnowTheValue&gt;`. And you know what increases readability even more? Having both implicit and explicit types and choosing on case-by-case basis.
It does not matter. It does not matter that `foo` is a concrete class instead of an interface. Not one bit. If you disagree, consider all the benefits of using an interface on the LHS and then think how that doesn't apply when using `var`. I posit that you can not find any.
JavaScript is the most popular language in the world and has no types...
That last sentence I disagree with the most. Having multiple slightly different ways to do the exact same thing just causes confusion. 
JavaScript it widely hated but there is no real alternative.
I guess spring boot starting up in 5 secs for our application isn't good enough 
I would suggesting a bit different approach if you would like to stick to 1h exercise and do not receive Spring Boot generated project. So consider providing simple maven / gradle app with created few basic unit tests that fails, around some simple business scenario like for example warehouse without any database or REST. So for example adding item to warehouse, remove, etc. Candidate task will be to make those tests green using only plain Java. And during onsite interview you can ask candidate how he / she would like to extend this app for using REST API, why particular type of collection was picked to store warehouse items?, how to make removing items from warehouse thread safe?, etc.
I have never liked Scala, but I got a job as a Java programmer on a project that had a lot of it already.
FASTER FASTER FASTER
&gt; Having multiple slightly different ways to do the exact same thing just causes confusion. `String[] array;` or `String array[];`? `++i;`, `i++;`, `i+=1;`, or `i=i+1`? `p-&gt;r`, `(p)-&gt;r`, `p-&gt;{return r;}`, or `(p)-&gt;{return r;}`? `List&lt;T&gt; list = new ArrayList&lt;T&gt;();` or `List&lt;T&gt; list = new ArrayList&lt;&gt;();`? `1e6` or `1000000.0`? `030`, `24` or `0x18`? `for (T elem: arr) {` or `for (int i = 0; i&lt;arr.length; i++) { T elem = arr[i];`? `String.valueOf(x)` or `"" + x`? `while (cond())` or `for(;cond();)`? `list.sort(cmp);` or `Collections.sort(list, cmp);`? Yeah, your excuse doesn't work. 
I think I will use it for local scope variables which are not returned from function calls. That way it will be useful and not shady in the same time. 
Side-effect of this is that you might use a concrete implementation as declaration: List&lt;String&gt; list = new ArrayList&lt;&gt;; Is not the same as: var list = new ArrayList&lt;String&gt;; Because in the second example `list` is now `ArrayList`.
My tips: - Use OpenJ9 instead of Hotspot for development - If you are using Hibernate, set `hibernate.ddl-auto=none` instead of `update` - Set vmargs `-Xtune:virtualized` if you are using OpenJ9 - If you use Hotspot, set vmargs to `-XX:TieredStopAtLevel=1 -noverify` - Use IDE build instead of Gradle build
Sometimes I name something solely to work around bugs/issues/limitations of the Java Type System with regards to the inference of generics/inference - I don't personally care what the type is, but the compiler does - usually this is in a chain of filter/map type things where a lambda is passed into one side, but there's not enough information to fully resolve the intermediate types. In these (admittedly rare) cases that variable invariably gets called something based on either one of the original var names, the result type, or just something weird and ambiguous like `filtered_result` or `mapping1` - the var is used immediately on the next statement and never touched again.
Java has a final keyword already for classes, methods and fields.
That's the _only_ place you can use them. Returning them from the method would be fine tho, as the return type is still fully defined.
Urgh. I know they aren‚Äôt going anywhere but type hinting is. IntelliJ Scala added warnings when you declare ‚Äòvar a = b.c()‚Äô because it‚Äôs type is not explicit even though it‚Äôs obviously the return type of c(). PHP is undoing this. I would guess some PHP IDEs will eventually add warnings in the same fashion.
&gt; which of the following is easier to read is pretty subjective... Very much subjective, and probably doesn't matter. However, if you had: Map&lt;UserId, Role&gt; rolesByUser = userService.findUserRoles(); var rolesByUser = userService.findUserRoles(); You may start to less ceremony around the types - by using the `Map` interface we're already buying into the fact we don't particularly care that the method _may_ return a `SortedMap` under one revision, a `TreeMap` under another, or a `HashMap` - in 95% of code, that probably won't matter, and if were you doing something that requires a particular ordering - maybe your method should be handling that itself. We do elid the `&lt;UserId, Role&gt;` information from local scope, but since these are only local variables, on methods that I hope are _small_, the impact of that shouldn't be too much of an issue, esp. if you're passing `rolesByUser` over to another function that has to declare it's arguments type fully anyway.... I suspect I may change some of my thinking if/when it's actually possible to use any of this in my codebases, but I suspect that'll also come down to a) company style guidelines b) size of method c) distance from declaration and usage - thing's that already come into play during review for the naming of things. 
Lombok is a big, icky hack that may become unportable to new versions.
I guess you never chain methods.
&gt; I have to go to the getSomeComplexObjectStructure() declaration and check it. Why are you calling `getSomeComplexObjectStructure()` in the first place, if you don't know what it does, what it returns, or why you're calling it? Maybe that's a code smell in it's own right that you _shouldn't_ be returning such a complex object structure.
What if it is not my code and I am just working on it to fix something? In code I am working on there are many non-obvious method names and technical debt is a thing here.
&gt; Plus why not just use p.getName() In the naive simple case, yes - do that. However, depending on the code - `p.getName()` might actually be triggering a JSON/XML parse, maybe a network call - there _may_ be valid reasons to locally assign it once. Such as say with: var createdAt = Instant.now(); "lets inline `Instant.now()` everywhere!" --- now you have different values. Totally banal example, but that's actually bitten me in code before.
Is that an issue with arguments/return types would still limit to you `List`? If it is, retain the type constraint.
Which isn't a bad thing if the page you load for development doesn't require all of the services.
iOS apps can only be build in swift or objective c
I mean, a "Hello World" app is still an app
Unfortunately I have to work with other people's code and unfortunately the tools to shoot feet are irritatingly non specific about whose feet get shot.
That isolated case sounds reasonably forgivable. Us meer mortals occasionally write code that is not just streams into streams. While I love a good stream, often I/we have to work with business logic that requires the use of named entities... And to grok nice and quick I want to know what type they are... And if some bugger has hidden all the types behind vars I'm going to have a really bad day. 
For what it's worth, here are some style guidelines we're recommending for use of `var`: http://openjdk.java.net/projects/amber/LVTIstyle.html Following these will avoid most egregious errors that people are complaining about.
But hidden from the next developer. 
This is what convinced me that an occasional `var` might be useful: https://benjiweber.co.uk/blog/2018/03/03/representing-the-impractical-and-impossible-with-jdk-10-var/ Especially the "Impossible Types" section.
And C++ like Qt Framework does 
That's true, but I'd argue that it doesn't matter. If you're creating a specific object implementation then you probably want to use it. If you want a generic object elsewhere, then return or pass it as a generic object. But I guess there will be edge cases, so horses for courses and all that.
I've found out to be quite stable, but I guess it's true with any library. I'm more concerned with everyone under the sun using guava, which has caused me weeks of dependency hell in many projects.
`final var` makes perfect sense. The `final` keyword doesn't mean "constant" which leads to an apparent contradiction of a variable that's constant. [1] A final variable cannot be assigned after initialization. In some circumstances, it may be initialized to different values, in different method invocations, or in different invocations of the JVM. So a "final variable" may indeed vary over time, though not via assignment after its initialization. [1] The JLS does actually have a notion of a "constant variable." See JLS 4.12.4: https://docs.oracle.com/javase/specs/jls/se10/html/jls-4.html#jls-4.12.4 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
And in that area of the code - don't allow usages of `var` - either via code-review, or even static analysis. I could easily imagine writing an `error-prone` check looks for say an `@ForbigVarDeclarations` which could be applied to a method, class, or package and fail the build.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
There's been some chatter in this discussion to the effect of it **always** being important to have the type of variables declared. Here's an example from the style guidelines that shows that isn't always the case: try (InputStream is = socket.getInputStream(); InputStreamReader isr = new InputStreamReader(is, charsetName); BufferedReader buf = new BufferedReader(isr)) { return buf.readLine(); } There are a couple things going on here. The first is that this code has three separate variable declarations. This is done so that each reference is declared as a *resource* and so can be closed properly by the try-with-resources statement. Unfortunately this means that (prior to `var`) each variable has to have a type declaration, which is entirely redundant with the information on the RHS of each declaration. If I were to rewrite this code to use `var`, I'd rewrite it like this: try (var is = socket.getInputStream(); var isr = new InputStreamReader(is, charsetName); var br = new BufferedReader(isr)) { return br.readLine(); } (This is slightly, but not materially different from the recommendation in the style guidelines document.) One could argue that `is` and `isr` are lousy variable names. They're certainly not very good. But the scope of their usage is two lines; they exist only to be used on the next line, and they're not used anywhere else. So who cares about their names? Well how about `br` as a name? That's kind of lousy. It's used in the body of the try-block. But that's only one line, and the declaration of `br` is **RIGHT THERE** one line away from it. So do we really need a better name than `br`? Now suppose the try-block body is larger and the BufferedReader instance is used in a bunch of places. If so, that's an argument for giving the variable a better name like `bufRdr` or `bufferedReader`. If you have a variable named `bufferedReader` 20 lines farther down in the try-block, it's pretty clear what it is. Having it be declared using `var` instead of an explicit type hasn't really lost anything, and indeed it's cleaned up some redundant clutter.
Try building a project. Maybe a web app, an Android app, etc. 
Por que no los dos?
Can someone recommend a good source for learning spring-boot? It seems to be a bit opinionated and I keep walking into these strange situations.... last time I tried @Autowire shat itself because it didn't like my variable name (when I assumed that only the type mattered?)
It's possible (say with [Gluon](https://gluonhq.com/products/mobile/)). Now whether it's a good idea will depend on you...
There is at least one framework that allows you to do just that according to the company's web site r/https://gluonhq.com/products/mobile/javafxports/
If you are expanding your Java knowledge then JSP leads into some things that are good to learn. Such as SQL and databases. Also HTML, CSS and Javascript.
Probably late to the party, but I think you should only use var when avoiding writing the type twice. ````var someType = new SomeType();```` instead of ````SomeType someType = new SomeType();```` 
No.
The impress server is down. Why can‚Äôt I validate skills without signing in?
You restart dev a lot more than prod. If you have a multi server deployment, start up time for prod becomes less of an issue. Sure, faster is better, but I'm not going to put the same effort in as I will for dev. And faster dev speeds are likely to improve prod anyway.
Has anyone heard of React-Native? It allows you to build easy UIs with React, but run it on ios in a native wrapper, as well as android in a native wrapper, web app, desktop and more. This is probably the faster/easier way to write most types of apps today. I wouldnt use it for advanced needs like hard core music apps or games, but it can certainly be used for responsive UI apps that most apps are today. Here is a list of some apps many of us use that are written in react-native that run on ios, android and web: [https://insights.daffodilsw.com/blog/10-amazing-apps-that-are-built-using-react-native](https://insights.daffodilsw.com/blog/10-amazing-apps-that-are-built-using-react-native)
&gt; Would a different keyword have helped avoiding this confusion perhaps? Could have just gone with `auto`.
I was trying to make the counter point that If you look at the history of java, they spend a lot of time ensuring backwards compatibility, to the point of some obscure design decisions, so it's unlikely to break. Is just as likely to break as any other feature.
There is a difference here. AFAIK, Lombok uses undocumented features, i.e. hacks, it's not just a regular annotation processor. If Lombok was using official, documented or specified features, then you could surely count on backwards compatibility, because as you say, Java has been very very good at this.
If it's code that I didn't write myself and had never seen before, using var, I would now have to check the type to understand what is being used because a Map is not intuitive here. In many cases, this won't be intuitive. Which means you'll need your IDE to tell you the type. or you need to check the method's return type
JetBrains have a fair few ‚Äúthought leaders‚Äù in their pocket, not sure they would stoop to guerilla marketing.
Consistency is king. Always show type. 
I was unaware it was using undocumented features, so I stand corrected.
This. I'm working with C# at the moment and C# had `var` for years. It is absolutely an improvement in my opinion, no lost readability.
C# developer here, had `var` for years. Trust me, you are going to be fine. 
I see a lot of discussion about the importance of knowing the type of the LHS but I'd like to point out that conversely you can have a lot of cases when you don't even *need* to know it. var foo = SomeAPI.SomeMethod(); var bar = SomeAPI.SomeOtherMethod(foo); SomeAPI.SaveToFile(bar); In this example the whole API can change what types they use and you don't have to touch a single line of your code, which is pretty cool IMHO.
Well , that is not exactly true. Apart from Frameworks others already mentioned to avoid swift and objective-c, there is a ton of other possibilities on how you can make a iOS-App. You can also build a plain Webapp (using Java-Backend-Server and HTML or JavaScript - Based frontend) , that runs on iOS and Android as well. Then you would wrap this in a iOS-App - Wrapper, with e.g. Apache Cordova, but there are others (just google "hybrid iOS-App" or "iOS app wrapper javascript") In addition to what you can do with a WebApp running in Safari Browser with an App-Wrapper, now you often have additional access to the iPhone resources like GPS, Camera etc. 
That is the only scenario it is forgivable to use var. 
The point I'm trying to make is don't blindly accept what Spring Boot does for you out if the box, configure it to your needs.
The best practice with Spring Boot is to never use Spring Boot.
Why is this all linked with Facebook ? 
Look at j2obc. Many projects use it such as Google apps. You will still need to write objc and have a lot of knowledge of iOS but can share some code.
You should put a readme under each folder explaining the pattern and structure. Otherwise it feels like just a dump of classes with some sort of rhyme or reason that you‚Äôd only get if you already knew the pattern and at that point why am I even looking at this project?
Just a little bit of nitpicking that here you don't have to check for br != null in the finally block, as it can never happen: public String readFile(String path) throws IOException { BufferedReader br = new BufferedReader(new FileReader(path)); try { return br.readLine(); } finally { if(br != null) br.close(); } } If the allocation of the Reader fails, then the finally block is not executed, as the allocation is not in the try block. One could be even more careful, if explicitly handles the FileReader closing, as the BufferedReader creation itself can throw an exception/error, while the FileReader remains unclosed. public String readFile(String path) throws IOException { FileReader fr = new FileReader(path); try { BufferedReader br = new BufferedReader(fr); try { return br.readLine(); } finally { br.close(); } } finally { fr.close(); } } This itself is a very edge case, but interesting to consider nonetheless. In this case close() is called twice on the FileReader instance (by BufferedReader as well), but thankfully the documentation states that calling close() for a second time has no effect.
Small nitpick, isn't this example a compilation error since `IOException` is a checked exception? public void parseFile(String filePath) { try { //code that forms an exception } catch(IOException ex) { LOGGER.error("IOException: ", ex); throw ex; } } Usually when you throw exceptions in finally blocks you wrap it in an unchecked exception, e.g. `throw new RuntimeException(ex);`.
Hello Sir, well, I fully understand your intention. You are completly right. Thanks fore the hint. I will do.
Java is already unreadable without an IDE.
False.
NB. I'm not affiliated with jOOQ but i think it would be a dream job for any Java developer. 
Nice catch! I'll update the article. 
üòÜ
Try-throw-catch and goto are fundamentally different. With try-throw-catch you cannot go backwards in the logic flow, cannot create infinit loop like goto. 
Afraid this already has been done before: https://github.com/iluwatar/java-design-patterns
A web app wouldn‚Äôt be considered an iOS app, it would considered a web app. 
Which is another reason why it's bad to simulate goto statements with try-throw-catch. 
Many notes for the author: 1. 'use as goto': If you want that kind of thing, this is MUCH simpler: label: { method1(); if (condition) break label; method2(); } The label is mandatory, but it works fine. This is only bad because 'goto is bad' if you consider _ALL_ break/continue statements bad, and that's a kind of fringe extremist style position that such a general blog post should not espouse. So, yes, it's bad to use exceptions for this because the above is simpler and more readable, but the blogpost is trying to paint this as bad because goto is bad, and that's completely erroneous. The 'goto considered harmful' main gist is that you shouldn't loop with them (you can't loop with this, therefore, not relevant), and that it results in spaghetti code (but you can't jump anywhere except out of lexical scope with this, so, not relevant). 2. Catching throwable/exception is bad. No.. it's good! At least, at the right times. Java software starts somewhere; an entry point. If you're writing a command line app, your entry point is usually `public static void main(String[] args)`. But if you're writing web stuff, you have a tonne of entry points: EVERY `doGet()` (servlet API) / EVERY method annotated with `@GET` (jersey etc) is an entry point.. and they should ALL just 'throw Exception'. They should do this, because the framework that starts your app/servlet/webhandler/whatever is definitely far better positioned to deal with unexpected exceptions than you can ever hope to be. That web framework can log the exception with LOTS of detail about the precise HTTP request that caused it, potentially ping via telegram or whatnot the platform owner if you feel like adding that kind of thing, and then render a nice error page to the user, possibly with a form submit to let the user give more detail about what they were doing. By putting it that way I hope it's clear that an 'unhandleable' exception (by which I mean: Your code has no feasible strategy to deal with the problem / the effort to deal with it is not worth it on a case by case basis) should DEFINITELY bubble allll the way up to the invoking framework. And if you want to do that, either you're rewrapping all your exceptions in ServletException, which is just a pointless waste of lines of codes, or.. you throw Exception. Which leads to the obvious flip side of that: If you ARE writing an invoker framework and YOU are the one calling the entrypoint.. YOU catch Exception. 3. It's exception populism! You've highlighted a bunch of bad practices, but you haven't covered the solution. Pointing at bad things is all well and good but it's not very useful, and hard to put in context, if you don't also show some workable alternatives. I'll make a short list for your consideration: * You MUST catch but have no idea what to do / are too lazy right now? Try this: `throw new RuntimeException("Unhandled checked exception", e);` ‚Äì and, yes, you should update your IDE's templates to do this by default. * In general when writing APIs, be generous with adding 'throws' clauses to interface methods. * When writing APIs, include the concept of fallback. When using APIs, check if they have fallback mechanisms, and use them. For example, `map.get("key").toLowerCase()` may throw a nullpointerexception. But, `map.getOrDefault("key", "").toLowerCase()` won't. So, use that. Usually you're looking for a method where you pass in a lambda or default value, or where you configure before using the object what to do in exceptional cases. 4. 'avoid exceptional conditions'.. not sure that's a good idea. In the vein of the advice in this column, you'd prefer: if (map.containsKey(key)) map.get(key).doThingie(); but this is no good. You're wasting time (2 lookups where one would have been fine), and if this is a concurrent map, you've just introduced a REALLY hard to find (and therefore really pricey) bug; no amount of ConcurrentHashMap magic is going to guarantee you that this will never throw. The act of 'get the value associated with this key and act on it, but do nothing if it isn't in the map' should be 1 atomic operation, at least for the caller. Sometimes most practical way to make calls as atomic as they can be, is to rely on exceptions. 
There's a subtle error in the try-with-resources example. It's detailed in the specification somewhere but I always have such a hard time finding it I'm not going to look now but the gist is only named objects are automatically cleaned up; if construction of an anonymous object fails it will leak. This means try(BufferedReader br = new BufferedReader(new FileReader(path))) { return br.readLine(); } should be try(FileReader fr = new FileReader(path); BufferedReader br = new BufferedReader(fr)) { return br.readLine(); } At least in Java 7 and 8.
How does this interact with incremental compilation? IIRC in Java, the qualified name of the static receiver type is compiled into all callsites, so such a file would need to be recompiled.
The code example was taken from the official Java docs so I didn't pay attention to that detail asumming everything is fine. Thanks for the heads up, I'll update the article!
Well, the error is also super obscure and probably not really likely to manifest. It was pure coincidence I stumbled upon it once.
I enjoyed this article and I didn‚Äôt realize about the return/throw in a finally block would drop the initial exception. So thanks My only critique would be under best practices to add/mention, if you are going to perform the same behavior anyways innmutliple catch blocks, it‚Äôs fine to get rid of the more specific exceptions and use this more generic. catch(FileNotFoundException e){ LOG.error(e.getMessage(), e); throw new MyRuntimeException(e.getMessage()); }catch(IOException e){ LOG.error(e.getMessage(), e); throw new MyRuntimeException(e.getMessage()); } The first catch block should be squashed into the second one as it is just noise. Obviously this doesn‚Äôt apply if you are (or should be) doing something different between the separate catch blocks. 
I enjoyed this article and I didn‚Äôt realize about the return/throw in a finally block would drop the initial exception. So thanks for that! My only critique would be under best practices to add/mention, if you are going to perform the same behavior anyways innmutliple catch blocks, it‚Äôs fine to get rid of the more specific exceptions and use this more generic. catch(FileNotFoundException e){ LOG.error(e.getMessage(), e); throw new MyRuntimeException(e.getMessage()); }catch(IOException e){ LOG.error(e.getMessage(), e); throw new MyRuntimeException(e.getMessage()); } The first catch block should be squashed into the second one as it is just noise. Obviously this doesn‚Äôt apply if you are (or should be) doing something different between the separate catch blocks. 
But I thought closing a `BufferedReader` will close its source - the `FileReader`?
MBP!
At my company we switched to JUnit5 some time ago. It was pretty straightforward and there have been some improvements. The [blog@codefx](https://blog.codefx.org/libraries/junit-5-setup/) series recently helped me understanding some of the benefits of JUnit5 over JUnit4
Hello! Would you mind specifying when the server was down and what appeared to your screen? Thank you!
Thanks for the hint. I will check this out. Surely I can learn something.
Yes and no. Most classes from the JRE probably follow that contract. But there is no way to be sure that this is the case. Even more so with implementations from other libraries.
netbeans has been my favorite IDE and the 9.0 release is solid. but the obsession with licenses that Apache insists on is toxic
1130pm America/Chicago. The message said the impress server was down and the quiz could be loaded and to contact support. 
The 'correct' (imho) way to handle this is to create a new exception wrapping the original IOException that captures the necessary context information so that it's available further up the stack.
Tbh i was expecting this answer because it's something I tried. The big downside of this approach is the number of custom exceptions you end up with because this scenario is not that unkomon throughout the code. I also tried this approach with a twist.. Limit the exceptions by accepting varargs map.entry of things i would like to log..still bad imo
... but my original post was wrong, I accidentally reversed the cases. The problem is when initialising the _outer_ object fails. I will correct it.
TLDR: In a recent Twitter poll run by the Azul CTO, most respondents say that they are upgrading to Java 9 or 10 "in 1-2 years". Given that the newest JDK builds will only have 6 months of support, Azul recommends you buy their Zulu JDK builds to get longer-term support.
What I like about this series of articles is the detailed examples of places to use the patterns. That's what I find missing in most pattern tutorials.
Coming to America from Zamunda?
Care to qualify? Licensing is a boring but very important part of software and I'm not sure where obsession and toxic come from.
It looks like in your [submission](https://www.reddit.com/r/java/comments/97vvzf/java_springboot_and_thymeleaf_is_it_possible_to/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
oh, definitely important to comply with licenses and to choose one that's appropriate for what you're trying to accomplish. but netbeans had already met that criteria when it was donated the apache rules go far beyond that, eg banning hosting GPL code. much of the the work that was done on netbeans in the first 18 months that it was under the apache umbrella was license-related. and while 9.0 works for writing java, they've (at least temporarily) dropped all the other supported platforms, eg javascript and C, due to not liking the licenses netbeans is backed by oracle, and that's enabled it to survive these rules. but many projects that join apache never recover from this added bureaucracy. and it's possible that the momentum that netbeans has lost in the last two years will never be recovered in 2013, netbeans had pretty decent javascript support. oracle didn't like the license for the javascript engine and spent a year switching to nashorn, and regressed somewhat. and now apache has dropped javascript entirely due to the licenses these aren't legal or pragmatic arguments - they're political
And now Nashorn is deprecated in Java 11 :/
It's not so much the explicit time or size of jar files, it's what it represents. A load of unnecessary guff.
The pattern itself can't be "thread-safe" or not. It depends how it's used. Most code is not thread-safe by default. Thread-safety can be trivially implemented through locks and synchronization. Or, if you want non-blocking execution, then there's a significant price to pay in thread-local performance and overall solution complexity. Which means you don't just slap thread-safety on everything by default, especially if you don't use it. Most apps will have a central "controller" thread that controls the linear, sequential logic of the app, which doesn't need to be thread-safe. This central thread can then offload tasks to other threads, things like heavy computation, GUI rendering, animations, etc. And so you can wall off the parts to be thread-safe without having to make everything thread-safe. Multiple threads only make sense when something is a bottleneck, or represents an even remote possible "hot spot" in your app. If it's light, and take 1% of your CPU time, then there's no point to spreading it over threads.
If the map might be changed between the contains and the get, you can just get and check if the result is null. You still won't recognize that edge case where some idiot mapped a key to null, but who needs that anyway? 
Right, the preferred approach to using try-with-resources is to split up each resource into its own resource variable instead of using the nesting approach that's become typical over the years. Another example is like the following: try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(path)) { // use ois } We actually received a bug report on this. The submitter observed that the application was leaking file descriptors, and complained that try-with-resources wasn't closing its resources properly. What was happening was that the FileInputStream was opened successfully, consuming a file descriptor. However, the file contained an invalid serial stream, so the ObjectInputStream constructor threw an exception. Since the FileInputStream was never assigned to a resource variable, it was never closed. And since the OIS constructor never returned normally, its resource variable was never assigned, so try-with-resources wouldn't close it either. The result was a leaked file descriptor. As in your example, the solution was to rewrite the code to use separate resource variables: try (FileInputStream fis = new FileInputStream(path); ObjectInputStream ois = new ObjectInputStream(fis) { // use ois } Anyway, the point is that the outer object can throw an exception for a variety of reasons, not just running out of memory. Other reasons might include various Reader classes (such as InputStreamReader) throwing exceptions if the charset name is invalid.
&gt;1130pm America/Chicago. The message said the impress server was down and the quiz could be loaded and to contact support. Thank you [AnEmortalKid](https://www.reddit.com/user/AnEmortalKid)! I will notify the relevant team about this issue. 
Why isn't this thread removed?
&gt; as we already have `final var` Not a satisfying reason.
Ideology? Does Apache make money from Capitalist mega corps?
It's used by this web api testing library [Karate](https://github.com/intuit/karate/).
Well, take it up with Brian Goetz, because he's the person to makes the decisions.
I think that this design pattern is useful for when your state is simple but your actions are complex since you'd need to create a new implementation of State for every type of possible State. Rather, what I've found is that State tends to be complex but actions tend to be simpler. For that, the Model-View-Update or the Elm Architecture, used by Redux can be more useful. A Java style one might look like: enum ActionType {ADD, SUB, ADD_CHILD, SUB_CHILD, OTHER} class Action { public ActionType type; public int argument; } interface State&lt;E extends State&gt; { E update(Action action); } class ParentState implements State&lt;ParentState&gt; { final int i; final ChildState child; public ParentState(int i, ChildState child) { this.i = i; this.child = child; } @Override public ParentState update(Action action) { switch (action.type) { case ADD: return new ParentState(this.i + action.argument, this.child); case SUB: return new ParentState(this.i - action.argument, this.child); } return new ParentState(this.i, this.child.update(action)); } static class ChildState implements State&lt;ChildState&gt;{ private final int i; public ChildState(int i) { this.i = i; } @Override public ChildState update(Action action) { switch(action.type) { case ADD_CHILD: return new ChildState(this.i + action.argument); case SUB_CHILD: return new ChildState(this.i - action.argument); } return this; } } } Essentially, you use objects which represent actions and use an update function which takes the prior state and the action to produce the new state. It also makes it easy to break up the state and dispatching work to other updaters.
&gt;r/https://i.imgur.com/Gy3XCJ4.jpg Thx for the help, I've informed the team and will also share your screenshot. I'll definitely get back to you once I get an answer!
You could do one better. Instead of an enum `ActionType` and a class `Action`, combine them: interface State { E update(Action action); } enum Action implements State { ... After all, an enum is really just a class with pre-defined singleton instantiations.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thanks for the link. I'll read it up. Goes to the bag of bookmarks for now tho. I've procrastinated too long now. 
Or just don't use exceptions, period. (at least not when you can avoid it) ```java Either&lt;User, Error&gt; findUser (final String uuid); ``` is clear, forces callers to think about and handle both cases (or just pass the Either higher up), supports map, flatmap etc etc etc.
Have upvote
For a more specific `RuntimeException` 1.8 added `java.io.UncheckedIOException` which requires an `IOException` as the cause.
http://tutorials.jenkov.com/java/inheritance.html Literally the first link on Google..
Since this has already been answered....why are you doing this? I cannot for think of a use case. Then again my use cases for nested classes in general are......flimsy.
I agree. However, this example was for the specific case where you cant use *try-with-resources* e.g. in Java 6 or earlier.
Very good article straight to the point. Def looking into how concurrenthashmap works to learn some lock stripping stuff.
That moment when a comment is better then the article. 
Extending a nested class
Just to brush up on my concepts. Even I feel there might be no use for this.
Hah. My kind of engineer!
I never told you I was one :)
It's nice being one I suppose. ;)
Well... You are right that a programming language should be chosen according to the task. I just like to program in java and you may as well ask why FFT libs for java exist at all.
It looks like in your [submission](https://www.reddit.com/r/java/comments/981c46/help_me_debug_this_code_stuck_on_it_for_quite/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Because maybe you don't need the extra 25% performance and don't want to deal with the native bindings, that can be a pain in the ass, especially for example on Android when you need to support multiple architectures. That means either you increase the size of your APK with implementations for all supported architectures, or you generate different APKs. Doable, but it increases the complexity of your build- and distribution process by quite a bit. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
When the main application is written in Java we found we could process data faster by sticking with a pure Java approach. We were very surprised that calling FFTW from Java was actually slower for our use cases. We haven't benchmarked this since JDK5 times though so the situation may have changed. Shout out to the excellent work done here: https://sites.google.com/site/piotrwendykier/software/jtransforms 
Programmers are people, people learn various things through various techniques, including video. It's been the case since long before YouTube existed.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Nice, i'll be looking into this and do some benchmarks
There is also this [one](http://thehiflyer.github.io/Fettle/) (don't like the name) but it works alright.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](http://thehiflyer.github.io/Fettle/) - Previous text "one" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
Must admit I only skimmed through it - does it all come crashing down when the website(s) being scraped does updates?
How about changing the constructor to package private, so you can move the subclasses to their own respective class files, and users don't have to reference the subclasses with OuterClass.InnerClass (without imports of course)? An example for this is the java.lang.ref.Reference and their subclasses.
Are you this site's owner? It's time for https! https://doesmysiteneedhttps.com/
It's there! [https://4comprehension.com/effectively-sealed-classes-in-java/](https://4comprehension.com/effectively-sealed-classes-in-java/) I need to double check redirection rules.
Actually, your suggestion turned out super helpful - I updated my settings and https should be the default option from now. Thanks!
25%? For something like an FFT the difference will be *much* larger than that. But Java isn‚Äôt for digital signal processing, and is great at other things that would be tedious in C.
Depends on the use case. Using a native library may actually be slower in some situations due to the overhead of the JNI and dynamically loading the library. See https://sites.google.com/site/piotrwendykier/software/jtransforms
If you call into vectorised C code with fastmath optimisations, and avoid crossing the boundary too much, you'll more than break even on JNI's penalties. Floating point arithmetic is slow in Java, by specification. 
Yes, the primary point of sealed classes is so that I can write when(maybeString) { is Some -&gt; println(maybeString.value) is None -&gt; println("No string") } and the compiler knows that I have covered every type and don't need an else - in short, getting fully compile time type safety. Without this kind of pattern matching &amp; exhaustiveness, I don't think there is much benefit to be had from trying to reproduce the concept of a sealed class.
I'm really looking forward to it!
I've written a ton of web scraping code, and the answer is typically yes. Though a fair number of updates to web sites are mostly CSS and javascript chagnes to update the appearance while keeping the underlying HTML mostly unchanged.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The fact that it's leaving JRE/JDK is a massive blow. The reason awt and swing cherished was because they were built in, everyone had them. JavaFX started going in the same direction and becoming a replacement but now it's a step backwards. It suddenly isn't part of the standard distribution anymore and it's not worth developing for it because everyone will have it. If you have to bundle JavaFX with your application, you might as well bundle something else if you're gonna go down that route. Maybe just do Electron instead...
Eh, it's a mixed bag. For starters I'm not really sure what you're driving at when you say "If you have to bundle JavaFX with your application" as if it's some huge burden... Do you not *already* include a bunch of third party dependencies with just about everything? Do you not use something like Maven to manage these dependencies? Most people will just have to add one more entry to their POM, which is hardly going to drive them away. In fact aligning it with the way the rest of your dependencies are managed - instead of having to cross your fingers that users actually have it installed (not all JREs come with it OOTB) is a huge step forwards, not back. The current system absolutely sucks. Until recently I'd have said that another bonus is potentially having a faster release cycle, but now Java is on a 6 month release train that's probably a wash. And you say "might as well bundle something else" as if being installed by default was the only thing it had going for it ... but it's still the best option for desktop Java applications imo.
Steady on! Including some extra dependencies in your distribution is a far cry from switching UI platform, runtime, language and all dependencies. I don't see the problem in bundling it in your dist. The only downside is dist size, which will affect some deployment scenarios but not most.
*article not as doom/gloom as first part of title suggests.
I had the same gut reaction. I spent months doing what I thought could be considered as ‚Äúmastering JavaFX.‚Äù I thought that because of all of its amazing features, especially in comparison to Swing, Awt, etc, that it would be along for the long haul and I‚Äôd be safe from having to worry about anything. I still don‚Äôt completely understand the process in dropping JavaFX from the JDK but as long as the open source community keeps with it, I‚Äôll be happy
You wouldn't rely on the (likely outdated) JDK that a user has lying around for serious applications anyway, bundling it with your app is pretty much required. The real problem, to cite the article: &gt;The consensus appears to be that to have JavaFX fully in the open source community and progressing at it‚Äôs own pace is probably a good thing, but **it‚Äôs all going to depend on a bunch of folks who are far better programmers than me putting their spare time and effort into a library which is free**. In Java 11 you'll be able to add a [simple Maven dependency](http://docs.gluonhq.com/javafx11/#maven) and be done, so that's not the issue: &lt;dependency&gt; &lt;groupId&gt;org.openjfx&lt;/groupId&gt; &lt;artifactId&gt;javafx-controls&lt;/artifactId&gt; &lt;version&gt;11-ea+19&lt;/version&gt; &lt;/dependency&gt; As for Electron: I'm not that up do date with 3D web technology, can it do the same data visualization as shown in the pictures in the article? They look pretty advanced.
WebGL goes all the way too.
Don't forget to turn on HSTS. :)
Well that is something I didn‚Äôt think about and it does somewhat make me feel better about the whole situation. Also kinda makes you think about why Swing is still supported. It is the core GUI source (next to AWT) but it‚Äôs so goddamn mediocre compared to modern APIs and other languages. 
I'm pretty sure data scientists are already using dependencies, and if not something like Maven it's just a jar on the classpath/module path... Likewise with students. Universities sure aren't going to switch course material wholesale over from Java to web technologies just because of this one little thing. You're putting a hugely undeserved emphasis on it being shipped with the JRE imo, especially as it only ever was with the Oracle one anyway.
Dependency management and build tools not being taught soon enough is definitely an issue I've seen myself. I think it's largely because courses are already quite packed with all kinds of different things to learn, especially when you start from OOP principles and try to get to GUIs. There's just not enough time for all of the good things together and some things are fine if left untouched for the time being to be studied later.
It's actually been a boon to me. I dunno if you've noticed or not, but most openjdk implementations do not bundle openjfx in for some reason. It made it a pain in the ass to use javafx with anything that wasn't oracle jdk. worse yet, experimental VMs have even less access to javafx (graalvm EE is the only graalvm to have javafx). Splitting it out means I can use whatever jvm I want for my graphical apps.I've tested openjfx (from maven) on java 11, and it works beautifully.
I would be interested in contributing to an open source JavaFX library. Swing and AWT are sorely lacking in a lot of departments. I think the thing that initially held JavaFX back in the first place was its partially proprietary nature.
Java fx is dead. 
&gt; but it‚Äôs so goddamn mediocre compared to modern APIs and other languages What is swing missing? 
&gt; If you have to bundle JavaFX with your application, you might as well bundle something else This comment makes no sense. Just because you have bundle JavaFX with your app why should you bundle something else instead? You could reverse that statement and say "If you have to bundle Electron with your application, you might as well bundle something else...maybe just do JavaFX instead". 
&gt; Dependency management and build tools not being taught soon enough is definitely an issue I've seen myself. College isn't a trade school. 
&gt; Swing and AWT are sorely lacking in a lot of departments such as? 
In being succinct and non-verbose. Compare making a single window electron app to making a Swing app. This simplicity is what has made it so popular. If you took JavaFX and increased the abstraction a bit, you could blow electron clear out of the water with Java's advantages in memory consumption and speed as compared to JavaScript. 
"In the meantime, you will need to download the JavaFX binary that matches OpenJFX for your platform and place your compiled code first on the class path." http://openjdk.java.net/projects/openjfx/getting-started.html There is [no binary for ARM Linux](https://jaxenter.com/jdk-arm-without-javafx-end-javafx-embedded-114212.html) past Java 8u33. Has this changed recently?
I think JavaFX is much bigger as people believe it to be. The whole Jetbrains IDE Stack is built in it afaik
I would be interested to see you benchmark your implementation against the pure Java approach. Can you post back here when you have some results? 
You might want to try [TornadoFX](https://github.com/edvin/tornadofx). I've been using it for a while and it is like a turbo JavaFX. It is written in Kotlin and adds a lot of useful stuff over JavaFX.
I'm pretty sure I've read they use JavaFX., but I might be mistaken, but I don't really seea reason why they would still hse Swing
` import javax.swing.*; import javax.swing.border.EmptyBorder; import javax.swing.event.ListSelectionEvent; import javax.swing.event.ListSelectionListener; import java.awt.*; import java.util.HashMap; import java.util.Map; public class SidePanel extends JPanel { private final JList&lt;SidePanelItem&gt; myList; private final DefaultListModel&lt;SidePanelItem&gt; myModel; private final Place.Navigator myNavigator; private final Map&lt;Integer, String&gt; myIndex2Separator = new HashMap&lt;&gt;(); ... } `
Yep I used the state design pattern before and it worked well for my use case.
&gt;because they were built in, everyone had them AWT was builtin from the beginning, but Swing started out as an outside library, not part of the core. That is why Swing is in the javax. package structure, not the java. package structure. I've used AWT before Swing and have used Swing since before it was part of the JDK and had to be downloaded separately. I never did take a liking to JavaFX though.
I barely know Swing or JavaFX, but fxml comes to mind
&gt; swing showing up in awkward locations like jdbc. For real? I need to hear more about that. Or was it just an example?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Its swing. not javafx.
&gt; add a simple Maven dependency It's not that easy. There's one JavaFX dependency per OS (Windows, Mac, Linux) per module, which last time I checked add up to 105MB if you include all modules (or ~35MB for everything except `javafx.web`). That makes it expensive to create a cross-platform application JAR, and gets to be a pain if you have multiple JavaFX apps, each bundling the same JavaFX binaries.
The main benefit is another mean of improving encapsulation. Imagine implementing your own Option as Some|None algebraic data type, how else could you make sure that Option doesn't get subclassed further?
Totally doable - just wanted to stick to keeping everything in one file to provide the experience that is as close as possible to real-life sealed classes. Will add a note :)
Well, you could argue that a GUI library is "necessary". At least in those days when Java was created. And probably still is. If Java still advertises itself as the cross-platform language, the providing cross-platform GUI is one of its selling points. Because cross-platform GUIs are HARD, and most attempts at making those didn't work out.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You can also put multiple classes in a single source file. Only the class which has the same name as the source file can have public access, and the rest has to be package private. TopLevel.java public class TopLevel { } class PackagePrivate { } Not trying to force this approach, just thought to be an interesting addition :)
While I agree that it's a pretty big blow to JavaFX because it's not the "standard as declared by Oracle" anymore, I don't think packaging is a real problem. User-installed JDK distributions like Oracle JDK are also disappearing and the "idiomatic" way to distribute Java applications is now jlink. At that point, adding JavaFX to your JDK distribution is not that big of a step anymore.
What would you recommend then? Remember the guy is new to coding and only knows the basics of Java.
That's true. I haven't done it myself yet, but I would try to build a full self-contained application (including JRE) through javapackager / jpackager for each supported OS. That way you can only include the native dependencies you need for this OS. The JRE maked it bigger for sure, but your app won't break because the global JRE updated itself or something else changed in the environment.
If you are teaching programming on university and telling people how to include third party and build an executable is too hard to teach and learn, then you should probably stop.
They did not, but they invented Kotlin to make their life easier :)
Sure, cant do that today though, but in the upcoming week i guess
This was such a refreshing and inspiring read on how Java could be used.Great effort!
&gt; There's one JavaFX dependency per OS (Windows, Mac, Linux) per module There repository (snapshot for now) is here: https://oss.sonatype.org/content/repositories/snapshots/org/openjfx/ I don't see any OS specific dependencies. Just 7 modules to choose, depending on what you need (one probably doesn't need javafx.swing or javafx.web). [link](http://mail.openjdk.java.net/pipermail/openjfx-dev/2018-July/022088.html)
https://github.com/javafxports/openjdk-jfx
Yeah that's true. Hopefully tutorials are being updated to include how to hande the dependencies easily.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This is really annoying
How about learning design pattern? You must have very good knowledge in object oriented programming also. Try to learn more on these two skills.
Okay i will try it, thank you
Go cry to mommy.
What? Why? I‚Äôm not upset about TrashFX dying. You are
Thanks for posting this. I've been looking into machine learning and I think this is a great introduction. It's just one class, predicting the outcome of the xor function.
Why is Java not for signal processing? The FFT performs very well. Vector API and Valhalla will bring significant efficiency improvements, reducing the need for C/C++ even more. 
One word: alignment. 
It' s a common mantra, "programming language should be chosen according to the task", and is often good advise. On the other side, multiple languages don't help with communication. Having multiple implementation languages in one software product makes code harder to evolve and dependent on more components, each with their own life-cycles and obsolescence. Therefore, assuming it performance is good enough, an FFT implementation in pure Java is advantageous in an application that is already written in Java. 
That may be an issue in *some* signal processing applications, but often this won't be an issue.
This is a question for **/r/javahelp**, or for **/r/learnjava**. Programming help needs to go in the above subreddits, not here. Also, comment karma is what you get when other users on reddit upvote your comments in a specific subreddit.
This is the difference between computer science as an academic pursuit and software engineering as a vocation. Maybe we need more vocational education but I don‚Äôt think making universities into trade school for computer programmers is the right approach.
username on point !
I'm fairly sure I'm talking to an idiot.
Preaches about closing resources, yet doesn't close any of the FileReaders.
Reported.
i actually did this: https://github.com/lgdillin/ML-Toolkit I'm continuing to develop it and add features like multi-threading
Imo basic GUI elements should be incorporated into a programming language, like networking and containers. It's one of the things c++ misses. 
and this is a good thing, what is wrong with it? Only use explicit typing for primitives, thats how I do it with C#. 
Understand final picture (complete product, your team contribution etc) and work backwards for your piece
This sounds interesting, what is the latest supported language level? Do you have any apps in production? How's performance?
A whopping lot. You really need to provide a far more detailed bit of info here. What kind of projects? Give details.. server side, client side, mobile, cloud deployed, games, etc.. so many things to provide details on.
Where can I read about all this? I'm an undergrad(19 years old) that wants to make my own projects that would enhance my resume and show my willingness to work independently.
I mean.. not to sound like an ass.. but have you tried google? There are 10s of 1000s of links to look at. Check out Udemy for online tutorials that usually arent that expensive. 
Use processing
First understand &amp; Improve your data structure skills. Then go for project.
Java is a language that has a large amount of depth and is extremely versatile. You could devote all of your undergrad years to focusing on learning Java and likely would still be missing parts. The best thing to do is just start either making your own projects you think of, or recreating other common projects to the best of your ability. I would personally argue that it's not as important to learn Java-Specific concepts as much as it is important to learn concepts of object oriented programming, networking, and other things. You will become a more effective programmer if you can understand how to read other's code, understand it, and learn to adapt it to your own personal project. Learn the basics concepts of OOP (not even necessarily Java) and then build projects you enjoy working on and find interesting, and solve as many issues as you can using sites such as stack overflow. Basic projects I would suggest: -calculator -text-based game -very basic platformer game -basic program that connects to a database More complicated projects: -more involved game -social media application -music player (These are just suggestions off the top of my head. You will learn the most when you choose projects you enjoy.)
Learn basic Object Oriented Programming and then focus either on console apps- you need to learn basic IO or simple web-apps. I recommend framework like Javalin (https://javalin.io/) or Java Spark (http://sparkjava.com/). You can make some fun apps just with that (use basic IO for storage if you don't want to learn DB yet). As you are working on your project if you feel you really need a capability (like database) learn it only then. Start getting hands-on, before learning tons of theory. Read what John Sonmez has to say about learning - https://simpleprogrammer.com/learning-to-learn/ it is very useful!
Get into web development with microframeworks like Javalin or Spark Java. There is another thread where a related question is asked: https://www.reddit.com/r/java/comments/98i0vg/what_do_i_need_to_learn_in_java_to_start_making/
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Not a Java specific thing, but keeping these things in mind will help you tremendously. [12 Factor Application](https://12factor.net) It's a manifesto on developing cloud native/ready applications. If you follow these 12 factors ( and I believe they have added a few more like security, etc) you will be doing great. 
I moved from JavaFX to TornadoFX six months ago. It introduced me to Kotlin in the process. The ability of closures to build customized GUI widgets in place is much faster to code and less error prone that dividing that task between a hard to read FXML file and a the .java file. If I had to go back to JavaFX, I would code differently because of the constructs Kotlin introduces. Seems that many coding best-practices are embedded into the Kotlin syntax and management of the GUI is a case where the benefits are clearly evident. I‚Äôm searching now for a similar experience with web development by searching Kotlin-based web-development frameworks/tools. 
Wait, a `return` statement is considered an "abrupt completion"? TIL. 
 Awesome stuff imps-p0155! You have made it through our third and hardest level for Java. That makes you more succesful than 95% of all of our users! So I am expert level on googling and educated guessing **2/10** A lot of very vague questions or questions about how much methods some random rarely used java interface has VALIDATION TYPE| LEVEL | STATUS ---|---|---- Claim | Beginner | Not passed Chatbot | Expert | Passed Yeah, i guess I'm also expert on chatbotting 
But I was only quoting THEM 
Syntax is not a trivial concern. If it really were then I'd wager the world would be running on lisp.
Fair enough. Today though there is so much info out there that anything I offer could very likely be outdated. Why Java? Today, I would be looking at JavaScript (pure JS first, then frameworks like angular, react, etc) and nodejs for front end.. and honestly consider python a top language to learn for back end because it is used quite a bit in a variety of areas. Plus, for pure server side, I would go with Golang over Java. Mostly because it is a bit newer, more fun to code in, massive community support and use in large scale deployments by just about every major tech company you have heard of. It is truly an updated language for the multi-core computers we build and deploy on today. Java is still fantastic.. I use it every day.. but I would prefer to switch to Go if I had the chance for server side. 
Someone recommended me Java EE. What are your opinion of it?
Libraries throwing random RuntimeExceptionS that will make you calling code explode unexpectedly since thse are not documented. Android platform code is outrageous for that.
Enums make the best singletons. 
https://spring.io/guides
The inability of enums to ‚Äúextends Class‚Äù and goofy hack where you have to comment that ‚Äúthis enum is actually just a singleton‚Äù are pet peeves. Anyone else think the first item ‚Äúshould be uppercase‚Äù is bogus? I like them human readable, not hard to type and shouting. 
wow I did not know the 8, I have never use it and see a usage on any codebase I worked with
UPPERCASE CONSTANT NAMES make me think about COBOL
For what purpose..to learn.. or to use in a business? JEE is good stuff.. but complicated.. lot to learn.. good year+ or more to really learn how to do it right. That is just to build something for your one dev box. If you want to deploy and scale it, lot more to know about caching, load balancing, scaling individual parts (e.g. ee tier, db, caching teir, front tier, etc). 
For the moment, the human validation protocol is available to JS and Python skills. But we'll also add Java in the next months! Did you try our human validation mechanism? Don't you think it is a good added layer to a first verification via a Quizzbot? Here is an introduction to our human validation mechanism: the [Anonymous Indorsement Protocol](https://blog.indorse.io/our-vision-for-skills-validation-and-aip-7d081f81710c). \[Regarding the message coming from our Quizzbots, we're currently fine-tuning them!\] Thank you for this feedback!
Really fragile ? You mean because you'll have to update your code when the website is updated ? I've been building and maintaining scrapers at scale for different companies and industries: Banks, Startups, eCommerce, maybe 2000+ websites total. In my experience, the bigger the website, the less often the DOM will change. Most of the time you only have to make a small update in your XPath / CSS selector. 
Why on earth would a bank need a webscraper ?
To provide a nice feature called ¬´ Bank account aggregation ¬ª to its customers. Meaning having every accounts the customer has on ither banks in one place. Many startups/fintech are in this field. Mint in the US, Bankin / Linxo / Fiduceo in Europe, and many banks have developed this themselves. 
Oh, so not an actual bank using web scraping then. A company asking for your bank login details, then scraping the web pages. I would never use an app that relied on webscraping to access my bank details. 
I find it very hard to believe that any bank utilizes webscraping to aggregate accounts from third parties. Do you have a source for this ? 
Betterment does it. It's a retirement/investing account thing, not a bank per-se, but it's in the same ballpark.
I don't know for the US, but in Europe, you are so wrong :) I worked in the banking industry (in Europe) for 4 years developing scrapers. Check out PSD2 regulation :) Not only it's legal, but European banks were forced to let third party (and other banks) scrape their websites until they provide APIs. 
Yeah having something standard in a Java is so much better than always having to use these reams of bloated html/css/js hacks
&gt; HelloBank, BNP, Soci√©t√© G√©n√©rale, BCPE, Boursorama All of these *use* webscraping ? For what exactly ? Sure they allow it, they can't stop it. Thats different. 
Btw it goes even further, they use web scraping to make wire transfers on your behalf ! Same thing for third party (the startups I told you about, Bankin &amp; Linxo..)
But as I told you, the regulation (PSD2) will change this in several years, there will be APIs. All European banks are developing APIs to avoid this scraping joke !
Thats fucking awful. It wouldn't fly for the any of the bank work I have done.
99.99% of the time this doesn't happen to the extent you make out. Sure if you hammer a single site from a single IP with multiple threads you'll get an IP ban eventually. But these are trivial to bypass with proxies which any serious scraper has on hand. Useragents are irrelevant as you are going to be rotating between the 10 most commonly used ones making up a huge % of all web traffic. And unless you are scraping a major website (and even then unlikely) they are not finger printing you 
"Portlet" in this context isn't language-agnostic; it's a very specific Java spec (well, two: JSR-168 and 268). It's possible other languages may have their own version, but ten years ago, if you were writing a "Portlet", you were writing it in Java. Then too, Java was really the only serious enterprise-y language for web applications in 2003. PHP was just starting to explode with WordPress and Drupal, but nobody was doing serious large-scale stuff with anything else; Facebook was just starting to expand, RoR wasn't around yet, V8 and Node were a twinkle in somebody's eye, and even if they weren't, the sort of institutions deploying web portals weren't going to waste time on shiny hipster languages/frameworks yet. The last point release of uPortal was six weeks ago; I don't know about Java 10, but it's very possible that it will run it as long as its underlying libraries (e.g., Spring) are recent enough.
I strongly agree that Either and Try types would be better but so much code in the JVM ecosystem is written with exceptions that you end up having to deal with it at some point.
Using a programming language for web scraping is stupid. You should use a specialized scraping tool like Kapow Katalyst or something. This way you can easily and quickly respond to the changes on the page 
[@ComponentScan's latest tweet](https://i.imgur.com/6yegsg9.jpg) [@ComponentScan on Twitter](https://twitter.com/ComponentScan) - ^I ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
Fun fact: screen-scrapers are illegal thanks to psd2
From my understanding of the law, if there is an API you have to use it. And for certain parts of banking sites, the bank has to offer an API. But for the parts where there is no API or when the API is not available, you are free to scrape. Additionally the law doesn't mandate any API format. So the API could just be a document provided by the bank with a bunch of XPath selectors for the scrapers.
Spring Data JPA has just added a feature to defer initialisation of various bits either until the end of startup or to create lazy proxies that validates everything on first usage. In either case it happens in a background thread. It reduces PetClinic start up by 10-20%. Spring Boot is getting support for the feature too. https://github.com/spring-projects/spring-boot/issues/13833 
Eerr... This kind of post should NOT be allowed in /r/java. I expect moderators to remove this post and update rules prohibiting asks for pirated copies of books.
You're welcome. Jsoup is a parsing library (I reallly like it), but HtmlUnit is a complete headless browser. Meaning you can execute Javascript, you can handle cookies, click on buttons, etc. 
Banks hate screen-scrapping . It's totally insecure because the client provides his credentials to a third party...tbh i find it surprising anyone does this. Going forward : banks don't have an option when it comes to PSD2 - it's mandatory. One of the things PSD2 does is make screen-scrappers illegal - people should be glad. Al tough PSD2 provides no clear API it clearly states some rules: - AISP (Account Information Service Providers) need some time of consent given by the Account Owner that can be reused (3M i think) - PISP (Payment Initiation Service Providers) need some time of consent given by the Account Owner that can NOT be reused - so every trx will require your authorization. As you can expect it looks like OAUTH2 will be used everywhere as it looks to be the authorization standard that fits the requirement. There are a few more rules...some very important - like the one saying the consent for a transaction must clearly involve the trx amount somehow.
My bank offers account aggregation, and they mostly do it via scraping.
Thanks for the reply. I've been reading a bit. If I want to make a bot that will make a timed purchase from a web store, this library will do or do I need something else?
&gt; Banks hate screen-scrapping . Scraping. And that is a very generalised comment that's devoid of any nuance. Banks don't 'hate' scraping; they prefer more secure ways obviously but many banks have to allow it simply because their API's aren't ready. 
&gt; I would never use an app that relied on webscraping to access my bank details. Tons of users of banking aggregator apps really don't care about it.
&gt; I find it very hard to believe that any bank utilizes webscraping to aggregate accounts from third parties. Do you have a source for this ? https://yolt.com
This is an honest question. What makes NetBeans your favorite ide? I'm primarily using IntelliJ, and what I enjoy the most about it is probably the UI and the indexing, and it's code analysis and transformations where I can access most things conveniently with the keyboard. I've never really tried NetBeans to be honest, how would you describe it?
I guess now that you corrected me you clearly prove your knowledge on the subject. The fact that the api's are not ready had nothing to do with the level of appreciation of the banks. Scraping is the most imbecile system in regards to security (let me know if you want to discuss this) and implementation ( very flagpole due to HTML parsing) Another point..please don't confuse the banks interests with the interests of the fintech company doing the scraping.
Instrumentation stuff looks interesting, do you know any real project using it? So we have a better understanding of what cool things can be done with it. 
It's not actually Swing, per se, more Java2D, both of which are part of the java.desktop module. There were some weird dependencies between things like the java.xml.ws and java.desktop modules because of the use of the Beans framework. The framework had a descriptor that included an icon, which needed Java2D to render it. I think most of these have been cleaned up now.
AFAIK [https://github.com/jacoco/jacoco](https://github.com/jacoco/jacoco) uses it. There are probably more, but I'm not very familiar with others. I'm also using it for one of my own project.
Yolt is a fintech company owned by ING as clearly stated in the About US page. &gt;We‚Äôre a Fintech owned by ING, which means we have the strength and stability of a bank, yet think and act in an agile way. We began out at our HQ in Amsterdam in January 2016, we now have an office in London too and our ever-ambitious, ever-growing team work together as one. I won't put my money on it but i have the feeling the there is no bank (in the traditional way) offering the clients the possibility to work (view accounts, trigger payments) using accounts from another bank.
I'm afraid you're wrong. I can't go into details because I don't know what I can and cannot tell you but I know the company really well. 
I'm really confused right now :) - and a bit scared for the people in NL (or whereever Yolt does business). Anyway i find more important what i told you about PSD2 in another thread - this type of business (scraping) will be gone in a short while in the banking sector.
It's quite a bit less black and white. Banks have the option to allow scraping in lieu of providing a proper API. Only for banks that have an API scraping will be blocked. And the companies doing that scraping only do it if/because there is no API; scraping is slow and finicky. So many banks are moving to API's (Openbanking is getting a lot of traction this year) but there's loads of them that move very slowly and where scraping will be the only option for quite some time. 
Banks need to implement the PSD2 requirements and there is no way around it. If you have any document proving me wrong i'm happy to go through it. That would be huge for my current work place (implementing PSD2 requirements is on our work log in the immediate future). Willing to share my bonus as we will save my company a lot of money
Can someone help me on this?
&gt; I moved from JavaFX to TornadoFX ??? TornadoFX is just a framework for JavaFX, you are still using JavaFX. This is like saying, "I don't use Java anymore, I use Spring". 
How many more times do you need to be told to post such questions in **/r/javahelp**? Also, it is considered impolite and commonly not allowed to use the subreddits as *second opinions* to stackoverflow. Next time you post programming questions here will earn you a permanent, irrevocable ban. **removed**
IntelliJ is still written with Swing. A quick look at their source code which is available on github confirms this.
&gt; Banks need to implement the PSD2 requirements and there is no way around it. If you have any document proving me wrong i'm happy to go through it. That's the problem. The 'official' rules and the actual talks between banks are rather different. If the 'rules' would have been followed all banks would have had public API's already. In reality many of the old banks are very actively resisting the implementation. 
Just a quick question, to which I couldn't google an answer to: Does Javelin support deployment to an existing server (e.g. Tomcat) with a WAR file, or does it only support the embedded Jetty?
You could theoretically subclass the `Javalin` class and create your own `start()` method, which attaches the `JavalinServlet` to some other class you have complete control over, then deploy that on an application server. There isn't much in the library that will make this easy for you though, it's intended to be used with the embedded Jetty server.
do you know proxycrawl? I have a webscraping project and recently found it while googleing. It works pretty well I would say but I dont like that I cant find any businessadress on their site (not even a country). I'm also wondering where they get their IPs. I tested it with a digitalocean droplet and their source IPs where in russia, chile, ukraine, mostly broadband ips if you can trust those ip registres you find when you google an ip...
Are you serious, all their IDE actually use Swing...? I am in shock...
Is javalin made by same people who made the spark framework? I see a lot of same or similar images and sentences in docs.
Can I deploy it on Heroku?
In a way. I ([tipsy](https://github.com/tipsy/javalin)) joined Spark a few years after the project got started. I was the one who did the webpage/docs/tutorials. Last spring I decided to fix some things that bothered me in Spark, and the result was Javalin. There is no other overlap between the people working on Javalin and Spark.
You sure can, it's very easy: https://javalin.io/tutorials/heroku
Yes, easily: https://javalin.io/tutorials/heroku
It looks like in your [submission](https://www.reddit.com/r/java/comments/98veqg/i_need_an_explanation_of_this_java_class/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
They did drop C support in 9. ? God. Really annoying (and Im serious).
If you want an alternative with a business address in the website (heh :)), and very similar spirit (and pricing model) than ProxyCrawl, do check [Crawlera](https://scrapinghub.com/crawlera) (disclaimer: I work there). We use datacenter IPs and rent our own.
You can read a bit more about the differences here: https://javalin.io/comparisons/sparkjava If you do both Java and Kotlin I would consider Javalin, since it's being built with interoperability in mind. Spark has a Java version + a Kotlin DSL, so apps will look different in the two languages.
A pitty. We deploy on our customer's server where we have no control over anything. No chance at a standalone app with an embeded server :(
We've used DynamicTest internally at my company, but one of the things that comes up is why they should be used as opposed to parameters. The example given in the article could have been written to produce the mapping/media type combinations from a method source for a parameterized test just as easily. I like the idea of DynamicTest, but the question at the end of the day is what capabilities they give you over parameterized tests. I was hoping they would tie in at a lower level so that you could use include/exclude filters ‚Äìfor example‚Äì to run them. But, they're put together after filtering is done (see [this GH issue](https://github.com/junit-team/junit5/issues/1178)). So, you can include a source line identifier now, but that doesn't seem to help in the given example. All that to say, it seems to me the example in the article could have been implemented with a parameterized test and that would be preferable since more people would be familiar with that concept, I would think. Is there a benefit I'm missing?
Tried searching the docs but could not find a quick answer: how does javalin handle jsr-303 validation ? It's pretty standard to validate input objects and respond in a decent manner when building REST apps
Thanks for the question and you make a good point, let me give a bit of a long winded answer... I made a better point of it in a earlier draft of the article, but ultimately it was left "on the cutting room floor" as I felt the article was starting to get a bit long (I try to keep articles around 1000 words which I was already well past)... anyways... One benefit at least the dynamic test I show is that it will automatically add new tests as the patterns it is looking for are added (i.e. you add a new POST endpoint). Whereas with a parameterized test you would still have to manually add a new line and it might still fall victim of the developer forgetting to do so or the copy/paste errors I mention in the article. This would be more beneficial if for example with security where you might want to ensure every endpoint is being properly secured, or like in the stackoverflow question I mention where well over 1000 tests were being generated. Other benefits, dynamic tests offer a bit more flexibility in test design than parameterized tests (though the JUnit team did an excellent job in making parameterized test MUCH more flexible). I think the important thing to remember though is dynamic tests are another tool for writing unit tests, and a somewhat specialized one at that. You might not always need a stud finder, but when you do having one sure helps a lot. 
&gt;One benefit at least the dynamic test I show is that it will automatically add new tests as the patterns it is looking for are added (i.e. you add a new POST endpoint). Whereas with a parameterized test you would still have to manually add a new line and it might still fall victim of the developer forgetting to do so or the copy/paste errors I mention in the article. This isn't quite correct as you can use a @MethodSource annotation to designate a method as the parameter source. This makes it easy to do dynamic parameter discovery. See [@MethodSource documentation](https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests-sources-MethodSource). We do this often for the same reasons you mention: manual steps are frequently missed.
It shouldn't be impossible, if you want to give it a try you could create a GitHub project and tag me ([tipsy](https://github.com/tipsy) in an issue if you run into trouble.
&gt; how does javalin handle jsr-303 validation ? It's pretty standard to validate input objects and respond in a decent manner when building REST apps. Or maybe an alternative path is preferred? That's a little outside of the scope of the project. Javalin has a convenience method for converting a request body to a class (`ctx.bodyAsClass(MyClass.class)`), which I guess you could use to get some of the way by configuring your JSON mapper (Javalin will work with any mapper) There isn't any built in support for validation though.
&gt;(EDIT: And thanks for the article, BTW.) Absolutely!
Or they could have done it like VB and had a separate operator for value and reference equality.
"o1 == o1" isn't an expression involving the objects. It's an operation involving the references themselves. Delegating that operation to the object referred to by the reference doesn't make sense.
VB uses `is` and `=` for reference vs value equality. I would also have been ok with `==` vs `===`, though that's less satisfactory because its easier to confuse the two.
Like python and '==' and 'is', I suppose. Won't fly now, unfortunately. The '===' operator would probably be okay as an addition, as well, though I agree with you on the visual distinction issues.
Try with resources is broken when you use anonymous variables and the wrapper classes constructor throws an exception. The anonymous classes close method never gets called. Try with resources isn't the be all and end all of resource management 
That's weird because I stumbled across the same thing. It should really be documented because there's so many people recommending try with resources out there as the ultimate bug free way to manage resources - so much so that static analysis tools recommend dangerous refactorings not knowing about this behaviour 
That `while(true)` loop doesn't look right to me. Is it relying on an exception to mark the end of the loop?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
 Check out SmartGWT. They make enterprise ‚Äúportal‚Äù software that runs on Java and GWT.
no, you'd never get to line 29.
Phew, I'm not going mad :)
Why are the class files checked in? Why is everything in the root directory?
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/kotlin] [Kotlin 1.2.60 comes with native compiler binaries (x-post \/r\/java)](https://www.reddit.com/r/Kotlin/comments/992eki/kotlin_1260_comes_with_native_compiler_binaries/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
V
I see you posted this in r/Kotlin. Why did you posted it here also? I explicitly subsricbed for java, not kotlin or other jvm languages.
Native binaries are possible for any JVM language, including Java.
Fair enough. Sorry then. 
Interesting. One thing I'm curious about is if JavaFX 12 will be compatible with Java 11+ or just Java 12?
What is it about Kotlin that it gets posted in Java all the time? Both here and SO tags. Except that it runs on the JVM, so does Scala IIUC and I've never seen that misattributed to Java.
Been digging around the net and found [this](https://medium.com/codefx-weekly/no-free-java-lts-version-b850192745fb), which suggests OpenJDK will still be maintained under the same license as it has now (with the classpath exception in the license). So it should still be fine to use OpenJDK, right?
Because Kotlin is a turbo java I guess and if you use it from the Java side you can't see the difference between the two. Scala is a different animal and a whole different world.
W
just don't use Eclipse, duh 
While Scala does run on the JVM, the language and community has largely gone away from the rest of the Java ecosystem. They have their own build tools, like sbt, maven sort of works, but is clearly a second class citizen. IDE support is lousy, I have a mixed Scala and Java project and both IntelliJ and Eclipse just stop functioning regularly, and don't support many common Java refactorings, code generations, navigations, etc. They have their own web frameworks, own standard library replacements, etc, etc. I think a lot of this has to do with the fact that Scala's interop with Java is not good, painfully not good. On the other hand Kotlin seems to be making a real effort to leverage and improve existing Java ecosystem. For instance, gradle and maven are first class build tools. Mixed Java and Kotlin projects (even with in the same module) is simple and natural. Java interop is a breeze and works like you expect (most of the time). Tools like gradle are picking up Kotlin as a replacement DSL over groovy. Spring now has support for Kotlin out of the box. IDE support (well at least Jetbrains IDEs) is great. Having quite a bit of experience with both, Kotlin feels like a natural and straightforward improvement over Java (a bunch of the features are things that C# has had for years), Scala just feels like something completely different (C++ on the JVM with some Haskell/Lisp things tacked on for good measure). Though on the other hand Kotlin is making a large effort to make JS and native first class, so I suppose these articles should be getting posted to the JS subreddit, and all native language subreddits as well ;)
Why would you want that though instead of using a dumb text editor? If you do that you're basically just using the overhead of an ide without using its features. There's no point 
Yes that's great: they're moving as fast as other technologies now !
What‚Äôs wrong with the LeetCode editor? 
theyre moving a bit too fast
its really overwhelming isnt it
I'll give it a look, thank you!
You can always move only with LTS versions: next will be 11. 14 after that. Also, if you're using openshift linux distribution, they will support only 11 skipping 9 and 10. 
You can think of it as a train station. If a feature is ready, it makes it on the current train. If not, it waits and sees about next train. Nothing about the features are rushed.
Its a simple repository. You can rebuild the class files if you want
i loved the C support too. didn't need it often, but could make a quick edit to a C library or a JNI without confusing my brain with a different editor. and while i more or less hate c++, netbeans made it tolerable and i contributed meaningful improvements to a large c++ project using it support is in the process of being donated. the old plugins are still usable so it's not truly dropped, but it's not tested [https://blogs.apache.org/netbeans/entry/what-s-happened-to-my](https://blogs.apache.org/netbeans/entry/what-s-happened-to-my) the inflexible license ideology makes the donation process cumbersome
I'm being pedantic but the next LTS version will be 17 not 14
Correct, these six-month releases aren't rushed at all, compared to the old 2-3 year releases. This is counterintuitive, but I think the train metaphor holds up. Suppose you're heading to catch a train and you see a train about ready to leave. If the next train isn't for two hours, you're going to run and try to catch this one. If the next train is in five minutes, why bother rushing?
I believe try with resources lazily closes so if you are in a very high volume environment they can cause issues with too many open files on unix or oracle. just something to keep in mind when using
&gt; Gluon provides JavaFX Enterprise Support, where we maintain a Long Term Support version of JavaFX 11 That's amazing but they suspiciously forget to say how many years they consider to be "long term" for that particular release. It's not just a detail but an objective marker of how long they expect the technology to survive for at the very least. That aside, I'm super stoked to see JavaFX surviving and thriving after being dropped from the main JDK - with Oracle still supporting its development as well! I'm dying to port one of my projects from AWT to it but I'm still waiting to know for a fact that if I do that, I won't end up with a project that is impossible to run in modern OSes in maybe 10 years from now...
shouldn't be your job keeping up with Java's whims, it's your job to create, maintain and evolve your product/service to its needs, otherwise these are unnecessary distractions. 
Java 9 was made under the previous release schedule, thats why it took so long and had relative big changes.
Your question is formulated way too vague. It should also be posted in /r/learnjava and not here. Removed
When AWT and Swing were created, developers weren't using maven/gradle and repositories like jcenter/maven central for developing projects. The environments have changed, we have to adapt. You can now create JavaFX applications using the JavaFX artifacts in the same way you would use any other library as a dependency in a pom.xml or build.gradle.
That doesn't answer my question, though.
The working assumption seems to be that people interested in Java are not capable of subscribing to /r/kotlin if that language also interests them.
Kotlin is trending and heavily used on Android. It's not super weird like Scala and can be considered "modified java". Jetbrains IDEs support both Java and Kotlin simultaneously, and offer tools to machine translate code between them.
Correct, and further, java 9's pain really was that it was so much all at once. The reason 10 and 11 are hard to go to is because of 9, but once you get there, things are a lot easier.
Not at all. 9 was a big mess because of how much changed and broke. However, going to 10 and soon 11 has been relatively straight forward. Future versions of java will be far easier to adopt because they will be much smaller.
Im sorry 
&gt;I'll get started on adding more comparisons to the website. Please do. I was to create a simple production ready, stateless web-service in a week, using JAX-RS/Jersey(never creating a rest-service before). Definitely interested in a more modern styled framework.
X
This is gonna be an ongoing war
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It's in a lot of the Kotlin docs. https://kotlinlang.org/docs/tutorials/javascript/kotlin-to-javascript/kotlin-to-javascript.html
Y
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
One of the reasons is that `31 == 2^5 - 1`, thus `x*31 == (x &lt;&lt; 5) - x`
The only way it will be supported, is if people port/create with it. If people give it up, it too goes away. Port your project to it.
Got it, I have looked at the kotlin react stuff, not super impressed with what they came up with so far. Feel like it is trying to fill a need that doesn‚Äôt exist at the moment. But, using kotlin plus react for isomorphic with a more intuitive DSL would be amazing.
So, is it now safe to assume that the future of JavaFX is healthy? I really like JavaFX. But, like most of us, I don't have the luxury of investing on a dying platform.
Hopefully Oracle goes down this route eventually and let's javac make native binaries...
It‚Äôs been a distraction for us also. Tons of compatibility issues. We have essentially rolled back to 8. The idea that your job is to update java is ridiculous. Every single group I know will be supporting the LTS while making the ‚Äúlatest‚Äù available in their environments to dev against simply as a way to allow the devs to prep towards the next LTS. I think the rapid release cycle is liberating to the dev team. Good for them. There is no way I would attempt to support each one. In a way the cycle is a good separation of their desired release cycle and an enterprise support cycle. 
Ups: * You can tell what the code is trying to say. With Java, you know what you pass into a function, but with python, you just know the variable name. * With Java, there's a lot of imports and things to do before you can interact with someone else's code. With Python, you can just "import x" and have it ready, but that's not always the case. Downs: * Takes a while to make your point. Example: public int add(int num1, int num2) { return num1+num2; } def add(num1, num2): return num1+num2 You don't know programming yet, so what I'm saying might not make sense, but which one looks shorter? The second one. That's python. The example might not be prime, but it gets the point across, with Java, you have to be very specific. I'm a "beginner" myself, I've only been coding in Java for a few months, but I know enough to tell you that it's a good starting language. Lots of universities start with it, so it's not a bad choice at all. A language is just a tool, once you learn the concepts of programming, you can apply your knowledge to any language. I recommend sticking with one language while learning, then choose a field, e.g. game development or machine learning, and make your choice from there. If you need any specific help/beginner talk, PM me, I was in your position once and have lots of free time to help, we can talk on discord. Good luck. 
Look at eclipse deep learning for Java (dl4j) -- I think they even have an example of this in their docs. Or consider using a hosted service from Google or another company.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
31 is a Mersenne prime. Are multiplications with Mersenne primes faster for the CPU because of this optimization?
It looks like in your [submission](https://www.reddit.com/r/java/comments/99ak01/database_instrumentation_for_java/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
"Dying" is a strong word - there's a lot of community support. And besides, what alternatives are there? AWT *is* dead, and embedded JS-based UIs are bloated beyond belief and by themselves take more resources than the *entire* application that uses JFX as for UI.
I believe it's still open if (and by whom) LTS support for OpenJDK is going to go, but at least AdoptOpenJDK is giving each LTS version a four-year support: [https://adoptopenjdk.net/support.html](https://adoptopenjdk.net/support.html) Other commercial vendors like Azul are also giving (paid) LTS if you don't want Oracle JDK... In fact, you can't get Oracle JDK for free at all from 11 onwards.
Remember that generics didn't exist until Java 1.5. When they were designing the feature, I'm sure forwards and backwards compatibility was a concern. Perhaps they chose a simpler syntax with easier rules (plus an existing token rather than a new one) to make the transition smoother for users / IDE maintainers. Personally if I were designing the language from scratch I'd invent a new keyword (`inherits`? `isa`?) since both `extends` and `inherits` are really more implementation details rather than a hierarchy descriptor. But like I said, if backwards / forwards compatibility matters, maybe a new token isn't the best.
Only if you explicitly shift and subtract. 31 just works well for hashing.
How about Swing and Qt? I totally agree with you about AWT and JS.
I'd recommend Python over Java to start with, if only because Python allows you to program without classes and objects in the beginning. In Java, you either have to figure out classes right away, or you have some code that you just sort of have to ignore until you get to those topics. Also, Python is a lot easier to get up and running, the code will be shorter, and it has a good repl (even better if you install ipython). The only place where Java beats Python as a learning language is the type system, but it's not that big of a deal until your programs start getting bigger and more complex (and I say this as someone who loves strong static type systems). In the end, though, learning your second language is much easier than your first, and Java and Python share many concepts. Learn one, and you'll be able to pick up the other. 
It is not inconsistent. Say you had MyClass&lt;T implements Interface&gt; you wouldn't be able to do interface ExtendedInterface extends Interface and MyClass&lt;ExtendedInterface&gt; o = new MyClass&lt;&gt;(); because `ExtendedInterface` does not implement `Interface`, it extends it.
Same keyword ('extends') is reused for a slightly different meaning. In "class X extends Y", extends means: "Extend on class". In "class A&lt;X extends Y&gt;", extends means: "Is a subtype of". 
Swing seem to be *more* dying than JFX, and Qt... I never saw it being used with Java
One might argue that having both `extends` and `implements` is redundant, and Java could have had only one, similar to how C# has only `:` ( `class Foo : Bar, Baz` etc.). "But", I hear you saying, "you need the distinction since you can only extend a single class, but implement as many interfaces as you want!", but this is the Hungarian/Prefix notation all over again - just as the `I` prefix is deemed redundant for interfaces (compare Java's `List` to .Net's `IList` etc.) because your IDE can tell you which it is, so it is with extends/implements. 
So 109 is ~6% better than 31 at avoiding collisions on that list of words that probably simulates real-world usage pretty well. Hang on a minute, what does 6% better mean? Yes, it has 6% less collisions, but the absolute number of collisions also matters. Now, on my system (Debian testing) the file `/usr/share/dict/words` has 102,401 lines. Assuming this is more or less the same number as the file used in the article, this means using 31 we get ~3.1 collisions per 1000 strings, while 109 yields ~2.9 collisions per 1000 strings. To me they both seem low enough... 
Thanks a lot for the detailed reply. Especially the macro handling has me curious Also, the multi project handling is something that sounds promising. I don't quite understand the find usages bit, but that alone will probably have me give NetBeans a try.
&gt; In other words, there is no case in which you could use either extends or implements and the meaning would be different. The *meaning* would be different, as I stated. By extending you're adding, by implementing you're claiming. I think you mean that the *effect* would be the same, in that you are "inheriting" an interface. &gt; strongly oppose the convention of naming interfaces IFoo because it's "too verbose and adds no information". There's a difference between a language's syntax and how developers choose variable names. The reason why Hungarian style conventions like the `I` prefix encodes type information in the name, which can a) change, and b) is redundant because of the type declaration.
Ever since I started playing with Kotlin I never went back to Java... And all Java project I touch I slowly refactor into Kotlin and everyone loves how clean it is.
As a side note, Java offers the ability to use intersection types, which uses `extends` as well as `&amp;`: public class Foo&lt;T extends Bar &amp; Baz &amp; Serializable&gt; { } Note, though, that the class must come first when declaring the bound.
For much better example, take a look into guava's Optional
What I would like to see is for them to support Vulkan instead of OpenGL for rendering. This would give me the security I need to know it'll be working on home and office computers for at least some good 30 years from now at the very least. Of course, this brings up the question that MacOS doesn't support Vulkan - but on that note, they have deprecated OpenGL as well so JavaFX's future for Mac is doomed either way. In all likelihood, chances of Mac eventually getting Vulkan support is something I could bet on, myself if I needed to.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*