If you don't have experienced ADF programmer in your team, then you may lose huge amounts of time to figure out how to do some (even relatively simple) things properly. It could be very frustrating. Also working in ADF means, that you have to use JDeveloper, and many people don't like that IDE.
Even expected errors are exceptional.
Do you know why ADF is being chosen? Does your company have a significant investment in Oracle technologies? If so, then ADF is probably a reasonable choice. It does bring a lot to the table for very large enterprise applications - this is at a cost of course - ADF can be large, slow, and unwieldy for some projects, but be a good fit for others.
Considering that ADF was developed by Oracle, yeah, that's why it WILL be in ADF. 
To be fair, you will need experience for ANY framework. Since you as a human are not born with knowledge of any framework build into your DNA, you'll have to learn whatever you will end up using. Now some frameworks are touted as easy to start with, but I found this can be deceiving. Supposedly RoR was so incredibly simple, but I know all too many teams who got completely stuck with it after only a month. Yes, hello world copied from a blog is simple, anything that you want different often is not, even in the supposedly "simple" frameworks. Also, I wonder if /r/java is the best place to ask for advice on ADF. As I mentioned in my other reply, ADF is not often blogged about (although their definitely are some blogs about ADF), and this community here is largely driven by what's popular in the blogosphere. Not belittling anyone, but that's simply what Reddit is about; links to popular blogs and articles, mainly open source ones. You'll thus find a certain bias here against closed source, commercial, enterprise grade software. Walk around at the campus of any large consultancy firm, talk to the engineers there (the ones who actually work with the APIs, NOT the ones who sell hours!), and you *may* here an entirely different story. 
Are any of these applicable to Android Studio? (considering android studio is a branch of intellij)
yes, they are the same shortcuts
What this guy said is very useful http://www.reddit.com/r/java/comments/2sk3tz/how_can_i_run_methods_outside_of_main_in_eclipse/cnq7j51 Usually in "normal" development work, you rarely will require a need for testing a specific function at a given time without a main method. If I were writing a function: public int multiply(int x, int y){ return x * y; } And I wanted to use it in another function: public void something(){ //... int x = ... int y = ... int z = multiply(x, y); // use z... } You could step through a debugger and carefully judge what you're getting as a result from the "multiply" function if you want to do something quickly that you may not require in the future. To just simulate what you want and also develop good habits, you should start with JUnit: http://junit.org/ Then you can run specific methods without the need for a Main method. These methods look like: @Test public void testMultiply(){ int x = 5; int y = 10; int z = multiply(x, y); Assert.assertSame(50, z); } In an IDE like Eclipse or Intellij, you can run these files and it would give you graphical detail of whether the tests you have written pass or fail (with colours green or red). If you're not sure on running them, there's help you can get with each IDE on how to set them up and run the tests as you need: Eclipse: http://help.eclipse.org/luna/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2FgettingStarted%2Fqs-junit.htm Intellij: https://www.jetbrains.com/idea/help/testing.html Netbeans: https://netbeans.org/kb/docs/java/junit-intro.html Try it out!
See that's the point. A NullPointerException is not recoverable in any situation. It is a programmer error. A checked exception is almost an oxymoron. If it's an exception, ie something that's not expected, how can you check for it. Maybe the interface for FileInputStream should be something like static Optional&lt;FileInputStream&gt; open(String fileName); Indicating that it's perfectly possible that the file does not exist. 
Doubles are the type of variable you'll want to use to hold the user's height and weight (you can declare them like so... 'double weight = 0.0;') You'll probably want to use the Scanner class to get the user's input, import it at the top of your class with 'import java.util.Scanner;', then create an instance of the scanner ('Scanner myScanner = new Scanner(System.in);'), then you can use the convenient nextDouble() method to get your user's input ('weight = myScanner.nextDouble();'). You can use 'System.out.println' to print out instructions to the user etc., to the console. Given the simplicity/the basic nature of the task, you'll probably want to put all of this code inside of the main method in your class, so it runs when you run the class.
I don't understand the relevance, but my dog sure seemed to like it.
What's really funny about this whole discussion is that nobody has posted an exact definition of call-by-reference. That page provides a good one: "In call-by-reference evaluation (also referred to as pass-by-reference), a function receives an implicit reference to a variable used as argument, rather than a copy of its value." So, take the declaration: "Point p;" p is a reference, not an object. When p is passed to a function, the function receives a copy of p, so this is clearly not pass-by-reference. It only gets confusing when you consider how to pass an object to a function. The precise answer is that you can't. So this silly argument is moot. 
Which book are you using? 
| No, I'm not getting anything confused! Really? Explain this, then: previous post: "But from an practical language standpoint, objects are passed by reference" your response: "No, this is wrong. If they were passed by reference, the method where they are passed in can reassign the "pointer"." By "they" you were referring to the objects that are passed, which is impossible, because you cannot pass objects in Java. Only object references. | I started in the 70-ties with asm, worked my way through C, then C++ and lately Java. At some point during that time I've implemented a Pascal compiler and I've read the dragon book cover to back and again. The fact that you tried to bolster your inaccurate comments with a description of your vast experience and a rambling explanation just makes you sound more foolish. Are you the TempleOS guy? 
Correct. You confused it a bit here: "Object parameters are still pass by value." There is no such thing as an object parameter, only object reference parameters.
I think I have a good enough fundamental grasp on how exceptions work. I just think checked exceptions are a poor mechanism for propagating known error conditions to method clients. Known errors should be encoded in the return type, not in a weird backchannel that breaks the normal execution flow. The only time execution should leave a method is through a 'return' statement, not through a 'throw' statement. A throw statement is basically a 'goto' statement and makes reasoning about programs needlessly more complex. Admittedly, this is a radical opinion and I don't actually follow it in my day to day practice.
Amazon Web Services.
Here's a poster for every shortcut: http://i.imgur.com/YfsfoLd.png
You don't quite mention on why you are inclined to Oracle ADF. Why would someone want to replace a legacy system with another legacy system. Oracle ADF is a slow and poor implementation.
And loops are equivalent to a `goto` at the end that jumps back to the beginning, and `if` is a conditional `goto`. All control-flow statements are special cases of `goto`. Forbidding a design on the basis that it involves control-flow statements is silly.
Answering your first question: ctrl + shift + enter to close the current statement. x.setX("&lt;cursor here&gt;") -&gt; ctrl + shift + enter -&gt; x.setX("");&lt;cursor here&gt; Works for if() too, it opens the brackets position the cursors inside. If you want more useful shortcuts visit jetbrains' website it's very well documented. https://www.jetbrains.com/idea/help/keyboard-shortcuts-you-cannot-miss.html
I can't speak for the rest of the team as I don't know them that well, we have been working on different projects. We have no experience of ADF, I can't imagine there is much experience of spring either.
Do you mean compared to pure JDBC? Then, yes, I think it would improve my efficiency (or actually that of a colleague).
Yes, thanks, we're making for industrial application for a single client server, and since it won't ever see further distribution, platform concerns are minor.
And I'm not yet ready to use physical violence.
then we cant help you. Thats the only language nerds speak and understand. :D
In some cases he might be right. C# was designed after Java so it had the advantage to be able to learn from Java's mistakes. Neither of them is ultimately better than the other one. It really depends on what you are doing - in some cases one of them might be much more suitable than the other. I assume that you can't really switch the language anyway so arguing which is better is totally pointless. He has basically 2 options: a) accept it or b) get another job (or arranged to be moved to a different project).
I cannot speak for the .NET framework, as I don't really know it, or the ecosystem well - however, having been a Java dev for close to a decade (and currently writing Android apps in Java), I believe that C# is actually a better language. They learned from the mistakes of Java, and made something that is nicer. Java 8 is just now catching up to where C# was 5-6 years ago: - Date handling in Java has sucked since ever, hence the popularity of *joda-time*, and the reasong for the new *java.time* package. Date handling is much nicer in C#. - Lots of nice syntactic sugar in C# - you never have to write getter/setter methods if they're just returning a value, also the null coalescing operator (??) is really handy - gone are a ton of the null check that sprinkle all Java code - LINQ has been in .NET for a long time, Java 8 just got language support for filtering/predicates - Closures / first-class functions since 2007 This conversation does not need to have the markings of a political argument. In the end we all want to be better programmers, and write better code - and in order to do that, it behooves us to keep an open mind to ideas that are outside our specific area of expertise. If your colleague is being a dick about it, there is no need to stoop to their level - there are no real winners there. 
Mono is not a complete .net implementation, but it runs smoothly on Linux and OS X
`IInterface` vs `Interface`
&gt; Java 8 is just now catching up to where C# was 5-6 years ago I see this comment a fair bit. One thing that 'irritates' me about this sort of comment is that it doesn't really matter if C# (or vice versa) had _feature X_ 5 years go if they're _now on par_. _If_ you were saying that because C# had that feature 5 years ago that C# has retained a 5 year R&amp;D / feature lead, then that would be fine. But I think all you're saying is that C# got feature X first - and that's great for chest beating, but doesn't much matter when it comes to selecting a language for a job _today_.
You don't shut his mouth. You shut *your* mouth and code something awesome and useful in Java.
I see your point, probably I could have phrased that in a more objective way. Nevertheless, the unfortunate reality is that even though Java 8 has been out for close to a year, it is often not possible to use because the IT infrastructure updates tend to move at a glacial pace - whereas the features I mentioned are available for use in almost any .NET shop. Would be interesting to know which version of Java OP's project is using ;)
Point out how Scala is vastly superior to C# and if he truly wanted oa powerful programming language he'd use that instead.
This is the best answer. End of story.
"Ohhhh really? Too bad we're going to make this in Java."
Violence in any form is not helpful in that regard. The only thing that counts is working code.
It's not silly. Back when we had to malloc and free everything manually it made sense to make sure you only have one exit, and you did all your cleanup right before exiting. Of course, for something like java, this isn't important anymore. You can, for example, create a string buffer and then just abandon it by returning early with return or exception. (That's not to say resource leaks can't happen in java.) Now imagine that everything on the heap that you created in the function has to be explicitly cleaned up before the function returns. And then, add multiple exit points based on various conditions. And if you lose a pointer to whatever you created and exit the function, there is no way to get it back. That memory is now wasted and won't be reclaimed until the process terminates. Keep calling such function over and over, and you'll run out of memory. Nothing silly there. Just decades of pain of those before us that resulted in some best practices. But, times change. 
Step one: stop listening to him. *There is no Step Two.*
This has to do with common naming schemes. It's not actually something that Java is better at. To elaborate, interfaces in C# are commonly prefixed with I.
Either ignore the quarrel and stop worrying. Do not let that irritate you. Or, as second best option if you cannot stop the urge to reply: ask him, if C# is so great, why then does he not work for a .NET shop?
The problem with Java is that when it does play catch up it does it poorly. Many of the C# features are so elegantly implemented that they look and feel right. Java adds a feature and it feels bolted on like some Frankenstein's monster. For example generics, XML parsing, labdas, default interface methods.
In modern Java, the second example is _definitely_ preferred. Now, you still might want to split the method to multiple methods if it's at all possible. About the single returns - this is still a valid technique for languages where you must cleanup your resources manually. In Java, you usually don't. If you're not abusing the freedom for some "clever" hacks, then there's nothing wrong with multiple returns if they increase readability of the method.
&gt; Why not Spring? Because abso-fuckin-loutely no? If there's no experience with anything, I'd suggest to try plain Java EE first. 
we're forced to use it at work. its awful
You can't. Since basically java is a retarded subset of C# 2.0 from 2005, whatever your coworker says is probably right. Whatever you might write in java can probably be written in C# with 30% the amount of code. That said, the discussion is usually between platforms, not languages. If it were only about languages, java would have ceased to exist 10 years ago. I suppose the question is what type of project are you working on, if it's a client side application (such as a desktop app or a mobile app), then your coworker is basically right, since java the platform with all it's ecosystem and everything is basically garbage when you need to do client side development. there is not a single usable non retarded UI framework and the entire java ecosystem hasn't noticed there's something called MVVM, because, of course, it's 1990. And of course, C# today supports cross platform mobile development targeting Android, iOS and Windows Phone with a single code base, whereas java is basically Android platform lock-in, and it isn't even properly supported on that platform. If it's a server side thing (such as a Web app or a heavy duty Big Data or middleware kind of thing) then your stronger argument (by now) is that C# is not officially supported on non-Windows servers (Linux) up until mid 2015, when .Net Core will be released and will make java sound like memories of a distant nightmare. **Edit:** Since I used to do a lot anti-java trolling in the past (and I'm practicing the 12 steps now), I'll add some more so that people won't think that this is (yet another) clueless trolling on my part: - The JVM is much better optimized than the CLR right now. This means that for very heavy processing (such as the kind that might be going on inside Google's servers) the JVM is a much better option than the CLR because the performance difference is going to be very important on huge workloads. Not so much for "smaller" things. - the JVM is (today) officially supported on Linux. As mentioned above, right now the CLR is Windows-only, with an alternative implementation called Mono. The performance of Mono has been bashed in the past (objectively or otherwise), and now that MS has open sourced the .Net Framework, the Mono guys are porting the significant bits of the MS platform to their cross platform implementation in order to gain the performance advantages. I guess this will still lag behind the JVM though. We'll have to wait and see when the promised improvements to the CLR (such as .Net Native and .Net Core) are materialized. - Some claim that there's a much greater set of open source libraries targeting the JVM than the CLR. This argument is debatable, though, because, even if it's true, the CLR can right away consume libraries written for the JVM thru the use of an interop tool called IKVM. Having said all this, java-the-language still sucks and is horrible to work with, mostly for a person used to writing C#. If C# did target the JVM instead of the CLR, java would have been completely eradicated off the face of Earth very long ago.
From the way people on r/java rave about that IDE, I'm surprised you would have any questions about how to use it. I would have thought the use of all features would have been completely intuitive, and I'm disappointed that it didn't automatically correct your Calculate method for you.
Ah, our resident C# troll shows up again.
I found that java talking directly to serial was occasionally problematic ( this was &gt; 10 years ago ). My solution was to convert the serial ports to network ports via "serproxy" http://freecode.com/projects/serproxy I found this to work very well. Gotchas: 1) the new "serial server" has zero security, so your network needs to be secure. 2) changing the parameters of the serial configuration is done via config file for serproxy, so it's more difficult to control from the java program itself. 
language-wise he may be right. But language is only part of the puzzle. Library wise there is zero comparison. The java ecosystem is huge. C# not so much. Deployment wise C# used to be limited to windows unless you wanted to attempt something with mono. This is set to change. But deploying server software on windows means you have a much more limited set of tools for configuration, monitoring, etc. 
No need to downvote him, he was just asking a question. Even though his thoughts were wrong, it's still a question people could have and this is a good way of spreading knowledge. It certainly adds to the discussion.
&gt; Library wise there is zero comparison People often bring this argument. While it might be true, I'd like to ask for specific real world examples of such libraries targeting the JVM that have no equivalent for the CLR. For example, I can give one example of a very useful C#-based tool that has no counterpart in the java ecosystem: Xamarin.Forms, which enables cross platform mobile development using C#, XAML and MVVM to create **native** UIs for Android, iOS and Windows Phone. Also, see my point above about the use of IVKM, which enables CLR-based code to consume JVM targeted libraries. &gt; deploying server software on windows While you have a point here, you're assuming that everyone is talking about server side development, which might not be the case.
&gt; One thing that 'irritates' me about this sort of comment is that it doesn't really matter if C# (or vice versa) had feature X 5 years go if they're now on par. Objectively, java-the-language and C# are very far from being "on par". I can enumerate the vast number of C# features that either have no equivalent or are very poorly designed in java (for whatever reasons). In contrast, java doesn't seem to have a single (not even one) unique feature that can't be found in C#. Generics, Value types, and async/await are huge ones.
I'll keep that in mind. Thanks
&gt; Akka https://github.com/akkadotnet/akka.net &gt; Spring Boot Looks very similar to http://nancyfx.org/ &gt; Hystrix You got me on that one. I don't know of any .Net based library similar to that. &gt; Mahout &gt; MLLib &gt; deeplearning4j While there are several machine learning libraries for .Net, I'm not familiar with the specifics of that area to make a comparison. &gt; AutoValue Seems largely irrelevant due to C#'s built in support for value types. &gt; Guava I heard the collections part might be useful. There's a Collections library for .Net too with all sorts of collections that aren't built in. Other than that, it seems to have a lot of conveniency workarounds for language lackings. Largely irrelevant in C#. &gt; Lombok Same as above. This is largely irrelevant in C# because C# has built in support for most of the things that java doesn't and therefore needs such libraries. &gt; FreeBuilder Is this an IDE? or did I google it wrong? there's Visual Studio for C# which has been recently made free for non-Enterprise, there's also SharpDevelop and MonoDevelop. There's also the OmniSharp project that brings C# compatibility to a ton of Linux tools such as Vim, Emacs, etc. &gt; Camel Not aware of a .Net equivalent of this. So, from your large list of libraries, it seems like only 2 of them are valid real world examples of libraries that don't exist for .Net (or rather, that I don't know of). I'm pretty sure I can also find at least two the other way around, for one I mentioned Xamarin.Forms, and ReactiveUI. There's also WebSharper. &gt; contribution to the sterotype that dotNet developers/projects are grossly outdated Doing native client side development is "outdated"? Curious statement. I disagree. If anything, web technologies (HTML / CSS / javascript) are still decades behind native development in terms of productivity. This might eventually change, but right now the web is not the "end all be all" of software development. 
This just shows the general consensus within C#, since MS is dictating, how something should be done, without engaging the developer to think about it himself. Feature-wise C# is far superior to Java, but mentally they are much more restricted. 
Sometimes the only winning move is not to play. How about a nice game of chess?
From a classes PoV it does not matter if it is an abstract class or an interface; Inheritance is inheritance. The naming convention may sound useful for an untrained eye e.g. beginners. This will only resolute later on in examples like you are giving. `List&lt;T&gt;` does not show any signs of implementation details which is bad, cause there are obvious differences between an `ArrayList` and a `LinkedList`, so what would `new List()` be? But C# is not F#, this is like saying Java and Scala are the same.
Many big enterprises I've worked with (Hewlett-Packard / Thomson-Teuters) use Jenkins-CI for the continuous integration. The amount of plugins is staggering, and industry experience is pretty broad.
&gt; How about a nice game of chess? No. ...I win!!
I'm not sure if there's an equivalent in C# but check out Guice. I really want to try C# but I can't program without automated DI.
Any thoughts on this?
I tried my best to install Visual Studio on a real OS like Linux, but I couldn't find the RPM or DEB anywhere. Could you tell me which repo or PPA it is in?
Sorry, if you calm down, and speak like an adult, I'd like to discuss these issues: &gt; Java enums can have fields and implement interfaces Yes. This is easily achievable using classes with private constructors and static readonly fields, then you get the same "feeling" than with enums: if (foo.Bar == Bars.Bar1) &gt; Java Generics are superior No. Best proof that they aren't is that there is planned / ongoing work to create specialized generics (which is closer to the C# approach than java's current approach). &gt; C# has a second incompatible collection framework In practice, that's a non issue. non generic collections are in a different namespace and pretty much no one uses them. &gt; they were too stupid to implement generics in the first place java didn't have generics on it's first version either. &gt; COM which you're stuck with forever I have no idea what you're talking about. COM is not present on Linux / OSX which are target platforms for the CoreCLR, if your statement was true then such thing would not be possible. &gt; Value types in Java 9 or 10 are done right You're talking about a future feature that's not available today and that you don't even know which version it will be included on. Yes I can also speak about features from C# 8 or 9 but let's try to stay in the real world. &gt; they won't be mutable like the shitty struct implementation in C# Granted. There's nothing in the language itself that will force you to do immutable structs, however in practice, every struct I've ever dealt with is immutable. Of course the current state of C# is much better than the current state of java on this matter. &gt; async/await: LOL I'm not even sure you understand what async/await does. Please go read about it and then we can discuss better. &gt; To break language compatibility C# has not broken compatibility in many many years, the only breaking change in years has been properly documented and widely advertised, and it's related to the closure of loop variable in the foreach loop.
Yeah, the community around Jenkins is pretty astounding. The number of plugins is huge (though there are some out there that are of lesser quality), which makes integrating with all kinds of things really nice. We use a tool called Rally where I work, which is kind of like Jira. It facilitates Agile development. So I use the Rally plugin for Jenkins to push build statuses up into the tool so they can be seen by the business analysts and scrum masters. It really is pretty great.
&gt; Lots of nice syntactic sugar in C# - you never have to write getter/setter methods if they're just returning a value, also the null coalescing operator (??) is really handy - gone are a ton of the null check that sprinkle all Java code I see people talk about the getter/setter syntactic sugar quite a bit as one of the reasons C# might be better. But really, when is the last time any of us wrote getter/setter methods? I don't know about you guys, but I have eclipse do that for me. So yeah, I guess you could say C# may be a little more convenient in that respect, but really getters and setters don't slow anyone down in reality. Edit: punctuation
I would be interested to know how CircleCI or TravisCI are different from Jenkins (because I CBF to google that and wade through the pile of flame war results on stackoverflow that will result.. :-)
Of course I would be interested
Sure. Here it is. https://chocolatey.org/packages/VisualStudio2013Ultimate
ORM or not I've had a lot of success by implementing a [DAO](https://en.wikipedia.org/wiki/Data_access_object). While [this implementation](http://www.baeldung.com/spring-dao-jpa) shows JPA specific code the structure should stay the same. You would just update the implementation to use jooq specific code instead. 
This just randomly happened after i restarted my comp. 
Well with no information about your setup... Right click the jar in Project Explorer, select properties, then Javadoc Location, click browse and browse to the javadoc folder, and then hit OK. It's only the default in so far that it doesn't know how to find the javadocs for every single jar ever.
Okay, sorry. I assumed you knew about both DDG and Maven. Maven is a dependency manger. It has a bit of a learning curve but it is really worth it. If you start a new maven project in eclipse, it should create a pom.xml file. If you put the following in the dependencies sections of the pom.xml file: &lt;dependency&gt; &lt;groupId&gt;org.lwjgl.lwjgl&lt;/groupId&gt; &lt;artifactId&gt;lwjgl&lt;/artifactId&gt; &lt;version&gt;2.9.2&lt;/version&gt; &lt;/dependency&gt; Maven will automatically download the jar files for you and if you CTRL click on a lwjgl class eclipse will auto download the sources for that class. I can create more detailed instructions if you're interested.
So do you do it orm-style where each object is fetched in full each time? Or do you create multiple objects that are specific to the use case? 
Awesome I will definitely give that a shot and follow up. Thanks for the help!
I love Scala, but as the old Scala joke goes: I spent two hours today looking at one line of Scala and I still don't understand it!
I'm relying on a free clover license(running out in 20 day) as cobertura cannot evaluate java 8 and I believe java 7 code. It is the poor mans code coverage, yet it is better than nothing. I keep asking for fisheye and clover but I keep receiving: NO! :(
Some people would argue that the I prefix is a limited form of Hungarian notation (which is typically frowned upon these days), but I still like it better than Java's approach.
&gt; I see people talk about the getter/setter syntactic sugar quite a bit as one of the reasons C# might be better However that's the less important one, by far. &gt; when is the last time any of us wrote getter/setter methods? I don't have that much of a problem in *writing* them but rather *consuming* them: this syntax: product.getProvider().getAddress().setStreet("123 Fake Street"); is (IMO) horrible, disgusting, I can't even stand looking at code like that. In contrast, this syntax: product.Provider.Address.Street = "123 Fake Street"; just feels much more natural, less cluttered with irrelevant boilerplate, and gives the feeling that you're dealing with an object graph, not some kind of procedural stuff where everything is just method calls. You write your properties once (with or without IDE help) and then you have to consume it many times. java's lack of properties just makes the code look uglier with no gains whatsoever.
&gt; real OS like Linux Real edgy there, almost cut myself. Also, I like how you misspelled GNU/Linux.
by orm do you mean the mapping from result set to object? Most people who do not use JPA would still map to object. Jooq does that by default and you can inject also other mapper. If you are using Spring jdbc you have the notion of RowMapper there a few implementation that will do the mapping for you BeanPropertiesRowMapper, Roma or SimpleFlatMapper. Sql2o does also the mapping. Must people who don't use full blown orm still retain the mapping part and probably the DAO.
Are you using LWJGL 2 or 3?
Actually, nevermind. I see now that the most not-exactly-correct code comes from the cogitolearning site. It looks like it was either written in times of Java 1.4, or by someone more versed in C than Java. The GUI code is alright.
I think the idea is that people will not implement their own subscribers. Instead, they implement Consumers. So, the internal implementation of the Subscriber calls request so that they can "push" the work to the consumer. 
[try to specify the jvm in eclipse.ini.] (http://wiki.eclipse.org/Eclipse.ini)
&gt; Sometimes the only winning move is not to play. Exactly, don't get bogged down in it. You won't change anyone's mind, you'll just waste your own time. Every language has their fanboys who consider their own preferences the one-true course of action. It's almost always nonsense. There's no science behind it - "but it's faster" / "there's less bugs" - they will never be able to prove it. The only scientifically-sound studies done on the subject have shown there to be differences between languages (when measured for productivity and safety), but it's languages like Haskell that win, and even then the difference is quite small. But strangely enough it's the languages that score worse than Java (in terms of performance, productivity and bug-counts) - Ruby, JavaScript, and yes, C# - that seem to have the most loud-mouth advocates.
Exactly! "C# is soo much better than Java. You'll all be using it soon as it's taking over, not working here on this slow Java code-base like suckers." OK, so, if you prefer C#, and it's "taking over", why are you working here on this code-base like a sucker too? There must be hundreds of better C#-wielding employers to choose from?
I use a semi/simplified DAO, and the classes that implement it use JDBC with specific DBMS driver. (In my case, PostgreSQL.) I have the abstract DAO class that would get the data source from jndi context attribute matching the data source (with connection pool) provided by the container. And then various subclasses, like WidgetDAO extending it. And clients (servlets, tag handlers, etc.) have something like this in their classes: private static final WidgetDAO widgetDAO=new WidgetDAO(); And later on in methods of those servlets/tags, I have something like this: int widgetRefNum=....get it from request parmeter, parent tag, or somewhere else; Widget widget=widgetDAO.getWidget(widgetRefNum); ... use the widget object. or widgetDAO.insertWidget(widget). And in WidgetDAO, those methods basically get the connection from data source (that's in DAO's helper methods). Then create a statement, execute it, and close connection (return it to the pool, also DAO's helpers), then return result. This worked well-enough for me for the past 10 (probably more) years. Right now, I'm rewriting one internal framework that's been in use since 2002-2003, constantly expanded. I've been using it for a very long time. Redoing it from scratch now, something like 150k loc. And I decided to change my approach in a lot of things. But this part will stay the same. It's simple, fast, and gets the job done. If you aren't producing an off-the-shelf solution to be sold for use in various environments, then just stick to the basics. P.S. Also, I'm not a fan of encapsulating data access inside the object. So I don't have something like Widget.retrieveWidgetFromDB() or Widget.Builder().getWidget(). Widget is just a bunch of fields, like a struct in other languages, with getter/setter methods. And all actions happen in WidgetDAO, not in Widget. This goes somewhat against OO, but screw it. 
We're using [MyBatis](http://mybatis.github.io/mybatis-3/) for a project. It couples objects with SQL for us. Our web project structure roughly looks like this (it's based on Spring MVC): ``scr/main/java/com/example/configuration/``: contains the project configuration, including a ``PersistenceConfigurer`` that sets up a ``DataSource`` and ``SqlSessionFactoryBean``: /** * Provides a configured data source. * * @return The configured data source. */ @Bean public DataSource dataSource() { DriverManagerDataSource dataSource = new DriverManagerDataSource(); dataSource.setDriverClassName(jdbcDriverClassName); dataSource.setUrl(jdbcUrl); dataSource.setUsername(jdbcUsername); dataSource.setPassword(jdbcPassword); return dataSource; } /** * Get an SQL session factory bean for data management. * * @param dataSource A configured data source. * @return The SQL session factory bean. */ @Bean public SqlSessionFactoryBean sqlSessionFactory(DataSource dataSource) { SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean(); factoryBean.setDataSource(dataSource); factoryBean.setMapperLocations(mapperFiles); factoryBean.setConfigLocation(myBatisConfig); return factoryBean; } ``scr/main/java/com/example/domain/``: contains all domain objects, which are essentially [POJOs](http://en.wikipedia.org/wiki/Plain_Old_Java_Object). Example: public class Researcher { private String title; private String initials; private String givenName; private String lastName; // Getters and setters… } ``scr/main/java/com/example/controller/``: contains all controllers, connecting the view and models / domain. For example, the ``IndexController`` handles requests to the front page. Simply said, it retrieves a list of objects from the database and passes them to the view. It only knows about the view, the domain and the service layer. An example: public class ResearcherController { @RequestMapping( value = RequestMappingConfiguration.RESEARCHERS_URI, method = RequestMethod.GET ) public String getResearchers() { return ViewMappingConfiguration.RESEARCHERS_VIEW; } } ``scr/main/java/com/example/service/``: is the service layer. It handles requests for data and knows about the repository layer, from which it gets the data. An example: /** * Find all researchers. * * @return The list of found researchers. */ @Override public List&lt;Researcher&gt; findAll() { return repository.findAll(); } ``scr/main/java/com/example/repository/``: knows where to actually get the data (from the database in this case). It is very lightweight, since MyBatis just needs a name and uses XML to generate queries. For example, this is the whole ``ResearcherRepositoryInterface`` (note, you don't need actual implementations): @Repository public interface ResearcherRepositoryInterface { List&lt;Researcher&gt; findAll(); } ``src/main/resources/sqlmapper/``: contains all [mapper XML files](http://mybatis.github.io/mybatis-3/sqlmap-xml.html). These power MyBatis, telling it what query to fire at the database and what objects to generate for it. An example, ``researcher.xml``: &lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt; &lt;mapper namespace="org.ru.scaffoldingwebapp.repository.ResearcherRepositoryInterface"&gt; &lt;select id="findAll" resultType="org.ru.scaffoldingwebapp.domain.Researcher"&gt; SELECT * FROM researcher &lt;/select&gt; &lt;/mapper&gt; As you can see, it maps the result of the plain SQL query to a (list of) ``Researcher`` objects. Thanks to conventions and MyBatis, this is all you basically need. P.S.: Some smart people claim you should not choose either ORM or SQL, but use them side by side, each using its strength. An example is the [Command Query Responsibility Segregation pattern](http://martinfowler.com/bliki/CQRS.html).
You seem like a nice person.
LWJGL3 is currently in pre-alpha (will become alpha once GLFW release its 3.1 version) and has plans to add GLES2.0 by LWJGL3's beta version. It already uses GLFW3 so your project is already very similar, why not just join up with the LWJGL project and contribute your GLES2.0 work there and maintain its GLES part? I'm sure they'll be happy to let you do so as it'll let them focus on other parts such as Oculus Rift support, FreeType, etc. They have a whole release infrastructure setup, nightly build servers, developers who can test on each of the 3 major platforms and a large user base who can report bugs. Also since projects like LibGDX are using LWJGL and are planning to move to LWJGL3 they could benefit from you work and reach a much larger developer base. If so, best place to start is by dropping a post on the LWJGL forums to get an idea about where to start.
Definitely SonarQube... One of the best tools ever!
&gt; how come Windows still has 90+% market share on the desktop and Linux has 1.9%? I don't want to take sides here, as I'm mostly an OS X user. I do think Windows is a real OS, but I do want to put your numbers a bit more into perspective. The fact is that for the last 5 years people have increasingly moved away from the desktop towards mostly mobile devices like tablets and smart phones. A lot of the basic things that casual users do (post on facebook, watch stuff on Youtube, write a 5 sentence letter, email a little, chat a little, fill out their tax form) is nowadays done on such devices. Increasingly families exclusively have tablet computers in their household. Now what are those tablets running? Predominantly Android it seems, followed by iOS at the higher end of the market (it seems families having a tablet exclusively are mostly an Android, while iOS users often have other computing devices as well). So in that perspective you could say that it's actually Linux that's increasingly dominant in households, since the traditional desktop (big screen, separate case, keyboard, mouse thing) where Windows had a near monopoly is greatly shrinking. So while it sounds impressive; "Windows is on 90% of desktops, Linux on 1.9%", the reality is more that among casual users (which themselves are the overwhelming majority of computer users) Windows may only be used by 30%, Linux by 50% and iOS+OS X for 15% (leaving 5% to "other"). Now I don't say I would necessarily agree with these numbers. I personally would go crazy having only a tablet, but these seem to be the numbers (Google is your friend; there are many articles about this) 
If you want to use your own image stick to jenkins
good point i am... i could have asked just like him "How the FUCK can't you figure that out it's dead simple".
Ok, I hope I understood you correctly, I'll stop if I'm off base again. If you build in support for FTP, email, mail, SCP, directly into the app, and you need to create another app, you have to either duplicate the code or worse, share it in some way. Would building a RESTful service that abstracts all the various calls behind some sort of an API solve your problem? I know of a couple of large shops in my area that employ this paradigm across hundreds of applications.
Assuming you have a 64bit JRE installed, you need to explicitly use it to run the app, e.g. /usr/lib/jvm/java-7-oracle/jre/bin/java -jar MyApp.jar
That's actually not against OOP at all. I much prefer separating the POJOs from any significant logic. The only thing I'd say about your methodology is you might want to consider using DI to inject your DAOs so that you aren't tightly coupled to one implementation and you may instantiate fewer instances of the same object.
Not to mention the library is working just fine and it's only the documentation that I'm missing
Watch this video: https://www.youtube.com/watch?v=aGHzqwQU06g, specifically around the 28-31 minute mark. This company did a great job doing what it is I think you are looking for.
&gt; However that's the less important one, by far. Totally agree here. I have not heard of the null coalescing operator before, but I can see how something like that would really cut down on boilerplate code. &gt; I don't have that much of a problem in writing them but rather consuming them I agree with your example, it does seem a little more natural and readable. I guess the thing of it is that new languages will probably always do better than previous ones. I would hope they would, otherwise there's not a whole lot of point to them right? So C# came along after Java and improved in some areas where Java fell short. That doesn't mean Java is a bad langauge. I happen to find the Java community a compelling reason to stick in that ecosytem. The prevalence of tools, documentation, and a general sense of community are things that I use all the time. I guess growing up on open source software has made me always want to follow that track and Java fits that very well. The whole development process is open, the tools I use all the time are open source, and finding answers to things I have questions on is easy. Now I have never used C#, but I have used other "big vendor" tools in the past (Oracle, IBM, SAP) and I have ALWAYS found it to be more difficult to develop in their walled garden ecosystems. Help is behind a ticketing system, there is very little info available, and almost no examples to work from. So I am not sure if C# falls into the category with Oracle, IBM, and SAP, but I know that for me developing is much easier in a very open and thriving ecosystem like Java has. Also, if you're wondering if I have every really looked at open source java code, the answer is all the time. I use the site grepcode.com a lot to look into libraries I use to see why they are behaving the way they are.
Lwjgl3 is something else entirely, the aim of this project is to be a light as possible solely wrapping a single library
LWJGL3 is also very modular, change a few flags in the build file and you can set it to just build a binding for a single library (or even subset of a library) if you want. Anyway wish you best of luck with your project.
I couldn't find anything about print methods within a JTable. How does it work? About the "child tables always visible", take [this](http://www.jtable.org/demo/MasterChild) for example. If you click on either "Edit phone numbers" or "Edit exam numbers" it opens a child table. In my table, there is one child table for each record which is always visible - i.e. shown by default, can not be closed.
so Circle / Travis are both proprietary hosted solutions?
So when following that style, is it just accepted that you will have a more anemic domain model than if you used an ORM? It would seem you'd have to store any logic in a service class or something.
Yeah I like to keep separate business logic and data-only POJO classes
Most people never read my artical. I have references at the end.
I wouldn't really call it "discipline," but, yes I subjectively think you should separate business logic like validation and persistence/DB code. For something like an email address, I think it makes more sense to validate it when it enters your software as input, rather than right before persisting. 
You link is about ranking in language and we all know java is more popular than PHP but very few internet sites are built in java. I have the following references in my article. Server-side programming language statistics Usage statistics and market share of PHP for websites
For packaging, I'd like to recommend my own [Capsule](https://github.com/puniverse/capsule), which makes the npm/gem people jealous. If you have your own Artifactory, you can do some neat tricks with Capsule.
Also, check contents of the JAVA_HOME variable. It should point to the 64bit version.
&gt;but very few internet sites are built in java. I have the following references in my article. No, that's not true. Consider the following: 1. Java is one of the most popular programming languages (#1 or #2 pretty much everywhere) 2. Java is used predominantly on the server side 3. Servers are predominantly used for serving web sites Hence, Java is used by a LOT of web sites ;) Just take a look at Facebook. It's one of the most popular sites on the Internet and it uses a lot of Java. Or look at Google, THE most popular web site out there, and uses tons of Java everywhere. 
I use one to flush out ideas. I don't know why, but I can't seem to write pseudo code on a keyboard, I always just end up typing code and losing sight of the big picture. So my whiteboard is nice cause I can throw ideas up there before they're fully formed and work them through. That being said, I regularly want for a cut/paste feature on my whiteboard. It is such a pain to re write something entirely just cause I ran out of space on whatever side I was claiming at the time. Yes this actually happens. 
We use them at work for fleshing out ideas, list of things to do, jotting down points which need to be raised, explanations...anything goes basically. At my previous job I had to make do with jotting stuff in a notepad/on A4 paper, which is fine until something changes. Whiteboards just make things a whole lot easier. Side note, this is possible a question better suited to /r/programming than /r/java?
/r/programming is against text based posts. So i thought my first language subreddit would get the same response as i would get in /r/programming if i posted it here! 
I thought i might have been a little silly, due to the fact im not in a workplace. Its 1200 x 900 mm so hopefully enough for a days work before removing it aha 
I have at least 3 one a4 paper size I even carry round with me, great for jotting down ideas to help visualise what I'm doing etc
This was a great talk. Since Brian Goetz points out that understanding Generics is important, I would highly recommend reading Angelika Langer's [Generics FAQ](http://www.angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html)
 OK so as a Java EE guy I am not liking this oldschool angle. First of all @ManagedBean is outdated or rather CDI is taking over and this actually already happen years ago. Nothing in the article is fresh nor likable to me. And what's distributed in that example? As of now any published material on that subject should mention JCache etc. As a JSF example it should show some JSF 2.2 syntax and HTML5. I will have to do a writeup myself 
Do you build the document from code or use a docx as template as I did?
Would love to see that writeup from you. Indeed, an old 2.0 post with 2015 in the title, is debatable. Almost if someone wrote this in 2009 and then added 2015 to the title. I hesitated about posting it to be honest, but did so anyway because it's an extensive writeup and explains the steps in details.
What's the advantage of this over Sonatype's OSS hosting, which includes synchronization to Maven central?
Aspose is pretty powerful, if you can spring for a license. Documentation is hard to navigate though. 
EMMA http://emma.sourceforge.net/maven-emma-plugin/
My assumption is, that Lambdas are a new feature, and JVM optimization are not at the level of native loops yet. Also you use different method calls in comparison. If you use `Double::compare` you can not compare it with `d &lt; min` in performance.
That code is not ideal for benchmarking purposes. As pron98 said, use JMH. Edit: less abrupt.
I think you can end up with 100% anemic domain model with any ORM. It should be easy to use services with ORMs :) And sometimes cramming all logic in to the object leads to suboptimal code. Separating the logic based on something else, like usecases, might lead to code with better maintainability. For example, validations might be dependent on the usecase.
Dude, I am running N iterations and noting the *cumulative* time. That is how one measures time accurately and it is exactly what happens in my real world application. (I didn't just start timing this for fun.) You are probably reflexively confusing this with people who try to time individual nano-second scale method calls using dumb timers - that is not what this test is doing. The time is the wall time of N iterations... If I make N large enough I can time it by hand and its perfectly valid. The test avoids vm warmup issues and escape analysis problems. If you have a specific criticism please note it. EDIT: less abrasive.
A valid point. But switch to: for (Double d : list ) { if ( Double.compare(d,min) &lt; 0 ) { min = d; } } Doesn't make any difference. EDIT: And yes, I agree they are new and hopefully will get better. I'm not trashing Java lambdas just saying watch out for bottlenecks.
I'm not saying that you're wrong (obviously, a perfect compiler could only make the lambda version run as fast as the loop, and there aren't any perfect compilers), only that in order to see the magnitude of the problem, you need to have a good benchmark, and that probably isn't one (it requires OSR, for one). JMH is the only way to do a reliable microbenchmark (unless you're a benchmarking expert, in which case you'll also use JMH :)). As to "it is exactly what happens in my real world application", you're not giving enough information. Is that code alone slower, or is it significantly slowing down your entire application (I mean, is it a hot path that really hurts)? If you want, I can do it in JMH, but it's going to have to wait until tomorrow.
Quite importantly, where are you looking to work and what in? Salaries vary across the country and fields.
Absolutely, that is one of the goals. It's not uncommon that you want to use a library that hasn't been published yet, for example: https://github.com/JCTools/JCTools/issues/17
$60500 Phoenix, AZ
Possibly the east or south east of England as a Java developer of some kind.
That's still quite a large area, with a large salary range. Check CWJobs, they've got a salary checker on there - however it's based on what's advertised so may be somewhat optimistic.
I think that right now what you have is a gut feeling and a probably bad benchmark. Using JMH isn't digging into the implementation -- it's just running a good benchmark to see how bad the problem you think you've found is. You just copy the small inner loop and stick it in a JMH microbenchmark. The relative performance certainly matters, but until you have a JMH benchmark, you don't know what that relative performance *is*. A JMH benchmark is the only sure way to put a number to the performance gap -- it might be the same as what you have, but it might be very different. As to a good compiler producing better code than a loop, I don't think that's very realistic, because a few simple operations in a loop are the best machine instructions you can generate, and exploiting stuff like SIMD is as easy to do for a source-code loop as it is for streams. But, what you can do with streams is parallelize them (if the stream is big enough) or even run them on a GPU with [Project Sumatra](http://openjdk.java.net/projects/sumatra/).
why use streams in places where you need good performance? I wouldn't optimize places that don't need it... I don't think the compiler can magic away the class library just because it's included...
My offer out of college was 72k. But I work for a large tech company. Friends of mine made about 15k less. It also depends on which city/state
&gt; list.stream().findAny().get(); vs. list.get( 0 ); In this case stream always will be slower. It's obvious (safe premature optimization here!). I still don't know why people expect that stream API will be automagically faster than simple low-level loop :)
AUTOBOXING.
As someone who has dipped his toes into GameDev a few times, I wouldn't say it's good, but if it's what you want to do, don't let anyone stop you. That said, I'd advice maybe starting with a 2D game or two first, it greatly simplifies a lot of the problems you will run into and will be a good introduction as a whole. You also mentioned jMonkey, which I've looked at but not used. Once you feel ready for 3D, it's probably a good place to start.
I'm not arguing that Java is similar to JS or Node. I'm arguing that a person well-versed in JS and with a firm grasp of the patterns and caveats of server-side design as well as CGI overall may easily be as "useful" (qualified, productive, whatever) as an experienced Java dev in the same field.
Your project looks great. Please though, do support Gradle. We've moved on from Maven a long time ago. 
Game making in general is really difficult, thus I cannot suggest making a 3D game on top of that. This is really time consuming depending how _perfect_ you want to do it. But on other hand, motivation is the key. If you think the project will be so good, that you can stay on it without loosing motivation, then do it.
But we're talking about the opposite case, java to js not js to java. Either way I disagree. Someone well versed in JS and its patterns would still have significant overhead being dropped into a java project. From its build tools like maven and server side frameworks like spring there is a learning curve before he would be 'productive'.
Security and reliability? - That's what you have the big official repos for, but there is a need for a much more informal eco-system as well, were you can easily pull in experimental projects, try things out for your hobby builds and more. One of the reasons node.js can grow so quickly, is that npm is completely open to anyone and things can be made available in a simple and structured distribution format very easily. This is the niche we need for Java as well. 
There's nothing preventing you from using this with gradle, add it as a maven repository and use the artifacts like normal.
9 years ago £25,000 in the south of England.
I have two open position near Edinburgh right now, for a major UK company; for a recent grad with decent skills and that has made some projects on their own as OP suggests i can offer circa £30k without thinking twice. 
Thanks! Gradle builds is one of the features we want to do next so stay tuned:). And as /u/snuxoll mentioned you can use artifacts in your gradle build.
Im not a slack mrhug. I got it because my equations were also getting a bit big as well. I like projects and to experiment so the ability to rub out i think would help. Thanks for sharing :)
When I started as a grad, the company were paying £22.5k for their graduate program. Note that this was a program for developers/testers/operations/buisness/analysis - the pay structures vary by person and role once the program is complete (3-6 months depending on role). This is in Milton Keynes, so outside of a major city and the pay that goes with working in one.
Oh hang on; declare your members as public and it's exactly the same in java. At least you know if you're calling a method or accessing a member... The whole point of a getter/setter is to hide the implementation... they're a bit useless if they just return/set the variable, but in theory they could send a message accross an ESB or a database to retrieve/set the value! using getters/setters is a convention derived from OOP concepts. Nothing forces you to use them.
This would be the gradle syntax: repositories { maven { url "https://jitpack.io" } } 
We employ Java developers. We have contractors at £400/day. Recently sought a junior dev to come in-house, pref graduate, probably would have paid 30k-40k but couldn't find anyone.
It seems to me that TeaVM translates Java bytecode into JavaScript. Doppio implements an interpreter and JVM runtime in TypeScript that can run unmodified Java bytecode.
Is the position still open? :)
Thank you!
In my experience, yes. I started with JOGL though, which was a bit of a mess. I should have started with something like jMonkey.
Checkout glassdoor for the salaries in your field and area. I found their data rather accurate.
This is encouraging, thanks.
A graduate program is a kind of training program/ introduction to the company/ mentoring hybrid thing that quite a few companies use. Basically while you are in the program you are being taught about the role itself, how the company works, and probably some training courses around personal soft skills (the assumption is made that as you are a new graduate, that this is your first 'real' job since graduating) - If the company is particularly large or has many diverse roles, then you may get to spend time in a number of different roles rather than being fixed as a developer, tester etc. Then toward the end fo the program, you and your program manager will have a discussion about what you liked/disliked and what area you want to go into when you complete the program. Example if you joined with the intent of being a developer, but during the program you decided that you actually preferred and were better as an analyst, then you may well be able to go into that role instead of being a developer. They are not that uncommon in larger companies, and the seem to be being adopted by smaller companies. I hope I made sense with my ramble?
http://docxile.com/ is really simple to use. It has limited functionality but it's sufficient for most jobs (in my case).
From my experience. If you know the basics of Java and want to make games, don't jump straight into 3D games. It's a complicated process, especially when working with Java. Java in and of itself isn't the best tool for making games. If you want to make a game, start by learning the physics of a 2D game. If you can't make something work in a 2D platform then 3D is going to be almost impossible.
Like others have said, 3d programming is fairly complex and headache worthy from a maths point of view. I'd suggest starting with things like noughts and crosses, connect 4 etc, then maybe build up to creating a mario clone (or any platform game). When you are confident with this sort of game, the move to 3d will be less of a jump. By all means feel free to just jump in to 3d, but you may find easier progress, and better results, by taking a few intermediate steps along the way
Could you send a link to an offer?
I made [API documentation with demo for a website (bitcoinium.com)](https://bitcoinium.com/api) using AngularJS and Bootstrap. The backend is DropWizard. It was very straight forward compared to custom AJAX using raw JavaScript or JQuery. You can probably pull apart my HTML to see how the tables are made and populated withAngularJS. Using Bootstrap gives you a good looking layout "for free" and makes it mobile friendly as a bonus. 
You can use a jQuery based widget framework like http://www.jqwidgets.com/ It has built-in templates and you can use the Grid widget to put your JSON in a nice looking table.
Could you expand on this? This seems..exceptional.
I will have been there 3 years by the end of this year. First pay rise was after 3 months and was only £500 as it was pro rated based on I had only worked 3 months (pay rises are only done once a year, just happened to be after my first 3 months). Second pay rise (15 months in) brought it up to just under £30k, so was something like a 20% increase. I also received a promotion in that time from 'graduate' to 'developer' and did the first Oracle certification.
This is a great resource as I was recently trying to write my own annotation processor to do some simple source code generation. There is so much material out there but much of it concerns the old apt tool 
&gt; declare your members as public If you're talking about fields, then no, that's bad practice in C#. &gt; it's exactly the same in java No, it's not. Modifying a field is very different from a property. &gt; it's exactly the same in java That's precisely why you can't replace properties with fields. This is a typical property declaration in an object model generated by my end-to-end framework: private string _lastName; public string LastName { get { return _lastName; } set { _lastName = value; NotifyPropertyChange("LastName"); } } Notice that the NotifyPropertyChange() method call is used for data binding. This code is autogenerated by a tool of mine. Notice that I also still get to use a proper syntax when consuming this, but the property does it's job. If it were a field that wouldn't be possible. &gt; At least you know if you're calling a method or accessing a member You know that you're using a property (versus a field) because fields are not public.
I too have a notebook and I'm trying to get into the habit of using more. It's a large graph paper Moleskine.
£100k base, 100% bonus which is basically guaranteed, more if you actually do something exceptional. BSc Imperial College maths and CS. The company I work for hires about 10 people a year at this level. I know it's unusual, but it's not unicorn. And you don't need to be an old Etonian - you just apply like anyone else. I was placed via Oxford Knight (Google them).
Good idea but they are both unboxing those doubles for the comparison so that should be the same (unless streams is reading the whole stream many times... and as I pointed out earlier even sorting the stream wouldn't account for the difference in time).
I use code, but you can do either.
&gt; there is plenty of very impressive stuff being built on the NetBeans platform Can you show / link to any of these? I'd like to find out how they look, and how easy/hard is to create them. In WPF, for example, I have MVVM support which tremendously reduces the effort needed to create simple and complex UIs, both using "classic" UI concepts (Buttons, ComboBoxes, DataGrids, etc) and totally customized UIs such as schedule controls, time lines, diagrams, etc with the same amount of effort. &gt; and it runs equally well on Linux, Mac and Windows Nice. Fortunately I do not need to care about this because people use Windows for desktop PCs. Linux is irrelevant in the desktop and Macs are too expensive. Of course this is MY use case, but whatever. Also, I've been lately changing my desktop apps' look and feel to match the Metro design style (minimalistic chrome and focus on content, removing gradients, transparencies, etc), and introducing a lot of animations to give a more fluid feel to the UI in general. Does that platform have built in support for that?
&gt; Can you show / link to any of these? I'd like to find out how they look https://platform.netbeans.org/screenshots.html &gt; and how easy/hard is to create them. https://netbeans.org/kb/trails/platform.html &gt; people use Windows for desktop PCs Not (necessarily) in a military command and control center. Like I said before, if you want to write a home video-library management application for Windows, .NET is the way to go. Also, you need GUI for tons of IoT embedded devices. JavaFX has got you covered (see below) &gt; and introducing a lot of animations to give a more fluid feel to the UI in general. Does that platform have built in support for that? The NetBeans platform is mostly used for really important, big, GUI applications (defense, gas&amp;oil, aerospace engineering) -- it supports automatic upgrade for plugins that can be installed/uninstalled at runtime -- but you can use JavaFX for all the special-effects stuff. [Charts](https://platform.netbeans.org/tutorials/nbm-javafx.html), for example. For simple, pretty and flashy GUI apps, you just use [JavaFX directly](https://www.youtube.com/watch?v=ij0HwRAlCmo), it's got tons of animations, CSS, it's [fully 3D](http://docs.oracle.com/javase/8/javafx/graphics-tutorial/javafx-3d-graphics.htm), hardware accelerated (where possible), and runs very well on many embedded devices like Arduino and Raspberry Pi. Here's [a home automation GUI](http://jperedadnr.blogspot.co.il/2012/12/arduinofx-javafx-gui-for-home_17.html) for Arduino/RPi. 
£24,000 with a biology degree and no experience in java.
&gt; Not (necessarily) in a military command and control center Which I couldn't care less about, since my clients are small to mid sized companies, not the military. &gt; The NetBeans platform is mostly used for really important, big, GUI applications Yes. I understand that everything about java is "big" and "important", and everything about .Net is "small" and "unimportant". However my critical concern is how much effort does it take to create anything using these technologies, because I (unlike Facebook, Google, NASA, etc) have a very limited budget, time frames and I work alone. If these technologies do not support anything similar to MVVM and require vast amounts of effort to implement stuff, then unfortunately I'm not going to be able to use them, regardless how "big" and "important" they are. Otherwise I'd just be using HTML and javascript as well. **Edit:** BTW the military is pretty much inexistent in my country, because, in contrast to some countries of the world, we don't make a living off of war, spilling innocent blood and raping other countries. But that's a different subject for a separate discussion.
This matches my experience. I'm also it Milton Keynes and started on mid-20k. Personally I don't think you'll be getting much more than that unless you've got some fantastic personal projects to show in your interview.
Hmm... did you copy all of your sources into **src/main/java**? Once you do that all you have to do is: 1. Open the Main.java (or whatever you called it), 1. Click Run &gt; Run as... &gt; Java Application. (the initial run will fail with an error about **no lwjgl64 in java.library.path**) 1. Click Run &gt; Run Configurations and Main should be selected. 1. Click on the **arguments** tab 1. Add **-Djava.library.path=target/natives** to the VM arguments field. 1. Finally, Click Run &gt; Run as... &gt; Java Application (again). Also, be sure to check out [LWJGL's tutorial](http://wiki.lwjgl.org/wiki/Setting_Up_LWJGL_with_Maven). They additionally define a **maven-nativedependencies-plugin** which extracts the native .dll &amp; .so files to **target/natives**. 
The stream API allows you to easily parallelize your operations on collections. This can provide a significant performance improvement when working with large data sets. The stream API makes this as simple as replacing stream() with parallelStream(): list.parallelStream().min(Double::compare).get(); I took your JMH code and added a parallel benchmark. I also increased the size of the test data set to 10000000. On my desktop, the parallel stream benchmark is the fastest.
I got two years commercial experience in Java (but I didn't finished an university) and looking for job oportunity in EU/UK. Thanks for your link.
&gt; if you need plugins MEF has me covered on that. &gt; automatic updates There's Wix, and ClickOnce for that too. &gt; a very powerful entity framework I'm not sure what you mean exactly, but Entity Framework is precisely the name of .Net's default Data Access technology. I'm using that too. &gt; JavaFX has a markup language Yes. WPF also has XAML, which supports DataBinding. From what I can see, javaFX's databinding is based on procedural code instead of declarative markup. This is very relevant and as I mentioned before is a game changer in terms of productivity. Also, WPF has support for Data Templating, which allows me (for example) to create completely declarative UIs based on collections of different things (for instance a Diagram designer). I'm pretty sure javaFX has ways of resolving that, but from what I've read this will involve procedural code instead of declarative markup. &gt; If you're writing Windows (only) desktop apps It's also important to mention that I'm able to reuse my UI logic (ViewModels) in Xamarin.Forms, which then creates native UIs for Android and iOS, and of course in Windows Phone too which is also XAML based.
You should review your supply chain and check up on your most critical components' vendors' commercial interests. Or, you can always fork the product and give back to the community.
Both are extremely difficult in practice. So Spring drops Grails, how could the community have predicted this? Will they drop Spring MVC next? How should I find out? How should I find this out for any open source project or even commercial project? And as a simple user of such framework you don't just fork it. Code bases of such size take many men years to comprehend, let alone to really further it. Maybe a very large organisation could do this, but a small time user with barely enough dev resources to implement their product specific logic? Very unlikely...
&gt; So Spring drops Grails I'm sure you could have "predicted" that Spring is another product by Pivotal, not the company ;-) On a more serious note. You're absolutely right. My comment was more of a cynical one. But the difference between OSS and commercial products is simple: You won't skip the vendor verification step if you have to pay for licenses. With OSS, it's different.
You're right about the company. It's a bit similar to the often made mistake where people say "playstation is introducing...", where it should be "Sony is introducing..." With OSS, I found that people quite often do "research" and "verification" by polling what HN, proggit, etc thinks about a certain tech. If you look at a large selection of companies and the core tech they're using, you can quite often date that company or the product to the time the hive minds of said communities thought something was cool. As an anecdote, in a meeting with a client a few years back, when the team got stuck on GWT and Google had just abandoned it, an engineer cried: "but according to dynaCoderX and yogis23 GWT was the best thing ever and everything in Google depended on it, so they would never drop it!!!" :X 
&gt; "playstation is introducing...", where it should be "Sony is introducing..." Hm, I've never thought about it this way. I guess Spring is fine, then :) I like the GWT comparison. Well, at least there, you have Vaadin continuing support if you're doomed to use that API. At the same time, what's the alternative? AngularJS? It's also by Google and it might also be dropped any time, and I dare say the damage might be even bigger. Somehow, this makes me believe that the Java/SQL bet is still a rather safe one for the next 20 years to come...
I watched the video. Here's my thoughts on it: - He seems to be using a different application for designing the UI? I thought this Scene Builder was somehow integrated into the IDE. In Visual Studio, the XAML editor and visual designer is just another tool within the IDE itself. This is very convenient, not only because I don't have to constantly switch windows all the time, but also because the XAML editor gets to support IDE features such as refactoring. If I change the name of a UI element in XAML, this change gets reflected thoughtout the code as needed. - javaFX's concept of "Controller" is roughly equivalent to what we call "Code Behind" in .Net. The difference is that in WPF, the XAML generates a partial class and the code behind is the other part of the same partial class. Since java doesn't support partial classes you have the controller instead. - The layout system looks a little crappy. The trick he does by using a Region in between the right and left sides of the upper button area is rather hacky, and it even breaks the rest of the layout. In WPF you do that with HorizontalAlignment, and it of course does not affect the rest of the layout. There's also the concept of Docking and Stacking, which the VBox and HBox seem to be doing here. - The visual designer has a LOT of convenience. The Visual Studio XAML designer is nowhere near that. I guess this compensates a little for the crappyness of the layout system, but still I think WPF is better in this sense because I can create the same UI by writing a couple of lines of XAML, in less time that it takes to click around the visual editor and change a bunch of properties visually. - The way he creates the ObservableList to populate the listview is rather ugly and cumbersome. Last time I saw anyone using iterators and doing `while (i.hasNext())` like things in C# was 10 years ago. Is that the way you still do it in java? This is the equivalent C# snippet: //hm being a Dictionary&lt;string,object&gt; var names = new ObservableCollection&lt;string&gt;(hm.Keys); - I thought the CSS was going to be useful because you could simply grab your web application's existing CSS and throw it over to javaFX. Now I'm seeing that in the CSS file there's a lot of `-fx-XXX` kind of stuff which is specific to javaFX. This means existing style sheets are not reusable here. These styles also seem less verbose than XAML's for regular visual styling (setting fonts, padding, etc) but I don't see anything similar to Triggers, DataTriggers or Visual States anywhere here. I guess all that needs to be done via procedural code which, again, is much more cumbersome and tedious. In general, the whole thing seems very usable though. Except for having to code in java. If there was a way to target this framework and use these tools without having to keep a bucket around (for vomiting from the horridness and pestilence of the java language), I'd surely be willing to try it out. That and the fact that the video starts by showing the oracle logo, which to me is just like the satanist symbol of the pentagram. 
Continue using the project ? Presumably you chose it because it fit your needs, this is not going to change, the project will continue to exist.
In the Java world vendors cooperate on interface and compete on implementation. Just for example: There are multiple JVMs. Multiple application containers. Multiple ORM implementations.
&gt; JavaFX apps run on Windows, Mac, Linux, Android, iOS, Arduino and Raspberry PI Nice to know. However there's been this historically bashing upon java for looking uncanny and extraneous everywhere, not being able to match each OS' "look and feel" (not sure if this is the case with javaFX though). In contrast, I get native UIs from Xamarin.Forms, and I get access to Windows' stuff (such as the Open / Save file dialogs and that kind of thing). and I get to reuse my MVVM assets. See my other comment regarding the video too.
gonna go out on a limb here, and say pat probably is *a benchmarking expert*. he wrote beanshell back in 2000, years before reddit.com was even registered, which to this day is the scripting language / implementation that's come the closest to being pure java. he's painfully aware of the challenges of getting decent performance from dynamic java (not that lambdas are really dynamic, but they're one step in that direction) blindly using some framework because you don't understand how to do something yourself is maybe better than nothing. flaming somebody else for not using that framework is just a circlejerk especially when that somebody else literally [wrote the book](http://shop.oreilly.com/product/9780596002855.do) 
That looks pretty neat. Definitely going to give that a try if I find some free time this week. On topic: I also have a 'basic AngularJS' setup that I can easily integrate into a REST API. It supports all CRUD functions and displays the data in a table. It takes some time to set it up for the first time but after that it's pretty easy to adapt (copy/paste) it for other REST APIs. Benefit is you learn some JS and Angular along the way... could end up being useful one day! :)
Doesn't sound good. Or is there some silver lining? 
combine it with something a picture in EverNote for later reference and search ( if you have decent enough hand writing, mine is often too ugly ).
Considering pivotal is quick to drop support for something not making money its bad for image in my opinion. All those companies based on spring might want to be careful because in 5-10 years it won't be a big deal and pivotal will drop it.
You can use any JVM language you like. Scene Builder is a separate application. The Java IDEs (the big, good, ones are NetBeans, IntelliJ and Eclipse) have their own GUI designer. I don't do GUI programming at all so I don't know how good they are, but I'm sure a quick Google search will give you the answer.
Every standard Java API (for example -- currencies, or servlets, or ORM, or cryptography) is specified in what's known as a [JSR](https://jcp.org/en/jsr/all) (there are hundreds of them), and each JSR is created by an expert group from lots of interested parties. This process is called the JCP -- Java Community Process. It's quite slow, but it usually defines a standard only after there are a few competing implementations around (usually you have first have a few libraries, then you get a JSR, and then all libraries conform with the JSR -- if they want to). In any case, Google decided not to work within the JCP -- in fact, they never called Android "Java" (they couldn't because the broke compatibility because they didn't abide by the JSRs).
I fail to see what's the advantage of doing all that. &gt; Google decided not to work within the JCP When was that? Anyways, if the process is so slow, then that's pretty understandable. I still fail to see why is all this stuff in place, other than mere bureucracy.
The advantage is that you have, like 4 *excellent* servlet containers, and 3 excellent ORMs, all providing the same APIs, so you can take just switch your server or your ORM (to get difference performance, different monitoring tools, etc.). The JCP is also why you can take any Java program and run it -- unmodified -- on OpenJDK, on IBM's JVM, on Azul's JVM, on Atego's JVM (and others), and be assured that all APIs will be available to you and behave the same. Now, the process is necessary because like I told you once, Java is used in a very wide range of applications -- from smart cards to super computers, from embedded code running in an office copier or a medical device, to software that runs an airport. Getting input from a lot of companies is a way to ensure that you've considered many possible uses, and gives libraries a wide applicability. Of course, each library is free to choose whether to implement a JSR or not, but doing so increases your chances of adoption, because your users know that if something breaks with your library (or you abandon it), they'll be able to switch to other implementations without changing their code (without recompiling, even).
Running cmd.exe /c gives you the proper environment if you are looking for cmd-line like behavior - it's come in handy several times.
I've done it from inside executable JARs, but I admit it was with JRE 1.6.
Where is the bat file located and how are you referring to it? Absolute path ?
This SUCKS! 
What does this mean for Gradle? A lot of big projects, including pivotal's spring, use it.
i agree on the OSR, though depending on your application eliminating it may not be indicative of real world performance i like the idea that JMH can disable some optimizations but some quick googling didn't turn up a list ... have you seen anything documented ? my biggest problem has been with monomorphics - i'll add a 2nd or 3rd subclass in a totally unrelated area and performance of my app will drop off a cliff. i work around it by trying to subclass everything in my benchmarks, which is a pain 
Are there any other corporate sponsors? I always thought Groovy had the most potential as Java.Next since it had the shallowest learning curve but was quite nice once you used all it's features. Grails? well all those frameworks suck. 
&gt; "...over the last 7 years with Pivotal..." Oh really?
Is it?
Yeah, sorry I should've made it clearer that the £52k was for 1 year of experience, or at least for *some* experience. A graduate right out of uni is more likely to see jobs at the £36k end on average (so some lower, some higher).
Oh yeah. Whiteboard rules: 1. Everybody in a meeting has access to it, at any time 2. Draw circles and lines, not boxes and lines (boxes take 2-3 times longer to draw properly) 3. Make sure there's working pens of three colors available at all times. 
I find these things very hard to believe; JP Morgan (Glasgow) and HSBC (Sterling) have been trying a few times to hire me but my package is already beyond what they can offer, and I'm not working in finance; also not in London.
Honestly, no idea, but I'm certain it's within the same order of magnitude. Consider that EJB 2 was basically abandoned in favor of Spring-like EJB 3 its really questionable who is really in the drivers seat. Grails was very niche and was only meant to compete with a Ruby framework that is already passé. The comparison between Grails and Spring is utterly inappropriate when discussing economic viability is my only true point. 
No it's not cut and paste.
No, we build Spring Framework with [Gradle](https://github.com/spring-projects/spring-framework/blob/master/build.gradle). Before that, it was Ant. Maven was never used.
and what about gradle?
Post the code please, otherwise you're just frustrating everyone here with your short answers saying things didn't work.
I have a solution where the bat should be in the same folder as the jar. Hopefully you are familiar with the java file class, and this will help you: new File(MyClass.class.getProtectionDomain().getCodeSource().getLocation().toURI().g‌​etPath()); Then you get the string from the file path and append the bat gile name and make sure to include the bat in same folder as jar.
I'd like to chime in here. I *really* like swagger, and once you are familiar with the annotations, it's pretty straightforward. *However*, as it stands today, the addition of swagger to your project comes at the cost of an additional 27 megabytes to your .war. They've fixed that in the newest version (now down to about 900k), but I'm not sure when that will be officially released. Of course, I think there are also some maven plugins that builds the necessary documentation, negating the need to include anything else, but I haven't looked into those. One of the benefits of swagger (vs some of the other approaches that haven't been mentioned yet), is that it takes more of a code-first rather than contract-first approach to the documentation. (I think its arguable which approach is better in a business environment).
Thank you for the words of encouragement! It means a lot. When it does get wings there will be some tweets:)
So this is not *exactly* what you were wanting, but I wrote this snippet the other day to automate date calculations based on a string drop-down (for automatic reports for last week, last month, last year) and thought maybe this will help you get 'switch' style statements into your jasper code. hope its useful: http://pastie.org/9843468
http://bugreport.java.com/
No idea about server-side Java, but you can easily get £35k+ as a competent Android dev with a decent open source app or two to show off.
https://javafx-jira.kenai.com
Well that's entirely their own fault for buying open source software and not monetizing it correctly. Redhat has been successful at it for a while so it's obviously doable.
Also all that stuff you named means they have a massive overhead to maintain. Frameworks have shorter lifetimes than languages, Spring will disappear one day and as you said there's already plenty of viable and in some cases downright superior solutions to the problems spring solves
First, post a question on Stack Overflow (or here, but SO gets more visitors) with an [SSCCE](http://sscce.org), asking for some help understanding the behavior you're seeing. Start by assuming you, not the library, has made a mistake. What you've run into may well be a bug, in which case the links others have posted are probably where to report it. But it's much more likely that you simply don't understand why you're seeing this behavior. Before filling a bug, take the time to understand it. Not only does this prevent filling spurious bugs, you'll end up filling a more informative, actionable bug when you do, making it easier for the devs to fix your issue.
It completely depends. IT wages are all over the board. East and west coast Canada, you're looking at 60-110,000 as a career range. Central Canada, you're looking at 40-75k as a range. Move over the border to the USA and you get similar stories. Some cities pay much more than others depending on cost of living. I imagine it is much the same over there, so without knowing your target city, your best bet is just to look around.
Out of interest, do you have any suggestions on any tools for the longer running situations you describe? I have to admit to having rolled my own solution often in such cases.
They're practically the same language but with different libraries.
LOL you have no idea what you're talking about. java doesn't even have properties. Let alone advanced things like async/await.
We also like Swagger, however we do not use the annotation capability. We just manually manipulate the JSON files for maximum control. Would like to use the annotations method, but didn't want to add another dependency into the project. 
Without a degree, your best bet for landing a job is networking. Go to user groups and other public meetings led by working professionals and get to know some people. When an open position comes up you want them to think of you first. You could also get your foot in the door with an internship, but these are often for current students only. Never stop coding.
So, you are saying that with a degree you don't need to network and job will come out of nowhere all of the sudden? :)
No disrespect to Pat, but aside from logical fallacy of your [appeal to authority](https://yourlogicalfallacyis.com/appeal-to-authority), why does writing a book on BeanShell make one a benchmarking expert? And who exactly is suggesting to "blindly use some framework"?
Manually having to keep the documentation in sync with what the code actually says is one of the reasons we moved away from a home grown system. Unless you have a will of iron, eventually they *are* going to get out of synch, even if its just a small thing.
Great link, thank you.
What's your skill level currently? If you're fairly familiar with Java as a language, and understand solid OOP concepts, I'd start looking at the build tools Maven and Gradle. Then take a look at Spring (Spring Boot is a good starting point), and then Java EE. These are what you will be using on a daily basis as a professional Java dev.
Ok, sounds good. I'm still in the beginning phases of learning the language. I have prior experience(10+ years ago) with OOP concepts so it's not unfamiliar to me. I've heard of Maven and Gradle before but am not fully understanding their use(build tools in general). 
They're build automation tools, and also function as package managers for the Java ecosystem. Gradle builds upon Maven and is basically an alternative. I prefer Gradle to Maven personally, but they both end up doing the same thing at the end of the day. What language and ecosystem are you most familiar with? I'll see if I can draw some parallels.
Oh, ok. Just what I listed above, basically. Windows was the OS being used.
Ok, that's starting to make some sense. Thank you for clarifying and for your information. I'll keep moving on :)
Polite, but low effort.
Yeah, the fastest way to solve these problems (as stated) doesn't involve threads. For the I/O task, you're going to completely I/O bound unless you're doing some really heavy processing on the data. For the division task, vectorization is probably going to buy you a lot more than threading. Also, running a threading test on 4 physical/8 logical cores with 16/32 threads hurts my brain. No clue how the 16 thread run was "faster".
Cool stuff. How feasible would it be to use it as a module in another application that would feed it audio and a Component to draw on ?
This benchmark is a little flawed, Fork-Join is just a specialized executor service and parallel streams use fork-join....all that is being compared is the developer's efficiency at using each API type.
 Is that Angular setup something you'd be willing to share? Thanks.
Intelli-J ftw
[Metrics](https://dropwizard.github.io/metrics/3.1.0/) and [LatencyUtils](http://latencyutils.github.io/LatencyUtils/)
I'm gonna have to try it. I really like the use of optional.
Thank you for the info! :)
Thanks for the info, will do :)
It would be quite feasible but obviously there are some fundamental changes one will have to make to the way the visualiser works at the moment.
`safeCast()`... Yet `NullPointerException at line 3`. Ooops Better: targetClass.isInstance(candidate)
Good catch. I'm so used to null-free code now I don't remember to check for stupidity...
That's true, but it could be used for things like this just as well, and would potentially help to remove a set of errors from peoples code. Especially since you then get the ability to do things like: SubClass.class.safeCast(maybeValue).map(subValue -&gt; subValue.method()) and know that the calls will be safe.
Why do you use two different graphics libraries?
*sigh* public static &lt;S, T&gt; Optional&lt;T&gt; safeCast(S candidate, Class&lt;T&gt; targetClass) { return null == targetClass ? Optional.empty() : targetClass.isInstance(candidate) ? Optional.of(targetClass.cast(candidate)) : Optional.empty(); } I'm not convinced this makes sense though. An attempted cast to null probably *should* throw an NPE.
I only use Slick for the font.
In C#, there's the [`OfType()`](https://msdn.microsoft.com/en-us/library/vstudio/bb360913%28v=vs.100%29.aspx) method, which does similar things. So it would be interesting to add `OfType()` to both `Optional` and to `Stream`. That's probably a more sensible place to have this method, rather than in `Class`
Try using slick, its a 2d game library that runs with lwjgl. It has alot of neat features that simplify rendering and other stuff, I use it for the game I'm making. http://slick.ninjacave.com/
Suppose you have a method: public Vehicle getVehicle() { ... } Then you have a choice between: Boat myBoat = getVehicle() instanceof Boat ? (Boat) getVehicle() : new Boat(); // two calls to getVehicle and Vehicle vehicle = getVehicle(); Boat myBoat = myVehicle instanceof Boat ? (Boat)myVehicle : new Boat(); In which case it might be nicer to say Boat myBoat = safeCast(getVehicle(), Boat.class).orElseGet(Boat::new); Plus, there are other things you might want to do with that Optional, like map over it.
Fanboy activism ftl
For example: int sailCount = safeCast(myVehicle, Boat.class).map(Boat::getNumberOfSails).orElse(0); rather than int sailCount = myVehicle instanceof Boat ? ((Boat) myVehicle).getNumberOfSails() : 0;
In the case that I care about performance, I'll optimise accordingly. Otherwise, both fail the "making me care about irrelevant detail" test. But that's a Java thing: the notion that "painstakingly spelling out your boilerplate" = "plainer to read".
 Maven and Gradle are a bit like Bower, except Gradle can do testing too, like Karma, not sure if Maven can do testing.
I would not lead off that you dropped out of college. Regardless of what you think your qualifications are, you dropping out of college sends a red flag to HR for (neither of which may be true and in no particular order): 1) You barely passed some of your courses and decided to drop out. 2) You feel you have nothing more to learn and didn't want to waste your time in college. This means you may not be trainable or a good fit in a corporate environment where processes must be adhered to. 3) You do the bare minimum required and haven't demonstrated the ability to finish what you started. 4) You may be qualified for small routines and modules but you lack the skills and training to be a good developer for large systems. I would not use the term "Graduate Java Developer" not only does that term not exist, but it's an outright lie. I would use the term "Certified Java Developer" and stress the fact that you passed Oracle certifications. Unfortunately, certifications aren't worth much (thanks to study guides and memorization) but it does get you in the door. Of course the best thing you could put on your portfolio is that you went back and finished college. Since you won't or can't consider that option, I suggest you build on your working experience with small jobs and contributing to open source projects. Unfortunately for you there are an abundance of Java developers looking for work. **You will need to work harder to differentiate yourself from the rest of the developers looking for work.** Professional experience will make all the difference. Good luck. 
&gt; The stream code doesn't compile into the non-stream code. To me, this is expected; streams do a lot, and I am not at all surprised they add overhead versus the minimal non-stream version. I'm mainly comparing with C# and in that language these stream operations (which they call LINQ) are indeed handled by the compiler. In fact the language exposes them as an abstract syntax tree to a domain-specific compiler that can transform them into arbitrary target languages such as SQL if you happen to be operating on a database. As a fan of Java I'm just very disappointed that given 7 years of watching this evolve in that language that Java started so timid. 
It is quite reasonable to get null `Class` when the code is used in the context of deserialization. It would actually be quite common when the serialization is shared with a dynamic language. 
Downcasts are occasionally necessary. They're often a smell, but sometimes they're unavoidable. (For example: suppose I have a heterogeneous collection - a Map&lt;String, ?&gt; - which contains lots of different kinds of things. I can retrieve Objects from that Map by key, and must then downcast them appropriately if I want to do anything more specific with them than call hashCode, toString etc.) Given that downcasts are sometimes unavoidable, what should you do? You should check to see whether the downcast is legitimate, so that you don't get a ClassCastException at runtime, and you should specify what you will do if it turns out that it isn't (that's what the Optional forces you to do). Let's say I have a Widget that *might* be of a subtype that implements FoldsUpRealSmall. My WidgetPacker operates on a stream of Widgets; I would like to make use of this ability if it is available. So I write: widgetStream.forEach(widget -&gt; safeCast(widget, FoldsUpRealSmall.class).ifPresent(FoldsUpRealSmall::foldUp)); Widgets that can be folded up real small, will be; Widgets that can't, won't be. There is no compromise of type safety.
Old-school Java equivalent: for (Widget widget : widgets) { if (widget instanceof FoldsUpRealSmall) { ((FoldsUpRealSmall) widget).foldUp(); } }
Alternatively: widgetStream.filter(FoldsUpRealSmall.class::isInstance) .map(FoldsUpRealSmall.class::cast) .forEach(FoldsUpRealSmall::foldUp);
Spring does not have tools for doing what you're trying to do. Since you already built a tech stack (SpringMCV webapp on a app server), I think you should just build a "socket" server that lives inside this webapp. That way, things like deployment, logging, general management can be shared. Depending on what this "device" can do in terms of communication (HTTP? basic socket connect and push bytes?) I'm assuming the latter, basic socket connection and write/read bytes. Then that means you'll have to create a basic socket server yourself. You can use libraries that handle multiplexing, client management, etc like http://netty.io/ or you can just roll your own low level socket server using java.nio have fun
Hey, thanks for the suggestion. But I am not entirely sure what you mean by "merge". I can't think of a good way to automatically merge to maven projects. How would that look like - eg. what parts of the two pom.xml's should form the new one?
Has anyone been using this combination lately, what are your thoughts / return of experience, or recommended alternatives? thx
I just finished a moderately sized application using AngularJs/Spring Boot. The primary reason I used this stack was because I knew there would be a good chance I would have to support mobile + web users. This way I can reuse my RESTful backend/Angular front end for a Phonegap application as well. However, it's somewhat difficult being tied down to a RESTful web service because the architecture is so simple. I guess my problem was more RESTful api design than Angular/Spring. It can be tricky designing a "good" api for your front ends. I regulary found my self implementing several resources that were duplicates of others with minor changes (bad design). Live and learn i guess. 
Can someone explain an example for where this would be an improvement? This seems to only help when the resource has already been declared prior to the try/catch, which seems to defeat the purpose of try/catch/resource in the first place. Since the resource declaration block of the try/catch is inside the try block, you have the added benefit of catching exceptions that occur while opening the resource. Why would you declare the resource prior to the try block?
I don't understand why even during deserialization you would want to cast something to null, I think he had it right the first time and throw the npe
Spring will be just fine. For the web layer I prefer to embed Jetty - or look at using Spring Boot which can embed Jetty, Undertow or Tomcat. Springs JdbcTemplate is a great wrapper around JDBC if you don't want to go full JPA. Use what you know and the rest will fall into place. 
What I don't like about this is that somewhere, you got a reference to something and if you decide it isn't the type you need, so you silently lose it. Rife for misuse.
Since your exceptions are so specific, have you attempted using a single "catch-all" block of "catch (Exception e) { ... }" to check that you're not missing missing another type of exception that you don't have a specific block for? I can't think of anything specific because I'm super intoxicated at the moment, but that's at least where I'd start debugging. Using the "stop at exception" function of your IDE will definitely help narrow down the error. And when I was in college, stepping through a method and paying particular respect to the state of variables was essential in me "getting" programming so to speak. Good luck.
Thanks, I'll try that. I think that it has to do with the NoSuchElementException because the code from that block is printed when I run the client. The problem is it stops there instead of going back and continuing to add the rest of the records 
Yes, the first line of the file is not formed correctly, however my program is supposed to account for this, ignore it, and add the rest of the records. 
Because creating and consuming the resource might not happen at the same location.
I don't disagree with your conclusion, but the refactoring reason seems arbitrary. If your editor doesn't deal with a certain programming style it could just as easily mean the editor is lacking. You can't condemn a style because the IDE gets confused. Smaller methods is a great reason, though. 
Yes, this was my thinking too, but I'm unclear as to how to build it *inside* the webapp. That's exactly the bit I'm stuck on. I'm pretty sure I can put something together as a stand alone application, it's containing it inside the webapp that I'm having trouble with. FYI - I've only been using Spring for couple of weeks now, one of which was aimlessly completing tutorials that didn't explain the underlying principles of Spring, and so were a bit useless. **Edit:** &gt;I think you should just build a "socket" server that lives inside this webapp. I'd be really grateful if you could point me towards any resources that would highlight how to achieve this.
Yes, I'm realising that this is what I need to do. 
Thanks for the links, funny enough I was looking at Spring Reactor before I came here to post, while it looks interesting, I'm not comfortable enough with the Spring Framework to begin with, so this seems extremely heavy right now. I'll research MQTT and take a look at those links, thanks for the advice. But as I need to get something up and running straight away, I think I'll build a stand alone application to start getting data from the devices into the database, once that's working I'll look at integrating into the system as a whole. Actually, on a side note, I'd really be interested in building this system from micro-services, that looks like an exciting area to me, and in which case a stand alone application would be fine, but from what I'm reading I need to fully understand how current systems work before we can take on something like that. &gt; I am looking at doing something similar as a side project, and possibly at work in a few years, I'd be really interested to find out more about your project. I don't really want to elaborate on it right now, but I'll let you know when I can. 
I think there are a lot of ways to solve your issue. I, for one, find break and continue to be of limited use and I usually feel like something is wrong with my code if I must rely on control statements on par with 'goto'. I'm also not a big fan of the multiple return statements you have in your extracted method. 
Your pre- and post-loop logic often needs access to the same variables as the loop itself. My case for using continue or break is often not an if/else, but simply an if that wraps the whole loop body, essentially wasting an indentation level.
So break in a loop is bad and return is good... That doesn't seem consistent to me..... It seems to me that if you're going to advocate against break you should also be against return and your loop condition should be the sole exit point from your loop. Even if your loop is immediately followed by a return statement with a value assigned in the loop. It makes for a more atomic loop and makes for cleaner code that's easier to change later. Personally I use continue and break as sparingly as possible, only in very simple ways and only when it improves readability. I.e. parsing a file, there's a character designated as a comment, meaning the data on that line is not to be parsed. In my opinion it's cleaner to have a single if statement checking for that character with a continue if it exists than to have a large if block encompassing everything that verifies that the character doesn't exist or to have an empty if block at the top of an if-else-if block checking for that condition. Edit: mobile spelling mistakes....
https://stackoverflow.com/questions/11686648/can-i-multiply-charat-in-java set your variables to int, and use .getNumericValue() for A-D and it will work 
so replace char w/ int, and then for each variable for instance, A, would be "A = b1.getNumericValue();" ?
getNumericValue(char a) takes the char as parameter 
Any advice on how to really properly integrate spring security? With dynamically assigning roles to person, a roles hierarchy, making it scalable, etc?
You should take a look at [Spock](https://code.google.com/p/spock/wiki/SpockBasics) it provides a lot of stuff out of the box that your article discusses
Hope it'll help you in daily development
Yup, I don't know how many times I've brought this up in code review. Another example is with return. if(test) { return x;} else { return y; }
I'm using Lombok with no issues in several Java EE 7 projects. Netbeans is my IDE.
For example, any APP that manages data will most likelly implement the DAO (data access object) pattern. In rough terms, this separates the business logic from the data logic. An example would be to create an interface that declared an insertData(Data data) method. Then you would create a class that implemented this interface by coding your insertData method to write to a file. You'd code your code always calling the interfaces insertData and then you'd notice that text files is not enough. You'd then do another class that implemented your interface but would now use mysql. Everything in your program would be the same, but you just fixed the problem without any kind of real impact. That is most likely the most common use of polymorphism in java not implemented by java itself, but there are others. Any book on design patterns will show you quite a few. Or, you know... Every Object or every Exception (Throwable). But those are built in.
The bytecode produced (at least using javac from JDK 8_0_25, and the eclipse compiler from Luna) is the same, so there's no difference in performance.
That's a broad question and can't be easily answered specifically. Just about every Java system will make use of the standard Java libraries. Have a look in the javadocs to see how a given class, such as [Stack](http://docs.oracle.com/javase/8/docs/api/java/util/Stack.html), has superclasses and interfaces. For this particular type of polymorphism, you can see that it goes from abstract, common functionality and interfaces down to concrete classes that implement or modify the behaviour of the super classes. Using that think about the systems you are talking about and try to identify classes of things that might share behaviour. Those would tend to be things you would create a superclass for, and so on up. For a game, as a contrived example, you might consider enemy pieces, friendly pieces, pieces of the world, and create a "gamepiece" superclass that holds actions relevant to all pieces, such as draw(), checkCollision() or the like. You then realize some pieces are static and some move, so you make a new class for each of these, with appropriate methods. GamePiece MovablePiece StaticPiece Ship Bullet Wall GunTurret ... The classes at the bottom or in the middle would implement functionality specific to their type, but the game engine could just work with "GamePiece" functionality when it needed to instead of having to know if it was a ship or a wall. 
I can see supporting current AnglarJs projects but I would not start a new project with a framework that is no longer being developed.
Ever heard of using an if-then-continue? Ever heard of a filter? Your example case(s) reeks of hammer-nail. Just because you have a particular solution in mind, doesn't mean you should go use it. If you're counting things specific to boats, then *skip* over things that aren't boats! In the end, it's much more readable that way. I'd also like to point out that your shortcuts only work in a code snippet. The advantages disappear when you add context. It's kind of a hard thing to demonstrate without you providing the actual case, but I can say it with confidence based on my experience.
I fully disagree. My typical code is like this: public ImmutableSet&lt;Organisation&gt; find10ProfitableOrganisationsStartingWith(String startingWith){ // Guard if(organisations == null){ return new ImmutableSet(); } ImmutableSet.Builder resultSet = new [...]; for(Organisation o : organisations){ if(resultSet.size() == 10){ break; } if(!o.isProfitable()){ continue; } if(!o.getName().startsWith(startingWith){ continue; } resultSet.add(o); } return resultSet.build(); } How would you improve this method? Must compile on java 1.6, so no fancy new transformers and maps and stuff.
This sub is not here to do your homework for you.
Haha! I see no difference really. If you leave the else out and put whatever is in it after an if on its own, you get the same output right? Performance wise.
If you hit your friend in the face, instead of asking him politely to bring you beer, he will bring it faster. Performance wise.
But if that truly covers all possible cases then the else explicitly makes that clear and more readable and it's not like there is any performance hit (and for many applications code comprehension is more important than performance anyway). I dunno, the gnashing of teeth over stylistic issues is one of the things that irritates me in programming. 
That's not how that works.
Why yes, I *have* heard of filter: http://www.reddit.com/r/java/comments/2t5ub3/safe_casting_idiom_java_8/cnw90zm But the discussion at this point is about whether downcasts are ever necessary. The filter-based example linked to there does downcasting, too. In the end, the point of the idiom demonstrated in this post is that downcasting should typically be a partial function, and that wrapping Optional round the return type is a good way of indicating that a function is partial and forcing the caller to do something about that fact. This is not fundamentally about providing "shortcuts"; it's about encapsulating behaviour in a way that meaningfully (and type-system enforceably) communicates intent.
I think it is not purely stylistic: moving the code out of the *else* branch leads to it being indented further to the left. That helps signalling that this is the *normal* flow of things while the exception is, well, exceptional. With *else* both are indented to the same level which makes them visually more equal - which they are not because the exception is a complete disruption of control flow.
No, I mean an example of your post.
It does provide an inspection for that, filed under "unnecessary code" and that's the main point in my opinion. It unnecessary and clearer when you omit it. But not everybody agrees, some say it's more readable. 
I actually find it clearer to read with the "else", as it redundantly tells me that if the above criterion is true, this won't be executed. I don't have to read the stuff in the if block to figure that out.
I literally two hours ago refactored some code where they had multiple levels of nested statements like this, so it went out on the right side of the screen. You are absolutely correct, after removing all the unnecessary cruft I had a nice, readable method with a few guard clauses at the top and normal program flow down below, and suddenly it became obvious what the method was actually supposed to do. I agree with the point of the original article, conventions are here for a reason and heeding them can be quite important. 
/agree That codebase must be CLEAN if this topic gets an entire article. 
This is so trivial I can't believe it's worthy of a blog post.
Download and install a [Java SE JDK](http://www.oracle.com/technetwork/java/javase/downloads/index.html)
This makes a lot of sense, thank you! One question though. I can't really do char a = '1'. Wouldn't that take away the user's ability to input a 1 OR a 0? I guess what I mean is that char's a-d, may not be always 1, or always 0. Am I phrasing that correctly? Edit: Words..
This: if (cond) doA(); else doB(); is pretty unambiguous - if `cond` is true then `doA` otherwise `doB`, regardless of what `doA` and `doB` actually do. This, on the other hand: if (cond) doA(); doB(); means if `cond` is true then `doA` (and if `doA` doesn't throw then also `doB`) otherwise `doB`, is self-evidently less immediately clear. You have to check what `doA` actually does to be sure of the exact semantics. Blog author must be a Javascript developer in disguise, where this kind of nonsense is more acceptable.
Consider this option instead of your last example; This isn't that "unclean" imho. Function&lt;Person, Optional&lt;String&gt;&gt; postcodeExtractor = person -&gt; Optional.ofNullable(person) .map(Person::getAddress) .map(Address::getPostcode);
...and if you refactor the original code to return an Optional&lt;Person&gt; even cleaner.
Swift is already on the JVM. It's called [Kotlin](http://kotlinlang.org/), and it has better IDE support -- and is probably more stable -- than the Apple clone. See http://blog.translusion.com/posts/swift-is-kotlin/
Hi kjaer_unltd, I really appreciate your reply and I hope I can address it in a satisfactory way. This is a great example of clean code and it is definitely easy to understand. But I popped it into my compiler and noticed an issue. `ImmutableSet.Builder` does not have a `size` method on it (at least not in Guava 18.0). But, I still understand the spirit of your code and want to try to rewrite it "my way" (which, looking at this is not necessarily better). Here's what I'd do: public ImmutableSet&lt;Organisation&gt; find10ProfitableOrganisationsStartingWith(String startingWith) { // Guard if (organisations == null) { return ImmutableSet.of(); } Set&lt;Organisation&gt; resultSet = new HashSet&lt;Organisation&gt;(); for (Organisation o : organisations) { if (resultSet.size() &lt;= 10 &amp;&amp; isOrganizationProfitableAndStartingWith(o, startingWith)) { resultSet.add(o); } } return ImmutableSet.copyOf(resultSet); } private boolean isOrganizationProfitableAndStartingWith(Organisation o, String startingWith) { return o.isProfitable() &amp;&amp; o.getName().startsWith(startingWith); } Here's what I prefer about this: 1. The `if` statements are positive checks instead of negative (i.e., `!o.isProfitable()`). I consider this easier to read. 1. The body of the loop is shorter in length (although it is wider). You could argue either way is better. My personal preference in this situation is shortness. Other than that, I feel our code is pretty comparable and not much different from each other. 
If you need a very fine grained control of authorization, have a look at Spring Security ACLs, its made to scale to systems with millions of authorization roles. 
You probably just need a JDK installed like /u/testube_babies suggests but just to be clear- have you downloaded Eclipse and installed it, but it won't start up? What's the error message? Did you download the 32-bit or 64-bit Eclipse package?
https://wiki.eclipse.org/Eclipse/Installation#Eclipse_4.4_.28Luna.29 http://www.eclipse.org/downloads/packages/release/Luna/SR1A http://www.oracle.com/technetwork/java/javase/downloads/index.html
won't let me edit, but here is a pic of the validation prompt http://i.imgur.com/cnBYhGp.png
it will stop and return the exception, pretty much like with the return statement, but ofc you have to catch it and do whatever you want with the information in the exception, or the program will crash.
Oh yeah? Well what about: if(condA) {...} else if(condB) {...} else { throw } What then? The analogy is completely flawed. An exception isn't a dead end, it's more like a turnabout. And I'm sorry, in the given examples, I don't see any real changes until maybe the last one. The code behaves in the exact same way. I, personally, do prefer to put all exception cases at the top of a function when it has simple logic (not like my example)... but I am not under any disillusionment that having else in there is "incorrect".
 #4 will SHOCK you
This version feels like it has more magic™ and the control flow is harder to understand on a quick skim
What is not working exactly ? What do you have in the "Javadoc" window when you click on a type or method belonging to LWJGL ?
The point the article makes in a long and convoluted way is that it is unnecessary to write "else" since when the "if" part throws an Exception it interrupts the flow of execution, so it's better written as : if (x &lt; 0) { throw new Exception("X can't be negative"); } System.out.println("X is positive or zero"); More a stylistic matter than "right" vs "wrong" really.
The last code snippet does not compile.
Thanks. I stupidly thought there would be more to it. Who has time to waste writing a whole blog post about this, with all those code examples? I thought *I* was pedantic.
iknowright? it's a cold bitch world out there. Nobody stops to smell the roses anymore :[
some folks have a thing about nesting though. Like really I know a guy who breaks out in hives when he sees a nested clause that could've been avoided with `continue` or an early return. I don't know what to believe, I'm a rookie and I'm happy when I can get a code review whenever, but it's like everybody knows _the_ one true way and I always end up getting yelled at :[
OK, thanks, here's some questions I'd like some help with to clarify my understanding: I build my socket app as a standalone app, with a main method and everything. Then initialize it in the init method like any other class? like this: @Component public class SocketServer { @PostConstruct public void init() { DeviceServer server = new DeviceServer(params); } @PreDestroy public void clean() { // close any open sockets, resources, etc } } ... Or maybe DeviceServer should be a class that extends Thread , then I can run server.Start() and have my internal runnable socket classes handled in there? I don't know why I find the Spring concepts so tricky. I build a small server yesterday that spawns a new thread and hands the socket over to it once a connection is established yesterday, it works fine so far, if I run that thread in the above example instead of a main method will that work? This is what I have now: public static void main(String[] args) { Thread server = new Thread(new ServerRunnable(SERVER_PORT, SERVER_QUEUE_LENGTH)); server.start(); } So should I do this instead: @Component public class SocketServer { @PostConstruct public void init() { Thread server = new Thread(new ServerRunnable(SERVER_PORT, SERVER_QUEUE_LENGTH)); server.start(); } @PreDestroy public void clean() { // close any open sockets, resources, etc } } 
Thanks, I'm familiar with sockets, I build a small server to test things out yesterday. 
I can write an article for you. Here it is: Use Spring dependency injection! Here is how you do it: 1) Mark all classes that don't depend on runtime state as lazy components. Lazy means that they are only instantiated at runtime. This reduces startup time. @Lazy @Component public class MyComponent { } 2) Use constructor auto wiring. This makes testing so much easier! Example: @Lazy @Component public class MyComponent { private MyBean myBean; @Autowired public MyComponent(MyBean myBean) { this.myBean = myBean; } } In the example above, you can now easily inject mocks into the object you are testing. 3) Always uses Java configuration files. Never use XML. This is nice because the configuration files have all the compile time checks the other code does. Also, it is easier than writing and maintaining xml. 4) Never autowire beans (things marked @Bean) across packages. Furthermore, always qualify beans with the package prefix, e.g. @Bean(name = "my.package.BeanName"). The reason for this is that spring mandates names be unique and you will save yourself a lot of headache in the future. Conflicting bean names are a pain to deal with. 5) Never use static methods. Spring beans and components are singletons. Static methods make testing impossible because you cannot control the execution flow through the static code. Imagine you have a static method that does something complicated. Now the test of any code that uses that static method must be complicated because the complex interactions must be modeled in the tests. If you inject a Spring singleton, instead of using a static method, you can simply inject a mock and then mock out the entire complex interaction. Let me know if you have any questions. Sorry for typing this on an iPhone. 
One of the main points to emerge out of TDD is how it improves code design. The actual test is a nice side-benefit. A bit of google-fu will help you get started with TDD and it's impact on design. 
Found it to be a issue that probably doesn't occur often, please refer to my edit.
What a cool library. Thanks man!
The title makes me hate this article. Most of it is pretty much basic thread stuff.
Click bait finds its way to programming.
ITYM Function&lt;Person, Optional&lt;String&gt;&gt; postcodeExtractor = person -&gt; Optional.ofNullable(person) .flatMap(p -&gt; Optional.ofNullable(p.getAddress())) .flatMap(a -&gt; Optional.ofNullable(a.getPostcode());
Which of these statements do you disagree with? 1) A function which performs a downcast is necessarily a partial function. 2) A partial function might return \_|\_ (null, or Optional.empty()), or throw an exception (ClassCastException, in this case). 3) If we made it a checked exception, we could make the compiler force the caller to deal explicitly with the possibility of failure. But who wants to deal with checked exceptions? 4) Using Optional instead makes it explicit that the function is partial, and provides a nicer mechanism than exceptions for dealing with the failure case. What you want to do, I think, is guard the call to the partial function with a condition - if/then or a filter - that means that it is effectively total. This shifts responsibility for knowing whether the function will succeed from the function itself to the caller It's possible in more complex cases that you might have a guard that only screens out *some* of the ways the function can fail (say the implementation of the function changes to exclude more inputs), and then you are making a call to what is still a partial function on the erroneous assumption that you don't have to deal with the failure case. I think it's better in general to let the function determine whether it can succeeds or not, return a "full" Optional if it does, return an "empty" Optional if it doesn't, and let the caller take responsibility only for handling the failure case.
Why litter your code with extra calls to ofNullable+flatmap instead of map, which wraps exactly what you're doing here?
You won't believe nr 3!
(from the Javadoc for Optional: "If a value is present, apply the provided mapping function to it, and **if the result is non-null**, return an Optional describing the result. Otherwise return an empty Optional.")
Thanks for the reply !
thanks for the reply !
Do your own homework, this isn't the right sub.
There are plugins for maven for automating testing, like the surefire plugin.
Says the javadoc is not attached and shows no info/documentation.
This article was posted here yesterday: http://es.reddit.com/r/java/comments/2taihv/5_advanced_java_debugging_techniques_every/
Just tried this and no dice. Still shows no javadoc and when I open that options dialog again I see that it has reverted back to /C even after applying ///C
ChiliNachoBoozehea, don't bash something you don't understand.
I can't help it but I sincerely doubt that this kind of abstraction is really useful. Has anyone already made production-quality experience with it? Is there a need for using the same API for RDBMS and for non-RDBMS? How leaky is the abstraction? How often do you need to bypass it in order to access the features of your underlying storage?
Or you could, gasp, buy your textbook.
What kind of benefits Kotlin brings to the frontend work? I've barely heard of it..
Maybe [this](http://stackoverflow.com/questions/26327957/should-java-8-getters-return-optional-type/26328555#26328555) will answer your question about why some of this evident functionality is missing and when you should really use Optional. 
Scala, Groovy, and Kotlin all have `.groupBy` on their collection classes. case class Data(w: Int, x: Int, y: Int, z: Int) val allData = Seq( Data(1, 1, 1, 1), Data(1, 2, 3, 1), Data(9, 8, 6, 4), Data(9, 9, 7, 4), Data(2, 3, 4, 5), Data(2, 4, 4, 5), Data(2, 5, 5, 5)) allData.groupBy(d =&gt; (d.z, d.w)) Gives: Map( (1,1) -&gt; List(Data(1,1,1,1), Data(1,2,3,1)), (4,9) -&gt; List(Data(9,8,6,4), Data(9,9,7,4)), (5,2) -&gt; List(Data(2,3,4,5), Data(2,4,4,5), Data(2,5,5,5))) 
My Opinion: Banning loops will improve code quality Use higher order [Stream](http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html) methods instead.
&gt; if I run that thread in the above example instead of a main method will that work? Yep, that is one way (among many) to integrate it. Spring IOC conceptually is very simple. Just think of it as a mechanism that instantiates all your @Component, @Service, etc annotated classes and "wires" them together where @Autowired is used. It's totally awesome once you get used to it. So that means you can annotate your ServerRunnable as a @Component and have it @Autowired to SocketServer and just create a new Thread in the SocketServer.init method Why is that a good option you ask? well that means, if your ServerRunnable uses some db connection or some other shared class then you can just @Autowired them. @Component public class ServerRunnable implements Runnable { @Autowired private DataSource ds; // bonus point: properties loading via spring @Value("${server.port:9999}") private int port; public void run() { // some some database stuff // do some socket stuff // etc } } @Component public class SocketServer { @Autowired private ServerRunnable sr; @PostConstruct public void init() { Thread server = new Thread(sr); server.start(); } @PreDestroy public void clean() { // close any open sockets, resources, etc } } 
It is a modern language, *very* similar to Swift, that places a lot of emphasis on seamless interoperation with Java. You can easily mix Java and Kotlin classes in the same package, and there's no need to translate Java types to Kotlin and vice-versa at runtime. In terms of features, it's got nullable types, automatic delegation, extension methods, basic pattern matching, properties etc.. It is a "blue collar" language in the Java philosophy, but has many of Scala's features without being Scala (kitchen sink, theoretically adventurous and challenging). Those who use Scala as Haskell on the JVM have little to like in Kotlin, but I thin that 95% of Scala developers will find 99% of what they want from Scala in Kotlin, at 10% of the complexity.
There's nothing wrong with static methods if they are pure functions.
The fact that Kotlin doesn't have sum types is a pretty big difference. Having sum types **really** ends up changing how you frame problems.
[No Fluff Just Stuff](http://nofluffjuststuff.com/) is pretty good. I went to last year's in NYC and coworkers have gone to other years too. I've heard Uberconf (run by the same folks) is good but I don't have personal experience. 
I've been to my share, and given a Tardis, I'd recommend pre-Oracle JavaOne. In a more realistic scenario, the NFJS conferences are intimate and *dense*. They have the very rare feature of not having any sponsor fanfare or a trade show floor full of sales droids -- at least they didn't the last time I went. The result is that the conversations tend to be a lot more frank, to the point of being raw sometimes... and that's a Good Thing.
I've been to NFJS in Atlanta and agree - very good and free of marketing spiel.
Sum types are a concept taken from statically typed FP languages. Object oriented languages, like Kotlin, don't require sum types as they have a stronger concept -- the class hierarchy. Class hierarchies aren't quite a superset of sum type capabilities because they allow adding an unrestricted set of subclasses, but this is the *choice* OO makes re the [expression problem](http://en.wikipedia.org/wiki/Expression_problem) and overlaps with sum types in many cases. Providing both concepts in the same language is usually unnecessary, and the added complexity is usually not worth what little is gained by supporting both concepts. Languages that follow the Java philosophy (like Java, Kotlin, Dart and Go), as well as other languages that emphasize simplicity (like Clojure and Erlang) must be opinionated, and whenever faced with two approaches that largely overlap in their uses, they usually pick just one. Kitchen sink languages whose goal is to explore the integration of many approaches at the expense of simplicity (like Scala), are less opinionated will often support all possible approaches and let the programmer choose. Neither language design preference is generally "better" than the other, but each might be more appropriate in different settings.
So you think just because of them it would be nice to have another JVM language? Is there anything else you can think of that would make it interesting to have it for JVM?
SpringOne is very good, especially if you are onto the spring stack (They also have nfjs speakers and nfjs helps somehow with it) There is some conference in Atlanta that's supposed to be pretty good too in March.
I believe you're talking about DevNexus? it's put on by the Atlanta Java Users Group and I've always had a great experience there. There are a plethora of tracks and sessions, almost overwhelmingly so, and it can be hard to pick which sessions to attend. Sometimes the most popular sessions get waaay overcrowded and some of the speakers are a bit iffy.
And onto Reddit – thanks to accounts like this one here that just submit any and everything they encounter into multiple subreddits.
im4java (http://im4java.sourceforge.net/relnotes.html) may be old but it has given us no problems on a recent project that involved a lot of image manipulation.
The way $http service is used in the post is either old or bad... var deferred = $q.defer(); $http.get('/user') .then(function (response) { if (response.status == 200) { deferred.resolve(response.data); } else { deferred.reject('Error retrieving user info'); } }); return deferred.promise; $http service returns promise by default so there is no need to create promise manualy and then resolve it later when $http is resolved. return { getUserInfo: function() { return $http.get('/user').then(function (response) { return response.data; }); } } That way you unwrap the response and in controller you can again call .then() to do something with the response, also I consider good practice to implement angular httpInterceptor to remove need for manual unwrapping of every single response.data ... For example something like this [interceptor] (https://egghead.io/lessons/angularjs-using-angularjs-interceptors-with-http)
The GUI is a lot less cluttered, the icons are nicer, the colors are nicer, the context menus are shorter and more contextualized, the dialog boxes are less cluttered and organized more intuitively. I find that whenever I want to do something in NetBeans, the first thing I try (like with a right click, or finding the right setting in the preferences dialog) is usually right, or maybe the second. In IntelliJ, I often have to Google it. NetBeans just feels like a well designed, familiar, desktop app. IntelliJ feels like this foreign, very specialized thing (maybe like a music editing software), that you have to really learn. Also, NetBeans handles multiple projects more elegantly and conveniently, and doesn't require restarts nearly as often (IntelliJ even requires a restart when you change the source level in a project from Java 7 to Java 8!). But the deal-breaker for me is the Gradle support. In IntelliJ you often have to set stuff in the build file *and* the IDE, or wonder why it works from the command line but not the IDE. In NetBeans, the integration is complete. I now use IntelliJ with Cursive only for Clojure. Occasionally I try it with Java, too, but always end up coming back to NetBeans. 
http://tomcat.apache.org/tomcat-8.0-doc/changelog.html
I think I'm sold on Spring Security. We've been looking for a home for an angular app, and AD integration. 
Be sure to check the return values of the functions you call.. They might not throw an exception but might still fail. 
Thanks for the solid answer! It's nice seeing someone else prefer NetBeans like me.
Myself and a few co-workers have been to Uberconf (in Denver) 2 years in a row and I gotta say its one of the best conferences I've ever been to. A ton of information, no gimicky sales pitches/booths (hence the NFJS). Also they give out pretty good swag to everyone who attends (shirts, backpacks, etc.).
Try http://www.jmagick.org/ or http://im4java.sourceforge.net/ What do you mean when you say they are outdated? They're wrappers using the API, unless the API changes it doesn't matter how old the project is.
did you try [ULTRA_QUALITY](http://www.thebuzzmedia.com/downloads/software/imgscalr/javadoc/org/imgscalr/Scalr.Method.html#ULTRA_QUALITY) method ?
You could make a small game like Pong or something and learn Inheritance, Encapsulation and Polymorphism. As they are EXTREMELY important imo.
...and then rewrite the whole thing to learn why composition is better than inheritance
Start small, try to fork a random repo on github about java. Setup maven, hack a project, make a web crawler, or think of something awesome and then do it.
How about a raytracer? I'm currently mentoring a very bright high school student intern and I've got him writing a raytracer from scratch. Once you've got a hang of the 3D vector math involved, it's not long before you get some interesting results (a couple hundred lines of code). I'm suggesting this because it's turned out to be a better exercise than I expected, since it's touching on a number of different topics. * Linear algebra: It's all 3D math! * Threading: Speed up rendering by tracing out multiple rays in parallel on different cores. * Networking: In addition to local parallelization, trace rays on multiple computers for even faster rendering. * Image processing: The results are all written into a 2D image of some sort. You'll have to consider things like anti-aliasing, color spaces, blending, etc. * Video processing: Render multiple images with slight changes in between and you've made a video. He's learning how to manage and encode the output of his program into a standard video format (ppmtoy4m + x264). * Program organization: You'll likely want to handle a number of different geometric shapes: spheres, planes, cones, cylinders, etc. Polymorphism is a good choice for this. * 3D modeling: This is where I've been learning from my intern. We're setting most of the scenes up in Blender -- which I've never used before -- and exporting [Wavefront OBJ files](http://en.wikipedia.org/wiki/Wavefront_.obj_file). These are simple text files that are easy to parse, which leads to ... * Parsing: You have to load your models from somewhere! * OpenGL: While OpenGL isn't involved directly, most of the materials online about lighting and such are oriented around shaders, so my intern is getting exposure to it. I've been drawing comparisons along the way, as well. * Physics engine: You need to have something to render! We haven't gotten this far yet, but I plan to integrate a simple 3D physics engine, also from scratch, to provide something interesting to render and animate. This touches on ODEs and numerical integration. Here are the best two resources I've seen so far for getting started. * http://graphics.cs.cmu.edu/nsp/course/15-462/Spring04/slides/13-ray.pdf * http://www.flipcode.com/archives/Raytracing_Topics_Techniques-Part_2_Phong_Mirrors_and_Shadows.shtml 
Eh? Always? What if I only have access to an interface? Say for instance, my program only searches for the implementation at runtime? (Like when I'm using an Object Factory)
If you're a gamer, get into modding games. Specifically games that already have an API already set up (they're easier to get started in.) Minecraft, for instance, is purely a Java program and the community is massive so there's plently of material to learn from.
http://en.wikipedia.org/wiki/Factory_method_pattern It's a design scheme where, when the object is created, the exact type of object is determined on circumstances during that time. So for example I know I'll create a Fruit object, and I want to slice() it, but it could be an apple or a banana depending on a customer's request. I don't really care what it is as long as it gets sliced so I make a contract between the sub-classes and the code through the use of an interface that states that all fruits can be slice()ed
If you want to feel truly safe, buy door of real morning wood.
Make a space invaders clone. I fell in love with Java the moment I made the martians move back and forth. Space invaders is a great way to learn about OOP concepts as well, and the beauty of game programming is that you see immediate results!
I'd also recommend making hacks for games. Learn how to use native methods in Java and start writing aimbots and more.
Great work! I feel completely blind. Is there any place where a decent FarmHash documentation is? I'd like to see whether it's possible for me to write anything like this, but I only found the source (yes, it includes a lot of tests, but that's not what I'd expect from docs).
Or because Gradle is awful. It provides nothing except increased complexity for little to no gain. Maven may not be perfect (ok, understatement I know) but it's a damn sight better than Gradle. Source: I work on projects that use both and the Gradle ones are always a complete pain in the arse. In fact one has just moved from Gradle to Maven by popular demand. 
Start small - Write a small application that generates an [NFPA 704](http://en.wikipedia.org/wiki/NFPA_704) diamond (PNG, SVG, whatever) from 4 parameters. Pass the parameters in, validate them (0 through 4 for Health for example), create a colored diamond, and save it as a PNG. You wouldn't believe how many candidates I've interviewed who couldn't do this simple task. It combines basic data scrubbing, basic variable operations, some spatial reasoning (how do you position digits centered in the boxes), basic image processing (how to turn a canvas into an image), and file IO (to save the PNG). As far as a business case, we have to print the NFPA diamond on a small label to put on a container. I generate the labels based on a chemical database. 
The original Lobo Browser project is still in development https://github.com/lobobrowser https://sourceforge.net/p/xamj
I don't know how to do those things though :/
[Here](www.youtube.com/watch?v=qPRWYyl41oQ) is the first result I got from searching java tetris tutorial youtube. There are many other series like it from what I've seen. 
Then maybe you are biting off more than you can chew
Why can't you record the events the way they happen? Why need a template?
I assumed any sequence of activities within the full sequence for a day were valid with my suggestion. Just had a read of your solution which I think relies on the most common sequence being across the full day. Completely agree that yours is the right solution if we're looking for the most common sequence across the full day. Some questions for the OP: 1. are the sequences subsets of the full day's activities? 2. Can the common sequence be anywhere within the full day's activities or only from the start (ie, most common until they diverge)? 3. What is the minimum number of activities that make up a sequence?
If it's only 1000 users you don't really need to do anything fancy. Just count the occurrences of each series of events. If it's only in the 1000s and the sequences are short it doesn't need to be efficient. If you just scaled it down for the example and you are really worried about efficient, I would use a recursive method. Group users by event type. Starting with most popular event type pop current event from each list and recurse with remaining events. If there is no next event return current count for that branch. As you evaluate the remaining branches you can ignore any that has fewer total event sequences than the current best. This recursive method would be a lot harder than just counting everything and picking the best though, so if it's small don't waste your time.
It really depends on the type of development you're going into. For example are you building web services? Take a look at spring.
That depends largely on the business you decide to work for. In my experience you will have to deal with a legacy code and frameworks, especially as a new hire. New(er) frameworks may not be available/feasible for a project you are assigned to. I'll take a stab at the things you may encounter: Spring, Hibernate, Struts, JSP. Then there are a bunch of commercial frameworks, like Weblogic, Tibco, Oracle App Service you may run into.
&gt; Mainly considering server side, database, web jobs, if that helps? 
Great questions! I made quite a few assumptions in my solution. :-)
Use a TreeMap, where the key is the name of the event and the value is an integer that you get and increment and use a comparator to determine ordering.
&gt; www.youtube.com/watch?v=qPRWYyl41oQ I was looking into this series but the guy abruptly stopped making videos in the series about 6 months ago with no explanation so I didn't really want to put a lot of time into something that i may not be able to finish. 
I'd add Gradle to this list. Spot on otherwise
One more addition may be Hibernate. I've seen it a few places, but my scope may be limited.
I'd focus on JPA2 and realize that there are several different implementations. Then you can learn the details of the implementation internals. This could be because I've mainly done EE development recently.
Spring for anything on the server. Desktop apps in java are pretty rare. [Zeroturnaround does an annual survey](http://pages.zeroturnaround.com/Java-Tools-Technologies.html). Their flagship product JRebel is worth every penny.
Slf4j works on top of log4j 1 and 2 and jdk logging. Always build new apps with it.
I'm a second year cs student and have a large whiteboard covering most of the wall in my bedroom. I use it to plan what I'm doing, brainstorming, and designing object relationships, uml diagrams. Having this stuff on the board where I can see it all the time is very helpful.
Yea, that is an unanswerable question. One of the biggest strengths (maybe weaknesses from some angles) is that it is incredibly open. Almost every single thing you could want to do has a ton of different options, all along the entire web stack both vertically and horizontally. Five isn't even enough to cover single cross sections of web dev this let alone everything encompassing "Java".
Slf4j is just a logging facade. It will use whatever implementation you want. You can also redirect all the logging frameworks that parts of the code you have no control over to use slf4j. Kind of silly to use anything beside slf4j these days.
i don't know if its a framework but J2EE refuses to die
If you're really gung-ho for Java then you'll want to learn the various JSR APIs. Know JDBC inside-out along with anything that starts with JAX (ws, rs, b, p, etc.) and JSF. Learning frameworks won't help if you end up someplace that has in-house implementations, but learning the APIs (and maybe some of the most popular implementations) will do nothing but make picking up frameworks all that much easier. There's a lot of stuff in the Java world that makes life so much easier and makes Java development fun, and chances are you won't be using any of it and will instead be using antiquated bullshit like faces and soap web services. Just prepare for the worst.
You may want to consider looking at some of the cacheing frameworks/technologies out there like Memcached or ehcache. Also, look up LAMP and get acquainted with the pros/cons of it and its most common technologies.
Thank you. Seems like there are only source codes.
I'm a fan of GWT.
You'll want to consider app environment most likely, so something like JBoss, Glassfish, or IBM websphere would be good to think about looking into. With those, come Java EE, and much more. Learn some databases, such as UDB, SQL, etc. Learn some persistence APIs per the Java EE spec (hibernate, open jpa, etc). Web wise, learn how to code just a plain old jane servlet, maybe dable in wicket or something like that. Pick up web services (jax ws and jax rs are the two most commonly used right now, and these can vary based on app environment such as IBM websphere uses WINK for RS and JBoss I think uses Resteasy). Learn a framework like spring, it'll help you as well. Ping me if you have questions or need some help understanding some of this stuff.
probably you should post on /r/javascript
If you have IDEA, then you don't need Webstorm. 
Idea supports everything.
* Jackson * JUnit * Hibernate * Slf4j * Guava These are all must-know. Guava may be less important with java 8.
Check these... They are one the best starting material, very concise, and easy to follow. http://misko.hevery.com/attachments/Guide-Writing%20Testable%20Code.pdf http://misko.hevery.com/presentations/ https://www.youtube.com/playlist?list=PLD0011D00849E1B79 
10 years, 4 different jobs, mostly java, server side work. Not all are frame works but These I have used at all different jobs: - Apache Commons - JUnit These have been there for 3/4 of my jobs. - Spring - jax-rs - Jersey I'd look at a few job descriptions and see if you see any patterns forming. Also, people are not going to expect you to be a master of these things(unless they're stupid). They'll probably look for some basic problem solving ability (some code problem) then ask questions. Make sure you have your basic java stuff down. What's the difference between class and object? Does java have multiple inheritance? What's the difference between an interface and a class? Static vs non static method? static vs non static class(a bit trickier I suppose)? You might also get some bullshit trick question/riddle shit. If I get that shit, i pretty much walk away lol, but right of a school, options are a lot more limited. These questions are used for the interviewee to masturbate too, AFAIK.
&gt; It can use maven and ivy sources interchangeably and can do basically everything maven can do Only slower
&gt; possible Solution:- I am thinking of using a tree structure. That's what I'd do, too, if you are not interested in sub sequences (i.e. if you always look at the *complete* sequence). If you are interested in all sub sequences the task becomes significantly more complex.
And recently Log4j 2 superseded Slf4j: http://logging.apache.org/log4j/2.x/ 
This came up as a challenge on /r/dailyprogrammer a while ago. I did my entry in Java... https://github.com/hughwphamill/greyscale-conversion My conversion method in my luminosity converter was pretty much identical... public BufferedImage convert(BufferedImage input) { BufferedImage output = new BufferedImage(input.getWidth(), input.getHeight(), input.getType()); for (int x = 0; x &lt; input.getWidth(); x++) { for (int y = 0; y &lt; input.getHeight(); y++) { Color color = new Color(input.getRGB(x, y)); int level = new Double(color.getRed()*0.21d + color.getBlue()*0.07d + color.getGreen()*0.72d).intValue(); Color grey = new Color(level, level, level); output.setRGB(x, y, grey.getRGB()); } } return output; 
Because most project that I'm interested in that use gradle like libgdx and android studio require internet access for the gradle dependencies to work. I don't have internet other than on my phone. So that's a problem for me.
whats bad about soap webservices?
Not had any issues running it against `ImageMagick 6.8.9-7 Q16 x86_64 2014-10-19` though I can't say that is the most recent version without checking and the app in question does a full range of transforms and conversions on a high enough volume of images (20k per hour). Of course as with all software YMMV.
Jira from Atlassian https://www.atlassian.com/software/jira
&gt; Maven general grasp is a good thing to have but maybe avoid getting bogged down in the details - the builds you'll see in the wild are typically hard to maintain even for an expert, as it's hard to well-factor a maven build (no multiple inheritance of xml for example, also plugins that are useful on paper have numerous bugs, regressions are common) and where there is guidance on best practice it tends to ignore maintainability &gt; Log4J not much to it really &gt; Apache Commons or Google Guava former is full of boring stuff that can be very useful, latter is fashionable but doesn't add as much value as it thinks it does &gt; JUnit more generally, read all you can about unit testing and take a look at mocking libs such as easymock &gt; Spring or Java EE you'll have more fun if you go for a job that doesn't use these - there are flexibler, less monolithic ways of doing dependency injection (picocontainer) and config (commons-config) that won't lock you into an xml-based prison - once a smartass developer starts using aop in your spring, there's no going back edit: you are likely to score points by being familiar with java.util.concurrent, and possibly more recent stuff like akka and disruptor 
Percussive maintenance! I still have no idea why new Configuration().configure is deprecated
Much hatred here for J2EE, I've never run into many problems. Servlet and EJB 3.0 + is the business. Spring can is dangerous, guaranteed some "hot shot" will introduce AOP. Fuck AOP 
properly reigned in, J2EE is fine I find it a bit cumbersome - could be my unfamiliarity with it. But, AFAIK, Spring was created to make J2EE easier. I've got to wonder how useful of a framework is one that needs another framework to help use it. as long as you don't get crazy with spring i think you'll be safe. 
Hard to say but in my area the most common are as follows. Java EE (CDI, JSF, JPA (Hibernate Implementation)) Some other popular frameworks Spring, PrimeFaces, Apache Commons 
The only difference I've seen is WebStorm's ability to open a folder as a project rather than having to have a defined module / project.
True, but any abused technology is painful to work with. I admit the experience I have with spring was whilst I worked with the least clued up architect in the world. He really did just copy paste a lot of solutions... It concerned me
Yep, agreed. My comment was a clarification, not a correction.
Second for Atlassian products. Their customer service is great and the starter licenses let you effectively "try before you buy". We use Jira for issue tracking, Confluence for wikis and info management, Bamboo for build automation, and we're in the process of implementing Jira Service Desk for our helpdesk functions. All tied together with Crowd for single sign on and Active Directory integration. 
Agree.
this is interesting. Thank you. I'll look it up and see if I can leverage or build something for my need. 
You have two (or more) libraries / frameworks / app servers using different versions of SLF4J.
Stop spamming your website/startup all over Reddit. Check the [Reddit rules](http://www.reddit.com/rules/).
* Project Lombok (mandatory on every single Java project) * Google Guava * Slf4j * Gradle 
Any suggestions on how to get a good level of understanding of the fundamentals you're talking about? As a dev fresh out of school I'd like to get more up to speed on that type of stuff. I feel like I have a good amount of practical knowledge, but would really like to have a deeper understanding like you mentioned. Maybe a book recommendation?
I'm not even sure gavin king "knows" hibernate.
Guess I see your point, perhaps if OCaml really supported higher-kinded types it could pull away from Scala, but emulating them in either language is probably equally laborious at this point. I really wish there was a good maintained Haskell-jvm build.
That Atlassian suite looks pretty good. I'll bring it up at our daily meeting tomorrow and investigate if it serves our purposes well. I will especially be looking at how they integrate. What we're doing now just feels so disjointed. And they're all free/open source so they feel a little rough around the edges. Not that open source makes for bad products, but they can lack the polishing that a commercial product provides.
webstorm user, but not idea - my understanding is that webstorm is a lot quicker to update with javascript-specific features. i filed suggestions for some code-understanding / intellisense stuff and in one case the enhancement made it into webstorm within 2 weeks. and i know that idea lagged behind significantly in that area (for what i wanted to do, ie jsdoc annotations)
&gt;I've got to wonder how useful of a framework is one that needs another framework to help use it. You mean like Spring Roo or Spring Boot?
Wow - you really have it in for SLF4J. Nothing on that pages suggests that Log4J 2 superceded by SLF4J. SLF4J was not deprecated and succeeded by Log4J 2. Log4J 2 was just a (relatively) recently released alternative logging framework. Log4J 1.x is superceded by Log4J 2 in the sense that the makers of Log4J want people to migrate to Log4J 2.
Thanks for the reply, I'll be sure to check for updated alternatives but it's nice to have a starting point.
ah, i see. i know you don't *need* Spring to use J2EE but i think it makes it a bit more convenient by removing a lot of the boilerplate stuff. and i really like the whole auto creation of my objects - that's nice. if they'd've stopped there then i think they would have been waaaaay ahead of the curve. but Spring, like waaaaaay too many other useful things, took on a life of its own and ended up needing its own "frameworks" to simplify use. which is just a colossal failure IMO
I don't know why mod's aren't all over this... Redditor for 14 days, nothing but posts to the various programming subreddits about this "Gitcolony" I post a joke thread to the wrong subreddit and it's deleted before it gets a vote, guy's spamming all over like 6 different subreddits and doesn't seem to be getting any issues from mods...
Why on earth would anyone use xml now to configure spring, instead of annotations and javaconfig?
&gt; Their customer service is great... Eh. Tickets open for years with little to no input from Atlassian. [Here's an example](https://jira.atlassian.com/browse/JRA-3310) - nearly nine years old, with a fix already supplied to them, but no comments or slightest acknowledgement. &gt; ...we're in the process of implementing Jira Service Desk for our helpdesk functions Out of interest, have they revised the licensing situation for Service Desk? When it launched they were planning to have each user that would be reporting an issue needed a license, which for the self service approach they were promoting was an absolute joke. Don't get me wrong, I like the Atlassian stuff (both for personal and professional projects - FishEye's not one on your list, but that integrates with Jira quite nicely and gives some interesting metrics), but the cost can ramp up quickly and they're not always as professional an organisation as they ought to be.
Png files can be attached in jira tickets. It's been like that for as long as I've been using jira.
HiTask, http://HiTask.com is easy to use and very straightforward. 
Nice post, thanks. I'm curious though, is it really necessary to learn how to compile Java without an IDE. Will I ever be expected to do this? 
Nice suggestion. Maybe JOCaml? 
They changed the licensing for Service Desk with version 2 (which is a bit of a pain to update from v1) so only Agents need a license. You can have any number of people reporting issues and it doesn't affect your Jira user count. Wholeheartedly agree on the version 1 licensing being a joke. As for the support, I was more talking about the response time from issues we've logged to do with app configuration issues and licensing, which has generally been next-day response. But I agree that there are cases like the ticket you've listed that shouldn't take so long. 
now that pivotal has stopped supporting groovy, im curious as to whats going to happen to gradle
[The Java EE 7 Tutorial](https://docs.oracle.com/javaee/7/tutorial/index.html)
Trello can be used for small/personal projects.
What other game can you mod?
That sounds too much like jack off a camel 
You have a bunch of data in a warehouse that you want to perform analysis on in a business setting? SPSS. Or go learn R language. It's better suited to this than java.
Laziness.
I don't want to pigeon hole myself working on lame web-apps. Right now I mostly work with JS stuff, and it kinda sucks. I'd love to work on some really innovative projects or with some really innovative companies and I can't do that with my current skill set. So Im working on finishing my CS degree. I wish I did it the first time around; it feels like I learned everything backwards doing self-teaching. 
What do you mean by "as good as" and "perfect package managers" in this context? What are the features you're looking for but can't find maven, ivy, gradle, p2, et al?
i currently switched into computer science, my 4th year but i still have 2-3 more years of schooling. I find java super dreadful, i try to learn by myself but its really confusing and hard to understand. what should i do...
In the late 90's I was a C/C++ programmer that was frustrated with memory management and lack of safety. Since then, I've stayed with it because there are lots of jobs and the tools are great. Plus I'm a bit of an expert at it after all these years. I'm considering learning Rust as I think it will be the next big thing.
I'm guessing it's the OOP stuff that's challenging you. Don't worry, it will click eventually. Just take it one assignment at a time. If you're just learning the language without actually using it to build something, you're going to have a rough time. You say you're learning it yourself, so I don't know if there's an actual class involved. If you're getting any assignments at all for any language, try solving them in java if you're interested in learning that language specifically. Just don't try to absorb the knowledge through a textbook exclusively. Anyway, I don't know your situation so I'm basically making guesswork here. Hopefully something sticks.
I would hardly call NPM/RPM "perfect" package managers. I've run into a lot of issues with NPM not being able to download a dependency because i had a cached version and/or some random folder didn't have permissions. 
Java is what the job required. Before that it was Perl. Programming in C and Assembly is what made me a better programmer. Haskell and Lisp will be the next 2 languages I learn that will make be a better programmer.

So what's this rust you speak of? :)
I like portable and clean stuff with ton of library that actually work.
I had same problem. Mainly recognizing what Java EE covers. Probably still don't know the full answer but what I would advice u is to think of some web project you want to realize, pick some frameworks and technologies (for instance Spring, Hibernate, Vaadin and Tomcat - seems well explained in the internet) and then build it focusing not on the app but on the project structure (offered by tutorials). For me the general idea od Java EE is still enigmatic but I guess the closer you get to specific frameworks and technologies the more comfortable you'r gonna feel around the whole concept. Sorry for the syntax - i dont do much writing in english.
A job. Really, I wasn't really interested in learning Java. It didn't really do much that I couldn't with Python, C++, and other OO languages. Then Android became my mobile OS of choice and I grew a little interested. At some point, I came across a job/company/team that really interested me so I spent a little time learning basic Java and applied. Still pretty new to it, feel over my head most days, still learning a lot about the libraries (both Java API and popular 3rd party) and a long way from being able to do what I want without needing a lot of references -- but little by little I am finding Java to be pleasant to work in with good tooling. That said, I've found that the tools I use are far less important to me than the people I work with and the things that are made. Java is used pretty broadly and will allow you to work in many different industries, affording you many opportunities to find a company/team you like working with.
Packages are easily searchable on npm.org and all are hosted on Github.
Search: https://search.maven.org let's you search easily enough, and covers most of what maven/ivy/gradle will be looking for. If your build goes outside of those repositories, you'll have config for them and most likely a repository manager on the other side which will still let you search (eg leiningen and clojars.org) "all hosted on github": not necessarily - a couple of quick searches show code hosted on [bitbucket](https://www.google.com.au/webhp#q=site:bitbucket.org+package.json), [google code](https://www.google.com.au/webhp#q=site:code.google.com+package.json) and even [sourceforge](https://www.google.com.au/webhp#q=site:sourceforge.net+package.json) which provide node modules (no idea if they're actually published to npm). If anything, that *most* modules are on github is more a sign of the times (npm evolving in the github era) than anything else. 
This is the most ridiculous reason ever. Grade does not require internet access, the resolution of your dependencies do. Having moved a rather complex project from Ant, and Ivy to Gradle was labor intensive, but the benefits that Gradle offers are tremendous.
Oop is a little hard to understand just by looking at code. I made my understanding of it when drawing towers for a tower of Hanoi game me and a friend were making an assignment. When we made a new tower object and just passed the location of the pillars it all clicked for me. 
It was 3.5 years ago and I had about two years out of school. I worked at a tiny non-tech shop where I had done a mix of .NET and Java. I was contacted by a recruiter and was so excited they picked me (so naive). I nailed the phone screen, nailed two of the interview questions, stumbled through one, and bombed one. Side note: whiteboard interviews suck. Getting rejected sent me on a learning spree. I wanted to find better ways to solve the problems I was given, I wanted to branch out and learn new libraries and technologies, I wanted to have more to show on my resume. I started working on a lot of open source projects around Android and Java. Haven't looked back since. Google occasionally follows up with me. Maybe I'll try again someday, but I'm happy where I'm at now.
What were the problems you were asked to whiteboard?
The only one that I remember: * Sort a list of random characters (a-z). * The list is now infinite. * The characters, their count, and their order is now custom. The question is done progressively. You're given the first part and have to solve it (with discussion) before receiving the next part. Since you're writing code on a whiteboard and pausing for discussion, it takes about an hour.
language agnostic?
lol JavaScript backend
How so?
You can work on interesting projects without a lot of skills or experience. You just have to be willing to take a significant pay cut. There are many companies who have amazing projects like utilizing AI or doing video processing, but they can only afford to pay roughly $20 an hour. Don't go looking at big companies, go find the company with 2-10 employees. The future of these companies is very unstable, but in the time you spend there, you will learn everything there is to know about creating software (quoting, planning, setting up a server, designing a database, creating back ends, creating front ends, testing code). You also get to use interesting languages as these companies will not have vast amounts of internal/legacy code. So you will usually have a voice when it comes to making those kinds of decisions (maybe the new server should use scala instead of java, etc).
This is [bug 421383](https://bugs.eclipse.org/bugs/show_bug.cgi?id=421383) "Scaling issues on high DPI displays". Vote for the issue to (maybe) raise the priority.
What hum_ph said. Also, if you specifically want a package from github whose owner did not publish it into any repository, you can easily use https://jitpack.io/ which does just that - lets you define a maven dependency from any github project.
It's a systems language (like, say, C++), so it can (at least in theory, but the current results are promising) deliver performance on par with C++, and it can run without runtime (no gc required). The compiler checks memory access semantics using a simplified ownership model, which allows one to write low-level concurrent code without worrying about data races. There's no null (yay!), the language has OCaml-style pattern matching built in, the type system has traits, but (as of yet) no inheritance. Everything is quite explicit, which sometimes makes for wordy programs, but also good locality – you don't have to look at many places to see what a specific piece of code does. Unit testing and benchmarking are built into the language environment. A REPL (Read-Eval-Print-Loop) is available from a third party and presumed to move to the core distribution in some reasonable time frame. There are no IDEs as of yet, but the first parts (like code completion) are already working. The community is vibrant, friendly and very helpful (even in comparison with the already great java community). Despite the fact that the language has not yet fully stabilized (though they're getting there in a few weeks), a good number of interesting libraries have appeared. The people at mozilla and the greater Rust community have some great engineering chops, too (though I think that they are more than evenly matched by some great people in the java community). So when you want to learn, it's a good place to be. As you can probably guess from my comment, I'm also working in Java at the moment, and attempt to learn rust in my spare time. Once a full-fledged IDE appears, it will be a joy to work in.
What motivates me to create with Java is the same as what motivates me to create with X (for any value of X). What you create is more important than what you use to create it. * I'm curious to see my creation * I like to learn to keep my knowledge portfolio up to date * The java community has some pretty clever people, so this is a good place to learn from engineering greatness * I use java at my job, so it's also about money
SLF4J once broke that promise in one update (I don't remember the exact version numbers). Perhaps you have noticed that quite a few libraries have their own logging facades, and users choose to use SLF4J, java.util.logging or Log4j, (e.g. http://docs.hazelcast.org/docs/3.4/javadoc/com/hazelcast/logging/ILogger.html, http://docs.hazelcast.org/docs/3.4/javadoc/com/hazelcast/logging/Slf4jFactory.html), this suggests that people does not trust SLF4J (for a good reason).
Eclipse has its own compiler that handles incremental compilation. You can make IDEA use it BTW http://blog.dripstat.com/post/103658392234/why-you-should-use-the-eclipse-compiler-in
I'm sitting in the same boat as OP. Gotta make a small online bookstore for college with a friend. We've already designed/mocked-up the front end and he wants to implement it rudimentary in PHP and Javascript using free themes, while I want to try and make a back-end. I see the official oracle/sun tutorial recommended by you covers exactly this, a book-fricking-store. So thank you. If you know a good addition to it or advice on what JavaEE-related aspect about a bookstore could be interesting to cover more than in that tutorial, please let me know.
Yeah thanks I did try that already tho and it did not increase run speed unfortunately :( It's not the compilation that is the is the problem here, it's just that pressing "run" takes too long I think. When I press it 4 or 5 times there is no need to compile/make anything, still it takes "ages" (5 seconds) in IntelliJ whereas in Eclipse it's 1,5 seconds max.
Try disabling an antivirus. Report a bug. Which version do you use? Have you tried latest EAP? What makes you think that 5 seconds for 'hello world' is a feature?
Compiler is not the problem, start of a new build process is. New IJ preloads build processes so the speed is little better, but there is no way how to really optimize it, unless you fix it yourself and keep those build processes running... https://youtrack.jetbrains.com/issue/IDEA-128944
Android platform motivated me to continue with Java. Or else I would have probably stuck to C and maybe somehow would have gone over to Objective C (not my favourite syntax).
That is *probably* exactly what I'm talking about. Good thing someone already made a bug report ^^
Then report a bug. edit: what is wrong on reporting bugs?
Well, the issue I linked is done, you can check your logs... j.compiler.server.BuildManager - Using preloaded build process to compile D:\workspace\_projekty\xxx lij.compiler.impl.CompilerUtil - COMPILATION FINISHED (BUILD PROCESS); Errors: 0; warnings: 0 took 31 ms: 0 min 0sec 
What is FP? 
The realization that the better I got at it, the more I enjoyed it.
The C++ FAQ is an amazing resource, but there doesn't really need to be an equivalent for Java. By that I mean that Java does not offer nearly as many ways for the programmer to fuck up as C++ does. There are certainly a lot of best practices you need to learn, but they are mostly agreed by everyone, can be found in the official documentation and most third-party books, and are enforced by compiler warnings and/or realtime checks in the better IDEs.
To OP: could please try to disable firewall and anti-exploit software on your system? I remember having similar problem with IntelliJ and disabling firewall helped a lot. 
Some pointers for you: * Understand the foundations of data structures and computer architecture: This is often overlooked, but you wouldn't believe the amount of professional developers that don't know/understand/remember fairly basic concepts of the tools they work with. I'm not talking about "write an AVL tree from scratch" or "write a merge sort from scratch". I'm talking about "learn the difference between a LinkedList and an ArrayList", "learn how floating point/integer math works", "learn why a HashMap has almost O(1) lookup"... it's not just theory: knowing these things will help you write better solutions, and on the opposite side, you'll never write good solutions if you overlook basic things as these ones. * Learn how to do things "the right way" instead of accepting the first implementation that "does the trick". Also, try your best to understand the reason some practices are considered the "right" ones. This is: **learn about best practices**, and learn when (and why) they do apply. * When implementing something, try to **give everything a twist to make it better** (there are many tastes of "better": faster, more extensible, leaner/more efficient, more readable, easier to maintain/debug, etc) **but know when to stop**: an overengineered system can be as flawed as a poorly engineered one. * Before implementing something, try to think in small boxes (modules) that implement one area of your system right, make a mental exercise to know what options you have for each of these modules, find pros/cons for them and keep your options open by decoupling implementations (**use interfaces!**) * Learn about proper encapsulation and unit testing. * Learn your tools: your language, your IDE and the most important tool of them all: **your debugger**! I suggest you read a book that really helped me and my teams as a programer/developer/tech-lead/architect: **Code Clean** by Robert C. Martin ("Uncle Bob")
Now it's $10 for 1-3 agents and $1500 for 4-5 agents. :S
Sounds about right. The documentation may be a bit better now, but those classes always feel old school when I come across them...lots of relationships between state and behavior that aren't fully encapsulated.
Last time I had looked at it, it appeared kind of incomplete. I think they updated their website quite a bit recently, as it looks much more solid now. I will give it a peek. It really is a cool idea, especially if it interoperates well with existing Java code. EDIT: I played with it a bit this morning and it's surprisingly not too bad. They even have an eclipse plugin. That being said, I didn't do anything to evaluate it's performance, but given that its running on the JVM it shouldn't be too terrible.
There's always money in the banana stand...
what language did you start out with?
Same issue here ever since I started trying to switch, a few versions ago. Its really painful on large projects. What takes a second or two in Eclipse is 10 or more on intellij. Ive sort of just adjusted my programming style to build and run less often :( 
Thanks for this! I recently switched to IntelliJ from Eclipse and I've been either fixing all the errors or commenting them out. This is so much easier.
You should know about Apache Commons: http://commons.apache.org This will save you from reinventing several wheels.
It is simple, but you skipped the first part, the writing on the whiteboard part, and the discussion. Also the pressure of the interview :) You have to refactor your first solution into the counting version. Whiteboard refactors suck! Also I had to write the code that prints the result back out at the end. The 3rd part is a custom dictionary with a custom order. If I pass in "zj*J@#KA(G" then you need to sort the infinite stream (of only those characters) in that order. None of this is crazy hard. It's not meant to be! A good interviewer knows that the solution is (mostly) irrelevant. It's your approach, problem solving techniques, and ability to reason and justify decisions. I've had a few candidates bomb the solution, but do all of the aforementioned things perfectly which saved their score.
`public static void main(String[] args) {}` I forgot it once. Never again.
Oh thanks! Unfortunately I have not been able to get it too work yet..
The controlled environment, compared to C/C++. Tracebacks are so much easier to get, meta-information about your program is more easily available, reflection, array bounds are checked - and yet it still runs comparably fast in most cases.
I think this will change with bigger code bases. Eclipse has it's own compiler, and once you have something large you are going to probably have maven or gradle build scripts. I know with gradle you can do things like parallel execution which can speed up build times considerably. However, I'm not talking about hello world, I'm talking 10k+ line projects with 50+ files, and I consider that a small project. Eclipse seemed to just break a lot for me, and I like using build scripts to ensure support and uniformity between releases.
A group of people work in a system from zero. Some of them barely know each other when they begin. Some of them are in the same room. Some of them in another continent. They have different design ideas, different skill levels. Some leave the project just when it start, some in the middle, some once is finished. New people (again, with different skill level and design ideas) came to the project. Of course, the is no documentation, no guidelines. Maybe not even unit tests. At one point none of the original programmers are working in the project. Some of the original libraries were replaced, because newer/better things appear. Some of the oldest libraries somehow survive. The compiler itself has been updated a couple of times. Some parts of the program are not being used at all. New functionality (that has no relation at all with the original functionality) is added. Some parts of the program are even made in new languages. The system manages to work, without serious interruptions, year after year. Bugs are found and fixed, of course. Java programs (maybe because the lack of some advanced features) are incredible tolerant to human interaction, time, changes in other systems, changes in team composition, bad management, inflexible design, unplanned changes in scope, etc 
&gt;Get a~~n~~ Solid State Drive ~~drive~~
Technically, my first language was some flavor of BASIC, I think it was QBASIC, but I was around 10 and didn't do too much with it. The first I really did anything serious with was Object Pascal and then Delphi. I learned C and C++ pretty early on too.
This, and (at least where I live) there is a huge demand for Java developers
isn't the problem with just throwing a new runtime exception is that it doesn't preserve the stack trace 
All good. No worries.
It is actually correct to say *an* SSD, since it is pronounced ess-ess-dee. The pronunciation starts with a vowel sound, so an should be used rather than a. For example, you would say 'an hour' rather than 'a hour' because hour starts with a vowel sound even though it doesn't start with a vowel.
I certainly agree that all build tools suck, however, I've had great success moving a build from maven to gradle. A clean build on maven took 12 min, 36 seconds. Moving the same code to a gradle build (which took a couple hours) brought that clean build time down to 9 minutes 3. The big improvement was in the non-clean build though. With just a couple minor changes to source, the maven build without a clean took around 6 minutes, and the gradle build took a minute and a half. That kind of blew my mind.
That's actually not a terrible thing. Being more careful and considered with your code can be a good thing.
&gt; attributed to it's growth, adoption rate and popularity? Political reasons: Development of A Java implemention by Sun in the late 90's Adoption by IBM as the implementation language for its enterprise platform WebSphere The Apache Software Foundation Aquisition of Sun by Oracle and the re-engineering of a large number of Oracle Enterprise platforms rewritten in Java. 
I suppose if an arraylist is backed by a simple array[], a map is likely backed by an array[][] ([(hash value)][(array[])], it makes sense that reading that map would be more expensive. Now adding and removing things from it is probably faster than an arraylist, especially if you are doing more than just added on to the end of an arraylist. And as far as which to use, unless you are iterating over them millions of times, I'd choose the one that fits your needs. Do you need uniqueness, better to use HashSet, if you need order, use ArrayList. If you don't care about order or uniqueness, things can be a bit trickier to pick the best one. Are you going to be removing and adding a lot of entries, or just appending to the end, or is the collection "final"?
So it is An html page or a html page?
Benchmark it for yourself.
 &gt; SLF4J once broke that promise in one update (I don't remember the exact version numbers). I think it would be useful if you would cite the exact version number and references please. The SLF4J FAQ includes this entry: *http://www.slf4j.org/faq.html#compatibility* ... **To date, binary compatibility in slf4j-api has never been broken.** ... The FAQ entry goes on to state (as I explain in my earlier post) that the API jar version and the backend implementation version must match (at runtime), which has always been the case. --- &gt; Perhaps you have noticed that quite a few libraries have their own logging facades ... this suggests that people does not trust SLF4J (for a good reason). Please see **http://blog.takipi.com/githubs-10000-most-popular-java-projects-here-are-the-top-libraries-they-use/** from Nov 2013 (and I highly doubt much has changed in the 14 months). SLF4J API was one of the top 2 most used libraries, tied with JUnit, by a large margin from other popular libraries. The article concludes that *"It seems that Java GH developers have fully embraced a decoupled approach towards their logging engine, and have standardized on slf4j to do so."* 
Maven's UI is terrible and the packages are indexed strangely. Either that or there aren't many useful packages available.
Hi /u/peterprank, thanks for your patience - let's try to investigate this issue (you may need a few minutes to spare). First, please make sure you're running IU-139.1117 with a plain Java Hello World template (File → New Project → Create Project From Template → Java Hello World). If you are running the latest EAP, then [IDEA-128944](https://youtrack.jetbrains.com/issue/IDEA-128944) is probably *not* related. But first, let's see the log (Help → Show Log...) - we're looking for [these lines](http://www.reddit.com/r/java/comments/2ttqtx/grrrreclipse_is_still_faster_than_intellij_run/co29hve). Next would you help us capture a [profiler snapshot](https://intellij-support.jetbrains.com/entries/29983118-Reporting-performance-problems)? If you are unfamiliar with this process, I'm happy to help you through it. You will need to create an issue on YT with the snapshot and attach your log - once this is done, PM me and we'll make sure that it's sorted out. Thanks!
Not so much a library that implements user management as a subscription service where you pay to outsource user management...
They're used for completely different purposes, stop trying to optimize prematurely and use the right tool for the job. What are you trying to do in your code?
I care because your question makes it sound like you're totally new to Java and I want to help you. Uniqueness is a pretty big deal when it comes to storing data in a collection. Performance is NOT the primary concern when choosing the right tool for the job. I don't care that you care about performance, I care that you think it matters what the iterate() speed difference between an ArrayList and a HashSet is when you would never be picking between the two in any real world scenario.
Good luck then.
This 1000%! When I was meandering through college not knowing what to do with my life, I took an intro programming class with a very supportive instructor. I spent a lot of time at his office hours learning from him. That was over 16 years ago, and to this day, it's what I do for a living.
Does anyone actually use UML in a real-world job? I have yet to see it in the wild 
First, I agree with everyone else that it's unlikely to make a difference in low-volume applications. As they said, choosing list vs. set usually has more to do with the use case than with performance. However, it's useful to know that very generally speaking, the order of performance of iteration from fastest to slowest goes: 1. arrays 1. array list by index 1. array list by iterator 1. hash set Primarily, that's because you're adding more overhead to the iteration each time. Array access has minimal bound checking imposed by the JVM, array list index actively does range checks on each get call, iteration over an array list adds the overhead of an iterator object, and hash set iteration must iterate all buckets and collision chains in the backing map. A secondary impact on performance will be memory locality. Modern hardware is designed to rapidly iterate over adjacent memory locations. Both array and array list are cache friendly during iteration, while the hash set must chase pointers all over memory. Note that if you want decent linear iteration performance and need uniqueness (although it sounds like you don't) a good compromise is often LinkedHashSet.
This article talks about doing all these operations with multiple threads on wrapped synchronized hash sets and arraylists. I don't believe this is a valid benchmark to judge how these data structures perform. What problem are you trying to solve exactly?
&gt;They have their strength and weaknesses, but both are collections. And a lot of people use either/or. Yes, but they are not at all the same type of collection. If you need unique items only, use a Set. If you don't, use a List.
After using the android development studio, I'm definitely staying with Eclipse. I haven't felt a single advantage using an IntelliJ based platform.
Where did you do your tinkering? 
This, as well as any tutoring services the college makes available. If you're just looking for an easily understood Java book I've been reading through [this](http://www.amazon.com/Head-First-Java-Kathy-Sierra/dp/0596009208/ref=sr_1_1?ie=UTF8&amp;qid=1422423085&amp;sr=8-1&amp;keywords=head+first+into+java) book and it's a very approachable book.
Use ArrayList if you have list data. Use HashSet when you don't want to store duplicates and order doesn't matter. Never use Vector. It's an embarrassing relic from when Java didn't have ArrayList.
1.5 seconds is an eternity. your computer doin alright?
I think he was just pointing out that the word drive is redundant. e.g. check put my CPU unit. Or my RAM memory.
Touche', you have a good point 
* Dev guidelines * API * JVM I personally think Java is really good at imposing things. That forces you to think twice and to question why you're doing things one way instead of another. That being said, I never touched .Net, so I can't really compare.
See: https://docs.oracle.com/javase/8/docs/api/java/time/Clock.html &gt; The returned instants from Clock work on a time-scale that ignores leap seconds, as described in Instant. If the implementation wraps a source that provides leap second information, then a mechanism should be used to "smooth" the leap second. The Java Time-Scale mandates the use of UTC-SLS, however clock implementations may choose how accurate they are with the time-scale so long as they document how they work. Implementations are therefore not required to actually perform the UTC-SLS slew or to otherwise be aware of leap seconds. Fun fact: An employee at a governmental testing facility once told me that when testing traffic flashers (those that take a picture of your license plate when you drive too fast), the leap second is something that's almost always forgotten by programmers.
I hope a Y2K15 bug frenzy is created around this. It's good money...
Leap seconds have happened many times before in the history of Java, so not sure what is special about this. 
You are right, but this is the first leap second in the history of the Java 8 Date Time API.
I actually remembered reading this once. Thank you for reminding me. But I find it kind of a rough edge.
Java *the language* wins by erring on the side of being conservative – the less surprises, the better. That isn't to say that the language doesn't have its ugly corners (every language does), but for the largest part, the language is very *dependable*. Then there is of course the *JVM*. Oracle has some world-class engineering force (I'm looking at you, /u/shipilev) that publishes one of the best VMs on the market today. Not only allows it for great performance, it's also *very* manageable, which is a boon for operations. Finally, there's the wider *community*, which you partially see here on /r/java: Very diverse fields and interests, a lot of good coders who create valuabe third-party libraries, from which java benefits immensely.
Threeten (the Java date time api) is several years old.
&gt; SLF4J API was one of the top 2 most used libraries, tied with JUnit, by a large margin from other popular libraries. Using SLF4J is one thing, _only_ using SLF4J is another thing.
[Quoting an older post of mine in a similar thread:] If you prefer watching videos instead of reading, this is a very good Java course: [http://www.youtube.com/view_play_list?p=84A56BC7F4A1F852](http://www.youtube.com/view_play_list?p=84A56BC7F4A1F852) It's "Programming Methodology" (CS106A) at Stanford, lectured by Mehran Sahami. Course Description: &gt; CS106A is an Introduction to the engineering of computer applications emphasizing modern software engineering principles: object-oriented design, decomposition, encapsulation, abstraction, and testing. Uses the Java programming language. Emphasis is on good programming style and the built-in facilities of the Java language. It's an introductory course so you do not need any previous experience of Java (or even programming in general).
As others have said, it won't. If you need a library that supports them, go for https://github.com/MenoData/Time4J
I am definitely reporting it and have been doing so for a while, have 6 or 7 tickets of all kinds on the early IDEA 14. "Trying" is in fact an act of respect. Before filling a bug I wanted to make sure it was not any config I was getting wrong. And as it looks like, it's not. BTW don't be a jerk for no reason man, go fish or something... ;) 
The author of this article is a moron. For example: &gt; Gradle build files will be programs. For someone other than the author to understand them, he or she must mentally compile the file and follow the logic. Wow, a software engineer must understand what a program does just by reading its source code? How could they possibly be expected to do such a thing?!
Someone please forward this to the Eclipes devs for their next release. White scrollbars against a dark theme is death to my eyes (among the other eye sores such as grid lines) 
Imho those would only use a simple millisecond timer for the intervals, and would use a standard clock module for ingraining the date into the photo. If the latter forgets a leap second, nothing is lost.
I won't name the awesome community since its a byproduct. 1. Relatively simple syntax means its easy to read and debug yours and others code - you're shoehorned into the same style without sacrificing too much in terms of personal style (this is a hard balance to strike!) 2. Static typing allows for amazing tooling, whether creating or debugging as well as performance and optimization. I like the vm aspect since it also enhances security overall.
[Absolutely](http://xkcd.com/292/)
Imagine synchronizing on an instance of that anonymous class. What monitor would you choose if the class were optimised away? That's just one example.
&gt; Actually, it uses anonymous initialiser blocks in top-level classes, which is not the same sort of evil as the HashMap example given here... Exactly. But the problem is, you might get used to the technique and then, boom!
Same with me, but I coded for Bukkit which is a Minecraft server mod with an API :D Switched then to Android.
In this case, there would still be an actual `HashMap` instance.
"Joe Camel" I see what you did. for foreigners: Joe Camel is an iconic cartoon camel mascot for Camel cigarettes that was popular with children. 
Wouldn't laziness help the GC by reducing allocations for unrealized items? Guess it comes down to how efficiently they can represent thunks. This would actually be an easy thing to investigate with javap. Maybe I will take a look later.
I shot too quickly
Thank you, that was very motivating! EDIT: I'll be sure to check out the tutorials as well!
Nope I'm talking about Java EE here...
Very much a hands on learner, visual learning comes in a closed second, so watching things is definitely easier than reading! Thank you for this; I'll definitely be giving this a try as well!
It's a build script, not the application you are shipping. It also has the advantage of its only prerequisite being Java, as it can download, cache, and run without having the user download it. 
Ecosystem. IDEs are fantastic, libraries are amazing, Java is kind of boring as a language but you can do jython, jruby, scala, groovy, clojure, etc. Basically, it's a rock solid platform, and the core java language is, while a bit more verbose, very basic. It's not hard to learn it well. 
Good point, I think I will add this feature. Thanks :-)
Developers are users as well. I have better things to do than wait for Gradle to finish whatever it is doing, it even makes C++ builds feel bearable. 
Very thorough tutorials, thank you again!
Why don't you just fire up the Eclipse Marketplace, search for Maven, then try to install it. If it is already installed, you will be given the option to Uninstall. If not, you are ready to install! 
&gt; For erlang, the strict separation of shared memory allows each process to have separate GC collection phase, making it easier to reason about GC pauses and realtime issues. Almost, but not quite. The problem is that pretty much every serious server-side software requires shared mutable state -- even Haskell programs. Some of them just push this responsibility to external processes (DBs, written by others), but then those DBs become even more crucial, and efficient DBs cannot in general be written in languages that prohibit mutability (immutable data structures will always allow at most one concurrent writer, which is unacceptable for shared data structures). Which is why Erlang provides ETS, which is used all over the place, and requires manual memory allocation. Java gives you a global GC which might introduce global pauses, but this is precisely what makes concurrent data structures possible and efficient (Java has the most advanced concurrent data structures in widespread use). Also, the JVM is *much* more performant than BEAM, and its GCs are state-of-the-art (including commercial GCs that are pauseless, as well as hard real time GCs with worst-case guarantees, used in safety critical systems). Now, don't get me wrong: Erlang is super brilliant, but bringing its advantages to the JVM benefits everyone. The only difference is a higher chance that an actor might influence another in unwanted ways (even in Erlang this chance is &gt; 0), but given the advantages of super-efficient concurrent data structures and much better performance, this is a tradeoff many will be willing to make. &gt; I've never seen heard that sentiment anywhere. Pretty much every language designer from the 1970s on has been very well familiar with HM, and yet it has only been adopted by a research language family hardly used in the industry (ML) and a mildly popular language that doesn't really enforce any strong typing constraints (Scala). A subset, or a whiff, of HM has been used in Rust, where I think it has been put to its best use to date. All of the creators of languages you know from the last three decades have been at the very least aware of HM type systems, and pretty much none of them have decided to use it other than those designing research languages. &gt; Yes coping with monad transformers is an extra burden as monads do not compose, while not beautiful it is not the end of the world. Look at how many people use something like Spring AOP to inject cross cutting concerns vs how many people have programs whose main jobs is data transformation. My point is that that Haskell uses a very sophisticated but mentally expensive tool to solve a very mild problem, while it makes solving a very common problem harder, and contributes little to reducing the really tricky bugs (it helps with concurrency but Clojure does it much more simply, elegantly and generally while being imperative and non-pure). &gt; I don't think the annotations way is a great solution though. You just end up with two different type systems. More than two actually (as many as you want), but the question of the benefit of pluggable type systems is still being debated. As usual in language design, what matters most isn't theory but psychology, and that is yet to be seen. So far, though, languages that force you to use an advanced type system have seen near-zero success in the industry. A language can't solve any problems at all if [nobody want to use it](http://xkcd.com/1312/). &gt; But is it not just papering over that they sorely missing in the jvm runtime? I don't know if I'd call that "papering over", but they are sorely missing, which is why we're working on adding them to the JVM itself. &gt; Finally having closures, concurrency and mutable data is just a recipe for hard to find bugs. Again, that's a very general statement. All server processes that demand high throughput require mutable, shared state. What's a database if not mutable shared state? In fact, the only programs that don't are either trivial ones or compilers. There is absolutely nothing wrong with mutable shared state (Clojure uses it all over the place), provided that mutation is done under transactional guarantees. I would say that mutable shared state *without* transactional guarantees is, indeed, a recipe for bugs. But lightweight threads reduce the likelihood of those bugs or make them easier to spot for a few reasons. First, they provide context and a stack, so that if something goes wrong it's easy to spot whose to blame: this cannot be said for systems employing asynchronous code composed with monads (well, if your language doesn't allow shared mutation then it's less of a problem, but in that case you must rely on an external DB). Second, cheap threads, channels and actors encourage the use of message-passing approaches where MSS is not strictly required. Finally, they allow a much more natural modeling of the problem, where a software unit-of-concurrency (thread) can be used to model 1-1 a domain unit of concurrency (user or request), without resorting to an unfamiliar and often tricky asynchronous programming style. In fact, it has been my experience over many years in the industry that new, unfamiliar programming styles often introduce more bugs, even if they are theoretically considered "better". Also, you mentioned Go as a language that gets it right but Go uses shared mutable state all over the place, and doesn't have *any* mechanism for immutability or even access restriction. 
Moron here: You've missed my point. I don't know Groovy (or Gradle's Groovy-based DSL). I shouldn't have to learn a new language to understand my build. Further, you can only go so far with XML configuration. A DSL is completely free form. As I said in my post, I've seen Gradle files that are complete spaghetti. I've never come across a POM file I couldn't understand.
Consider reducing your dependence on reflection and using constructor/method references. Instead of: .translate(IOException.class).to(SomeRuntimeException.class) Consider something like: .translate(IOException.class, SomeRuntimeException::new) Where the method signature would be something like: public &lt;T extends Throwable, R extends RuntimeException&gt; YourMapper translate(Class&lt;T&gt; from, Function&lt;T, R&gt; to); The advantage of this is that if SomeRuntimeException doesn't have a one-arg constructor that will take IOException then you get a compile error. This doesn't have to be either/or. Your exception mapper could offer both mechanisms. Also, remember that checked exceptions are a compiler fiction. You can throw checked exceptions as unchecked if you want to. See [kludje.uk](http://mcdiae.github.io/kludje/#checked-exception-propagation) for a sample implementation. 
I think I can download it [here](http://www.oracle.com/technetwork/java/javase/documentation/javase-6u29-itantium-release-notes-514664.html) if I'm not mistaken. I'm supporting a user in a government office, and need this version for a legacy system.
Eclipse JEE Luna (4.4) [includes](https://projects.eclipse.org/releases/luna) M2E and an embedded version of Maven. However, you should probably install your own version for command line builds and select this in via Window... &gt; Maven &gt; Installations.
Thank you kind person!
Nice!
Yes, it is the wrong sub. Please use /r/javahelp
just use IDEA, comes with working maven integration out of the box, always been a pain to set up the integration in Eclipse..
Given that the latest [Java 6 release is 6.0µ45](https://www.java.com/en/download/faq/java_6.xml), I don't think you want patchlevel 29.
This has been a great series of blog posts and we will likely be implementing much of this. Glad to have seen a 4th!
As mentioned in the comments of the article, for lists the easiest thing would seem to be simply do: List&lt;String&gt; colors = Arrays.asList("red","blue","green","yellow"); 
Good point. I updated the article. Thanks for the hint! I guess now I've started a recursion - the article points back to this discussion :).
I often use Collections.addAll(colors, "red","blue","green","yellow");
It's important to understand what you get when you do that. Arrays.asList() creates a very thin wrapper around an array. In many cases this is great. If you want a list that you can add and remove elements from, Arrays.asList() is going to disappoint you.
That's one of my least favorite methods. I always have to mentally reverse the operation I'm trying to do.
&gt; I shouldn't have to learn a new language to understand my build. You don't need to learn the entire Groovy language to use Gradle, and the parts that you do need to learn are way easier both to understand and to write than Maven's horrible XML-based schema.
While JSP is still a pretty good piece of tech if you use it correctly, keep in mind that it's deprecated since the last decade. You should probably ask for JSF.
I've never heard anything but positive reviews of Effective Java, at least as a great book for consideration. You may want to also read about some of the major libraries for enterprise use - such as Spring. It's not the end all on enterprise frameworks, but it is incredibly relevant to the market now and will continue to be for quite some time.
Never heard anything bad about Effective Java. Out of the 73 (I skipped serialisation) items that it discusses, the only one I found objectionable was using interfaces to extend Enums. I'd go as far as saying it is essential reading for professional Java devs. I'd also recommend Java Concurrency in Practice. Beyond that you'd have to move away from `just Java' and start looking at frameworks and how Java is applied in certain domains. Or look at books about development in general, not about Java. 
Try a design patterns book. I don't have one to recommend but they can be a great help when used properly.
Using enums to extend interfaces is a sweet feature that Java has over C#. For instance, in your core library you may have a set of enums for use there, then you can have an application set of enums that can be used with all of your library code.
Java concurrency in practice, effective java
Design patterns and j2ee design patterns
Rails is an MVC framework but JSP is just a view technology. It needs to be used in conjunction with Servlets. Better yet a full framework like Spring. [Try this tutorial] (https://spring.io/guides/gs/spring-boot/).
JSP is not deprecated. JSP as the VDL for JSF has been deprecated for years now with the advent of Facelets.
It's never bad to try new things. 
&gt; I'm looking to learn more about the language and how to write better/cleaner java code. Clean Code by Uncle Bob is good. What's "fairly knowledgeable" mean? java.util.*, javax, jdbc, jax, osgi, servlets, services? Netbeans, Eclipse, IntelliJ? Maven, docker? Glassfish, JBOSS, Tomcat, Jetty, WebSphere? Design patterns, integration patterns, enterprise patterns, refactoring patterns? Unit testing, integration testing, system testing, code coverage? Smoking meth with the concurrency gurus? Even after you consider yourself an advanced developer then you get smacked in the face with the memory model, tools interface, profilers, and the mountain of everything else that happens in production. Just learning about Oracle (depending on committed you are to deep-throating the Sun ecosystem) is a vast endeavor. What I'm trying to get at is that "advanced Java learning" isn't in a book, it's in 100 books. You can tackle it depth-first or breadth-first, up to you.
It would be nice :)
This was what I was looking for! Thanks :)
theoretically? 
Try Scala and the ecosystem (Akka, Spray, Play, etc). Reuse much of your Java knowlege, but with a fresh take on it.
What is/was it?
Just another comment promoting Scala, because it's crack cocaine for a jaded Java dev.
64 bit processor jointly developed by HP and Intel in the mid 90's. Never had much up take due to poor 32bit application performance. They did crank out an Itanium 2 but Intel and AMD seemed to squeeze more performance out of 32 bit and then AMD leading the way with x64 instruction set. http://en.wikipedia.org/wiki/Itanium 
And here I am a recent college graduate trying to find a job in Java development. Too bad I don't know enough (at least that's how I feel).
What else would you suggest? I use Spring all the time to set up REST APIs (in Java, that is...) and I found it much easier than to use, for example, the Jersey framework. With Jersey you want to add Spring anyway for Dependency Injection so I guess I didn't see the point of combining Jersey+Spring while I can use only Spring. Are there any other frameworks that help in setting up REST APIs?
Okay, I'll try it on another PC; the one I was using was a POS
mind tell me what job you trying to find? and why is that?
Why can't you add/remove from the list? @SafeVarargs @SuppressWarnings("varargs") public static &lt;T&gt; List&lt;T&gt; asList(T... a) { return new ArrayList&lt;&gt;(a); } *EDIT:* i have noticed the arraylist returned is not the same as java.util.ArrayList. I had no idea and i've been using this for a long time. God knows what can happen now.
Diving in it atm. Very easy to read while commuting.
That's what he said!
Haven't used it, but [Dropwizard](http://dropwizard.io/)
WTF is he doing?
God no, I really enjoy learning new languages. I've always tried to avoid working exclusively on one thing although Java certainly paid the bills for most of my career. About two and a half years ago a few of us got our entire team of 30 backend developers to move from Java to Clojure. Clojure fits our work so much better and it's been a blast.
Dat religious bashing
Blowing up an ATM.
What type of work does your team do? Impressive to get such a large team onboard with the idea.
to collect and publish: jmxtrans / embedded-jmxtrans to monitor and alert : Librato service (not free)
I agree. I (wrongly) assumed that Arrays.asList returned a regular java.util.ArrayList. I would end up wrapping something like your code in a static utility method.
Hmm, it seems to be working on our side, and it looks like some other folks have been able to access. Would you please try again? Sorry for the inconvenience! Have a nice day. 
Where java beats the pants off of C is in tooling. You aren't going to find many languages with as many good libraries, IDEs, or static analysis tools. On to of that, for long running apps Java performance is often at or near Cs. The main thing java does bad is memory consumption and the fact that it is requires a bit of tuning to get a java app to run without significant pauses due to GC. (Though, the JVM has one of the best collections of GCs around).
&gt; Today I wrote some Python scripts for the first time in ages which made me realize that I actually enjoyed programming The reason enterprises and long-lasting products tend to gravitate to Java is that static typing makes for easier maintenance. Python is quicker and more fun to write, but harder to maintain. Same for any dynamic language. All the languages that have been flavor of the month in the last ten years, don't really encroach on Java's niche. C# is in the same vein, but isn't as portable. The only up and comer that I could see displacing Java in the long run is Go.
So you've been writing code in Java for, what, six, seven years? I know people who wrote C++ code for that long before switching to Java, then wrote Java for about that long before switching to yet another language. If you're going to be a professional programmer, it's not about the language, it's about your understanding. So go learn something new.
I fear this is my future. I only have 3 years experience at the moment but its all from working on ancient j2ee apps for the DoD. Picked up android and it was a nice change of pace making something from nothing and without a million outdated frameworks. Most places want someone with 3-5 years experience and a few successful apps under their belt to even consider your resume though.
It's popular because J2EE/JEE used to suck! It was a convenient alternative that also did dependency injection. It also has some nice abstraction layers for making JDBC and other common functions easier to configure and use.
Good point.
Thanks guys. I am currently living in Atlanta but I was planning on moving back to the Washington State where I am from. I was considering applying for Google in Seattle/Kirkland so I figured I would take the time familiarizing myself with their stack although that is not usually necessary to get hired. Yeah I have heard Java the language is somewhat behind C# in terms of language features. The last time I used Java was in college when it was on version 1.3 / 1.4 I think. I will check out Spring. I do see that being posted in most java job advertisements I have seen. 
I'd also suggest Scala as a possibility. 
If you do a s/C/C++/ in your post, I'd agree completely. C, however, has tooling on par with Java -- at least on Linux. And any language having more high quality libraries than C? Please. Granted, you can access those C libraries in Java, too, but not natively. Don't get me wrong -- I love me some Java, and it certainly *kills* when it comes to standard library coverage. C ... not so much. But then, that's by design, really.
What you are basically saying about GC and memory is that for all the benefits of languages (like Java and others) running on the JVM is that the cost you pay is to throw additional memory at it. Cheap at the price, considering what you get. The same tradeoff is going to be true of other languages / runtime systems similar to Java. (eg, .NET, Lisp systems, and others) And for the same underlying reasons.
This is why I started doing Scala on web projects.. Still get to use my java chops for things like GC tuning, but don't need to write getters and setters like it's 1999 anymore.
Bullshit, I have written non-trivial stuff in both Python and Java many times and there is nothing less maintainable about Python - not a thing, please stop perpetuating this myth. Java has its benefits such as speed of execution, but I prefer Python where applicable - mostly everywhere.
I actually did this. Got scala in prod before asking.. Budget to re-write a working scala app in Java is 0.. so it is still there ;)
As a manager this would be worthy of a long, serious talk if it's anything more than a trivial script. For people reading, please don't do this. Your team deserves to be included in decisions like this because they will be maintaining the code long-term. 
Why should someone use this instead of RxJava?
Interesting. I posted this some days ago https://www.reddit.com/r/learnprogramming/comments/2tsxb7/spring_framework_vs_django/ I had the same feeling when I worked with C# too
There's a difference between innovation and making architectural decisions without including the rest of the team. Imagine if everyone on the team decided to push code in their pet language - the codebase becomes completely unmaintainable as someone decides to deploy some Haskell code, someone else wants to brush up on their Perl knowledge and someone else decides "hey, let's do some C#". Plenty of teams innovate and add new tools, frameworks, and languages to their arsenal all the time. But they make the decisions as an informed team.
SimpleReact is lighter weight, and has very tight integration with JDK8. From the readme.md it says : "SimpleReact is built on top of JDK standard libraries and unlike other Reactive implementations for Java, specifically targets JDK 8 and thus reuses rather than reinvents Streams, Functional interfaces etc. SimpleReact augments the parallel Streams functionality in JDK by providing a facade over both the Streams and CompletableFuture apis. Under-the-hood, SimpleReact is a Stream of CompletableFutures, and presents that externally as an api somewhat inspired by the Javascript Promises / A+ Spec." RxJava runs on lower versions Java (and against hence against lower versions of the JDK) so has it's own infrastructure, functional interfaces and features.
Eh, you seem like the kind of manager I would not accept an offer from ;)
I'm still somewhat dumbfounded that it isn't their top TODO for future java releases. Thanks for the jnfo though! Didn't know about addExact() which will help, and I am familiar with big integer but wanted to stick with primitive types when possible
Python is a beautiful and expressive modern language, writing Java code feels dated, verbose and ugly. That said, I choose Java for coding most of my work projects because of the huge open source community, stability (Python 3??), more refined tooling and middleware support. I'm not knocking either language, language design is a balancing act and every language is great for some tasks and terrible for others. The key is that every language you learn as a developer will open your mind to different and better ways of doing things (e.g., how many old school Java developers are still struggling to understand the value of lambdas?). Each will provide you with more tools that will increase your flexibility and productivity as a developer. There's no reason to dump JEE altogether, but you can still benefit from learning new languages. 
&gt; C, however, has tooling on par with Java Unless things have gotten better recently, I don't really agree with this. Java has excellent profilers, IDEs, and a really sweet debugging environment. With C you have profilers and debuggers, but they are far less interactive and they all (afaik) require a special profiling build of the application to do anything. With Java, I can connect to a running server and start sampling it immediately. Heck I could connect to it live server and start debugging it and then detach from it like I was never there. You just can't do that with C or C++. With the IDEs. Most good java IDEs will autocomplete and auto generate a surprising amount of things. I can type `HashMap` in my java IDE, hit a key combination, and BAM, I get the imports for HashMap. In C, you pretty much have to go in and say `#include&lt;thing.h&gt;` manually (unless things have gotten better). Then there is the library management system. For all the hate it gets, Maven is fantastic for getting dependencies. C's dependency management is done through duck tape and bubblegum. You have to rely on the OS to get you what you need and then the build system to understand and link up everything you want. In linux, not as big of an issue (but still an issue since you are either bound to the OS version of a library, or you are stuck compiling your own version of the library... There isn't really a good story there). With maven, you literally say "My thing needs version x of y" and you are done. Now everyone automatically gets it during the build process if they don't already have it. Much like npm/pip/gem work in some of the more dynamic languages. Did I mention the IDEs? Yeah, The C ide's, that I've used, don't hold a candle to the Java IDEs available. The one that does the best is VS followed by QT creator, but they really aren't all that great. In contrast Eclipse, Netbeans, and Intellij are all pretty comparable and pretty fantastic. They are easily just as good as VS or QT creator and (for java) much better. Now for the java libraries. Java as a language is just better built for libraries as a language. Best example? Serialization. With C if you want to serialize anything you are stuck with either something to generates C code to do the serialization or doing hand rolled interactions with the serialization library. With java, there are several libraries where you can literally just say "x.serialize(y)". And you are done. Sure, C has a ton of old and well built libraries. Java has access or equivalents for pretty much every one of those. Granted, Java's C library interaction sucks pretty badly (JNI is not a walk in the park), but for the most part it just isn't an issue, there is more than likely a horde of libraries to choose from that do everything you wanted to do with the C library. C has fast startup times, low memory usage, and can often be much more performant than Java. C also has much better interaction with the OS and hardware in general. The fact that Java runs on a virtual machine makes it a real PITA if you want to do any sort of low level device interaction. For embedded environments C is a much better tool. For applications that have strict timing requirements, C is the better tool. But when it comes to doing servery thingies, or very large applications where performance isn't the most important thing, then Java does a much better job.
Yes i do understand that, but you did not answer my initial the question. What is the reason to use that instead of RxJava? ^Edit:spelling 
Memory corruption bugs can have much worse consequences, like creating security vulnerabilities.
Now I know you know better. We have talked about this in the past. You're a smart guy and I can tell that from some of your comments. So you know that Java came first and C# came along afterwards and improved in some areas where Java fell short. Java was never designed to be a subset of C#, that makes no sense.
This is my opinion, so take it as such. They should ALL be moved to their own classes. That's what OO is for. Split the whole thing into at least one package (probably more to group related classes), and App.java should ONLY have main in it. All those static classes are going to pollute your heap with junk and slow the program. If you break them out, you can create them as needed and allow the garbage collector to clean them up when you're done. Also, I'm guessing those static classes are accessing the same variables. Stopping stuff like this is the whole reason to use OO. Pass necessary variables into functions that need them, and make your whole program function in a more comprehensible manner.
There are four use-cases for nested types (both classes and interfaces). All not very common, and all rather advanced. There may be more, of course. - to put them into a strong relationship with their outer type, i.e. to communicate to everyone, "hey this `Map.Entry` type is really very very much related to `Map` itself." - to hide them from the remaining package by making them `private`, if package-local visibility isn't enough for your application. - to provide a `protected` type for access by subtypes only. This is not possible, otherwise. - to emulate local packages, i.e. packages within packages. Sometimes, you would like to have something like module-visibility, i.e. visibility within a module that consists of several packages, but doesn't leak into other modules. The JDK does that a lot, e.g. inside of the `java.util.stream` package: `java.util.stream.Nodes.*` Specifically in your case, there is no reason to keep all those classes in your `App`. You can probably make them all package-private top-level types in their own files.
I could not finish reading that article. The presentation in a very narrow column adds too many line breaks, and there were horizontal scroll bars in some code blocks, making them hard to read, and the content didn't justify the eye strain (sorry). I'm sure most readers have a nice GUI browser with resizeable windows and all, let them make use of it.
 if(amount % 10 != 0){ message about not being mult of 10 } else if(amount &gt; 1000){ message about exceeding 1000 } else { logic here for proper amount } Just a small example of something you could use to check that is simple. You would still need to figure out how to handle the input and what have you. Also the % is called the modulus operator, I would take a look at how it works because it is very useful Edit:my phone app does not like formatting the code properly
jnfo! It's Java info!
Struts or Spring? You mention both.
17 inner classes. 17 is officially too much. Unless there's some strange reason for it needing to be that way, I'd start breaking those out into their own classes get App down to a manageable size. I, too, inherited a monolithic Java class from a previous developer... 5500 lines of procedural code in one class. Unneeded synchronization all over the place. Mmmmmmmm....
You may want to take a look at classes like `java.util.stream.Nodes`
Great tip! For some reason I already knew about this functionality but I still find myself ALT+F7-ing around code bases...
Doesn't maven have an equivalent of Gradle's wrapper script now? That would be an even better choice, since that way you don't have to care whether maven is installed or not, nor which version.
Use the Console class to get input from the console. It is very simple. Console console = System.console(); String input = console.readLine("Enter name! "); System.out.println("Hello '" + input + "'"); Enter name! Foo Hello 'Foo' http://docs.oracle.com/javase/8/docs/api/java/io/Console.html
Java 1.8 has included an overflow/underflow check as an API. It's not built into the basic operands (for backwards compatibility). http://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#addExact-int-int-
Any further java help request please post to /r/javahelp
&gt; backwards compatibility. That's always the answer with java And as always, it's a totally stupid decision because there are [ways](https://msdn.microsoft.com/en-us/library/74b4xzyw.aspx) to implement that without breaking anything, and without losing backwards compatibility.
Being "innovative" has nothing to do with choosing a new language to do things in. You're just introducing more crap. Could you not accomplish what you wanted in Java(or whatever language most of the stuff is written in) so that the rest of the team doesn't have to go learn Scala now?
Checking for overflow is almost as simple as looking at 2 bits though. I mean, it probably wouldn't even need it's own cycle.
You might try looking into Groovy. I've been using it for the last few years (first just to replace shell scripts, then later for a large Grails project). It gives you the fun things from non-JVM languages like Python and Ruby (less verbosity and ceremony), but you get to stay in the Java ecosystem (use Java libraries, deploy to the same servers, etc.). As someone who started programming Java in 1996 (my university jumped on the beta versions) and who has experienced the same feelings you're talking about multiple times over the years, I can tell you that Groovy is awesome. It makes you say "Wow, I can have the best of both worlds -- write Python-like code but have it deploy on the JVM." It's really nice.
Really great job: Congratulations for ignoring: + the **big red button** saying **"Seek Programming Help"** + the **big red banner** when **hovering** over the **"Submit Text"** Button, saying **"Please seek help with programming in /r/Javahelp"** + the **big red box** in the **sidebar** saying **"Please seek help with programming in /r/Javahelp"** + the **"?"** icon in the **blue "Related Sub-Reddits"** box in the **sidebar** with the text **"Java Help ← Seek help here"** + And last, you basically ask for your homework to be done which violates the posting rules of most programming subs (/r/Java **and** /r/Javahelp included). **Post removed** - Programming help belongs in /r/Javahelp 
For sanity's sake, just use an ArrayList&lt;T&gt; and give it an initial capacity of 64 so it doesn't have to resize multiple times. Unless performance is an absolute must (I doubt it), easily readable code trumps speed hacks.
It's not a myth.
You can get significantly larger than 128-bit with BigInteger and BigDecimal, but they do make doing calculations on them harder work... (I just read on a SO answer that the limit is possibly something like (2^32)^((2^31)), or a very very big number...
Yes, you can of course use BigDecimal or BigInteger, but they are entirely different beasts. In C you can (depending on your compiler/CPU/god's whim) use a uint128 type (perhaps defined as unsigned long long int) as you would use a 32bit integer.
It was a J2EE replacement when it was sucks. However, since J2EE is not that sucks anymore, nowadays it's like the Django/Rails of Java since it provides productivity through Spring Boot, Spring Data JPA, Spring loaded (for hot reloading), etc.
Not sure if trolling. In well-run shops yes. I've seen some shops refuse to migrate off of Java 1.5 because "It still works, goddamnit!" - But that's a function of platform managers whose response to exploit disclosures is to jam their fingers into their ears so hard that they end up poking the stupidity centers of the brain.
 list.stream() .filter(blog -&gt; blog.updateRate().equals(UpdateRate.Weekly)) .forEach(post::add); Can you print the result of this filtering?
Look at https://gcc.gnu.org/onlinedocs/gcc/_005f_005fint128.html — and yes, it requires Compiler/CPU support.
Jeff Atwood is a Microsoft fanboy visual beginner hack. Not sure why he'd be on that list but thanks for the click-bait!
This is mandatory reading if you plan on using Optional: http://blog.joda.org/2014/11/optional-in-java-se-8.html
\*cough cough* Android
If you brush it while at your desk, you can have keyboard lunch later.
Probably on VM's at this point.
Why would you need to upgrade for? It works, doesnt it? /s
Take your [pick](http://www.cvedetails.com/vulnerability-list/vendor_id-5/product_id-1083/version_id-74346/SUN-JDK-1.4.2-19.html)
In NetBeans: right click -&gt; Call Hierarchy
Like half of this subs posts 
I'm sorry I cannot see sidebars and buttons on the reddit is fun app, and no I did not ask for my homework to be done. I said specifically I do not want exact instructions, but rather I wanted tips to help. Don't blame me for what other people comment.
Thanks man
Thanks for the help man. I have a much better grasp on how to do this now.
Lame excuse since reddit is fun *can* show the sidebar. I'm using it myself and know that it can show. It is common courtesy to read the rules before posting somewhere. 
We're still bound to writing NEW code under JDK 1.6... fuck whoever makes these decisions.
What's that do, skip to the impl of an interface? 
Optional&lt;Comment&gt; = null;
There's plenty of examples and tutorials for old style Struts 2 (with struts.xml). But new style Struts 2 is very different and I don't see many tutorials out there updated to the new style. The [rest showcase](https://github.com/apache/struts/tree/develop/apps/rest-showcase) is a good example in the new style. The [mail reader](https://github.com/apache/struts/tree/develop/apps/mailreader) is a good example in the old style. Here's the documentation for the [REST plugin](https://cwiki.apache.org/confluence/display/WW/REST+Plugin), which is used by the rest showcase. There are plenty of tutorials out there for how to develop RESTful web apps (such as in Ruby on Rails). A well architected Struts 2 app (in the modern form) follows the same principles, so you might be able to translate a tutorial to Struts 2. That would actually be a very good learning exercise.
Gotcha. Intellij has that too. The usefulness of that one totally depends on the code you're working with but still very useful when you need it. 
Exactly. Since it's already array-backed, the most you're saving on is a function call and maybe a size check. The only reason to use a plain array is if you're doing super-fast buffer processing for audio or graphics or something.
Java FX? Has a nice UI Library look. Not sure how that integration would work though. I've only ever made new projects in Java 8/FX.
If they could be, it sure as hell wouldn't be to pick up PHP.
When *performance matters*, every time you call `add` on ArrayList, it ensures that it has the capacity to do so. In JDK8, this is always a call to **2 other instance functions and a Math.max**: public boolean add(E e) { ensureCapacityInternal(size + 1); // Increments modCount!! elementData[size++] = e; return true; } private void ensureCapacityInternal(int minCapacity) { if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) { minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity); } ensureExplicitCapacity(minCapacity); } private void ensureExplicitCapacity(int minCapacity) { modCount++; // overflow-conscious code if (minCapacity - elementData.length &gt; 0) grow(minCapacity); } If it actually needs to grow, make that **6 total** (with an Array.copyOf). The performance here may be negligible for small data sets. But if you're working with millions of rows, yeah, you'll notice. 
An abstract class allows you to store State. An interface does not. That's the short version i heard. Or, with more detail is u/kingofthejaffacakes' description.
Which random number generator was used to make the selection though? If it was one sponsored by the NSA, then i'm highly skeptical. 
For your interest in Games, i would recommend some kind of functional programming language. There was a game called Abuse a decade or so ago, and it used one of the Lisp derivatives i think as a programming language to develop enemies and levels. Lisp can be useful for developing AIs, which will be an important pin on your map. So, Learn about AIs, learn functional programming, and that will set you up with developing good decision-making applications. And like u/ExPixel said, calculus and lin alg. edit: Let me include also this list of games which heavily rely on the language features and programming paradigm provided by Lisp. [Lisp Games Wiki](http://lispgames.org)
As dumb as it may sound, the [Java Language Specification](http://docs.oracle.com/javase/specs/) and the [Java Virtual Machine Specification](http://docs.oracle.com/javase/specs/) were extremely interesting to me, and i learned a lot about all sorts of language features, APIs, history, pain points, and other important details of development. In the JVM spec, there is a lot of discussion about memory management and garbage collection, which even if you are not studying for a certification exam, is still pretty useful to know about. 
I'm sorry, but I don't get the actual assignment. How is the sum of 5, 6, 7, 8 equal to 1? Please, try to explain it once more. Show us your code, tell us your expected inputs and outputs, and tell us what your code currently outputs. If there is any exception being thrown, show us the stack trace.
ill try to draw a pseudo code of it int[] amount = new array[10]; int sum=0; BigDecimal num,num1,final; for(int i=0;i &lt; amount.length;i++) { amount[i] = Math.RandomRange(0,10); } for(int i=0;i &lt; amount.length;i++) { sum+= amount[i]; } for(int i=0;i &lt; amount.length;i++) { num = new BigDecimal(amount[i]); num1 = new BigDecimal(sum); final = num.Divided(num1,2,1); System.out.println(final); } than i use a calculator to add up the printed lines. The result on the calculator should be 1 but sometimes it becomes 0.9 or 1.2
&gt; final = num.Divided(num1,2,1); Are you using the roundingMode parameter? That could be the source of the problem.
Ah - ok. Then rounding is most likely the problem. Try to use more significant digits. If you round to 4 places instead of 2 you might get a better result. Then you can round the final number to 2 places.
This is particularly useful if you're using some sort of map and need to calculate a key based on multiple inputs. Open to any input/improvements!
Where's your identifier nigga
Help, how do I stop looking?
I'm still a Grails fan, and it looks like they're moving to Spring Boot as a core in the next version (v3) (coming in the next couple weeks, it seems). Wait - M1 was just released yesterday? Nice... 
Either press the three vertical buttons when you have the list of subs you are subscribed to open, then click "View sidebar", or when you are in a subreddit, click the "I" in the circle on the top next to the subreddit's name.
http://media20.giphy.com/media/p60L4kNY1szqU/giphy.gif?w=320
Thanks for the in-depth comment. I did this as a little exercise a couple weeks ago while reading the book, and figured it could be useful just for some basic hashing. With Java 7's array initializer though, couldn't it actually look about like what the varargs version does (but just with braces)?
i tried it like this as well but still got the same results
Applying my set of formatting rules your code looks almost the same as yours. The only difference is that I use only 2 spaces for indentation. An important cases, not part of your example code, is the parameter wrapping. I'm using a line lenght limit of 100, so parameter lists need to be wrapped sometimes. public void doIt( int someValue, int someOtherValue, String somethingLikeAName) { ... } And the same on the call site. It looks much better than making arbitrary line breaks after a few parameters just because the line limit is exeeded. Have you ever seen a book with a bullet point list like the following? * something * something else * another thing * yet another thing That is what code looks like often.
That's the thing. I used npm, but being used to Maven, maybe I didn't use it to its full potential, I don't know. I simply installed a JS library i needed and then used it in my web app. What else is there? :( Can you at least point me to any web/article? I looked at the official docs, not much there.
The best giveaway - Google code style indents with two spaces, not four.
Oh nice! I do mostly android development though, so Java 8's beyond reach :/ I'll update the gist though with this!
http://www.oracle.com/technetwork/java/eol-135779.html#Java6-end-public-updates
Hey. Im currently learning Struts2 off the pluralsight.com tutorials. I have very good experience with Pring already but wanted to broaden my knowledge. I highly recommend the course. I plan to publish a fully functional CRUD style project on github that runs on MongoDB (or CouchDB if I have the time) tonight or tomorrow. Let me know if u are interested and I can share it with you.
Guava throws an exception if you return null for a loaded cache value, anyway, I thought.
New logo? I wonder what were the other submission. http://maven.apache.org/images/maven-logo-black-on-white.png http://maven.apache.org/images/mascot-large.png
As the sidebar and the big hover text when submitting shows: &gt; Please seek help with Java programming in /r/javahelp Please read its posting guidelines, in particular: state the exact error message. 
You're forgetting to make a new Die, before calling the function, like: Die die = new Die(6); die.runGame();
Spring 2 and Java 6
ive been trying to post in that sub reddit, but it keeps giving me the message "please fill in this field", even though ive put () round the links, as its full classes that im putting in, how would i put it in?
Wow, thank you both. It is fascinating to me how malicious a few blocks of text can be. I will x-post to javascript.
You can do what /u/Flippo_The_Hippo suggested and run a command, or you can actually include the eclipse compiler as a library and use it to compile code.
Okay... I'm aiming for ELI5 mode, but may have missed the mark... As more and more hostile applications (and exploits) have appeared over the years, more security measures have had to come into play. As of Java 8u20, all applets and Java Web Start applications to be loaded over the Internet must have a *signature* - a cryptographic "header" that identifies who created the application. The user of the application also has to look at the signature, and confirm that they trust the person who created the application. You're right; this is a problem that affects everyone... but the solution cannot safely be implemented on the end-user's side of the connection. At the root of the problem is your assertion, "I know the applets aren't harmful"... the truth is that you don't know that... requiring the applets' authors to sign their code makes sure that you at least know who wrote it.
I have attempted to no avail (maybe I didn't try long enough... If you have better documentation (tutorials for java.lang.Compiler)) I will be happy to read it and attempt it again :)
/r/javahelp 
Try /r/javahelp. This sub is more about the discussion of java news similar things. 
My company had adopted Dropwizard for all back end REST services. It is a great package. However, we needed to change to Spring Boot due to licensing concerns with Jersey. We are just as happy with Spring Boot. In my opinion, you can't go wrong with either.
I have to admit I have not tried this on a windows box but I've never had issues doing this on Linux using full paths. I have always stored configuration and templates outside of tomcats webapps directory. You really should not be writing files to the tomcat/bin directory either. 
It's one of those things that's easy to get wrong. How are you trying to access the file? Post your code. 
I also do not really understand the problem itself. 
Yup, it's the wrong subreddit. And you can use this service for future checks: [http://downforeveryoneorjustme.com/marketplace.eclipse.org](http://isup.me/marketplace.eclipse.org)
Thanks. Is it down didn't do much help. Others may search for this issue so I'll keep this posted and and upvote your link
 public class Foo { public int[] X = new int[] { 1, 3, 5, 7, 9, 11 }; public void foo( boolean a, int x, int y, int z ) { label1: for(;;) { try { if( x &gt; 0 ) { int someVariable = a ? x : y; int anotherVariable = a ? x : y; } else if( x &lt; 0 ) { int someVariable = ( y + z ); someVariable = x = x + y; } else label2: for( int i = 0; i &lt; 5; i++ ) doSomething( i ); switch( a ) { case 0: doCase0(); break; default: doDefault(); break; } } catch( Exception e ) { processException( e.getMessage(), x + y, z, a ); } finally { processFinally(); } } if( 2 &lt; 3 ) return; if( 3 &lt; 4 ) return; while( ++x &lt; 10000 ); while( x &lt; 50000 ) x++; for( int i = 0; i &lt; 5; i++ ) System.out.println( i ); } private class InnerClass implements I1, I2 { public void bar() throws E1, E2 { } } } 
That's how i prefer it myself too. I find it much more readable. Which style is more used/prefered at companies?
I believe you are looking for a solution like the one implemented by [FenixEdu's](http://fenixedu.org) Scheduler system, which allows arbitraty code to be compiled and run on a running application: https://github.com/FenixEdu/bennu/blob/v3.4.1/server/bennu-scheduler/src/main/java/org/fenixedu/bennu/scheduler/custom/ClassBean.java#L236
Before you complicate your code, ask yourself two questions: 1. What performance target do I need and am I hitting it? 2. Which part of the code is the bottleneck? Often, you'll find that without measurement, you'll optimize the wrong thing. Use a profiler. Only if you have identified the ArrayList as the possible culprit, should you benchmark to learn if an array really is faster. With today's machines, there are so many nonlinear things going on that measurement is the only way to fast code.
I would be curious to see how this compares with native solutions such as MapDB or BerkeleyDB (Java Edition). LMDB is very fast, but how much does JNI slow it down?
Why isn't there more activity on such a critical project? What happened to YAML/JSON based poms? We need Maven to keep improving to keep Gradle and other Antisms at bay.
We use janino for that: http://docs.codehaus.org/display/JANINO/Home
I don't believe Orm haters generally hate orms for these reasons at all. Orm's are great in theory but somehow attract shitty behaviour in developers. I know for a fact they can work but in practice haven't seen a developer use it correct ever. I personally like how jdbc templates are a nice balance between the two. Not much boilerplate but still triggers correct behaviour with developer.
As of 8u20, there is no setting lower than High.
I agree with most of your statements. Hibernate is huge and I had to debug it many times to understand how it works. But with discipline (e.g. Avoiding exotic mappings, eager fetching) you can get the good parts, while avoiding the bad ones. If you say that Hibernate and JPA should be avoided, especially on large projects, what would be the data access paradigm to choose then?
The underlying problem is the mismatch between objects and relational databases. It doesn't really matter if you want to bridge these two with an ORM or something else. Sooner or later you'll run into problems because object references and table relations simply don't match. The more complex your domain model is the bigger the problems. For simple stuff ORM is just fine. For complex projects both ORM and it's alternatives become a headache (though possibly for different reasons).
Jooq and mybatis, definitely, using a pretty standard DAO layer architecture. Mybatis gets my preference for treating SQL queries as a "kind of first class" object - which is a huge benefit, for example when something goes wrong in production and you need to get the result of a query, you just copy paste it. Both frameworks come with code generation that cover all your CRUD needs. Which means that you can write simple apps *without writing a single SQL query*, exactly like hibernate. Combine that with Java 8 stream processing, you can get so much done with almost zero work. As the needs become more complex, well, you are only limited by your actual database knowledge. And if something goes wrong, debugging is pretty trivial - there is almost no magic happening. 
Great article. We had a similar issues and punted. We spun up a Spring context for each database connection. Not the most efficient approach. This is much better.
I've worked with a system like what I'm doing now, thought it was in JSF. Never had problems parsing in files anywhere on the production linux systems, but at the time I never had problems parsing in files from my desktop when I'd deploy it on my dev machine.
https://yui.github.io/yuicompressor/
This is a very complicated problem. I would look at a computer vision library like BoofCV.
If all you need is a little scipting in your Maven build, you can use the antrun plugin and save the day. http://maven.apache.org/plugins/maven-antrun-plugin/
&gt; mind-numbing boilerplate or mounds of obtuse XML configuration I have yet to see that for any "hello world" web service written in a modern framework. jee, spring-boost and others allow you to write this in even less lines of code. i'd say, compared to spring-boost, for similar functionality you write even less code.
When you see the Java Application Blocked dialog, there is a link to click on for more information. For convenience the page it links to is https://www.java.com/en/download/help/jcp_security.xml On that page are instructions on how to add a site to the exception list.
&gt; compared to *spring-boost* You called it boost twice so I don't think its a typo. For those googling it, it's called Spring-Boot. 
What are those licensing concerns you are experimenting with Jersey? I thought Jersey was one the of best for any kind of work.
Check this out for Dropwizard + MongoDb: https://blog.openshift.com/day-13-dropwizard-the-awesome-java-rest-server-stack/
yes, you're right. been working with the real boost (cpp) project for way too long.
IMO, never use inner classes. If they're exclusively used in a class, maybe you should create a package and declare them all protected. The only exception to this would be ENUMs, since they're simpler and might be used just for "private" purposes. Other than that, having multiple classes and methods inside another class is just.. dirty.
I guess he needs to find a combination between multiple operations using these numbers and the sum of the combination needs to be 1.
This framework has been gaining a lot of accolades and attraction lately. I'll have to check it out
ORM != Hibernate. I fully agree with the article that hating ORM is just stupid/doesn't make sense. There certainly exists object-relational mismatch. If you want to use relational database from OO language, you need to map from one to another (and vice versa), ergo you need ORM ("Object-relational mapping"). Whether you use JPA/MyBatis/JDBC is not important, you need ORM. All your generalizations about big abstraction layers etc. simply don't apply to the general concept of ORM, only to some particular implementations.
*Very carefully.*
You're entirely right, i should clarify.
&gt; you are free to execute native queries So ORM is good because i am free to use native SQL. [Related video](http://vimeo.com/28885655)
Ok, I found that there are many bug trackers that can be used to track tasks/bugs. Not much real difference which one you use. A wiki is the best way to keep documentation. Other than that, you get a version control system (git) and you're set. What else do you need? Trac can cover both bug tracking and wiki, and interface with your revision control. http://trac.edgewall.org/ It has lots of plugins to cover lots of stuff. I've never used it much myself, but looked cool when I was looking for in-house hosted set of free/opensource tools. And there are trac-like forks/alternatives like http://www.redmine.org/ or http://bloodhound.apache.org/ Oh, don't forget continuous integration/automated builds. I'm developing in Java, and Jenkins rules. http://jenkins-ci.org/ 
A small improvement can be made on "separation of concerns" concept. For example "Is the Filter class responsible for replacing the leetspeak characters?", "Is the Filter class responsible for loading the list of words?" Other questions for improvement might be "What if the user wants to avoid words in a new language?". Or maybe you can make it possible to add the desired supported languages through your maven build or another way of injecting properties specified by the user/environment. This can all increase the ease of testing different components and increase readability a bit.
+1 for bloodhound. I'll check it out
All good questions. I worked in the consultancy world for several years (PwC, Accenture). Although it isn't for everyone, it is a good way to get some exposure to lots of different things. It is also a good way to learn more about the business side of software (which I highly recommend). That being said, I much prefer working for companies directly. Every job I got I found in the listings online or in newspapers (two in Atlanta, in fact). IT recruiters are fine, but do your homework.. some of these are just people that will post your resume online (something you could easily do yourself). Some really are outstanding though. My litmus test: if they don't want to meet you in person, don't use them. You should learn some frameworks if you have downtime now. Also learn how to use the tools of the trade (Eclipse, IntelliJ, source control, CI tools, etc). Many jobs will list unusual frameworks that virtually nobody knows, though, just to weed out the people that aren't willing to learn. Take the requirements seriously, but not TOO seriously. Entry level / Jr. Developers are fine if it is a job you think you want. Be sure to ask what your path through the company would be past Jr though. I would caution that these labels are meaningful only in larger companies. If you see them for startups, it just means they don't want to pay as much. As far as counting experience from classes, that is really a personal call. Do you think it was real experience (and that is a possibility)? Then yes, I would count it. Source: professional Java programmer for 15 years
Thanks! All very helpful. Plus your comment just weighs more in my head since you told me I had good questions. I need to start complimenting people before I give them information.
some of the tools are well worth the money...
Well it's not exactly difficult to (re-)invent the wheel. But why would you? 
I dont have experience with Google App Engine but if you have access to node.js on the build system then gulpjs is really simple. 
&gt; As far as counting experience from classes, that is really a personal call. Do you think it was real experience (and that is a possibility)? Then yes, I would count it. When one has nothing else, it is about as real as it gets for a student. 
You're right, but it's just super depressing because I need the exact same data represented in at least three different classes: a data transfer object, a domain object, and a persistence object. Now most of my code is shuffling data between these nearly identical representations instead of adding actual value.
I really appreciate your feedback!
This was my second degree after a stupid first choice. I was doing 20 hour semesters and with 30+ hour work weeks. Having time for internships and going to programming competitions sounds nice though. I love how it's assumed everyone who is serious about the field must have competed at the ICPC... right? I'll take that advice right to my time machine.
Hows that project going? Are you sharing it on Github? 
count me in the list of people interested in this.....
I want to do it from scratch for a learning experience.
I'm seeing from your various comments that you are using the Windows style of path names. That is, a backslash as the path separator instead of a forward slash. If that is truly the case, then it could be the cause of our problem. Also, have you run your code through a debugger (or displayed in console) the actual path and file value that you are using to ensure that it is correct? I have applications that run in Tomcat with Spring that access files anywhere, on both Windows and Linux, and they work fine. Most likely, your full path and file name are incorrect.
I'm quite happy with it so far. My project relies heavily on graph traversals than relational and document stores don't handle performantly. So I'm exclusively using it for the graph model, haven't used the document api at all. I also looked at Neo4j and started using it initially, but it doesn't handle massive inserts nearly as fast as OrientDB (YMMV). Also I like knowing that my solution can scale to a truly distributed cluster with minimal fuss if my project actually takes off. So in that sense it combines performance + ease of startup + ease of scaling which = peace of mind for me. I am currently using an open-source project to run the DB behind Dropwizard, but it will probably need to be a separate service if the need to scale comes: https://github.com/xvik/dropwizard-orient-server It's quite convenient, although it's still using OrientDB 1.7.(10?) and 2.0 just released.
I'd like an option to randomly populate the board and start from there.
You can do anything you want with Graphics2D. It's all a matter of choice of what kind of API you'd like to use, and what's your definition of "from scratch".
I'd work at a tech company. I'd spend the time learning from people who know what they're doing and have time to mentor you. As far as looking for a job, A/B test and do DevOps (continuous improvement) with your career. Reality there isn't one solution, you'll have to try and you'll find out what works for you. 
I'm just going to try to deploy and test this out on a Linux server.
Deploying it on a CentOS box works.
Just pushed a new version to GitHub with an item in the option menu to generate a random board based off of a given population density and whether or not you want it single or multiplayer. Thanks!
I'm not a big fan of nativeQuery in NoSQL being directly in the Entity class and a bit here and there, but I guess it's starting to look good. Despite that, what the hell is going with the line number of that IntelliJ IDE?
I'm using primefaces 5.x and regular tomcat [rather than tomEE] for production. I'm very happy with it, never had any problems. My apps don't tend to be overly complex, but *shrug*. Works for me.
Atlassian products are fantastic until you hit that threshold (or dependence) and then you have to paaayy.
I use NetBeans when I target TomEE. Both work very well together. I don't recall ever having an issue, even when NetBeans didn't officially recognize TomEE as a different deployment target than Tomcat. I'm not sure about IntelliJ, but I would assume that TomEE works well with it. I only use Eclipse or RAD for WAS development. If you don't mind NetBeans, consider giving it a go. It's worth a try. As for outdated libraries, TomEE has a 2.0.0-SNAPSHOT version that passed the Java EE 7 tck, according to a fairly recent blog post by Arjan Tjims. Perhaps check that out too. Anywho, I am by no means a rabid TomEE supporter. I've used GlassFish in the past and really liked it. I've yet to use WildFly but fully intend to try it out based on the high praise that I've heard of it.
The best advice is seldom sugar coated. 
You can use plain HTML in your views if you wish. You put JSF tags if you want to use JSF components, which will do all the JSF stuff (validating inputs, calling your logic) and spit the resulting HTML out on the place where the component tag was before.
Based on Jenkins, and Libre Office, I'd say that Payara is in much better hands. As a long time Play! developer, I am intrigued.
Ah yes, thanks for pointing out :)
We have been using Dropwizard in production for over 2 years now. It powers some of our mission critical products that serve millions of requests per day. I have nothing but great things to say about it. WAR files and standalone servlet containers are part of the heavyweight Sun/Oracle legacy that have given Java such a bad name. Dropwizard throws all of that out of the window and provides a best of breed set of libraries for creating **production-grade** REST microservices within mintues. One of the greatest gems of Java.
Personally, as an interviewer I'll count anything. I want to see code, I want to see motivation and ability to learn. Resumes don't mean much to me these days. That said no recruiter is going to send us someone with zero experience. Getting a few years under the belt is probably the single most important task out of college. 
Saying glassfish was a 'killer appserver' is ridiculous. 
Yeah it makes sense that upgrading of the "core" libraries like OWB would cause an issue.
You use plan HTML tags just fine with JSF. You just include the JSF attribute withing the tag. 
Short answer: components Longer answer: The custom tags in the Facelets template file map to a component tree on the server, and the rendering of the component tree produces the final HTML sent to the browser. Basic JSF components (from HTML and UI) allow you to specify the backing component using the "jsfc" attribute, so you can bind the ordinary HTML tags with a JSF component on the server. The basic JSF components are (more or less) 1:1 with the HTML, where the prototyping value of plain HTML makes sense. What you see (loading the facelet file directly in the browser) is what you'll get. But this only works for very basic cases. Most of the time when you use JSF, you'll be using it with a component library like Primefaces. When the server renders a Primefaces component specified by the custom Primefaces tag, a lot of HTML will be rendered in the final output that won't look anything like the template. In this case, the prototyping value of plain HTML is lost. What you see is not what you'll get. 
So, Minecraft?
Can't confirm. But 50% of Trillian is swedish. Your guess is as good as mine.
The jsfc attribute is the old one that came in automatically when JSF adopted Facelets. The newer version is pass-through components, which is rather similar but better (more clearly) defined. Instead of jsfc it uses a namespaced attribute. 
Has Dagger 2 been officially released yet? I've been waiting to upgrade to it for a while now.
Except when it is. Last year I got pulled to help in a JSF project. A new application in 2014, typical Websphere based enterprise application using JSF 2.0 with Java 6. It feels so bad looking at the nice bits at JavaONE and then getting this on the field.
Recent graduate and recent hire here... I meant to write this to you yesterday, but it completely slipped my mind. About a year before my graduating semester, my adviser told me I should be posting my resume on LinkedIn and Dice. I did as she advised, and sure enough began getting daily emails from contractors looking for Java Developers. The problem I came across was, everyone of them was looking for some framework like Spring/Hibernate or JavaEE. I never learned any of them at my university and would have to learn on my own if I wanted to succeed with them. However, I took another approach. I seen that IBM was having a recruiting event at my school and I was very interested. After attending, I submitted my resume as an Entry Level IT Specialist. After not hearing back for a month, I decided to go on sites like Monster, Glassdoor, etc and submitting applications constantly. I did finally end up getting an interview at IBM about a month and half later after submitting my resume to them. After my interview, I expected to hear back within 2 weeks or so. But nothing. Around the middle of December, I started receiving phone calls and emails from companies I applied for online to start interviewing me. 2-3 months later! I did get offered the job at IBM and accepted it. So some things to keep in mind is: * It takes time for these companies to go through tons of resumes. Don't give up. Most of them that didn't want to interview me sent me an email notifying me. * Many people will say not to include projects from college on your resume, but I did. It was my best work. And throughout my interviews, the interviewer would ask me questions about the projects, mainly my compiler I created. If you don't list these on your resume, how are you going to persuade them you are right for the job * I am currently learning the frameworks my company uses. They aren't going to expect you to know everything right out of college. * Don't give up! Keep programming and keep your mind active. Good luck!
Does this help? http://openjdk.java.net/groups/compiler/guide/compilerAPI.html
It may do, I shall give it a go tomorrow and reply back :), Thank you.
If you don't mind building it yourself https://github.com/apache/tomcat-maven-plugin/tree/tc8.x if you want a precompiled plugin https://builds.apache.org/job/TomcatMavenPlugin-mvn3.x/
This help? http://docs.oracle.com/javaee/7/tutorial/security-webtier004.htm#BNCBX
Oh my god. I was really anticipating Gradle, because I expected it to be a perfect fit between the FUBAR of maven and the lack of any module support in vanilla Ant. Utterly failing: A plain NOOP-build on my SSD/i5 powered latop takes 7s! And even the gradle daemon does not really speed up things. So as of today we're still sticking to our homebrown multi-module/build system for Ant. Still way faster...
Aha, gotcha.
For Glassfish, [this one is still relevant](https://netbeans.org/kb/docs/web/security-webapps.html), although, I wouldn't use it in production without encryption and programmatic security added to it. For the basics though, it'll do. Glassfish uses JAAS for security and supports a multitude of authentication types (Basic, Form, Digest, LDAP, JDBC, etc)...
I fucking love Ant. I came here to see how other's are successful in transitioning to Gradle. Was disappointed.
i don't think you are wrong. it does less than DW. it is also leaner. if you need all that DW does, sure ... go at it. 
I use Groovy quite frequently, but not in production. Frankly, my experience using in test code and scripting has scared me off of using it in production. That said, I've found it great for those purposes. Spock is a unit testing framework built on Groovy which I use for most of my unit tests now. It is also my go-to language for a one- or several- time use script that's above my bash abilities, which aren't great. I haven't used scala much, but I like it.
I wouldn't use JHipster for real work... if you want a rapid dev framework go to grails or something. It's got scaffolding and doesn't rely on several other different tools under the covers like JHipster does. Also, JHipster uses spring-loaded as one of its features and that project is more or less dead, I don't think anyone from pivotal/spring actively commits anymore. Dropwizard is interesting, especially if you're just doing service stuff, otherwise, Spring boot is where it's at. I've been playing with boot quite a bit lately and it's super easy to get up and productive, a huge leap over normal spring mvc.
I've moved from Maven to Gradle for a few of my projects. I've noticed a little longer build time (make sure you're running the daemon), but on the whole I'm very pleased. My recommendation would be to write a build.gradle from scratch with some mock project. You'll learn it super fast if you're reading documentation finding the exact stuff you need versus copying and pasting a longer existing script. Make sure you're using the new plugins syntax and be sure to learn about wrappers. Good luck!
This looks very useful, thankyou.
I just gave it a skim before bed and it looks to be what I need, thankyou.
It seems the startup and parsing takes significant power &amp; time. Maybe the daemon mode did not fully work me. But IMHO it's already quite impressive that Gradle provides a workaround for caching from the start. 
Keep in mind that this is my opinion. These aren't things I don't like about the language, just reason's I wouldn't use it in production. Basically what it comes down to is that the things I like about Groovy for test code and scripting, are things I don't want in my production code. I like a strict compiler for code that's going to production. I like the flexibility of a dynamic language at times. I know that you can tell the compiler to do type checking and issue errors when appropriate, but that's an explicit decision you have to make. I don't trust certain colleagues, and to some extent myself, with the flexibility that Groovy provides. I for test code and scripting, I'm only shooting my own foot off.
groovy is essentially dead. pivotal stopped support for it and grails. Unless another well funded company picks up the project I don't have much hope for it. http://blog.pivotal.io/pivotal/news-2/groovy-2-4-and-grails-3-0-to-be-last-major-releases-under-pivotal-sponsorship if that link doesn't load here http://www.infoq.com/news/2015/01/Pivotal-Pulls-Groovy-Grails-Fund
I think that the trick with groovy is to write mostly java code and use some of the niceties that groovy provides. So this means making sure everything has a type, and only use the functional additions, gStrings, and truthyness.
I just pushed a new version with actual Java packages like it should be with the help from another GitHub user. Check it out!
It is not production-ready. Google is testing it.
want to be able to multitask while macroing actions
Groovy is primarily for scripting / test automation at this point, especially now that pivotal dropped support. Its also similar enough to Java that it's not hard to pick up what you might need. So my vote is easily Scala. You might also look at Clojure.
Ah, so you're looking for a java application to drive macros and mouse mimicking through a standard Java application. Autohotkey, while not Java, may be the best solution to your problem. But, I can understand the challenge of wanting to write your own! :) At the very least, may provide good inspiration for developing your own! [java.awt.robot](http://docs.oracle.com/javase/7/docs/api/java/awt/Robot.html) would be the java library you'd most likely use if you'd like to build your own. There's a lot of tutorials and examples out there to get you started.
Why? Please tell me you're not planning to do this all at once and will only consider it as stories come up to touch an existing project? I found Gradle to be a major PITA when we switched from Maven. A couple months later and I have mostly gotten used to it. Once you start realizing how easy it is to use and implement new plugins you will find Gradle a lot more pleasurable... and at the same time also frustrating because your coworkers never document there plugins well.
I was an early adopter of Scala, but these days my favorite JVM language by far is [Kotlin](http://kotlinlang.org/). It's simpler than Scala, with excellent IDE support (it is created by the IntelliJ guys). It also has some super-useful features that Scala lacks ([smart casts](http://kotlinlang.org/docs/reference/typecasts.html) are especially cool, particularly when combined with the way that Kotlin bakes null-safety into the type system). Scala is ideological, Kotlin is practical. Scala has more attention because it was really the first statically-typed JVM language after Java, but IMHO Kotlin is superior in almost every way (except that it's not as well known).
Selenium
it says selenium is for web browser automation i was looking more along the lines of an overlay for anything
Well, even OpenJDK8(edit: the implementation) isn't out yet, so I guess they are getting their time so everything work fine to get full advantage of the feature in Tomcat8.
Check out AutoIt. 
Yup, I've been using Kotlin on a side project for the past month and have really come to love it. 
[Take a look at this thread](http://superuser.com/questions/29432/using-windows-7-how-can-you-use-multiple-mice-to-get-multiple-cursors), which broaches the topic of having two different mouse inputs registering at the same time. I don't see anything Java specific though. If you were set on using Java still, your best bet might be to run your game in a virtual machine (like VMWare), and code something in Java to operate the mouse within.
Scala is an excellent programming language that's definitely worth checking it out. It's rapidly become my go-to language for pretty much every purpose. I have much less experience with Groovy - I've only ever really used it for configuring Gradle - but I've always found it confusing and difficult to use.
Have you considered Clojure? Its used for rapid prototyping **and** high-throughput data processing (check http://riemann.io for an example). Even though its syntax is quite different, its functional paradigm is close to Scala. You'll find lots of resources on "why Clojure", but this recent thread is a peek on "why not Clojure" that I found interesting and might help you decide: https://www.reddit.com/r/Clojure/comments/2r63gt/why_did_you_stop_using_clojure/
Groovy is not dead just because some company has decided not to gratuitously pay half a dozen guys to work on it full time. Gradle uses groovy and the new ratpack.io uses groovy. Groovy is great for scripting and writing tests. It's not going anywhere soon.
If you're trying to accomplish this "quick and dirty," I'd say this will be your best bet with the least amount of over-head.
You could save the mouse position, move it and click in-game, and then immediately move it back until you need to click again. It'll be okay for reddit browsing if you don't mind the now and then missclicks and jerkyness.
I am using it but not 100% akka sold yet. Maybe when typed actors come
This is pretty great but does anyone know how to get OAuth2 SSO working with something other than Spring as the Authorization Server (like CAS or OpenAm)? 
Greg's talk is great (and so is Greg himself!). It explores a bit more of the motivation and backstory which led up to Dagger 2. I gave a talk at Devoxx in November which went a bit deeper on the API, usage, and internals that may also be interesting to those looking to learn more. [Slides](https://speakerdeck.com/jakewharton/dependency-injection-with-dagger-2-devoxx-2014) &amp; [Video](https://parleys.com/play/5471cdd1e4b065ebcfa1d557/).
I think Groovy and Grails was the hot new rapid prototyping kit for the JVM when it came out and for some reason (I can only speculate based on what I've read and the small amount of Grails work I've done) it lost its luster.
Part of my selection criteria is whether I think Groovy or Scala will gain any sort of mindshare in enterprise development. If there is declining interest in Groovy AND soon there won't be a clear commercial support offering, I'm inclined to shy away from it. But, I also haven't seen much Scala adoption in the enterprise either.
Are you using these in a production application? If so, what?
I'll take a look at Kotlin. It might be a gentler introduction to functional programming on the JVM.
Kotlin sounds interesting. And I am an unapologetic JetBrainz snob. Will be interested in seeing what kind of ecosystem has been built around. Whether it has wide appeal outside of what JetBrainz promotes.
Very informative link. Thank you!
Microservices seem like a good fit for Groovy. Any experience with it in larger codebases?
Any experience with it in large projects?
Does Kotlin have any significant market share outside of jetbrains?
Yeah I'm kind of curious what your use cases are. Drop me a PM if you don't mind?
Given the current trend/fad of adding functional programming features to every language, seems like Scala would be the best investment of your time. Even if you don't use Scala specifically, the concepts should carry over.
https://i.imgflip.com/h71ab.jpg
I'm in the process of moving a large modular maven build to gradle, and have noticed significantly better build times with Gradle. The biggest difference was with the build without a clean; gradle takes about a third as long. Gradle is much better at eliminating unnecessary work, for example, if no code in a module has changed, and no dependencies have changed, it doesn't bother running the tests.
Slowly and carefully. I was at a talk by Hans Dockter, who started Gradle, his advice in this situation was to start by making your Gradle build as close as possible to your ant build. Don't try to go all the way from an ant build to a beautiful textbook Gradle build. Just replicate your ant build, then Gradle gives you the flexibility to improve from there.
I don't remember if the Robot.class could do something like what you want, or if it actually moves the mouse. If you can't figure anything out, you could always run your program in a virtual machine using VirtualBox or some other software.
I took a look at this a while back. Activator really blew my mind. Being able to generate a stub application, launch it, and load an in-browser IDE was unlike any previous web development I'd done with Java. I ended up using Spring Boot and Angular, mainly because I didn't grasp Scala well enough to really get full use of Play and/or follow Scala heavy tutorials. In hindsight though, damn that's slick, and a lot more cohesive than Boot + Angular.
PIG and Hadoop
Scala
Thanks for the info. What's your experience been with Groovy outside of Grails? Do you think there's much use for the Groovy outside of the Grails framework?
Scala and Spark seem especially hot right now, the company I work for has several projects in this area.
So, you want to play Cookie Clicker very efficiently? ;) Perhaps, instead of simulating two mice at the same time, have your cursor jump between the position you are directing it at with your mouse and another position that you set before you run the program, and it runs your macro when it jumps to the set position. But then you run the risk of clicking during a frame where your cursor is moused over your game. And misclicks are annoying.
UISpec4j Not very easy to use but generally reliable once you get used to it. 
This is very OS and program specific. Different operating systems handle mouse and GUI interactions differently, as do the programs being interacted with. In general, what you're describing is not easy, because the OS has little reason to support multiple mice (ever tried plugging in two mice at the same time?) not to mention it's complicated to do (how does the second mouse share window focus with the first?). That said, some applications expose ways to simulate mouse interactions, a good example is [Selenium WebDriver](http://docs.seleniumhq.org/projects/webdriver/). Even so, WebDriver has to trigger certain interactions on your machine, so it wouldn't be perfect. For what it sounds like you're describing, you'd do better to run a [VM](https://www.virtualbox.org/) and run your automation script inside of that, rather than try to make your actual OS do two things at once.
Ignore Groovy. Learn Jython instead. That gives you both a scripting language on top of Java, and a language that's useful in its own right (it's Python). Plus, if you ever want to do statistics/machine learning, knowing Python is very useful. If you really want to learn something that's going to be useful I'd forget about programming languages altogether and do machine learning instead.
Yes 100% I built an application when I was younger which played roulette in a flash window on my behalf using this method. When I get back home I will look it up for you if the answer isn't here already.
https://code.google.com/p/windowlicker/ it's not been maintained in a long time though
QF-Test, support for web (both PHP and JSP), Swing. Integration with Jython, databases. http://www.qfs.de Very strong tool once you get a hold of it. Not free, though you can request for one month evaluation license.
At first ask your questions in /r/javahelp Try to debug and look at the value returned by RootNum.getSelectedItem(); Without errors I guess the value you pass might be incorrect. What happens if you write '103' directly in your query?
I share the same opinion about groovy (it's dead) except for gradle custom plugin development.
Exactly. This is solving a problem that should not exist in the first place.
Good question. It seems that Groovy was the "big thing" a few years ago and now it's taken a back seat. I know a that Groovy is still quite big in the Spring camp but it seems Scala has gained a lot more traction in Enterprise. Geb (Selinium + Groovy) was really the only reason I used Groovy as it had a jquery like syntax. Also the QA team are using Groovy for SOAP UI testing. My preference would be to move to Scala (nice coursera course on Scala) or Clojure. Forget about Groovy as it's relevance seems to be dwindling. Clojure is fully FP while Scala gives you the balance. Potentially you could write Scala and just write what you would in Java until you feel comfortable with the new features. The extensibility of Scala is one of it's biggest selling points. The other problem is complexity can build up quickly in Scala and it's hard to know what the "best practice" is when you can write the same code 10 different ways. Some links Clojure [Why Clojure](http://thecleancoder.blogspot.co.uk/2010/08/why-clojure.html) [The last programming language - Clojure &amp; Uncle Bob](https://skillsmatter.com/skillscasts/2323-bobs-last-language) [Clojure at Nokia](https://skillsmatter.com/skillscasts/3891-clojure-at-nokia-entertainment) [4Clojure](https://www.4clojure.com/) [Clojure Koans](http://clojurekoans.com/) [Clojure Koans Video](https://www.youtube.com/watch?v=P6S_1nCfjWA) Scala [Scala Case Studies](http://typesafe.com/company/casestudies) [Why Scala](https://www.youtube.com/watch?v=LH75sJAR0hc) [Twitter guide to Scala](http://twitter.github.io/scala_school/) [Scala Testing](http://www.infoq.com/interviews/jessica-kerr-java-scala-testing) [Best Practices in Scala](https://github.com/alexandru/scala-best-practices/) [Scala Koans](http://www.scalakoans.org/) [Scala Through Katas](http://technologyconversations.com/2014/03/10/scala-tutorial-through-katas/) [Why I should learn Scala](http://www.toptal.com/scala/why-should-i-learn-scala) [Coursea Programming in Scala](https://www.coursera.org/course/progfun) Finally [Comparing Scala &amp; Clojure](http://programming-puzzler.blogspot.se/2013/12/clojure-vs-scala.html) 
I hope they're fixing that dumb-ass editor refresh that happens every ten seconds.
what do you mean for "editor refresh"?
I have never actually noticed this. Weird.
I liked how it integrates with Cassandra. I'll give it a try :)
Kotlin.
I have, and the issue occurs on fewer configurations, but there will be deployments in the wild with the broken versions for at least the next few years, which is why we've fallen back to the software pipeline. EDIT: For those who might encounter the issue: it manifests primarily on the on-die Intel video devices as runaway growth of off-heap memory. It's slow in the case of normal user interactions, but animations make the leak rate jump to about a gig/minute.
Outside of Grails (and ratpack I think), Groovy on its own seems to be something people generally use for testing (spock, etc) or automation (jenkins, gradle, etc). Groovlets never really caught on as a full solution people jumped on, although they work just fine. I work about 95% in "web applications", so any language/tech I look at is viewed through that lens - I don't do "PHP" standalone - my PHP is in the context of web applications (same for C#, Ruby and other languages), so that end, I'm not sure if I have much more specifics to offer. It's always felt to me that Groovy was aiming to be a "Java++" vs something like the more radical syntax departure of Scala, Strachan's comments notwithstanding. As such, Groovy's always been in a weird spot. The bulk of people doing Java are doing it based on employer/project requirements - deviating from those requirements is often not an option, however much benefit it might bring (witness that there are still projects being built and maintained on Java 1.5 in some companies, vs upgrading to anything more modern). On the other hand, people who *want* to and have the ability to try new things typically try *really* new things - new paradigms, syntax, etc. Scala/Clojure/F#/Erlang/etc all have seen an uptick in interest and adoption. If you're going to try something new, go whole hog, so to speak. Why spend time on simply improving the base of what you already know? At least, that's how I see it. Groovy's not going away, it's a bit frustrating to me that it never got as much adoption as I think it deserved. It was my onramp in to the world of JVM 8 years ago, and it's no doubt brought more people in to the JVM camp. But given the intermediate step it represents, I don't think it ever was in a position to appeal to a large enough segment of "passionate early adopters" like Scala/Clojure evangelists. My own view - Groovy is very pragmatic, but new tech often appeals to 'purists' seeking out the 'next big thing'. Groovy was not 'purely' any one particular thing to cement mindshare. But given that it really is primarily "Java++", given a choice, I'd rather develop in Groovy over Java, just because of the convenience methods I get. Hopefully not too long of a rant :)
I have never seen this on my Mac, Idea 14.03
try [IntelliJ IDEA Essentials](http://www.amazon.com/IntelliJ-IDEA-Essentials-Jaroslaw-Krochmalski/dp/1784396931), it's good.
You shouldn't rely on the JRE installed but instead bundle your own JRE with the application. Many systems don't have an up-to-date JRE for various legitimate (no admin rights) and illegitimate reasons (just refuse to update). Bring-your-own-JRE solves this and gives you control over the environment in which your application runs. It's not really that big and there should be tools that will create an installer with bundled JRE for you.
Yeah your right, you can send a dude to a cs college but you can't make em like it!
It existed for a long time without any corporate support. I *suspect* the worst case scenario is that the core team may form another services company (or two) and continue to fund their own development. 
Took us about a year to move from ant to gradle (worked on it between sprint tickets). The pros are the dependency trees we now have and the possibility to change the trees, we used to have jar files in the project. We are not at a stage where we can run the application using the tomcat or jetty pluging etc but we can build our war files and use the eclipse/intellij plugin (we did not have an ant script for this). The most work was make the project work as a war file. Our ant script made changes to the folders inside an 'unpacked' war, the project did not build a war file but just moved folders and files to a folder where tomcat would search for them.
For me functional idioms are a means to an end, not an end in themselves. Mostly what you want is a compact lambda syntax, which Kotlin has.
IntelliJ is amazing, but you don't need to learn Java to benefit from the awesome things JetBrains has created. Most popular languages have a JetBrains IDE available that has the exact same look-and-feel. IDEs obviously won't take you as far in a dynamically-typed language like Python as they will in a statically-typed one like Java, but they still help a great deal. https://www.jetbrains.com/products.html Also, if you're a student, you get free JetBrains IDEs: https://www.jetbrains.com/student/
Java has been on my 'to learn' list for a while now but as I just code for a hobby as opposed to work I tend to just stick to C. I know it is a bit of a 'silly' reason but I get put off Java because of Oracle. The reason I have thought about learning Java is because it has quite nice built in networking, threading and GUI when is something I get quite frustrated with in C. I get a bit overwhelmed with the size of Java though. I am used to the simple and small C, it is a lot of work though!
I haven't ever noticed this. I'm using Darcula. I'm trying to notice it now but I can't seem to make it happen.
Now C++ as well.
What a pity it's not in English...
Lol, ive been saving all these links on confluence to try and get people to migrate to scala at work. My work mate is doing the same but he is in the clojure camp. We cant both win 
The link does not work for me.
CLion still looks very crude.
Robot moves the mouse :(
fixed now.
Hrm... best of luck to you. I'd still like to invite you to continue to keep tabs on Groovy, and hit me up any time with questions - happy to help. If you haven't already, install http://gvmtool.net to let you easily install/manage multiple groovy, grails, gradle and other gr8 tech. End of the day, it really depends what you want to do - there is no one magic platform to rule them all :)
The singleton protection is a nice one...
Please don't send this. Just.... don't.
I use IntelliJ 14 on a Mac with Darcula and this doesn't happen to me.
That bad :(
This happens in OS X 10.10 (Yosemite). Yes, it has been reported, yes, Jetbrains have acknowledged it exists, and yes, they are working on it. You can follow the issue here: https://youtrack.jetbrains.com/issue/IDEA-131632
Seriously? Could you give me a use-case where this ugly hack is necessary? In my opinion a singleton should not know that it is a singleton. That's something that should be a managed by a DI-container like Spring or Guice. Hardcoding it into the class itself like this seems weird to me. (Especially if the singleton was state-full because that would kill testability.) Or am I missing something?
Out of these two, definitely Scala. The only gripe I have with it is that it's such a syntactic mess.
ohh. I'll jump on that. I have a project I'm working on to update the Spring MVC Step-By-Step documentation, since it was written Pre-Tomcat7 (which is already 1 version out of date). For the morbidly curious, here is the randomly chosen blogspot name I threw up to contain my notes: http://learningrealworldjava.blogspot.com/
If you are writing a program that requires protection against misuse; a licenced product. It might be useful. I would personally never use it, I just liked the idea...
How can you do that with mockito alone? I've researched this for a while and didn't find a way unless you remove Spring from the picture. Powermock is a good alternative. Though I admit, I have very little experience with it. But from what little I do know, it seems like it's 6 one way, half a dozen the other. A lot of people think that every collaborator should be mocked out or else you're not writing unit tests. This is not true. That's just one way of writing unit tests. See http://martinfowler.com/bliki/UnitTest.html I happen to write "sociable tests". 
Actually I would pay for this service.
I'm on board too! Spring is such an expansive ecosystem, I think it deserves it's own subreddit. We're developing an Angular webapp, and we're trying to leverage Spring wherever possible. I've been wanting to cover some of it on my blog as I get more familiar.
*Dirty deeds, developed dirt cheap.*
&gt;Spring Angular webapp Hey! That's exactly what I want to learn. Could you provide any directions? I would appreciate every link or anything for what matters.
As I said elsewhere: &gt; A lot of people think that every collaborator should be mocked out or else you're not writing unit tests. This is not true. That's just one way of writing unit tests. See http://martinfowler.com/bliki/UnitTest.html I happen to write "sociable tests". 
I agree with this except I'd add the caveat that it is useful to have one unit test that loads all of your Spring beans, to make sure your application context loads correctly. This test doesn't need to do anything else.
Awesome. Thanks. I'm too lazy to file a report myself so I'm glad someone else did it
If Oracle's involvement puts you off learning Java, then depending on your development platform (I.e. If you're on a Linux distro), you might consider the OpenJDK. 
I have refined your trend analysis looking only the programming category: http://www.google.com/trends/explore#cat=0-5-31&amp;q=%2Fm%2F091hdj%2C%20Clojure%2C%20Groovy%2C%20JRuby%2C%20Jython&amp;cmpt=q The interest for the three of them is mixed, although Groovy is indeed in decline. Jython and JRuby were much more popular but now are less searched, which does not indicate that they are less used. For example, you can have frequent searches for "clojure assoc", but "jython for" will be less searched than "python for".
As far as I can tell, your code sample removes Spring from the picture. Re: "sociable tests", the alternative "solitary tests" have tests fail when you're merely refactoring. And, if a deep bug in the system causes your testing results to go crazy but you run your tests frequently, you should know exactly what change you made that broke everything. Given these two, I prefer "sociable tests" for this reason. The point I'm trying to argue is that one of these two ways isn't wrong vs right, it's just a preference. And just because Spring makes it hard doesn't mean you shouldn't want to do it. 
It removes Spring from the *testing* picture yes, which is kinda on purpose. Spring isn't really part of the classes definition, its just application glue Your point is fair enough though, I prefer solitary but neither is inherently wrong. But either way, you can write all of your testing without having a bunch of spring goop in them =) Or you could use @RunWith and @Autowired within the test and at least remove the context grabbing and .getBean calls in all the tests.
&gt; Your point is fair enough though, I prefer solitary but neither is inherently wrong. Agreed :) &gt; you can write all of your testing without having a bunch of spring goop in them =) Yes, but you changed the problem to solve it. You tested `Middle` and mocked `End`. Can you use mockito to test `Middle` and mock `Database`? Ignore that `Database` is a Database, pretend it's named "FooBar". You'll have to wire everything together manually to achieve this (I think).
Doooooon't. 
The whole analysis uses the programming category, but Scala is the only one using "programming language" instead of "search term". Unfortunately, the tool does not allow specifying the other terms. And yes, Scala interest is growing and in the same level as Clojure and Groovy. Let the games begin.
Well, not *just* syntactic sugar. They do a lot of extra magical things behind the scenes to be better than syntactic sugar. But from a syntax/semantics view, they're basically the same thing as creating a new instance of the [functional interface](http://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.8) you intend to use. You should be able to refactor them as if they were just anonymous types implementing the functional interface.
I'm not... I'm just going to cringe on back to the stone age. I take vyvanse for school and it makes me do awkward, crazy and impulsive things sometimes. This is one of my greatest shames