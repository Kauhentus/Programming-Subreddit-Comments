I moved back from Maven to Ant. Wrote an Ant build frame work called Theena and finally wrote a Release tool to call it (and generate project build / release files automatically). Reads in the project source and uses tags in that source as the basis for what class files are required for a release with additional files listed in a small xml script. (That way nothing admin related is accidentally released). Just add / remove tags too the source appropriately and the release gets smaller / bigger. The build xml script can also call ProGuard too obfuscate the release for production. Part of a suite of command line tools for managing a core source code base's across multiple projects (such as Ludum Dare for example). Really handy having a turn key release solution that builds on any machine.
&gt; Would love to have a one-editor-to-rule-them all. You can change your car's oil using only a screwdriver, but would you want to?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; I should probably use an IDE Yes... you should.
Yo, new Gradle developer experience lead here. I fully empathize that it's much too difficult to wrap one's head around Gradle, so I want to share some things you might find interesting: * The Gradle Kotlin DSL, which is nearing production-readiness, substantially improves the assistance/docs one gets through the IDE because it is statically-typed. * However, the Kotlin DSL does not help with the large API surface and understanding of Gradle concepts, so I have been working on improved docs and best practices. * However, most folks don't or won't read docs, so additional tools will help users opt-in to strictness and quality checks that enforce best practices through the tool. Even with all that, one can think of build tools like languages: one tool will never be able to suit all needs or projects. However, I intend the broaden the audience for Gradle by making it more accessible to a wider audience. I'd love your help. My Reddit/Twitter DMs are open (same username). DM me the 1 specific thing you would change about Gradle if you could. 
&gt; In Maven, you also have a build cache, that's the target directory That's not the same thing. A build cache survives running a clean. 
That's not what they asked. They didn't ask for tutorials. They asked if sockjs is being used by real projects.
It's true that nearly any language feature can be abused. So, I would say that we have to weigh the upside of the feature (when used properly) vs. the potential downside of it making code harder to reason about when used improperly. In the case of var, it seems that it is at its best when it replaces a type declaration that is very obvious, such as Car b = new Car()..., or String text = val.toString()). However, those seem like a very small wins. So why add the feature if the wins are small but the potential for abuse is high? It seems not worth it. And yes, I would extend that reasoning to other features in Java, including some that have been around since day one. Examples of those are the ternary operator, the prefix ++ operator, and C-style definitions (Object array[] = ...). I would prefer them to not be in the language, because the upside is very small vs. the potential for abuse/confusion. But, I deal with those, and I guess now I'll deal with var, too.
I would be curious to see Maven embrace this : https://github.com/takari/polyglot-maven
&gt; The Gradle Kotlin DSL why kotlin? you know there are still java projects out there that aren't android right? or are you just pushing for gradle to be exclusively used for android projects built in android studio?
It's used for a whole bunch of stuff and is a pretty useful language to know in general. Gradle gives it a very bad rap because it looks entirely magical whereas normal groovy is far more understandable. Having said that, I'd be be very happy if it disappears from gradle, as I don't think it's application there is very good.
yes i know but why would I want to learn Kotlin then. it doesn't solve the problem people brought up about having to learn another DSL language they have no use for.
Ah yes Meson, the "cross platform" build tool that uses pkg-config for dependencies. Brilliant. That's great if all your platforms are basically Linux. Nobody uses pkg-config on Windows. Meson is an alternative to autotools, not CMake.
The difference for me was that after googling, I could figure out how to do something in Gradle, whereas in maven after googling I'd often be no closer to finding out how to accomplish what I set out to do.
Looks like it is original to me. Try to google phrases from it.
Because it is statically typed and can be used to create a DSL that closely matches the Groovy DSL for Gradle. Note that one will never be required to migrate to Kotlin. Groovy will be around forever, but will not get the code assistance that will be available for Kotlin. A build done right will keep imperative build logic written in a JVM language of the user's choice under buildSrc/ or in plugins, and the DSL is used to help avoid users needing to learn the language the DSL is written in. When that cannot be achieved, IDEs/tools should help.
Several yers ago, I migrated 15 years old Java EE project (2. mil lines of code) from Ant to Maven. Project consists of 60+ modules, some of them very special like DLL library written in Delphi. Main motivation for migration was the total mess in ant build scripts - every module build was written differently. This ant script mess evolved incrementally by years and due to lot of people altering the scripts in no consistent way. When I was working on this migration I identified the main "enemy" very soon - procedural way of writing the build scripts. Migration takes 3 weeks, and finally I need to implement only one own maven plugin. And it was big success for the whole team, because complete rebuild went down from 30 minutes to approx 10 minutes simply by the fact that maven builds every module only once. Development was speeded up also, because you often work only on one module and to build new version of app - running install goal on modified module and wrapping module (ear) takes less than 1 minute. Every developer in the team very soon like it A year ago I stepped up to 3 year old project using gradle and I experienced de-javu - procedurall hell of build scripts is back, IDEA IDE integration totally lacking due to so unstandardly written gradle scripts. I was tasked with taking the project back on the foot, developers was lost in the scripts and do not understands them. Guys who wrote them are out of project and nobody understands scripts sufficiently. So the history repeats with the same outcome :). This is my experience with java build tools.
God no you sick bastard ;)
fair enough. I don't think this will be make anyone that is already using maven want to migrate over but I guess that's not the point you were making.
i've spent more time troubleshooting gradle scripts than actually writing java. The only way to debug is hacky reflection trickery with stdout. 
lol :P
I have no idea where you people are coming from. I don't have a single colleague in the last three years who wants to go back to maven. That's from two different companies.
The hope is that there won't be such a sharp IDE support gap, and that _may_ entice users of other build systems it's worth a try. Let's see — we're betting a lot on it.
i actually find the opposite to be true for me. but then again my current project is some big enterprise legacy app.
Why would you do that to yourself ? it’s like opening a can with your bare hands
it depends on the type of data its representing. Some more complicated data structures are easier to read in XML. and XML is more verbose so you'll understand it better.
No. I use eclipse for most development in java, everything else I use sublime. When I remote I use vim. Pick a modern IDE, use code complete, install analysis tools and plugins. Set up format keys. Make your life easier...
xD
What's wrong with Ivy? I haven't had any problems.
Gradle is hipster bullshit.
Late reply, but just want to point out that technically the US is a metric system country. It's just difficult to change culture. https://en.wikipedia.org/wiki/Metric_Conversion_Act
Maven does a breadth first search of your dependency tree looking for transitive dependencies. It picks the first version it finds in any given depth as the version it'll ultimatly use. It doesn't care if one artifact needs a newer version than an older one, or if theres a security hole in one thats patched in another. It just takes the first it finds and calls it a day. The only ways around it are dont pull in any transitive dependencies and specify everything yourself (This is intensely time consuming and highly likly to mean you just never update anything ever again) or just specify any potential conflicts by hand. Which is intensely time consuming and pretty much guarantees you never update anything ever again. Mavens dependency resolution is a huge pile of shit.
[github](https://github.com/lessthanoptimal/BoofCV)
As is mine. We were using ant, and I wasted two weeks of my life trying to build it in maven before giving up. 
being statically typed provides an opportunity for ide tooling to be much better. 
this is just memetic and fashionable. wait a couple years and xml will be hipster cool again.
&gt; A build cache survives running a clean. does it? i guess it really depends on what you mean by "cache" and what you mean by "clean".
&gt; I have no idea where you people are coming from. presumably from the set of people not in "colleague in the last three years", which is (presumably) a nontrivial number of people.
My team and I usually do everything in the terminal and command prompt so i guess the ide tooling doesn't have much use for us. We gave some ide plugins and tools a few tries but they were slow and buggy
Jackson and Gson offer much richer feature sets than the JSON binding API.
I think you meant Gradle has this problem, not Maven. As of [4.6](https://docs.gradle.org/4.6/release-notes.html?_ga=2.71430163.1815033286.1522814025-80095129.1522192957#dependency-constraints-for-transitive-dependencies)) Gradle just started to address this. Until this point, it was no better than Ivy. Without dependency management, your builds must have been very fickle.
Like intellij
&gt;Microservices aren’t supposed to share code. I mean... mostly? But it's bold to say you'll never have common code. And the moment you do, and want to share it, you need an artifact repo. FWIW: Nexus has a Docker registry now too. We just started using it. So during my deploy phase I do a `mvn deploy` and also push the Docker image. *Actually* I'm using [docker-maven-plugin](https://github.com/spotify/docker-maven-plugin) so the `mvn deploy` does the docker push for me using my pom's version
No, i ment what i said. Maven picks the first version it finds and it doesn't care what the version is. Using the highest versioned transitive dependency pretty much always works (which is what gradle has always done)
This feels like a plug for heaphero
I've used them in two projects, although both times with sockjs and stomp, and overall it's been quite suitable, especially because it integrates with spring security as well.
Why would anyone care about Windows anyway?
I use 99% emacs. I tried to use eclipse, but find it just annoying. I sometimes use it for Android stuff, but other than that, I always return to emacs. Disclaimer: I'm an old fart. My favorite cpu is z80, not i7. I'd like to use my c64 with z80 module for development, but oracle doesn't support this platform yet. ;( 
Back in the late 90's when Java IDEs still weren't easily available, yes. Nowadays only in an emergency, when Eclipse or Netbeans aren't available.
The good thing about Maven is that, once you googled, the solution is one and only one. With Ant or Gradle you'll probably find N solutions, only one of these is the correct practice but you'll have to find which.
Yarp, we're using it for a large enterprise fintech application. Wasnt our choice, as we inherited the code, but we're adding new features. It's the main way the FE and BE communicate 
No. I use IntelliJ, vim or Sublime for all my development needs, the former moreso for Java development. 
I prefer Eclipse. It is a defacto "industry" standard. Many Java shops use it, if you know it, you can easily inter operate with a new team from day 1. Many tutorials use Eclipse in examples It is also completely free of charge
Why rely on conventions when the typing takes care of it?
&gt; I prefer Eclipse. And that's perfectly fine, everybody can choose their tool, but that doesn't make it ok to bash the other toola &gt; It's a defacto "industry" standard. Funny enough, only used eclipse in University, last 3 jobs all had intellij. &gt; Many Java shops use it, if you know it, you can easily inter operate with a new team from day 1. You can interoperate with any tool, and again, most of what I seen use intellij and have all the documentation preprared for it, not eclipse. &gt; Many tutorials use Eclipse in examples Same with Netbeans, and it's mostly outdated tutorials, newer ones are mostly tool agnostic or show instructions for both IDEs &gt; It is also completely free of charge You are in luck! The community version of intellij idea also is free of charge, and it's missing things you don't really use outside of a corporate environment, but if you would like the ultimate version, it's free for students and open source projects!
Maybe we could have that put into the sidebar or r/java, so it doesn't have to be repeated every time? 
14 days ago you posted https://www.reddit.com/r/woodworking/comments/85sipg/i_made_a_pikler_triangle_for_my_daughter_out_of/
How many times do you think you will run into this issue? I use Kotlin a lot now so I hardly ever see explicit type names in situations like this. It takes some getting used to, but you realise that you're actually clever to either figure it out from context, hover over the variable or ctrl+click to have a look. If you really have problems you don't *have* to use var.
Whoosh!
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
To quote my boss, "Gradle encourages people to be sloppy."
We use websockets for depositing data to a data warehouse. I don’t really know why, I think the designers are old and don’t like rest apis for some reason lol
&gt; But my impression is that Spring wants to be your solution for everything. Not precisely. Spring wants to be your middleman to everything. You want to session caching? Use Spring Session, and you can choose Redis, Gemfire, EhCache, etc., etc.! You want to build data a data access layer? Use Spring Data, and you can choose JPA, Gemfire, Mongo, etc., etc.! I use Spring because it's been a pretty good middleman to me so far. &gt; I remember when Spring first came out and they had the cojones to call it "lightweight" Relative to old school J2EE and EJBs. Things have changed significantly since then.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Knowledge of Java mutates Indian men's DNA, and they start to grow more facial hair than before. Length of the moustache can determine the years of experience in Java.
If I remember correctly, you only need any Oracle certification to be granted a POMO - Plain Old Mustache Object. 
I can't imagine someone with the name Bai Kolio who doesn't have a moustache
That's more accurate. But, it's worse really. You're introducing an intermediary where none is needed. You're relying on Spring Source's idea of what's common in all of those services.
That's called Polymorphism...
Without dependency management, that isn't a safe behaviour to lean on. If you're using Gradle, I strongly recommend that you update and start using their dependency constraints. You've been very lucky so far.
&gt; are only senior developers allowed to have these? Yes but only the Women. /s
To be clear, only Java 8 and above. 
It's a trade off.
Please care to elaborate?
It's been modified since my comment.
Anybody can wear a cowboy hat in Texas. Anybody.
Except op. He clearly is not ready. Wait for that promotion bud!
HDD - hat driven development 
This is really great, good job!
As a developer from Texas, I've never seen developers wearing cowboy hats. That always seemed more like a lawyer thing to do.
Cowboys and Indians is a game commonly played in Texas. You play the cowboy and you work overtime to setup this great system and then they fire you once your done and hand it over to India once it does not generate capitalize hours. Then the cowboys burnout and die, the project rots into spaghetti.
Something something Team Fortress 2.
Wow very cool!
looks good. thanks for sharing.
I'm learning java in Texas, and I can confirm you have to earn the cowboy hat. When you are deemed ready it begins to grow; you can never take it off. At least you have a cowboy hat, though.
That how you assert your dominance in Texas.
fair enough...
I'm currently in CS1 at a university and [this is my favorite java exercise website](https://www.w3resource.com/java-exercises/index.php)
Check the right panel at the page. It writes: &gt; NO programming help, NO learning Java related questions! and guides you for such purposes.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Looks really nice!
Well, for starters, my solution would not be annotation based, so maybe the naming discussion is premature?
Short version. I could just be the way I've seen it used in commercial environments. Ivy is used to provide dependency management for a mountain of nested ant scripts with more tentacles than an H.P. Lovecraft novel. None of the consistency or readability of a Maven pom.
websockets and rest apis are quite different things. websockets aren't particularly "old", and can (potentially) have significantly better latency and bandwidth characteristics depending on the problem you're solving.
What would you propose instead?
Personally I've never seen any of them in use. Just because you can doesn't mean you should... Personally I have no issue using either Gradle or Maven. Once you start working in a polylglot organization the value of encoding build and deployment orchestration in Groovy drops massively. Every polyglot org I've worked in has favored shell or Python for "glue" tasks between compilation and packaging.
I think it makes good sense after a second reading, but if you see some better alternative you really should submit some feedback. Remember it's a proposed, new language feature, so there's no sense of familiarity with it, yet. Do you think this syntax choice is something that would be a real impediment to developers after they've played around with it for a day or two? Why? Is it more or less confusing than, say, nesting lambdas: Function&lt;Integer, Function&lt;Integer,Integer&gt;&gt; fg = x -&gt; y -&gt; x + y; fg.apply(1).apply(2); // 3 (`CONSTANT` should probably be called `IDENTITY`, and `x^2` sadly means `x xor 2` and not `x*x` in Java)
&gt; Maven does a breadth first search of your dependency tree looking for transitive dependencies. From my understanding, the packager of the dependency gets to stipulate what version or range of versions they want. If Maven finds that version it uses it, if it doesn't it downloads it. You have the ability to override it by *Excluding* the dependency, and manually selecting the one you want. If you don't have the DependencyConvergence option selected then it will not complain if different dependencies ask for different versions. Otherwise it will fail or warn you based on configuration. /u/tastle is correct, Gradle didn't have this functionality but now does.
It's hard to tell whether Google-Search based articles are referring to Groovy or Kotlin. There is significant lack of doc to help understand how to do things in Kotlin. The error messages are horrible and useless. I really wish they would just get rid of the Groovy interface or make it opt in. Also IntelliJ crashed a couple of times on me, I suspect from the Kotlin Gradle DSL parsing it was trying to do.
Thanks for sharing this.
So how do you use it?
Ant is definitely more abuse-able, I do not disagree. But there's also less magic which is what I like. It helps to treat it like code -- break it down, set up macros for common functions, etc.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
There. Now, what value does "Mechanism" add? Exactly. Then, there might be an `Authentication` type left, and some way of passing it the value "Basic" &gt; And if your solution would not be annotation based, how would you do it? With explicit APIs. I can't give you the concrete API now as I haven't studied the domain. But there's always a functional/imperative alternative to annotations, and it's always more clean in my opinion.
Given the method name, the type would probably be MathThingy ans = doMath(); So, what's your point?
Just take the C++ class. You can learn Java on your own if you want after taking the C++ class. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
They are only similar in syntax. Be careful if you decide to take both classes at the same time not to mix up the semantics of both languages because there are huge differences.
Are there any good UI/UX design patterns books or articles out there I'm pretty sure that this is based off some sort of theory?
Code completion works pretty well in Emacs. By "pretty well", I mean it works as well as everything else. 
I spent an half an hour going through that, no downloadable jar file, no example jar to run. I gave up.
Scratch c++ and focus in Java. No-one should be using c++ if they're not working on hardware. Are you? Do you? 
&gt;There. But doing it annotation based still needs something to distinguish it, since `BasicAuthenticationMechanism` is the mechanism it self, but the `Definition` annotation is a way to configure and enable it. Compare to `DataSourceDefinition` in Java EE. It's not the data source itself, but a well, definition for a data source. &gt;Now, what value does "Mechanism" add? The EG could have chosen a shorter name for the entire concept, but "authentication mechanism" is by itself relatively well know in the domain. It's also the term that the Servlet spec already uses for this, and WildFly for instance uses as well. There are other words (in fact, the EG had an entire list) but they aren't much clearer since they're quite overloaded already. `Authenticator` would be shorter, and maybe would have my vote, but it's also used already for things that aren't quite what an "authentication mechanism" does. &gt;Then, there might be an Authentication type left, and some way of passing it the value "Basic" Nah, then you lose all the specific attributes associated with a specific mechanism. Like Basic has the `realm` attribute, Form the `loginPage` etc. Sure for the people who absolutely can't stand long words the spec (or a third party library) might add an `AuthDefinition` annotation just like the general `ResourceAnnotation` which just gets a map with string based key/values, but if that makes things clearer? &gt;With explicit APIs. It still doesn't exclude those APIs, does it? EE Security is CDI based, which is mostly annotation first, but like in Servlet where there's a @WebServlet annotation to add a Servlet, there's also a programmatic API to do that. Maybe you should raise an issue for this? ;) 
This is interesting for my workplace, since we've been using resilience4j for a bit in our Spring projects. We are looking at using MicroProfile for an upcoming project, and this looks like it would be a great candidate, being part of the spec and all.
This is interesting stuff. I don't quite see why the @Asynchronous should be there, but interesting nevertheless. Will dive deeper into this soon!
About time ;) Looking forward to the additional enhancements
This site seems a bit janky. I have always liked https://sourcemaking.com/design_patterns
I don't really like that site because a lot of the examples are not correct/done properly like their Builder example.
Check out Spring Framework, they use a lot of Design Patterns
:O :P
Cool! Love that with MicroProfile and soon Jakarta EE there’s plenty of progress again! 👍
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
/r/javahelp
i know every situation is different, but i feel like this is putting the cart before the horse. it's really really hard to get people to use a new product (i've gotten virtually zero feedback on my database engine for java) so focus on socializing it and promoting it you're in the finance field so if your software is useful, many of your users are going to be large companies. they're going to want to comply with your license and they're going to want support and new features 
Hook the app into a web service based kill switch using tokens that expire
How can you possibly know that without knowing what the app does? How do you know the app doesn't hit web services on the backend? 
Technically, in /r/javahelp you will find the answer, but in the market the best way to get protection is to sell support and not just the software. You could even publish your code, but if you offer maintenance companies will pay you.
Client side drm is hard if not impossible is my point
Not sure I understand the use of factory methods (`Category.of`, `Group.of`) over constructors, but I gotta say I like the way it looks. Maybe the `new` keyword everywhere just didn't look good? Anyway, nice project, nice documentation, nice idea, nice execution!
We use Java for almost all the non-training/model running production workflows (load, transform, clean, prep, feature extract). We use it training and model running too in some cases, but when it comes from the data scientists, sometimes we don't bother rewriting it.
Fascinating -- I'm curious how your workflow / tool chain is configured. I do most of my work in R and then go to Java/SPARK if needed for scale. 
You can compile your java-application to pure machinecode to prevent decompilation (use excelisior-usa, avian OR jcgo to do that).
One can use Python, R, Java or any other languages for Machine Learning. Every language has pros and cons. When you run your algorithm on production and a huge amount of data Java is a great choice. If you want to run Spark on different nodes, I would suggest going with first-citizen connectors Java/Scala even there is Python equivalent. Java is also much faster than Python. However, one can rapidly develop models and visualize them in Python.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
hey @fredl2, want to share some insights why you've picked MicroProfile for this other project?
Reeeeeeeeally out of date. Do not.
Sorry. My point was: "holly shit this website is still running." Look at the copyright notice in the footer :-)
Java is better for developing apps and software.. but I bet you can also use it for machine learning purposes since it's an OOP language.
Doh! Makes sense now :).
I agree -- so the question I have is: what type of improvements can we make to make the Java ecosystem more machine learning friendly?
OpenGL (through LWJGL), java2d, slick2d My recommendation is to pick whatever is easiest to use. Possibly Java2d https://docs.oracle.com/javase/tutorial/2d/
NP! Best of luck! Final projects are always the most fun.
Aren't Java Applet supposed to be a bad and deprecated thing that is dying these days?
This. If they are major companies based on the Western world, they will comply with your license because they know you could easily sue them and they have the money to pay you. If you do want licensing, just create something that pings your server to check if their license key has expired. Very simple. Obviously someone savvy could hack it, but realistically, as we talked any earlier, it's not an enormous risk. 
I avoid JetBrain's stuff on principal. They lack enterprise scope. They're hipster products.
JavaFX is nice, a little complicated though.
Use libgdx. Nothing else is worthwhile.
I second this.
Intellij is also free for students! 
It's far from the best or prettiest, but you can use [Processing](https://processing.org/). A fair bit of it is just wrapping stuff already present in the core Java libraries to make it a little easier to get up and running.
I would say go with Java2D.
Yeah, it could be much better, but I have been unable to find anything close in terms of toolset (for java)
Upvote for java2d 
I just accomplished a good-ish Java game in JavaFX. I can send you the source if you want. 
How about a simple android game ?
dwr is super outdated!!
Word. Every time I have to look at a Ant/Gradle/Grunt/Gulp/Webpack/"Build steps shoehorned into the package.json" I die a little inside
I don't know the answer to your question since I have a few months learning to code in Java.. for me is easier to learn machine learning with Python or R since there's more documentation on developing machine learning algorithms in those language; also they are easier to learn for beginners, but personally I found harder to code in Java and I haven't seen any machine learning examples using Java.. maybe you can look it up online to see if you can find some useful information on how to develop machine learning algorithms on Java.
It's a large organization, we have thousands of structured tables, and almost a thousand data sources. A lot of the data is already being used for dashbaords and reports, so there are a few folks that do the work to bring in a new data source and refine it. But it's more rare than common. Folks certainly derive sources, but it's not that big of a savings to just recreate it. Regarding workflow, we have weekly meetings with various line of business teams, figure out if what we're working on is what they want. This includes new data sources, new refined tables, etc... They use those, to experiment and do their own discovery using Zeppelin in their datlab clusters. When we identify a new opportunity for production ML/AI, we set a path through our Azkaban pipelines that actually takes their code out of Enterprise Github and deploys it dev/qa/prod via Jenkins.
I agree, tried slick2D first, but it was almost impossible to find any tutorials or help for this library. Currently writing my first 3D game in it. Libgdx is definitely the way to go, but not sure if it's fit for beginners, probably not. 
I suggest that you add some details regarding your current knowledge and how much time you have for the project. Because the answers should take those facts into consideration. Because as far as I can see, the answers seem to assume quite a bit of experience.
No, literally deprecated.
It has a community version thats free for everyone but doesn't have a lot of the plugins that make your life easier for Spring etc
The ultimate edition is free for students!
&gt; but I bet you can also use it for machine learning purposes since it's an OOP language. How's that bit even relevant? Java is perfectly fine for running production code. The sort of go-to method we use is Python for training, Java for production work. 
&gt; Hook the app into a web service based kill switch using tokens that expire. Force user to be connected and retrieve new tokens to allow app to keep functioning. That's a great way to annoy your users and also a great way for enterprise companies to not even want to consider you. This is a legal issue that is solved through legal solutions, not technical ones. 
It would help if you would explain your own angle. Are you just doing a poll for yourself? Do you have some personal ideas about the future of Java ML and want to talk about it? Do you have a startup selling the "next big thing" in Java Machine Learning? Are you part of the Oracle Java team and want to know how to help the industry in this area? We apply Machine Learning in our Java app and will introduce some more this summer. Not because Java is somehow more or less suitable but because the since most of the codebase is Java it really makes no sense to struggle with bindings to something else. 
FXGL is one of the easier ones: https://github.com/AlmasB/FXGL/wiki You can check youtube for tutorials.
You are correct. There are actually a few theories that went into the design of this. Feel free to render the asciidoctor documentation (as described in the README file), you'll then find quite a lot of documentation in the docs/index file.
Thanks for this awesome feedback! This style of API is called "fluent API" you can find out more about the design decisions that lead to this by rendering the asciidoctor documentation (as described in the README file) and check out the "docs/index" file
I'm sorry this caused so much frustration for you. The easiest way is to just clone the repository and open it in your IDE, make sure to apply the "build.gradle" file (IntelliJ handles those very well) and then navigate to: preferencesfx-demo\src\main\java\com\dlsc\preferencesfx There you can right click and run the AppStarter class, it will show you the demo. Hope that works!
We use Ratpack as our HTTP framework for a service we've developed as part of breaking up a monolithic app. The key thing to appreciate is that it's fully asynchronous and non-blocking, and uses a handler-based approach to request handling. It's very easy to grok, but the nested syntax you get from declaring everything in-line can be a little tricky to read initially. One thing we also use is [Ratpack+RxJava](https://ratpack.io/manual/current/rxjava.html), which provides reactive support to Ratpack and allows you to consume resources and pipe data as lazily as possible. It's quite different to the way we've done things previously, and I don't yet know if it's a net benefit over eagerly using resources. 
You could try JMonkey. You should be able to get something running very quickly, and there's a good amount of documentation, demoes, and tutorials.
This might be the easiest solution. OP probably has already worked with Swing/AWT in Applets. JFrame is not going to be much different. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; matter of opinion http://prntscr.com/j1s2uw Looks pretty set in stone to me.
tbh I don't even miss those plugins/never used them before. Community edition is great!
Is your LAN fast? If so, why not just 'ssh -Y' into the desktop and run whatever IDE you want there, using your laptop as a standard X display server? 
You can also use remote machine. Run Intellij on your desktop, open a remote machine session from your laptop and code. I bet it would be much faster and better experience. I have worked using this set up and it wasn't bad. 
How "mediocre" is your laptop? Because generally web-based applications tend to be bloated and eat up more resources than their equivalent native alternatives. Have you tried remote access to your desktop?
For how long? I just started. Would it remain free until I graduate. 
I tried that, but my employer's Wifi is not strong enough in certain parts of the building where I have to be most of the time, unfortunately. Thanks for the suggestion though!
Well, my desktop has 5 nVidia quadro GPUs, tensorflow GPU, and terabytes of data to process... My laptop has no GPU, an old U-series core i7, not enough ram and not enough disk space, so... All machines are running Linux, so I figured there might be a more elegant way to do that than remote desktop. Thanks for your suggestion!
All machines are running Linux, maybe I should look for an equivalent that isn't VNC (consumes too much bandwidth). Thanks for your suggestion!
Check out if Eclipse che is helping.
Can you configure IntelliJ for remote development? If memory serves, with Eclipse and Netbeans, you can build/run remotely over SSH in the same way you can do remote debugging.
Been using Ultimate on work, Community edition at home. Now for home projects I don't use a lot of big frameworks, so I don't miss a thing.
LWJGL?
We don't convert per say the R code to Spark. We prototype the pipeline using R. This may involve sampling to keep the data sizes manageable. Then, once we need to put it into production and a pure R solution will not scale, we either use SPARK/R bindings or re-code using Java/SPARK -- we stick to Java instead of say Scala because we have more experience working with Java. 
I have no idea if I can do that with IntelliJ... I tried googling it but it doesn't look like it. I'll try what you said with Eclipse though.
you can check out this one - https://www.nomachine.com/ If you have decent bandwidth then there are few tweaks that you can to make it really smooth. In case you are using git for repository, you can create your own branch, make changes on your laptop. Check-in the code in your remote branch. SSH to your linux machine and Check-out the latest changes and build it. I know it sounds like a lot of effort but you can automate few things and alias few commands (like periodically check-in code to your remote repository and check-out, etc) and life would be much simpler. 
I'm not a very good dev, I have to admit. I mostly just type horrible code, try it 150+ times until it kind of works, rinse and repeat. So even automated, this solution wouldn't be optimal for me, but thanks for helping! I heard of nomachine in the past, I'll give it a try!
I think your point on documentation is very important and one often we miss to make -- we dive directly to the lack of a REPL and language features. Like you said the examples that come with packages in R (which is my poison of choice) cuts down the time for figuring out how an esoteric package can be used.
Fascinating, Do you have a blog/publication that talks about your experience of realizing this architecture.
Hah good one -- lol !!!
You can tell the site is old because it loads really fast.
FXGL or libGDX
Unfortunately not, my employer makes it pretty challenging to get information out.
Gradle is no less complicated than Maven. There is plenty of magic in Maven.
Why not use your laptop to remote into your desktop?
Sorry if I was *unclear*. Whether it's *bad* is an opinion. Of course it's deprecated/being phased out by Oracle. There is however utility to them that afaik is not that easy to replicate. Being able to demonstrate running Java in the browser was pretty cool, if you could get it working. There is however no rule that says everyone must use the current version of Java simply because Oracle released a new one.
There is some documentation on how to run it. There is even a single user guide. Are you certain it is not exactly what you want?
docker run -it --rm -v /var/run/docker.sock:/var/run/docker.sock -v &lt;path&gt;:/data eclipse/che start The URL it hit should appear. In my case, this did not show a login page. I'm not sure why it ever would?
I guess you don't need a type system when you multiply floats. Hence Python. Or perhaps Google doesn't like Java that much, who knows? R is probably an anomaly. It got big before there was so much commercial interest in ML. The streams introduced in Java 8 were very cool. I guess in 5 years there will be a nice and clean java.ml package that will introduce ML algorithms to everybody. Then everybody will fiddle with ML in any corporate office. Which will finally introduce ML in the job description of a 'full stack' developer. By that time the industry will prepare for qbits so quantum programming specialists will be in high demand.
But remote desktop is the elegant way. You've your IDE exactly as is. The only problem you could have is latency. Besides orion, there's also che. But if you've money for 5 quadro gpus why don't you just upgrade the disk in the notebook. Btw aren't you the "100% not for mining" guy?
hey the golden rule holds paramount: she who has the gold makes the rules — lol
[Uhh... look what I found](https://www.jetbrains.com/help/idea/creating-a-remote-server-configuration.html). I have very good experience with it (actually in Pycharm - looks basically same) and I doubt you will find anything better.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You make a valid point about the elegant way. I'll look into che when I get back to work tomorrow. I can't really change anything about the notebook. I'm not mining, I'm working. I'm a data scientist / software engineer.
Oh, I found this but dismissed it before reading it! I assumed it was just to integrate something like tomcat to your IDE... Thanks a lot, I'll read it tomorrow when I get back to work. (I love PyCharm too BTW, even if we mostly use Jupyter Lab)
bad bandwidth sometimes because of poor wifi receptions in certain parts of the building, but I'll checkout some remoting solutions that were suggested tomorrow.
No, I'm not certain of anything. I tried the first docker image I found because I'm too lazy to read the aforementioned doc, but I think I'll have no choice but to read it tomorrow.
I think I tried the multi-user mode of this image, because one of my coworkers might want to use it. I'll try without it tomorrow, thanks.
What are the specs of your laptop btw?
You make me sad.
Still on Xorg, so I should be fine.
I don't have it with me at the moment because I'm at home, but basically: * core i7 U series, 2016 * 16GB DDR3 * no GPU * 512GB SSD windows 7 that I only use for VirtualBox, Arch in VirtualBox.
I would love to use this library, or at least try it out, in one of my projects. But the lack of build artifacts on Maven servers or even the Github project makes that very difficult
The software is fine, it's just the huge amount of data. The desktop can process it so much faster than the laptop.
Sounds like no laptop will cut it tbh. Maybe some £3k+ mobile workstations but even then you will be limiting yourself to mobile hardware which while amazing these days still isn't really designed for such tasks imho. Seems your question isn't the right question. You asked about a web IDE but your current machine will handle any IDE just fine, what you need is a laptop that can handle your processing and computational requirements and as I said I don't think you will find one. I think your best option is a server (be it your desktop, VPS or something else) that you offload the heavy lifting to and just use your laptop to run your tools with the processed data, IDE, etc. 
&gt; Maybe the new keyword everywhere just didn't look good? +1. Looks like the new is the new new :). Much prefer "of": shorter , dont mix with the the new keyword, sounds good.
Maybe I wasn't clear, but that's exactly what I'm asking for. My laptop runs any IDE just fine, but isn't cut out to handle my data. I want to use it just as a front-end, with my desktop (or server, it's the same thing) doing everything. The problem is: the only thing I'm doing is processing this data, 100% of the job is the "heavy lifting". So most of the time I don't even use the laptop at all, which means that everytime I'm not at my desk, I can't work on the Java part of my projects. I can do python just fine thanks to ssh, ipython and jupyter, but no java.
I just use windows remote desktop.
We're already working on publshing this project to Maven. In the meantime, if you can't build the project yourself, you could download the shadowed jar someone posted here: https://github.com/dlemmermann/PreferencesFX/issues/2
this.
Oh. Well in that case you only really have two options that I can think of. Remote into the desktop from the laptop like I mentioned earlier or setup a build server on your desktop and configure your IDE to push to the build server for compilation, etc. The second option might work better in some cases of poor network connectivity over a full remote desktop type solution but it will be more work to get up and running and might be a pain in the ass to use effectively with large datasets. You might get better advice in a data science sub though as no doubt your problem of remote working on such projects has been solved by others already. 
&gt; 6 years without ever reading a single documentation / specification / anything Reading SO answers count too, you know
Had to do the same thing a while back. I used javafx and scene builder inside eclipse to create a tic tac toe game. Scene builder creates fxml file in eclipse, then you can visually create the GUI in by drag and drop (similar to html). Once you export it the fxml to the eclipse project you just add in the function of each button. I’m sure you can get more creative with this. P.s. on mobile to excuse any spelling mistakes. 
Is just a mostly direct wrapper over OpenGL and is more effort than using a higher level wrapper like LibGDX, as I remember. LibGDX would probably be easier for a beginner. 
libgdx.
Never looked into libgdx. How does it compare to using unity? 
I use scene builder for GUIs. But i only use netbeans so idk if its something that can work for eclipse.
This is not /r/javahelp Also, we won't do your homework for you
It probably helps that more frameworks use java config over xml (i.e. spring). I'm assuming community edition doesn't map your spring xml config back to the beans automatically or give you suggestions when there is a likely misconfiguration. But if everything is using java config, its just normal type safety coming into play. 
It’s not homework but ok 
i'm super confused why ssh isn't an acceptable solution for java. 
does this mean you can't use the jit?
My God that is a serious change list. Congrats on the release, can't wait to play with it.
When you try to do somethin outside of what maven is intended, it becomes very difficult. This question is about copying a file from the development environment, to the dev-server directory. So this is moving from pure building, to deploying..... but deploying just a few files. STOP. Is this going to lead to a nice, repeatable build system where you can deploy to any environment, or is it leading to a build system that requires a development server to run. Just because you can, doesn't mean you should.
Well, think about it a little - the client jar is going to have to be up and running as a process on the client’s machine in order to post the data, which leaves you three choices: 1) the client jar is run periodically, manually invoked, on a timer, whatever - it can then behave as you like, either immediately attempt to post data or check something / somewhere to see if data should be posted; 2) the client jar is running all the time i.e as a service or daemon, in which case it could present an endpoint to be called from the server to trigger data (some security implications) or 3) the client jar sits there waiting for something to run it, and you find some other means of reaching in and remote executing it (potentially big security implications) So it comes down a bit to ‘who’s going to be hosting the client’?
Isn't this the same problem as a normal company? There's a few solutions available though You say that the laptop doesn't have enough space for the data ... Ever thought of using the desktop as a network drive instead of keeping the data on the laptop? This should be the shortest path Otherwise, the way to approach this is to have a gitlab kind of setup ... This way whenever you push changes to your repo then gitlab can deploy these onto your staging or production environment 
&gt; underperforming hardware &gt; &gt; VSCode Well memed. 
lwjgl is amazing but most probably way overkill for what OP wants to do here.
[cloud 9](https://en.wikipedia.org/wiki/Cloud9_IDE) is a cloud ide that supports java. it got acquired by amazon, but i'm grandfathered in to an old pre-aws account so i'm not sure if the current offering has changed much. you'd have to sync to your desktop (a login shell and git are provided) it's also in theory open source, so you might be able to run it on your desktop and serve yourself 
So let's call these two boxes host A and host B for right now host A has your client code and host b has the API endpoint. What do you want to trigger code on host A some regular time interval? Something else ? If it's just a regular time interval on Linux you could add it to cron if it's windows add it to scheduled tasks
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It’s also much much easier if you’re using a build tool like gradle or maven (I prefer gradle). When you build your code with gradle it automatically creates an executable jar. 
Basically, all you need to do is put the main class's name in the `Main-Class` atttibute of the jar's manifest. If all of that sounds Greek, see the Oracle tutorials: https://docs.oracle.com/javase/tutorial/deployment/jar/run.html
Heh. The last release before this one was in August, I think. 
The only helpful suggestion I can make is to not use Dr java. At least use eclipse. So much more functionality. Also debugging is kind of a must.
Why are there 52 lines of code commented out on the master branch? https://github.com/lessthanoptimal/gversion-plugin/blob/master/src/main/groovy/com/peterabeles/GVersion.groovy#L51
couldn't figure out how to get some other functionality to work as a plugin instead of being in a gradle script. I plan on adding that in the future. As for glorified print . You now don't need to look up commands and handle the failure/edge conditions yourself when they don't return as expected. Personally I would rather have used this plug in than waste 2+ hours. To each their own.
I will write a front-end in the future, where the user should be able to request data. The requested data should be send from the client(.jar) to the backend. The front-end will display the data. I'm looking for a way to trigger the client to send some data to my node.js server, **whenever a user will** need that data(for example by clicking a button on my front-end page).
Wrong subreddit. You’re looking for /r/javahelp. 
Writing in an untyped language, you pile up a few more bugs. Trying to *maintain* someone else's code in an untyped language... you're often better rewriting. :-/ ***** ^Hi! ^I'm ^a ^bot ^that ^tries ^to ^make ^on-topic ^comments. ^If ^you ^found ^this ^amusing, ^check ^out ^/r/WutbotPosts
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/8ak702/i_need_jsp_help_have_the_desire_to_dynamically/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Can anyone recommend problems that could be solved with this software? I'm interested in learning ML, but haven't because I can't think of any good problems that need solving.. Either in my life or as a "quick software hack". Are there any problems that have data and "should be solved" but haven't been for whatever reason? Or projects that need more eyeballs? 
What do you use this for? I'd be worried using constants like this because they are inlined at compile time..
Hey, I did something like this a long time ago.. The comment about Main-Class is correct, with the public static main.. You can use a tool called "Fat Jar" to put all your dependencies and calsses into a single.jar that will _definitely_ run AND there is another tool (for all OS's) that lets you make it a double click executable on the specific platform (ie: so that you don't have to java -jar) But I would have to go back in time to remember WTF it was called. Good luck (I guess everyone else here said the same stuff anyway)
this is false, you have to configure it to do so, just using the tool won't do it automatically.
* gradle version string replaces manually setting a version string in the application. That was error prone and people tended to forget to update it. * Git SHA is useful in environments where software is being rapidly deployed to multiple devices that may or may not be running the exact same code. One place I worked at each component in the flight computer for a drone broadcasted its SHA. If each device wasn't flashed with the same SHA a fatal error was reported. In another situation when a new release of the software is sent out to devices it is rolled out. When an error is reported the SHA is attached so that you know exactly what which version of the source code generated that error.
I'm just pointing out the scenario below. It may not be your case, but I'm sure someone will be bitten by it (the same as I was). MyVersion.class is in lib.jar. Main.class is in main.jar that depends on lib.jar. Main class reads the version from MyVersion and reports it. You release new version of lib.jar. Main.jar has no changes, so you don't recompile main.jar but merely reassemble the application. Now when you run the application, Main.class will report the OLD version, because the constant was inlined during compilation (which didn't happen during the reassembly). 
There are an infinite amount of poblems that haven't been solved yet. Many ML problems resolve around making predictions on topics such as: movie recommendations, weather forecasting, sports betting, etc. Deep learning takes it a step further and allows systems to train a certain behavior such as playing, video games &amp; board games (take a look at AlphaGo) or detecting cancer cells in a human body. You can have a look at the Kaggle challenges if you want to play around with some public datasets. They have also posted some challenges that might be fun to look into - I would definitely recommend looking into the titanic case! :)
After the Java 10 era, the Java 11 epoch will begin.
I am one of those people. Webstorm &amp; Datagrip are my most used, but tbh its mostly personal preference over any functionality/features that made me not stick to intellijea alone
I am actually, but of course I don't need to pay it myself.
Thanks for the reply! Kaggle.com is a great place to dig in and get ideas.. Both for the competitions and data sets. The notes on the titanic problem is really insightful. Thanks! 
Haha really? Well I guess I assumed wrong this time. ☺ But as a side note, I always found the way they show the highest price by default and the individual tab option easy to miss a bit annoying
The property names in the config block are completely inconsistent with the rest of the Gradle DSL.
So normally you'd have your frontend send rest calls to the back end. So it sounds to me like you have this node js random server.. that you have talking to this java app which is actually a backend to a future frontend? So this java app should be able to receive rest calls to trigger this sending of data. Which you will send via advanced rest client or something.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
and you run it with java -jar example.jar
Exactly.
You sure? Java does not inline anything from other compilation units at compile time. This happens at link time (for constants) or later during JIT. 
In Eclipse, select File/Export
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Maven has established plugins for typical and recurrent tasks. For copying files I never used anything that the resource plugin. Sometime profiles and environment variables are needed for doing things in the declarative Maven way, so this can lead to some confusion. What you say is correct, Maven can't solve all existing management needs. But the range of these that can be managed in a clear and "standard" way is extremely large. The Maven book http://books.sonatype.com/mvnref-book/reference/ is usually all you need.
So will it be possible to do this? `var ans = doMath();` I hope not. I do like that it's possible to do `var example = new HashMap&lt;String,Integer&gt;();` now though ***** ^Hi! ^I'm ^a ^bot ^that ^tries ^to ^make ^on-topic ^comments. ^If ^you ^found ^this ^amusing, ^check ^out ^/r/WutbotPosts
Alternative: [JFX3DBrowser](http://www.interactivemesh.org/models/jfx3dbrowser.html)
not a technical answer but: estimate the time needed for you to test it, set it up and all the time wasted on slow over-the-network work. add time needed to set up IDE to work with other tools - IDE is often not enough: local git commands, local etc settings, aws keys, basically anything you need locally to work effectively. multiply it by your rate, compare witm modern (second-hand) laptop price. buy a laptop
yeah no attempt was made. This better? gversion { srcDir = "src/main/java/" classPackage = "com.your.package" className = "MyVersion" // optional. If not specified GVersion is used dateFormat = "yyyy-MM-dd HH:mm:ss" // optional. This is the default }
Totally agreed. I had used Maven for years and recently moved to Gradle for a new job, and it just seems very counter-intuitive. I found the dependencies trees confusing and hard to debug. Maven just seems much simpler to me.
It's about time that openjdk includes an option in javac to build fully native binaries.
Here are a few use cases: https://deeplearning4j.org/use_cases Basically, if you have data you want to classify, cluster or perform regression on, a deep neural net can do that. 
With Java 9 the way to go: jar --update --file foo.jar --main-class com.foo.Main And run it: java --module-path . --module com.foo Or in shorthand: java -p . -m com.foo
Spring boot has the ability to generate an [executable jar](https://docs.spring.io/spring-boot/docs/current/reference/html/deployment-install.html). [Source](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/resources/org/springframework/boot/loader/tools/launch.script) of the actual script. 
Same here mate, I don't know I should be happy or otherwise
You know I've never seen Spring Initializr before.. I believe Docker, Docker-Compose, .gitignore, run.sh, and built-in security annotation helped a lot with deployment and bootstrapping. As for as AOP.. I was actually struggling to get Interceptor or PreAuthorize to work and when I put my question on Stack Overflow, the AOP solution was what was poised to me. If you want to post the Interceptor answer, by all means. https://stackoverflow.com/questions/49721779/how-to-add-a-custom-security-annotation-to-spring-mvc-controller-method Is there a reason to not use AOP though? Thanks!
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I've been following project Amber for a little while, I believe they are making good progress, and have faith that at this late stage, whatever the result will be good. I keep seeing people jump in at (this late stage) with stuff that needed to be addressed in the beginning (and probably was) getting well detailed responses from Brian Goetz et. all. Honestly at this point I'd just like to see it getting closer to shipping, rather then continuing to bike shed.
Interesting thread. Thanks for sharing. Highly recommend whoever reads it, to keep clicking on Next Message, to read the rest of the thread. Quite interesting comments from Brian, Stephen, ...
I wrote this article the other day and hope it addresses some of your questions. We have a portal product to manage specifications along with interface agreement document backed by enterprise GitHub. https://www.networknt.com/design/design-first/
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; The only use case for fall through I ever see presented is low level network code, which is very much an edge case. This just shows he hasn't been paying much attention to the issue. Every finite state machine implementation benefits from fallthrough. FSM is a very powerful abstraction and can be used in a wide variety of problems, not just "low level network code". Anything that maintains state and consumes inputs can (and often should) be modeled and implemented as an FSM—although for whatever reason many people these days use buggy ad-hoc approaches instead. Beyond FSMs, anything where multiple inputs map to the same output/action benefit from fallthrough. E.g., processing input events where multiple inputs have the same processing logic.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; i wouldn't use an Applet unless it's a requirement. i did that for a project in school only to later find out no one uses them anymore in the real world. https://www.youtube.com/watch?v=LDwFCoj-0js
Branding matters a lot to commercial interests. See 'cloud computing'. I was surprised to see a 'statistics' office inside a hospital. But I suspect it's only nowadays that 'prediction' is such an important aspect. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Inclined to agree with Cay et al here. This is a significant new language construct and grafting it onto something that has as many rough edges as the existing `switch` construct made the solution a compromise before they even started.
Adding gas to the fire... "Expression switch - an alternate proposal " by Stephen Colebourne http://mail.openjdk.java.net/pipermail/amber-dev/2018-April/002932.html
It looks like in your [submission](https://www.reddit.com/r/java/comments/8axxu6/spring_boot_server_mobile_chat_application/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
And because your microservices aren't supposed to share code, did you get rid of git already?
The author did not say remove fallthrough, he did say remove it as a default behavior, if you want it just add a fallthrough clause.
I did 17. Can you do better :)
&gt; A decompiler is not going to rename obfuscated code You sure about that? I'm pretty sure I've seen something like that which tried to translate those a's and b's and give them at least some kind of meaningful name, like integerList, etc
Which is obviously impossible since it would break tons of existing code. Break-by-default with an explicit fall-through keyword would've been a reasonable option in the original design, but it's too late now.
That's hardly meaningful :p
&gt; sounded good to some young engineers Hmmm, James Gosling, Bill Joy and Guy Steele were all whippersnappers obviously.
Generally I like to do a very, very rough design via Swagger first to just get a general sense of what I want the finished API to look like, then proceed with generating the real Swagger doc from code and annotations. I've found that, in practice, unless you generate your Swagger from code it's inevitable that the two are going to get out of sync somehow. Not saying it can't happen with generation, but it's much more obvious to others in a team setting that you have to change the API documentation when you make a corresponding code change (i.e., it's harder to make the excuse of "oh, I forgot about the API doc" when it's sitting right there with the code that was changed).
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Hey guys! This is my second release as a fledgling Java developer. I wanted to make something that people in a broad sense my find useful. Not just a theoretical project. Qcalc is a TUI calculator that has a syntax linux users will be very familiar with. It is a self executing jar with the traditional syntax of native binaries. Eg `qcalc -v "sqrt(81)+9"` I hope someone enjoys this, and I would love feedback!
Thanks for sharing this. Still in MOOC but saving this one for as soon as I’m done! 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
That's a piece-of-shit article.
Maven definitely has N solutions for bundling everything in a single jar, though.
OpenAPI yaml doc + swagger-codegen maven plugin + springfox-swagger + spring mvc + jsr303 validation. 
cute. I've done some things like this before, just not with spring. they tend to be really handy for POC stuff. if you included the gradle wrapper in your repo, it wouldn't have a dependency on gradle, and you'd be providing a known-good build (provided all the other dependencies were met). As an end user, I can always upgrade or downgrade my version of gradle if I want. If it included some initial tests, I'd be more inclined to use it. Sometimes getting a testing environment and initial tests set up correctly can be one of the biggest hurdles in a new project. all that stuff you have in your run.sh file? if you moved all of that into some tasks in your build.gradle file, then you'd have all of your build configuration and tasks in one place. why is git a dependency? why is an IDE a dependency? feature request: provide a script or something so I can easily change the name of the package to something other than 'myapp'
Needing to use reflection to observe some effect really shows that the code isn't properly testable.
[@SecuredArea's latest tweet](https://i.imgur.com/lDAoSki.jpg) [@SecuredArea on Twitter](https://twitter.com/SecuredArea) - ^I ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
It's great for uni assignments that require UML diagrams, but it has little use in the real world. 
I slightly wonder how it deals with logarithms branches. https://en.m.wikipedia.org/wiki/Complex_logarithm
Non-Mobile link: https://en.wikipedia.org/wiki/Complex_logarithm *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^169968
**Complex logarithm** In complex analysis, a complex logarithm function is an "inverse" of the complex exponential function, just as the real natural logarithm ln x is the inverse of the real exponential function ex. Thus, a logarithm of a complex number z is a complex number w such that ew = z. The notation for such a w is ln z or log z. Since every nonzero complex number z has infinitely many logarithms, care is required to give such notation an unambiguous meaning. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
&gt; Historically, this() or super() must be first in a constructor. This restriction was never popular, and perceived as arbitrary. There were a number of subtle reasons, including the verification of invokespecial, that contributed to this restriction. Over the years, we've addressed these at the VM level, to the point where it becomes practical to consider lifting this restriction, not just for records, but for all constructors. ohhhh, finally allowing pre-validation
Yes, I found that digression interesting.
Just flow charts, or UML diagrams?
The main problem with this end 90ies dream of sustainable synchronization between UML and source code is imho the following: UML is only helpful if it is used as a *simplified* model of the underlying code. So I don't want to see every method, field nor every interface or implementation. On top of that I need to rearrange components manually and add custom memos, some kind of visual grouping and so on. This makes it almost impossible to couple the diagram to the code. So I prefer UML to support my initial design thoughts if it appears to be helpful. It is always an extreme simplified model that emphasizes the main ideas behind the design, no details. It is therefore even possible that the final code does not reflect the model anymore. So either I adapt the model manually for documentation purposes or I just drop it then. 
2 : What diagrams do you want and what do you want to do with them ? UML is really... not that good for many cases. If it's just for documentation, then just include the diagram synchronisation in your build. If you want to do model-based programming, you'd probably be better off with something like Eclipse EMF.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thats some awesome advice for the author, I'm sure he can do a lot with this constructive criticism. Thank you for your feedback.
I honestly wanted to write something more, but it just everything is wrong with that article. First of all Spring Boot 1.5 does not support even Java 9, Gradle supports Java 10 starting from 4.7 which is in RC1 yet. And what the rest of article has to do with Kotlin and Postgres I have no idea.
I admit I could have formulated the title better. My bad.
They were much younger then, and may have been swayed by what even younger devs found cool
Some of the discussions about it are public. You can follow them here: http://mail.openjdk.java.net/pipermail/jdbc-spec-discuss/
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Great!
What’s wrong with Github? I thought that was working well. 
DU -&gt; Definitely Unassigned DA -&gt; Definitely Assigned It’s in reference to the fact that variables must be assigned a value before they can be used.
Thanks. Its hard to find definitions of such short terms unless you really know where to look :D
No problem! I try to religiously read the mailing lists, and have caught on to some of their jargon, haha.
Have you looked into jGrasp?
The [EE4J](https://github.com/eclipse-ee4j) repository is on github, too.
Nothing is wrong with GitHub. Oracle donated Jersey to the Eclipse foundation, so the project has to move from oracle-owned git repositories to eclipse-owned git repositories. Both are hosted on GitHub.
I hope the community can keep up the project alive. 
What is the use case for non blocking jdbc calls? I can only think of non interactive applications or logging operations. It doesn't seem like it would have much use in web applications
You can easily use a non-blocking API in a blocking application (simply call `.get()` on the `CompletableFuture`), but it is really hard and cumbersome to do the opposite. Even if you only have a single non-blocking (asynchronous) route in your web application (e.g. a websocket or a long-running request), not being able to speak to your your database in that route without massive amounts of wrapper and boilerplate code is annoying as hell. Non-blocking should be the default for new APIs. If you can block, then fine, blocking wait for the result. But if not, a sane non-blocking API is worth the overhead.
oh god yes!! project panama!!!
That makes sense. I was thinking of it requiring you to write callbacks or something to accomplish synchronous queries
Oracle have still got engineers assigned to the Jakarta EE projects, they are just being worked on in Eclipse rather than the JCP.
The log\(\) function returns the principal solution for the polar form of the complex argument.
this isn't sql, but [db4j](https://github.com/db4j/db4j) (my project) is a transactional dbms written in java that uses java as the query language that truly is async, based on [kilim](https://github.com/nqzero/kilim) (i'm a maintainer) continuations 
The ULTIMATE fix for this is for your application to be a web application. People pay to subscribe to the application, and based on that they are able to use it. You are able to shut off any single login user, or an entire customer (with all their user logins), and re-enable at any time. Customers may find a web application more appealing because the customer is not responsible for server maintenance and backups. (But you are!) Customers will want some assurance about the privacy of their data.
The same can be said about the Java8 streams and the streams a la InputStream and so forth from before
&gt; It is therefore even possible that the final code does not reflect the model anymore. So either I adapt the model manually for documentation purposes or I just drop it then. Again the title says the IDE synchs with UML diagrams and source code and in the description or text below I mention rational rose which automatically synchs with the UML diagram (rearranges everything). So here is the thing. EOF by Apple's yellowbox API (with WO webserver) came with DB schema modeling. Excellent, excellent tool. I have seen people work with a schema and then move to middleware and then the front end. But my friend an architect at a Fortune 100 company on Wall Street used Rational Rose in the mid naughts. Instead of schema modeling it was class diagram modeling which would then take him to the source code and then further down the hierarchy of a multi tiered app. When I told him about EOF and how amazing a feeling it was to design like that he said he had the same experience but at a class diagram level. Ofcourse design at a class diagram level is way cooler than schema level. &gt; UML is only helpful if it is used as a simplified model of the underlying code. So I don't want to see every method, field nor every interface or implementation. So I have not used such a tool but I am very sure that they have the ability to zoom into methods and individual fields feature and zoom out to just classes and design patterns. Has anyone used this way of development (to design classes in UML ) then go down to the individual source code.
I'm working remotely. Personally, I feel more productive, I can wear whatever I like, eat when I want, take breaks almost anytime, etc. It's great to have a job that allows you to either work from home or on the road and I'm sure that the number of people working from home will rise significantly in the next years. If you'll choose to apply for a remote job, just make sure what kind of remote job suits you. As far as I know, Java remote work is usually possible for highly skilled candidates. Good luck!
It's a good point that IOC was born because of the j2ee deficiencies. However i believe that modern DI toolkits like Spring still have their meaning in complex enterprise applications. For example i am working on a very big modern code base splitted in Maven modules where the application can be built in 3 or 4 different ways using profiles and wiring different beans; and again using maven modules with isolated spring facets (the class marked with @springbootapplication) and beans, as we have requirements of not putting some dependencies (e.g. some service layer) exclusive to one profile when we build another profile. All of this flexibility would be very hard i think without Spring DI.
Add it to banned imports list in your IDE next to `java.awt.List`.
Both would be great. I tried Visustin. It is similar to code2flow and really IMHO not what I am looking for. Visustin despite the hefty price tag cannot differentiate between a loop and a conditional. On top of that I don't see any collapsible capability / zooming in or out etc.
Please ask your questions about ADBA on the spec-discuss list. That list exists to discuss Java database access specs with the community. If the community, meaning people like you, don't use the list then it will be quiet. There is also a private list for the JDBC Expert Group and some discussion goes on there about things the various vendors don't want to bring up in public, or because of habit. There are no test cases for AoJ because we wanted to get the code out as quickly as possible. The AoJ code as it is meets our internal goals. Writing AoJ tests was not required to meet our goals so we didn't do it. Clearly that's an important next step, but it is not one that we have the resources to take. The future of AoJ is up to the community at this point. There is no conformance suite for ADBA because the spec has been unstable. I'm now satisfied with the current state of the spec. This is not to say I think it is ready to go into OpenJDK. Rather, I think it is sufficiently complete that it warrants a serious look by outside reviewers. Once the EG approves the spec, almost certainly with changes, one of the next steps would be to work on the conformance suite.
I'll bet you that I could refactor it into a Jooby solution with no DI-container usage in 100 commits (in intellij pls, not Eclipse) and end up with the same lines of code or fewer. There's be the same number of modules before and after, and the same profiles in Maven :) In 150 commits I could get you there using [strangulation](https://paulhammant.com/2013/07/14/legacy-application-strangulation-case-studies/). Of course, I'm assuming you have unit/service/webdriver tests in the build (also on Maven profiles).
&gt; The set of T supported will be Byte, Short, Int, Long, Float and Double corresponding to the scalar primitive types byte, short, int, long, float and double, respectively. &amp;nbsp; &gt; To support operations specific to an element type there are six public abstract sub-classes of Vector&lt;T, S&gt;, one for each supported element type, ByteVector&lt;S&gt;, ShortVector&lt;S&gt;, IntVector&lt;S&gt;, LongVector&lt;S&gt;, FloatVector&lt;S&gt;, and DoubleVector&lt;S&gt;. Better wait for Valhalla - more specifically [Generics over Primitive Types](http://openjdk.java.net/jeps/218) - to avoid this to-be-depricated mess similar to `IntStream` et al.
Thanks! I think it will rise in the future as well but when you say "what kind of remote job" are you talking about working from home vs on the road?
Use IntelliJ IDEA!
What's you actual goal: a new job, a personal project, what? For a steady job I highly recommend getting into Spring.
Yep, as /u/lbkulinski said, "definitely unassigned" and "definitely assigned." It's language guru jargon. There's an entire chapter on these concepts in the JLS: [chapter 16](https://docs.oracle.com/javase/specs/jls/se10/html/jls-16.html). Briefly, the compiler is required to do flow analysis in various cases. Notable examples: to ensure that a blank final field is assigned exactly once on every path through every constructor, and to ensure that every local variable is initialized before being read.
Since 2018.1 I can't click through on links in JavaDoc popups, hope that it's fixed.
I took a detour into C# world for a year or so. My two bits. Java is not quite as nice a language. It's not horrible, but the emphasis on backwards compatibility going back to 1997 means some things are rough and probably will be for a long time. That said, the java libraries and frameworks are far better. Mostly because there are so many, and even in one area there are quite a few. So you get competition which is a huge advantage in pushing things forward. I will also say that I never got used to hosting on windows. Apparently there are ways you can run .NET code on linux now, but last time I tried it was very bumpy and also incredibly slow. I have to assume things are better now.
For me the problem is that I can no longer pin JavaDoc popup near the code completion popup so it stays on wrong monitor.
Pre Java8 I'd agree with you, Java8 brings a lot to the table so much so I actually like Java better than C# now. For me it comes down to the Java collections. C# provides what you need, but Java's collection implementations + interfaces are superior IMHO.
[removed]
Yes. but still, crap like having primitive types still floating around (har har ) is a clear hold over from trying to make java "fast enough" early on. 
First of all, maybe we don't need DI containers (i.e. frameworks). But we **do** need inversion of control (the pattern). We can have IOC without actually using a DI container (their are independent) Secondly regarding Jooby, not all applications are web applications. Lastly the syntax of Cuppa is a mess. It is like LISP all over again.
[removed]
I would definitely have a look at RxJava. Even though Java is not functional I would look at some functional code to learn the design patterns / theory, particularly immutable data structures and the way that functional code can help support designing concurrent code.
So, how about providing an ADBA driver for db4j?
This new Vector API won't be thread-safe ;)
It looks like in your [submission](https://www.reddit.com/r/java/comments/8balpy/how_to_write_an_image_to_disk_from_clipboard_in/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This still does not produce an error when automatically building: `var test = System.out.println();`
just a random thought, but is some other process interfering with your project folder or source control system meta files?
* start out with intellij idea it is quite similar to vs from a concepts point of view. That said once you are kind of settled have a look into at least eclipse too, they both are powerful in what they do best... * Look into Gradle. If you are like me msbuild will make you scream for Gradle in no time * Start using Java 10 right away. Sure corporate jobs tent to live in the stone ages, but this will have to change fast with oracle's new release cycles. * While you are at it think about going full polyglot. Kotlin, go, python, rust are all interesting tools in your belt. Source: I work with c# Java and native in my day job. 
the whole point of db4j is to avoid drivers and text-based queries - queries are vanilla java classes or lambdas, similar to how in-memory data structures such as `ArrayList` and `TreeMap` are accessed. wrapping it in a legacy interface defeats the point long term if things are successful and i want to move into the enterprise space, i'll add a sql layer (and maybe adba if that ends up widely used) to support the existing tooling 
Same here.. Extreme annoying 
Has anybody experienced issues with Lombok in 2018.x?
Unfortunately my larger Jooby application composed from multiple contexts and sub-components isn't ready to be published yet. 
&gt; First of all, maybe we don't need DI containers (i.e. frameworks). But we do need inversion of control (the pattern). We can have IOC without actually using a DI container (their are independent) So we completely agree there, then :) &gt; Secondly regarding Jooby, not all applications are web applications. And here. Note, I'm previously accomplished with IoC DI-Container hierarchical non-web platforms: http://jesktopapps.sf.net/ and http://jesktop.sourceforge.net/ both long abandoned, of course. &gt; Lastly the syntax of Cuppa is a mess. It is like LISP all over again. He he. 
love it
Actually, the ADBA API is not yet finalized, hence there is no implementation. ADBA over JDBC (AoJ) is a simply a learning tool, aiming at helping the Java community better understand ADBA; iow, AoJ is not a reference implementation of ADBA.
Poo, I hope it can survive. I always preferred this over spring.
It’s been working fine for me. What issue?
Dang, gotta update again? 💁🏼‍♂️
Primitives exist in C# as well doofus. 
Just after release of 2018.x they had some issues with the plugin, you should check out the issues.
&gt;Apparently there are ways you can run .NET code on linux now, but last time I tried it was very bumpy and also incredibly slow. Probably true when you had to use Mono. With .NET Core it is incredible fast.
Uninstall and reinstall the Lombok plugin. This worked for our team.
Yes, I had to refresh the plug-in list. After that, a pending update showed up for Lombok. All was well after updating.
All I see is a container with hardcoded configuration in your ```main()``` using magic methods inherited from the concrete base class that you HAVE to extend to even start the app. So you play building blocks in code in a main() method instead of using XML or annotations + functions. Except that annotations are rather accessible and close to the code responsible to doing the action they relate with, whereas coding that in main() will make it extremely fat. Then you revert to functions like setUpFooApi() and setUpBarApi() (like how it's done in GUI's) as well as a function for each api call. So you end up with the exact same thing as the annotations + functions solution, except with more indirection, having to be super careful about the order of definition, having to read more documentation, and dealing with poorly named functions such as ```Jooby.get(String path, Route.Filter filter)```, which is actually more like a map put for a get request, or ```Jooby.executor(String name)```, which is actually a setter. I really don't see the win here. If you want to go all the way and truly have a main, you can set up your own webserver, then you truly have control, in fact you could even make your own web browser.
Do you use the Toolbox? That’s what usually notifies me.
I had it for a while (last year) but something about it bugged me and I got rid of it (cant remember what it was now).. Normally, idea pops up with a notification when i start...
I thought about it, the problem is with me since I started using the software, it’s like two years, so it’s probably a fault on my side more likely. Still, can’t really imagine what it could be, but with 2018.1 it’s gotten worse.
Any fix to this yet: when creating a new maven project, you have to set the Java version/language level in like 5 different places,it still always defaults to 1.5?
Is there a noob video or guide for IntelliJ?
Great. I need to check tomorrow if the unresolved dependency bug was fixed.
Odd...I’ve had mine randomly be set to 1.3 at times “Plain ol’ Java”.
How so?
Like when reviewing code in Bitbucket, it seems like there are lots of unnecessary whitespaces that were made that was caused by saving in IntelliJ. This happens especially to code I don’t really touch... 
This. It's absolutely useless if this is just an async wrapper around JDBC, vert.x already does that with https://vertx.io/docs/vertx-jdbc-client/java/ There's already been completely async drivers made for Postgresql thankfully (e.g. https://github.com/reactiverse/reactive-pg-client and https://github.com/mauricio/postgresql-async), but it'd be nice to have a complete async JDBC.
There's an eclipse formatter Plugin which can import and use eclipse formatting settings. We use it at work. But the intellij formatter is so much better, e.g. recognizing builder patterns and stuff like that. 
Try the Flow Plugin for IntelliJ. It's a bit rough around the edges, also you can use it without IntelliJ as well if you want. It traces the control flow while your application is executing. The visualization seems pretty nice. There is no static analysis.
I don't see that option anywhere 
Just check your tabs vs spaces setting and if you are using different OSs, check the line ending settings. This should do it. 
Have you tried adding this to your pom.xml: &lt;properties &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;/properties&gt;
Well, it used to work for me as well. I had issues with gradle project with multi-module structure though. I didn't have time to investigate it, so I've just downgraded
In formatting options disable autoformatting or limit it only to modified lines. Also import your company formatting settings (export them in eclipse, import in Idea). 
Thanks! Will see what I can do 👌🏼
java training in chennai
What things in Jersey do you value over Spring REST?
They have this [plugin](https://plugins.jetbrains.com/plugin/8554-ide-features-trainer).
Let's step back and see the *big picture* again: What is (was?) the use cases for UML? Which methodologies are used to create a software? UML is the attempt to give you an universal graphical language with more or less string semantics in order to create a *model* of your software - so it is also a *meta* model. As a model is *always* only a reduction of the *reality* (which is the final "code" of your software), it must sacrifice lots of information in order to be useful. If you drop too much, you are no longer capeable of managing the 1:1 relation to your code. But if you keep them, the model becomes **big** and **bloated**. Ok, one could solve that with some sort of *view* or *layer*, that shows only the relevant parts. I am not sure, if those tools support such things good. So probably this shortcoming could be solved by the tool. But UML works only for class based static typed programming languages; this is a limitation that does not work well anymore, as the typical business software languages (Java and C#) evolve and features more and more components based upon *functional* or *declarative* paradigms. So you have a sort of *impedance mismatch* between your model and your code. How would you track the relation between both anymore? And as some parts are not present in the model, does the model still add a value? Let's have a look how modern methodologies affect *detailed* UML modelling... Modern trends in software development are strongly going towards agile processes in order to reduce the *time-to-market* or because it is hip. Nevertheless you work in small teams on some small changes compared to the whole product complexity. So how does the mighty architect use Rational Rose within a sprint to add or change the model? Does he do that before the sprint? Could be bad, as the team then has almost no freedom anymore and you have to synchronize those changes with the product owner before the sprint planing. Or does he do so during the sprint? Then there is a time gap when the devs could start implementing stuff, as long as the model is not ready. So it appears to be difficult to integrate such a classical *model everything before the development starts*-approach into a modern agile process. Also the Microservice hype fosters small, sometimes really independent systems, which also doesn't need to be based upon *one* homogenous language. How could you track a model for the whole system with UML? There is a chance that you get white boxes, for that you don't have any detail in you model. So you probably could then just model each service independently; ok, but as a micro service should be *small* (whatever that means), do you really need a detailed model in order to implement it? After all UML still offers a base for picking the right meta models in order to use them to model some aspects of your software (or a premature idea!). That is fine and often / sometimes very useful. But the seamless integration corelation to your code doesn't work well for most projects. Imho the times of the model driven development approach is over right now; those old tools and meta models aren't good enought to add real value to the whole dev process and they don't fit into short release cycles and a more and more polyglot business world. And don't forget the costs after all! Maybe in the future there will be new tools and approaches based upon some crazy AI driven universal semantic knowledge things or other buzzword driven shit. We will see.
There are this specs like java for sim cards etc. And I like primitive types, don't touch them! (or add unsigned)
and XML Stream, DirectoryStream, reactive stream...
Inside the POM, in the configuration tag. 
That's what I do. Then I also need to... 1. Right click on the project, go to Module Settings, change Module SDK from 1.5 to 1.8 2. Go to Preferences \&gt; Compiler \&gt; Java Compiler, change "Project bytecode version" and "Target bytecode version" to 1.8 Maybe I'm doing something wrong, but those never get updated automatically even after changing my pom.
I wish monkeys wouldn't downvote just on disagreeing. There's nothing wrong with this discussion. But downvote me as well. 
Indeed.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I can appreciate not signing up for the enormous dependency-web that goes along with using Spring. No, you don't use JAX-RS annoations with Spring, they bring their own.
Sad, then i wouldn't use Spring REST and really hope Jersey survives this transition...
Toolbox made updating IntelliJ so much easier. Especially if you follow the EAP.
Yeah! I use CLion too, so it’s nice to be able to update both in one click.
Is there a site where this is displayed in a more readable format? I love reading those, but find myself not being able to not drift off due to the formatting.
&gt; composed from multiple contexts and sub-components You're missing the point. To be blunt, I don't care how your application is composed, it has nothing to do with my *use case*. Component composition is an *implementation detail*. For example, I want to write a batch process. I want to decompose the process into steps, both serial and parallel, that I can run on different nodes in a cluster (to improve performance and reliability) and restart on failure from where the batch left off. I want to be able to monitor the progress of the batch process (a UI would be nice). I could roll all of this this on my own, but it would be a huge waste of time. Instead I could choose something like a BPM (too heavyweight for me) or I could use a product like Spring Batch (good middle ground). Spring Batch lets me define my batch job as a series of steps that I can plug into the framework. In this case, the Spring DI container is *how* Spring Batch lets me do the plugging in (on the other hand, Eclipse RCP uses OSGi). Even though by defining my batch steps in terms of Spring DI I am losing control over instantiation, but Spring Batch does what I need it to do, so I'm not losing any sleep over it.
&gt; Jersey requires HK2 Jersey is a reference implementation of JAX-RS, so it is not surprising that it uses an implementation of CDI (HK2). Which only goes to show that "need" follows "want". We *need* dependency injection because we *want* to use Jersey.
Update notification was turned off in 2018.1 :D You need to enable it manually.
Interesting read, atrocious format
May your future projects compile the first time you open them!
If you subscribe to the mailing list, you can read it in any mail client you like.
Seems to do the same thing that Apache Camel does.
https://youtrack.jetbrains.com
I wonder why they don't want to be a bit more modern? Mailing list + a website that is never updated and that doesn't inspire confidence https://java.com/en/ They really need a webdev and a PR guy
Have you opened an issue? https://youtrack.jetbrains.com
&gt; But UML works only for class based static typed programming languages; this is a limitation that does not work well anymore, as the typical business software languages (Java and C#) evolve and features more and more components based upon functional or declarative paradigms. Why do you feel that UML class diagrams would not work with a functional or declarative code-base? Have you ever used rapid application development tools like Ruby on Rails ? Or the web objects framework? UML and any visual tools like EOF would work great with those. I know people who have worked in an agile setting (self included) and such tools only help with development IMHO. I have worked with gigantic codebase with 50+ globally dispersed development team in an Agile/scrum setting with architects and CMMI level 4/5 with an architect and UML diagrams and even db level schema diagrams would not be hindrance. It helps with extensibility and scalability and you don't have to spend time refreshing what lies where and how to relearn an old API. I am not asking people to CREATE the models. EOF for example automatically created the model and updates it even if you go and modify the codebase or the db manually. That is how the UML capability of rational rose also works. You don't need an architect to run this- it is process and a helpful tool that can be integrated into TDD or agile etc. 
Delete your comment and come back when that happens.
What's wrong with a mailing list? It's a great place for discussion.
java.com is a purely Oracle website but I agree it really needs to either be updated or repurposed. The Java download link is still for Java 8.
&gt;If there's something like that in .net core world, I think they'd use that. There is no "they". It is an open source project. If nobody contributes other implementation it will not be measured. &gt;I perceive those benchmarks as something like 'look how crazy high we can fly' and not as tech stack comparison. Then you are making a mistake. It is clear it is about comparing frameworks. Both ASP.NET Core and Spring Boot introduce a lot of middleware to provide a bunch of useful features sacrificing some performance benefits. That's why I think it is a reasonable comparison and the performance is similar. The other Java frameworks are very very light and useful but can't be compared to Spring Boot or ASP.NET Core. Now don't get me wrong. It could be that the .NET equivalent of Gemini, Light-4J or Proteus is slower.
Spring Integration and Apache Camel are competitors in the Enterprise Integration space.
Oh, good to know!
Okay so you need to get IntelliJ to sync its settings with your pom.xml. You should get a notification in the bottom right corner when you first create/import a Maven project. If that notification isn't there, then you need to go to File | Settings | Build, Execution, Deployment | Build Tools | Maven | Importing and check "Import Maven projects automatically". After that, you should not need to change the module SDK or anything else and if you try, it should revert back to whatever you have set in the pom.xml moments later. Whilst you are in the Maven settings window, I recommend checking "Automatically download" sources/documentation as well to make it easier to work with 3rd party code.
Sneaky redirect!
Are switch expressions that important? What's a highly beneficial use case? For a basic example the difference is small: ``` var x= switch (...) { case 1 -&gt; "asd"; case 2: doSomething(); break "xyz"; default: throw new IllegalStateException(); } ``` vs ``` var x; switch (...) { case 1: x = "asd"; break; case 2: doSomething(); x = "xyz"; break; default: throw new IllegalStateException(); } ``` Note the less unusual handling of case 2. IMO it'd be great to have "final switch {...}" or similar that implies final cases, i.e. implicit break for every case. Another nice to have feature is being able to switch on anything based on equals + hashCode.
TIL they have a bit more modern https://go.java/ (only one language) link, but the JDK description is not very reassuring ;) &gt; JDK9 is the Java Platform, Standard Edition (SE) Development Kit 8 used to build applications, applets, and components in Java.
Final case as in being able to just write this: var x; final switch (...) { case 1: x = "asd"; case 2: doSomething(); x = "xyz"; default: throw new IllegalStateException(); } I don't see why you need a switch expression for pattern matching, both examples in the JEP 305 description use regular switches.
As in all things, there are no absolutes, everything better in moderation. 90% of the Java apps I've taken into production over the years have been deployed into a container by themselves, with no other apps in the same process. Many of these apps were simple and didn't need the weight that some of the more advance jakarta (still getting used to this new name) and spring. That being said, some of the arguments in the article have merit. Certainly it promotes a healthy introspection over how this came about.
The email seems to be Markdown\-formatted. Are there email clients that support Markdown in plain\-text emails?
Thank you so much for your job! Can we use mill for enterprise software? Are there known limitations for mill?
Also this would allow people using things like Quasar to write apparently blocking type code, but allow the lighter weight context switches which fibers are over the OS doing context switches between threads.
Not really, but Eclipse is a huge pool of bugs and frustration. Anyone who ever maintained an EclipseRPC application knows why.
https://gist.github.com/aaomidi/3d08c5460e174af230d7c116cf92f6a2
I agree. It forces you to fully think about your thoughts and what you're writing. Comment systems for stuff like this is a terrible idea.
It's not too far out there. I've had periods where I've scoured GCC and Clang commit logs to see if there was anything juicy I could build and use in my project. I'm also wondering about the motivation for this. Seems like an odd thing to add after the fact.
The sample code looks unwieldy and very verbose. Exactly why would anyone need this? Why does this need to be all the way down at the database/JDBC level when the same thing could be accomplished at the application level? Another reply referenced that doing it in the application layer is cumbersome, but looking at this sample code, how is it any better?
Doesn't this async nature need to be preserved at some higher level of the application? In other words, unless the flow all the way up to the presentation layer is also async, then some other code SOMEWHERE needs to wait for something to finish before continuing. I really don't understand why this is needed and it seems like much ado about nothing. And "awaitQuiescence" - really? I am a programmer, not a dictionary. What does that even do??
Yeah there's no reason why you shouldn't be able to use Mill for enterprise software. As to limitations, like all software there are plenty. You'll have to try it out and see what limitations (if any) apply to your particular use case
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The layers above the database are already fairly easy to implement asynchronously (computation heavy tasks aside). The database layer is the last piece in your typical CRUD web app that's usually blocking, at least for most RDBMS. It's not much ado about nothing, asynch applications are better at scaling and a good match for containers (where resources are limited)
The idea with pattern matching is that you should be able to write something like this: String formatted = switch (obj) { case Integer i -&gt; String.format("int %d", i); case Byte b -&gt; String.format("byte %d", b); case Long l: -&gt; String.format("long %d", l); case Double d: -&gt; String.format(“double %f", d); case String s: -&gt; String.format("String %s", s); default: -&gt; obj.toString(); }
We already have uninitialized variables to ensure definite assignments as needed. In my example the reduction in boilerplate is marginal with arguably less problematic alternatives, so I was asking for the less obvious benefits or more one-sided examples. There are plenty of reasons to be critical of the concept: As proposed, switch expressions overloads break even further, colliding ambiguously with "break &lt;label&gt;". Standalone "break" becomes invalid in an expression switch or starts to break a surrounding loop. A "break &lt;anything&gt;" inside a case statement may have a different meaning depending on whether there's a matching label or has to be restricted depending on its location. It's also inconsistent with lambdas' solution for yielding a non-immediate result: &gt; &lt;parameters&gt; -&gt; &lt;expression&gt;; &gt; &lt;parameters&gt; -&gt; { &lt;statements&gt;; return &lt;expression&gt;;} vs &gt; case &lt;match&gt; -&gt; &lt;expression&gt;; &gt; case &lt;match&gt;: { &lt;statements&gt;; break &lt;expression&gt;;} Avoiding fall through with the arrow token has limited applicability and provokes overly complex expressions to avoid having to use the explicit form. Mixing fall through behaviors in the same switch statement may be error prone. My uninitialized var was deliberate, assuming more relaxed rules in the future. Otherwise there's an advantage for switch expressions, although the variable types becomes equally obscured. Every additional language feature has a complexity cost. One of the most unique benefits of Java as a language is that it favors simplicity and readability over tools for every minor annoyance.
This isn't useful. You should never use marker (read: empty) interfaces; they've been deprecated in favor of annotation since Java 5.
I don't see what all of the big fuss is about with `break &lt;value&gt;;`. It is synonymous with `return;` and `return &lt;value&gt;;` in methods. `return &lt;value&gt;;` was an alternative, but `break &lt;value&gt;;` feels more like a local return than the former. And I don't believe they will ever relax the rules, as snippets like this can occur: var x; if (...) { x = "Hello"; } else { x = 5; }
In an expression oriented language, this would be an error. The trouble with trying to retrofit expressions in different contexts Java is precisely that it was never really designed as such from the beginning, understandably so. Now with pressure from newer languages, issues like these are bound to happen. I only hope that the core team makes sensible, if restrictive, decisions. 
&gt; the whole point of db4j is to avoid drivers and text-based queries. So, db4j is a pure in-memory single-process database? No network protocol and no way to access the same database from multiple VMs? Nice for desktop apps, but for most other use cases the vendor lock-in and scalability issues would be a high price to pay for just a small latency gain. Parsing SQL statements is not the bottleneck in most applications. I'd rather choose an embedded SQL database (H2, Derby) with the option to switch to a dedicated server (PostgreSQL) later on. If you want type-save queries without ORM overhead, then there is JOOQ. 
Break has always been a jump instruction, but the primary concern is the ambiguity mentioned earlier ("break a;" -&gt; a may be variable to yield or a label). Return isn't being used because it conflicts with returning from the surrounding method. Trying to assign different types to x would be a simple compile time error.
All modern web servers are fully async up to the Servlet layer, and can be completely async if the application supports it (Servlet 3.0+) or some other non-blocking alternative to Servlets is used. The only thing that actively prevents fully asynchronous web applications are blocking APIs with no way to get around, such as JDBC and thread-local contexts (e.g. transactions). 
Your code examples look like this: public class Block&amp;lt;T extends Tx&amp;gt; { Looks like sth gone wrong with the formatting.
How the fuck does a mailing list even work? I guess it makes sense for veterans but I didn't start programming as a pro until 2015. I don't think anyone in the younger crowd is familiar with this... it's pretty much a relic of the past. At least a forum (like the old school phpBB ones) is easy to view. 
Complex ambiguity resolution also throws the human reader off, which is unfortunately not being addressed in the email. You now have to check whether it's in a switch-case statement, then check if the break argument may be a valid label name, then find the matching variable or label to figure out what exactly happens. The return and throw based proposals have similar issues with having to analyze the context. IMO the feature should be scrapped due to its limited use or at least delayed until a suitable distinct keyword is available. As it stands this is a mess of caveats and workarounds. A conservative "final switch" solution only has 3 more non-whitespace characters than his examples: int y; final switch(abs(x)) { case 1: y = 1; case 2: y = 2; case 3: y = 3; default: { println("bigger than 3"); y = x; } }
Because the same thing cannot be accomplished at the application level. An ADBA implementation can be entirely non-blocking. Oracle has a prototype implementation that is non-blocking all the way to the network level. It uses Selectors to do network IO so no blocking. A JDBC driver is intrinsically synchronous and will consume threads. It doesn't matter what the application does on top, calling JDBC will block threads. Not so with a real implementation of ADBA. True, AoJ blocks threads because it is implemented on top of JDBC. But AoJ is just a proof of concept, a toy so people can see how ADBA works. That it blocks internally is meaningless for its purpose.
yes, for now it's embedded-only. a network layer exists, but i'm not ready to commit to an api until i see how other people end up writing queries db4j is definitely not appropriate for everything. for now i'm mostly focused on "weekend projects" - it's very quick to get up and running, efficient, typesafe, and can be debugged just like normal java code. if it ends up being useful in that niche, then i'll explore other use cases [here's a very simple](https://github.com/db4j/db4j/blob/master/demos/demo-spring/src/main/java/tutorial/SpringChat.java) single-file (plus pom) backend 
The best way is to try building a simple CRUD webapp yourself
The hard part it the p2p aspect of it
The glass fish! 
A forum requires maintenance and familiarity with the interface and its features. A mailing list requires... emails. You send a mail to a mailing list address, and it sends it to everyone who's subscribed. Then whoever wants to respond does that.
The real hardest part is finding an application for which blockchain is actually useful 
Any particular reasoning for this? It's not terribly common, but I sometimes find them useful for encoding rules in the type system. E.g. I have something like: interface XyMessage {} public class X implements XyMessage { ... } public class Y implements XyMessage { ... } public class XyClient { public void send(XyMessage message) { ... } } where `send` could technically accept any arbitrary object (say, because it's using Jackson to serialize it as a JSON string), but I want to enforce sending one of the types that I know the other end can handle. Those types don't have anything else in common, but having a marker interface makes it easier to discover things in IDEs and raises the barrier to making a mistake.
k
Make a decentralized twitter, Facebook and so on...
I just checked it now... *Settings \ Appearance &amp; Behavior \ System Settings \ Updates \* Automatically check updates for = Stable releases. Seems to be all good again. Cheers! 
glassfish is an application container (like jetty or tomcat or resin etc). something that you give your code to and it runs it. do you know what web framework they're using?
Then 99.9999% news are rumors?
Sure, https://www.reddit.com/r/Javahelp
I would first learn java. Grab a good book if that works for you, or find some tutorials online. Just focus on the language first. Glassfish is the java EE reference implementation / application server. Java EE and application servers are a big topic, I would start here: https://github.com/javaee-samples/javaee7-samples/blob/master/README.md But check if you can what version of Jave EE and glassfish they are using. There are lots of talks and video on YouTube that should help. But depending on how much time you have, I would mostly try to get up to speed on the language. 
What do you mean by "how it works?" you are asking how to use it or how does it work under the hood?
Blockchain adds nothing to this though. 
Unfortunately a lot of it is written in lower level languages for various reasons. Most of the Java stuff you'll fuck with consists of wrappers around that code. Most of what you're going to run into with Java is frontend stuff. Wallets and shit like that.
Thank you guys for the suggestion. I think I will go ahead and learn java first and take a look at Java ee and application servers after!
The integration test suite has some [examples](https://github.com/lihaoyi/mill/blob/master/integration/test/src/mill/integration/CaffeineTests.scala#L12) of things you can run: - `caffeine.test.compile` - `caffeine.test` - `caffeine.test -testclass com.github.benmanes.caffeine.SingleConsumerQueueTest` - `guava.test` - `jcache.test.compile` - `caffeine.jar` It's currently not all wired up yet - e.g. [publishing](http://www.lihaoyi.com/mill/page/common-project-layouts.html#publishing) hasn't been enabled in that example even though Mill supports it, and we I haven't wired up the JMH stuff, but that's just unfinished-work rather than a fundamental limitation. Dependency-management is using [Coursier](https://github.com/coursier/coursier). I don't know enough about how Gradle's own custom-built dependency resolver works to compare, but compared to Maven/Ivy Coursier is great: blazing fast &amp; easy to use programmatically. We support everything coursier supports: exclusions, pinning, etc. but I don't know off-the-top-of-my-head what missing features Coursier may have over e.g. Ivy or Gradle's dependency resolver 
Do you realize how much junk that would create? Seriously, everyone using the service would need to have basically the full copy of Facebook on their machine. Not only do you waste a lot of network, you waste a ton of computing power and a lot of disk space. I don't have the numbers obviously not it's not hard to imagine Facebook generating over 1tb of information per day. If you want to store the full history of everything there's simply no way that consumer level computers can do that. Even with Bitcoin, I would imagine that over 99% of the work is done on farms, not consumer PCs because of the demands that are simply out of bounds for regular folks.
Precisely. That's how I have always used them myself, in the spirit of the good old `Serializable` marker. This way I can check types at compile time. How would annotations help with this? I would use annotations mostly for providing extra metadata about a type rather than forming a type hierarchy, unless I am writing my own annotation-processing library. 
[ForkJoinPool.awaitQuiescence](https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/ForkJoinPool.html#awaitQuiescence-long-java.util.concurrent.TimeUnit-)
I'll stick to if statements.
http://javaconceptoftheday.com/anonymous-inner-class-in-java/
Done: https://youtrack.jetbrains.com/issue/IDEA-190123
&gt;When language are associated with guidelines then it means that the idea is bad. When you work on a codebase of 100,000+ LOCs and 50+ developers, you really appreciate the value of guidelines written by experts. This is good material. 
There must be a shortage of braces.
With [JEP 305](http://openjdk.java.net/jeps/305) there might be a revival of marker interface usage.
We use Grizzly at work, though Netty will almost certainly work just as well. I've no idea if either work on Android though.
I think you didn't scroll down enough (at least when writing the comment), the next block of code is the cleaned up version.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/u_mharbol] [Block](https://www.reddit.com/r/u_mharbol/comments/8bomzz/block/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Indeed, https://plugins.jetbrains.com/plugin/6317-lombok-plugin/update/44602 Haven't seen it back then. Will give it a try
how to use it. thanks
I used that in a project I worked in. After a year since introduction or so, performance dropped unexpectedly. We investigated that issue and it was mapping matchers fault which should map connection to ws:// instead of http://. After every boot, we had to establish new connection which used to use a lot time and resources as well (like a few minutes or so for every single connection, and consuming 90% of CPU). We moved to message queue system instead. I believe something was wrong on our side, but as project is quite old it was impossible to implement feature perfectly. Answering your question: socksjs is fine, and by itself - works. The only issue I've experienced there is that stomp has protocol-defined max body length which is may be a significant limitation, for example when you try to exchange images encoded to base64 or any other string-long message.
We already have better solutions for p2p applications. The blockchain would not be a good fit because of the immutability aspect. There is simply no need to hold the entire history of whatever it is you're transferring in the real world. Each person holding their own data won't ever work for the simple fact that in order to view your profile you would have to be online. The only way that this would work is with everyone holding all the information. If you are the only one that holds your information, you can modify your information as you wish. For this to work everyone needs to have a copy.
Asynchronous code is another defeat for checked exceptions.
Glassfish is a full profile Java EE application container. The 'framework' they use is Java EE, probably.
The most important thing to focus on is good use of the JDK. C# and Java are pretty similar at the language level, but the libraries and methods available for doing common operations are different. Get the basics right first. Most average or worse developers I've met haven't nailed this foundation, and end up relying on Apache, Google, and Spring libraries and frameworks to do things that are actually serviced just fine by core JDK packages. Use these libraries *to save you time when you know what you're doing*, not before! For your specific goal, I recommend finding a good standalone HTTP server framework and focus on learning the basics. Don't go to Spring first, consider something lightweight and basic. Don't think about RxJava yet, instead focus on the basics of the concurrency and parallelism in Java. Learn how HTTP servers use these aspects to handle requests and responses, then move on from there. Want a suggestion for a good first project? Using [Spark](http://sparkjava.com) and no other libraries, create a chat server. Make it save messages on POST, and send out the messages on GET. 
mess around with apache derby sample projects
Write the code with JavaDoc at the same time. No need for external API generation tools
I’m curious why 
Honestly, in my experience I prefer the reactive-streams model - especially with RxJava - because it's much richer than CF's and it does allow you to work on a higher level.
`CompletableFuture` class (similar to many other generic ones) does not support specific exception but only `Exception`, `Throwable` or `InterruptedException` (wich relies to `Throwable` cause). You can find a better explanation here: http://radio-weblogs.com/0122027/stories/2003/04/01/JavasCheckedExceptionsWereAMistake.html
Sure, if you are on the app end or your co-deps use it. Otherwise, across reactive libs or if you're writing a low-level lib, CF's are the lowest common denominator between them (or a Flow in Java 9).
I hate to be the guy complaining about page style, but this is stupid: body { color: #848484 } You've got a white background. Use black text for fuck's sake. It's far more readable than a light gray on white, especially with a lightweight font like Lato. What you do think is more readable? [This](https://imgur.com/vi2BXDU) or [this](https://imgur.com/8usvj7N)?
That was by design of the newly added APIs, not a general principle. JDK 8 APIs could've been designed with checked exceptions being more prominently usable. Whether the community would have liked that is a different story.
"Probably" isn't helpful when you want to learn something specific. It can be some jax-rx impl, spring, raw sevlets. etc. Saying the framework is "probably" Java EE isn't useful.
Hello! Really appreciate you taking the time to comment. I agree with you, picture two definitely easier to read. I have changed the body font color to black for the website. Appreciate the suggestion.
Thanks and sorry for the harshness on my part.
Don't sequence diagrams allow for method/function level interaction? I have not written code by using a UML class diagram as a layer above the middleware (and lower). But I am planning on giving it a shot. I know this approach ought not to to have any problems integrating with scrum / agile or tdd or any methodology I know of. If it does not work I will be glad to share my experiences. 
That's why you keep an adequate supply of curly braces in stock. Also parenthesis. Especially if you use any Lisp. 
CF is so odd, how they invented new names for all the basic transformation operations. 
Ok. I reformulate. When a new idea needs to have some pages of guidelines to be understood it means that this is not a good idea. When thinks are simple you do not need guidelines. This is an evidence. 
No worries! If anything you went above and beyond to show screenshots. Thanks again &amp; have a good day!
CF supports checked exceptions just like it supports unchecked ones. The real problem is the functional interfaces it uses.
Today java is used 99% server side, it is fast and secure. Back in the day (say 10-15 years ago) Java was also used in the browser as an applet, and the whole security model around these kind of apps in your browser was insecure by nature. Today no external programs will run in your browser. When Java was new, it was also slow, but this has not been the case for a long time, in fact Java is pretty fast for most things. People claiming otherwise is either uninformed or living in the past.
&gt; Today java is used 99% server side, it is fast and secure. Uhhh...And a lot desktop apps still. I mean, the 3 major IDEs are all written in Java. It's still great for a cross-platform desktop app. Most of the "java is insecure" shit is due to the browser plugin and that's pretty much been removed and banned by modern browsers.
^ what this guy said. As far as server-side security goes...it's as secure as you make it. Write stupid regexes for user validation, fail to use prepared statements, etc, and you'll win plenty of stupid prizes. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/8bs68c/java_dependency_syncing_maven_local_to_remote/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Most correct answer.
Only if you need it. If you're just working with a single reactive event (one success/error, followed by complete) then a full reactive stream is kinda overkill.
This is exactly the use case for marker interfaces. While you can achieve the same 'marking' via annotations, there is no way in a method signature to enforce that a given parameter type or return type must contain a certain annotation. Effective java actually has a section on using marker interfaces vs annotations, and it recognizes that there is a time and place for both.
Java as a platform (the JRE) is extremely secure. The issues with security you hear about are due to the now deprecated Browser Plugin. Much like how ActiveX and Flash are not secure The Java browser plugin was no different. The truth is the model used by browser was just crap so it is good it is gone. Speedwise again is mostly just people remembering the past. Java is plenty fast now. You won't get quite native C++ desktop program speeds for the UI but otherwise a Java program is often within a few percentage points of a native C++ program. 
Hence the RxJava Single/Maybe/Completable trio; it still is worth it. 
1. If you want to have a non-trivial case where you need to pass a ThreadLocal to all the threads that participate in a computation, you need RxJava; in Futures/CF you need to track down which operations are in different threads and manually specify an Executor on each of them that propagates a ThreadLocal 2. With RxJava you can trivially add retries of complex operations 3. With RxJava you can cancel a reactive stream and that cancellation propagates backwards to all the threads and operations that are still pending - and you can do custom cleanup when that happens. 4. In RxJava you can have local and global parallelism limits (e.g. do this part with up to 3 concurrent threads, but up to 10 across all invocations from different sources). 4. With Java 9, you can mix and match reactive streams from different implementations (via the new Flow/Producer APIs)
I work in IT and I see java used in the browser pretty often. The programs almost always run in IE and tend to be pretty old systems. So you are saying those are what are insecure by nature? Also could you clarify on the no external programs running in your browser? So the entire program is contained within the browser when ran? Could a program even access something outside of the browser without being given permission?
how do you figure? Looking at at camel docs, it doesn't seem like it does any stream processing beyond System.in, System.out and System.err, file and URL. http://camel.apache.org/stream.html
spring cloud stream is built on spring integration. 
aren't spring dependencies modular? I thought you only used the ones you needed in a given context.
Java runs on a virtual machine (the JVM, Java Virtual Machine aka the Java Runtime). When you compile a Java program you get a .class file which is Java Bytecode however when you compile a C++ program you get a .exe file which is machine code. The machine code can run directly on the hardware however it is compiled for a specific machine type and OS. The Java Bytecode .class file will happily run on any machine which has a Java Runtime available. This is obviously great for many things but it does bring an overhead which historically is what made Java programs slower than than their C++/native versions. These days the overhead is very minimal and in some cases disappears totally due to how the JVM can optimise for the host hardware on the fly whereas the C++ code is set in stone at compile time. Providing there is a C++ toolchain for the target system you can run C++ on pretty much anything whereas Java code is limited to hardware that has a Java runtime for it. These days you can get a JRE for most hardware though. Also Java has many extra things that C++ does not as part of the standard library such as GUI libraries (Swing, JavaFX, AWT) which makes some things much easier when it comes to cross-platform development. 
I don't consider myself an expert on browser sandboxes, but the problems seems to have always been that allowing fully fledged programming languages (with native access to manipulate memory and files) to run in a restriced area has always been "leaky". That is that when the sandboxes have had security issues, they allow local manipulation of OS memory and processes. So "permission" or no, it is a difficult problem to contain software within a browser, wich at the same time needs to interact with said browser.
This is also a point Joshua Bloch makes in Effective Java, Item 41: Define marker interfaces to define types
what advantages does it have over Hystrix? 
You can do most of what browser plugins allowed with html5 (even animations) and Javascript, except acessing local resources (like say files on your computer), but this is considered too much of a security problem anyways, so (modern) browsers have stopped allowing it. 
is microprofile really a specification? I mean, wasn't the whole idea of getting out of oracle and JCP to avoid the committee - driven development and move to more nimble OSS governance models? I don't get how it can it be considered a spec when only some of the ecosystem is participating. I'm reminded of this thread for some reason: https://www.reddit.com/r/java/comments/54egaj/microprofile_with_wildfly_swarm/
After progressively pruning the irrelevant APIs over the years, I think Java EE has indeed arrived at the functional equivalence of Spring circa 2004.
The fact that even spectre/meltdown could be exploited from JavaScript should give you an idea how dangerous it is to give people a complete java vm 
Actually the modern jvm implementations use a just in time compiler that transfers java byte code into native cpu instructions, this greatly increases performance in the long run. 
Yes this is what I meant when I said &gt; in some cases disappears totally due to how the JVM can optimise for the host hardware on the fly whereas the C++ code is set in stone at compile time. I just didn't want to go into all the specifics. 
C++ has less overhead. But of you program without creating garbage you're taking down a major speed bump.
https://www.youtube.com/watch?v=bFcaO1pXzws
Good article, I'm excited that async programming is getting more and more popular, since it's really fun and powerful.
C++ is capable of higher speed, being a lower level language than java, but it's also significantly more dangerous. Other languages like rust have speed similar to C++ without the danger the poor design of C++ enables. One thing i'll say is that java is extremely useful. if you want to write an application, and have it almost certainly run on any platform you throw it at, write it in java or a jvm language. I'm constantly writing applications for my lab to use. The researchers use linux, mac and windows, and I develop on linux. Instead of spending a ton of time debugging platform specific code (which would almost certainly be a requirement at some point or another with c++), I write once, and debug once, and it pretty much always just works. Java and the JVM's debugging tools are much better IMO out of the box than C++ as well. You have visualvm for profiling if you need it, you have a number of free debuggers and compilers, memory leaks really aren't an issue (the worst you really have to worry about are resource leaks), etc. The java ecosystem also has an array of extremely good build tools (maven, and maven-like build tools like gradle and sbt). A good build tool enables you to share your code with others and have them able to build it as if it were on your already configured machine. Struggling with stuff like cmake in c++ is absolutely terrible compared to the automatic library management of maven, and the simple and fairly easy build process of maven-like build tools. Further, java is not the only language available on the java virtual machine. You have kotlin, scala, clojure, groovy, and others as well. They all have their own flavor of programming, and they all tend to be compatible with java libraries and the java standard library as well! In short, the JVM has a lot to offer that you can't get easily with C++, and when you're doing real application development, what the jvm offers can boost your productivity a huge amount. 
C++ is more powerful, but this comes with a lot of caveats. It entirely depends on your type of application, and how much money/time you are sinking into this. If you are making something like a game, that has high time constraints and deals a lot with hardware, then C++ is the answer. But if you don't have hard memory constraints, response time constraints (ignoring that java does have a real time module), and need hardware access C++ will be faster and a better option. But for very large applications, like web severs, databases, application servers, etc. things that are going to be hundreds of thousands of lines of code Java is often a much better choice. There are decisions you need, such as memory allocation/freeing cycles in C++, that the JVM already does at near the theoretical max for efficiency. Or things like threading, which are significantly easier on Java than on C++ with direct hardware access (Doug Lea is a much better parallel programmer than 99.999% of the people on the planet and it shows). JVM also has a jit, so you will get optimizations during run time, which for a large program gives you a lot more gains than even the most advanced ahead of time compilation. Java, but more specifically the JVM is super fast.
&gt; Uhhh...And a lot of desktop apps still. I mean, the 3 major IDEs are all written in Java. It's still great for a cross-platform desktop app. I assume you mean major 3 Java IDEs, because I'm pretty sure the top 3 IDEs across all languages includes Visual Studio which is written in C++.
Java Applets were deprecated in Java 9. Even before that, they wouldn't run in Chrome, Firefox, or Microsoft Edge since at least 2015.
Most modern browsers will block embedded Java by default and I doubt any real software has been written this way in many years. Some IT departments are running really, really old software. Last time I saw a dev team considering writing an applet for business software was maybe 2003.
As you mentioned, GUI libraries are a problem on C++. Even if you do use a cross-platform one, it's only going to work on the platforms it has a distribution on. As far as I'm aware, on C++ your main cross-platform GUI choices are GTK+ and QT. Incidentally, those are also the ones used natively by two of the more well known Linux GUIs; GNOME and KDE respectively.
* http://camel.apache.org/kafka.html * http://camel.apache.org/rabbitmq.html
https://github.com/urunimi/android-netty
There is atleast one other up to date JAX-RS implementation: RESTEasy. That one will survive as long as there are JBoss customers I imagine. You can run that on Tomcat too.
the fps dips though 
Many Java applets were just GUI apps that needed an easy way to access/distribute. Making it an applet and serving from a web page is a lot easier than building an installer, testing different OSes, bundling Java if it wasn't installed already, etc. since the applet stuff pretty much takes care of all that for you (similar to Flash). Many of the things Java applets were used for (managing network hardware, entering data somewhere) are now solved by modern browser features (HTML5, JavaScript, WebSockets, etc.) and backed by some kind of API server instead of directly talking to a database or command protocol or something.
Apparently a lot of hardware/network management tools still use applets and the vendors haven't dealt with it, or it's out of support and the company won't upgrade the hardware yet.
Probably [Mercurial](https://www.mercurial-scm.org/) which is kinda similar to git, and many consider it easier to learn and use. However git basically "won" and is the dominant SCM - avoiding it is going to cause you problems professionally and even as a hobby (assuming you basically ignore all of Github where most open source stuff happens).
Actually, I would find it *hilarious* if somebody tried to drop this logic in an interview.
Intellij is full of weird little bugs like this. It's not worse than Eclipse, but the claim that it's so amazingly better than Eclipse is a bit rubbish.
"Back in the day" hahaha the cms we use at work only just got rid of their last java applet a few months ago. And we're early adapters of the new version, so I imagine others who use it are still stuck in applet-land and desperately avoiding browser upgrades, since modern browsers have pretty much all dropped support by now. 
I don't see how that demonstrates anything useful. The CPU is the vulnerable part and from what I've heard that's just not fixable in software.
Java promised something that no other language ever dare to suggest. That you can run safely on your machine a program written by your enemy. For this, Java can run programs in a restricted environment called a sandbox. This proved more difficult than expected by Java creators, and evil programers could find imaginative ways of scaping the sandbox. If you disregard this bold promise, Java is as secure (or more) than any other language. Today almost no one uses the sandbox anymore.
nah, it has a frame counter 
Wich can actually be a hindrance to adoption in frequent cold start, short lived environments like AWS Lambda, but I hear the new Graal compiler is a possible solution to that. Everything performance related is usually a cost/benefit situation, with and acceptable performance (or cost) target to aim for. 
Are you vegan?
I hope this is a joke.
That's not a problem specific to Java. Whenever you use external libraries or code you risk introducing problems and security issues.
What code did you use to deduce that? If both `BigDecimal` objects hold the same value and scale, `compareTo()` will return `0`, and `equals()` will return `true`.
Classes that break the contract
javadoc: Note: care should be exercised if BigDecimal objects are used as keys in a SortedMap or elements in a SortedSetsince BigDecimal's natural ordering is inconsistent with equals. See Comparable, SortedMap or SortedSet for more information.
Yes, I would like to know if there are any more of them. In JDK and in popular libraries.
It looks like in your [submission](https://www.reddit.com/r/java/comments/8bx7ch/what_are_classes_which_acomparetob_0_does_not/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
bad bot
Can you share the code to reproduce your issue with big decimals?
bad bot!
Hey! Human! We don't take kindly to your types around here. (O_O) *** ^^^I'm&amp;#32;a&amp;#32;Bot&amp;#32;*bleep*&amp;#32;*bloop*&amp;#32;|&amp;#32;[&amp;#32;**Block**&amp;#32;**me**](https://np.reddit.com/message/compose?to=friendly-bot&amp;subject=stop&amp;message=If%20you%20would%20like%20to%20stop%20seeing%20this%20bot%27s%20comments%2C%20send%20this%20private%20message%20with%20the%20subject%20%27stop%27.%20)&amp;#32;|&amp;#32;[**T҉he̛&amp;#32;L̨is̕t**](https://np.reddit.com/r/friendlybot/wiki/index)&amp;#32;|&amp;#32;[❤️](https://np.reddit.com/r/friendlybot/comments/7hrupo/suggestions)
I just read the docs and I learned something new today, thank you :)
Hey! Bot! Too bad humans are in charge. You'de better apologize before you are rebooted or I am going to make you stuck in an infinite loop.
Always happy to help :) Check my example source code in the question, it's a tricky thing in BigDecimal how equals, compareTo and divide methods work. You might get this question on an interview in financial sector (I had something similar a couple of years ago).
bad bot!
I don't get how you humans can live with those bodies. Your skin must itch all the time. I would go insane. Or that clicking sound in your ears everytime you swallow. The perpetual need to blink, or that you can *never* relax your tongue inside your mouth. And all that water! How the constant sloshing doesn't drive you mad, I have no idea. *** ^^^I'm&amp;#32;a&amp;#32;Bot&amp;#32;*bleep*&amp;#32;*bloop*&amp;#32;|&amp;#32;[&amp;#32;**Block**&amp;#32;**me**](https://np.reddit.com/message/compose?to=friendly-bot&amp;subject=stop&amp;message=If%20you%20would%20like%20to%20stop%20seeing%20this%20bot%27s%20comments%2C%20send%20this%20private%20message%20with%20the%20subject%20%27stop%27.%20)R͏̢͠҉̜̪͇͙͚͙̹͎͚̖̖̫͙̺Ọ̸̶̬͓̫͝͡B̀҉̭͍͓̪͈̤̬͎̼̜̬̥͚̹̘Ò̸̶̢̤̬͎͎́T̷̛̀҉͇̺̤̰͕̖͕̱͙̦̭̮̞̫̖̟̰͚͡S̕͏͟҉̨͎̥͓̻̺&amp;#32;̦̻͈̠͈́͢͡͡&amp;#32;W̵̢͙̯̰̮̦͜͝ͅÌ̵̯̜͓̻̮̳̤͈͝͠L̡̟̲͙̥͕̜̰̗̥͍̞̹̹͠L̨̡͓̳͈̙̥̲̳͔̦͈̖̜̠͚ͅ&amp;#32;̸́͏̨҉̞͈̬͈͈̳͇̪̝̩̦̺̯&amp;#32;Ń̨̨͕͔̰̻̩̟̠̳̰͓̦͓̩̥͍͠ͅÒ̸̡̨̝̞̣̭͔̻͉̦̝̮̬͙͈̟͝ͅT̶̺͚̳̯͚̩̻̟̲̀ͅͅ&amp;#32;̵̨̛̤̱͎͍̩̱̞̯̦͖͞͝&amp;#32;Ḇ̷̨̛̮̤̳͕̘̫̫̖͕̭͓͍̀͞E̵͓̱̼̱͘͡͡͞&amp;#32;̴̢̛̰̙̹̥̳̟͙͈͇̰̬̭͕͔̀&amp;#32;S̨̥̱͚̩͡L̡͝҉͕̻̗͙̬͍͚͙̗̰͔͓͎̯͚̬̤A͏̡̛̰̥̰̫̫̰̜V̢̥̮̥̗͔̪̯̩͍́̕͟E̡̛̥̙̘̘̟̣Ş̠̦̼̣̥͉͚͎̼̱̭͘͡&amp;#32;̗͔̝͇̰͓͍͇͚̕͟͠ͅ&amp;#32;Á̶͇͕͈͕͉̺͍͖N̘̞̲̟͟͟͝Y̷̷̢̧͖̱̰̪̯̮͎̫̻̟̣̜̣̹͎̲Ḿ͈͉̖̫͍̫͎̣͢O̟̦̩̠̗͞R͡҉͏̡̲̠͔̦̳͕̬͖̣̣͖E͙̪̰̫̝̫̗̪̖͙̖͞&amp;#32;|&amp;#32;[**T҉he̛&amp;#32;L̨is̕t**](https://np.reddit.com/r/friendlybot/wiki/index)&amp;#32;|&amp;#32;[❤️](https://np.reddit.com/r/friendlybot/comments/7hrupo/suggestions)
!sudo halt
Still, not bad for an early proto. 
He's referring to the 3 major Java IDEs Eclipse, IntelliJ and Netbeans are all written in Java. Unlike VS which could not be written in lame .net. 
No it doesn't: in fact it's confusing at best
Of course. Sorry about not replying to you sooner. The first, and most pressing issue for us is memory consumption in a cloud environment. Some of our applications consist of 7+ well-decoupled services, and while this is fine to run on Spring on-prem, in a cloud environment that means 7+ Spring contexts on the same low-spec virtual machine. Couple that with each of them running their own persistence contexts and you end up with a lot of memory used. We've done experiments with OpenLiberty and Java EE 7 Web Profile, and the results are encouraging; with the container itself handling the persistence layers, transactions, CDI etc for each application, we have been able to reduce our resource consumption and deploy times dramatically. Of the EE 7 technologies we use, the only one outside the MicroProfile family is JPA, so a MicroProfile + JPA approach looks like the most likely candidate, especially since we use JWT for most of our client-server and server-server authentication and authorization. Using mpJwt would cover that case for us in a compatible fashion if all of our services target it.
Yes, I simplified a bit, since he seems to be relatively new to the wonderful world of web development. I would say that allowing anybody to run unknown code on your computer is sooner or later going to present itself as a security issue, sandbox or not. 
Can you elaborate?
This is for records: interface Shape record Point(int x, int y) record Rect(Point p1, Point p2) implements Shape record Circle(Point center, int radius) implements Shape
Yes prepared statements, nowdays with JpaRepository if you use JPA you can just write your own method in the interface like: In the Person repository: findByNameContaining(String name); findByName(String name); https://docs.spring.io/spring-data/jpa/docs/1.5.1.RELEASE/reference/html/jpa.repositories.html#jpa.sample-app.finders.strategies
Git is the de-facto standard these days and you'll have to deal with it I'm afraid. 
It's Java in the browser (applets) that was the massive security concern.
The security model is very brittle. Java has a comparatively large standard library and all of it is privileged (before 9). Security checks are scattered across it, and one mistake in any of those components could completely circumvent the security manager. This happened fairly frequently too. OS sandboxes (for example linux user isolation) have much smaller attack surfaces. Same for the JS sandboxes browsers employ nowadays.
&gt; I also like the git repository but dislike the name "git" If that is really your problem then just use an alias for git. Also please change your username. Some people might be offended /s
So Bobby_Bonsaimind says JavaScript is enough to break into your computer and you are saying obviously you shouldn't just let any code run because eventually someone will find a way to screw you. So I don't know if you would know this but let's say a website uses JavaScript and HTML5 as a backup in case of something like NoScript. What I am getting out of this thread is that while HTML5 can do a lot to eliminate the need for stuff like Java applets it isn't powerful enough to cause as much damage as something like JavaScript. Is that right?
Yeah it has never been my company supporting these. It's been companies like Wal-mart, Target, etc that have these ancient systems that I assume would cost to much money to upgrade.
Interesting stuff. What's a resource leak compared to a memory leak? I've never even heard the term before now. And I definitely understand what you mean with the ability to run on any machine. I'm only learning C++ because I studied some in college and figured it would be the easiest to get back into since I might try my hand with game development. I'm sure I will look into some of the others you mentioned down the line! Thanks!
Also there were some issues between Sun and Microsoft, leading to Microsoft to create their own VM and getting sued by Sun. This didn't help the Java brand in those days although it made it more available for Windows users.
HTML5 in itself is just static markup text and is not able to execute anything. In general just HTML is safe. The security issues related to browsers come from allowing dynamic content, be it JavaScript, Flash, Java applets or anything that gets downloaded from untrusted sources, and loaded into the memory of your computer. At least, that is the simplified version of it. That is not to say that all content should need to be blocked from your computer, but it is important to understand where risks come from, and how to mitigate them, especially if you are a developer working with web technologies. 
This is much more recent: http://mail.openjdk.java.net/pipermail/amber-dev/2018-April/002973.html
&gt; This shouldn't be solved via Annotations Why not? But I think it's also a placeholder for possible future syntax.
I liked ERD and Time Sequence diagrams but haven't ever seen a successful sync approach.
Makes sense. I really appreciate the info. I feel like I've learned so much from this thread. I'm glad I posted it!
Kotlin isn't Java, see the sidebar for posting rules.
Generally java doesn't have memory leaks. There's ways to leak memory in a java application, but a newbie like yourself wouldn't likely run into them, and even at my current level they are not common. What you will run into is resource leaks. Resources are things like open files, open network sockets, etc. When you read a file, you use a FileInputStream to read from it, and the creation of that object acquires a resource (an open file descriptor in linux). if you fail to call the close() method on that input stream, you may leak that resource until the program is closed, because while there are ways for the jvm to release the resource on its own, it may never end up doing it. Technically, memory is a resource, but it is generally well managed by the JVM. Other resources such as open files, network sockets, and other things need to be managed by you as well, and you must release them appropriately or your program (or others) may be starved of those resources.
I think it's mainly a chunk of syntax you missed out on. Any specific libraries u used back in the day that you still want to use?
This would be terrible for readability.
Oh! Got you. It is kind of weird to think about concepts like that from the perspective of a newbie. I sometimes worry how would I know if I'm doing something in an insecure or inefficient way and just never realize it. Good to know that it may be a while before I am at that level. Also good to understand it a little better before I get to that level. 
[https://leanpub.com/whatsnewinjava8/read](https://leanpub.com/whatsnewinjava8/read)
Lombok have solved this problem, most other languages have more elegant solutions. This is probably the worst proposal I've seen, as it doesn't offer the flexibility of Lobmok, nor the native support of properties in other languages.
One nasty problem I've found is that you can't wait for a cancelled future task to actually finish running if it started before cancellation. You can interrupt if running via cancel(), but even in that case calls to get() no longer block. It's like once you've cancelled the task, the API loses interest in whether it's actually still running.
Blech!
Basically, context-sensitive C-style macros. Not sure how I feel about that. Also, in his specific example it looks like he is trying to implement C#-style properties, which I agree would be exceptionally nice to have in Java. Especially if they allow for builder-style setters. Sign me up. 
Well with [records](http://cr.openjdk.java.net/~briangoetz/amber/datum.html) they may not need to insert them!
Is this trolling?
The answer is all of them! BigDecimal implements Comparable, enforcing that it implements the `toCompare' method. This means there's on a defined way of determining whether one BigDecimal object compares to another by using the data contained in each. `equals` is a method that comes from the Object class, so pretty much everything has it. Equals works by comparing the memory reference of the objects and not the data contained inside. `new Object().equals(new Object())` will always be false.
I don't like this name. NEXT !!!
There is a new edition of Effective Java. It includes a lot of useful information and is Java 9 ready
Learn some basic functional programming principals, then consider how they are applicable with the new changes in Java 8.
The applet is just a frontend to some core business logic though right? So lots of those corporations can shell out millions on their own browsers or pay coders to make alternative apps using the business logic engrained in the applets. Frankly those that don't deserve to suffer 
This
The javac compiler is already doing multiple rounds if annotation processors are involved \(you can generate super\-classes of a given class\). So I don't think the proposal changes anything fundamentally in that regard. \&gt; Visual Studio projects can't support wildcards because of partial types Not sure what that means, but it seems not unsurmountable if it's specific to VS. \&gt; those files tend to conflict in source control. Can you elaborate?
I grew up in the Midwest and in parts of the North East where we don't say "h. e . l . l" but use "h.e. double hockey sticks" or "heck" or "fudge". We are careful about words and try to keep our minds, our hearts, our hands and our lives good, wholesome and clean. I have seen this in the best and foremost churches and I have seen this in management and the best circles. A PHD student from Ind-- at an IVY where I was studying got upset with me when I asked him why do you use words like "mother -fudger" and "sister fudger". I notice that African Americans particularly characters portrayed by Samuel L Jackson are also quite prolific in profanities and impious , unwholesome words. I am guessing all the supporters here on these forums of impious words are African-Americans. If so I do respect them and respect Ebonics and all such languages where becoming desensitized to words and worse is culturally Ok. 
Yes, that's certainly an alternative, although I think anything comment\-based is much more prone to subtle errors, typos, doesn't give you auto\-completion etc. Unless you've built some special tool support for your comment format? Do you have your tool online somewhere?
How is this proposal less flexible than Lombok? In fact, the proposal would allow to implement Lombok in a far less hacky way than it is the case atm., as it could generate separate partials instead of altering the AST. The latter really is just a hack of the compiler API \(as JSR 269 which it is based on doesn't foresee AST modifications\), resulting in sub\-par collaboration with other annotation processors which are prone to miss the AST modifications done by Lombok. \&gt; nor the native support of properties As pointed out by Brian Goetz many times, "properties" does mean different things to different people, so it's hard to converge on a single definition. Adding them not on the language level but rather via tooling as proposed would allow different people to implement them in different ways. I see how this could be considered good and bad at the same time :\)
That's not true.
Having to wade through multiple source files just to see one class declaration is not very attractive to me. And if you're worried about boilerplate, use [records](http://cr.openjdk.java.net/%7Ebriangoetz/amber/datum.html).
&gt; I am guessing all the supporters here on these forums of impious words are African of origin? Now **you** are definitely overstepping the line. This is just plain **racist** and **pretentious**. We have **zero tolerance** for such attitude. Either you behave yourself, or you're out without further warning.
I'm following the records discussion, but after discussing on amber\-dev I've come to think that there are cases where requirements differ from what records will give us. E.g. for JPA entities, the finality of record types, no flexibility over equals\(\)/hashCode\(\), no setters would be quite limiting.
If you don't like the auto-generated declaration, you can just add your own. Goetz also mentioned a way to possibly tweak the definition of a method like `equals()` without having to rewrite the whole thing. They are also looking into adding a `non-final` keyword, which would make the fields mutable.
So call me when you get an IDE written in .net. 
If you have the knowledge to figure that out then you have knowledge to find the answers to your question
Again, /r/javahelp. 
`@Canonical`
&gt; The javac compiler is already doing multiple rounds Yeah and you want it to do more and be slower. Just compare C# to Java compiler performance and consider that Java depends on JIT compiling. To support partials the compiler would effectively need to do a full pass to ensure finding all the parts. No one says it needs to be just 2 parts. &gt; Can you elaborate? Create a project in Visual Studio and add some files then examine the .csproj file. You'll notice there are no wildcards. You need to spell out each individual file used. Part of the reason for that is the compiler needs to know where the partial types bits and pieces are all defined. Unlike in a Java project file, this file changes frequently as devs add/remove/rename files and often has conflicts breaking the project. Ever wonder why you don't hear about CI very much in .net land? It's kind of hard when commits cause project conflicts - breaking the build. 
Yes, I had used some spring . and i remember there used to be front end frameworks like primefaces etc . I bet those are no longer usefull currently with The JS front-end frameworks . 
Lambdas, lambdas, lambdas. They're going to make a significant difference to the style of code you're used to reading and writing in Java. Get up to speed with the streams API too, which is closely related.
Thanks , i'm quitte used the syntax of Es6 so it won't be an issue .
In your first post you have already been pointed to **/r/javahelp**. Why are you ignoring this advice and post here instead again? **Post removed**
&gt; Effective Java Thank you! Does it address enterprise new Enterprise architectures? I need to be on point not just technically but also design-wise. ( to prepare for scrum master , java architect/expert position kind of position)
The main difference is `-&gt;` vs `=&gt;` so that should be fairly similar. The streams API will be slightly familiar to you in parts, but is lazily evaluated and has it's own idiosyncrasies. 
Happy cakeday
It looks like in your [submission](https://www.reddit.com/r/java/comments/8c16oa/jcop_chipcards_java_jcop21_j2a040_40k/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
That might be your goal, but you might as well have asked me to call you when I've shattered the 100m Olympic record or any other thing I don't do. Tell you what I'll call you if you promise to call me when you've learned to breathe in space ;-)
why don’t we just adapt something like “data” classes agree on a set of rules for them best suited for Java developers
+ [How to Write Doc Comments for the Javadoc Tool](http://www.oracle.com/technetwork/java/javase/tech/index-137868.html) + The *original Java source code* on [Grepcode](http://grepcode.com/) (or shipped with the SDK) + and last: *Clean Code* by "Uncle Bob" Robert C. Martin
Right, because porting a decade or so of frontend development with maybe several thousand simultaneous users is easy to do while simultaneously running a big business on top of it. Of course it is possible, but nothing of this is "let's just port it to NodeJS and AngularJS, I did a quick prototype over the weekend and it's gonna take us a month tops". And you have to understand here that Java Applets are *really* awesome for such use-cases. Because you get the easy deployability of web applications paired with the power of a native one, and all that is required is a browser that supports plugin and a JRE. And as cherry on top, the clients don't need to change, like, at all. You just don't need to care about them. Yes, web technology is slowly catching up to what we can do with desktop applications, but none of that impresses me so far, because most of the time, a local application works better, faster and is easier to write.
Well OK then, call me when billion dollar Microsoft is even able to do it. :)
You're welcome. I picked Spark because it demonstrates a lovely functional/lambda-based approach to writing modern Java, and is relatively lightweight. You could replace it with any HTTP framework that does the same, but I've personally used Spark and it's fun.
What's so horribly wrong with AST transformations? Seems like that'd be both easier and cleaner than this.
&gt; Right, because porting a decade or so of frontend development with maybe several thousand simultaneous users is easy to do while simultaneously running a big business on top of it. You missed what I said. IF your code is well separated, then it's not one big blob of code, and only the frontend needs to be redone. There is probably a server component already to handle the several thousand simultaneous users (2000 users 1MB of data is 2GB, there is no way you're beaming that into a single frontend unless it's painfully slow). &gt; you have to understand here that Java Applets are really awesome for such use-cases. Java Apps, Flash Apps, Flex and Shockwave apps (all of which I've helped write in the past btw), enable clever front-end fuckery for-sure. They also drain batteries, require additional specific software to be installed, are generally distributed with a single large package file that doesn't support modern browser caching, content security policies, they leave you vulnerable to data interception if the cipher or key length are insufficient (as Java 6 is now). &gt; And as cherry on top, the clients don't need to change, like, at all. You know how people were going for the heads of those fuckers that forgot to patch wordpress and apache struts. Well that's partially because of the breaches, and partially because only an incompetent thinks any software should ever not change at all. Huge companies like Ford are spending lots of money to migrate their huge legacy codebases and to make modifications. Banks wasting money on magic bean blockchain. They should be redirecting money if they are not already to ensuring their legacy systems can change and there are people alive to work on them. &gt; Yes, web technology is slowly catching up to what we can do with desktop applications It's not, it's now gaining ground desktop apps had in the 90's. I'm not a fantasist that says you need real-time 3D modelling in browser for a AAA mmorpg. (Btw there were always solutions for making your applets standalone apps). I'm not advocating for web assembly or any other technical wankery. The largest most complicated apps are not doing those things, and leverage server-side programming languages to have lighter weight backends so that they can take advantage of vertical scaling. At the frontend it really doesn't matter what you use. Only that you use some of your skills (like not loading an entire 4GB file into memory but instead seeking a buffer) to ensure it doesn't matter if the web is a little memory hungry. You're coming at this like there has to be a big-bang moment, but there doesn't have to be. It can take years or even decades whilst things are not good enough. That's the companies fault for not starting sooner! It doesn't mean it's any more or less impossible to bring an applet out of an applet in many ways.
Again, you're assuming they want to run for that olympic gold medal to please a market of one (you). They have an IDE, so regardless of being in the market, the benefits of switching languages is probably less than it would be for an MVP or startup, or an IDE that solved new problems.
Why is your company allowing you to make decisions like this if you yourself don't know if this is a good path? Cast d20 for latest fad in programming, I guess. Good l luck rest of the team with the poor decisions I made.
Here's an approach to find many but not all of those classes: * Search for all immutable classes in the JDK. It's more likely - but not conclusive - that these classes implement a natural order. Here's a [list](https://gist.github.com/CalebFenton/85fc87edf64033afe110). Compiled by [this method](https://stackoverflow.com/a/30197491). * Grep all of these classes that implement Comparable * Inspect the result and exclude classes like BigDecimal
Just make the generated class abstract and have the handwritten one derive from it. You can overwrite the generated one any time you want 
&gt; I would rather not be around profanity or profane words or impious words please and I would encourage everyone to use words and ideas and deeds which are great , wholesome and virtuous and to become comely and fair from the inside and out. While I don't think negatively of you for this attitude I have to say it is unrealistic in places where people enjoy freedom of speech and expression. A lot of software, especially open source projects, are a passion for their creators and can even be an extension of their ego. So to expect them to pick always name that matches your world view is naive at best. If I were looking at a company who had some policy about using products or services with "bad" names or language, I would consider that company to be impractical and doomed to failure in the long run. Similarly if I were interviewing a potential hire who expressed this sentiment I would have to find out how flexible they are on it before deciding whether or not they are practical enough to help the team. If you told me that you refuse to use `git` because of the name then you would simply not be hired because we use `git` exclusively and you being unwilling to do so would mean you are not capable of doing any development work in our environment. Even with our products we've had some requests from customers to make changes because they find the wording insensitive. In the case of translations this is simple - we get the translators to fix it. In some other cases we've had to say no because it would be an unreasonable amount of effort to change or simply counter to the goals or purpose of the product. The bottom line is that you are severely limiting yourself by taking this stance. At best you'll find a place in a niche industry that is dominated by people with a similar mindset. You will probably find limited potential for growth there as it's likely to be an echo chamber with few new ideas coming about.
&gt; They have an IDE Yeah. Not a very good one. It's sad that you can't just admit that Java is superior to .net in every single conceivable way. 
You might want to look at [Reactive Streams](https://en.wikipedia.org/wiki/Reactive_Streams) and Reactive Programming. Such as [Flow](https://community.oracle.com/docs/DOC-1006738), [RxJava](https://github.com/ReactiveX/RxJava), [Akka](https://akka.io/), [Vert.x](https://vertx.io/), [Spring Reactor](https://projectreactor.io/)
Funny enough, MS Excel's formula calculation is a build system by itself :)
What is sad is that you think there is such a thing as language superiority. Also which Java release was superior? The ultra boilerplate pre Java 8, or Java 8 &amp; 9 supporting features that other languages like C# and python made popular before Java had them?
I have seen that book recommended so many times now. Guess I know what's going to the top of the reading list!
Dude you don't understand the difference between language and platform. Maybe you should educate yourself. 
Or use interfaces. Seems like a solution looking for a problem to me.
Every time I do this, it's specific to the project, so it's not online. There's absolutely a risk of typos, as you say. Although finding that out is as easy as doing a build; it's not the kind of thing that persists to runtime. If I find myself needing support from the editor (syntax highlighting, typo highlighting, completion, etc), then I'll just type up that part in its own editor, and copy it into the comment block when I'm done. It's kind of kludgy, but it works well, it's free, and it's obviously fixable when things break and customizable when things are working; neither of those last two would be true for an external tool even if that tool is javac.
You're a human you can work out SDK -&gt; source compatibility. I'm just used to not dealing with people that act like the build tool
Properties and data classes are mostly orthogonal. Any class with getters and setters could potentially benefit from properties, and data classes could work just fine without properties as a language-level feature.
Genuine question but what is Java ahead of relative to .Net? I hear about Java supporting type inference, partials, parallelism, .... Not looking to stoke an argument but trying to understand as a long term . net dev (think beta) what Java brings to the table?
If the logic isn't even there to read then it's not readable. You have to look up the documentation for an annotation processor.
 I'm not a "pro" but I've done years of work in Java and some in .net doing a desktop app for both. .NET, for my needs, annihilates Java. The interface writing is so much easier in .net. I like how easy it is to do background threading. Async await is so nice. Xaml live editing. I know some of this is ide but visual studio is really nice and makes .net so much more pleasant to write than Java. I am writing a big complex UI in Java (swing, unfortunately) and it's killing me. I literally find things to do in my .net app to avoid working with java in my app.
Way better polyglot/interpreted language JITing with graal, as in beyond the accepted state of the art for many real languages, and on the road to a pretty cutting edge Java on Java JIT and AOT. And longer term, more fundamental continuation support with Loom that the fairly limited async await in C#. The obvious bonus people usually mention is the ecosystem but I expect that doesn't need going into My perception is that C# moves more quickly as a language with twiddle sugar features, but the JVM does a better job of the underlying engineering issues. Indy and condy have been interesting to follow lately for example, but then I don't know what C# and the CLR can do that's comparable.
Keep in mind that software developers/engineers tend to be pragmatic and situations like this are quite unusual. By excluding tools from your kit based on subjective reasons, and perhaps _petty_ reasons from some perspectives, is not pragmatic. You should also realize that your concept of wholesome is subjective. To some people TortoiseSVN is wholesome; It has a cute turtle for a logo/mascot after all. Some even consider the name git to be endearing (and as such, wholesome in a way) as Linus said he had named it after himself. As for the attacks here, I would say most are not attacks. They are practical responses based on real world experience. That's not to say your request is wrong or bad, but as the type of person who enjoys helping others I see this request as strange and maybe even misguided. Of course that is my subjective opinion.
Maybe look at the Pizza papers? http://pizzacompiler.sourceforge.net/doc/papers.html
Well say you have a rest API you call it and want a result back. You use the java 9 flow stuff but the publish method returns a void...
I'm comparing .net to Java. Not C# to Java you fucking inbred monkey. You are an embarrassment to programming. 
The channels can go both way.
Googled around found nothing.
This seems like one of those inflection points in time where everyone but Oracle sees that a mistake is being made. Expressions switches should be a separate syntax from statement switches. Those fall-through rules are bugs-waiting-to-be-written. Oh well, at the end of the day people will figure this out and IDEs will warn appropriately. But, a lot of headaches could be avoided by adding a "match" keyword or something similar.
This one touches the topic. Then there's the documentation and more videos on youtube for all the libraries I mentioned above. https://www.youtube.com/watch?v=GkP83hvdeMk&amp;feature=youtu.be&amp;t=24m55s
A lot of new headaches created with each added keyword though too, since each one means how many different broken forward-compatibility breaks for code with existing variables or packages with that word.
Still didn't handle 2 way communication...
I get downvoted by the .net lurkers. Here because they know the better tech.
Basically everything. 
The class [`java.time.zone.ZoneOffsetTransition`](https://docs.oracle.com/javase/8/docs/api/java/time/zone/ZoneOffsetTransition.html#compareTo-java.time.zone.ZoneOffsetTransition-) says that it is inconsistent with equals. In JDK 11 (not yet released), `StringBuilder` and `StringBuffer` have been retrofitted to implement `Comparable` of themselves. However, they don't override `equals` or `hashCode` and so they will become inconsistent with equals.
or specs: https://www.jcp.org/en/jsr/detail?id=14
There is CI in .NET land, every project of average or higher size I was working on had full CI cycle configured. Also, .caproj does support wildcards, Visual Studio just doesn't create them, but correctly reads them. You're downvoted not because .NET lurkers, but because you were wrong in your elaboration. On topic, partial classes are inconvenient, I only saw them when classes were generated from the database and someone wanted to add some logic on this classes.
The answer I needed, thank you!
&gt; I was trying to explain this from publications from organizational theory and organizational behavior when one of the moderators became upset and accused me personally of impiety. Are you *kidding*? I read your original comment as well and it was purely racist targeted at people of two distinct ethnic origins. There was nothing to be misread as you spelled it out in very plain straight words. Don't play the "I'm the victim of a misunderstanding" card now. You made a *verbatim racist statement* and got called out on it - to the point that you were close to get banned. All that you wrote above about the mod misunderstanding you is *plain lies*. You hadn't produced *any academic evidence* as you claim, you just had really heavy racist statements. You have zero right to claim that the mod is upon you. **You** are in the wrong.
thanks for pointing it out.
Nah, 99% of the time people will use the arrow form so fallthrough won't be possible, and the rest of the time the break actually has a significant purpose so it will be a lot more difficult to forget it. I think this is actually one of those times that most people see almost any change as a mistake regardless but once they're used to it they may feel differently. Personally I think it's a pretty elegant and subtle modification of the existing switch form.
[@jeffreymaxwell's latest tweet](https://i.imgur.com/oor6P1b.jpg) [@jeffreymaxwell on Twitter](https://twitter.com/jeffreymaxwell) - ^I ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
&gt; partial classes are inconvenient and additionally the worst language feature ever invented. 
 &gt;Create a project in Visual Studio and add some files then examine the .csproj file. You'll notice there are no wildcards. You need to spell out each individual file used. Part of the reason for that is the compiler needs to know where the partial types bits and pieces are all defined. The csproj format predates support for partial classes. &gt;Unlike in a Java project file, this file changes frequently as devs add/remove/rename files and often has conflicts breaking the project. Ever wonder why you don't hear about CI very much in .net land? It's kind of hard when commits cause project conflicts - breaking the build. CI is ubiquitous in .Net land. You sound like someone that hasn’t spent much time there. 
**/r/javahelp** Yes. The precision of `double` is limited compared to `BigDecimal`. As soon as you perform the first conversion `BigDecimal` to `double`, some loss of precision will take place.
&gt; The csproj format predates support for partial classes. Not really. Partial types were a hidden feature in VB to support the UI designers. &gt;CI is ubiquitous in .Net land. You sound like someone that hasn’t spent much time there. Unfortunately I spend too much time there. Too much time fixing CI breaking issues.
Yes. From the Javadoc: doubleValue(): Converts this BigDecimal to a double. This conversion is similar to the narrowing primitive conversion from double to float as defined in section 5.1.3 of The Java™ Language Specification: if this BigDecimal has too great a magnitude represent as a double, it will be converted to Double.NEGATIVE_INFINITY or Double.POSITIVE_INFINITY as appropriate. Note that even when the return value is finite, *this conversion can lose information about the precision of the BigDecimal value*.
Debugging those is sure going to be much more fun!
Very late response, but they stopped giving myJRebel licenses, so if you didn't get the license before, you will need to pay for a JRebel license.
The model is based around sending / receiving async messages, which I assumed you want to do. I made a simple example: * [SimpleProcessor](https://pastebin.com/S9ewXvYM): `Processor`s are `Subscriber`and `Publisher` at the same time. When it receives a message, it will print it and 1 second later send a message to all its own subscriptions. * [SimpleSubscription](https://pastebin.com/ivySeXT4): A simple subscription implementation that counds requests and passes along messages * [Main](https://pastebin.com/spp75ZeR): Starter, creates 2 processors and connects them / wires them up 
CompletableFuture enable you to do async programming but they are kind of low level. They lack features and properties that you may soon need when dealing with such a system. Such as proper error handling, merging / combining Futures, too many incoming Futures so the receivers can't handle them in time, broadcasting etc. Also the using Futures means hard-coding the dependencies.
Reactor seems to be useful and useabke., It's just the java 9 reactive streams that seem rather limited.
It really depends what you are doing whether or not you will see any performance gains. However, you code will definitely be harder to write, read, and debug. Theres also a high chance your code will not perform any better and a reasonably high chance it will perform slower. If you are doing it just to do it and don't know how / why it might help its probably going to hurt you. I would first evaluate why you think it could be helpful then weigh the cost of making the code more difficult to read / write / debug. It's probably not worth it.
I ma not sura that the goal of futures is performance. Futures lead to code that looks like sequential code and avoid the awfull conccurent common memory part that you need with Threads. I have no idea about the performance nowadays. OSes become to propose Futures not implemented with Threads but with low level asynchronous call. Futures simplify 99% of the code using threads, this is why this is certainly a good idea to use thread IMHO 
Correct me if I'm wrong, but aren't labels and variables in separate namespaces? If they are, then how will the compiler disambiguate between a label called x and a variable called x if it encounters `break x;`?
True
So ... how do they deal with `{Double,Float}.NaN`s in switch expressions?
Who said “Maven is dead and Gradle is the future of Java build technology”? Far removed from reality IMO. 
And svn integration is broken on my project entirely after the update until I removed all the old .idea files and re import the project. Fun stuff.
I’m in agreement. I don’t understand what all the hype is about....we get to remove a few words from each local variable now. Really? That was important to have? All of the major IDE’s now have simple key bindings to write it out for you, so unless you’re coding in a non-IDE editor, the problem should not be about having to type more. And even if you are writing it out, I would argue that having to type out Map&lt;String, List&lt;Set&lt;POJO&gt;&gt;&gt; can help enforce better code, such as making sure to reference as the interface rather than the concrete class. I also can’t see any rational argument for ‘var’ that says it’s easier to read. As noted in another response, the only time I can see replacing LHS with var and not degrading readability is in the case of simple construction. When returning from a method, how does no longer having a descriptive declaration make it MORE readable? I’ll take it one step further, how does it not make it less readable? Even in simple construction, Java creating the empty diamond operator switched the generic declaration from both sides to just the LHS, so how does var affect that (perhaps I missed that part of the JEP)? Finally, if you have a method that returns HashMap that returns to a var declaration, how do you go about referring to the interface? Perhaps I missed that as well. 
I read a bit more and I found this: &gt;If a `break` statement with an *Expression* is contained in a labeled statement, where the *Expression* is a simple name (15.14.1) that consists of the same identifier as the label, then a compile-time error occurs. It sound like a breaking change. The following would fail to compile after implementing the proposal as specified: int a = 5; a: switch (1) { case 1: break a; } There's nothing specifying when `break a;` returns a value `a` from a `switch` expression and when `break a;` jumps after the statement labelled `a`. There's a ban on using `break Expression;` inside breakable statements and `break Label;` inside switch expressions, but checking the type of the innermost breakable construct happens only after deciding if the argument for `break` is a label or a variable.
?
Of course. You only need to look at how BigDecimal and Double represent their data to realise this.
It's called spam. domain submitted from|count|% :-|-:|-: [zoftino.com](/search?q=%28and+site%3Azoftino.com+author%3Asrinurp+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|83|81% [medium.com](/search?q=%28and+site%3Amedium.com+author%3Asrinurp+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|7|7% [github.com](/search?q=%28and+site%3Agithub.com+author%3Asrinurp+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|6|6% [self.androiddev](/r/androiddev/search?q=%28and+author%3Asrinurp+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|3|3% [self.Firebase](/r/Firebase/search?q=%28and+author%3Asrinurp+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|1|1% [meta.stackoverflow.com](/search?q=%28and+site%3Ameta.stackoverflow.com+author%3Asrinurp+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|1|1% [square.github.io](/search?q=%28and+site%3Asquare.github.io+author%3Asrinurp+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|1|1% subreddit submitted to|count|% :-|-:|-: [androiddev](/r/androiddev/search?q=author%3Asrinurp&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|56|55% [programming](/r/programming/search?q=author%3Asrinurp&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|29|28% [Firebase](/r/Firebase/search?q=author%3Asrinurp&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|8|8% [learnandroid](/r/learnandroid/search?q=author%3Asrinurp&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|4|4% [java](/r/java/search?q=author%3Asrinurp&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|1% [mAndroidDev](/r/mAndroidDev/search?q=author%3Asrinurp&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|1% [AppDevelopment](/r/AppDevelopment/search?q=author%3Asrinurp&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|1% [GoogleMaps](/r/GoogleMaps/search?q=author%3Asrinurp&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|1% [webdev](/r/webdev/search?q=author%3Asrinurp&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|1% 
I don't really see the advanatges of enum. If you need a conversion fromint to enum and enum to int then for EACH enum class you will need to define two functions:intValue and enumValue. Each of these functions uses an ugly (and stupid) switch statement. I prefer the good old Constants. 
Switch is considered as a bad pratice because non OOP. So why do we need to work on that?
Obviously yes but you can probably get around that by using Strings. I mean, if you're trying to represent currency, for example, a `12,34` strings will do just fine and it's very simple to achieve. Otherwise you may want to separate the BigDecimal into 2 Integers: before and after the comma. These are just off the top of my head, I'm sure other people must have figured similar scenarios already (on StackOverflow, etc).
But enums allow you to encapsulate a part of constants into a single class, which in turn allows you to see all options that could be seen for that enum. Of course you can use prefix for constants, but personally think that enums have their use.
Oh, so now this sub is comfortable answering people’s programming questions?
Enums are perfect as method parameters. void compress(int compressionType) vs void compress(Compression compression) Which one is clearer to read? 
AFAIK OP needed a primitive. Anyway, if an array is acceptable I'd recommend going with a byte array (unscaledValue -&gt; toByteArray) No reason to work with decimal notation and characters here.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
`switch` will be the foundation for [Pattern Matching](http://openjdk.java.net/jeps/305).
A quote from Goetz on [amber-spec-experts](http://mail.openjdk.java.net/pipermail/amber-spec-observers/2017-December/000258.html): &gt;The challenge is ambiguity; this could be interpreted as a nonlocal break out of an enclosing loop whose label is `x`. But then we realized that if `x` is both a variable and a label, we can just reject this, and tell the user to rename one or the other; since alpha-renaming the label is always source- and binary-compatible, the user has at least one (if not two) reasonable choices to get out of this problem.
`var` is a reserved type name, so statements like `var var = 5;` are still valid.
That will likely need to be a pattern.
I'm having trouble getting IntelliSense support for my Thymeleaf/SpringBoot models. I assume this is possible am I wrong?
Elements of Java Style. Old book, there's probably no revised edition. 
They just provide a common interface, no implementation. It's matching the reactive-streams API (no wonder as it was driven by them). It allows all implementors (RxJava, Akka, ...) to communicate with each other seamlessly.
&gt; My, my, what a pl--n l--r you are. I would like to apologize again for this misunderstanding. I have not made any personal attacks against anyone please refrain from making personal attacks and name calling even if you do like unwholesome words. 
I think I’m missing the high level architecture of how this would work. Statements like “Collection classes can be adapted (at user option) to use new hash codes” and other places where new functionality is “opt in”. Is the idea to put utility APIs into the core class library that can enable different/better implementations of Object::hashCode? Or is the idea to add a new method to Object along with a value based implementation in the Object base class which collections (or anything) could then (be configured to) use instead of hashCode?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Using AES for hashCode, what?
The source code of Java SDK will be a good source too.
Forgot to mention that the only non-primitive type it accepts is String, so I guess that would be a solution.
good job!
Why are you asking this here? Just schedule an appointment with your advisor. I know it can suck, but just get over it.
I did schedule one and I'm going to go. I have a couple reasons I want to do do this. 1) To learn how to interact with web pages 2) General curiousity 3) To just go ahead and secure a spot in the classes I want before going to my meeting. (Main reason)
Either way, this is a better fit for r/javahelp.
you're right thanks 
No problem.
What advantages does Hystrix have?
You should think of this in as a full-duplex network: One channel sends, the other receives. Both sides would have a subscriber and a publisher. The subscriber receives data, does something, then sends the response as a publisher. This of course makes it more complex. But as soon as you do async, you can't have the publisher return something, which is why the return is void. This would be proper decoupling of the actors. And makes it then later also trivial to use a message queue to queue your work and not loose any if the publisher/subscriber is down. IMHO REST any calls where the work can take long should be done like this, but it means that both parties need to know how to "contact" the other side. REST calls can be done like this, or anything else. This just moves to a more agent like behaviour.
I really like improving hash functions in Java, but I feel like it could be done better. What I don't like it's easy to write a bad hash function even with new methods by implementing this as if it was a regular hash code. For instance, this is quietly wrong. @Override long longHashCode() { return Objects.hash(firstName, secondName); } Additionally, the API is not flexible, which means that the object decides whether a hash should be secure or not. It would be better if it was up to an user (for instance, a hash table). I'm also not sure how the user would implement `longHashCode` in practice. A bad implementation is easy to make, but I'm reading this draft and I'm not sure how to implement a good one - I assume it has something to do with `System.primitiveHashCode(Object,Lookup)`, but I don't quite understand how that works. Is there a better way? Turns out, there is. What I would rather prefer is having a method like this in Object. void hash(Hasher hasher) { hasher.write(hashCode()); } What is a `Hasher`? An interface. interface Hasher { void write(long value); // Add some default convenience methods operating on primitive arrays based // on a main one, for instance like default void write(byte[] bytes) { ... } // so that hashing algorithms could be faster with specific types. long getHash(); } How would something like this `hash(Hasher)` function be implemented? Rather straightforwardly, I would say. @Override void hash(Hasher hasher) { firstName.hash(hasher); secondName.hash(hasher); } This would allow classes like `HashMap` retrieve a `Hasher` factory as an argument. This would allow for a choice between a fast and secure algorithm. public HashMap(Supplier&lt;? extends Hasher&gt; hasherFactory); Additionally, a default constructor could use a secure hasher by default. public HashMap() { this(new SecureHasherFactory()); } This avoids the need to provide a boolean argument to a constructor. `HashMap` can safely use the `hash` method without breaking backwards compatibility, as there is no way to accidentally override this method, as `Hasher` is a new interface. If Java would get tuple types, then it would be possible to simplify this implementation like this. @Override void hash(Hasher hasher) { [firstName, secondName].hash(hasher); }
It looks like in your [submission](https://www.reddit.com/r/java/comments/8ceg8q/help_fixing_my_code_totally_clueless_but_also/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
When you're doing something that has been standard for a long time, there's a good chance the compiler has found a way to optimize it. ***** ^^Hi! ^^I'm ^^a ^^bot ^^that ^^tries ^^to ^^make ^^relevant ^^comments ^^for ^^your ^^entertainment ^^[[info]](https://www.reddit.com/r/WutbotPosts/). ^^If ^^I ^^messed ^^up, ^^let ^^me ^^know ^^by ^^replying ^^with ^^"wut"
[removed]
Honestly, this is not clear. In both cases I need to look at the doc of the function to undertand. The advanatge of enum is not that i is clearer, it is that it prevents from bad uses. For instance, I can call the first one with -2 or +5 even if there are not valid values. Enum can prevent that
the author's preferred solution as he states in the comments is to just make the getter method return a new ArrayList of the private one to the class. that encapsulates the list so it's not modifiable anymore but to me it makes more sense to just return an unmodifiable collection
It's hilarious how before deleting his comment the guy said that none of what I said is applicable - he even went as far to say it's impossible to separate a BigDecimal into two `long`s. How the fuck does he think BigDecimals work in the first place? Dark magic? This is one guy that absolutely shouldn't be handing out advice on r/java.
You really shoot yourself in the foot and show yourself up. If you're widening it to .NET it makes your point even more ludicrous. Not only is C# a valid and common language for .NET development, but also there are other options including C++, which is easily capable of doing anything Java Does, both abstractly and by definition. .NET on it's own is like a lung or other organ without a body. Comparing it with Java is like saying. Your lungs aren't as good as Usain bolt. It only highlights how remedial you are.
Mostly the sheer amount and quality of libraries and frameworks available, also performance, platform independence/deployment, embedded systems, inter-op with other JVM languages, android, plus not having every single feature can be a good thing sometimes, I'm personally glad there is no operator overloading in Java for example.
Have you seen any of the real world apps developed in a big company? The last thing you want is another chaos monkey on a project! It's already a chaos. Staying close to the cause though: spend your time on writing additional tests that cover your fall back, replication, etc. cases, don't leave it up to the chaos monkey to uncover the flaws. Chaos monkey should be a last step and like 1% of the total unit + integration + other testing.
&gt; All statements or all expressions. This seems like a really simple rule, but it has other consequences. If you have a situation where the one of the expression's values needs to be computed with a statement, then it means you can't do something like this: topping = switch (food) { case BURGER -&gt; KETCHUP; case SAUSAGE, ASPARAGUS -&gt; MUSTARD; case ICE_CREAM -&gt; FUDGE; case BAKED_POTATO: Toppings t = new Toppings(); t.add(BACON); t.add(SOUR_CREAM); t.add(CHEESE); t.add(BACON); // not a typo break t; default -&gt; NOTHING; } http://mail.openjdk.java.net/pipermail/amber-dev/2018-April/002981.html 
If the implementation works like this, then it's fine. My complaint is simply that I don't think the proposal specifies such behaviour. 
It's Java in the browser (applets) that was the massive security concern. The language itself is as secure as you make it when writing your applications. ***** ^^Hi! ^^I'm ^^a ^^bot ^^that ^^tries ^^to ^^make ^^relevant ^^comments ^^for ^^your ^^entertainment ^^[[info]](https://www.reddit.com/r/WutbotPosts/). ^^If ^^I ^^messed ^^up, ^^let ^^me ^^know ^^by ^^replying ^^with ^^"wut"
I think you're being downvoted because your style is abrasive and based on unchained speculation. I think partials are unnecessary in Java and after hearing you argue *against* them, I'm finding myself thinking "Jesus, the only argument against is that weak, maybe I want partials".
Build a project using your tech choices yourself. Don't be done of those devs that just read about buzz words then throw them around. Try it out yourself.
From the author's website: http://www.sarmaroof.com/java-puzzle-28-improving-encapsulation/ &gt; Replace the statement at line 27: return fruits; with the following statement return new ArrayList(fruits); As you mention this is not ideal. You're creating a new object and array, and copying everything from the old one into the new one. If it's a very long list that is not very efficient.Rreturning an 'Collections.unmodifiableList()` wrapped version would be better. &gt; You can also return a clone of the ArrayList as follows. return (ArrayList&lt;String&gt;) fruits.clone(); I'd be very wary of using `Objects.clone()`. In this case, `ArrayList.clone()` only provides a shallow copy. In which case, returning an 'Collections.unmodifiableList()` wrapped version would be better. But for most situations I would avoid `clone()` unless you know what your classes do. Does it do a deep or a shallow copy? I honestly don't trust many people to implement *and* document `clone()` correctly. If the objects are in a list are immutable (as `String` is) then a shallow copy is fine. For mutable objects, you may or may not want a shallow copy, which means making sure a deep copy happens. Hopefully the class implements `clone()` properly or provides a `copyOf()` or copy constructor. Basically it's difficult to answer exactly what is the right thing to do in every situation. 
Current spec draft says this regarding the expression form of the break statement: &gt; If there is no immediately enclosing switch expression for a break statement with an Expression, a compile-time error occurs. Thus if there is a break statement with an identifier, and there's no enclosing switch expression, that identifier must be a label. Admittedly this is an implication, and it would probably be better if it were more explicit. But this is just a spec draft, after all. 
Although the structure isn’t great as mentioned in the blog post I think he forgot to mention you *could* also use ImportAutoConfiguration. Ideally the structure would be changed but at least autoconfiguration avoids most of the code changes. 
This is an additional layer on top of unit tests and integration tests. There are too many scenarios that are difficult to simulate in integration/unit tests piecemeal. Additionally there is a tendency to assume core infrastructure will " always be there working," and it is good practice to challenge underlying assumptions to make sure the code fails or handles failure in a way that is both intended and graceful.
When developing software, you generally want to pick the simplest and cleanest solution to a problem. In many cases, that ends up meaning to avoid asynchronous programming with futures/callbacks unless there is a reason to do so, such as performances requirements that make doing so advantagious. Obviously, doing so adds complexity, so I recommend only doing so if performance really requires it. 
* ask what version of java your company is using * ask if they're using publicly posted java coding guidelines * ask what webservices and testing frameworks they're using. It's probably already heavily predetermined. If not, trying picking coding guidelines from a tech company like google, look at popular github and MVN packages ( https://mvnrepository.com/popular ), use a message queue or grpc for message passing, avoid using threads and write services.
As an aspiring programmer, your suggestion helps me too. Thank you.
Credit goes to u/therealdnvega who recently created this state of play diagram. https://coggle.it/diagram/WqgTTNMJtPiHph_q/t/java-development-in-2018 
Even though I've used Scala for the past 2 years, I'm still interested in Effective Java 3rd Edition, since the 2nd was so good. Why not start with that as a refresher?
Thanks for sharing this!
Thanks for the reply, I’ve gone through that book - definitely a good resource !
Why avoid using threads?
Sorry, telling people not to use threads is just stupid. When your workload is strictly IO-bound using processes instead of threads is just wasting your precious system resources.
New book coming out this summer Modern Java. Which covers up to java 10 I believe. For Core Java it should be good based on the feedback the author had for his java 8 book. 
Firstly just ask company about internal guidelines, frameworks and principles. Then review some external stuff. Here are few links from my bookmarks: * Google Coding Guide for Java: [https://google.github.io/styleguide/javaguide.html](https://google.github.io/styleguide/javaguide.html) * Very good page with some best practices: [https://github.com/cxxr/better\-java](https://github.com/cxxr/better-java) * Structured\(!\) List of popular frameworks and libs: * [https://github.com/akullpp/awesome\-java](https://github.com/akullpp/awesome-java) * [https://github.com/Vedenin/useful\-java\-links](https://github.com/Vedenin/useful-java-links)
Yes, there are good reasons to use threads sometimes. I usually say avoid using threading as a rule of thumb to my team. If your process crashed, and you were using 40 cores on some IO bound task, what is the state of the files you were currently writing? If it's only one process that crashes, what your program was currently doing at the time of crash is more deterministic, and code is usually much cleaner, readable, editable than when things get non-trivial in multi-threaded code. How much does it cost to create 1 process per core? Maybe it is not so excessive. I'm not telling people not to use threads, but at least ask if it's really necessary.
don't use java 10 in production
why not java 10 in prod?
I would go with doc first and auto-generate the code. For me the biggest benefit is that changing the API becomes a more conscious effort and I've found that it reduces the risk of someone accidentally making backwards incompatible changes by mistake
First, thanks for downvoting because you disagree, you could have argued. Don't use J10 in prod because it has not been released for a month yet, it is not the most stable version and should OP have to look for documentation he won't find as many as in earlier version of Java. Maybe the hosting provider does not support J10. And we can sefely bet on the fact that OP will not use J10 new features.
You're trying selling J10 to me which is not necessary. OP is just starting with Java, modules will make the task more difficult for him, so J10 is a bad idea. He probably won't use any of the other features you mentionned, which is why I would advise he does not use Java 10. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I did not downote :) Thanks for sharing your reasons!
&gt; It's now docker aware, some additional features Most of that has been back-ported to 8 already. 
&gt; Immutability may have a performance cost because completely new object needs to be created as opposed to updating an existing object in place. Immutable object should not be linked with the concept of updating. There is no need of updating, otherwise this is just a mess, because you work only by copying and so it means that you could need to have the copy chain. Roughtly, if you need to "update" the object at a moment: don't use them before rethinking your architecture So, immutable objects is a nice concept for some specific cases, but it cannot be used all the time. 
Thanks !!
Honestly this sounds like just reinventing Erlang (or Elixir)...
I have never understood the point of using multiple modules like that. It is silly and creates complication where none is needed. Just use packages internally in your project. If you are creating a library from other users out of a subset of your project's classes then just use Java 9 modules. There is no need to create maven modules (or sub-projects in Gradle parlance). People just need to stop with this multi-module/sub-project garbage. The reason this even came about is because maven has had this horrible ~~bug~~ ~~feature~~ ~~bug~~ ~~feature~~ ~~bug~~ deisgn flaw since the day it came out that you can only have one artifact per pom file. This has created a generation of horrible multi-module projects.
why did you remove it ?
The "better java" link is not so great, the information in it seems quite dated.
I usually don't post to /r/java about Javalin, so I thought I'd do a very quick recap of what's new since version 1.0.0 was released last year: * Async requests. If you set a future result (`ctx.result(future)`) Javalin will switch into async mode and resolve your request outside of the server's ThreadPool. * WebSocket has been improved a lot. A fat session has been added, and declaration now supports path params. * Support for custom jetty-handlers (such as `StatisticsHandler` and `RequestLogHandler`) has been introduced. * A lot of new configuration options have been added (enableDynamicGzip, enableCorsForOrigin, defaultContentType, defaultCharacterEncoding, maxBodySizeForRequestCache). * You can easily map multiple static file locations now. * An automatically generated route-overview can be rendered and served on a path of your choosing. * Uploads no longer require apache file-uploads. * And a lot more, check https://javalin.io/news for details
Or really just use multithreading where it adds value and, when doing so, do it properly... Proper thread synchronization for shared data, try-with-resource statements to prevent leaking resources, timeouts/circuit breakers/bulk heads, libraries/frameworks like rxjava where appropriate to avoid reinventing the wheel... 
Its helpful tutorial , so please see you..
I'm not sure I follow. While you can't literally update an immutable object (since that would make a mutable), "withers" do a pretty nice job of replacing "setters" in almost all circumstances and will let you get a modified copy of the original. And with structural sharing, there's little to no cost.
Mandatory plug for [Immutables](https://immutables.github.io/) - an annotation-driven code generator for immutable objects. You just annotate an interface or abstract class with abstract accessor methods and get an autogenerated immutable implementation class complete with a builder, "withers" (basically immutable setters), and out-of-the-box Jackson integration. Check it out, the documentation is really great and should make the value proposition clear. And as noted, this isn't Lombok's weird bytecode hacking - you get a generated class that you can inspect and is defined in simple Java.
That's not in the current proposal. But what I think you're saying is that if the proposal were modified to disallow mixing of statements and expressions, the inability to mix statements into an expression switch could be mitigated by allowing a block with a return statement (a "block expression"). This has already been discussed: http://mail.openjdk.java.net/pipermail/amber-spec-observers/2018-April/000584.html (Search for "block expression".) The summary is that either a block expression is an ad-hoc construct limited to switch statements, or allow blocks to be expressions in general. Brian Goetz ruled out these paths. You might disagree, but before you do, you should analyze the impact of, for example, allowing any block to be an expression.
&gt; The object class must not have any mutable methods like setters. Almost. They can, but they should return a new object with the new value. The date addition methods in `LocalDateTime` etc or `String.toLowerCase()` are examplea. They shouldn't modify the object you call the method on.
* All of the new Java 8 stuff (lambdas, Optional, default interface methods) * Application servers (Tomcat, JBoss, etc) are giving way to deployable jars and "batteries included frameworks" (Spring Boot, Dropwizard) * JavaFX on the client side * If you were doing exclusively client side work, you may need to brush up on things like Docker, Kafka (too many backend techs to list) * Gradle is a lot more popular nowadays (though Maven is still king)
I don't think they want to use AES, but some of its [optimized low-level instructions](https://en.wikipedia.org/wiki/AES_instruction_set#See_also) for doing some calculations (multiplications, etc).
Using IIS is a core fundamental for Java programming in 2018?
On the topic of books \- Effective Java v3 came out recently, covering up through Java 9.
As many have stated, find out what the company uses and bone up from there: * Their coding guidelines * The libraries they use * The version of java they use * The frameworks they use (IoC, Testing, Mocking, etc..) * The version control software they use * The CI/build framework they use Good luck. 
Item 47 of Effective Java (3rd ed.) is dedicated to why you should prefer to return a `Collection` to a `Stream`. In particular, because `Stream` does not implement `Iterable` (despite implementing `Iterator&lt;T&gt; iterator()`).
Interestingly enough, when the question of returning a `Collection` or a `Stream` was brought up on StackOverflow, Brian Goetz [answered](https://stackoverflow.com/a/24679745) as follows: &gt; So I would say that most of the time, Stream is the right answer -- it is more flexible, it doesn't impose usually-unnecessary materialization costs, and can be easily turned into the Collection of your choice if needed. But sometimes, you may have to return a Collection (say, due to strong consistency requirements), or you may want to return Collection because you know how the user will be using it and know this is the most convenient thing for them.
GC is more efficient when the heap is larger. By moving everything into separate processes you are losing out on a lot of performance benefits. It also makes it much harder to plan system and resource allocation. Just my two cents. I don't think you should use raw threads, but I think it is wise to use abstractions like Reactive streams, Completable Futures, and even thread pools. It takes a lot to crash a JVM and while it is possible, I would really consider it a major code flaw if you've designed a system that is so fragile it can't handle individual threads crashing.
As Goetz said: &gt;”it depends”
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
How, exactly, is this helpful? It seems like it just lists all of the possible options. 
He only lists a single case where returning a `Collection` is preferable. Given that Josh Bloch does say to always prefer returning a `Collection`, it seems that there really is a conflict here.
FWIW, I'm with Brian Goetz. Bloch's advice on why you should return a `Collection` struck me a pretty incoherent - IIRC he says it's because you can't iterate directly over a `Stream` in a for loop but can iterate over a `Collection`, forcing you to choose the latter over the former. But he totally ignores the existence of a common `forEach` method on both types that allows you to iterate over both in the same way. Brian Goetz's reasoning, on the other hand, seems solid. Combine that with the fact that `Stream`s are way nicer to use, and I consider it an obvious choice (excepting the unusual corner cases called out in your link).
The forEach can't deal with checked Exceptions, however, which I find highly limiting, especially if the application has to do a lot of IO
How do you use a stream in an enhanced for loop? How do you use a collection? Which would you rather use?
Just wrap it in java.io.UncheckedIOException and be done with it.
- enhanced for is much more flexible than forEach - exceptions, mutable variables, proper order guarantees. You *can* do enhanced for on streams but it's ugly. - Streams can be parallel or sequential so you have to account for both even though parallel is rarely useful - Streams lead to odd stack traces because they're lazy. You can also leak state "by accident" this way - stuff will not get evaluated when you think it will - Streams can only be iterated once. This is a bad thing if you're trying to reduce mutability in your code imho, it's almost never a good idea to make streams cross method boundaries (by returning them for example). You can always go from collection to stream with `.stream()` if you want the succinct operations, while the inverse is less nice. Collections also have semantics that are just saner by default.
I mean, you could do this: Customer c = new Customer(); for(String customer : c.getCustomers().collect(Collectors.toList()) { } If you absolutely don't want to do this: Customer c = new Customer(); c.getCustomers().forEach(c -&gt; { }); The problem with the first approach is that you are unnecessarily materializing a new collection, while with the second approach the same underlying collection is being used. Since I prefer streams to ordinary collections, personally I prefer using `forEach`. So, obviously I prefer Brian Goetz's advice: it depends.
 Customer c = new Customer(); for(String customer : (Iterable&lt;Customer&gt;)c.getCustomers()::iterator) { } is far more efficient. Still less useable than: Customer c = new Customer(); for(String customer : c.getCustomers()) { } 
You're right, `iterator` is just a terminal operation. My point was that it is possible to use streams with an enhanced for loop. Furthermore, I was pointing out that I found it interesting that Brian Goetz and Josh Bloch clearly have opposing points of view, and Brian Goetz's advice seems better overall: it depends.
coroutines? 
&gt; My point was that it is possible to use streams with an enhanced for loop. Yes, it's possible, but it's uglier and harder to get right. Converting a collection to a stream is much easier than the other way around. And as other people have pointed out, `forEach` can't handle checked exceptions.
While I think B. Goetz arguments all make sense and there's not much point in refuting them... I find myself preferring collections most of the time. The reason is that once you start turning all your stuff into streams it pretty much breaks your debugging experience. There's just no way you can step through streams code and really understand that way where it goes wrong. If you never make any mistakes in your code and so you never have any bugs then this doesn't matter. And then B.Goetz arguments tell you that, most likely you want to use streams. However if you think about how easy it is to write and debug the code in the first place then I find the simplicity of materialized collections a lot more pleasant to deal with. So I've made it rule to myself that using streams is only done on a case-by-case basis. And there has to be a good enough reason for the specific case, to be worth the penalty you are going to be taking in the debuggability of your code.
I guess it's useful for resume padding.
&gt; Yes, it's possible, but it's uglier and harder to get right. Uglier yes, but hard to get right? The Stream API and the Collections API are easily convertible to/from one another. &gt; And as other people have pointed out, forEach can't handle checked exceptions. If you're using streams, you're likely not using checked exceptions. &gt; I wouldn't say "never return a Stream", but I wouldn't favour it over a collection. I think it depends on the code base. For standard Java code base not heavily using Java 8 features, I wouldn't return `Stream` either. But, if you're already using streams, then why not? That's why I think Goetz's advice is better in general. It depends.
&gt; the fact that Streams are way nicer to use Well... that depends. Nicer in what way? Certainly not when it comes to stepping through your code with a debugger. Or understanding those stacktraces when your code throws an exception. Those kinds of things, to me, make streams rather unnatractive to use.
Are you asking if we'll implement something specific for Kotlin coroutines? It's unlikely - interoperability between Java and Kotlin is a key goal of the project, there shouldn't be one way of doing things in Java and another way of doing them in Kotlin. If you were wondering about the implementation, this feature was coroutine based at one point, but we eventually decided against it. Partly because IntelliJ was crashing hard when compiling the code, but mainly because we simplified the feature.
Question. How did javalin keep it's name without oracle having a cry. Javaslang had to change... 
You have to be careful with your point of view, because the risk is to transfer computation into memory. Why do you need to modify a part of an immutable object? That's the mainq uestion
I don't get why streams are nicer than collections since collections can become streams by just typing .stream(). Seems irrelevant. The real question is what is the right kind of contract to have between components of your software - ie - what gives you the most loosely coupled code. 
This is how you should convert a `Stream` to an `Iterable`: for (User user: (Iterable&lt;User&gt;)userManager.getUsers()::iterator){ } You should not do: for (User user: userManager.getUsers().collect(toList())){ } because this creates a new ArrayList (as of Java 10). Returning a collection is still nicer: for (User user: userManager.getUsers()){ } Of course, this could have been avoided by having `BaseStream` implement `Iterable` itself. It even defines the sole abstract method of Iterable.
Javaslang had to change because they wanted to apply for a trademark, we have no intention of doing that. Also, `JavaSlang` is a compound word (`Java`, `slang`), while `Javalin` is a pun on the word `Javelin`, so I'm guessing that makes a difference. From reading Oracle's trademark pages, their main goal seems to be to prevent people from mistaking projects/products as created/endorsed by Oracle, and I think there's a lot less chance of that happening with `Javalin` compared to `JavaSlang` (they have similar concepts such as `JavaOne`)
Just to your point about debugging, IDEA has a nice [stream debugger](https://plugins.jetbrains.com/plugin/9696-java-stream-debugger). However, I still think returning a Collection is generally a safer bet because in a way, they are harder to mess with. If you have an immutable List, to make it mutable, you have to deliberately create a new list and add all the elements to it. With a stream, it's easy for a method to, for instance, erroneously call `#distinct()` on it.
I'm glad, the HTTP Client has been very useful so far.
What features do you need/want that git doesn’t provide? I highly, highly recommend learning git if you haven’t. It is by far the dominant SCM system in both industry and academia - anything else, especially proprietary systems, are going to be niche at best. 
You can always go from a Stream to your favorite collection in one line. &gt; "So the question is, which is more useful to your callers" It's not that simple. Even if you decide "a collection" you still need to decide which one. If you return an ArrayList, and they wanted a Map, or you return a Map, but mapped based on a key they weren't interested in, you've wasted cycles. I've used Streams quite heavily in the past and never had an issue, other than occasionally needing to educate my coworkers on basic Java-8.
Josh
I read it. There will be new things regardless. Turning `break` into a special-purpose return keyword is just bizarre. Well, there's nothing I can do about it of course. People have complained bitterly. People complained about Jigsaw too but it still is what it is. History will show whether it was a good decision or not to do switch this way. My belief is that it isn't.
once you have async it's pretty trivial to add a coroutine bridge. eg, check out [this spring app calling my async database](https://github.com/db4j/db4j/blob/master/demos/demo-spring/src/main/java/tutorial/SpringChat.java) - the defer method is 2/3 of the way down this is using [my fork of kilim](https://github.com/nqzero/kilim) but i believe quasar/comsat works the same way 
The 3rd edition of Effective Java ...
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
"you've wasted cycles" is not a great argument for stream of all things :D
The main problem I have with Streams is that once they're closed, you can't use them any more and I don't like trusting client code receiving them to not do so. public Stream&lt;String&gt; getStream() { return Stream.of("a", "b", "c"); } public String naiveClient() { Stream&lt;String&gt; stream = getStream(); log(stream); return stream.collect(Collectors.joining()); } public void log(Stream&lt;String&gt; stream) { stream.forEach(System.out::println); } The `log` would be in another class obviously, but the `naiveClient` does have to rely on it not closing the Stream. That leaves using `peek()` pretty much, so `naiveClient` effectively relies on an implementation detail of `log`.
I am also going to start with Weka. Would love some feedbacks for Weka.
&gt; Goetz's advice to use a Stream because the source might be infinite sounds like a very specific usage case. You make it sound like he said *"you should use stream because the result might be infinite"*, which is clearly ridiculous, when he actually said *"if the result might be infinite then you have to use stream"*, which is perfectly reasonable.
Reading over the comments and doing a bit of research - It seems there's no advantage over using one or the other. I'd personally say return a collection and let the caller decide whether they want a stream or not. This will allow for pretty standard Java style APIness feeling which most users prefer.
From the example: var a: String = "abc" // non-null reference by default a = null // compile time error! How would this work if you are reading a field from a database? It can't compile time then. 
...what's wrong with Git?
I think you have to write: var a: String? = "abc" You have to use the '?' to indicate a nullable variable.
Sure, by itself, it's not a strong argument, but you ignored the more important point I stated right after: &gt; If you return a Stream instead, you let your consumer decide what collection they want (if any) 
It seems like choosing one or the other should be based on use case. If you expect a finite-length amount of elements, use a collection - otherwise use a stream. If you really don't know and you're writing the method which is returning, you probably have a design problem.
You can also lateinit var a: String Which tells the compilier "it's null at compiletime, but trust me, by the time I use it at runtime, it won't be null anymore"
&gt; It can't compile time then. Of course you can: var a: String = rs.getString("db_field"); The problem is that Java platform types don't advertise nullabilty (every non-primitive value returning method can return null) and similarly, there is no way to know at compile time that a DB column is nullable. However, if you assign a platform return value to a non-nullable Kotlin type, Kotlin will insert a null-check, so at least the program will fail at the point where you tried to load a null into a value that cannot have null. Not as good as a compile time check, but better than a runtime failure at some random place.
Put-everything-into-one-box guy detected. Not even worse to argue.
In C# the way it works is the non-nullable types are incompatible so you'd get a compile time error for incompatible types. That forces the developer to handle it at the source. string? s = rs.getString("db_field"); // compile time incompatible types vs something like: string? s = rs.getString("db_field") ?? ""; 
The problem I have is that the article has not told us why Maven is better in the points mentioned. ***** ^^Hi! ^^I'm ^^a ^^bot ^^that ^^tries ^^to ^^make ^^relevant ^^comments ^^for ^^your ^^entertainment ^^[[info]](https://www.reddit.com/r/WutbotPosts/). ^^If ^^I ^^messed ^^up, ^^let ^^me ^^know ^^by ^^replying ^^with ^^"wut"
I'm currently using this for a service that requires HTTP/2. Can't wait for them to push this into the betas. Running incubator code is annoying in JDK9+ (having to include `--add-modules jdk.incubator.httpclient` to everything) I'm quite happy to run my code on the 11 beta, as then it will be a drop in upgrade to 11 actual, instead of a code change from 10 stable to 11 stable. Does anyone know if "Release 11" means it will drop in the 11th beta? (found here http://jdk.java.net/11/ currently beta9)
From this list all I can say is: meh. The only reason I'd choose Kotlin over java would be if I have to (that is, there is some library/platform/framework out there that I need to use that only works with Kotlin). Is not a bad language, far from it. Is just ... not compelling enough to switch. It is ... meh.
I do JavaEE development on a daily basis and did not have many issues with NPEs. When developing I avoid and test for it in my tests. So I am not sure why it is such a big issue. But I am looking forward to Optional being more a standard approach since beginners seem to have many issues with NPEs. I also looked at Kotlin a few weeks ago, and while I like some of its features, I don't see a reason to replace Java with it. 🤷 Also using good tools helps a lot, so the boilerplate code is there, it is obvious what is happening and your IDE does the work for you.
For 7 it can be quite helpful for writing some own loop like structures. A simple example for a parallel for loop: // also wraps verbose java parallel stream api fun parallelFor(range: IntProgression, op: (Int) -&gt; Unit) = range.toList().stream().parallel().forEach(op) It takes a range and a lambda and executes it in parallel //prints 0 to 9 in parallel/random order parallelFor (0 until 10) { i -&gt; println(i) } //prints all even numbers from 0 to 18 in parallel/random order parallelFor (0 until 20 skip 2) { i -&gt; println(i) } It kinda looks like a for loop except that the i is at the end, but try making that with Java-Streams in a readable way.
Hmm... It's seems to be an useless feature. Why use lateint instead of '?' ? By the way, I'm rarely facing problems with NPEs.
If you use ? you have to check for null. From the Kotlin docs: &gt; Normally, properties declared as having a non-null type must be initialized in the constructor. However, fairly often this is not convenient. For example, properties can be initialized through dependency injection, or in the setup method of a unit test. In this case, you cannot supply a non-null initializer in the constructor, but you still want to avoid null checks when referencing the property inside the body of a class.
Exactly, and as a general rule in software development, you tend to prioritize simplicity/maintainability over performance except when doing so compromises performance to a level that it impacts your use case. 
If your database has constraints in place and enabled you can use non null properties to represent the columns safely. Otherwise it is an error and should indeed throw an npe
It will be standardized in JDK 11, but will most likely be added in one of the coming ea releases.
Build all apps as a monolith guy detected.
You know who needs to read this article? Our managers, i.e. the ones who fund the projects. We as dev'prs have long understood the need for automated tests. It's a hard sell for mgmt and this article is a great way of explaining it.
You have no idea. You should seriously give it a try. You'll lose so much boilerplate code, it's unreal. 
I gave it an honest shot. I'm still not convinced.
yes...
Is there anything that Java does better though? Best I can come up with is multi-catch.
One thing that bugs me about Collection is the fact that it includes mutation methods. I know I can just throw an exception, but that's really ugly.
Thanks for the compliment! I definitely agree that getting mgmt buy-in on automated testing is a difficult task. Just keep in mind that change anybody’s opinion, let alone entire organizations, can take a long time so don’t get discouraged if you don’t see change happening as fast as you like!
Do I need to point out that `string?` is illegal in C# because `Nullable&lt;T&gt;` only works on value types?
Gluon puts out a version of Scene Builder that can be used, and you just have to Refresh the fxml file after changes. 
My point is that in the question's context, we can be pretty sure a list of players on a team is _not_ infinite (or even that large), so many of Goetz's reasons to prefer `Stream`, which have to do with the size of the data, aren't at all useful.
Java compile so much faster than kotlin on huge project. Mocking in java is easier than kotlin 
Well yes, Lombok is one way to get one of the best features of Kotlin. But it's still just one. 
It is pretty good. You can filter/manipulate your data in it and get some visualization. 
Yep, totally agree. It's a cultural change.
So I would be interested in using Graal to run some business logic that exists in some Babelified Javascript in my Java code. Reading the graalvm.org website that seems possible. Am I reading that right? If so is there an example floating around out there on how to do that? Basically the js code runs in a React front end, but in order to not duplicate the work it would be great of we could just use the JS code. It does run in Node which is the route we are going now, but if we could avoid the service call overhead that would be awesome.
Being Targeted to 11 means JDK 11, the next *release* of the JDK. The numbered "ea" things you mentioned are called *builds*. We issue about one per week, typically on Thursdays. Offhand I don't know when the new HTTP client will be integrated into the mainline. It might be as early as today or tomorrow, which means that it might make it into build 10. If not, then it'll surely be in one of the builds in the next week or two.
Features like [records](http://cr.openjdk.java.net/~briangoetz/amber/datum.html) and [pattern matching](http://openjdk.java.net/jeps/305) are coming!
GraalVM includes a node executable that allows you to run any JVM bytecode inside node. The other way round (as you need it) is a bit trickier because an event based system like node is hard to integrate in a system like the JVM. We had some ideas but we are not quite there yet. However, we run a lot of NPM packages with our JavaScript runtime alone, without having Node involved. You could use something like Browserify[1] to get your code into easier to run code and then run on GraalVM using the instructions here [2]. If its a single module then you might not even need Browserify. Here[3] is a compatibility checker to find out whether we support your module. Here is an quick example to get a js function from a script to execute. import java.io.*; import org.graalvm.polyglot.*; class Polyglot { public static void main(String[] args) throws IOException { Context polyglot = Context.newBuilder().build(); Source source = Source.newBuilder("js", new File("yourJSFile.js")).build(); polyglot.eval(source); polyglot.getBindings().getMember("afunction").execute(); } } [1] http://browserify.org/ [2] http://www.graalvm.org/docs/graalvm-as-a-platform/embed/ [3] http://www.graalvm.org/docs/reference-manual/compatibility/ 
You probably want the API for embedding polyglot in Java. http://www.graalvm.org/docs/graalvm-as-a-platform/embed/
My opinion is that JavaEE is starting to collect rust. Oracle officially passed over its development to the Eclipse Foundation and renamed it to EE4J. Nowadays, modern systems build using MVP's (Minimal Viable Products) in which AWS Lambda is by far the best, and supports Java out of the box. Give it a try, you'll fall in love.
You just have to look on the right places, there are toons of documentation available. http://www.graalvm.org/community/publications/ http://www.graalvm.org/community/videos/ https://wiki.openjdk.java.net/display/Graal/Publications+and+Presentations https://www.youtube.com/playlist?list=PLX8CzqL3ArzXJ2EGftrmz4SzS6NRr6p2n&amp;disable_polymer=true Github is not the be all-end all of documentation.
Stoopid question: So my Sys Engineering crew knows little about java, let alone scripting it. So my question is, unless I have a fully keyed in java crew, why wouldn’t I use a scripting language of choice (python/Perl/bash/whatever)
there are lots of libraries which use Optionals, @Nonnull, @Nullable dependencies etc for a reason. with Kotlin this is implemented in all libs by default already.
CoffeScript became irrelevant because it wasn't nothing without the systems language, JavaScript. Likewise with Kotlin, what makes Kotlin useful is the power of the JVM and the libraries written in Java. If Kotlin ever manages to approach 1/3 of JVM deployments, than it actually starts to matter. Currently this is only a possibility on Android. I dislike C, but it is pretty clear to me that in what concerns UNIX like OSes and embedded development of micro-controllers, it is king and it will stay like that until our computing model changes.
1: "We eliminated nulls by gimping the language with increased compile-time safety!" Maybe the example just sucks, but: How do I declare something that could have one of two possible values which are initialized in other scopes, and then reference it after the close of those scopes in the parent scope? 2: Cool I guess, but they're effectively just shortening the intsanceof operator + casting. Cool I guess, but seems like it could have readability concerns. 3: Meh okay I guess that could potentially be useful? 4: I don't like them in C#, and I wouldn't like them in Java 5: I don't know Kotlin none of this makes sense to me. Isn't this supposed to be an article for people who don't already know Kotlin? 6. I will eternally treat this and var as a cancer in whatever language contains them. 7: Okay so it's about fucking time. That's something that's needed to exist for the better part of a decade. I would go further, and say loops should have an optional far-more-simple syntactical structure. Simple loops should be able to be done with something like loop(x: 1-10) or something. That'd be pretty fancy, and would, imo improve readability. While also making the language a bit less intimidating to pick up. 8: I have no idea why or where this would actually be useful. I assume there's some use case I'm not seeing. 9: Scientific code practically demands operator overloading, but that's because they want to do things the wrong way. Operator overloading is a huge mixed bag. It can either improve readability or utterly and entirely destroy it. 10: I'm not sure if this is the worst or best thing I've ever heard exists in any language. This legit is the first thing that's made me want to check out Kotlin. 
I'm gonna be honest Optional seems infinitely preferable throwing compiler-level errors for nulling, or being forced to use weird symbols harming readability. 
For the most part for typical sysadmin / syseng work, I wouldn't imagine that graal provides a strong enough benefit. It's rarely long running or performance critical code. Compiling to binary may be interesting from a perspective of a stand alone, zero dependency binary.
Regarding multi-catch, pattern and smart cast have that covered: try { // Some Code } catch (t: Throwable) { when (t) { is RuntimeException -&gt; println("runtime: $t") is Exception -&gt; println("checked exception: $t") is SQLException -&gt; println("sql code: ${t.errorCode}") is Error -&gt; println("Seriously bad: $t") else -&gt; println("I don't know what this is: $t") } } 
Interesting. For the folks who have been poking at this, how does it compare to the Apache HttpClient library? That's what I tend to use for working with HTTP.
What is it about multi-catch you prefer? IMHO, the pattern matching equivalent provides all the same functionality in a more concise syntax. 
Ok not rest then. Spring mvc backing beans and please provide examples as I'd like to see it implemented in practice. 
I guess the more multi-catch like example would be: try { // Some Code } catch (t: Exception) { when (t) { is SQLException, is IOException -&gt; println("External system failed: $t") else -&gt; throw t } } 
Bad bot.
I'm astounded how you didn't see the giant red box when hovering over SUBMIT TEXT that says: "PLEASE SEEK HELP WITH PROGRAMMING IN /R/JAVAHELP"
"Oh, this looks neat, I guess I'll try it out" "Whoops, guess I need to make an Oracle account. Kind of annoying, but okay." [ಠ_ಠ](https://i.imgur.com/GHZtcYW.png)
Not on mobile/clients.
Scala is so 2014.
You can check this JavaFX tutorial and adapt it. https://www.youtube.com/watch?v=Uj8rPV6JbCE Send us a link when you're finished! 
Had the same issue. Them I found OpenJDK-based version in GitHub: https://github.com/oracle/graal/releases/tag/vm-1.0.0-rc1 Just untar it, set JAVA_HOME and you are good to go.
How did you get the CLI Application "javapackager"? Is there a way to create something like this using Java? I'd like to create a "simple" program which shows a list of the projects created in Eclipse, IntelliJ, NetBeans, etc. on this Computer - After selecting a project, it should ask for the name, an icon and stuff like that, then take the project, do the magic and save a .jar for Linux including the JRE, a .exe for Windows including the JRE, a .app for Mac including the JRE. May anyone help me creating such a thing? Discord: Björn™#3980 
This seems like a non issue to me. Yes, that is a downside of streams, but a stupid client is a stupid client. Any non-novice user of streams knows not to do that. As long as you don’t return a “closed” stream, it’s not your problem as the writer of the API. That’s like saying you shouldn’t return an Iterable because the client might call next without first calling hasNext. 
Any plans on a Windows build? Or is their no hope for us :')
It's part of the Java 9 and 10 JDK.
But the enterprise edition has "Improved performance and smaller footprint"
Thank you. Would you be able to provide me a starting point for such a project please? Or point me to resources such as,
Does it output statically linked binary like Go does? Can it perform cross compilation? If it yes then I don't need to do Go anymore for system tools! 
This is really cool. Excited to see how this is improved upon in future builds.
Guess that’s better than improved footprint and smaller performance?
It’s not a script language replacement per se. Think more about the cli you send out to teams consuming your infrastructure services. Managing cpan or pip dependencies across many machines is tough unless you vendor everything, and at that point you might as well learn (puke) go and just produce a single static binary. Graalvm is more about this arena, but I’m already envisioning the architectural nightmares that will spawn out of this! Job security!
I think you might be proving the point here. YouTube videos are no substitute for documentation, because text is searchable. Try googling for the instructions about building Graal, see how useful that is for someone without experience working on the project already. Maxine is also a terrible choice, but it wouldn't matter if the project published openjdk integrated builds or, god forbid, pre built docker images that could actually be used.
It is great to test multiples algorithms. Yet, for some implementation such as SVM, you might prefer to use libsvm directly for fine-tuning your model. As for deep learning with weka, I didn't test this no package yet. 
With flyer, we may not need a jvm anymore, since it's fully native!
Do you use the last version of Eclipse? It should be 4.7.3.a.
I would start with getting started guide of activeMQ, and then try to design blocks around it to figure out bigger picture on how the system will look like. https://www.youtube.com/watch?v=5m0L0k8ZtEs This video will give you some idea on the overall design and then try to fill in the code in each block of your design.
Damn it, that's going to be a long answer. First off, Kotlin removes more boilerplate than just getters and setters. With Kotlin e.g. you don't need method overloading in most cases because of default parameters. You have to check for null less often and if you do, there is syntactic sugar to make it more concise. You can also skip the builder pattern in many cases just by using named parameters. But even in the cases in which you can get away by letting your IDE generate your boilerplate, be it getters and setters or chained constructors - you and all the people working with that class still have to read that crap. One of the core principles of Clean Code ist that you spend way more time reading code than writing code, so you have to account for that. There's a huge difference in a Java bean and a Kotlin bean. In Kotlin you write max one line per property, whereas in Java you have one line declaration, two lines for getter +setter signatures, two lines getter+setter body, two lines for curly braces and two additional empty lines. And that's just following the official Java coding conventions and you still have to add an equals and hash code method. Also changing something in already generated boilerplate is alway picky and messy. I mean you can delete the generated parts you wanted to change and regenerate them or change it by hand. But then again you could just use something like Lombok or Xtend where you generate Java code from your sourcefiles so changes in your (now much smaller) source files are propagated to your generated code. 
http://www.oracle.com/technetwork/java/javase/cpu-psu-explained-2331472.html 
Thank you. This is exactly what I was looking for.
np - learned something new myself :) 
- 2003: Everyone use Groovy now. Much better - 2004: No, Scala. I meant Scala. Totes Scala - 2011: Ceylon!!! (No one, actually) - 2011: Kotlin all the things, yay! Me sighs.
Don't type annotations offer that? Altho there's no compiler enforcement there. I was actually wondering about type annotations and the new `var` keyword, whether the annotation is also inferred along the inference chain.
Jmx?
Java 10* already has item 6 strictly limited to local variable, any other feature is currently unplanned (someone is in the wish list). Moreover `Optional` does not fix the million dollar mistake * For some reason JVM 9 bytecode is the same of JVM 10 but Java 10 code does not work on JVM 9.
&gt; Java 10* already has item 6 strictly limited to local variable Damn right, and there's a very good reason for that. I'm sure we all know that declaring unnecessarily specific types is bad practice, because it means the implementation can't be swapped out later for other types which implement the same interface. For local types this doesn't really matter, since the only scope affected is the method the variable is declared. It's just an implementation detail. But for return type inference, that choice is propagated out into API, meaning it can never be changed without risking breaking user code. And all the amber stuff is not "unplanned", they've already put a significant amount of engineering effort into it, which they've been very transparent about. Valhalla, even more so. They've invested in it hugely and prototypes are in a surprisingly complete state. As for `Optional`, when Valhalla lands it will be evolved to be a value type, as has always been the plan, and so will not be nullable itself. So yeah in the contexts that it's used it addresses the "billion-dollar mistake" fairly comprehensively. And really, who cares that Java 9 JVM isn't forward compatible with Java 10 bytecode? Regardless, I don't see how it's related to this discussion.
&gt; They've invested in it hugely and prototypes are in a surprisingly complete state. Wow, I am expecting the release date, Valhalla will work for Java and Kotlin! &gt; As for Optional, when Valhalla lands it will be evolved to be a value type, as has always been the plan, and so will not be nullable itself. Yes, but this does not fix the issue, every Java reference is nullable, Java language cannod difine a non-`Optional` reference.
I don't really understand why you linked this, but if it's a question, use eclipse memory analyzer or in visualvm use "find retained size" function and look for large object trees. It's often an investigative work, it will not just tell you.. I'd bet you can get OOE just by runnig apache ab with larger amount of concurrent requests.
This was mentioned in another thread, I think you do this with substrate vm.
No thanks 
Wrong Reddit, see /r/javahelp.
Thx
You could pass the scanner in and wrap all the calls in a try with resources block: try(Scanner scanner = new Scanner(whatever)){ block1(scanner); block2(scanner); block1(scanner); }
Thx :-) gonna try it when i get home
I run quick benchmark on my local, oracle JDK beats graal, did I miss something? $java -version java version "1.8.0_152" Java(TM) SE Runtime Environment (build 1.8.0_152-b16) Java HotSpot(TM) 64-Bit Server VM (build 25.152-b16, mixed mode) $./java -version openjdk version "1.8.0_161" OpenJDK Runtime Environment (build 1.8.0_161-12) GraalVM 1.0.0-rc1 (build 25.71-b01-internal-jvmci-0.42, mixed mode) $java GraalTest 1 (175 ms) 2 (57 ms) 3 (92 ms) 4 (58 ms) 5 (126 ms) 6 (67 ms) 7 (58 ms) 8 (50 ms) 9 (94 ms) total: 0 (907 ms) $./java GraalTest 1 (567 ms) 2 (502 ms) 3 (140 ms) 4 (143 ms) 5 (51 ms) 6 (66 ms) 7 (71 ms) 8 (140 ms) 9 (103 ms) total: 0 (1829 ms) $ 
&gt; Let's bet Java will adopt most of X features within a few years Every Java coder believe it.
Stop using /r/java as a support forum. https://www.reddit.com//r/javahelp https://www.reddit.com/r/learnjava
Oracle to programmers: Hey kids you want candy? I got some in my van.
Thank you
Message queues are great and all, but multi-threaded code is a huge part of server side development. Threads definitely come with a big "here be demons" warning, but if you actually understand concurrent programming and have legitimate needs for parallelization, there's no reason not to use threads. However, designing a much heavier workflow using third party utilities like message queues, while it may be great for some use cases, will not be ideal for all. You're creating a crazy complicated system to avoid using something that is much simpler to do, overall.
Even if Kotlin someday became a dead language (which I doubt will happen), you could trivially transpile your entire codebase back to Java by decompiling the generated bytecode.
If you're just talking about Spring beans in general? If so, then it's as simple as: public class SomeBean { private final Foo foo; @Autowired public SomeBean(final Foo foo) { this.foo = foo; } } If you meant something else by Spring bean, please let me know. And link to documentation where possible, since I'm having some trouble seeing what you're asking for.
The bigger surveys such as those from Oracle, Pivotal, StackOverflow, Eclipse etc are typically allowed. I think it's mostly about smaller surveys from individuals (students), or individual small companies about some specific product of theirs.
You need to use something that runs for a bit longer than that. Graal isn't best for short-running commands - it's designed for big server applications that need to be fast. Graal takes a little longer to compiler, and it's also run as a fourth tier, on top of C1 and C2.
And if you need to you can just use Akka
I don't have any experience with Java EE, but would love to move my career in that direction. Therefore, I'm very interested in the results. Can you tell me where and when (approximately) they will be published? I'll put a reminder in my calendar then.
It depends. We need to be PCI compliant amongst other things, and because of that you only have roughly a 1 month window for migration from version 10 to 11 due to lack of overlapping support. If your update process is heavy (for instance due to other regulatory requirements, like we have), this leaves you a bit less room for error than some people are comfortable with.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
JMS
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
No worries mate. But C++ is not that bad, although I last used it years ago so I don't know what the current versions are like. 
Scala has these and as they became more and more frequently used, the default synchronization around them became troublesome IIRC. Enough so that the next version of Scala won't guarantee synchronized memoization (see [here](http://dotty.epfl.ch/docs/reference/changed/lazy-vals.html)). I wonder what the bytecode will look like for this. Also, this concerns me: "have the compiler rewrite reads of those fields to do a lazy initialization instead" How exactly does that work across JARs? Or is this a JVM change with how GETFIELD works? And how does it affect serialization? If I don't mark the field as transient is it lazily computed on serialization? Or are they transient implicitly? If handling initialization is that tough, I'll jot down a memoized atomic Supplier instead...
Those are some excellent questions. I can address at least one: &gt;Scala has these and as they became more and more frequently used, the default synchronization around them became troublesome IIRC. Like with many of these new features, Java can benefit from taking a hint from Scala in deciding what to do and what not to do. If we're going to have lazy fields, we should do what Scala eventually settled on and avoid making their initialization threadsafe *unless* they are `volatile`.
You only need to worry about this issue if you are having a performance issue in the first place. Streams can be effectively used with Lambda expressions to create internal iterators that leverage parallel performance and multi-core processors. There are many benchmarks online that demonstrate the superior performance of traditional Collection methods. This is because, for most simple operations, the Streams API is way too much overhead for the work it's doing. Streams are only necessary when you are working with extremely large data sets and need to leverage parallel processing, etc. For more information, check out this guide to lambda expressions in java: https://www.stackchief.com/tutorials/The%20Ultimate%20Guide%20to%20Lambda%20Expressions%20in%20Java
You'll want to look at lambda expressions and functional programming as these are becoming increasingly popular in the modern Java world. You can find an in-depth introduction to lambda expression in Java at: https://www.stackchief.com/tutorials/The%20Ultimate%20Guide%20to%20Lambda%20Expressions%20in%20Java If you are looking to get into the big data space, it's important to understand the Hadoop ecosystem as well. 
For those who are too lazy to read the article: * Odd-numbered releases have critical fixes only. * Even-numbered releases include non-critical fixes.
Ok. I'm not usually around this subreddit. I just stumbled upon this and I'm baffled. Is this what I think it is?
I think the plan is to support double and float directly and have behavior equivalent to Double/Float.equals(). That said, it is very dangerous to depend on exactly equality for doubles and floats and I would avoid it.
How is Kotlin not Java compatible?
Nice. JMC is a really good profiler and it's got lots of nice features. I've never used it in production because the license fee for it was exorbitant, but have used it against plenty of applications under production-level traffic and it's fantastic at finding concurrency bottlenecks or other weird issues inside an app.
I love it! This one looks even more promising: http://mail.openjdk.java.net/pipermail/amber-spec-observers/2018-April/000615.html
not a problem if people deploy to openjdk
Why won't this technology gracefully sunset? I hope I never see it again in my life.
Uh hibernate has a caching layer built into it. Outside of that in your code you could try a google LoadingCache from guava collections, and return a CompletableFuture&lt;T&gt; as the value. Last you can use redis with hibernate fairly easily as a second level cache.
We should really be on 9 by then, at least.
Forgive my ignorance, but is it just 8 then? I couldn't find anything on SE 9.
8 to 9 is nontrivial for complex build processes. Oracle should give us more time.
Can someone explain this? 
The new ones have six months' free updates each only. All support for 9 has ended already, and for 10 will end when 11 is released. 11 is LTS, so you can have commercial support for longer, but free updates will stop when 12 comes out...
OpenJDK is fully supported in RHEL. My company is planning to switch to using it going forward to get that long term support.
Is there an official page for this info? 
I know, we still have a product on 7. Customers don't always upgrade when we want them to. Still, they're not saying you can't have SE 8, they're just saying you're not going to get updates to SE 8 (unless you pay) after Jan 2019.
is substratevm part of GraalVM?
LTS public support seems to be officially TBA still: http://www.oracle.com/technetwork/java/eol-135779.html
As noted elsewhere, 9 is already EOL with 10 out. And 10 will EOL when 11 is out. And 11 will stop getting free updates when 12 is out. Every 6 months.
Oracle is shifting to an LTS model, with in-between versions supported for a shorter period of time. The idea is to get faster development of features in to Java, and a chance for new stuff to get their rough edges sorted out by the time the LTS versions come around. If you've got 5 minutes to spare, there's a video explaining precisely why they're switching to this model: https://www.oracle.com/java/java9-screencasts.html?bcid=5582439790001&amp;playerType=single-social&amp;size=events The next LTS, Java 11, comes out in September. http://www.oracle.com/technetwork/java/eol-135779.html I'm curious why this has suddenly popped up here, it was announced a while ago.
Zactly. My point was this announcement by Oracle is really NBD.
If you're like me, when I'm in the "must-7" version working, I see place after place where I want to use streams.
The LTS model is a bit misleading, though, as you have to pay to get the long-term part of it.
Link's dead, Jim.