GUI may be outside the scope of the course. With swing it is not hard, but it does have a slight learning curve. to TS: I would write the program described above using text.
The two lines are not the same. ORing with 0 is pointless. It will catch neighbors[1][2]==0 only when w==0. Edit: Some explanation. Assume w=0: 0000 0000 OR 0000 0000 := 0000 0000 == 0 Assume w=1: 0000 0001 OR 0000 0000 := 0000 0001 == 1 Assume w=7: 0000 0111 OR 0000 0000 := 0000 0111 == 7 OR sets every bit to 1 where one of the bits is 1. ORing with 0 means copying the non-zero value.
K, thanks. So is there any practical way to make something like more shorthand? I feel like I am overlooking something obvious. else if(neighbors[1][0] == w &amp;&amp; neighbors[1][2] != w &amp;&amp; neighbors[0][1] != w &amp;&amp;neighbors[2][1] != w &amp;&amp; neighbors[1][2] != NOTHING &amp;&amp; neighbors[0][1] != NOTHING &amp;&amp;neighbors[2][1] != NOTHING) 
Absolutely! That's exactly where I went too.
These are not the same. The first will pass if `neighbors[1][2] == 0`, since `w|NOTHING == w` (where `NOTHING == 0`).
k thanks. I guess I need to see examples where this bitwise is useful to fully understand it. I was trying to apply it to shorthand something but not really understanding what it does. I just know when I was involved in using SWT they would often pass int's like SWT_BORDER|SWT_SHADOW, but I don't understand how the backend handles that. I will have to research more when I have time. I am kinda understanding it now. I'm assuming each option is a bit that gets flipped, you just have to make sure the options don't collide unless that is your intention.
lol it does fit the very loose rules.
&gt;This code should work for any triangle like this, though it will not be pointy if the row count is odd. This is because the triangle has to be symmetrical. an even number of rows means that there is no single middle row.
I know, I was just *pointing it out*. BA DUM TISH :D
TIL honest feedback is not appreciated
Well, you could do it with no loops. public static void main(String[] args) { printX(""); } public static void printX(String str) { str += "X "; System.out.println(str); if (str.length() &lt;= 6) { printX(str); System.out.println(str); } }
Almost snap: int rows = 7; for (int i = 1; i &lt;= rows; i++) { for (int j = 1, size = Math.min(i, (rows + 1) - i); j &lt;= size; j++) { System.out.print(size == j ? "x\n" : "x "); } }
Unfortunately we have not begun methods yet. We are introduced to them next semester.
I'll upvote, I appreciate the feedback, and if it seems simplistic it's because I'm not quite sure how to incorporate things like arrays.
You can do that when you give your constants values that are powers of two. That enables you to combine multiple flags by ORing them together and then pass the result to code that checks the single bits. SWT_BORDER = 1 = 0000 0001 SWT_SHADOW = 2 = 0000 0010 SWT_BORDER|SWT_SHADOW = 0000 0011 You assign meaning to single bits. Bit operations are also used fort certain algorithms that use an XOR checksum or in algorithms for image manipulation or encryption... 
I really like this solution, at first glance I thought it wouldn't work. Clever.
do you have a section or discussion leader you can run the project by?
We have learned GUI's, I was thinking of a JPanel for the character page.
Thanks for your feedback. I really do like the idea of having portraits, but I haven't learned to incorporate those kinds of things into my programs. However I do have 2 weeks to do it.
&gt; Well, you can cut it down to just the character page you described, for entering aggregated wins and losses. All the other metrics can be derived from those numbers and it would also give you a batch enter mode. This is a really good way to streamline it. Thank you. 
I have a prof, yeah. I already sent her a txt of my outline this afternoon. I haven't heard back yet.
that's the problem with professors. if you had a lab/section/discussion leader, you could ask for feedback. that person is also more likely to be grading your assignments (assuming large class)
I do wish we had an assistant prof. It's not too big a class, and it's online. In any case, I'm grateful for non-classmates feedback.
Can still be done using text. Input Played hero: Input win or loss: And you're done once again, instead of remembering all of those games with which fighters &amp; which of them were losses or wins.
I could do it with text, but keep in mind this is meant to be a final project. The more elegant I can make it, the better.
It's easier than you think. You just load the image and construct a JLabel with an ImageIcon object. Once you have that, you can use it like any other Swing component. Here's an example ([credit](http://stackoverflow.com/a/2706730)): BufferedImage myPicture = ImageIO.read(new File("path-to-file")); JLabel picLabel = new JLabel(new ImageIcon( myPicture )) add( picLabel ) You'd use that code while building your main screen, looped for each portrait, to create all the images. Then you can lay them out and size them however you please. 
I think hirelite address that succinctly with this [tweet](http://twitter.com/#!/Hirelite/status/4270934617751552) : Dear NYC startups, every time a software engineer hears your name from a headhunter, a puppy dies and you lose credibility
Also that same argument is what's pushing the rise in hiring on-site consultants (even if they charge a higher rate) v.s. having an in-house developer. Why have an employee on the books, when you can write the consultant off as a capital expense?
Then by all means, start off with a screen with a picture of every fighter you can click &amp; make a win &amp; lose button, it's as easy as that. You can save your stats in some of kind of textfile if it's too advanced to toy around with a small database. Then you can "generate" some simple reports (calculations &amp; percentages) and make it fancy :)
This guy has the right idea. Arduino doesn't use java, but the arduino language is super easy to pick up if you have a half-decent understanding of any language.
Thanks!
As mentioned by jbacon, take a look at gridBagLayout. Configure the gridbag to make the areas you want, then put panels in each area. So each colored region in your colored image would represent a JPanel, into which you could put whatever you wanted without worrying what is in any other panel.
Okay, first you need to start with parsing the source file. To do this, you will need to have an outline of all the different reserved keywords. When your program reads one of those keywords, it needs to place it in HTML tags that have different background colors. 
how would I do this char by char EDIT: I have my outline of keywords and the html that does the colors.
read the file line by line and compare it to the list of keywords you have then call a method depending what html tag to use
code examples?
You can use it to build a bitmask; i.e. you can store 31 values in an integer. FOO=1 BAH=2 GOAT=4 COW=8 opts=0; opts |= BAH; opts |= COW; if (opts &amp; BAH == BAH) { // do something } 
Not directly related, but any time you want to display the total number of votes, you will need to have the line `totalVotes = yesVotes + noVotes;`. As it appears in this example, the variable `totalVotes` is only assigned once when `yesVotes` and `noVotes` both have the value 0, so `totalVotes` will be 0 until you update the value.
it is essentially a state engine - the different states of the java source file
SwingSet2 demo src.zip includes CodeViewer.java (it's part of the JDK, licensed under BSD license)
This is spot on. Read the file line by line, and do some sort of comparison to see if that line contains a keyword(s). If it has a certain keyword, then you know what kind of HTML tag to wrap around it. EDIT: You're going to have to write it kind of cleverly, since the keywords won't always have a space afterward. For example: for(int i = 0; i &lt; N; i++) You'll notice that you can't split at whitespace, or you'll get some wrong parsing.
The trick hand coding Java GUI is to use a combination of layout managers in conjunction. There are more complex layout managers that can do it all, but these usually require a GUI builder to use properly. 
The easiest way to do this would be in a small method like this one: public void parse(String filename) throws IOException{ Scanner reader = new Scanner(new File(filename)); PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(filename.replace(".java",".html")))); String nextLine; while((nextLine = reader.nextLine())!=null){ String newLine = nextLine.replaceAll("this",",&lt;font color = \"0000FF\"&gt;this&lt;/font&gt;"); //colors all "this" blue out.write(newLine); } } theoretically, you can do String newLine = nextLine.replaceAll("1","2").replaceAll("2","3").replaceAll("3","4"); this will turn the string "abc123" into "abc444" on a side not, you will need to import java.io.*; and import java.util.*; and you need to put your method call in a try{}catch{} statement as it throws an IOException
thanks !!!! can I message you if I have any more questions ?
why message post here i wanna see too even if its something dumb
Do you work in my office?
It seems to hang when it cant find a server or host and just locks up
Yeah, the default `Socket(host, port)` constructor attempts to connect to the remote host with an infinite timeout. He'd have to create the socket, bind, and connect himself to use a different timeout.
 CommentSubmitterFactory.getDefault().getSubmitter("reddit").submit( AbstractCommentFactoryImpl.getDefault().createComment("I agree"));
Everyone has read the *Design Patterns* book, but we're still allowed to use common sense.
It possible to use either the swing worker class or threads so that something like this doesnt happen and then you could have something "Connecting..." 
First, thanks for using Git and GitHub. I see way too many people not using any source control at all, and they're dumping their code into reddit or awkwardly trying to share zip files. You're off to a good start. * You should [use packages](http://docs.oracle.com/javase/tutorial/java/package/index.html). * You should really study up on [object-oriented programming](http://docs.oracle.com/javase/tutorial/java/concepts/index.html). You are treating classes as functions. Do you know about static methods? * On a related note, idiomatically, all Java class identifiers should be capitalized ("Object" rather than "object"). * Use a build system, such as Ant (my favorite) or Maven. I see you're just using a batch file and brute-forcing your builds. A proper build system will try to do the minimum amount of work needed by tracking dependencies. It's essential for anything beyond small projects. 
1. Take the Eclipse compiler 2. Learn how to get it to output Java AST for its compilation 3. Learn how to take the AST tree for a source file, and print it out as HTML This way, the Eclipse compiler will enrich the AST with its compilation metadata, which will allow you to do things like hyperlink to library JavaDocs. You could also take an ``antlr`` Java grammar, and generate a "parser" that outputs HTML.
You haven't initialized the alive array on the RowOfAlien constructor. Add: alive = new boolean[6]; To line 27 (just after you have written) row = new Alien[6]; and the game will start.
lol sometimes its so simple. 
That wasn't in your jar file. So, does your app start. What is the actual error you are getting?
RowOfAlien.java yes. When you run GameDemo does the game start? It does for me. If you run it and post the stack trace that would probably be the easiest way for me to help.
A convoluted one with only 1 loop (in our code): public class XLoop { public static void main(String[] args) { int height = 4; StringBuffer x = new StringBuffer("x"); String f = "%1$s "; for(int i = 1; i &lt; height; i++) { f += "%1$s "; x.append("\n" + String.format(f, "x").trim()); } System.out.println(x + "\n" + x.delete(x.lastIndexOf("\n"), x.length()).reverse()); } } Of course, we're not counting the rows here but the height of the triangle instead.
My work network is being a pain in the ass and I can't upload it anywhere. I can email it to you if that helps. I'm guessing I might be a little late though. No need for any prizes.
It usually does connect, it just so happens that my parents closed the laptop I was running the server on sorry
I started off with Perl being told it was very easy to pickup. It really is. As bad as the 'learn X in Y days' books are I used one of those. I enjoyed how I could quickly prototype an idea.
Thanks for the input on this stuff. I use packages when I use an IDE but I wrote this in notepad so i didnt bother to include then I do know about static methods, although I found them to be a poor idea here as the only classes which I used multiple times hold different data and a static method or variable would affect all of them. Lastly, I don't know anything about build systems, how do they work/what is their purpose? thanks again :D
yeah messaging is fine :p sorry about being 9 hours late but I actually like y sleep ;)
Glad you got it working and thanks for the reddit gold! Enjoy your sleep :)
Reminds me of configuring Eclipse.
Can you post some of the code and a little more information? It gets a little confusing/clustered in my head when reading it as a giant paragraph, no offense. EDIT: I think I understand what you're saying now (but more info would still be good). The problem, at a guess, is likely that you're not instantiating one of the Objects (HashMap, outer ArrayList, or inner ArrayList, and I'm willing to further guess it's the inner ArrayList). So you would need to create an ArrayList (outer), then create (looping I assume) your inner ArrayList(s) and add them to the outer ArrayList, and put the outer ArrayList into your HashMap. Honestly that's a pretty confusing Collection set when nested in that way; is that a set-in-stone requirement of the homework, or could you create a class to house the Matrix (instead of the nested ArrayLists)? for example, a HashMap&lt;String, Matrix&gt; would be a lot easier to work with. (Also, it's best to code to an interface, so your variable could be declared as Map&lt;String, Matrix&gt; in my last piece, or Map&lt;String, List&lt;List&lt;Integer&gt;&gt;&gt; in your above piece; the reason for that is that you can decide which implementation to use and not have to change the declaration, but that may be a little complex or some downsides (casting) if you're not familiar).
Try to use: HashMap&lt;String,List&lt;List&lt;Integer&gt;&gt;&gt;()
A build system speeds up builds as well as perform a number of other tedious tasks, like packaging, deployment, and testing. It also helps protect you from "bad" builds: where you forget to recompile a source file and you end up using the old one without realizing it. Your IDE is probably a build system. Look at my fork, specifically `build.xml`. If you have [Ant installed](https://github.com/skeeto/ChatApp), all you have to do is invoke it and it will compile all your sources into the build/ directory, ant What that's doing is running the `compile` target (specified as the default). A target is a result you want the build system to create or achieve. There are several targets available. For example, you can run the application from Ant too. You don't need to worry about compiling first; the `run` target depends on the `compile`, so it will compile any files that need it first, then run, ant run If you look in the build file, notice I didn't have to list source files. You can add more sources and packages and src/ and Ant will find them all just fine without changing the build file. You can create a jar file with the `dist` target, ant dist And you can delete all these generated files with the `clean` target, ant clean You can ask Ant to list these for you with `-projecthelp` (or `-p`), $ ant -p Buildfile: /tmp/ChatApp/build.xml Main targets: clean Delete all generated files. compile Compile all sources. dist Create a jar file. run Run the application. Default target: compile 
I doubt that the problem is with the ArrayList. It would be very helpful if you could post some example code because it is unclear where exactly the NullPointerException occurs.
&gt;So I am currently working on some homework here, and for the past few hours I've been attempting to implement a HashMap of the type HashMap&lt;String, ArrayList&lt;ArrayList&lt;Integer&gt;&gt;&gt;, (it's to implement matrices with). &gt; &gt;However when I try to test this I get NPE (NullPointerException). I *think* it's because of how ArrayLists interacts with a HashMap since I tried to do a test where instead of doing &lt;String, ArrayList&lt;ArrayList&lt;Integer&gt;&gt;&gt; I did &lt;String, String&gt;, which worked just fine. &gt; &gt;I have also tested whether my ArrayLists are created properly by using System.out.println() at times where I get output, and those work just fine. &gt; &gt;Is the problem with the ArrayLists, and if it is, should I consider using a HashSet, or another option entirely? &gt; &gt;EDIT: I get the NullPointerException at the very last step, matrices.put(String, ArrayList output). &gt; &gt;EDIT1: Also bad information, can't use a HashSet for something like this since it can't store dual values. Anyone got any ideas what I could/should do? Rough reformat. Are you adding items to ArrayLists in the HashMap by reference? Or are you retrieving it from the ArrayList from the HashMap and then putting it back in? As I'm assuming the ArrayList hash function will change when items are added/removed so the HashMap lookup will fail.
Giving you suggestions without seeing your code will be worthless. Can you use Google's Guava library? If so, Multimap sounds like what you want.
Nice, but still connected to Hibernate. Maybe JPA would be a better option. 
To try the demo: 1) download the whole package and unpack 2) cd plumbr-demo 3) start.bat / start.sh 4) create_usage.bat / create_usage.sh 5) wait until Plumbr detects the leak and announces it in the log (this takes around 1-2 minutes)
It's coming :), thanks for the feedback. 
Waiting for that as well. 
Very interesting series. 
The Spring configuration is Java based but so could the web.xml become java based - to get rid of all XML for good. 
Bitwise operators are mostly used for turning "flags" on and off. So, say you have permissions like in Unix (read, write, and execute). Typically they are powers of 2, so 1, 2, 4 in this case (execute = 1, write = 2, read = 4). Assume you have constants EXECUTE = 1, READ = 2, and WRITE = 4 and a perm variable with a value of 0. You can enable WRITE by doing perm = perm | WRITE. (0000 | 0100 = 0100, turning on bits where either is 1). You can then add READ by doing perm = perm | READ. (0100 | 0010 = 0110). You can also turn off flags using some more complex logic (using AND and NOT), but since you asked about bitwise OR, that's how it's usually used. So, kind of a grab-bag of turning on binary flags.
If you get a NullPointerException on the line you mentioned, then 'matrices' is null, and you've never constructed the actual HashMap. Also, that data structure is too confusing - you should abstract it so you can better understand it yourself. Furthermore, it's much easier to use fixed size regular arrays to implement a matrix - you have to do far less boondoggling with creating lists and getting/setting values. Try creating a Matrix class to encapsulate those lists: public class Matrix { private int[][] matrix; public Matrix(int xLen, int yLen) { matrix = new int[xLen][yLen]; } public get(int x, int y) { //Put a bounds check here! return matrix[x][y]; } public set(int x, int y, int value) { //Put a bounds check here! matrix[x][y] = value; } } See? Simple, concise, and clean. To have a HashMap of those, just do this: HashMap&lt;String, Matrix&gt; map = new HashMap&lt;String, Matrix&gt;();
The cards not turning to anything, you are just adding the same card over and over again. for(int i=0; i&lt;n; i++) { deck.add(new Card(v,s)); }
that last for loop isn't needed
&gt; As I'm assuming the ArrayList hash function will change when items are added/removed Except that he's using the String as the key, sooo...
I thought if the hash of the item that was being looked by the key changed it would fail as well? Though I guess it wouldn't unless the table had to be resized and everything rehashed?
It seems like you're adding n (the last loop) number of every card.
I don't get it. The foreach loop is iterating through each different deck and suit. edit: Nevermind, just understood what you're saying :X you are correct, my bad
 String d = "s2 s3 s4 s5 s6 s7 s8 s9 s10 sj sq sk sa d2 d3 d4 d5 d6 d7 d8 d9 d10 dj dq dk da c2 c3 c4 c5 c6 c7 c8 c9 c10 cj cq ck ca h2 h3 h4 h5 h6 h7 h8 h9 h10 hj hq hk ha"; deck = d.split(" "); thishand = new ArrayList&lt;String&gt;(); for (int x = 0; x &lt; (deck.length); x++) { thishand.add(deck[x]); }
The last loop is so I can have multiple decks in the same AL. Even with it gone, there's the same problem. Edit: missed a word
Was going to say this. When you have a complicated data structure, it's better to abstract it. It's easier to understand that a Matrix Class is a 2 dimensional matrix rather than List&lt;List&lt;Integer&gt;&gt; is an 2 dimensional matrix. Note, the Matrix implementation is not exactly the same as List&lt;List&gt;. In List&lt;List&gt; the second dimension could have variable number of elements whereas the Matrix is fixed. Depending on the requirements, one of these is correct, the other is not.
Why is your deck variable static? Could you post the Card class too?
This way will take longer than regular expressions or writing a state machine by hand to get something partially working, but will take much less time to correctly solve the problem.
this is what i was going to suggest; absolutely the right choice. 
hola
This is the way i usually do it: for (Entry&lt;String, String&gt; entry : map.entrySet()) { String key = entry.getKey(); String value = entry.getValue(); } 
I usually do this: Set&lt;String&gt; keys = map.keySet(); String value; for (String key: keys) { value = map.get(key); // ... } Yes, it's verbose... welcome to Java. On the other hand, it's fast as hell.
You should really declare **key** and **value** outside of the loop's scope and make the call to map.entrySet() before entering the loop... the Java compiler is pretty good at doing this for you, but "don't define vars inside a loop" and "move invariants out of a conditional check" is still best practice and holds true in pretty much any language.
If `key` and `value` are not used outside the loop, and if they do not need to be initialized to a particular value before the first iteration of the loop, then there is no point in declaring them outside the loop. Also, `map.entrySet()` is called before entering the loop. No need to call it even before, and to consume memory for longer than needed. The conditional check you mention is handled by the compiler when using this specific loop syntax.
&gt; The conditional check you mention is handled by the compiler when using this specific loop syntax. Never trust compiler optimizations... I've run into plenty of cases where it's documented one way but works another for some esoteric reason, and those esoteric reasons **suck** to track down. As for memory, if you're really worried about it, then explicitly set things to **null** - but most of the time you'll fall out of scope before it matters anyway. I guess in the end it's a style choice, but personally I've never found a reason not to code defensively... if it comes down to "trust the compiler" or "be explicit" I roll with explicit.
&gt; Never trust compiler optimizations... It's not a compiler optimization in this case. Where is the conditional check in the expression `for (Entry&lt;String, String&gt; entry : map.entrySet())`? Nowhere to be found, it will be created by the compiler, and will be some form of `iter.hasNext()` or equivalent test. The call to `map.entrySet()` will certainly be put before the loop, because it would actually be a bug to call it for each loop iteration. &gt; As for memory (...) You're right, memory is not so much a problem. I'm more concerned about writing three lines that have no value and inflate the size of the code for no practical purpose.
This is actually faster than the map.entrySet() method. Good to know Edit: Ok this method is only faster when the key is simple and the hashcode computation is very fast. back to real work ;-) 
This is code I'll be able to remember, plus it looks pretty clean. So I'll use this- and hope it sticks. Thanks a lot!
In what world would these questions be asked or answered in such a way? India?
It's a bit shorter if you don't need keys ;) for (String value : map.values()) {
That was meta.
Sadly no, or at least not in any way that I can see. I need to reference the object that I initialize, so if I write Person(String name, Photograph photograph), I want to be able to call that object if I initialize a method later using that object. This is because of a messaging system where I need to able to reference the Person that is sending the message.
As Enginerd points out, the *this* keyword will reference the object which is invoking the method. I.e. Say you have a Dog class with the attributes, Color, Age, and Name. The following method will be used to set the name: public String setName (String newName){ this.name = newName; return this.name } Now if you instantiate this class as dog1, and call dog1.setName("Spot"); dog1 will now have a name of Spot.
Thank you very much, this helps quite a bit! Do you happen to know a way where I can change the name without knowing the object name like dog1? This is more because I will be generating multiple objects, so I can't predict what each will be named, (this is because the class will mostly be automatic since once the main method is called it will generate multiple objects of type Person.
&gt;main method is called it will generate multiple objects of type Person. Can you give an example? I don't know of a way to instantiate an object without knowing how to reference it.
At the start, it will instantiate some Persons this way; kasper = new Person("kasper", new Photograph(new String[] { })); though with different names. However, I am more interested in whether you can possibly appoint a variable within each Person that references it to itself so that if you for example call public Person getPerson(); It will return the Person. This is because there is also a method where you add new Persons in the Person class, which is why I can't rely on that each will be named person1, person2, etc. etc.
Bollywood java tips.
For this: kasper = new Person("kasper", new Photograph(new String[] { })); The "variable" reference to that object is *kasper* You would call Person methods with kasper.method(). As for the getPerson() method, I don't know why you'd specifically need it, but you would still use *this*. public Person getPerson(){ return this; } If you already have the person instantiated as kasper, you could do the same thing by just saying *kasper*. In other words: kasper2 = kasper.getPerson(); and kasper2 = kasper will do pretty much the same thing. Note, that kasper2 isn't any different from kasper, and changing one will change the other (kasper2 isn't a new person, he's a clone of kasper that references the *exact same object*). The getPerson/getInstance methods are generally used when referencing a singleton class, or a class with limited instantiation where the class itself is aware of the different times it's been instantiated. A database connection, for example, may want to keep track of the servers you connect to, and then return the same object when you ask for it again if it's still around.
Your question is hard to understand and I have the feeling you have a very loose understanding of the problem you are trying to solve. Do you want to reference an object from inside itself? Than the "this" keyword is your friend, as mentioned by others. class Person { private String name; public Person(String name) { this.name = name; } public String getName() { return this.name; } } However, in your reply you mention that the name of the actual variable is another issue here. Do you want to store several objects and then refer to them without handing out variable names? Then I would suggest a container like an ArrayList, for example. I really don't understand what you are trying to accomplish by "changing the name of the reference". If you have an instance of Person that reference will have a name, like "myPerson", which you use to access the methods this class offers. If you have multiple instances and you don't know which one you will need you might use an array, an ArrayList, a HashMap or even your own container class. That would enable you to do something like this: HashMap&lt;String, Person&gt; people = new HashMap&lt;&gt;(); people.put("Todd", new Person("Todd Brosky", broPics)); people.put("Mary-Kate", new Person("Mary-Kate Olsen", foodPics)); people.get("Todd").getName(); // == "Todd Brosky" If of course you are trying to send your Person objects over some messaging queue to reference them from someplace else, this is getting more complex.
You could also utilise the triangular symmetry thus; public class Triangle { private static final int LENGTH = 4; public static void main(String[] args) { String xString = ""; // Going up for (int x = 0; x &lt; LENGTH; x++) { xString = xString + "x "; System.out.printf("%s\n", xString); } // Coming down for (int x = LENGTH-1; x &gt;= 0; x--) { xString = xString.substring(0, xString.length()-2); System.out.printf("%s\n", xString); } } } 
It doesn't have to be this verbose: for (String key: map.keySet()) { String value = map.get(key); // ... } Yet, I always use `entrySet()`.
This site is a good resource. Lot's of short, concise, helpful tutorials.
If you are calling a method on an instance you already have that instance otherwise you couldn't call its method. Where exactly is your problem? Do you want to add the instance itself when you call its getPerson method?
How many Java developers on here actually do straight JDBC coding? I've been using Hibernate and Spring abstraction for years.
I'll start with a few ones: * [jmxutils](https://github.com/martint/jmxutils) : exporting mbeans with one annotation * [performance](https://github.com/juancn/performance) : enforce performance invariants, nice idea... * [parboiled](http://www.parboiled.org) : PEG parsing in Java and Scala * [jcommander](https://github.com/cbeust/jcommander) : yet another command line parsing library * [FEST Assert](http://docs.codehaus.org/display/FEST/Fluent+Assertions+Module) : more powerful assertions to ease testing * [Caliper](http://code.google.com/p/caliper) : microbenchmarking framework 
fastutil, jolokia, LMAX Disruptor, jooq, ormlite, jsoup, Tattletale, Byteman
string tokenizer
I found out about fest assert in this subreddit and I use it all the time now. It's great. Perf4j would be my addition to the list. It's a library for logging and aggregating timings in performance testing.
You're relying on a lot of knowledge about how the compiler works... I like bulletproof optimizations, and "move invariants out of loops" is one of those. Maybe the compiler won't call your method repeatedly, but if it does you've just crippled performance. But adding an extra line of code to do an explicit assignment never hurt anyone.
You accidentally your whole question.
Don't piss into the wind.
I would start [here](http://www.oracle.com/technetwork/java/javase/downloads/index.html) and [here](http://en.wikipedia.org/wiki/Video_poker).
I understand that now thank you but how would you start your main if you did this?
Recently found http://code.google.com/p/java-universal-tween-engine/
[Project Lombok](http://projectlombok.org/)
Not *quite* a library, but close: [Mockito](http://code.google.com/p/mockito/), helps in mock creation
JFlex: great for the lexing step in a parser. Does exactly what you need, with no fuss, and good performance. Integrates nicely into antlr, so you can write the parser in antlr. (Yes, you can do the lexer in Antlr, but that sucks. You don't do that.) Jing: perfect for validating documents against an XML schema that *you* provide, and ignoring what the document says. Uses RELAX-NG, which is the best XML schema language. Lucene: it's not lesser-known, but one of the best libraries I've ever used. Love it. slf4j: nice logging facade for different logging frameworks.
One I have wanted to check out is [Hazelcast](http://www.hazelcast.com/): &gt;Hazelcast is an open source clustering and highly scalable data distribution platform for Java 
I'll take the typical 15% gratuity. Yea, it'll help.
Great stuff here, I didn't know [jOOQ](http://www.jooq.org), looks handy in some situations. I'm a big fan of [Byteman](http://www.jboss.org/byteman), I even have started developing an IntelliJ IDEA plugin for it.
Granted, Mockito has a nice syntax, so the leaning curve is not steep. Nevertheless, it has limitations around static and final classes. So, sometimes when working with legacy code or 3rd party libraries I have ended up using Mockito + [PowerMock](http://code.google.com/p/powermock/) Because of these limitations I usually prefer [JMockit](http://code.google.com/p/jmockit/) (not to be confused with JMock). Super powerful, and allows you to write solid and concise unit tests. See also: [Behavior Based Testing](http://jmockit.googlecode.com/svn/trunk/www/tutorial/BehaviorBasedTesting.html) 
The issue with Lombok is that it's a language extension rather than a simple library... To reduce boilerplate, I prefer to stick with vanilla Java and use things like [Guava](http://code.google.com/p/guava-libraries/), [commons-lang](http://commons.apache.org/lang), [commons-io](http://commons.apache.org/io), etc. This [presentation](http://www.slideshare.net/HamletDRC/java-boilerplate-busters) on boilerplate reduction is pretty nice.
Get a list of scores. Learn some swing. Get imgs of all the cards. Ive actually done this and posted my shuffle method in java somewhere(hint hint) but youre going to need to give a little more.
The only language extension piece in Lombok is the 'val' declaration. All the rest of the functionality comes in the form of [annotations](http://projectlombok.org/features/index.html). Other than that I don't understand what you mean by it not being a 'simple library'. You just include the Lombok JAR in your classpath and you're done.
[fastutil](http://fastutil.dsi.unimi.it/), [jolokia](http://www.jolokia.org/), [LMAX](http://code.google.com/p/disruptor/), [jooq](http://www.jooq.org/), [ormlite](http://ormlite.com/), [jsoup](http://jsoup.org/), [tattletale](http://www.jboss.org/tattletale), [Byteman](http://www.jboss.org/byteman) [edit: just linky for parent post]
I've run into the `final` issue before and assumed it wasn't solvable. Thanks for the tip. &gt; JMockit (not to be confused with JMock) Damnit, guys, search before you name! If you hadn't made the note, I might have dismissed it, because I've already rejected JMock for being fugly. 
Apparently, Hibernate is old and busted, and is considered a "leaky abstraction", so we're all back to straight JDBC again.
I'm a fan of [Javolution](http://javolution.org). It's a very niche product, as it's not common you need crazy performance from data structures or are working with RTSJ, but if you are, it's one of the best libraries.
https://github.com/peichhorn/lombok-pg for @Builder
I don't know if it is sufficiently obscure, but [JSoup](http://jsoup.org/) is awesome if you need to parse, manipulate, or generate HTML. Its API mimics JQuery. I'll also take the opportunity to plug my own library [QuickDT](https://github.com/sanity/quickdt), a simple decision tree learning library designed primarily for ease of use.
Hmm, let me see... Most people have finally realized that using XML for configuration files was a dumb idea, and lack of XML configuration has now become a feature among more recent libraries. People have also found ways to make Java's syntax more concise and readable, perhaps the most impressive example of this is [LambdaJ](http://code.google.com/p/lambdaj/). Oh, and [Google Guava](http://code.google.com/p/guava-libraries/) has become almost compulsory, especially its collections classes. I particularly like the [Iterables](http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/collect/Iterables.html) class which has all kinds of useful static methods for doing functional things with Iterables. As for good websites to follow - I could probably use some good recommendations myself. I normally keep an eye on [DZone](http://www.dzone.com/links/tag/java.html), and here, of course.
Perfect timing too. My workplace only just bought licences for our dev team and we were informed that the keys are good for ver 11 as well.
Link?
I've used this for lock management. Some of the older versions weren't my favorite, but I've been really happy with 1.9.4 so far.
You havn't really missed out on anything We're still waiting for lambdas/closures.
http://code.google.com/p/efficient-java-matrix-library/
Robot overlords. Get back into the caves as quick as you can. RObot overlords will ge.. ah I can' stop .!2 gthe robots - sane * a'24n
Oh come on, XML can do everything! :)
I learned of lombok through reddit and we now use it extensively at work. Gorgeous. Saves so much boilerplate. Also, when you do use a nonstandard getter / setter, it stands out so much more, because it will be the only getter / setter there.
EasyMock: http://easymock.org/
[priorityBlockingQueue](http://docs.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/PriorityBlockingQueue.html)
Uhmm . . . Google? And it's free.
LambdaJ looks really cool... but I don't know how to use it. :&lt;
anything.
It's that guy with a doctorate. Oh wait no, I was thinking of the other guy.
MESSAGE REDACTED
val is the only thing that *looks* like a language extension. But in reality, it is [just a type](https://github.com/rzwitserloot/lombok/blob/master/src/core/lombok/val.java), so when you say 'val foo', you say that foo is a value of type 'val'. It's actually perfectly valid Java code. Lombok then hooks into the compiler to do its magic. It is *this* part that could be considered a language extension. And it's the same with all of the annotations - Lombok does magic at compile-time. So I don't think it's fair to say that Lombok's annotations aren't language extensions. If they weren't, Lombok wouldn't need to hook into the compiler, which it does, deeply. This is fine with me, I love Lombok and use it whenever I can.
which is better fastutil or Trove?
[XStream](http://xstream.codehaus.org/) (dunno if it's hipster enough)
The thing I'm not comfortable with is that it makes your project dependent on a tool. Your IDE has to support it. Other tools such as quality analysis tools (CheckStyle/FindBugs/PMD/Sonar...) have to support it. Is it really worth it ?
For my use, fastutil. Especially with Java 7 changes to BitSet. YMMV.
Better than JGroups?
Go work with other people for a decade. Then move to freelancing.
smtp.com
Fast? With HashMap? TreeMap? ConcurrentHashMap? ConcurrentSkipListMap? Fastutil's map implementations? Or did you print the decompiled JIT output, and found out that for some reason, the JIT wasn't using registers for key/value pointers?
Given that XSL is turning complete, then yes it can do anything a computer can do.
It's completely text based. But my real question is. I've created a card class with two arrays one for suit the other for type of card 2 - ace. I've working on the deck class and not sure what to do ill have to reference the card class in the deck class right? How would I do that?
[scala-library](http://www.scala-lang.org/) is pretty nice.
They de-fecefied Java EE. It's almost as good as Spring/Hibernate. PrimeFaces, GWT, SmartGWT and ExtGWT are awesome for web. http://blogs.oracle.com/briangoetz/resource/devoxx-lang-lib-vm-co-evol.pdf
Nothing, really. Not that much happened in the last decade.
Can't tell you; never used JGroups :)
Search for telecommute jobs at jobs.github.com as well as stackoverflow careers.
You should use each language in an idiomatic way, and keep the principle of the least suprise as your objective. "What will the next guy, or myself in a few months, think when seeing this? Will its function be intuitive to others?" In other words, you need a pretty good intuitive model of the human mind, to be a good software developer. For Java, always use sun-style. Configure your IDE to remind you, if you need to. (To the OP:) when asking for help on web forums, use tools like GitHub, or at create a Gist there, to demonstrate your problem. Those tools exist for a reason - they make collaboration easier. If you make things easier for people who'd help you, you'll get more help.
Not because it is Java, but look into Aparapi: Code to execute Java on GPUs. Apart from that, hardly anything cutting edge happens in Java unless it needs the Java infrastructure or market penetration that Java has. So more in spite of Java than because of Java.
http://www.springsource.org/spring-data/jpa https://github.com/SpringSource/spring-data-jpa-examples http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/
Good. Fuck Oracle.
Honest question - if Oracle loses this case, is Google entitled to claiming lawyer's fees from Oracle? Is that all that Oracle stands to lose, apart from the validity of some of their patents? Also, yay!!
Counter question - what is that you aspire to do with Java? Note that Java can run practically anywhere, and it's eco-system of libraries and frameworks is huge. Knowing the language alone isn't sufficient to do meaningful work; you may also need to know a few APIs, libraries, or frameworks. The answers would therefore vary if you want to do server-side stuff, Android development, desktop apps (ugh).
I'm mostly interested in web development, and have looked around at places like Google and Facebook that are hiring web developers for their sites and programs and require things like HTML, CSS, PHP, etc, but also have some listings for Java developers. And while I know that I could target my skillset towards positions like those, I'm just wondering if there's a more broad skillset that might be widely applicable no matter where I work.
Forgive me, but I'm new to Java. Whats so bad about Oracle?
It's nothing to do with Java (well, in this case, it obviously is). Oracle are patent trolls. They do not innovate, all they do is acquire technology with the sole purpose of suing people for using it. Or extort them for licence fees. That's ORACLE. In this case, 2 years ago they bought Java. It was obvious from the get go they wanted to buy Java so they could sue companies like Google. It was on the cards from day one. They bought Sun Microsystems fully intending on suing Google later for billions, then they really get the company for free. They also have an uncanny ability to destroy every product they purchase because they actually don't care about the technology. With Sun alone they are doing it with MYSQL and Java.
&gt; I'm just wondering if there's a more broad skillset that might be widely applicable no matter where I work. Doubtful. I've worked intermittently on Java since 2002, and more or less full time since 2007, and there has been no broad skillset that would apply universally to all jobs in equal measure. But I'll try to answer you question. First, read and practice the tutorials at Oracle.com. There are some notorious sites out there to avoid - Roseindia comes to my mind; avoid them like the plague. You'll need to know most of Java SE to do work. Avoid Swing if you aren't interested in it. Focus on Concurrency, IO, Collections tutorials for now (and learn to use the Google Guava libraries later). If you're interested in server-side development for web-sites, you'll be spoilt with choices. There's * Java EE 6 (a standard set of APIs for building enterprise apps), * Spring, a framework originally written to ignore J2EE (that's what Java EE was earlier) since it was unbearable. Now, both are comparable - Java EE improved incrementally in versions 5 and 6, drawing experiences from Spring. * GWT * Apache Wicket * Play framework * Vaadin * ... and many more that I cant remember To begin using most of the above, you'll usually need to understand how Servlets work, and JSF if necessary, and/or JSPs if you find yourself using a framework that supports only JSPs. You'll almost always need to know how to run an application server. Usually Tomcat or Jetty is enough, unless you're into heavy-weight stuff like enterprise beans (EJBs) where you'll need GlassFish, JBoss etc. which support far more specifications in Java EE than Tomcat/Jetty. You may also need to interact with a database. JPA (the persistence API, usually needing a provider like Hibernate/Toplink/Eclipselink), Hibernate, Toplink are sensible choices. If you dislike the model required of these frameworks, look at others - Apache Cayenne, JDO etc. But whatever the case, you'll usually need to know JDBC. I haven't worked on NoSQL to hand out recommendations there. And, to top the list libraries/APIs/frameworks off - learn JUnit or TestNG or both. Dont postphone this until you've learnt a framework to do some work. One final word about building your project. There's Ant, Ivy and Maven. They're like a religion - people hate some or all of them, except for the one they choose. Pick one that suits your needs. Eventually, you'll find that understanding how the JVM works will lead you to writing performant code, and being the king of the code you survey (ok, not necessarily, but you get the point). Pick the Java Language Spec and the VM spec, when you need to understand this; most people need this in 1-2 years once they've mastered a framework. Edit: I missed out on Android. But I can't recommend anything there.
You just changed my life.
&gt; So, what is being used in place of XML? JSON? It varies, sometimes JSON, sometimes configuration is done programmatically, sometimes with Groovy or JRuby. &gt; We had a pretty decent toolset in place, with small custom XML files, that were validated and documented, combined with XSL that would generate the spring XML configuration files and other things. It worked pretty well.. Sounds like Stockholm Syndrome to me :-) XML is good for marking up text, which is what it was designed for, and not a lot else IMHO.
Several things. Their business model involves acquiring companies ripe for acquisition, rebranding the products (usually breaking something in the process), and to sell more-expensive support contracts. All of this comes at the cost of their employees, the employees of the acquired companies, and their customers. They're the new CA. They're not exactly known for innovation, unless the market perception of the company begins to tank, and even then they're lethargic to react. They have way too many products (100+) to focus on, and lesser research funding to match those numbers. The company is micromanaged from their HQ. They have a bloated management structure more or less oblivious to technology, and disconnected from happenings in their own offices. Edit: grammar and spelling
Interesting, thanks for the reply.
As compared to Perl or Python or whatever language OP was referring to. Jeez.
don't forget the openoffice/libreoffice fuckup. 
Worth pointing out that if/when they lose, they've also lost the money that the presumably banked on getting when they bought Sun in the first place. The suggestion has been made (by [cyberdave, above](http://www.reddit.com/r/java/comments/n69hi/oracle_java_patent_at_stake_in_android_case/c36mcew) and others) that Sun was bought to cash in on patents held by them, specifically related to Java. Losing this case may well mean losing the stranglehold on Java (and companies that rely on Java) that they thought they were buying.
so larry ellison bribed the wrong authorities?
ARTBART84 that is a long long long article. How about his. Give Oracle a call and see how they treat you. That will explain a lot more than what anyone can write up.
Your code is working fine for me.
&gt;all they do is acquire technology RIP Sun, they were one of my favorites simply because of all the fun stuff they did, and considering how large enterprise their technology targeted, they still had a decent hand in the open source community.
How would I apply this into a main simple form
[Dozer](http://dozer.sourceforge.net/) Mapping library, used it to map some JAXB objects to some POJO's.
hey sorry I wasn't able to see your messages as I usually reddit from my iPod and it doesn't ever seem to work. the problem is where you call "Scanner reader = new Scanner(new File(javaname));" since the String value of javaname is "this", it is trying to find a file called "this" when you'd actually be looking for "Filename.java" or whatever. also you're instantiatijg an unnecessary File object on line 5. just toss that and change the javaname variable's value
I think you have it backwards, when I run this code with +34 it works fine, and with 34 + it throws an error. The reason is the + is a binary operator, it requires 2 operands on the stack to operate on. If you're only inputing 34 + the stack is throwing an exception when you try to pop a second operand. Also, this is not a compile error, the code compiles fine because you can execute it. This is a runtime error
&gt; ant+ivy Maven, especially for bigger projects, is quite a leap forward by comparison. [Here are some reasons why](http://leshazlewood.com/2010/01/13/maven-2-vs-antivy-revisited/).
Not sure, if this is lesser known :) http://code.google.com/p/lambdaj/
when I rename the variable I am getting a no such file or directory the same error I've been trying to get rid of hmmmmm
I would use ANTRL to parse the Java to an AST then walk that AST colouring the tokens as as I went. http://www.antlr.org/ Here's a grammar file for Java written by the OpenJDK team http://openjdk.java.net/projects/compiler-grammar/antlrworks/Java.g
He's ignored that advice once already.
I guess it is quite difficult but doing manually and properly will be even harder. Maybe he just needs something quick and nasty, it's all about requirements - as ever.
If he did, that's what http://pygments.org/ is for. May even work under Jython. Unless it's homework... in which case, if he wants to slip under the fence, and bring that ignorance to the workplace to annoy me, he'd better be paying someone for the advice.
I guess without this API *hack* all prints could look like this :) try { System.out.println("Hello"); } catch (IOException... We can @Override methods in PrintWriter and check for IO error in every print/write method ;)
That must be why. It's a shame about the checked exceptions concept really.
He's not using the correct class. He thinks he needs PrintWriter to convert from String to bytes, but he needs an OutputStreamWriter with the correct encoding.
If we're going to talk about doing this the right way, rather than using deprecated "font" tags, he should wrap them in `&lt;span class="this"&gt;` then use a stylesheet to color them. It would also simplify life because a "block" can be wrapped in a `&lt;div&gt;` with a left margin.
.....replaceAll("System.out.println(", "&lt;font color...System.out.println(");...
I would create a csv file with all the java commands and what color foreground and background you want them to be then use a for loop to read through the csv file and call a method you made replace(command, foreground, background) to go through and change them all instead of using .replace().replace().replace()
Assuming you have a script language of choice that are you are relatively familiar with, my advice to you is: A- Download some engines that are in the code you understand (be it Java, Python, C++) and look at how those engines operate. understand what commands do what. delete somethings to see how it affects the program. Just meddle with it really. B- Create small programs. just simple things. start small. then add on more features. figure out ways to make the coding use less resources and get the same result. then scrap that project and move on to a new one with that new code from the start. there is something psychologically pleasing about starting fresh. I don't know where you could find any of this stuff, I'm just giving you advice.
find something u would like to develop yourself, even it if already exists! pick a language and google for the best frameworks to accomplish your task (e.g. spring for java&amp;web). start writing code, read the documentation with it, learn by making mistakes and finally make your software useful.
could you explain a bit further about what an 'engine' is? Is it sort of like a sub-language for an overall language, with specific functions and purposes? Or is it a program, straight up, that I should look at and meddle with? Thanks!
a program that you can edit. like there's this program called Blender that you can add Python to and there's a "Hello World" engine which shows you how to make a program say "Hello World!" when it starts up. Meddle with the code of things.
&gt;my refusal to acknowledge that marijuana is illegal Got busted by your RA?
Try the notepad tutorial: http://developer.android.com/resources/tutorials/notepad/index.html And Google developer page should be more than enough to get started.
1. forget everything about VB6 2. never mention VB6 anymore 3. read a good java book 4. practice 5. read a good android book 6. practice 7. repeat steps 3-6 until happy with the results 8. 9. profit 
It is possible to code VB using good design and sound practices, you know. Just because the overwhelming majority of VB programmers don't, doesn't mean this guy doesn't. Although, the cut and paste comment above does make me suspicious. . .
I didn't Ignore anything I'm only a year into learning java so a lot of things are harder to do and some things I don't understand as well.
What Im doing is using eclipse ide to grab a file of my choice from my computer and convert it to html with the markups listed above.
That website highlights it for me but I am trying to highlight it myself 
&gt; It is possible to code VB using good design and sound practices yes you can, but the practices have nothing in common with the ones from real programming languages ;-)
I'll answer the second question first: &gt; Do C programs work on android? I think so. But I am not qualified to make any deeper statements ;) &gt; Where do I start? I don't know java at all. I just downloaded eclipse, but can't really wrap my head around [...] One fundamental question first: Do you have any experience with OOP? The whole Java API is filled with objects and interfaces. If you don't know the difference - at least to some degree - between objects, interfaces, and instances you will have problems wrapping your head around it. Try to find out what interfaces are. Why they exist in Java. Embracing interfaces early, will make your life easier later on. I quickly googled an article (didn't read it though, but glanced over it, and it seems okay) on that topic: http://www.javaworld.com/javaworld/jw-08-1999/jw-08-interfaces.html?page=1 As stoneburner already said, you need practice. My recommended way to go about this is: * Forget android for now. You need to get to grips with Java basics first. * Forget GUIs (Swing &amp; Co). Again, this will distract you from what's important. * So... Start off with some command-line interface: Think about what your application should do, model it, and make a *crude* CLI for that. Try to get as much of the functionality in there as possible. The important thing here is to focus on the language itself first. It is likely that, once you finished the app once, you will have learned many things. Re-do it *again* as a CLI. And after that maybe a third time ;) If you already have experience with structuring applications, you can even try to keep all you application logic in one "package". In Java, packages are actually - roughly speaking - sub-folders in your source tree. And keep *everything* related to user interaction (your CLI in this case) in another package. That way you should be able to switch to something else (Android) later on with fairly minimal effort. The problems with GUIs is that there are *sooooo* many things that are not straight-forward: * the Event-Dispatch thread "EDT" * finding the **right** event-handler for something (i.e: `textField1.getDocument().addChangeListener(...)` instead of `textField1.addKeyListener(...)`) * Layout managers * All the different Swing Widgets and their MVC-Model * Using `Action` instance instead of `.addActionListener()`. And keeping in mind that they should be stateless if possible... ... and then Android... it is quite different from other application models that you may be used to. The way how `Activities` behave (their lifecycle and message passing between them for example). If you only want to make Android apps and are not interested in desktop apps, it may actually be conceivable to *skip* Swing altogether. Although it would be a good exercise. Good Luck!
Download pygments from the site.
yeah :( but i have like 4 AP credits, 1 summer course, and i'm allowed to take a semester away from school, so I'll just grab 3 credits and hopefully be able to graduate with my class when I'm back.
Become familiar with at least a few different programming styles and languages. python,lisp,prolog,haskell,sql for starters. Don't spend too long, just know they exist and why you might choose a particular language (there's a lot of unproductive flame wars out there). Choose a subfield within compsci. web frontend, sql, nosql, 3d graphics, compilers, machine learning, computer vision, natural language processing, web scraping. If you make python your language of choice you'll have the easiest time since it has the most libraries among the scripting languages. Then, start hacking on projects in that subfield. It's important to just get started. For example, if you're into nosql, download google appengine and follow through the tutorial by typing in the source code. Then make your own changes to that and from there keep going. For nlp there's nltk. For computer vision, py opencv. For machine learning scikit ml. For web front end there's pyjamas (or google web toolkit if you're a java guy). For sql mysql or the better postgresql. For compilers haskell/ocaml are best. For web scraping python mechanize or selenium. For 3d graphics, blender and panda3d. Also choose an ide. Choices are emacs, vi, eclipse. Try them all, pick one and become an advanced user in it.
I did now what 
could you give pointers on what I have posted I want to go though the step by step from what I have so I learn it ?
Read the fine documentation. Take it from there.
There's about 200+ dif files in the download finding out what I need from these is very ineffective.
Confucius say: Life rewards people who take responsibility for their own happiness.
import java.io.*; import java.util.*; public class highlighter { public static void main(String[] args) throws IOException{ String javaname= "test.txt"; Scanner reader = new Scanner(new File(javaname)); PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(javaname.replace(".java",".html")))); String nextLine; while((nextLine = reader.nextLine())!=null){ String newLine = nextLine.replaceAll("this",",&lt;font color = \"0000FF\"&gt;this&lt;/font&gt;"); //colors all "this" blue out.write(newLine); } } } 
That's like looking at a dictionary in chinese and saying learn chinese.
I am a Rails developer that has never programmed in JAVA. I am really interested in using PLAY. Do I need to learn JAVA first to use PLAY? This is not meant to start a thread debating different platforms. I am just trying to branch out and learn something new.
Curious, but is marijuana illegal for you? Are you card carrying?
Yes, the first Java code that I did a year ago. 
lol my neighbour put into his head he is a programmer, but he just codes Java Applets for every single web page. I laughed a long while in front of him when I realized it. I also couldn't believe my eyes when he showed me how he required every single visitor to download his 'database' (a 10 000 lines document). EVERYTHING's done client side on an applet. Just can't wait for his webpage to go online, he tells me it works, and I laugh every time. Good guy though.
this is my go-to guide . it started me into making a dopewars clone.
I sometimes try to leave a witty/silly comment with some soul-crushing code I write to soften the blow of what they're abound to read.
example? 
&gt;maybe i needing this later
Sometimes but the laughter dies quickly when I remember who has to maintain the code... 
http://stackoverflow.com/questions/216876/what-is-the-best-commit-message-you-have-ever-encountered There was another thread that had best comments in source code. My favorite was a comment //please increment as necessary. // number of attempts at refactoring this code: 56 
i laughed pretty hard when i found out that my predecessor wrote a web service for creating maps where the client created the plotting script (BASH script). So basically, he wrote a servlet that runs any arbitrary shell script on our production server (with a fairly privileged user). YaY! HAHA!
I meant cut and paste as a learning tool simple 1+2 = 3 CLI programs for me to look at :-).
See I have developed an amazing tool to help disabled adults all in vb6...then found out after working hard on it for about a year, that it won't run on arm based tablets... so now I am forced to remake the entire thing to get it to run on some cheap chinese tablets. I don't want the disabled adults to have to pay through the nose for 500 and up windows tablets with atom processors. Their only other option now is to pay over 7k for a fully functioning device. Which is a rip off. So I set out to develop a new way to do it that works great on a touch screen windows tablet, but wont run on an arm based tablet. So now I am trying to figure out java/c whatever language runs on arm so I can re make my program for those arm tablets.
Yes. In my first comp sci class i got so frustrated with the assignment that I named my methods : candy, tooMuchCandy, and nowImFat. All the variables were named after candy bars. At that point no one had told me not to, and it made way more sense to me. on a side note I frequently would name things in a simmilar fassion through out my cs minor, and then replace them with good names before i turned them in, although a few did slip though the cracks sometimes. my favorite: int dennisQuaid=0;
http://www.thedailywtf.com Specifically the "CodeSOD" section.
Oh, have I? Often. It's a signal for people to gather around to laugh at some ridiculous bullshit I've found in the code base.
I usually laugh at my code when I realize that I am pretty close to being done, which is usually when I'm really tired and its pretty late. Its also more of a evil laugh than a haha laugh. The only funny error that I encountered so far was an infinite loop which was suppose to process a text file. So I waited for about 30 seconds thinking wtf is taking so long to process this file and as soon as I saw I didn't increment the loop I had a few laughs. EDIT: Just remembered that I laugh the most at code when I am helping out a friend with his code and seeing how he implemented his project. Basically thinking wtf are you trying to do with this segment. Also this has the opposite affect of annoying the crap out of me.
Going through http://mitpress.mit.edu/sicp/ is recommended. It gives you the fundamendals you can then apply to other languages besides Scheme.
 throw new Exception("This should never happen");
At least it's checked. You could argue that an assertion makes more sense, but I hate unchecked exceptions. In any case, throwing in such a case is a hell of a lot better than just using a comment to state that it shouldn't happen and ignoring the condition so that something could fail in some obscure way somewhere downstream.
Programming and software development is fundamentally a social activity, so the best way to learn how to do things right the first time is to learn in a social setting. Also, you might want to look into Kevin Smith's principle of marijuana and productivity. Software development and computer science don't share many fundamental principles. If your end goal is to work in the field of computer science as a teacher or researcher, you'll need the specific skillset your CS program will teach you, but that skillset will be next to useless, and might even be an actual hindrance, if you wish to pursue a career of software development. The introductory courses will still be useful, of course, in introducing the most basic concepts and principles. My advice is to learn software development through activities which allow you to interact with others. For example, if you want to learn about modeling real world events with data structures, and how to present relevant user interfaces, you might pick an activity such filling out tax forms, think about how that activity might be enhanced through programming, sit down with your parents and discuss their thoughts, feelings and priorities when they engage in this activity, build a test application which demonstrates how you'd engage with their priorities, go through that application with them and see how the discussion changes with an actual prototype, and iterate that for a couple tries. Then, and **this is the most important part**, think of how you'd want to describe that experiment to your peers in a structured way, and write a report of what you did, what you learned, and how your test subjects reacted. What you learned about the craft, what you learned about people, and how these two things go together. Keep it short and sweet. Gather these experiments to your GitHub account, at least one major experiment per week for the year. When the year is over, see if you can get credit for the experiments. When you're looking for your first job, that'll be your portfolio. First and foremost, employers (if not HR people) are looking for people who can get things done. If you can demonstrate that you can pick up the ball and take it all the way to the end, again and again, then you can use that demonstration in your advantage, in any business context.
Well I found this in some Oracle enterprise software.
I hate having to handle checked exceptions for conditions that will hardly ever happen and there's nothing I can do about.
I haven't laughed at anything that was intentionally funny. I've cried more though.
*raises hand* I inherited a project a number of years ago that does straight JDBC and a full rewrite isn't justifiable. And if we were to do a ground-up rewrite, it wouldn't be in Java.
If you can't handle it, you shouldn't be catching it, or at the least you should catch it, wrap it, and rethrow it.
If its a checked exception, you're making me catch it... Rethrowing it is a bunch of boilerplate that gets in the way of what my code is actually doing.
You can also declare the exception.
I've never laughed at code that was funny on purpose. I've laughed at awful code written by awful people though.
Not to mention that VB6 is **13 YEARS** out of date. How the hell does it even compile? Also: WHY!? VB.NET 2011 Express is *free*, why u still use VB6? WHY?
Looking over my friends java code to try to help him fix a bug and I come across super(duper);
Yes, but I cry on the inside.
char mander, meleon, izard; always makes me giggle... and in the same genre : * float zel; * for (retress = 0; ...) { * sudo woodo ...
Being a new resident of Colorado on my way to finishing my 4th year, i too would love to know the answer to this.
And then, one method at a time, you end up with a monstrosity of a project where most methods ``throws Exception``, most methods have to check for it, and try to think what might go wrong, with just that information... I've seen it happen to other people, and it's not pretty.
Any code I did few years ago makes me facepalm.
You wouldn't throw Exception, you'd throw something appropriate given the context of your method. Error handling is a first class concern. Ignoring it just means your lazy.
Such a good and accurate reply.
Then we don't disagree. Although, if possible, you should demarcate certain classes of errors into very specific pieces of your architecture. That way, you don't have to care about the most common classes of checked errors in unrelated code. Basic stuff. Unfortunately, in commercial code, even this basic hygiene isn't necessarily so common.
I like XStream but it is way too slow. It's nice because you don't have to do much, but it has to use reflection for that to work. Reflection will always kill performance. I didn't notice the speed when I first adopted it, but down the line I had to read several mb of xml and it take forever. It was on the order of 5-10x slower than using xpp3, commons-config, or a number of other readers. If you have a couple small files, XStream can work for you. If you are doing a lot of parsing, look elsewhere. These days I use [Apache Avro](http://avro.apache.org/) and do everything with json.
While this is a nice idea, in practice, I can see the majority of people who look for help here being scared off by the following line: &gt; Fork this project, copy your code into the src/main/java directory, then commit and push your work into GitHub. A lot of the people who ask for help don't know the difference between a class or an interface (not bashing them, we were all there once), so I'd be surprised if they knew how to fork projects and work with Git/Github.
every time i open a .java file
You're right. Following these instructions demonstrates a certain capacity for self-directed learning. They can be further refined so as to walk through the steps of forking, editing, and adding code, using only a browser. If we create a little higher expectations, however, we can at least get most people to create a Gist.
One equals is an assignment, two equals is a comparison. So, this assigns the value '1' to variable 'a': int a = 1; And this checks to see if a is equal to 1. The comparison will return true or false, and that value is assigned to the variable 'isEqual': bool isEqual = (a == 1); Edit: You should probably never actually need to set a boolean like that, it's just for illustration purposes. Generally, comparisons are used in conditional statements like this: if(a == 1) { //Do something }
Got it. Thanks.
Don't forget, when comparing strings use the .equals() method
Can you elaborate on this? I'm not sure what you mean.
I think I can safely say that most people that are going to be asking for java help with either not know what Git is, or at least not know how to use it. I agree that this is a nice idea, but I don't see it being incredibly helpful without a more complete instruction set.
If you try to use == on any non-primitive, Java checks if the address of the memory locations are the same, not the value. I think it was done for performance reasons. So if you had this in your code String a="123"; String b="123"; Then a==b will return false, and a.equals(b) will return true. EDIT: As Mecdemort pointed, that will actually print true. However this code illustrates the problem. String a="123"; String b="12"; b+="3"; System.out.println(a==b); System.out.println(b); prints false 123 
At least make the base project work. Maven defaults to `-source 1.3`, breaking your main method argument-arity. I can't believe the only way to fix it is through a plugin, but that's all I can find. (Ant user here) 
&gt;If you try to use == on any non-int Not tested it, but I think == works as expected on any primitive item (bool, char, etc), rather than just ints.
The people you want to use this, can't. For a new person in their first Java class they will have no idea what Maven is or how to use it; heck I've been doing Java for 11 years now and only learned Maven about a year ago. That and you're not providing them with anything at all really. You've written the *main* method for them... that's it. What's wrong with them pasting code pieces into Reddit? You'd be much better off to write up a "How to post an effective question to Reddit" FAQ including how to format code in Reddit, what things are likely needed to ask questions, etc. Signing up for Github, forking a project, figuring out the Maven project structure... not gonna happen with the people you're targetting this at. Sure that stuff is easy to do, but the people that can't do this.... their question is probably easy too.
jxl API for parsing *.xls files. Great!
Yeah, that was a brainfart on my part, along with forgetting to complete my post. Definitely works on bool, or else I have a lot of else-statements that are always hit. Fixed.
Good point. I'm test driving IDEA 11, and had gotten used to the project JDK level setting also being propagated into ``pom.xml``... which it apparently doesn't in IDEA.
All valid concerns. This isn't for everyone. It's targeted at those searching for Java help, who have the most willingness and/or capacity to receive that help efficiently. That's the group of people I'm interested in helping.
Aren't literal strings in source interned therefore a==b would be true in this instance?
I agree that the people asking questions are generally incapable of using Git and Maven, and they're usually in too much of a hurry to spend time learning. However: &gt; What's wrong with them pasting code pieces into Reddit? I find it very hard to communicate code changes with someone who just dumps their code on reddit. I have to gather it up back up into source files, possibly fetching their source zip file from MediaFire. Often they omit critical pieces of code from this whole process, or provide out-of-date sources. Then I have to describe the solution mostly in prose, because pasting the entire fix back into reddit is usually not helpful. And if I'm lucky, they actually respond to me, rather than [ask for help and disappear](http://www.reddit.com/r/javahelp/comments/n3odz/fixme_im_losing_my_mind_trying_to_get_this_to/). If they use GitHub, or similar, this process is 1000x easier. 
You're right. Thats what I get for not testing my code. 
That's the spirit! Sorry for being a Debbie downer.
Maven makes me cry, and I've been working fulltime in Java for something like 6 years now. Don't get me started on the flaws on Maven. At least Ant would have been easier, but even saying "right click the build.xml and click 'compile'" or "install Ant, go to a command line and type in `ant build`" is a pretty significant step full with problems.
Just some feedback if anyone is interested I managed to get the basic writing the file / compiling it part done. I guess the next step would be syntax highlighting or add more features :)
Strings equality is complicated by the String Pool, though. Use of .equals() is recommended in all cases. 
I thought Maven defaults to 1.5 without maven-compiler set to 1.6?
I'm running Maven 2.2.1 on Ubuntu 11.10 with OpenJDK 6, and before mikaelehg fixed it Maven was complaining: [INFO] Compilation failure Application.java:[11,41] variable-arity methods are not supported in -source 1.3 It does seem like a really poor default for 2011. 
Yeah this was the point of my example. I once saw a program that threw nothing but Exception - even to the point of catching scoped exceptions and rethrowing them as Exception
Psh, I'd be happy with "decent description of steps to recreate".
gold...
its alway fun looking back over old code and going uh......
+1 for Lucene. Killer full-text index, and the Solr extension with faceting is just sublime.
I actually do more professional C# development than Java, and I don't care for it at all. I find the community to be vastly inferior (both on articles and tutorials, and also in 3rd party libraries, since the .Net stuff generally costs money), the language to have too many features, and the IDE to be pretty bad (I'm only using Visual Studio 2008, in fairness). I can see why people would like C#, but I'd certainly rather not use it if I had a choice.
Called!
Thanks, i'll look into it, here's a fish for your trouble. &lt;&gt;&lt;
Voting down, because I am sick of these pointless images trying to invade other subreddits. Enabling it just makes it worse, and a few months later you have people arguing over if we should create a [/r/truejava](/r/truejava) subreddit so we don't have to put up with Ducks+cats telling us stupid syntax jokes. 
&gt; "based on 745 applications." So makes a generalizing statement, then goes on to try and sell a product, created by the people who wrote the report. 
Which is really just a more complicated way to get to the stacktrace.
Don't you think these Java related comics tell a real story that very many of us can identify with and enjoy?
At least the user does it, and not the developer.
Voting down, because you need to grow up and acquire a sense of humour. It's reddit, for the love of peace.
It's generally more complicated to explain to a user that he can copy-paste the displayed stack-trace in a mail. It's easier in my opinion to ask for steps to recreate.
There is hardly any activity in /r/java anyway. No need to fragment what little community there is.
0xDECAFBAD
One already exists :) I wrote it like a decade ago... http://maven.apache.org/jxr/ Here's an example of the output: http://netty.io/docs/stable/xref/
You don't need to learn Java *first*, but you'll have to learn Java as you work with Play. That said, using Play is probably one of the easiest way to get started on Java because it's a full stack you don't have to learn complex APIs to get work done.
Morning (US east/central midnight to midday) redditors have way less of a sense of humor than afternoon redditors. One of these days I'll have to write and submit a full statistical analysis of this phenomenon.
Both are useful, because there may be multiple paths through the code that produces the same stack trace (e.g. Method A has an if statement in which both branches calls method B, but with different arguments), so each contains a bit of extra info not available from the other. 
Cool, there is also a SWT tutorial if you prefer that toolkit.
I never understood the difficulty in this. I did some bug testing a while back, and always made sure I could recreate a bug before sending it off to the devs. Sometimes it took an hour, but damned if I didn't nail down the steps to recreate in the process. Not that everyone should spend that much time on a single bug, but if you can recreate it you ought to be able to intelligently explain how.
The most frustrating is when you ask "What did the error message *say*?" and no one can tell you. 
The picture is kind of redundant, as it is exactly the same as the thread title. 
[I don't remember](http://lmgtfy.com/?q=gtfo)
As mentioned by someone else, you already said the punchline in the title, so the comic is pointless. From a Java point of view the comic is also pointless. I know some people love Karma and like posting stupid stuff like this to karma whore, but I would much prefer to read stuff that is relevant to Java on [/r/java](/r/java). 
Next time ask for a screen shoot.
which is why I always try to log such things before allowing user to see them - then I get user to email them to me
What if your dev's can't read stacktraces and you have to do it for them?
Whenever I type pubic instead of public it makes me chuckle
after one too many screen shots of a generic error message , sometimes with the stack trace visible but the important bit obscured - I just log lots of things, including exception stack traces, which forms user opened, messages displayed and what button they pressed. Now I just ask them to send me the log file - and neither of us gets unhappy with the other
I'm with you on that. I tried to learn Maven and got nowhere because I would constantly encounter problems that the tutorials/books didn't mention. I got the impression that some Maven repositories were down or something.
Me: "What does the error message say?" User: "I don't remember." M: "Ok, what where you doing when you got the error?" U: "I don't remember." M: "Ok, when did you get the error so that I can check the logs?" U: "Sometime last week. Maybe, or was it yesterday..."
What happens if the system crashes and you're not sure what you did, and you can't get it to crash again? Do you keep radio silence even though you know there's a problem somewhere?
I guess that would depend on the project. Part of my doggedness about figuring out how to reproduce bugs was that I worked on a large project (an MMO), and we were specifically told not to report anything that we weren't able to reproduce.
Or you add a button ("Send report to fix this bug")
annoying as fuck
Narrated by: Stan's dad.
I may be wrong, but I Believe you are now Oracle Certified, since Sun was bought out by Oracle. I know that's what I'm working towards, an Oracle certification. It sounds fancy, Like the Oracle of all Java Knowledge. 
Since it's one of the most hated companies in the world (Oracle that is) it sounds anything but fancy to the average tech person. Not that it takes away from the certification, but the worst things about Oracle certifications is the word "Oracle" in them.
You have to pay for this??
hmmm Why hated?
&gt;This course is free for all users
While I commend you on the videos, I am not overly thrilled at having to download a 3rd party EXE to view video. So that would be a blocking point for many. Also, the person who posted it appears not to exist in Reddit anymore.
Not sure if serious.. 
uhhhh the EXE download is super fishy. Is there something wrong with AVI?
Do companies still care about developers getting their certifications? The only java professionals I've run into that are still touting certifications are foreigners trying to get their first job in the states.
I click on the link and click to allow the embedded flash player, and the video starts (running ubuntu/firefox/noscript). I don't see any prompt for a download.
Using Chrome here. I click any of the links and I get a large black box and just below it, it says "download the application please visit www.mrbool.com/player". I follow that link and it sends me a zip file with an EXE in it. It is a bit strange, because if I go to MrBool and look at other videos they work fine. 
U mad? I don't hate it and I don't work/use any of their products. I'm a C++ developer and we use DB2 at work. 
I have no formal training in CompSci, but this book seems like a pretty standard 1st or 2nd year text. It's one of the best technical book purchases I ever made, imho: [Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and the Unified Process by Craig Larman](http://www.amazon.com/Applying-UML-Patterns-Introduction-Object-Oriented/dp/0130925691). I would recommend it to anyone who wants to learn programming. Goes great with the classic "GoF" book, [Design Patterns](http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612). For any particular language's syntax and libraries, I just read [the docs](http://docs.oracle.com/javase/6/docs/) and check stackoverflow or IRC for any tricky idioms and for best practices.
Right, and you are in /r/java for trolling?
I know how to program in Java since Java 1.2 and I keep myself up to date on Java issues. You?
Ah, you want to keep yourself updated on Java issues, but you do not know why Oracle is hated. Not sure if serious.
I enjoyed reading through [CodeComplete](http://cc2e.com/). I think it a good introduction to good software design and implementation practices. It seems like a good step from knowing the syntax and core libraries to writing real software.
Some people hate Microsoft, some hate Apple, others hate Oracle, Facebook, whatever. There's no "I want to" in any of my comments. I keep myself updated.
http://mrbool.com/course/buycourse.asp?curso=226 
&gt;U mad? Not at all. I guess you are serious. Oracle are universally disliked in tech because they rarely invent anything. Apart from their Original database that got them started many moons ago, Oracle just acquires products, splits them into different catagories, and re-sells them as basic, advanced, enterprise packages. Even though only a year earlier you had the entire thing with the original company. They then, not being that big into development, let the products die because they don't give a shit about them. Their main fucntion the last 10 years seems to be suing people. Acquire companies for patents, and then sue other companies. Apple and Microsoft look like angels compared to Oracle in this field. They are the largest patent trolls in Silicon Valley. They actually acquire entire companies, only with the purpose of using their gains to sue people. Unlike most "normal" companies who buy other companies to improve their existing products or gain technology. Now that Oracle now own Java, they have let it stagnate because they don't care. The only bought it so they could sue people. Google, Javas largest evangelist until last year, is being sued by Oracle for **billions**. Oracles plan was to buy sun micro systems for Java and other technologies for 7 billion, and then sue Javas biggest partner for 6 billion, and get the company for a bargain at 1 billion, which they can make up the rest suing whoever for whatever. Its shit like that man. They are just a legal firm that sells other peoples shit on the side. edit: Relevant XKCD comic: http://thinkingoutloud.gr/wordpress/wp-content/uploads/2011/07/org-chart.jpg
Effective Java, 2nd ed. - Joshua Bloch
Some people don't give a toss about the politics and drama that goes on in the background, and just do the development work. 
My Programming Paradigms class called `make` and the like "Rule Based Languages". You might also call it [Declarative Programming](http://en.wikipedia.org/wiki/Declarative_programming)
Right.....I suppose such people worked at Peoplesoft.
Tried it on OSX. I get the message and the video plays. Seems a bit strange. 
Ahhh, rule based - that sounds about right. Declarative sounds/feels functional and Lispy - I suppose something like make or ant fits this description "A program that describes what computation should be performed and not how to compute it".
Effective Java, Java concurrency in practice, Java Puzzlers. But I also really suggest learning something different, too, if you plan to become a developer and not just a Java programmer. My suggestion: Programming in Scala.
Question. How do these test compare to a CS Major? For example will this be on par difficulty wise with an algorithms or programming class? 
unless there's an official osx jdk it's not really available IMO.
If you like the Head First Java book, I think you'll enjoy the Head First Design Patterns book as well. It has the same style, and it is quite good (although there is much more to the craft than those two books might imply).
All the books mentioned here are good, Effective Java 2nd edition, Head first design patterns, etc.. Try [growing-object-oriented-software](http://www.growing-object-oriented-software.com/) it's a really good book. Essential. Also [CleanCode](http://www.amazon.co.uk/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) by Uncle Bob (Robert C Martin) 
How you feel when you ace a java final
I like [Esper](http://esper.codehaus.org/) a lot, an engine for complex event processing.
unless there's an official plan 9 jdk it's not really available IMO.
unless there's an official FTOS jdk it's not really available IMO.
1.) Next time try [/r/javahelp](http://www.reddit.com/r/javahelp) *in advanced* of the assignment. [sun/oracle's](http://docs.oracle.com/javase/tutorial/reallybigindex.html) tutorials are good for the basics too. 2.) You should be ashamed of yourself for attempting to pay someone to do your academic work for you. These are absolute basic skills you should know if you plan to do this for a career. 3.) Seriously, you should be ashamed. You're diluting the value of CS degrees everywhere. 
Spring does not really simplify anything anymore.
[changelog](http://www.oracle.com/technetwork/java/javase/7u2-relnotes-1394228.html)
thanks dawg.
Uhm, they haven't exactly let Java stagnate. They pushed Java 7 out the door, have a solid (whether you agree with it or not) roadmap for the next few releases and actually seem to be following a schedule. How have they let it stagnate?
Maybe instead of a book try solving some real world problem and rely on your own skills to solve instead of a book. If you're done with one book that should be enough, you probably know the basics of programming like for loops or creating new threads. That's basically all the theory you need to know, anything else you'll learn by doing work.
 PersistenceAnnotationBeanPostProcessor processor = ((XmlBeanFactory)ApplicationContext.get(this).getBeanFactory()).createProcessor(null, null, null, null, null, null, null, null, null, 1.0f); processor.finder(new ManagedJDBCFinder(new ConfigurationXMLStreamReader(XMLStreamReaderFactory.createNewXMLStreamReader(), null, true)) { public boolean find(String pattern, int location, XMLApplicationContext context) { if (context == null) return false; else return 0 &gt; FinderFactoryBean.getSingleton().createNewXmlFinderFactory().getFinderFor(StringUtils.checkNull(pattern)).find() ? location &lt;= -1 : false; } }); wait(1000); // let's wait till it finds it // and now the difficult part begins... 
JavaFX included by default? Wow.
Ahahaha. I see.
Out-The-Box Multi Platform. U Mad?
I've just started learning java, should i get the update? i had a look at the change log but most of it is over my head. Could this screw up any of the programs i have already written? I'm a bit wary of updates ever since the dragons started flying backwards.
Well I'm currently on a apprenticeship (18 y/o) rather than going through University, so I'm kinda in the same as the foreigners, I won't have a degree, but I'll also not have the debt and I feel that once I get underway, I should get hired on experience and the fact I have proved my worth.
If you were already using JDK 1.7, then yes. If you were using an older version of JDK (1.5 or 1.6), I would wait. Cheers
http://jdk7.java.net/macportpreview/ Is this official enough? I've been using it with Eclipse Indigo and everything works fine.
Amazing! Thanks for sharing... I'm gonna start using that tomorrow :o)
Thanks for that, looks really good
JDK / JRE link: http://www.oracle.com/technetwork/java/javase/downloads/index.html
Guava vs. Apache Commons? FIGHT!
A certification and some open source development under your belt will go a long way with employers who do not require a degree to get an interview.
are there more functions?
this type of code wold be more procedurally based. since java is object oriented, you should try putting this into a method that takes "rolls" and "size" ans integer parameters, and returns (what I believe is) and array of integers. calling the method will get you your result and the variable rolls will go through the JVMs garbage cleanup
You can actually write that without the if, just keeping the { and } in. Then rolls will only be within the brackets. It's probably not the best way to do something like this, but I can see it possibly being useful in some contexts.
It's only a beginning Java class. Just reads in file two ways. 
In C, it's fine. In Java, learn to describe the problem through objects which each solve a discrete part of the problem. The trick in object-oriented thinking is to isolate those parts of the solution which are likely to change together. That way, you can hide "implementation details" from the other parts of the solution, and you don't need to think of the entire solution at the same time, to make sure that you don't accidentally break something unrelated, when changing one part.
Wait for what? Not that this is a very important update, if you're already on 7.0u1. If you're on 7.0, I would definitely upgrade, for the VM bugfixes.
Jack and jil 
(I don't have the source in front of me right now, so I might have some technical details wrong, but to acceptable accuracy) I'm familiar with encapsulation and I've done it in this class; The reason this snippet exists is simply to assign readable names to the otherwise annoying rolls[0], rolls[1]... The only way to encapsulate this block would be to abuse side effects, and invoke it with, for example, rollsToNamedVars(int outConversionSize, int[] inRoll, int outTotal, int[] outResults), but that's not a very good solution.
The method you suggest is exactly what roll(num, siz) does. What I'm doing is simply assigning readable names to those values. Once that's done, I no longer need the unreadable names, so I scope them out.
you don't need the "if(true)" part; the braces alone will do.
http://pastebin.com/UJjk1YZr better version if you want to add other stuff feel free
Reminds me of our group software project where we had to make a monopoly clone. When the user entered 1 for the number of players a dialogue appeared telling them they couldn't play alone with a picture of the forever alone guy.
Not as far as collections go. Apache Commons collections stopped with java 1.4 (ie, no generics), so there's no competition.
We sir need more people like you!
Google guava is freaking awesome. I could see a lot of the collections section getting folded back into the core collections as extension methods in Java 8, except that Google and Oracle kind of hate each other right now.
The problem in this case is that you haven't added the action listener to the button. I assume you know how to do that already since its in your code so I won't go into detail describing how to do it. what you do need to do is in your method "actionPerformed(ActionEvent e)" create an if statement such as "if ((Button)e == instructionsButtonName){//do button stuff;} else if((TextField)e == n1){//do text field stuff;} sorry for the formatting, I typed it on an ipod
Exactly! Here is some example code to demonstrate! int outerVariable = 5; { int innerVariable = 6; } outerVariable = innerVariable; // This breaks because "innerVariable" is out of scope!
My 2 cents is that proven open source development experience is 10x more valuable than a certification. That being said, I tend to hire new developers with degrees because it shows that they can finish something that they started a long time ago. State colleges are incredibly cheap and a degree will go a long way, especially once you start trying to advance your career beyond junior development roles. That being said: I can only speak from my own experiences and you may very well end up super successful with your path-less-traveled. Best of luck to you! :)
Sometimes it's useful in switch statements: switch (foo) { case 1: { // your messy local variables here } break;
Depends on where in the world you are. Careers@SO appears to be better for US and Western Europe than for other parts of the world.
So rolls[0] is an int describing one thing, while rolls[1] describes something else. If I understand you correctly then you should not be using an array, but instead be using a class with attribute names for all the different ints, that would increase readability much more than assigning names in a scope like you are doing above. It is ok to do something on your own to test things out, but when other people are going to be reading your code it is better to follow agreed upon patterns and especially language standards like encapsulation.
holy crap. this is great. thanks.
holy crap. this is great. thanks.
This is kind of like when my grandpa used to tell me I wasn't allowed to go swimming until I knew how.
I don't know where you got your Polygon class, but you should use a [Shape](http://docs.oracle.com/javase/6/docs/api/java/awt/Shape.html) instead, specifically a [Path2D](http://docs.oracle.com/javase/6/docs/api/java/awt/geom/Path2D.html). Cast your Graphics to a [Graphics2D](http://docs.oracle.com/javase/6/docs/api/java/awt/Graphics2D.html) and use [Graphics2D.clip()](http://docs.oracle.com/javase/6/docs/api/java/awt/Graphics2D.html#clip(java.awt.Shape\)) with your polygon. It prevents anything from being drawn outside your Shape. 
had mine today &amp;#3237;\_&amp;#3237; 
Had mine [yesterday](http://www.cartoondollemporium.com/forum/pics/cdeblog/2011/04/reallyhappydog-300x210.jpg).
Eclipse is my favorite it has tons of tools in it and a whole plugin scheme. Then imo netbeans would be next. It has a swing autobuilding built in. Bluej is what they make you use in school to see the links between objects. And then you have various command line compilers that you code in like notepad and compile from there
You have some weird stuff going on here such as line 26 and 27. Idk why you need these two from quick looking at it but if you wnat a quick fix just switch them to &gt;inputDevice.nextLine(); &gt;item[p] = inputDevice.nextLine(); for some reason its picking up a blank line and then its getting the entered line so this way it wont save the blank line but this is bad code right here
A Texteditor! First learn the basic stuff like classpaths, jar generation and ant. After that i can recommend eclipse. Netbeans never really got me.
If love stuff like: if(ArrayList.size() ==2) //do stuff; Always makes me think: dynamic programming, FTW!
Read the programming subreddit! Great stuff over there.
Also you should use and ArrayList&lt;String&gt; and then use array.add(input here); Then in your for loop for(int x = 0; x&lt;array.size(); x++)
Guava makes Java fun again.
I've been coding Java for over a decade - I say Eclipse wins, IntelliJ Idea comes second, NetBeans third.
I'm in the UK. Degrees are exspensive, You're looking at about 5K average to pay for just the course, then you have matierials, accomodation e.t.c. I'm also with the Information Services department at one of the biggest Energy companies in the UK, and I plan to stay with them more or less indefinitely unless I get offered a better oppurtunity. I won't be shopping around, they look after me too well. :) Oh and thanks for the luck :) *Puts in Luck Jar*
http://blogs.oracle.com/briangoetz/resource/devoxx-lang-lib-vm-co-evol.pdf List&lt;Student&gt; students = ... double highestScore = students.filter(s -&gt; s.getGradYear() == 2011) .map(s -&gt; s.getScore()) .reduce(0.0, Integer::max);
They were good when they were good.
Each of them suits a certain workflow best. Currently, I have all three open, for different projects. With the version 11, the useability of IDEA really improved.
Hey, it's not terrible. You're getting the hang of it. One recommendation: your IDE has an autoformat/reformat functionality, which you should use before sharing the code. Additionally, https://gist.github.com/ is much better than pastebin for sharing code.
Monster, search for Java.
&gt; Yarrr! Here be a placeholder! Too bad... I was really curious when I saw "Functional idioms"...
Which was long ago.
http://youtu.be/cADgZqts9mM?hd=1
Well... map and filter are the big ones: Collection&lt;Integer&gt; subscriberIds = Collections2.map(new Function&lt;Subscriber, Integer&gt;() { public Integer apply(Subscriber subscriber) { return subscriber.getId(); } }, subscribers); Collection&lt;Subscriber&gt; evenIdSubscribers = Collections2.filter(new Predicate&lt;Subscriber&gt;() { public boolean apply(Subscriber subscriber) { return subscriber.getId() % 2 == 0; } }, subscribers);
Pretty. Not very java-esque but who isn't fed up by java limitations on the functional side ?..
After a few minutes reading guava's API, I'll I will be happy not to include the not-at-all-impressive commons in my next java project.
thank you
Sounds like you have yourself in a pretty good situation already then! Always be on the lookout for programs at work where they'll pay for you go go to school. Even though it's not fair, it's much easier for HR to filter resumes based on if an applicant has a degree or not rather than filtering based on actual competence. The 5k is for a single course, not for a semester of courses? That's as expensive as private universities are here in the states. I'm quite surprised by that!
[vim](http://www.vim.org/). Minimal overhead, fully customizable. Little bit of a learning curve. 
For the actual printing part, this won't fix your problem but instead of using a while loop and incrementing you can use a for loop which is basically the same thing just built in For(int i = 0; i &lt; array.length; i++) Basic meaning: For(start num; while this is true; do this between each step)
I've used IntelliJ, NetBeans and Eclipse extensively, and I would say IntelliJ is definitely the best - it is the only thing that comes close to being as nice as Visual Studio is for .Net. However, I would have to side with kirizzel and recommend a more bare bones approach until you get the hang of the basics. The analogy of getting into the cockpit of a commercial airliner without really knowing how to fly a single-engine plane comes to mind. My recommendation is to start with a "smart" text editor that knows java syntax, so it'll bitch at you if you forget a semicolon, but not much else. jEdit is not a bad choice. EDIT: Sorry, you asked why. The few reasons that come to mind: * The built-in merge tool is excellent. Still not quite as good as BeyondCompare, but I don't run in a Windows environment, so I can't use that. * Excellent out-of-the-box support for javascript, html, css, and a slew of view technologies (jsp, facelets, etc.) Eclipse takes A LOT of tinkering to get that stuff right, and still in the end it's not as nice - for example, in many places you can't ctrl-click from an EL expression to zoom to the class. * Lots of code-navigation niceties, like when you're looking at an interface class, with a single click you can see all the known implementors. * Really great support for version control browsing - for example from looking at a history of a file, you can pick a commit and show all the other changes that were part of that commit. Excellent support for svn changesets and for shelving/unshelving the sets. * Very nice out-of-the-box integration with app servers. * Rich JPA integration - for example detects queries in Java code, will provide code completion help with parameters. * Less prone to hanging up when it's doing stuff. Importing a big maven module != coffee break. The bad: You have to pay for it. Also, as I mentioned earlier, if you're starting out you don't really need all this stuff - although if you're doing web stuff, the support there can be quite handy.
apparently you ladies missed the part where i was trolololling
I do something like this in a project I've worked on. It generates java code using freemarker. I didn't want to work a variable into the freemarker template for tracking loop index and such to rename everything so I just put an if(true){} around them. I may fix it at some point but I don't feel that strongly about it.
I haven't tired IntelliJ yet, but everytime I use VS I wish I could go back to Eclipse (at least until I've installed Resharper). Sure it's a matter of taste, but I have no idea why anybody would like an IDE to be like VS...
Why bother with all that? for (int i : array)
 System.out.println(Arrays.asList(item)) Also, your use of `////////////////////` indicates to me that you are probably not using a syntax-highlighting editor. If not, change that!
http://stackoverflow.com/questions/4542550/what-are-the-big-improvements-between-guava-and-apache-equivalent-libraries
Console or GUI. Pick one.
That's (how) C (was supposed to be) ;)
I haven't used it extensively, but the main point from what I remember is things "just working". Install VS, write a web page, press "Run" to deploy it onto the packaged IIS server. MS controls all the technologies, and they take advantage of this by having really nice tight integration between them in the IDE. This was almost 4 years ago, when getting things to be anywhere near as cohesive in the Java world took about a day.
[Joda-time](http://joda-time.sourceforge.net/) is great if you need to do anything time, date or period related.
Only did Desktop GUIs, never web development, so I can't say anything about ASPX and Client/Server stuff. I can understand that the integration is better when it comes to stuff like this, but when I just look at the code development tools... VS's refactoring support is a joke if you don't enhance it with (pretty expensive) tools like Resharper. Everything costs money (which bothers me as a student, although I get VS for free) and then I open Eclipse and every tool or mechanism I could dream about is there. Not really a fair and objective comparison, but when it comes to simple coding I really prefer Eclipse to VS. Which doesn't help answering OP's question at all :-P
At that point you should probably be creating a separate function.
It depends :)
Ugly syntax, though. Pretty trivial to implement these on your own.
So you basically want your logic to limit the generation of random numbers to the bounds of the polygon. Something like: int x1; boolean gotNumberInBounds = false; while(!gotNumberInBounds){ x1 = (int)((Math.random()*1000)+0); if(x1 &gt;= 0 &amp;&amp; x&lt;= 725){ gotNumberInBounds = true; } } } This technique will eventually (although theoretically it could never) generate an x that will be within you bounds. However, you may also to want to modify your x coordinate generation. Since the random number generator will generate a number between 0 and 1, multiplying by 725 instead will generate a number no greater than 725 and no less than 0. Do this for your y values too and you'll have much more efficient code than the first option I gave. Both should work, though.
I do Java EE work, and I would rate them IntelliJ, NetBeans, then Eclipse. Having said that, it is entirely personal preference, play with them and see what you like the most.
Eclipse gets my vote. Out of curousity, does anyone still use/has anyone EVER used [DrJava](http://drjava.org/)? I used it when I was first learning Java in school. It was so unwieldly back then that, when I discovered Eclipse, it was like I had just discovered bacon.
Ouch. Why not just use Scala then?
I wouldn't let the fact that VS or other IDEs cost money bother you at all, because you're almost never going to be using them in a vacuum anyway. If your organization uses VS or another commercial IDE like IntelliJ, then they will pay for it without really blinking. That's just the way it's done. 
DrJava is specifically designed for learning Java. It's meant to give you an environment in which to focus on the basics without getting caught up in all the whiz-bang features that a normal IDE provides. FWIW - DrJava is a [spiritual successor to DrScheme and BlueJ](http://drjava.org/papers/drjava-paper.shtml) both of which are still active projects AFAIK.
Well I was just showing a for statement in general, not specifically this example
I'd prefer it! The Scala version is something like this, right? val subscriberIds = map(_.getId()) val evenSubscriberIds = filter(_.getId() % 2 == 0)
O.o little bit? :P i'd say it has a fairly steep learning curve, but once you DO know the ins and outs can be really powerful and quick.
I have used [Drools](http://www.jboss.org/drools) a lot, do you know how they compare ?
Why are you limiting yourself to one language when it comes to job hunting? That's fine if you're an expert and if it's what you prefer but you'll find a job much quicker if you broaden your talents a bit. If you can't find any, I'd look for jobs in C#, they're quite syntactically similar. 
[IntelliJ IDEA Community Edition](http://www.jetbrains.com/idea/download/index.html) offers an accessible amount of functionality for someone new. As one progresses, the convenience of technology and framework support becomes apparent. It's a good way to get your feet wet for free.
Basics first -- good point.
The Goddam Batamn would use ViM
&gt; So which IDE is the best None &gt; and why? Different people/teams have different priorities/needs. &gt; Im a beginner and only know of a few I prefer Eclipse (self.java) You can go a long way with Eclipse as your IDE so stick with it if you like it. Other IDEs are also great (I use IntelliJ but money isn't an issue since my corp pays for it). You can get bogged down in trying out different IDEs and it will only waste your time, time better spent learning how to program.
So keep the console output and add the all the thing guy as ascii art!
And in the latest version, for this and other reasons, I did switch to a RollData class from that int[]. I was just wondering if this particular technique for limiting the scope of variables was a common thing.
[Beyond compare](http://www.scootersoftware.com/download.php) is available on Linux now too. Great when you're doing big merges as it handles directory comparisons much better than KDiff.
Yes, something like: val subscriberIds = subscribers.map(_.id) val evenSubscribers = subscribers.filter(_.id % 2 == 0) You don't need all the Getter/Setter-stuff anymore in Scala.
When comparing to Eclipce that I use with java. Vim really lacks on the code completion. I have never got it to the level I want it to. But I do use vim for c++, PHP, etc.
Awesome.
IntelliJ hands down. It's a JAVA ide. It knows its place and does it fantastically well. I find eclipse to be a sandbox for developing applications, where the most popular application just happens to be a java editor. 
Your problem is the nextInt method at line 22 it gives you the input from the user but it doesn´t sets the scanner on the next line. I see that you encontered that problem because of line 27 but i guess you weren´t aware of what really happend. For the solution just switch the lines 26 and 27 and it will give you the itemname at your output. To fix the "null" output: items.length will return the length of the array which is in that case 50. Thats the reason of the wall of null values. For an easy fix add "if (array[p] != null)" before printing the value. Keep working and your code will get better. As mentioned before it would be easier to work with an ArrayList and a foreach. Moreover to improve your coding: 1. Class name should start with an uppercase char 2. What you really want is an array of todolist items (objects of the TodoListItem class) Which means u have to create a TodoListItem class which represents a item in the todolist -&gt; something like that http://pastebin.com/wZfG9kfN 
emacs with jdee
What's not Java-esque about an anonymous inner class?
Command line plus emacs or vi.
Netbeans is still the best and simplest. - Full featured, with lots of code generation features. Far better then VS2010. 
The look and feel of an IDE is something very important to me, and Eclipse wins in that regard. I don't really like the feel of IntelliJ... I feel like I'm working in an applet or something when I'm using it (is it using swing?). For the features I don't know. I have not had any problems so far with Eclipse.
But without a job experience in C# nobody will take you...
Keep in mind that Resharper and IntelliJ IDEA are both made by the same company (Jetbrains) ;), so there's a lot of that Resharper-esque polish in IDEA
Since IntelliJ doesn't have multiproject capabilities (in the same window)... Eclipse overtakes it by every side. Eclipse is the IDE with the most number of plugins, has no rivals. I also use NetBeans, but because I like to change sometimes... 
Yes, it's built in Swing. I get the same feeling unless I'm using SWT-based Java apps.
I think it's better and simpler to write a method that does that calculation... isn't it? results = this.calculateThat()
A common concern. I am curious though. Specificity, what's your beef? Things like: System.out.println is a library naming choice and not specificity the language. On the whole, I think in the ecosystem of software development, the tools that one uses can be as important as the language that one uses. I think it's reasonable to defer the responsibility of some things that shouldn't be covered in the language. I love what I see is a pure and clean Language because things like code completion serve my needs of not typing too much. I'm also a big fan of strong naming conventions so I generally avoid all but the most common of abbreviations in naming. thisIsAVariableName isn't a big deal to me because it's self documenting and code completion in Eclipse makes using it a breeze. Just some thoughts.
Cool! Thanks for sharing.
It depends on what you want to do in the future. But it's a good idea to get knowledges in several paradigms (OO, functional, etc.). Learning SQL seriously would be a very good idea too. And as you'll have so much time, try to do some projects by yourself, that's the best way to learn about programming. Read some books and work hard.
Apache Karaf is a small OSGi based runtime which provides a lightweight container onto which various components and applications can be deployed. If you're wondering what OSGi is, then please see the description from http://www.osgi.org/About/Technology: "OSGi technology is the dynamic module system for Java™. The OSGi Service Platform provides functionality to Java that makes Java the premier environment for software integration and thus for development. Java provides the portability that is required to support products on many different platforms. The OSGi technology provides the standardized primitives that allow applications to be constructed from small, reusable and collaborative components. These components can be composed into an application and deployed." In this post I introduce the new Karaf Archive deployment model, talk about some of its benefits, and then discuss in brief a demo of building &amp; using a Kar.
If there were more developers that shared your feelings on self documenting code I would curse a lot less.
I work on the mainframe and have to weed through COBOL sometimes. Java's verbosity is not bad compared to that.
Sorry. I guess I'm thinking in terms of the Northern Ireland. I have no job experience with Java, only two years of uni experience. When I applied for placement (it's like internship but we get a paid contract for 12 months at the same wage as full time employees). I had about 6 months experience with C# yet, they stuck me in a team where we developed in ASP.Net (about 3 months experience) and C#. Frankly, I find it just as easy as Java. They're almost the same (apart from a few feature differences like Linq, quite a nice technology I must say). You might say that placement is different, but I've been working with a post-grad and he studied at the same uni as me so I know he has done the same classes. I don't know what the job market is where ever you are but here they are snapping every graduate they can get; even if your expertise aren't exactly what they're looking for.
IDEa IntelliJ - I've been happiliy using it for a good 10 years or more now.
I spend a great deal of energy defining good names for things. It means that I'm dependant on refactoring tools and code completion... but I kind of think that at this stage of the game, any developer who develops without them is wasting their time. Using basic text editors is like a woodworker who only uses a handsaw to cut things. 
thanks for the reply &gt;For an easy fix add "if (array[p] != null)" before printing the value. that really helped alot! and i see what you mean about switching around the two lines. it works now :)
thanks for the tip man! 
yeah ive used for loops before, for now i use while loops just because its easier for me to visualize whats actually going on (im still extremely new to java) thanks for the tip though! i appreciate your help
Whoa, awesome. It really is the absolute best for big jobs - I think certain merges I've done I simply wouldn't have been able to do without it (not without mistakes, anyway.) All the filtering options can really lighten the cognitive load. Thanks :)
JavaLang.getVerbosity().equals(Verbosity.TOODAMNHIGH)
Needs more factories.
Absolutely - having an array where data at different indexes represents different things is REALLY bad. Some arguments for change: * It's hard to read. * It scales poorly. A bit hypothetical here, but what if you have enough rolls for their sum to exceed the max value for int? Do you then have to make each roll a long, doubling the size of your array, simply to store a single member? * I would have the roll method return a list, and compute the total in the caller - you are already scaling it there, so there isn't really a break in encapsulation. Also this way your entire scope problem goes away - you don't need the rolls array anymore, you just return directly into result. Also you save a potentially expensive array copy operation.
Out of curiosity, do you have your Eclipse set up to automatically complete what you type, or do you have to manually trigger it? I became a much, much stronger believer in Eclipse's code completion when I stopped having to ctrl+space to activate it, when it was there after everything I typed.
ya, it automatically comes up. 
Not really a common use - generally the goal is to write methods small enough that you don't need to resort to such things. The only common(ish) uses that come to mind for java blocks are synchronized(objectA){...} and static{...}. If you're finding yourself wanting to use blocks for variable scoping, chances are you just need to refactor that code.
You might just be creating a metric shitload of objects inside a tight loop and allowing some of them to escape scope while you create others with data they provided is pretty sane. This sort of approach makes a whole lot more sense in resource constrained environments, like Android.
Right, in this case the loop is your block, and you're actually using it to perform a repetitive action - it's not just a standalone block whose only purpose is scoping... or am I missing something?
I don't get why everyone thinks Eclipse is better than Netbeans. Eclipse is terribly slow in comparison, looks crappy, and has a confusing interface. I know older versions of Netbeans were not as good as eclipse, but I switched to Netbeans at version 6.x and it was way better. Opening Maven projects is a breeze and Netbeans Mercurial and Git plugins are great with the colorization of code portions allowing you to quickly see what you've added, modified, or deleted in a file. The only reason I use Eclipse now is for PyDev since the took Python support out of Netbeans 7, but are adding it back in.
Think one level deeper. When I've seen blocks used to manually control scope it's something like this: while(hot loop) { String value; { //create a bunch of small, temporary objects value = something.using(a).bunch(of).objects(); } { // do something else expensive } // more logic here }
Think one level deeper. When I've seen blocks used to manually control scope it's something like this: while(hot loop) { String value; { //create a bunch of small, temporary objects value = something.using(a).bunch(of).objects(); } { // do something else expensive } // more logic here }
Sometimes the verbosity works for me because it is readable. I am not bothered by classes, variables with long names. That is oracle/sun developer preference that doesn't bother me. On the Java language syntax. I don't like that you have to instantiate the class and then provide the Java object reference type. I think that is too much. Here too Java syntax should remove redundant. For example, the generic syntax is horrible. You have to instantiate the class with the generic type and then then the object reference. You have 150 columns just to create a variable. But I have a couple of rules. I try to write class files, between 0-300 lines of code. Any more than that and it is unreadable, too verbose. I try to avoid redundant code, any redundant code should be re-factored. Of course, I can't write all code, so when I see these thousand line monster classes, then I get little pissed off and go Java is too verbose. 
Vi is the God of editors. Emacs is the editor of Gods. 
it's not bad to hate things that actually suck.
I don't know. The finger habits are so deeply entrenched, the result is the same.
Of course it's syntactically correct. But the class "Function" is clearly made to make all this look as most as possible like functional coding, which isn't something natural or easy in java.
I guess it automatically comes up anyway then huh?
Of course the verbosity is too damn high. And that's one of the reasons why, after having been a fan from the old time of the beta, I now try to avoid it. But we have to admit that java's verbosity doesn't come only from java itself but also from * the immense mass of bad java developers who couldn't code in harder languages * the crappy frameworks (from Apache especially) built on the trend of XML with declarations and repetitions and inversion of control and interfaces all over the place * Eclipse that helped people manage big long code, now makes itself irreplaceable, and help people write nauseous classes and methods in a few seconds without thinking That doesn’t mean that java itself isn't verbose (inner classes in place of functions, try catch sequences, finally in place of defer, interfaces, etc.) but the code we have to work with shouldn't be like it is. For those curious about how java could be less verbose, have a look at the Go language.
The generics syntax is addressed in java 7 with the diamond operator. It becomes: List&lt;String&gt; list = new ArrayList&lt;&gt;(); Even more useful when it comes to maps: Map&lt;String,Set&lt;Integer&gt;&gt; cache = new HashMap&lt;String,Set&lt;Integer&gt;&gt;(); Becomes: Map&lt;String,Set&lt;Integer&gt;&gt; cache = new HashMap&lt;&gt;;
The main reason I run with Scala now.
Woah-Ho, You can't post Memes here! You'll get downvoted like there is no tomorrow!
Literally the average cost for a Year of JUST the tuition over here will cost you 5K at an average Uni. The Top end cap is 7K though.
Ah, gotcha. Makes sense.
I found 'Thinking in Java' to be a great help when I wanted to get head down into coding and leave 'deep dive learning' for later. I prefer to see what a languge can do, before digging into how it does it. If you want to build an app without too much 'deep learning', this is the book. Earlier editions are [free](http://mindview.net/Books/DownloadSites/) on author's website
in case you DID start on this book and are not making headway, know that six months is considered a good time to complete this book in ...
If you don't have an IDE like Netbeans that lets you type sout&lt;tab&gt; And expands it into System.out.println("|"); then you are kinda doing it wrong (same with "serr&lt;tab&gt;" btw). Eclipse will do all this I'm sure as well. Java's verbosity is it's greatest strength: the code is so much more expressive and a lot of the criticisms are mitigated by using good tools! longVariableNames are just plain useful.
FactoryFactory.getFactory.LangFactory().getJavaLangFactoryFactory().getJavaLang().equals(VerbosityFactory.getVerbosity().TOODAMNHIGH)
I'm with you, but when writing java and coming up to a need to iterate over a collection, there's always a pause of "isn't there a better way??" before I sigh and go ahead and write the iteration loop. Sometimes eclipse can blast out the form of it for me, but then I have to grab the mouse and change the details which takes just as long. I have been using Scala for about 6 months now, and a surprising thing (surprising to me) that has changed is that I don't think of coding so much as a series of steps to complete anymore, but rather as a series of transformations of data. I know, I know, all the functional programmers are like "duh!". Well, it was a surprise for me, and it's also a surprise to me how much better a way of thinking it is about solving problems. If Java had concise lambdas (anon inner classes are fine, I don't mind them too much, but then we're talking 4-5 of them in a file, whereas now my coding style would demand 40-50 of them, and *that* would be very ugly in java), and redid the entire standard api to use them everywhere, then I think java would be every bit as useful as scala. 
You do know about for loops? ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(); for (String l : list) { ...
 case class ScalaLang[+A &lt;: LanguageVerbosity: Manifest](↕: BizarreCollectionOfDoom[A, /:\:/::]) extends Language with LanguageLike with Writable with VariousOtherCrap { self: YetAnotherDamnTrait =&gt; override def commentOnVerbosity() { ↕.head.tail.leftEar match { case _: LanguageVerbosity(_, &lt;======8) =&gt; println("THE VERBOSITY OF THIS LANGUAGE IS TOO DAMN " + _) } } } I love Scala, but it has its moments. :)
 val cache = Map[String,Set[Int]]() Scala or you're doing it wrong.
Oh I see, that's not as much as I thought. My uni was $30k/year for just tuition. You can swing $5k+living expenses with just a part-time job if you had to, yeah?
Yes, they don't compare to list.foreach(x =&gt; dostuff(x)) in terms of ease of use. And there's nothing equivalent to list.map(_.property+1) or list.filter(_.property == 0) or list.foldLeft(0){(x,y) =&gt; x + y.property) etc...
Oh I don't disagree lambdas are better, its just that lots of Java people haven't even looked at the enhancements in Java 5/6/7. I know of loads of people still using Iterators+casts instead of for loops+generics.
Ew.
I have similar problems when it comes to hand writing code from memory during interviews. When hired, do they expect you to create programs in isolation?
Lombok (http://projectlombok.org/) -- lets you replace tedious boilerplate code with brief annotations like @Getter and @Setter
&gt;the immense mass of bad java developers who couldn't code in harder languages That's probably true to a certain extent but popular dynamic languages like Python and Ruby are WAY less verbose and I'd argue a bit easier to use than Java. Sure, they aren't suited to replace Java code everywhere, but they do handle many Java-eque problems quite well. Also, just curious as to what you mean by harder languages: C/C++, Haskell, Lisp? I would argue that "harder" languages are not always better and for some tasks are completely inappropriate.
Well, I don't even remember the last time I used an iterator, and casting was even longer ago.
Yes, but you're up to date :)
A novice coder in C or Go would probably be forced to think before typing and would not be encouraged to build with copy-paste and Eclipse a monster. In Lisp ? Can a young coder today really have an occasion to code in Lisp ? &gt; I would argue that "harder" languages are not always better and for some tasks are completely inappropriate. Of course. But it's a relief for the poor old coder to see clean and humanly parsable code and not a bunch of gigantic class with only a few chars meaningfull in the whole verbose thing... (sorry for the rant... I have too often to look at wtf code... Just a few minutes ago it was a comparison of enum values using *oneEnumValue.name().equalsIgnoreCase(otherEnumValue.name())*...)
I came here to talk about that feature in Netbeans. Code templates let you set a shortcut for longer lines of code. It's built in, not a plugin, and it's very handy. 
That could throw an "OverlyVerboseException". Might I recommend: Verbosity.TOODAMNHIGH.equals(JavaLang.getVerbosity())
If you think it sucks, why not unsubscribe to this subreddit? You don't go onto /r/pics and bitch that videos are better. That's being a troll.
I love java, and have been using it for many many years, but are you serious? What is verbose about java? - explicit getters and setters - Anonymous inner classes! (try closures for a day) - Having to redefine generics twice on construction - no implicit types anywhere - the minimal code to get a servlet running (full web.xml / servlet itself) - Reading from a damn file to a String! ;) There are probably loads more that will hit me later, so whilst I love java, I have an objecive viewpoint, and I can't honestly say I consider my language of choice 'brief' or 'terse'. 
VI/VIM plugin is the first thing. I don't generally use any other plugins (most Java IDEs these days are complete). 
You want a specific beef? How about the amount of code required to output an ISO8601 timestamp in UTC.
For Eclipse: * FindBugs - http://findbugs.sourceforge.net/ * Chronon (Student License) - http://www.chrononsystems.com/ * Groovy-Eclipse - http://groovy.codehaus.org/Eclipse+Plugin * Google WindowBuilder (Formerly Instantiations) - http://code.google.com/javadevtools/download-wbpro.html FindBugs is a really nice tool for pointing out bad code to you. Chronon is a time-travelling debugger. I just started trying to use it. I do a lot of execution on remote services, so it's not the best for me, but I like the concept. Groovy-Eclipse because I like Groovy. WindowBuilderPro for when I have to do some GUI work.
Does this require that someone install the plugin before they will be able to compile your code? Eclipse has a command to generate getters and setters for you. My build is complicated enough that I dislike adding additional dependencies just for simple code generation.
Aww, I just tried sout&lt;ctrl+space&gt; in eclipse but it didn't work. I'll keep on using sysout&lt;ctrl+space&gt;. I found that you can change this in the content assist templates, but I'm too used to sysout now. That's one of the main reasons I can't switch to NetBeans. I know it's a good product, just as good as Eclipse, but I'm too used to Eclipse's way of doing things to want to change..... Does this mean I'm getting old?
JRebel
Write your kick-ass Java applications based on your knowledge from the head first book! Since it's a pretty decent foundation, go for clean code and OOP books after that.
We use [MyEclipse](http://www.myeclipseide.com/). There's a nominal annual fee for a pretty broad and useful collection of plugins. I also use [MercurialEclipse](http://www.javaforge.com/project/HGE) to do commits and pushes directly from eclipse, though I also have TortoiseHg on my PC and SourceTree on my Mac and sometimes use the CLI to hg.
And gladly I haven't had to work with a terrible team in a very long time. Reflecting on it, wow, it has really been a long time - like not since 2005!
&gt;Does this require that someone install the plugin before they will be able to compile your code? No not at all. You can set abbreviations for longer pieces of code. That's all. Look at the settings for it: http://i.imgur.com/8dVKf.png You can also set templates for your files in Netbeans. For instance, a new class would start with different default code that a new main class.
Nah, I wish I could stand to use Eclipse really. You get stuck with what you know. You can't go far wrong with either of them anyway IMHO, so there's not much reason to relearn! 
Using the full version of IntelliJ IDEA, which comes with most of the plugins I'd need for work. The main ones that I need to install myself are: IdeaVIM - not perfect by any means but gets you the VIM you need Atlassian - because we use JIRA, Confluence, Bamboo, etc and whatever other JVM language I'm playing with, LaClojure at the moment. 
Never done it. What does it look like?
As I've said before. I believe that programming is an eco-system. Sometimes it is best to keep the language clean and rely on the tools to provide the speed/short cuts that you need. My biggest concern about a language is how it A) performs and B) reads. B is about usability. It's about how quickly can I understand code just by taking a quick glance at it or better yet, a quick glance at the interface. The cleaner the interface, the faster I can understand code. I'm less concerned about the number of characters that I have to type because code completion general solves that problem cleanly. Getters/Setter: Eclipse has an excellent way of generating getters and setters at the click of a few buttons. Anonymous inner classes: I'm not a fan of anonymous inner classes and closures has me worried that it's going to obfuscate code. I'm not afraid of creating a few extra files. Functors satisfy my needs and encapsulate purpose and function inside of a tidy little class so that no one class has really broad behaviour. When you get classes that are 2000 lines of code, you're doing something wrong in your design. generics redefinition: typing "new" as autocompletion takes the sting out. Besides, what you create can be different based on a a child type. I think it's more important to have consistency than convenient short-cuts. Particularly when the short cuts can be addressed in other ways. Implicit types: What benefit is this? Are you talking about "var" in languages like ECMAScript? Cause I gotta say. I really hate it. I'm a strong believer in strongly typed code. So much so that I love generics for the fact that it's eliminated 99% of all the typecasting I ever do in code. Servlet Code: I agree with you there. However, that's more to do with library design than it does specifically with the language. File to String: Again, it's library design, not string design. File/stream manipulation is very powerful at the cost of usability. I agree with your point. 
Oh hells yes. Technical testing in interviews is one of the dumbest things that I've ever seen. It's not at all an effective means but eliminating the most green of programmers. 
Eclipse can take the sting out of iterating over a collection with auto-complete. Once you discover it, you never go back. 
What specifically is your concern? Basic project set up in Eclipse, once you know it is pretty simple. 
Can you explain what those do? They aren't immediately obvious to me. These are my guesses: The first calls doStuff on each element x in the list? The second adds one to a member variable "property" of the each item item in the list The third removes items that don't satisfy that a member variable "property" doesn't equal 0? I have no idea about the last one. I guess the first 3 satisfies my requirements for being able to deduce what is happening in the code just by looking at it. The 4th one fails "Usability" in my mind.
Isn't that more about Library design than the language specifically?
You've never had to work in C++ manipulating strings without the use of the STL string library because the company you work for doesn't "believe" in the STL. char* is a bitch. A programming language should allow you to address the business concern and focus less on hand-holding code so that it addresses ever memory concern. Algorithmic performance is far more important than tweaking hardware performance.
Ew indeed.
That's not code. That's virtual masturbation.
I used my eclipse at work for about a year.. way too heavy weight in my opinion; it's essentially a wrapper for eclipse that you have to pay for which really isn't very special at all. Configure your own plugins imo
&gt; don't like that you have to instantiate the class and then provide the Java object reference type. I like the reminder and auto complete takes the sting out of the accounting.
The first one calls doStuff for every element in the list, passing each element to the function The second creates a new collection, which will have the same number of elements as list, each element is constructed by the lambda there, ie, each element in the new list is 1 greater than in list The third creates a new list where all the elements' "property" value is equal to 0 The last collapses the collection to a single value. In this case, it simply calculates the sum of all the "property" values of all the elements. It doesn't seem fair to judge usability on whether you can read the code with zero knowledge of the language. There are plenty of valid complaints to be made about Scala, I don't think that is one of them though.
Working with char* was a lot of fun when I was young but this is a game, not something you should do today for a serious program...
Yeah, that's all the way down in the second sentence of my post.
EU DOS MELHORES GAME DA JAGUEX
if you think Java (or any other programming language) is all about writing the most obnoxious names then you're not a troll, you're an idiot. in fact is exactly this kind of blind fanboyism what prevents some aspects of Java to actually improve, IT IS NOT PERFECT DON'T ACT AS IF IT WOULD.
You're right. It's only facet of usability that something is discoverable. That you can figure out how it's used without having to read a manual. I guess what bothers me is how Closures affect readability. Perl is the worse language IMHO because it's super clever in how it creates really tight complex code that is completely unreadable. I have spent time trying to educate myself on the subject before I pass judgement. The problem lies in the fact that I can't seem to wrap my head around it. There's always an exception that I come across that isn't immediately obvious as to what the syntax means. 
Unless your a paranoid game development company that is really entrenched in C++ development because it's overly concerned about micromanaging memory consumption.
&gt; FindBugs is a really nice tool for pointing out bad code to you. You should also add PMD, then, as well.
The reason your comment got down voted was not "blind fanboyism" it's because it reads like you're saying that java is the sucky thing that should be hated. From this comment it sounds like you're actually trying to say that the extreme verbosity common in the java community sucks. I was not saying that over verbosity is a good thing.
The “Oh, Eclipse does generate that for me” doesn't help if you ever have to read it again. I think the author of “implicit types” meant the verbose enforced type declarations, which the compiler wants to see from people. (Which are completely unneeded from a compiler perspective, because the compiler knows the type already.)
The 4th one could have been a simple list.map(_.property).sum
I get tied up in knots when you get dual functions that do crap like: function1(func(A=&gt;B)) = function2(func) function2(func(A=&gt;B)) = function1(func) which is of course an infinite loop, but hopefully you recognize what I mean - functions that take functions and use yet other functions to wrap them up and return a new function that... uh, ok? I get lost really fast in that sort of code. It's like writing 5 mutually recursive functions and then trying to understand it.
A great lesson about "affordability". Another UI issue. Affordability is the functionality beyond its intended use. I would argue that tools such as closures have been written with certain cases/patterns in mind that it solves but it ends up creating all these additional situations where coders think they are being clever but they are creating obfuscated code. 
Really? Most code generation from eclipse is generally clean and straight forward from what I've seen. Do you have an example that's typical of messy generated code? 
A very good cautionary point against closures. I know Java seems clumsy to some people but I find languages like Perl almost impossible to use because the code is too caught up in trying to create short cuts. 
TBH all the terrible people at my place have been let go. However they've left their mark in a few places - I've found a few bits of code that could make DailyWTF :)
You can get away with syso&lt;ctrl+space&gt; saving a whole two keystrokes! But then again you should be using slf4j or some other logging framework. :)
servlets: Use Spring Framework and you can create servlets with a couple of annotations and no xml. File read: Use apache commons IOUtils. Sorry but I'm with majeric on the strong typing. Short hacky stuff, sure implicit types. Anything involving teams, no. Actually you should check out Groovy. Access to the vast Java libraries but closures, implicit types etc.
no shit. 
I'm a manager now, so I am slowing weeding out the terrible ones :-)
lol
well, that's the idea presented on the submission I'm commenting on right? I don't mind the downvotes, even less if they're there for not explaining the obvious.
I use EMF/GMF a lot, but one can argue that they're not really IDE plugins but Eclipse plugins. But yeah, Eclipse comes with everything you'd need builtin (refactoring, testing, debugging, and so forth). SVN clients, I suppose.
Great made-up problems! :-) You do pretty much the same in Java every time you decide between writing a foreach-loop on call-site or wrap it in a method somewhere. Closures are not that ... new ... outside Java world.
 final SimpleDateFormat iso8601 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'", Locale.US); final TimeZone utc = TimeZone.getTimeZone("GMT"); iso8601.setTimeZone(utc); Date now = new Date(); System.out.println(iso8601.format(now)); Contrast with Ruby: puts DateTime.now.new_offset(0).iso8601 
I'm not sure what what you're saying. Are you suggesting that I made up the idea of "affordability"? Look up "The Design of Everyday Things" by Donald Norman. It was required reading in my Usability course in University where I learned this concept. 
Yah?! I see your Scala monstrosity and raise you a [Java one] (https://github.com/functionaljava/functionaljava/blob/master/demo/src/main/fj/demo/HList_append.java) ☺! final HAppend&lt;HCons&lt;String, HCons&lt;Integer, HCons&lt;Boolean, HNil&gt;&gt;&gt;, HCons&lt;Double, HCons&lt;String, HCons&lt;Integer[], HNil&gt;&gt;&gt;, HCons&lt;String, HCons&lt;Integer, HCons&lt;Boolean, HCons&lt;Double, HCons&lt;String, HCons&lt;Integer[], HNil&gt;&gt;&gt;&gt;&gt;&gt;&gt; three = append(two);
The diamond operator is too crippled for my taste. Imagine a function returning a hairy generic type, like [this one](https://github.com/functionaljava/functionaljava/blob/master/demo/src/main/fj/demo/HList_append.java): final HAppend&lt;HCons&lt;String, HCons&lt;Integer, HCons&lt;Boolean, HNil&gt;&gt;&gt;, HCons&lt;Double, HCons&lt;String, HCons&lt;Integer[], HNil&gt;&gt;&gt;, HCons&lt;String, HCons&lt;Integer, HCons&lt;Boolean, HCons&lt;Double, HCons&lt;String, HCons&lt;Integer[], HNil&gt;&gt;&gt;&gt;&gt;&gt;&gt; three = append(two); The diamond operator doesn't help here at all. Compare that with languages with even local type inference: var three = append(two);
Aptana studio because I dev in Python too.
Run-Jetty-Run ( http://code.google.com/p/run-jetty-run/ ) * Lets you run a war in a light jetty container, very quick to launch M2E * Maven eclipse integration Scala-Ide ( http://www.scala-ide.org/ ) * Scala support for eclipse 
The color theme on your blog is very hard to read. It threw me off after 2 seconds. 
My apologies. I'll have a look at the font, size, and colour theme in the future to see if I can make it 'easier' on the eyes. 
Eclipse MAT memory analyzer- can be a stand alone RCP or plugin for eclipse, good for seeing leaks SVN or repository plugin/software of your choice. Even for my home projects I run a svn server on my desktop so that i can easily access projects from other PCs/Laptop. You get all the benefits from a code repository like revision history, branching, etc. Might not be too bad to have your own local SVN server on your machine even at work to make managing several projects/revision histories easier, without having to pollute the team's working repository. You can also give other people in your workgroup access to your svn if you want to give them samples or whatever. Android SDK/Plugins - Even if you don't do dev in this, it is very easy to set up and you can play with the android emulators for fun. I'd recommend putting this in a separate workspace though. Various WYSIWYG editors for SWT/Swing. Good for quick prototyping without needing to type out some tedious code. You can even bring this up in a meeting and start dragging controls around and get immediate feedback. Just make sure you test it before hand because some of these are a little buggy. Eclipse itself comes with a ton of stuff. Get used to the different perspectives and the plugins they display. Hide unused stuff and place frequently accessed areas in places that are easier to reach. For example, add SVN repository view to java perspective if frequently accessed. But also don't clutter things up too much. Don't be afraid to switch perspectives. I try to keep my main coding perspective at a minimum for more real estate. 
Your criticism is based on nonfamiliarity, not actual experience.
notbad.png
Yes, you're right. Although I can make some comments about learning curve that I think has some value. It's not the easiest concept to wrap your brain around. And I don't think I'm a slouch in this area. I've written Scheme and C++ which has their own syntactic idiosyncrasies. 
I like the Eclipse Color Theme plugin for Eclipse. It lets me easily change between color schemes for the editor.
* Subversive * JD-Eclipse * M2E * Vaadin Plugin * Google Plugin
* Subversive * JD-Eclipse * M2E * Vaadin Plugin * Google Plugin
eclipse does the same thing, too, btw.
When I moved from Eclipse to IntelliJ this tripped me up too. Now I can't imagine having all my projects in one window. I will usually have a couple of IntelliJ windows open with different projects, but that helps the separation, they are, after all, different projects and I want them separate. IntelliJ does have the concept of modules, so you can simulate the Eclipse way, but it's not the same, but you can have some of the same capabilities. So to answer the OP, after using Eclipse for about 5 years, I switched to IntelliJ 18 months ago and have not looked back.
If you want to make it easy for yourself when you come back do these 2 things: 1. Force yourself to learn and understand Formal Languages [Comp Theory] (http://www.amazon.com/Introduction-Formal-Language-Automata/dp/0763737984/ref=sr_1_1?ie=UTF8&amp;qid=1324000827&amp;sr=8-1) 2. Teach yourself algorithms with "Intro to Algorithms" [Carmen i think] 
Interesting. (This kind of feels like one of those things where, if I google for "how to do this", there sometimes turns out to be an Apache Commons utility class that does exactly what you want.) If you know this subject well (I've never had to do what you're doing there), may I suggest you start a little open source project for a Java library that does what you want? It could turn out to be very useful to us in the future!
Clover from Atlassian. There are other free code coverage tools, but I find Clover gives me a deeper view, more details, and better stats. 
It's death by a thousand cuts. There's so much of your IDE that you use without even thinking about it on an hourly basis. I'm not saying you can't use it, but it certainly makes you feel at a disadvantage...
[Identifier Highlighter](http://plugins.intellij.net/plugin/?id=1236) for IntelliJ. Makes finding variable usages easy...
&gt; Linux distros can no longer distribute Oracle JVM This would have been a much better title.
whats the best WYSIWYG editor in your opinion? 
I may be wrong on the tuition fees side of things, but no, 5K living exspenses in a student town is near on impossible. :P
Looks interesting. I've just been watching the video and anything to remove boiler plate is a must. 
Does anyone know of a plugin that could show and hide different parts of a java file? for example if I don't want to see any of the annotations in a class or don't want to see any statements for the logger object within the methods? If it was customizable that'd be even better. That way I could hide and show what was appropriate. 
I didn't realise how powerful these templates where, just been looking at some articles. The most I've used is the Test one to generate junit4 test methods but there are so many more. [code templates on stackoverflow](http://stackoverflow.com/questions/1028858/useful-eclipse-java-code-templates)
I haven't tried this since I haven't been doing anything with high level GUI frameworks recently, but this looks good: http://code.google.com/javadevtools/wbpro/index.html If it is anything like the android gui editor it should be pretty decent.
Built in in Eclipse.
You can check [http://www.softdevjobs.com/java/](http://www.softdevjobs.com/java/) or look at the home page of this web site as not all java jobs are put into the java category
Yeah, well, at least I know the difference between "your" and "you're".
Your hired!
Mark happens to be one of the greater minds I know involved with BRMS. The work he does as team lead has taken Drools quite far from where he picked up, so I can overlook a grammatical mistake or two.
They also couldn't figure out how to spell congratulations either.
I fucking love Google WindowBuilder! 
I would like to know as well. Living in Canada.
The eventual fix will be JSR-310. I've tried and failed to get involved with that.
Why would you do this? J2EE reference implementations suck.
Article states: &gt; In this article, we saw the generated application in action and we took a look “under the hood” to see what is going on &gt; ...fully taking advantage of the Java EE tooling available in NetBeans Seems more like an exercise on Oracle products.
I'm not sure to be honest. I went through it as I've never used any of it before, having stuck to spring / hibernate, and I was curious to take a look.
Agreed. I've been developing in Java for over 5 years, and I've never heard of anyone actually using Netbeans that wasn't still in school.
&gt; Every time I work on a Spring project, I start mumbling under my breath. I know I will have to go through long and convoluted XML. Wrong, not always neccesary since spring 2.5 annotations. When you define the architecture and you think how to plug spring beans, you don't need to define beans in a application-context.xml, only minimal configuration. The most richer feature in java is that you can plug-in and plug-out technologies as long as you need them, get tired or get stuck. The process is simple, define the layers (MVC), create interface to glue and plugin components, although it's sounds easier than it is. Precompiled solutions like the one in the article and others like smartgwt makes harder to plug other technologies
Java EE has come a long way, but still, Spring and its **documentation** was written by people who actually use it in their day job to solve problems. Java EE and its documentation, not so much.
In these days of Spring 3.1, I prepare my components for integration by using annotations, and provide the sysadmin with the option of changing the exact way the application is put together by editing a short ``applicationContext.xml`` configuration file. If someone can't stomach to look at a simple 25 line XML file that makes doing their work easier, they are in the wrong line of work as sysadmins, and should enquire about alternative employment.
NetBeans Maven support is actually better than in either of its competitors. In everything else, such as Git and Mercurial integration, it sadly lags behind. As an aside, when are Gradle and Buildr developers going to get serious about seamless IDE integration?
found out I had to put start javaw -jar \\path for them... Any reason why I need to do this for two computer but not 198 of them?
Maybe folks at /r/windows would have in-depth information about the hows and whys of Windows?
What OS/distro (and filesystem) are the two machines? Solaris?
XP/Vista/7... the two that didn't work were vista ones, but we have about 50 vistas still and all but those worked.
Better than IntelliJ IDEA? IMHO it's the best Java IDE around.
Better than IntelliJ IDEA? IMHO it's the best Java IDE around.
Yep, NetBeans keeps its entire state in the pom.xml file, for Maven projects, and has an excellent pom.xml editor, complete with dependency version lists which get sorted as they were version numbers, not as arbitrary strings (4.10 comes before 4.9, not after 4.2 and before 4.1.) Project state changes are instantly reflected in pom.xml.
http://www.oracle.com/technetwork/java/javase/6u30-relnotes-1394870.html http://www.oracle.com/technetwork/java/javase/2col/6u30bugfixes-1394936.html
Tl;dr?
"advanced beginner" sounds like "semi-senior junior" \*giggles\*
Well, not sure what you mean by advanced beginner, but you could try making a simple android app, its really easy to set up the sdk and dev tools in eclipse. It is also very well documented and tons of samples.
Fixes a nasty bug that prevented Java apps from connecting to MS SQL Server among others.
haha that was incredibly frustrating to trouble shoot
Isn't this almost 4 months old...?
Yes, but Debian and Ubuntu broke my Java today. They are rolling out sun-java-6 remover as a package "update".
And [the long list of bugfixes](http://www.oracle.com/technetwork/java/javase/2col/7u2bugfixes-1394661.html) (apparently the list has been copied twice in the page :))
Well, it really depends on where your interest lies and what's your current skill-set, although if your motivated enough, you can probably do any project of reasonable scale eventually. If you never did, i suggest trying to make a small game, there are alot of tutorials online, or coding a small IRC Bot is always good practice and a nice way to learn how to start using networking libraries. 
Im guessing you mean you want to do this? ((JFrame) screen.getFullScreenWindow()).getLayeredPane().add(dialog, JLayeredPane.MODAL_LAYER); Because currently its not cast to a JFrame like it is in MenuTest
Become a business major?
The answer is almost certainly yes. What do you mean by 'open' though? 
I want it to open the folder so I can see its contents. Just open it in windows.
The easiest way of keeping track of al your directories would be with a ArrayList. Create a method that loops through al 'files' in a folder and checks if it's a file or a directory. ([listFiles()](http://www.roseindia.net/java/java-get-example/get-file-list.shtml) and [isDirectory()](http://www.exampledepot.com/egs/java.io/IsDir.html)) If it's a directory add it to your list and call the method again with the directory you just found. Could be made without the recursion but this should work just fine.
 package something.package; import java.io.File; import java.io.FilenameFilter; import java.security.SecureRandom; import java.util.Random; public class Main { public static void main(String[] args) throws Exception{ if (args.length != 1) { throw new RuntimeException("No folder specified"); } File dir = new File(args[0]); if (!dir.exists() || !dir.isDirectory()) { throw new RuntimeException("Doesn't exist as a folder"); } File[] subDirs = dir.listFiles(new FilenameFilter() { public boolean accept(File dir, String name) { return new File(dir, name).isDirectory(); } }); Random rnd = new SecureRandom(); File rndDir = subDirs[rnd.nextInt(subDirs.length)]; Runtime.getRuntime().exec(new String[]{"explorer.exe", rndDir.getAbsolutePath()}); } } 
Try to make a video poker game with a gui and a point system. you could always learn some game development there are some good tutorials at thenewboston.com
It's nice that Spring now seems to be adopting the Java EE way, but it's a little late to the party.
&gt;J2EE reference implementations suck. Sorry, but what has J2EE to do with any of this??? The tutorial is about migrating from **Java EE** to Spring.
Well, I'm working on a project at the moment that I have found challenging. You are more than welcome to give it a swing. http://i.imgur.com/qCdof.png
Come again?
I like to practice by programming games I already know. Blackjack, Minesweeper, simple games with simple rules.
Hehehe. Op was already giving it 'Swing' :P. Ahh nerdy jokes
 i = i - ((i &gt;&gt;&gt; 1) &amp; 0x5555555555555555L); i = (i &amp; 0x3333333333333333L) + ((i &gt;&gt;&gt; 2) &amp; 0x3333333333333333L); i = (i + (i &gt;&gt;&gt; 4)) &amp; 0x0f0f0f0f0f0f0f0fL; i = i + (i &gt;&gt;&gt; 8); i = i + (i &gt;&gt;&gt; 16); i = i + (i &gt;&gt;&gt; 32); return (int)i &amp; 0x7f; I laughed out of pure joy.
I thought you were literally asking for java interfaces that you could write implementations of e.g. public class Whatever implements CryptoProvider. Haha :-)
It's nice that Spring now seems to be adopting the Java EE way, but it's a little late to the party. When in 2006 Spring was still busy INCREASING the amount of boilerplate XML (with their entire 'configuration' theme, were everything that is actually code was called configuration), Java EE was already making XML largely redundant. In 2009, with Java EE 6, many more improvements were made here. Now in 2011, Spring is finally, but slowly adopting this approach as well.
Head First Java ,Kathy Sierra
I can recommend the SCJP Sun Certified Programmer for Java 6 study guide even if you're not planning on taking the exam. It's written by the same people as the Head first series. The book is really thorough.
thinking in java. wide coverage .handbook-ey. electronic edition
Which [bug](http://www.oracle.com/technetwork/java/javase/2col/6u30bugfixes-1394936.html) was related to the SQL Server connection problem?
 * Effective Java by Joshua Bloch. This is not a tutorial, and assumes you know the syntax and basic semantics; it will not waste your time explaining this obvious. * Java Concurrency in Practice by Brian Goetz. Java has great ~~threading~~ concurrency support. This book covers API, best practices, and both the general semantics of concurrency and those specific to Java. Both published by Addison Wesley. 
I'm an astoundingly new dev and even I can read stacktraces.
Effective Java is definitely the best for experienced programmers wanting to learn Java pitfalls and best practices. For more definitive type of book, check The Java Programming Language. I read some early edition of it many years ago, but IIRC it was good book in its category (as a language book without sidetracks to general programming concepts). Also The Java Language Specification (available free online http://java.sun.com/docs/books/jls/) is a handy reference, but probably not worth bying, unless you enjoy reading references as a book form. I think these are all the general Java books you'll need. You can always find more specialized books by searching Google/Amazon/whatever for specific needs, if those aren't covered in Effective Java or The Java Programming Language. Goetz' book is on my reading list and I have heard only good things about it, but that is also for specific needs. Effective Java has a chapter about concurrency and covers the basics to get you started.
Its also well written for a study guide. The authors sprinkle in some humor so its fairly pleasant to read. 
I keep starting or ending my loops in the wrong places (say using a &gt; instead of a &gt;= or starting at 0 when I should have started at 1). I get a null pointer exception pretty much every time I code &gt;_&lt;
My coworker misspelled a class name early on in development of an enterprise application. We haven't fixed it and now there is the same misspelling throughout the code. Every time it's instantiated the class name has to be misspelled, but the variable name is misspelled most times too. It kills me. 
Just open up some IDE and refactor the class name.
I once tried assigning a variable outside of the class. I spent an hour trying to figure out what went wrong. Also, I tried invoking functions outside of any methods. Once again, it took me hours to figure out what had happened.
1. Change the LAF. 2. Notepad++? Lol. 
&gt; variable name We're in the middle of a major rewrite. I'm not going to start re-factoring old code at this point.
Saw this on the Java Twitter. I Lol'd.
Effective Java by Joshua Bloch. Java Concurrency in Practice by Brian Goetz. Dang, someone else already posted them &gt;.&gt;
 if(a &lt; b); a++;
I would assume that setText isn't appending, it's just replacing the text in the field with each line in turn, leaving the last line read in as the text displayed. JTextEditor.text.setText(text.getText() + strLine + "\n"); Possibly?
Yeah, setText doesn't append, it just simply sets the text to whatever you put in the method.
I don't make simple mistakes much any more - muscle memory, debuggers and syntax highlighting IDEs fix much of that. When I was less experienced, though, I'd do silly things like these: if (a=SPECIAL_NUMBER) { // Wonder for ages why 'a' only ever has the same value. } if (condition) doSomething1(); doSomething2(); // why is this always executing!? String c1 = "hello"; int[] c2 = new int[]{1, 2, 3, 4}; LinkedList c3 = new LinkedList(); // now, get these all confused: c1Size = c1.length(); c2Size = c2.size(); c3Size = c3.length; Java has a lot of WTFs per minute still though. Over the years, I'm just becoming numb to them. Some of my peeves are: * The debugger is line-by-line rather than statement by statement. * The Eclipse debugger is pretty bad. * Basic types (int, char, etc) aren't objects. Well, they kind of are with autoboxing, but that's a hack. Nor is null. You can't do null.toString(); * String manipulation is hard. Their immutable semantics and ability for two equal strings to not be identical makes them error prone. * Exceptions need to be explicitely handled. This usually makes no sense; the vast majority of Exceptions are due to bugs that need to be fixed. I often define methods now with "throws Exception", because if any Exception of any sort occurs, it means I want the application to crash with an automated error report. * CTRL-C does not always stop the JVM (e.g. with Tomcat after an OOME). CTRL-\ does not kill the JVM with a SIGKILL like EVERY OTHER FLIPPING APPLICATION DOES. *ahem* Excuse me. * I could go on... 
Agreed that the Eclipse debugger is bad, it told me I was missing a ; and I was missing the =
I cannot recommend [The Java Programming Language](http://www.amazon.com/Java-Programming-Language-4th-Arnold/dp/0321349806) highly enough. It was written by the creator of Java, and it shows. It's the reason I've spent my 12 year programming career using Java.
Yep that's right, though its better to toss it all in a StringBuffer, then set the TextField to that once you've read all lines. 
We have a conctroller where I work. 
Thank you dude :) that worked :D
Make sure to look at [jbacon's answer](http://www.reddit.com/r/java/comments/nhru0/why_is_this_thing_only_reading_the_last_line_of/c398bp3) above if you are doing anything performance critical or are using large files. Setting to and reading from the GUI may look bad or be slow with large files.
 JScrollPane scroll = new JScrollPane(text); When you initialize the scroll pane, the `text` JTextArea will be `null`. You should probably initialize your scroll pane in the same place you initialize all the other components: ... load = new JButton("Load"); text = new JTextArea(25, 49); JScrollPane scroll = new JScrollPane(text); Also, note that you probably don't want `JTextArea text` to be `static`. 
[Off-by-one errors](http://en.wikipedia.org/wiki/Off-by-one_error) are really common for the first few years. Eventually you get to a point that writing loops becomes second nature and you don't even need to think about &lt; vs &lt;=.
It's good to know I'm not alone then. And yeah, I'm slowly but painfully getting better at loops due to my own mistakes.
Please format your code before you submit it at least.
Has anyone read the "Big Java: Compatible with Java 5, 6 and 7" before?
ECJ with Emacs will catch this, as will Eclipse itself.
Apart from these two brilliant books. Java generics and collections : Very nice book for understanding generics and java's in built collections framework.
[This one.](http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7103725)
I did do that but it still doesn't work. Any ideas?
I'm just curious what made you change from ant to maven? I've only ever used ant, without any major problems, though figuring out how to use a task i've never used before can be a pain.
Mainly managed dependencies so that you don't have to commit binaries and/or libraries to the repository. You just commit your sources, maven will fetch your dependencies for you when you build the project. I also like how maven projects are structured. Since maven projects have an imposed structure, you don't have to code anything with tasks. For instance, your java sources have to be stored in /src/main/java, you don't have to write a task to compile your classes. Also, tests are executed automatically when packaging which is kinda nice.
totally sold on the 'put the artifact id in the xml file and maven will download and store the jar for you, in the classpath'. closest to one-click-classpathing of jar
Yep that's right, though its better to toss it all in a **StringBuilder**
http://ant.apache.org/ivy/
Some comments in the JavaDoc for what each command does would be nice. For example, http://athou.github.com/GeekBot/be/hehehe/geekbot/commands/StatCommand.html 
 addComp(panel, text, 1, 0, 1, 2, GridBagConstraints.NORTH); ... addComp(panel, scroll, 2, 0, 0, 0, GridBagConstraints.NORTHEAST); You're essentially adding the JTextArea to the panel twice. That could be problematic. 
A possible explanation, Java was not their first language, they used to develop in some other language that was no longer needed and were retrained, so they just learn the syntax without really knowing the language. Some have gotten better, some require hand holding.
Did you know [PircBotX](http://code.google.com/p/pircbotx/)?
Thanks!
Nope. I'm pretty sure it didn't exist at the time I started working on this though.
I'll add some comments, good idea.
Build a 'toy project' and put in on GitHub. Host it somewhere if you can. Have both links in your CV. Blog about the process and decisions you made (for example, if you used Spring and/or Hibernate or just went straight Java EE and if you went Java EE what version etc.) Hiring managers just care if you can get the job done. Right after working code (the hosted site) they care if the code looks good (GitHub) so others on the team will not want to kill you and, third, whether you can communicate (the blog). In lieu of actual industry experience that you can point to, this should be sufficient to get you a good job assuming your code doesn't suck and the site actually works. Nice thing is, if you get deeper and want to try out, say, consuming services over REST or SOAP, or show that you know how to write a distributed highly scalable application, you can do so and show it without risking your employer's IP. Don't bother with Oracle's overpriced certifications. They mean squat. If that seems like too much trouble, consider getting into a company as a QA or test engineer and work your way into a product team. Or, better yet, do both.
Thanks for your thoughts. I'll definitely put more effort into setting up an open source project. I would prefer not to go through the QA route again as it is a bit late in my career, and I feel that such changes are more likely to harm me than benefit me.
[Rock-Paper-Scissors-Lizard-Spock](http://www.youtube.com/watch?v=Kov2G0GouBw)! :D
If you're good at Java SE development, branching out to Java EE 6 is next to trivial. http://www.parleys.com/#st=5&amp;id=2656&amp;sl=18
I may have to steal this idea!
It's a gift my friend. (And far simpler to implement that a card game or boardgame if you requirement.)
I've finished it, if anyones interested then let me know!
At some time in the past, someone decided to write the word "rules" with a 'z'. We now have thousands of class names, method names, package names, configuration keys, and documentation pages for this system that really can't be changed. Half of them saying "rules" and half of them using "rulez". Goddam sheep...
Why is taking our ideas any more creative or unique than taking your teacher's? If you want to be creative, make up your own game. You could test the boundaries of the rules; if they don't mention sound, write a sound "matching" game.
An IDE gives you three very useful tools. Code editing. Code navigation. And code debugging. Each of the commenters, I am sure, have different needs and styles of these tools. You will also. All the IDEs tend to have very aggressive code editing help. This is great when you are working with new packages but the help gets tiresome as your packages familiarity increases and yet the IDE continues to make suggestions when you know full well what you want. Code navigation in modern IDEs is a godsend. To be able to move easily between classes, up and down the inheritance hierarchy, and around usages. Code debugging is less about the source and more about the data and the threads. The better the tools are at showing data structures -- the plural is important! -- and visually connecting threads w/ stack traces the easier your job becomes. I have not answered your question because there is no answer. We shape our tools and our tools shape us. It almost does not matter which you pick -- Eclipse, IntelliJ, NetBeans, Emacs w/ JDEE, Vim w/ JDE, .... What matters is that using the IDE becomes second nature. And don't fool yourself that you will fix the IDE's problems. You don't have that much free time.
I hope you corrected your errors. For example, you shouldn't be taking the absolute value of the integer that's being added to the matrix. Also, I'm not sure what that function is supposed to do, since it returns void (is it changing the values in memory, or is it just printing it as you have it)?
thank you!
true.. :) thanks! 
yes go to youtube there are people there dedicated to making java teaching videos 
The New Boston video series, full youtube playlist found here: http://www.youtube.com/watch?v=Hl-zzrqQoSE&amp;playnext=1&amp;list=PLAFF55E55870752DA
I learned java using his videos. He has great tutorials!
TheNewBoston (Bucky) taught me more in one summer than I've learned in three years of regular/AP (College level) Comp Sci classes in High School.
Thank you guys :D
That's funny. A couple of years ago, I was worried that my entire career had been too focused on Java EE and not enough on Java Core. I ended up making the jump the other direction that you're going. Personally, I feel that you'll get further with a strong background in Core than EE. 
Why is everyone so against buying books?
Never actually thought about that... lol 
Listen: Nothing worthwhile is ever easy. Java is a great skill, and once you've got the hang of it, it's a real joy. Don't think it's going to be easy. That said, I really like the Head First java book. It's the least booky book you'll ever read on the topic, but even if you're good at everything in it, you'll still suck at Java. You need to be patient, pick a fun-time project and do a shitty job of it. Learn. Re-do it. Learn more. Pick a new project. I probably did 5 scrape-porn-from-the-web command line apps before I felt comfortable with those concepts. This is the path.
I will do this :D thanks! (When I get home from vaca)
Codingbat.com your welcome.
make hangman i made a version which you can play 1- and 2- players, if you want the code or need an example, pm me!
[Stanford's introductory CS course, available online.](http://see.stanford.edu/see/courseinfo.aspx?coll=824a47e1-135f-4508-a5aa-866adcae1111)
&gt; if you want the code &amp;#3232;\_&amp;#3232; 
I'm not sure if you missed my point or what.. If it's an assignment, don't give him (or her) your solution. That's no way to learn.
&gt; or need an example
I see, I had no idea how else should I make it work with negative numbers ( In the example if you add (-1) it would work as if it were (+1) here's the maximum grade result though http://pastebin.com/ETde0GXp
Would say this is not the kind of book OP is looking for, as it was recommended reading for my first year university "Programming Fundamentals" course. OP seems to have a bit of experience with basic Java and is already familiar with OOP concepts.
This book... the exact opposite of TLDR
Anytime I think 'we could solve this with Generics'.
This also happens e.g. when having a lot of buttons when coding for Android. Button buttonOne, buttonTwo, buttonThree, buttonFour; Splits the line up after the first three ones.
The [Oracle Java Tutorial](http://docs.oracle.com/javase/tutorial/)
It's not after the three first ones. It is at a specific line length. What editor are you using?
You might try the Java Black Belt site (now rebranded as "KnowledgeBlackBelt"): [KnowledgeBlackBelt.com](http://knowledgeblackbelt.com/) We used that site at my workplace last year, and it was pretty useful. It's a community-powered java learning site, where participants create quizzes. 
Eclipse
Oh, you're right and I'm mistaken. Gosh, I have no idea why it's done like that. That is not a well specified assignment.
You can change the format for the code to not split lines at 80 (80 is standard) if you edit the format for the formatter. I can't remember completely where this is right now.
Window -&gt; Preferences -&gt; Java -&gt; Cose Style -&gt; Formatter -&gt; then create a profile -&gt; Edit -&gt; Line Wrapping (tab) -&gt; change Maximum line width to something else, right? Yeah, it doesn't help.
I think if you don't do what the tutor suggested then it should be of equal difficulty. To do poker or blackjack you will need to do something where you store a data structure (the cards), shuffle them, deal them out in random order and make sure you keep track of all the cards during the game. 
If you look further down on that page you can turn of line wrapping. Also ou have to choose to use the newly created formatter.
In some cases the + operator will compile down to use a stringbuilder so in simple cases where you are building a string inline there is no difference. For small in line cases don't worry about it. When building a larger string, for instance building an html document from a list of data, you can run into serious performance problems. You start creating and destroying immutable strings on every iteration. String htmlDoc = "lots of html"; for(String someData : listOfData) { htmlDoc += "&lt;li&gt;" + someData + "&lt;/li&gt;"; } A new copy of the entire string in htmlDoc is copied for every iteration. Imagine copying a 10kb html document every time you run through that loop. Just a simple example, using a stream is a better approach but this illustrates the point.
Strings are immutable in Java. When you use + the JVM has to create a new string the size of the two you are adding and then copy the contents of each into the new string. When you use StringBuilder it can append the contents of the second String to a buffer thus saving you memory and CPU time.
For simple string additions, there is no difference. If you're adding strings in a loop, each time you add to that String will create a new string builder -- more costly.
Once you get past about three concatenations, StringBuilder is much faster. For one or two concatenations, the overhead of the StringBuilder isn't worth it - just use '+'. Once you get up to hundreds or thousands of concatenations, StringBuilder can be faster by several orders of magnitude. Edit: Here's why it is faster: In Java, strings are immutable. So when you concatenate a string with '+', you're actually creating a new string from two others (which requires a new memory allocation). The StringBuffer preallocates memory, so it is actually manipulating a single character array in memory. That is much faster than continually creating new strings (which is what happens with '+'). Also, since you're not creating all these new strings, your garbage collection overhead is lower as well. 
http://kaioa.com/node/59
How would you use + when say converting a List&lt;Object&gt; to a string?
See: http://stackoverflow.com/questions/5234147/why-stringbuilder-when-there-is-string
The basic idea is to know that this code... String str = ""; for (int x=0 ; x&lt;10000 ; x++) { str = str + x; } Gets converted into bytecode as if it were coded like this... String str = ""; for (int x=0 ; x&lt;10000 ; x++) { StringBuilder sb = new StringBuilder(); // Overhead is here sb.append(str); sb.append(x); str = sb.toString(); // Some more overhead here } So instead you should use this... StringBuilder sb = new StringBuilder(); for (int x=0 ; x&lt;10000 ; x++) { sb.append(x); } String str = sb.toString(); This avoids the overhead of creating a new StringBuilder object in every iteration of the loop as noted in the comment above. Note that this code... String str = "X" + "X" + "X" + "X" + "X" + "X" + "X" + "X" + "X" + "X"; Gets converted to bytecode as if it were... StringBuilder sb = new StringBuilder(); sb.append("X").append("X").append("X").append("X").append("X"). .append("X").append("X").append("X").append("X").append("X"); So there isn't any additional overhead using the + operator versus using your own StringBuilder. The point is be careful using the + operator inside of loops to build strings. 
There can be quite a bit of slowdown here too: sb.append(str);
http://docs.oracle.com/javase/7/docs/api/java/lang/Appendable.html EDIT: after getting voted to negative, I'll spell it out: better to accept an Appendable instance, after which you can easily swap a builder for a stream, or feed multiple calls to the same builder or stream, and so on.
Previously: for(Object o : list) { string += o.toString(); } After reading this thread, I now know to instead StringBuilder sb = new StringBuilder(string); for(Object o : list) { sb.append(o.toString()); }
Actually, that's where the real slowdown is. (I assume you knew.) That's the bit that turns the code into O(n^2 ), where n is the length of the string. Once the length of the string becomes non-trivial, this code becomes unbearably slow. 10^2 = 100, 1000^2 =one million.
When you Googled just that, did you follow the official instructions in the very first hit?
However, don't touch those settings until you're damn sure that you take full responsibility for formatting the code better than the autoformatter. If you then ask for help with terribly formatted code, people are less likely to grant it.
Yeah, good catch. I wish I had spent more time giving analysis of this.
Yes, and it's not working. 
http://docs.oracle.com/javase/tutorial/getStarted/cupojava/
Maybe you meant in loops, but no, a+b turns into sb.append.
&amp;&amp; instead of &amp;
I assume what you really want to do here is check if the length is neither 10 nor 13. A few things... First, the compiler isn't going to look at that like a human would and think "well you didn't say what you want to be something other than 13, but earlier you were checking trimmedISBN.length() so you must mean that!". Second, the single &amp; character is the bitwise and, used to AND bits. You want the logical &amp;&amp;. In the end you should have the following: if ( trimmedISBN.length() != 10 &amp;&amp; trimmedISBN.length != 13 ) EDIT: [Reference on bitwise operators](http://leepoint.net/notes-java/data/expressions/bitops.html).
Try putting another trimmedISBN.length() between the &amp; and !=. You cannot say "If this is not 10 and not 13". Instead you say "If this is not 10 and this is not 13". It's just Java's syntax.
This did it. Thanks so much. I've been trying to figure out what the issue was for an hour.
The problem is that &gt; if ( trimmedISBN.length() != 10 &amp; != 13 should be &gt; if (trimmedISBN.length() != 10 &amp;&amp; trimmedISBN.length() != 13) You should also use the logical AND operator: &amp;&amp; as opposed to the bitwise AND operator: &amp;. 
http://docs.oracle.com/javase/tutorial/index.html
also dreamincode.net; they are so helpful! also you can ask questions here and im sure these guys will answer
Java is a simple language with few different keywords and concepts to learn. It is driven by a large, slow-moving committee, but has a large community that builds utilities and knick-knacks for it. C# is a language that is controlled by Microsoft. This allows them to change the language more quickly. C# has a lot of sweet bells and whistles, but this makes the language itself more complicated. You can actually run it on Linux using Mono.
a+b turns in to a new StringBuilder which then requires each to be appended to it from which a new String is emitted. The difference is a+b+c only requires the creation of one StringBuilder where the loop case requires one for each iteration.
Use StringBuilder when speed and memory consumption actually matter. Hint: If you're only doing something once in the entire run of the program, speed and memory consumption are very unlikely to matter. If you do something ten million times in a loop, speed and memory consumption probably will matter. These are not the only two situations where there might be a difference, but these are the most common ones.
This post can probably help you with technical benefits of one vs the other. [http://stackoverflow.com/questions/610199/the-art-of-programming-java-vs-c-sharp](http://stackoverflow.com/questions/610199/the-art-of-programming-java-vs-c-sharp) In reality, you shouldn't learn one or the other, you should learn both. You'll become much more of a well rounded programmer.
When I write programs that need to be as fast as possible (ie: an interpreter, a board game with AI), I tend to use Java or Scala since the JVM is way faster than the .NET implementations (either than MS's CLR or Mono). When I need a cross-platform GUI, I also tend to use Java (with SWT), because if I use C#, it's either non-native on Windows (GTK#) or non-native on everything else (Windows Forms). One supported platform and no speed requirement? I use C#, since as a language I find it much more pleasant than both Java and Scala. 
that's what i decided... :)
I've only used the gaming tutorials from this guy but it was helpful enough. [You might want to give it a try](http://thenewboston.org/list.php?cat=31)
&gt;I often define methods now with "throws Exception" NOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
C# and it's official development tools make it far too easy to fall into relying on platform-dependant libraries.
OBOEs screwed me up for a long time. Eventually I just started using as a rule of thumb that if I was going until .length, .length(), or .size(), to just use a &lt; sign.
I've never seen any benchmark or any evidence that the JVM is markedly faster in general, and C# provides more low-level functionality than Java that can often make it faster while performing some tasks. Why do you say the JVM is "way faster" than CLR or Mono?
Ironically, the basics look much more complicated.
You are gravely mistaken. A single chain of string concatenations (e.g. `"a" + "b" + "c"`) is compiled to a use of `StringBuilder`. The scenario you describe, in which a bunch of `String`s are constructed one after another, **does not happen.**
&gt;Note that this code... &gt; &gt;String str = "X" + "X" + "X" + "X" + "X" + "X" + "X" + "X" + "X" + "X"; &gt; &gt;Gets converted to bytecode as if it were... &gt; &gt;StringBuilder sb = new StringBuilder(); &gt;sb.append("X").append("X").append("X").append("X").append("X"). &gt; .append("X").append("X").append("X").append("X").append("X"); This is incorrect. If you look at the bytecode for your "X" example you will notice that the compiler generates a concatenated string value: 0 ldc &lt;String "XXXXXXXXXX"&gt; [16] 2 astore_1 [str] This is a compile-time optimization that cannot be done with StringBuilder operations (the bytecode for those operations contains all of the append calls as you would expect). If you are concatenating string literals or string constants, the compiler can perform the concatenation at compile-time, so this is a case where you should **not** use a StringBuilder.
Yes yes yes. I really wanted to illustrate the point in one line, but I should have not used string constants. I should have taken more time when writing an example of where + isn't less efficient, or not have done it at work. This would have been a better example: String display = lastName + ", " + firstName + " " + middleName + " (" + streetAddress + ", " + city + " " + state + " " + zip + ")";
[http://www.javaranch.com/](http://www.javaranch.com/)
Great videos!
Database with barcode scanner and web integration, it was actually one of my final projects
Lots of different answers saying the same kinda stuff :-) tl;dr; Single line/use concatenation: use + Loops/multi concat: use sb 
https://www.google.com/search?q=Schlemiel+the+Painter
Game, like metal slug
subversive
[EGit](https://eclipse.org/egit/download/) install, get a [git repository](https://github.com/) (the free ones are public), add in *git repository exploring* perspective, right-click project and team-&gt;share, done.
I need to remind you that bitbucket.org offers free private git/hg repos.
I'd start by separating my vc from eclipse. Pick one and learn it: cvs, subversion (svn), mercurial (hg), and git are all fine. If you're on Windows, svn and hg have TortoiseSVN and TortoiseHg to interact with Explorer. But you'll need to get one going. Once you're using vc, and comfortable with it, then you can address integration with eclipse. Out of the box, eclipse supports cvs. svn, git, and hg have eclipse plugins that are accessed via the "team" menu item. At work, I use hg with the MercurialEclipse plugin on both Mac and PC. So, if you're already using a version control system, the answer to your question is "If you're using cvs, it is on the team context menu item for your project already. If you're using something else, get the plugin for that system."
Oracle ADF is not covered in "Head First Java".
That with the Subclipse plugging. 
+1 except I'd encourage learning the command line instead of integration with your IDE... I'd meet you halfway if you used it's keyboard shortcuts instead of fumbling around with a mouse ;)
Maybe a little more than you're looking for, but try building a simple project based resource planner with timetracking. This would require you to design a data model, work with a database, build a data entry UI (web or desktop), handle multiple levels of user authorization (admins vs workers) and create some useful *reports*. Whole thing could be done as a standalone application or a webapp.
Starting with SVN at this point is a waste of time. SVN being a centralized version control system, it just isn't as good as the decentralized version control systems (DVCS) in terms of abilities. Given that one of the big obstacles in understanding modern DVCS is being exposed to the centralized kind before, just skip them and start with git or mercurial.
I actually used him when I was learning the fundamentals of electronics. Thanks for the suggestion, I will check them out!
I took a little gander at their webplace, seems pretty homey, might settle down there for a while. :P
Took a peek at their page, thanks for that! 
Seconded. EGit is not comparable to the MercurialEclipse plugin. Hg or SVN is a better start than Git, if Eclipse support is to be factored in.
Why? I like terminals as much as the next guy but using it for its own sake seems silly, and I can't see a CLI being better suited to these tasks than a GUI.
Isn't it a bit late to worry about the contents of a presentation you're going to give tomorrow? :-/ Since we don't know what you already plan to include, how can we know what you may have not discovered?
I suspect that you almost have to learn by starting with the command line. But once you know what's going on, it's pretty nice to commit and push from within eclipse as you work. I've never actually tried (not sure you even can) to get my original clone from within eclipse, so you never really get away from the command line or gui tool like Tortoise or SourceTree for that part.
I don't know your background, but no matter what you do, shit gets ugly really quick. The brainstorming phase is always great with all that fancy stuff you want to do. Since you want a challenge you should use a database, create a clean gui (web/swing) and maybe try new technologies. Try implementing encryption. Idea: P2P based. Some data, which can be traded with other users. Auctions and all that market stuff.
C#: Visual Studio is the best*, LINQ is awesome Java: Great on Linux, Scala and other JVM languages are gaining in popularity *Is there an IDE for Java that's better than Eclipse/NetBeans?
Employee X is leaving the firm on bad terms, but before leaving for the last time they decide to royally screw up the code base. With a version control system (and assuming they didn't go messing about with the repository itself) it's a trivial task to identify what they changed and revert it, without losing any other work done by employees that day. Without version control you're looking at restoring to a nightly backup at best, which is obviously far from ideal. Presumably you've also covered other items like creating patches, tagging code versions, etc?
It was sprung on me Yesterday. :(
I have mentioned patches, But I like your backup ideas.
I did a similar presentation today (about git) when they say "give the presenation as if they had no I idea what source control was" it sounds as if they're evaluating you? mine was intended to be a learning experience for them but anyway, if you have to go from the beginning just explain why it is useful to review previous states of your work (when things were ok, what changes were done) and talk about collaboration, about knowing how thing became to be what they are and who made them that way, talk about conflict resolution and why it is important to have all that RECORDED and not done anonymously and forgotten.
Spelling/grammar check. Once you write it, you can use it!
Learn to set up and use the debugger. It's not particularly good, but it's better than not being able to inspect the state of your running application. If you're using Tomcat or another Servlet container, you can set the build directory of your project to be in WEB-INF/classes. Then, in theory at least, you don't need to redeploy to test what you've just written. Work out how to make new editor windows. You can use Window-&gt;new window and Window-&gt;new editor, and then drag/drop editor tabs around. This is great if you have multiple monitors or need to see multiple files at once in a split window.
I would look at learning Spring and JPA/Hibernate.
**Ctrl + shift + f** to format your code automatically
&gt; Anything you think I should Import? FTFY 8D
The compiler's bad at figuring things out itself. It's apparent to any human what you mean by trimmedISBN.length() != 10 &amp; != 13, but the compiler sees that and things "and WHAT doesn't equal 13!?". You have to be redundant. Also, use &amp;&amp;, not &amp;.
Well I'm an apprentice Java Dev, and it's part of my 6 month 'progression' to give a presentation on a different topic every 3 months for the course of the 2 year apprenticeship. So not really an evaluation, just proof I am actually learning something.
Ctrl + Space, opens up the auto-resolve window. Really useful for long functions and that.
**Ctrl + shift + t** (open resource by type), **Ctrl + shift + b** (toggle breakpoint), **Ctrl + shift + c** (toggle comment), **Ctrl + shift + /** (collapse all folds), **Ctrl + space** (content assist), **Shift + Alt + x j** (run Java application), **Shift + Alt + d j** (debug Java application), **F3** (open declaration, extremely useful) Edit: formatting 
CTRL+3 is the magical "do anything" type omnibox. It's a little weird in the way it shows you certain things based on context, but it's a great way to discover things. ALT+SHIFT+UP (or DOWN) increases (or decreases) your selection based on statements. It's hard to explain, but just try it. If you put your caret inside a variable name and then hit this repeatedly it will go variable-&gt;whole declaration-&gt;if statement you're in-&gt;while loop you're in-&gt;method you're in-&gt;class definition you're ing-&gt;etc. ALT+LEFT (or RIGHT) will is like back (or forward) in a browser, based on where you've been editing. But really, the right-click menu exposes a lot of stuff, and just take note of what things do what shortcuts. ALT+SHIFT+S, R creates getters and setters, for example. Which is something you can discover if you read the menus.
**Ctrl + shift + O** to import all packages you need. For instance, let's say you write code with the Scanner class, just hit ctrl+shift+O and it will be imported automatically!
Hey..that worked. thanks.
**Ctrl + D** - Delete current line **Ctrl + Alt + Down/Up** - Copy current line to line above/below
That's actually the shortcut for "organize imports." It will also remove any imports that you don't use, and resolve all of your .* imports to only list the class you actually use.
To add some of my favorites to this: **Ctrl + /** - Comment/uncomment current line. **Ctrl + shift + G** - Find all references to this object in workspace **Ctrl + 1** - Quick fix popup. Incredibly useful for just about everything. **Alt + shift + R** - Quickly rename variable **Alt + shift + T** - Refactoring popup, includes above renaming option, along with moving a variable, or extracting a variable from a constant. 
I'll also add, while debugging: **F5** step into, **F6** step over, **F7** step return, **F8** continue with one hand on the mouse.
**F4** (open type hierarchy view), **Ctrl+t** (quick-type hierarchy popup on the currently selected type), **Ctrl+o and start typing...** (quick-find a method or field in the current view), **Ctrl+e and start typing** (switch to open editor by name)
ctrl+alt+h - open class hierarchy alt+left arrow or alt+right arrow - back or forward, browser style
I switched to G1 a while back and enjoyed much shorter gc times. Too bad G1 caused hard jvm crashes in java 6. Word is it will be "production ready" around 1.7.0u4
I have mine to reformat everything on save. Indentation, for loops, declarations all uniform whenever I'm done. 
Any good tutorials on using Eclipse's debugger? 
Also adds imports and removes imports not being used. 
Ctrl-shift-r to open resource. Open any resource on the classpath; xml files, icons, property files, etc. Somewhat unfortunately it includes class and java files.
The ctrl-alt-arrow key combos operate on the selection, not just the current line. Handy for moving blocks around or duplicating sections of xml config files.
**Ctrl + shift + R** open resource (JavaScript file, etc.) Open Call Hierarchy is helpful to see what incoming and outgoing calls of a method. double click on a tab and it full-screens the view (or editor).
how would you improve the debugger?
Not really a trick... some kind of vi emulation plugin... either [vrapper](http://vrapper.sourceforge.net/home/), [viPlugin](http://www.viplugin.com/viplugin/), etc.. Ctrl-3 is very help as well to get at just about anything in the IDE. 
that sounds efficient. care to explain how to set this up?
**Alt-shift-x, q** (runs ant build for the current project). **Ctrl-i** (fixes indent) **Ctrl-1** (quick fix) And for gods sake use the debugger - you can hook up to android phones, tomcat installs, etc.
&gt;Shift + Alt + x j (run Java application) Or... Ctrl+F11
Also, if you use camel case, you only have to type the capital letters to help it auto complete. For instance string.cTIC&lt;Ctrl+Space&gt; should auto-complete to string.compareToIgnoreCase() with the cursor between the parenthesis waiting for you to type in the argument name. You can also type in the first few lowercase characters after a capital before you skip to the next capital to give it more of a hint if you want, i.e. compTIgCa
What is this? I don't even... I feel stupidx3. So much time wasted making things line up and look pretty.
It has more function then looking pretty. Many companies have strict formatting guidelines for submitting code to source control. So you can code in your own style, then format before submitting. 
Goto Preferences-&gt;Java-&gt;Editor-&gt;Save Actions. You can also set this up on a per-project basis, which is handy if you are sharing the project via some source control like SVN. Makes conflicts and merges happier!
For the mouse lovers: **Ctrl-click** or **Shift-hover**, depending on what you like better. When I'm about to zap some bugs, ctrl-clicking down the layers makes it quick to dive in while double-clicking methods/types/fields to highlight then right-click-&gt;'Open Call Hierachy' to branch out to suspecting locations in the code.
type "**sysout**" then hit **Ctrl + space** for **System.out.println("");** type "**main**" &amp; hit **Ctrl + space** for **public static void main(String[] args){}**
Related, **ctrl + shift + o** to organise imports :p
Don't go on reddit for a while. Na I have no idea, I'm here to learn some tricks just like you.
This is really useful and makes development lot faster, I have also rebinded this to Ctrl + P. (Who needs printing shortcut anyway?)
For #6, try to put into simple terms what each is doing piece by piece. So we're starting with the "sum" and "num" variables. They will both equal the same number because they have the same value on the right side of the assignment operator (in other words, console.nextInt() ). This will accept an input value which is at the very top of the problem. It then goes into a loop. Putting it into English would be something like, "We are declaring a variable 'i' which is equal to 1. For each iteration of the loop, if 'i' is less than or equal to 3, we will increment it by one." Within the loop, the program will do two things: Accept another value from the user and assign it to the num variable, and reassign the value of the sum to sum + num, which is the last user-entered value. So it will begin by assigning "38" to sum and num. It will then begin the loop. I think you should have enough to take it from there. 
&gt; I have mine to reformat everything on save. Indentation, for loops, declarations all uniform whenever I'm done. I don't like that, since it makes reviewing changes very difficult. Check a commit claiming to "fix one line", get a diff with hundreds of irrelevant changes. :( Thankfully, Eclipse has recently added the "best of both worlds" option: only reformat the lines that were changed by the programmer. :) This way, new code is properly formatted, old code is untouched, diffs are meaningful, everybody is happy.
For #5, I'm not positive on, but here's what I think is happening. Again, I'll try to break it into layman's terms. So a variable 'ch' has been declared (of the primitive type "char") and assigned the value 'D'. A loop is then declared which will execute only if 'ch' is greater than or equal to 'A' **and** 'ch' is less than or equal to 'Z'. Char types, as mentioned above, are "primitive" types of values which means they can be directly compared. For example: char a = '!'; char b = '?'; if (a == b) { do something; } You'll find that this is true of types such as ints and doubles, but the String class is not such a type, and require other ways of comparing, such as the compareTo() method. Just a heads up for the future. Any way, back to the problem, the loop will execute if 'ch' is greater than or equal to the unicode equivalent of 'A' and less than or equal to the unicode equivalent of 'Z', which the program will compare for you. Now, within the loop, this code uses parentheses to establish precedence, and will first convert 'ch' into an integer type, add 1 to the integer, and recast 'ch' as a char type. So it will appear as though it's going through the alphabet, modifying the contents of char until it has a value which will make one of the conditions of the while loop false. If anyone wants to point out errors in this please do as it would help me, and I hope I worded this well enough that you can get the right answer, OP. If you need me to clear anything up I'll do my best to. Cheers. 
type "hello you crule world" select the hole line hit shift+enter one time down and return and you have system.out.println("hello you crule world");
Ready to have your mind blown? **CTRL+3** then type in command search term and press enter to execute, e.g.: **CTRL+3** then type "clean", press enter, you clean your projects without using the mouse!
Thats clever! I didn't know that one. Also. if? IF? YOU SHOULD USE CAMEL CASE BY CONVENTION! ;)
"syso" is enough, acually :-)
I know that is the last thing you want to hear right now, but the design of SVN is deeply flawed. Back in the days, they advertised themselves as "CVS done right" which kind of shows the problem. They just implemented what CVS did in a less retarded and more performant way. Now just storing different versions works ok, but branches are more than difficult. SVN can branch, but it cannot merge efficiently, which makes the whole point of having branches moot. The "proper" way with dealing with branches is to create a new branch for a larger code feature (not just a simple bug fix), then keep working on that branch until it's done, merging back the main development branch in regular intervals so you don't drift off to far from it. And this is what SVN doesn't let you do. You can branch ok, you can merge once, but then you're stuck having remember what you already merged and what not. SVN will create merge conflicts for changes that were already merged, etc etc. There is no way to work with SVN and branches in a meaningful way that does not drive you insane with its bookkeeping. edit: Here's a little [tech talk Linus Torvalds did in on the Google campus](http://www.youtube.com/watch?v=4XpnKHJAok8&amp;feature=youtu.be) in which he talks a little about where and why git is different and also talks about SVN ("Most pointless project ever"). edit2: Use a decentralized version control system like git or mercurial. Those do branches in a useful way.
Yes, that seems the general consensus I have read. But I work for a large Energy company in the Software development area, and SVN is what we use. It'd take AAAAGGGGGEEEESSSS to get a the 'tooling' team to switch.
I do minecraft mods and everytime i want to test a plugin i have to export it to the server folder which is like 6 clicks. Ive seen people have it done just by right clicking an ant file on the right. Ive just spent like an hour trying to figure it out but Im having no luck. My last problem is its telling me some libs Im referencing arnt there. Suggestions? It works if i just hit run but not the ant compile heres my build file im using with ant http://pastebin.com/MeLgV4FK
For single developers, you could use something like git-svn to both keep committing against a SVN repo, but use git on your side. But this doesn't really scale to a team of developers.
&gt;you're stuck having remember what you already merged and what not. SVN will create merge conflicts for changes that were already merged, etc etc. SVN implemented merge tracking several years ago and it's been improved with each release since.
The real problem is that you need branches for just about any meaningful software development. You always have code that has been delivered to someone else/deployed, yet needs to be hot-fixed etc without compromising the work that needs to be done on it for the next deployment iteration.
Those are bad hacks on top of SVN. It may remedy some of the pain, but it still doesn't change the fact that branching/merging in SVN is just a PITA and too fucking slow to be used as standard development practice.
Seriously, work somewhere else or figure out a way to become a decision maker there. 
You need to set up the classpath in the ant file to include all the libs you use in your project. Ant does not understand your Eclipse lib settings, you have to specify it in the build.xml. In your case, you'd change: &lt;path id="compile.classpath"&gt; &lt;/path&gt; to &lt;path id="compile.classpath"&gt; &lt;fileset dir="whatever_your_lib_directory_path_is"&gt; &lt;include name="*.jar" /&gt; &lt;/fileset&gt; &lt;/path&gt; 
Application X, version 8 crashes on the production server. Version 9 is under development and has lots and lots of features that are not ready for production. The source control tags tell you which version of your code was used to create version 8, so you can do a bugfix for the app in production. The bugfix can then be merged into version 9, which is in development on another branch. 
At the risk of sounding snarky: To speed up development i uninstalled Eclipse and installed [IntelliJ IDEA](http://www.jetbrains.com/idea/). :)
One of the better tricks I found was to use IntelliJ!
That worked for me but when i try to run the outputed jar file i get this guy C:\reddit&gt;java -jar HelloWorld.jar Exception in thread "main" java.lang.NullPointerException at sun.launcher.LauncherHelper.getMainClassFromJar(Unknown Source) at sun.launcher.LauncherHelper.checkAndLoadMain(Unknown Source) I even tried it with a real simple hello world program and same error
Ctrl + Shift + R : Open Resource Alt + Up/Down: Moves the selected text. Insanely handly when moving things around in for loops, if clauses etc. 
Seems like a missing entry in the manifest file, perhaps? Have a look here: [StackOverflow](http://stackoverflow.com/questions/7368349/nullpointerexception-when-trying-to-run-jar-file)
Thank you! This explains tags for me!
Well, I have a few decision makers in the presentation, maybe you might see us switch. :)
Make it happen :)
Java is an easy learn, knowing it well will put you in the right place for jobs. C# does as well but it is only good for windows. Java is not platform dependent. I think java is more widely used.. and has a shit ton of libraries for anything you could ever want to write. MS made C# to compete with Java. It may be a bit faster but if you are looking for speed learn C, way better.
**Alt + Shift + x, t** - Run as JUnit **Alt + Shift + b** - turns on breadcrumb (very useful for seeing where resource comes from in classpath)
SVN bashing is fun, but that's not why you're here... How you use branches and trunk is going to depend a lot on your own internal environment. That said, this is how my team uses it: Trunk is used for all new feature development or bug fixes that do not need to be applied in production before the next scheduled release. When we reach a 'code freeze' point (defined as 'we're done adding new features for this release'), we create a branch called something like 'release-14-candidate'. New feature development continues on the trunk but is not merged into this branch. Any critical bugs found by the test team are fixed in the release candidate branch and also merged to the trunk. Once the release candidate is blessed and ready to go to production, we create a tag based on the release candidate branch, then delete the branch. It is important to realize that deleting a branch does not cause you to lose history -- you can always get this information back if you need it. Branches are intended to be very short-lived; more than a few weeks is usually a sign of a bigger problem. If a bug is found in production, we create a branch from the release tag, make the change to the branch, merge it to the trunk, retag the branch (ex. 'release-14.1'), then delete the branch. IMPORTANT: DO NOT ALLOW ANY CHANGES TO BE MADE AGAINST A TAGGED VERSION OF THE CODE If you look at our repository on any given day, you will see a single trunk (obviously), dozens of tags, and only a branch or two at the most. Hope this helps. 
&gt; I do have a recursive function that calls itself when there are are more than 10 links on the page.. it goes to the next list of 10 links until there are no more but i don't think its calling itself more than 10 times.. Most likely, it's not hitting the right base case to give up. Which IDE are you running, and are you familiar with running things in debug mode?
i'm using netbeans but this its taking so long to run that I cant imagine going all the way through it. It ran for 69 minutes before I got the error.
Are you checking for circular links? i.e page A has a link to page B that has a link to page A.
Depending on how complicated your function is, I would probably just rewrite it iteratively anyway. Recursive algorithms don't scale that well.
You may have a memory leak, this error will pop up in that case. But it's really difficult to tell with only the description you gave.
I would guess that your recurson is where the problem lies. Does it actually terminate in all cases? I'm not sure that you really need recursion there, your code might be simpler if you changed it to use a while loop. Are you only pulling the html, are the images/flash also? If you are pulling those resources, then I can easily see how you are running out of memory. But the basic answer to your question is that when the JVM launches, it reserves a certain amount of memory for the heap. If that is ever exceeded it crashes. You can configure this this by passing the -Xmx512M to give java 512 Mb, or -Xmx1G if you really want: java -Xmx1G MyCrawlerApp More information on [JVM tunning](http://docs.oracle.com/cd/E13222_01/wls/docs81/perform/JVMTuning.html#1131866) Also, I would recommend using Python with the BeautifulSoup library for this - it really is much nicer for parsing html than anything in Java.
So is "syse" for System.err.println(). And "syst" for a trace: System.out.println("name_of_current_method()");
Thank you! Command+3+"run", then arrow down to 'Run'. And next time just Command+3+enter. Bonus!
i will try a while loop. i was thinking about writing in python but i read that java would be quicker. speed will definitely be a factor here as i have a list of about 33,000 zipcodes i plan to go through and it took me over an hour to get through the first 500.
Or select a block of code and ctrl+i = indent only
The tools themselves might be too hard to explain to decision makers, but you can tell them why people are switching to GitHub as a source control infrastructure provider - they are constantly improving upon their product, and adding "big red button" type features to make the nastiest organizational parts of working with source code, more controllable. Atlassian is another company that's offering this value proposition, albeit in not quite as fast paced manner, nor are they as good in marketing. Also, the products built in the recent years, such as Git or Mercurial, solve not only technical problems, but also legal ones, such as auditability, and organizational ones, such as allowing different teams and even vendors, to work on common problems at their own pace.
&gt; edit2: Use a decentralized version control system like git or mercurial. Those do branches in a useful way. You don't always have the opportunity to use the tool of your choice, unless you're working in a team of one.
Our team uses it this way: trunk - current major version branches - previous major versions and "private" branches tags - snapshots of a release to QA For example, let's say we are developing software ACME version 1.0. Code is committed to trunk. After some changes, we decide to release ACME version 1.0, revision 100 to QA. We copy the current trunk to a tag, then build a release based on the tag. Later on, we decide to move to version 2.0. We need to maintain version 1.0 because some customers decide to not upgrade. We copy the current trunk to a branch labeled 1.0 and continue working on the trunk as the starting point for version 2.0. Maintenance work on version 1.0 can be maintained separately on the 1.0 branch. 
-XX:+HeapDumpOnOutOfMemoryError and then use a heap analysis tool. There's an eclipse plugin. Unsure about netbeans, sorry. As other posters have said, you're almost certainly stuck in a recursion loop. Write some junits for simpler cases. They'll also probably show the problem too. TBH the amount of data you're dealing with is minuscule. If it's not running to completion in a few seconds then you've a problem IMHO. There's options to increase heap size but I really don't think you should be needing them.
Just F11 works for me
Are you for real or is this some insane troll? You've heard of this right? http://en.wikipedia.org/wiki/Trigonometry
I'm not sure language will matter much. The http calls are probably the slowest part of your algorithm. Writing this so that It can be run in parallel is probably your best way to speed things up. Once you tweak it to fix your memory issues. 
You'll have to look into multithreading to speed this up. For HTML parsing, I'd suggest the excellent http://jsoup.org/ library, which lets you use jQuery selector syntax to parse through HTML. Since you're using NetBeans, it contains a profiler http://profiler.netbeans.org/ which has a tutorial at http://netbeans.org/kb/docs/java/profiler-intro.html A profiler will tell you which parts of your program are using the most time and memory, and whether some parts are just waiting for network connections, and so on. You can use this information to optimize your application. If you get a GitHub account, and put your project there, people can look at your actual source, and suggest more concrete improvements.
Maybe this will help you! http://mathforum.org/library/drmath/view/51711.html It explains how to find the distance, but not in Java. Hopefully you can use this as some sort of guideline, because I remember having this assignment before :D
Thanks buddy! You gave me an excellent link! You have my upvote :D