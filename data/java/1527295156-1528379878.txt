&gt; Stupid personal attack. Normal, that's because you are just pretentious without a serious background You don't even know my background &gt; Yahoooo! Complexity is bullshit! O\(1\) vs O\(n\) is not important. Write some algorithm or implement some comlplex data structures or algorithm and come back. But please stop saying that the difference between list and array is not important. This is just ridiculous. It's rarely important. It might matter a lot more if you're writing operating systems or embedded systems where resources are limited. Besides that, it rarely matters, especially for anything web related which is like what 95&amp;#37; of programmers work on. &gt; No. It is wrong. Okay.
If we're looking for the silver lining, I guess it does start a conversation on Kotlin and bring in more interest.
Kotlin is not just Java 1.1, it deserves being its own programming language that simply has roots in Java. Java will incrementally get better but will never the like Kotlin.
A good question considering that Java is known as an enterprise language with its robustness and reliability. All I can say that it is great for production Android apps.
Honestly, the Java Swing default styles at best look like a Windows 2000 app from 2003. Its like going back in time 15 years. 
Probably just “java is dying” things
&gt;Consider the simplicity of calling Java code from Kotlin compared to the complexity of calling C code from Java. You're comparing apples to oranges. Java to Kotlin calls are running in the same virtualized and managed environment. Java to C calls are so much different, as they are basically cross\-subsystem calls. Calling from a managed layer to a non\-managed, unsafe environment is never going to be easy. And the JVM was designed for cross\-platform execution, but the native C code is architecture dependent.
Just about everything Shipilev writes is worth reading.
Just the String templating and data classes alone makes us want to switch to Kotlin. Management won't have it though; "Kotlin developers are hard to find". Ugh.
I’m using it in healthcare, if that counts. 
But you *are* speaking about that, because the performance characteristics you mention are those of a linked list, not an array list. 
Well, to be fair that's Lombok's pitch as well.
&gt; It's rarely important. It might matter a lot more if you're writing operating systems or embedded systems where resources are limited. Time is always limited... Algorithms are important. &gt; especially for anything web related which is like what 95% of programmers work on. That's true. But Java is not limited to web apps. Come on!
&gt; Because they are effectively completely separate from objects. No. In the OOP theory a class is also an object because there are Metaclasses. &gt; Keeping static methods separate in a singleton object is the natural solution. (Kotlin does some odd things here too, This is just a matter of taste. The drawback of this approach is that you complexify the code of a everybody 
Java does not have metaclasses. In java, none of the features that connect statics to the instances of the class they're on (partial shadowing/overriding) are actually good practice.
What language are you writing in? I'm primarily a Java developer. If I had time, I'd contribute to Spinnaker because cloud deployment is interesting and important, and I don't feel like there are good options out there. 
Isn't it dead?
OmniFaces and Soteria, code looks clean and has some clever tricks in it.
Depends what you already know and what you want to do.
OpenSSL GnuTLS and others. Focus on Math
Learn another language. Scala, Haskell, Rust... there are many exciting languages out there that will change your view on Java and broaden your horizon. 
Redis or Vertx. Some really interesting code patterns and very clean.
[Akka](https://akka.io). Learning the actor model will change your perspective on program structure. Learning Akka Cluster Sharding, Akka Persistence, Akka Distributed Data will teach you distributed systems and event sourcing. 
JavaFX
Lol
You might have beter luck over on /r/Minecraft. Apart from that, I seem to recall that minecraft mods have to be placed in a specific directory and most require minecraft forge installed nowadays.
Vert.x 
Hibernate
Cloud and microservices are really fancy nowadays. I'd go with the Spring Cloud umbrella, Eureka, Zuul, Gateway, Ribbon, Zipkin, etc. and also for Spring Contract, Swagger \(\+ the codegen as well\). I'd also check Kafka more deeply or RabbitMQ, JMS or any other messaging
Clojure
Netty
My own. I'm on transitional phase (somewhere between "hey I can print loops!" to a professional). Currently working on neural net library. I'm not sure if I can do it but I'll give it a try. 
Bitcoin Core, Ethereum, or a similiar cryptocoin protocol. Not because I am interested in c++ much or expecting super clean code, rather because I would like to gain some knowledge in Blockchain development.
 to run a jar like a normal program try java \-jar yourjarname.jar 
It looks like in your [submission](https://www.reddit.com/r/java/comments/8mbsbh/javadoc_link_to_test/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Whenever I hear people talk about using BigDecimal I know they haven't actually worked in finance. It depends on what you mean by financial applications. If you are handling money \(as in processing payments\) you should really use a long denominated in pence/cents. If you are in Zimbabwe, or you need to FX conversions to Zimbabwean dollars, 63 bits aren't enough so go for BigDecimal. On the other hand, if you are simulating the risk of a position in a traded instrument, the error in the model itself is going to be much larger than errors in floating point arithmetic and you would be crazy to use BigDecimal. 
In command prompt i’m assuming?
jQAssistant. A nice tool to inspect your application architecture with constraints to ensure developers dont break your software design. 
Yes, and in the same folder as the jar. 
Yes, this is a possible. However, it does not mean that static is bad
&gt; An array list is a list with O(1) random access. Not exactly, removing an element is not in O(1) 
That’s not random access, that’s deletion. 
A data structrue is defined by all of its operations If arrays AND lists still exist it means that there is no one which domainates the other. You have to consider all the operations
 &gt;A data structrue is defined by all of its operations Can you elaborate on this? Are you asserting that O(1) structures are O(1) in *all* operations? Can you name any structures that meet this definition? I assure you that arrays certainly do not. 
Isn't kubernetes solving that big time?
&gt; the latest Java That's probably the issue. I doubt Minecraft or Optifine can run on Java 10. Have you tried using Java 8 instead?
Eta language and Apache Spark
A form of type inference was introduced into Java 5 along with generics. Consider this: List&lt;String&gt; list = Collections.EMPTY_LIST; This generates an unchecked warning, because `EMPTY_LIST` has the raw type `List` and not `List&lt;String&gt;`. A corresponding method was introduced to deal with this: List&lt;String&gt; list = Collections.emptyList(); Where's the type inference? The `emptyList()` method has a type parameter `T` that's inferred to be `String` in this case. In fact inference works so well for these cases that most people don't know that there's a full form where the type parameter is specified explicitly: List&lt;String&gt; list = Collections.&lt;String&gt;emptyList(); 
Nah it works fine, but the minecraft wiki recommends disabling a JVM option `-XX:+CMSIncrementalMode` as otherwise Minecraft won't start properly / at all
Huh, interesting
Cool, so I would call that specifically type parameter inference. It’s very nice but I think most people would agree it’s not the generally accepted meaning of type inference.
The Dodgers. LOL.
Interesting, I've been using vert.x and it has been less than ideal. I'll give this a whirl, thanks.
I mean in a Java subreddit one would assume the question is about Java software.
I would learn tomcat since that’s what we still use at work. I love all the new technologies but people are so slow to change. 
prefuse.org - Best visualization library for Java, hands down. Amazing features, really well engineered. 
Nope not my article but my github issue
rxjava
I've looked a lot at the source code of [Kumuluzee](https://github.com/kumuluz/kumuluzee) lately. It has a lot of approachable solutions for how to integrate most of the Java EE technologies out there.
You probably know this but for OP he wrote a book called Clean Code and has a chapter or two where he just walks through the code of his app.
It’s more OpenShift than vanilla Kubernetes. But fundamentally yes. 
The only correct answer. 
If you're a Java developer and don't know the various Spring frameworks (DI, MVC, Boot), spend some time learning them. 
I was really impressed by the [JavaUnits](https://github.com/paleolimbot/JavaUnits) library by Dewey Dunnington. I think if I dragged my mind through the source enough times, I might learn a heap about good coding.
Reactive programming with project reactor or rxjava. 
I would learn scala and study akka. Even if you go back to working in java I think it would help give new insights into structuring your code.
I think your stack looks fine. I'm using right now in production: * Maven because I don't like the programmatic approach of Graddle. I like my builds to be configured rather than programmed * Java 8 + Lombok (it is a little like cheating, I know) * Guice for DI, but I would try Dagger2 or even [Feather](https://github.com/zsoltherpai/feather) * Cassandra &amp; ElasticSearch, but I really miss ACID transactions, go RDBMS go! * [jOOL](https://github.com/jOOQ/jOOL) as a functional oriented library. It makes Java8 streams better, without making significant changes. * GSON to tranform from/to json. Remember one thing: By default, GSON escapes html, disable that (use disableHtmlEscaping(true) when you set up your GSON instance) * Hazelcast to share data between nodes (Queues and caches) I like it because it doesn't need extra servers, but I'm not comfortable enough with it yet * No template language (good) but AngularJs (bad). I wish I started with React, Vue or even WebComponents * Webjars to include javascript/css dependencies directly into the pom.xml and not use any Node related stuff. Works great, but I there is no way to use TypeScript, Sass and I feel kind of lonely. * No extra library for websockets. Spark support was enough to me needs (basically show task progress) Regarding the "Is it feasible to have all POST bodies be bound without explicitly doing some in each handler?" Not directly, but I ended up with a SparkHelper class to map and transform the standard CRUD operations. So instead of Spark.get("/user/:id", "application/json", (req, res) -&gt; { Long id = Long.parseLong(req.param("id")); return userRepo.get(id); }, jsonTransformer); Spark.post("/user/", "application/json", (req, res) -&gt; { UserDTO user = jsonParser(req.body(), UserDTO.class); return userRepo.save(user); }, jsonTransformer); you can just write sparkHelper.crud("user", userRepo) And get all field mapping, transaction management, parsing, etc. in one place, nice and consistent. And if you are smarter than me, you could use a userService and take care of validations before even entering the userRepo, as you should. I like Spark and this approach, but I found myself spending too much time doing everything Spring does for me for free. On the other hand, when I go full Spring mode, I spend too much time convincing Spring to do what I want, so... 
Are you me Seriously, we've been using vert.x and their event bus at my work up until about a month ago. We implemented something similar to Akka for our new feature (Actually based on Lagom, which is build on Akka) , and have been loving it. Helps a lot with separation of concerns, makes testing significantly easier, and it seems to force us to have our data models correct.
Tensorflow. Still lacking full Java support but I’d like to become fully familiar with it in python. I have a side project that will be utilizing it and just haven’t found the time yet to familiarize myself with it
Last time I looked at the Oracle Global Price List, it was USD 5k/core/year...
Are you thinking of [Jetty](https://en.wikipedia.org/wiki/Jetty_\(web_server\))? Because Netty wouldn't really be something I'd use in place of Tomcat.
**Jetty (web server)** Eclipse Jetty is a Java HTTP (Web) server and Java Servlet container. While Web Servers are usually associated with serving documents to people, Jetty is now often used for machine to machine communications, usually within larger software frameworks. Jetty is developed as a free and open source project as part of the Eclipse Foundation. The web server is used in products such as Apache ActiveMQ, Alfresco, Scalatra, Apache Geronimo, Apache Maven, Apache Spark, Google App Engine, Eclipse, FUSE, iDempiere, Twitter's Streaming API and Zimbra. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
i have tried but nothing happens
I use the dacapo benchmark: http://dacapobench.org/
I mean, you can totally use netty in place of tomcat, it has an http protocol handler (though no servlets). Not sure why you would though (or why vert.x does this)... 
We are using it to scale the communication between two systems. One system is a set of microservices producing files (JSON files) and the other system is a set of consumer microservices that is translating this jsons in another "canonical" format used in our platform. We have a nice infrastructure thing that reads metrics on how full the QUEUE is and dynamically allocates more consumers. In this way we can resist to high load of traffic. Before that everything was done synchronously and the system was overwhelmed with the amount of processing. After the introduction of the Queues we can handle everything.
&gt; your "static" methods can adhere to an interface contract They can, but that is only very very rarely useful.
I know what Netty roughly does, I just think because of the name similarity that /u/ComfortableGoat probably meant Jetty.
yea you're probably right.
**Stack (abstract data type)** In computer science, a stack is an abstract data type that serves as a collection of elements, with two principal operations: push, which adds an element to the collection, and pop, which removes the most recently added element that was not yet removed. The order in which elements come off a stack gives rise to its alternative name, LIFO (last in, first out). Additionally, a peek operation may give access to the top without modifying the stack. The name "stack" for this type of structure comes from the analogy to a set of physical items stacked on top of each other, which makes it easy to take an item off the top of the stack, while getting to an item deeper in the stack may require taking off multiple other items first. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
 &gt;Have a look at abstract data type. For instance a stack. An abstract data type does not have performance characteristics, because it is abstract. I can trivially write a stack that does not have O(1) push and pop operations, just like I can write a list with O(1) random access. . &gt;For a list, you will have : removeNext, InsertAfter, next or something similar. There are all in O(1) No. They are characteristics of a *linked* list. &gt;Therefore, when you say that an array is a list with randomAccess this is not true. But I didn’t say that. I said an *arraylist* is a list with O(1) random access, because it is. 
[Google Guava](https://github.com/google/guava). Not only does it have a great code quality to study, it also is really useful to use generally as it has lots of useful classes and utility functions. It's not a super large project, so you may already have a good idea of it after a week or so, depending on how fast you are.
Kubernetes + Spring 5 (reactive streams)
[This](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) is it correct?
Smile links: Link 1: https://smile.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) Amazon Smile is a program that donates 0.5% of your Amazon purchase to a charity at no additional cost. I am NOT affiliated with Amazon. **Parent commenter can reply with 'delete' to delete this.** ^[Github](https://github.com/hkyq/Amazon_Smile) ^| ^[Blacklist](https://www.reddit.com/message/compose/?to=Amazon_Smile&amp;subject=blacklist&amp;message=Do%20not%20change%20subject) ^| ^[Extensions](https://www.reddit.com/r/hkyq/wiki/extensions) ^| ^[About](https://www.reddit.com/r/hkyq/wiki/index) ^| ^[Problems/Suggestions](https://www.reddit.com/message/compose/?to=Amazon_Smile)
Quasar Analytics. Me colleague worked there and so I know that they use recursive schemes, free monads, lenses and heavy FP in general to get highly performance and reliable compiler.
[The Architecture of Open Source Applications](http://aosabook.org/en/index.html) should list a Java example that you can read about.
We used that one. Biggest disappointment in testing tools so far. I think that the whole idea is utterly wrong - test specification should be much closer or even coupled with test harness. Refactoring tests in Fitnesse - horrible nightmare. I would suggest stick to junit(5) when possible. After all you can do the same things there. 
Wat? RxJava and Hystrix are two different things. And talking about RxJava - if you aren't android devrloper, then give Reactor a go. 
Yes that's the one. He's got a few other "Clean" books now but I believe that's the first.
Yea, I don't believe in the concept as well. At least it is written well
With what exactly?
An installation tutorial mentions that you need to install Java 32-bit *and* 64-bit both.
jOOQ. Hear it's top notch
I expected more from this article. It's mostly just meaningless bikeshedding.
https://www.smbc-comics.com/comic/2013-06-05
50 downvotes? Is the BigDecimal police policing again??
Oracle plans to move Java serialization into its own framework \*
If serialization did not exist, it would be necessary to invent it. (Apologies to Voltaire.) In fact, serialization does exist, AND it has been reinvented many times. 🤔
About time. Brian Goetz has been complaining about it forever.
Serialization is how we decompose objects into bytecode and then reconstitute them again, right? The alternative is saving all the data members into some scheme and then re-instantiating that object with the saved data again at a later time, right? I remember when I learned about serialization I felt like such a novice for writing code that way to simulate object persistence. Now we’re saying serialization is bad? Please explain like I’m a CS student who feels like he should know the answer to this question but doesn’t.
The problem is not serialization per se. It's Java's built in serialization, which is responsible for a third to half of the vulnerabilities in the JVM. Example: https://pt.slideshare.net/mobile/codewhitesec/exploiting-deserialization-vulnerabilities-in-java-54707478
Lol
a list is a shortcut for linked list in algorithmics. &gt; An abstract data type does not have performance characteristics, because it is abstract. I can trivially write a stack that does not have O(1) push and pop operations, just like I can write a list with O(1) random access. Ok, so have a look for data structure. it introduces the complexity :-) https://en.wikipedia.org/wiki/Data_structure
Almost no one uses the built-in serialization framework anymore. Indeed JSON (via Jackson) is the norm now.
No, then you'd use a database. Or if it's too trivial for a database, then yes you'd write JSON to a file. 😁
&gt;Would I use JSON if I wanted to save an object locally to disk? Why not? We do this. There are also binary variants of JSON like BSON or ProtoBuf that may be used if you don't like plain text or need to store binary blobs of data. 
Why not? Why differentiate between remote and local? Keep things consistent makes life easier.
&gt; Serialization is how we decompose objects into bytecode and then reconstitute them again, right? No, this has nothing to do with bytecode. Serialization is turning the *state* of an object (i.e., values of its instance variables) into bytes (which can then be saved to disk or sent over the network, etc.). &gt; The alternative is saving all the data members into some scheme and then re-instantiating that object with the saved data again at a later time, right? This is exactly what Java serialization does. The problem is that the scheme was not well designed and has lead to endless security issues. The root cause is that the Java Serialization API trusts the input to deserialization, but people use it to deserialize untrusted input from the network etc. An attacker can make the Java Serialization API instantiate unexpected classes to do unexpected things. &gt; Now we’re saying serialization is bad? *Java Serialization API* is bad, serialization itself is a basic mechanism used by just about every application that moves data outside its process boundary (into a disk or a network).
Sure. Disk space is cheap, and JSON is supported by tons of other languages too. 
Good. Any sane system uses something like JSON or ProtoBuf with generated data objects that CANNOT have behavior. 
&gt; Almost no one uses the built-in serialization framework anymore. If only... Maybe this will convince people to switch though.
The problem was you thinking technology as a ladder, with every next step as the replacement of the previous one. When, in reality, technology is like a toolbox where every new tool just increases your options and you have to know well where is best to use each.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You shouldn't always trust everything you hear 😉
This might be one of those times i begrudgingly recommend mongo.... *sigh*
Your titles makes no sense.
What's that JAVA you're talking about?
Jersey, but can I have two months?
Wasn't JSON in itself not well defined? And then you want a streamable format, I dunno how well that is supported in JSON land.
In the year 2156 Universal Transcorp prepares to decommission the last Java application in Prod. We followed the engineers and technicians that worked on this historic project. Don't miss the six part documentary "The Dev of Java" every Friday 8PM, central Martian time.
The Java serialization that no sane person has used since the '90s? 
JSON is *a* norm, but the key is to avoid anything being *the* norm. You may favor JSON because of ease of use, legibility, or robust tool support. I wouldn't use JSON, as the text representation is inefficient and I need more speed. Picking one limited standard is going to make at least one of us unhappy — as the current Java Serialization does. 
&gt; Nah it works fine, but ... won't start properly / at all There's a bit of a gap there, although I do get your point. :)
Well that's the thing. Sometimes no issue. Other times weird crashes. Other times it won't start at all, but that's the rarest case (for me).
\*SO\* many things will break...
Whoa there... Don't take the fact that jcache uses Java serialization by default to be some kind of ringing endorsement of the technology... I was on the expert group that designed jcache. I tried unsuccessfully to make caches capable of having a pluggable serialization mechanism. It was not done because we wanted to keep the scope small to get something released... But even when we were working on the final drafts before releasing it we were aware that Java serialization was crap... It's just assumed that you will use whatever mechanism your underlying caching provider has to configure the serialization mechanism just like you have to use whatever underlying configuration to configure most other aspects of a given cache.
Hystrix uses its own flavor of rxJava. i personally like the circuit breaker pattern
https://opensource.googleblog.com/2017/03/operation-rosehub.html
Into it's new data classes framework, once that's done
He wrote the Java concurrency book. I think he also had some part in Essential Java2.
Isn't the license perpetual for the last version you had before it expired? Should be good for quite a while if that's the case—no need to rush.
Why don't you use the Community Edition? It's completely free. 
Precisely. We (Azul) charge per server, where a server is defined as up to two sockets with as many cores as you like. For a typical two-socket server with quad-core CPUs Oracle's list price is $40,000 per year. Even our entry point is less than $500 per server. I think that qualifies as reasonable :-)
I think the license is only perpetual if you bought it for some minimum time. But as the other person wrote, just use the community edition. 
Only *you* can really answer this question. I, on the other hand, *will* be renewing mine when it expires because I'm too lazy to relearn shortcuts.
Use whatever IDE makes you happy and productive :)
I use IntelliJ Community Edition on my work laptop, but recently swapped to Code on my home desktop computer. It is obviously lacking some features compared to IntelliJ, but it definitely gets the job done. Plus it just _feels_ a lot lighter than IntelliJ. Unless you're working on something complex, I'd say VS Code is a fine choice.
my license expired but I can use an older version for ever. Thats what I will do until something irresistible gets added.
Use Linux subsystem or better, use directly GNU/Linux
Try it out. I've wanted to make the switch for a while, and I've tried it out a few times.. I always come back to Intellij though, I'm just a lot more productive with it. 
VScode is a wonderful editor for Java programs. You will need something to generate project files like Gradle or Maven but other than that all you need to do is install a couple java plugins and you are good to go! Just google "java vscode" and one of the first links should be the java page on the vscode website.
The sources were credible
Dont take this as a harsh response, just trying to help. At least I do not know what you are talking about. There is a java applet in a single file? Like a .jar? What exception site list? What is the context of all of this? If you give more info maybe someone might be able to help you. 
It's got nice looks, but it's more of a text editor.
IntelliJ has a lot more to offer for Java developers than VS Code. And I say that as someone who has almost always a VS Code instance running. IntelliJ offers much better refactorings tools, fantastic expections, quick fixes, java specific project management features, and so on. If you're no longer willing to spend money for a license, then just use the Community edition. It has much more to offer for Java developers than VS Code. 
Addendum: if no IDE makes you happy and you constantly feel unproductive - seriously consider a different career. Don't waste your life doing something you hate. 
No'I was feeling playful
Good advice. https://en.wikipedia.org/wiki/Law_of_triviality https://www.lifehacker.com.au/2012/08/avoid-the-trap-of-productivity-porn/
**Law of triviality** Parkinson's law of triviality is C. Northcote Parkinson's 1957 argument that members of an organisation give disproportionate weight to trivial issues. He provides the example of a fictional committee whose job was to approve the plans for a nuclear power plant spending the majority of its time on discussions about relatively minor but easy-to-grasp issues, such as what materials to use for the staff bike shed, while neglecting the proposed design of the plant itself, which is far more important and a far more difficult and complex task. The law has been applied to software development and other activities. The term bike-shed effect or bike-shedding was coined as a metaphor to illuminate the law of triviality; it was popularised in the Berkeley Software Distribution community by the Danish computer developer Poul-Henning Kamp in 1999 and has spread from there to the whole software industry. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
I'm using netbeans though..
version 0.5.0 \(under development as we speak\) is a complete rewrite making the integration code less than 10 lines of code
great question.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Nice try :D
I created a post on [CodeReview](https://codereview.stackexchange.com/questions/195331/encrypted-safebox)
I see a pretty big problem with this model: If you're running locally, having your IDE do the debugging is so much easier: You can breakpoint and hot code replace and the like. If it's running on the server... you want me to... run arbitrary code off of a github repo? I appreciate the attempt to make it real, real simple, and in practice adding a dependency really isn't much more secure, but stuff from mavencentral and co at least offer (at this point still mostly theoretical) mechanisms for sign-off and the like. On the flipside, you can inspect the code so that's nice. For some future version, I guess a dependency based solution (where I start my app with "Nudge4j.boot();" instead of the snippet you showed, and this does NOT cause nudge4j to load any resources. Opening the :5050 page can load in CDN jquery and co, and offsite images perhaps, but that's where it should end) would be a nice to have if you ever get around to it. Added to the arsenal in case production starts showing weird stuff I can't seem to reproduce locally. 
Take a look at Vaadin, and some of their quick start guides.
Thanks for your feedback: fair, clear and valuable. Regarding the "having your IDE do the debugging is so much easier" I would point out that, from this version, all code that gets executed is stored in the localStorage of the browser making it quite easy to reuse all your favourite snippets. A useful feature which "evaluator expressions" don't seem to have. cheers
[removed]
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
If you have to recommend one class (or top5 or package), what would you choose? 
Taking courses just give you an basic introduction no matter what you want to lean.. if you want to do some interesting things, go to stack overflow and try to solve problems that are labelled as java. Don't see the answer posted by other guys until you solved it or finally you couldn't solve that question. Summarising questions you are interested and then go to Udemy take some related courses. I think this is one of the best and fastest way to help a fresh graduate student picking new techniques since many questions on stack overflow are realistic..p
That looks awesome. You may want to check out [https://github.com/vision4j/vision4j\-collection](https://github.com/vision4j/vision4j-collection) \- it is for more high\-level problems, but is definitely related, so I would be glad to understand your project in detail and possibly contribute. Keep it up!
Neither VScode i think. eclipse does though.
Buy this book: https://www.manning.com/books/spring-in-action-fifth-edition And follow all the chapters in order, build something as you learn. This book is a fantastic introduction to Spring, and good Java development practices. You will also identify gaps in your training: the author uses RabbitMQ, what is RabbitMQ? read a tutorial/documentation on MQ and come back to the chapter. Be ready to slow down and break it down, don't expect to learn quickly, it takes years to really master spring.
Source? I can't find any info about this at http://openjdk.java.net/projects/amber/ or in the mailing list archives. I did find an old, withdrawn, JEP from before Java 8: http://openjdk.java.net/jeps/154
&gt; one class [`org.jooq.impl.DSL`](https://github.com/jOOQ/jOOQ/blob/master/jOOQ/src/main/java/org/jooq/impl/DSL.java) because it is the biggest &gt; one package `org.jooq.impl` because it contains almost everything
UI looks pretty. But I prefer open source
This application is the incarnation of an idea I've had for some time. At work I'm frequently investigating incidents and the like in legacy applications. There's not really a administrator interface or something, except for access to the databases. I found out that the most frequent things I used to do was: 1. Construct an initial query \(a starting point based on some basic data\) 2. Construct another query based on output from the previous one 3. Construct another query based on output from the previous one 4. etc... The data is structured in such a way that using only joins can be a bit tedious to 'navigate' through. Especially with 1:N:1:M:K relationships. To make things easier, I decided to make a drill down application, which is in fact a sort of lazy query evaluator. It basically boils down to this: you define queries where the input is given from the output of the previous query. For more details, and if you'd like to test it \(please do\), consult the `README.md`. I'm not sure if everything is clear, but I'd like to hear some constructive criticism. And of course, hoping it's useful for others. For direct downloading, check [the releases page](https://github.com/krpors/gimlet/releases/tag/1.1). Just unzip/untar it and run the `.sh` or `.bat` file. Happy to answer any questions!
Check to make sure you can build it. Is it a nice maven project? A slightly ugly ant based build? An unsupportable gradle (there are supportable gradle builds - just giving an adjective to each)? The abomination of "export runnable jar" from eclipse? If you can't do something to build it, its as good as not having any source at all. That custom library that was part of "other libraries" in the build assembly or not checked in that you need must be part of the deliverable. Run it through some static analyzers. PMD and Checkstyle would be the first two. There are more than that - but those are the two at the top of my list. Its not so much a "see all the things wrong" but rather "was the developer consistent in his style and handling of not so unusual cases?" If they the developer custom formatter that differs from a major style guide, get that. If the developer didn't format their code, its going to be ugly and check style is going to warn about everything that isn't important.
If I had to take on a project things I would look at. Code coverage/tests. General coding practices. Does it look like it was written by a software developer or hacked together by someone who thinks they are smarter than they are. Scan it with a few opensource/free tools.. PMD, Checkstyle, Spotbugs, SonarLint, owasp dependency check. I support a lot of code written by people I would call lazy/rushed programmers. Its not that they are dumb its just complex. Most of the code I maintain in general was written by people that are no longer around. I find it easier to make changes when tests are in place ;-)
&gt;* Uncertainty of future of Scala &gt; - What's the deal with Dotty? Dotty is just the codename for Scala 3
As others have said: finding out how difficult it is to build/run the thing will tell you a lot about how good the overall structure is. Static code analysis will also tell you a lot - pmd, checkstyle and findbugs are my personal favorites. And finally try to find out more about the process used to develop that thing - are there any tests? are they automated? is there a CI-build? Do you have access to the source-code history (e.g. git history)? Going through the history items can tell you a lot about how a person codes.
Looks nice, just saw one thing; "can correctly predict the given boundaries" for chair etc. When clearly there are more chairs visible. :D but still nice, tho. Just found that to be funny.
Thanks for doing this. Your email is on the list: http://mail.openjdk.java.net/pipermail/net-dev/2018-May/011508.html
my mistake, you didn't mention being developers so assumed you were business user or something.
This overall question reminds me of my previous experience in consulting. &gt; But they have a short timeline and have been somewhat vague on what they want us to check out exactly. To me it sounds like either: * They have no idea what questions to ask, but are hoping you'll discover important pieces which can help them ask the right questions. * They may lose access to their one\-man support team for some reason; maybe he wants to move on, or maybe he's demanding more money, or maybe your employer is cheap and trying to cut him out of the deal. &gt; it sounds like they want to ensure we can support it in the short term. How would your employer respond to "we can't support it?"
1 - You are being given a hospital pass. You aren't Java devs and you don't have a clear requirement. You need to go back and solve this first with management - in all honesty you will need a miracle to do even a passable job - you need a contractor or skilled Java hire. The management must have a plan B for when the contractor realises what you are doing and potentially plays hardball. Running the tools mentioned by other posters is a great start but how will you even interpret the results and what will you compare them to? This is not to doubt your capability but to point out that what may seem like a small job is in fact a highly skilled, often tedious and very difficult endeavor. 2 - You have a bespoke product on your hand. I would suggest you need to do the following analysis and even then a big project will still be difficult to pin down: * What is this hosted on (what server does it run on and was it developed on)? Does anyone know how to configure this? * How many lines of code do you have? How big is this beast? is it an enterprise project or something small? * What IDE is this developed with? There are lots of hidden parts to projects like workspace metadata that may be critical to maintaining the project. Working backwards to create projects from pure source files to try and recreate whatever arcane project structure and build magic he uses could be a disaster. * What version of Java is used and how many J2EE specifications http://www.oracle.com/technetwork/java/javaee/tech/index.html does the website use ( for example a typical legacy enterprise web project may use Jave Server Pages, Expression Language, Annotations, Bean Validation etc.)? * Can anyone understand how to set the various logging levels and interpret the resulting log files? * How many third party jar files are used in the build and at what version (you may have some out of date - no longer downloadable and certainly scary from a security point of view dependencies)? * What frameworks are used to implement the MVC framework (does it even use an MVC pattern?)? * Does anyone understand or have a working knowledge of those frameworks? * Is the code well commented (well commented means that you can understand it - it is very rare to find well commented code even with well funded frameworks, its a very tough skill)? * Has he provided any support documentation, does he have design documents, do you have all the relevant passwords and crucially do you own any stored data and have backups? * Are there any tests? Do those tests come in the following flavours - unit (low level, method by method), system (often ones that exercise several architectural layers including database access) and finally are there some high level black box automated tests (for example selenium tests that simulates a user clicking and entering data on a webpage.) * Do you own the source code or do you just get the final product from your contractor? If you don't have the source you are in big trouble. * Do you own the assets for the site (images and so on)? * What is the cost of this site being offline? If the contractor is frozen out and then you get stuck it can take a long time to get things working again. The best and safest thing you (the company!) can possibly do is reassure the original contractor by having a frank and open discussion - possibly offering a maintenance retainer if the site is valuable - and ask the contractor to include current staff in the ongoing maintenance. Add an element of paid knowledge transfer. What management needs is to solve the risky relationship they have with this single point of failure - your contractor - and not be trying to make this a technical problem (with you being responsible) which will probably burn them and your customers if it goes south.
&gt;Normally, we'd ask them to hire a contractor to do this since we're not Java devs. But they have a short timeline and have been somewhat vague on what they want us to check out exactly. I've been doing this a long time, and every fiber of my being is telling me that this paragraph has "project failure" written all over it. 
Ask your company to hire the dev for a contract to Port the software to your build and deployment stsck. Call it a "productionization requirement" to prepare for the possibility of supporting it. With that you get the opportunity to see it up close and personal. And you get the opportunity to run it through all of the manual and static analysis recommended in other comments
Admittedly, we have few details on their final goal. But as far as we can tell, it's really just ensuring we can fix emergency issues while they find a contractor, if the one many company ends up leaving. That's not an unusual request and we've done it before in similar projects. We're not going to support adding features, extending the project, etc.
Others have already mentioned checking that there are tests, but I can't stress how important this is. Your analysis of the test code should be even more thorough than the production code. The project should have lots of unit tests and a fair amount of integration tests. The tests should be clear and easy to understand. They should serve as live documentation for the application itself. Make sure they run and are repeatable (some integration tests don't clean up after themselves and only run successfully once). Check the code coverage and mutation coverage. Not enough people use mutation testing IMO. These metrics are important because if they are high enough they will give you confidence to change the rest of the code without breaking it.
Why is MVC a gold standard here? There's lots of viable architectures
Why not vert.x?
I don't think its a qualitative statement regarding MVC but mainly a quantitative one - most books and legacy enterprise websites written in Java use it and therefore most Java web developers of the last 20 years will have been trained in it. MVC is a fundamental Spring Web / Struts concept. If you have better architectures for specific scenarios that's great and I'm a bit jealous - I'm stuck on legacy support currently.
Absolutely. We have no time to go crazy on something like this. Nor do we have the desire. Regardless of the result of the report, we plan to make it crystal clear that if the one man company drops, a contractor has to be brought in. If we're able to get the project to build and what not, then we'll be confident that can we do emergency support only.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This is the best answer so far. The only thing I would add here is look at the test coverage as well. Do they have unit or cucumber tests or both? If there are no tests then your answer needs to be “this is unsupportable” as you will not know if the code is functioning and is covered. If there are tests, how much of the code is covered. If the code has a 80% or greater coverage, you are cool. Anything less than that, the answer needs to be “this is not sustainable without more testing.” All this will tell you is how well the code is constructed, not if it meets specifications (unless there are good cucumber/gherkin style tests that have been verified). One of the things about java, in my opinion, that a lot of people seem to forget when they come to it from other languages is that it is a strongly typed, strongly OO language that encourages verbose (but consistent) implementation. There is very little syntactical sugar in Java when compared to something like C# or C++. It generally eschews compiler driven or dynamic language features (dynamics and lambdas excepted). This is both a strength and a weakness as you must cover your bases unless you use a framework (like Spring) that does things like resource caching and management and IOC. tl;dr—It must have good unit tests or other tests to be supportable,
1. S.O.L.I.D OOP design. 2. Good use of a test framework such as JUnit 5 3. Well organized repository 
Mark Reinhold (Java Platform Architect) talked about this in a video interview at Devoxx UK a couple weeks ago. Relevant topic starts at 13:20: https://youtu.be/4CS6NLK_hUc?t=13m20s
Agreed. Specially for mobile device.
&gt; https://pt.slideshare.net/mobile/codewhitesec/exploiting-deserialization-vulnerabilities-in-java-54707478 It seems like these vulnerabilities can only occur when the developer has overriden writeObject etc? Just wondering
Is it well documented? Is there a known source of truth like a set of use cases that defines the software's expected functionality?
Are they not open source?
Just found the GitHub repo. Looks, that they are actually open source. The licence looks very restricted.
Yes, totally. Segmentation is still a difficult problem. This is an image that the model has never seen and I think has done pretty well. Thanks for the feedback :D
Free beer, or giving at very least donations?
Some random ideas: * Look how data is mutated. I once worked on an application where mutable lists of mutable objects were passed around and mutated everywhere. It was a nightmare to understand what was going on, and obviosly a nightmare to debug and fix bugs. (In general: immutable is better). * Are there clear boundaries between components? * Deep inheritance is often a sign of a fragile design. * Is there code with many level of nesting (if/else, for, ...)? * Is the naming good? * Is the code in general understandable? * Check whether best practices of the used frameworks are implemented. * If you know of a bug, try to fix it. You'll learn much about the application and its quality (or at least try to find out how it could be fixed). I'd suggest to get a copy of "Effective Java" and "Clean Code" and read it first. These books will give you a lot of ideas.
Tell that to my employer lol
i'm not a bot. Please share the Queries for other person to answer.
Use static code analysis such as Sonar to get an idea about code quality and test coverage. This shows you if the code is clean and elegant. It doesn't tell you much about the design though. IntelliJ Ultimate has metrics you can check such as cyclomatic dependencies, etc.
What does your project do ? Does it do something very simple in a very complicated way \(like the payment system at TSB\) ? Is it complicated because many people added their bits and bobs and then left ? Is it complicated because the project uses technologies which are obsolete \(i.e. : user interface in GWT\) ? If the answer is yes or yes\-kind\-of... then rewrite it. Just start with a proof of concept and show that now with Java 8,9 or 10 you can rewrite it in less than 1,000 lines...
Quick add to test coverage: run the tests through PITest to verify that the coverage % is actually meaningful. http://pitest.org/
SonarQube also gives their estimated man-hours to remediate technical debt, etc, which may be very useful for you case.
Just be aware in my experience I find some of the estimations to be way over in time required to fix. I think it was giving me like 10 minutes required to add a Java doc comment.
Thanks, I see, you're providing a way for using off\-the\-shelf CV or machine learned CV solutions for easy integration into a productive environment. My project is rather general purpose imaging, focused on manipulation or generation of images. It's core feature is the ability to iterate/stream over the image using a pixel abstraction that allows for read/write of the underlying image data \(typically int\[\] or several double\[\]\) and also allowing this to happen in parallel. I try to provide an API that a developer can play with, an 'imaging sandbox' so to say, which requires very little effort to quickly get from an idea to an image. If you want to get more insight into the project, I'd point you to the ImgBase and PixelBase interfaces ;\)
What backwards compatibility would this break? Someone parses the output of maven for stacktraces and expects them to be incomplete and the tool fails when all of it is present?
&gt;Joins are useful of course, but fail to display data properly when you have to find specific information when there is more than 1 join. You could get double data and things. Also, when there are N:M relations between tables, a drill-down functionality might come in handy. This tool attempts to make that drill down configurable. Can you give an example of this?
SciMark: https://math.nist.gov/scimark2/
[removed]
Java bashers always forget to mention the most annoying part of being a Java developer; daily phone calls, emails and text messages from recruiters.
That is true for quite a lot of languages.
We’re not talking about other languages. We’re talking about what is bad about Java. Definitely not good for those who want few career options.
I would say this is geographically driven. I my experience, employers are looking for Java or C# for the most part.
You used job offers as argument against Java haters - if one of them happens to be C++ dev then they also has tons of offers (I worked in the past as Java dev and as C++ dev, and still I receive comparable amount of offers for both Java and C++ positions). Besides: most of people who bash on Java do not code in language that has a little market share. Haskell wankers are not that big part of people who dislikes Java (or any other "inferior" language). While e.g. Scala or Kotlin devs might look down on Java they are minority when you notice .Net, C++, C dev and other "Java is ugly and slow" mob.
Why all kind of that articles missing some benchmarks. I thinks it is the most important when you sums up all possible way to obtain size. 
Agreed. When I was learning java, I got pretty far into some development before I realized that I knew absolutely nothing about compiling, building and exporting java applications/libraries. Went back and got really intimate with how those are accomplished and I'm so glad I did.
If you have an Iterable, and you have no method to query its size other than iterating over it, might be a sign that your API design needs refinement. Also, **this is an ad** for lessons and an e\-book.
With a query \(with joins over multiple tables\) the hierarchical structure isn't so apparent, in my experience. So suppose you have this: Customer [1] : Invoice [N] : Product [M] and you join them all up together to find out what invoices and products belong to customers, you can frequently end up with something like this: |Customer.ID|Customer.Name|Invoice.ID|Product.Name| |:-|:-|:-|:-| |1|Azzk1kr|1|Nails| |1|Azzk1kr|1|Iron| |1|Azzk1kr|1|Chains| |1|Azzk1kr|2|Plastic| |1|Azzk1kr|2|Turtle| |2|BinaryRockStar|3|Cup| |2|BinaryRockStar|3|Headphone| `Customer.Name` is repeated, as well as `Invoice.ID`. With the drilling down, you could actually end up with three queries: 1. `select * from customer where name = :the_name` 2. `select * from invoice where customer_id = :customer_id` \(input is result from previous query\) 3. `select * from product where invoice_id = :invoice_id` \(input is result from previous query\) \(Of course, this example is highly oversimplified\) In my situation this helped me out a lot since I can easily drill down through the database given one ID \(usually, an ID a customer mentions which generates an exceptional situation\) using predefined queries with predefined input parameters. Does this answer your question?
If a C++ guy wants to complain about how often he gets pestered by recruiters, then he should grab a beer or coffee and commiserate with the Java guy. I feel like you’re missing the obvious humor going on here, which makes it funnier but I also feel kind of guilty.
That's really profound. I sometimes find myself thinking along the same lines but have never seen that verbalized until now. 
Just renew your license.
I lost all sense of humor and will to live when I was a C++ dev. Never again. It's a pity though that I still receive offers, even with big "no C++ offers!" info on my linked.in. 
And that new java will then force a whole new set of updates that everyone will ultimately have to pay for. 
*high five* Where I live, C++ jobs pay very well, but are pretty hard to come by. 
I've heard of worse processes. This definitely seems like one worth breaking though. 
You're better off using Eclipse or Netbeans. VS Code is nice, but the available Java plugins just don't hold a candle to a full featured IDE.
Don't know about breaking backwards compatibility or anything, but I can say that having it on as default would have saved me quite a lot of time when I first started doing Java development. Nothing like running a test suite that takes 4\+ hours, only to find out that you forgot \-DtrimStackTrace=false and need to run half of it again to get usable stack traces.
People expecting `e.printStackTrace()` to only print the type and the message without the stacktrace. For example they use `printStackTrace` to directly lock exceptions and then wonder why the logs fill up. Or they try to parse \*shudder\* the exception message which is being created with `printStackTrace` and then fail miserably. Stuff like that. All in all, I'm all for having this enabled by default.
Definitely, very cool. I reminds me of MS Access where if there is a FK to another table each row will be able to be expanded into a tree to show the linked rows in the child table. I'll see if I can find a screenshot.
The Ultimate Edition should allow you to develop in most languages, including PHP, Python, Ruby, etc. You just have to enable the individual plugins to do so. To me, PHPStorm is just a stripped down version of Ultimate.
It looks like in your [submission](https://www.reddit.com/r/java/comments/8n044r/alternative_docs/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
WOW. Somehow didn't assess that from what I was reading on the Ultimate feature list on the JetBrains site. Thank you very much.
The community edition also supports Scala via the plugin. Probably other JVM languages, also.
If you are working in Java, then you won't get so much benefit from intellij ultimate vs community edition. Its better for other languages that someone already has mentioned here
And one you shouldn't.... Can't "run/debug focused test method" in Netbeans anymore...
As long as you follow the new release cadence, you won’t have to pay for further updates. If you don’t want to update as often, you can just update when the LTSs are released. Your title still does not make sense. Java will be just fine.
Better support for the EE stack in Ultimate than in the free.
There are a few useful options for Java EE over there: - IntelliJ IDEA - Eclipse - Netbeans As for my experience, IntelliJ IDEA is the most polished, Netbeans is the least polished and slightly buggy (though I have not used Netbeans for a while, maybe they've fixed it already). Take some time to play with Eclipse and Netbeans. Also, try Community Edition of IntelliJ IDEA. And compare it with Ultimate edition on IntelliJ IDEA - you may take EAP versions here - https://www.jetbrains.com/idea/nextversion/ It will work for a month or so. If you find that Ultimate version makes you more productive - think about purchasing your personal license. $15 a month is not a big deal if it really saves your time.
Also the parallelization support seems to be either missing or shit.
Supports Groovy out of the box
To echo what has been said, the main benefits of the ultimate addition are greater support for Java frameworks (ie, Spring, J2EE, etc) and support for other languages. For example, I do a lot of full stack webapp development, with a Java backend and HTML/CSS/JS frontend, and I love the added support for JavaScript and the JS frameworks.
It seems the parallelization is on the way: https://github.com/junit-team/junit5/issues/60 
And what does this look like chained several fields deep? E.g. `object.field.subfield`?
It's a really bad smell if you have to go several fields deep :/
Seriously. I get slightly annoyed any time a recruiter says they're looking for a Java developer, because I'm not a "Java developer". I'm a developer with more experience in Java than any other language, but I'm equally competent in other languages, and I'm always happy to learn a new one \(as long as it's not Perl, PHP, or Cobol\). IMHO specializing in one language to the exclusion of all others is only appropriate for very junior developers.
Kotlin is being developed by JetBrains. It is supported. Would be weird if it wasn't, actually. 
Everytime I thought about updating it seemed to be too complicated, just because of all the artifacts and configuration I need to do in Gradle. Since JUnit4 just works and isn't missing anything I need yet I didn't see the time to be worth
IMHO is is a good a summary as any of why the Java ecosystem is so successful. I think it's worth noting, though, that most of the ideas that make Java special were already decades old by the time Java came around. Java\-the\-ecosystem just happened to be in the right place at the right time with the right combination of proven ideas. The main contribution of Java\-the\-language, at least in the early days, was the way its syntax was designed to avoid scaring off C and C\+\+ developers. Other than that, it was basically just a high\-level assembly language for the JVM \(in the same sense that C is a "portable assembly language"\).
I tend to find that language plugins get better support in their individual IDEs than in IntelliJ. Features get released there first and then later added to the IntelliJ plugin. So PHP development in PHPStorm is a slightly better experience compared to PHP in IntelliJ is. If you're only doing PHP (and HTML/CSS/JS/etc), I'd go with PHPStorm. If you are doing more than just PHP, I'd go with IntelliJ. 
I fundamentally disagree. Community has no support for Spring, JPA, Java EE, template engines, database tools, and assuming that you're doing something involving the web, Javascript, Typescript, Angular or React. Sure, you could do all these things without IDE support, but then you could write Java in vim too.
 Oracle's statements seem to indicate otherwise. Now waiting on what others have found in their discussions. It seems plausible that Oracle would seek to monetize this great asset. Recent work in small to medium sized enterprises using Oracle and home\-grown JAVA apps leads me to this conclusion. Not everyone can keep up with the upgrade pace especially in this market space. 
Meh, at some point in the next decade will be fine. Juuust fine.
I'd sat Clojure is better.
Do a **fun** and simple project. I remember learning the basics of Java by developing a remote screen share app. I learned a great deal about network, GUI , buffer, etc. And remember to always code with two window: an IDE and a web browser.
For me I really love JProfiler
Some kind of APM. New Relic, Data Dog, App Dynamics, etc.
Plain java. Dependencies are a headache.
What’s a spring boot? Just a brief description can take me a long way 
Splunk for really really good log aggregation/querying/analysis 
Yeah it really just depends how much the tools make the code easy to work with relative to normal java. Unless it's sonething spectacular 
It makes it easy to setup rest endpoints and web server. https://projects.spring.io/spring-boot/ There is a lot to it but it will help you figure out a lot of Java foundamentals. 
Me too!
No library are required to get a simple working app like this. Go step by step: 1/Get a screenshot \(have a look at [Robot](https://docs.oracle.com/javase/9/docs/api/java/awt/Robot.html)\) 2/ Display the screenshot in [JFrame](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFrame.html) 3/ Build client server \(thousand of example online\) 4/Send screenshot with client/server Then you can add more feature like remote mouse and keyboard, file transfert, etc.
Such questions should go in **/r/learnjava** as the *sidebar* here clearly states. **Removed**
I've been interested in what this tool might be able to do. https://www.xray4j.com/ Been intending to throw some open source program at it just to test the results. 
Give Plumbr a try. Apart from any other APM, Plumbr autodetects root causes and prioritizes them by the number of impacted users. P.S - I happen to be working for that company, so PM me if you have questions or want a special discount.
New Relic and Data Dog are godsends. VividCortex is a great layer to that monitoring for rooting out DB issues/bottlenecks.
That looks interesting, thanks!
It says insecure connection to me when opening. What is this, can you explain?
It’s complicated as hell. 4 was fine. 5 is a mess. More abstracting of abstract things. 
Familiarity for C/C++ developers was indeed a design goal of Java and had surely contributed to its success, yet I decided not to include it in to the list of things I think were the primary contributors. For me personally, moving to Java was not driven by the syntax at all. I never cared much about syntax. Frankly, I would have preferred Python-like syntax, but the Python's dynamic typing nature is a showstopper for scalability to large software. I loved Delphi, too, yet it did not have Java-level memory safety (even though it was safer than C/C++ back then), which made Delphi programs harder to debug and in overall more expensive to maintain. These things, by far, were so much more important in my experience than syntax.
Not exactly what you are looking for, but Structure101 is a great architecture analysis tool.
I have no JUnit 5 specific configuration besides the dependency in my `build.gradle` file. Newer Gradle versions are supporting JUnit 5 (I'm using Gradle 4.7).
Wish I could convince my bosses to use overops \(AKA takipi\) \- [https://www.overops.com/java\-debugging](https://www.overops.com/java-debugging) Takes snapshots of your program when exceptions are thrown, so you get like a super\-stacktrace. Amazing.
For me intellij was also a big productivity boost. Eclipse (when i used it 6 years ago) was riddled with bugs and lacked many helpful functionalities. After working with intellij for about 1 year, and trying to show a friend something in eclipse, i noticed, that i needed about 50x longer to work with eclipse than with intellij.
YourKit. Pretty good profiler. 
For an open-source-project: apache-licence. Even in private project. When I invest the effort to learn it, I want be able to use it in commercial projects on some day. Otherwise I make tutorials on the website for a about one hour. When I am not able to get the advantage within this time I normally leave. So a good getting started guide is essential. The next step is to check out the issues-list an the latest commits, so that I can be sure that developers care about the project. If there are any unanswered long-time issues I get very critical. The commits tell me how the culture of the team behind is. The last step is to read the code. Only if the code is clean and easy to understand, I use the lib, because magic is very dangerous. If you can't read what you call how could you find a bug in your software? Black Boxes are very bad. Unfortunately, very view JS-Libs past this test. I often have the feeling that a beginner that was happy to get done something just uploaded the code. Most important: I am thankful open source project out there, so no critics, just my view.
(JavaScript January)[https://www.javascriptjanuary.com/blog/the-open-sourcerers-magic-spell-book] has some good points. Don't be alarmed by the word JavaScript in the domain name.
Make sure that project can be build on a different machine or even OS. Get rid of global dependencies and jars inside the project if they aren't necessary. Simplify build process for user. In terms of maven 'mvnw clean install' should be enough to build whole project. 
I have found FusionReactor to be good.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I must say that whatever language, if you can use any product from jetbrains you're going to notice a MASSIVE increase in productivity. They specialize in Java and C# but they support almost any language. My favorite part is that it can recognize 'bad' code on the fly. 
I've been using Netbeans daily for several years now and it doesn't seem buggy to me. Great Java EE support. I'd at least give that a shot before paying for a license to IDEA.
I'd also add a decent error reporting/exception tracking application like Sentry in addition to app metrics. 
My biggest problem with Eclipse (back in 2010) was getting plugins to work well together. And you needed plugins for Maven and Git. And then you might want extra support for Spring etc. I don't regret paying for IntelliJ for the last 8 years.
Exists on Maven Central or something so it can easily be used.
No unnecessary framing.
Can you go into more detail about scalability and Python?
That was still an issue in 2016 when I finally switched to IntelliJ IDEA after about 8 years of struggle with Eclipse. That's not to say Eclipse IDE is bad. It works well out of box \(Java EE version\), but install some useful plugins you need and it just starts to break apart. I don't believe this is any better now. IntelliJ IDEA's support for Spring is excellent. We don't use much of these other tools, but the IDE by itself was a great productivity boost for me. Although I miss few Eclipse features IDEA does not have.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yea that haha
DataGrip is a huge time saver and replaces SQL Server Management and PGAdmin beautifully.
&gt; For an open-source-project: apache-licence Most any liberal OSS license (MIT, BSD, Apache, and several others) will allow you to use it without constraints in private and professional contexts. And most companies will accept those licenses in their codebase.
Clojure. 
DOCUMENTATION, DOCUMENTATION, DOCUMENTATION.
why? seriously why would I learn Clojure or Kotlin? does it really make a big difference?
something like this but analyzes during the runtime: https://www.jetbrains.com/help/idea/spring-support.html#spring-dependencies
I use Eclipse Spring Tool Suite and I like it better than Intellij. The quick text search is a great feature and works much more efficiently than Intellij's. 
I like to use JHipster when possible to automatically scaffold my spring boot microservice from a data model 
When I tried Eclipse in ~2015, I opened a normal Maven project, hit Build, and it did absolutely nothing, no error, no message, no compilation. No coworker who worked with Eclipse had any idea. I then installed some strange plugin, I don't know remember the name, and it worked. IntelliJ worked out of box.
Intellij can do pretty much anything I need. Database manip, any language I want, hot reloading in a servlet container. What's left? I suppose I could round it out with a static analysis tool but I rarely need it.
&gt; Intellij can time-machine debugging replaying recorded debug session dynamic and static analysis of injected dependencies
Commenting out what each segment of code is doing. Ensures that when someone is reading it that they understand what it does without having to figure it out. 
I also refine my own gasoline for this car I built.
why don’t you find out yourself? spend an hour and see whether it’s worth it to learn clojure and become a more productive jvm developer: https://youtu.be/E4RarTAZ2AY
Link is broken.
The thing was, it had Maven, it normally imported it as Maven project, it just did not compile.
IntelliJ IDEA rules
[removed]
The others have good points: here is one that might be important but not that positive. Dont expect too much from the opensource community. There is a myriad of new libraries/projects/ideas that no one or only very few people look at. Do everything you can reasonably to make your project a good one. But do not expect it to take off. That being said stay positive and keep contributing, thats what we live for really. 
I issue/assess Java coding tests for my company during recruitment, couple of things: 1. A coding test is usually used to generally assess your approach to problem solving. While it certainly won't hurt, they're not necessarily looking for 'textbook' code. 2. That said, clear coding style \- ie, descriptive and meaningful variable and function/method names, and well structured code \(ie, appropriate use of methods/loops/if statements/etc\). 3. Personally, I'm not looking for comments on every line, especially if your code is clear enough. However, a couple of comments over key areas of logic is certainly welcomed, especially if you're not entirely confident in your actual code. Confusing code with zero comments will score negatively with me though, so if in doubt, comment! 4. Consider writing unit tests \- I'll give bonus points for code with good test coverage. 5. KISS \- Keep It Simple Stupid!! There is absolutely no need to over complicate matters! Just implement the simplest solution to the problem you're given. As much as we talk about 'rock star coders', companies are looking for reliable developers who write *solid* code, and can also deliver to a deadline. You can show your rock star abilities once you've got the job! 6. If appropriate for the solution, use good OOP/D principals such as encapsulation, inheritance and polymorphism. However, *do not overcomplicate the solution!* There's probably a bunch more other can add, but these would be up there for any coding test that came to me to assess. Again, remember, the coding test is just an assessment of your practical coding ability to ensure you meet a technical minimum. You're unlikely to be 'competing' against others, so don't overthink or stress about it. Good luck...
i need to be honest here, i haven’t dabbled in reactive programming yet so i cannot make any comparison. folks in /r/clojure might be able to do so. ;-)
I think the other comments \(tests, documentation, maven,...\) are missing the key requirement. Is your open source library going to be useful to me ? If the answer is no then it does not matter how well documented, how well tested, and how nicely accessible is from maven central is... I will still ignore it... good luck with it
The most important thing - readme that clearly defines the problem it is solving, possible alternatives and why this project is better. After that comes the usual - well tested, documentation contains nice examples or at least points to which part of the source code is documentation, no huge backlog or insane closed-wontfix mentailty(at least state the assumptions at that time as these change) and doesn't have a complicated dependency/build setup, e.g. works under jdk10 or requires only small changes.
It needs more than 5 reasons...?
Good documentation with lots of examples, quick starts etc. Having a good readme.md is key. If I am thinking about using your library (vs similar libraries) I want to be able to get started with it fast to see how it works with my application.
Looks awesome and actually very related to my post about computer vision.
Sorry - not a fan of Splunk. AFAIK it can't even log stack traces efficiently 
&gt; Release 9.0, which will be an IDE for Java SE development only, the other features have not been donated yet by Oracle and are being audited and processed and be part of subsequent releases of Apache NetBeans. Shit...it's gonna be a looong time before I can upgrade.
As I remember, three years ago MySQL support was quite buggy. The painful point was in handling of SQL schema changes. And documentation on that part was not too much up-to-date - screenshots were outdated, new required parameters were not described. When Java 8 was just released, auto-completion on Stream API lambdas was causing crash dumps on my Linux laptop. Good if they've fixed it. I see, Netbeans 9.0 RC1 has just been published - definitely, I will give it a try. Having 3 popular IDEs creates a healthy competition in that market.
The indexing is amazing. I used eclipse for many years but don't know if eclipse has similar features. I don't needed it before but when I used this in Intellij it was great. Now I am using this the most time to find my classes and I won't miss it anymore. It increased the productivity too much. 
And it doesn't provide an installer, and is extremely limited in scope (and still seems rather buggy in my limited testing). The somewhat anemic commit logs make me nervous, too, because it's hands-down my favorite IDE.
If `hibernate.query.in_clause_parameter_padding` is so great, then why isn't it true by default? There must be some risk or downside... right?
This is great news! I always found netbeans to be a charming ide
In contrast, the GPL does not allow for use in commercial software, and generally speaking requires derivatives to also be GPL. There is the LGPL that allows using your library as a component of a commercial product, but not all companies allow use of that \(mine doesn't\). If you want your code to proliferate as widely as possible, a license that is commercial\-friendly is a must.
# Consider a question that can only be answered by referring to never-before-seen Javadoc One of the best questions I've used on an exam I wrote was where they were given method signatures and asked to refer to Javadoc that was invented just for that question to understand why an API error had occurred. In other words, they aren't asked to find a syntax error in code, but rather to figure out why an API is being misused. The question was something like this: &gt;Here at Spacely Sprockets, we build widgets. One of the important tasks we do is calculating our widget production rate. Say that we have the following code: public double calculateWidgetProductionRate(Integer machineId, LocalDate date) { Machine machine = this.getMachine(machineId); Integer widgetsProduced = machine.getWidgetsProduced(date); LocalTime startTime = machine.getWidgetProductionStart(date); LocalTime endTime = machine.getWidgetProductionEnd(date); return calculateAverageWidgesPerHour(widgetsProduced, startTime, endTime); } &gt;When we run `calculateWidgetProductionRate(12345)`, we get back a reasonable result. When we run `calculateWidgetProductionRate(1)`, we get an `IllegalArgumentException` on line 2. When we run `calculateWidgetProductionRate(23456)`, we get an `UnsupportedOperationException` on line 6. &gt; &gt;We have reason to believe that the code above, and the methods referenced within, are without error and that the issue is in a misuse of an API. Referring to the Javadocs to the right of this question, explain at a high level why we are getting the error. Additionally, explain at a high level how these problems might be fixed. And then in the Javadocs, you would see something documented like `getMachine()` throws `IllegalArgumentException` if it is not a 5\-digit id, and `calculateAverageWidgetsPerHour()` throws an` UnsupportedOperationExceptio`n if the machine was offline that day. The Javaod would also include methods for things like checking if a machine was online. A good answer would explain why the code violated a contract with the API and how it would be fixed \(e.g. "We were trying to calculate averages for machine that was offline that day, and the API throws that error in response if you try that. There's a method that checks if it was online that day, so we should call that first to verify."\) There would also be other methods in the Javadoc that didn't do anything relevant to the question \(e.g. returning other statistics about the machine\). I've had devs who have aced the fizzbuzz and algorithm question only to bomb *hard* at this question \(like spending half an hour and ending up with "I think that `getMachine()` isn't implemented right." In other words, they have no idea how to solve problems by reading the documentation, meaning that they wouldn't be able to solve most of the day to day problems. I probably spent like 30 hours constructing the question, making a dummy project and writing Javadoc for it so that I could generate the HTML reports, and going through several rounds of testing to make sure everything was clear and well\-worded. But every person who has taken it, even those who found it difficult, thought it was a really good question, and it has become our best predictor of success as a Java developer.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Although I've never used Netbeans, I'm glad that it exists. Having several quality IDEs available means they are all going to become better as they have to compete for marketshare.
You can still download the EE, C++, PHP, and numerous other modules from the Plugins screen. They just aren't turned on by default afaik
I have been watching the mailing list for some months now. The 9.0 release will not have many new features. A lot of work has gone into license clearing. They had to look at every single file. It is planned to release a major version every 6 months so expect more from NetBeans 10 than 9. Once 9.0 and all infrastructure is in place I expect the project to gain traction. It is also much easier to contribute now. Just create a pull request on Github.
You can use the Java Enterprise Plugins from version 8.2
https://www.opsian.com/
&gt; the GPL does not allow for use in commercial software To be pedantic, it does allow for use in commercial software - it's just not a desirable license for most commercial software vendors since it requires them to open up their source code as well.
debugging tools might be excellent but f you have used them, you know how limited that is. Expression Windows evaluate short statements not tiny programs \(it's not that you can create variables\) so their usage is generally very confined. In general, the intention is not to replace the debugger but to give you an extra tool After all, chances are that you have chrome on when you are running your JVM so you might as well have a page where you can send snippets to your JVM \(and the localstorage... just an idea... very easy to implement so that we never lose the snippets we wrote\) 
I'm using DataGrip to operate on a PLSQL heavy Oracle backend. Works fine, although not perfect. What's most productive about though is that I don't have to learn how to use some outdated language-specific IDE and can use one tool for Java, Javascript, Html, CSS, Postgres, Oracle and MySQL
The functional counterpart to React is the language ELM. Being purely functional "unlocks" some cool features, like being able to step backwards in the debugging tool (then change some variable, step forward and see the difference) - which can be very productive. 
The way I see it, syntax is pretty much the least important part of any language (as long as it's not totally crazy), but it matters a lot when it comes to adoption, because so many people refuse to learn a language if they don't like the syntax. For example, I once had an otherwise very competent coworker who refused to use Python because he couldn't handle the idea of significant whitespace.
Does Spring's Actuator module provide that?
We use App Dynamics at work, but also had the other vendors visit amd pitch their stuff. But yeah, work pays for it, not me.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The values are not absent, the last parameter value is repeated to pad out the remaining slots. If you're using postgres, a much better solution is to bind the parameter as an array type which always only accepts one argument (thus making statement caches a non-issue) and doesn't disproportionately cost you in terms of bytes sent per query. The strategy in this article has a sweet spot of less than 100 items (or maybe less than 256), but it's a seriously costly trade off beyond that and there are plenty of workarounds that will perform better. Array types and temp tables to just name two.
It's like in Dune, the only power they have is they can destroy the spice. But it's they did we could port to OpenJDK and replace the proprietary libraries maybe?
They own the copyright to the code they've contributed, which means they can use it to create proprietary versions (as long as no external GPL licensed contributions are included). They own the trademarks on "Java" and related terms, which means they can prevent others from distributing software with the same name. Oracle still owns any (still valid) patents which cover aspects of how the JDK operates regardless of the actual code implementation / copyright. The GPL v2 licensing doesn't explicitly grant patent permissions. ...to the best of my knowledge without doing extensive research. Corrections welcome.
I really like this example. Very apt.
+1 for *SonarQube* Great tool for enforcing best practices and helping keep core clean.
* Readme has a short overview of the problem, simple code sample of your solution, Maven coordinates, and links to wiki for more details (if needed). * Code is sanely organized with proper visibility scoping * API is JavaDoc'd, preferably the internals are lightly documented too * Tests both validate behavior and, indirectly, show expected usage for me to debug from (if it breaks, perhaps because I misused it) * Sane, short, descriptive errors when I misconfigure / abuse it * Minimal dependencies helps users avoid framework hell * Apache / MIT / BSD or similarly friendly license * An issue tracker that is not a graveyard of ignored questions and problems * Respectful behavior by the contributors * Responsiveness, even if the problem won't be fixed soon * Follows semantic versioning semi strictly You shouldn't expect many direct code contributions. Instead expect bugs, feature / improvement requests, and questions. Many you will not have considered or didn't prioritize as it wasn't your immediate need. You will have to put in the hours, but also learn a lot from your work and your users. Be watchful for API changes that will have sharp corners in edge cases. Try to predict usages and always prefer robustness over features.
It should be the user's responsibility to assess whether the overhead of repeating binds outweighs the overhead of too many parses. E.g. when you run these IN predicates only rarely, or only with very few elements, or when your database does not support (or you've disabled) execution plan caching, you want this turned off. Otherwise, you may want it on. Also, as others have mentioned, there exist better vendor specific workarounds, e.g. arrays or temp tables: https://blog.jooq.org/2017/03/30/sql-in-predicate-with-in-list-or-with-array-which-is-faster/
They own the copyright to the api — not just the code, but the api itself. 
the own the specification for the JVM and java trademark, so they own what is java and what it can do
Sure, but any open and compatible implementation would be fair use. The argument against Google hinged on it being intentionally one-way compatible, meaning it leached from the ecosystem but gave nothing back. Any other, open implementation of the java spec would be fair use afaiu from the case. But ianal.
If you have a web application that's usually one thread per request, you could build something rudimentary yourself by creating a new logger that logs on TRACE (or a level of your choice), but only actually writes to file if another log level (like error) is hit. So it will log ALL statements on all log levels for this particular request (or rather cache them and throw them away if the request lifetime ends) and then sequentially log them if an error occurs, sot hat you can see everything leading up to it.
I believe they still own some proprietary stuff like Java Mission Control that they are planning to remove from OracleJDK. 
Damn that’s really cool. I envy you lol. 
i can add: Datagrip. Before, we used oracle's own db-software. Datagrip is so much bettter. YOU CAN EDIT TABLES WHILE YOU VIEW IT VIA SELECT. WTF. That was the main feature for me. And also: Indexing of columns and tables. I love it.
Flight Recorder is scheduled for JDK11: http://openjdk.java.net/projects/jdk/11/
That's not a bad idea to help investigating failures, but it's far less than what Takipi does \(unless you literally are logging every variable at TRACE\).
Yeah, of course (it's maybe 1-2 days of work including testing) it doesn't comapre to Takipi. That'S why I said it's rudimentary. But if you can't convince your boss, maybe convince them to invest time in this and prove to them how it's useful down the line.
When I get an exception I don't understand I tend to google it and usually I end up on StackOverflow. Will you replace that for exceptions ? I wish you luck then. By the way since you guys analyzed millions of exceptions why not sharing already some of your insights ? I bet NullPointerExceptions are still amongst the most popular
In addition to what everyone else has said, nullability information, both in the javadoc and machine readable. You javadoc should say if I can expect a method to return a null and what behaviour I can expect if I pass in a null parameter. You should also document your external methods with `@Nullable`/`@NonNull` or similar annotations, so that my IDE can tell me if I'm doing something potentially stupid. 
The brand, the standardization process, the source code, everything. Of course it's not all proprietary because, although they own it, they license some of it in permissive way. But you should be very careful in reading the fine print of what's licensed in permissive way and what isn't. Some people naively think that because the OpenJDK is a thing, then Java is open source and anyone can fork that and have their own Java. Naive non-sense.
You're downvoted for being accurate but against group-think. Sorry to see that.
it was dead on arrival..if you don't have a good reason to use it, I would say move on ;-)
I have been drinking Java so should I stop calling it or ask for Java,or just couldn't use the term related to tech
It blows my mind that the JavaDocs aren't the first thing people check when they run into `RuntimeException`s that aren't NPEs.
As far as I know, they own everything from the language to the JVM but I might be wrong. As long as you don't write your own version of Java and later port it in mobile device, you'll be fine. Unless you're a huge company everyone loves then whatever you did, you were perceived as the "good guy", winning the court over things you illegally claim. 
JMC has already been open sourced as JDK Mission Control and is an OpenJDK project. I don’t know what they’re planning on doing with any binary releases in the future though. http://openjdk.java.net/projects/jmc/
What NetBeans is doing with the Java Shell looks really cool. Any ideas about releasing this as its own product? Would love to see a standalone Java Shell GUI with auto-complete. Would love even more to be able to embed this in other applications. If I had an existing JavaFX GUI application how hard might it be to embed the NetBeans Java Shell?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thanks for that info, would be nice if they said something along those lines on the site instead of scaring people like me away. Will give it a shot.
Democracy in a nutshell.
sudo apt remove spice ;\-\)
One way that should feel natural is to work on the projects that you are frequently using. E.g. you use some library, find a bug or missing feature, download the source, fix it and make a pull request. However usually these are old projects so it's not easy to find something to fix/improve. Another option is to look for fun/interesting projects as they are sometimes posted on reddit. As these are usually fresh projects, there will be a ton of features not implemented so it's easy to get your feet wet. One such interesting project i recently noticed is https://github.com/simon987/Much-Assembly-Required
Thank you very much for your reply. 
I believe they are locked in a /extremely/ expensive legal fight with Google right now, to answer this very question.
NetBeans had been my go\-to IDE for over 8 years. I like its user\-friendly design with focus on the essential, its traditionally speedy adoption of and robust support for Java technology, and its powerful functionality. However, recently NetBeans has not kept up with some important developments such as Gradle. When we switched from Ant to Gradle in 2017, NetBeans did not support Gradle well enough, which is why we migrated from NetBeans to IntelliJ. IntelliJ is an excellent IDE, but I miss the simplicity of NetBeans. I hope NetBeans rebounds.
It is working for me now.
I think you should take a step back and see what problem you're trying to solve. Having different factors, a password and an SMS message for example, are in place because in many cases the client device can't be trusted. It's quite common for a user's system to be infected with for example a keylogger, which is where a second factor, a text message on his phone, is a great way to still make the system secure. Hopefully, when you're doing server to server communication, neither end is infected with something that can access this kind of information. So the only thing we need is 1. encryption, 2. for server A to know server B claims who he is and 3. for server B to know server A claims who he is. So basically mutual TLS; no need to reinvent that wheel. 
&gt; No idea why Atos like this framework so much Knowing Atos: consulting vendor lock-in. 
how does that benefit them?
I hope you understand that documenting *all exceptions in existence* is quite literally impossible; developers are creating new exception classes a lot faster than you can document them. So that leaves the 'popular' ones that people have questions about. But that is already handled just fine by SO. So what does this side do that SO doesn't?
Best thing would be to go back to Java 6 and code in it without any worries. No need of these extra features and if you need it, one can easily code that as libraries and put them.
Bummer that they didn't fix the auto-submit-a-bug feature. That made it a lot easier to toss along exceptions. I can't say I'm as willing to copy/paste a bug+log into GitHub's bug system
&gt; consulting vendor lock-in. Oh that's Brilliant actually and they still get to claim it is open source :^)
This does look good... Some of the projects are rather old though. I will delve a little deeper and see if I find something worth contributing towards.
Well search for something of interest via keywords (like any other search tool) and sort by Java under languages. I'd recommend actually taking a quick look at the code and checking if they specify a license before getting too excited. There are plenty of empty shell repos (might have an okay description, but little functional code).
We (I work for Oracle) sell support.
The two tools I pay for are IntelliJ and [YourKit Profiler](https://www.yourkit.com/). There are free profilers, but nothing that comes close to YourKit.
Hello, I'm the maintainer of this project, thanks a lot for sharing ! If you'd like to contribute, I recommand that you chat with me on the Slack channel before jumping on a feature, I'll be able to guide you in the good direction (the structure of the app is changing very fast and it becomes confusing very quickly)
open-feign was really looking for help recently, if that’s of interest https://github.com/OpenFeign/feign/issues
Java is usually the choice for enterprise level projects, which are proprietary, so that why most of the opensource Java projects are libraries or frameworks. 
Don't choose based on the language, choose based on what you like \(or need\). Are you a musician? Maybe there is some software for managing collections, scores etc. that needs help. Are you a hobby astronomer? Maybe some project tracking objects in space needs help. Choosing this way helps in two ways: 1\) you already have some domain knowledge about the problem at hand and 2\) you're more likely to stick around and actually make a significant contribution.
Sadly this does not work in Excel 16 on MacOS. 😟
Maybe they're jaded to the JavaDocs being incomplete or not useful. Or they just Google the exception and see what they get.
Hi Hexahdr_n, I haven't worked on a game before but I am interested. I am going to take a look at the source and the overall project over the weekend and see if I think I could be of any assistance? Just to give me an idea, which areas are you looking for help?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I took a quick look at this. Looks interesting and obviously the small size makes the project look perfect for a first timer. Could you expand a little on the role of the library?
You can take a look at the issues on the github repo \(specifically, the one marked "beginner\-friendly"\) for the features we're currently working on. But there is work to be done in pretty much all areas so if you're interested definitely ping me on the Slack channel and I can find something a beginner could do.
Shouldn't "C:\\dev\\java\\" be the same as the system java? (e.g. JAVA_HOME)
When you make an in-app purchase, Apple makes a [receipt](https://developer.apple.com/library/content/releasenotes/General/ValidateAppStoreReceipt/Introduction.html). This receipt is a record of the customer purchase or subscription. However, you shouldn't just blindly trust any receipt. On your server, you want to validate this receipt is correct before giving the customer access to the purchased content.
Contribute to what you use. Using a maven package that could use a feature you want, or notice a bug in it? Fork the project and contribute your changes back. Perhaps an issue is the documentation? Or outdated example that no longer applies? Opt to contribute that way. There’s always something to make better in every project 
How does support do anything for us? We have one web application which (due to the selection of JMS) requires a Full Profile JEE server, but management insists on staying a Windows shop, so RH won't support, officially, JBoss EAP w/[OpenJDK on anything by RHEL]. JBoss EAP cost... $8k for 16 cores. You want **$80k** per year for Java on 16 cores.
I don't make such decisions. I'm a programmer, like you.
Since I really don't get this, explain how. *Sun* released it under GPL w/CPE in like... 2006-ish; Oracle didn't acquire it until 2009-10. By April 2009, OpenJDK 7+classlibs had the remains of any binary blobs pulled out. During this process, other people contributed code, which they owned the copyright to, to the OpenJDK. All of that was then GPL, as well. Anything Oracle contributed to it, then, was theirs and could be re-licensed in some other manner, but also was then free. There's not an "undo" button on GPL'ing stuff.
Oh, okay. :P "We" sell support perhaps made me think you were in sales, and might have some insight. I'm not stupid enough to call Oracle sales from a state agency and get them going; they send me enough junk email as it is.
Not really. It's a pretty standard thing we've done before.
Well done, how about the performance? Express-js is really fast!
http://github-help-wanted.com You can filter by language. It shows projects that have open issues that have the help wanted tag.
Talk to Azul (I work for them). We do it way, way cheaper...
I'm not understanding the point of the new `JsonItemReader`. It says that it supports Jackson and Gson. Doesn't Spring already do that? I know we use them to handle JSON with REST calls. I thought at first that it might be a way of somehow avoiding vendor lock\-in for your JSON library, but the sample code uses `JacksonJsonObjectReader`, so that's obviously not the case. What does this do that the current Spring support for Jackson doesn't do?
OK, several misconceptions in this thread that need to be put right. Oracle owns the trademark, 'Java', which they do enforce quite actively. They also own things like the JavaFX trademark. The Java SE specification is defined through the JCP as individual JSRs. The specifications are *not* owned by Oracle. Under the rules of the JCP, the JSRs grants the use of the IP for the specification for compliant (i.e. passing the TCK) implementations. OpenJDK is not owned by Oracle. Sun open sourced their implementation of the JDK, which has become the reference implementation for the Java SE standard (as defined by the relevant JSR). It is an open source project that people are free to use under the GPLv2 with CPE license. If someone wants to fork this, they can. Oracle has recently contributed a number of previously closed-source features to the OpenJDK so that by JDK 11 there will be no functional difference between the Oracle JDK binary and one built from OpenJDK source. These features are primarily Flight Recorder, Mission Control and Application Class data sharing.
I don't see anything in the press release about "all exceptions in existence". Where did you get that idea? It sounds to me like the goal is to analyze stacktraces and look for patterns, thus it would find the most common ones. That could be useful for some types of bugs, like NoClassDefFoundException. It would be kind of cool if some IDE plugin could interpret `NoClassDefFoundException: org/apache/Foo.class` and respond with `Apache XyzLib is missing from your classpath` (it's not always immediately obvious to me which Apache library contains the class I'm looking for).
&gt; pointers /r/cpp
Yeah, and while it's cheaper, you guys still want $25k for a minimum of 25 servers. That's triple the cost of the application server. Even if development, AND developer workstations counted, at most it's like... 7 - 3 actual server VMs, of which two are dev/test, and 4 dev machines. I suspect that the dev machines don't count, but don't know. *Why* should we pay?
It depends if you're happy to run out-of-date, potentially insecure Java in production. In the past, that's the big value-add that support contracts have brought and it's why Oracle have changed the release cadence of Java. So by January, they will no longer create any free builds of Java 8. If you want security patches, bug fixes etc, then you will have to pay Oracle for it. If you're happy to update to a new version of Java every 6 months, then that's fine, but there's still an awful lot of Java applications out there that don't play nicely with JPMS yet.
This is very *timely* for me because I was just using VisualVM yesterdaya nd noticed that the committed memory was many times the used memory of my application until I forced a full GC.
Been using netbeans for scala for about 8 years now. Not considering switching even when scala 2.13 finally breaks its support once and for all.
This seems less about object identity and more about an actual bug in the lambda serialization mechanism. See [JDK-8174864](https://bugs.openjdk.java.net/browse/JDK-8174864).
Has anyone even suggested this feature before though? If you want it, suggest it. https://blogs.oracle.com/darcy/so-you-want-to-change-the-java-programming-language
Check out JEP 326: Raw String Literals http://openjdk.java.net/jeps/326 It's not yet targeted for any release, but I hope it could come as soon as JDK 11...
It's for batches. The reader chunks the input JSON file (assumed to have a top-level array), passing the chunks for the batch processing.
can't hire anyone who wants to work with regular expressions all day.
OP here. Wow, lots of different answers. Thought it would be more clear-cut.
As someone that wrote regular expressions for a living for 2.5 years. I HATE REGEX in java...
I wrote regular expressions for 2.5 years ;-) Its not that bad...
This is an extremely welcome proposal. My workload is "spiky" in it's memory consumption, and big sparse heaps are really bad for cotenancy. We've rolled back to the *serial* GC, because stop-the-world pauses are less distasteful than 90% wasted memory.
s/wants/has/g
As someone who has written regexen in Perl and Ruby for 16 years I hate the possibility of having to write them in Java. Still, there's Kotlin if I'm given the choice.
&gt; garbage free &gt; Uses xml schemas Hmmm
The schemas are just a contract; they are never loaded in. You run a test to generate a class file based on the schema and use that.
I learned to write regular expressions with as few backslashes as possible to avoid those sorts of issues. Instead of escaping special characters, I just put them in square brackets. It's actually possible to get pretty far that way.
As someone who learned regex in perl using them in most other languages is frustrating. As a Java developer for the last 6 years I can’t agree more with this. That being said everyone I work with hates regular expressions and I really like them. Being the guy on a team that knows the thing well that everyone else hates has it’s advantages.
A better string literal would be nice but until then: * Use a different JVM language * If have to use Java put non-trivial reg-exes in a properties file and read them in. 
I think Akka has a strange type system. Is Pronghorn an improvement in this area?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
A regular expression is cryptic and often hard to debug, I don't like them for that and the fact that their name is ironic. A regular expression is like, "what up" or "hey what's shaking". :-)
Seems even less likely to be helpful to explain class paths and (insert build tool here) to noobs than the concept of a null pointer. At least that information is transferable.
XML instead of code, huh? Cool.
Can I be honest tho, few things are as satisfying as writing a really well crafted regex. The type that takes blood and curses and tears. And at the end you gaze upon it and think, "I have created something so amazing even I will cease to understand it!" 
It’s a small part of it. It allows the developer to quickly envision their data flow while still ensuring integrity and correctness through the use of XML as a contract. It uses the FAST protocol which has been utilized by the finance software industry for a decade primarily because it is really fast (get it?) and lightweight. Define your fields in the schema, write a test to generate it, drop it in your project, and then create a simple stage to test it. Extend your code after that. It forces you to really think about your stages (actors) &amp; their communications, and has the added benefit of being secure and shareable. It’s not perfect, but it’s very unique compared to a lot of other actor frameworks, and obviously very performant. 
Regular expression syntax just sucks. I've grown fond of the `rx` package on Emacs Lisp, which lets you write regular expressions in ordinary Lisp syntax instead of convoluted strings. The result is much more verbose, but also much easier to read. I hate using regular expressions in any other language now (except Haskell, which has a similar library).
Awesome!
Due to the complexity of Lambda serialization, although it looked attractive we decided to not support it in Apache River, you have to admire the people who put the effort into implementing it, but java serialization itself has too many warts. I think it's time the Java folks reinvented Java Serialization, one that uses a public API (with providers for other serialization frameworks), is secure and doesn't support circular references in object graphs.
Is there any way to upvote proposals? This can't be upvoted enough imo.
I don't think there's any direct up-voting as such, but since it's part of project Amber, you could check its mailing lists: http://openjdk.java.net/projects/amber/ Judging from past messages on the lists, it's definitely coming sooner or later. Last discussions I've seen have been about what to do with indentation on multi-line raw strings (strip or not, and if yes, how exactly).
You do not need to pay if you don't want to. You can continue to use the OpenJDK builds, available through jdk.java.net and continue to get free security patches and bug fixes. However, you will have to change your JDK every six months as updates are only available until the next release. The answer to *why* you should pay is so you can continue to use an older version of the JDK and receive updates. For many people, they are required by compliance regulations to only use supported software . Most of the customers we're talking and selling to are using hundreds or thousands of servers. This brings the price per server down to just over $100. 
You are mistaken. Oracle does not *own* the standardisation process. The JCP is not part of Oracle and is not owned by them. Oracle does not *own* the source code to the JDK (and therefore the JVM and JRE). This was released under the GPLv2 with classpath exception license when the project was created back in 2007-2008. OpenJDK is the reference implementation of the Java SE standard JSR. The JSR, of which Oracle is part but does not own, grants free use of the IP rights for conforming (i.e. passes the TCK) implementations. Java is many things so it's true you can't say that is open source. The JDK *is* open source through the OpenJDK project. 
I agree. Whenever I have to resort to regex I try to name it what it supposed to do and then write a ton of unit tests to test positive and negative use cases. 
Perl's qw() and qq() are great.
Here's one approach String bs = "\\"; String folder = bs + "Program Files" + bs + "Firefox";
Mission Control went into OpenJDK 10 and Flight Recorder will be in OpenJDK 11. Oracle's stated goal (see https://blogs.oracle.com/java-platform-group/faster-and-easier-use-and-redistribution-of-java-se) is that there will be no functional differences between the Oracle JDK binary and one built from OpenJDK source. This will be true as of JDK 11. Neither Flight Recorder or Mission Control will be removed from the Oracle JDK.
https://i.imgur.com/A4kkrMN.jpg
Raw Strings &amp;&amp; String interpolation is a must...
This would also help on desktop, but I found this [article about gc tuning] (https://jelastic.com/blog/tuning-garbage-collector-java-memory-usage-optimization/) and it seems it already does something, altought I never observed this. Also one interesting fact from the proposal: "Shenandoah and OpenJ9's GenCon collector already provide similar functionality."
Regular expressions were named for regularity you experience using them. Every day they take a crap on you.
At that point, you should promptly delete it.
For the IntelliJ users out there use string language injection &amp; "edit fragment" intentions. This will let you edit the regex in a separate editor and automatically update the string literal with the escaped text. IntelliJ will also let you check the regex via the "Check RegEx" intention. https://www.jetbrains.com/help/idea/using-language-injections.html
warning: the article is an ad for [https://www.parasoft.com/products/jtest](https://www.parasoft.com/products/jtest) It looks interesting, but probably not something you need \(to pay for\).
I looked at this part. "We are looking for other detectives or experts to help us and the developer community to write solutions for the exception libraries." Anyway, you are right about patterns and stack trace analysis. The ultimate goal is to reduce time spent on debugging so one can focus more on other parts of development. Actually, plugins from the site have already been developed. It was available for IntelliJ IDEA, Eclipse and Android Studio up until a recent site overhaul. The developers mentioned that they are planning to have them up again as soon as they've made some necessary changes to them. Until that, the plugins had to be pulled down from the site.
Do not expect the requirements of open source projects to be "fun" or even coding. A lot of projects start with working code, but are actually lacking tests and documentation. If you want to actually code, better start your own project... and don't neglect tests and doc :)
`s/&amp;&amp; String interpolation/`
&gt; There is no prevailing client library to invoke GraphQL endpoints using Java. Doesn't the [official GraphQL Java library](http://graphql-java.readthedocs.io/en/latest/) provide this?
[removed]
graphql-java seems to be the clear winner in the Java GraphQL space, but it doesn't provide JSONification and endpoint configuration.
I agree that the syntax for Akka's type system is a little strange. Pronghorn has strong types on the pipes (used for message passing); they are defined by contract in XML and then cogenerated through a unit test. Because pipes are parameterized via schema, a stage is only going to take a pipe of that type. As a result, you have strong typing on the pipes you accept and produce. Pronghorn also has rationals and decimal types for message passing in addition to integer, floating points, etc.. which is pretty neat.
The early-access versions of Intellij already have RSL implemented :)
It is clear winner indeed. If for no ohter reason then simply because there are no alternatives to speak of. 
I mean, given that someone froze an application server JDK &lt;8 @ update X and continues to expose it to the world... Azul seems to make builds of JDK x (from OpenJDK) available now which are far more up-to-date than that, free. Is that just... a thing that only they do, or does OpenJDK continue to backport security fixes, or...?
&gt; Shenandoah I shall just link to [the discussion thread](http://mail.openjdk.java.net/pipermail/hotspot-gc-dev/2018-June/022204.html). It did so for a while, and it is relatively simple to do with regionalized GC, although being concurrent also helps to knock out garbage periodically without stalling the application.
Works fine on my laptop. Decent article too.
Well damn, that's perfect. 
https://i.imgur.com/oH4eCen.jpg
&gt; and then cogenerated through a unit test Code generation as a side effect of unit tests!? Why? 
Good question and I complete agree it looks strange at first, but... The unit test confirms the implementation matches the XML contract. Upon failure, it may as well be helpful and give you the correct source code (which it does through the output in terminal). You can choose to use it or not, it's simply suggestion. This means schemas are only generated when you actually chose to write or update them. Summed up, this means that: 1. You can choose to default schema behavior --OR-- if you have some complexity in your fields, implement it yourself 2. Making sure that we are in compliance with the contract is the responsibility of the unit test 3. We can safely check in our contract source document and our implementation (e.g. generally you don't check in artifacts that will be code generated). We are getting around that by copy/paste or making the developer write their own implementation.
Oracle is not backporting fixes to older versions of the OpenJDK. We (Azul) do some of this work (JDK 6), Red Hat does a large part as well (JDK 7). As good open source people we upstream the fixes into the relevant OpenJDK repo. We make our builds (with backported fixes) freely available. Commercial support customers get these straight away; free versions on our website happen sometime later but with no SLA as to when.
Hahaha
strange type system?
Regex rules! I remember getting full marks for an ST&amp;R assignment with 5-6 lines of regex code.
Lovely Lisp. Takes 5 minutes to learn its syntax and a lifetime to master its intricacies.
https://github.com/apollographql/apollo-android works outside of android too. We were too late/lazy to rename it but everything but the android support artifact works in Java only land
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
yes, because all the world needs is another web framework, email client and bug tracking software. wonderful.
what approaches are people using to act as a graphql server in java land?
Lombok
Ah, venkat! Great guy, he lectured the best University class I ever took. 
Wow, I actually had no idea about obscuring.
Because it never happens with proper naming where variables start lowercase.
And I will hate you for using "hiding"!
These are a ton of fun to avoid when writing a code generator. Especially when generating classes that obscure `java.lang` classes
Yes, because all the world needs is another cynic ;)
It looks like in your [submission](https://www.reddit.com/r/java/comments/8nzrft/how_i_add_a_string_of_code_in_loop_and_stop_when/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Can "shadowing", "hiding" and "Obscuring" be considered "java concepts" or just bad/weird coding practices? In fact, can also Overloading and Overriding be considered "Java Concepts"? Because I see them as basic OOP concepts.
All five terms have formal definitions in JLS, so I would say they are all "Java Concepts". A little nit-picking in return: You shouldn't be viewing 'overloading' as an OOP concept. It's a concept in any language with methods.
Maybe he/she has some relevant problem solving skills which you could learn from. Maybe it's his/her way to learn something new. Getting the name spread, updating the portfolio. At least it's something. 
Huh, fair enough. I took "Java concepts" as "Something specific from Java", not as "something defined on the language."
Is it technically considered overriding when your class implements an abstract method from an interface or abstract class? I usually don't think of it as overriding, but you use the `@Override` annotation nonetheless.
I think so. JLS Chapter 9 on Interfaces uses the term "override" extensively: https://docs.oracle.com/javase/specs/jls/se10/html/jls-9.html#jls-9.4.1 To mention an example: &gt; [...] So, every implementing class would automatically override an interface's toString default [...]
I just dealt with it in my intro to python last night, lol... Some example I looked up named a methods parameter (str). So I thought you were supposed to put the variable type as the parameter, as opposed to the name. I used int, then within the method tried calling int() to convert from string to int. No go! Obscured!
The only terms I've heard of are overloading and overriding. The other ones sound like bad practice to me.
Obscuring is definitely bad practice, but I'd argue shadowing and hiding aren't necessarily. For example, the author mentions that constructor params often shadow fields. I think this helps make it obvious that the constructor is just setting those fields directly, not computing them. Hiding is useful when a superclass uses a defaultish value but the subclass needs something different (the author's example of Animal.legs=2 and Dog.legs=4 isn't great, but acceptable). Hiding is for fields what overriding is for classes. 
\&gt; the stage of my own development where I should start collaborating with other projects a lot is going to depend on your motivation, eg improving your technical skills, learning to work with a team, buffing your resume, networking, or building your personal brand
Obviously it does. If it wouldn't then we wouldn't have this discussion.
In seriously considerIng it Thanks!
apache's obsession with re\-licensing is pathological
I ran into similar things in Python. In any compiled language though you'd get a compile time error and you can resolve it immediately.
Yep, Java for sure won't let you name a variable int
I think I had something like this: import json ... json = foo() ... json.dumps(...) and I'd get a run time error that json does not have propery dumps() or something like that. It was frustrating to figure out since the script took several minutes to run and hit that issue!
I kind of agree with both of you if that makes sense. Watching this development is interesting just to see how it is built and how certain problems are solved. However, I still would never use this in an actual production setting when money is on the line. 
As a rule, I won't consider a framework until I see how thoroughly the code has been tested. But I can't see your test code anywhere. You mind posting the link? Thanks!
There’s pretty good test coverage, but it’s still being expanded. [Here](https://github.com/oci-pronghorn/Pronghorn/tree/master/src/test/java/com/ociweb/pronghorn) is a link to the tests on GitHub. 
Thanks. God only knows why I didn't see them there!
&gt; The other ones sound like bad practice to me. Commonly, the other ones (shadowing, hiding, and obscuring) mostly happen because of accidents.
How does it do that, exactly without compiler or jvm support?
You don't need Docker to run [Spring on YARN](https://spring.io/blog/2013/09/10/introducing-the-spring-yarn-framework-for-developing-apache-hadoop-yarn-applications).
It is not portable. My intention is to provide a better way, may be using JAVA_HOME, but I want be able to switch between versions.
Thank you so much!
Gotten bit by that bug before... FYI the “pythonic” way to get around this is to name your variable *json_* Or use a better/different variable name. 
It is great to see all these new microframeworks being released. We need more choice beyond the excellent (but not so micro) Spring Boot!
How come that no one came up with this idea years ago? I like Maven, but POM files are so verbose.
Yep, but I totally didn't realize I was shadowing to begin with :)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
😂
import System as Sys;
Java doesn't have import renaming.
Why do you want to use framework at all? Why not just use server library like undertow?
It is nice to be able to write simple and productive code. Here is Javalin Hello World: import io.javalin.Javalin; public class HelloWorld { public static void main(String[] args) { Javalin app = Javalin.start(7000); app.get("/", ctx -&gt; ctx.result("Hello World")); } } Not sure how that would look like with a server library, but probably longer and easier to introduce a bug.
I wish these posts would mention in the title what it is of which a new version was released. I see the link (which doesn't tell me anything), click the link and see a changelog (which doesn't tell me anything) and then go to the project page and see that it's a micro web framework.
It wood look like this with undertow: http://undertow.io/
This is actually better than I expected! An idea for a new blog post- using server libraries? :)
Funny: "run code anywhere" but only available on linux :-) 
Looks much like vertx.
The concept sound really neat, but it is developed by Oracle. The free open source version is deliberately gimped, only the enterprise version has full performance.
This is a pretty big one. If something isn't on Maven Central I won't waste my time with it.
Undertow is great, and IMO the only server library that is viable to use "directly". But, it can still be a bit clunky: Consider [Undertow WebSockets](https://github.com/undertow-io/undertow/blob/master/examples/src/main/java/io/undertow/examples/chat/ChatServer.java) vs [Javalin websockets](https://javalin.io/documentation#websockets), or Undertow uploads](https://stackoverflow.com/a/46374193) vs [Javalin uploads](https://javalin.io/documentation#uploads). Javalin is just 3000-4000 lines or wrappers and helper functions on top of Jetty. You could of course write these yourself, but since Javalin has hundreds of tests and thousands of users, it should be safer to use than a "home-made" solution (also, you get less code to maintain).
If you’re stupid yes I would. 
Ugh. Spit. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I’ve previously worked at a place which was chucking. 300gb/day into splunk with 2 search nodes and 8 index nodes - no issues with that amount of data 
What do you mean by efficiently? Time to process a stack trace or capacity used to store an indexed stack trace?
Could you elaborate on this? I have never seen any evidence that graal is gimped in the open source versions, and I've been toying around with it on java 9 and above by enabling experimental vm options on openjdk. As far as I'm aware, the enterprise edition of graalvm comes packaged with javafx and some other things and that's the only difference.
I'm sure it will be available on lesser platforms soon enough :)
I wonder why every video by Oracle Developers has disabled comments, the talks are usually good.
An idea of mixing many different languages, concepts and features kills kittens and puppies in my mind.\(Literally say NO NO NO\). But, as a researcher in past, awesome, it could save me weeks rewriting, compiling and running outside modules and projects just to use one function in my project.\(Whats about Matlab!? :\) \) Also, talking for industry, that is a general practise for many growing companies to buy an outside functionality or just find it on GitHub, and use it, often writing not in a main language\(for the company\), making bugs and wasting resources. IMHO, I am ready to pay for the opportunity to reduce my wastes, but this product is on the dark side of the software development world.
See here for a quick comparison between CE (Community Edtion) and EE (Enterprise Edition): https://www.graalvm.org/downloads/
Because Oracle are almost universally hated?
Suppose you have class Parent, with a method foo, with no arguments. Parent also has a public method bar, which invokes Foo. You then have another class Child which extends Parent, and declares method foo, with no argument, and different implementation. If I'm understanding correctly, if method foo is declared protected/public, then Child.foo automatically overrides Parent.foo. Parent.bar will thus invoke Child.foo. But I'm guessing the above behavior does not happen, if foo is declared private. In that case, the override does not happen, and Parent.bar will always invokes Parent.foo. Which seems scary to some extent. I would expect that if I have a class method which is private, and I change it to package-private (eg, to enable testing) without making any other changes, program behavior would remain the same. But in the above example, program behavior actually changes dramatically. TBH, I would be all in favor of overriding being dependent on the @overrides annotation, just to flag cases like the above.
Your understanding is correct and highlights the importance of consistently using `@Override` annotation. Note that you can activate "Missing @Override Annotation" under _Settings &gt; Editor &gt; Inspections_ in IntelliJ (and other IDEs presumably have similar features).
A very quick comparison unfortunately, and performance enhancements is not well defined. I've found claims by twitter that EE sees a 10% performance improvement over CE's improvement over standard openjdk 8, but not much yet on what exactly the performance enhancements are
(Obligatory shameless plug) You gotta give Armeria a try. https://line.github.io/armeria/
Awesome! I always felt IDEA’s POM handling was a bit generic given how special pom.xml is in the Java ecosystem.
Hey! I will add armeria to the article!
From the [download page](https://www.graalvm.org/downloads/) it says: * Improved performance and smaller footprint Running the benchmarks from [here](https://www.graalvm.org/docs/examples/java-performance-examples/): $GRAAL/java CountUppercase In 2017 I would like to run ALL languages in one VM. 1 (1985 ms) 2 (486 ms) 3 (406 ms) 4 (381 ms) 5 (171 ms) 6 (124 ms) 7 (114 ms) 8 (113 ms) **9 (105 ms)** total: 69999993 (4022 ms) $GRAAL/java -Dgraal.CompilerConfiguration=community CountUppercase In 2017 I would like to run ALL languages in one VM. 1 (1855 ms) 2 (390 ms) 3 (288 ms) 4 (250 ms) 5 (182 ms) 6 (182 ms) 7 (272 ms) 8 (170 ms) **9 (176 ms)** total: 69999993 (3935 ms) $JAVA10/javac CountUppercase.java $JAVA10/java CountUppercase In 2017 I would like to run ALL languages in one VM. 1 (411 ms) 2 (314 ms) 3 (282 ms) 4 (280 ms) 5 (287 ms) 6 (275 ms) 7 (277 ms) 8 (280 ms) **9 (276 ms)** total: 69999993 (2958 ms) CE is still a lot faster than openjdk 10, but almost half of the enterprise edition. Though in a real application there is probably not that big difference, but still, it's a bummer.
Really cool. Needs nicer quoting if we're going to include other languages in Java. Something like &lt;script lang=R&gt;...&lt;/script&gt; would be cool.
Server libraries (e.g. undertow or netty) focus on the technical problem. They are optimized for performance, low GC overhead, correctness and high flexibility. They usually require a lot of low-level knowledge and boilerplate code from the developer, even for the simplest tasks, and won't prevent you from shooting yourself in the foot. Frameworks (micro or not) focus on developer productivity and clean APIs. They are opinionated, less flexible and have a noticeable performance overhead, but they make it a lot easier to solve common tasks, prevent common mistakes and support developers that are not familiar enough with the many ugly parts of HTTP. This is why both are important. A good framework is build on top of a powerful library and makes your life easier for the common tasks, but also allows you to bypass the framework and access the low-level details directly, if needed.
Thank you; the ecosystem and how things fit together has become complicated, especially for those who aren't doing just-Java-ops and the like full time.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
JRebel, costs but jeez does it save time.
Unit testing works well when you are only testing a small part of the code base. Any, and I mean ANY external dependencies and you're dead in the water. That means : - No tests that rely on DB state. - No tests that rely on an external server response. - Not test that rely on on time. e.g. if today is a Sunday etc.. A unit can be said to boil down to no side effects.
tl;dw: I. 1m16s "Who invented the API" mostly focused on Wilkes &amp; Wheeler, and EDSAC II. 26m34s "What constitutes an API" ~10 notable examples (see 39m00s for a list) a broad interpretation (eg, instruction set as hardware API ?!) ends with a narrower version/definition, if desired III. 38m33s "A Legal Digression" spoiler: as of 2018, APIs are considered copyrightable in U.S. despite lower court rulings, and widespread industry disagreement 
Yes, the Enterprise Edition has more optimizations, but calling the open source version gimped is a little harsh. The way I personally see it is: some people will be only interested in Graal, the compiler, to possibly gain a better performance. Others will be only interested in the polyglot features. Others will want to implement a new Language or DSL using Truffle. Others will only want to use Truffle/FastR/Graal.js. Others will only care for the native-image generation and SubstrateVM. The point is that you can do all that with the open source version. I'm my opinion, they opted for a reasonable strategy when differentiating the two versions. Will it work for them? I don't know. Hopefully it does, because that will mean that they can keep that funding going and further develop the open source version.
Great summary.
Thank you!
Use what you like. End of poll? 
Just because the current practice has a 65 year history, there is no good reason to assume this must be allowed unconditionally in perpetuity. Environmental protection laws are inconvenient for some industries and may even hurt certain business but it would be wrong to reject environmental protection laws on basis of the historic precedent of thousands of years of unbridled environmental destruction. 
Netbeans
Eclipse
I've been using IntelliJ paid edition for almost 5 years now and am pretty happy, though I used Eclipse for years before that. I might take a test drive of Eclipse to see if it has stabilized in the last 5 years. It was getting pretty bad around the Kepler version. It became necessary to completely blow away a project and reinsert it about once a week back then.
I agree with use what you like, but IntelliJ. Haha. 
Vim, you heathens!
I really like sbt compared with Maven much less verbosity.
I don't remember anything like this and I was working for a partner of theirs that rhymes with Bread Cat on OpenJDK at the time. There weren't any Oracle folks local to me though. What I do remember was a period of radio silence from Oracle java-land and I had the impression it had more to do with them figuring out internally some restructuring due to churn (some Sun people evidently didn't want to be Oracle people). Once they got their shit together though, it seemed to me there was even better community engagement than what we'd seen with Sun.
Yeah yeah yeah... gotta use groovy if you want that ;) 
Apache Netbeans is another alternative. 
You'd better ask here what exactly in Idea is missing or doesn't work for you. Otherwise, it's just holy war. 
You'd better ask here what exactly in Idea is missing or doesn't work for you. Otherwise, it's just holy war. 
What discussion
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
very good article. And it's refreshing to see in it references to projects outside of the Java world \(e.g Sinatra\)
every micro web framework starts easy and simple, but once you need complex routing, dto validation, (custom) error handling, security/authentication, ... some of them get really messy and are just impossible to handle/enhance. if you finally added everything needed for a production ready web application, you pretty much build your own framework. you could've done everything with jaxrs or spring-web in a fraction of your time (e.g. spring-boot-web with everything, even proper tests minutes). and a big advantage is that everyone familiar with it can get up to speed in no time. the disadvantage is, old stuff is boring and not does not have the best performance
I write all my code using Microsoft Word - I didn't see that option in the list.
this one. with the world needing shit.
Just in case they call you crazy, I remember that too. However I'm not sure if it was a policy thing or a personal decision by those Sun employees.
Reddit bronze to you, as this is the only correct answer.
Might be worth to check Slashdot postings from around that time filtering on Java if that's possible.
But we have IntelliJ... with first class support for Spring...
Spring isn't for everyone. Some prefer to rather not use it, like myself.
This is a post about using Spring.
My colleague tried this, but not with spring boot, only the general spring 4 framework and after one week he gave up and using Intellij again now. The deployment via vscode into the Tomcat was absolutely unusable. 
Did you even open the article?
Cool story, bro.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The article isn't for everyone. Some prefer to rather not read it, like op.
Yeah, in fact Part I made me understand that the API is the thing that generalizes a library for one specific language/hardware/platform. As such, it is an intellectual creating in its own right. I'm guessing that's the legal reasoning by higher courts, when they rule that an API is intellectual-property over which the author can assert copyright. 'Course, this generalizes to saying that *any* standard is copyrightable (perhaps even the standard set of door and window sizes). Restricting access to a standard pretty much undermines its *raison d'etre*. (And of course authors-of-standards pretty much always choose to relinquish their copyright ...or at least, I'm guessing that this is the current legal status in the US. Ianal.)
I was a fairly high-up global Oracle hire right after the Sun acquisition, and my boss was one of the Sun employees. IIRC - and please do keep in mind this is my recollection with no documentation to reference - there was a lot of shouting across orgs as to personal branding vs Oracle branding, especially wrt community work. I believe most folks landed in a safe spot, with little static. But some orgs (esp customer-facing) wanted to force big O branding, and created a fair amount of community churn because of it. It definitely furthered the Java community’s distrust of Oracle as Java steward, and, I think, contributed to the rift we still see today. To conclude my gossip, I have ex-Oracle friends today across the global Java network who have given up their Java Champion status and eschew J1 (OracleCode?) and all O-related events. There’s definitely some bad blood. 
Ah damn. I was resorting to building a WAR and copying it into the autodeploy dir but that's horrifically inefficient. I have access to Eclipse and VSCode but not Intellij due to license issues. 
Yea my colleague tried this too. But yes it's inefficient. There is a plugin for vscode to deploy directly to Tomcat. But that's not working good as we tested it. Maybe it's working better now.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
10/10
\(arguably\) a shameless self promotion of an article and an open source I work on
Remote code execution as a feature, not a bug?
what do you mean ?
You're sending code to some server who then executes it. [https://en.wikipedia.org/wiki/Arbitrary\_code\_execution](https://en.wikipedia.org/wiki/Arbitrary_code_execution)
**Arbitrary code execution** In computer security, "arbitrary code execution" is used to describe an attacker's ability to execute any command of the attacker's choice on a target machine or in a target process. It is commonly used in arbitrary code execution vulnerability to describe a software bug that gives an attacker a way to execute arbitrary code. A program that is designed to exploit such a vulnerability is called an arbitrary code execution exploit. Most of these vulnerabilities allow the execution of machine code and most exploits therefore inject and execute shellcode to give an attacker an easy way to manually run arbitrary commands. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
During development "Permitted **Code injection"** is the best way to exploit software. 
Hope you remember to turn it off in production.
We are using testcontainers for half a year for integration and component tests in our springboot-based microservices - it is easy and reliable solution for this purpose.
I'm not convinced it's the best solution to the problem. The issue to me seems like container like classes should always define their contained types in the class definition as generic parameter. For example, the Group class in the article could be rewritten as: interface Item { String name(); } interface Group&lt;T extends Item&gt; { Group&lt;T&gt; buildFrom(List&lt;T&gt; list); List&lt;T&gt; items(); default Group&lt;T&gt; filterBy(Predicate&lt;? super T&gt; predicate) { return buildFrom(items().stream().filter(predicate).collect(Collectors.toList())); } } With this definition, the extension to sub\-classes that specialise the contained type is trivial \(I'm skipping the complete implementation for brevity\): interface ScoredItem extends Item { int score(); } class ScoredGroup implements Group&lt;ScoredItem&gt; { public ScoredGroup(List&lt;ScoredItem&gt; items) { ... } @Override public Group&lt;ScoredItem&gt; buildFrom(List&lt;ScoredItem&gt; list) { return new ScoredGroup(list); } @Override public List&lt;ScoredItem&gt; items() { ... } } and interface ScoreExplanatoryItem extends ScoredItem { String explanation(); } class ScoreExplainatoryGroup implements Group&lt;ScoreExplanatoryItem&gt; { public ScoreExplanatoryGroup(List&lt;ScoreExplanatoryItem&gt; items) { ... } @Override public Group&lt;ScoreExplanatoryItem&gt; buildFrom(List&lt;ScoreExplanatoryItem&gt; list) { return new ScoreExplanatoryGroup(list); } @Override public List&lt;ScoreExplanatoryItem&gt; items() { ... } } finally, using the interfaces becomes a breeze with the contravariant filterBy: class Main { public static void main(String[] argv) { Group&lt;ScoredItem&gt; sg= new ScoredGroup(new ArrayList&lt;&gt;()); Predicate&lt;Item&gt; predOnItems = (p) -&gt; p.name().isEmpty(); Predicate&lt;ScoredItem&gt; predOnScored = (p) -&gt; p.score() ==0; Group&lt;ScoredItem&gt; sg1 = sg.filterBy(predOnItems); Group&lt;ScoredItem&gt; sg2 = sg.filterBy(predOnScored); Group&lt;ScoreExplanatoryItem&gt; seg = new ScoreExplanatoryGroup(new ArrayList&lt;&gt;()); Group&lt;ScoreExplanatoryItem&gt; seg1 = seg.filterBy(predOnItems); Group&lt;ScoreExplanatoryItem&gt; seg2 = seg.filterBy(predOnScored); Group&lt;ScoreExplanatoryItem&gt; seg3 = seg.filterBy((p) -&gt;p.explanation().isEmpty()); } }
Hey there... this article and other related documentations about VS Code and Java are currently going through reviews and edits. Disclaimer: I work for MS in the dev advocacy team for Java.
Documentation beyond "import X". A huge number of libraries i have (attempted to) used, both for Java, C and C++ have minimal or no documentation. Comments are ok, but they are really not documentation if someone has to dredge through every source file for hours to figure out what everything does and what they should be using.
I know this post is a little old now, but what's the reasoning behind choosing the version with fewer fixes? 
Will check this right after my lobotomy 
Hi Jake, thanks for pointing that out. SneakyThrow 1.1.0 doesn't wrap an exception anymore but throws the original one.
Thank you for your comment! Please, see my response to u/lukaseder's comment in the original article \- he raised a very similar argument there \(apart from the `buildFrom` method, which is an interesting addition, but which I would rather name `withItems` then\).
Hey, you could have a look at [FAF](https://github.com/FAForever), which is basically a whole bunch of projects supporting a startegy game from 2007. It's basically a multiplayer lobby where you can learn how to improve a lot of code: \- Matchmaking server functionality 
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://github.com/FAForever) - Previous text "FAF" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
&gt;For Autonomous Vehicles ... Java oh no
How is BigDecimal used in highly complex calculations, such as insurance premium calculations, for example? Is it really a case of: `BigDecimal result = inputValue.subtract(new BigDecimal(Double.toString(thisNumber)).multiply(new BigDcimal(Double.toString(thatNumber)).add(new BigDecimal(Double.toString(anotherNumber)) //...etc` Obviously I would code neater than this but just making a point. I imagine if you're using differential calculus to calculate the peak of a market then this would become pretty messy.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yeah, I never understood the ultra micro web framework hype. It's not like I need way more lines of code to do the same thing in Spring Boot or even Java EE. **I've never written a production application that is simply a REST-endpoint**. I always need: * Bean Validation * Security (OAuth, LDAP, Session, ...) * Database Access (SQL, Mongo, Redis, ....) * Dependency Injection * Schema Migration * Metrics * Caching * ... I feel like these micro frameworks are great for conferences where you can hack together a few end-points. PS: I don't want to sound like too much of an hater. I actually like the competition and the new concepts that these new frameworks introduce. The good ideas often get adopted in the more "mainstream" frameworks" i.e. see the [new spring reactive web-framework](https://spring.io/guides/gs/reactive-rest-service/).
a list is a shortcut for linked list in algorithmics. Wrong. In "algorithmics", and anywhere else for that matter, a list is a collection of items, with an order. Nothing more, nothing less. Java Documentation about the List Interface: "An ordered collection \(also known as a *sequence*\)." Wikipedia: "A *list* is any enumeration of a set of items. " Whether a list is implemented through an array or a linked\-list has nothing to do with the abstract definition of a list. 
It's crazy to hear this, given that the Oracle database tech community (e.g. people around Steve Feuerstein) do not seem to be forced to forego their personal branding. E.g. [Connor McDonald's blog](https://connor-mcdonald.com/) has a very personal touch and no big O branding at all.
Well, linux is everywhere, so... :D
Very useful tool. The Rest API's documentation reminds me of the way GitHub v3 API is documented [https://developer.github.com/v3/](https://developer.github.com/v3/)?
Ok the shopping list exists and it is certainly not a linked list as in computer science. In algorithmic, we usually avoid using the work list as just a sequence, because it is ambiguous. However, when we speak about complexity in a forum on a computer science topic, it usually refers to the computer science complexity and in this case a list is generally a linked list. For isnatcen in Java, the word collection is also used in a different way than the way use by people in the street In conclusion, in compuer science it is a bad idea to use list for somthing which is different than a linked list 
&gt; Micronaut supports reactive streams out-of-the-box `return Single.just("Hello " + name);` This looks like RxJava. Is it restricted to this implementation or can you choose any (e.g. Akka)? I see there are dependencies to RxJava, reactivestreams and Reactor.
According to the docs, Micronaut supports any implementation of the Publisher interface. You can read more here: [http://docs.micronaut.io/snapshot/guide/index.html#reactiveResponses](http://docs.micronaut.io/snapshot/guide/index.html#reactiveResponses)
Wanted to read it. But the code is unpleasant to read in webview and in chrome, the formatting does _not_ work. 
It might be ok if they are sitting on top of native libraries. I mean most of ML is using Python glue on top of TensorFlow.
not what i wanted to hear.
I'm currently using dl4j for my thesis \(On\-Device machine learning \- Yes, \*learning, ie. training, not just inference\*\) and having come from ML in Python I have to say I am pleasantly surprised by its ease of use. I find that my code is cleaner, more expressive and also easier to use than anything I've done in python. As such I will probably replace TF as my main ML library with dl4j.
In general, what you want and what happens have no correlation...
Speak for yourself ;-)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
TL;DR `someArray[someMethod()] += someString` calls `someMethod()` twice.
Unless of course a person's wants are the product of repetition, perception, and familiarity.
In the compiler, you mean. Java itself didn't break it.
\`jvmArgs '\-H:\+ReportUnsupportedElementsAtRuntime'\` Is this mandatory? Looks like a bad idea to me
Use `StringBuilder` in stead of autoboxing.
The code in question was golf code.
In the context of Oracle, usually it's the opposite of what you want that happens.
Ah, yes. I see that now.
As I explain (maybe poorly) in the link, this is mandatory to build a Spark project right now. Without it, GraalVM errors because Java Security tries to create a new URLClassLoader, which is strictly unsupported. It's definitely not a flag you feel good using.
Fuck oracle with a molten rod
Not a good advice anymore as there is no autoboxing. The improved([Indify string concatenation](http://openjdk.java.net/jeps/280)) implementation means that a methodhandle is created to fill in a string template with parameters. This method signature will consume primitives directly without autoboxing. How these parameters are used and later converted to the resulting string depends on the implementation(the JDK ships with a few of them even), but will likely be more performant. Heck you could even write an implementation that pads ints with spaces so you can allocate the whole char array template first and replace single chars with the actual provided int values.
&gt; I'm not understanding the point of the new JsonItemReader.. Doesn't Spring already do that? I know we use them to handle JSON with REST calls. The point of the new `JsonItemReader` is to read a (typically big) JSON file in a streaming fashion according the [chunk oriented processing model](https://docs.spring.io/spring-batch/trunk/reference/html/configureStep.html#chunkOrientedProcessing) of Spring Batch. When you call a REST endpoint, you might get some data that fits in memory and which you can map to a POJO on the fly. However, for batch applications, a JSON input file can be of gigs of data and loading the entire file into memory is not an option. This is where the `JsonItemReader` comes to play, to stream the data source one item at a time until a chunk of a predefined size is created. It is the exact equivalent of the `StaxEventItemReader` for XML files. &gt; I thought at first that it might be a way of somehow avoiding vendor lock-in for your JSON library, but the sample code uses JacksonJsonObjectReader, so that's obviously not the case. It is exactly that, Spring Batch is not tied to a particular JSON library. This is done through the strategy interface `JsonObjectReader`. The blog post shows an example with `Jackson`, but you can use `Gson` (or any other library implementing `JsonObjectReader`). Here is an example with `Gson`: ``` @Bean public JsonItemReader&lt;Trade&gt; jsonItemReader() { Gson gson = new Gson(); // configure gson as required GsonJsonObjectReader&lt;Trade&gt; jsonObjectReader = new GsonJsonObjectReader&lt;&gt;(Trade.class); jsonObjectReader.setMapper(gson); return new JsonItemReaderBuilder&lt;Trade&gt;() .jsonObjectReader(jsonObjectReader) .resource(new ClassPathResource("trades.json")) .name("tradeJsonItemReader") .build(); } ```
&gt; I'm not understanding the point of the new JsonItemReader.. Doesn't Spring already do that? I know we use them to handle JSON with REST calls. The point of the new `JsonItemReader` is to read a (typically big) JSON file in a streaming fashion according the [chunk oriented processing model](https://docs.spring.io/spring-batch/trunk/reference/html/configureStep.html#chunkOrientedProcessing) of Spring Batch. When you call a REST endpoint, you might get some data that fits in memory and which you can map to a POJO on the fly. However, for batch applications, a JSON input file can be of gigs of data and loading the entire file into memory is not an option. This is where the `JsonItemReader` comes to play, to stream the data source one item at a time until a chunk of a predefined size is created. It is the exact equivalent of the `StaxEventItemReader` for XML files. &gt; I thought at first that it might be a way of somehow avoiding vendor lock-in for your JSON library, but the sample code uses JacksonJsonObjectReader, so that's obviously not the case. It is exactly that, Spring Batch is not tied to a particular JSON library. This is done through the strategy interface `JsonObjectReader`. The blog post shows an example with `Jackson`, but you can use `Gson` (or any other library implementing `JsonObjectReader`). Here is an example with `Gson`: ``` @Bean public JsonItemReader&lt;Trade&gt; jsonItemReader() { Gson gson = new Gson(); // configure gson as required GsonJsonObjectReader&lt;Trade&gt; jsonObjectReader = new GsonJsonObjectReader&lt;&gt;(Trade.class); jsonObjectReader.setMapper(gson); return new JsonItemReaderBuilder&lt;Trade&gt;() .jsonObjectReader(jsonObjectReader) .resource(new ClassPathResource("trades.json")) .name("tradeJsonItemReader") .build(); } ```
Serious question since I’m fairly new in the java scene. Does oracle also do some good, or are they really Evil Corp, because that’s all I’m seeing being claimed in discussions.
Their words: &gt; It will also provide the community with an opportunity to build upon this tooling to, for example, expand the number of IDEs supported, not to mention provide new features and capabilities. Their actions: &gt; It will make the community have to do all the work, because we sure as hell ain't doing anything anymore.
They've been doing *a lot* of good stuff to the Java language and the JVM
If Oracle destroys Java, does that mean that we should all start looking at dotnet?
Sometimes it's a question of "are they actively malevolent or just incompetent," but any time Oracle does something, things tend to get worse. Their business model is built around confusing price schemes which allow them to audit and then sue existing customers. They're a pretty shitty company all around.
I think Oracle did a much better job of handling Java at the beginning than anyone \(including me\) expected. I wrote about this back in 2012: [https://www.infoq.com/articles/oracle\-java\-ecosystem](https://www.infoq.com/articles/oracle-java-ecosystem) But many of their more recent decisions suggest that they’ve basically lost interest in Java and/or have lost an understanding of how the Java ecosystem works. The support situation for Java with the 6 monthly release cycles is a horrible mess, and reading for example the comments from Cameron Purdy \(who was a senior Java exec. at Oracle\) is pretty depressing: [https://www.infoq.com/news/2018/04/oracle\-kills\-java\-one?utm\_source=infoq&amp;utm\_campaign=user\_page&amp;utm\_medium=link#anch158585](https://www.infoq.com/news/2018/04/oracle-kills-java-one?utm_source=infoq&amp;utm_campaign=user_page&amp;utm_medium=link#anch158585) However Java is more than Oracle \- RedHat, Azul, IBM, Pivotol and many others contribute to the language and runtime, so I think it will be fine. It’s still a good choice \(in my view the best choice\) within it’s problem domain. 
A troll but I'll bite because others might find it interesting. I've worked on at least two DARPA robotics projects/competitions with teams that were basically pure java. In both cases they did extremely well. Most other teams were primarily C/C++ or Python and one team was Matlab. One project involved a robot that had to run on a really crappy ARM processor and the other was a Human robot that had a control loop that ran at something like 500 Hz to 1000 Hz.
If your company pays: don't even hesitate. If you get it discounted: strongly consider it. If you pay yourself: do it anyway or prepare for it\(for practice\). I prepared for it in School and fell sick for the exam.\(Didn't regret it\)
So many autonomous vehicle start ups (mostly with fresh graduates) in the SF Bay Area use Python as their primary language. 
5/7
It isn't really clear cut. The truth is under Sun progress was very slow. Almost non-existent to be honest. Oracle has pushed Java forward in many amazing ways. However Oracle are still Oracle and they have had no issue with making changes that the community at large are not happy about. Overall I would say have been a net positive so far. 
Yeah, I realised my assumptions were wrong when I clicked on the link and not just the comments. Next time.
The number of prominent Java projects, which Oracle has recently donated \(imagine that in quotes\) to the open\-source community makes me worry about their commitment to Java. That said, I am also doubtful that any other large corporation would be significantly better as steward of Java. 
That's good enough, thanks
Oracle is a publicly traded company and its only motivation is earning profits for its shareholders. Oracle has started to open source a lot of its software and while this seems like a gesture towards the community, it may simply and cynically be seen as a new form of slave labor. This way, Oracle doesn't actually have to pay anyone to maintain the code, but still holds the trademarks and copyrights so it can swing with its lawsuit hammer at "infringing" companies like Google. And by open sourcing it, Oracle might reason that enough companies NEED Java and its infrastructure to work that those companies will pay to maintain it, rather than Oracle. Currently there are probably a lot of contributors from Red Hat and IBM for example. So this move is no surprise, it's a logical step. We are probably going to see more core Java developers from Oracle being laid off and Oracle focusing more on creating revenue by its licensed products such as WebLogic and their DB.
Oracle was the best option at the time out of a bad set of options when Sun was going under. In general I've been pretty happy about the work they've done. Though I don't thrill over dumping things out into open source expecting others to pick up the extra work. 
Most Java certifications scream "I'm insecure about my skills" in a lot of hiring departments, and offer dubious value. I wouldn't. That being said the EE cert used to be a good idea. Now...not so much. Learning the shit it covers isn't a bad idea though.
This kind if certificates are good when your company pays for them. Otherwise, I don't think the money you have to invest worth it. 
They're at least making the projects open-source instead of just firing the development teams and letting the projects rot. It could definitely be handled worse than that, so lets be grateful for what we have, at least :/
Been in the industry for over 12 years, so my opinion is based on my experience. No, it doesn't matter. Based on the countless interviews I have conducted, most of the candidates with certifications (specifically those who refer to them as proof of proficiency) flunked. It does not mean you shouldn't do it given the opportunity; learning is always good. 
Thanks 
Very slowly though. Progress on value types is glacial, and we’re only just getting “var” now ... That’s one reason why this is so annoying - if Oracle don’t want Java to be a real open source project they need to properly resource it to have any hope of moving at a decent pace.
Isn't this how it should be though? If it is a valuable tool for people then they should contribute to maintain and improve it.
Spotted the redditor who finds a hair in every soup.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Theoretically, the one with critical fixes only is more stable. Upgrading from 8u151 to 8u171 has fewer changes than 8u151 to 8u172, so there are fewer chances that things will break. And unless you need the non-critical fixes, there's not really any benefit to upgrading, so why take the risk? As an end user though, I haven't seen any difference. If you're not running anything super mission-critical, it probably doesn't matter.
Spotted the redditor which has nothing to add. 
I read an article that said developers generally get more use out of studying for the certs than the actual certs themselves. So forcing yourself to practice, memorize Java vocabulary, etc. The article also mentioned that juniors with certs doesn't really look good. I've been prepping for job interviews and that has helped "force" me to learn more things than I had before. Find a reason and just buckle down. 
Some nice stuff is coming out of it though, like dropping the free oracle jdk. If only they supported the openjdk builds as a replacement though...
Well that's the alleged goal of the versioning change. Jigsaw really hurt other java features, so maybe that'll be better in the future.
Well, now Java *is* moving forward faster. So fast in fact that some people think it's too fast. 
Oh that is fun!
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Personally, I wouldn't commit my Eclipse settings, or the settings for any IDE for that matter. Those are the things that land in .gitignore.
You reference junit.framework.AssertionFailedError in your "main/java" code. You don't need jUnit to run your program, you only need to test it. Reference junit only in your "test/java" code.
Much better to understand this than the stackoverflow post. Thanks my dude
 public Card\(int num, String suit\) { ... } Your suits are stringly\-typed. You might want to look into enums. Also you don't do any invariant checking on your num. You can create a card new Card\(1234, "abcd"\); that should probably not be valid. Personal taste: Card class looks immutable. Good. You can make your fields public final and have no getters.
public Player\(String name, Card\[\] hand\) { this.name = name; this.cards\[0\] = hand\[0\]; this.cards\[1\] = hand\[1\]; this.cards\[2\] = hand\[2\]; this.cards\[3\] = hand\[3\]; this.cards\[4\] = hand\[4\]; ... } Always check array bounds, please.
I don't think anyone likes Oracle, you're just being down voted because your comment contributes nothing to the discussion.
I see lots of boolean tmp = false; if \(numDuplicates\(\) == 3\) { tmp = true; } return tmp; which could be simply: return numDuplicates\(\) == 3;
Thanks for that, old habits die hard I need more people to point this out to me
There's really few things as remarkable as the entitlement and the short-sightedness of Java programmers. Oracle has made tremendous progress on Java in the last three years, it has spent millions on the technology and then given all of it away for free. But this isn't enough. It's never enough say the hordes of selfish fucks who don't pay for this product or contribute to it in anyway. It's absolutely extraordinary.
Are you okay? Do you need a safe space?
I don’t know about too fast, but it needed to start moving again. It seems C++ and Java have flipped on the rate of improvements to the language in the last 10 years or so - I never would have thought C++ would have been first to get basic (and simple) things like var/auto if you’d asked me a few years ago, but here we are. I think there’s a small, smart and under-resourced group at Oracle working under immense pressure. I wish Oracle would give it higher priority and resourcing - it’s basically peanuts to them. Is it just the usual corporate budget short term-ism? If so, that’s a shame. Laying people off sends a very bad signal. Reassigning them to JVM or language work would be totally fine, but just throwing away good people? It’s sad. 
Okay oracle lover
I was wondering why some of the fields in Player had package visibility ... and then I saw them being directly modified in HoldEm. I believe that's not a good decision. This might still be controversial, but I believe you could easily make Player immutable as well.
this Should be true, except i actually used JUnit Reporter to Assert hand conventions like making sure there is a : after player names and making sure each "card" is 2 character. I think I'm right about that but your not the only one to tell me that.
i do all that checking in the holdem class mostly in "createPlayer()" do you think it would e better practice to move that into the card class? Looking into enums thank you, these have been a buzz word I always ment to get around to learning 
sorry I fell like an idiot here, I've looked at this peice of code like 20 times thinking darn that looks wrong. but the code works and i feel like it shouldnt. Would you mind if i ran something probably stupid obvious by you? I create an array of Card Hand in my global variables Card[] cards = new Card[5]; then in my constructor i fill it with 5 cards 0-4 am i leaving the =6th Card[5] blank, or does is Card[4] the fifth element in my array? 
Hey, Prince\_ofRavens, just a quick heads-up: **peice** is actually spelled **piece**. You can remember it by **i before e**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Thanks for looking at it I feel the same way, it does feel kinda janky. the problem was the silly way i did scoring. it used to be all of the scoring was done inside of the player which obviously makes no sense, this has been my hack job fix. The left over bit is that player still has a "winMessage" and I havnt quite put my mind onto how to fix that with the way ive put things together without strongly coupling player to the main class. It's a bit of a mess XD
Messy, got it. taken into account thanks :)
good bot.
And Java ONE is now Oracle Code ONE, open to any programming language.
That's a pretty large correlation.
I am a professional Java developer without a CS degree. When I was going for a job, I pursued all of the Oracle Java certifications at the time, and got them all. So, I feel I have something to say on this subject. First, did they help me get a job? In no uncertain terms, absolutely not. Employers either had no idea that these certifications existed, or quite frankly didn't care about them at all. As a form of credential in the industry, these certifications are less than useless. That being said, I'm very, VERY glad I got them. These tests are not easy, they basically force you to be a human compiler. Studying for the exams forced me to spend more time on parts of the language, like NIO, that I may not have gone as deeply into otherwise. Overall, I feel my skills as a developer at that early point in my career were magnified substantially by getting those certifications, and that is something that has benefitted me down the line. tl;dr: employers won't give two shits about these certs, however the process of getting them will make you a better developer.
That's my experience too. I can't recall a single job add that asked for certifications.
Hurt in the sense of delaying those other features. I hope though that the modularization of the Java platform has made easier and therefore quicker to evolve. As already pointed out above, Java needs this stuff. In particular, value types are not just nice to have, they are critical for the super\-efficient processing of large amounts of numerical data in modern applications. 
bad article, there is no reason presented why it's needed how it differs from the community, except blazing fast start up time, which seems applicable to hello world only
Yep. This isn't a potentially horrifying security hole at all...
Are you really that dense ?
thank you. so the issue isn't that any string usage of += is broken, just that this specific example won't behave the way that it should. right?
I've added more thoughts in the original article :\) Also, my most sincere apologies to u/lukaseder for not chaining his original comment that was very similar to what I proposed here. As I've written in DZone, it's not the first time that I miss the comment section in their articles because instead of being scroll based \- like every other blog and forum \- you have to click on "comments" in order to open it.
Spotted the redditor who has also nothing to add.
Spotted the redditor who came for the new meme.
I think that is spot on.
Also, let's go full software engineer mode here and start a flame war on giving names to variables and methods :D I think `buildFrom` in this case is more appropriate than `withItems` because it clearly indicates what is the contract that implementing classes need to comply to: * They need to return a list of Items, * They need to be able to produce a copy of themselves applying a filter. * They need to be build\-able from a list. `withItems` suggests that you are "doing something" to an existing list using a list of items as argument, which doesn't really seem right in this case.
Yeah, the title is pretty clickbait, but then again reddit auto-deletes link submissions that don't match the title of the linked article.
It's like those competing arguments ten years ago that either Java was too bloated or it didn't have enough features; either way, it was "dying". Then Oracle bought it, kicked the feature release schedule into high-gear, and those "Java is dead" articles have disappeared. The company deserves a lot more credit for keeping the language going when it could've ended up as a moribund language waiting for features to get chucked out by the committee like Perl's fate.
As long as the left-hand side of `+=` has no side effects, you should be fine...
I just tried with a fresh empty project from start.spring.io and I got : Started DemoApplication in 0.79 seconds (JVM running for 1.09) I simply generated a gradle project and used ./gradlew bootRun to run the app. If I add the Web dependency I get : Started DemoApplication in 1.708 seconds (JVM running for 2.022) Have a look at https://djagielo.me/slow-start-of-spring-boot-app-on-mac-os.html, it solved slow startup time on my mac for me :).
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
github repository is here. please give feedback \- [https://github.com/jonathanborenstein/StockTracker](https://github.com/jonathanborenstein/StockTracker)
I don't know if I speak for all programmer hiring folk, but I don't give a warm shit about certifications. I completely ignore them on a résumé. I would much rather see a hobby project or FOSS contribution.
More than just that, according to the SO question so long as the left hand side uses an expression as the index, *or* an expression as the container being accessed/indiced, ex `someMethod()[index]` or `someMethod().someAttr`.
Well, with the checking done in HoldEm class, it's still easily possible to create invalid Cards regardless. Some one would just not use your createPlayer() method to create them. The point is, invalid state is possible. Good design should make invalid state impossible.
I saw your commit with for (int i = 0; i \&lt; hand.length; i\+\+) { this.cards\[i\] = hand\[i\]; } This might solve bounds checking for hand, but not for [this.cards](https://this.cards). If your goal is to have a copy of "hand", you can easily do this.cards = Arrays.copyOf(hand, hand.length);
Do you have any updates on this? It’s been awhile.
Well, Sun made a lot of progress, but it was in directions that didn't work and have been forgotten. Remember their web browser written entirely in Java? In old, pre-everything Java? The damn thing worked. (It sucked at performance, but the functionality was better than several of the others at the time.) Or the core of a new operating system written entirely in Java? Potentially to be run on the RISC based CPU that executed JVM bytecode natively? Sun was the first company to have an entire marketing division dedicated to *a programming language*. That was new. 
Am I right in thinking it's basically expanding `someArray[someMethod()] += someString` into `someArray[someMethod()] = someArray[someMethod()] + someString`?
\&gt; understanding of how the Java ecosystem works You mean like how up until Java 8 backwards compatibility was paramount. And then with Java 9 / 10 all of sudden the come up with this monstrosity called 'modules' which seems like a recipe for breaking everyone's old and perfectly working code. \&gt; with the 6 monthly release And that.. yeah. Together with the breaking changes, that's the perfect storm. The next version is already there, abd we haven't even switched from the previous one yet. That will just really put a huge stress on all the open\-source projects rushing to keep up running on the latest JVM.
Up until Java 8, I would agree. But Java 9 and 10 really has nothing much I want and a lot of things that are only marginally useful at best or actually just straight out PITA at worsts (i.e. modules which will probably end up breaking a lot of old code people rely on).
\&gt; them to audit and then sue existing customers That really true? Wow!
\&gt; it may simply and cynically be seen as a new form of slave labor. More realistically... they just don't care about those things anymore. So they don't want to invest in it anymore. I don't think that measn they are really counting on the community to pick up and develop it for free so they can use it. (If they'd really cared enough and have an interest in it in that way they would want to keep it under control rather than have 'the community' really run with it. 'Giving' it to the community, you can put a positive spin on. And who knows maybe some folk will step up and pick up the slack. But maybe not, and the project just slowly die. So yeah, what they are doing is just dumping stuff they don't care about and cutting their losses. They are neither being really 'charitable' (but they can spin it that way in the press) nor are trying to 'get a free ride'.
That is exactly what it is doing. Unfortunately the JLS for compound operators specifies that the someArray[someMethod()] bit should've only been evaluated once, hence the bug!
I have a little sympathy for the problems with the new development cycle. I hope they'll get it figured out eventually, but that's a massive shake up...some might even say "disruptive". 
Well... that remains to be seen. Without someone picking up the slack and investing in keeping up the slack just making something 'open source' doesn't magically stop it from 'rotting'. Unless someone invests time / money to keep a project going a slow death is inevitable. 
Yeah and they also did the right thing firing the team. If someone really cares they can hire them and pay them to continue their work elsewhere. BTW: I'm being a bit sarcastic here. I'm sure it sucks right now if you were on that team. And it sucks to work for a company that treats its engineers that way. But in the best of scenarios, those engineers probably won't have to look long for a job (Oracle's loss will be someone else gain, Oracle is really dumb i.m.o. for wasting talent like that. Don't they even know how hard it is to find talented software developers / engineers?) 
&gt; ght out PITA at worsts (i.e. modules which will probably end up breaking a lot of old code people rely on). Don't forget the reflection changes which will break a lot of old code!
Indeed. AMQ (or any other JMS server) is a great choice for most normal use cases when it come's to integrating message flow between applications. Remember to produce locally and read from remote and you will have a stable chain in case of network outages. If you need you can configure it with failover and database persistance - the usual relative performance hit vs availabilty needs.
Wow! That is bad. Someone was really sleeping on the job if that is true.
Yeah the compiler is trying to be smart... But it's actually being dumb. I.e. typical example of a compiler optimisation going wrong because they didn't check the conditions that guarantee the transformation it applies actually preservers the program's intended behavior.
\&gt; Don't forget the reflection changes Indeed, and... no... I didn't (forget about those) :\-) And there's also com.sun.misc.Unsafe (which I guess is why some folks use reflection because otherwise they can't get at it). These changes with modules and reflection are 'features' explicitly designed to \*stop\* people/code from doing things. But what value is there really in stopping perfectly fine code, used by millions of dependencies that works and does very useful things for many people, from doing the things it needs to do to work. 'Improvements' like that really are negative value. And they are so out of character with how Java pre Java 9 have been almost pedantic about keeping people's old code running smoothly. 
I thought with 11 there was just open jdk and Oracle would support that. 
&gt; love how lambdas work ... If I wanted type inference, even just local-variable type inference, I wouldn't code in fucking Java. Why is type inference OK for you with lambdas, but not for local variables? Just wondering... I generally try to push for short functions anyway, so local variable type should be easily understood even without explicit declaration, but I can see it could be mis-used -- just like many other language features.
Hm that's a good point actually. I guess it's because my consumers/etc are usually fed type parameters, as are my methods which accept them. It's a bit different than straight up type inferencing
Your third already? 
+1 for AppDynamics
It's not exactly the same thing, but not that different either. With a monster stream-chain the type can get pretty muddled, too, where readability does become questionable. Likewise, local variable type inference could be used when the type is obvious, but very verbose (think nested generics) -- would have been very welcome when I was messing with Spark's RDDs...
Don’t anthropomorphize Larry Ellison https://youtu.be/-zRN7XLCRhc
You miss my point, friend.
Oracle has zero obligation to keep any projects alive. They're a for-profit company not a charity. I never said they're doing anything to prevent the projects from rotting, only that open-source at least gives the projects a fighting chance to stay afloat.
I learned 'var' from c# and was like "is this a scripting language??", after years of being a Java/JS dev that wrote bash scripts for devOps stuff. And I always questioned why are languages now completing with each other... I wish I could think of a good example right now ... but I feel like someone ( ORACLE/M$oft) reads on python/ruby/JavaScript developers have blah\+blank we should add that to C#/Java next release. and I assume the companies are thinking people will like this feature BC they like it on other languages and its so right they don't know the eco system
[HotJava](https://en.wikipedia.org/wiki/HotJava)!
**HotJava** HotJava (later called HotJava Browser to distinguish it from HotJava Views) was a modular, extensible web browser from Sun Microsystems implemented in Java. It was the first browser to support Java applets, and was Sun's demonstration platform for the then-new technology. It has since been discontinued and is no longer supported. Furthermore, the Sun Download Center was taken down on July 31, 2011, and the download link on the official site points to a placeholder page saying so. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
In particular: mutation makes programs harder to reason about (and this is a prime example).
Yes ideally they would be shifted to some other project within Oracle that is profitable. If mission control was driving enterprises to pay for support then Oracle would be collecting revenue off the project and could justify paying for continued development. Obviously that wasn't happening and we can't just expect Oracle to spend millions a year with no return. People seem to lose sight of the fact that Oracle is a business with shareholders. They are only going to fund Java development if it makes them money as they have a responsibility to their shareholders. Anything beyond that is up to the community.
Why unfortunately? That seems like a 'fortunately' situation?
Suspend the process -- preferably by simply removing it from the runtime queue, if that's available, rather than sending SIGSTOP and hoping -- then edit random locations in its process space. Re-enable the process and watch it go off the rails. Repeat the process as needed.
Oracle is not supporting openjdk builds for more than 6 months.
I guess he meant something like 'unfortunately it does things that are against specification'
Agreed, you don't need var keyword. The IDE will help out, e.g. in eclipse just type Ctrl+1 Enter and it will create the type for you. Or do I miss some advantages with car?
Hmm I really think I just hate the var keyword because of certain people who use it a certain way. Like I know some js developers are gonna get ahold of that bastard, come to java, and every local variable is gonna be a var :( Makes it very hard to sight-read code on github/sublime for quick reference.
I work as a consultant, and there are two reasons our employees take the basic Java certification: 1. To refresh Java knowledge, mostly for new employees that are fresh out of uni, and might not have worked with Java in a few years. 2. For competitive usage. Some clients score us on the number of certified developers offered (luckily, fewer and fewer do this). Since you have worked a couple if years, you won't really learn anything new, so (1) doesn't matter. So unless (2) affects you, no need to take it. The other Java certs are not really being maintained by oracle, last I checked, couple of months ago, they were stuck at Java 6. 
I took the jpa certification a few years back. Learned a lot, but failed the test. Haven't bothered to re-take it, but the knowledge gained has been useful. 
It depends on your target audience. My experience is that the majority of end users (=without IT knowledge) prefer an out\-of\-the\-box working application so you would be looking at javaFX or similar technology. If the application however is made for people with some working IT knowledge you would be fine with a webapp. In the latter case you can opt for a war\-file they have to deploy in any web server, a jar file with embedded server (e.g. Spring Boot) or any number of runtime environments that have emerged in the last couple of years.
&gt; \- or the host running it - https://img.devrant.com/devrant/rant/r_284300_mZhZT.jpg
How does it compare to JRebel? I've only used YourKit so far and what's annoying me the most is that it doesn't seem to capture error messages for exception stack traces.
What exactly do you mean by framing and contracts, that they don't control? Interfaces?
https://media.giphy.com/media/E7TjVOF3MoRFu/giphy.webp
Use `lsof` and a loop with a 1 second sleep to slowly unlink every file the process has open... 1 by 1. Be careful not to delete any NFS or remotely mounted files
In the comments: &gt;array\[index\+\+\] \+= "x"; &gt; &gt;will read from &gt; &gt;array\[index\+1\] &gt; &gt;and write to &gt; &gt;array\[index\] Yikes! This seems like a huge, gaping hole and not just a bug.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
 Spring framework is just a skeleton version of all the spring components required to build an application,All the configuration required should be done by yourself. On the other hand,Spring boot acts as a container for spring components in which you will get more features than traditional spring framework such as 1. Embedded Server 2. Auto Configuration 3. Health Check 4. Standalone fat jars and much more For more detailed info on it,you gotta check below link,This link explains what spring framework and spring boot really is. [Spring MVC vs Spring Boot](https://www.pureprogrammingtutorials.com/2018/06/spring-mvc-vs-spring-boot.html) For complete spring boot tutorials with full source code,follow below link [Spring Boot Complete Tutorial](https://www.pureprogrammingtutorials.com/p/spring-boot-complete-tutorial.html)
Not sure if that would do anything on linux. The process will still have a file descriptor on the deleted file, and will still be able to use it, right?
I guess he meant something like 'unfortunately it does things that are against specification' cross your fingers :D
Can you somehow cause the CPU to overheat and catch fire?
Correct, unless it tries to close and re-open it. 
It's a process, it won't feel anything no matter what you do. Maybe just stop it and use the remaining time to soak in that the nightmare is finally over and won't be able to hurt you again?
Why don't you open source it? Inflict it on the Linux community.
Kill \-with fire
If it's client side I'd recommend JavaFX. It's pretty easy now to produce stand-alone (unzip and run) types of applications now.
If you want to have a webservices based system so that it could be remotely accessed, but make it usable for the less technical, you could build your application and deliver it as a self-running jar with an embedded application server like Jetty. The application would on startup fire up the application server component and ready the webservices then using the java.awt.Desktop class you can fire up the default browser on the user's machine and point it at the URI of the application. Then the users simply need to run the jar file and the application is up and running as far as they are concerned.
You could start by force closing any/all open process handles or file streams the tomcat engine might have open. If the engine is configured to dynamically reload classes that change, drop some bad classes into the class path of the app server. But honestly, I think that instead of trying to cause pain to an inanimate object, I'd rather just kill the process then go have a few beers with friends. 
When you finally delete the software on disk, write a loop to write over it with random data 2^64 times, then remove the disk and place it next to a large magnet for a few weeks before tossing it in a lake.
Won't work. Processes do not feel pain.
Valid point. My time is better served spending it with friends. Only... Over the course of a few years, the task of maintaining this... thing... has driven me insane. I shall have my revenge!
Savage..!! 
Contact the Hollywood representatives to make a movie based on this idea.
Donate it to the apache foundation and watch it die a slow and agonizing death over many years
It looks like in your [submission](https://www.reddit.com/r/java/comments/8p09xm/why_are_open_sources_in_java_so_popular_in_china/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Do you want OP to get laid off?
&gt; physical pain Did... did the server fall onto you?
Check out [electron] (https://electronjs.org/). Never done anything with it, but it's basically special browser for apps.
I'm not disagreeing really. I'm just saying that the way they play it in the media as 'something positive' is trying to make it look better than it really is. The 'spin' that's being put on this is trying to say 'look we are doing something great'. If you put the spin aside then what is really going is a plain and simple 'look we are dropping this project because it's not worth it to us'. I am not saying that they have an obligation to keep the project going. Or even that they shouldn't put a positive spin on it (what else are you going to do when you are dumping a project like this?). Or that it is wrong to 'donate' projects to the community (you are right a chance for someone else to pick it up is better than nothing). But I just feel compelled to point out that just putting something into open source doesn't magically make it 'viable' in the long term. And all the 'positive' messaging they put around this is really just a bunch of bull.
I agree with the core premise, which is that the database schema should come first. Your data structure defines so much in your application, it should be the first thing created. That being said, I'm never fond of automated code generation outside of some basic things provided by an IDE (like hashCode/equals). I like the look of the DSL structure and I'm interested in learning more, but I'll write it myself thank you very much.
Yeah, Its a non tech app so perhaps I should avoid the web service.
I've always been a fan of printing out the source code and burning it.
While not java this looks interesting. Thanks I will look it over.
Headaches mostly
That's something I will do. Additionally I want to hurt it.
With stranger aeons, even death may die
This is pretty cool :)
Pain is required
&gt; I'm never fond of automated code generation Why?
Too much sugar and we become fat and lazy. 
&gt;I'm never fond of automated code generation outside of some basic things provided by an IDE So I take it you don't use Spring or an ORM...? They do extensive javassist-backed runtime code generation.
This is the thread that the AI will come back to after it becomes self aware to justify its enslavement of humans.
&gt; With document databases, you can avoid lots of unnecessary joins as the whole structure is stored in a single document. Therefore, it will naturally perform faster than a relational model as your data grows. Whaaaaat? Looks at source: blog.couchbase.com. Oh.
When the inner class/interface is tightly coupled with the enclosing class/interface. Good example for this is the java.util.Map and java.util.Map.Entry classes. Builder inner classes is also a good example IMO. I also use private inner classes when the class has no relevance at all to any other classes.
I still see those as writing the code myself with the framework doing a bunch of stuff at runtime. I guess I got the impression from the article that what is being proposed would be like clicking a button and having it generate my soure code in my source files. Which I'm not fond of, I'm very OCD about my code.
Ah you mean source generation specifically. Yeah lombok is about as deep into that as I go.
Only for extremely trivial classes tightly related. Like a POJO that doesn't leave the class. I've never seen much use for it tbh
Yeah. If I misunderstood what the article was talking about there, I apologize.
Thing about code generation is don't overdo it.
When i refer to code generation, I'm thinking of things such as GUI tools that let you drag and drop UI stuff and then generates the source for you. The code is a mess, and you end up 1) not being able to maintain it as well, and 2) not really understanding what's happening under the hood. Even for frameworks like Spring, Hibernate, etc, I think it's very important to understand the low level code behind them. I can do SQL very, very well, I know how Servlets handle routing requests, etc.
Naw you're good it just sounded like you meant more. &gt; but the default way to use jOOQ according to the manual is to start with a (legacy) database schema, reverse engineer that using jOOQ’s code generator to get a bunch of classes representing your tables, and then to write type safe queries against those tables: That's some stupid ass shit tbh
I'll echo the earlier comments about tight coupling. For example, I had a DTO type object that was being serialized into JSON. It had several child objects within it. The child objects were all inner classes. Otherwise, i try to avoid falling into that trap too often, as it creates larger and more unmanageable files. Random side note: In Kotlin, I tend to put a ton of related data classes into single files. They take up so little space that if they're all used for pretty much the same things (such as DTOs), I just put them all in one file.
I use them quite often in Pojo's that get serialised as JSON. So basically your typical REST response DTO. Often these have entry objects inside a response object that don't ever exist without the enclosing project. 
The community won't simply be contributing it, if there's no one left at Oracle to manage the project. The community will have to take it over. Basically, Oracle just discontinued the project but reduced the pain by at least leaving the source for someone else to deal with.
"@Data @AllArgsConstructor @NoArgsConstructor @EqualsAndHashCode" I don't think I should listen to this person.
Yeah same here - there's been little reason to create these because it doesn't matter how many files/packages work projects are, they're delivered through a web application or runnable anyway.
Send it SIGQUITs in a tight loop. That’ll keep the JVM busy dumping stack traces and generating IO as it writes them to the log.
Am I wrong by believing that it's NOT okay to strongly couple model code with DB, NOT okay to let DB schema dictate the design of model, and NOT okay to let detail to dictate abstraction? I feel bad for Uncle Bob.
Anything super tightly related but you wanted some kind of object to simplify things. For example say a cancellable token. You may represent it internally with a private class that has all kinds of meta-data you care about. externally you just return a token or string. 
If JMX is enabled and ports open, connect jvisualvm to it and repeatedly force it to GC. Equivalent of making it tidy it's room. Over and over and over. Or, if you're feeling particularly vindictive (and the debug port is open...which is unlikely) connect a debugger to it and leave it stuck on a breakpoint for a while. The equivalent of JVM purgatory. 
Hum... This one will need a bit of additional work on your side, but provide endless hours of joy. It's inspired in the [myth of Sysyphus](https://en.wikipedia.org/wiki/Sisyphus). 1. Modify Tomcat launch options so it runs with a memory limit of 10 MB of so (-Xmx 10m), maybe less. 2. Write a script that monitors Tomcat so it's relaunched every time it dies. (Bonus: make the script write some pitiful remark like "Please, stop!", "Oh God, not again!" etc. every time it is relaunched.) 3. Watch an agonizing Tomcat die countless times in an infinite loop of despair, OutOfMemoryErrors and pain. Enjoy.
Troll. Noone likes sbt
Lombok is actually worse in this regard if I understand correctly. Lombok changes the bytecode of your already written code. And that's why I dislike lombok, it feels impure. A fully code generation library like this one or Immutables is a lot easier for me to stomach since it just produces new classes to play with, and if you dislike something you can choose to ignore that class with no harmful side effects , since it's not tied to your code unless you want it to be.
Do ppl really allow hibernate create schema? Wow
The DB schema *is* the model in a database-centric approach. Furthermore, the DB schema *is* abstraction with all the details omitted.
While I do agree, there is a problem with the better approach - it requires a set-up database while building the software. Suddenly it's harder to still have a one-click-build procedure because your build needs to locally start an embedded DB, set it up, run migrations on it, and only then you're able to generate jOOQ code. Not impossible, we've actually done this. But it required me to fork and partially rewrite an existing Maven plugin for running an embedded Postgres. Ideally you'd be able to generate the jOOQ code directly from the SQL DDL to avoid having to start, set up and kill the DB during the build process. And that, dear Watson, is still near impossible in 2018 and jOOQ 3.10.
Java is autogenerated machine language. You can't arbitrarily draw lines in the sand; you need to objectively judge which tools are valuable.
Dude...
I sometimes do, when first starting out. Usually this is just at the PoC stage, though. For a production app? I think it is almost always a bad idea there, and I really hope people aren't generally doing that.
He he - 90's insane app dev rules are back again.
When I want to create a fluent builder, I often create that as an inner class since it has no other relevance. In some popular open-source APIs I've seen an abstract outer class with the inner implementations or often a singleton for an empty or invalid object, and I've adopted that technique a few times. There is probably much less need for this in Java 8+, but I'm stuck on 6.
Lots of nested classes are being created if you are developing with Akka framework. Otherwise I don't see a real need to do so.
Everywhere since that how functional was implemented in Java.
&gt;I feel bad for *everyone who has to work with these people.* Fixed that for you. ;)
Or .forEach() 
I have really enjoyed using jooq with code generation. The build creates an embedded H2 database with liquibase and then jooq uses that to generate the code. Only takes a few seconds. I don't think generated code should be checked in to source control.
I wrote something that's a jar file with a Jetty container, and a command using the Java desktop API to open the browser to the homepage when it is started. Add in some logic to check if the server is already running so they don't accidentally double start it, and it works pretty well.
how are you still stuck on Java 6? 
That seems like an interesting way to look at it. Thanks!
Sounds like Hyperion book, that priest who cannot die due to a cruciform parasite on his chest, he gets reborn. He ties himself to a tree that generates electricity. He keeps dying daily in agonising pain that the cruciform causes because it's hurt, as a selfdefence, and keeps ressurecting, on and on, for years. Very much the same!
You will use inner classes if you use the Builder pattern. Also, if you are doing Swing or JavaFX you will frequently use inner classes to implement various listeners. You never *have to* use an inner class, you can always move it out as its own class. But sometimes inner classes are convenient.
As with everything - it depends. It's your application is primarily CRUD then it's inherently coupled with DB and extra layers just add unnecessary complexity. But after some time it might become too complex and then it makes sense to introduce some different abstractions. It depends.
No one says that the model generated by jOOQ has to be the model that your application uses. At some point the data has to get from Java into the database. Regular SQL (i.e. JDBC) is not going to give you type safety. Nor is it going to alert you when your DB schema changes out from under your handwritten queries. By generating the DB model directly from the DB back into Java you get both of the above for free. If data types change or the structure of the DB changes then your generated model will change and your app will fail to compile. You are more than free to add another layer on top of the generated objects that represent your business model and then have some code that translates the business model into the database model - you need this code whether you're autogenerating the DB model or not. The only difference is that if you do it the jOOQ way this code is all Java whereas the other way you use SQL to transform a Java object into a database record.
I see - well that's a different kind of code generation than the one from the article. Yours is a tool to get started with something, but the "source" of the generation is not a "truth", just a very limited alternative representation / mockup of what you're going to do - at least I've never seen a good GUI tool that would be considered the "truth". As far as SQL is concerned, I'm not sure why you think that code generation is a problem here, e.g. in the case of jOOQ (unless you don't like using something like jOOQ)? What about XJC?
Enlighten me, modern person. What do millenials do instead, these days?
Pick n random locations in memory and flip that bit and the r bits on either side, where n and r are the number and radius of pellets in your favorite shotgun shell.
My answer would be control over syntax. If I like the syntax I'd use a code generator Are there any really useful java code generators out there you would recommend?
&gt; Ideally you'd be able to generate the jOOQ code directly from the SQL DDL to avoid having to start, set up and kill the DB during the build process. And that, dear Watson, is still near impossible in 2018 and jOOQ 3.10. There's a lot missing still, from the `DDLDatabase`, indeed. jOOQ 3.11 will have many improvements in the parser, but as soon as you do a lot of vendor-specific stuff, running that on the actual database will always work better. Of course, your help in improving this would be greatly appreciated! What's missing in your opinion?
That is the version we use in our environment. And so far I've been unable to find a good opportunity in a more modern environment.
The article didn't really imply that. It only says that the client logic interacting with the database shouldn't have its own model of the data, it should operate directly on the relational model. You will still encapsulate that part of your client logic in some sort of data access layer and hide the database from other layers / parts of the system.
There wasn't a single attack against hibernate in the article
The only time I do it is during automated testing with an in-memory database. Everything else is set to verify the schema, but not to touch it. Flyway does schema updates. With Spring boot, it's really easy to have a separate user for flyway and hibernate, so the hibernate user doesn't have any DDL permissions, and the flyway user can have all their write permissions revoked until a deployment needs them. 
Code generation is amazing, it produces reproducible code. You only need to debug it once and it can be incorporated in your DevOps efforts. It saves time and nerves. I really don't understand whats not to like about it.....
What I've done is set up a module in my project that is responsible for my DB schema migration (flyway scripts). I have maven build that module, start a docker container with my DB in it (in this case, postgres) and then have the jooq maven plugin run against that database to do it's code generation step. I can use that module and all its strongly typed goodies to write queries etc. 
Because at least in the ways I've seen it used it creates spaghetti code. It leads to not understanding how things work under the hood and makes maintenance on that code more difficult. I'm all in favor of libraries and frameworks abstracting away parts of our codebase so we have less boilerplate, but I'm not ok with being lazy and just letting other tools generate our source code for us, especially since it will create more maintenance issues down the road.
Actually, donate it multiple times with slight variations of names like zing, zink, zolar plex and zadgog.
&gt; except blazing fast start up time That seems somewhat different from other solutions?
We use JOOQ in production. It basically abstracts away your entire model layer, however adds lots of complexity, especially when trying to upgrade to newer JOOQ versions, where you have to apply API changes.
I used to let Doctrine manage my database schema all the time. I have since smartened up, but yeah I did do that. It certainly did a better job at it than me back then too. 
I'm very curious about this. &gt; It basically abstracts away your entire model layer How does jOOQ abstract away your model layer? Perhaps you chose to use jOOQ this way (i.e. by sending records all the way to the UI)? But jOOQ doesn't enforce this design... &gt; adds lots of complexity, especially when trying to upgrade to newer JOOQ versions, where you have to apply API changes. Could you give an example?
There's so much potential in this!
&gt; I should probably blog about this Yes! 
Logical Model first. Physical models then follow from this. Using one physical model to dictate the design of another is just wrong.
leave it running but block off all ports, have server sitting in back over server room with some red tape on front with as a sign saying "CRITICAL: DO NOT REMOVE". Come back to work in 15 years and see a bunch of new employees afraid to touch it yet not knowing what its for.
I've used it for a few years now and haven't ever had any issues when upgrading. 
Well, here's a gist with the pom of that module... the flyway scripts go under `src/main/resources/db/migration` (standard spot) and I have a `PostgresJsonBinder` class in there - but other than that there is no code in this project... `mvn clean package` will do what it needs to do (fire up the db etc) I scrubbed the pom a little bit - there is a parent pom that has this as one module and the main app that works with the db / uses the generated code in another module. When doing development I only rebuild this module when the db stuff changes... On our CD server (jenkins) it gets built every build. 
Sure you can. The line is that when the code generation is fully automated and nobody by the compiler maintainers ever have to touch it, it's fine, but when humans become responsible for maintaining generated code, it's a problem.
Wow, so much confusion in the replies to this comment. Seems like a lot of people don't realize what a big difference there is between code that's generated once and and then needs to be maintained, and code that's generated as part of a build process and never needs to be maintained.
It looks like in your [submission](https://www.reddit.com/r/java/comments/8p3hxq/highwheelmodules_bytecode_based_architecture/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yeah. I may not have been clear enough in my initial statement. I'm fine with "magic" in the build process, to some extent. Or libraries and frameworks that reduce boilerplate by providing it pre built for you. But I am vehemently opposed to anything (with few exceptions) that generates my own source code that I then need to maintain.
Sure the community will need to take it over completely as Oracle isn't going pay someone to manage it.
I find this fascinating.. as someone who preaches API first using RAML (or OpenAPI if forced to go this painful route), I find it better to design the models that essentially mimic (more or less) the DB table design in a way that allows you to use the generated code for DTOs and DAOs. For example, and this is tied to Java but should work in some manner with most languages... We define a JSON Schema (or if you are lucky enough to use RAML 1, a RAML Type.. so much nicer than json schema) that models the data we plan to work with. The generator creates a simple java pojo. That pojo is used in the jaxrs resource layer to auto-convert incoming json payloads to java objects. By using the same pojo as the underlying entity bean model and method delegation from entity methods to the pojo methods, we can pass the incoming pojo from the resource layer directly to the service layer where it is wrapped by an entity bean and can be stored/retrieved from db. In this way, we are able to design the API and models, and reuse those models as the underlying DB structure. Now.. we ALSO use Flyway scripts.. though we currently hand craft those to match the json schema/raml type pojo generated type used by the entity bean. It wouldnt be hard to generate flyway scripts (at least for creating a db with) with some form of json schema to flyway generator. If we were to do everything db first, we may still be able to model the json schema correctly so that may still work. I typically find that as an API first design you determine the data structures you need from the API design though. Thoughts?
makes sense
dafuq happened Ow, that picture hurts me in what's left of my soul. I don't have much hope left, but what there is, hopes that the photo is shopped.
Only because they use Lombok?
That sounds like you're really just persisting your hierarchical JSON data structures, and you could've just as well done that in a key value store rather than an RDBMS, right? This would imply you have no need for normalisation, data integrity or any other feature offered by an RDBMS. Or am I missing something?
&gt; I don't think generated code should be checked in to source control. Why not?
Getting 500s at the link. Is this due to Truffle?
Odd...I am too now. It was just up a few minutes ago.
Well.. you could say that yes.. but.. at least with RAML 1 Types you can inherit from other types, as well as reference other types.. so with a little bit of manual work (though it too could potentially be auto-generated) you can set up one to one, one to many, many to one etc relationships in the entity beans that use the underlying generated pojos. We do this now and it works well. Essentially we set up those relationships in flyway, and mimic those on the entity beans so it all deploys nicely when we start the jee application. A lot of it, if not all of it could eventually be auto-generated.. it just takes someone to write the generator code that does it all. I have yet to see anyone that has stepped up to do that. :D 
It makes sense, but they should really block this on GraalVM becoming production ready.
Professionally programming since 1989... I’ll bite: you should develop top down. Interactive experience first. Choose a persistence technology at the last responsible moment before the cost of implementation goes up exponentially. Hedge as long as you can for good economic reasons.
You define your model via database (e.g. schema via Flyway) and JOOQ then generates Java interfaces for you. Really neat because you don't have to maintain Java pojos next to your schema - all is generated on compile-time. Regarding the upgrading: we noticed that with the 3.10 release. Probably our own fault since we use JOOQ all over the place (even unit tests)
Just curious how many people actually use Nashorn (or even Rhino)? And how many projects can be affected by this JEP?
I think it's the right move but It's a bit sad it they're deprecating something that was added as late as JDK8
Sorry to say, but there's a bigerg one already: https://discord.gg/hVtnwGd 644 online, 2,671 total members.
The answer will inevitably be: "More than you realize and more than we should feel comfortable with"
I work on a project that would utterly fail if not for nashorn. It’s not the best JS Engine, but it works well at allowing my Java code to execute JavaScript. I would argue that removing features is generally not a good practice. Not saying there aren’t exceptions (looking at you Active X) only that I don’t think this is one. To say JS changes too often is not an argument against support, but should be “how can we improve the support to accommodate these changes?” JavaScript exists everywhere, and can run almost anywhere, all a user really needs is a browser. If Java can find a way to support this, we all win.
Well, it existed earlier in Rhino, Nashorn was a suped up version of it.
That’s rough. 😳
Based on my experience, what's valuable is the knowledge you gain while studying it, as none of the companies will offer you any extra benefit or anything once the see that you have them, at most it will capture the recruiters attention. Of course, if you can do it, simply do it.
Upload it’s code to the desolate wasteland that is SourceForge 
They sure are deprecating and removing things fast these days.
Yep! Just saw another.
Some IDEs are really fickle with Lombok, so I wouldn't be surprised if they did this to remove errors or what not. Also, spring-data-couchbase does a ton of annotation processing, there could be an issue there, which processing comes first etc (maybe redundant annotations trigger explicit ordering, or first-processing). It's also a tutorial, I can't fault them for wanting clarity, to show people unfamiliar with Lombok a clue as to what the annotations are doing behind the scene instead of just @Data, which would leave a non-Lombok user scratching their head. I've gotta be honest, I've made comments like this as well in the past, but I think our community is much better off not outright assuming people are idiots simply because you don't understand, or something looks ostensibly odd.
* In my experience it's inevitable that someone will start manually changing the generated code if they can. Then the gates of hell open when you have to regenerate it again. * It forces you to make code generation part of the build process which means it's automatic. * It clutters up the source code history. * Probably more I can't think of. Every time I've committed generated code I've regretted it. It's soo tempting though.
Soon to be known as Apache Nashorn.
Just anecdotal evidence...but I do.
What is replacing it? It doesn't say.
&gt; GraalJS using Oracle Labs' Truffle technology may soon be publicly available as a Java module. It is understood that GraalJS provides most of the same functionality as Nashorn along with better performance.
It looks like in your [submission](https://www.reddit.com/r/java/comments/8p4lod/is_there_a_way_for_generate_a_random_number_in/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
What? Nooo! Nashorn is a major part of my project... I was really hoping for JS class support. Does anyone have a guide for migrating to GraalJS?
Sry, delete this post, i'm going to helpjava
may soon be public?
Wait, what? Surely it's better to define your models/relationships in code first and then auto-generate the database schema?
The Pack200 one?
Yep. OpenJDK tweeted about it.
Nice, I like the docker approach, much more flexible than maintaining / abusing embedded postgres libraries and plugins like we do. Otherwise our POM is the same, so I'll think about replicating your approach instead.
Yeah, it’ll be interesting. I’m curious when it will be removed. 12 maybe?
I sure did report some issues ([#7074](https://github.com/jOOQ/jOOQ/issues/7074)), then there were some that already had tickets... I'll try again when 3.11 hits the fan. In the meantime, keep rocking!
it probably will be when java 11 is released. i'm already using it in production
it does have a way to support it. graalvm.
nah, graal is the replacement. not much need for nashorn when graal serves the same purpose
As someone who has had to re-write most of the Java for a legacy application due to Java-first, Hibernate auto generated DDL, I agree whole heartedly. Was a 140-table eager fetch nightmare that somehow no one envisioned a problem with at the outset.
Indeed it makes sense, but really strange to remove it so quickly 
EqualsAndHashCode and data is redundant
Lol yeah fair that was kind of negative and pedantic, but at least you knew why I said it
Out of interest, how are you using it? 
Kind of a batch job system for automation tasks. A lot of ansible/terraform like jobs. It's very handy to edit JS scripts and run them right away without having to deploy a new java app. Also lower barrier to entry for other developers/qa to get involved. The advantage of Java integration is that I can write powerful API's in Java for the scripts to use, and customize the runtime environment.
/r/learnjava or /r/javahelp 
Same here. Was looking for this use in comments. 
Tightly coupled things: * Builders * Keys or values for an internal map * Once or twice to represent state. I.e. you have an interface, then internal classes StateA and StateB which implement the interface, and then StateA has a method which gives you a StateB version.
We do something very similar using Groovy. Been using it for years and it’s been rock solid. Something to consider.
That is true.
I do enjoy using Groovy with Jenkins. Maybe I should have used Groovy instead of JS, but it's hard to change now. I really thought Nashorn was in it for the long haul, that's one reason I went with it.
The other guy that commented on it had a good point it was probably for clarification purposes. Most people that don't use lombok aren't gonna know all that @Data does. For a tutorial I'd probably mark requiredargsconstructor and equalsandhashcode as well. It just didn't occur to me until he said it 
This is an interesting opinion. I don't disagree, but I would LOVE some elaboration.
Further to that Graal supports calling Java from js too.
https://paulhammant.com/2014/05/10/developer-delayed-development/ and https://paulhammant.com/2013/09/19/delaying-non-functional-stories/
I use the built-in JavaScript (javax.script and jjs) for in-app scripting and as a cross-platform *.sh replacement. I only hope the new engine will be included out of the box like Nashorn :)
Yeap... Works really nice with Builders. Interface: https://github.com/Azure/azure-functions-java-library/commit/ef12343d4cbd00be38ef6028083f344a02c72511 Implementation: https://github.com/Azure/azure-functions-java-worker/commit/1526587a8b0340acc2a83733480d7f928f8bf231
While I don't love this feature, I certainly do not have such a strong hate as yourself. However, you mentioned that \&gt; Sure it'll be fine in a lot of projects particularly bigger ones I think the var keyword benefits much more small and throwaway programs, specially those that you won't have to look at the code afterwards
Oh I meant big as in the contributor base not the size of the codebase. For small projects it makes sense for the same reasons js does
[removed]
There are pre-configured servers for Java, too, which you can deploy to with minimal amount of code: Spring boot, or something like Payara if you fancy Java EE. It does get more complex if you want to understand the whole stack, and build complex solutions -- the same is true for any language and platform.
What does it get you?
I would go with Spring Boot.
Do you know of a good MOOC?
As does Rhino, and probably Nashhorn.
JavaEE or now JakartaEE or former J2EE is a set of standardized APIs. As with many APIs there exist implementations for it. * Glassfish is the reference implementation * Payara is Glassfish with support option * RedHat Wildfly * Oracle WebLogic * IBM WebSphere are some of the possible implementations you can choose. All these servers support ship the API and provide a working implementation of that API (as putting a bunch of jars together and get it working is not that easy). Spring uses some of the APIs and uses them as a base to derive from. 
It already has better js support than Nashorn ever did though. It can run almost any node.js app OOTB and fully implements es2017. More production ready than Nashorn imo.
Spring Boot is a simplified starter kit which configures a lot of Spring stuff for you with sensible defaults. This makes it seem like magic, but gives it a great "out-of-the-box" experience. Spring and Java/Jakarta EE share a lot of libraries. For instance, you can use JPA, JAX-RS, JAX-WS, Bean Validation, etc in Spring as well as in vanilla Jakarta EE applications. I like Spring Boot better because I don't need a dedicated application server to run my application. A Spring Boot application starts its own embedded server (such as Tomcat, Undertow, Jetty) so you don't have to do anything manually other than just "java -jar myApp.jar"
Can you recommend a course for a total beginner? I basically just want to get to a point where I feel competent enough to apply to positions that use it. (My general Java knowledge is quite good.)
No, I just read through the internet to start. Most of the times all providers provide an instruction manual. You might search for something like Spring Boot Rest Service and follow the instructions
all. the. time. In all seriousness, whenever I need the functionality of a class that will never "escape" the class I'm in, I got for an inner class. Same deal with an interface. Alternatively, if I have an interface that is tightly coupled with the use of one and only one class, I might make that an inner interface of that class, but a public one. Realistically this happens quite often.
Sounds like you implemented your own database, then. Is there no off-the-shelf product that implements the entire database behind a REST API? [Cough, cough, Oracle](http://www.oracle.com/technetwork/developer-tools/rest-data-services/overview/index.html)
The article doesn't disagree with this. It didn't claim that the database goes first for the *system*. It claimed that it goes first for the *subsystem* that it's a part of. This includes all of its clients' data access layers, which should copy the relational model, not roll their own model. What higher-up layers are doing is irrelevant in this discussion (and no, they're unlikely to also depend on some relational model of a different subsystem / layer).
&gt; You define your model via database (e.g. schema via Flyway) and JOOQ then generates Java interfaces for you. Really neat because you don't have to maintain Java pojos next to your schema - all is generated on compile-time. I see, but this isn't really abstracting your *model*, though, because the generated logic represents the database model in a 1:1 fashion. It just abstracts the jOOQ *API*. &gt; Regarding the upgrading: we noticed that with the 3.10 release. Probably our own fault since we use JOOQ all over the place (even unit tests) I'd really be very curious about the specific upgrade problems. There might have been mistakes that can possibly be avoided in the future.
&gt; In my experience it's inevitable that someone will start manually changing the generated code if they can. Then the gates of hell open when you have to regenerate it again. At least, you'll know who it was, because source control :) &gt; It forces you to make code generation part of the build process which means it's automatic. I'm not sure if I understand. *Not* checking in generated sources will force you to make the code generation part of the build process. Checking in the generated sources will leave you with both options: Manual and automatic. &gt; It clutters up the source code history. Why? Git hashes are cheap. You could have a separate module where generated sources go to, so you might be able to separate the history. Also, there's value in knowing when something has changed, even in generated source code... &gt; Every time I've committed generated code I've regretted it. It's soo tempting though. The inverse is true for me. Every time I've *not* committed generated code, I've regretted it. Example XSD/XJC/JAXB code (within jOOQ), which is part of the public API for - Settings - InformationSchema - Configuration (code generator) When checking in generated sources: - Everyone can see those sources (which are part of the public API) on GitHub. You don't have to build them first. - Changes to the sources (e.g. due to XSD changes, but also due to XJC upgrades, or modified generator configs) are immediately visible. They don't have to be imagined from a simple `pom.xml` change - The build is faster, because re-generation can be controlled manually, rather than doing it every time. &gt; Edit: All that said I've technically written a code generator where you are supposed to commit the results, but it's kind of a special case. That seems to be a different kind of code generator, more of a "bootstrapper". Unlike what's being discussed in the article, it doesn't base its output on a single source of "truth". The source for the code generator becomes irrelevant once the code is generated, because again, its only purpose is to bootstrap some logic.
Oh, it's you - hello! :) And thanks for submitting so many issues. Those really helped prioritise stuff. Again, I'm aware that the parser is still in its early stages. It takes a lot of time and work to get right. But I believe that it's a very good driver for work in jOOQ in general. For instance, the https://www.jooq.org/translate website (using the parser behind the scenes) helps discover what kind of vendor-specific functionality is being used in real world SQL, so that can be prioritised to be added to the jOOQ DSL API (and then also to the parser). So, thanks again for helping improve this!
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Hello, I am not sure how to interpret your benchmark. By the looks of it java 10 is overall faster than both graalvm? and Graalv java starts up extremely slowly the first time? but faster the rest? 
The possibility to mix languages (in my case java using R, python and js libraries) sounds awesome. Is there a tutorial on that and how to integrate graal in an existing project?
I guess with Graalvm things was changed. 
I don't know of a course, but go to Adam Bien's channel on YouTube. He has a few beginner videos like: * [Java EE 8 Kickstarter -- The Simplest Possible Project](https://www.youtube.com/watch?v=89htW1ToTVs) * [How To Tackle JavaEE](https://www.youtube.com/watch?v=JWcoiXNoKxk) * [Using Java EE 8 Dependency Injection in Java SE](https://www.youtube.com/watch?v=lyuU24ZFlY4) * [Java EE 8 with JAX-RS 2.1: Async Resource with RX Client](https://www.youtube.com/watch?v=IcM903F8-X4) * [JSON-B with JAX-RS and Java EE 8](https://www.youtube.com/watch?v=XDi3UYwauFI) You can also ask him questions on a monthly basis on his Gist on GitHub which he answers in videos.
#### [Java EE 8 Kickstarter -- The Simplest Possible Project](https://www.youtube.com/watch?v=89htW1ToTVs) ##### 1,968 views &amp;nbsp;👍48 👎0 *** Description: In this screencast I create a simplest possible Java EE 8 project (Thin WAR, 3.5kB), build it with Maven and run it with docker ...under 2 mins.Any qu... *Adam Bien, Published on Oct 8, 2017* *** ^(Beep Boop. I'm a bot! This content was auto-generated to provide Youtube details.) | [Opt Out](http://np.reddit.com/r/YTubeInfoBot/wiki/index) | [More Info](http://np.reddit.com/r/YTubeInfoBot/)
Very bad news. And sadly they don't explain clearly why. I found nashorn (and rhino before that) very useful in my daily job.
sounds like a very neat solution. I agree they should not deprecate it !!!
oh yes sure... and forgive the sarcasm ... but performs better based on which evidence ? their marketing campaign
It looks like in your [submission](https://www.reddit.com/r/java/comments/8p8y3m/become_a_java_ninja/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
There's a blogpost about [how to use R packages from a Spring boot app](https://medium.com/graalvm/enhance-your-java-spring-application-with-r-data-science-b669a8c28bea), there are also some examples in the [docs](http://www.graalvm.org/docs/reference-manual/polyglot/). Hope it helps a bit. 
&gt; A Spring Boot application starts its own embedded server (such as Tomcat, Undertow, Jetty) so you don't have to do anything manually other than just "java -jar myApp.jar" WildFly Swarm and Payara Micro do the same thing ;)
Our project uses Rhino. One dev is about two weeks in to swapping it out for Nashorn. He didn't seem too impressed when i showed him this!
&gt;I'm not sure if I understand. Not checking in generated sources will force you to make the code generation part of the build process. Checking in the generated sources will leave you with both options: Manual and automatic. I mean, if generated code is checked in you have the option for it to only be a manual process. If it's not checked in you're forced to make it automatic, or else your life will really be miserable. I agree, your examples make sense. Can you share the github project?
It looks like in your [submission](https://www.reddit.com/r/java/comments/8p9dsd/maven_pomgroovy_build/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Application should be written without any thought with how it will be accessed or how information will be persisted. The application should be able to support being 100&amp;#37; tested without any web framework or UI being present or any persistence framework. Indeed, these frameworks should not be allowed to pollute the domain model/service models at all. If this is done, then differing persistence repositories can be plugged in later. Good architecture is being able to push these decisions later in the project.
Eager fetch? The stuff of nightmares!
&gt; I mean, if generated code is checked in you have the option for it to only be a manual process. If it's not checked in you're forced to make it automatic, or else your life will really be miserable. You can check in generated sources in automated processes, too. What keeps you from automating a couple of git commands right after the code generation? &gt; I agree, your examples make sense. Can you share the github project? https://github.com/jOOQ/jOOQ But the XJC project isn't open source
Isn't "Thanks to them building REST APIs becomes easier and faster than ever" a reason ? I mean it's pretty straightforward why microframeworks can be useful. There are microframeworks in every languages, some gained huuge popularity like Sinatra in Ruby or Flask with Python.
Maybe you only wrote code for big corps &amp; compagnies ? What about building an MVP or a Proof of Concept ? Mature frameworks are great for big projects will a team behind it, but for a quick project, where the time to market is crucial, I think the micro framework thing fills a gap. I think you are wrong about these framework being hacky thing designed only for a conferences. It may not be the case yet for Java, but lots of microframeworks gained a huge popularity in other languages, like Flask in Python / Express with NodeJS.
&gt; With the rapid pace at which ECMAScript language constructs, along with APIs, are adapted and modified, we have found Nashorn challenging to maintain. Cost/benefit ratio not good enough for the maintainer. Seems reasonable, especially given the new alternative: &gt; GraalJS using Oracle Labs' Truffle technology may soon be publicly available as a Java module. It is understood that GraalJS provides most of the same functionality as Nashorn along with better performance. What's missing as an explanation?
You could also deploy Java files and compile them on the fly using `javax.tools.JavaCompiler`. You'll get better integration with Java, IDE support while developing, and it's not too hard: https://blog.jooq.org/2018/04/03/how-to-compile-a-class-at-runtime-with-java-8-and-9/
For the reference: https://twitter.com/OpenJDK/status/1004466679395438592
Two questions. 1) Does this check to make sure the suggested alias doesn't already exist? 2) Why Java?
Maybe Oracle should just add an official JNI bridge to NodeJS or V8 as a Java module. I was looking at doing some Java server side rendering with ReactJS and using the latest JS features and best bet was really to call NodeJS as a service (i used a webservice but JNI would’ve been faster). 
Gettin' *real* tired of the jettisoning of features that my products use actively. Yes, I get that they want us to use modularization and jlink-generated runtime images. How about doing it by actually making the feature good, rather than at gunpoint?
I try to avoid inner classes and write (static) nested classes only if possible. Those, I'm using all the time: - For some additional namespacing - To keep things together - To keep things local
Nice tool! Btw, instead of running your tool via java -jar $BAG_HOME/bag-1.0-SNAPSHOT.jar you could build a native image out of it. Download **GraalVM CE** from http://www.graalvm.org/downloads/ extract the tarball and run graalvm-ce-1.0.0-rc2/bin/native-image -jar build/libs/bag-1.0-SNAPSHOT.jar -H:Name=bag This will generate a native executable that does not depend on Java anymore. ./bag usage: bag [-c &lt;index&gt; [-a &lt;alternative alias name&gt;]] -a,--alternative &lt;alias name&gt; create an alias with an alternative name -c,--create &lt;index&gt; create an alias with the suggested name -h,--help print usage -l,--print-all print a list of all suggested aliases -p print a list of suggested aliases bag version 1.0 by Stav Shamir (disclaimer: I'm a member of the graalvm team)
1) It does 2) I'm comfortable in both Java and Python, so these were my two choices. I chose Java because I now work mainly with Python so I wanted to keep my Java skills sharp.
I had to go to the project lead with a page-long report about the catastrophic failure that was on the horizon in medium-to-large data sets because of eager fetch. Basically demonstrated that for the aforementioned application, to pull 250 entities (basically to load a single tool in the app) we were requesting about 6 million rows of data. Every. Single. Time.
Thanks! Sounds like a good idea, I'll look into it!
https://www.udemy.com/spring-framework-5-beginner-to-guru/
While I'm personally in favor of this model, it introduces a dependency on having the java compiler be accessible to your application at run time which may have impacts on bundling a runtime with your deployment. Some shops also have security rules against javac being on the production machines as well, which was why in one of my previous projects we changed our build processes to pre-generate/compile our JSP pages. Just something to consider.
You can test it. I've been testing graalvm with some code, and it brings some pretty significant performance enhancements to my java code. The benchmarks from earlier with it running ruby vs jruby were significantly improved too. but why take my word for it. the documentation to run JS with it is freely available, and the graal ce version is generally available. Please, compare it to nashorn and justify your cynicism!
Continue on with Chad Darbys course. He only copies the jars as an intro. He later gets into Spring boot. I'm currently working at a company that uses spring and I used Chad's course as my main learning resource.
It absolutely does, however you can disable this if needed.
one of my former companies used it as an argument to charge their clients more if developer was certified, so we all got certified. Did it help me as a programmer? I would say very little. 
What do you use Pack200 for?
https://www.jetbrains.com/idea/
I crush down my non-modular distributables 11:1 with Pack200 before distribution. I used JNLP very successfully until that was jettisoned. Now I fit them in a set of AppImage/MSI/DMG packages with an appropriate runtime for each, and a per-platform scheme for unpacking and doing desktop integration. They're *big* apps; Pack200 is saving me hundreds of mb per user per deployment.
The compiler is currently part of the JDK. So is (soon was) Nashorn. It's the same risk - although I do think that the compiler won't be removed from the JDK very soon ;-) But I agree with the security rules... Although, no I don't. Allowing to run scripts seems as dangerous as allowing to run Java source code... So, with respect to this sub-discussion, how would you do it? Write your own interpreted mini language?
[http://www.graalvm.org/docs/examples/polyglot\-javascript\-java\-r/](http://www.graalvm.org/docs/examples/polyglot-javascript-java-r/)
Nice solution. Btw, since you are using *--static* you should not need FROM alpine in your Dockerfile. Instead FROM scratch should be enough. The executable that gets built by *native-image --static* does not depend on a C library.
Doesn't [javapackager](https://docs.oracle.com/javase/9/tools/javapackager.htm#JSWOR719) do the same thing? 
&gt; 2) Why Java? Why not Java? 