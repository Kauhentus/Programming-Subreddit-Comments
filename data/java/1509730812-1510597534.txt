I was really surprised they put this out so early. It looks like currently the only updates are the removal of deprecated JDK features and a few other things, but local variable type inference isn't in yet.
All you have to do is to add the release repository to the *Available Software Sites* and then check for updates: http://download.eclipse.org/releases/photon/
It can mean though. If you're familiar with the Reducer pattern of Redux: application state is one big object graph. Instead of mutating sub state you deep copy the entire object graph even if only one value is changed. 
Pretty sure the release site is already added, it's just empty atm. But all you need to do is wait and update. Can't fact check that atm tho as I'm on the move
Pretty sure all the necessary update sites are already there these days and you just need to wait and update. Can't fact check that atm tho as am on the move
Since this is help with *Java programming* it should be, as the *plenty hints* on the side indicate, posted in **/r/javahelp**. Had you bothered looking at the documentation of either, you'd see that both methods have very little in common. `.charAt` returns the `char` at the given index. `.substring` returns a `String` that can consist of one or more characters. **Post removed**
Because I and others opposed that monstrosity on the mailing list.
&gt; I really like java but looks like I'll have to forget it for 2 years bc my uni dosent use it, is it worth following the changes or just not bother? Don't worry, Java won't change much in 2 years, anyway.
It updates automatically through all the milestones. I had m2 and just today it updated to m3. You can manually check for new updates, or if you wait somewhat longer it’ll tell you new updates are there. With Oxygen I updated this way from m1 all the way to final.
You’re right, they are all there already. Maybe he means when you go from Oxygen final to Photon milestone.
&gt; JVM languages that aren't Java aren't objectively better overall. Except Kotlin, which was designed to be pretty much a better Java and not much beyond that.
Thank you so much! You did a great job!
lol. now you're being silly. yes, java desktop is dead.goodbye.
Wat?!?
Local variable type inference worked for me. Although I had to use good ol’ Emacs.
Your username makes this not at all objective. Plz go
Where I live there are approximately 50 good Java job positions for 1 decent (and publicly available) resume. And that resume is only available because it has 25-33% higher salary expectation when matching job positions (which already are the highest paying mass-market jobs).
If you're already running Photon, the update site is already registered. If you're running Oxygen or earlier, you need to add it manually.
Gotta love the "modern" look from 10 years ago xD Great release none the less!
Awesome! Did they forget to add it to the feature list?
this is the best answer.
Do we have any idea of what's planned to go in? I heard rumors of string interpolation a while back, and if we get that and the JSON api I would be so happy.
See [here](http://openjdk.java.net/projects/jdk/10/).
Not that I know of.
They're planning on releasing in March? With this handful of features? Are they going rapid release cycles now or is this because of the JDK9 delay?
Have you not heard? They’re not going to have a time-based release cycle. A new release will come out every six months. One in March, and one in September.
I had not heard! Thank you for the info. 
You’re welcome!
Why do you want a Json api? Java already has a ton of really good and free open source Json libraries. Jackson, Gson, and Moshi. Why add yet another one?
its not listed in the release notes gor the download is what I meant
Depending on the approach they take, it could become even better. For example, you have to use a thread pool if you want high performance and low resource usage, but then you run into issues with blocking and concurrency. You could dive into another 3rd party library, but then everything you use must be aware of the existence of that library. If it is baked into the language, however, you can get it for free. Any blocking and waiting could free up the thread and let a different fiber run. This would be great in the case of things like DB drivers or network communication. Where you don't want to spawn off 100 threads but you might want to do 100 things concurrently.
Yeah, I’m not sure.
It's listed [here](http://openjdk.java.net/projects/jdk/10/).
Add a standard API that all the libraries (implementations) must comply to to stay relevant. Similar to how the JDK 9 Flow interface does / will unify all reactive stream implementations. In my view it doesn't necessarily belong into the JDK itself though.
There are a few pieces that are really exciting compared to what we do today. Most apps that I've worked on have been IO bound. Which usually means that they spend a bunch of time just waiting on devices somewhere else. To make things go fast, you want to do as much as possible concurrently. You could do that by spinning up a thread per task, but that is fairly slow. Threads require a bunch of OS communication and have pretty high allocation costs. To save on that, it is often the case that instead you'll use a thread pool. These reuse threads to run tasks to avoid that initial allocation cost. The problem with these pools, however, is whenever something does a synchronous request, that's it for the thread. It has to sit around waiting for everything to come back. Get enough of those requests going on, and you're pool will basically sit around doing nothing. You could increase the pool size, but again, threads are pretty heavy. Further problems arise when you create tasks that wait on other tasks. You can get into a scenario where your pool locks up because it is just a bunch of tasks waiting on other tasks. Forkjoin pools mitigate that problem somewhat, but it is still possible to lock them up or to make them explode with threads. Fibers, on the other hand, solve those problems nicely. You can quickly spin up a fiber per task without any OS communication. They don't have to take up a ton of memory space, which is also pretty nice. You could have 1 thread per core on the box which are capable of running millions of fibers. And, depending on how they integrate them, if a fiber hits a point where it is doing IO or some blocking task, then the thread waiting on that fiber can shelve it, and then go work on another fiber that is ready to do work. So you get high concurrency with low resource utilization. Really, the biggest downside to fibers is they often introduce more overhead around waits. This was a deal breaker for fibers in rust but may not be in java. The concurrency model of go is basically fibers + message passing.
All the stuff I work on is database and network IO and I think this would have a pretty positive impact to the size of the systems I need to handle my stuff. Assuming a fiber could yield the thread when you hit wait, it would mean you could, for example, service everything in the same thread pool. You wouldn't have to worry about using .parallel() bringing the system to a screeching halt because one of the map steps included DB access. You also wouldn't have to worry about pushing in managed blockers or the possibility of those blockers running wild with thread spawning.
Traditional redux I don't think you deep copy it, more like shallow copy references into a new structure and slice in new state which would make it unsafe to share state. Redux works based on a **pinky swear** I copied it properly and am not an idiot... Using something like immutablejs at least enforces doing things safely to some degree. 
Yeah, I saw it on that page but for some reason it isn't listed on the oracle website download page at http://jdk.java.net/10/release-notes
String interpolation? Where did you heard about this?
Here...at some point. Or a fever dream, because I can't find any reference to it. Can we just ignore everything I said today?
Maybe it only lands in the release notes when it's done completely.
Well yes if you're on an earlier version, but it seems they were asking about the milestones for photon
Can we at least get silly code names for releases like Ubuntu does?
Pumpkin Spice Latte
Goetz said it is completely done, so I’m not sure why it isn’t listed.
They could totally use coffee and espresso puns for a few years!
Definitely 😂 Suggest it in the mailing list.
Thing is, the way the new release train is supposed to work is that features are only merged into the main branch once they *are* complete. I think. That's the whole idea behind not holding the release up with incomplete features. It can't happen because incomplete features are never merged in to begin with and so they can just safely send the train out with whatever's already on board. I mean that's the gist of it anyway, I'm sure they still have a whole rampdown/release candidate/whatever lifecycle running up to the release date.
Do yourself a favour and spend a few weekends with JavaFX before suggesting we go back to the 90's with C++.
&lt;sigh&gt; I hate var. I'd hoped they wouldn't waste time on these stupid things. 
They’re not necessarily stupid. People complaining about boilerplate, and they’re continuing to address those concerns.
With all due respect you don't know how this works. How any of this works. I could try to start to dig into at least 5 absurdly false statements in your post, but I got nether the crayons, nor patience to do that. Couple of starting hints: There is this thing called interfaces. For a reason. OS is pretty good at making sure that blocking IO doesn't grind things to a halt (well, unless you try to run production systems in docker). Per thread caches are important. Lookup netty, mina and the like projects. If your DB connection pools are to stand to benefit from this you are already in the "doing something so outrageously stupid that it node.js to look at it" territory. I'm scared that introducing these "friendly" abstractions will mean more of thumb sucking javascript crowd saying "Yay, we can apply our patterns here, we just need _that one more feature_". It's bad, sad, stupid and should not be allowed to happen.
I don't see the problem with partial classes and structs. Having said that ignoring the fact that Java has its own set of flaws the truth is that the flaws in C# are not the reason why C# will not "overtake" Java. Please, people are not using Java over C# because of partial classes or some other shit you don't like about it.
&gt; I could try to start to dig into at least 5 absurdly false statements in your post, but I got nether the crayons, nor patience to do that. Yeah, and fuck you too. &gt; There is this thing called interfaces. What does that have to do with anything &gt; OS is pretty good at making sure that blocking IO doesn't grind things to a halt When did I say that IO ground things to a halt? What I am saying is that the current situation of spawning a new thread whenever you want to do concurrent IO is untenable. Threads are expensive, and if you want, I can pull out the crayons to show you [everything that java must do to make a new thread](https://stackoverflow.com/a/5483105/967787). Avoiding talking to the OS, the memory overhead, and stack zeroing is important. However, using something like a threadpool will still was resources with a thread waiting on IO. It doesn't matter that the OS is good at not talking to the thread while it is waiting for communication, the JVM can't use the memory that the thread has claimed. Fibers can solve that problem. &gt; Per thread caches are important. Now who is talking nonsense? What does that even mean? Are you referring to CPU cache on context switch, because [most cpus are oblivious to context switching](https://cs.stackexchange.com/questions/1088/what-happens-to-the-cache-contents-on-a-context-switch/1090#1090). Fibers won't have any better or worse cache locality problems. &gt; Lookup netty, mina and the like projects. If your DB connection pools are to stand to benefit from this you are already in the "doing something so outrageously stupid that it node.js to look at it" territory. The JDBC standard is already outrageously stupid, and most DB drivers work from that. You can't issue a bunch of requests to the DB on one connection or one thread, and that is a problem. Netty and mina solve that problem, but only for things that use netty and mina (hint, most database drivers don't use it, and further the JDBC standard doesn't expose any sort of asynchronous operations so it would be pointless if it did). Sure, JDBC could be patched, but then you would still have to wait for your DB driver to implement it.
That would be nice. But I think I would still rather have it stay out of the JDK. Something like the JAX-RS standard with a standard set of annotation and a type handling interface. I just wouldn't want yet another marshaling standard in the JDK.
Transaction management sits on the thread, or in this case, the fibre. If you do parallel, you lose your boundaries. Besides, there are a lot of things associated in ee with the thread, like session and security context, so that would be a right pain also. You could do menial calculations which don't use anything but its own information, but not much more. 
G1GC is mostly for large heaps (6+ gb). If you allocate memory too fast, it can degrade into a serial collection, which isn't great. If your heap is small enough and you have enough cores, you probably would get the best performance just using the parallel collector. CMS just sort of sucks. It has all the problems of G1GC and none of the benefits. If you are determined to use G1GC, you probably should adjust the XX:MaxGCPauseMillis flag. It targets 200ms pause times by default. Which means every one of the eden collections was also spending time looking at old gen for ~200ms. It does this to try and avoid big long pauses. (G1GC was built for servers) Try adjusting it down to 50ms instead.
Local type inference?! ( ͡° ͜ʖ ͡°)
Yep! `var` only.
I'd start with pause times before touching mas threads.
Most of that stuff is communicated through thread local variables, and it could possibly be mitigated by making them fiber local instead of thread local. But yeah, that sounds like it is going to be a major hurdle in general for them (it is called out in the OP)
Agree. Let's discuss which IDE is the shittiest.
I missed that, you know where he said that?
I’ll look for the segment.
I’ll look for the clip.
Interesting enough when I made the heap min size 3GB and max size 3GB performance improved significantly. I'm not inclined to give Eclipse 6GB.
* Machine learning, ETL &amp; scientific computing (DL4J, ND4J, DataVec, RL4J)
looks like the eap for intellij has landed support: https://blog.jetbrains.com/idea/2017/11/intellij-idea-2017-3-eap-brings-support-for-local-variable-type-inference/
Haha, I did, I have, it is a wonderful technology. I probably spent more time with it than you were alive. That unfortunately doesn't change the facts. There's one thing to wish miracles to happen and another to actually have them happen. As we all know, magic does not exist and miracles don't last more than 3 days. So, it is up to you , but java desktop is dead and buried, as the deprecation of webstart highlights. 
Any development on fixing HiDPI scaling? I can't work on GUI projects on my Surface Pro 4 unless I change the resolution to 1080p and crank up the scaling. 
Ok I see. Guess I misunderstood a bit and it all makes a bit more sense now, thanks! 
drugs are not good for ya.
Oxygen fixed that. Source: it is in the patch notes, and I'm currently running Oxygen on hidpi laptop 
_not worth it, not worth it, not worth it..._ I'll let your post stand on its own.
See [here](https://youtu.be/Pr2v9E_oPXI).
Thanks. That is much better now The Testcase class is a JUnit 3 construct http://junit.sourceforge.net/junit3.8.1/javadoc/junit/framework/TestCase.html JUnit 4 classes should use the @Test annotation instead. https://stackoverflow.com/questions/2635839/junit-confusion-use-extends-testcase-or-test Sorry if this wasn't clear.
The only complaint I might have is moving the generics type from the left to the right. List&lt;String&gt; foo = ArrayList&lt;&gt;(); to var foo = ArrayList&lt;String&gt;(); (I haven't read the specification, but I'm guessing they aren't inferring the generics type too)
In the case of actually invoking the constructor, you would have to specify the type. Otherwise, the compiler would have no idea what the type argument would be.
You have a not/now autocorrect that makes your comment confusing to anyone that doesn't already know that there a time based release.
I haven't seen a JEP for it, but it would be so lovely.
Thanks for pointing that out!
&gt; People make claims like this all the time but never explain the 'why'. After a decade I honestly believe they think it's faster because they think it's faster. I know I just repeated myself but really - it's a combination of self deception and being actually being faster because they're more enthusiastic. I remember running into this stuff on the job, it always turned out there that they weren't actually any faster.
Yes, `final var` has the same effect.
So I'm not too sad about the lack of `val`. It's more typing, but it's also immediately understandable to any Java developer.
Goetz made some great points about why `val` would be a generally less useful addition now. Let me try to find the clip.
&gt; What am I doing wrong? 1. Wrong subreddit. Programming help should go in **/r/javahelp** 2. [The `Scanner` Class and its Caveats](https://www.reddit.com/r/javahelp/wiki/scanner)
:Shakes fist at air: Damn you maven (see readme). TBF Maven does come with a 3.x jUnit I just told it to update to 4.12 since I hate new things shipping with old deps. As the unittest code is intended to be throwaway I'll leave it be, but if you like create an issue on the GitHub so that others know not to copy the test code (really they shouldn't copy any of it, the one dep I decided to include was via a deprecated API)
Great, now you tell me...
Eclipse has the nice feature that you can make all use of Auto(un)boxing a compile time error. I have had it this way for 10 years now and got everyone I worked with to do the same. I see the introduction of Autoboxing into Java as an act of sabotage and the 3nd worst mistake in the evolution of the Java ecosystem.
What are the other 2 worst mistakes?
No. 1 for me was the attempt to abuse language level features like access restriction (private/protected) and final for security purposes to implement the Java sandbox for applets. It ultimately failed spectacularly, lead to otherwise unnecessary restrictive API designs and cluttered up the implementation of the library. The sandbox should have been implemented similar to Javascript or Java ME, where the functionality that is not allowed to be used is not part of the API at all. No. 2 is the modules system with everything that came with it. I see it as Java's equivalent to the Patriot Act. Forced upon us under a false pretense to make the Java platform ultimately less free for developers.
thanks for looking it up
Can someone post the original questions or give a summary? I'm confused by Brian Goetz subliminal statements (he obviously disliked the outcome). To me it sounds like he wanted to introduce sort of more "type coercion" *shudder*. Btw. are they going to make the boxed primitive value types?
* Accessing GPU ([Sumatra](http://openjdk.java.net/projects/sumatra/))
TL;DR?
So check if find usages will work now. The issue I have with it in C# is when you find usages of a class you only get the indirect usages, not the var usages. But downvote me instead.
There's a neat 3rd party theme available: https://marketplace.eclipse.org/content/darkest-dark-theme#group-screenshots Though, it doesn't change the fact that Eclipse looks like pile of crap out of the box.
And type erasure is not on your list?
Yeah truffleruby is already blowing everything else out of the water afaiu, and you prtty much get language interop for free with zero performance cost.
Running version .1a Release (4.7.1a) and it is still not doing proper scaling. Is there a more recent version? I used -Dswt.autoScale=quarter to fix the menu icons from being molecular-sized. The issue now is that any GUI is (by default) extremely small. Although I can easily change resolutions and move scaling, I would just like to know if there's something in the .ini files I can configure to avoid these extra steps.
Nah, type erasure is good. It keeps your code small, has less runtime overhead than potential alternatives and was also a clever way to fit generics into the existing language. I even like how it can be abused for a few nice things. Sure, sometimes it would be nice to know the type parameters at runtime but if you must you can achieve this by subclassing your generic types. And it doesn't play nicely with arrays but I see this as a minor annoyance that doesn't bother you in 95% of the code.
&gt; https://soc.github.io/blog/linux/self-defense-against-dotfiles.html The link returns 404 not found. 
Thanks, fixed.
I'd rather write Scala, but I'd rather read Java. The second one matters more wheb you work on a team.
Okay, I'm still in the same boat on reading Scala. Hoping that changes with practice.
Really interesting, thank you. It seems implementing a new architecture using graal is not so complicated, am I wrong? In fact cpu manufacturers like amd and intel could provide optimised scheduler classes for new products. Also I realized, one could program in assembler in java using this :).
I think they were referring specifically to the "modern" save dialog from Windows Vista mentioned in the release notes.
Haha - what did he actually say? I didn't get chance to see it.
Requiring an active agent for something to work is kind of a soft hack. It's not really userspace, IMHO since you need a low level component separate from the app. But yeah, its all Java, and all supported through regular APIs. Having it in the JDK would be a major boon to Vert.x and friends.
the real question is why does this sort of shitpost hit this sub weekly and not get downvoted to oblivion or modded. there's nothing here that adds value 
Any dark theme of Eclipse is a nightmare to look at on Windows.
But we still getting it on 3/2018?
Java 1.1.5 [was Pumpkin](http://www.oracle.com/technetwork/java/javase/codenames-136090.html) (6=Mustang, 7=Dolphin, 8=TheTrain, 9=TheTrain2, 10=?)
I don't think it's trivial, but Graal is certainly designed to plug new architectures in. We have AMD64, SPARC, AArch64 in the code base. People have done AArch32, HSAIL, JavaScript and Java 'architecture' backends in the past as well.
We still do it and nice way to update desktop apps without telling everyone to update theirs apps. 
For implementing custom optimisation phases, is it possible to "register" phases as plugins, without modifying the graal source code? 
I could ask why you were born because you give no value to my life, but perhaps you give value to someone else.
This never worked. Dependency conflicts all the [time](https://i.imgur.com/m8HPkib.png). 
I'm still trying to understand the rationale behind private implementation methods in interfaces. Why not use an abstract class? Doesn't this open java up to the old diamond inheritance problem? If that's no longer considered forbidden territory why not go with full multiple inheritance?
Sounds like a personal problem with bad c# tools
Correct!
You should be able to click on the link to it on SurveyMonkey. It lists the possible choices below.
You’re welcome!
Visual Studio is bad? Don't you know the paid $ shills will downvote you for saying that?
JRuby do this by effectively subclassing Graal. I think it might be nice if we did something like a service loader - where new implementations of the optimisation interface that are on the classpath are found automatically, but we don't do that at the moment.
That's an interesting nickname.
It's one of the simplest languages, if not the simplest one among top languages. 
There are a bunch of extension points you can use. However they might a bit more coarse than what you would want. For example you could create a new `CompilerConfiguration` (`CompilerConfigurationFactory` are looked up through `ServiceLoader`) that extends the `CoreCompilerConfiguration`. Then you can customize the various `PhaseSuite`s.
The benchmark is that you are able to obtain and maintain employment. From what I have seen, it's a lot easier than you might think.
PowerMockito. I work on a legacy codebase with no unit tests and it's very rare that I can't write a unit test on a method without modification. 
Amazing. Now waiting for hipsters to release all their hand rolled optimization jars. Looking forward to report bugs that are related to jit. This is awesome and terrifying. 
Utterly shameful that they didn’t also put ‘val’ in - it would just desugar to ‘final var’, there is legitimately no valid reason not to do it. Oh well, perhaps Lombok can implement some solution for the three major releases until they support it.
final var is the same as val
Interesting. The spec says there will be "var" and "val". https://bugs.openjdk.java.net/secure/attachment/57771/LVTI%20spec%20v2.txt
It is not like someone indexes the popularity of programming languages on a regular basis.. Oh, except these folks https://www.tiobe.com/tiobe-index/
Do you know when that is from? [Here](http://openjdk.java.net/jeps/286), they discuss choosing `var` only.
Goetz gives an explanation as to why `val` is generally less useful, [here](https://m.youtube.com/watch?feature=youtu.be&amp;v=Pr2v9E_oPXI&amp;t=12m58s).
For the sake of the education of others, can you offer an explanation? I'm genuinely interested in both sides of this. 
Click [here](http://openjdk.java.net/jeps/286) to see the JEP.
How does this relate to Java?
I write in Java, but in all honestly i tried posting it elsewhere first but most programming subreddits dont allow text posts. Ill remove it if it conflicts with the post rules.
Respectfully, and frankly, he’s as wrong as possible. When it comes to modern non-breaking syntax pure additions, immutable/final should be at the very least an option. Mutable local declarations are not bad, but if we’ve learned anything in the past decade of Java (and 40 years of formalized contextual languages) it should be at the best mildly discouraged. To utterly discount their utility is, at vest, a mild mistake. If anything, immutable-by-default fields would present a small hurdle/cognitive load for low-skilled/newcomers to the language, but I’m not even talking about making it the default. I’m literally saying that making ‘final var’ syntactically equal to ‘val’ has literally no meaningful or measurable downsides, and has nothing but utility (for experienced users) or a good example (for novices) going for it. At the end of the day, if this goes through the way that it’s proposed 99.99999999% of the declarations that I (and pretty much every other experienced person) make are going to be ‘final var’ anyways, so what’s the harm? None. The upside, however, is that we abrogate a frankly trivial and easy lesson that could be taught to movie/beginner members of the platform that will pay dividends in correctness, maintainability and reliability for multiple decades. From my perspective, any argument that advocates against backwards compatible language changes that are purely syntactic sugar that encourage basic best practices will fall on utterly deaf and dismissive ears unless paired with rock-solid and well thought out reasoning. The arguments against ‘val’, *especially when you’re about to add ‘var’ to the language* don’t even come cosmically close to this.
Fine, sure. TL:DR; Op seems to think that _that one new feature_ will suddenly make his O(N!) code run fast. &gt; Depending on the approach they take, it could become even better. Depending. Physics limit the amount of work doable in a piece of silicon. I'll postulate that well designed code in Java is already within 0.5% of possible theoretical maximums based on personal experience working with some very smart people optimising last pieces of fintech cores. &gt; For example, you have to use a thread pool if you want high performance and low resource usage, but then you run into issues with blocking and concurrency. If you are using thread pools (I presume one of many executor services) and you are running into issues with blocking and concurrency you must take a step back and re-evaluate what you are doing. Chances are your code is a crime against humanity. This is a well understood challenge that, frankly, hasn't been a problem for a decade or so. With regards to performance - we'll get to that shortly. &gt; You could dive into another 3rd party library, but then everything you use must be aware of the existence of that library. This is a special kind of stupid statement. One of the goals of software design and architecture is to make sure that your components are not dependant on innards of other components. That's why you think how they will communicate, that's why you design interfaces, that's why you add some javadocs documenting "if you call this and expect to get result back immediately you are going to have a bad time. Or a nobel prize for breaking physics.". Anyway, it is really a special kind of stupid statement. Node.js much? &gt; If it is baked into the language, however, you can get it for free. Any blocking and waiting could free up the thread and let a different fiber run. You mean like it currently happens with normal threads? Encounter a blocking OP and yield? Wow! Mind. Blown. That sounds like a thing only really really smart people in 2017+ could have come up with! As for getting it for free ... yeah, right, sure. I ... might be cynical, but given how much code out there works barely by accident it would be interesting to watch. &gt; This would be great in the case of things like DB drivers or network communication. I am not quite sure what _"This"_ means in his sentence, this is ether a complete ignorance of how things work under the hood (hint - not much win by this huge parallel processing "boost" if you are spinlocked on same mutex in kernel) or wishful fantasy. Main reason why DB drivers are single op only is because of how they are coded and _BECAUSE THEY DEPEND ON THE OTHER SIDE TO TALK TO_. There already exist perfectly adequate solutions from crude (connection pools) to absymal (mongodb async protocols). No language feature will improve badly designed and structured code. No language feature at this stage will enable better code to be written ether. &gt; Where you don't want to spawn off 100 threads but you might want to do 100 things concurrently. Son, if you have 100 cpu's that you want to saturate, you will need 100 OS threads. That's a law. If you have 100 things going on that saturate less than 100 cores you are just fine off with a classical executor, some queue, maybe fork/join if you want to be fancy... --- I like the OP's enthusiasm, but he is hyping a minor thing that would have little to no real life impact as the next big thing! Wow! I despise that. Ether you write good, fast, performant, code - in which case the lack fo fibers in Java should not be holding you back _in any way_, or you don't - in which case your code sucks and it won't be helped by this.
Wow, I didn't respect a response like this. Thanks for covering so much!
I listened to a talk on this on the vJug a while back, looks awesome!
&gt; Getter The Java project I've been working on over the past 12 years now has over 416k lines of code. If I were to do an honest review of the code base, I'd say the majority of it is boilerplate, most of it due to getters and setters and various superfluous abstractions. The proliferation of boilerplate is largely due to the promotion of idealistic and unrealistic OOP coding styles pushed by CS professors, most whom have never actually worked on real world projects before. 
Those are in Java EE.
I remember seeing or reading somewhere that some components of the configuration for using Graal were under the OTN license Is this the case at the moment? I've been very excited about Graal since I heard about it but I have to hold my plans back until I know I can use it in the same way that I can use the existing Java stack, license wise that is. So do we have a java 9/openjdk(?) based configuration that we can consider for deployment to production based on the same licensing policy used for the rest of Java? I mean non-OTN Anyway, fantastic work, well done!
Definitely include a chapter on how to program in Java without clogging up one's code with boilerplate.
OK that's interesting. I suppose there are open questions - if it's too easy to do - about a new kind of dependency hell wreaking havoc where multiple libraries and the application start patching the compiler. I think this will end up being very interesting for application developers when someone wants to write an interpreter, e.g. a query engine. Perhaps with graal, queries could be JIT compiled? Thanks for writing this up by the way.
The Graal compiler is open source and GPL. The upstream sources developed by Oracle Labs are on [github](https://github.com/graalvm/graal) (in `compiler`). The version used in JDK 9 for the AOT compiler is on openjdk in the [jdk9/hostport repo](http://hg.openjdk.java.net/jdk9/jdk9/hotspot/) (in `src/jdk.internal.vm.compiler`). The equivalent in JDK 10 is in the [jdk10 repo](http://hg.openjdk.java.net/jdk10/master). Actually in JDK 9 you can simply add `-XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler` to your command line and you'll be using Graal. You don't need to download anything from OTN and you don't need to use `-XX:+UnlockCommercialFeatures`.
Thanks!
Has a meta numbering scheme been devised for the JDK numbering scheme yet?
&gt; That is not at all clear. I don't see any problem here. Immutable data class is a class with only final fields of immutable values. That makes the state of the class immutable, which is what gives you the properties that you want. As I showed in that snippet, this does _NOT_ give you the properties that you want. Well, actually, I don't know what properties you want; you never said what you wanted. I bet, whatever you come up with, I can make a snippet that shows you how I can hack around it. Thus, these are soft guarantees at best. &gt; What the methods of that class do is completely irrelevant, as long as they cannot mutate the state (i.e., the values of the instance variables). The state of the instance itself, or any state anywhere? &gt; I also don't see your issue with the File class. It's not implemented as an immutable data class. Maybe it could be converted into one without breaking backwards compatibility, maybe not. Doesn't matter either way. It's an example. Hypothetically speaking, imagine it _WAS_ a data class. The point is, the 'rules' (only primitive final fields) do not prevent you from doing that. Thus it makes for an interesting conversation piece. 
&gt; is completely orthogonal and has nothing to do with the discussions here. You're just being dense. The point of a data class isn't to point at it and go: Look. It has no fields that can be mutated. The point is to reason about properties. For example, OP specifically referred to the notion that 'such a class can be passed around multiple threads without fear that it'll cause problems'. Therefore none of this is 'orthogonal to the discussions here'. 
They are compared with the value types proposal directly at the end.
1. You can easily see it from parentheses anyway :) 2. When you have many `get`s in a line (think `a.getFoo() + b.getBar() * c.getBaz()`), it adds up. 3. Best-known "better Java" languages -- C#, Kotlin, Scala -- all have ways to avoid it (and the parentheses in point 1 as well). This is probably not a coincidence.
&gt; it is simple enough that it only has getters/setters And `equals`, and `hashCode`, and `toString`. And then you need to add 1 more field and forget to modify one of the methods.
Java already does both: synthetic fields for inner classes, default constructor when no constructor is declared, `values()` and `valueOf()` for enums...
interesting lib. are there some usable subcommand examples? the snippets from docs are quite confusing 🙁
From here: https://bugs.openjdk.java.net/browse/JDK-8151553 - I guess it's an old spec. Too bad. val would be nice.
Looks like it's an old version of the spec - https://bugs.openjdk.java.net/browse/JDK-8151553 - too bad 
Thanks for pointing that out. I’ll add examples for subcommands to the examples sub module that we started recently. Meanwhile there are a few tests that illustrate subcommands. Take a look at https://github.com/remkop/picocli/blob/master/src/test/java/picocli/Demo.java
I recently switched from Eclipse to IDEA, the main reason being that I am also doing kotlin development and keeping the keyboard shortcuts straight in my head was difficult. Here are the things that I miss from Eclipse, - JDT (the Eclipse Java compiler) can compile only changed code (like down to the line), you get very immediate feedback on errors. If I make a change that breaks usage in another file I know immediately. In IDEA you have to run a test, build, open the file. Additionally in IDEA you have to wait for javac to run, this can mean waiting a few seconds before a test will start running. There is also built in code hot swap, but it only works in limited cases. - IDEA has some funky keyboard shortcuts by default (at least on macos) lot's of things involving FN keys which are awkward on the laptop keyboard due to them also being for media control, brightness, etc. - Eclipse's vim plugin has support for the argument text object. - Eclipse has better maven integration, I really wish IDEA had the dependency viewer that Eclipse has. It makes it so easy to track down conflicting transitive dependencies. - Eclipse has built in save action support (need a plugin with IDEA). This is obviously just a list of pros, there are also plenty of cons and things IDEA does better. In general I find them to be close enough on the things that really matter (refactoring support and code generation) that I can work with either one and don't find it a huge deal.
I use Eclipse, pretty much entirely because of EGit, workspaces and perspectives. I've used IntelliJ on and off over the years, and featurewise I think it's better than Eclipse, but I'm just more used to the way Eclipse does things. Also, IntelliJ seems to mess up complex merges with Git, and I've just had better luck with EGit.
Odd i use Idea on a mac laptop and don't have a problem with the shortcuts... does modern eclipse still run super duper slow on any moderately complex project?
I have used Eclipse for years and have used IntelliJ off and on over that period. Recently I have been required to use it at work. I find both pretty comparable with pros / cons. I like find eclipse's compiler to be way better as well as maven support and workspaces / multi projects. IntelliJ has a better code completion and way more convenience features. 
his comments are really about what happens when value-semantics and reference-semantics cross paths.
I use Notepad++ because my company's infrastructure prevents me from using a local copy of the repository (if I do, I can't run our website for testing), and all "real" IDEs are too slow to use when they're using a remote file structure.
I have used Netbeans, Intellji and Eclipse. Intellji is by far most features rich of these three IDEs, however I don't want to pay for the license. Eclipse was my first Java IDE, but it was too bloated and projects would randomly take forever to compile. Netbeans is my current java IDE, feature wise it's not as good as Intellij, but it's a joy to use compared to Eclipse and I don't have to pay for yearly license. IDE Git integration is good but it's not an important feature to me as I use stand-alone git app. In summary, if my employer decides to pay for Intellji, I will switch over, otherwise I'm staying with Netbeans. 
You can tell IDEA to use the eclipse compiler, and IDEA has settings to use eclipse shortcuts (which are better)
I love you. Thanks for making this!
This, And on the other spectrum I have a feeling there will be a lot of proprietary optimizations that'll never be seen outside a costly license.
Indeed: there seems to be no AVX support in the open source version of Graal, though I believe Oracle have implemented this. It's too early to be _too_ cynical about that though, as the author points out: this is still a research project.
There's a community(open-source) IDEA version?
Community IDEA version doesn't support deployment to application servers. [Compare Versions](https://www.jetbrains.com/idea/features/editions_comparison_matrix.html)
He did say professional developers. If you're on a developer's salary, $100 a year is well worth it for the time IJ will save you.
I use NetBeans - the only IDE with sane Ant projects support. Menus in menu bar fits on the screen ;p
Ant now that’s a name I haven’t heard in a long time. 
Latest versions are really fast, no matter what I through at them. Give it a shot, you'll be surprised.
I will
Personal license can be used for commercial development so it is still 200$ for first month and less for next years. 
As a Java EE Developer Netbeans is my choice , it has out of the box good git and Java EE support
The UI in Idea blinks too much, I find it very disconcerting. Also, the code style preferences are different between the two, each time I experiment with Idea it adds lots of white space changes to my repository.
One of the main things I missed original was the dependency analyzer. The exact same thing is available in IDEA here: https://plugins.jetbrains.com/plugin/7179-maven-helper
Just got assigned a work project with ant. God help me. 
Eclipse, because over the years I tuned it with settings and plugins to do exactly what I want it to do. I am not looking for much more, it gives me instant feedback, immediate control, I can see exactly what I need to see when I need to see it. That said, I tried to migrate to IntelliJ a few times (because everyone says it's so much better), but every time the time investment to get things working similarly well was simply too much. It is perhaps to do the transition, but I'm used to many automated tasks and seeting things up simply took too long. Also, I'm from central Europe and the business license costs as much as my monthly appartment rent. Not all businesses are eager on purchasing those in mass.
I really miss Eclipse’s compile on save that updates the list of compilation errors. An intelij rebuild clears the error list, lists all the warnings, and finally highlights the bugs. On eclipse the error list just updates the list of errors, so fixing a bug removes it from the list of errors. Switching to the new keyboard shortcuts was misery. If I had to do it again I might try to map the eclipse shortcuts to idea. 
Yeah I have seen the option to use the Eclipse compiler. Does it actually work the same way it does in Eclipse? One upside of using javac is that if it builds in my IDE it builds with maven. There are things that Eclipse will compile that javac won't. I'll check out the Eclipse shortcuts in IDEA, never knew about that
Wow I am not sure why I didn't think to look for a plugin. This is very useful, thanks!
I've used Eclipse and IntellJ quite a bit in my life, and I prefer Eclipse, primarily because of the ecosystem around it. I currently use both in my current job, but all my personal projects use Eclipse. Here's are my experiences: * In the early days of AWT/Swing, SWT was king. It doesn't apply as much today, but using native widgets made Java development so much easier. It made working with Eclipse much more appealing. * I really like Perspectives and Views. I can tailor my UI to a particular task. I haven't had any issues tailoring the UI in anyway I need for my workflow. This scheme just makes sense to me. * InfoCenter. I've had situations where I've needed to build help documentation for projects, and InfoCenter has been pretty easy to bootstrap something very functional quickly. * OSGi. I've always worked in a design-by-contract style, and OSGi really makes that easy by making dependencies very clear. Eclipse provides the best OSGi experience, bar none.
Damn, that sounds like a painful infrastructure. I would switch jobs.
You can change your code style settings easily. I guess you have a case of spaces vs tabs.
that's a silly question...
It's funny. Younger me would have seen a setup like this is a challenge and done whatever I could to work with it. Older me is 100% on board with your "find a new job" comment.
I use Eclipse, mostly since I find it to be faster and more stable—and it also allows me to keep all my projects open at once (50+). Having immediate access to all of my current codebases simultaneously is an amazing feature.
Not that long. But it depends. Given the information provided that is the best I can tell you. :)
I'd go straight to Kotlin if android development is your goal, it's closer to what you know and simpler overall. 
JavaScript has no relation to Java other than the name. JavaScript was originally called ECMA script and it was made to script web browsers. Java was the new hip thing in the 90s, so Netscape/Mozilla tried to capture some of that excitement and get rid of the clunky name by calling JavaScript. Java is a full fledged multipurpose programming language. It might take a while to learn.
It's funny, younger me would have seen the setup as a horid challenge. Older me keeps thinking "I'm getting paid by the hour", and it's certainly one way that everything takes a really long time. I wouldn't set it up that way myself, but I no longer get angry at that. I get paid for my time either way.
It's funny. Younger me would have found that intolerable. Older me thinks "I get paid by the hour".
Hey hey, just started using this in production. Great library.
I was an Eclipse diehard for many years, knew it in and out, was perfectly happy with it. When I switched to IntelliJ (using Eclipse shortcuts to ease the transition), to me, all the convenience factors make me incredibly productive. I realize for me it’s because I buy-in to a piece of software, learn it’s strengths and utilize them. I’ve advocated for IDEA hard at work, and most kf the converts like it but could go either way. These people are 9-5’ers... from my experience they don’t seem bother to leverage their tools to their fullest extent, for these people, there’s essentially no difference in terms of point and click features. What does surprise me in the other comments here is multiple people have called oue Eclipse M2 as a better Maven integration... I honestly cannot dven fathom how anyone could think that. M2 is complete crap in comparison to the joy of IDEA’s Maven integration. Maybe it’s because IntelliJ doesn’t do anything flashy about it? But that’s the best part... it works so seamlessly you don’t need fancy WYSIWYG visual editors or cryptic project refresh hooks. I cringe anytime I stop at another developers desk who is using M2 and having some kind of multi project inter dependency problem they cannot figure out.
I use Netbeans and IntelliJ IDEA almost equally. Netbeans has superb out of the box Maven support. Maven is supported by Eclipse and IntelliJ too; however, Netbeans does this with 0 additional files. In short, a Maven project IS a Netbeans project. No .project or .idea folder to fuss with. The Maven projects load faster on Netbeans too with the caveat that you have to open the sub-modules as you need them. 
Java isn't that hard, but it may take you a little while to wrap your head around object oriented concepts. As others have mentioned though, Java isn't really related to Javascript at all. Java is to Javascript what car is to carpet.
Close, JavaScript was originally LiveScript. ECMAScript is the name of the language that was submitted to the ECMA standardisation organisation. 
According to Wikipedia it is compiled JavaScript. Maybe it is a name collision issue as Firefox being renamed from Firebird so it wouldn't get confused with a database that never made it big.
What is compiled JavaScript?
My mistake: https://en.wikipedia.org/wiki/LiveScript &gt;LiveScript is a functional language that compiles to JavaScript. It was created by Jeremy Ashkenas—the creator of CoffeeScript—along with Satoshi Muramaki, George Zahariev, and many others.Notably, LiveScript was briefly the name of JavaScript in 1990s. 
I found a project with a build.xml recently. It now has a build.gradle instead. In fairness, it was a very simple library so it didn't take very long to migrate.
It's the same file.
&gt; There are things that Eclipse will compile that javac won't. I haven't actually seen that happen before.
&gt; This isn't a flame bait post You said that in the opening post. And yet... &gt; does modern eclipse still run super duper slow on any moderately complex project? The answer is that Eclipse runs better than IntelliJ in Windows and Eclipse and I load for more projects in Eclipse (since Eclipse can do that and IntelliJ can't).
that's interesting to know it's so much different on windows. On mac os, eclipse was unusably slow once i had a few hundred classes and a moderately complex build script.
IntelliJ would have to be better than Eclipse before I would consider paying for it. It would need to do everything Eclipse does, not do the annoying stuff IntelliJ does and the fanboi base around IntelliJ that pollutes news forums like /r/java, would need to cease.
It’s really hard to say for me because I was introduced to Java after I had Ada, and after I had done Qbasic in high school, and logo in elementary school. But I’ll say it’s relatively easy for someone who has done programming. If you already have an elementary grasp of types and subtypes (like if you were introduced to some set theory in math), then you’ll be okay.
It's funny. My-aged me is mostly content with the job. It's got a lot of weird quirks, but also a lot of good points. If I find another job, it's not going to be because the dev environments are screwy, even though they rae.
This x1000. I've tried to switch to IntelliJ many times (for my work projects). But it's so annoying when you have 20+ Modules. The importing of a multi-maven-module-project alone makes it a nightmare. I'm used to the eclipse hotkeys too, and the compilation seems faster. I like the IntelliSense thingie on IntelliJ better tho, but that's about it. 
Javascript (ES6) has objects so the OP may be familiar with object oriented concepts.
Java and JavaScript are completely different. However programming languages share similar structures in general. I like the book [[AMAZON LINK] Java, How To Program, 10th Edition](https://www.amazon.com/Java-Program-Early-Objects-10th/dp/0133807800) 
Best advice out there
Like [JSON-B](http://json-b.net)?
Goodluck with java, i will let you when i wrap my head around it, its not just core java, once you enter javaee world things go from crazy to batshit crazy, like spring vs javaee, class loading is still a hogwash, now they came up with even more crap and people still stuck with java7, and they already talking about java 10, one day i woke up and told myself enough is enough lets move to node and deal with npm hell
Eclipse i guess because its free and we get good support from community, although it works like crap sometimes. Intellij works well, buts its not free and we are at mercy of employer, sometimes employer do not want to spend money and intellij also works like crap sometimes, we cannot put break points on methods, what the hell is all that about
Here's confirmation from Donald Smith, Java SE PM at Oracle posted on the OpenJDK mailing list in response to the same question: http://mail.openjdk.java.net/pipermail/discuss/2017-November/004589.html
Not a typo. http://mail.openjdk.java.net/pipermail/discuss/2017-November/004589.html
Just because some corporations don’t transition to a new release quickly does not mean The Java Platform Group should just stop releasing new versions. They are moving to a new time-based release cycle. A new version will come out every six months, starting with 10 this March.
Honest question, but why are you putting Angular files in your Maven project?
Funny, I switched to IntelliJ mainly because of EGit.
Like everybody says , they are quite different. Your efforts in JavaScript won't be entirely wasted, but I strongly recommend you do an effort to educate yourself on the fundamentals of object oriented programming. You're like the kid that has been driving cars a lot and now wants to refurbish engines. You know what the engine does, but you'll now have to understand why and how.
Can you explain some of the problems you would run into doing it this way? This is how we have always done projects at my work but I have a new one coming up, so if there are benefits on changing our approach it would be interesting to hear them. 
Yes of course it is the same file, otherwise you don't get any changes. Check your code style settings in the two IDEs, you can adjust them to be the same easily.
The frontend looks like it can be pulled out to stand on its own. The pom is there for the frontend plugin (yarn related). The backend pom has the frontend as a dependency.
No, it pretends to have classes. It's just syntax. Though it helps produce less crappy Javascript code, which is always a good step in the right direction. 
Would it be possible to get a Gradle version? Thanks
Not a smart ass over here, but using two repositories is something completely different than using two modules in a single repository. Or am I missing the point of your question? The multi-module version gives you modularity and the loose coupling you would want to have with the benefits of having a single repository.
Through learning Android app development in Java, it's most likely that you spend most of the time to learn Android way to implement things, not Java itself. Of course Java is a foundation of Android development but if you finish learning Java you're even not half way through. As you're already familiar with React Native, this Android part may not be too hard to you. Good luck.
To nitpick even more: Javascript is and always was an object oriented language. It my have many flaws, but a lack of 'object orientation' is not one of them. Object oriented programming is not about private/public, static typing or classes. Its about 'objects' that contain both data and procedures that operate on this data. Prototype based dynamic type systems (as in JavaScript) suite the object oriented programming paradigm pretty well. Even more so than Java if you look at Javas native types (int, boolean, ...) which do not fit into the object oriented paradigm very well. *tl;dr;* OO != Classes.
Tried it, have you? No? Well come back when you discover that 'easily' is not the word you were looking for.
Can't you convert the pom to gradle pretty easily?
Because....why not? Your front end needs to be in exact sync with the back end. the ReST call from Angular to get that list of orders, NEEDS to have the same set of json fields within it that both front and back ends have agreed upon. The moment you split your project into two, you now have to make sure the latest build of front end matches your build of back end, otherwise you have no idea if the bug is because of a code error, or simply a version missmatch.
İm trying to help, but you are hostile. And yeah I tried it you ignorant fuck. You're just too stupid, maybe get another profession as you are too dumb to configure the easiest thing ever. 
Check out two very useful related projects: https://github.com/dhorions/boxable and https://github.com/ralfstuckert/pdfbox-layout
Oracle didnt get their 5b settlement dollars from google's android so likely java is going to begin the obfuscation and systematic detioriation process from refuctoring programmers who care only of money, not of the survival of java as the number one programming language of all time. And why would they? If making a worldclass prodict doesnt pay better than turd polishing a piece of shit, then why go above and beyond with wora style infinitely backward compatible software? Fuck it up and double your price. Then laugh at anyone who complains. Im glad im diversifying my skills away from java.
Happens quite a bit with complex generics. I have quite a lot of experience in this area as I had to roll an implementation of the type inference algorithm in the Java 8 spec at one point, and I explored a lot of the corner cases in my own testing. In fairness to the Eclipse engineers, anecdotally the bugs seemed to be about 50/50 split between ECJ and javac whenever they had a disagreement. There is also the problem is that javac intentionally deviates from the spec in some places where they realised they could get better behaviour, but my understanding is that they hope to close these gaps in future versions. In fact they may already have started to do so in 9 I've not checked.
Calm down mate, and try not to be such a cunt, yeah?
+1 for using webjars! You should think about [wro4j](https://github.com/wro4j/wro4j) probably
&gt; once you enter javaee world things go from crazy to batshit crazy, like spring vs javaee, class loading is still a hogwash, now they came up with even more crap and people still stuck with java7, and they already talking about java 10, one day i woke up and told myself enough is enough lets move to node and deal with npm hell What does this have to do with Android? And what's crazy about core Java?
it's ok in a controlled environment, not so much in the wild. Usually apple is the first one to sabotage it in the wild, I think they were offended that everyone didn't want to write custom user interfaces just for apple.
I have been using ArcGIS and it’s fantastic. Geoprocessing, reverse, and so many other features. Even out of the box, without having to make your own server, you can use their mapserver and geoserver. It’s amazing. And it’s super easy to use and documented very well. The sdk even includes lots of samples for lots of the most used features. 
NetBeans, the Maven support is by far the best out of any IDE I have used. It may not be as feature rich as IntelliJ but it has everything I need in an IDE and is free.
I'm surprised that linear probing hash maps are not more popular. Modern CPUs just love to run over arrays which compensates for the somewhat higher collision rate. I have used a linear probing HashMap/HashSet implementations in Java for 20 years now and although the JDK implementations have become better over the years, it's still outperforming the JDK on everything but remove, especially on smaller sizes. In terms of memory use it's probably even below that of the implementation that is suggested here.
Same here...I use it for Java EE a lot and a couple Netbeans RCP apps.
So Oracle doesn’t let him work on JavaFX anymore?
You mean, JHipster?
Anyone knows how can I convert html to PDF?
Different strokes for different folks.
Prince XML https://www.princexml.com worth every penny
/r/noshitsherlock
The problem is that HTML is a document format and PDF is a rendering format. You would need.a tool that actually lays out the HTML so that it can be rendered as PDF. If you don't want to pay for a tool to do the rendering, you can use [Apache FOP](https://xmlgraphics.apache.org/fop/), which is an XML-based formatting language that has a PDF rendering engine. Then, all you have to do is convert HTML to XML DOM using something like [Jsoup](https://jsoup.org), pass it through an XSL stylesheet that transforms HTML DOM to FO, and then feed the result into FOP. Of course, this doesn't take into consideration CSS. Or, pay for a tool that does this for you.
This is an advertisement for Azul masquerading as an article about JDK version numbering schemes.
I agree with the person on the mailing list, JWS really shines for internal apps in a corporate environment. My team uses to deploy a couple of desktops applications to clients of our product (a niche B2B product).
While it's obviously true, the new release cycle and proposed but retracted numbering scheme are a 180 degree turnaround of what Java has been doing before. Maybe some compromise of 1.5 years until the next big update would have worked for everyone. We still need time to upgrade to Java 9, but who is going to do that now? I think most people will wait until 11 to make the jump and by that time it's an even bigger jump. While I applaud the paradigm shift I think this change is a bit too radical.
Thank you, Tagir Valeev!
wkhtmltopdf
I do Eclipse RCP applications. So, I use Eclipse (obviously)
well there you go then :)
&gt; JDK 8 is an LTS release &gt; Just to be clear on this, JDK 9 is a Feature release, not an LTS one. Definitely sticking with Java 8 until the next LTS (JDK 11).
It's a 1500 word article that includes one sentence at the end that simply highlights that Azul has an alternative commercial Java support offering. Hardly an advertisement masquerading as an article.
I've usually upgraded to the latest JDK the day it's released, but I haven't with 9, mainly do to no NetBeans support, and libraries I use not being modularised.
I feel like if you have that many get s, you should be looking to abstract away more operations anyway, though. And yeah, the parentheses give it away, but it still just feels wrong to me to method call a field. get just adds that tiny bit of extra legibility. Adding support for properties in Java like the languages you mention have would definitely be nice, I agree, but I'm guessing its just not a priority for the Java architects.
I think if they'd even gone with 1 year updates instead of 6 months, and branded it Java 2018, Java 2019, etc. instead of the pretending-to-be-symantic-versioning 18.3 it wouldn't have been hated as much.
So it's not a marketing blog post ?
Meanwhile, if anyone has subcommand examples they would not mind sharing, pull requests are welcome!
I use netbeans because it works out of the box with native support for SVN and Maven. I find it to be the most performant IDE of the big 3, and it allows me to work with multiple projects at once.
You'll get variance in other generics and templates systems, but one good example with generics related to java's longevity is that they chose to make the generics eliding, such that it's used at compile time and then (in some ways, at least) the generic types are not available to the executing program. That was largely chosen to allow backward-compatibility with pre-generics java, and wouldn't have been relevant if java didn't have that history.
oh absolutely and my goto example of this is C#'s implementation of generics 
I'm a professional Java developer (12 years) and community edition is fine for me. I don't miss any features from the ultimate. But I don't do the j2ee crap anymore, just low-level microservices.
"goto"
JWS differential update rocks! Quote from the mailing list: &gt; Updating with a differential download is a pretty neat feature of JWS. We had users at the Amazon forest area .... and having a 20 MB application requiring just a 30-400kb upgrade at most was (and still is) a crucial reason for embracing JWS. Not to mention OCSP check of signed code. Wonder how they are going to reimplement that. 
Frankly, I think that's great. I really like that there are multiple commercial companies behind java. And Azul is definitely the David to the Goliath's out there. Azul, BTW, has some really amazing talks on some of their technology. I have never used their stuff, but I think some of the work they do is fascinating. 
;)
Not yet. 
What do you use for profiling?
Couple of days at most
Other than tying your front end to the back end, so a change to the UI requires a full redeploy of the back end? I can come up with a list if it helps, but forcing your releases to tie both together, especially if your front end doesn't require any server side rendering is just odd.
Wah? My front end has twice as many releases as my back end. I'm not doing a full back end release every time there is a change in the UI, only if there is a change in my API. Quite frankly, if your API has breaking changes with every single change then you need to get a bit better with your planning and design. &gt; NEEDS to have the same set of json fields within it that both front and back ends have agreed upon Not true. I add additional fields to the JSON responses as planned parts of enhancements before the front end uses them all the time. &gt; The moment you split your project into two, you now have to make sure the latest build of front end matches your build of back end, otherwise you have no idea if the bug is because of a code error, or simply a version missmatch. You should get some sort of tests in your build process. With a defined API and predefined API tests this should not be an issue, and get some Selenium tests in there pronto so you know if your back end introduced a bug.
The release cycle is also a threat to another strong suit of Java: its ecosystem. Say Spring is only going to support the latest version, if you use it you're basically forced to keep up or be left behind. And if Spring doesn't choose to keep up, there's no real incentive for Spring users to upgrade.
The article is very light on details. * What kind of WAR file is that? Does it run on Tomcat or another app server is needed? * What is the actual value of the $(build.artifactstagingdirectory)? A webapps folder? If yes, where do I select the version of tomcat * What happens if along with the WAR I have extra configuration files? Certs? Where do these go? 
java 9 is a lts release, so a lot of people
try this book https://www.amazon.com/Practical-Unit-Testing-JUnit-Mockito/dp/8393489393
One I have read recently based on recommendations from people I work with (as the author works with us) is Growing Object Oriented Software Guided by Tests: http://www.growing-object-oriented-software.com/ It goes through building an application from the ground up using TDD - though it starts with the theory of TDD. I strongly recommend it and it will help you form a good understanding of when and what to test.
I see no reason to start using IntelliJIDEA and the pricetag doesnt seem anywhere near close to worth it for me. Especially as I've become very comfortable using Netbeans and Eclipse.
&gt; comparison to the joy of IDEA’s Maven integration your use of the word "joy" here sounds very shilly.
A couple of lighter reads I was glad to come across: DMMT https://www.amazon.com/Think-Common-Sense-Approach-Usability/dp/0789723107 The Design of Everyday Things https://www.amazon.com/Design-Everyday-Things-Revised-Expanded/dp/0465050654 Read these when you're feeling burned out. They are nice, real easy, feel good reads. Regarding testing. Every function gets at least one test. Happy path always. The most common expected failures. Edge case testing when you find out you need it. When you're really good at it, you'll be able to feed arrays of representative dummy data while your directories are being watched for changes. But first, a happy path test for every function. Start there. Unit testing of the code. Selenium webdriver is what I've used client side to simulate repeatable use &amp; abuse of the final product. Integration test are just unit tests passing when you jam everything together. A much bigger issue when you are doing a lot of Dependency Injection-- you need to check that the "handler" you are putting in actually works. * Unit tests * Client side testing * Continuous integration(CI) Continuous integration is helpful that your "builds" have all the unit tests and a ping to the selenium tests to run as part of the flow of a release. Just a tool to listen for you to make changes. Learn the three things separately, I've not found a good resource that chains them all together.
Java 6 also featured "update N" (sort of Java 6.1) &gt; The next version of Java included (...) project coin Project coin started in Java 7, not 5.
No books needed. * https://testing.googleblog.com/2013/08/testing-on-toilet-test-behavior-not.html?m=1 * http://codebetter.com/iancooper/2011/10/06/avoid-testing-implementation-details-test-behaviours/ * https://gist.github.com/androidfred/8210e67f37f5ca21da51e2fa5368853b
&gt; Edge case testing when you find out you need it. Do you mind expanding on this? When you say "find out you need it" do you mean find out the hard way through failure or are there processes or indicators to look for?
Just a note, totally agree with this. Very strong book, some really good principles and helps you think about what you’re tests are really there for! Good recommendation !
&gt;every function gets at least one test &gt;edge case when needed Why? Public facing features need tests, including of edge cases. Implementation details don't. 
YourKit, for a price, yeah.
Aaaahh, this x infinity. We have so many mock-based tests that break as soon as you change the implementation of the class being tested, despite it still fulfilling its contact. Literally, testing for the sake of it. To paraphrase Bruce Schneier: &gt; **Testing theatre** is the practice of investing in testing practices intended to provide the feeling of improved correctness while doing little or nothing to achieve it.
what can you tell me about debugging experience? IntelliJ makes debugging lovely
Really like this one. It made me understand why TDD can improve your object-orientation.
That's probably a good idea. The module system in Java 9 is a disaster for many semi-large projects. There is stupidly no way to opt out. Split packages are a nightmare and IDE support even in IntelliJ is weak for all but the most basic uses cases. 
If you ever work with an older codebase, check out "Working Effectively with Legacy Code". https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052 Getting older code under test is some of the most challenging (and rewarding) work you can do.
Effective Unit Testing by Lasse Koskela - great book on the subject.
Go to /r/javahelp, but don't just copy and paste your homework — show us what you've tried. Also, you haven't even asked a question here — you've got an "if" but no conclusion.
This is nice but what's wrong with hamcrest? assertThat(result, is(equalTo(expected))) Feels "natural" to me
Have my upvote sir. I have seen projects go all in on the mocking part to where they are mocking the code they are trying to test. Then you can basically comment out the real code and the tests still pass. It is like we forget red then green when introducing mocking.
I disagreed with that part. Every function usually had some obvious fail modes that can be tested for. eg getting no results from a filter operation, collaborator classes throwing exceptions, parsing malformed strings, even (and especially when) "that can't happen". Even if the test just asserts that the function throws and exception and dies for some edge cases, that's a valid test if you and your team decide that outcome is acceptable.
Clean Code is an excellent book; good job on wanting to become a better developer. Instead of giving book recommendations I will write one of my own :) ## Why are tests valuable? There are many camps when it comes to writing tests (or not). The bottom line is, do you hesitate when you promote your code to production? When fixing a bug, do spend a lot of time manually testing? When you reorganize a core part of your code, do you guess at what downstream code may be broken? These are the main reasons why tests are valuable for me. Does having the test provide me with peace of mind? If so then it is probably worth the time to write it. ## What is a good test? Most tests should be short, sweet, and only assert one concept. In this manner, our tests can provide some documentation on how the code was designed to behave in different circumstances. ### Given {these}, When {this}, Then {that} Since the test is a form of documentation, then the readability of the test is really important. When a test fails, I will want to read the test and understand quickly what caused the failure. I even give my tests meaningful names like "_it_should_add_event_to_calendar_" and "_it_should_throw_error_when_event_date_is_before_today_". ## Readability is important When I am writing really long tests, then it is a sign that the code I am testing was not designed with testability in mind. This happens a lot when I have to support legacy code. Or maybe I am asserting too much in a single test? Edge cases are best represented in separate tests, because I don't want them hindering readability. Sometimes I create helper methods and classes to keep my tests simple. This is fine, but I don't go overboard, because the goal is to increase readability, not to eliminate duplication. If I spend more time navigating than reading, then it is not readable. ## Unit and Integration tests I really like having a couple integration tests for every class, because I don't feel like my code is correct unless all of the collaborators are playing well together. A happy path integration test is a good starting point, and then I cover edge cases with unit tests and mocked collaborators when the interactions are too complex for an integration test. For me integration tests are still relatively fast, so not much of a downside to writing them in lieu of strict unit tests with tons of mock collaborators. If an integration test is going to be slow (i.e. because I'm loading a Spring context) then I definitely put them in a separate test class. For unit-level tests, speed is very important. ## E2E tests I don't have much to share about E2E tests because I don't have a lot of use for them. E2E tests typically take a while to run, so I find myself running them less often while developing. If I have to do 12 manual steps to setup an E2E test then I will run them less often, so I think it is important to automate as much of the setup as possible. If you run the E2E tests in a CI server, then you can hopefully reuse those same build steps on your local machine to keep things simple. ## TL;DR - tests are valuable because they provide peace of mind - unit tests should be fast and readable - mocking is powerful, but I don't like to overdo it - this is just my style, YMMV
So, you test the "happy path" the function in its basic use in the way it is intended to be used. This is a good indicator for later on if you make a change that breaks other stuff outside of that other thing you fixed. Say an object has a particular structure returning out of functionOne() and when you feed it into the next step, it breaks functionTwo()-- it is great to pass tests looking for failures and seeing that the sub optimal outcome was handled properly, but failing tests that should be successful is more important to be on the lookout for.
somebody didn’t read the whole article..
Sadly, when I say edge case I mean that it is in the territory for when I didn't know there was anything for me to know about. These are not happy days for me. Most often it is the hard way. Error log entries are generally where I find them. Errors are super bad for me as I try to handle issues and log warnings when things that should have gone bad were mitigated and user experience was protected as best possible. Logging an error means I didn't prepare sufficiently for that outcome. Generally it makes for sufficient argument to correct the code so that it can be handled and become a warning entry in the future-- with new tests to make sure that the updated code works properly.
Yeah, a minimum is one test to verify the function works as intended. If you can't assert('addTwoPlusTwo() isEqualTo 4'); then it is time for a solid refactor or other logic adjustment. Bar none. It should work in its most basic form. And if nothing else, that test should be there. Since there is no input or parameters-- this particular function, what other test would you write? This is that one test function. Having said that, if you have a function that is purely numeric getPercentageOfRussianGdp(exportProductValueInRubles)-- why not throw in a generic "no alpha characters" test? Or &lt;= 100. And of course happy path test where the conversion of $200,000 worth of potato vodka into rubles for 2016 would output exactly 0.0161550889%.
It was also posted by an Azul employee. It's called content marketing, we're not idiots.
**Sidebar** -&gt; **NO programming help, NO learning Java related questions!** These have separate subreddits - see below. ---- Please, **read** and **follow** the [**Posting Guidelines**](https://redd.it/48eykt) of **/r/javahelp**, where your question belongs before posting there as your question is not acceptable there either as it currently stands. None of the learning related subreddits allows just plain posting questions without the slightest effort to solve them displayed. **Post removed**: Programming help
Hey - it's weird to see me mentioned on reddit! Anyway, I'm not employed by Oracle anymore, so if the question is "they won't pay me to work on JavaFX anymore", then that is correct :-) Of course I can still work on JavaFX - it is an open source project after all.
&gt; If you don't want to pay for a tool to do the rendering, you can use [Apache FOP](https://xmlgraphics.apache.org/fop/), You can use FOP as a regular Java library, and works pretty well. The command line program is still very useful to test the XSL sources. &gt;all you have to do is convert HTML to XML DOM using something like [Jsoup](https://jsoup.org), An alternative is to use XSLT (if the HTML source is valid XML). Jsoup can be easier for someone who has never used XSLT.
Gosh! This sounds like it is the product of a culture that mindlessly applies rules and "best practices" and does not trust employees enough to do their own grown up thinking. What again are we paid for? Can't seem to remember...
Well, are you really unhappy about `String#length()`, `Collection#size()` instead of `getLength()`/`getSize()`? Or about `Object#hashCode()`? 
**Sidebar**: + **Do not post tutorials here!** This is the **second time** you have been warned. Next time will result in a **permanent ban** without further warning. You also need to **read** the **reddit rules** [**What constitutes spam? Am I a spammer?**](https://reddit.zendesk.com/hc/en-us/articles/204536499-What-constitutes-spam-Am-I-a-spammer-) because 100% of your contributions fall under that category. You are a **spammer** and this is against reddit policies.
Well spotted! My bad, I have edited the post to correct this.
There's even less of an incentive if your favorite libraries are also waiting for Java 11. Oh well, it's just cumbersome until we've fully migrated to Kotlin and Docker. :)
Practice is the best way to learn. At first, your tests are going to be shitty and useless but you need to keep writing tests. You can train using coding katas :) When you are confident enough with your testing skills, you can look at outside in and BDD (at this time, you should understand why it is usefull) Never forget the aim is to get a nice testing pyramid on your project. Btw I learnt how to unit test with meetups in my city
I would recommend [The art of unit testing](https://www.manning.com/books/the-art-of-unit-testing-second-edition) by Roy Osherove. Even if the examples are in C#, the basic principles are explained very well.
Here is some hope that you'll still stick around both for your blog and controlsfx. And I hope that this is not a sign of Oracle downsizing it's javafx team. 
I plan to stick around with my blogs and my open source projects, don't worry about that.
nothing stops you from using older libraries with new java versions
Might want to poke Mark Reinhold (@mreinhold) on Twitter to point him towards this. 
I can't say anything about the shortcuts on MacOS and I agree with most of what you said. But I think the shortcuts are a lot more consistent on IntelliJ. Ctrl+F for searching in the file, Ctrl+Shift+F for searching everywhere. Ctrl+R for replacing in the file, Ctrl+Shift+R for replacing everywhere. Ctrl+N to search by class name, Ctrl+Shift+N to search by file name. Etc.
I reproduced this on an Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz: Java 9: Benchmark Mode Cnt Score Error Units ComparsionBenchmark.original thrpt 10 8.916 ± 0.279 ops/ms Java 8: Benchmark Mode Cnt Score Error Units ComparsionBenchmark.original thrpt 10 85.212 ± 1.619 ops/ms
I wanted to play a little bit with Ascii Codes so I wrote a very lightweight "templating" (overstatement) language to write "colorful" output in the terminal. 
It's not even some edge case. I recently upgraded my app to java 9 and I imediately noticed It's using 100% cpu instead of 10-15% like with java 8.
I think this is related to Math.pow. In Java 9 I see that an intrinsic is called: ` 0x00000201d89fb7f6: call 201d8331c4dh ;...e8 ;...52 ;...64 ;...93 ;...ff ;*invokestatic pow {reexecute=0 rethrow=0 return_oop=0} ; - com.openkappa.simd.reddit.ComparsionBenchmark::getSimilarity@168 (line 40) ; {runtime_call StubRoutines (1)}` In Java 8 this was just rewritten as: `0x00000000035996e8: vmulsd xmm0,xmm0,xmm0` Note this has nothing to do with vectorisation, floating point reductions cannot be autovectorised because the arithmetic is not associative. The vector instructions you see are just SSE, and if you trace the assembly closely you will notice lines like `vmovsd qword ptr [r14+rbp*8+10h],xmm1` i.e. there's only 64 bits in xmm1 at any given time.
JMH Java 1.9 after replacing both Math.pows(x, 2) by x*x: http://text-share.com/view/raw/d710ace1 JMH Java 1.8 after replacing both Math.pows(x, 2) by x*x: http://text-share.com/view/raw/1910388c Source: http://text-share.com/view/raw/9ee6f7a8 Still much slower. 
Sure, but you're at ~85% throughput, not an 10-15% throughput now. Define much! :p I guess there's something for the compiler engineers to look at here, and it's not easy to just eradicate that Math.sqrt to eliminate that as well.
Does your library offer any functionality that I can't currently get using something like [Jansi](https://github.com/fusesource/jansi)?
What processor do you have? After removing the math.pow call, Java 9 is ~10% *faster* on my laptop. I will write this up as a blog post with my data and hardware detailed this evening/later this week.
I removed r[d] = num / Math.sqrt(denx * deny); if (r[d] &gt; max) { max = r[d]; } Java 8: Iteration 1: 115549,623 ops/s Iteration 2: 114728,496 ops/s Iteration 3: 115268,581 ops/s Iteration 4: 115906,755 ops/s Iteration 5: 115192,943 ops/s Java 9: Iteration 1: 90528,148 ops/s Iteration 2: 90537,371 ops/s Iteration 3: 90732,139 ops/s Iteration 4: 90368,888 ops/s Iteration 5: 91147,689 ops/s
Intel(R) Core(TM) i7-4810MQ CPU @ 2.80GHz JMH Java 9 with Assembly Code: http://text-share.com/view/raw/73db7741 JMH Java 8 with Assembly Code: http://text-share.com/view/raw/51ddadd1 Source Code: http://text-share.com/view/raw/e2f283b5 I am using C2 for sure. You can clearly see "Compiled method (c2)" in those logs.
- You can define you own "classes"; - You can use imbricated {red {blueBg Blue Background Red Foreground}} tags in your template; Other than that it's still work in progress, but when I have more time I will add more features. 
Whereas I reproduced the original slowdown, our observations conflict now. So it's a question of hardware and JIT compiler settings. I use C2 on Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz. I see, without making any changes beyond removing Math.pow: Java 9: 82.750 ± 7.559 ops/ms Java 8: 68.416 ± 1.670 ops/ms (Which isn't to refute your latest observation.)
You are using Tiered compilation. You can clearly see "Compiled method (c1)" in those logs. :) Try setting -server as a jvm arg, see if your results now agree with my own. Thanks for letting me use the code. I may reduce just to include Math.pow to get a minimal reproduction case.
JMH Java 8 (TieredCompilation disabled, Math.sqrt still exists, Math.pow(x, 2) replaced by x*x): http://text-share.com/view/raw/e050bbf4 JMH Java 9 (TieredCompilation disabled, Math.sqrt still exists, Math.pow(x, 2) replaced by x*x): http://text-http://text-share.com/view/raw/cb81a944 
Data classes are in the works for Java. And want to avoid `NullPointerException`? Use `Optional`. The “war” is a figment of Kotlin programmers’ imaginations.
Java 9: 143305,910 ± 3493,759 ops/s Java 8: 91155,755 ± 1460,577 ops/s Which agrees with my observations. To summarise: there seems to be a performance bug with Math.pow in Java 9, this looks like it's related to a native call. Without it, Java 9/C2 generates faster code, but you see a slight regression against Java 8 when you use tiered compilation in Java 9.
Thank you for your help with debugging it. I will try later today all of this knowledge with my app. Should we report it to someone in oracle?
Just found this, though it was fun to figure it out. https://bugs.openjdk.java.net/browse/JDK-8189172 Turns out they already know.
This is a known issue https://bugs.openjdk.java.net/browse/JDK-8189172
I dont think It's the same issue but probably somehow related and this ticket says that this issue is present in 1.8.0_144. To me 1.8.0_144 is the version where it works fine.
They were fixing correctness of results of Math.pow(base, 2) and they probably made it slow by mistake in exchange.
Well there goes my day. ;)
Someone inform the fox that a hen is missing from the henhouse. 
Idiotic clickbait title - article doesn't use the phrase "holy war".
In units tests I prefer verbosity. When using hamcrest I'd never use the allOf operator, thus negating the argument in the article. Although it means writing more code it clearly lays out what the test is doing.
No Value Types ? :(
NetBeans is the best IDE i have come across in my life. You will find all things under one room. Some advatages that I can think of. 1. All under one umbrella. Netbeans comes with its own JDK (if you want it like that plus with default tomcat and glassfish server). 2. Being a spring developer, it provides all the Spring Boot support. 3. Excellent plugin system. 4. Support of extra languages a available under the JVM roof. 5. Being a javascript developer it provides support for NodejS Stack, which is awesome, I never need to go out to find another roof to sit and code. I also use ATOM, but Netbeans blows off everything. 
I would recommend the two following books: *Michael Feathers - Working Effectively with Legacy Code *Gerard Meszaros - xUnit Test Patterns You will run into a ton of legacy code in the wild and Feathers will give you the tools you need to deal with that. The book also gives some great insights in what actually makes software testable. Meszaros's book covers everything there is to know about automated tests using the xUnit family (and similar frameworks like TestNG). It is a bit dry at times, but he knows his stuff. For example, he explains under which circumstances having (bad) automated tests can actually hurt you.
Thank you for fxexperience.com, reading it over the years has been great.
You're on the internet! Google the name of the book followed by .pdf at the end! Read to your hearts content! Invest in nothing!!
Hah, you have a good point, hadn't thought about that. Although to be fair, through the first couple months of using Java, I was a bit salty at the fact that arrays allowed access directly to the field, and would have messed up calls to `array.length` constantly if it wasn't for my IDE.
So sad jokerConf has already ended...
I noticed this behavior with Eclipse when I upgraded from Java 8 to Java 9 and then updated Eclipse. In my case it turned out to be the G1 garbage collector, the new default GC with Java 9. If the heap size is small, say 1GB G1GC really seems to choke. If I made the heap size 3GB it seemed fine, but ultimately I went back to using ParallelGC and set the heap back to 1GB. 
Disabling TieredCompilation on Java 9 is like 50% performance boost. Why TieredCompilation is enabled by default on server vm?
You're doing a real disservice to the community by repeating things that are false. The classpath still exists. You don't need to (ever!) use modules. If you find that the JDK's modules (java.base, java.sql,etc.) are too restrictive in their visibility, there are options (add-opens, add-reads, add-exports) you can pass to `java`. Please read the JEP (http://openjdk.java.net/jeps/261) or any of the numerous tutorials online.
and [DocRaptor](https://docraptor.com) provides Prince without the large upfront cost
Other question Why Java 9 does that 0x000000001481f950: mov r10,0ccf1b7bh 0x000000001481f95a: call indirect r10 ;*invokestatic pow {reexecute=0 rethrow=0 return_oop=0} Couldnt just do call 0ccf1b7bh? 
Just as a heads up, Spring already supports validation with JSR-303 and JSR-380 annotations. Just annotate your controller inputs with @Validated or @Valid. @PostMapping("/user/") public ResponseEntity&lt;?&gt; createUser(@RequestBody @Validated CreateUserReq request) { will return a bad request for you.
this is just cringe
Awesome reading this guys.. (to see you all collaborating) I miss Java :( Tee closest I get is my crappy android tablet app ;)
By a single month old account with no comment karma and 15 out of 18 submissions to the same website (and one of the 3 self-posts was something about "JavaScript Tutorials" posted in /r/javahelp...) nonetheless. 
I think the indirection means indirection of the memory address, not the register. It loads the word at 0ccf1b7bh and then calls the procedure at that address. It doesn't call the procedure at 0ccf1b7bh, which is what your alternative does.
Both excellent books. I like to think of Clean Code as required reading for anyone on my team. It is all about style, and it can be read in pieces. Honestly, I would recommend reading books that inspire you, whether they are about code or not. When you first start writing code you're going to write terrible stuff, and you'll look back on it later and not like it. The point is, don't let that stop you. Keep writing, even if it's terrible. It's your own work, you're learning, and you're building confidence. All the rest will come with time and practice. I don't want to work with people who write the most beautiful code; I want to work with those who can think critically about the problems they are working on, who can come to me when they're stuck on something, or when they discover something odd, or when they discover something awesome.
It explains a lot, thanks.
each person value things differently so don't fret too much.
Java is being refuctored by Oracle because they didn't get their double digit billion payout after suing Google's Android flagship product for infringement.
\&gt;Describing something kotlin does and billing it as stupid.
What is the equivalent of Kotlin Native in Java?
Vladimir Ivanov filed an issue for this: https://bugs.openjdk.java.net/browse/JDK-8190869
ANSI?
I don't know much about Kotlin Native, but it sounds like JNI (Java Native Interface) may be a possible equivalent/alternative.
Aren't the characters Ascii ?
I'm not exactly sure what you mean but the escape sequences you are using are often called *ANSI* escape sequences. Those escape sequences use ASCII characters but so do many other proprietary escape sequences.
Well, ANSI is a broader term, but the character combinations the library is using are ASCII characters. That's why I named it this way.
Value types are hard when you have so much baggage in your language. They basically have to rewrite how types are handled in the JVM in general. Brian Goetz has a nice technical talk on it.
Thanks for the great answer! I’m going to start making my way through Clean Code just to get a better grasp of the core elements. We used a basic IDE last year and we’ve only began using eclipse now and a lot of the stuff that’s been introduced has gone completely over my head and even some of the core concepts we learned last year are still kind of hazy in my mind. I’m not looking to master the language this time next week, I just want something to gain knowledge and work off of. Thank you again, I really appreciate it!
wro4j is garbage.
Since tiered compilation is turned on by default someone should also look why performance with it is worse than on java 8.
Stay tuned
Does Oracle allow them to use "--Java-- Enterprise Framework"?
People need something to shit on, so your comment was not cared that much...
Kotlin is directed at Android programmers that are more or less stuck with Java 6 / 7.
&gt; -server Is this detected usually? So if you have a specified server installation it goes into -server mode automatically?
bit of a tangent - I tried running an app I had which uses javamail on a machine with jdk9, gives me a noclassdef error for the activation class. run the same code on a machine on java 8, no issues. when I tried googling this, the oracle page result I got was a 404: http://download.java.net/java/jdk9/docs/api/javax/activation/package-summary.html I found on stack overflow some other guys saying it was depricated so .. meh.
What is a specific server installation? I can't see how the JVM can work out what's a server and what's not
This is hilarious. It's like youre having a keyboard stroke or something there
I tried running just "java" with no parameters now on my laptop, and in the help I saw this: -server to select the "server" VM The default VM is server, because you are running on a server-class machine. So looks like it tries to pick a sensible default.
Java 9 gets rid of int?
For example Windows 2016 server. 
Nothing so obvious, but they will probably "fix" other things like make code that is present in all legacy code, and make it run precisely 1 order of magnitude slower, on purpose, like exactly what's happened right here, right now, in this case.
Oh I get it now. You're a troll. Nice.
&gt; data classes are in the works =&gt; unplanned &gt; Use Optional Optional is not meant to be used in these contexts, as it won't buy us anything: * in the domain model layer (not serializable) * in DTOs (same reason) * in input parameters of methods * in constructor parameters https://dzone.com/articles/java-8-optional-how-use-it &gt; Operator overloading is seen as a plus? "sometimes it" + "is" + "helpful" &gt; The “war” is a really figment of Kotlin programmers’ imaginations. Nope, Kotlin developers are looking only for a better Java.
Unplanned? And indeed sometimes it can be helpful, but not in every context.
Learn the definition of troll and the jedi management of trolls as magnificently as I can/have, and I think you'll find your ad-hominem not only misses, but is a testament to why the fool is generally given the advice to be silent, lest people quickly discover is vulnerability.
You can contact me on Twitter (@richardstartin) if you want me to credit you in the post.
Only another 6 months until the next version Java after 10, so maybe it’ll be in that one.
Well, you named it wrong.
I've enjoyed sticking with Eclipse just to troll my ex-coworkers, who were chasing the shiny tools instead of improving their actual code and work practices. I've switched language since then and an now satisfied with IntelliJ, but I'll switch again just to make sure I don't get into groupthink and paid zealotry like your post.
Java native interop is going to keep looking a little sad until Panama.
Seems like the author is telling people to use autowire in constructors because it's painful and only through pain can you achieve better design. I think I will pass on that advice. 
Who the hell does this: public class ServiceTest { @Test public void someTest() { ServiceDependency1 serviceDependency1 = mock(ServiceDependency1.class); ServiceDependency2 serviceDependency2 = mock(ServiceDependency2.class); ServiceDependency3 serviceDependency3 = mock(ServiceDependency3.class); MyService service = new MyService(); service.setServiceDependency1(serviceDependency1); service.setServiceDependency2(serviceDependency2); // what if you forget to set this one? ;) service.setServiceDependency3(serviceDependency3); // your test code } } Welcome to 2010: @RunWith(MockitoJUnitRunner.class) public class ServiceTest { @Mock ServiceDependency1 serviceDependency1; @Mock ServiceDependency2 serviceDependency2; @Mock ServiceDependency3 serviceDependency3; @InjectMocks MyService service = new MyService(); @Test public void someTest() { // your test code } }
_YOU_ are definitely paid to write this. And if not, you should be. Also, I'm not buying. 
Be careful with autowired. Design as simple as possible. Avoid custom annotations and everything
Don't drink tap water it's full of mind controlling fluor.
So, your class has more than 4 @Autowired fields? You fucked up. Cut that nice cohesive code and delegate the shit out of it. You gotta be SOLID!
I would counter this with: what does java.net.url lack that you might supplant? I always favor stdlib over 3rd party where possible so start there - what additional behavior do I need that isn't already provided
Do you know java at all
Sane equality checking for starters.
You can say that, but it's just not true. There should have been an option to simply turn off modules everywhere completely . If I'm missing it, please point me to it. Instead there's a hodge-podge of --add-opens, --add-exports etc. which seems to require a JDK implementor's knowledge of how modules work to get going. Here's my read, let me know if you have a different understanding: Debugging split packages (javax.annotation.Generated anyone?) is at minimum extremely confusing and at worst impossible to fix without repackaging jars. Repackaging of course defeats the simplicity of any package management system (maven, gradle, etc.) since you need to rebundle yourself. Many major libraries have not yet ported to Java 9 leading to errors when you're attempting to use them. An example is the following error from the AWS SDK: ...reads package com.amazonaws.auth from both aws.java.sdk.core and aws.java.sdk.s3... When attempting to debug many of these you'll find open and not-new Github issues for various projects declaring that Java 9 isn't yet supported (I don't blame them). Furthermore, using internal packages aside from Unsafe seems to be undocumented / impossible. Yes, you can argue that people shouldn't be using these, but most performance-critical Java libraries or apps do. Everyone who uses java knows where package names come from, but module names aren't so clear. If I now want to open up FileChannelImpl from sun.ni.ch do I open up java.base/sun.nio.ch or something else? How does one easily find which modules contain which packages? As I mentioned IntelliJ 2017.2.5 support for these use cases is missing as well. So yeah, unless there's a single flag I'm missing or unless you're creating small / basic projects it's a nightmare. I've simply given up on Java 9 as a result, despite how much I want the SIMD updates in the JIT and access to JVMCI. I'm taken aback by how breaking the modules change is, given how good the Java team has been with respect to backwards compatibility. Frankly, I'm a bit surprised that this was at the top of the list of breaking changes they chose to make in comparison to others that have been discussed (type erasure or value types for example). It's particularly and admittedly selfishly frustrating to me since modules literally give me nothing in return for this grief. While others (not sure who...) may have been asking for them, it's never been on my wishlist. Anyways, this isn't meant to start a war - I'd really like to upgrade, but it's just too difficult in the current state. Happy to correct any of these points if they're provably incorrect, but until then I stand by what I wrote.
java.net.URI's parser is a PITA and it's impossible to parse anything generated by a user. This throws an exception?? new URI("http://www.google.com/search?q=cat|dog");
Chrome's google search box thinks `|` is an illegal character is URLs/URIs and replaces it with %C7 before submitting it...
Does one also need to pass "--add-opens jdk.internal.vm.ci/jdk.vm.ci.hotspot=ALL-UNNAMED" ? If not, how does one get access to the JVMCI classes?
https://docs.oracle.com/javase/8/docs/technotes/guides/vm/server-class.html 
Hi. "Effective Java" and "Refactoring: Improving the Design of Existing Code" are the two most influential books I've read for programming in Java. The first is Java-specific and is soon to be released in a third edition and the second is a more general programming book that uses Java its example language. I would also recommend using the free community edition of IntelliJ as it will often make sound recommendations that will teach you both performance and usability aspects of the language as a side effect.
Nothing new. This was already a [link here](https://www.reddit.com/r/programming/comments/78qspx/new_project_z_garbage_collector_zgc_for_java/)
For me server was default but still tiered compilation was turned on by default and it was the reason of bad performance. 
New-ish spring boot (I️ forget the underlying spring support) supports constructor injection without any annotations since 1.4 or 1.5, presuming there’s only 1 ctor (as should be the case with service classes). It allows testing pretty simply, not to mention what others mentioned with the mockito integrations.
No books ever helped me more than these two. They aren't even Java-specific. 1. The Pragmatic Programmer: From Journeyman to Master 2. Release It!: Design and Deploy Production-Ready Software 
The way that you inject your dependencies is secondary. The important thing here is to declare your intentions right, separate between required and optional dependencies and cut the number of dependencies down.
Yes I know a bit, that's why I'm asking.
An "outstanding" pace? No. Java 8 was released in 2014. Java 9 was released just this year. What did we get for a 3 year wait? Java 9 _the API library_ has some cool new features. Java 9 _the platform_ has some neat new ways to package things. Java 9 _the language_ has basically no change at all. In that same time Haskell has gone though 3 version bumps that each add something of note. In that same time Rust has gone through _every version it's had since 1.0_. Java the language is glacial at best.
An equals method which does a dns lookup
When I saw this, I thought one thing, "WTF", except it was in my native language with words that I won’t post publicly online 😉
Is there any non-JVM language that has tooling that comes close? Still really impressed by IntelliJ.
I suppose Python, but it's not as fast as Java so their uses are entirely different. Even so, you raise a good point. I get the feeling that Java is PERFECT for team projects that require concurrent and reliable performance.
Since this is help with *Java programming* it should, as the *plenty hints* on the page indicate, be posted in **/r/javahelp**. Please be sure to read the [**Posting Guidelines**](https://redd.it/48eykt) there before posting. **Post removed:** programming help --- Probably, the downvotes stem from 1. posting in the wrong subreddit 2. nowhere near supplying sufficient information 3. lack of formatting
My experience is that duck typing makes it much harder to have a good IDE experience. How are you supposed to suggest what you can do with a certain object if it could be any type? But maybe Python IDEs have come a long way and I'm just stuck in vim :)
Sorry, I'm on mobile right now, I couldn't see the sidebar. I'll post it there instead.
That's if you want your application to have access to JVMCI (the interface that allows to write a compiler in Java). You shouldn't pass that if you just want HotSpot to use Graal as a JIT compiler.
&gt; But maybe Python IDEs have come a long way and I'm just stuck in vim :) Jetbrains (the company who runs IntelliJ) also run [PyCharm](https://www.jetbrains.com/pycharm/). It has all the amazing tools that IntelliJ has, except it's for Python! &gt; My experience is that duck typing makes it much harder to have a good IDE experience. How are you supposed to suggest what you can do with a certain object if it could be any type? [As long it quacks, treat it like a duck, otherwise, treat it differently.](https://stackoverflow.com/a/17029047) 
this breaks if you want to have nice stuff like property binding to GUI controls.
I suppose I should really try PyCharm or VS Code. But how would they deduce object methods. Consider ``` def fun(x): x.&lt;TAB&gt; ``` Wouldn't it be impossible to deduce x without context?
The IDE would return your x.&lt;TAB&gt; as an unresolved reference, no other errors. Also, if you were to refactor code such as "x" then only everything that's linked will be refactored.
The IDE would return your x.&lt;TAB&gt; as an unresolved reference, no other errors. You can also run the code without error, but nothing will occur as x isn't assigned a value.
Just don't use getters and setters. Getters and setters are for retards that just copy-paste the patterns they're told to copy-paste by books and have no understanding of code.
That's exactly why you should use fields. &gt;Properties allow you to create 'fake fields' (interfaces!), perform validation, lazy computation, etc. So write them in those cases, then, which you can already do.
&gt;But you will for the other 90% of plain get/set. No, becuase in those cases you should use a plain field. &gt;Changing a public field to a method is a bytecode change. It'll break existing applications. So will changing a pass-through getter to something more complex. Oh, they'll still COMPILE. But they will break.
If you change the implementation then it's backwards incompatible anyway.
Ah, typical Java programmer response: some stupid principle they read on a blog or in some stupid book, written by some know-it-all with no actual experience. 
I’m guessing you didn’t hear about the new time-based release cycle. There will be a new release every six months, starting in March. If a feature is ready, it will make it in. For instance, local variable type inference will be added in the upcoming version, 10.
Like this? @Service public class MyService { @Autowired private ServiceDependency1 serviceDependency1; @Autowired private ServiceDependency2 serviceDependency2; @Autowired(required = false) private ServiceDependency3 serviceDependency3; }
You mean fast without values? All variables but primitive ones are pointer.
Hahahahahahahaha *cries*
I heard a little about that, but they will have to really impress me to make up for the fact that the language has been practically stagnant since I learned it in 2006. How many language improvements will we get compared to just library updates? It feels uncertain. Part of me hopes I'm wrong.
From [RFC 3986](https://tools.ietf.org/html/rfc3986#appendix-A): query = *( pchar / "/" / "?" ) pchar = unreserved / pct-encoded / sub-delims / ":" / "@" unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~" sub-delims = "!" / "$" / "&amp;" / "'" / "(" / ")" / "*" / "+" / "," / ";" / "=" No '|' in there.
 &gt; *cries in percent-encoding* FTFY
`--permit-illegal-access`, a.k.a. the big module kill switch, exists in Java 9. There's no guarantee it will exist in the future.
Yes, that how you mark autowired as optional. But this still doesn't discourage you from adding additional dependencies. You just add, and add, and add, because you don't care, you just add another field, everything somehow works, but the future maintenance of this code will become more troublesome with each added dep.
You can do that with constructor injection as well. So what exactly was the point of the article?
To make you think when you add another dependency.
I'm not going to argue with you on fundamental concepts nearly two weeks after.
Mutation testing is a way to measure the quality of the tests and whether it is really testing the underlying code - so this can be measured through an automated process too. For example: http://pitest.org/
You don't have to deal with pointers like C. 
“There are only two kinds of languages: the ones people complain about and the ones nobody uses.”
nothing new https://www.youtube.com/watch?v=ySXlsZDJMgc 
You don't have to deal with memory management. You don't have pointer aritmetic. But you can get java.lang.NullPointerException. 
That's okay, you're allowed to admit you are wrong.
This is how I feel about end to end testing through the ui. On web and mobile.
Thank you for this link, looks interesting.
Nothing anymore. [OkHttp](https://github.com/square/okhttp) has had a perfect solution for quite some time already: [`HttpUrl`](http://square.github.io/okhttp/3.x/okhttp/index.html?okhttp3/HttpUrl.html) (do not miss the builder in there, too).
"If something is painful, consider not doing it" seems reasonable to me.
Apparently there are also those languages that are used and relatively few complain about ... for a while.
Indeed. It's worth noting that most of the jobs are with languages in the second list... with the notable exceptions of Python and Javascript. Python makes sense (though I'm surprised it isn't ranked more closely with Ruby given their similarity), but I find Javascript's ranking surprising. JS gets a lot of hate, and a lot of it is deserved imo...
This article adds exactly nothing to the original article.
To save anyone time of reading this article it says says GC logs are important but hard to read so use a tool. 
Everyone has a monster, but some of them are very harmful. 
This doesn't solve the problem. Firstly, the option has now been changed to "--illegal-access" with valid values as per: http://mail.openjdk.java.net/pipermail/jigsaw-dev/2017-May/012673.html Second, this flag is only for java and not for javac. As such I still don't see how to *compile* code without modules thus making it difficult to run said code. 
ROFL that C# is more disliked than Java. Good work Microsoft. 
I wouldn't call Bertrand Meyer some "know-it-all with no actual experience" but whatever. This principle has since then been used very successfully in C#, Scala, Groovy, Kotlin and C#. I'm sure, one day you'll understand why it's a good idea to follow. 
I could have used a method like `isDomainRelative(uri)`. It would return true or false depending on whether a browser would send you to another domain upon receiving that URI in the `Location` header of a redirect response. For example, the inputs `//google.com`, `//abc-.google.com`, and `//////google.com` should all have an output of `false` because they all send you away from the current domain to google.com. In the `java.net.URI` class, the presence of the `isAbsolute()` and `getHost()` methods makes it seem like detecting domain-relative URIs should be very easy, but that was not my experience. (Try it with the inputs I mentioned.)
[Original NON BLOG SPAM article](https://stackoverflow.blog/2017/10/31/disliked-programming-languages/)
You may test several Java decomilers here - http://www.javadecompilers.com/, inspect the results and and choose which one is better for you.
I think I see. So instead Graal accessing JVMCI and using that as an API, it instead "overrides" it by using: --upgrade-module-path=graal/compiler/mxbuild/modules/jdk.internal.vm.compiler.jar Is that correct? 
Use java.net.URLEncoder?
Event bus is useful for actions at a distance and avoiding callback he'll. E.g. after you sign in 20 things might need to adjust in your app. An eventbus message works well for broadcasting state changes globally to those who care. Guava is good but a massive import. Honestly not a good choice for Android work but fine for most java projects.
I was having a very hard time finding the issue with partial classes. I love them and use them because they just make so much sense. I have found that I'd like enums to have more flexibility in c# though. Being able to have extra attributes on enums is handy but I have found work arounds.
Basically.... JooV is coming?
eventbus seems interesting. i'll give it a look. :)
Great, let us know if you find good use cases and how it goes. :)
JavaScript has changed a lot recently. A good analogy for how we use it these days is to think of it like this: JavaScript = Assembly ES2017, TypeScript, etc = C, C++, Go etc JavaScript powers web applications but writing it by itself is error prone. We use higher level languages that compile to JavaScript. That's why it's matured so much in industry.
PS.: Anyone using any form of distributed event bus? E.g. posting events on the server, which are delivered to clients (web, mobile).
Vert.x comes with an excellent distributed event bus that stretches all the way to the client via SockJS.
&gt;I was having a very hard time finding the issue with partial classes. I love them and use them because they just make so much sense. Must be some "Java is the true and only OO language" bullshit. I met a few programmers that are like that. Public classes should be on its own file always or it's wrong! Namespace should always go along with the directory structure or it is wrong! Not having type erasure is plain wrong! Events and delagates are wrong you should use patterns! Lambdas are wrong (before Java 8)! Some crazy people that drank too much of the Java Kool-Aid. &gt;I have found that I'd like enums to have more flexibility in c# though. Being able to have extra attributes on enums is handy but I have found work arounds. I actually prefer C# enums but I come from the C and C++ school. I hate that I can't define the underlying type to be anything though. The type-safe enum pattern is bullshit. But other than some type system issues I like them more.
Nice! What are your common use cases? Kicking off a request with OkHttp? Parsing a URL and trying to interpret it?
I think that's pretty disingenuous (I work with Javascript daily). ES2017, TypeScript, etc, still suffer from the legacy of supporting ancient Javascript and are syntactically nearly identical. Assembly is radically different from higher level languages like C, etc. All those things you listed are just updated versions of Javascript - but they should have arrived 10 years ago. It has matured and improved, and I do like using it a lot of the time. But the whole ecosystem is a mess and the permahype around the latest javascript version or must-use library just exacerbates the problem as developers bounce to the latest library that does exactly the same thing as the last popular library plus a tiny bit more, but requires you to learn a whole new library. Javascript takes the 14 competing standards issue and turns it into the 100 competing standards issue.
does it work without the rest of vertx?
We're using an event bus ([MBassador](https://github.com/bennidi/mbassador)) to ... run things that should not know about each other in a complicated backend server. I'll take a look at this one again, it's nice to hear that you made it non-Android-compatible, too!
Seems like a complex product landscape. Got lost and didn't catch the essence what it is about. ;-)
Interesting, is your server request/response based? Wonder how that fits in...
I don't think so, but vert.x is pretty lightweight and designed as a library.
I use Netbeans. I think it's much better ergonomically than IntelliJ. Netbeans settings are nicely organized and you can find required settings without using search. Netbeans GUI is better organized. Panels contain common functions, in intellij every plugin has it's own panel. In intellij you have separate gradle panel, maven panel, ant panel, ivy panel, etc. It has better maven support. It has better mouse support: you can fix all warnings in the file, just by clicking yello light bulbs on the margin without touching keyboard. It has better scrollbar for mouse access. It has better code completion. Netbeans fills method arguments automatically when you choose method from list of suggestions. Netbeans shows javadoc popup alone with list of code-completion-suggestions. Intellij can be configured to behave like this, but it has bugs with keyboard focus and places javadoc popup inadequatelly. Netbeans lacks some refactorings, but supports most of intellij's ones. Netbeans has worse font rendering, but it should be fixed in Netbeans 9 on JDK9. I think netbeans is more responsive or feals more responsive...
Deep within the bowels of a complex system that did lots of field injection, a dependency of a class eventually became null and started causing NPE. No developer on the team was able to reproduce this error and it only occurred months into the application running. Restarting the application fixed the problem. I spent so much time trying to debug that problem with no success. To this day, the notes for that application instruct the support team to restart the application when that error occurs. From now on, I always use constructor injection with final fields. I can be sure, when my objects are constructed, that I either do or don't have the right dependencies and fail fast if I don't. Personally, I don't find the brevity of field injection sufficient for the amount of time I wasted trying to resolve that one error and I will never use them again for required dependencies.
I don't think the needing to support ancient JavaScript is that big of a problem, though. There are features that are missing in JavaScript, where developers would have to do weird hacks to simulate, that these new languages can support, taking care of the implementation during the compilation process. I only mentioned modern JavaScript and TypeScript as two examples, but there are also languages like Kotlin that support compiling down to JavaScript too. The reason I think the assembly analogy works well is that if you think about it, modern languages that compile to machine code are also stuck supporting "ancient" assembly. For the most part, the instruction sets available don't change. Yet we still see new features being added to C++ and new languages like Go being created. They're coming up with different ways to convert the high-level code to assembly. Basically, I feel that the JavaScript/TypeScript that people write these days is an effective abstraction.
Any good quality open source implementations you recommend?
We know.
How did you disable tiered compilation if server was already selected by default?
Hah, yes :) Well jOOλ already has tuples, so perhaps there will be a value type version of those...
Proguard should strip away all unused stuff anyway
Does eventbus support cross-jvm communication? We heavily use JMS at work, but it's a bit unwieldy and suffers from performance. Something smaller would be nice but that would require cross-jvm talk since we're running about 20 different servers. We've been looking at Kafka but haven't committed to anything yet.
No support for named path params is a bit of an inconvenience, but it's still my favorite library.
I love the "adopt a cat" analogy. The cat poops and smells, and that's a fact that will never go away. Like so, code introduces bugs and smells, and that's also a fact that will never go away. Might as well plan for the inevitable instead of trying to ignore the smell until your house becomes full of cat poop
Yes, this is a gigantic thing in distributed systems. Big and small Enterprise systems use message brokers extensively. An EventBus is kind of a subset of functionality of a full message broker system. Look up things like: JMS, AMQP, RabbitMQ, ActiveMQ, Amazon's SQS, Redis, etc.
That will allow you replace the version of Graal that comes with the JDK with your own version. It will still use JVMCI from the JDK though.
Yeah, I remember using good old JMS in my previous life. In that more enterprise-y area Kafka is the new cool kid, no? My question aims for something more mobile friendly. It might be a SaaS, maybe something like pusher.com.
I'm using mbassador for a long time because it is so simple and even more important: it is darn fast. Are there any Benchmarks for EventBus comparable to https://github.com/bennidi/eventbus-performance/blob/master/README.md ?
Not at the moment. Please let us know how your evaluation goes. Kafka is a rather huge solution (like JMS). Wonder if there room for something more lightweight...
Why not use JMS?
Is it *really so difficult* to read the **sidebar**? **Do not post tutorials here!** These should go in **/r/learnjava**.
Not like that. We did some [comparisons and benchmarks against Otto](https://github.com/greenrobot/EventBus/blob/plain-java-new/COMPARISON.md), which basically is a port of Guava's EventBus to Android. Our EventBus was up to 3.5 times faster. On Google Play, we have a (performance benchmarking app)[https://play.google.com/store/apps/details?id=de.greenrobot.eventperf&amp;rdid=de.greenrobot.eventperf] (sources on [GitHub site](https://github.com/greenrobot/EventBus) ). It can post &amp; deliver up to 400,000 events on my 2 year old Nexus 5x. Is that fast?
Aren't there donzens of Message Oriented Middleware and Reactive Stream (including JDK 9) implementations available nowadays?
Probably because it's running embedded without the need for transactional persistence.
How to categorize this one, more like MOM (RabbitMQ, JSM, ActiveMQ,...) or more like Reactive Streams (JDK 9, RxJava, Akka, Spring Reactor, Vert.x,...)?
I'd say neither of those. It's far away from enterprise-y transactional MOMs and there are no streams. Just plain publish/subscribe with in-process/memory events (POJOs).
Kafka, ignite, whatever you want! Pushing it to the client would just require another agent on the bus. 
Interesting for smaller projects. Could you expand the example section of your documentation when you have time?
Vert.x core is the only required dependency. Every other module is plug and play (in a Maven / Gradle kind of way) so you only add the stuff you want. As a consequence, it’s very lightweight. In addition, the traction it’s picking up in enterprise means that [Red Hat are moving to support it on OpenShift - Kubernetes and Docker](http://middlewareblog.redhat.com/2017/05/04/vert-x-for-reactive-programming-in-red-hat-openshift-application-runtimes/). This gives people and businesses the confidence and support they really need to try out these new frameworks.
The information presented here has already been posted **several** times in this subreddit. Your contribution does not add anything new and thus is **spam**. **Post removed**
 - an equivalent to JavaScript's `encodeURIComponent` and `decodeURIComponent` (See: http://stackoverflow.com/a/14424783 for an example) - domain parsing with knowledge of public suffixes a la Guava's `InternetDomainName` (https://github.com/google/guava/wiki/InternetDomainNameExplained) - Support for partial URLs (e.g. `reddit.com`, `www.reddit.com` instead of `https://www.reddit.com`) One of the better libs I've ever come across is https://github.com/michaelklishin/urly. Some nice examples and maybe implementation tips there
no();
There's a [plugin to use the Eclipse Code Formatter](https://plugins.jetbrains.com/plugin/6546-eclipse-code-formatter) in IntelliJ.
I'd say, this is more about you, than vert.x.
0xCAFEBABE https://dzone.com/articles/the-magic-word-in-java-cafebabe
Hi! Check youtube tutorials. Pick a topic you like and you'll find a ton of stuff there. 
LOL. I had forgotten about that one. 
Thank you for that helpful answer (unlike the one below). Of course this plugin wouldn't exist if it was 'easy' to get the two styles to match.
Start with single class and single static main function, and pick up k&amp;r. When you hit functions, add public static functions, when you hit structure, use public data only class instead. When you hit pointers, start pick up a C++ book and learn references and enjoy the free garbage collection and use new as if there's no consequences. If you accidentally glanced other C++ verbiage, put down that book and find a Java one.
To me the only real way is to write real code. Write a program that does something useful. Google when you are stuck. Stackoverflow can go very far. Lessons suck because they don't give real-world examples. 
Lots, rabbitmq, kafka, vertx, Akka event bus, SQS on AWS...
I'm kind of worried the sarcasm is going to be lost on a lot of people, when it was published on his original blog, it had a sarcasm tag.
Not very great list, all trivial
FYI: even with jlink startup time is slower than on Java 8
 throw new AbstractSingletonTransactionAwareStatelessPersistenceManagerServiceProviderResourceDependencyInstanceInterceptorAspectFactoryFactoryProxyBeanStrategyBuilderLocator.PersistenceAnnotationManagerFactoryInvocationDispatcherHandlerProcessorDefinitionInstantiationException(); It fits in a tweet, so it should fit on a shirt.
Surprisingly deep and neutral. This is a useful spring boot and server organization example.
What part of **Do not post tutorials here!** is unclear to you? This is your *first and only warning* next time will result in a ban. **Post removed**
**Sidebar** -&gt; **NO programming help, NO learning Java related questions!** These have separate subreddits - see below. + **/r/javahelp** is for *programming help* + **/r/learnjava** is for *learning java* related questions Each subreddit has plenty resources linked in the *sidebar*. ---- That said: do the MOOC [**Object Oriented Programming with Java**](http://mooc.fi/engligh.html) from the University of Helsinki to get a good understanding. It has lots of graded practical exercises.
-XX:-TieredCompilation
Would something like this work for you? Url page = Url.parse("http://site.com/pages/index.html"); Url link = page.resolve("//google.com"); boolean sameDomain = page.host().equals(link.host()); (`sameDomain` would be `false` in this example)
And a port sniffer to guess the scheme :)
I've seen named params used for parsing (you make a template, and then can access a map of the results), but also for URL creation, where it's used like string formatting. Were you thinking of one of those? Something else?
Try running this: assertEquals(new URL("http://google.github.io"), new URL("http://mockito.github.io")); 
&gt; Summary: Eclipse Collections UnifiedMap has ~50% smaller memory footprint compared to JDK HashMap, but that comes with a minor performance implication. not sure if ~25% is a minor performance implication.
Is there some comparative benchmarks?
public static void main
This is very likely. I totally lack context. On the homepage they just say something about non-blocking event and then there is a code example for starting an HTTP server - the connection to events is not very clear. I have the feeling communication on the web site could be improved.
Did you search for tutorials? There are quite a few already.
An absolute value is a strange benchmark value xD If I understand correctly, the delivery rate is about 3900 deliveries per second? That's measured on a phone, mbassador handles 11.500 invocations per ms (milisecond!). Since this is measured on different devices and with different semantics regarding messages/delivery, I don't see how this could be comparable, but the difference is... I don't know, factor x000 ? Maybe you could just integrate mbassador in your benchmarks, because adding it should be fairly easy. And maybe you could provide benchmarks for desktop setups, too?
Yes, this is a good idea - not sure we have the capacity right now. It would also make a good blog post for a volunteer...
really really helpfull, great stuff.
**tl;dr;* `@RunWith(SpringJUnit4ClassRunner.class)` --&gt; `@ExtendWith(SpringExtension.class)`
As a Red Hat employee and avid user of Vert.x, I will certainly bring this feedback to the attention of the core team. 
Is is hard to cover all topics on the homepage but navigating to the documentation section you would see more about the eventbus and how it scales from a single jvm to multiple jvm or network nodes as well to non java run times as web browser , node, python, dot net, etc...
Vertx does this with the bridges. Using the sockjs bridge you can extend the eventbus to the browser and use it as a member of your eventbus. Same for other runtimes than java with the tcp bridges
Pretty sure OkHttp doesn't support it.
Nice try :) I don't think I have this capacity either, I already use mbassador and I'm happy with its performance :)
I agree. It wasn't quite far enough out there to be obvious that it is sarcasm. Until I went back and saw the "side-splitting" in the subtitle, I just thought the guy was a javascript guy coming to java.
How about branded and fully compilable code? public class Hello { public static void main(String[] args) { http://your_club_url_here.com System.out.println("Welcome!"); } } p.s. If it is not obvious put this snippet to your favorite IDE and see the colored version of it.
This is accurate. Jdk9 + jlink + CDS is about 10% slower than jdk8. jdk9 does a lot more at startup, especially if you use a modulepath as well as a classpath. [ByteStacks](http://cr.openjdk.java.net/~redestad/bytestacks/bytecode-startup-analysis.html) is the tool to investigate it properly.
Maybe you have thought about Vert.x like it was a library as well? I think, if you consider that it's a platform,things become a bit easier.
I'm pretty certain the overhead here is due to the module-path startup paths using a little bit of lambdas and method references, which will cause some one-off initialization costs that will be amortized away on almost any real application. Running off the class-path rather than the module-path ought to squeeze quite a number of milliseconds off of the startup measurements. While I wrote bytestacks and am glad to see it mentioned, there are definitely more readily available diagnostics you can run on a product build. For example, `-verbose:class` to dump loaded classes and `-XX:+UnlockDiagnosticVMOptions -XX:+PrintTouchedMethodsAtExit -XX:+LogTouchedMethods` to get a detailed (but unordered) picture of what methods were executed.
It'd be great if you could run your experiment on one of the latest 10 EA builds to see if this particular startup knot has been untied already. 
If you're a student, I believe you can get the ultimate version of Idea IntelliJ for free, also, I recommend the IDE Feature Trainer plugin for IntelliJ if it's your first time using it.
also need a @autoTest annotation that 'dry run' through methods keeping track of the statements that are called, and maybe recursively going through each branch of a if statement. A hashcode of calls can be compiled with the class, so if anything changes, the test will fail and allow the developer verify its still doing the correct thing. Awesome - no more writing test cases. 
Hmm, I think that would work, assuming `resolve` mirrors browser behavior for redirects. The context of this was detecting [open redirects](https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet). There's an `IsLocalUrl()` method in some C# library that seems like what I wanted: [article](https://docs.microsoft.com/en-us/aspnet/mvc/overview/security/preventing-open-redirection-attacks). I say "hmm" instead of "yes that would definitely work" because I'd need to have the current URL in hand (the site.com one) in order to answer my question about the redirect URL, and I was suggesting it would be nice to only need the redirect URL.
Oh thank God yeah I didn't get that I thought they were just a dumbass
Yeah 10-ea+30 is the same speed as 8u144
Good! We've been optimizing startup quite a bit in 10 EA builds already, both generally and the `java -m` run modes in particular.
Thanks! These are all good. For partial URLs, would you have a scheme/protocol that you'd want it to fall back to? Or would you be resolving it within the context of an HTML page against the page's URL?
Nice :) The linked article is for ASP, so I'm assuming that the server's runtime is configured to know the serving domain. 
For my use case it's always http, but that's a good point that it doesn't make sense to assume. Maybe it could be configurable, so by default it might fail (no protocol!) but with defaultProtocol=http it will assume http
What about a utility method that takes a URL from the wild, and properly escapes it according to RFC 3986? public static String escape(String url);
I hope this is sarcasm
I was scared up to a point, then amused, then I got to see the comments, then I've fixed my vote. 
Totally not spam, right? I'm just asking because your whole contribution to Reddit consists of submitting udemy courses using multiple (!) indirect links including link shorteners. Seems... odd. Soooo... really not spam? Promise?
and if you need a [logo](https://www.all-statecredit.com/wordpress/wp-content/uploads/2015/07/javascript.png)...
The attached list is pretty great and a lot of items are pretty much nobrainers.
Eclipse, because we always get the development environment configured by the customer's IT team, according to their internal developer images. Actually my favourite Java IDE is Netbeans, but only get to use it privately.
You can use a singleton to convey your club is unique: public enum CodingClubSingleton { INSTANCE; } If you live in the US, I can use my Amazon account to put the shirt on Amazon for you. So it's always available online for you to order and you can choose your color and size. As I'm the one who sets the price for the shirt, I can set one that suits you. It also helps me rank better in Amazon so it's a win-win :) 
I havn't even tried Java9 yet and he's already talking about Java 10+, much less uses much from Java 8.. I guess its my fault for being slow, but to be fair, my last job was only just starting to use Java 8. 
I understand where you’re coming from, but just because some companies decide to adopt slowly does not mean the architects shouldn’t continue to evolve the language. 
Java 9 can be difficult to use now, if you use it with some old framework. But there definitely is no excuse for not having used Java 8.
I've always felt that exposing file operations via static methods on java.nio.Files makes testing awkward since you can't (easily) mock it out. How does everyone else deal with this?
Will read this right after my lobotomy 
Read what? It’s a video.
lmao XD javascript &gt; java 
amazon are dicks to sellers
I wouldn't want to go back to Java 7 (too many goodies in Java 8) but I think I'll easily skip over Java 9. &amp;nbsp; I wish, in addition to what's landed, they had a 'we _expect_ these JEPs to land' list. It's great not to overcommit but that shouldn't mean not giving a list of intentions. I mean, are value types or data classes even likely to make it by JDK 10? They've got something like 6-8 weeks to be 'feature complete' and I have no idea if those are even close to coming in (data-classes is very new so I'll guess not on that one).
wait what the fudge? oracle is open sourcing things?
Since they can't get money with Licensing Agreements, Settlements or Lawsuit is just baggage for them.
So, basically they are afraid of Kotlin, Scala ... and trying to keep up in the race by taking faster steps. Actually I like that. Value types, pattern matching, local variable inference, variable deconstructing, co-routines, continuations and all make it very much like Kotlin. Although Null safety is a great feature in Kotlin that I would like.
Value types are going to benefit all jvm languages. It’s not something possible with any of them right now because it’s a limitation of the virtual machine.
Using actual files.
Personally I prefer Kotlin now, but I am curious about next version of Java. However I don't afraid of Kotlin, I am happy of Java.
java.lang.NullPointerException But i like this: "What is a NullPointerException ?" 
We're in-process, so we don't need such a beast. A smart event bus was all we needed. Fast, lightweight, decouples things nicely. 
https://github.com/google/jimfs "Jimfs is an in-memory file system for Java 7 and above, implementing the java.nio.file abstract file system APIs." Works very well. Except file permissions, but that's a reasonable thing to omit.
Why has this guy not been banned yet?
This doesn’t have anything to do with being “scared” of other languages. They just don’t want to have to wait another four years to release small features and improvements just because one (Jigsaw) has been scheduled for the next version and keeps getting delayed. 
Every village needs it's village idiot. 
Isn't OpenJDK already GPL?
I've created shim classes that wrap the static methods as instance methods. Eg: public class Clock { public Instance now() { return Instance.now(); } }
But don't you think that this is in response to Java getting a reputation as being a slow to evolve language - which those language used against it or at least made possible for those language to come to limelight. And sure, not waiting to release smaller features is "the" reason but still ...
I don’t think any JVM language “used” Java’s reputation against it. It’s not a competition and I don’t think any language designer would think of it like that. 
Now that's a vital mindset. Finally somebody like me :) Seems that most people are black or white.
If I am understanding your request correctly, [here](http://openjdk.java.net/projects/jdk/10/) is such a list. Value types are not going to make it in, as they are still working on semantics.
i think to get java upward, they need a good GUI framework for java..
Have you heard of Swing and JavaFX??
'escape' is the wrong word. I suggest something like 'parse' or 'parseLiberal'. To get the effect of the above: ModernURL.parse(userInput).toString() [This](https://url.spec.whatwg.org/) started IIRC as an attempt to document browser behaviour. I don't know whether it has got anywhere. URLs (I'll use this to include URIs and IRIs) are surprisingly complex, given that they're really quite simple internally (scheme, host, path, etc). IPv6, punycode, equivalence (which level?), scheme-specific validation, and so on. You'll also trip over stuff like the file scheme (very widely misunderstood and badly implemented) and the fact that even smart people don't realise that form encoding (' ' -&gt; '+') is different from path encoding (' ' -&gt; '%20'). 
Neither of those will be in for 10, and in fact there's a good chance data classes will be in before value types. It's just a way, way simpler change.
I've written my own benchmarks and got some different results. This is a "Hello, world" application in Scala: Java 8 218 ms Java 9 (Classpath) 247 ms Java 9 (Modulepath) 270 ms Java 9 (JLink) 190 ms Java 10 (Classpath) 216 ms Java 10 (Modulepath) 269 ms Java 10 (JLink) 169 ms I used -XX:+UseParallelGC for all runs because in Java 9 the default GC is G1 which has a bit slower startup. 
For some languages with weak backwards compatibility over point releases that would actually be useful. 
Or just use [jOOQ](https://www.jooq.org/) and save yourself a ton of headaches.
&gt; I spent so much time trying to debug that problem with no success. Could you not have just autowired a setter for the field (instead of the property itself), and dumped the callstack if it was set to null?
swing has very old and look and feel, javafx is good but is quite difficult, there should be a front end framework for java...
It doesn't have to! IntelliJ uses Swing.
I don't know why this would be surprising. Oracle has tons of open source projects.
Or, use `java.time.Clock`
Just spend some time with JavaFX. It's the best UI framework on the planet right now.
Swing itself is open to whatever laf you want to have. There are very pretty laf out there. IntelliJ is also a goot example of a clean nice and somewhat modern look and feel. I don't know exactly what is difficult about JavaFX as I have only little experience with it - but what should be the advantage of having a front end framework tied to Java? A seperate front end framework could have the advantage of being independent from a backend. But that's also a disadvantage, that's the reason we have frameworks like Vaadin, or JavaFX too. JavaFX IS the frontend framework, but tied to Java and the backend in an amount that you dont' have to hassle between the (sometimes too) loose coupling between front and backend.
What, another one? I thought you already had that lobotomy. 
Please, don't ban him. I laugh every time when I see his messages.
Odd "Java 10 (Modulepath)" is more or less unchanged relative to "Java 9 (Modulepath)" - care to share your benchmark so I can try to reproduce?
You could argue some of them got tired of waiting Java to evolve.
Yo you look like Ragnar Lothbrok
That's not a bad thing, but then what libraries do you still have access to? Same old Java ones? Or do you need Kotlin ones, maybe even written with them "being native" in mind?
Using roles for access control is not role-based access control - https://iamfortress.net/2014/11/24/using-role-for-access-control-is-not-rbac/
&gt; Kotlin is a statically typed Java language alternative that began on the JVM. **But many platforms can’t run JVMs**, restricting the use of Kotlin to JVM-friendly platforms like Android. JVM runs pretty much everywhere. I don't understand that line. Can someone explain?
Seems like a bogus line, but maybe then want to wrestle out from under the constraints of the JVM.
Looks like we have a future contributor :)
I really like the REPL feature. :)
perhaps they're trying to say 'the jvm isn't suited to all project requirements', and there kotlin-native would be an option.
NullAway maintainer (Manu) here. I'll look into the AND expression issue and the issue with using CF `@Nullable`. Both of these things should work.
it will probably require a proper kotlin stdlib. i think they're directly compiling kotlin to native via llvm, so java stuff won't be available.
Is it *really so difficult* to read the **sidebar**? **Do not post tutorials here!** These should go in **/r/learnjava**.
**Sidebar**: **Do not post tutorials here!** This is your *first and only warning*. Next time, you will be banned. **Post removed**
doesn't run on iPhone
Eeh, as much as I might not like to admit it, WPF is pretty fantastic. Not really experienced enough with both to say which is best but WPF is certainly more mature. I do enjoy working with JavaFX though.
Apple doesn't won't that or i'm wrong?
It's not really "everything" a programmer needs to know. None of the bullet points have any code samples, and many of them don't link to anything that does.
I'm really impressed with the way Java is aging. In about a year (version 11), Java (openjdk) will most likely have (existing and new features): * modules, lambdas, traits (interfaces++), data classes, pattern matching * revamped APIs for: date/times, concurrency, networking, etc. * a REPL and probably AOT compilation And hopefully some new libraries designed with all these features in mind. In the end, even though the syntax is not perfect, it will give a run for their money to all the jvm languages.
I don't need to know anything, because Java 9 is apparently now a beta for 18.12 or whatever the actual LTS release is going to be called.
Just FYI for you and /u/js4all it is quite satisfying to see two folks go back and forth and solve an issue with minimal fuss. 
One can never have too many frontal lobotomies...or is that bottles in frontofme? 
LOL, Java is still widely used. I'd hazard a guess that being fluent in Java will give you more opportunities out of college than C++. I'm in my late 30s, but when I was in engineering school, they were switching from C++ to Java, and last I heard they were going to Python. And this is a top 10 computer engineering school. That said, unless you have a specialization you want to get into that almost mandates a language (data science = python, games = c++, etc), you won't be hurt by knowing more languages.
I'm one of the folks you'll try recruiting. I haven't actually interviewed for a job in almost 8 years. 
I work in a consulting firm and a good chunk of our business is taking these brokedown slapstick constructions in whatever was the flavor of the day, and moving it to a modern platform with mature engineering practices. 
care to try that again?
Awesome! :)
&gt; revamped APIs for: date/times _Again?_
Hope to see some good java devs on this one
Embedded platforms might not want the overhead.
Probably they're trying to imply something like: "But walled gardens won't let you run apps that need the JVM"
No, of course not. That's why I said existing and new features. What I meant is that if you add up all the new APIs that were revamped over the years, you will almost get a new SDK compared to the original ( &lt; 1.5). I guess what's holding back Java now it's us devs that don't adapt quickly enough :)
Oh look, Commons-Lang3 doesn't support `java.time` with its time functions. But then commons-collections only gained java 5 features in 20 fucking 13. We should expect the ability to get a `LocalDateTime` around 2023.
Both of these issues are fixed in NullAway 0.1.8 (should hit Maven Central soon). Hope you give NullAway another try! If you find more problems please [report an issue](https://github.com/uber/NullAway/issues) or [let us know on Discord](https://discord.gg/QH2F779).
Mark Reinhold very explicitly rebuked this. Non-LTS versions are not betas. Additionally it looks like they're going to stick with the same numbering scheme so after 9 will be 10, 11, etc.
Mark Reinhold very explicitly rebuked this. Non-LTS versions are not betas. Additionally it looks like they're going to stick with the same numbering scheme so after 9 will be 10, 11, etc.
This is a bugfix release that fixes a parser bug where the first argument following a clustered options was treated as a positional parameter. Picocli 2.0 accidentally introduced a transitive _required_ dependency on `groovy-lang`. This is not desirable: Java applications using picocli don’t need this dependency. Groovy scripts using the `@PicocliScript` annotation also don’t need this dependency because the Groovy runtime provides it. The picocli 2.0.3 release makes `groovy-lang` a compile-only dependency so it doesn’t appear in the POM. This release also includes a minor enhancement to support embedded newlines in usage help sections like header or descriptions. This allows Groovy applications to use [triple-quoted](http://groovy-lang.org/syntax.html#_triple_double_quoted_string) and [dollar slashy](http://groovy-lang.org/syntax.html#_dollar_slashy_string) multi-line strings in usage help sections.
&gt; less crappy Javascript code I love how "less crappy" always becomes the qualifier when talking about JavaScript. 
JavaScript wasn't called ECMA script until the big browser makers Netscape and Microsoft went to ECMA to have it standardized. The officially released implementations were always called JavaScript (for Netscape) and JScript (for Microsoft, released about six months later). Rumor is that Netscape's JavaScript went through several other names related to coffee etc. before they just said fuck it, Java from Sun Microsystems is going to take over the world, let's name the new script something really similar.
This reminds me of that kid a few years ago who made that incoherent rambling post in /r/learnjava that concluded "java gots plenty of superclasses"
Not in front of a computer right now, but I think you can set a 'watch'. This is a permanent inspection on some value or expression. Another tip: when you set a breakpoint, you can right click the breakpoint icon in the gutter and make it a conditional breakpoint. So it will only hit that breakpoint if a condition is met. It's great for breakpointing a loop for a specific iteration of that loop
I have never seen a Swing LAF which actually matches the native platform. They always stick out.
"Don't believe a word we've said."
https://github.com/eclipse/org.aspectj/blob/master/org.aspectj.matcher/src/org/aspectj/weaver/patterns/HasThisTypePatternTriedToSneakInSomeGenericOrParameterizedTypePatternMatchingStuffAnywhereVisitor.java
Retries are great if used correctly, but using them correctly can be non-trivial. If you add retries at multiple layers inside your call path, you risk increasing the number of calls to the failing resource exponentially, which make it even slower to recover. You also have to think about what behavior the caller is expecting. If you increase your request latency by an order of magnitude on retries, the caller may have stopped listening for the answer, assuming you’re dead. If the request is idempotent, it can be better to fail fast, and let the caller retry. 
Well it's not technically a beta, but I don't see Non-LTS versions getting wide adoption. I know my employer is not even considering moving to 9 anymore given the news. 
Does this seem like cheap labor to anyone else? Or am I being cynical and naive?
Yeah $4K is like a week’s work, at best. Try building this at profit, even if you assume you have 100% probability of winning. Not going to happen.
A fair argument. There is a Cryptocurrency demo that comes with the SDK that would get you started.
Why should we participate in contests for 4000$? At first glance, this seems like the company is trying to get cheap dev time. Is there some higher motive why this should be supported? 
Good point, but under normal conditions it shouldnt happen. It’s also why it’s extra important to exclude permanent errors and have good and reliable monitoring set up. About the request latency I completely agree and I discussed that in the blog. For synchronous retries you should definitely avoid too many retries and delay between them. Or use asynchronous retries when applicable and makes sense.
Are you just double clicking on javac?
Yes, abuse is easy. I start running "git blame" when I see things like "operation failed after 100 retries". 1, maybe 2 retries makes sense. How exactly did this person decide that 50 retries wasn't enough, but surely everything would be fixed by adding more? 
See http://gluonhq.com/javafx-hidden-economy/ which mentions Pro JavaFX 8 and JavaFX 8: Introduction by Example. I never looked much into JavaFX. It looked like an answer to Flash and an evolution away from Swing while the world moved to HTML5. Oracle doesn't seem to push it that much anymore, they want you to use the browser with Oracle JET. Sadly the desktop seems to be abandoned entirely to the web browser.
Thanks for the response. I know what you mean. I think JavaFX is one of the easiest ways to build a cross platform desktop GUI without using Electron. I do prefer web technologies over JavaFX but unfortunately not everything I get to make or maintain is a web application. It is a tad disappointing that there isn't some sort of best practices guide or anything along those lines that is really high quality. 
Thanks for sharing!
A more complete failure handing library with retries and circuit breakers: https://github.com/jhalterman/failsafe I'm a happy user of it, but even that one is I still not feature-complete. Anyone else using anything else for failure handling? 
If anything java has the highest paying jobs and is most in demand in enterprise. Your advisor is delusional. C++ is really only used to program low level hardware or operating systems and is rarely used in large software companies. 
Why are you [reposting your own submission](https://www.reddit.com/r/java/comments/66dnik/erdos_is_a_very_light_modular_and_super_easy_to/) from 6 months ago? Using the same exact title, nonetheless?
Not starting a flame war but .Net is so far ahead of the game with these features. Recently switching to an enterprise product in Java and feel like progress reflects features from 9 years ago in .Net at times. 
I did have kind of the same problem, and coming from a react background was really confusing working on a Javafx project. What I did was I followed a udemy course, called java 8 Masterclass, that has a section about Javafx, to see what was wrong with the code I inherited and I tried to fix it following the mcv pattern. Another amazing library is tornadofx, but I have just used it with kotlin (I know it does work with java too) 
Yes. "Don't"
It seems to me that for good quality best practices to emerge you need time and some number of people using the technology. I somehow doubt JavaFX reached such numbers. Still, some smart individual might have posted something out there... hope you find it.
don't forget that javafx is still improving and providing an extremely nice platform for developing desktop apps in java.
I can totally see use-cases for using this approach, but I've been using Varnish to re-submit failed requests for years and it works great, also means I don't have to make my java code more complex than it needs to be.
So Java shouldn’t make progress because those features are already available in C#? It’s not a competition. 
There are a couple of good open-source libraries that show best practices, but library design is not always the same as application design. I've been working on a reasonably large desktop JavaFX application for the past ~3 years and a lot of things I've just had to figure out through trial and error and refactoring. To start with here are some useful resources - - user jewelsea on Stackoverflow. Lots and lots of extremely well-written posts on how to do basic and not-so-basic things in Javafx. https://stackoverflow.com/users/1155209/jewelsea - the ControlsFX library. Essential if you're doing anything other then very basic UI. http://fxexperience.com/controlsfx/ - http://dlsc.com/ - CalendarFX library (now open-sourced) a really good codebase to learn from. Having gone through multiple technology transitions myself (started out working on VB and Delphi desktop apps, transitioned to web apps, and am now back doing desktop apps), I think that you can figure out 90% of this stuff yourself by just applying common-sense rules. Avoid duplication. Refactor mercilessly. Aim for clean separation of responsibilities. And then have a look at some existing codebases such as JetBrains IntelliJ (the source code is big, but it's a useful educational exercise to trace through how they've structured the IDE and the functionality). Approaches like MVC or MVVM can be useful starting points, but you need to adapt them to fit your use cases and your overall application. I've seen novice developers try and shoehorn code into what they think is a "best practice" architecture without really thinking about what they're trying to build. Here's what's worked for me - Encapsulate the domain model as much as possible. I used Hibernate as a raw data layer, but almost all of the domain model is exposed via JavaFX properties to the UI in a set of domain objects that contain the Hibernate objects internally. A set of Action classes for encapsulating your application functionality. This gives you the potential for undo/redo, activity logging, scripted macros etc. A view framework for your main UI elements. This may vary a lot depending on whether you're a single window, an editor type app with tool windows, want to show multiple views of selected data etc. Component-based UI elements that are managed by your view object and know how to display and interact with your model objects. So try and avoid having a single file that creates dozens of low-level text-box, label, combo controls etc. Create UI component objects that extend from Region or one of the layout containers and only manage a few controls, and that present a property interface that you can connect up to your domain model. FXML has it's place, but you don't HAVE to use it. Keep styling in CSS, it makes tweaking padding, alignment and colours much easier. 
I am looking for contributors. That's all. I hoped maybe this time I would attract someone who would like to contribute. 
For you it doesn't matter. You can learn all staff with jdk9. You won't meet any troubles. 
As a baseline, make sure the tutorials use Generics, which was added in Java 5 (back in 2004). This is very likely, given that it was 13 years ago. Basically, look for code that does: List&lt;String&gt; names = new ArrayList&lt;String&gt;(); rather than List names = new ArrayList(); Your IDE should warn you if you try to use a generically typed object without specifying a type. (You are using an IDE aren't you?) The only other major feature that will change the way you develop is Lambdas in Java 8, but you can live without it for now. All the other features introduced are basically tinkering at the edges and aren't all that important at your level. So why Java 5 as a base line? Because not using generics is actively wrong, while not using other features is not best practice, but not obviously wrong. As for using JDK9, every version of Java is backwards compatible with previous versions, so code written for Java 1 should in theory still compile with JDK9. TL;DR? you'll be fine following older guides with JDK9.
I've looked through the IntelliJ settings and I'm afraid it's just not possible with a base install of IntelliJ. The only thing I can suggest is to use log4j or slf4j to print the array contents to stdout. 
It’s been 13 years? Thanks, you just made me feel old. I first learned Java at university on J2SE 1.4
`Vector` was still state of the art when I was taught Java. :)
Thanks a lot guys!
Jdk 11.1 you whippersnapper. Now stay the hell off my lawn.
I'm glad they got rid of the year.month versioning system, but I'm still disappointed in the new one. I know it looks a lot better for marketing when you announce "Java 11", but as a developer, semver is a lot more useful. Especially since they will be making breaking changes in future (which I'm all in favor of), it would be great if they only incremented the major version for releases containing breaking changes. People would be a lot more willing to adopt the non-LTS releases, if the versioning system told them unambiguously whether or not it contained breaking changes.
The applet plugin and its JVM for Netscape 4.0 on Linux only supported Java 1.0, so couldn't even use the fancy new features of 1.1 -- AWT all the way...
The tutorial should do `List&lt;String&gt; names = new ArrayList&lt;&gt;();`
What's wrong with common object oriented design patterns?
Java is extremely backwards compatible. So most of the stuff you see in older tutorials still run fine. The JDK team sometimes start ancient 1.2 demos to show their effort. However many of the old constructs are superseded by newer, more convenient ones. E.g. the date time classes or how you read in files. There should be plenty of Java 8 tutorials. Java 9 is so new they are still not offering it as download for clients. Also not much changes syntacically anyway.
If you use Spring don't forget about [spring-retry](https://github.com/spring-projects/spring-retry).
The really dumb thing about crypto "currency" (read: cryptoassets with no physical underlying) is nobody would do this for prize money *in* the cryptocurrency because nobody can predict its price in 1 month. USD is a much safer bet so I applaud your choice.
Workaround: int size = 256; int[] source = new int[size]; IntStream.range(0, size).forEach(i -&gt; source[i] = i * i); // fill in values int[] intermediate = Arrays.copyOfRange(source, 150, 201); // from inclusive, to exclusive debug on intermediate
That's a great tip, thanks.
Hystrix! Great library from Netflix - wrap it around anything that has a possible failure scenario. We coupled this with the Try library to get a model of Success/Failure as well as if the failures are retryable.
That's cheesy
Wow, an elder thing...
Have you checked if your college has any of those books available for free via eBook format?
Doesn’t IntelliJ use Swing APIs for its GUI?
I use Mockito everywhere, but never tried PowerMock. It looks useful, anyone else here that can backup the claims in the article with its usefulness?
It does, yes. But the overall design of the IDE and how they structure the code is instructive, regardless of the specifics of Swing/JavaFX.
Diamond notation was only added in Java 7. Yes, even Java 7 is quite outdated by now, but there weren't many major changes between Java 5 and 7. A Java 5 Test would still be mostly relevant, especially for a beginner.
PowerMock can mock static methods, Mockito can't.
I have been programming with JavaFX for about a year and a half. Just 1 application. I have 20 years experience writing multi-tier software professionally. I started wdb development 5 years before that. JavaFX was a real shock due to its immaturity compared to Visual Basic. It felt like reinventing everything, as was necessary 25 years ago, with the advent of the web. But this also means JavaFX is agnostic towards architecture. Want MVC? MVVM? Fine, do whatever. For JPA, I am using a custom DTO class, instanced by multiple custom domain-specific DAO classes. Each DAO class is accompanied by its own custom screen class (most of which extend a single abstract screen template), with the screens governed by a singleton screen controller. I advise you to use an existing JPA implementation like Hibernate or EclipseLink, rather than my choice of writing my own. Writing my own taught me way more about DAO in Java than I thought necessary. Especially the offline caching is a pain, combined with multi-user concurrent updating and version control of the data. Hibernate offers this out of the box. Most of my screens are meant for CRUD, so they extend the same template, following an UX model many mobile applications choose: a listing, selecting an item shows its properties in a form, with drill-downs to related information if available. All screens show in one and the same window, replacing each other (single-document, if you will). Plenty of white space, and buttons big enough to touch with fingers. Editing the data starts with a button press, and ends with a one. Editing can be cancelled at any time. All controls adjust their size and location to fit available screen space. They use whatever font the user has set as a system default, and resize to fit font size. I'm implementing undo/redo functionality, which is a real pain, because I appear to be the first one to do so in JavaFX. I found no controls or data frameworks that implement this for me. I'm implementing a recycle bin for deletions. I found no controls or frameworks that already implement this. Both redo/undo and recycle bin have to be in the data manipulation process from the start. Tacking them on later is highly complex. Look for some decent implementations for JavaFX controls instead of writing your own: ControlsFX and JFXtras provide some nice ones. But for my forms, I wrote my own property sheet, that gave me more freedom to control the layout. Still based on standard texts and dropdowns in a vbox in a scroll box. JavaFX is pretty good about visual accessibility, but you'll find that the standard table view and list view lack keyboard controlability, like selecting items based on typed letters. You'll wind up implementing that yourself. I found no controls that already have this. So, good luck. You'll need it.
Haha, yeah I get that, but are there potential pitfalls when mocking static methods or other YMMV type issues with it?
I intentionally ignored the diamond operator because it wasn't in Java 5 and is one of the "tinkerings" that I was talking about that beginners don't need to worry about. It's not wrong to repeat yourself, just verbose. 
I second this. I recommend that you use TODOs to keep track of any instrumentation or intermediate variables that you may have made for debugging purposes. // TODO: Remove this prior to release int[] intermediate = Arrays.copyOfRange(source, 150, 201); // from inclusive, to exclusive
I'm not a fan. Powermock is tightly tied to the version of mockito, junit, and the jdk that you use. In top of that, needing powermock is a sign to me that you need to restructure your code.
Improve your unit tests by not mocking but designing your software testable.
I like the web look and feel :) i recommend to take a look http://weblookandfeel.com
OK yeah this type of feedback is what I was looking for, thanks!
So, how do you design your software with a database connection so that it is testable if you wanna do more covering tests rather than per method basis? Writing more testable code is always positive, but sometimes it's simply not practical.
I inject the configuration of a test database and use that for the tests. 
Powermock can be used to write a test for just about anything. I work on a legacy codebase that had no unit tests and I can almost always write tests without having to modify the original code. The tests end up being super brittle but it's a starting point to be able to do more refactoring.
A simulated database or just a separate database that you use for testing? 2nd option doesn't seem very convenient for an automatic build environment where each commit and pull request triggers a build.
RoR devs have been doing it all the time without problems.
You have to isolate all of the database code in a DAO that implements an interface and pass it in through dependency injection. The prevailing groupthink in the industry seems to think that "easier to test" = "better design", but to me it seems oftentimes designing for testability leads to an unnavigable mess where I need to go through dozens of interfaces and classes to follow a code path that could have been a single 10-line method. If the only reason you did something was to make it more testable and you wouldn't have done it if you didn't need to write a unit test, is that design really "better?"
ControlsFX? http://fxexperience.com/controlsfx/features/
Word. Just like any other rule of thumb in programming, always consider the actual consequences of what the advice you’re following is leading towards. I’ve run into this situation described above myself. Code optimized for tests are not necessarily optimized for understanding (sounds so obvious when you put it that way right?).
I surely don't want to try to reliably mock a single SQL dialect let alone multiple. A real database for testing purposes ensures that it works with a real database. The tests are not very unit-y but go into being integration test -- but they involve databases, so.. Real unit tests should be not as expansive, just a class and its collaborators. I might also test the POJO business logic in isolation and just do some basic query mapping to ensure JOOQ/whatever deals does the i/o right. I use Mocks like MockServletContext or something. SPI mocking certainly has its place. Apart from that mocking just makes tests brittle as fuck. Put all that energy into writing testable code or refactor not-testable code into testable code.
Okay, this seems to be the best approach given I've got around 40 arrays and don't want to set a watch on all of them. Thanks.
I am not sure what you mean with mocking SQL dialects. With a mock it lets you simply instruct the mock when a method is called to return a certain object. Why would you need to fiddle with the SQL dialect?
How do you know that your mock input will lead to the mock output in the real code?
That's usually considered out of scope for a JUnit test suite. That is usually part of the integration test, and there a real database is used.
Then we might be just disagreeing over whether additional unit tests are necessary for ground covered in integration tests.
You shouldn't be using PowerMock unless you really need to. It works through some serious bytecode trickery and can introduce some hard to debug issues to your tests. They even state it rather openly on their github page. The description of the project says: "PowerMock is a Java framework that allows you to unit test code normally regarded as untestable." In the description, they also mention: "Please note that PowerMock is mainly intended for people with expert knowledge in unit testing. Putting it in the hands of junior developers may cause more harm than good."
This comment needs to be higher. PowerMock is a "necessary evil" of a tool, most useful when working with legacy code that you didn't write and/or was not design to be testable.
that's fine. it's simply not feasible for every single release to be 'lts' when you're releasing at a high pace. your org can wait until next september's lts if it cares to update at all.
I hear you, but I really wanna emphasise that "may". I am what you would consider a junior developer and I have never had any issues with it and it helped me a ton to test code that wouldn't have been testable otherwise. I believe as long as you read the documentation properly and think before you write code (as you should anyway...), you can benefit a lot from using it. If you can avoid using it, that's great. But better to use PowerMock to test properly, rather than leaving the code not tested.
In memory H2 database can be very useful for some kinds of tests.
You're absolutely right. I just think people need to be aware that powermock should be avoided when possible. The article is clearly intended for beginners, so in that context, I find introducing PowerMock with no warning whatsoever is unwise. Here's an example of an issue it caused us at work: We use JavaFX and test our program using TestFX. TestFX (or possibly monocle, which we use to run the tests in headless mode... I can't remember) loads a native library at some point (a .dll or .so file). When we ran more than one test class at once, it would print an error message saying the library can only be loaded once per JVM instance and then stall forever. After debugging for a while, I figured out the code which loaded that library already had a mechanism to prevent the issue: it would simply set a static boolean variable once the lib was loaded to wouldn't load it a second time when the flag was set. Now the issue was, when PowerMock loaded a second class for testing, it would also re-load some new classes rather than re-using the loaded ones, therefore resetting the boolean flag. So the check failed and the library ended up being loaded twice. There was nothing we could do. So we just had to live with it. The workaround was that we could only test one class at a time through the IDE. When running tests through gradle, we could make it fork the VM for each test class, which worked fine but made the whole thing waaaay slower.
Private, static and final can be mocked with powermock. If you know what you're doing, it's a great tool. Especially if you're using legacy libraries that you can't extend or replace, it's invaluable.
&gt; E.g. the date time classes [Relevant meme](https://i.redd.it/9qtc9uq101px.png)
That is definitely interesting, and I totally agree with you. I have updated the post with a warning when introducing PowerMock.
&gt; Improve your unit tests by not mocking but designing your software testable. I use PowerMock. We implement customization whereas many dependencies are provided by vendor (IBM) we don't control. Theres certain scenarios such as static methods that the dependencies rely on. Without PowerMock unit testing would not be feasible.
Thanksfully it was done for Java 8 (by the jode time [guy](http://blog.joda.org/))
Does Java 8's Date-time API support non-Earth time-zones yet?
Unrelated to your point, but Android is not "JVM friendly". It's Java bytecode friendly, via a tool to convert those bytecodes to it's native Dalvik bytecode set. But it's not running a JVM.
I think I've seen mocks being used in every bad waste-of-time way in my real work, but never in a useful way. How they actually make sense: - You write integration tests for all your code. - For particularly complex and/or critical areas (something that would cause the whole app to stop working if it went back), where user testing doesn't cover all the possible bad inputs, you write mocks to test each layer or slice of code fully. How I actually see them being used and wasting time with: - Avoiding writing integration tests because you're write mocked tests instead because "mock" sounds cooler than "integration" - Realities of corporate culture make it necessary to only write the simplest easiest fastest tests, which are useless. You don't want to look like the slow guy on the team to your boss do you? - Someone writes decent mock tests, then someone else fixes a bug that's found in the code or adds an extra feature. When tests fail, they just comment the code in the test out. Between the custom tests and the layer of mocking, it would take them 3x-10x longer to complete the task if they tried to figure out the tests actually worked. And again, you don't want to look like the slow person on the team to your boss do you? I've never seen mocking in tests that didn't end up being a huge waste of time, when mocking ran into the realities of corporate culture.
Not out of the box, but the API allows to create custom calendars and temporals.
So new that it has been in the [**Sidebar**](https://i.imgur.com/YscQpEh.png) just about forever. Obviously, checking the **sidebar** is asking too much of a **spammer**.
this was done by mistake - the sidebar is long and full of details and I'm not a spammer
&gt; the sidebar is long If this is long, then how can you possibly go through a 900+ pages programming book?
while posting you need to scroll down all the way to see it. its not my site and i don't get anything for posting this link, just found it and wanted to share - you can delete it
If you're using PowerMock to mock something you wrote, you've written it wrong. Your constructors and static, private, and final methods should not need mocking. You *should* be able to call them safely from a unit test. However, there are a number of libraries out there that provide static methods that interface with network calls and other things you really should mock. That's when you whip out PowerMock. The one time I realized I'd written something that required that I mock a constructor, I refactored it immediately. 
And even then, you find yourself passing in a mock object via dependency injection in order to test whatever code interfaces with that DAO.
Hahahaha
So you are testing that the mock framework works? Cool
What? I said that you mock your repository and then you test that your business logic works as expected when processing the data retrieved from the repository.
This guy has literally no idea what he's talking about. Downvote, hide comment, ignore, possibly report, and move on
I am sorry but blindly adding retries to your code like this is a recipe for disaster (if you don't understand when and why your calls are made). If you really want to go down this path the correct thing to do is to use a proper circuit breaker. https://github.com/Netflix/Hystrix It even comes with its own dashboard which should give more insights on what is happening behind the scenes.
Agree, the code in my post was to display examples. I also recommended Spring-retry in the end which has circuit breakers as well.
Not everything is worth unit testing. Some things are best done in integration testing, and this includes most database, REST/SOAP, and filesystem interfaces. Save the unit testing for your business logic, and use good abstractions/decomposition so you don't have to mock out external dependencies. 
i'm pretty hyped for these features! local inference should land in march... i wonder if anything will land in september.
I mostly agree with this, and I am a strong advocate of TDD and unit testing. Where I differ is that I do find TDD leads to a better design, because the unit tests I write provide a safety cushion for refactoring. (Using the "red/green/refactor" cycle.)
Coupling test code to production code using mocks in the fashion described by this article is a terrible anti-pattern. It leads very quickly to incredibly brittle tests, and makes it much more difficult to refactor as every time you change the production code you have to change a bunch of tests as well. Mocking can be useful when writing characterization tests. If you're writing new code and using a mocking tool please stop. 
It’s funny how almost every testing book out there that is considered good and recommended by thousands of brilliant senior developers brings up mocking and recommends it. But I’m sure you know better.
Isolating database code with an interface is the prevailing groupthink in the industry, because it makes it testable and you can now mock it out. ... what were you arguing against?
What? You change the code behind some tests and suddenly you have to change the tests? That **NEVER** happens. Oh, wait, it actually basically always happens if you have proper tests mocking or not.
JDK 1.0.2, newb :p. I remember wondering whether inner classes were a good idea.
I clicked comments to come here and say this. PowerMock is terrible (not the library, but the use of it). It's supposed to be a last resort, but I'm constantly tearing it out of more junior developer's unit tests. 9/10 there's a really easy way to get around static calls (protected @VisibleForTesting non-static wrapper method) and when there's not - you use PowerMock.
Troll.
True, although I don't see it as the same thing. If your method is interacting with an interface X, you ARE providing it with an X. If your method instantiates some concrete class with "new Y()" and you change what that returns with some mocking framework, it's not actually getting a Y. 
I was talking about it in a more general sense. "More testable" really just means "More abstractions". That doesn't necessarily make the design "better". What I see happen a lot of the time is you end up with some very abstract glue code that gets tested, but the tests don't actually test anything. Then, the application blows up in production because you you passed an empty set to IN in your SQL. 
I'll point out https://livebook.manning.com/#!/book/the-art-of-unit-testing-second-edition/chapter-4/16 and quote one paragraph from it: "Please note that not everyone agrees with the point of view that mocks should only be used when there are no other ways to test the software under test. In Growing Object-Oriented Software, Guided by Tests, Steve Freeman and Nat Pryce advocate what many call “the London school of TDD,” which, for design purposes, uses mocks and stubs as a way to merge the design of the software. I’m not fully disagreeing with them that that’s a valid way to go about designing your code. But this book is not about design, and from a pure maintainability perspective, in my tests using mocks creates more trouble than not using them. That has been my experience, but I’m always learning something new. It’s possible that in the next edition of this book I’ll have turned 180 degrees on this subject." There are some good discussions on the different attitudes held by classic (Chicago) style folks and mockist (London) style advocates. My experience has been in favor of the Chicago style. 
Could it be that we have to wait 2 years for everything in this video? That's far too long. I hope it comes out sooner and we can stop the nonsense of Kotlin, Scala, et al.
What would you do if your code depends on 3-rd-party library, that has a lot of static stuff?
&gt; So, how do you design your software with a database connection so that it is testable if you wanna do more covering tests rather than per method basis? What are you testing? The database connection? That's the driver's problem. The SQL statement itself? Sure, I can see that ... somewhat, but there are better ways. The retrieving of objects? ??? What? Really, there's nothing in a sql connection to worry about or need testing. The code around it, yes, but that can be moved into its own places. Mocking is fine and good, as long as you remember to kick yourself in the liver extremely hard every time you mock a class. In time, you will appreciate not having to suffer the pain of your liver screaming at you by you not having to mock a class. Mock is like goto (almost). Do it if you need to. Know very well why you need to and don't abuse it.
Wrap the third party library inside a dependency which you can object into the class being tested. 
I’m testing that the business logic works as expected when it recieves data from the database. Not sure why you got the impression that I wanna test the SQL connection when I said that I wanna mock it away. I must have phrased myself in a confusing way. 
When the OSX App Store was launched I saw people re-buy products from the App Store since it was more 'convenient' and they liked playing with this new thing and having everything update, etc. in the same place. It seems to me people generally like to use the new shiny hammer for everything, regardless if it's a nail or not. We've been managing our build toolchain since times immemorial. Of course this time we would try to do it with Docker... until the next thing shows up. Saying this as somebody that likes Docker.
So, you don't need any DB connection then. Just pass some data to the business logic and test it. Why does the business logic have to know or care where the data comes from? Oh, because you're calling myRepository.getData() in that method? Well, don't. Call that from another method that is passing the data received to the one that's actually doing the work. And test that. Nobody cares how the data is gathered (that's a solved problem, nothing new there). All that anyone cares is how the data is handled . And that can be easily done without mocking. Unit testing was practically invented for that problem. 
Switch with Strings, invokedynamic, lambdas, Jigsaw, Java 18.3, Amber... well, that escalated quickly!
This video is so not true. I was clicking this button with selenium web driver and it didnt see any problem. It's checking how often this IP was clicking recaptcha buttons and how many times it did mistake with recaptcha.
&gt; You haven't eliminated mocking. You have actually... You don't need mock, you need stubs. And you don't need mockito for that...
You mean, basing access control on roles is not role-based access control.
**Sidebar**: **Do not post tutorials here!** This is your *first and only warning*. Next time, you will be banned. **Post removed**
**Sidebar**: **NO programming help, NO learning Java related questions!** + **/r/javahelp** is for help with Java programming + **/r/learnjava** if for learning Java **Post removed**
You misspelt "slowly". Less facetiously, don't you think we would have gotten these under Sun?
Building your project means that your build server doesn't need to have all the tools installed, just Docker. Developers add a new build step? No waiting for systems to install it on the server. Also, new developers can get up and running quicker. These are some useful advantages to using containers. 
We surely would never had gotten AOT, because Sun was religiously against it, since 1.0 only commercial JDKs support it. JavaFX only got straight after Oracle, under Sun it was yet another scripting language. More than that not sure.
Oracle is a better steward of Java than Sun was. Also, I believe Google was wrong to do what it did with Android and Java. There, I've said it.
What did they do?
They created a clone of the JVM using the same API structure so it would be easy to develop apps in Java and have them run on Android.
Oracle is a terrifying company that is known for the multimillion-dollar license fees that always make one wonder when they'll make their java infeasible. They haven't done it yet, but they do have a history. I mean I've been in multiple companies which were founded with a core principle that Oracle database licenses must never be paid for a serving system, because we've all seen how those costs kill companies. If they do close up java or start demanding licensing fees, either a truly open version remains for everyone to switch to or a lot of us will jump ship. tl;dr: wariness
Using loopholes to effectively: - copy paste Java (language/APIs) while legally not calling it Java to avoid paying Sun the licensing fees - leveraging the fact that on all superficial levels it's the same as Java to lure the developers to Android instead of other mobile platforms - from a general developer perspective, a lot of for problems and feature lacking got Java a bad name, while it should've stuck to the Android Java All in all, my opinion is that a lot more dick moves related to Java was made by Google and not Oracle, although the general opinion is on the contrary. 
I wouldn't call it a clone, they put a lot of effort into creating a stable and useful runtime for the mobile target. I belive that Googlers did a great work implementation wise, but top level decision was bad, from my perspective.
That is possible, but many of the things that /u/xappymah mentioned were developed for Java 7. Lambdas and Jigsaw were originally planned for 7 under Sun. I distinctly remember the Java Posse talking about Jigsaw back in 2009. Switch with strings was part of Project Coin and InvokeDynamic made it into Java 7. Java 7 came out a year after Oracle acquired Sun, but these things had been planned long before that.
Using goddamn ints everywhere instead of enums. Fuck you google.
It wasn't a clone; for a start Dalvik is a register based architecture while the JVM is stack based. And they used a completely different instruction set. They used the same runtime library API, and syntax, but the runtime library was a clean room implementation (iirc, they used Apache Harmony as the base)
Right, but Sun spent too many years in politics instead of actually delivering those features. Also lets not forget Oracle was the only one willing to pay for Sun, as IBM, Google and Red-Hat did not care enough. So most likely Java related projects could have ended being porting projects into other languages.
I fully agree with you. Google pulled a Microsoft, forking Java, and gets praised by the Google wannabe employees. Android Java is not fully compatible with standard Java, and now with Kotlin, and the increasing releases on standard Java, most likely it will be fronzen in Java 8 until Android gets replaced by something else like Fuchsia. 
currently education seems to be centered around java 8 se
It's a bit of a love/hate thing for me. Love in that Oracle has done some good things to move Java forward whereas Sun were pretty lost for some reason. Hate because Oracle are just such a scummy company in general and no matter how great they make Java I will always have that nagging feeling in the back of my head they will do some classic Oracle (asshole) move and mess it all up. 
Depends on what the third party library is, what it does, and it's quality. For example, I expect Math.pow to always behave exactly the same. So why make a fake math.pow? On the other hand let's say we are talking about DriverManager and getting a DB connection. In that case I would say you shouldn't use driver manager directly in code making DB requests. Rather, you should use dependency inversion. Make your constructor or your method bring in a connection rather than making one on the fly. Then your tests can simply make fake connections and hand them in. As a last resort, if your third party library is touchy and doesn't really produce nice things to work with, I would then wrap it. Being careful to try not to recreate the API, but instead the desired functionally. Then use the wrapping class everywhere. This will give you something to mock and the option to swap out the library in the future. I don't really like the third option because it is hard to do right, and I've never seen a swap happen.
OpenJDK is truly open, and there is nothing Oracle can do to make it disappear.
It's been *7 years* already? I still habitually type `sun.java.com` into my browser's address bar whenever I need to download the latest JDK.
Before the acquisition, attending JavaOne was like a huge, well funded science fair. The exhibitors seemed keen to show you what they'd made, and as often as not you'd learn something from them. Under Oracle, attending the same conference is like running a gauntlet. The exhibitors are sales droids desperate to hit a quota, and generally have only surface knowledge of what they're selling. I'm profoundly disappointed.
AFAIR, James Gosling in podcast talk (old java.net site) said that Oracle is doing good job on Java
It took a while for Oracle to figure out what to do with Sun's legacies (including MySQL), but now they're on a very good track (including MySQL).
Conversely, adding any new layer increases your overall complexity. The build server configuration shouldn't need to be changed that often. I guess this all depends on the *kind* of projects. If your project uses a lot of external services and your developer needs to touch all those, run integration tests and such then, yes, containers help. Using Docker for something that works just fine with Maven + some shell script might be overkill. Of course, learning new tools is fun and adds a new fresh item to the resume, which is worth something in itself.
I guess the question is if that change has been caused by the acquisition or if it's just because the java ecosystem is so mature now, and therefore more "boring".
Think about node. You need to have the right version of node and npm installed. And any other tool a build might need. What happens if you have two projects with incompatible version requirements. What if one project decides to upgrade and another doesn't? Let developers define their build environment in a docker image and build the project in that. They can do what they want without interfering with the build server or any other project on the server. This is even better with configuration as code like Jenkinsfiles.
They could've thrown everything away, instead they made it open source.
They will come when they are ready in 6 months releases. Local type inference is slated for March 18.
Wrong subreddit. Learning resources should go in **/r/learnjava**. Posting in **/r/javahelp** is also OK, but not here.
Omg please don't call the data class "datum". The word overlaps with the English meaning and the Latin origin (aswell as German "date").
I understand, but it all boils down to the *kind* of projects we are talking about. And how large and varying in terms of experience your team is. This is r/java and none of your examples are Java related. I did reproducible builds before this was cool with Maven + shell scripts from Hudson. As I was learning Docker I also thought -- you know, how interesting would it be to have my IDE tooling work via Docker! But in practice, this would not solve a problem I really encountered in all these years of doing Java.
Oracles documentation sucks. It is cryptic and often incomplete. It makes my job harder. Sun's documentation wasn't great, but I didn't appreciate how less sucky it was until Oracle took over. My suspicion is that the lousy documentation is hangover from Oracle liking to sell classes for their database admin certifications. Make the documentation so unusable will drive people to classes. 
its java 10 not 18.3 ;)
Thanks, that was an interesting read
Building JavaScript code might be applicable to a web project with Java and JavaScript in the same project. People might have a legacy project that uses maven 2 and a new project that uses maven 3. A project might want to use the most recent version of maven and the system team is too busy to install it on the build server. Regardless of the language, some people have weird set ups. Containerising your build environment can put the power in the hands of developers and not systems.
Sun made it opensource before the acquisition
They've already transitioned to using OpenJDK instead of Harmony. Keeping the JVM ecosystem is a lot more beneficial to them, especially now that court cases have been settled.
Tutorialspoint a good source. Otherwise do a java course in London or online with PCWorkshops
Except that anyone can see on AOSP source code that they are only cherry picking features. Also they still do not support the new JVM bytecodes.
Is there a free container which implements all the specifications? Please let us know
I will never forgive them for killing OpenSolaris.
IntelliJ uses a LAF on macOS that matches the native platform pretty well. That said, macOS got uglier over time I feel - so in the end I'm not sure I prefer it. Theme consistency was one of the most overrated bugbears of the 2000s: desktop developers always seemed to love it a lot more than users did. Web devs had no such hangups.
&gt; i wonder if anything will land in september. At minimum first phase(s) of pattern matching. Data classes seem a bit further out, but would be nice if this feature landed in September as well. Not sure about the other big ticket items, but regardless they'll all be coming sooner than expected. Value classes, on the other hand, may take quite awhile yet, maybe 2020 at the earliest?
Oracle kept Java going because they knew their corporate clients used it extensively, but they did not understand the open source world and had no idea what to do with Java. Fortunately sanity has prevailed and [they have announced](https://blogs.oracle.com/theaquarium/opening-up-ee-update) that they are going to transfer stewardship to the Eclipse Foundation. 
Will it be possible to use at least some of these features when targetting older versions of Java like Java 7? In C# many new language features do not rely on newer version of .NET. Is something similar possible in Java?
Seeing where Java is going in the next 3-4 years—basically matching or exceeding the features of C#—I cant complain
java.sun.com would be the correct "old" url - which still works.
In relation to Java, I think they did pretty well so far. I can't say the same about other Sun projects but, it's their business after all.
You mean like the poor implementations like structs or enums? Or the disaster that is partial classeS? Or the lack of hot swap and dll hell? Or half-baked cross-platform support? Or the half-baked 64 bit support?
Darn, I just realized I made a mistake somewhere because the 2.0.3 artifacts were still not available from Maven. They are available now. Apologies for the wait.
They’re transferring just the EE framework, not Java itself.
I once had this question in an interview... 
Agreed. Microsoft did the same thing with J++ and J#.
That’s that I meant. Have edited the typo in my comment. Thanks.
.NET has Roslyn (Compiler-as-a-service) which makes it possible to be shipped independently of the .NET Framework versions. &amp;nbsp; Want to use new C# language features like Tuple-syntax? Simply update the NuGet package for .NET Compiler, and you can use it even in old .NET projects. &amp;nbsp; I don’t know if Java has the same kind of compiler that ships independently.
Overall its been good (certainly better than Sun)
To be fair (never thought I'd be saying that WRT Oracle), they've further expanded the scope of what's open source. Recently, they announced that even some of the previously proprietary and commercial tools will be opening. Also, jlink in Java 9 effectively fixes the annoying JRE redistribution license issues (i.e., not allowing the removal of unused portions to reduce redistribution size).
"datum" is just the singular of "data"...
I will check those, thanks.What do you think of codecademy? Is the free edition worth completing or should I just try other tutorials? 
This also gives them a chance to get feedback and potentially fix some shortcomings in the next release.
Let's make one thing very clear - all Google used were the method declarations of 37 Java API packages - which were open source. If anyone pulled a dick move it was Oracle for trying to copyright API declarations as a last ditch effort in order to try and win the case because their patent claims all failed. Additionally, during the time of the acquisition of Sun by Oracle their lawyers were salivating at the thought of suing Google. 
Java was my first programming language that I took seriously, I wrote some nice things with it. Some time after J2SE 1.4 I switched to C++ in my desire to learn more about programming and work with something more closely related to the existing Linux applications I used. The Oracle acquisition made Java's future look uncertain to me, so when I wanted to look at a managed language that was easier than C++ I got into C# instead of going back to Java. The size, and complexity of C# was hurdle that wasn't compatible with the lack of time that work afforded me, so I looked at the mean stack, Python, and back at C++. Now I float in limbo, hundreds or thousands of dollars with of aging books have become my vice. Java looks to me like someone I used to love, but left because of differences we couldn't overcome. I look at it with a fondness for the days that once were, wondering if we have progressed enough to live together in happyness now despite our differences. Java has moved on from the things I knew though, swing is deprecated, and people around me talk about Java like it's just a security risk. Is there any chance at all that I could enjoy Java like I used to, or are Python, C++, or C# more suitable for me. I have a horribly hard time making up my mind.
Not really. Microsoft violated Sun's Java trademark. Google did not. That's a very important distinction.
The fact is that Java 8 **standard** applications don't run on Android, including Oreo. Everything else is just a game of words to keep lawyers busy.
Yes. One of the good things about the new release cycle is that they can release feature in parts. For instance, see minimal value types [here](http://cr.openjdk.java.net/~jrose/values/shady-values.html).
That’s not it; it’s role based access control is not role-based access control.
GlassFish 5 and Payara 5 now. 
"data" is like "money", singular doesn't make sense.
"datum" has long been the singular of "data", though "data" is often used as a mass noun nowadays. Given that "datum" is being used correctly here, what is your objection to it exactly?
Ignoring for the moment the fact that "datum" is a perfectly acceptable English word in this context, [this note is relevant](http://mail.openjdk.java.net/pipermail/amber-dev/2017-November/002312.html): &gt; \*Note:\* __datum and __nonfinal are just place holders, the final keyword to be used is still to be defined
Yeah, I figured that was the most likely option. It's a good backstop against control. 
I guess it's a good thing that Google didn't use their trademarks then.
If it isn't Java how is then this Android programming language called? What are the differences in the syntax of this programming language compared to the Java? Why is Java mentioned all over the place in the official Android documentation? Do I need to go on?
It's Java, Kotlin and C/C++. The important thing to remember is that Google does not use any Oracle trademarks. &gt;Do I need to go on? Yes, because you haven't really proved anything.
They need to work on Java's extreme verbosity. No language should make every non-trivial program written in it a completely unreadable clusterfuck.
Well, I would say verbosity lends itself to readability, but I agree that Java is overkill in that department. On the other hand, I’ve been writing some Python lately, and that’s more maddening with its lack of type-checking.
Python is just pseudocode that runs
Java was very mature under Sun while Java One was an engaging, exciting, interesting conference. Oracle turned it into a sales show. It’s a shame. 
Well, looks like Oracle finally found out they cannot get money from other companies using the Java platform as legal leverage. So, after a few years in denial, they keep letting go projects to different OSS movements.
Yeah, Java is language, the platform/libs and the trademark. Google only makes reference to the language, Oracle claims that Google also infringed on the platform IP and by reusing the API (copy/past). The only thing that Google cannot do is to claim that Android runs Java or the JVM. They don't have a license for it. But the can say that Java the language is used to develop Android apps.
The data needed for performing business logic is dependant on the actual business logic, therefore it should be business logic gathering that, not some object higher in flow of control. Lets say we have a RestController, class implementing some use case-implementing class UseCaseX and two data repos - RepoA and RepoB. In first iteration, UseCaseX needs only RepoA to perform that work. In second iteration, UseCaseX needs both repos for the same use case. In your aproach, you would have to modify RestController because internals of UseCaseX are leaked outside.
Fill in the location of the unpacked Glassfish archive and the Java installation location.
The differences in the api are a pain in the ass though.
Thanks, in my finder I go to Library, I'm mac btw, and it doesn't show up. When I click on the java location field, I can search and Java folder does show up in the Library folder, but there is only two sub folders, Extensions and Support, no JVM. And I can't seem to find where Glassfish was unpackaged or the terminal command to find what version or it's location
At Devoxx this year, Brian Goetz specifically mentioned how difficult it is to find keywords that don't have other meanings in other languages. So, I'm pretty sure the Java team would not make this mistake. 
They also took "var" for the type inference. Prior they asked for our preference in a survey with options such as "auto", "const", "let", "var" and "val". Why not do the same here? "datum" just sounds utterly wrong. Just take "data", "case", or "record" if it has to be.
I recommend using Maven or Gradle. Build tools mangage depenencies much better than manually adding stuff.
Thanks for the info, any of you guys use one of these in production without any issues, what are the the challenges faced? Was spring used at all? We connect to hbase in our app using spring data hbase, how to accomplish same thing with these containers.
Ok, so eclipse let me download GlassFish seemingly straight to eclipse, but then I download it again to my downloads, and as you said let the GlassFish location to that manually downloaded location it worked. Then I used this terminal command to find the location of the JDK - /usr/libexec/java_home -v 1.8 and then copy and pasted that path to the java location and it worked :) Thank you Also I had some food, and I think better after I've been fed, so thanks again
I've found guice and lombok cut most of the boilerplate garbage out of my code.
Google should have bought Java, screw you Oracle
Well I'll put it this way...before Java 8 I would have referred to myself as a "C# Developer." I now code in java, full time, professionally, and love it. Java is better than it has ever been. Oracle is historically a place products go to die, but so far they've given us good stuff. I believe and hope that they understand the responsibility of their stewardship.
I think this whole thread on Reddit here is been setup by people from Oracle and most up voted responses are fake. 
https://docs.scala-lang.org/tour/case-classes.html https://docs.scala-lang.org/tour/pattern-matching.html
You should definitely modify the rest controller. MethodA, which uses repoA and repoB can be left as it is, but add MethodB (package private or something) that is being called by MethodA with the gathered data. And in your unit test you test MethodB only with some made up data. Interacting with external services you do at the Integration Test level. And then you do have a db connection and all that jazz. Again, no need for mocking.
What? Oracle DB’s documentation is among the best free technical documentation that I’ve ever seen. Some examples: [Database Concepts](https://docs.oracle.com/cd/B28359_01/server.111/b28318/toc.htm) [Administrator’s Guide](https://docs.oracle.com/cd/B28359_01/server.111/b28310/toc.htm) I can’t think of any question or problem I’ve had that wasn’t addressed somehow by these docs, and it’s pushing 5 years since I’ve worked with it at all. PostgreSQL occasionally comes close. MySQL, FreeBSD, and Python have passable docs, by Microsoft, Apple, and Oracle really are a class apart when it comes to comprehensive technical documentation.
Giving up Applets was a huge blunder. Was an easy way to introduce Java to the beginner. Looks like they're trying to kill desktop programming too, again, no place for a beginner to start programming. No leadership. 
Except that Oracle announced at this year's JavaOne that it will open source Oracle Java and its commercial/proprietary features. More about it here: https://blogs.oracle.com/java-platform-group/faster-and-easier-use-and-redistribution-of-java-se JavaOne keynote: https://www.youtube.com/watch?v=Tf5rlIS6tkg _disclaimer: I work for Oracle._
License is just one aspect of an open source project. Governance, release cycle, etc, are as important as its license for successful projects. Read [Faster and Easier Use and Redistribution of Java SE](https://blogs.oracle.com/java-platform-group/faster-and-easier-use-and-redistribution-of-java-se) for more information about Java and OpenJDK, announced at JavaOne 2017 ([see keynote](https://www.youtube.com/watch?v=Tf5rlIS6tkg)).
Well yeah much of what /u/zeno84 is referring to will make a big difference here. Local variable type inference, data types, destructuring, etc.
Good on them. I'm just used to 20 years of experience that trusting Oracle is a bad plan. 
Java runs on iPhone. See http://gluonhq.com/products/mobile/ for example
...Common Collections supports generics now, though.
Be more dumb please.
Google never claimed that code compiled for the DalvikVM would be compatible with the JVM. All they said was that you could leverage your Java development knowledge to develop for the Android platform.
Yeah that's basically what I discovered. I was also complaining about the lack of java.time support.
Yeah that's true service tier tests do sometimes end being less than effective not throwing up orm errors etc.
Do you know if there are plans to standardize the font engine across Oracle JDK / OpenJDK? My understanding is that the Oracle JDK still uses T2K, while OpenJDK uses FreeType [1]. Anecdotally, we are unable to use OpenJDK for some of our applications that require precise font measurement / layout, because rendering results are still inconsistent across the two runtimes. Just wondering if there were any announcements that I missed :-) [1] https://technfun.wordpress.com/2013/01/18/last-difference-openjdk-oracle-jdk/
Looks like you write in Java and then it compiles it to native, so it's not quite java running on the iPhone...
I really do want to see Lombok brought into normal Java. It would help reduce a lot of that verbosity.
I suggest you to post your question at the discuss mailing list: http://mail.openjdk.java.net/mailman/listinfo/discuss
The reason we love Python is that it's pseudocode that runs. The reason we hate Python is that it's pseudocode that runs.
Really? I thought all the MySQL people jumped ship to MariaDB? Those that didn't just abandon it all together for PostgreSQL
If it's lagging C# by 3-4 years, I can find plenty to complain about.
Haha, I think it’s lagging by more than that (though someone can correct me)
The problem is "you really need to" happens a lot. If you have to write a test for legacy code, you're not going to introduce a new bug by writing a test, but you might if you're changing the code so you don't have to use PowerMock. 
That would be a real happy ending.
Bad. Net negative 
GCEasy
Well, you haven't proved anything either and all my points still stand. We all know Google did win in legal battle and that was a dick move by Oracle, but everyone seems to forget that Google did screw with Sun.
I miss Sun. And Oracle as a whole is not innovative at all compared to Microsoft, Google, and Amazon. They screwed up OpenOffice, Solaris, MySQL, Sparc - almost everything but Java.
&gt; You have to isolate all of the database code in a DAO that implements an interface and pass it in through dependency injection. For which you'd use a mock.
&gt; Coupling test code to production code using mocks in the fashion described by this article is a terrible anti-pattern. It's pretty much the industry standard. I really don't get /r/java's strong opposition to unit testing (which will almost always will include mocking out dependencies). 
Exactly! They created a Java fork and get praised by Google wannabe employees for doing that.
The blame is on the buyer, screw you Google for not caring enough and doing a Java fork instead.
Java the language requires new bytecodes as of version 7, that aren't available in Dalvik. So when you use Java the language, version 7 or later, there is a high probability that the code won't work on Android Java.
I don't see why *"all"* people would jump ship off anything, within such a short period of time. Thus far, MariaDB just seemed to have gained *a little* traction compared to the "big 3" (Oracle, MySQL, SQL Server): https://db-engines.com/en/ranking. Indeed, PostgreSQL has probably been the biggest winner in recent times. But don't forget, [Oracle is really investing heavily in MySQL, also from an engineering perspective](https://www.youtube.com/watch?v=fzCpd4j72jA). Sure, some people will simply dislike Oracle and pick anything non-Oracle (without even asking "who *is* MariaDB after all), but it will be hard for any competitor forking MySQL and not cooperating with Oracle to keep up.
The article is OK, however the grammar is _awful_, to the point that it makes it difficult reading the full thing. If the author could have someone proofread the text, and then updated the article with a corrected version, that would be awesome. Nice examples though.
You can check the support [here](https://developer.android.com/studio/write/java8-support.html)
Is this article finished? There is a lot of "note to myself" floating around in there
What points would those be? The ones you deleted? As for Google screwing Sun - there was no way Google was going to put a JVM on their mobile OS so the deal Sun wanted was never going to happen. If Sun didn't want others using the SSO of 37 Java API's then perhaps they shouldn't have open sourced them.
I deleted my response because I realised you were focusing on the legal side of things. Legally you are right, but I'll let audience decide what they think is right or wrong.
what? 
It just seems like whoever wrote the article didn't proofread it. There are some spelling errors I there and this &gt;Or click here (add hyper link – http://www.oracle.com/technetwork/java/javase/downloads/jdk9-downloads-3848520.html) And at the very end, there is this sentence &gt;Here’s the explanation of Whats New In Java 9? No proper ending just that sentence
For greenfield projects, you normally would write UI with Vue, React, or Angular. Backend is written in Spring boot, nodejs, or golang.
Spring is many things these days, however at its core it is a dependency injection framework. Don't know what that is, read up on it by googling dependency injection or inversion of control. Once that piece is understood, then spring offers additional tools for building essentially all aspects of a java system (not just websites) by gluing various pieces of the java ecosystem together in an elegant and simple manner by removing boilerplate code and providing a clean set of integration points, via abstraction, with other 3rd party libraries. The culmination of this effort is Spring Boot. With spring boot, one can stand up an application (web app or otherwise) with minimal effort. Spring.io has plenty of tutorials for all that spring can do. Now to answer your question with regards to rails/django, spring mvc is the equivalent and can be stood up using spring boot on the quick. The de-facto tutorial and sample is the [sample petclinic app](https://github.com/spring-projects/spring-petclinic)
I am well aware of that page, which provides **zero** information regarding *invokedynamic* bytecode, and describes lambda expressions and type annotations only as partially supported, because not all features from **standard** Java are available, serialization and runtime access. Also due to this lack of support, Android Java converts lambdas into anonymous classes instead of making use of invokedynamic, which means more overhead than on **standard** Java. 
&gt; Looks like they're trying to kill desktop programming too, again, no place for a beginner to start javafx is still being developed though? 
Also JDK 1.0.2 here.
jhipster minibook
Jhinibook. *** ^(Bleep-bloop, I'm a bot. This )^[portmanteau](https://en.wikipedia.org/wiki/Portmanteau) ^( was created from the phrase 'jhipster minibook'. To learn more about me, check out this )^[FAQ](https://www.reddit.com/78ilq0).
Why should they be afraid? Kotlin, Scala ... need the JVM for them to exist, which happens to be written in a mix of Java and C++, with plans to port the C++ parts into Java (Project Metropolis). Yeah sure, they are trying to exist outside of the JVM, but without the set of available JVM libraries and performance, available to them.
I still don't see the fuss, Google never claimed full compliance with the standard JVM. You use the Java language to develop an app with the available APIs of the platform. Is like complaining because try with resources, streams, lambdas or any kind of new feature of the Java Platform 7,8 or even 9 is not supported by the 1.6 version.
I think the main java compiler has source and target version which control the source code version and the byte code vm target 
Java's awful reputation for security was completely due to applets.
would Go exist?
[removed]
You can do lots of stuff! - Backend development for web with Spring Boot - Android apps - Games development with LibGDX (the games run on desktop, Android, iOS and HTML5) - Application development (e.g. with JavaFX for your GUI needs) - Just about anything you want!
anybody with experience about modules ? some say it's a huge complexity with small return.
&gt; You use the Java language to develop an app with the available APIs of the platform. Kind of, we can use the Java 6 language, and the Java 7 or 8 with constraints. By creating a fork in Java libraries, they forked the Java community that now is forced to either write two versions of a library, once for **standard** Java and another other for Android Java, or to restrain themselfs to the common subset between **standard** Java and Android Java
Yes I use IntelliJ on macOS. It looks fine but it doesn't match the platform exactly. It's almost in the uncanny valley area. It just looks off.
They created a fork because they could not reach an agreement with Sun. Also, fragmentation happens, is a shame sure, but I have yet to see a real dealbreaker (no alternatives) when it comes about libraries with support for Android and Java, but probably that just my use case.
There are a lot of "industry standard" anti-patterns in use, unfortunately. Hopefully someday we'll have sufficiently well designed tools to make it difficult to create the unmaintainable masses of code we usually end up with today. At least that's my dream.... 
There is also Play Framework. I haven't used Rails, but from what I understand, the philosophy is very much the same between the two. I've used Play a lot and really like it. It's really good for developer productivity. https://www.playframework.com
You can do anything really. You should have a good handle on how to write most projects, not that there aren't some hard things that would require a lot of work. Spring boot is quite easy for a back end to get a website up and going. There are also options like jsp and jsf or Google web toolkit for a ui, but I would recommend standard Js/html/css
They created a fork because they did not want to pay Sun for the licenses, and on top of that they left Oracle buy Sun went it went bankrupt! Who knows, maybe if they had actually payed Sun for Java license, the company would still be around.
Each to their own but IMHO Java isn't a good choice for desktop applications.
I would say tutorials for Java 7 are the absolute oldest anyone starting to learn now should consider, but preferably you should be looking at Java 8 tutorials. After you've read some tutorials and gained some experience you can be more agnostic as to what specific version of Java the tutorial/book etc. was written for, as you will most probably be able to translate them in your head to current conventions/paradigms. 
We're using this in production with one application. It takes the separate Soteria jar and uses that on WildFly 10.1 (Java EE 7). We'd also used the same setup (Soteria + WildFly 10.1) for a second application intended for the regulated financial market. This application was delivered by us, and gone through a separate security audit (done by a third party). For reasons not having anything to do with the technology this application has not been put into production yet, but as said it did pass the independent security audit. In our case it replaced an existing JASPIC based security system. Since Java EE Security is based on JASPIC it was a relative easy transition. One thing that was a challenge is to let the user choose via which method to authenticate. A previous app of us used login by email, login with Google, etc.
I'd like to go one step further and claim that role-based access control is not role-based access control. Initially that looks like a bold statement, but think about it for a second...
Before you do anything else, double check if the same thing happens on Payara, which is a more stable version of GlassFish.
This is big really, and interesting too. Oracle is about a year late to this party, so some decisions have already been made. I noticed a few things of which Oracle said in the EE groups that it was "impossible" to implement on WebLogic. Let's see if it's still impossible ;)
Did you read the article? Using roles for access control is placing a role inside an access control decision: isUserInRole(myRole); Role-Based Access Control uses a permission: checkAccess(permission);
If you want compatibility with most platforms and your GUI is not too complex, Java isn't that bad of a choice.. 
I'd say it's the best. Eclipse RCP, JavaFX, so much can be done easily. libGDX or JMonkeyEngine for games. It's a fun time to be in.
Obviously English isn't his first language. Still that's a valuable contribution as is. We should look for ways to help rather than criticize, i.e. why don't *you* proofread the article for him?
That's a really good point. For UIs, seems like something with Electron is your best choice these days. 
Every time he does this presentation he changes the keyword. I think he's doing this on purpose to avoid Bike shedding the name.
Initially I was happy it was Oracle not IBM who bought SUN Microsystems... but 7 years later... I am very, very said that it was Oracle and not IBM :( In any case.. the death of Java EE is a shame.. also the zero marketing that Oracle put on the Open Source Software and only sales effort they put on the WebSphere and etc is just a shame :( 
This doesn't really have to do with the web, but I made a program that let me text from my laptop using Java for Android and JavaFX for the desktop client. It was an extremely tedious project, but I really learned a lot. If you're curious, you can check it out here: https://github.com/SolarFloss/OdysseySMS-Desktop-
Looking a framework called Grails it uses a JVM language called groovy and it's very rails like, i love it.
Ok, So I deleted that web app and made a new one under a different name, on the .jsp file I clicked "run as" and clicked on "Run on Server", and this time it worked
Not another **pure self-promotion spam** account. Before you go any further and risk a **reddit wide ban**, read: [**What constitutes spam? Am I a spammer?**](https://reddit.zendesk.com/hc/en-us/articles/204536499-What-constitutes-spam-Am-I-a-spammer-) **Limited** self-promotion is *tolerated*, but **excessive** self-promotion as in your case is against reddit rules. Also, if you want to continue here, you need to change your approach. We do not want *self-promoters* without any participation in other discussions. We want *active participants* where self-promotion is less than secondary. If you do not want to go that road, you are not welcome here.
1. What would have been *specifically* better if IBM had acquired SUN? 2. WebSphere is an IBM product
How did they screw up MySQL?
You would be shocked, but IntelliJ's gui is built with swing...
Not to forget the `oracle.jdbc.Datum` class. Surely, they'll break their own code with that name :)
Java and C++ are two different languages. However, they do have some similarities such as the C syntax. For more detail you can look up: https://www.javatpoint.com/cpp-vs-java
Take a look [here](https://en.wikibooks.org/wiki/Java_Programming/History). Gosling originally tried enhancing C++, and named it C++ ++ --. Java is totally different, though. I would not refer to Java as C++ -- or even Oak. Use it's real name.
Java and C++ are _very_ different languages. They fill different niches of software development and probably shouldn't even be considered as related languages. C++ is a pretty low level language. You have to manually think about memory management, and a lot happens at compile time instead of run-time. Java on the other hand is a safe, garbage-collected language where a lot of things happen in run-time and you have advanced reflection functionality.
In a way a permission is a hierarchical role, as it's not determined what semantically a role must correspond to. So we can say that "admin" is a role, but "access_audio_device" can also be a role. A permission is eventually not much else than a named entity that allows some action. Take for example the well known [WebResourcePermission](https://docs.oracle.com/javaee/7/api/javax/security/jacc/WebResourcePermission.html). This encodes the access of a given URL using a formal pattern, but that formal pattern is eventually just a string as well. Say in the simplest case "/foo", which is an exact mapped pattern meaning "may access URL foo". Eventually what happens is that `WebResourcePermission("/foo")` is mapped to role "admin", and we use `WebResourcePermission("/foo")` in our access decision, where the underlying security system using the permission to role mapping to find out if the current user (the user in the security context/session) has this permission. When looking at this process in a more abstract way, we see that `WebResourcePermission("/foo")` can be seen as a layer in a hierarchical role system. Indeed, if we would have had only hierarchical roles we'd had role "admin" mapped to "wrp:/foo", and we'd have checked for isUserInRole("wrp:/foo"), which would have been mapped back to "admin" to achieve the exact same thing. In Java EE, which is one security framework, you can see this even more clearly when taking the group concept into account. In the above example, role "admin" may be mapped to group "Acme_staff", which gives us a 3 layer hierarchy. This article gives some background: http://arjan-tijms.omnifaces.org/2014/12/java-ee-authorization-jacc-revisited.html In Shiro, which is yet another security system, there's no fixed group -&gt; role -&gt; permission hierarchy, but hierarchical roles. These can by convention do the exact same thing. Hence why I stated "role-based access control is not role-based access control", or in other words, while similar sounding, one is not like the other.
Actually in RBAC a hierarchical role is a separate role-role mapping. It can be many-to-one (limited hier) and many-to-many (general hier). This is separate and distinct from a permission. My assertion is placing roles directly inside of an access control decision not only tightly couples the check to the policy, but causes the number of roles to become unacceptable, withing deployments that have many resources.
You're being trolled.
by whom?
Certainly, but I must invite you to personally investigate Hashgraph since I don't have the mastery to explain it concisely. Hashgraph is a masterpiece of its own category - surely just playing with it is rewarding in itself. 
It's good to realise that role-to-role mappings can be many-to-many, this is often missed by people. While it's true that role-to-role mapping is in implementations different from a permission, I maintain that in an abstract view a permission can be seen as the lowest level in a role mapping hierarchy. My counter assertion is that placing the higher levels roles of the hierarchy directly in an access control decision is not acceptable. I.e. one should almost never check for isUserInRole("Acme_staff") or isUserInRole("admin"), but instead for isUserInRole("wrp:/foo"). Of course if your security system has a hasPermission() check, it's often more clear to do a hasPermisson(new WebResourcePermission("/foo")) (or equivalent) check. Eventually the total number of artefacts in the policy is the combination of roles and permissions, and if permissions are implemented via roles too, then that total number would not or barely change. 
I mean weblogic sorry :) Well IBM have more luck with making money from OpenSource :) Oracle have zero experience or knowledge how to make money from OS and I guess they dont want to have :) 
Who ever called Java "C++--". They're basically claiming that Java is a shittier version of C++. Ignore them.
Also with Java9 and jlink, you dont even need the JRE installed!
Therefore you have the maven wrapper that makes you Independent of local Installations of maven. And for the Javascript stuff there are things Like the maven frontend plugin that lets you locally install all the npm, node whatever stuff. Using it on my work and works Well :)
37 APIs is not a small amount of software. Most creativity is in APIs. The implementations are merely textbook knowledge. So, why should there be no Copyright for APIs? The fact that this may be inconvenient to some, should not be the decisive factor. 
Hard to believe but can't deny the longetivity of swing.
I thought medium.com was an English language web site.
Proof Reading can't fix a writer too lazy to edit their own article before submission. The author showed zero effort in getting grammar right. and looking back to his article 2 years ago, he hasn't improved a bit. 
As a matter of fact I‘d never heard of the saying as I‘m not familiar at all with c++, but I found it in the introduction a very good university in my country does to java. It was literally written: 
I'm not sure if you've ever used IBM software, but it's a complete clusterfuck. I'm gonna go out on a limb and say I'm actually happy Oracle owns Java and not IBM. 
Thank you for the source
You're welcome!
Uhm...why?
Literally everything but embedded stuff. If you want webdev Vaadin is incredible. You know all that super annoying crap with alignment? That's the part I hate about webdev. Vaadin does all of that for you..just style with CSS and call it a day. If you want back-end...well..hibernate and gson go a long way. There are also tons of APIs to turn that back-end into a restful API trivially. If you abstract it away properly hibernate will make databasing the least painful part of your code (provided it's not super super complex stuff) For game design you can roll your own, or use libgdx or LWJGL. Android you of course know. 
Anyone can be a critic. You want to add value? Pitch in and help. I'll take his ill-formed prose containing valuable content over your worthless complaints about the form.