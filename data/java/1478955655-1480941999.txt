well, awesome. I didn't know I needed this until I read your post. thx for sharing
http://wiremock.org is an established library that does a similar thing
Even 127.0.0.1 is technically over the network, but it's available everywhere even if you are offline. And it can saturate your memory bandwidth... 
It allows you to test your whole application/service. It shouldn't replace your im-memory mocks, but rather enable a higher-level category of tests.
That makes sense, I got the impression this was aimed at unit tests
I like this. Another!
Cool. Quick check though about the whole the .equals story though. .equals should adhere to the Liskov Substitution principle and also be symmetric such that a.equals(b) == b.equals(a) or strange things may happen. This means that a subclass that implements equals can not add additional fields (state) and thus becomes superfluous. So a class that implements equals must also generally speaking be final. 
Oh man, I wasted so much time trying to find ways to deal with equals and inheritance before learning that lesson.
I think the project should try compare itself to the ipython notebook project. This could be a great way to run some "demo code" on the browser.
I use Wiremock as well, but from the sample code it looks like Jadler supports adding response delays which could be useful for testing timeout-handlers.
Yes they really should have just used OSGi instead of re-inventing the modular wheel.
While part of this is correct, you're dead wrong when it comes to `equals`. Part of the hashcode contract is: &gt; If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. -- [Java 8 documentation for hashCode](http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--) Furthermore, &gt; Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. ...which means if you make a `Child` and `Parent` return true for `equals` despite `Child` having additional properties, then by contract, you can no longer use `equals` to see if those `Child`-specific properties are different. 
Is there any authentication on the port that's opened on the JVM? Or could anyone post arbitrary code to be executed? That seems like a terrible idea to actually use in production software. It could be super useful for debugging in test instances but even having the code I available would make me nervous that it was accidentally enabled in prod.
Polymer, from Google.
Just a FYI that in IntelliJ you can edit the templates to make the auto generated code work exactly as you want to.
Angular 1 for all the "older" apps, React for all the newer ones. I'd probably prefer to have stayed with the angular side of things, but the other powers at be decided to bless React.
you have a point. Security is an issue. Concerned people should build the jar straight from N4J.java and change the integration code to point to their local jar
Ember js
Vaadin
IntelliJ, pair it with [Key Promoter](https://plugins.jetbrains.com/plugin/4455) and you rapidly learn. Flipside: you generally use, what the college suggests you for several reasons: * you use the same tool as other students and teachers * if you have problems, they might even help you --- For Eclipse users there is [Mouse Feeds](https://marketplace.eclipse.org/content/mousefeed)
[IntelliJ IDEA](https://www.jetbrains.com/idea/)
Go with netbeans. Personally I liked using eclipse to learn but netbeans is more valuable to know imo.
what is key promoter?
I think use of exception is fine. There are two problems to keep in mind: 1) unchecked exceptions - which seem to simplify code, end up making the interfaces (even if only implicit) incompletely defined. Some, especially those inclined to dynamic typing, don't seem to have a problem with this. 2) exceptions are MUCH slower than implementing the same check via typical "if" flow control. If you are concerned about performance then you need to use exceptions with much caution. they are for _exceptional_ circumstances. WRT a REST API, I would hope that any entity submitting a request via an API is doing at least some amount of validation prior to making that request. To use an entire HTTP request to get back a failure on something as obvious as a field that should be a number NOT having a number is bad coding on the client side for any number of reasons. Now programmers do this, so the server should protect itself. And using an exception to do so would not be a bad idea. 
Is it free for students? or half off?
ReactJS, Angular 1 for some older project.
I recommend Eclipse or IntelliJ IDEA. Of these two I prefer Eclipse, because it can handle working simultaneously on multiple large projects (e.g. two libraries, three web apps, and a GUI front-end app), where in my experience IDEA bogs down and its editor gets unbearably laggy. OTOH, IDEA's UI is more attractive and configurable, and it has better code assist. So maybe you want to start with IDEA, and then switch to Eclipse if/when your projects get big enough or numerous enough to bog IDEA down.
Dropwizard for server-side and SmartClient (www.smartclient.com) for front-end
It is an intellij plugin that pops a dialog with the keyboard shortcut for any action you perform with your mouse. It is great for learning the tools fast. Once comfortable you can remove it.
thank you ill look into it 
I guess that lightweight means no Jboss, maybe even no tomcat. Java SE instead of Java EE. Depending on who you ask, maybe no Spring. I'd guess something like Spring Boot or Dripwizard (I really like Dropwizard)
The more interesting part is here: https://github.com/emmanuel-keller/github-language-statistics/blob/master/README.md#2016-statistics: How many repositories go inactive within a month (difference between Sep and Oct): | | | |--|--| | JavaScript | 7068 (37%) | | Java | 3562 (37%) | |Python| 4434 (40%) | pretty close
I guess that "lightweight, core Java 8 stack" means: * No huge frameworks like Spring * No JavaEE and containers/app servers * Jar deployment - (run application from main) Examples: [bootique/bootique](https://github.com/bootique/bootique), [networknt/light-java](https://github.com/networknt/light-java), etc.
[deleted] ^^^^^^^^^^^^^^^^0.7011 &gt; [What is this?](https://pastebin.com/64GuVi2F/98886)
Worst case it means they wrote their own webserver, their own mvc framework, and their own json parser. Beware.
Spring boot is still spring. So yeah, Dropwizard. Perhaps Spark (http://sparkjava.com ). 
http://www.tinylog.org/ might be a choice for you. Configuration in Java (or properties file.) Simple, fast, thread safe, several types of writers.
I think a good way to evaluate it would be with activity, however you break down activity. Perhaps some formula to take into account how active projects are, and how much projects are being used. I also love python and Java (also coming to fall in love with c# and javascript). Although I've never had a "real" job programming java, and am not too into the whole ecosystem.
This is one reason I enjoy using Debian GNU/Linux / free software. Crapware / Spyware is absolutely unacceptable in the free software community, this would never happen. All of the commercial platforms are more or less about making money, and the "app developers" are more or less about making money too. It's hard to trust anyone not to spy on you. For example, I installed some iOS app "Moment" on my kid's iPad (required for school, grrr). The app is supposed to help keep track of how much time you spend on the iPad each day, and which apps you are using. I read the privacy policy, it sends all that information to their servers too. It's totally unacceptable to do that without even asking me, I removed the app. Android is just as untrustworthy if not more so, Google is all about the ads these days. I should switch back to Windows 7, too. Subtle ads for Finding Dory on my lock screen? No thanks.
Speaking of statistical bias, it makes me wonder if JavaScript's infamous "3 line npm modules" is why there are so many JavaScript projects on GitHub.
Or use getClass but compare using a.asB().equals(b).
Eclipse and IntelliJ. Eclipse for a beginner imo as intellij can be overwhelming. Full disclosure I develop in Eclipse
Or the many reinvented wheels known as "JavaScript Frameworks."
it's completely free https://www.jetbrains.com/student/ *"Get access to all desktop products including IntelliJ IDEA Ultimate, ReSharper Ultimate and other IDEs. All you need to apply is to be a student and have access to your student email address or a valid ISIC card." * As far as I know it doesn't have to be ISIC card, also some other document you can use to prove you are student will be ok.
Can't a subclass add fields and don't overwrite equals, so the extra fields don't matter for equals? 
Yes, but then what purpose does it serve? If you have object a and an object b which is identical to object a except for the added field. You can't ever use that extra field from object b because that would show it was not equal to a as promised by equals. So for all intents and purposes the added field is superfluous. The few situations where this might seem like a good idea would happen when you're working with code you can't change. Though in that case the original author should have made the classes final as they weren't meant to be extended. So in that scenario you might be better off wrapping everything in the new class.
Angular 1. We did an Angular 2 workshop a while ago in our office but I'm not going to switch because it's so much harder to use without having a whole Front-end toolchain up and running. I would use it on a 'real' front end project obviously but most of the front-end stuff I do are simple demo's for stuff like blog-posts and for those I prefer just having a single app.js with all the stuff in it.
http://www.metaforumtechnologies.com/training-courses/java-courses/java-j2ee-training-in-chennai
1995 called...
Very nice, I hope Java adds tail call optimization soon.
The number of popular JS frameworks is less than 5 these days, there are just as many PHP, JAVA, and Ruby frameworks.
Spring MVC + Thymeleaf + Bootstrap I guess I'm old-school.
My first thought was http://starlogs.net/#ReikaKalseki/RotaryCraft Alternative: wear cosplay of Leia. She was the only love interest of Luke in the movies. There are more, if you also include the comics.
We aren't going to do your homework for you, but look at String formatting. 
Well, her dressing as Leia is basically saying "I see us as siblings!"
You would need to create a FeelingFactory that returns a FeelingBuilder. Using the FeelingBuilder instance you could instantiate a Feeling. The point is to make Feeling as abstract as possible so that you could add for example Love, Hate, Disgusted, etc.. in the future should your feeling for him changes. Also, I would like to add that if your feelings are increasingly becomes complex and swing a lot during the day, it would be the best to introduce some sort of IC container like Spring/Guice into the mix. Furthermore, as your need to save your expressed feelings to reel your significant other later in life, it is necessary to use framework such as Hibernate to persist your feelings. Is OP still reading this :-) What is it sub, e-harmony???
The post says that it only counts projects larger than 10kb
Debugging this seems like a huge pain. Neat that they did it, but i kinda dont want to work with code like that.
Take your hobbies and try to build something to help you out on that front. Like making beer? Build yourself a device to monitor the brew's temperature history. Like running? Build something that scrapes your GPS stats and builds some good statistics for you. Having said that, you're always going to have to fight extra hard to explain the lack of a degree. Maybe spend some of this time to actually get a bachelor's degree? Will make life easier for you in the long run, and you may learn something you didn't know you didn't know. 
pssch were is the spoiler alert tag
Just start calling him "Master Frodo" and repeatedly offer to carry his heavy burden to Mount Doom. :)
This is displaying changelogs of an application on github.com as StarWars Intro * Length: 1:32min * Title: Star Wars The Force Awakens Original Crawl/Intro * Url: https://www.youtube.com/watch?v=C587lNBQXAw 
Since this is programming help, it belongs, as the many hints on the site indicate in **/r/javahelp**. **Post removed:** Programming help.
uhhh if he thinks I see him as a brother, things will turn out bad lol no to Leia then
neat read. I know other reactive libraries do some magic to make the throwable stack trace legible. Would be neat if that is done here as well.
woah woah woah hold up there What are you actually trying to accomplish? Persistent storage or in memory storage that's dropped on every restart? Is any of the data relational or is it literally just a list? Is this data modified or is it static (like configuration)?
So you posted 3 threads, I'll give you 3 comments.
When you write Vaadin code, you write pure Java, and generally, it works as intended. If your code compiles, it will work. Stuff like CSS is done separately, and custom js etc is done via GWT (which needs to be compiled separately - a bit of a pain). Primefaces is (in our shop) XHTML markup, which is rendered on the fly. If you make a typo, you'll only know when you try to render the page. It's also notoriously difficult to debug, with poor debug info (sometimes you simply don't get the desired behaviour, and have to google and fiddle with it until it works). Too much trial and error. No likely. 
Lightweight means the service uses memory and cpu more efficiently so that it can be easily scaled to hundreds or thousands docker containers without using a lot of resources. That doesn't mean you just build it with plain Java without any additional components to address cross cutting concerns. In a microservices world, traditional API gateway is not suitable as it is a big monolithic application that is hard to scale. It is also a single point of failure and a bottleneck. This requires that the framework used to build microservices needs to have a distributed gateway built in to provide security, metric, audit, logging/monitoring, validation etc. I've been working on microservices for years from Weblogic -&gt; JBoss -&gt; Spring Boot and none of them met my requirements above. So I started [light-java](https://github.com/networknt/light-java). It is very fast with 1.45 million req/sec 2.46ms latency and only uses 200MB memory to serve "Hello World" at that throughput. I have compared it with other frameworks in the [performance](https://github.com/networknt/light-java-example/tree/master/performance) repo and I welcome other framework developers to contribute more implementations. In my opinion, to choose the right framework/platform to build your microservices, you need to make sure. * It is not using any container including servlet container. * It needs to have built in security and other features so that you can only focus on the business logic implementation. * It should have a flexible structure so that you can plug or unplug these middleware components depending on your requirement. * It is docker friendly. * It is design driven and test driven * It is easy to implement/debug your code 
LibGDX is also a great game framework to learn if you are interested in making games. 
I'd like to see something about the age of active projects. I have a hypothesis that languages like JS get unmaintainable more quickly that languages like Java (static typing mostly). So Java project would tend to stay "active" longer than JS projects. 
&gt; Individual services are easier to maintain and deploy than a monolithic application That statement is not true. It's based on assumptions about the target environment. In most cases a monolithic app is much easier to maintain and deploy. The most common reason to use microservices is when you need to deploy services on their own. This means that you have to test your app with the combination of versions deployed.
The real answer is that it depends. Microservices are great in some scenarios but it's just another architectural pattern and no silver bullet. I'm opposing making general statements like that. Saying that it's easier to maintain and deploy. 
&gt; I'm opposing making general statements like that. I most definitely agree on that. Micro services have their own problems. You lose transactionality and versioning between services is something you have to have a solution for in place before you start and most teams don't have that for example. There's also the overhead of simply having more 'projects'; sharing code is easier in a single monolithic app.
I will investigate this. I'm pretty sure I've seen trampolines within the code base of other libs, when used recursively they do unwind the stack trace significantly. With our own library tail recursive calls to totally lazy datastructures like Eval (which by definition store the function chain not the result of each successive function) cause smaller stacktraces than non-recursive ones as the internal trampoline unnests recursive calls.
[removed]
[removed]
You can [fake it](https://github.com/sviperll/higher-kinded-java)
JSF allows you to build slick yet simple UIs ;)
Definite spam, just look at their post history.
Basically the memory is divided into sectors of fixed size, which is power of 2 in MBs. In all previous GC algorithms we had constant region of Eden space, Oldgen and survivor spaces. In G1GC sector which has, lets say 4MB in a moment can belong to eden space, but then can be cleared and changed to store objects that was promoted into old generation. And that's where is that difference. In previous: separate spaces. In G1: sector can be able to act as eden, one of survivors or old space. I would suggest to read this tutorial: http://www.oracle.com/technetwork/tutorials/tutorials-1876574.html It gives you quite clear view on G1. Oh and delete those 2 other threads... 
&gt; Abstractions over HTML and HTTP are silly. The only good web is the pure web. Now get off my lawn! 
If you mean frontend JavaScript-y stuff, maybe. Haven't really touched any of that in a while, so I wouldn't know. For backend stuff? Sure it can. Half the people in my team do just that. If you're not doing Java EE specifically (I mostly work with Undertow), there's not _that_ much in the way of important stuff there in Ultimate Edition.
As always, great talk.
Play handles building an HTTP API, but it's designed for the simple "Rails" case where you may have a single server, and you may have a persistence backend or not. A single Play instance can run on a single server, and that server can go down. Lagom's basically an industrialized Play + Akka Cluster designed to never go down and withstand chaos monkeys. It has a service discovery API, a persistence API for a distributed database like Cassandra, and an internal architecture that is designed so that you add and remove servers easily.
I've been using Vaadin for the past few years now (not specifically with Spring), and really enjoy it so far. As long as you're not trying to customize how everything is designed to work too much, it is extremely low effort to get going with it. I've seen others complain about it's GWT foundation, but it truly hasn't been something I would see as a downside, at least from my experiences with it.
Thanks for your great suggestions. 
What is the constructive and the positive thing in your comment? What are you trying to prove / fix / suggest?
The author mentions this in the article in the Public Scope section: &gt; The best way to avoid this problem is editing the template in our IDE. In IntelliJ IDEA, for example, this option is in Preferences &gt; Editor &gt; File and Code template &gt; Templates &gt; Class.
I want Java because it works just as well as Java 8 (In my eyes, haven't noticed any changes) and I want to use applets without having to create exceptions which don't work. I haven't tried yet. 
So here's the problem. Java 6 reached its end of life February 2013; that's almost four years ago. Since the last public release there have been multiple Java SE Support releases (not publicly available) which have contained over 90 security fixes. Trying to run a version of Java that old is just going to open your machine up to a host of exploits. Even though Java 8 doesn't appear to be different to you, behind the scenes there's been a lot of changes. The big one you're running into is that applets don't work unless they're signed or you add them to an exception list. The reason is that applets are on the way out. Firefox is removing support for NPAPI plugins, of which the Java browser plugin is one, by the end of the year. IE and Chrome stopped supporting NPAPI awhile ago. Basically applets running in a browser aren't going to work. Even if you use an older version of Java, the browser plugin isn't going to work with any major browser very soon. There is the option of running a virtual machine that contains an old version of Java and an old version of Firefox or Chrome just to access whatever sites you're using that still use browser applets. That's a really clunky solution, but it might be your only option if you're dealing with legacy enterprise software that your company can't be bothered with upgrading (that happens all too often in corporate environments).
I've been using vaadin for the past month. It's awesome for using things that are already included. If for some reason you have a very specific requirement that was not foreseen by them, you'll end up knee deep in shit and using your sledgehammer left and right just to get things to work. But yeah, neat for a normal use 
So say it straight. No need to be cynical. That's not how you work with people.
Congrats!
Would you need to go as far as VMs? Firefox have a decent archive of old versions you can install and freezing updates is trivial. AFAIK the browser plugin might be the most awkward bit?
Angular actually has much in common with JSF, just saying. Yes, Angular is client side and JSF server side but in their approach there are many commonalities.
If I'm going to run obsolete software that's doesn't have public security updates I'm going to do it in a VM to lessen the chances of exposing my computer to bad things.
&gt;IE and Chrome stopped supporting NPAPI awhile ago Tor maybe?
It's not essential, I just love to use them. I'll try Java 1.6.0_23 tommorow
For me it means : no inversion of control, no huge framework, no XML config. Each tool, and each lib has one, and only one usage.
I too think thatsIch is right. Or maybe he is not, but you tell us. This is really well known false logic. You ask supposed question, but is not really question. Is only vaidation seeking for choice long ago age by you. So you want Angular and you want us all to say this is good choice, no? Or are we wrong?
You are right, but you know what? We want every article to be ad, since we not want to pay 💰 no? Nobody on Internet want to pay for article, so how writer buy rice? He cannot live from exposure coupons!
Well the officially language of Android is Java and so its apps are primarily written in Java.
JSP and JSF are _completely_ different things. Don't mix them up.
Thanks!!
i have fixed some obvious errors to this: public class p1 { public static void main (String[] arg) { int x, y; char c; String s; boolean b = true; c = K; x = 15; y = 20; System.out.println("Value of x is " + x + "."); System.out.println("Value of y is " + y + "."); System.out.println("Value of c is " + c + "."); s = "This is a string value assigned to s"; System.out.println("Value of s is\n*" + s +"*"); System.out.println("Value of b is " + b); } // end of main method } // end of class.
I get this error... 1 error found: File: /Users/Vlad/Google Drive/Fall 2016/CISS 110 Programming/java/p1.java [line: 11] Error: /Users/Vlad/Google Drive/Fall 2016/CISS 110 Programming/java/p1.java:11: cannot find symbol symbol : variable K location: class p1 
Distributed computing platforms &amp; storage engines are largely java. The 3rd most popular neural network workbench (deeplearning4j) is java. (The 2 most popular are for python and C++ iirc). Enterprise computing is big on java (the ecosystem is already there and has a LOT of momentum) I believe most android apps are java.
https://www.jetbrains.com/idea/features/editions_comparison_matrix.html A lot of stuff you get for free in Eclipse or with the massive Eclipse Plugin Community...isn't in IntelliJ Community Edition. Can you work with it for backend? Sure. You can also work with the backend using vi or Notepad. 
Currently doing a school project using these two and loving it, especially as someone who typically has issues making websites look really good.
Congratulations! It's really cool to see more projects evolving on the server-sided Java scene. Just a little question: how does Jooby compares to, for example, the Spark framework?
I agree. SmartGWT is also a great option if you want consider a different product from a more customisable and feature perspective..
Aside from what the others said, Java is also big in embedded systems. You have a DVD/BluRay/MP3 player, a Smart TV? Chances are high that Java provides the user interface. Java is a language that is easy to embed in devices so quite a lot of the "smart" devices use Java. Wouldn't be surprised if the software that controls lawn mowing robots or roombas is written in Java.
http://www.metaforumtechnologies.com/training-courses/java-courses/java-j2ee-training-in-chennai
I work in an enterprise, we have a backend, it's written in Java. Even if Java the language isn't used, the JVM is often used with other languages: Clojure, Scala, Kotlin
In my case the biggest issue was having a different application behaviour once we get to the UI part if some specific headers were present in the original request. Since vaadin will receive the original request, reply, and then there is a last request (a POST with very specific vaadin stuff). During this negotiation, my original headers were lost. By Overriding the vaadinservlet I was able to fetch the headers from the original request, but then to have them the UI I had to store it somewhere else to fetch later. That led to concurrency considerations, since the vaadinsession does not carry from the original handshake to the UI. This might look confusing, maybe my inexperience with vaadin led to this problem, but still... All I wanted to do was "request.getHeader('example'). And then 'if example then'. 
Your solution: https://vaadin.com/docs/-/part/framework/advanced/advanced-requesthandler.html
Since I'm a big fan of dogfooding: where is is being used in production currently? Also a small remark: @GET public List&lt;Pet&gt; list(final Optional&lt;Integer&gt; start, final Optional&lt;Integer&gt; max) { List&lt;Pet&gt; pets = db.findAll(Pet.class, start.orElse(0), max.orElse(200)); return pets; } You should avoid using optionals as method params due to type erasure. You'll break the ability to overload that method so you're better off allowing null values and wrapping them in an Optional after. Big compliments by the way. The documentation is great and it looks very feature complete. Love that you didn't forget about swagger docs. No one wants to write that stuff by hand ;)
Can you elaborate a bit on the operator overloading part?
Thank you 
I did indeed misread that you wrote, thanks for clarifying :)
[removed]
It also possible to make kind of website with no HTML, only use text. But do customer in 2016 want that? Not really.
There are a [few already](http://jooby.org/doc/parser-and-renderer): handlebars.java, freemaker, jade and pebble. We could probably add Thymeleaf if you raise a github issue? ;) Don't think JSP fits here, specially for the lack of Servlet API. 
Work in progress, you can find some at [jooby/guides](https://github.com/jooby-guides). They need to be updated but the [restful-jdbi](https://github.com/jooby-guides/restful-jdbi) works for sure. More examples are coming now that the first stable release is out.
I own Ultimate Edition, and haven't used most of the Java EE integration features, because I simply haven't found the need for them. It would, of course, be folly to assume that, because _I_ personally have no use for those features, they're useless. But "I'm a professional web developer, and I wouldn't miss any of the Java EE features if I had to move to Community Edition" is still a useful datapoint. Especially for somebody who's only getting started with java in general and, therefore, has no requirement a priori for that sort of integration.
Having read "Java 8 for the really impatient" and "Java 8 - Harnessing the power of Java 8 Lambda functions" I can get behind this list. 
Why would you look for a JSF replacement? What are you missing in JSF?
I can't believe nobody has recommended LWJGL, the lightweight Java Game Library. Slick2D was built on the LWJGL 2.x series, but now that LWJGL 3 is out, it's all you need to build a 2D game. Regarding the environment, have a look at this: https://github.com/mxgmn/WaveFunctionCollapse
I didn't know that, and as a new student in Java this kind of blew my mind. OOP makes sense for that game.
Well, I'm not sure never used them, from a quick view I can see: * Both run inside a Servlet Container. For example, they don't run on Netty. * Jooby is targeted Java 8 and get all the benefits of lambdas. * Jooby project layout is simple and easy to follow (specially for frontend developer and/or designers) * We offers two programming model script and mvc via annotation. * Routes are defined in plain Java. We avoid configuration files for routes. * Like you can write Routes in different languages in **uMicro**. Next release of Jooby will come with multi-lang support. Here is a [kotlin example](https://github.com/jooby-guides/lang-kotlin) * Jooby comes with HTTPS, HTTP/2, WebSockets and Server-Sent Event. * Jooby is a micro-framework with a lot lot of [modules](http://jooby.org/modules), which makes Jooby a full stack framework if need it. 
Interesting, would love to see how these compare to NoSQL-type solutions too.
Thanks, great list!
Manning's Java 8 in Action is good too. Lots of good stream examples early on.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/functionalprogramming] [5 Good Books to Learn Java 8 &amp;amp; Functional Programming • \/r\/java](https://np.reddit.com/r/functionalprogramming/comments/5db97n/5_good_books_to_learn_java_8_amp_functional/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
I would disagree with the first question. If you can have an APM around but you still need to connect to each host to view the logs then there is something wrong with your infrastructure. Use Splunk or ELK stash, it can create much better and customized metrics than what an APM may be able to do and use something like Netflix Servo to output that information to the logs or to Splunk.
Probably not accurate overall since it does not account for .NET which would probably be mostly MSSQL. 
There is nothing missing with JSF. Technically it can do everything other frameworks can. Over the years I grew fond of it. But I'm tired of wrestling with it. The last single page app I had to do was very painful. Bean scopes, expired views, methods being called when I don't want them to be called, objects returning null, etc. Ever since Oracle bought SUN I've the feeling that development of the JSF framework stagnated. Now before I too get obsolete I need to learn the "new hotness".
&gt; You sure? So maybe not have images then? Since images are threat too, no? Lookup how many times exploit found there. Nonsense. Exploits of image rendering that don't depend on JavaScript are extremely rare. &gt; And local software? Apps? They all threats! Yes, they are, but that's not relevant right now. I don't install a local app for every random web site I visit.
This may be difficult to do, but take a break.
Thanks 
Right ? I mean here's two rocks. Bang them together and you too can build a fancy database based web app. No faster, you gotta bang faster! 
I might be wrong regarding to the servlet container. I just saw servlet-api 2.5 is in the dependencies from parent pom.xml. I would like to build a small app to test it out but I was lost in the getting started:) If you have experience on it, I will be glad to merge a pull request and test and publish the result. Thanks.
Everyone here is saying sleep on it, which may work for some, and it may just be me but when I sleep on a coding problem I fucking obsess, I'll wake up in the middle of the night like "fuck this problem still exists and I can try this and this to fix it" and you'll torture yourself all night that exact way. My advice, relax and go at it as best you can, but if you can't get it in one day don't sweat it, the answer will come to you one way or another. If you haven't figured it out by the time your exhausted, go find your favorite TV show and relax and get your mind off of it until the next day. Then hop back in that bitch like no other and be ready to kick ass and take names, raising the flag of Turing's Army itself and thinking "this problem is my bitch"
I find that getting a second opinion is THE most effective way to do this. Talk to someone else, explain what it's supposed to do and how it went wrong and if you don't catch it by the time you're done explaining it, they usually catch it and usually it is the simplest, most trivial shit that I somehow glossed over for *hours* that I fucked up. The different perspective really helps.
If you have gone enough mad at the problem and then go to sleep, you might even dream about the solution. Has happened with me a couple of times.
&gt;do something intrusive like replacing System.out or putting printlns in every method or something. I think using *Logger* is always preferred to *printlns*
Ask someone for help. 
I've find some [angry metal](https://youtu.be/3OeztYGqcJs) usually powers me through tough debugging sessions
Yeah let it run async. Without waiting on the result, and without it on the main thread you can just leave it running. 
DI is useful if you actually reconfigure your project. Primary purpose being to enable good testing. Otherwise, I agree, it can be useless abstraction.
&gt; Nice to see PostgreSQL mauling Oracle. [Not the case on a more global scale](http://db-engines.com/en/ranking)
I often prefer printlns because that way I don't need to be sure the logging system is working. So often my code is working just fine, but the logging is going to somewhere other than where I'm looking for it! Also, when I find the bug, I have to take the printlns out. I've seen debug logging left in to the extent that it becomes a performance problem. Otherwise yes, you're correct.
When I'm not sure about something I intentionally break it and see how it reacts
Do something else for a bit. Your brain works better if you 'reset' it every now and then. We're not computers. 
You're asking a lot of questions that can quite easily be googled. So I would suggest you do that, read it, and then come over to /r/javahelp if you have specific questions (which we are more than willing to help with). This sub isn't really meant for questions like these and you're also unlikely to find someone to write you a book worth of text tailored to you. 
&gt; As in,how the file are compiled and how they are interpreted by the VM. .java files are compiled into bytecode which is stored in .class files. In C++ if you want to build your application to, say, an Intel x64 architecture you have to compile it to that. Say you want to release to ARM. You may try recompiling to that, but you're probably going to get some errors so you'll have to change your code to fit the new architecture. In theory, when you write Java code you should never have to do this. You write once, compile it to bytecode, and run it wherever the JVM has implemented itself. In practice, unfortunately, this is not truly followed. &gt; What do Maven/Ant/Gradel do in the background ? They don't do anything during runtime. They help manage dependencies (specifically tying the .jars to the CLASSPATH) and management of some resources. They make the setup stage easier. &gt; Why is there even need for such complex build systems when you have no headers/implementation split ? Because we have no concept of headers. Libraries are stored in jars. In order for one jar to read from another it has to be tied through the CLASSPATH. If you've ever worked on that manually it's a pain in the ass and is very error prone through dependencies of dependencies and the versioning of those dependencies. &gt; What exactly is the strange relation between Java EE and various servers which seem to be able to "integrate" with some of its functionality ? Java EE is just additional APIs and SPIs which are more tailered to working with on servers. Servlets help builds server communications, the JPA is a ORM specification, etc. You may need these, you may not. It depends. As /u/netrecht said, your questions are many and are better asked elsewhere.
Anyone got experience on HSQLDB? Never tried it.
&gt; if you 'reset' it every now and then. We're not computers. Well, Windows at least works the same. Every now and then a restart and many problems solve themselves.
&gt; I have to take the printlns out. So is the case with loggers. Though a few loggers here and there do not hurt much, unlike printlns. &gt; I've seen debug logging left in to the extent that it becomes a performance problem. If this was the case, thank god you did not use printlns instead! 
This x1000! I lost count of the number of times I was stuck with a seemingly unsolvable problem, slept over it and fixed it the next day within 10 minutes.
The cause is usually incompetence. Woe upon you if the incompetence is not your own. Debugging other people's shitty code is not fun.
Profanity. It won't actually solve the problem, or make you feel better, or do anything even remotely useful, but, um, do it anyway. Because reasons!
How is this better than [PIPPO](http://pippo.ro)? 
I had a bizarre race condition where the act of constructing the string for the error message (after the error state occurred) caused the error never to have occurred in the first place. I presume due to compiler optimizations. I scrapped the whole class and pursued alternate techniques because that seemed inherently unreliable and fragile.
All that crap, and the could have just ran the target "docker:publishLocal" 😅
:) I'm enjoying how you put .net into the same category as clipper and foxpro. 
If the bug is not that important add `// FIXME` and try to fix other things instead... ;)
JSF 2.3 is largely being developed by the OmniFaces people. It's true that Oracle isn't doing much these days, but they did do a lot up until a year ago.
Lately I've seen it being used to wire up DTO mappers. I really don't need inheritance, code generation, and DI for what should be a static function, but there it is.
Discuss the issue with your peers (even those unrelated to the project ) and more often than not you'll be able to come up with a solution yourself. I find this happening to me often. I guess it's because when you explain the problem in detail to a 3rd party you try and give as much details as you can and you start seeing thing more clearly yourself. 
When I'm stuck debugging something I focus on trying to rule things out. Temporarily comment out chunks of code, removing pieces of functionality, etc... The goal is to remove complexity from the problem and reduce/distill it to just the problem. I'll remove things that are obviously not the problem (input checks if it's a db issue, etc...). The key here is to reduce and test in small increments (decrements?) Then I log the shit out of everything. If that doesn't work, I get up and take a walk. Going outside, breathing fresh air and getting some natural light. Think about fun things: what my kids and I should build next in minecraft, what I should cook for my next big dinner, wondering what aa Mosasaur really looked like, does Dr. Strange have to shave his beard that way by hand, or is there an ancient spell for douchey goatees, etc... Your definition of fun might be different. Usually, in the middle of pondering the above momentous topics, a new approach will just pop into my head.
I agree with your sentiment that it is very hard to digest the concepts that you are mentioning. You seem to be on the threshold of coming to grips with the Java ecosystem and not just Java the language. I can tell you that learning the language is the easy part. The next step is, in my opinion, harder and takes longer. If you really want to understand all of the things you are mentioning you may want to try reading up on Java enterprise applications. That may not be your ultimate goal, but enterprise apps very often touch on most of the areas you have in your question. They will be large, have a complex build system, run in a container of some kind, and touch many different APIs. If you want to keep up with the cool kids you can throw in a healthy dose of reading up on microservices too. I wish I had a magic answer to give you, but I really think that the only thing that answers these questions is time and hard work spent learning the concepts.
This is the most comprehensive answer I've seen.
Always do the hard parts first, or at least what seems hard or anything you've never done before or don't understand. That means prototyping the complex bits up from basic examples or documentation. It's foolish to say you'll worry about it when it comes and just do the easy stuff first because that may affect your design or architecture of what you've already built and thus wasted time doing 'easy stuff.' When this happens people are often more inclined to not throw away code and to further attempt to put a square peg in a round hole. That's the ONLY time I see people get truly frustrated.
&gt; Are checked exceptions good or are they bad? In other words, should programmers be forced to handle checked exceptions or given the opportunity to ignore them? If you frame the issue like that, you won't get anywhere useful. It's important to note that this discussion conflates two different questions: Whether forcing failure checks is a good idea (it is), and whether exceptions are the right mechanism to implement that (they aren't). Checked exceptions are better than nothing, but they're altogether the wrong abstraction to solve this problem. What would help here is proper sum types, as seen in Rust's Result or Haskell's Either (and similar constructs across other languages that have that style of type system), where failure is encoded as part of the return value. Aside from (IMO) better language ergonomics, this also emphasises a philosophical difference: FileNotFound is not an unexpected, exceptional condition — it's one of the natural possible outcomes of trying to open a file. Languages that, like Go, have multiple return values (really, just syntactic sugar over returning tuples) have what I'd call the second best approach as, again, they encode the failure as part of the return value (albeit in a way that suggests it's a second-class citizen). Exceptions are really best left for the truly exceptional.
Checked exceptions are annoying and shouldn't be enforced.
Alcohol
* checked exceptions = failure, not fixable, recoverable * unechecked exceptions = bug, fixable If you need to handle a checked exception, you need to deal with it either way. How is your user supposed to know what happened or how are you even supposed to know why your application failed. I guess it is just a question about the implementation details.
Bad. How do we know? Simple! When a language has a good feature other languages steal it. Nobody else wants checked exceptions. Also classloaders.
Screw Java books. Just use it. It's not complicated. If you want to buy books to improve your programming I suggest to invest into "clean code" and doing the people looking at your code a favour.
Thanks, seems to be working now :)
Relax, take a deep breath, and think about what you should try next. There is always a "next step" to take. The "next step" will be different, depending on the nature of the problem. Is it a third-party API that's giving you trouble? If so, are there any working code examples? What makes those examples different from what you're doing? Is it a problem that a customer is reporting, but you can't reproduce in your development environment? Examine the differences between the customer's environment and your own. Logs and diagnostic data are extremely helpful these types of situations. If you don't have sufficient data, then figure out how you can get it. In situations like this, it helps a lot to clearly communicate what data you need and why you need it. If you keep track of the steps you've taken once you start to get frustrated, then it will help account for your time, should someone think you're taking too long to fix the problem. It will also demonstrate the complexity of the issue, which otherwise might not be obvious. 
If you have recoverable conditions you want to account for using Optionals is FAR less code. That being said I don't share the hatred towards exceptions you all apparently do. You have to plan your way up the stack with the exception while you design, as well as plan regular control flow down. If you don't do design with your exceptions in mind you're always going to hate them.
&gt; So often my code is working just fine, but the logging is going to somewhere other than where I'm looking for it! Configure your logger with a console appender then. &gt; I've seen debug logging left in to the extent that it becomes a performance problem You can change the severity of loggers on a class-by-class basis. How on earth does debug logging become a problem when you can just configure the logger to info level?
My biggest problem with checked exceptions is how they interact with lambas and method references. It is pain in the ass to have wrappers which uncheck the exceptions. Just the sole existance of [UncheckedIOExceptions](https://docs.oracle.com/javase/8/docs/api/java/io/UncheckedIOException.html) speaks for itself. (it is used in java.nio API)
I didn't mean to imply anything related to merits. Just mentioning that a Java profiler vendor is biased by measuring demand from a subset of the Java ecosystem.
I doubt it. &gt; Projects with packaging other than pom have to supply JAR files that contain Javadoc and **sources** From: http://central.sonatype.org/pages/requirements.html#supply-javadoc-and-sources EDIT: One of Maven Central's rationales is that stuff will never ever ever be removed again (OK, there be very rare exceptions), such that fiascos like [NPM's leftpad thingy](http://left-pad.io/) cannot happen. This is a bit hard to enforce if the license is as restrictive as Oracle's
The maven central version is 6.1, but the download version is 6.0. What (if anything) changed? Is this just the fact that they are Open sourced now?
There should be no frustration in coding/debugging, only peace. Focus, limit distractions and work at your own pace. You'll get there. The only thing where your likely to get frustration is when you have to deal with massive fucking egos on your team.
Where is IBM? 
Jackson2 can be configured to support Optionals using following code: ObjectMapper objectMapper = new ObjectMapper() .registerModule(new Jdk8Module()) .setSerializationInclusion(JsonInclude.Include.NON_NULL); More details are in pull request (linked). 
I would argue that prototypical OOP and asynchronous programming is somewhat foreign to the uninitiated. Saying node is easier to pick up is dubious, and is likely not provable. This kind of statement is just as damaging as a bad benchmark.
Hmm good point. OTOH, what would be the point of uploading something with a restrictive license to Maven Central, which doesn't help vendors enforce their licenses? A license acceptance "button" (or mechanism) would need to be added to a library, which is really weird...
3 times lucky, or are they already planning to move to something else after byte buddy?
Javassist was a better choice than cglib, 10 years ago. Nowadays, Byte Buddy is definitely a better choice than Javassist. It's also used by Mockito 2, [Spring Boot](https://github.com/spring-projects/spring-boot/blob/1.4.x/spring-boot-integration-tests/spring-boot-devtools-tests/src/test/java/org/springframework/boot/devtools/tests/DevToolsIntegrationTests.java#L179-L188), even [Google uses it](https://www.bazel.io/).
&gt; you quickly devolve into callback hell. Apparently you don't know much about Javascript. Promises fixed callback hell and async fixed promises. 
Showing the standard way to fire up a thread in Java is also damaging when talking about Java Servers. It's part of the contract in JEE to NOT do that. Allocating threads must be done by the server implementation. But he's right on something: It's things like this that make JEE pretty complicated to work with (not even he himself gets it right). Not complaining though, I love the platform.
I will never understand the "overly verbose" argument. Sorry, are you using a text editor to write java? Why are you using a stick rather than a tool with auto completion? Full language variable names rather than acronyms and shortened names makes *clearer* understanding while an essential feature like auto-complete to avoid excessive typing. Java's eco-system of second-to-none IDEs with their feature rich refactoring tools means that one can address and lack of clarity. If the author is complaining about the likes of "System.out.println" vs "print", I'd rather keep my flexible streaming model (leather man tool) than be required to carry 25 separate tools on my belt with extremely similar functionality. Again code completion turns "System.out.println" into 6-8 key strokes. Ive used a dozen languages in my job, I don't get to play with Java much. I still think it's the best general space language out there. 
Nice article. I forget who it was (Case Muratori?) who said that they do not abstract away duplication until they've written the code in at least 3 places. This gives them a better sense of what the code actually needs to do in similar (but possibly different) settings.
Because its the only argument they have.
I was talking about Node, son.
Agreed. I kept an open mind going in, but it was hard to read that shite.
Agreed. Java gets a lot of hate for no (major) apparent reason other than that it is "cool" to do so. Verbosity? Well, you know what? I never have any problems reading Java code precisely because it is verbose enough to contain just enough information to process properly. On the other hand, it can be very succinct when needed. And the best part is that the language syntax is not really that big (in fact it is quite small), and standards are more or less adhered to, so it's a breeze reading other people's code as well (which is more than I could say for C++ or lately, Rust). For all means and purposes, Java is a good solid production language that does its job - no more, no less.
Indeed. Anything new and shiny is interesting for folks who like tinkering around, but Node is hardly new or radically different. It's most likely getting phased out instead.
Not to mention all the ways Java can be totally different from the traditional way of using Threads. The Reactive approach of [RxJava](https://github.com/ReactiveX/RxJava)/[Netty](http://netty.io/) or [undertow](http://undertow.io/) or the new servlet 3.1 is again totally different from what is shown here. It's a bit superficial..
You know that Node supports both promises and async right? Also, being condescending isn't warranted. I've been a JavaScript developer for most of my life and have been programming websites professionally for 15 years. Son. I know callback hell and I also know promises. Async is new enough that I have yet to use it in my day to day programming.
They haven't switched to Byte Buddy yet, but they have [SPR-8190](https://jira.spring.io/browse/SPR-8190) for that.
I have yet to see any significant code using async. though I do think it's the better solution long term. Promises make callback syntax easier to stomach, but it's still an awful abstraction. They only time I can say that I like it when I'm running multiple promise based requests in parallel. Otherwise I'd way prefer the language to be written in a blocking model ( Note, I'm not saying that doing context switches in the OS is the correct thing underneath. clearly continuations are more performant ). 
&gt; This article conflates Java with Java EE, and doesn't mention the concurrency libraries that specifically handle threads for you, like Akka. Explicit threading and handling threads for you are both things that are supported by Java EE, though the latter is more common. In Java EE you can switch a Servlet request to async or call a method that's annotated with @Asynchronous. You can then handle the servlet request from the async method and/or you can execute different pieces of business logic in async methods without ever seeing or having to handle threads. @Asynchronous methods return Future instances and their execution is scheduled using an executor service that uses the default thread pool.
Any developer who is using javascript and not using promises isn't a Javascript developer. I wouldn't hire a full stack web programmer, much less a front end programmer, who didn't know how to use promises. 
Unfortunately, there is no word on the benefits of this migration. Is there any performance gain? Does it bring some new features? Or is it just easier for Hibernate developers to use?
/u/edgar-espina The syntax used to define a route does not seem familiar to me (probably because I write Java just from time to time and not that experienced). import org.jooby.Jooby; public class App extends Jooby { { get("/", () -&gt; "Hey Jooby!"); } public static void main(final String[] args) { run(App::new, args); } } Why is `get(...` defined like that between `{}`. What's going on? --- Also my second question, how would you organize a large app? As you clearly can't keep all routes in a single file. --- When I try to run the steps from http://jooby.org/quickstart/ mainly `mvn archetype:generate -B -DgroupId=com.mycompany -DartifactId=my-app -Dversion=1.0-SNAPSHOT -DarchetypeArtifactId=jooby-archetype -DarchetypeGroupId=org.jooby -DarchetypeVersion=1.0.0 ` I get the following error [INFO] Scanning for projects... [INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom [WARNING] Failed to retrieve plugin descriptor for org.apache.maven.plugins:maven-clean-plugin:2.5: Plugin org.apache.maven.plugins:maven-clean-plugin:2.5 or one of its dependencies could not be resolved: Failed to read artifact descriptor for org.apache.maven.plugins:maven-clean-plugin:jar:2.5 [INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-install-plugin/2.4/maven-install-plugin-2.4.pom [WARNING] Failed to retrieve plugin descriptor for org.apache.maven.plugins:maven-install-plugin:2.4: Plugin org.apache.maven.plugins:maven-install-plugin:2.4 or one of its dependencies could not be resolved: Failed to read artifact descriptor for org.apache.maven.plugins:maven-install-plugin:jar:2.4 [INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-deploy-plugin/2.7/maven-deploy-plugin-2.7.pom [WARNING] Failed to retrieve plugin descriptor for org.apache.maven.plugins:maven-deploy-plugin:2.7: Plugin org.apache.maven.plugins:maven-deploy-plugin:2.7 or one of its dependencies could not be resolved: Failed to read artifact descriptor for org.apache.maven.plugins:maven-deploy-plugin:jar:2.7 [INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-site-plugin/3.3/maven-site-plugin-3.3.pom [WARNING] Failed to retrieve plugin descriptor for org.apache.maven.plugins:maven-site-plugin:3.3: Plugin org.apache.maven.plugins:maven-site-plugin:3.3 or one of its dependencies could not be resolved: Failed to read artifact descriptor for org.apache.maven.plugins:maven-site-plugin:jar:3.3 [INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-antrun-plugin/1.3/maven-antrun-plugin-1.3.pom [WARNING] Failed to retrieve plugin descriptor for org.apache.maven.plugins:maven-antrun-plugin:1.3: Plugin org.apache.maven.plugins:maven-antrun-plugin:1.3 or one of its dependencies could not be resolved: Failed to read artifact descriptor for org.apache.maven.plugins:maven-antrun-plugin:jar:1.3 [INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-assembly-plugin/2.2-beta-5/maven-assembly-plugin-2.2-beta-5.pom [WARNING] Failed to retrieve plugin descriptor for org.apache.maven.plugins:maven-assembly-plugin:2.2-beta-5: Plugin org.apache.maven.plugins:maven-assembly-plugin:2.2-beta-5 or one of its dependencies could not be resolved: Failed to read artifact descriptor for org.apache.maven.plugins:maven-assembly-plugin:jar:2.2-beta-5 [INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-dependency-plugin/2.8/maven-dependency-plugin-2.8.pom [WARNING] Failed to retrieve plugin descriptor for org.apache.maven.plugins:maven-dependency-plugin:2.8: Plugin org.apache.maven.plugins:maven-dependency-plugin:2.8 or one of its dependencies could not be resolved: Failed to read artifact descriptor for org.apache.maven.plugins:maven-dependency-plugin:jar:2.8 [INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-release-plugin/2.3.2/maven-release-plugin-2.3.2.pom [WARNING] Failed to retrieve plugin descriptor for org.apache.maven.plugins:maven-release-plugin:2.3.2: Plugin org.apache.maven.plugins:maven-release-plugin:2.3.2 or one of its dependencies could not be resolved: Failed to read artifact descriptor for org.apache.maven.plugins:maven-release-plugin:jar:2.3.2 [INFO] Downloading: https://repo.maven.apache.org/maven2/org/codehaus/mojo/maven-metadata.xml [INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-metadata.xml [WARNING] Could not transfer metadata org.apache.maven.plugins/maven-metadata.xml from/to central (https://repo.maven.apache.org/maven2): hostname in certificate didn't match: &lt;repo.maven.apache.org&gt; != &lt;repo1.maven.org&gt; OR &lt;repo1.maven.org&gt; [WARNING] Could not transfer metadata org.codehaus.mojo/maven-metadata.xml from/to central (https://repo.maven.apache.org/maven2): hostname in certificate didn't match: &lt;repo.maven.apache.org&gt; != &lt;repo1.maven.org&gt; OR &lt;repo1.maven.org&gt; [WARNING] Failure to transfer org.apache.maven.plugins/maven-metadata.xml from https://repo.maven.apache.org/maven2 was cached in the local repository, resolution will not be reattempted until the update interval of central has elapsed or updates are forced. Original error: Could not transfer metadata org.apache.maven.plugins/maven-metadata.xml from/to central (https://repo.maven.apache.org/maven2): hostname in certificate didn't match: &lt;repo.maven.apache.org&gt; != &lt;repo1.maven.org&gt; OR &lt;repo1.maven.org&gt; [WARNING] Failure to transfer org.codehaus.mojo/maven-metadata.xml from https://repo.maven.apache.org/maven2 was cached in the local repository, resolution will not be reattempted until the update interval of central has elapsed or updates are forced. Original error: Could not transfer metadata org.codehaus.mojo/maven-metadata.xml from/to central (https://repo.maven.apache.org/maven2): hostname in certificate didn't match: &lt;repo.maven.apache.org&gt; != &lt;repo1.maven.org&gt; OR &lt;repo1.maven.org&gt; [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 6.911 s [INFO] Finished at: 2016-11-18T21:51:48+02:00 [INFO] Final Memory: 11M/155M [INFO] ------------------------------------------------------------------------ [ERROR] No plugin found for prefix 'archetype' in the current project and in the plugin groups [org.apache.maven.plugins, org.codehaus.mojo] available from the repositories [local (/Users/daniels/.m2/repository), central (https://repo.maven.apache.org/maven2)] -&gt; [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/NoPluginFoundForPrefixException Any idea what's going on? I have `Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-10T18:41:47+02:00)`
No until they get a smart guy as Nadella as CEO.
Or you could just teach them... 
Hello, Here is a nice explanation about [instance initializer](http://stackoverflow.com/questions/1355810/how-is-an-instance-initializer-different-from-a-constructor). Here is an alternative syntax for a [Jooby](http://jooby.org) application: public class App extends Jooby { public App() { get("/", () -&gt; "Hey Jooby!"); } } For large application you have few options: Uses MVC routes (like Spring or Jersey): @Path("/") public class Controller { @GET public String salute() { return "Hey Jooby"; } } Compose your application from multiples apps: public class Bar extends Jooby { { get("bar", () -&gt; "bar"); } } public class Foo extends Jooby { { use(new Bar()); get("/foo", () -&gt; "foo"); } } Maven got some issues with certificates today, that is the problem you are facing right now. You might want to try [jcenter](https://bintray.com/bintray/jcenter)
Simplicity? Easy to learn? I like vert.x a lot but think [Jooby](http://jooby.org) simplicity is a key benefits over some others (micro)frameworks.
I found a few sentences about it, one here: &gt; Byte Buddy rather works with precompiled code which can be written in any JVM language and which can be inlined at runtime. Avoiding runtime compilation makes Byte Buddy’s transformations type-safe and much faster to apply at runtime. From github issue - will offer better java9 integration.
Thanks. 
It's not really a good point if you're using modern Javascript. Of course Javascript will always have quirks regarding its dynamic typing, but I think most people just like to point to things that aren't instantly intuitive and go, "Wow, the whole language makes nooooo sense!". Another thing people do is associate Javascript the language with the DOM. Javascript is much more than that, and it shouldn't be blamed for the DOM being weird. Plus you don't touch that in node code anyways. 
When you have to write a book to tell people what parts are okay to use, isn't the implication that there are a lot of bad parts?
That books is better titled "Javascript for dummies". 
They do nothing lightly, but they still make mistakes, and they are still accountable to Oracle's purse strings. They are Oracle employees first, Java developers second. Sad but true when the language is held hostage by a giant mega-corporation. From what I understand, the reason they did not use OSGi for project jigsaw is to retain compatibility with existing (bad) code in the JRE that manually accesses the Class Loader. I interpret this as "Oracle didn't give the Java devs enough time to go back and rectify the bad code." I'm sure the endless broken deadlines on the Jigsaw / modular Java project put Oracle in a bad mood anyway.
Completely skips over the fact that event model and callbacks are hard to debug and threaded Futures model is far more maintainable. Also Java has a Javascript runtime for Isomorphic pages.
Yeah, I just learned Java in school this semester (was using C beforehand) and man, is it exciting to program with! 
I have also written apps in Javascript and Java and would avoid Java at all costs unless forced to use it. I prefer a language which makes it easy to use functional programming styles, and even though Java 8 has made some good steps towards that, the fact that functions in Java are so difficult/verbose to use is a major issue.
You're right! Netflix’s Chaos Monkey is based upon Amazon EC2 API. Trouble Maker is not dependent upon the cloud and could be used within an enterprise environment. It sounds crazy, but having failure as a use case is truly helpful in ensuring stability. Automated or manual procedures should occur to remediate problems, while still continuing to operate and serve users, and you never know until the failure happens. 
Double entendre?
You don't find it at all funny that your comment is literally what my comment said the stereotypical 'lol js sucks' comment is? I don't get why this is such a difficult concept to grasp. Javascript is dynamically typed. It's not compiled. It has to handle situations where types are mixed instead of crashing at compile time. That's not proof that Javascript is bad. That's proof that you can't understand what a dynamically typed language is. And no, I am not saying static typing is bad. But I am saying dynamic typing isn't such a bad thing that it invalidates the existence of the language. Expecially when there are plenty of tools to get around that such as typescript or flow. 
http://sparkjava.com Not my first choice of framework but if you're obsessed with simplicity there you go. You need a more active imagination. Every language has a Sinatra level simple API these days. Node is not special in this regard. Just slower. 
You can build it with a single javac command. Or you can just use gradle, and it will init a project for you on the command line. Or you can open a _real_ ide like intellij and have it make it for you. Do you really want your argument to be that building a java project is too hard for you? Embarrassing.
Sigh, here we go again. You don't answer questions, and instead resort to attacking people directly. Think what you will, that makes no difference to me. I know what my experience has been with it, and I speak objectively. You just come across as a grumpy old trout who can't answer questions. I'd say that you're the one spreading bullshit around due to your own bias.
Do you also neee the syntax highlighting, collapsible tree, etc or only need to have the json formatted? Browsers have JSON.stringify to format a JSON. I created a [bookmarklet](https://fajran.web.id/2014/10/json-formatter-bookmarklet.html) to help me do this
&gt; the fact that functions in Java are so difficult/verbose to use is a major issue. wtf are you talking about?
I usually copy paste into notepad++ and format with CTRL-ALT-M
Cool news that plexus archiver supports snappy.
Python is dynamically typed too and it doesnt let you do that (at the latest you get a runtime error). Its type coercion / weak typing that is causing that issue. JavaScript is the only language that lets you run into such failures because its core design was rushed.
&gt; The proper way to do it is using Resource Adapters. That, or using the managed executor service from the Concurrency Util spec, or by using @Asynchronous.
So you correctly call out the author for his lack of knowledge about Java and everything is fine but we call you out for your lack of knowledge about Node.js and suddenly we are "attacking you directly"? &gt;I know what my experience has been with it, and I speak objectively. So that's your argument to still defend what you say. Because I get it, anyone can say nonsense based on old knowledge. I've done that. But once somebody else correctly calls me out I just recognize that was an old experience and I should check how things are going on now. But you instead insist that you are "speaking objectively" and "you know what your experience has been with it". I can imagine how that works for many other situations: 1. A: "Java EE should not be used because it forces you to have thousands of XML lines to configure every single thing" 2. B: "You mean J2EE. That's a lie since Java EE 5" 3. A: "I never claimed to be a Java EE god. I know what my experience has been with it, and I speak objectively. You don't answer questions, and instead resort to attacking people" Java situation: 1. A: "I would not start a software project right now with Java. It still doesn't offer a high-level way to do concurrency" 2. B: "Not true since Java 7 (launched in 2011) that introduced JSR 166 so cut the bullcrap" 3. A: "I never claimed to be a Java god. I know what my experience has been with it, and I speak objectively. You don't answer questions, and instead resort to attacking people" C++ situation: 1. A: "C++ is an old language that forces you to handle memory manually. Hell, it doesn't even have a memory model" 2. B: "That is nonsense. C++11 defined a memory level and introduced smart pointers that reduces manual memory management a lot. And move semantics reduces the number of cases you need to resort to pointers". 3 A: "I never claimed to be a C++ god. I know what my experience has been with it, and I speak objectively. You don't answer questions, and instead resort to attacking people" Seriously, that argument is so stupid.
Bad, in most cases, maybe 95% one can not recover from exception. So why catch, why have all boilerplate for 5% or less when exception can be handled?
Take a step back. Have a drink. Work on another feature and come back to it when the balmer peak kicks in. http://xkcd.com/323/
He is speaking of the Windows Subsystem for Linux, which includes the Ubuntu Bash in Microsoft Windows 10. 
&gt;Old knowledge? Seriously? You didn't even bother to respond how many people actually know and/or use node streams compared to callbacks? Old knowledge as in saying "callback hell is still a problem with no widely used solution". Now I don't know why are you so furiously requesting me to provide numbers about how many people use those patterns. By the same logic in your original comment you should have provided the number of people that actually know and/or use threads directly. Do you have the numbers? Or you think that you have the right to ask others for a study on the subject when you didn't do it? The **fact** here is that the community has solutions out there so *you* don't have to deal with callback hell. &gt;Even the Node site itself shows that as the canonical way to implement functionality using Node. There is a difference between availability of libraries/functionality vs the accepted way of doing things. The official Node.js site shows how to use callbacks. But using callbacks is no the same as "callback hell". **Do you know the difference?** Furthermore is not the job of that site to explain all the best practices just like the Java tutorial doesn't include "Effective Java" as an appendix. Now [once you google about callback hell on Node.js](http://lmgtfy.com/?q=nodejs+callback+hell) or [callback hell in JavaScript](http://lmgtfy.com/?q=javascript+callback+hell) you get the same info to avoid the problem. &gt;I think you've got some mental issues in there, mate. I suggest you deal with those before trying to engage people in "discussion". Heh. I suggest you to study about a particular technology before you try to lecture people out there about it because otherwise people will smell the bullshit you are spreading and you will get called out.
Nice Vlad! Been liking your work (tutorials, articles etc..) for a while and just wanted to say thanks and keep up!!!
I think that type coercion can be used correctly as long as you are mindful of what you are doing For example, truthy checks on values for null/undefined where that value can't be something like 0 which is also coerced to false. I think most people think a lot of features are misused in Javascript because it is the most ubiquitous language. That means there are lots of terrible programmers using javascript who shouldn't be programming in the first place. Couple that with that fact that you can accomplish a lot of functionality without understanding how to properly use Javascript and you have a recipe for a lot of 'bad Javascript code' which is really just a lot of bad programmers which happen to use Javascript. 
Thanks for your kind words. I'm glad you like my work.
You will find [here](http://jooby.org/doc/deployment/) all the available options (fatjar, stork, capsule, etc...)
Beautiful. Thank you and sorry for my "newbie" questions but your framework really looks like something that would get me to start writing web apps in Java. 
You're welcome and don't forget to follow us at [@joobyproject](https://twitter.com/joobyproject) and [Github](https://github.com/jooby-project/jooby)
Just supports lambdas http://viralpatel.net/blogs/lambda-expressions-java-tutorial/
I'm aware, and I use lambdas in my example. But I don't always want an anonymous function to throw away after execution. Sometimes it's nice to save that function to a variable. Unfortunately, doing that in Java is not super simple. I don't want to define an entire class/implement an interface just to have a reusable function.
That's great to hear. Wondering how to work around the catch though, that you must not issue other queries while streaming. I can imagine a lot of user might want to issue queries using the current stream's values as parameter. 
Or you could just have the compiler do that for you. JavaScript has so many needless minefields that even the best programmers will step on one eventually. &gt; For example, truthy checks on values for null/undefined where that value can't be something like 0 which is also coerced to false. This example alone shows many flaws (truthy, null/undefined, 0 coercing to false) that ultimately have no non-superficial purpose and therefor are overcomplicating things.
I've just commented some of the issues we see on the ticket.
pipe into python -m json.tool for more fun and color, download jq (look it up on github) and you can color the output and pipe to less
When talking about NodeJS, no transpilers are needed. If we're talking about frontend code from a NodeJS environment, then you're probably already using transpiler because the browsers don't yet have async support along with support for many other features. The modern browsers all support Promise, but the typical fallback is to use Q or even your frontend framework's version of a promise ($q for Angular).
I have a Java Jar I run as an Ubuntu system service. I'd like to commercialize it some day. There are things around Java (or Python, etc.) like the script that controls that lifecycle of the Jar as a service, setting it to be a service with upstart (or systemd I guess now) and the log rotation configuration. These are things that make Docker seem like a good fit when you have to consider it from the point of view of potential customer's IT shops. They don't want to see something come in that would require retooling their systems, with Docker, they'd just have it running, buy my service and install it as a Docker container. That's what I'm thinking anyway, it seems to me like it could be a good use case for Docker. 
I'd like to find an article that shows how to Dockerize a plain Jar.
The PreparedStatement fetchSize must be set to the right value.
Since this is help with Java programming, it should, as the many hints here on the subreddit indicate go in **/r/javahelp**. **Post removed:** Programming help
"jq" is a really nice command line tool. It both formats and highlight the json. As well as allowing querying and rewriting.
Recently, I created an online tool that can format JSON and store it for later use via http get request. You can try it here http://www.json-gen.com/
What's the front end done with?
Your Teacher is a moron. 
I always have the Firefox Developer Edition [](https://www.mozilla.org/en-US/firefox/developer/) opened because of this. Just open an API endpoint and it'll parse the JSON for you. 
I never really understand why people mark down "static typing" as a "con" in most of these comparisons.
A. It was satire B. Bullshit
[removed]
[removed]
[removed]
Your choice of words is confusing, you say that checked exception are both "not fixable" and "recoverable" which seem like the opposite of each other... 
&gt; Yep. That's two of the sections from How to be a Programmer. Very important to know when you are done for the day. This is why I hate Agile and Scrum, need to start fresh tomorrow? That means looking bad in the morning standup.
https://github.com/olivergierke/spring-restbucks
What you're trying to do is pretty basic. There's probably already some tools that do what you want, such as LibreOffice (in database form though). If you want to write an app yourself you shouldn't have too much trouble, though this subreddit isn't really the place to learn how to program. Check /r/javahelp or /r/learnprogramming.
&gt; As for Javassists maintenance state, I think it depends on the angle you look at it. Javassists compiler is still at a Java 1.4 code level; generic types and type annotations are still not supported properly and it does not seem like any of these features will be implemented any time soon. Yeah, even comparing it to 1.4 there are already some weird exceptions that don't line up. Also, anonymous classes etc. are not supported. In that sense it has been out of date for several years already. Then again, arguably it's still easier to work with this pseudo Java than bytecode. I meant rather in terms of its low-level interface and core functionality. The big issue with all the bytecode engineering toolkits is that they need to adapt to spec changes; not doing so means it's over for that library. It seems Javassist has at least kept up with that.
how are you supposed to fix a hardware failure? You can't in that point of time. But you can recover from that state e.g. by loading cached data or show an error.
Vertx is a thin abstraction over Netty and gives some default setup when used with Vert.x Web. We use vertx at work but don't so anything of the actor model and many verticle instances. We launch a single verticle (aka web server) per docker process. I think you can control the number of worker threads but since it's even event looped the main work happens on a single thread. 
It's certainly down to user preference. I've tried NetBeans and I wasn't really all that impressed. I find Eclipse to be easy to read and relatively quick (plus the dark theme is really colorful).
&gt;choco install -y maven | brew install maven | apt-get install maven then copy and paste an xml file &gt;mvn compile ???
User preference is a personal thing. If you're experienced enough to know the quirks of Eclipse and to see that your code is ok and IDE is going crazy it's a matter of bug tolerance. If you're absolutely new to programming and your bloody IDE tells you your good code is wrong, it's objectively a bad IDE to start learning with, cause you will waste time searching/asking questions on forums or SO instead of learning programming.
Vert.x guarantees that each verticle is only run on a single thread at any giv3n time. Whatever processing you need to do MUST therefore be done either by using *executeBlocking* (which executes code on a thread pool) or via the event bus to have the work done by other verticles. Scaling would be accomplished by adding more Vert.x nodes and clustering them to extend the eventbus. Edit: You can also deploy verticles as "worker" verticles, and they CAN be multithreaded. You can even deploy multiple instances of a worker verticle within a single node. When you do this though, you must do your own concurrency controls to avoid race conditions and state smashing. 
LXSS is the hot new Linux subsystem that you can enable in Windows 10 Anniversary Update. It's basically a whole Ubuntu command line environment running on top of a Linux facade for the Windows kernel. The applications are true ELF files, not .EXE like Cygwin. So you can run just about anything that would run on Linux. Except GUI stuff, like an IDE, or apps requiring advanced kernel features, like "local" Docker.
Warning I'm somewhat new to this as well so i might be wrong... The threads will be per core and handlers will be on a specific thread. multi reactor derives gains when you have enough handlers that the work is given out evenly. As for distribution, yes it's basically separate jvms acting as one. Workers has a different meaning here - they are basically threads which it's okay to throw long process stuff at since they are segregated from normal eventloop. 
I at least understand preferring intellij...I prefer eclipse myself. Netbeans though? It feels verrry dated. As a beginner netbeans is less overwhelming I guess. IntelliJ would be rough to learn on because all the features. I actually learned on jCreator initially. Not dealing with packages, or any IDE mechanics helped.
You guys should also check put [Riposte](https://github.com/Nike-Inc/riposte) for another thin layer abstraction over netty. 
FYI, Function interface has a static method called andThen(...). You are talking shit about a language you don't grasp well.
Wish I could use streams on Android.
&gt; this sharing easier I was thinking of using a resilient, good old SUBST to "mount" that hidden lxss folder to a less cryptic path that would be easy to access from Eclipse. You not should do that if you not like to destroy your lxss environment. Windows stores POSIX premisses on NTFS extended attributes, that Windows apps usually don't preserve. And linux subsystem assumes that if they are missing, the file is corrupted. Put your data outside of the lxss folders, and mount/link these folder inside of the lxss
My company heavily uses Java for backend and Android so I feel it's more useful for me to learn Java at the same time.
Yeah, if you don't know Java you should learn Java first. However Kotlin interoperates with Java, so it's possible to write one class in Kotlin and another in Java in the same codebase.
Interesting name: Hot Streams
Think pretty much all he is saying that "lacks" in Streams is reactive operators... Think all of them are in RxJava... 
I've encountered it a lot when I ran a new hire training at my last job which was a bit frustrating. Out of 12 people 3 or 4 had this problem in 2 weeks of training. Now I ran into it again while teaching my friends, 10 minutes after they installed it. Another reason I don't find Eclipse good for learning Java is its perspective system. When you start debugging you suddenly have to learn new UI layout which IMO is worse than what NB or IJ offer in that scenario. If you have a teacher IDE is a personal preference, but if you learn alone from online resources behaviour like this is really bad. One more thing - the fact that Eclipse compiler doesn't fail on compile errors like you would expect it to is not good either. 
Jesus, you people are the most sensitive bunch. I'm not shit talking Java. If you read the OP, I'm responding to a comment about how Javascript is apparently unusable, which is simply untrue. I pointed out some reasons why people might like Javascript over Java. To your point, andThen isnt going to change much here. Just just a function to compose. It doesn't help with what I was pointing out; you can't EASILY write reusable functions in Java.
Well son, apparently you don't. I'd like to see your way of defining a reusable function which doesn't require that. Not using an anonymous lambda. Write a reusable function which can take multiple arguments in Java. [Here's a hint, son](http://stackoverflow.com/q/27872387/614622). Also, I'd just just like to point out how butt hurt everyone seems to be about me pointing out the fact Javascript is better for functional style programming than Java. Jesus, get a grip people. I am not 'trashing Java' as someone else said, I'm simply pointing out that there are legitimate reasons to enjoy using javascript over Java. 
It looks like it can't parse properly a class (due to caching) and doesn't see its fields or methods. So any other class using it will show as having errors. Usually restart is enough, sometimes deleting the build folder is needed.
Never had that. Are you using git?
Aside Google's Java style that /u/40034936 already has linked, there are the official [Code Conventions for the Java Programming Language](http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html) from Oracle (actually from Sun, the creator of Java).
They are bad. Very bad. And now that lambda and streams are part of Java, they have unleashed these discussions. 
I've seen this happen. I'd guess it's due to weird caching behavior freaking out after a file changes on disk, such as from version control. A bit annoying.
This happened without git being used.
My general areas would be... 1. Error/Exception Handling : He does mention 3 related issues. But be honest, have you ever done something you felt a bit *less than natural* with Exceptions due to Streams design? E.g. Wrapping with a RuntimeException, or other patterns 2. Streams is an *Unbounded* data source API used quite often ( and officially ) used as a *bounded* data source. : I see Collections-to-Streams and back conversion back and forth in fairly quick succession so the developer can use the Streams API on a bounded datasource, i.e. something that's more naturally a Collection or a Dataset over a stream. I've seen this in official Java documentation even, and do it myself. But wouldn't it have been good to have a subset of the Streams API specifically for bounded/countable datasets? Linq and others do this.
I wish they would add something like Go did to format sources (gofmt). Never discuss again, even with conventions or big players. 
Looks like a worthy Spring alternative!
Great article. Very nice to see someone trying to pragmatically implement DDD practices. I also dig the usage of application events, which are a great but not enough popularized feature of Spring. I was hoping you would take things a bit further, but the example with orders seems to be chosen to fit SDR. The Orders API (slide 64) is just a CRUD, but what if I need to account for more use cases? For example, 1. An order may be activated causing a chain of actions; 2. Location may be changed until order is ready (partial update with validations and chain of actions); 3. Different business logic for order cancellation depending on its statuses. I don't see how this can be sanely done without introducing additional layers and DTOs. Also, at this point, REST kinda doesn't seem to be helping: the resource and HTTP verbs provide less suitable abstraction than RESTful RPC (aka resource/action) and the benefits of HATEOAS do not outweigh those drawbacks. Having run out of HTTP verbs, I can model that with additional resources e.g. /order/{id}/activation, but this seems a bit artificial because this is action rather than resource. In the end, proper documentation and Swagger are mighty tools too. Having an endpoint expecting a concrete DTO is already a great piece of documentation. So what is your take on such more complex cases that business likes to throw upon developers?
I've been kicking myself ever since bash for Windows came out for choosing the crlf crap in all my git repos; now I have to convert each of my repos to lf before bash for Windows can be useful in that project
Sorry to tell you but if you try to develop java with spring without an IDE, the build tool won't matter.
Instead of jumping straight into Spring you really should learn Java first but you probably heard that a lot ... so do it but make sure to check out Java topics while you develop. &gt; As I've read gradle is the way to go. For spring you can use either Maven or Gradle, it's not the way to go, it's just that there are two solutions, Maven is Xml while Gradle is not. &gt; Any other advices? Yes, check out Spring boot, which is Spring MVC but without headache, it's opinionated and pre configured. [There are also many useful beginner guides](https://spring.io/guides) on their site. [This pic explains the difference between Spring Boot and Spring](https://s3.amazonaws.com/dev.assets.neo4j.com/wp-content/uploads/20160119180746/spring-boot-framework.png) &gt; Any other advices? Yes learn Java first! &gt; Any other advices? You should learn Java first. &gt; Any other advices? It's really hard without Java knowledge.
"ASCII horizontal space character (0x20) is the only whitespace character that appears anywhere in a source file." and 4.1 Brackets (or how to concisely format highly readable code)
I think their code with 2-space indents and "no line break after the brace if it is followed by else" looks [very cluttered](https://google.github.io/styleguide/javaguide.html#s4.1.2-blocks-k-r-style)... I assume that they must now blindingly follow that rules forever ;)
I encounter it every time I try to use the stupid thing. And each time the fix is different.
Some companies use Sonar for checking code standards. Anyone here use it?
We use it. I don't really like how server-centric it is, though. It's good for catching mistakes after they happen, but not so good for catching them before they happen.
android doesn't support java 8 ?
A poor developer always blames the tools. Just sayin...
If the brackets share a line with code "high readability" is almost a joking concept imo. If you want proper standards: Oracle has a style guide you might peruse. It is THE standard. I hate the bracket style they use though, so idgaf. On enterprise projects that's almost always the expected style.
I put a line break before and after the bracket indenting to it's mate (Hortsmann's style.) I think it's far cleaner
On the other hand I'd never work on a project without extremely strict style guidelines.
I liked "The Elements of Java Style" by Scott Ambler in addition to the google &amp; twitters code conventions.
Maven can easily be used without an ide. However an ide of some sort is recommended for the "write Java" portion of your day. If you want to run mvn test outside of an ide, more power to you. Btw, if you used something like atom.io, sublime text, vi or emacs for writing js; that was your ide. However you'll want something a bit heavier for Java. Personally I prefer intelij. Eclipse is a close runner up.
Me too, but everybody else that I know hates that style. I'm trying to change my ways. 
Well, you rarely call a person who started learning programming and java 4 hours ago a good developer...
I just reread your post and don't think you should dismiss the role of the IDE too quickly. The road to enlightenment is * use Javac to compile a few of your classes * use an IDE for your day to day edit/compile/test coding * use Maven or Gradle for your continuous builds With a correctly configured set of projects you will go straight from checking code out of Github (or whatever floats your boat) into your IDE and immediately be coding, unit testing and running your app. You shouldn't ever have to think about compiling while doing actual coding. 
I just looked at this in more detail and their enum and array declarations are fucking WEIRD looking. "No C-style array declarations" "The square brackets form a part of the type, not the variable: String[] args, not String args[]." This language derives from CPP which comes from C. Why do this? Gross. It's the same damn type with a modifier. I have to say for a meticulously thought out enterprise style guide...I have a LOT of disagreements. PS: TAB MASTER RACE!
https://www.jetbrains.com/help/idea/2016.2/code-inspection.html Not so much companies but projects can have inspection profiles if you want to contribute. Netty uses one that I have adopted and tweaked over time. The number of code style inspections for frameworks and libraries is pretty astounding. 
Everyone should have this pocket book on their desk.
&gt; "The square brackets form a part of the type, not the variable: String[] args, not String args[]." That seems to make sense to me. In Java you declare the type of the variable before the name of the variable. So if you want an array you should do `int[] a`, putting the square brackets in the variable name breaks this convention/pattern. 
In my view it's exactly the same type with a modifier. It's a property of the individual variable not the type. I mean I guess that's subjective, but it's definitely my view.
&gt; I've encountered it a lot when I ran a new hire training at my last job which was a bit frustrating. Out of 12 people 3 or 4 had this problem in 2 weeks of training. It sounds like you have an agenda and are adding to your story.
I'm almost 100% certain I found one earlier. I had to google it for quite awhile. I think I may have seen an actual oracle style guide...like the database oracle. Soooo...I guess that archived link is the one to use. That's all I came across as well. Weird I've always called that the oracle convention, but I guess it's the sun convention. 
&gt; It's a property of the variable not the type's underlying struct. It's a completely different type ([arrays](https://docs.oracle.com/javase/specs/jls/se7/html/jls-10.html), [type relationship](https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.10.3)). That Java does not care where you place the brackets is a historical curiosity.
Not until Oracle creates a proper instrumentation system! Still using the sun packages for that makes me suuuper sad.
I might start using Retrolambda. Jack disabling instant run is a pain in the ass.
the pc is the problem, normally eclipse is pretty fast to pick up corrected errors, but if you pc has performance issues, then it can take quite a while. i've seen it before on a ram limited pc (with only 2GB RAM).
We do. I also added CheckStyle to our builds with settings that are slightly stricter than Sonar. Currently it does not break the build for the 'soft' issues (like going over the max length) but the plan is to make all CheckStyle issues break the build. This will clean up a lot of "code smell" issues in Sonar. 
Mac plebs does not use editors that indent with spaces? set expandtab ts=4 sw=4 ai
There are some problems with eclipse, but I cannot remember a single one right now that was actually caused by eclipse, but rather a faulty plugin (subversive, i'm looking at you ._.). I have to agree that eclipse does have a very high overhead for beginners, but it should be manageable if you are somewhat tech-savy.
so, what should I know about Java first in order to learn Spring?
Less boilerplate lines. As if that has ever been sufficient reason to choose any language. That's like abandoning one car for another because the steering wheel feels better.
&gt; Kotlin allows you to firstly get rid of the getters and setters, but also allows you to set variables in your class directly from the constructor Funny that you mention that, when your `User` class has *no constructor* at all. Also, constructors can have parameters. You can even have more than one constructor, and even call another constructor from within a constructor. &gt; To make use of this class in Java, you'll typically write this boilerplate: &gt; User user = new User(); &gt; user.setFirstName("Graham"); &gt; user.setLastName("Spencer"); No, you'd write proper constructors instead of setting each value individually. Something along: public User() { this("", "", ""); } public User(String firstName) { this(firstName, "", ""); } public User(String firstName, String lastName) { this(firstName, lastName, ""); } public User(String firstName, String lastName, String email) { this.firstName = firstName; this.lastName = lastName; this.email = email; } Then, you could use your example and call `User user = new User("Graham", "Spencer");`. Yes, having multiple constructors adds boilerplate code, but it also gives you greater control over what happens.
good answer. I'll do it right away.
😑🔫
Did they really use the difference of two letters in the file extension as an argument...
Oh yeah! Another "developer" who, despite claiming to have a long history of programming, can't even write a proper class and blames it on boilerplate code. Just what the world needed. Seriously, your *pros* for Kotlin and thus *cons* for Java are easily equalized by using a proper IDE and proper coding standards (constructors for a change? Even better: constructors with parameters? Java 8 features? Static imports? *Proper* encapsulation - not every field needs getters and/or setters.)
That kinda is an important detail 🤔😜
I wrote my notes on a JVM environment with WSL here: https://gist.github.com/wsargent/072319c2100ac0aea4305d6f6eeacc08
Sounds like a horrible place to work. Perhaps it is geared towards a certain type of personality/programmer and those who fit the mold absolutely excel there. I'd love to hear from someone who has actually worked there or is currently working there for an AMA! edit: found this discussion on hacker news in case anyone was curious: https://news.ycombinator.com/item?id=13003415
The [parameter hints](https://www.youtube.com/watch?v=ZfYOddEmaRw) functionality is really helpful.
That's such a nice little feature. I primarily develop in Groovy nowadays and having that little touch in Java is welcome.
/u/edgar-espina Can you please explain what happened when you added "use(new Jackson());"? Does that mean that from now all routes are passed trough Jackson serializer? How can you control what routes are serialized to Json and what routes can still return text or HTML?
No chance of me finding it, but almost ten years ago, a Java JVM engineer stated in a presentation that JVM GC is by default tuned to work well with many small short-lived immutable objects.
To me the main reasons are that Ceylon didn't support Android from the very beginning and the tooling was not on par with what JetBrains was offering from start.
A module provides application/platform services. Here the Jackson module add a [renderer](http://jooby.org/doc/#parser-and-renderer-renderer). Renders test the `Accept` header and based on that it renderer the content or not. If you have more questions please join the gitter channel and/or google group. Thanks
I can't figure out how to enable it for Kotlin, only Java (
That's what it's called? Took me a while to find the menu function to turn it off!
It is not actually in the code presumably.
It's one of the many nice things that Kotlin adds 
I've wanted this for so long. 
What is semantic highlighting exactly?
Doesn't seem like it works for Kotlin but I'm sure it'll be something they'll add. 
Its amazing they are already teaching programming to 5th graders. If only critical thinking were a class that he took.
Not OP but I would like to see improvements to the dev tools, and the reloading the changing of a file. I know I can kick of a rebuild and that will force a reload, but it's a step I wouldn't be sad to see go.
Check out KDevelops highlighting. https://www.kdevelop.org/sites/www.kdevelop.org/files/inline-images/kdevelop5-breeze_2.png
That is amazing!
Even when you need small crud app with two entities? When spring boot startup is slow and Java EE testing is horrible? 
&gt; I think that most of the job can be done by something smaller like Ratpack or SparkJava (and they are non blocking) You can write your whole stack on just servlets too; even smaller! As a developer you're paid to deliver working software. Spring Boot (or whatever your favorite framework is) helps you do that. &gt; or even other language with easier, more flexible development. Such as? Also I don't see how deployment can get any easier than how we set it up here. I just kick off a build in Jenkins, it builds the service which then gets automatically deployed as a docker container to our Kube cluster. 
&gt; Yes, having multiple constructors adds boilerplate code Or just add Lombok ;)
That's superb. Even after fifteen years of using IntelliJ IDEA, they still manage to wow me with new features.
With microservices you can split it to smaller apps. This is not a killer feature but nice to have and others can do it ratpack, node, golang etc. When you start it locally multiple times a day its lots of time. Sometimes something small is needed, some kind of middleware or something, another layer. In that way in my opinion spring boot is too big. Many times I feel that I don't need lots of features from Spring. polyglot microservices: http://highscalability.com/blog/2015/12/1/deep-lessons-from-google-and-ebay-on-building-ecosystems-of.html 
I mean small in terms of domain. Even small app can generate lot of data and handle lot of http requests. But Spring got too much features for such simple task.
i don't know who own this site , found it after one of my students asked me if there is an online site to learn java interactively About the mistake you mentioned - you are completely right but calling a site spam for adding google ads? if its true all the internet is a big spam. to earn money from google ads you have to have huge traffic 
All these interactive tutorials have one thing in common: They teach *syntax* and *vocabulary*, but not actual *programming*. This concept may work up to a certain degree for simpler languages (mainly like HTML, CSS, and some scripting languages), but not for compiled, complex languages like Java. ---- This course in particular is pretty useless because everything interesting is "under construction". ---- Your students would be way better off using tutorials like: + MOOC [Object Oriented Programming with Java](http://mooc.fi/english.html) from the University of Helsinki + [Java for Complete Beginners](https://www.udemy.com/java-tutorial) Because they cover much more ground and teach proper programming practices along with the language.
Calling the *unary bitwise complement operator* `~` "bit shifting". -&gt; You need to take some [tutorial](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/op3.html) (which is even in the "language basics" section...) The shifting operators are `&lt;&lt;` and `&gt;&gt;`. Shifting is a completely different concept from complementing (or negation). Get your terminology right and write only about things you really do understand in depth. The code produces nothing but what an experienced programmer would expect. No surprises there.
TL;DR Mark the record as deleted and don't really delete the record. When selecting you simply exclude them.
Arquillian is not so simple. ;) Ratpack was build with thinking about testing such us starting server in test, client/ server . Spring Boot makes testing much easier too vs Java EE. With Golang you can do a lot of such things with pure Golang too. 
That is really nice! It is the things like this in IDEA that make me prefer writing in Java over C# even though I kind of prefer C# as a language Visual Studio isn't anywhere near as good as IDEA IMHO.
That part is fairly obvious, but seeing how the annotations make it all work so easily was pretty neat.
Here is a demo of some of the current issues: https://vimeo.com/192870219 Here's the YouTrack issue for auto configuration support: https://youtrack.jetbrains.com/issue/IDEA-139669 And more: https://youtrack.jetbrains.com/issue/IDEA-154647 
Does the method tagged with @PreRemove still get called if the update statement fails. In that case wouldn't it be better to use @PostRemove? 
Thanks for the detailed write up. Is there a chance we can get in touch 1:1 I'd love to learn more about your particular usecase. There's a Gitter channel (http://gitter.im/spring-projects/spring-data) we hang out in from time to time. I'd love to get an example project with what you'd like to build eventually to make sure we find a way for you to do that. Whether that includes customizing SDR or basically removing for exactly those parts.
How about ReSharper? I heard that it really improves Visual Studio, but never tried it out myself.
I found one trick to fix the class import issue. Whenever you encounter the issue, create a test class (control-shift-T). It will somehow fix the import issue.
Gavin King is also known for Seam and for the first version of what's probably the most influential spec in Java EE ever; CDI 
Good to hear. We unfortunately migrated away from spring data cassandra because of the lack of C* 3 support and we're not going through the effort of migrating back. 
Lol! No worries - I think that is what most people do :)
I hear you and you're not the only one that unfortunately had that experience. The lack of support for Cassandra 3 was one of the reasons we turned the community module into an official one for the Hopper release train. If you ever find the time or happen to run another project, please give it another chance :)
I definitely will take it into consideration next time. Also; some test support (not based on CassandraUnit) that keeps the C* instance alive would probably be very welcome. This was one of our biggest hurdles. With the move away from Spring Data Cassandra we also dropped CassandraUnit in favour of [Achilles](https://github.com/doanduyhai/Achilles/tree/master/achilles-junit). Creating / destroying a C* instance for every test is not feasible; build times exploded. 
I don't see a reason why you've been downvoated so many times.
How do you manage your compares locally when working with your own format? Do you just swap templates prior to the compare, and continue with the same formatting exercise?
If you mean like git diff...I reformat each time before then revert
Total burnout setup. Maximum productivity for maximum profit!!! Want a life with flexibility?! There is no room for that when you need maximum profit!!
I know a few enterprises that use spring-boot primarily as a microservice architecture.
We are a small company (&lt;40 employees) and lots of our services are built using boot. Most of our old stack was just servlets on tomcat and it worked fine, but quickly turned into a giant repository that was difficult to maintain. We eventually decided to break up services and Boot seemed like a great fit. We looked at DropWizard and Play as well. Dropwizard is great, but you can just put what ever you like from Dropwizard in Boot anyways. Play is really good as well, but SBT and compile times were brutal....
Boot simple does more which is a pro and a con depending on your use case. No it is highly unlikely Boot will ever start up as fast as Dropwizard because you have to start up the spring container. However, you get a lot more out of the box for Boot like security, data layer etc... I personally think Boot is the best choice most of the time. However, sometimes you run into situations where it might have been better to use Dropwizard. For example, disabling a default configuration class that doing things you don't want to do. 
Small startup, &lt;20 in development, we use docker with spring boot on a rancher/rancher os infrastructure in open stack. 
and who are you ? why would you shy off from saying the name of your company ? 
I can see it from the company's POV: get everyone starting and finishing at the same time so developers can pair program. But from the employee POV I'd dislike the loss of flexi-time (almost as much as I'd dislike too much pair programming)
But these benchmarks means nothing ;) they are too simple. 
These benchmarks are trying to gauge the raw throughput and latency on each framework. It is just saying that you need 44 cloud VMs on Spring Boot with Tomcat embedded to serve the same number of "Hello World!" requests like a single VM running light-java. And in above setup, light-java response time is 2.46ms and Spring Boot is 82.93ms. In real world scenarios, you microservice will have some business logic and the more cpu time spend on your business logic, the less impact the framework overhead will be. However, here we are talking about microservices and each server needs to be small, fast and use less memory. I have a real banking business transaction comparison between Light-Java and Spring-Boot(Undertow). The result is not significant but still substantial. Light-Java throughput 2319.34/sec with 11.39ms latency and 300MB memory Spring-Boot throughput 212.97/sec with 66.07ms latency and 1.5GB memory The test was done for my client with a real microservice and I am not allowed to publish the source code. 
That's a good point, I'll take that back to the team, thanks!
Our user guide covers a lot of it - https://github.com/aol/cyclops-react/wiki#streaming
Light Java provides a lot of middleware components that can be plugged in to address cross cutting concerns so that developers can focus on their domain logic only. It generates the project from swagger specification and is driven by the specification at runtime for security and validation. Test cases are stubs are generated as well and it is very easy to debug your service in IDE as it is just a standalone POJO app. I agree that Golang is very good in building microservices but at the current stage, it is very hard to integrate with existing systems. I am planning to build a Golang framework in the future to leverage my ecosystem ([OAuth2](https://github.com/networknt/light-oauth2) for security and Portal for service management)
I don't think it's a parse problem. I think it all goes back to how eclipse handles Java files (or any file really) as Resources. Modifying these outside of the IDE can produce unexpected and unobservable results. What's worse is that there are certain plugins that modify these files and those given modifications aren't registered as an internal modification. Some of the earlier SCM plugins suffered from this which is why you hear people bring up that use case so often when talking about Eclipse resource synchronization. You are right though that usually a 'clean' is sufficient to solve those issues. All that being said, I still use Eclipse both professionally and personally. I like the feature set and I spent a fair bit of time writing plugins so I feel comfortable writing small add-ons to perform common tasks that simplify my day to day work. At the end of the day your IDE is just a tool in the toolbox. If you think that there is a better tool for solving that problem, by all means use that.
The link of demo for commons-lang does nothing. 
Yep that is why I asked, we are doing the same thing and many more. Thanks for input, /u/olivergierke. Any chance of upgrading QueryDslPredicateExecutor#findAll methods return type from Iterable to List? We are also doing this "upcast" in our custom base repository interface in order to get to Stream faster.
I like your marketing angle with that title, but the post itself could've been better written. This is not the post I'd link "when someone tells me that Java sucks". You're essentially arguing with a straw man. No single competent developer would come to you with objections like "Java is old" or "Java is slow" (slow at *what*? you're arguing abstractions).
Is there a browsable demo on the site? Or some screenshots of these "visual representations"?
&gt; This series of articles shows a couple of alternatives. If you’re coming from the desktop perspective, the first idea is to go native. That would be C# or the universal platform of Microsoft if you’re supporting Windows. But this is a “Java and beyond” blog, to suffice it to say UWP is an interesting approach. The he goes and goes on and writes this &gt; We’ve solved all these problems with HTML5, but I still think there are good reasons to package your HTML5 application natively. HTML5 isn't Java.
Two things are off here: &gt; The post I link when someone tells me that Java sucks pointing to a **two days old** post. The author name is pretty similar to the reddit username... ---- Nice marketing strategy. ---- Yet, if anyone reads that post, the first thing they will see that it is ridden with spelling and grammatical errors. These alone remove all credibility of the source, not even looking at the real content, which is questionable at best.
I still don't see why people like these "streams" (weird name considering the traditional I/O streams use the same word, but mean nothing of the sort). Callbacks on top of callbacks until your Java looks like JavaScript.
A NonNull annotation is like having a Mandatory class. @Nullable is where it's at; Java's type system isn't really strong enough to handle a concept like Optional as a purely user-defined library entry. The bonus is if you never use nullable references, then you can mark the whole package as @NonNullByDefault and you have the best of both worlds. And you are protected against returning a null Optional where you meant an empty one.
what's doxxing ? 
IntelliJ and related tools make working with Java a quite lovely experience. Java might not have some of the prettiness of C# or the low level (ugh) features of C++ but it has an acceptable built in UI toolkit, it runs solid, hardly ever crashes (outside of programmer error which is true of all languages), etc. It runs crazy fast on a hot runtime. Java is no slower than C# and it is miles faster than things like Python or Ruby. I don't get the hate if I am honest. It just runs so damn well. Maybe it feels a little sluggish over a C++ UI toolkit but that is just life.
I don't know much gitter, i'll take a look asap. Thanks
Good thing it's modular
The more I learn about other programming languages (like Rust or Scala or Haskell) and try to adopt some of their type system features to Java just to have less buggy code the less I feel I want to work with Java any more. Just like you said, Java type system is just too weak to handle lack of null in a clean way (I'll ignore the fact that also we also don't have unsigned int). If you try to extend it using checker framework you don't use more types, but type extensions with very weak constraints.
I work on a JVM project as well, so ping me if you're ever stuck and want some help!
i.e infinitely long stack traces with 'caused by...' 'caused by...' a good error handling should have been key in SpringBoot. 
seriously though, but what's the point of Graffiti ? I mean if I put a good library in it (e.g. OkHttp) what valuable info do I get ? 
The main motive behind graffiti was to have a tool to analyse existing code. Quoting from [HN](https://news.ycombinator.com/item?id=13012005), some of the use-cases can be: * Working with old enterprise libraries * Research, such as reverse engineering badly behaved jars. * Understanding the dependencies on other jars and between the classes in the current jar in question. On running the graffiti tool on any jar (having .class files) say OkHttp; will result in a zip file containing .html files representing various classes. The same also contains directed graphs generated using graphviz to denote relationships/dependencies between various classes. A sample demo can be checked [here](http://graffiti.gaurs.io/downloadDemo). 
If you have a small app which runs on a single machine it is not relevant. If you have auto scaling, eventually you'll have an unlucky client hit that 7 seconds when starting up a new machine.
I'm sorry but you don't spin up a new instance the moment the other instances can't handle the load. You do that when you hit 90% or so. So this argument is pretty nonsensical. 
I've switched to Kotlin for JVM backend work as much as I can for this reason. I dig out Java very rarely now. 
Yeah -- I was thrilled when Java 8 lambada and Optionals were announced. But using them in practice is still painful -- extra conversions to/from Streams, weird corner cases that keep me from writing simple things simply, and of course so verbose compared to other langs. I feel that Java added these features to stay modern (keep up) -- but in the long run it's just introducing programmers to the good concepts in other languages, which will eventually enable them to switch to the simpler syntax later.
&gt; if you never use double references "null" is a four letter word
AMD64, AA64, Sparc
I'm sorry I weren't aware that posting link to my own articles was agains the policy of this reddit. My intent was to share something I , in my humble opinion, worth reading. There no "marketing strategy".
Makes the code much less readable, since there's text shown in the source code that isn't actually part of the source code (there's a reason things like this are usually in tooltips)
Hello, Matthew....I see you like swimming on Sundays and your wife is into gardening. How's Atlanta? How are your kids. Hmm? Hmm? ^ that's doxxing (well, what it could be if I researched your entire reddit and facebook history).
The 2nd argument I heard from devs that should know better. 
If you mean ? symbol for null safety then how is it different from Javas annotations mentioned in the article?
Obviously just trying to make you feel better about Java. There are many reasons why to start feeling the way you described about Java, but I think it's actually pretty common to feel that way about any language. At least I do.
If you're calling Kotlin from Java that's all they really end up being. If you're working within Kotlin it's quite nice. It's enforced on generic parameters and functions can have reified generic types so that is very valuable. Also the language is very consistently laid out around the use of T (non-nullable) vs T? (nullable) with methods like ?.let ?.apply etc. I think what I really like about Kotlin though is that nullability is an explicit choice that the programmer has to allow for and code around. That's not the case with Java... annotation or no annotation which also requires some kind of external annotation processor. 
It's because it's strange not to just write it's your post when sharing on Reddit.
Why?
I think it's for consistency with Java APIs which the Kotlin collections are just adding extension functions. I think there is a KEEP for post 1.1 to build a new collections API. Alternatively, users can define an extension function that works as you suggest.
A good microservice may not be simple to implement. Also the microservices do one thing well Unix mantra is kinda BS. It's all about finding the right fragmentation lines which is why starting out with microservices is usually the wrong approach. Too granular and you have all kinds of problems.
Why not both? I use Maven for libraries (where it's 99% convention), and Gradle for applications (that need complex distribution, deployment, pre/post processing, etc).
Maven. It's everywhere and 99.9% of the time it gets me 100% there.
Gradle is faster for me but probably it depends on 'feelings' ;) With Maven I constantly: mvn clean install ;) 
You are right. But it can be complex... and simple too ;) And we should be technology independent and be able to replace it with something else 'quite easily' too.
While a bit out of date, a few friends said they liked Head First Java. I think once you're familiar with the general syntax - just build stuff and always ask "can and how could I do this better". The answer will almost always be "yes" and in Java there is probably already a library to do it for you. Edit: "how could" -&gt; "can and how could"
I use maven, primarily because I've found build systems that allow so much freedom via scripting can quickly become unmanageable (especially if you have a large group). To date, there isn't anything that maven hasn't been able to do (granted XML isn't the best to work with).
Ofcourse. We should use new tools only if it is worth it. Switching from Maven to Gradle will be much easier than switching from Scala to Java. Trust me ;) 
Check out the **Sidebar** in **/r/learnjava** for the **Free Tutorials** - the ones listed there are among the best (paid and free). 
Oh I wasnt saying `package` was faster or anything related to Gradle. Its just that using `install` pollutes your local repository which can lead to some really annoying dependency resolution bugs at times. Your axis is a big misleading though. 44 to 52 isnt really a big deal ;).
If you do share your own articles (which is not generally forbidden in reddit) you need to 1. be honest. Tell people straight off that you wrote the article. Don't use titles like yours. Such titles fall in the "false advertising" and "clickbait" categories 2. obey the reddit rules for self promotion which state that **one** self promotion in every **ten** other contributions is acceptable 3. accept the reddit spam policies which state that *commonly downvoted content* is to be considered *spam* (under which your post also falls). The biggest failure, however, is that you weren't honest in your title. People would be a lot less negative had you admitted right from the start that you wrote the article. Your title, linked to a two day old post doesn't make any sense. Your title implies that the post is older and already used more often - which is a lie. In short: don't bullshit people; it will fire back at you 
TBH I had to google it to be sure...
So you have ajob with java
Right. This would be more convincing if Javaslang did not have its [own set](https://github.com/javaslang/javaslang/issues/503) of [null pointer](https://github.com/javaslang/javaslang/issues/1482) [related user reports](https://github.com/javaslang/javaslang/issues/1549). Not all of those are actual library bugs, but `@NonNull` also serves as documentation.
Not as far as I know, but a large portion of those became annotations I think (though I may be wrong, since I never did much pre-boot). Basically creating @Configuration classes that have @Bean s defined. From then on out it's mostly @Autowired glory. The spring boot autoconfigurers handle a large portion beyond that l, based on what's found in your classpath. 
so not knowing any other languages, what's the reason you're picking java? 
Heard it was in high demand, plus I wanted to learn Java since it's flexible, and I wanted a hobby
Does NotNullByDefauly exist? Where? Also do the big 3 ides support it yet?
"Learn Java the Hard Way" is excellent imo. You might want to find one with java 8 in mind though...biiig changes
Dang ok. Ima find a good book
Back-end js has no place outside of nahhorn imo. Node is horribly slow. PHP is also much closer. It makes a lot more sense to start with a proper OOP language, and Java is the easiest.
Step 1: Forget about Java Step 2: Learn Kotlin instead #/s /s /s /s /s /s /s /s /s /s There's no "best" way to learn programming. It's not even about the language, it's about developing a mindset to make a computer solve problems for you. Java just happens to be a nice language to do that for a lot of similiar problems. For general help questions, head over to /r/javahelp.
cool, good luck
Yeah, I have been starting to move my plugins to kotlin and I am loving it. 
Definitely a Gradle guy here. I've used maven a lot and fully switched to gradle a few years ago. First, I like the Gradle Wrapper, because it means people can check out and start building regardless of what build tools/chain they have installed. I like that it's built on groovy and is very accessible to Java programmers (although most wouldn't realize it by looking at the code). I like the multi-project support. It allows me to simply break down my projects into logical components. I like it's integration with android and intellij/android studio. I also like the optimizations that are done, and I like the performance on pojo projects, especially when there are multiple submodules.
It comes down to using it where it makes sense and not just using it to avoid null. It's best to use it when there's an explicit business rule for handling value vs. no value. If no value is merely an error state, I find using null checks to be cleaner. A good example is a project I worked on recently. I was receiving a stream of video "frame" objects over the network. I got a Frame object, and it it was valid drew it to the screen. If I ever didn't have a valid Frame, I was to draw a blank frame myself. The code handling the incoming data would give me a null if it couldn't produce a valid frame. I bubbled this up as Optional&lt;Frame&gt; into my controller, so I could cleanly express "if I have a value, draw it, if I don't have a value, draw something else". In this case, merely checking for null wouldn't convey that the API very well could return null as something that was still valid in terms of business rules.
 I've answered this way before...but in my opinion, for simple projects, they tick the same boxes and provide the same things. When using them both for their base features, they are effectively interchangeable. There are some builds (android/react native) which would be impossible, or at least untenable, with Maven. However, for the overwhelming majority of projects the flexibility of Gradle will be unnecessary, because the builds are (or probably should be) very simple. I prefer Maven. I believe that, in most cases, if you've gone beyond the limits of what maven provides and need an entire scripting language to accomplish your build, something is wrong and it's not your build system. There are clear exceptions to this, but they are just that.
Yeah. The more I use Streams, the more I wish I were just writing Clojure instead.
Exactly what my team does. We have libraries used by 3 products that are Maven built, but the products themselves are built with Gradle. 
Honestly, maven is the best option strictly because if standards. I've worked in a few different organizations in multiple applications and each one used maven. Enterprises use it over other tools because they can hire people who can come in knowing maven; if you use gradle or sbt, you either have to hire and train people for it or you have to reduce your hiring pool.
We unfortunately use Gradle and I cannot stand it. It seems to fuck up on my system once every few weeks. Worse, there is nobody in my company who knows gradle (the developer who switched us to gradle is no longer there). The gradle.build file keeps changing on its own for some reason and nobody knows what is going on with that and how to stop it. Everyone is pretty fed up with it, but it's working. Another reason is we switched from Ant to Gradle and the average build time increased by 60-90 seconds. Full builds on Jenkins, however, run 10+ minutes. I like Maven myself, we use it for one of our projects and I'm porting our main application to Maven as well to see if there is any improvement with build time.
Is js better? I wanted to learn java since there's a lot of demand for java iirc.
I highly recommend not learning an object oriented language first. C would be something good to learn for a beginner IMO.
&gt;Used by Google, Netflix, Linkedin, Twitter... Big companies use many technologies. However, Google developed its own build system (Bazel) and so did Twitter (Pants)--so their use of Gradle is not a defining solution for them. 
 In my opinion, the syntax and structure of a language like Python will let you focus on learning general programming skills that you can extend to learning other languages. (Java will be mostly object oriented programming whereas Python has the flexibility to support objects or use it as a functional or procedure based language) Hard to say any language is "better" and like I said I certainly don't want to discourage you from learning Java (I actually really enjoy it!). My main advice is you should think of the different languages as tools to solve different problems and ideally you should eventually dip your toes in a number of languages. Starting point doesn't matter too much but if you find yourself getting stuck with Java, don't be discouraged, you might find Python more intuitive and can use that as a jumping off point 
* Maven is currently the most popular, and as such, easiest to find answers online for. Gradle is less common, so you have to look slightly farther for answers, or translate the answers. * Gradke uses a real programming language, allowing you to programmatically control your dependencies, configuration, etc and offers a huge amount of flexibility. Maven's XML is essentially configuration, and any flexibility, programming, or customization of it is essentially hacks or requires writing a plugin. In terms of people saying Gradle is frustrating and difficult to learn ... I've noticed a trend where people seem to forget how difficult and frustrating it was for them to learn something which they now already know. I've seen many more moths of developer time wasted on Maven, versus Gradle, when it misbehaves or refuses to do what you need it to do. The thing I dislike about each is that it makes adding dependencies far too easy, to the extent a lot of people don't think about what dependencies (or transitive dependencies) they're pulling in or using. Add Spring into the mix, and when Spring starts shitting out bean autowire errors, it doesn't matter whether you use Maven or Gradle, you're kinda fucked either way, but that's more Spring's fault than Maven/Gradle.
So I don't have a book recommendation because I honestly don't have one. Although, I started my first job working in Python and then moved to working in Java. I would say most of my skills transferred over. Further, I would make the claim that once you learn to *program* it won't matter much what language you are using. Disclaimer: obviously, for advanced topics it will make a difference but for basic programming it won't matter much. 
Looks like you login on the page. When you do that, an "enroll" button pops up. 
Here is their blogpost https://gradle.org/blog/performance-is-a-feature/
Do you really have to train people? I've learned and worked with 5 new-to-me languages last year, just as many new build systems, and several databases. No one had to train me or any of my colleagues. We teach ourselves quickly and hit the ground running. I thought self teaching, not training, was normal for software development. Training sounds inefficient. 
You might wanna check the youtube tutorials from derek banas. He does really good and easy explaned ones, not only for java but for other languages aswell :)
We've migrated many of our applications completely off of xml, so it's usually possible. There may be some legacy features that are configured differently but I'm fairly sure that all of the mvc and boot features can be done in pure java. Xml can die in a fire, compile-time type safety and IDE parsable references are critical.
I think it depends on taste. I was there when our teams switch to maven and I think 2 weeks in our devs hated it because they had the weirdest requirements and needed "flexibility". Another dev suggest gradle because of this and now they run with gradle as far as I am concerned. So from my point. if you have something simple to build. Maven if you wanna do something really fucked up. gradle :) 
&gt; I think an application built on SpringBoot would be extremely hard to debug. It's not at all. You can just run a Spring Boot application in your IDE. It's very easy to debug. 
&gt; flexibility is only possible through plugins I would list that feature among the "pros"... :) 
&gt; First, I like the Gradle Wrapper, because it means people can check out and start building regardless of what build tools/chain they have installed. There's also [Maven Wrapper](https://github.com/takari/maven-wrapper). 
&gt; NotNullByDefauly &lt;dependency&gt; &lt;groupId&gt;org.eclipse.jdt&lt;/groupId&gt; &lt;artifactId&gt;org.eclipse.jdt.annotation&lt;/artifactId&gt; &lt;version&gt;2.0.0&lt;/version&gt; &lt;/dependency&gt; The package name implies Eclipse support, I think other IDEs can be configured to use them. Eclipse can also be set up to raise a warning if you don't have NonNullByDefault set for a package.
It only just got IntelliJ support. Lol.
The Java EE Configuration soap continues, as it was again pushed forward during JavaOne by Oracle.
[removed]
Thank you and many blessings.
Thank you and amazing work! 
How about writing your own? That way you'd actually learn something and probably wouldn't even need the cheatsheet during the test.
i knew i would only get this answer -_-
I am using the following - * Head First Java * Java The Complete Reference They are different styles of books and I prefer the Complete Reference more tbh plus it is more up to date. They are both suitable for a beginner though.
I think I miss configurable lifecycles... You can configure Maven plugin, but you can't configure maven lifecycle... I think we should have some kind of packaging level configuration: &lt;project&gt; &lt;artifactId&gt;...&lt;/artifactId&gt; &lt;version&gt;...&lt;/version&gt; &lt;packaging&gt; &lt;id&gt;jar&lt;/id&gt; &lt;configuration&gt; &lt;java.version&gt;9&lt;/java.version&gt; &lt;pitest&gt;true&lt;/pitest&gt; &lt;findbugs&gt;false&lt;findbugs/&gt; &lt;/configuration&gt; &lt;/packaging&gt; &lt;dependencies&gt;...&lt;/dependencies&gt; &lt;/project&gt; Plugins' executions should be configured (disabled/enabled) based on provided configuration. You can already define custom lifecycles and lifecycle-mappings, but two or three custom lifecycles are not enough and you really need a family of similar, but slightly different lifecycles. Missing piece of puzzle is an ability to make them configurable. You can come close to this with properties and parent POMs, but it's not enough. Sometime properties should interact with each other and be something more than simple strings. This is the task that is solved by gradle. Gradle has two separate "configure" and "make" phases. 
JavaScript would be a pretty unforgiving first language. In addition to being unforgiving, its roots as a browser front-end language make it all tied together with a UI, taking the focus away from general programming. 
Wouldn't it be great if you could mix and match front ends for management. Don't like the oracle supplied front end to glassfish, no problem, just bolt on Psyprobe... ....except, competition isn't in Oracles blood. 
It's not just Oracle. JSR 77 &amp; 88 implemented this a long time ago, but almost nobody talked about it, vendors implemented it (mandated for certification) but then hid the fact that they did by not talking about it in their documentation. So a major feature of Java EE was just silently forgotten and pushed into obscurity.
I know about profiles and I've used and [abused](https://github.com/sviperll/ozymandias/tree/master/maven-profiledep-extension) them. But profiles don't solve the problem I'm talking about. What I want is to have single shared by organization, but slightly configurable lifecycle. You can customize almost everything in maven by explicit build configuration, but customizations are individual to each project and you can't by any means consolidate them...
What do you want to see?
It's the only good answer. A cheat sheet is only ever as good as it is personalized (I think that sentence makes sense). So making your own is the best way.
I'm looking for project where I could contribute.
Yes.
Nice to see how much JavaSlang has evolved and would love to see some new features back ported to 2.1. 
IMHO enterprise software is nothing more than software an enterprise uses. However, in my experience enterprise software is a term used by companies to cover up an extremely convoluted and overly complex piece of software. It can also be used to describe individual pieces of a large system which an enterprise uses.
An ear file is just a format to package together multiple war files, ejb jars, resource rars (not really sure how to use those), all under a single deployment unit. A web service is a more narrow definition of software that provides a web-based API, typically either REST or SOAP, but some older web services used things like XML-RPC as well. Enterprise software, on the other hand, is a broad class of software that is mostly useful for enterprises (i.e., organisations, companies, schools) as opposed to software useful for individuals.
Thanks for the reply. My company makes web based ERP software on Grails framework. So is it a enterprise or web based software ? 
That's probably both. Grails is a web framework, and you're developing enterprise software. Enterprise software doesn't need to use Java EE if that's where you're getting confused.
&gt; Eclipse is the worst form of IDE. Except for all the other forms -- Winston Churchill
Bit of a puff piece. In any case, Javaslang is a nice idea, but ... it's not idiomatic Java and the effort involved in convincing colleagues to adopt it would be better spent convincing them to use something like Scala. Trying to do functional-like programming in Java feels a bit cargo cult at times.
Both React and Angular are solid choices. I would stay away from the more esoteric js stuff, the new things appear like mushrooms, being deprecated a few months later. In my company, people are starting to prefer React more, personally I would go with Angular. 
Not a huge surprise, investing in JEE standardization is kind of a waste, since nobody in their right minds buys application server licenses anymore, and thus vendors don't really have an incentive to invest in creating imitation implementations of Spring projects.
For anyone interested there are a number of Cyclops modules that make use of this derive4j HKT feature. * [cyclops-higherkindedtypes] (https://github.com/aol/cyclops/tree/master/cyclops-higherkindedtypes) defines HKT encodings for JDK types (List, Stream, Optional, CompletableFuture) * [cyclops-typeclasses] (https://github.com/aol/cyclops/tree/master/cyclops-typeclasses) defines a set of type classes that can accept HKT encoded types (Functor, Monad, Applicative, Traversable and more). It also includes instances for JDK and cyclops-react types. The integration modules define HKT encodings for the 3rd party types and type classes instances for those also.
Refactoring to Patterns is amazing 
I will be messaging you on [**2016-11-26 11:47:25 UTC**](http://www.wolframalpha.com/input/?i=2016-11-26 11:47:25 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/java/comments/5eu0vx/5_books_to_improve_coding_skills_of_programmers/dafnzu6) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/java/comments/5eu0vx/5_books_to_improve_coding_skills_of_programmers/dafnzu6]%0A%0ARemindMe! 12 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! dafo0ax) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
I would agree with it. Adopting a micro service approach can be quite time consuming and, when there are lots of points to maintain. Where as with a monolithic architecture there is only one component and therefore only one component to maintain. So I believe monolithic architectures help smaller teams make best use of their resources. As the project develops and requirements change and the team/users change and grow, then I wold suggest moving out parts into a micro service architecture. All too often we slow the development process by anticipating requirements that aren't there (yet).
Performance comparison: http://tkruse.github.io/build-bench/2016_10_multi-16-10.html Basically Maven cannot do incremental builds of multi-module projects in any practical way. IDE integration is the only good reason to have purely declarative builds. But even then, it is a mess, as soon as you want to do anything not planned for in the DSL, or use 3rd-party plugins the IDE knows nothing about.
Maven stinks. People got used to it, and pinch their noses, but still that does not change the facts. * http://blog.ltgt.net/maven-is-broken-by-design/ * https://blog.jetbrains.com/teamcity/2012/03/incremental-building-with-maven-and-teamcity/ * http://stackoverflow.com/questions/3084629/finding-the-root-directory-of-a-multi-module-maven-reactor-project * http://stackoverflow.com/questions/11044243/limiting-a-transitive-dependency-to-runtime-scope-in-maven * Maven does not allow you to set the working directory of a command, instead you have to switch into that directory, and then invoke maven pointing outward to the directory with the pom. * Maven complains about cyclic dependencies when Project B depends on A at runtime scope, and A depends on B at test scope. That’s because Maven cannot not separate subproject class compilation and testing. * Maven also has many command-line arguments which cannot be specified inside the pom or other configuration files, such as parallel threads, or to print full test failure logs, etc. * Trying to have separated folders for unit and integration tests also seems like a major headache, it requires a 3rd party plugin to achieve it * Maven as a project is practically dead, long-standing issues never get fixed: https://issues.apache.org/jira/browse/MCOMPILER-209, https://issues.apache.org/jira/browse/MCOMPILER-205 Gradle is not perfect, but it is an active project throwing amzing new features at you faster than you can blink. Generally, allowing scripting in buildsystems can cause a mess, but does not need to. Not allowing scripting makes teams avoid the trouble and instead change their workflows to work around problems, rather than fixing the problems. Maven is shines really only at one task: Building standard, small, single-module projects with a team of inexperienced developers. Change any of those aspects, and Gradle wins.
Gradle makes new releases every few months, Maven every few years. For clean builds, all buildsystems take pretty much the same speed, except for those who can only use one CPU. The only speed gain possible is to avoid the overhead of starting a JVM, one way or the other. But incremental builds is where buildsystems can outdo each other a lot. If a clean Maven build takes 30 minuts, running it a second time will again take thirty minutes. With modern buildsystems like gradle, the second time takes just seconds for gradle to detect there were no changes. With multi-modules, buildsystems like gradle will only rebuild the modules with changes in their dependency, so much time can be saved there.
Gradle itself cannot be slower than ant itself. It's not physically possible. Your team screwed up, and instead of blaming your team, you blame gradle. Why would you have a team that can program in Java, but be incapable of investing one day to learn gradle and fix your build?
I just bought Head First Java, after reading some reviews. So far looks good theres a lot of example which I like and tomorrow will be reading it ☺
If you're just starting, Head First is fine. IMO, a certain foundation is required to appreciate the books on this list. With that said, some of the books on this list transcend Java. These patterns will be useful regardless of language.
Effective Java is a great Java book. This article seems to focus on patterns of programming, not idiosyncrasies of programming with Java on a daily basis.
Not good practice but you can create a global variable for that int in the beginning of the class. and then call it from class 2. public Class1{ public static int _globalInt; public void foo(int localInt){ _globalInt = localInt; } } public Class2{ public void bar(){ int class2localInt = Class1._globalInt; } } edit: _globalInt should be static.
If you already have a team of multiple people, are doing a greenfield project, and know for sure you eventually will have microservices, then start with microservices. If any of these is not true then it's a harder choice. Splitting code apart becomes harder the larger a project gets. Once you have actual users and a product producing income, switching to microservices would seem rather risky and the cost probably not justified until you reach massive scale. So start with microservices if that's the dev team's preference before management has a good reason to say no.
That's great but can anyone recommend books to improve programming skills of coders?
Bookmarked.
Unless I'm misunderstanding, you should set a private variable, create a public setter and getter for each, and use the getter to retrieve the value in the other class. 
Sidebar: &gt; Please seek help with Java programming in /r/Javahelp!
The thing about Gradle is that it makes managing transitive dependencies much easier and clearer than Maven. E.g. in Gradle, you can globally exclude a transitive dependency, where with Maven you have to exclude it individually. With Gradle you can globally declare transitive dependencies not to be allowed to be compiled against, with Maven, you have to jump through hoops for that. Maven has tools to help with the process of "cleaning up", but the "clean" pom.xml will still be a huge mess of incredibly many lines of XML to maintain.
https://github.com/openzipkin/zipkin Distributed Tracing project based on Google's Dapper paper
Sometimes in Maven, you have to set "useIncrementalCompilation" to "false", to make in compile incrementally. See https://issues.apache.org/jira/browse/MCOMPILER-209. But what really matter much more is incremental builds of modules. Like when you have 20 modules, and you change only one, then why re-compile and retest 20 modules? Companies using Maven just gave up on fast builds.
I would suggest: Start a business first. It is completely nonsense to think upfront which architecture to choose. What is completely ignored in the discussions around Microservices is the fact, that history is completely ignored. Of course for many businesses from what they know now and from their growth, it made totally sense to do Microservices. I am advocating neither nor. Start your business with what you do best. Think later about improvements. The only thing: do not buy into only one camp. Stay open and flexible with your architecture. This is possible even with a monolith: by separating concerns with clear cut interfaces, you are able to break things later apart when you need it. 
Java Puzzlers, also by Joshua Bloch, is similarly great for learning the ins-and-outs of the language. 
Exactly my opinion... though it's quite difficult to give any advices without any description of the project. But generally start with architecture/technology which will allow you to do business changes fast - usually that's a monolith - and split into microservices later - ONLY if really needed and ONLY if it makes sense. Note that there are number of issues with Microservices which you'll have to solve and which might not be clear at the beginning of the project... note for example this: https://www.stackbuilders.com/news/the-hidden-costs-of-microservices In any way, I don't think that moving from monolith to microservices means to "reimplement it from scratch".
Hi, can you please compare your solution with OSGi? I went (quickly) through your documentation and tutorial and I have a feeling that JLCF actually aims to formalize the boundaries between parts of your code (much more than simple interface can do) - however all the components live completely inside single classloader and the framework just wires the components together and makes an app from it... is that right? I don't want to say it's wrong, I just want to understand where JLCF fits in... If so, and the target of JLCF is not to allow and secure third party components (like OSGi) but just to formalize boundaries and do wiring, then I'm sorry but your framework reminds me of early days of Spring... can you maybe compare your solution with Spring as well? :) Last thought - you are linking your components together at the method level. This seems to be very granular to me - if the one component has 20 interfaces and other component wants to use all of these interfaces and defines 20 receptacles, then the application xml will get quite big... it would be interesting to see application xml of some bigger application... Good job with nice documentation though...
oh god
If you can't do a well designed monolith your micro services will be an even bigger mess. Start with a monolith, if whatever you are doing takes off enough that it is no longer scalable then you should have enough experience and money to know what should be changed over to micro services.
Domain-Driven Design
Why? How?
yay 
Don’t worry, a it will only last till the next GC pause
Your manager has a rather silly definition of enterprise software. So according to him software that isn't Java can't be enterprise software? He seems to confuse Java Enterprise Edition, which is just one framework for creating enterprise software, with software build for 'the enterprise'. 
Question. Are you able to do unit tests with thymeleaf? i.e. I want to generate a webpage but instead of testing it live in a website, I just want to know if the relevant part (i.e. a table of records) was generated correctly. Can I do that? I want so much to move away from JSF. Edit: It seems so! https://dzone.com/articles/spring-test-thymeleaf-views This is such a relief.
I wonder how many self taught hipster web designers will ask us if it is a big jump from javascript to Java.
I found Self-Contained Systems to be a decent middle ground between a plethora of microservices and an unmaintainable monolith: http://scs-architecture.org/
Don't worry they don't like java, it's too verbose and everyone understands what you wrote.
But isn't that obvious that all technologies are just tools to make business success? I think question is how we should use it in best way to do all the things better, faster, stronger ;)
The end game is polyglot microservices... In most cases probable not needed. But if needed if somebody will start with monolith Java and then split to microservices... it will mean that you need to reimplement some parts what should be done in different technology, because for some reasons it might be much better. It is just an example.
There's popular memes on Twitter going around about voting machine software being written in Java (and how terrible this is ofc lol), so maybe that?
TomEE == Tomcat++ 😜 Both from Apache and both are in core Tomcat
Just curious how many Maven threads, and did you have takari smart builder installed?
It depends if you're doing that in your client code, or if you're asking a library to make such a strategic step
The easiest thing and best thing in my opinion is to use Git. Just make a private repository on Github or Bitbucket and use that. I recommend using the tools that come with your IDE. IntelliJ IDEA has a neat feature called Share On Github, which allows you to create a new (private) Git repository on Git with the files in your project. You can learn more about Git [here](https://guides.github.com/activities/hello-world/). On your laptop (or desktop) you can use "Check out from version control" (if you use IntelliJ IDEA). To upload your code changes press the green up arrow and to download (make your offline code the same as the online version) press the blue down arrow in IntelliJ. Of course there are other solutions but I recommend learning how to use Git (or any other Version Control System) because it will also come in handy when you want to collaborate with another programmer.
&gt; &gt; I think that I just want to have polyglot microservices. And use valid tool for any case. This is stupid for many reasons, enterprises like Uber and Twitter have learned the hard way.
And the infotainment systems in their cars
My Android is just Java downgraded to AWT??!?
You aren't vendor locking in yourself, IntelliJ just happens to be the best IDE for it currently. [Kotlin is free and open source](https://github.com/JetBrains/kotlin) and if somebody wants to, they can make an IDE for it. It just so happens that Jetbrains, developing the language, also make top-tier IDEs and decided to offer Kotlin support in IntelliJ. [IntelliJ community edition is also free and open source.](https://github.com/JetBrains/intellij-community) Unless I don't know about some legal licensing loophole Jetbrains can't suddenly close it off. The main reasons I hear to not use Kotlin are: - Developing high performance applications - why the fuck are you on the JVM anyways? - File/jar size overhead of including the standard runtime - maybe don't build fat jar files? Add classpath in manifest and copy your dependencies over like you're supposed to. [Maven can automate this.](https://gist.github.com/R3bJsIJe1BDqOIrDgMLL5WPPDLawaC9xDuc0GHW/80fb431d010d4db639452e28cbc9b11b) - General dislike about language concepts - use whatever is appropriate for the job.
I didn't make it clear. I shouldn't say that "I want" but "I want to be able to do it" . And this is not stupid. There is no technology that can be used for anything. And microservices should be independent from technology. All big companies end with polyglot microservices and probably not because they wanted it, but they needed to do it.
Nice response. And to revert changes. :-)
C++?
Should have used Azul, really its our fault for not.
Hey, it's me, esquilax. Can I borrow $10k?
Because I already know that JHipster is using Spring Boot :)
I understand that there are free and gratis JEE application servers. However, the standardization process is quite bureucratic, and costs a lot to run. When I say "costs a lot to run", I mean that numerous people are required to do fairly unpleasant bureucratic work for quite a while, to accomplish anything. The companies involved need to pay those people to do that work, generally speaking. When those companies spend money, they consider it an investment. An investment means that they expect, in the long run, to make more money than they spend. To be able to make money, those license vendor companies need to sell licenses. However, their customers also look at spending money as an investment. If those customer companies do not receive meaningful, relevant benefits for paying for those licenses, they will spend that money on other things. This means that the money to pay for the standardization process isn't available. 
Haters gonna downvote... I thought it was funny
Not sure it's related but the folks are r/golang are currently fighting about whether that subreddit should be shut down or not. Because u/spez is shithead and therefore all of reddit is evil.
Run time dependency injection means I do not know if my code is correct until I run the application. I thought the whole point of static typing was to catch programmer mistakes? That is why I dislike Spring Boot.
Hey I know you're just joking, but where can I learn more about the software in a car, software for the infotainment but also for the embedded electronics in the car itself (cruise control, auto braking, etc)?
Can you link some?
I was actually being dead serious, many of them are programed in Java.
Glad I could help! :-p
Lisp?
If you don't want to use the Eclipse version for whatever reason, you can create your own `@NonnullByDefault`. Copy what's in `javax.annotation.ParametersAreNonnullByDefault`, then tweak it a little: @Documented @Nonnull @TypeQualifierDefault(ElementType.PARAMETER) @Retention(RetentionPolicy.RUNTIME) public @interface ParametersAreNonnullByDefault {} Notice where it says `@TypeQualifierDefault(ElementType.PARAMETER)`. If you wanted to make `@ReturnValuesAreNonnullByDefault`, you could copy that code but change the element type to `ElementType.METHOD`. If you wanted a `@FieldsAreNonnullByDefault`, you could change the element type to `ElementType.FIELD`. You could combine all those annotations into one with `@TypeQualifierDefault({ ElementType.PARAMETER, ElementType.METHOD, ElementType.FIELD })`. I recommend using those three `ElementType`s and applying this annotation at the package level. I do not recommend including `ElementType.LOCAL_VARIABLE`. My experience was that applying this policy to local variables resulted in far too many `@Nullable` annotations for little gain -- the IDE was reasonably good at warning me about NPEs from local variables already. This approach works in IntelliJ. I didn't try the other IDEs.
This was my professor for my analysis of algorithm's course. When I took it, he used the 2012 version of the slides. In addition to his lectures, I recommend his book. It was a great help for the class and is one of the more readable textbooks I've used. 
So, an experienced java developer can say mess around with and tweak the software in their car? Maybe improve it even?
I used option "-T 1C", which should be 1 thread per CPU. I had never heard of takari smart builder. Even if I did, I probably would not use it for the benchmark, as it is a 3rd-party extension (to be fair, I did not use such extensions for any of the buildsystems compared). But thanks for mentioning it, I might try it out. It seems to replace a lot from core maven, so maybe it should be called a different buildsystem.
The mere existence of an IDE editor specifically to edit these files shows what is wrong with Maven. And it is not a solution, obviously, but a workaround to XML being so horrible. It cannot deal with configuring any plugins. And think about all the time that is wasted to maintain this Eclipse plugin, reducing Eclipse speed and making Eclipse itself harder to maintain. While Eclipse helped Maven (workarounds for shortcomings), Maven dragged Eclipse down. Should every IDE in the world have custom editors for every buildsystem in the world? It's the same philosophy as for JEE application servers, which can only be configured via their web API, making screenshot by screenshot guides necessary (or youtube videos), those ideas all come from the 1990s. "Let's configure our system using XML DSLs! Oh, XML is shit to read or edit. Let's write custom Editors for our shitty DSLs!"
JavaScript is excellent for functional programming. ES2015 is also great. And, JavaScript can be plenty readable and I've also seen plenty unreadable Java code. 
Am I the only one here who feel this is a deprecated paradigme? Now a days I would create an api (probably restful) and independently of that a client. Regardless of it being a web, mobile or whatever client. Furthermore why use java to program javascript? Personally I like java, as a programming language, more than javascript but never the less that is what the browsers use. There has been several attempts of java browsers widget frameworks including [Wicket](https://wicket.apache.org/) and [OpenXava](http://www.openxava.org/) and Gwt beside Vaadin but now a days I would choose either Angular, React or Backbone over any of the java based.
G1GC**
I haven't looked into that particular implementation. Maybe you could make your way from set-top-boxes, also find out about GPS devices' Java interfaces and work your way up to embedded systems. If you had any luck, there would be a familiar JVM you could mess with.
Probably because: 1. not every (most?) application needs to be available on mobile, etc. 2. not every developer is able to write Java and JavaScript 3. developing mixed technologies application always costs more than Vaadin apps
Small food tech startup here using Spring Boot for our core API (90 endpoints, 22k LOC). It's working really well, allowing fast development. Also know of it being used in a microservice architecture at a HR startup I consulted at earlier this year.
God is a developer.
Java is virtually everywhere. It can be in CD/DVD/BluRay players, in MP3 players, in generally all "Smart" devices (Smart Tvs, etc.). I wouldn't even be surprised to find Java in a Roomba or in a lawn mower robot or in a smart fridge. Java is a great language for embedded devices.
What you mean BalusC yacht? So I can ask you question, how big is Rod's yacht? How big are pockets of Pivotal now? How much ENC and Dell paid? So you think Java EE cannot exist because of money? Please, I ask you to think again, if Rod did not do what he do for money, how come he get so much money? Next you say Bill Gates did not do it for money too!??? This is but strange no? And what is relevance with Java EE 6 being few years old??? Is bean validation not in EE 7 anymore then? Is Red Hat not almost to release CDI 2.0??? You know how old Java EE 8 is no? Is ZERO days because not yet released! And yes, you know Romain? He from TomEE team and he major contributor for CDI 2.0. So I know your trick friend, you try to make believe Red Hat and TomEE only make contribute for Java EE 6, no? But trick won't work on me because I know FAcT! And to me is clear you know little about fact! Is IBM only serving legacy? Please look again, since this is wrong! What is Liberty about then? Huh? Is major rearchitect and very modern and modular. And CDI reproduction? Of what I ask you! Is inspired by JSF beans and EJB and SEAm, and is all from Java EE people! 
hmmmm work 40+ hours master all new tech be able to quote java lang spec in detail contribute to open source projects now, read these 10 books yeah - i don't think this is gonna happen
He refuses to document anything. Would not hire again.
FJ is more of a proof of concept and creates some very unreadable, not-idiomatic Java code. If you like Haskell you're better of using something like Scala or Frege. 
Look at OP's profile. He's reposting links to lists like this every day. I wish he would at least limit these to fairly new or insightful blog posts. 
If you're going to try to write pure FP code in Java, you're going to have a bad time. If you want to apply your new knowledge on the JVM, try Scala! I personally treat Scala as Haskell, but with better libraries, tooling, and the best damn module system short of ML. It also has a friendly and welcoming community—come on over 😃!
Fortran? Still has some applications in the banking sector. *Fortran*
I'm seeing a lot of mentions about how easy it is to mix the two... But in reality, how easy would it be to slowly drop java for actual scala files, and how does it work for things like NetBeans? I use a lot of Java Swing for GUI, and NetBeans helps intensely in generating necessary boilerplate. Would it be possible to, say, swap out a controller written in java for one written in Scala? Etc.
Yep! You can introduce Scala file by file. Main issue is mixing collections/option(al)s between the two languages.
Well that was the idea to create some points where we could in fact make that particular part to a microservice. 
Should be titled "What your code and documentation is going to look like if your company outsources to India". 
I really liked using FJ when I was using it, it did give off the feeling it was more focused on being "true" to the Haskel school of functional programming in terminology/method naming a little too much - not that I had any problem with that, it just didn't feel "java like" ( maybe that's a good thing ). Javaslang, on the other hand, seems to fit in nicely to both camps, aligning it's API signatures closer to that of Scala, and method naming that lends itself predominately away from hard-core category theory ( except for Monad/Monoid etc. ).
For 2020 ?
Exactly my thought.
Would not be a crazy timeline indeed. It's still a little under a year until JDK 9 has a chance to be released, so that would be half/end 2017 then. So if design and development starts in honest early 2018 then early 2020 would mean a cycle of only 2 years, which would be challenging. Practically 2021 (3 year cycle) may be a bit more realistic, but this depends on the scope of course.
You just can't match the upbeat attitude on r/java these days. 
I expect most enterprises will disallow it's use. But I think it should be interesting. Mainly the benefit still be var x = new longjavaclassname. I think where you already have the information there.
And if you want less pure FP, you can give Kotlin a try along with the Funktionale library. Scala is probably a better bet if you want to try to go full-bore FP, but Kotlin is an easier transition if you're already experienced with Java.
No, just type inference. Same mechanism where if you pass `new ArrayList&lt;&gt;()` to `foo(ArrayList&lt;String&gt;)` the type parameter is inferred.
Oh I agree, I'm just fearing what I will have to deal with in the future.
I'm fine with it for most uses, but what I expect (and what I am currently dealing with) is var name = uninformativelyNamedFunction() and then having to hover over name to know what object it is and what to do with it. At least with a specified name, or even a specified interface, I can know what I'm dealing with from the start.
Oh, I see. var immediately made me shudder and think of javascript..
I'll be honest - every time I've tried a tool apart from Maven, I've spent a good while with it and then given up and gone back. This means Gradle, SBT, Lein, Ant, etc. Gradle might be a lot better these days, but a couple of years ago the API was in a huge state of flux, and a lot of examples for things I wanted to do just outright didn't work. And they weren't difficult things either - the key one that comes to mind is the "provided" scope.
I expect most enterprises to _not give a flying fuck_ about var or val as long as the next feature is delivered in time for the sprint's end. Some enterprising programmer-turned-middle-manager might try and limit it's use in the most assinine way, which will hold officially for a while sneaky programmers will write vars and vals them anywhere code quality analyzers don't look, which ends up being just about everywhere because corporations also don't care about that either.
Unless you have a multi-module build, in which case package doesn't work correctly because of dependencies between your modules.
That's always worked fine for me. Maven can resolve those internally.
It could be worse you know. Like in Groovy, where you can give types to variables but the interpreter simply ignores them and treats everything as _var_ anyway. A least JS doesn't lie about having types...
Hmm - maybe it's my age talking then. It certainly didn't work when I first started with Maven, but that was admittedly using 2.0.x...
&gt; not suitable for Continuous Delivery &gt; Why is the way you build you artifacts important for Continuous Delivery? Surely that's only a part of it, and then the deployment of the artifacts to the environments just uses the outputs of the build. This way, you can have any build system you want and it doesn't matter.
Just out of interest, how does this work with member variables? Say you declare a member variable as var and don't initialize it right away but only in the constructor or something, how is this handled by the compiler?
With Jack &amp; Jill I'd hope it won't take so long. Moving away from Harmony was a big deal.
What you are making is both enterprise software, and a web service. The distinction that is important to you and your boss is: which term do you want on your resume? Your boss wants "web service" on his resume, and you want "enterprise software" on yours. I think your boss has the better idea there.
Meh, Groovy, Scala and Kotlin among others all use some variation of var/val/def and I haven't noticed any difficult understanding what code does in those languages because of that particular feature.
Legit though I'm so glad I installed the ask toolbar
Jack &amp; Jill still have issues with Android's own tooling and don't support bytecodes like invokedynamic or method handles. JVM 9 introduces VarHandles and a few other changes, related to modules.
&gt; Oracle is notifying the Java Community that it will withdraw the JSRs for Management 2.0 (JSR 373), and JMS 2.1 (JSR 368). In response to community feedback, Oracle is investigating a possible transfer of MVC to another community member or organization in order to complete JSR 371 as a stand-alone component. &gt;These changes are consistent with the revised Java EE roadmap presented at JavaOne 2016, in which Oracle proposed to remove these JSRs from Java EE 8. For more details, see Anil Gaur’s portion of the JavaOne 2016 Keynote and Linda DeMichiel’s Java EE 8 Update presentation. The changes also reflect the importance ranking of these technologies in Oracle's follow-up Java EE community survey. Management, JMS, and MVC were ranked at or near the bottom of all technologies which were surveyed. We expect to have an update soon describing the overall survey results and next steps for Java EE 8. 
**Preface:** Such questions are better asked in either **/r/learnjava** or in **/r/javahelp**. Right now, the most useful framework is the one that you learn in the course. Later, when/if you need it it will be a breeze to learn another one. In programming, you never stop learning and you need to get used to learning on-demand - learn what you need when you need it. Learning anything without demand or context is useless. So, concluding: learn what your teacher teaches. Later, you can (and most likely will have to) learn more.
Do the places you've worked not have automated code quality metrics? My place has several rules that will fail the check in if I break them, causing the build to fail.
Yes, they do, and I support that! But the rules get tweaked, slowly, because nobody would be responsible for enforcing them or taking action if they're not followed. So "keeping the pipeline green" becomes more important than actually maintaining the code. In top-down orgs, business people have authority, and the technical people most willing to compromise on long term quality most often gets props from higher ups for their ability to "make things work". 
Well in the case where you have var name = uninformativelyNamedFunction() and cannot tell what type the object is without hovering over the name in your IDE, its mostly the issue with your method naming. Its unfair to blame this design flaw on 'var' when you are supposed to name your method more informatively. 
I'm not the one who downvoted you by the way but I disagree, I don't think it's unfair. Methods should be informative w.r.t what they do, but I don't think you should also have to put the data structure it returns in the name of the method. "var" is fine for normal variable declaration or when the type of the variable is obvious (which is more rare than you might think) otherwise I am not a fan of hiding information for the sake of conciseness.
what about it? i literally JUST finished writing a spring project that runs on AWS Lambda lol. so if you're doing something similar, lemme know if i can help! 
First, I have long thought (20+ years) of Microsoft as evil. With Microsoft's recent moves, I find myself surprised to realize that at some point Microsoft is starting to look good compared to Oracle. Not quite yet. But I could see it happening. Sun was not so bad. In the late 90's Java was interesting, and still is in different ways today. The very thought that at some point I might study some C# and .NET is something I find rather shocking. Surreal even. 
Hey, this is my blog. My day-to-day work heavily involves Lambda and I'm a bit of a Spring junkie, so I just made this little library to help ease some of the pain of getting Spring DI to work with Lambda. I'd really like to work on a more full-featured framework for Lambda+Spring but of course, that requires free time!
I hope your FactoryFactories are produced by a properly configured instance of a FactoryFactoryFactory.
I'm pretty disappointed that JSR 373 is going away. For people that work in a heterogeneous app server environment this sounded like it would be really nice.
Remove Streams, Optional and Lambdas and that would be a great start. If you have any influence on removing Lombok from planet Earth; that would be awesome. 
Followed the link and went on to the documentation. Part of the text at http://docs.spring.io/spring-cloud-dataflow/docs/1.1.0.RELEASE/reference/htmlsingle/#dataflow-documentation is hidden beneath the menu on the left on chrome but not on Firefox.
I could imaging data upload or data export taking longer time than 5 minutes. Is there any other option to do bigger file upload on slow network? I have never used AWS Lambda, I see the benefits, just would not like to end up with AWS Lambda and the server I was about to leave.
We are currently migrating a larger Spring application to use annotations and haven't had any problems so far. Like others noted some bean types have changed but those are easy to Google.
Can Java get C# style getters and setters?
[removed]
Everywhere I've worked has basically just gone with whatever the default code formatting in the IDE we use is. Otherwise it just turns into a pendantic pointless battle 
PlantUml. Typing out the diagram as relationships becomes a lot easier than fiddling with drag and drop systems. Main con is that you have very little control over the layout. 
What benefit do you see from removing streams &amp; lambdas?
A whiteboard and a smart phone to take a pic. 
yuml.me
I'm a fan of Visual Paradigm
If you're talking about long-lived doing batch or scheduled jobs like that, Lambda is not really the best choice. AWS has other services like AWS Elastic Map Reduce, AWS Data Pipeline, and AWS EC2 Container Services which offer scheduled jobs for vast amounts of data with no cap on run time. You'd have to explore their other options - it's all about the right tool for the job.
[Enterprise Architect](http://www.sparxsystems.com/products/ea/). It goes way beyond UML generation but I have found it indispensable for design and documentation for many years.
I recommend violet uml for a lightweight tool to create diagrams. 
Seconded, have used it professionally for the last 5 years...UI is a tad dated but its a solid tool
There's a plug in on eclipse that I used to do this once but I forgot the name. I'm sure you could look it up 
Java EE 7 is a really good stack and is currently being hardened by the vendors. I.e. Payara, Liberty and JBoss/WildFly are all excellent Java EE 7 implementations. If you're a Spring fan (by using "JEE" I guess you are), you'd want Java EE around to keep Spring sharp. Without Java EE there's a very big chance Spring won't be half as innovative as it is now. 
That doesn't mean that tools can't be faulty.
Graphviz and writing scripts to generate the dot files 
In my opinion UML generated from code is utterly useless. So I guess "none"? For writing diagrams in documentation I prefer PlantUML integrated in a wiki. But I never go into the detail of class diagrams. 
it also seems to implement the most uml formats - although supposed to be a standard, every program does it a little differently. so in case you deal with 3rd party uml files (for example generated by another program for another language) its prob. your best bet. 
Thanks for the link. After reading about it, I'm wondering whether the Jersey system also has a way to "configure" the interceptor on a per-usage basis, eg something like: @EnsureUserInRole({"admin", "manager"}). Seems like it should be doable but I had some trouble fully understanding the docs.
ArgoUML? 
Why is it utterly useless, is simply uml - you think uml is useless, maybe. 
I agree with them. Uml is useful for designing a system (so if you've already written the code it's too late) or for explaining how part of the system works to someone else (so much easier to spend 10 minutes at a whiteboard than to hand them a stack of uml and wishing them luck). 
You can do it in different way in Jersey, using built in annotations (some of which aren't Jersey specific). Here are a few examples about ensuring user has correct role: https://jersey.java.net/documentation/latest/security.html.
Are they really needed?
Evidently too difficult to understand for some.
Yep, through the `object` keyword and imports like `import package.object.{Function1, Function2}`.
Those are just classes though, right?
`objects` are are `static classes` (practically speaking, singletons) in JVM bytecode, but if you have a stateless singleton, well... that's a module.
The way I'm defining modules is not Jigsaw, but looking how ML-style languages allow users to import and share code through a codebase. The terminology gets a bit overloaded in this subreddit!
AOT is in Java 9.
I don't understand, what type of code does this generate and what does it do?
&gt; &gt; &gt; &gt; An open source project from OverOps, originally built internally for heavy duty testing of monitoring tools on random Java code with exceptions. 
They only serve a small segment of the Java crowd, the vocal, math oriented, function crowd.
Do you happen to work with Indian outsourcing companies?
No just a lot of scientists that get stuck on software development.
I have a byte code Weaver that I've been looking at testing more aggressively ... Wonder if I could run this woven and unwoven and compare
Here is an open source audio/video streamer https://github.com/Libresonic/libresonic
Depends on what you're using but because of the startup time required of spring you have to heavily optimize it or you'll get a lot of timeouts. You're better off not using spring unless you need to
Not true - even a big application context will start up in less than 200 ms. Also it only happens once, when the function is initialized. It will stay hot for a while after that.
Bottom line. Any language feature can (and most likely will) be abused. That doesn't mean we should fight those new features. If seeing possibilities for abuse is valid cause for discarding those features, we would not have anonymous inner classes, static and instance initialization blocks, generics, annotations, typesafe enums, method references or lambda expressions.
I like the IntelliJ IDEA class diagram feature, but this only comes with the Commercial version, not with the Community Edition. All in all, it's probably the fastest way to draw UML diagrams since you don't even have to leave your IDE. For more details, check out [this article](https://vladmihalcea.com/2014/09/26/the-fastest-way-of-drawing-uml-class-diagrams/).
Somebody has some articles about it?
Hi, thanks you for your comment, you are right that JLCF aims to formalize the boundaries between parts of your code. In comparison with OSGi, indeed in JLCF all components of an application description would live on the same classloader (you could use several instances of the framework in different classloaders if for some reason this is needed – from within different OSGi bundles for example, but this is not really the primary use case). The lower layers of OSGi are an advanced module system and the OSGi Service Layer provides better ways for coupling using interfaces (or classes). A better comparison would be to compare JLCF with OSGI Blueprint or Spring (or the Service Component Architecture – SCA that has now been sadly discontinued). The latter 2 are classified as “dependency injection” frameworks. As there is no broad formal definition of what a software component is, instead of saying that JLCF is a component framework, I could also say that JLCF is an advanced dependency injection framework. I see the main advantages in comparison to a “simple” dependency injection framework in the following points : * It provides a formal component model, defining an elementary building block of an application. * It provides a formal way to define functionality requirements by using explicit “receptacles” (interface requirements) * It defines the concept of interceptors between components * It natively supports the “callback” interaction between components. Related to the way components are linked to each other, via java interfaces, I consider this the natural way of “wiring” components together. Indeed if you have a component which offers 20 interfaces and 20 other components that consume them, then indeed the application description XML would not be trivial. But this is its primary purpose, to show at a central point the application architecture / design (ie. how components are linked together) so if the design is complex then the application description XML would indeed be also complex. So to sum up, yes indeed, JLCF aims to formalize the boundaries and implementations between parts of your code by providing a (simple) component model &amp; framework that supports this. 
I get your comment :) This is the price to pay for having a central place where you want to explicitly have the application architecture / design. You have to specify it somewhere. If I look into this file I can understand the high level design of an application, which is a great advantage. 
What would be cool is if we could just refactor in the real types with an ide. Simply using the least specific type possible. This way you could profit from var while coding quickly and later not suffer the consequences. Edit: heck for me it would even be sufficient if var was an IDE instead of a language feature entirely. 
My only quarrel with it is that it generally covers corner cases and really odd occurrences. Would put it down as a good read but effective Java and others definitely are way more essential to developing good knowledge
I've been working on this library on and off for a while now, and have been using it internally at my company for the past ~6 months. It uses a lot of the same password matching methods as the zxcvbn library from Dropbox, as that was the inspiration for this library. I just spent the past few days cleaning up the code, adding any comments wherever necessary, getting things set up to release to maven central, etc. Would love to hear any feedback you may have.
Java EE + Payara, some dropwizard
Vaadin, and Postgres here.
Spring Boot, Vue JS, postgresql. Sometimes jooby.
Sooo, banking ? :D
databases: oracle express (or maybe mysql) w/ hibernate messaging: none (not sure if I need it, how would I know?) frameworks: Spring, Hibernate server: tomcat or maybe glassfish (most familiar with glassfish) css: Materialize I'm open to anyone coaching if I misstated something.
EE7, jax-rs, angular, mysql, wildfly
React, Light-Java, Mysql, Kafka, Zookeeper for microservices with Event Sourcing and CQRS.
Java EE/Wildfly + Primefaces + PostgreSQL
Spring boot, redis, cassandra, kubernetes
Java6, Weblogic, Oracle 11g
Boot (in Docker) + React + Postgres/SQL Server (project dependent), Rabbit and Redis. Some projects need different requirements, but that's the common one we are using these days. Since the front end folk get anxious. The back end has been fairly stable.
Java 8, Spring, Hibernate, Postgres, HDF5s, RHEL, PyPIES.
Spring (non-boot) with Hibernate and Hazelcast. Multiple DB sources depending on the customer (Oracle and MySQL most common in production, Postgres most common in development). Communication is via Apache SOAP, JMS with ActiveMQ, or Google Protobuf. Front end is either Vaadin, Spring MVC, or Eclipse RPC clients.
All of them. Seriously, I'm expected to know how to deploy any kind of stack you could imagine using a great deal of different tools depending on the circumstances.
hi! im curious as to which maven plugin you use to handle frontend with webpack. also, how is your dev env to do this? while doing frontend coding, how do you serve your code, etc? i'd love to exchange ideias with you.
Angular 2, spark, activejdbc, postgres. 
vert.x, rxJava, gradle, react, mobx, postgres, redis, nginx
Oracle ADF, Oracle DB, Oracle Weblogic. 
Spring Boot/React with Redux. For database MySql/MariaDB or Postgres for bigger applications.
Current client is JEE 7 on JBoss 7 with MSSQL. They have a team doing the web app with GWT.
Java 8, Play 2.5.x (Java), Hibernate, MariaDB, React
Kotlin, Spring Boot, MongoDB / PostgreSQL, Thymeleaf, Vue.js, Gradle, Docker.
I used this one so far: https://github.com/eirslett/frontend-maven-plugin. I just recently made this using it (mostly to see Angular 2.x workflow): [Todo Manager](https://github.com/ivanthescientist/todo-manager) But there are other options, like exec-maven-plugin or you can use Ant plugin to run Ant build script. 
Java 8, tomcat, spring, karaf, camel. 
Oracle11 is a database, tomcat is a web application server
Tomcat is an application server, oracle is a database
mainly JBoss + Postgres + Spring/Struts2 + jQuery, also use Jetty in some instances instead of JBoss
Stream API is really the most important thing in Java 8 ! Optionals are really great if you is it right, you can get rid of every null checks Those are the most important features of java 8 imho. You should check out "Java 8 in action" that's really a great book for learning every details about that update ;)
Do you have some business logic inside the DB? I mean stored procedures, jobs, etc. 
Sadly, yes
Java8, Spring Boot, MySQL, Redis and working with kubernetes for deployment.
Alright, I have to check streams. Thanks guys!
Java8, Spring Boot, Thymeleaf, Netflix Stack, MongoDB, ActiveMQ, Kafka, Oracle 11
Angular, Wildfly, MySQL (MariaDB), Apache MQ (Artemis), HBase, Kafka, and some Scala
Es6-&gt;babel-&gt;js-&gt;nashhorn-&gt;java
Old: Back: Java8 EE 7, JPA Eclipselink, JAX-WS Metro, PostgreSQL Front: HTML 5, Dojo, JQuery Infra: Maven, Payara / Glassfish New: Back: Java8, Spring Boot, MyBatis, JAX-WS Apache CXF, PostgreSQL, Front: Elm Infra: Gradle, Docker Currently redesigning some stuff. :)
HK2 and Guice actually work quite well together. Just enable the Guice to HK2 bridge like this: GuiceBridge.getGuiceBridge().initializeGuiceBridge(serviceLocator); GuiceIntoHK2Bridge guiceBridge = serviceLocator.getService(GuiceIntoHK2Bridge.class); guiceBridge.bridgeGuiceInjector(GuiceInjectorServletListener.getServletInjector()); The code should be placed inside a Jersey ResourceConfig implementation.
found the productive developer.
Streams everywhere! And Optionals which tie into streams pretty well, since you can do some nifty default if null stuff: Optional.ofNullable(myString).orElse("foo") or with streams: String s = someList.stream().map(e -&gt; e.getStringField()).findFirst().orElse("foo"). The only thing I don't like to do with streams is .forEach, I still prefer a more explicit for { } block.
Thanks a lot for the explanations!
Have you tried Sql2o? It's simpler than JdbcTemplate, but apparently more performant.
Last project: Java EE 7 + PrimeFaces + OmniFaces, WildFly 10.0, PostGres, Git, Maven Current project: Java EE 7 + PrimeFaces + OmniFaces, WildFly 10.1, MySQL, Hg, Maven
As also that much more difficult to debug.
Yup, poor sods on Eclipse, Emacs, Vim et al will just have to wait.
I use the *shit* out of lambdas. They save me a ton of code and allow me to be more expressive with less space, while not being any harder to maintain. Streams do the same about 33% of the time. Sometimes they make things harder to understand for my teammates, though. That's a tool that I think you have to design a system for from the beginning - shoehorning it in tends to have limited benefits - mostly in just saving LoC in the easy cases. I like the additional methods on certain collections to return defaults. Optional is kindof a cludge but it makes code look clearer at least.
I always found the optional thing strange. It's nice in theory, but underneath the hood there's still a null check. Also if you're truly coding defensively, don't you still have to check that the optional itself isn't null?
Mostly PL/SQL, some jOOQ, and a single boring servlet, because HTTP.
Optional is better semantically than returning a null value when there is nothing to return, i.e. getting a single value from a database, returning an empty optional if it is not there. Now if only everyone used @NotNull annotations...
&gt; Lastly, they are requiring that candidates be U.K. nationals with at least 10 years residency. Planning ahead for the Brexit?
Also, Comparator builder
None yet. Building uber jars for containers really is the perfect fit. I recommend k8s over swarm though
What are you caching? I am having a hard time coming up with any idea what someone would need to cache when dealing with date/time.
Did you forget to actually say which company the job is with?
Angular, Java8, Spring, Hadoop/Cascading
You are welcome!
Dear headhunter, nice posting history. Reddit is not a job board, kindly fuck off.
This may not be the sort of daily website you are asking for, but I do check them regularly just to learn about Java: [Brian Goetz](http://stackoverflow.com/users/3553087/brian-goetz?tab=answers&amp;sort=newest) [Stuart Marks](https://stackoverflow.com/users/1441122/stuart-marks?tab=answers&amp;sort=newest)
JDK 8, Java EE 7 with some stuff from EE 8 like JSF 2.3 and Security 1.0 (we're not in production yet) on Payara 164, PG as DB.
You can always evaluate them if you set a breakpoint. If you want the result of a stream somewhere half-way you can simply select that bit and add .collect(Collectors.toList()) to the end and you get whatever that steam would spit out.
Yeah I usually use a for block too except for one-liners (System.out::println is much nicer than the equivalent for-loop). Looks much nicer imo.
 Set&lt;UserAccount&gt; userAccounts = new HashSet&lt;&gt;(); for(Account a : accountsClient) { userAccounts.addAll(a.getUserAccounts()); } Set&lt;String&gt; ids = new HashSet&lt;&gt;(); // This one is would be an example for a good stream API use for(UserAccount ua : userAccounts) { if(accountStatusOkay(ua.getStatus()) &amp;&amp; ua.getCurrencyCode().equals(currencyCode)) { ids.add(ua.getId()); } } The same? Probably still performing better than the stream variant. Then again the stream doesn't necessarily have to be one statement either.
marry me
Caching lets you save time on a project.
This refers to [`Comparator.comparing`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html) right?
This is MUCH more readable, but to your point, I could write that for loop a lot more concicely when I extract "escapeStirngWithSeparator". And, your code points out one instance where I have used streams to benefit my velocity: Collectors.joining -- finally making it so I don't have to do extra code in order to not have trailing seprators and/or append "" first and "," thereafter. I mean, under the covers it's doing exactly that, but Collectors.joining() is nice. But again, streams are not the end-all-be-all-replacement for for loops. IMHO. (sidenote: it's not a big-O problem (aka, it's still linear), but those streams are 3*looping that collection instead of 1xlooping.)
Loving CompletableFuture! Finally I don't have to write and maintain my own Future class anymore.
They're both evil. Microsoft is starting to look good next to Oracle. Oracle hasn't changed. Microsoft has changed a tiny bit. But that does not mean Microsoft is "good" yet. If you had a Goodness scale similar to the Kelvin scale, where absolute zero means all goodness has been removed, then Oracle is still sitting at zero, but Microsoft has climbed up a few degrees. Still an immensely long way to go however.
Or use the peek(Consumer&lt;T&gt;) method which is there for this sole purpose.
Thank you for your reply. I agree with the part about the testing, but, I think, upgrade and overengineering issues are not exclusive to db. I guess, just like anything, it has some uses, but one shouldn't go mad with it. 
I have used and like Mapstruct. Some people get a rash from annotation processing, especially code generation, but I actually like that it is so transparent. It gets awkward if you use lombok, although not if you have all your beans in a separate module, as some people might argue you should.
who's the madman that code java in emacs/vim? 
pretty like lombok. I hope that mapstruct works at least fine with it ;)
The filter makes sense in terms of not calling the remaining methods because the collection changes to not include the other options, but you're saying it does: [ "1", "\"2\"", "\"3\"", "4" ] * "1".toString() * listToCollectTo.add(expensiveTransform("\2\"".toString())) * listToCollectTo.add(expensiveTransform("\3\"".toString())) * "4".toString() * joinListWithSepator(listToCollectTo, ",") and not: * "1".toString() * "\"2\"".toString() * "\"3\"".toString() * "4".toString() * listToCollectTo.add(expensiveTransform("\2\"")) * listToCollectTo.add(expensiveTransform("\3\"")) * joinListWithSepator(listToCollectTo, ",") ?? I'm not entirely sure I believe you. You're probably right, but that's some unintuitive DSL right there since each .thing() isn't actually returning something concrete. I guess this is just how Java does the stream thing. Magic Voodoo. When I see inputList.stream(), I think "it's returning some Stream object" and then .map() "some map thing object" etc until you get to the end. without some ending .build() or .process() method, I find it hard to see how it's not processing the beginning methods first...
You're looking for /r/javahelp. 
Interesting, well, in that case it's not 3xN as I thought. I'll mess around with this some more. I still don't see how it's implemented -- i guess it's time to redownload the source. Thanks.
Streams, Consumers, Comparator, Optionals, java.time.
Threeten-extra is a nice addition to the standard java.time API too. We use it primarily for Interval
&gt; You're looking for /r/javahelp. I think asking for a comparison of the various options is an architectural question and probably a good candidate for /r/java instead of the onboarding level questions in /r/javahelp .
Cool, somehow I missed this. Seems pretty cools since I find Comparators always awkward to write
This would be a good place to post such a comparison, but no, not a good place to ask. He's asking for help. In the sidebar, you can see it says "seek help here" with an arrow pointing to /r/javahelp. Also in the sidebar for /r/java: &gt; News, Technical discussions, research papers and assorted things of interest related to the Java programming language. This is none of these.
It wasn't awful. You definitely got a laughing exhale from me.
Things I constantly use: Streams, but with the help of an additional library like https://github.com/jOOQ/jOOL or http://www.javaslang.io which make them less noisy and easier to use f.i. when your lambdas throw checked exceptions. Things I use daily: CompletableFuture's are great for composing processes and specifying when and where they should run. Very powerful. Things I use once in a while: default methods, constants and inner classes in interfaces. An interface suddenly becomes much more powerful. 
try-with-resources was introduced in Java 7 not 8. However, it is definitely a great language feature.
I [subscribe to Java Magazine](https://www.sub-forms.com/dragon/init.do?site=ORA6028_JFnew&amp;&amp;PK=NALOTN) from Oracle Comes out every two months. Pretty deep technically. [Current issue](http://www.javamagazine.mozaicreader.com/NovDec2016#&amp;pageSet=0&amp;page=0) has three articles on what's new in JUnit 5, an interview with Kent Beck, an article on mutation testing, implementing design patterns in Java, a self-quiz, etc. 
[baeldung.com](http://baeldung.com) is a magnificent resource if you're into Spring.
Disclaimer: I'm kind of lazy so I might totally bail I could probably help you, I'm working as a Java developer and I have a bachelors degree in computer science
Bro if you could that would be greatly appreciated, you tell me when you want to do it.
Java Annotated Monthly from blog.jetbrains.com is well worth reading IMO. 
What does everyone use for database design and development? I have tried PostgreSQL before and I always get frustrated that it doesn't have a good GUI tool to help me create/alter tables. I feel like I shouldn't have to learn all the lingo to create a table with an auto increment ID and foreign keys so I always end up going back to MySQL because it has workbench. Am I missing something?
I roll my own framework. Java 8, Undertow, jOOQ, Jackson, mysql, gradle
Aside from what everyone else has mentioned, one of my favorite things in Java 8 are the additions to HashMap, especially `getOrDefault` and `putIfAbsent`. Instead of saying for (String each : words) { if (frequencyTable.containsKey(each)) { frequencyTable.put(each, frequencyTable.get(each) + 1); } else { frequencyTable.put(each, 1); } } You can just say: for (String each : words) { frequencyTable.put(each, frequencyTable.getOrDefault(each, 0) + 1); }
I use Spring Data JPA along with QueryDSL, although for very complex queries I will sometimes drop into SpringJDBC or Stored Procedures
Any one can still help, they havent responded 
I can try to help out. Can you post/send your questions?
Do you want to send it through email? 
JBoss EAP 6.1, JEE7, Apache Camel, Hibernate, JSF, Facelets, Seam
Nice idea. So how data is added to the website, manually or through rss feed? 
GenericClass&lt;String&gt; = new GenericClass&lt;&gt;(); Yeah, it's Java 7, but we recently jumped from Java 6 to 8 at work, and it's my favorite feature so far :)
There are many, one that I find quite good is http://dbeaver.jkiss.org/download/ 
My first question to everyone is below. To check if he knows about recursion or not. 70% answers it wrong as (0,1,2,end) but it's actually(0,1,2,end,end,end,end) **It's not related to java but it's to check his/her programming aptitude** public class Test { public static void hello(int i){ if(i&lt;3){ System.out.println(i); hello(++i); } System.out.println("end"); } public static void main(String[] args) { hello(0); } } 
The maven frontend plugin is nice because you only need maven installed then it provides a way to control the version of npm/node to use without having to install it locally. Then if you want to hook into another client tool e.g. angular cli or grunt you can just install this via npm in your package.json and make a npm run script to launch it. Then in your maven build just configure the frontend plugin to call "npm run grunt &lt;args&gt;" for instance as a build step to transpile/package/run tests, whatever is needed. 
I've heard from my friend that docker is not good for production. Maintenance is high. You can use kubernetes which internally manages the node. Maintenance is low here.
I don't ask prepared questions in an interview. Generally when talking with a candidate I'll ask about previous projects they worked on, then dig deep into the technical aspects of what they were working on, and will try to ask about programming patterns close to what they were working on. I feel I get better answers that way than random technical questions elicit. If I'm satisfied with the in person interview I give them a programming test that should take a couple of hours to complete, and give them a few days to complete it. The project is basically 1) calculate primes between 1 and N, 2) reimplement 1 in a multithreaded manner, with the ability to specify the number of threads used, (T) and 3) create a GUI that takes the parameters N and T and display the results. (Candidates can use any GUI toolkit they want.) Solving the problem is important, of course, but how they solve it and the quality of the code is just as important.
Maybe you should've been comparing the reduced versions of both examples instead then. It seems pretty pointless to judge the value of streams by looking at two examples of really poorly written code.
The same doubts over here. We used to give an assessment that the developer can program at home, where the developer should create an entity and a user interface to perform the CRUD operations. I always mention that communication is an important part and feel free to ask questions or discuss the requirements. Mainly we check if the developer understands the different layers and their responsibilities and how he/she communicates. Personally, I like it, it gives me an idea of the level and how to work with them. However it may take a long time for the candidate and to make it less time consuming we have switched to another approach. These days I mention a certain theme before the interview and with the candidate we talk about how to model it and what are the advantages and drawbacks. Than the developer can finish it at home. I think it is more important to have an insight of how to work with people and on what level they think, i.e. to split up the problem and solution. For me there is not much need to see what is the candidate's knowledge of the programming language itself, if they do not know then we understand or give you some time to read and then you know. Regarding this I would like to mention Oleg Vushnepolky's quote "During an interview, you are not interviewing a person - you are interviewing your own ability to get this particular candidate to the level needed for the job." Interesting discussion, I will folow it. 
Check out https://www.jetbrains.com/datagrip/
I agree on the interview, though I usually forgo the longer technical test in favor of a probational period. I've had a couple candidates that could code ok, but had other problems. Examples: they couldn't manage their dev environment; could handle source control; they had attitude issues; couldn't remember where they saved files in the filesystem. I found these problems especially true in entry levels and recent college grads. Though I had a senior dev that kept breaking his dev environment every few days. On analysis at the end of the project we found we had lost significant time to environmental issues. The probation period allows for a shake down to test for things that can't be done during the short-term of the interview. The only thing I don't like about technicals as an interviewee is that most testers don't see elegance in design, they evaluate you on how they would have solved a problem. I've had lots of issues here with people thinking I had too much whitespace or not enough. Better then that I had one place that asked me to write a solution to a complex problem on a white board in front of a team of five. I did it, but did not take the job.
I use only Intellij CE and its built-in highly configurable and developer-friendly "code inspections". They are natively supported by the Teamcity CI server. There is also an integration option for them with other CI servers like Bamboo, Jenkins, etc. : https://github.com/bentolor/idea-cli-inspector
I like using Method References to pass existing methods as implementations of functional interfaces. See https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html
If you still need more, PM me. B.S. in Information Sciences, 11 years development experience
&gt; My company recently invested in a paid product called Fortify, but I'm not a huge fan of it because it seems to produce a lot of false positives. I've noticed it'll randomly decide things are a hot issue but in the next build forget about them completely. Not at all reliable.
I do. I haven't used an IDE with a passable editor yet. With neovim and a whole bunch of plug-ins I have a very nice development environment. Fuzzy, semantic completion? Check. Documentaction lookup? Check. Incremental compile on write? Check. A whole bunch of other stuff, too. After coding in vim for 16 years, I wouldn't use anything else.
I'll have to download it once I get off work today. Is there any kind of certification for it or do I need to just get familiar enough with it that if they ask me about it I can answer?
You aren't expected to learn really any specific languages or libraries etc at college. Thats not how it works. You learn the theory (using one or two teaching languages to explain the basics through practice) and then you have the knowlege to teach yourself the rest. You can learn it all by reading the docs once you get the right mindset.
java8,Wildfly-swarm , primefaces , mongodb+mysql
Is there anything else on your CV?
Good deal, you are one of the good guys. Surely, though, you've experienced what I am talking about though when you were an interviewee?
2D graphic design experience and a CAD certification from another field, some general IT experience, and a bunch of FEMA/Military certifications.
The internet. Part of being a programmer is being REALLY comfortable self-teaching and filling in gaps in your own knowledge. Yes, you can do this on company time, you just need to strike a balance between learning and doing. Neither the university nor the industry can teach you these skills simply because the technologies evolve far too quickly. If they designed a formalized teaching course around it that course would become obsolete in 6 months. About the only decent "teaching" that you'll get in the industry comes in the form of mentorship, code reviews, and stack overflow. The rest all comes down to self-teaching, repeated exposure, and lots of patience.
Uh, no. Java SE perhaps -- though your 80% number is a stretch. Java EE? No way. I work at one of the big 4 and they love Java but avoid Java EE like the plague.
I would say you should get a subscription to PluralSight and/or use Udemy, learn how to use Spring, learn some javascript, etc. and then start building some simple applications with Spring Boot. It'll be much easier to get a junior developer job with sample applications on your resume and have the ability to speak about Spring (even if your knowledge is somewhat shallow).
It's all fun and games until your database requires 128gigs of RAM and it still runs out of memory because your stored procedures are blocking other applications from reading tables.
On the job! You can start as a junior in a company and get used to "enterprise" Java along the way. As long as your developer mindset is good, the libraries, frameworks, infrastructure etc. doesn't matter much as it's all semantics.
Disclaimer: I work for a company that makes what is, in my opinion, the best code quality tool: [Teamscale](https://www.cqse.eu/en/products/teamscale/features/). It runs on a server, so everyone gets the same results. It analyses not on build of your software but directly upon committing, so you get accurate information about each change you make right after your commit (a few seconds to analyse a typical commit). It has plugins for all major IDEs. Comes with lots of built-in functionality, support for different languages and can run Findbugs on demand if you like. And it can analyse the entire history of your repository, so you'll get accurate trends and you can effectively blacklist findings that you don't find helpful (they won't pop up again a few commits later like it happens with many other tools). But don't listen to me, better try it for yourself, I admit I'm a bit biased :P
If it's your first development job and you're applying for entry level then knowing core SE is the main thing. You can apply anywhere really.
It depends on your market. I can speak to a big city. Just go apply for one of the hundred or so of available entry level java jobs, preferably at a large programming shop. They're always hiring. You'll need to be able to code in Java and have good reasoning skills, but other than that, most anything else is a nice to have that you probably don't know well enough anyway. They'll train you up on the basics of what you need to know and you should keep reading and exploring on your own during that time. Salary depends on cost of living, but $45k is an absolute floor. My org would pay ~$60k for a promising junior dev.
with no bachelors degree in cs or similar, and basically being self taught, you'll almost need to just take any job that will offer you a position, regardless of pay. that is how you get your foot in the door and long term you will thank the you that makes sacrifices now
That's the good part about hooking into the server with custom rule sets. You can eliminate things you don't care about.
Hold my beer. Here you go. Only one map access (meaning, might be thread safe depending on your map): for (String each : words) frequencyTable.compute(each, (k, v) -&gt; v == null ? 1 : v + 1); [I know](http://i.imgur.com/6t3LFuZ.gif)
It depends on if he wants to live in a card box having fun coding all the time, or in a house coding during work hours and having fun coding in his spare time.
Just read a lot of documentation (pretty much all of the above technologies have a pretty good docs) and try it on some examples. You can also read books, there are a lot of books about some of those technologies. I also had some courses at my university that taught those. This all will by no means make you an expert, but having even a basic understanding can get you places.
So, what is considered being able to "code in Java" at your company? How complex of a program are we talking about?
Code in java in my opinion you should be able to write an application in java, and be able to handle a web service midtier in java.
I do along with all my co workers. We all really like it. We evaluate alternatives from time to time but have not found anything as productive.
i prefer graddle , but also belive that scripts is not appropriate for application meta data. Application metadata should be in xml. [https://dzone.com/articles/maven-vs-gradle-and-the-best-of-both-worlds] (https://dzone.com/articles/maven-vs-gradle-and-the-best-of-both-worlds)
Well, I can't see how this can't happen if we replace stored procedures with big old websphere with 100s mb WAR
&gt; Where do you go to learn all that outside of a college? http://spring.io/docs 
I have SCJP certification and a lot of experience using Java in academia (doctoral and post-doc research, desktop apps and headless console apps). I've literally never come across a job *outside* of a university that would hire me because I don't have Java EE experience.
If done correctly it's much easier to scale java applications than a database. Stored procedures take processing time, which would better be offloaded onto a detached machine. It's fine when you have a dozen or so, but when you get to the size of thousands, it's an unmaintainable mess. It doesn't lend well to developers keeping things organized and isolated over time compared to other languages. Don't get me wrong, use the right tool for the right job, it's the wrong tool for the engine of an enterprise system that needs to scale 500x-1000x times in less than a year. It's probably the write tool for a small system that's never going to be expanded upon. It's also not the greatest language and easiest language to hire for. It's much easier to find a java developer and train him then a database expert that's clearly going to cost a lot of money and still take time to learn the system.
I'd go with spring boot first. Most java jobs I see are web so that narrows to spring or jee. Then try learning what's under the hood in spring boot: Jackson for json parsing. Hibernate for db orm. Tomcat server. Etc... Learning how to build performant servers is next, caching strategies, clustering, monitoring tools... Client side would be next, I'd go with android and react as options. Make sure you have a good working process, clear out details of business requirements promptly and let the business know when you hit a blocker and their options, should you spend more time trying to find a solution or they have other priority? Write tests for everything you code from the point of view of the client first. Never say your code works if you did not test it and proved it works.
Note: As the minor version number suggests, this is an Elite / Pro release only. I first thought it was a major version release, because the post had a couple upvotes. But I guess PrimeFaces rocks enough for everyone to know that and upvote regardless. ;)
Just looked into PluralSight after seeing your post. Do you have any experience using it? I'm curious how it compares to an account with Safari Books Online (other than the fact that PluralSight only offers videos). Both are about the same price. 
Ate java jobs concentrated in any one place in the states? I'm interested high tailing it to Georgia so I was hoping to have e something ready for when I move there. 
Is this all for Java web programming? 
Spring has always been able to handle millions of requests a day. If you already know the framework, Spring Boot doesn't bring a lot. Even with microservices, a typical project is going to be a lot more than just one class, there isn't a lot of overhead from setting things up yourself. Then of course, if the choices made by Spring Boot fit your requirements, go ahead, there is no point reinventing the wheel. 
I do. My work has a subscription. It's not great, but has a lot of content; most of it beginner to intermediate. One my issues with it (besides a lot of beginner content), is that it has more C#/.NET content. Safari has a lot more content in general. Their video collection isn't super expensive. But they have all of the books. I prefer video content, but I think I'd prefer safari over plural sight and purchase or watch videos on YouTube. Overall, it's easy to try both and see which you like better.
Thank you for the detailed response. I'm familiar with Safari (and it's free through work) but Pluralsight just seems a bit more organized and structured. I'll take a look at the free trial. 
Yes Java GUI is a different world, worlds. Eclipse RCP applications are different from Swing GUI which is different from JavaFX. Then there's the game world, Minecraft is its own engine, libGDX is popular for indie, also jMonkeyEngine but they're not the same. Edit: Will the moderators please check into why my comment was downvoted? What is disagreeable about it?
ShitSphere leaves a bad taste in my mouth but managers who don't know any better keep buying them by the dozens, but they are not the ones who will feel the pain of use on a daily basis. 
Thanks, I think I get it now. In the company I work for we never achieved such a large scale applications. I will keep in mind that DB solutions don't scale too well. 
Rockstar devs with an ego problem can ace useless non-real world non-business programming puzzles. They are argumentative and don't work well with others. So we put them on 3 month probation.
same usecases as for JSF
Every page navigation in JSF does a full server side rendering, so it's not SPA, thus relatively less responsive than true JS SPAs. 
A JS SPA is not the holy grail of computing, and when operating a much diverse data sources they are not responsive at all. For one a SPA website takes an initial time to load that's always higher than a server that sends ready to render HTML. It's why Twitter went back from fully client side to server side HTML generation. Secondly, a server side template where parts of the page needs different data, say a list of balances, a list of inventory and a list of users, can query this data relatively fast in 3 separate calls. It's server to server often in the same network. With a client side template, good luck doing 3 separate calls over the Internet. Now you can make service endpoints that provide all 3 lists of data in one call, but this will obscure your endpoints and tie them strongly to one state of your client side template, and that is IFF you are able to determine which data you need in one call. Thirdly, with JSF you don't have to do a full page server rendering all the time. There's AJAX and WebSockets, and they are used a lot. There are so many more things why a SPA is not the holy grail and the ultimate end answer that you seem to think it is...
Liberty is pretty good
" it seems to produce a lot of false positives." Yeeah SAST Fortify produce a lot of false positives. I have a code in project: String password = System.getProperty("password"); And Fortify says this is a bug because the variable name! Did you tested web inspect and web arachni scanner? Im studding If have a significantly difference between these twos DAST! But web arachni have some problems with auto login over j_security_check (JAAS) 
I've used pgAdmin4. It was very difficult to use and not intuitive at all. 
Me to, if you are pasting your dependencies into your code, you might as well paste the source code instead of some base64 encoded version of the bytecode. 
By an application, I mean an application with a GUI, a small DB, and probably some network connections. That is the type of stuff you would need to know since many places still have developers working for thick client type stuff. Web application would be similar. You should be able to make a java based web service that can handle a crud app. Crud apps are 95% of the work available for software engineers. 
Article is not about WebSphere. Or whatever Shitsphere is supposed to be.
So this actually makes a little sense for obfuscation, but not much else. The advantages certainly are not self-evident.
Ratpack, RxJava2, Guice, Lombok, ByteBuddy, Jackson, Cassandra. Blindingly fast :) Beats Boot and DW easily. Faster than Node.js too.
fair enough. I will address this (either improve the article or write a second one)
Could you elaborate more? Would be interested in real world experience with jooq.
Just because you can doesn't mean you should.
+1 for sonar. We don't use it in our IDE (IntellIJs own warnings are good enough), but we have it as part of our Jenkins build. I've found it useful. Need to tweak the ruleset, though.
Unit tests?
This is my constructive criticism: You're not using Source Control properly. These different version folders (1.x, 2.x, etc) should be Tags, not folders in the project, and you should definitely not be uploading the Jar itself to the project. How do we know that Jar is actually the compiled result of that project? Instead you should include some kind of build technology (gradle, ant, maven) to actually produce the Jar from the code, so people in the community with an interest can easily test. Unit tests would be helpful, as would a more modular architecture. Can you make the Cryptographer class abstract, and provide different implementations for using different types of Encryption, rather than hardcoded to AES? Perhaps this can be an option in the GUI? You should start making Issues in Github, so that other can fork the project and contribute pull requests corresponding to specific issues. The community needs direction if you want them to contribute code. Also, if anyone is to use this, especially as an API rather than through the GUI, the methods need to have a JavaDoc explaining how to use them, especially the method parameters. Is this project created by hand? It might be difficult for potential contributors to get started if this doesn't match some standard java directory structure (Source code goes in a src folder, preferably src/main/java). Finally, you should include some kind of License when you share code online, so you protect yourself, and reassure contributors on how the code will be used in the real world. If there is no license, then one can be added at any time, and those who have already contributed may not agree with the license that gets chosen. This is a red flag to potential contributors.
I see now that I've been doing things entirely wrong. What really sucks is my school never taught version control whatsoever. I have a lot of research to do and it's my fault for not doing it before posting. Thank you for the criticism
That will Sound harsh, but i need to Tell you that: For a Senior, that looks not sufficient. You wouldn't get a Job at my company. We have Trainees without College or other degrees that are far more educated in CS stuff as you are. I really recommend you to learn that IT shit. With Passion. Otherwise you will struggle all the time.
I like how someone is going through downvoting every answer.
Don't be so hard on yourself, your project can be cleaned up in a series of steps. What you need is a plan of action.
Does this have to be Java? There are a number of command line tools to do this 
How hard is it for a bank to sponsor a visa compared to a startup? Living in a third world dumpster about to graduate with 3 years with Java EE/Spring experience here. 
Companies hate sponsoring visas in general. I work in the UK, and that's my experience. We have no one non-EU here in the office. Too many hiring restrictions. Might be a different situation in the US. Contracing-wise, I think most contracting work for big financials goes to Cognizant in India.
You shouldn't ask people to do your homework for you. I googled your entire post and found [this](https://chess.eecs.berkeley.edu/ptexternal/src/ptII/ptolemy/media/javasound/SoundWriter.java) though, which looks like it is *exactly* what you described. Tell your teachers that Java 1.2 is a bit dated.
I'm clicking around in that repo and not everything is in Python. More importantly, it is not *about* Python. It's about how to write software, which is pretty much programming language agnostic. If you just want to learn Java, check out /r/learnjava, especially the sidebar.
I remember your post a while ago of nudge4j and had the same concerns as voiced in this thread. You used the URLClassLoader, which I suspect is now in that massive blob of base64. How is this better? Now people won't complain about you using the URLClassLoader as they have to decompile it now? Edit: I thought I'd do the legwork and find out what's really in the base64. No URLClassLoader - I was wrong. It does setup it's own web server and downloads the JS from an external source, which is still not great. Also relying on com.sun classes isn't a good idea either, as they're not part of the Java API.
Yeah that would work. You could also make it 2 player where the players take turn entering positions to shoot
[removed]
&gt; But i still think i am a junior yes. To your specific question, learning best practices from existing open source projects is like learning how to operate on humans by butchering animals in your spare time. Open source is free software... most of the "good stuff" is good enough, but you're not going to learn good enterprise patterns by looking at the sources of Apache Commons, for example. All that said, your best bet might be to contribute to any open source project that suits your fancy. Or just build software in your spare time to solve a problem you have. Or just take a more active role at your job (aka, go above and beyond -- maybe write a utility for a repetitive task at work, a small GUI to monitor your dev server, etc...). As you're doing this, you'll be faced with problems and you'll need to research the best way to fix it. Do this a few hundred/thousand times, and you'll approach having enough experience under your belt to really understand tradeoffs between certain patterns and utilities. Writing software is the best teacher for learning software. You hit roadblocks and if you get past them, you're learning.
Ya, I suppose it's not the most user friendly tool. Honestly though, if you are working in Java, Hibernate is great to use with Postgres. You just create your entities in Java and Hibernate handles creating all the tables.
Just keep writing code and learn new stuff like data structures and algorithms 
Check JHipster
It's the only instrumentation system in Java so screw off.
data structures and algorithms: https://www.coursera.org/course/algs4partI software development: https://www.edx.org/course/software-construction-java-mitx-6-005-1x 
Most of the people are moving away from it, because Java9 is coming with Jigsaw. And I assume only 1% or even less of the OSS really use `Unsafe` for optimizations, but it is adding a lot of complexity to handle.
Excellent! I keep forgetting about the new `merge()`
In internal attack
its literally just create an entity and then use it with a native query. 
We are working on a multitenant oauth server. You just have to start it up and add the resource server config to your resource server. It uses JWT. We want to make it easy to use in your projects. Yet there is work to be done. Any one that wants to help is welcome. Check https://github.com/Byteflair/oauth2-server. 
Looks like alternatives are already in place - http://openjdk.java.net/jeps/193
I always welcome your comments. On the old post of nudge4j, you were concerned on the URLClassloader pointing to a jar somewhere in github. Since I was working terribly hard in making the jar ultra ultra light I then come out with the idea of embedding the bytecode. Concerns now ? well yes the javascript could be nasty. I guess it's a risk that user needs to take. Although the biggest js I use is https://ace.c9.io/ which should be pretty safe. Finally regarding on com.sun classes. In many cases you are right they should not be used. The HttpServer is an exception to this rule. Oracle is okay for you to use it. see https://docs.oracle.com/javase/8/docs/jre/api/net/httpserver/spec/com/sun/net/httpserver/HttpServer.html see http://stackoverflow.com/questions/3732109/simple-http-server-in-java-using-only-java-se-api
sun.misc.Unsafe is great for getting C like performance against memory. One great example is arrays of structs in C compared to arrays of objects in Java. Arrays of objects in Java are actually arrays of pointers, so each retrieval from memory uses two reads. Worse yet, the second read could be in a random location and thus negating any efforts the underlying hardware is doing to pre-load memory that you are likely to need soon. But, if you are using sun.misc.Unsafe for memory management you'll have to handle everything that a C programmer would. From freeing memory after use to buffer overflow protection.
sun.misc.Unsafe is going away(with a replacement, I believe) in Java 9, so just don't use it.
I could do it, Bachelor degree &amp; developer, send me your questions.
Why not use a JASPIC ServerAuthModule for it instead of a ServletFilter?
I've been programming in Java since the 90s. You will have to go out of your way to find an operating system that does not support installing the JDK &amp; JVM.
Hey, love the post, but ask your programming questions over at /r/javahelp!
in that case what OS doesnt support JVM? 
While it's a good idea to associate well-known names with general topics, you'll probably appreciate the power of these tools more once you realize how much of a pain doing it without them is. For example, try implementing the sorts yourself and see how it compares to the optimized ones you'll read about. Once you feel pretty comfortable with Java, I recommend you pick up C++/C because while it is syntactically similar, it'll force you to learn more about the inner workings of your code (like why can you change the value of an array by passing it to a method but not an int).
Indeed, it's all done out-of-the-box in https://jhipster.github.io/ And it's very widely used, so there are less chances of security flaws than in something you would code manually.
Since this is help with programming, it should, as the many hints on the site indicate, be posted in **/r/javahelp**. Please, be sure to read the [**Posting Guidelines**](https://redd.it/48eykt) there before resubmitting. You need to include your code - otherwise we cannot really help you. **Post removed:** programming help
I'd like to know how the Multiple Inheritance example was supposed to work (it didn't when I tested it with Java 8 / 64Bit). I don't see how writing to some memory location can ADD a super class
https://github.com/auth0/java-jwt Why wouldn't you check out this library ? It really depends on what you're doing, but spring security is a beast. If you don't really need all of it, then it'll just over complicate what you're trying to do. This JWT library is written by the auth0 guys. https://auth0.com/
Don't forget that IDEA is not only for Java projects. It has plugins for many languages and tools which makes it very awesome.
&gt; I had to find out after deploying changes to production. wat y no dev or stage env? do you always deploy changes to production without testing?
Actually it was a staging env but it could have easily been production. We have a double production system, the first is for testing purposes of the clients client, so the manual testing is happening on the "first production level". There is also unit / integration testing for the new code, but I won't write tests for code I'm about to delete. It's some legacy code from previous developers :)
I agree it's awesome. I would just like to see some tomcat integration / JSP without the need to pay for it. But maybe I'm asking too much :)
&gt; I got a few companies to buy it for me, but it was such a PITA I gave up after a while and just bought it myself. To be fair, the company I work for has no problem buying some IDEA licenses, but that would mean I would only be able to use it while being there. I always wanted to buy it for myself, so I will definatelly enjoy it :D
True, and thanks for pointing it out.
I have not yet found(or heard of) one. Android uses OpenJDK which may include some gotchas. Also this is the reason why Java is one of the most popular languages, it works on practically every device out of the box with no changes to your source code if you programmed everything correctly(and minimal changes if you didn't).
If you're looking for a specific feature that IntelliJ Community is missing, you can always look to Eclipse. It's a worse platform, but it has an absolute galaxy of plugins for everything under the sun and all free.
I like using every tool that helps me do a better job. I love the bi-directional GUI editor of eclipse for example, and dbeaver is an excellent database tool. However, I prefer using intellij for web development. At the same time, I hated Datagrip when I tried it, what were they thinking...
What is JavaFX and would Intellij be a good IDE to work on something like that?
Thanks for the links!
As a lone programmer the money I made from the community version I donated back and bought the Ultimate version. Didn't even hesitate on it.
Either, but leaning towards Android apps/games.
Auth0 is great and the docs are just fantastic 
thanks. Just curious, what keyboard do you use? I'm thinking of taking one mechanical keyboard to work but I'm afraid it will annoy everyone around me. (brown cherry mx) 
agree but their pricing gets expensive fast
Cool. I'm still a junior programmer working where I did my internship so It was a bit harder for me.
JavaFX is the current GUI windowing framework for Java... replacing the venerable Swing packages. Its a great, hardware accelerated scenegraph system. I don't know so much that Intellij in particular would be the best IDE for JavaFX development. SceneBuilder is the tertiary WYSIWYG builder for JavaFX. Its mostly integrated with NetBeans (not directly). NetBeans comes with a lot of great samples for JavaFX apps. 
You need to post this over to r/javahelp r/java is for discussions around the Java language :)
Well I mean, you just explained how it's supposed to work... think. What we use over here for a hobby project is [Jenkins](https://jenkins.io/) (Well not really, still have to write tests etc) with Gradle. Doing "dev" -&gt; "autoTest" -&gt; "prod" is horrible unless you have 80+ % test coverage (and have *extremely* robust code in the rest 20%).
You didn't have to buy it. You could use Eclipse. There's nothing disingenuous about not including more advanced features in the free version.
WYSIWG? I'm guessing NetBeans would be a good IDE for any Java development if so I don't mind the switch because I recently started using IntelliJ, before I was using JGrasp, but it lacks in functionality and really was only for the course I took.
&gt; Working on a shitty salary, it's not very easy to decide to spend 150 Euro In this profession, you must be getting a really shitty salary if 150 Euro even enters your mind as something you should even need to think about spending... for almost anything really. For instance, I can't even go within a mile of a bookstore without dropping 200 bucks easy... without a thought to my budget at all. For me, my yearly fee to JetBrains is just over 1 hours of my billable time. Well worth it - and on top of that I get not just IntelliJ but all the other flavors as well (PyCharm, PhpStorm, WebStorm, etc.)
If you wanted to help, I just released a password strength library which could for sure use more tests: [nbvcxz](https://github.com/GoSimpleLLC/nbvcxz)
Lmfao
Thanks, I'm having my ears and eyes open and I think I have a lot of options for the future. However living in a country with 26%+ unemployment, almost everyone here is being robbed..
Try being a technical writer, graphic artist, or photographer. A lot of that software costs thousands of dollars (US). And most job listings expect you to have years of experience in several of them.
Good idea. Though you'll find that a library is either testable and already has tests or wont be testable without a refactor. You'll want to learn that too, more often then not youll encounter code that cant be tested right away.
I've used Intellij for 15 years straight. Most of the time I did my personal and open source work on my employer's laptop, so I had a license. Now I separate work laptop/biz from home laptop and projects, so I bought my own. In fact I bought the all IDE perpetual license many months ago. I could qualify for free as I'm and open-sourceror (indeed the JetBrains tools use my open source), but I though fuck it, I'll just buy this stuff it's amazing. Oh, one more thing - here's why we love Intellij in particular - https://vimeo.com/33403686
&gt; I've also noticed that IntelliJ Idea considers a class tested, even if it is referenced in another Class test, which makes things even more confusing. It's not an error in IntelliJ. Lines of code that are exercised during the test show up as 'covered' in the reports. In fact, many developers rely on this aspect for testing private methods. That is, the private methods are covered only by testing the classes that call them, rather than being tested directly through subverted means like reflection. [edited for clarity]
What You See Is What You Get
Do you know what /u/Birdasaur meant by tertiary then because in that context in doesn't make much sense. 
Everyone has a Test environment. Us lucky ones have a separate Production environment. :P
No, I tried to introduce my co-workers that only use eclipse to IntelliJ, they hated instantly for the long startups and slowness, and bugs like auto-complete starting to fail, they uninstalled it he same day with the expression "What is the big fuzz about this IDE?"
It probably already still have tests. Just pick up an old project and follow the junit tutorial. And probably look up mocking with easy mock it mockito while you're at it
I think I downvote you in every /r/java thread. Your couldn't be any more wrong on java/webdev development stuff it's actually insane. I mean look at the bullshit you write "... this will obscure your endpoints and tie them strongly to one state, and that is if are able to determine which data you need in one call". lol. Almost as bad as your other JavaEE vs Spring posts. And yes, angular/react is the way forward to write webapps, and no, Java is not the holy grail of wholesome web development. P.S. ReactJs supports serverside rendering. 
If u like the actuation force of browns but don't like the noise... Corsair makes a version of the strafe keyboard with cherry mx silent, quiet-ish mx reds. I actually love it for programming... but I use reds sometimes and don't mind the lack of tactile feedback so ur milage may vary if ur really into browns. However, it's my personal favorite.
At work, we pay for ultimate. At home, I use the EAP builds (early access preview) which u can find by googling Intellij EAP. It's beta, but keeps me ahead of the next version and I can live with the instability. Better than community at least.
CherryMx Browns with rubber dampers make for a quiet, still nicely tactile keyboard.
&gt; I also realized programmers have an attitude about buying things for their profession. &gt; &gt; Dentists and doctors buy a shit ton of equipment. &gt; &gt; Lawyers and accountants spend a LOT of money on overpriced books, suits, dry cleaning, etc. Those items can be purchased once and last years, if not decades. Jetbrains has a subscription model that requires you repurchase their software every year. Additionally, it's software, it costs nothing for Jetbrains to duplicate, whereas those books and doctors equipment has a real manufacturing cost associated (aside from the R&amp;D that goes into it). IDE's are expensive without obvious reason, other than the lack of competition.
Well, a staging / user acceptance testing (UAT) server *should* be identical to a production server. That's kind of the point.
IDE's are expensive because they require constant maintenance, QA, support, etc. If you don't like it, use Emacs or Vi/m.
Is that why the price of their product has gone up in price dramatically over the years? It's funny, more people are using their products than in the past, yet somehow the price of the product has... also gone up... funny how that works. It's like *reverse* supply and demand.
please test this one LOTS: https://github.com/andsel/moquette it's an implementation of a broker for MQTT: http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.pdf 
&gt;Jetbrains has a subscription model that requires you repurchase Not require : encourage. I've had intellij 14 for at least 2 years now. It doesn't STOP working 
If you think the price of their products are expensive, then you should compare them to the price of comparable commercial products. Actually... scratch that. There aren't any. When you take into account the sheer number of features they provide in the ultimate subscription vs. what other vendors provide in their features and then divide the price by that... well, there really isn't a comparison. The only thing that can beat IDEA in that respect is Eclipse, and even then, you don't come out ahead because you need commercial Eclipse plugins to achieve parity. Have they gotten more expensive? Sure. Are they overpriced? Not yet. I agree they might want to think about any price increases carefully in the future, but all signs indicate they're pretty careful already. Oh, and the "reverse supply and demand", you have that backwards. The market will support an increased price for their product because it's good. The supply of their product is dictated by whether they keep it up to date. And lately, they support more and more technologies. Shouldn't they charge more for that?
Fuck
I use android studio for most of my work, which is based on the community edition. I'm used to what it does and don't have any knowledge of what ultimate would provide,. I get to live in ignorance until I start on pure Java projects.
Will check this out. Didn't know about it, that's why I didn't look at it yet. :) Thanks.
I work for a company that did not see until 6 month ago the point of buying IDE. Their point of view was "you can work with Eclipse, so use it instead of a paying IDE". In facts, half of the open space used student licence and the other half used hacked licence... :( I disagreed with the fact that you need to steal your daily work tools. So I bought my own licence and I really love it, I can use it for personal projects too. I just wanted to share that even if it is not the original subject. Is there some people here with the same kind of company? 
Yea, it depends on the number of accounts that actually login. Which fits our model. Lots of accounts but low actual logins.but, you are correct.
It's: &gt; There are only two hard things in Computer Science: cache invalidation, naming things and off by one errors ;) Anyway: we have an error-handling shared lib and it's package name is just 'errorhandling'. 
And you think it's acceptable for anyone working on real production software to just copy-paste code that's not even readable? Yeah, I'm gonna pass on your "might transfer my customer data to a 3rd party service" solution. Thanks. 
&gt; I guess it's a risk that user needs to take. You do understand I hope that many of us working on serious projects right? I mean: &gt; The console page uses ajax to post code to execute against the targetted JVM I can't see how it would be a problem of that shit ending up in production at all. /s
Java developer here, I've always used Netbeans and I'd like to try Intellij. What are the main differences btw free and paid versions? 
If you are still a student you should get premium for free: https://www.jetbrains.com/student/
errorhandling
Eclipse is good.
Oh sorry, that's because you said you didn't want to be "tied to a back-end", I misunderstood! Then have a look at our microservices part, it doesn't have a front-end by default.
Netbeans is awesome for JSP / JavaEE stuff. I like it more than IntelliJ.
Good to know, I've seen this on reddit I think (someone's wife bought it for him). Currently it's 180 euro so I'll probably avoid it. 
I'm not a student now, and you can use the student one only for academic purposes. But tbh I've seen people use it...
You can always try the trial. I've already tested it for one month, gave my feedback to Jetbrains, asked me some more things about my feedback. I think it also integrates android studio in there.
For editing yes, it's cool and has javascript support as well. However, I don't like the netbeans debugger, it gets stuck sometimes, and If I'm not wrong, can't disassemble libraries on the fly.
Now that you mention it, IntelliJ IDEA sounds really cheap... I actually loved all the responses, makes me feel more positive about buying it. 
You are wrong about everything you wrote. Clearly objectively incorrect with every single statement. Quite impressive really. You think you can wear a suit regularly for years? You think you have to pay JetBrains every year? You think JetBrains have no infrastructure cost associated with scale (not that it is relevant). Ides are expensive due to no competition? Java ides are normally free. 
exceptionology
The code snippet is encoded but its source is visible on github. I find fascinating about this concern by pasting a snippet you are transferring customer data to a 3rd party service. Obviously I underplayed this concern, but since you are not the only one who's telling me I will see if I can find some sort of solution to mitigate it thanks 
&gt; I will see if I can find some sort of solution to mitigate it thanks I would suggest simply not trying to reinvent wheels and ending up with slightly more square version. Most times when devs try to reinvent stuff in a smarter version it isn't. 
small feature? This needs to integrate into every Java-backed language like JSP, JSF, MVC, JavaFX, XML, config properties etc etc. I think you underestimate that how broad it has to integrate into every aspect/plugins of your project.
Ah, sorry. I do see now that my reply was rather confusing. I'll check out the microservices part. I was under the impression that JHipster was a "all-in-one" thing, but did not know that you could pick and choose the parts which you want. That's cool!
About 3 months ago I (at least started to) switched from NetBeans to IDEA. IDEA is better but the difference is not as great as I expected. The extra features and the smoother interface are worth the fairly modest cost though I think. There's also the benefit of using the most popular Java IDE which means help is just a Google search away and when you go for a job you aren't left working with tools you don't know. 
unfuck - cause it is handling of errors, not causing them. 
So use Notepad then.
You aren't paying for the electronic bits and bytes. You are paying for the labor in designing, making, maintaining, and updating the software.