Ok, thank you!
&gt;JavaFX doesn't have the single event dispatching problem that other GUIs (including WPF) have. What is different from WPF's Dispatcher? &gt;Try doing any 3D with WPF - oh yeah sorry - you can't. http://msdn.microsoft.com/en-us/library/ms747437(v=vs.110).aspx 
I can't believe anyone still uses Eclipse.
Most vendors don't discount the price of a non-Windows machine, and many don't even offer a non-Windows option. While I'm not a Mac user, I can see the appeal of the GUI and the *nix backend, and if you're buying a Mac the price probably isn't all that much of a factor. (Unless you want to mess with a Hackintosh)
Why are people upvoting this? /u/StreamingBits, you should finish implementing your site before annoncing it to the world. * Almost none of the links work. This includes the top navigation "Java/WebDev/IT", the ones in the footer, the one to "Basics 2", and the LinkedIn button. * Of the links that actually *do* work, the point to "default stuff" * The main twitter &amp; github links don't reference your project - they link to Twitter and GitHub's main pages * The secondary Twitter/Github buttons link to the makers of a Bootstrap theme (that the site perhaps uses). I applaud your enthusiasm, but at the moment its a broken site which shows a most simple "echo this" program. And almost nothing else works. Finish the site, then announce it.
Get off your high horse. People have preferences and are not required to use the same stuff you do.
Just my opinion. I'm sorry that me thinking eclipse sucks is offensive. I didn't say "people who use or like eclipse are stupid." So calm your tits.
&gt; C# is constantly evolving (unlike Java) but it's also stable and readable (unlike Scala) Smells like FUD... Java is constantly evolving too. And is readable. But c# isn't with its naming conventions... Scala is unreadable??? Have you worked ever in your life with monads and functors? Do you know what is the difference between creating and using those with c# and scala? Because it seems like not. You, c# programmers know nothing about scala. 
It is a defacto industry standard. Learning it and being used to it gives people advantages at jobs where everyone uses the same IDE. Many tutorials are also done in Eclipse.
Holy shit, a dark theme.
He expressed his opinion, he didn't advocate passing a law that everyone has to use his favorite IDE. I used Eclipse for years, then switched to IDEA. Never looked back.
I do like Eclipse, but the platform has so many sub projects that typically lead nowhere that the actual main core function, the Java IDE we all love and hate gets obscured. The number one feature they should work on is stability. Really, nothing else matters, not even a dark theme! Then number two is performance. Wish they would kinda do a "snow leopard" release, focussing exclusively on these two things.
And reduced whitespace!
Vanilla eclipse (runtime + jdt) is really stable and super lightweight. But most people download the default distributions and/or add countless plugins. If stability is your number one concern, [bundle your own eclipse](http://fbksoft.com/6-tips-to-make-eclipse-lighter-prettier-and-more-efficient/), it's very easy to do.
Are you twelve? Are you really unable to discuss the merits of two different platforms without resorting to insults? &gt;Drop a button in WPF and do a long for loop. Whole app freezes. You do not seem to know how to program WPF: http://msdn.microsoft.com/en-us/magazine/cc163328.aspx &gt; As for 3D yeah on Windoze only. Yes, WPF is Windows only. So of course it will be only on that platform and that is not exclusive for 3d. So that is not what you wrote; you seemed not to know that it actually supports 3d 
Thanks for the dark theme! Then, I do not need to hide anymore, that I'm secretly using IntelliJ at my work. They will think, it is Eclipse! Awesome!
One year a month, damn.
''Windoze'' Aaand not to be taken seriously.
Counting down until people start complaining that you mentioned IntelliJ. ;) *Note: I am not complaining about it*
I have been using Eclipse Luna since RC1. It has been really stable and it has great performance. I think the real issue with Eclipse is simplification and developer experience. Those are the reasons why people have such strong dislike of Eclipse.
Heavy breathing ensues
Yeah, right? Tomcat is much harder to set up than Glassfish because you have to at least: 1. edit XML file to access management console (e.g. to deploy WARs) 2. download and add JARs in the right versions for your applications Moreover, setting up datasource in Glassfish is only a few clicks. Creating pooled datasource in Tomcat requires a lot of work.
Oh yeah because that happens _all the time_, right?
I think some people like to reinvent the wheel because they think it makes them cool.
Right, though if it's not widely adopted it can take some time to do the political legwork to get it adopted, especially if you are a young upstart without the CTO title to run with. This sounds like a lazy response but in a massive financial institution you are treading through some serious legacy code. That said, to your point -- Scala integrates so naturally with Java that this is less of an issue than other selling higher ups on other new languages.
and Erlang I would imagine, since that's quickly being adopted as a fault-tolerant, high-performance language. Thanks for the input, and that aligns with my expectations. Although I'm a young developer, I'm sure I'll be cleaning up legacy Java messes for a long time coming :/
Truly vintage. So I'm guessing you saw C++ C# as well, but likely no Erlang, Scala, and the like. Glad to see Cobol being phased out, though there are probably folks making good money maintaining some truly old school code for the big four.
That's an important point though. When comparing working for the 'big four' banks versus Google/Amazon/Facebook as many Quora threads do, you have to account for 70 hour work weeks for established startups/tech companies, as compared to straight up 40 hour/wk lower intensity workflows at very established financial institutions when you talk about the slightly lower pay you might get at a bank vs. tech.
Man, trying to stay from Perl as much as possible but perhaps it's inevitable. It's safe to say that Java will never, ever die. Especially in that culture of more conservative financial institutions.
Haha, well played sir.
Ha, right. At big bulky conservative banks yes. But at big cut throat ones at Goldman you'll see some serious envelope pushing no doubt.
I would assume there is a degree of adaptability expected for new developers. When I graduate with a CS degree, I may have one or two languages under my belt. But you'll need to react to the work environment too. That's proven by the fact that learning Goldman's Slang language in advance of an interview is nigh impossible.
I'm definitely less interested in the sys admin side so I can steer relatively clear of Perl and focus on Python for that purpose especially since it is becoming more adopted now. Love the cleaning crew joke though ha. C++ is universally in very high demand, and it seems that could really set me apart. Java is in huge demand as well but it means you'll be swimming in a sea of drones all tasked with similar assignments. At least until you move up to VP of tech...
There always seems to be a flame war about them, when in reality people should recognize that the best one is whichever enables you to be more productive. Personally, I am excited for the release for two reasons: * Competition is almost always a good thing * I keep wanting to like eclipse, but to me it's always felt bulky and like lots of space was wasted. Seems like they recognize that now.
Yes, several have corroborated on the mainframe/COBOL phenomenon. And for C# and Java development, is Linux, UNIX, or Windows more common as an OS? The quant side is less the direction I'm headed, though of course it's extremely in demand with high renumeration to match. I would ask which of these languages supports the highest salary, but I think it's safe to say the key to moving up the ranks in this realm is actually political positioning and soft skills.
Yeah, that's a good point. I can't confirm with specific examples, but I would think the sloppier apps I've used have come from cross platform frameworks rather than native code bases.
Hi-dpi eclipse already works, at least on my MacBook retina. IIRC, it was just a one-line change in a .plist file.
Yes, I think it is a more specialist use case, like smaller more agile financial companies with a focus on HFT for example. Though in that specific example Haskell may actually be more useful.
Have a go at Luna, the RC is available and having used it and the previous milestones for a month or so I've had zero problems.
I'm actually in a position right now like his. I am not allowed to use most of the established Java tools for now. It took 2 weeks for me to get approval to install Java JDK (I don't work in IT). 
Sadly, this doesn't work for those of us on Windows machines :*(
I agree that Java is not as fast as C++, it is faster (for some server workloads). When you are running a large, complex application, the JVM will recompile your code not according to the platform or according to some static analysis, but according to how the code actually runs. It monitors which codepaths are used the most and optimizes the code for them, giving you the potential to outperform even a native implementation. The JVM has information that neither the developer nor the compiler has, and can make whole swathes of bytecode obsolete. Of course this won't save your ass every time, performance-wise, but in large apps it makes Java an obvious choice, because it allows you to structure your code in a way that makes sense for humans, rather than having to performance optimize every other line.
Decided to go back to school for Java Development &amp; Programming. This makes me feel better about that decision.
My personal experience at the big sell side firms is NOT a cushy 40hour week. Retail banks and boring custodians have that. Small asset managers also expect hours. 
Yes, expect a lot of learning on the fly. 
Interesting... Will have to look this up!
Hey, I appreciate your critique and I do understand your concerns. The site was in fact recently launched and it will take some time to update it fully. Come back in a few days and I will have it all working. Thank you again for your input, after all, it is the community's involvement that will make or break the site. 
More so being able to show work you've done. Freelance work can be quite tough and demanding if you dont have experience developing commercial level software
yes I also do this, and this is indeed at quick way to filter out most different files.
A checksum doesn't help. No need to do extra calculation if I'm only interested if any byte is different. The question is how to read files in Java the most efficient way.
OK, so expect to work your ass off in both settings. Code for the financial world - start out with 20% lower salary but with high rewards and bonuses down the road if you play the game right. Code for the tech elite - make your max potential straight away with less room for growth unless you move up to CTO. Then maybe 10% of the tech kids strike gold with an options package that winds up taking off.
If it's not in Bugzilla, it doesn't exist. File those bug reports!
It's taken me nearly a year but I finally feel better in IntelliJ than in Eclipse (although still using the Eclipse keyboard shortcut layout). But competition is absolutely a good thing.
Oh yeah and I agreed with that in my comment saying that for all but the most trivial examples, java will likely be faster.
Random Access Memory using memory mapped files. 
Which is a fucking atrocity, because Eclipse is awful.
Yep. There's an apocryphal story out there that they once received an email from a nuclear power plant that was using it, asking for support.
i've been using virtuallydedicated.com, it costs you around 130$ for domain and hosting per year. it's a small company, but they're very reliable and friendly. you can tweak a java server setup endlessly, but to get up&amp;running quickly you can just create a setup similar to your testing environment. i use this to proxy domains through to a java service: &lt;VirtualHost *:80&gt; ServerAdmin your@email ServerName your-domain.com CustomLog /var/log/apache2/your-sitename.log combined &lt;Proxy *&gt; Order deny,allow Allow from all &lt;/Proxy&gt; ProxyPass / http://localhost:9999/ ProxyPassReverse / http://localhost:9999/ &lt;/VirtualHost&gt; save this as /etc/apache2/sites-available/your-domain.com then run a2ensite your-domain.com then service apache2 restart, done :) ps. this is for debian based systems which is all i ever use. the paths might be slightly different elsewhere. 
Yeah, they tend to screw up the UI every major release :) Especially on mac/linux. 
The directions seem very explicit. I suggest you start by making a Nodes class that will make up the leaves of your BST. A BST is just a Nodes Object that has Links to two other Nodes Object based on some comparison. Left is *less than* and right is *greater than*, so you can just use birthdays to make the comparison. What exactly are you confused about?
I just tested your code and I didn't see any lagging or jittering. I suspect you may be seeing lag as a result of another process running on your machine, and it is unrelated to the code you have here. Try running the same code on a different machine and see if you have a different result.
 ArrayList &lt;String&gt; list_of_bday_names = new ArrayList&lt;String&gt;();
&gt;But most people download the default distributions and/or add countless plugins. You would think that if the Eclipse Foundation releases default distributions they are lat least stable.
O ok.! Ill give it another shot. Thanks for testing it for me.
I think with a lot of languages like perl, it's useful to be able to read and understand even if you don't need to code in them. Java, will disappear one day, but probably after you've past retirement age.
When you have a very large project and a very large team, it greatly helps collaboration.
I have used eclipse or eclipse based programs for like 4+ years, I can't ever remember a time where it has crashed. Its so fucking modular so like even if the entire thing dies it still fails gracefully with an error message or so
[](/lunabrows)And I'll be right there waiting for it. With open arms and an open Android project.
At my job we chose to use the spring cache abstraction annotations to access redis because we figured that it would insulate us if we chose to switch to a different cache implementation. We are now going to switch off of them onto using jedis directly. Our biggest issue with the annotations is that they did not, as promised, reduce or simplify our application logic. We had ending up having to make new interfaces that support the various cache options. We had to write the support code to warm the cache and the evict it as needed. We had to put error handling around the cache blocks to correctly stay up if our cache server was down or unreachable. In the end, the cache abstraction reduced our flexibility by a great deal without actually saving us much code or headache at all. What I mean about the error handling is we had to put try catch blocks around each one of our calls that attempts to hit the cache. If there was an exception thrown in the block we retry using the interface method that bypasses the cache. This way if our redis instance is down our servers are still responding. Also, redis allow read only slaves to easily scale reads horizontally. Spring cache abstraction has no ability to use this feature at all. These annotations drop you to the lowest common denominator of cache which is nearly worthless. It's not hard to write code to interface with your cache. What's hard is error handling and evicting from the cache which these annotations don't help with at all.
Well this is not a direct answer...but it's more important you have data structures memorized/deeply understood before you get into algorithms. just my .02
Well thank you for the advice, regardless. :)
Yeah... just chrome, and as you probably know chrome updates itself constantly. I liked the theme and have seen some posts over the last few days. 
Computer Science (hopefully, depends on your college) encompasses a lot of mathematic thinking. Gödel Escher Bach captures one aspect of this thinking (recursion, oh and a few more) and puts it under the magnifying glass of Art, Music, Biology, Zen-Buddhism, etc.
I'm not sure if memorizing an algorithm has any value. Strive to understand how they're crafted, and how they function. Some minority of engineering jobs require constant complex math and solid algorithm creation but most jobs in the real world consist of very few use cases for complex algorithms. I've done primarily games and web engineering for more than a decade and I've written complex code every few weeks, perhaps less. Any easily recognizable algorithm (like a Djikstra, for instance) I will google for details. If you can write the code by reading the formulas on wikipedia, you're on the right path. The key is being able to craft an algorithm for your purposes in short order, and memorizing won't help with that much. Learning more about recursion is probably a better goal for a new programmer than memorizing some named algorithm. The most recent algorithm I wrote was a bezier curve tool. It was a fun exercise and relatively easy, just read the formulas from wikipedia and away you go. Give it a try.
Will keep that in mind. Thanks a bunch!
I package tomcat in an RPM along with my deployed applications. Tomcat is never the biggest part of that distribution :-) When I said "big ass app server" I wasn't necessarily referring to GlassFish, but I pretty much had WebSphere in mind.
You sure that is eclipse you are using? That shit crashes for me all day.
You don't need a management console to deploy wars, nor do you need to edit any XML files. You simply delete all default tomcat webapps, and dump your WAR in the webapps folder. Done. I'm of a mind that your application server doesn't need to bother with setting up data sources. That's something your application should take care of.
You have a container that makes jars special, but every jar must have a label called a manifest. Everything you put in a jar becomes invisible to the outside, unless you write that thing's name on the jar's label. Everything you put in a jar becomes blind to the outside, it can only see the things you list on the jar's label. But all this only works when your jars are inside the special container. 
If(need_algorithm){ String algorithm=google(problem); implement(algorithm); } This one is pretty important
Nr 1. Java Developer Nr 3 .Net developer Nr 12 Software developer Because we know that in Java and .Net you can only inflate balloons. Also. What the hell are the photos? Sounds to me like: "This is the output of a study. We can get no insight from it. Please, fill a page with this." 
&gt; What is an indexed image and how can I fix that? I know little about the things you're talking about / using, but "indexed image" strikes me to mean "an image with a palette instead of true color". True color can be modulated mathematically just fine, but you can't do that if every pixel just refers to an entry in a color table, which might be what's going on here.
This is the correct answer, the vast majority of algorithms you will need have already been implemented and are readily available. Always search before doing something yourself
I'll look into this. It seems to look alright on all of my tablets/pcs and smartphones, but I'll see if anything is up. The theme is a free, responsive ghost-theme based on another free theme. It can be found on Github https://github.com/Qkyrie/Taharial I'm slowly adding my recents posts to this reddit page, I'm trying to create a blogpost every other week :)
You're correct that installing GF and Tomcat are as easy as unzipping an archive. However, I bet you will modify some configurations of GF or Tomcat before putting it on production environment. In GF, I need to use command-line tool `asadmin` to execute commands and restart; in Tomcat, I can copy the `server.xml` file which is prepared beforehand. Imagine that when you need to create a few more GF or Tomcat instances, preparing Tomcat is much faster. Maybe I can use `backup-domain` and `restore-domain` provided by `asadmin` to speedup the preparation of GF? I don't know, I haven't tried it before.
I tried both WildFly and JBoss, they worked fine until I need to use JAX-RS to handle requests with multipart entities in request body. I tried to disable their built-in JAX-RS implementation and use Jersey in my application, I also tried to make use of RESTEasy (JAX-RS implementation in WildFly and JBoss), both way didn't work for me. If I remember correctly, the application server always throw exceptions related to dependencies on WELD.
Why would it not help? a quick md5 of the 2 files and compare the sums seems like the cleanest way to do this.
no, it was something else with more details for every subject. but thanks anyway!
Failed to compile my valid Java 8 program, which the ``javac`` and IDEA manage without warning or error.
This is my problem. I do JavaEE, so, I rely on other plugins. The Eclipse plugin system is powerful but also makes Eclipse very, very fragile. A simple plugin may render a whole installation useless. 
One: don't. Adds in applications are generally what gets me to stop using them. Can't stand the thought of actually putting them in my own apps.
Of course it is less readable. You have to pause to evaluate possible outcomes. Writing it "open" instead of one line makes it easier to determine what it's supposed to do for whomever is figuring out your code. I'm not saying that this particular case is a big issue, but obfuscating intent in general is a bad practice. 
Even if it is in Bugzilla it just sits there and rots: https://bugs.eclipse.org/bugs/show_bug.cgi?id=41431 An 11 year old UI/UX bug that is not fixed yet. Yes Eclipse. You are not that clean, sweet, an elegant IDE you once were. You are now a wart-ridden dying piece of crap.
Yes, it's interesting: When I think about doing that, I see the technical side of it, I see what would really happen, I think about "click or don't, it's optional" idea, and about the fun of implementing it. But when I think about using such an app by someone else myself, there's just the will to Google for an alternative.
Do you know about [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller)?
I've learned about MVC but I've never been taught how to use it in an application.
(But preferably don't unless you have a really good reason.)
Stacks are for wusses. ~~I want all exceptions to be on one line.~~ /sarcasm I'm sure in some cases this is useful in improving performance, however the HotSpot JVM requirement is a turn off for me. Edit: Looks like exception stack traces still lists correct line of code.
&gt; Stacks are for wusses. I want all exceptions to be on one line. It does not inline source code. It just forces the JIT to inline the method unconditionally. Stack traces are unaffected. &gt; I'm sure in some cases this is useful in improving performance, however the HotSpot JVM requirement is a turn off for me. What JVM do you use ?
I don't have the time to look at it through a US proxy, so I'm going to believe you. AFAIR, recent years have seen a number of lawsuits against Microsoft in Europe and the US about the custom of persuading OEMs to bundle MS software with all offers (OEMs who'd fall out of line would be "punished" by higher prices). Perhaps the lawsuits have been more successful in quelling the anti-competitive behavior in Europe than in the US?
&gt;Perhaps the lawsuits have been more successful in quelling the anti-competitive behavior in Europe than in the US? I think that's probably accurate. I'm *fairly* sure this is what happened with Dell ~5 years ago when they were offering cheaper laptops/desktops with Ubuntu. I remember reading about it on Slashdot... hehe. If I recall correctly, they had to bring the prices up to line with their Windows machines or face the pricing wrath of Microsoft, meaning any advantage the Linux PCs had over the Windows PCs was completely gone.
Sucks to be in the US then. But of course, sucks to be in the EU, too, because hardware here is usually more expensive.
WebSphere is pretty much the only big ass app server left, and even IBM is working on a replacement called Liberty. Liberty is currently almost full profile and below 100MB. All other servers are below 200MB, I think WebLogic is the second largest at 180MB orso, JBoss at 120MB etc. JoNAS is another big one, but this is because they ship alternatives of pretty much everyhing.
Open swing framework is cool but I'm not sure what activity is there now: http://oswing.sourceforge.net/ Google around for swing frameworks. There are several. 
Well, you can convince the compiler not to, if you make sure it isn't a compile-time constant. Please remember that if you do so, you can no longer use them in a select / case statement. Possible options include public static final int LOLNOPE = (null=null) ? 1337 : 0; public static final int NOPEHARD = Integer.valueOf(1337).toIntValue(); The real question is why you want this.. I can only imagine that you've static-final'ed some sort of constant which you might want to change in later version of your library (or someone else's library). Java specs specifically discourage you to use static final for these kind of constants. See 13.4.9. http://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.4.9 
So it would still show the line of the code in the inlined method even though it doesn't put the method call on the stack?
(not 100% sure) Exceptions are thrown with the "right" stack trace, even after inlining, because they use an exception table with all info. Sampling is different, I think you are right.
Please read the [reddit rules](http://www.reddit.com/rules/), in particular the first one "[don't spam](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F)". 
Please read the [reddit rules](http://www.reddit.com/rules/), in particular the first one "[don't spam](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F)". 
I'm with you. Bugzilla is not a clean overview of issues, but it's like a swamp of collection of issues, some in plain sight, some pretty much unreachable and rotting away. There are so many sub-projects and sub-sub-projects that it's really hard to have a discussion about something. There are hundreds of different mailing lists and hundres of corresponding forums. Do I post on the forum or on the list? What's the difference anyway? And why are even those for top projects (e.g. WTP) desolate wastelands?
Is that from some movie?
I've worked in a very big Swing application and sometimes triggering actions and updating the UI can get very complicated. We developed an opensource library to deal with all these problems, it helps us separate app-logic and from the app-logic notify changes using an event like approach. Think of it as the JMS for the stand alone apps. You can find more information in: http://www.asmatron.org ask me if you need any help
Java, Scala, Haskell make little to no sense in HFT.
And so which languages do make sense in HFT? C and C++?
Yes, or more exotic hardware, though I think growth there has slowed in the last year or two. Everywhere you see other languages, people are talking about algo trading, not HFT. 
Use a static method to return a field value...
http://docs.oracle.com/javase/7/docs/api/java/awt/image/IndexColorModel.html &gt; a ColorModel class that works with pixel values consisting of a single sample that is an index into a fixed colormap Yep. Palette image. (Can't help you with the problem.)
 Example for what?
I don't think anyone agrees with me, but I really like JCreator. The biggest problem with it is that it hasn't been updated in a long time. You might consider looking into NetBeans or Eclipse. Those are pretty popular.
Like /u/Parthros, I used to love JCreator some years ago. Small, quick to load, uncomplicated. If you're just learning the basics, you might enjoy something along those lines for simplicity. But the big three offer much more functionality: NetBeans (by the owners of Java), Eclipse (widely used for many different programming languages) and IntelliJ (growing in popularity and the basis of Android Studio). Just given them all a look and decide for yourself which one feels right to you. Oh, and if you can find out which IDE your teacher will be using in your classes, then make your life easy and simply pick that.
Looks like stack traces are still correct: c:\zTest\target&gt;c:\JavaDev\jdk1.7.0_55\bin\java.exe -XX:CompileCommandFile=hotspot_compiler -cp zTest-1.0.0-SNAPSHOT.jar com.example.Main CompilerOracle: inline com/example/Main.testMethod ()V testMethod java.lang.IllegalStateException: Test at com.example.Main.testMethod(Main.java:20) at com.example.Main.main(Main.java:10) Are you the maintainer of this page? There is a typo in the JVM option
You shouldn't really commit to an IDE if that is what you are considering. At my uni we had to use Eclipse as part of the exercises and I used Netbeans for my personal project so I could learn these bigger ones pretty well. Always try to expand your knowledge and try to work with multiple IDE.
I liked JCreator too when I started programming in Java. It's quick and small. 
Your first line will be optimized out to a static value, since null=null is an invariant. Your second line might work... I'd be interested to see if it worked. 
Teacher will probably be using netbeans or eclipse.
That's true up to a point. Eventually, though, you have to stop going for breadth and take up depth. I've gotten so familiar with my IDE that it's like learning to program again when I have to use some shitty IDE. And it's not that I *can't* do it, it's just that my muscle memory has changed. Instead of manually writing getters and setters on a javabean object, for example, I just bust out a hotkey. Instead of doing a tricky search/replace, I can do structural searches. Again, you could do all those by hand or fumble with your IDE to figure out the way they want you to do it, or you can pick one and learn it really well. IntelliJ IDEA + [Key Promoter](http://plugins.jetbrains.com/plugin/1003?pr=idea&amp;showAllUpdates=true) helped me get to that level of efficiency. 
Did you just tell me to go fuck myself?
Have you tried [Netbeans Plattform](https://netbeans.org/features/platform/) ?? 
Have you ever looked at MVP. I have used this with google GWT and when I was working on a project with swing I found this. https://code.google.com/p/pennychecker-presenter/ It provides a framework with examples of using swing with MVP and makes page transitions easy. I am looking at writing a tutorial on it but haven't got round to it yet. 
Use whatever IDE your professor/instructor/TA uses. That way they will easily be able to help you when you run into problems. You can therefore focus on solving problems in Java rather than fiddling with the IDE. Once you've become somewhat proficient in Java, you can begin to try different IDEs and see what you like. You probably won't need 1/100 of the features any of these IDEs offer, so it's a waste of time to worry about it before you become comfortable with Java. 
IntelliJ IDEA. There's no really any other choice. NetBeans feels like it's made for toddlers, Eclipse is slow, ugly and just uncomfortable to use. You simply can't beat refactoring capabilities and framework support of IDEA Ultimate if you're ready to pay some buck for a solid product. On a side note, if one were to compare IDEA Community Edition vs Eclipse for development of some advanced Java projects, Eclipse would turn out to be more feature full. IDEA CE doesn't really have all those conveniences one would expect from IDE when programming using actually useful frameworks like Spring, EE stack, Play etc. But for basic beginner projects it works just fine. Also JetBrains provide 30-day trial of Ultimate version, so when you are ready to venture into some more advanced stuff, you can install it and give it a try. A word of caution: when you get used to all this splendor, most other IDEs would appear as inferior. Well, maybe with an exception of Visual Studio, that shit is really solid, maybe not as fancy as IDEA, but it's really good.
Thanks a lot. I'm an apprentice just now but I want to pursue this as a hobby too. 
&gt; NetBeans feels like it's made for toddlers Care to elaborate? Given the choice I'd certainly pick Idea over Netbeans, but Netbeans is no slouch, plus given Oracle's backing it supported EE 7 stuff long before Idea - not to mention it's entirely free, vs Idea Community Edition's restriction on Spring/EE stuff.
You know, I always thought mentions would alert the user. Apparently they don't...
Fantastic answer. I was going to say use whatever they're more comfortable with, but this is probably better. 
I don't know why you're putting quotation marks around 'best' considering no one actually used the word except you. I clearly asked - super simply, straightforwardly - which the community would recommend based on A) the fact that I was going to be doing my first semester of it, and B) the fact that I liked the way Wing IDE worked.
Is there a way to combine the TaskExecutorDistributor functionality with the PriorityScheduledExecutor functionality? What I mean is have an executor that executes tasks based on priority and not running two hash codes simultaneously. Thanks 
&gt; I don't know why you're putting quotation marks around 'best' considering no one actually used the word except you. Because you used it in the submission's title. It's an eternal flamewar between IDEs, and the question is posed over and over again. Some people like Netbeans, some like Eclipse and some like IDEA. There is no universally best. There's also no best for you that the internet can recommend, you have to discover that for yourself. Besides that your university might have requirements of its own. edit: best for you -&gt; ..that the internet can recommend.
A bit off topic, but maybe you should consider switching to Java FX. Oracle has kind of dropped Swing in favor of Java FX. I can't tell you if Java FX would make your application cleaner since I have not used it. However, newer frameworks are usually better designed and help you in keeping things cleaner.
Netbeans and Eclipse are similar, but Netbeans seems to take much less resources.
Only if you have gold.
you forgot to classify every other IDE except the one that you use as worthless...
The best advice I can offer is stay the hell away from Jdeveloper. 
I probably use Eclipse about 9 to 10 hours a day some 6 to 7 days a week (yes, I know, need life, don't ask). Eclipse occasionally does run out of memory, and I need to restart it (which can be hard at that point, usually I have to kill it). Workstation corruption is rare, but I've had 2 crashes in the last few months after which Eclipse wouldn't startup again but kept hanging at the splash screen (some extra harsh cleaning option next to the regular -clean solved this, but I lost some workspace settings after that). Eclipse is infamous for spitting out completely random error message at completely random times. Most people don't even notice these anymore and click 'm away as if they were flies that you wave away. .metadata/.log an most every Eclipse install, even those that seem to run fairly well, is chockfull of the weirdest exceptions you can think of. You'll find stuff like: org.eclipse.jface.text.BadLocationException at org.eclipse.jface.text.AbstractDocument.addPosition(AbstractDocument.java:355) at org.eclipse.core.internal.filebuffers.SynchronizableDocument.addPosition(SynchronizableDocument.java:236) at org.eclipse.jdt.internal.ui.javaeditor.SemanticHighlightingPresenter.updatePresentation(SemanticHighlightingPresenter.java:414) at org.eclipse.jdt.internal.ui.javaeditor.SemanticHighlightingPresenter$1.run(SemanticHighlightingPresenter.java:347) and java.lang.NullPointerException at org.eclipse.jst.common.project.facet.core.libprov.internal.LibraryProviderFrameworkImpl.getCurrentProvider(LibraryProviderFrameworkImpl.java:144) at org.eclipse.jst.common.project.facet.core.libprov.LibraryProviderFramework.getCurrentProvider(LibraryProviderFramework.java:81) at org.eclipse.jst.common.project.facet.core.libprov.user.UserLibraryProviderInstallOperationConfig.reset(UserLibraryProviderInstallOperationConfig.java:280) at org.eclipse.jst.common.project.facet.core.libprov.user.UserLibraryProviderInstallOperationConfig.init(UserLibraryProviderInstallOperationConfig.java:153) at org.eclipse.jst.j2ee.internal.common.classpath.WtpUserLibraryProviderInstallOperationConfig.init(WtpUserLibraryProviderInstallOperationConfig.java:64) and org.eclipse.wst.sse.core.internal.util.Assert$AssertionFailedException: release was requested on a model that was not being managed at org.eclipse.wst.sse.core.internal.util.Assert.isNotNull(Assert.java:124) at org.eclipse.wst.sse.core.internal.model.ModelManagerImpl.releaseFromEdit(ModelManagerImpl.java:1808) at org.eclipse.wst.sse.core.internal.model.ModelManagerImpl.releaseFromEdit(ModelManagerImpl.java:1770) at org.eclipse.wst.sse.core.internal.model.AbstractStructuredModel.releaseFromEdit(AbstractStructuredModel.java:994) at org.eclipse.wst.xml.core.internal.document.DOMModelImpl.releaseFromEdit(DOMModelImpl.java:870) and java.lang.ClassCastException: org.eclipse.jdt.internal.ui.javaeditor.JarEntryEditorInput cannot be cast to org.eclipse.ui.IFileEditorInput at org.eclipse.jst.pagedesigner.editors.HTMLEditor.getPropertySheetPage(HTMLEditor.java:970) at org.eclipse.jst.pagedesigner.editors.HTMLEditor.getAdapter(HTMLEditor.java:668) at org.eclipse.ui.internal.views.ViewsPlugin.getAdapter(ViewsPlugin.java:103) at org.eclipse.ui.views.properties.PropertySheet.doCreatePage(PropertySheet.java:207) at org.eclipse.ui.part.PageBookView.createPage(PageBookView.java:412) at org.eclipse.ui.part.PageBookView.partActivated(PageBookView.java:753) at org.eclipse.ui.views.properties.PropertySheet.partActivated(PropertySheet.java:325) And stuff like that goes on and on and on... For a long time, upgrading Eclipse or your OS always resulted in XULRunner crashes. It took a long time before a specific combination of Eclipse and OS was stable enough. And there are still problems like that. Eclipse kepler crashes all the time on Ubuntu 13.10 and 14.04, needing a long list of workarounds to prevent those (and where not all workarounds work for all people). There are also sudden freezes, and when working with WTP (server tooling) a bit too often Eclipse just doesn't deploy some files. You'll need to go through a ceremony of closing and re-opening your projects, rebuilding your projects, removing projects from server, cleaning server, adding projects, doing full publish and then to be sure repeat some permutations of that in order to get Eclipse/WTP to deploy correctly again. So yeah, I do still like Eclipse, but stability really is not its strong point.
On Ubuntu 14.04, titles of editors and views just disappear. Click on them and they are back. There's also some weirdness going on when stretching Eclipse over two monitors in combination with the menu on top of the screen (like on OS X). Eclipse and/or Ubuntu try to determine the best location for this menu. If you move a window around it normally follows the screen that has the largest part of the window on it. But with Luna and stretching over two monitors this algo seems to get stuck occasionally and the menu is just gone. Just some problems I discovered after ~10 minutes after installing it.
But they aren't worthless. They all serve as excellent bad examples of an IDE.
... with a third party library with restrictive licensing.
Why are you in /r/java if you don't like Java? Sincerely, ~~Richard Nixon~~
CE doesn't have restrictions in place, there's nothing stopping you using spring framework stuff in it, spring annotations all compile correctly. You just don't get the IDE's integration for spring. Example: CE will show an unused constructor when that constructor is only used from application.config
I like Sublime the most but it may not be the kind of thing you want, eclipse is great, netbeans of course is up there. Usually you would use whatever the course says to use. 
The only good thing about deploying in the occasional appserver with alternative implementations for everything (or alternative JVM) is that it will expose otherwise hard to find bugs. Like subtleties in XML handling that work fine on one implementation, but break horribly in another. Much fun.
Use whichever one you prefer. Whether that be vim, eclipse, etc.
sold out?
Learned something new today. I thought so too. 
cool beans. I tried on another machine and it worked fine. Thank you for your help.
awesome thank you. He did end up using it in another video. I wish he would have explained it but hey, no harm done. Thanks again!
Well, TIL.
If you're learning I wouldn't use an IDE at all for the first couple semesters. Go full command line and become a unix wizard for the first few courses, then switch to an IDE when you've got larger projects.
Slow.
For me eclim is the best options at the moment.
This days Eclipse is even more responsive than IDEA.
Can anyone confirm that it's any good? Worth my time?
yes. actually, if you want -- I can hook you up with the first half of the 200 lecture+problem course for free
200!? I'm checking this out
Hm. I may give it a try. I'd like to have a little bit of Java under my belt. I began learning the very basics a few years ago, but then went on to Python. I may come back to it though.
python is good for beginners. Java's better for other cases -- often since it is usually a bit faster than Python. Otherwise, most people use it since it has good library support, and it's the only native way to do Android. edit: if you made an account. PM me your username so I can send you the lectures.
Just assign the value in a static block. Decompilers will inline this (but not compilers) if you don't have a nontrivial static-block operation in higher in the class's source. If you are not the originator of the code you are compiling against, your only recourse (that I know of) is to use reflection or roll your own bytecode. Here are some examples that will not be inlined: public static final int INT; static {INT = 0;} public static final String STRING; static {STRING = "";} // the styles below I would actively discourage public static final int INT = (Integer) 0; // Might get the cast removed by a formatter public static final String STRING = "".toString(); // Unnecessarily ambiguous public static int INT() { return 0; } // Horrible naming and misusing methods As an interesting corollary to inline fields, local primitive variables marked final with a constant (similar to static final fields) will be inlined, but still have their value pushed to the stack (in the bytecode ignoring JIT). // EDIT: There is a way to compile against a foreign class file, without inlining. Mimic all of the fields / methods in your own class, of the same package and name. Compile against that, where your file follows one of the above methodologies. At runtime, when you have the original, it will use the GETSTATIC opcode and work as intended.
Lol. I subscribed a couple of semesters back when i was going thru my java courses. Thank the lord theyre done with. Stupidest, most unnecessarily verbose language out there. If your looking into doing work for desktop programs and not mainframes/android apps then java wont do much for u. Good luck writing any hacks/exploits in java. 
*Lowering* the optimization *level*. I would assume the OP's context is referring to static analysis that other compilers have, with varying degrees. A stack-overflow entry from a quick google had a link to [clang](http://www.freebsd.org/cgi/man.cgi?query=clang++&amp;sektion=1&amp;manpath=FreeBSD+9.0-RELEASE), with it's optimization levels denoted with -O0 through -O4.
Pick whatever tech you enjoy working with. I don't do a lot of android dev, but I personally find Java code easier to maintain. A whole class of bugs are caught compile time rather than runtime, and refactor tools are more powerful in static type languages. You should also think about depth rather than breadth. Look into algorithms courses, and implement them in whatever language suits you. Pick a project and do it in the language that best suits the project. Anything who tells you one language is the "best" is probably very biased.
I kind of just want to do what will benefit me the most. But, I also don't really have an interest in this web dev stuff. Soooo... I don't know. The thing is I need to make sure I actually learn a language first. And do some decent projects. I have trouble coming up with project ideas and being able to actually code them. It's a struggle. Self-teaching. I'll do algorithms courses eventually.
Well -- give the ktbyte CS00 course a try then. C++ and Java are the most popular languages by lines of code, and Java is a great deal easier than C++ to start: http://blog.ktbyte.com/2012/09/26/what-programming-language-should-you-learn/
Yeah. I might have to. Thanks.
seems like it, hopefully he puts up another coupon code.
I've been using ite since version 2.6 and am still on version 11. The community edition would be perfectly OK for someone learning Java in school. And it's free.
Try eclipse, idea and netbeans. All three are free downloads. Pick the one you like best. 
And the stuff it's lacking is unlikely to matter in a university setting at the under grad level.
Text editor. javac.
I actually agree with you. When you're just learning Java, or any language really, getting as close "to the metal" as possible is helpful. If you don't make all the mistakes and go through all the headaches that a good IDE negates you miss out on a world of learning about languages, operating systems, virtual machines, and environments that you'll never know would have enriched you as a developer.
You are right about the "always almost" part. Nevertheless, I'd rather have the option to inline methods than not. This can be useful in situations were you want to save method invocations that would have been called millions of times in a short period of time. For example, processing text. If you call a bunch of methods for each character parsed from an input, billions of method invocations would be used to process a 1 GB text file. Believe me, avoiding extra method calls in these cases can make quite a difference when it comes to performance. If you can't inline your methods, then the option you've left is to write code that is not very readable or reusable. It's a trade-off that people wouldn't have to make if the JVM supported method inlining. Edit: grammar
Inlining method calls in those situations will absolutely provide a huge performance boost. My main point is that the question of whether or not to inline a method call is not something for the application programmer to worry about. That's why we have the JIT compiler to do it for us when an optimization hot spot is detected. Having the inline annotation physically in the code is both clutter and a leaky abstraction. It's an implementation detail that the the JVM insulates you from. An inline keyword is necessary in a single compilation language like C++ that has to be fully optimized from the start to run on the bare metal, but the JVM and Java language have been specifically designed so that application programmers don't have to be concerned with those details. Focus on the performance of your data structures and algorithms, not the system on which they are run. That's what the JVM is for.
Even if so: Using it made me much faster as a programmer. *And* it's even teaching you Java from time to time.
I've used Eclipse from the beginning for over a year, then tried IntelliJ for a day, switched and never looked back. I have even been having considerable problems with Eclipse in the last half year at home, in the office, and a colleague in the office had the same problems, and I have never seen an article online about it. We just used vanilla Eclipse for Java with no plugins. We tried a reinstall, didn't help. I had to restart Eclipse about every 10 minutes (!) or it would show tons of non-existing compilation errors (though it would compile and run :P), my colleague closes certain source windows and reopens them to get Eclipse to behave properly again. Since I switched to IntelliJ, not only did I not have that considerable problem (though IntelliJ has its own small problems from time to time), but I could also start coding in Java 8 right away, got tons of "You better do this instead of that." support by the IDE, got (usually) just the right suggestions when I had started typing a word, etc. - it has enabled me a lot, and it's even considerably better looking (Typography/layout (Part of my job.) are things that are taught for a reason, there are objective rules behind it, and IJ does it a ton more right than Eclipse).
Netbeans hands down
I agree that as a developer, I should focus on the data structures and algorithms. But JIT, even though it works fine for the general cases, is not a magical solution for everything. If it were, you wouldn't see performance boosts after refactoring code to "save" method calls. Also, the author of this little library wouldn't have a reason to develop it in the first place.
only 35 ppl enrolled
the byte value 5 in this context refers to an ascii control character rather than a digit. To be a digit it would normally have to be ASCII value 48 through 57. Keep in mind that these are not equivalent... char a = '5'; char b = 5; 
Well, I was hoping that you could elaborate some more. But I suppose I'll just read the book.
I've tried Vim to write Java...It was very difficult to work with huge projects (a lot of modules, couple of frameworks etc.)
Because writing hacks/exploits is a big factor in every programmers life. Desktop programs nope. Web/mobile/distributed clients &amp; teaching people computer science yeah. 
I'm trying to learn Java at the moment. The biggest issue I have is, I understand the concepts and how it works, I just can't seem to remember how to write it out into useful code. I'll give this site a try. Thanks.
Agreed. First half year using Java - stick with a basic text editor. Head First Java recommends the same approach, and I did the same thing when I first learned C and C++.
&gt; A perfect course for beginners to intermediate ones to learn Java in the most easiest way ever. Shouldn't you learn to use basic grammar in the headline of a technical course?
You should put your reddit username on your resume. Sincerely, ~~Richard Nixon~~
Thanks, I appreciate it!
Besides the fact you want to learn Java this sounds like a couple of minutes work in Excel.
Try it with JavaFX instead which is the newer UI framework. There are many tutorials out there. You could try Netbeans which provides a lot of startup wizards to give you some code to study. 
Cool, I'll look into JavaFX! Cheers
FX is nice, but somehow unpopular within Java devs.
What would you recommend? 
I assume Silco94 would tell you to use Swing instead, which was for the longest time the de-facto standard UI kit and kinda still is. Both JavaFX and Swing are "built-in", they are not libraries that you have to do an extra download for.
Aight, fair enough. Dunno if you've actually read my post but if you have.. Would you mind giving me some input on which part would be easiest to start with? Should i design the graphical interface using swing first or build the back-end layer to begin with?
Its a straightforward way, no doubt, but it is wasteful in every case that there is a difference prior to the very end of the file, since you would have to read the entire file to get the checksum. Maybe you could compare checksums so far on each read, that would make significant improvement.
I'd strictly follow the requirement chain, because this ensures that you will not build anything that you don't need and not anything that is unfit for the requirements. Think of the end result first, then what's needed to get there, and so forth, until you are at the beginning of the chain of events and have decided everything. Whether to start with the GUI or with the data is a question of mindset and experience here, I'd say. E.g. you already know that you need columns of numbers. But who knows - while programming data/logic you might realize that a different GUI approach than the one you described in the post would be much better. I'd say, don't think about the GUI at all before you have completely implemented the data and logic. That's the part that definitely needs to be done, and it's conceptually entirely defined. The GUI's "shape" is less strictly defined, might even mutate while you implement the data/logic and have more ideas/demands. Once you have that done, the next question wouldn't necessarily be: "GUI?" But rather "Source of input, target of output?" The answer could well be a manual or automatic import/export using files, database, or even network. If you decide to let the program run entirely based on a non-gui data source, you realize that your GUI (if any at all) needs to look a lot different. And if you want to give the user options regarding data source, again the GUI would be different. If you'd have started programming the GUI first and then pondered the details of the input / data / calculations / output, you could end up changing the GUI several times, with the already existing GUI in the way, making changes harder. Also, you're prone to designing your data and logic in a way that is "modulated" by GUI-thoughts. If you end up changing your GUI plans a few times, that could feed back into the data/logic design, leaving an overall layer of dirt all over your code. So, just completely implement the data structures and the logic that works on the data. The kind of application you have in mind lends itself to that. The opposite extreme would e.g. be a game. Btw., when you eventually get to the UI, don't think "the UI needs to have XYZ", but "one of the screens needs to have XYZ". The way you program the UI with that mindset will make it easier later to actually implement other screens, e.g. to split the application into the first and second part instead of having everything on one screen (though so far I think both belong on one). I wrote a short "multiple screen contents in Java" [comment](http://www.reddit.com/r/javahelp/comments/28a01l/how_are_multiple_viewsscreens_handled/) a few days ago. 
Well there's a ton of Swing out there. But going forward JavaFX is the way to go.
First, getting a feel for big-O is one of the most important things to first learn. Then, it will be tree and graph algorithms.
Yeah but is not it going to stay "unpopular" forever, give it a couple years, like any other project in riding and it will gain it traction.
No, start using JavaFx, Swing is a nightmare.
I can see the case for how things can get complex, but honestly it doesn't look more complex than things can get otherwise. I had no surprises in following the output of the example.
Read the text in the links.
Thanks! Got it. Appreciate this also.
Which will be a few more minutes of work in Excel. I can't think of any further functionality that Excel doesn't already provide. As a Java developer, spreadsheets are very tough to beat when you're fighting on their turf. 
I was going to do it as a webapp at first but as I said in my OP-post that's not an option in this case sadly. Otherwise I'd already have had the majority of the app done. :) edit: fix 
Please read the [reddit rules](http://www.reddit.com/rules/), in particular the first one "[don't spam](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F)". 
At the age of 39 - going back to school full time starting in fall. Going for the exact same thing. GL to you!
I'm late. It sold out. 
In my opinion, Eclipse is the best IDE. You should give it a try. 
I want to learn Java and figured i might as well do something productive while doing so. 
Very well nuanced and well written! I would still say that default methods were a bad design decision, as I think if you sum the benefits with the pitfalls you will get a largely negative result. (People are going to misunderstand and misuse them more than its going to save more experienced developers time)
sold out :( this makes me sad. If you can get more coupon codes, that would be great!
You can replace the for loop with: &gt; return java.util.Arrays.equals(dataRAWa, dataRAWb); 
&gt; People are going to misunderstand and misuse them more than its going to save more experienced developers time People can shoot themselves on their feet. Let's make them wear huge iron shoes so they won't hurt themselves.
By "restrictive licensing" I mean that the license is revocable and the free version limits you to 100k records.
I would but it's his branch within the company that needs this software. They have certain rules as of how to handle company data(the data is suppose to be saved afterwards) as it's all classified n stuff(I only know the half of it..). I'm just glad they've given me the opportunity. Obviously it's nothing important of that sort as they give me a novice the job but still. I'd rather do it properly. 
http://www.heise.de/newsticker/meldung/Project-Panama-soll-Verbindung-zwischen-JVM-und-nativen-APIs-herstellen-2230757.html
So the point of this article is that... people don't really understand polymorphism? I think that, if you are actually having a problem with ideas like this, you've got bigger problems than a new language feature. That said. I agree that convoluted inheritance can be a bad thing. This was true long before default methods became a thing. I usually think long and hard before using the "extends" keyword.
Huh...the revocable concern hasn't come up before, but I see your point. I'll take that offline to see if can be changed. Regarding the 100k record per job limit in the free version, how would you recommend separating the free and premium versions? Thanks for your feedback so far. 
Ant: copy paste small snippets of XML with a vague understanding of what it is doing Maven: copy paste large snippets of XML with no ability to control what its doing Gradle: copy paste groovy-DSL with no idea what it is doing
Casting your `Graphics` object to another type will not in any way change its behaviour.
&gt;I do think the point of favoring composition over inheritance needs to be particually emphasized in the Java community. I still get strange looks from some team members on this point.
As a complete noob, how does saying use single inheritance come out as composition over inheritance?
You don't need to add any libraries. Android has it's own XML parsing built in. https://developer.android.com/training/basics/network-ops/xml.html 
Seriously, I'd love a mainstream c# clone on jvm .
No, but downcasting Graphics to Graphics2D will give you access its enhanced interface, allowing you to take advantage of Graphics2D capabilities, such as being able to render a Rectangle. g2d.draw(r1);
Agreed, especially if the use case is only for windows. The system integration is very solid. (Yes, of course mono can do some c# on other platforms, but not quite as well in my limited experience trying it).
Interesting. Ok. I'll go back to my C book. And then also do some Javascript on the side. Thanks.
There is no 'best IDE'.
What, no offers of cash or steam games? 
... and you want us to do this for free? I'm sorry that you have shit going on in your life. I really am. But, frankly, we all do. It doesn't get any better when you are out of school. Your kids will be sick, your wife will lose her job, your family will still be assholes. Your boss will be a dick, and deadlines will move up. There will always be tons of stress. Part of school is learning how to plow through this. You would probably have more luck posting something here if you had work to show and asked for help with a specific part of the problem. Just so you don't think I'm a total asshole, here is something to help: [How to write a a comparable interface](http://www.mkyong.com/java/java-object-sorting-example-comparable-and-comparator/) [Here is an example of a binary search tree in java](http://algs4.cs.princeton.edu/32bst/BST.java.html) You will have to rewrite some of the functions but it shouldn't be too hard Depending on how you implement your comparator your printall() method will be just a depth/breadth/ first search. get() will just be navigating to that date. listRange() is tricky but if you are clever with with how your implement printall() it shouldn't be too bad. Again it's just a tree walk Good luck, I hope life slows down for you. 
Is this an interview question?
To put it simply, you have the numbers required to calculate with the yellowBall object is (center point location and radius) which will give you all of the points that are contained within that circle. While I won't hand you an answer, I think that should be enough to get you moving in the right direction.
That's a "your school software sucks" question, not a Netbeans question. Is there a chance that your fileserver is really a FTP/SFTP server which can be accessed with a common file transfer utility like Filezilla? 
No offense mate, but looking at your comment history you had the exact same story two weeks ago with a different assignment. We are anxious about handing out answers to people because as (mostly) professional programmers we have all at one time or another had to work with someone who copy-pasted answers off the internet to scrape together a pass on their qualification and when they enter the workforce they are worse than useless, and it falls to us to pick up the slack. Perhaps you can plead with your school to take a leave or absence or something of the sort if life is making schoolwork impossible? There has to be a more honourable way forward than begging for someone to help you cheat.
What in the hell does this title even mean?
Just checking, but "jar" means jar files, and not some analogy, right? And containers are OSGi containers?
Package it into an executable JAR file and use Dropbox or your favourite public file sharing site to allow other people access to it. If I recall correctly an executable JAR will run when a user double-clicks on it by default (on Windows) as long as they have a Java JRE/JDK installed.
I can code like a pro, but honestly I don't know how to make a JAR. Is there an easy way via Eclipse to do so?
&gt;I can code like a pro &gt; I don't know how to make a JAR Pick one ;-) I've just dug out Eclipse Juno (I use IntelliJ IDEA professionally and at home- try it, it's amazing and there's a free Community Edition) and I can make an executable JAR by right clicking on the project and going Export, then choosing Java-&gt;JAR File and on the last page of the wizard, select a Main Class. This will put a META-INF/MANIFEST.MF file into the JAR which tells Java which class's main method to start executing. 
Better :) Keep doing that and you're good to go
I didn't know that function exists, so thanks for that! And I would probably have used it in this case, because I am not a hard performance fetishist, just like a Java programmer should be: The idea is to code easily and get things done and let the system worry. But what speaks against OP replacing the loop - Since it's already there. - with the Arrays call is that the latter does a few checks (if identical, if null, if equal size) that are not necessary at this point. Really, it's just an irrelevant detail. Your call makes for cleaner code. ... Good call (scnr)
no it's not. an answer with an explanation would be better. I understand how to detect two objects but not two images. Are you asking if I have the numbers required? Are you just talking about the position or the size of the image. Either, way, how does that matter? Do you need the entire code or something? Your response didn't help at all.
&gt; had the exact same story two weeks ago with a different assignment. Hm. I am almost sure that I have seen this exact assignment (e.g. "You must use a binary search tree. You can modify the one that comes with the textbook") in another post in the last days, probably a different subreddit. Google didn't help.
0o0o0o got it!. Thanks a bunch.
Does the class FireBullet have a reference to bullet? I don't see it being set, created or passed in anywhere.
By image do you mean a sprite? From my experience, you usually would have to create the bounds for your sprite. That means creating a Rectangle object that encapsulates your sprite, and then check if they intersect as you normally would on a rectangle.
You are asking for help and turn around and get snippy about the answer you received (which should be enough to answer your question). If you have the numbers, you should be able to program a function to handle the collision. It doesn't matter if it's rectangle, square, circular, triangular. If the area of the shape (it doesn't matter that it's an "image," you must treat it mathematically as a shape) intersects with the area of the other shape (i.e. their areas collide within some XYZ point) it is a collision. If you're choosing to use an image that happens to be circular and you know the size and location, you can use math to check this. This is why I said it should be enough. A lot of programming (regardless of language) is about data manipulation and mathematics. It seems you may have skipped the research portion of the task. Circle collision has plenty of results on a search. [Here](http://stackoverflow.com/questions/18704999/how-to-fix-circle-and-rectangle-overlap-in-collision-response/18790389#18790389) is just one result.
I'm not sure what that has to do with the answer you were given. It's Java, yes, but it's also math.
I believe so... Sorry ,I'm just starting out. but to my understanding when declaring an object the reference is in form: Rectangle bullet, r1, r11, r1; near the beginning of my program. The actual object bullet was created in keyListener. bullet = new Rectangle(); while r1, r11, and r2 were created in paintComponent. My thinking was to declare reference variables first so it can be used elsewhere. - Is that what you meant by firebullet reference bullet? - If not, what line was r1,r11, and r2 referenced on in Firebullet above because intersect() method worked fine for those objects. If you could, please copy the segment where r1 was referenced so I can have a clear visual of what I did differently/incorrect with bullet object versus r1 object. http://way2java.com/oops-concepts/reference-variables-anonymous-objects/
Ok. I had a question very similar to this one asked in an interview. If you want to learn, why the snarkiness '...thanks for not helping though.'
honestly, I'm not sure. When displaying things in JFrame I've used the graphics.draw or graphics.fill methods in paint or paintComponent. To display an image I create a new Image object, name it , and then draw the image to the JFrame. I haven't heard or covered sprites yet. I will do some reading on sprites and get back to you. Thank you for the assistance. 
apparently you can't detect images the same way you can drawn or filled things in paint method. I was told to use sprites. I wasn't getting snippy or whatever that means. Please don't jump to wild assumptions. responding with no and asking a follow up question isn't getting snippy or whatever. If i said yes you'd think that I understood which I didn't... and not asking a followup question seems pointless if all I responded with was "no, it didn't help". I was simply being honest and asking for further assistance. Sorry it came off the wrong way.
i didn't mean to send that. obviously it's java lol.
can you please elaborate or give an example?
the problem I can solve is determining if two rectangles or other objects collide. I don't know how to go one step further in seeing if two images collide. I'm reading up on sprites now hoping that helps but what do you mean reduce the problem? Reduce what exactly, I don't understand. Hope this doesn't sound rude. I don't understand why people are getting defensive when tell them i don't understand their response..
What I mean is: a) you know where your image is drawn and what size it has. b) You know how to check if two rectangles collide but not how two images do. c) combine the two things you know to solve the one you do not d) ??? e) profit!
I think you were hinting at is to draw a rectangle around my image and then detect the rectangle?? I believe that's what I need to do from what I've read thus far...
Please cut your code out of the post and link it in pastebin or gist.github.com or something similar. It makes it annoying to read.
I tried to interpret its source code, but it's too confusing (or I'm not awake enough yet). The docs say: &gt; If any thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks. If needed. Could mean that new threads will not be created right away on failure. Creating would bring a small time overhead. If they accept that overhead in that situation, they might also accept it off the bat, so maybe the answer is "They will not be created right away." - but that's nothing but a guess.
You’d be surprised about how many people (which call themselves “programmers”) have no idea of what casting actually does. Well, first you’d be surprised, then you’d be depressed.
Code pls
Yes, that is what I had in mind.
Is this correct? https://gist.github.com/anonymous/441837f1c4ca91060836
Interview questions often cover edge cases people don't normally tread.
I just don't understand why people jump to conclusions. If I'm asking questions, why would you assume I don't want to learn. That doesn't make sense to me, but everyone's entitled to their own opinion. I'm just not sure i understand your point nor do I understand how this is relevant. Thanks anyways though.
I guess I don't just understand why people randomly assume it's an interview question.. For example, I'll ask something like, "how to detect collision between two images in java" and people asked, is this an interview... I don't understand why anyone would have thought that. Is it customary to explicitly state that it's NOT for an interview? That just seems like over kill, but assuming it's an interview question seems absurd... I'm mainly asking because people seem reluctant to provide me with answers but I already have a job and not currently in class. I'm simply trying to learn something new and people are making it very difficult. I just want to know how to get straight forward answers from people. Very annoying when people say, "keep trying" or "you're almost there." or refuse to provide examples or elaborate on what they're talking about. This doesn't seem to occur in other areas except java and I can't figure out why!!
huh? no. I don't understand... This is reddit, not an interview.
Rectangle has a `contains` method that takes a `Point` which is a wrapper for an x and y coordinate. So I would suggest: if (r1.contains(new Point(xCoor, yCoor)) { System.out.println("Collision with yellow ball detected"); }
If data security is an issue, creating a 'dumb' webpage that does the calculations and presents the information in a way easily copied into the company secure system might be an idea. That way your page does not need to worry about data protection laws etc. 
Chances are you could end up working with a text editor and command line. When I did my degree we did the first year doing just that to learn the fundamentals, only really moving to IDE's when looking at more advanced work in 2nd/3rd/4th years. If you have the time spare, check out a site like javaranch.com, which has a bunch of beginner exercises starting from using a simple text editor and javac. For an actual IDE, Eclipse, Intellij, and NetBeans are up there at the top as most people have said, pick whichever one you fancy :) 
I think it's because that sounds like a Google interview question. Although how asking it on reddit is going to help I don't know. From my experience of interviewing for google you don't exactly get much time to check your phone. I'm more likely to ask if a question is he work than an interview. Have you tried asking on stack overflow? They tend to give good answers.
There is a Function type in jdk8, for those who were confused 
there is a Function interface, check this discussion on stackexchange [Reasons for removal of function types in Java 8](http://programmers.stackexchange.com/questions/182354/reasons-for-removal-of-function-types-in-java-8), and the mailings lists where the decision was taken - [Removal of function types ](http://mail.openjdk.java.net/pipermail/lambda-dev/2010-July/001781.html)
Yes, the API does not specify the strategy for how threads are spawned. It would be to narrow to do it there and would not have any purpose regarding the execution of tasks. So it is a implementation detail. In Java 8, the ThreadPoolExecutor implementation does spawn threads as required, but retains the core pool size (which is equal to the maximum pool size for a fixed thread pool).
No problem. Wish I could help you with your original question but image manipulation has never been one of my strong suites.
Thanks. I am learning JS from a Java background and although it looks similar to Java syntactically, the way JS approaches OOP is not intuitive for me. Objects are just key:value pairs which is simple, but doing any sort of inheritance feels like I'm using the language inappropriately. It seems like the new Ecmascript version 6 will add support for a more familiar (to us) [class structure](http://wiki.ecmascript.org/doku.php?id=harmony:classes). 
[The correct short name is "Java EE".](https://java.net/projects/javaee-spec/pages/JEE)
[The correct short name is "Java EE".](https://java.net/projects/javaee-spec/pages/JEE)
&gt; I'm using the language inappropriately. Check out [Classical Inheritance is Obsolete - How to Think in Prototypal OO](http://vimeo.com/69255635) If you ignore the OOP rhetoric, the methods used are solid.
Yeah I guess I just want to learn as much as I can. Would you recommend learning C, C++, Objective C in and particular order or...? 
Learn maybe an interpreted language? It's great for quick things (not just of course). Something like Ruby or Python?
From purely academic point of view I would say C and then C++. do Objective-C if you're interested in coding on Apple platforms
Very relevant and helpful talk. Thanks
Associates first. I will also grab the Oracle certs. Then evaluate from there if I want to push for the 4 year
If you want to learn a new paradigm, learn something functional. [Scala](http://www.scala-lang.org/) runs in the JVM and can share classes with Java - so you wouldn't be too far out of your current realm but the concepts are a bit different. (I've not done much with Scala, I am personally working on [Go](http://golang.org/) and [Haskell](http://www.haskell.org/haskellwiki/Haskell) right now).
Netbeans IDE 8.0, the package http://pastebin.com/KeDRdWhK here is the code, thanks so much!
Language? Depends on what you want to do. C/C++ if you want to do low-ish level development or understand internals and how things work under the hood. Scala if you want something modern that runs on JVM. But I say don't limit yourself to learning languages. How about learning Linux, and I mean learning it really well. Or low level x86-64 architecture, assembly, IO, etc. Or networking/TCP/IP/UDP/DNS/SSL/peer2peer? Or Databases/SQL/NoSQL? Or 3D Graphics? HTML/CSS/DOM/AJAX/HTML5? Or crypto? It doesn't matter which language you use, concepts will be similar. TCP/IP in Java is similar to TCP/IP in C. Even if you stay with Java, you can learn architecture and frameworks. Learn JavaEE. Learn Dependency Injection/Spring/Guice. Learn JUnit. Learn design patterns. Learn JPA. Learn Servlets/JSP/JSF/GWT/Vaadin. Learn Indexing/Searching frameworks. Learn JMS. Thing is, there are WAY too many things you could learn. Without a specific project or a specific goal or direction what you are trying to achieve or where are you going to specialize, you'll just get lost and lose motivation. My advice- create a hobby project (or join an open-source project you like), think what technologies/languages are needed to implement it, learn them. That way you'll see some tangible progress (good for motivation), and you'll be able to immediately apply your lessons so these lessons will stick.
Your error says: &gt; Exception in thread "AWT-EventQueue-0" java.lang.UnsupportedOperationException: Not supported yet. &gt; at Final$tempTextField.getText(Final.java:242) Your code says 241 private static String getText() { 242 throw new UnsupportedOperationException("Not supported yet."); &gt; What can I do to fix it? You could implement the method. The other one that throws the same error, too.
Techniques like Hamcrest exist to shore up deficiencies in the language. When the language evolves to cover its own deficiencies, libraries like this become moot. That said, I doubt these are going "extinct" anytime soon. There are a lot of Java 6/7 VMs running out there...
I agree with you. After learning java, I went to C, C#, Obj-C, Golang, and then Python. For most of my problems, Python would have been the fastest way to solve it. OO is great for OO problems but not so great for write it and throw away programs.
Byte Buddy is not using a compiler. I would know as I wrote Byte Buddy. A compiler is a computer program that transforms source code written in a programming language into another computer language. Byte Buddy does not take a programming language as its input but is a domain specific language which is itself expressed as Java byte code but it does not process its own description. Thus, from a scientific point of view, Byte Buddy would not qualify as a compiler. Code generation is ubiquitous in the Java space. There would be no Spring, no Hibernate, no mocking framework without it. However, I agree with your caution. You should only use code generation when dealing with types that you do not know at compiler time and you want to extend these types. Then code generation is your only option.
I would appreciate a code too!
try japanese or chinese. norwegian is supposed to be pretty easy
This bug is a big part of the reason why Ubuntu Trusty ships with Eclipse 3.8.1: https://bugs.eclipse.org/bugs/show_bug.cgi?id=420956 Last time I looked at upgrading (back in April) the fix was slated for Luna. *sigh*
http://pastebin.com/KeDRdWhK here you go!
You first question should be what do I want to build, not what language should I learn. So, what do you want to build?
This is a question for r/javahelp . Also, if you have problems like this, you should not try to learn swing. Stick to the basics first. Write command line programs, learn about loops, arrays, collections, io, etc...
Try this http://help.eclipse.org/juno/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Ftasks%2Ftasks-33.htm or http://viralpatel.net/blogs/create-jar-file-in-java-eclipse/ or better yet learn how to use maven/ant/gradle
I might be wrong, but I think you would index your column in your database table rather than in hibernate. E.g, if you use MySQL, then you'd use a mysql administration tool to go to your table and add an index on the column. 
All that effort/loss of functionality to save 14MB of RAM and 1.1s of startup time?
I disagree with the tendency of this article. I *agree* that String.format can more easily be translated because you can put the arguments right into the text instead of having to use several code snippets that you even have to reorder for other languages. As the article mentions, String.format is a lot slower than directly concatenating the elements. But also, you have to know the complex String format syntax by heart to call that kind of implementation "easier". Also, another downside: You have to memorize which %n is which argument, something that you don't have to do with normal concatenation. And I absolutely don't see any advantage in using StringUtils or Joiner over simple concatenation - there is almost no difference (which makes me wonder if I overlooked something), but both need an extra library. The tendency of this article is to motivate nonstandard means and extra libraries for ~~almost~~ no improvement whatsoever. Again, maybe I overlooked something in regards to StringUtils or Joiner, because you must have had your reasons to write about those like this - but the examples given just used a "," instead of a "+" - *that* is your reason to have to deliver an extra library? I think the article is leading people into the wrong directions for no reason at all. If I overlooked something, please correct me. Maybe you just need to adjust the line wrapping settings of your IDE. I use simple Strings in small cases and StringBuilder when it gets more complex.
Lukas Eder has to be among the most amazing people in the Java World. His articles are always top notch.
There is now a StringJoiner in Java for alternatives
You can use interfaces to separate specification from implementation. While other languages enforce this (e.g. PL/SQL, Ada), Java makes this an option. If that's why you're using "single inheritance", you may still be favouring composition over inheritance. On the other hand, if you're using multiple inheritance as in the contrived example of the post, then you're quite unlikely to be favouring composition over inheritance. I agree that the correlation is not really obvious.
So, essentially, you're saying that you'd prefer having tons of static utility methods in the JDK 8, rather than awesome things like [`Iterable.forEach()`](http://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html#forEach-java.util.function.Consumer-) or [`Map.computeIfAbsent()`](http://docs.oracle.com/javase/8/docs/api/java/util/Map.html#computeIfAbsent-K-java.util.function.Function-) - and maybe the first ever backwards-compatible JDBC API upgrade?
The title suggest only performance optimization, but only 2 of the 6 are fitting that. Copying the original title would elevate that problem. Its nice to know for people who are not aware, that you can actually tailor your own IDE. Its just Eclipse providing you with the most popular setups. Nowadays I doubt startup and heap plays a huge role, since you have several GB of RAM and never shut down your IDE, but as said, its always nice to see somebody prove his statement with some solid numbers.
I'm using maven for some java-ee projects and it's really nice but yeah...I don't really know *how* it works and my needs are fairly simple at the moment. Not having to download or version control 3rd party libraries is awesome.
Hm good stuff, thanks for the info! http://docs.oracle.com/javase/8/docs/api/java/util/StringJoiner.html I'm in the lucky position to work with Java 8.
To be fair, that's with a tiny workspace of three projects. The other case of 11 is more accurate. Heck, there are times I have 20 projects in my workspace. Then the memory difference becomes non-negligible. 
Great advice, listen to this guy.
Hey, i'm the author! It's definitely not worth the pain of reinstalling if you work on small codebases. However, with big workspaces, the smaller heap makes everything snappier and more enjoyable. Of course, some people will still choose functionnality over performance, and that's totally okay. 
Assuming that you don't want to use Xamarin to develop Android and iOS apps using C#, head first Java is usually highly recommended. I personally lean towards Xamarin, though (I've heard that mono can accomplish the same thing, though I'm not sure how well.).
I don't use hibernate search. Why we use it? 
quite all right. I believe I've found my answer on stack overflow. Thanks again for your help!
Only got a couple of menu items on there at the moment. [Imgur](http://i.imgur.com/Ysb15tp.png) 
Sorry to be late to the party, but from where do you get the "almost 2x more memory"? Empty C# object on 64-bit platform takes 12 bytes. Googling for the same in Java, according to [this](http://btoddb-java-sizing.blogspot.com/), it seems that empty Java object takes 16 bytes. Simple, quick and dirty program to test the memory allocation in C#: const int max = 1000000; GC.WaitForFullGCComplete(); var start = GC.GetTotalMemory(true); Console.WriteLine("Memory use: {0}", start); var list = new List&lt;object&gt;(max); GC.WaitForFullGCComplete(); var listCreated = GC.GetTotalMemory(true); Console.WriteLine("List created: {0}, increase: {1}", listCreated, listCreated - start); for (int i = 0; i &lt; max; i++) list.Add(new object()); GC.WaitForFullGCComplete(); var totalMemory = GC.GetTotalMemory(true); var increase = totalMemory - listCreated; Console.WriteLine("List filled: {0}, increase: {1}, per-object: {2}", totalMemory, increase, increase / max); Console.ReadKey(); //so GC wouldn't collect before we've seen the result foreach (var o in list) Console.Write(o.GetHashCode()); Console.ReadKey(); 
Sorry if I sound like an idiot, which method do I implement?
For question 1, its hard to do unless you use accessor methods for the variable or override Object's toString() method to do what you want (or blatantly violate encapsulation). For the second question, if you know EXACTLY that certain numbers will be returned by a randomizer, I would use a switch statement, or if the randomizer returns numbers within a range, a sequence of if statements would suffice. Hopefully I am catching your drift on the second question. 
Well. There are several methods that don't have a proper body at the end of the code you posted. But in two of them, you throw the UnsupportedOperationException to say that the feature isn't implemented yet, in the others (where you kinda should, too), you don't. If you now remove the two "throws" statements, your code will not have the Exception any longer. It might not do what you want, but at least it runs again.
http://pastebin.com/5Br9g46D new error. Also I'd like to apologize, I haven't coded in a few weeks and am not doing it from home so I'm trying to get focused and I feel like I'm asking stupid questions X: really appreciate the help though!
yea its more of a range and so i was thinking of doing a sequence of if statements. But then I gotta write a bunch of if statements since the whole game is basically based off this kind of function
System.out.println("text") outputs the String literal "text". If you instead do System.out.println(myString), it will output the content of the String object "myString" (or "null" if the variable does not point to an instance). So, do you want a number that is either 0 or 20 or 40 ...? That would simply be "(int) (Math.random() * 5) * 20". If you want a number from 0 to incl. 100, it's "(int) (Math.random() * 101)". If you want a random number from 0 to excl. 20 that starts at 0 or 20 or 40 ..., that would be "((int) (Math.random() * 5) * 20) + ((int) (Math.random() * 20)". It seems that you're creating something like a ChooseYourOwnAdventure game. In case you'll eventually get more sophisticated with the implementation of it, I wrote a [comment](http://www.reddit.com/r/learnprogramming/comments/25b66v/java_c_what_would_be_the_best_way_to_display_text/chs80gb) that describes a good way to approach this. It's currently probably over your head.
The best one for beginners in my opinion is "Android Programming: The Big Nerd Ranch" by Brian Hardy and Bill Philips. The whole book is a big tutorial that highlight the most basic yet most useful features to develop apps with the android sdk. 
Knowning programming language is only 5% of success. Good programmers should have also at least basic knowledge of operating systems, networks protocols, databases, algorithms and few more. Than choose to know either Java EE or Spring or Android SDK or Swing or something other depending on what is most interesting to you. 
look into .toString() method and write your own for your classes. System.out.println(13); and System.out.println("Hello " + character.toString() ); are both valid assuming character has a valid toString() method and has been declared.
Well, Xamarin doesn't have any books to learn development from (expect one from packt publishing but according to people it is light in content and will only scratch the surface) while there Xamarin university but $2000 is pretty steep for me. Will check head first but I'm concerned that the book is old and use java 5 while java 8 SE is out. 
Thanks I like project driven books and I will check that out.
Yeah, as far as I'm aware there's only AWT bindings for a tray icon/popup menu that works in tangent with Swing - and even then, it doesn't look that good on Windows. There's nothing you can do about it I'm afraid with the standard libraries; SWT will let you place a tray icon that has a native popup menu, however. I think it looks a little better on OS X and GTK, but don't count me on that.
If you want to get a different perspective on programming then learn a functional language. [Clojure](http://clojure.org/rationale) is a good example of a practical FP language that runs on the JVM. What makes modern functional languages interesting is their focus on immutability. When you work with an imperative language, like Java, changes to data are made in place and the existing state is destroyed in the process. This makes it very difficult to reason about concurrency and parallelism. It also makes it difficult to reason about large code bases as you can never be sure what might be referencing a data structure that's being modified. In a functional language all changes are made via revisions. This largely removes the need for having any shared state as changes are inherently localized. All the functions can now be considered in isolation, since their output relies only on the parameters that are passed in. The other big difference is that in OO languages classes constitute basic blocks of compositions. The data is tightly bound to the methods that operate on it, and you have to write wrappers and adapters when you need to move the data from one domain to another. On the other hand, functional languages separate data from logic by design. The basic block of composition is a function, and all functions communicate over a common set of data structures. This is what Alan J. Perlis refers to when he says: "It is better to have 100 functions operate on one data structure than to have 10 functions operate on 10 data structures." 
I do like The Big Nerd Ranch books. However, there are some really good youtube tutorials as well. http://www.youtube.com/watch?annotation_id=annotation_3755171937&amp;feature=iv&amp;list=PLGLfVvz_LVvQUjiCc8lUT9aO0GsWA4uNe&amp;src_vid=VnoolK7e89g&amp;v=boj0f_O3i88 
Been using it for a month now and I love it
I pretty sure, that "hello " + name is compiled to new StringBuilder("hello ").append(name).toString() which is why the performance is quite good unless you do it in a loop.
I read this book to help me. Its a great book very helpful and easy to follow. Anyone trying to learn java development for android should read this book. 
http://stackoverflow.com/questions/2333285/java-lang-runtimeexception-uncompilable-source-code-what-can-cause-this Deselect "Compile on Save" in NetBeans.
Haskell, if he's feeling particularly masochistic. 
Like with everything else: By doing.
Will that work for all tenants in my database? its a multi-tenant database
coding is the best way. 
Most, if not all android devices only use java 5, some may use 6, but I've never seen an android that runs java 7 compatible code yet (string switch statements, etc). So even though Java 5 is old and outldated, it's what most devices use still. Edit: Was looking at an outdated page, pretty much everything I said is wrong...
I'm *almost* sure that performance of "hello ".concat(name) will be better... (at least for 2 strings ;)
I don't quite understand why if you have 5 possible scenarios you don't just assign each scenario a number value 1-5 and then generate a random number between 1 and 5 inclusive and pick whichever one corresponds to the generated random number? What's the point of generating a number 0-100 and assigning each scenario a number like 20, 40, 60...? To make it more general in case you want to add more scenarios later, just generate your random number so it's between 1 and X where X is the number of available scenarios.
I mean what books or tutorials would be recommended to go through? It's kind of hard to learn by doing it if I don't know how to code in Java in the first place. 
Check out the Dasein project. I found it to be fairly decent.
Thanks, I never knew that about android.
Either YouTube, a textbook from class, or just pick up a book from Barnes and Noble(my favorite).
[Apache jclouds](http://jclouds.apache.org/) supports S3 through a provider-specific interface as well as a portable interface, allowing you to interact with many providers, e.g., Azure, Google, Rackspace, without changing your code.
I was unclear about my point. The article says: &gt; Indeed, on every + operator, String class allocates a new block in memory and copies everything it has into it; plus a suffix being concatenated. This is not how it works.
Java 7 is supported now with build tools v19
Great advice! Now that you mention it, i'd love to do some more networking stuff; it's one of the concepts that I haven't done much on. After that, i'd probably want to learn some more linux / do some kernel level programming. Anyway thanks for the reply, you've helped me heaps :)
Do you mean [this](https://github.com/greese/dasein-cloud-aws)?
Interesting! Sometimes I really appreciate the work from developers at ASF.
https://jets3t.s3.amazonaws.com/toolkit/code-samples.html
Yes
Yeah having type inference, lack of null pointers, and full control of side effects is real masochism. :) 
It's been Java 6 for years, and 7 is now supported.
http://pastebin.com/38b7ARtu, deselected that and then created classes that Netbeans was suggesting
+1 for Spock. Ridiculously easier to work with.
Xamarin is all the range right now. I wouldn't miss it. 
huh. Seems the page I was looking at was really outdated...
You can compile the SDK yourself to only include the core Amazon package and the S3 dependency. Should yield a lower library.
we would but we want to add a "luckValue" which essentially would just add to the random number. Also other values (speed, strength etc depending on the situation) would take into effect
If you're looking for a youtube guide, this guy is really helpful : https://www.youtube.com/user/baralaborn
You are correct, however you don't have to write python in an OO way. There doesn't need to be a main class encapsulating everything which makes it not *pure* OO. Python is at it's heart, a scripting language with OO. It's a scripting language first. ### I WISH I COULD SEE MY UPVOTE/DOWNVOTE RATIO. 
The best way is to teach it to yourself. Either by book or by phone or whatever you work best with. I mean I learned C++ while in school using a compiler on my phone. Just find a good resource online and whenever you get free time read a chapter or two. Just make sure you understand what you are reading. I think code academy (http://www.codecademy.com) has some good tutorials on Java. My friend used it to learn JavaScript.
For basic syntax, ktbyte seems ok. I'd grab a book for android though
Best and fastest don't go well together when learning Java. It's a graduate process. I am still learning and refining my Java skills, 3 years now.
thenewboston.org is pretty helpful. really short videos
Well that is just politics. I am of opinion that if language is "scripting" (what the hell does that even mean? Just everything that is not compiled is scripting? :D) does not take away from it, but most people seem to be of different opinion and I never can change anyones mind and no one has changed mine yet :D **NOW THAT'S SOMETHING I CAN AGREE ON 100%, THIS IS A FUCKING WEBSITE WHERE EVERYTHING IS DECIDED BY VOTING, AND NOW YOU CAN'T SEE THE GOD DAMN VOTE COUNTS :D**
Indeed, we currently do not provide too much support for one-to-many and many-to-many mapping strategies that arise from actual foreign key information. Better support is on the roadmap, though. Right now, there are a couple of things that might be helpful: - [ModelMapper](http://modelmapper.org) is a third-party, Open Source project with [native jOOQ support](http://modelmapper.org/user-manual/jooq-integration/). It supports these kinds of use cases by implementing more sophisticated jOOQ RecordMappers for you - jOOQ has a variety of methods that help grouping `Result` types, such as [`Result.intoGroups()`](http://www.jooq.org/javadoc/3.3.x/org/jooq/Result.html#intoGroups%28org.jooq.Field%5B%5D,%20org.jooq.RecordMapper%29)
Not what he's talking about. He's talking about a full text search engine.
quite all right. I ended up going to barnes and noble and reading up on sprites which provided me with the answer I needed. I appreciate your time. Have a great weekend.
Have you posted the answer to you question here and on SO? Also in future it might be an idea to ask on /r/gamedev
yes. I usually post at stack as well. Didn't know about the extra subreddits though. Definitely will take a look! thx!!!!!!!
Have you configured Swing to use native look and feel?
&gt; His lambda example is kind of crap. It's much less readable than the hamcrest DSL. This will take some time. In 1-2 years, when lambdas and streams will be adopted by a larger part of the Java community, you'll find that kind of stuff more idiomatic than hamcrest. But yes, I agree, if really a test DSL should express your business rules, then Spock is great.
&gt; That's really useful and increases my productivity when I'm writing lots of unit tests for that type. With a strong inclination towards *"for that type"*. Writing matchers takes more time than writing those lambdas, once lambdas have been adopted. Right now, I understand your objection as all of this is new stuff. But when your complete codebase is full of Streams API usage and lambdas, and method references, you might think otherwise. &gt; ...and some of those lambda examples were pretty ugly IMHO. Surely the article doesn't provide a state-of-the-art answer, but a general direction.
Don't downvote the guy. I pay him to say that. It's not his fault. ;-)
&gt; That said, I doubt these are going "extinct" anytime soon. There are a lot of Java 6/7 VMs running out there... Absolutely. It'll take time. But much like we don't miss the pre-Java 5 days when we didn't have generics, we'll eventually not miss the pre-Java 8 days.
before I initialise my Swing stuff I call UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); 
Anyone surprised at anything in there? I thought that perhaps PostgreSQL usage would have been a bit higher, that might just be because I use it on most new projects, my perception on how many other people use it could be biased. Was also surprised by the really low percentage of people writing integration tests, only 7%. Edit: cannot keyboard today.
as far as you know is there a way to "perfectly" solve my problem using ModelMapper as a solution? it's unclear to me whether adding modelmapper to the mix will deliver exactly what i'm looking for - though i'm definitely willing if it solves this issue for me. Don't mean to be a bother, I'm looking through the documentation to try and figure this out myself.
That was a lot of good info.
We'll see where the streams thing will evolve :) Obviously, the article is just guess-work, not science. It may well be that the verbosity of Java streams (verbose relative to Scala, e.g.) keeps them from being adopted in such situations.
It continually surprises me that Hibernate is willingly used by anyone.
I don't know, unfortunately, but maybe you can ping [Jonathan](https://twitter.com/jhalt), the author of ModelMapper?
What do you use?
Using groovy to test java apps is one of my favorite jvm pro tips, just for Spock. jAssert and Fest are nice, but not groovy nice. 
because some library is useful or necessary just because someone wrote it?do you hire? :)
Next time I'd suggest *only* posting code there, and selecting the correct syntax highlighting option. It helps the readability quite a bit.
For a web framework I use Wicket, which I think is highly undervalued myself. It wasn't even listed, but it's a pretty mature product that's constantly improving in quality and documentation. Especially over the year and a half I've been doing it. I'm also one of the rare H2 Users out there, but I wanted a java embedded database for my project, and it seemed like the best embedded db that would work well with jpa/hibernate. 
No idea isn't worth pursuing. It will be part of your portfolio so you can show you know that you're doing, correct? Use it to prove that you do. Some advice I've been given while searching for project ideas is to try out an open source project other people are working on. It will prove that you know what you are doing if you can help contribute to the code, as well as show that you can work with other people's code (something I'm bad at; my code is the most beautiful...#narcissistic). 
I don't think I'm advanced enough to work on any open source projects :( Unless you know of any basic ones that are going at the moment?
Sadly, I think I'm in the same boat. 
Yes exactly. An osgi bundle is just a jar with a manifest file inside it. The manifest only changes behaviour of the jar when it is deployed within an osgi container.
There's nothing wrong with that project. Go for it.
That's great! StackOverflow will be your best friend
Ok. I will take note of that for the future. Did anyone happen to have an answer though? Thanks.
In version 1 bullet is still null when you try to check if it intersects. (hence the NullPointerException). If you pay close attention to the flow of each of them, you will see that in version 2 you create the Rectangle object BEFORE you check if it intersects. In version 1 you check the intersection every paint() refresh, so there is no Rectangle object created yet.
You could probably find a large enough project and let them know you're a beginner. A large enough project will have a lot of "low hanging fruit" type issues that the maintainer might trust you to work on. This is pretty much how we ramp up new people on our team.
My suggestion is to forgo JSP, in favor of it's more modern equivalent JSF. There are plenty of other technologies you can use too, but I suggested JSF because it is a standard that has a vibrant community and an easy learning curve for java developers to produce good web apps. 
When working on UI in Java, Swing pretty much replaces AWT when working with components (and JavaFX is replacing Swing, IMO). Swing classes are subclasses of AWT classes and use things from AWT, so its not 100% either-or, but Swing is used much, much more. 
Cool, thanks, that's good to know. 
I agree with this statement. Only thing worth looking at in java.awt is the Robot class
This is something that is extremely useful for automation, QA verification. Verifying an IM is converted correctly, displayed correctly, etc, etc. I think if you geared it around the idea of helping with unit testing/automated testing, it would be particularly useful. As a GUI tool, I don't see much use, but as an automated unit test tool, I see tons of use. I would put it on github, let others contribute, offer suggestions, and have a great way to display your work for your "portfolio".
nothing wrong with JSP, give it a try. If you use it with spring/tiles its very easy to organize your pages with common structures. Another option is to go with a templating language like thymeleaf or velocity. 
https://github.com/cameronmcefee/Image-Diff-View-Modes/commit/8e95f70c9c47168305970e91021072673d7cdad8?diff-0=2-100
Not sure I'd necessarily say JSF's learning curve as easy, but it's certainly a lot less steep than it used to be. Just remember to use the latest version (currently 2.2), to use facelets instead of trying to use JSPs, and check out [Primefaces](http://www.primefaces.org/) and [Omnifaces](http://showcase.omnifaces.org/) to make things look pretties and less verbose to write respectively. Also, if in doubt hit Google and look for a BalusC answer on Stackoverflow - what that guy doesn't know about JSF isn't worth knowing.
Don't use either AWT or Swing. Basically all Java apps are web apps (Java EE) now. There are extremely few jobs where you would develop a Java desktop app. And as was mentioned in another comment, Java FX is the replacement to Swing, which is the replacement to AWT. So you can learn Java for web apps, which means Java EE: JSP or JSF, JPA, etc. My advice to you is to skip Java EE (server side), but learn instead javascript and HTML5 (client side). javascript and HTML5 are the technologies killing Flash, so the type of tasks done with them (UI/UX) should be familiar to you. And I would guess that there are more jobs as a client side developer (javascript/HTML5) than as a server developer (Java EE, C#, php, ...). An alternative, if you really want to use Java, is to switch to Android. This also involves a lot of user interface just like Flash, and there are a lot of jobs too. However be warned that the technologies for both javascript/HTML5 and Android change at a very quick pace. So be sure you like programming and that you don't mind constantly learning new things in your free time. And if you buy some books, make sure they are not more than a year old... or better don't buy books but just find up-to-date tutorials on the web.
The specific project isn't as important as how you implement it. It could be a Mickey Mouse logo that disappears when clicked on and there would still be value. Unless you are working on a web design portfolio - the code underneath is what's important. Over-engineering a simple solution is what resume building is all about. No way would a simple web page project need a NoSQL database, app server with fault tolerance, caching framework, UI layouts, JMS, EJB's, Web Services, ... but you can use all these technologies just to prove you know how. 
hmm just looked up a bit about jsf, seems like I have to use xml, not really a fan of that. Do you think JSF will stand the test of time? Will it be useful to learn?
What's actually the benefit of JSF, I googled it but I feel like I still don't really get what it is. Also there is even a paragraph at the [wiki of JSF] (https://en.wikipedia.org/wiki/JavaServer_Faces#Criticism) stating that it is flawed, doesn't really give a lot of courage to learn it.
To really appreciate the spring framework you should spend some time developing with servlets and jsps. Spring makes many aspects of developing a web application very easy. For example, instead of mapping your servlets to urls in web.xml it makes it very easy to do so in your code via @Controller and @RequestMapping annotation. It will also parse request parameters for you. There is also spring-security framework that makes relatively easy adding authentication to your application. If you know java I would definitely give the spring framework a try.
JSF with PrimeFaces is an awesome combo, you can create very elegant looking pages with very little effort. I'm not sure what you mean by "having to use XML", JSF pages are created using XHTML with JSF specific namespaces, it is not that far off from using regular HTML.
The Primefaces team rebuked that criticism, and rightly so - there's a link and further discussion (including some thoughts on why JSF will still be popular in certain environments, why it's liked) in /r/java/comments/26by86/techonology_radar_advises_against_the_use_of_jsf/
You might want to look at Spring's MVC framework. It's a monster, but it's pretty slick once you're used to it. It basically provides a nice container for organizing and invoking your JSPs. Also..... you really should *not* be so leery of learning new languages. Number 1, they're *not* that different. C# in particular is just an amped up and specialized version of Java. But far more importantly, if you want a career in the software industry, sticking to one language is the surest way to fail. Java coders are a dime-a-dozen in China and India. A valuable developer is able to pick up new technologies with ease, that's all that sets you apart. 
It's literally no different. XML is a very generic term that encompasses HTML, XHTML, and dozens of other languages and formats. 
What's the startup time for an app created with this? I never had a problem writing a CLI app in Java before, but JVM startup time is often a problem. I'd assume using spring doesn't really help. When writing a webapp spring init often takes a long time. Which is fine, since a webapp only has to startup every once in a while. But for a CLI app that is used in a batch script (say, in a loop), that might be a factor. I sometimes write a small daemon (like the gradle one) to get around that, which I then control from bash/python, or if really necessary, from Java. But usually writing the whole thing in 'not-java' is the better approach in the first place. Happy to be convinced otherwise though...
If you've only coded in college/university you have a very long road ahead of you. Good luck, Spring MVC and JSF are both good choices but they are phenomenally different. Choose one and stick with it.
well said! I say easier learning curve in the sense that as a java dev, one could whip up nice looking web apps/sites without much front end know how (javascript/jquery/ajax) and that it's not too far from jsp with respect to building the front pages, with bindings and what not.
From what I recall, unless you are doing GWT which translates java into JS (and possibly wicket?), all web dev involves html which is xml. Even Play! Great point on the latter statement, my first gig was doing VB6 
I've rarely seen any jobs out there who are doing active development on Java desktop applications. Most of the jobs I see are on the Java EE side. If you're really interested in moving to this, you'll need to learn the following: How to install and configure: Tomcat, Maven, Apache, Eclipse or other IDE, MySQL/Oracle/etc (also reasonably good Linux skills). How to code: Java (obviously), Spring, Hibernate or MyBatis, JUnit, JSP, JavaScript (including jQuery), SQL. Source: JavaEE programmer
AWT uses native system GUI, so it won't work the same on every system, despite trying to. Swing on the other hand uses AWT to create a generic window and then paints all the components on it. This makes it 100% portable, and if you use pluggable "look and feels" you can make it appear almost-native on any platform. I'd recommend sticking with Swing tutorials and ignoring the AWT ones since AWT is rarely used in the industry. Seeing as how you came from flash and actionscript I'm assuming you are planning on running Java on the web, which is something I'm unfamiliar with honestly and as such I can't point you to a possible alternative to Swing which would be more appropriate to learn.
Velocity? Seriously? I can't think of a more cumbersome feature-lacking dead templates engine. JSP is a pretty lame option too but it's vastly superior to velocity in every way, at least in its current form. Velocity hasn't been actively developed in years. http://svn.apache.org/viewvc/velocity/engine/branches/Velocity_1.5_BRANCH/
There are two replies (so far) in this thread that don't belong in r/shittyadvice. This is one.
JSF 2.2 requires barely any XML, the majority of it being in web.xml and faces-config.xml. Even with those 2 files, the config is very little. I use vanilla HTML 5 tags that have JSF attributes. The HTML 5 file has to have an XHTML extension, but the contents of the file can be all HTML 5.
Explain why this is a bad suggestion. 
re-read my previous comment.
...... sorry, the wording threw me off. 
Starting out knowing next to nothing and then jumping into using JSF or Spring is going to be a HUGE task to complete. This guy WOULD probably be best served by going the php route.
If you're going to do Java (on the server, I can't speak to Android because the VM is utterly different) you **need** to read Effective Java. After that, it certainly doesn't hurt to read anything by Bloch and/or Goetz, such as Java Concurrency in Practice. Maybe Java Performance if you are doing something where every ounce of perf matters.
Your best bet is going to be to use something like Play or Spring MVC coupled with Thymeleaf or another framework to do server centric development. If you want to go modern, write your server side components in Spring MVC or another REST framework, then write your client side code in pure HTML5/Javascript with an MVVM framework like AngularJS. Please, please, please, please don't try to sell this or put it on the internet to handle real shoppers without having an experienced professional go over it with a fine toothed comb. 
Started using this today, so far it is the best web framework I have used.
&gt; There are extremely few jobs where you would develop a Java desktop app. That's not really true. I build in-house software for a tech company, half of what I make goes into desktop apps.
which course 
Check this place out http://coffeehouseprogrammers.com/javabasics/ 
Let me [link](http://www.reddit.com/r/help/wiki/faq#wiki_i_made_a_submission.2C_but_the_link_doesn.27t_work.3B_it_got_turned_into_a_self_post.) you to a short Reddit lesson that you might find interesting. 
I am writing a tutorial on java on this website. http://coffeehouseprogrammers.com/javabasics/ Also, check out foreign guy mike's block bunny tuts on youtube I believe he goes into android dev as well. EDIT: looks like you are way past the skill level my tutorials target. 
Or [this](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F) - 4 day account, 3 submissions, 3 times pushing a Udemy course.
From many years on many frameworks. JSP is great!! Combine with google guice and hibernate and you've got yourself a very easy set up. The best thing is you can have it all running in developer/JUNIT mode with a HSQL db and in deploy mode go direct to a "real" db. Very nice, clean stuff.
can you expand or go deeper into where gradle's flexibility is needed in regular java apps
Every time I see such a post, I wonder whether Oracle has a team of astroturfers dedicated to praising JEE and booing Spring.
That was my concern too. Don't get me wrong, it's a great concept, but startup time will definitely be an issue here. 
Take a look at http://www.ninjaframework.org/ and http://www.sparkjava.com/ 
I do not know. I suppose there is some of that. I know Spring folks certainly do it. What is really important is what will help me build good Java web applications. For me JSF, CDI is the answer. At one time Spring was the best but in my opinion it is outdated at this point. I can build and maintain a Java EE application a lot easier.
This is actually a really good summary of the issues involved, thanks for posting!
All opinion. No facts. Has not made me reconsider J2E or Spring. Why the hell did I click and read.
I find it slightly offensive that you're implying that all people who like Java EE and find good value in it are sneaky astroturfers employed by Oracle, while people who like Spring are all honest individual programmers.
Just curious, are you a Spring user/fan?
Right, so AngularJs is the silver bullet, the pinnacle of UI programming and we should all drop whatever technology we're using in favour of Angular? :/
I like Wicket, but I hate how Wicket fans in the past bashed JSF, despite the obvious and many similarities between the two. Instead of fighting over minor details maybe they could have joined forces.
IMO you don't need all these books yet. Finish reading the Gof Patterns book, read Clean Code (this book is a must!) and try to write clean, well designed and overall tested code. Discover various technologies and frameworks and gain experience. After some time you may also read Pragmatic Programmer - this book covers general approach to work as a developer. Good luck!
You don't like the downvotes, yet I got one from you? I've got a question for you though; suppose Oracle cloned Spring MVC and bundled it with Java EE, would that be enough for you to stop using Spring and become a Java EE fan?
&gt; you're implying that all people who like Java EE and find good value in it are sneaky astroturfers employed by Oracle No, I am not implying that. You are the one seeing things in my post which are not there.
Same here. Work on a large Swing codebase.
Let data guide you by reading the following report to see what people in industry are using: http://zeroturnaround.com/rebellabs/the-complete-java-tools-and-technology-landscape-for-2014-report-data-in-a-single-mind-map-image/ The mindmap gives an overview but the report goes into much more detail.
I didn't downvote you. Making a clone of Spring seems to be their design direction over the past few years as it is. I probably still would hold off due to history. J2EE set them back so far they haven't caught up and I don't trust Oracle to be a good steward.
I stopped reading as soon as he said that "talking about memory consumption can only sound funny". Please quit writing software.
As someone who hires Java developers out of college here is my advice... The project itself is not that relevant. In code samples provided by candidates I look for: 1. Is the code unit tested? 2. Is the code "clean"? (Read "Clean Code" book) 3. Are basic OO design principles followed (i.e. SOLID)? 4. Are design patterns used? This is a bonus. 5. Are exceptions handled? This one in particular is a weak point for CS grads. Often exceptions are just caught and eaten which is a red flag for hiring someone. The project you've described is a bit contrived but it shouldn't matter. Just explain that it was a way to demonstrate your coding skills and to learn by doing.
"in the era where commodity server for deployment of a testing environment is a cluster of 4 nodes with 3 i7 8core CPU with at least of 16GB or RAM each" I guess we work in vastly different worlds. RAM usage still matters in my world and that of my clients, and pretty much every client/project I've worked on has this little thing called a budget, and it's generally fixed, and doesn't tend to get bumped up based on what tech frameworks I use. To the extent that it *did* on a couple of occasions, they weren't happy.
Thanks for the reply. I'll keep all of that in mind whilst making my program. &gt; The project you've described is a bit contrived but it shouldn't matter. Just explain that it was a way to demonstrate your coding skills and to learn by doing. As in my edit: &gt; I'm now in the process of making a program converting binary/hex to decimal or text (With a selection of the encoding method used). Is this a better one? It is something that I will most likely use myself hence why I am making it. Is this a "better" project, is it a little less contrived? This new idea has more data manipulation involved which I thought may be a bonus too.
Thanks for the advice, but I disagree on some level. First of all, you're making assumptions that I don't write enough Java, and that I am also not active on stackoverflow. Both of those assumptions are false. But what I really disagree with is that you think theory should follow practice. That's fine if that is your opinion, but I learn much better by learning theory before practice. It's kind of difficult to know what you're missing in your skill set if you don't learn knew theory. Otherwise you could be limiting the depth of your own Java projects because you didn't realize there were more capabilities of the language and technology. Why sit at your code and keep reinventing the wheel for years on end when there are a myriad of highly reputable books available?
That's awesome! Very similar to loa09's answer, so this adds more support to the fact that I should be taking this route. Do you have any good resources on TDD? As I said in another post, I have learned Unit testing using JUnit and developed by writing tests to the specifications before implementing the code. I'm not sure how in depth I should be learning TDD 
Thanks for the advice. It's sounds like most of the responses involve finishing the design patterns book, clean code and Effective Java and eventually afterwards Concurrency in practice. I will take your approach to some extent and keep learning frameworks and tech throughout.
&gt; I don't trust Oracle to be a good steward. This is a common, and well deserved (IMHO), concern. See Jenkins and Libre Office.
Agreed, I'm guessing they should profile their code.
There are also upstarts like Play!/Akka and NodeJS.
thank you, I will check the e-commerce tutorial out.
I'm not sure about that, good advantage of server side code is that you can keep your code private and heavy computations on client side is probably not efficient on smartphones and tablets.
I just saw the video, it looks interesting, but there are so many other alternatives, it doesn't make it easier :).
The thing with theory in software development is that there are a lot of angles to it and a lot of strongly opinionated users when it comes to it. They also evolve very very rapidly. Sickwookie was suggesting you construct a foundation of theory, but in essance that you should not go out explicitly constructing a library of theory and rather construct that library as you encounter design problems and research solutions. The reason being is that there is tons of theory for various different applications and that theory (or some of those design patterns etc) will be replaced or grow obsolete in the near future - while new ones will spawn up. For example, with lambda expressions there is going to be very little application for the command pattern in Java. With the addition of of IoC containers like guice people are going to stop using service locators or at least their use cases will seriously decline. Programmers have to actively be learning. There's no way around it. You can't learn it all at once. If you do this you'll just end up wasting your time. That said all the books you list are what I would consider the foundation to java, so its a good collection. My only advice would be to take the performance books with a grain of sault , try to get the most modern books when it comes to performance and make sure that those performance articles are still relevant. You may want to throw in some other books like maven and git on there as well.
Well, when you put it that way, you can do anything with any language. But some languages are better than others for certain tasks. Don't try to shoehorn everything into Java! 
This is starting to become blog spam. Why are you posting an article about JavaScript on /r/java? Just because it uses maven doesn't mean we want your JavaScript here.
Personally I've been building a fairly large platform on top of wicket, and haven't had problem working with javascript frameworks (JQuery is my choice) and my wicket components. The facilities are there, they just might not be documented as well as they should be. I also use varying amounts of wicket for my platform, there is a admin which is a wicket page, but there is also velocity templating and other requests which do not render wicket components directly, but still use other wicket internals.
(Why was I downvoted? Downvotes make me sad ): Well, Java applets don't have nearly the same presence as Flash (I guess 95% of browser have Flash installed, right?), and are generally considered a dead horse. Actionscript's syntax is similar to Java's as it is a variant of Javascript, which has absolutely nothing to do with Java **besides** the syntax. Object-oriented design, Java idioms and its features will be covered in any introductory book, like "Thinking Java" or any for-dummies tutorial. After that, I'd recommend "Effective Java" and then anything on design patterns†. "Head First Design Patterns" is intentionally silly and illustrated, which attracts heavy critics, but is very didactic and a better introduction than the original Gang-of-Four. Also, consider starting with Java 8 already: it has some very good parallel-computing features as well as lambdas, which reduce much of the current verbosity. All the luck in your learning! † This is a recommendation if you intend to work in Java enterprise software. Are design patterns overrated? Yes. Are they necessary in most situations they are used in the wild? No. Should you know for when you find a codebase that looks like a indirection/redirection riddle? Hell yes.
I think he meant the difference of a few MB doesn't matter. I've seen it swing both ways: a tomcat/Spring stack using slightly more after just started than an equivalent app on Java EE, but slightly more (few mb again) doesn't matter.
I'm not sure the writer was that nuanced. In fact, it would have been easy to say "the difference of a few megs between competing platforms is pretty irrelevant in most situations" - that wasn't so hard to digest, was it? Instead, he(?) writes "in the era where commodity server for deployment of a testing environment is a cluster of 4 nodes with 3 i7 8core CPU with at least of 16GB or RAM each". This seems to put the OP in a rather rarified group of developers who have constant unfettered access to rather large and possibly unlimited deployment resources. I know of very few people who fit in to that category.
No problem! I personally like to look at other people's code. What really kickstarted my knowledge of Java was learning game dev because it forces you to know pretty much everything. 
Why do you say "dont try to shoehorn everything into Java" like its not good for web dev? When in fact, its one of the best performing web development languages out there. (Not to mention the best paying) I agree with the learning more than one language, but Java is a pretty rock solid base for a new graduate. Not to mention, you can learn new languages on top of the JVM.
Programming is about abstraction. Generalize the common traits of all your if statements, and then write a method such that you can have more scenes in the future without having more if statements. This is all practice for algorithmic thinking, which is essential
You make some invalid assumptions in that article. Big "enterprise" software platforms don't need Java EE. Tomcat/Tomcat derivatives work well too.
The JavaScript code would simply be Ajax API calls, not really anything you want to hide, and you'll still have a java-backend that does all the big stuff Gmail is a perfect example of what I'm talking about, nothing is sent using jsp-like technologies, the server serves style sheets and the basic HTML and JavaScript queries different Apis and populates the web page based on that
That depends entirely on what you're doing. A few mb (or kb) can make a huge difference. 
Personally, I'm a fan of Tomcat for a number of reasons, the first being that it's lightweight. Even with JavaEE certification, Tomcat provides relatively quick load and redeploy times compared to many of its peers and has a significantly faster development cycle. Because it's open source, you have an incredible degree of freedom and flexibility in choosing what you want to do with a Tomcat installation. Feel free to check out a post I did recently looking at why I think Tomcat is the right choice. http://www.futurehosting.com/blog/five-reasons-you-should-use-tomcat/
Use JavaFX instead. The latest and greatest.
I'm sorry about that, probably my fault, I should post it to JavaScript section. However, I still think that Java community is the primary user of Maven and Tomcat, am I wrong?
You might be better off asking in /r/minecraft (or another appropriate minecraft community). This subreddit seems to be more or less based around Java as a technology and as a programming language, not for help with specific Java applications.
Thanks for sharing but I can't say I would ever recommend using something like this. If I think my class can fail its contract under certain inputs I would prefer testing it across every combination of inputs within some reason. By using random data my builds with randomly pass and fail if there are problems.
Because in practice, I find that very few apps wind up being "just regular java apps". The convention over configuration approach is great, but practically every app we have does at least one thing that's a bit unusual, even if what those things are varies. Some examples: * Protobuf is used for projects needing binary message formats. Protobuf source for each language (including Java) needs to be generated and included as part of the build, preferably in a way that IDEs can understand. * Several projects make use of JNI code, which means native compilation (which gradle now supports) * One project makes use of an embedded JVM that needs special handling (embedded JVM to avoid requiring a JVM installation on client systems). * Several polyglot projects * Because of it's flexibility, we use Gradle on many of our non-java projects to give us a common way to manipulate and package build artifacts. * Some projects require some special handling with proguard * Polyglot projects in general * Look at what Google did for android using Gradle etc. Also, it's awesome to be able to encapsulate some bit of logic in the build file first, then migrate it to a plugin incrementally rather than having to write all of the logic using maven's awful plugin API upfront for even the most basic of tasks. And Ant is just plain awful to maintain no matter how you do it, especially since the publishing is a completely different tool.
I was referring to Android and javascript when I was saying that books are outdated after a year . I am of course exaggerating a bit, but not by much. I did some javascript development two years ago and when I hear people talking about it now, I have no idea what they are talking about. It is of course not javascript itself which changed, but the frameworks that people use. Similarly, they frequently introduce new features and change best practices for Android. Compatibility with older versions is a mess, and so is developing for various screen sizes. Hopefully that platform will mature and stabilize at some point.
I like functional programming and Java 8, but I'm not sure it is appropriate for a beginner. The concepts are quite different and it could be confusing for someone who is new to Java. Also, since most companies are quite conservative, Java 8 will probably not be used by most of them even 5 years from now. So it's really not a priority at the moment for someone looking for a job. And it's not clear how many years it will take before Android gets to the equivalent of Java 8.
can confirm. Am huge Spring user, have told lies.
Yes. I like Spring.
I've been in this same spot, and you'll have to go through this, too: Why should we risk executing someone's code? First of all: You should have given us some screenshots. I mean, you work on this game for, I guess, months, but you don't seem to have screenshots lying around or links that you used earlier to show them off? Your account is a year old, yet has only very few entries, but it seems that a few of those actually deal with showing you making the game, that's reaffirming. The auto-update feature that you thankfully warned us about in advance is a questionable thing, it could load *anything* from the net. ... I am looking at the code via the very comfortable "JD" [decompiler](http://jd.benow.ca/) right now. The "install()" method creates the folder "Vital" in "C:\" and copies/downloads stuff into it, which is a location that users most probably don't want for this. Hm. Weird programming - you have identical URL strings in this class written out *three* times instead of using fields for them. Here's the only jar that's downloaded: https://www.dropbox.com/s/htrg4m0d2czq7n0/vital.jar?dl=1 (The rest is data files.) There's actually a game inside, going by what the decompiler shows. It uses BufferStrategy, which is kind of advanced, so the game's tech might be smooth. But the textures.png is really low level programmer art. (Personally, I care more about gameplay, though. I keep interrupting the absymal Thief game to keep working on my text adventure and what-have-you projects.) The game loop uses a while loop that waits for the framerate time to have passed, then the next frame happens. You should add a "Thread.yield();" inside of that to not 100% busify the processor in case it wants to use its time differently. ---- Verdict (from someone who's not gonna execute it): The game itself seems to be harmless. The launcher's "C:\Vital" actions are not a good idea and will put off users. The launcher, by the way, seems to have a registration feature - it even has an email feature built in that probably sends you the information. But that's just the thing someone would need to set up a spam zombie. I *assume* that this is harmless, though. If registration is mandatory (Didn't check.), that would be a very bad move and would even violate German law ("Datensparsamkeit"). If it isn't, then nevermind. If someone wants to use email sending features in their code - download OP's link and decompile, it's all there. (Thanks, OP. (No sarcasm.)) So, I guess you made a nice game there that even has an update feature and registration (whether or not *that*'s a feature is up to people's opinion). I'm not gonna try it, though, but I also don't recomment *not* trying it. I didn't look at every bit of code, but it seems to be an honest effort. (Upvoted.) Please give us some screenshots, though.
Spring MVC is heavily used in corporate environments. Play is a relative upstart, but may be slightly friendlier to use. I've not used Play much at all, but as a professional software engineer, I have used Spring MVC heavily.
What I use it for is cases like this: @Mock UserService userService; @Mock User user; @Randomize("username"); String username; @Test public void shouldLoginTheUser() { when(userService.getUser(username)).thenReturn(user); objectUnderTest.login(username, password); //etc } This way the username is different for each test and I can ensure that I'm passing the correct username to UserService without making two test cases. vs @Mock UserService userService; @Mock User user; @Test public void shouldLoginTheUser1() { when(userService.getUser("bob")).thenReturn(user); objectUnderTest.login("bob", password); //etc } @Test public void shouldLoginTheUser2() { when(userService.getUser("fred")).thenReturn(user); objectUnderTest.login("fred", password); //etc } 
Why not just data drive your unit tests? I typically use TestNG but JUnit appears to be able to data drive the tests. http://www.wakaleo.com/thucydides-one-page/_data_driven_tests_in_junit.html http://testng.org/doc/documentation-main.html#parameters-dataproviders Heck you can even push random data in this way (although random data is generally not a good idea for tests). What does your framework do that isn't already there? Also it doesn't look like there is any way to sync the randomization. If for instance I have 100 users with the names user100, user101,... user199, and they all have passwords pass100, pass101, ...pass199, doesn't this library just give me a random username and random password? Also in your second example where you repeat the test case, you can't actually randomize with "fred" or "bob" can you? It's always just a string concatenated with a random number isn't it? So if you wanted to unit test given with the example you gave in your second bit, your library wouldn't help either would it?
Regardless of who's winning right now, the important thing is "there is competition", meaning we have a number of frameworks that compete with each other overtime for predominance. Spring used to be an incredible solution at times when JEE was a monster. Now, EJBs, CDI and JSF have come a long way. And, certainly, Spring will tend to improve itself to keep up with the race. Overall, we all get to win over time, having a handfull of good frameworks to choose from whenever a new project comes along.
from the javadoc "The minimum unit you can use is a second. We simply can't monitor with a frequency higher than a second." I wonder why.
And make sure you're using [javax.swing.JPopupMenu instead of java.awt.PopupMenu](https://weblogs.java.net/blog/ixmal/archive/2006/05/using_jpopupmen.html)
* [`Console.readPassword()`](http://docs.oracle.com/javase/7/docs/api/java/io/Console.html#readPassword%28%29) * [java read password](https://www.google.com/search?q=java+read+password) for more
I think [this](http://stackoverflow.com/questions/10819469/hide-input-on-command-line) could be what you are looking for.
Yeah this is what I was looking for! Thanks a lot!
Really? So every time you see "such" a post (a post where someone likes Java EE and dislikes Spring) you wonder if Oracle has a team of astrosurfers. How does that NOT imply that everyone who writes about liking Java EE is an astrosurfer? :X
Have you seen these http://docs.oracle.com/javase/tutorial/ ? These are official tutorials for Java, I really recommend this one. (I have learnt a lot from there about Generics for example). Apart from the books that were given before, I would advise taking another approach that is following developers blog or sites like dzone.com. You will find there loads of ideas and heaps of code. I believe this is a great way to get to know about recent trends, hot tools and as well improve your code and understanding of language itself.
If you think you're not experienced enough to work on open source projects, try picking one and working through their bug reports. It will familiarise you with the project and hone your bug-hunting skills. Years ago I did this with FreeBSD ports. I have never been in an "everyday coder" role but this type of experience set me up with a stack of handy skills.
We are introducing JBehave into our project right now, so I cannot tell much about this framework yet. However, from what I have seen so far it seems more complicated than Spock. Also we plan to use to former to create scenario based test that could be written by our business users, whereas we use Spock rather for unit tests, where it does really well. Just as a side note, you can use Spock also with Java classes. Also as Groovy is 'almost Java', you only need to add one dependency to your project to start using it. Even if you are unfamiliar with Groovy syntax, you can start using it with pure Java code and it will still work. Regarding the maturity, I have used this framework in a number of projects and it did very well. Also the latest stable version which is 0.7-groovy-2.0 has been released in 2012 (hope I didn't mess up with this date) so you can imagine it has been used in the community for a while. 
I made assumptions only because you implied you are a Java novice. If you are already active stackoverflow you are doing great. Do you have any real projects to contribute to at this point? My main point it not that theory should follow practice, but that there is too much theory to ever fully grasp everything. Most developers will only need to use a small subset of the theory they learn in college for example. So, I recommend that you let your experience be your guide. If you want to get into a particular field work on projects in that field, and you will find out what specific concepts you need to brush up on. Hope that clarifies a little. Edit: After reading your other replies I will add that I made this response which does not answer the main question because you are asking for road map without giving a destination. There is no single path from novice to master. Everything depends on where you want to go.
For us it's the memory constraints and efficiency. You can't load ten gigabytes of image data into a javascript webapp and hope it runs just fine.
As far as I'm aware you have to you awt for the System tray as Swing doesn't work with it.
Lambdas are a no-brainer for someone used to Javascript/Actionscript: they are just function objects! I think it's easier than anonymous classes, it took me a while to grok what it means to implement something on the spot. I don't have a big picture view of the industry, but in my previous job they were planning to upgrade from Java 6 directly to Java 8. There weren't many features in Java 7 to justify dropping support, and the time frame seems right. We created a product that would run in our client's servers, for companies that host their own applications it must be even simpler to upgrade. It's not only about the introduction of lambdas and streams, which themselves increase developer productivity: Java 7 increased memory performance for String's substring, and Java 8 removed permgen. Besides, Java 6 support has already expired.
In my experience, for an e-commerce web-app, the best language is probably C#. Java comes in second. So no, this particular instance isn't shoehorning, I just want to make sure OP doesn't try to build a desktop app with Java. :)
There is a lot of testing framework available for java code, I don't like very much powermock, you should'nt mock static classes because simply you shouldn't write static classes, except for some restrained usage, or utility usage.
We are using Spock on our current project. Even unit tests are in Spock now, such a joy to write tests in. Can't recommend it enough.
Well, it's a white box test so I know I only need to ensure the username parameter gets passed correctly to the service. Random data works for that.
OpenJDK has been getting a lot of attention and development. Does anyone actually deploy production servers using OpenJDK? I don't and I don't know anyone who does, but it seems like it is possible now that it's gotten so advanced.
[See this blog post](https://blogs.oracle.com/henrik/entry/java_7_questions_answers) &gt; **Q:** What is the difference between the source code found in the OpenJDK repository, and the code you use to build the Oracle JDK? &gt; &gt; **A:** It is very close - our build process for Oracle JDK releases builds on OpenJDK 7 by adding just a couple of pieces, like the deployment code, which includes Oracle's implementation of the Java Plugin and Java WebStart, as well as some closed source third party components like a graphics rasterizer, some open source third party components, like Rhino, and a few bits and pieces here and there, like additional documentation or third party fonts. Moving forward, our intent is to open source all pieces of the Oracle JDK except those that we consider commercial features such as JRockit Mission Control (not yet available in Oracle JDK), and replace encumbered third party components with open source alternatives to achieve closer parity between the code bases. So, in essence, you're pretty much using the "OpenJDK" anyway, regardless if you're actually installing it, or the OracleJDK. Note also this remark in the same post: &gt; **Q:** Where can I find the source code [of the Oracle JDK]? &gt; &gt; **A:** The source code for the Java SE 7 Reference Implementation is available from the JDK 7 Project in the OpenJDK So, the OpenJDK is the reference implementation for JavaSE (7 upwards). This explains why new language and platform features are implemented there, by the various expert groups.
Outdated and easier are proxies and really just hiding whatever motivation you have to praise JEE. What's easier, what's more modern in JEE, come on?
I think the fact that you you've just reduced Spring to 'inferior JEE + MVC' shows how empty is this whole discussion.
Thanks for the follow up and the links. I'll start working on that tonight.
Hmm interesting! Thanks for the input! I think it is a little too complex for me, I'm just working on this little application for myself because I keep forgetting passwords and such and I thought it'd be cool to make it in a way that makes this text file unreadable. It's more of just a little project I am working on for myself that I want to advance later and make a GUI for it. However, that does seem interesting and I'll take a look at it! Thank you!!
occasionally you have to test code that relies on static system.* classes and you want a way to test it out.
any suggestion?
How about a program that makes patent trolls disappear? You could charge 1/4 of what ever the trolls are offering for licensing.
Do you install java jdk? 
Yup, the one from Oracle.
Good idea, but a bit against the design of JUnit. You should use rules for that, read this: http://junit-team.github.io/junit/javadoc/4.10/org/junit/Rule.html
Great video, thanks!
If people paid (i.e. jobs) me to do it , no question
It works OK with jpopup.setInvoker(jpopup) hack (see the above link) :)
try this - http://stackoverflow.com/questions/11161248/setting-java-home
Direct link to website. Asks vague question. No other detail at all. Totally not an advertisement. No. Definitely not.
 frame.revalidate(); might be what's missing. Whenever you change Swing layout structure, you need to trigger revalidation (do that once done with everything). Reason: They try to save time, so they don't do that whenever you tickle the structure somewhere, they wait for you to be done with everything - which obviously they can't know. frame.setVisible(true); You're doing that too early, you should do that when you're completly done with all your frame.-calls, because that just makes more sense. And if you would do that call not just after the other frame setup calls but even as the very last of your initialization method (assuming that the missing revalidate() is the problem), you wouldn't have to revalidate here at all, since showing the window for the first time ("making it 'displayable'") causes revalidation, anyway.
Theoretically. A software that can answer the question you just asked. That would be a quasi-witti, half-snarky response if I didn't actually have an idea in mind to make it happen. First, read [this](http://www.reddit.com/r/gamedev/comments/27vtz8/when_is_rng_good_when_is_it_bad/ci5n9ij) non-long comment about the concept of using randomness plus rules to create meaningful data/shapes/whatever. I'm kind of thinking of something like one of those game name generators on the Web, except a lot more sophisticated. I mean, when *you* are thinking about what program to create, you're probably dancing wildly in your head, looking into all kinds of directions, allowing all kinds of connections, then you're filtering what's total BS and what might make sense, and *then* you start pondering if the candidates are a good idea or what would have to be changed about them to make them a project to reasonably pursue. A program that can come up with good candidates might be something to make money off of. At least it's an interesting concept to pursue.
Okay, thank you :) I shall delete this and re-post it accordingly.
I completly didn't see that it was a link! I'll have a look at it today thank you.
Why spock rather than Cucumber-JVM?
Just one little tips on variable naming. You should use the common standard with naming, which is camelcasing with the first letter lowercase. I see that you're using camelcasing but not consistent with lower/uppcase first letter. And if you've learned this much before starting uni, you're ahead. Good luck :)
unuseable for mobile. cannot see much.
Check your eclipse.ini file. Make sure that your -startup and --launcher.library file locations are correct.
A limit of 1000 stickers per person? How many do they have?!
You might want to check out Broadleaf Commerce http://www.broadleafcommerce.com/. Learning curve might be a tad high if you don't know Spring/Spring MVC already but there are plenty of resources for Spring out there.
I ordered 50 of each for our JUG, but I suppose we'll have plenty left over. 
Oh, how surprising that the tool we use at my work, Rational Application Developer doesn't even register here. Then again, the shit's about 5k for a single dev license. 
Yeah, I don't think I'd be sharing that idea here with you :P
is it free delivery too?
Pi 
Oh God. I just clicked the button 3 times, now I have like 300 of each coming. I though it hadn't recognized my click on my phone :(
beware, there's no confirmation screen. and the 'error message' screen is bad - the 'state' list isn't repopulated, so I have some stickers shipping to "NOT LISTED". It's crap like this that continues to reinforce my belief that Java people don't "get" the web. Yes, I'm trolling a bit. I do web work in PHP, Java and other platforms, and almost without question, web work done by Java engineers (maybe this is more an IBM/Oracle/Sun issue, maybe..) is just ... bad. Visually unappealing, bad and inconsistent UX. It's the visual equivalent of "well, it compiles, it must be fine". Sorry, rant over. I'll take my stickers and pass them out at our user group, but they could have done 10 minutes of extra testing on that form and made the experience not suck. 
I'm getting an access denied message
~~Doesn't look like too many, I see this was posted an hour ago and I already am getting "Access Denied" when trying the page~~ ~~edit: Canadian here, so its possibly not available in my area~~ edit: As per /u/iooota's [reply](http://www.reddit.com/r/java/comments/28vkf4/get_free_java_stickers_to_show_your_love_of_the/cif020p): &gt; you have to login to get the stickers 
same here
It would help to know more about what your trying to do with it.
Well, thanks. Now there aren't any left. I want some :'(
No need - I don't need more schwag/crap cluttering up my house :) And yeah, I might get downvoted a bit, and it's a rant I've mentioned in public, even at our user group. And really... some people really take offense at it, but Java wasn't originally developed for the web, and the majority of people doing Java probably *aren't* doing web work (not direct consumer-facing web stuff, at any rate). But... the level of attention that gets paid to many web projects built with Java still bugs me. I'm reminded a bit about the "Java is slow" argument. It was slow, and even now, on desktops, you can still often tell you're using a Java app vs native, partially due to speed. But for years Java advocates would say "no, it's not slow". Then the JVM get more optimizations, and it got faster, then the reply was "see, it's faster!". And the reply from people like me was "but... that proves that it was in fact slower before", which seemed to whoosh over the heads of the faithful. Also, see MySQL re: transaction support. 
My comment from [the other submission](http://www.reddit.com/r/java/comments/281ez0/crud_operations_in_struts_2_using_jtable_jquery/ci6fuvo) still applies, even if you deleted that one (and your comment, too): stop spamming your site on Reddit, it's against the rules.
Just an FYI, you have to login to get the stickers. Those of you getting an error message, just login or create an account.
Weird requirements for wanting to do with what I assume is without using a framework. If it's some kind of embedded server like some networking router or transaction register, you could use Tomcat or Jetty with a plain Servlet, or in extreme cases something without Servlets even based on Undertow or really low level based on Netty. But if it's something with a GUI used by humans that interact with it, is advise you to use a sane webframework like JSF (as bundled with eg TomEE).
You must log in or create an account.
you must login first
How about an app that shows you all erect nipples within a 10m distance, call it Nip-a-lert.
Apart from scenario tests you can use Spock as JUnit/Mockito/Easy Mock replacement. What I particularly like in this framework is how easy it is to mock/stub classes/interfaces here. In regards to unit tests what you can achieve with Spock is way more lucid than when using any other framework I am aware of.
You mean person. Now we don't have enough for everyone.
No, I am just saying that since they are free, you should be courteous and take what you need.
&gt; Not jsp but plain compiled java. JSP is plain compiled Java.
I'm sure I'll find people to share them with. I'll leave a bunch of them around in the IT rooms at college :)
:) You could bury the whole room in 1000 stickers.
I'm logged in, and I'm still getting an "Access Denied" message. :(
PHP. It gets a lot of hate, but it was first built to do web sites - other uses have come later.
You might want to also verify that Scanner is doing what you think it's doing. I'd inspect also the contents of feNames both before and after you do the sort.
The file is already in alphabetical order, but when I first wrote the file, the very first name "Aada" was all the way on the bottom and I manually moved it to the top. I want to be able to add names to this file in the future and then re-sort it using the Collections.sort() method. sample out put would be (I cant put the whole thing because there are almost 9k names) Aalis . . . Zyta Aada
I had inspected it before it sorted, and it is in the order it is in the file. It is only after I run the Collections.sort() method and print it out that it changes. 
Another thing to consider is that the sort will happen on the natural ordering of it's members, which for the case of String, is a case-sensitive ordering. ABC...XYZabc...xyz
Yeah I know, All names in this file begin with capital letters. the natural ordering is ABC... XYZ, but I'm getting ABC..XYZ**A**
You are correct there are some special characters at the start of the file screwing it up. My results (on a mac): &gt;Zvjezdana &gt;Zvonimira &gt;Zyanya &gt;Zyta &gt;ÔªøAada Looks like &lt;U+FEFF&gt; (zero width non-breaking space) is the character starting the file. 
The first character is the problem. To get the file I have used the following code List&lt;String&gt; femaleNames = Files.readAllLines(Paths.get("path_to_file"),Charset.forName("UTF-8")); And then I have printed the first result System.out.println(femaleNames.get(0)); Which gives me ?Aada, which looks wrong. A quick look on Stackoverflow gave me the following [answer.](http://stackoverflow.com/questions/17405165/first-character-of-the-reading-from-the-text-file-%C3%AF%C2%BB%C2%BF). Which is exactly what you're looking for. Edit: Well Stackoverflow just went down for maintenance. But to help you now here is the solution: BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream("path_to_file"), "UTF-8")); // skip first character if its the BOM (https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8) in.mark(1); if (in.read() != 0xFEFF) in.reset(); List&lt;String&gt; femaleNames = new ArrayList&lt;&gt;(); String line = new String(); while((line = in.readLine()) != null){ femaleNames.add(line); }
waiting for it long time. 
Nice. Looks like we caught that at the same time :)
I'd suggest JSF v2.2, but there isn't a Java EE 7 version of TomEE currently available. You could download the latest Apache MyFaces 2.2.x, include it in the TomEE lib directory, and remove the existing jsf libraries as a workaround. You could also consider the latest Glass Fish or WildFly. These days, I'd suggest WildFly over Glass Fish. 
in case you didn't know... there's a command line util that sorts files! to print the sorted list of names to the console: sort "female names.txt" or to sort the file and save it: sort "female names.txt" -o "female names.txt" 
It's definitely not working anymore, I'm signed in, verified and still access denied D:
Did I miss out on the sticker fun? I'm getting access denied, both logged in and not logged in.
same, bummer
Ah shit I missed out, someone lemme know if they wanna send a few spares to australia &gt;.&gt;
This would have been great for my office, me and one other are the only java devs the rest are all .NET maybe they'll have more stickers to hand out another time.......
Created account, verified from e-mail link, and access denied. I think they might've ran out or something?
Well, now I have a Java account and no stickers.
I highly recommend JSF with PrimeFaces. It is easy to use very flexible and popular. Spring MVC would be my second choice. It is still very popular but requires more work than JSF to get the job done. JSP is okay but Facelets is now the recommended Java standard. Try some of the Netbeans tutorials. They are pretty quick and cover the major frameworks.
Complain: https://www.java.net/contact LOL edit: I just did, and posted a link back to this thread.
Wow guys, thanks so much, I was going crazy trying to figure out what the problem was.
You ordered 1,000? Thanks a lot fuck face, its people like you that fuck things up, just like this.
rad and shit are synonymous that is for sure.
You could keep track of the letters yourselves in a Map, but it's easier to just use java.util.Set. Set&lt;Character&gt; uniqueChars = new HashSet&lt;&gt;(); for every char in sentence, add char to uniqueChars Set&lt;Character&gt; allLetters = new HashSet&lt;&gt;(); insert all letters of the alphabet into this set remove all members of uniqueChars from allLetters** return that result **Hint: use one of the methods from here: http://developer.android.com/reference/java/util/Set.html Just for lols, here's Scala's one-liner ('a' to 'z').toSet -- "Hello World".map(_.toLower).toSet 
No... fixed the link to go to the Android developer reference guide which does allow linking.
I put together this talk (https://www.youtube.com/watch?v=eCos5VTtZoI) demonstrating Spring Boot for the vJUG (http://www.meetup.com/virtualJUG/events/164640872/). I think it's pretty compelling and demonstrates just a few of the features for web dev. It should be very easy to build applications that run in 256 MBs. Or 100MBs. It runs embedded Tomcat by default, but you can use embedded Jetty or simply deploy to a TomEE, WildFly, etc. (I work for the group that develops Spring Boot. I like it. Others - like Netflix and TicketMaster - like Spring Boot, too. Hope you'll consider it. I know more than a few Ruby on Rails users using it, and at least 2 Laravel devs using it, quite happily. If you watch the video and want to dig in further, check out http://spring.io/guides and - of course - don't hesitate to ping me at jlong@gopivotal.com if you have questions. I hope this helps..
Just on the FizzBuzz question it's worth noting that the most expensive part of that first function you wrote is the printing. Every time you use System.out.print you are calling a stream witch takes time. There's a way to do it with only one print statement, bonus points if you can find it ;) (commonly asked interview question) 
This is something that you'll just get better at figuring out in time. But this one is actually really easy. So you need to keep track of the letters you've used in a sentence as you iterate through it and then say what ones went used. Easy, just make an int array with size 26, 1 for each letter. And set them all = 0. Then you iterate through the sentence from beginning to end, and if the letter is 'a' all you do is array[0] += 1. If the letter is 'j' it's array[9] += 1. And so on all the way to the end. Then when you reach the end you just iterate through your array and if anything is still 0 then you haven't used it in the sentence. Another common interview question is to count how many of each letter a sentence uses. This is done the same exact way except for the end of displaying what you want. This is where I got the answer from. 
Just a string buffer that you add to as you iterate then print it once? 
This problem is not particularly difficult in Java, I'm surprised your friend didn't just take a couple of minutes to explain it. The general idea would be to start with a container full of all the letters of the alphabet, and then step through each letter of the entered sentence, removing that letter from the alphabet container. The resultant container would then be your answer, which you could just iterate over and print out. There are a number of good container types, like java.util.Set, which work nicely for our task, as they allow you to just blindly remove values that might not actually exist in the container.
Bingo =) Not that tricky now, but I've seen more then a few people mess it up with interview nerves. 
Here's a way to do it with Java 8. This assumes the input is lowercase only, but can be easily modified to support uppercase, depending on the question parameters. public static final String CHARS = "abcdefghijklmnopqrstuvwxyz"; public static String missingChars(String input) { return Arrays.stream(CHARS.split("")). filter(c -&gt; !input.contains(c)). collect(Collectors.joining("")); } First it makes a stream of all the abc characters (sort of like a list), removes all of the letters that aren't in the input string, and then joins it back together to a single string. Here's a great website I found when I was learning Java for practicing basics. It gives you questions in increasing difficulty, tests your code and is excellent at understanding what you're doing wrong: http://codingbat.com/
Ah yes indeed, good old "personal home page" :)
Interestingly, the JLS still references Enumeration and Dictionary, despite both classes having been outmoded with new implementations (Iterator, Map).
It might be expensive in terms of CPU; but it's much cheaper in terms of memory. A FizzBuzz check of all 2^32 integers is possible with System.out version, but much less possible (if at all depending on your system memory) with the string builder version. Be careful which "expense" you optimise for.
It depends on what your application exactly happens to use.If you don't use JASPIC you obviously won't have any problems with that. We happened to run into this one for one app: https://issues.jboss.org/browse/UNDERTOW-266 An other app which didn't use data sources or security, only Servlets, JSF, CDI and some EJBs worked right out of the box.
Yes. A lot of enterprise systems use Java for web applications. Have a look at Spring, for starters, or Java EE.
You've got the right idea. The more you solve actual problems, the better a programmer (not just coder) you will become. The [CodingBat](http://codingbat.com/) problems are a good place to start. [CodeEval](http://www.codeeval.com/) has more complicated problems.
EAP 6.3 should be suitable for JDK 8. I guess we'll see it in a few months (has been in beta for some time now).
Unsure if this is blogspam (the author of the linked blog calls himself subham mittal), but in any event, the [TreeMap API](http://docs.oracle.com/javase/8/docs/api/java/util/TreeMap.html) says the same things more concise and comes with less ads.
Oh I bet, I could see myself messing it up in an interview as well. 
Think of the idea, then let me know...I would be interested in helping contribute as a developer.
I think the novelty of the situation wore off after I sat there for 45+ minutes attempting to solve it. Thanks for the help though!
I got some nice ideas which you can have for a small sum.
Last I looked the Units of Measure library still needed work, but could still be useful. http://jscience.org
Spring Boot looks promising. Are there any "intermediate to advanced" resources for existing Java EE devs to learn Spring as it has become? Most of the guides and documentation seem to get the very basics of something going, or even one particular task, but I don't seem to find much in the way of bringing it all together to make an app that contains Core, Web, Security, Batch/XD, etc. for a production-worthy environment. This middle-ground has been the biggest roadblock to my committing any further to Spring in general. Java EE has guides (such as those from Antonio Goncalves) that get you out of the gate and direct you to the next steps. Most of the Spring books I have either have you wire everything manually still, or stop haplessly short of a thorough understanding or any idea as to where to go next.
For extra glitter points realize that you don't actually need a set, an int will suffice if you clean your input first. Hint: There are 32 bits in an integer, and only 26 characters in the alphabet (this assumes you use English as an input language - otherwise you'd need to create a set of all alphabetic characters, which would become pretty large; Unicode has some thousands of them...).
finished school; I have a full time job
that one is a mature project; i doubt I will be able to commit code over there 
I was thinking along the lines that it may be useful. It was not accepted into java 7 or 8 because of some issues. Edit: link https://jcp.org/en/jsr/detail?id=275
My team and I need to write something similar with our experiences migrating from OC4J 10.x to JBoss EAP 6.1. It's been a slog, and we've done damn near everything. Let's just say that between the changes in the EJB system, the fact that we had to move most of our codebase to Hibernate, and the one app that used JMS heavily (as of now, I can yack your ear off about JMS), it's been quite an experience. My team is really skittish about the prospect of WildFly.
[Undertow](https://github.com/undertow-io/undertow) is a new design that is based, from the ground up, on non-blocking I/O and other new(ish) programming paradigms. Because of the design a lot of legacy baggage in the Tomcat codebase (that impacted EAP versions with Tomcat components) no longer has to be dealt with in Wildfly 8 (which will become EAP 7). None of this is to disparage Tomcat in the slightest. Different tools for different situations. In the past, however, integrating Tomcat components with the EE parts from JBoss seems to have been a point of some pain. With Undertow a lot of that is going away. Undertow itself supports things like http, https, ajp, spdy, servlets, and websockets. Support for other levels of EE technology come from other specific JBoss components (JPA2.1 -&gt; Hibernate, CDI 1.1 -&gt; Weld, etc). Undertow might be more nearly comparable with [Jetty](https://en.wikipedia.org/wiki/Jetty_(web_server\)). On another note: it does not look like EAP 6.3 will pass the technology test kit yet (On Java 8) but some clients have been running it in Java 8 QE environments. (Source: [here](https://community.jboss.org/message/877474#877474).) 
Newly Java user. Just wanted ~10 for me and my friends... I'm getting access denied now.
As I mentioned, I was able to get past a bunch of xml changes and other small nitpicks, but I got hung up on something to do with the jsp config and just gave up. I am actually interested in just fixing a memory leak that JBoss 7.1 has when developers hot deploy new ear files to our dev boxes. It seems it was fixed in a WF jira and I wanted to test it. I was not really shocked (more disappointed) that a migration guide didn't exist, but I was shocked that it didn't exist and that the other migration guides DID exist for (what I would imagine) are less common upgrade paths.
&gt;&gt; between the changes in the EJB system &gt;Are there some specific areas? OC4J was using EJB version 2. It was written to conform to J2EE version 4. Additionally, OC4J was quite okay with having multiple copies of the same library .jars in both the EJB .jar file and in the WAR or EAR. JBoss isn't. That caused a lot of headaches. We found ourselves needing to move to EJB 3 in order to get most of the apps to work. &gt; &gt;move most of our codebase to Hibernate &gt; Did you use Hibernate directly or JPA2? Under OC4J, we were using whatever frameworks we could get our hands on. I know I saw a lot of java.sql and some original JPA. JPA2 did not exist when OC4J released. &gt; &gt;and the one app that used JMS heavily &gt; Message driven beans? If only it were just message driven beans (though yes, message driven beans are a part of the app). We also had some JMS queues running to processes outside the server environment (by which I mean that they were running on desktop computers, not just outside the JBoss container). Just accept that this was a necessary part of satisfying the business requirements for the application. I can explain, but it would exceed the character limit and violate NDAs. &gt; Can I also ask: where are you pulling your EE spec API jars from? By the point I was pulled in on the project, someone had already zipped the libraries we needed up and put them up on a share. I don't know where my team got them and did not ask.
like https://www.google.de/search?q=fastcgi ?
has it crossed your mind that I searched and couldn't figure out how to do it?
&gt;AS 7.1 (at this point) is two years behind WF 8.1 which just hit final very recently There's also AS 7.4, aka EAP 6.3, which is even newer than WF 8.1 when it comes out. AS 7.3.3 is about the same age.
&gt; OC4J was quite okay with having multiple copies of the same library .jars in both the EJB .jar file and in the WAR or EAR. JBoss isn't. Yikes. EAP 6 is much better at classpath stuff than previous versions but having multiple copies of various jars in the same package is a bit crazy. (That's how I read it.) &gt; I know I saw a lot of java.sql and some original JPA. JPA2 did not exist when OC4J released. I guess what I was asking is if you ported to a persistence project with JPA2 (what I would consider to be the "correct" EE way) or if you went straight to Hibernate. &gt; blah blah JMS blah I hate JMS (too). &gt; someone had already zipped the libraries we needed up and put them up on a share **[frowning intensifies]**
Huh, apparently I misread it as the author using the equality operator on the objects themselves, not the result of getClass(). I've changed my original post.
Java 8 is not mentioned in either the "Anonymous Class" or the "Abstract Class" question, yet I would consider the answers totally incomplete without discussing Lambdas in the first one and default implementations in the second.
&gt;Their solution here is also pretty ugly, you don't need synchronization on the threads, you need a volatile field. Synchronization is unnecessary. Their solution is horrible! A volatile field an alternative but the synchronized block if (pleaseStop) { pleaseStop = false; // Reset pull cord. return; // Bus stopped. } is a fine example of a situation where AtomicBoolean.compareAndSet() would be appropriate.
&gt; I would expect this resource to get more firm as WF8 starts to become EAP7. When WildFly 8 has become JBoss EAP 7 there will likely be much more documentation available. That's pretty much always the case. When the product is still at the AS/WildFly stage there's only some rough documentation in the form of several incoherent wiki pages (mostly aimed at developers). When the AS/WildFly stage becomes the EAP stage there's always a quality manual available. I don't expect that to be any different this time around. The WildFly branch is just to get new technology in our hands early, but as we all know it's maybe stable at the core but rough around the edges. The real polishment with regard to bug fixes and documentation doesn't come until it's called EAP. 
&gt; I hate JMS (too). JMS 2 is a pretty good improvement ;) And now that the definition of (internal) queues can be done using standard Java EE syntax instead of JBoss specific it's one migration headache less. As we know, Java EE standards (for better or worse) nearly never change in incompatible ways. Backwards compatible is king for Java EE. I love JBoss and think they make the best server out there by far and large, but as we all know JBoss has one internal rule: if we can change it we WILL change it. The number of times the syntax and file name of a JMS destination changed in JBoss is uncountable. Whereas with Java EE, web.xml has always been web.xml and a J2EE 1.3 web.xml still runs on a Java EE 7 server (over 10 years between those). With JBoss an xml file that's only 2 years old (AS 7.1) already doesn't work on the latest offering. Go figure ;) 
hey, have you checked this thread: http://www.reddit.com/r/java/comments/28p1cg/what_is_a_good_road_map_for_learning_java/ ? it gives some general ideas and as well outlines a number of great books on java. Also you mind find useful some parts of official tutorial: http://docs.oracle.com/javase/tutorial/ 
I'm not a fan of basing hiring decisions on a technology that has only been out for 3 months, personally.
I am inexperienced, but if you want some examples using java code with data structures and algorithms, I would check out David Shoechuck's lectures from berkley. They are old and a little grainy, but he will tell you some of the details as to how java was implemented at the machine level. They may be to much in the beginner range, but I would give them a shot.
You are on the right track with the StringBuilder but you are still calling System.out.println() 100 times. This call is the bottleneck of this piece of code. Thus, your solution should call System.out.println() only once.
Question, I've seen the exit thread condition implemented with an AtomicBoolean before, is that okay?
As a matter of habit, there really isn't a good reason not to use .equals when the thing is an object. It avoids the possible bug where Java 9 decides that class will now have an equals method that does something slightly different than just an identity check. (Though, I guess it does avoid a null check).
In addition, if you already have commons-io in your project then you can use their BOMInputStream: http://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/input/BOMInputStream.html
Everywhere I have interviewed still uses 6.
Someone should really work on Colt. http://acs.lbl.gov/ACSSoftware/colt/
What is the Use Case here? I would think an XSLT would be better suited here.
1) Reusing the hibernate code is not the main concern. I can also create a jar from the main app and have it as a dependency jar for my new app. The question is more about any design cautions, bottlenecks, issues in the database layer with sharing the same db with multiple web apps. 
As long as you're adding and removing related things (e.g. a parent entity and all of its children) inside transactions so neither application ever sees an inconsistent view of the data you should be ok. What's the query throughput going to be like for each of the applications and what's the read/write split? If both applications are heavily reading and writing to the same table then you might start running into locking and performance issues.
And yet, full stack JEE containers are still monsters :)
Ah, I see now. Okay my bad, forget my comment above ;)
Theoretically no, you just have to be careful with automatic entity ID generation in the sense that on some strategies you will get holes.
Check [jcabi-s3](http://s3.jcabi.com), which is an object-oriented decorator of AWS SDK
You should focus to locking and performance. 
I use vaadin for enterprise application. It's faster than html. 
My use case was to have a report generation service, I've [open sourced it here](https://github.com/yogthos/instant-pdf). JSON makes it trivial for different clients, such as web clients or mobile, to use the service.
Effective Java. That's the key one to read.
Transform XML with XSLT into XML-FO and feed to this: http://xmlgraphics.apache.org/fop/ Results in a PDF file. (edit: while this is common practice / industry-standard, it's also kind of a pain in the ass sometimes. XML-FO isn't very readable, but there tools to help you)
JSF is great for building web applications that need a rich interface (Lots of Ajax, state management, Desktop application type features)
Locking will be the biggest concern. Learn about optimistic locking.
&gt; You have to look at WF 8.1 as a precursor to EAP 7 which is, for better or worse, a commercial product At the end of the day we all have to eat, so it's only logical that at some point there has to be some income. I think the current setup is pretty okay and EAP is not that expensive. What I don't like is that Red Hat tries to pretend so hard that WildFly is a totally different thing as EAP. In the case of Oracle, GlassFish and WebLogic are indeed totally different things, but in case of WildFly and EAP they are the same thing. WildFly is just an earlier version where less bugs have been fixed. I kind of understand the reasoning that it might be a hard sell to say that EAP Alphas have free binaries, but that for EAP final binaries you need a support contract. So they call the alphas WildFly, and the finals EAP. As said, I understand the reasoning, but I don't really like it.
And the much-touted dark theme is fairly unusable on a LUbuntu box. The dark fonts on dark background in the preferences dialogs are positively unreadable. Yes, I know that this is all GTK+'s fault, but I don't have time for things not working out of the box ATM. I think I'll stick with Kepler and Jeeyul's theme until it's worked out.
YMMV, but I find Vaadin and other GWT-based tools are best for web-hosted applications and control panels (things that require a richer client more resembling a desktop application replacement) that are coded primarily in POJO, whereas your basic MVC's like JSF/Struts 2/Etc excel at taking presentation a layer beyond the POJO's and closer to the front-end for slightly more control over the HTML/Ajax/JS side of things. Then of course there's plain HTML/Javascript dealing with REST and JSON in the background so you have even finer-grained control of the presentation layer. The libraries are "good things" though, unless you want to code everything by hand (and waste a great deal of your life doing it). You can mix and match just as well, and ultimately it comes down to what you are comfortable with doing given your project goals.
Faster for what? If I just want to write `&lt;body&gt;Hello, World&lt;/body&gt;`, it'll be pretty hard to beat plain HTML, regardless if you measure runtime, throughput, latency, development time, or lines of code.
faster for developing. You will have more time to develop other such things. 
Is Xtext project suitable for writing language support into Eclipse? Their documentation is pretty sparse on the topic, and it looks as if I could do it, however they seem to be boasting that it is for DSL's, not for actual general programming languages. Is this true?
I know. In fact I have IntelliJ installed alongside eclipse - and I got some crashes so far, even if I just use it to write JMH benchmarks. But as all my colleagues use Eclipse, it's just less hassle to go along.
1) The array is a `static` member, that is there is one array per class, not instance. 2) The constructor can only be called by methods in the class. This prevents direct construction by outsiders (i.e. `new Packet(...)`). Typically users of the API will have to call a method like `Packet.create(...)` or `Packet.getInstance(...)` to get a packet. Overall 1 strongly suggests to me that `Packet` is caching instances for reuse, which it can only ensure by doing 2. Typical reasons for working this way are minimising memory use and avoiding garbage collection. If packet is immutable it can also speed up equality checks, since they often become simple pointer equality. In java (and most languages I know) `new` does two jobs: allocate some memory for the object's fields, then initialise the field values. (ObjC used to make this explicit with alloc / init) This type of code is an attempt to avoid, or at least control allocation in java.
&gt; the Packet data type has an array of it's own self as a member? Array of its own type. &gt; If so, shouldn't the instantiator of Packet be the one to instantiate &gt; the array? Not necessarily, especially if direct construction is not allowed. &gt; When another class instantiates a 'Packet' object Not possible, the constructor is private. &gt; however what is the comment 'no direct construction' mean? Direct construction is disallowed, and instances of the class must be obtained through static factory methods. For example, the `getInstance()` method of the Singleton pattern. Direct construction is calling `new` to invoke the specified constructor.
While it's a great principle in theory, the XML/XSLT solution is rather unweildy in practice. It's also overkill for many applications. The idea here isn't to mix your content and formatting, but to be able to easily generate the markup from your data when needed. 
You should install Rainbow drops font colors alongside a dark theme. It makes it look pretty sexy. http://eclipsecolorthemes.org/?view=theme&amp;id=24587
Vector, Observer and Observable are also pretty outmoded, having been replaced by ArrayList and listeners. (That said, for all I know listeners are also outmoded -- I haven't done any GUI programming in Java for over a decade.)
JSF works best for applications that are HTML centric and page based. There can be a little abstraction, but mostly your source will look like plain HTML with some special namespaced attributes that mark some element as a component. JSF is page centric, meaning you have (plain) links to pages like /users and /users/edit etc. Data is generally transported between pages using request parameters, eg /users/edit?id=12 JSF provided excellent support for server side templating and helps you with converting and validating these parameters. JSF especially shines when you need eleborate widgets like progressbars, charts etc that you can easily encapsulate in components and bind to your data. JSF is less suited for single page applications such as Gmail, Google Analytics etc. Things like GWT or Vaadin that provide a much higher level abstraction (provide a less http/HTML centric way of working that's closer to things like Swing) are better suited for that.
Yeah, I have the same problem. And unfortunately, some views are useless in the dark theme too. I don't use the non-xml pom view, but that's the default when I grab it. And it's unfortunate looking. I don't notice a lot different in this release. I thought the white space was shrinking and such, but it doesn't appear that it did. Also, the font for the line numbers is still looking shabby. Hoping I can fix some of that to use it since most my colleagues use it as well.
These are great. Keep'em coming! Great job
One of the main features of relational SQL database servers is that they can be shared by multiple applications. You should look into concurrency control though. But it depends on what you're doing. In what way does the 2nd app update the user data?
Apart from Ovservable/Observer missing Generics, they implement a pattern that is still in use throughout many applications, so I would not call them outdated. As for Vector, this class is still in use in many concurrent scenarios.
Would be good to define first clearly what types of apps there are? Let's see... there's games, desktop like apps, control/monitoring, info displaying, point of sale, inventory and many more. What are you looking at? There's public internet and intranet as well. For games you'd not any of the ones you mentioned, but pure javascript, flash or perhaps an applet (yeah, really!). Desktop like apps depends. JSF is pretty rich, but true desktop is more GWT's domain. For all the other types JSF is pretty good. Traditionally it has been used a lot for intranet, portal and point of sales app, various reservation sites as well. But it's pretty suited for high traffic public sites as well. In JSF 2.2 a stateless mode was introduced that works wonders here. Combine it with request scoped beans and you have the best performing Java framework (performs MUCH better than web frameworks that use ThymeLeaf) 
http://stackoverflow.com/questions/17757190/save-c-sharp-vlc-screenshot Seems like a good answer. Maybe not in java but the solution is very similar. ffmpeg is your tool. 
Is there anything else that isn't OS specific I'm trying to make the program I'm making cross platform.
&gt;Apart from Ovservable/Observer missing Generics, they implement a pattern that is still in use throughout many applications, so I would not call them outdated. Sure the observable *pattern* is used (listeners also implement this pattern) but i don't think I've seen any real Java code that uses Observer or Observable. &gt;As for Vector, this class is still in use in many concurrent scenarios. AnythingIf you're using this naive form of collection locking then you're probably doing something wrong. You almost certainly want finer-grained control over which threads can put things in the list, and how, which threads can read from it, and the scope of the lock. (for example, you probably want a ReadWriteLock more frequently than you want complete mutual exclusion) So chances are that instead of using a Vector you should be using an ArrayList with a separate locking mechanism on the side. If you really do want naive collection synchronization, you can use an ArrayList wrapped in Collections.synchronizedList.
Sure, I agree that Vector often locks more than necessary. And I did not mean to say that using Vector in concurrent scenarios is a good idea (I agree that it isn't). But even using Collections.synchronizedList is not enough to guarantee state ordering in the face of concurrent threads (e.g. the api docs state clearly that one needs to synchronize on the list while iterating, a fact that is often overlooked). If at all possible, I use Collections.unmodifiableList (or guava's immutable* classes) for concurrent access and avoid changes of shared data.
vaadin can be faster when programmer doesn't know js, html and css basics. In everything else is slower. Tried to build any custom widget? 
I would recommend play framework for backend of web apps and Websites 
It might help if you describe what specifically you want to do with java. If you google "java tutorial" you can find MANY basic examples, if your looking for truly basic introductions.
Thank you, I shall repost. 
There's a Dota joke to be made here, but I'm too lazy to make it. Context: Luna is a hero in Dota, Eclipse is one of her abilities.
Their developer's aren't web languages?
If the array creation is done once per class, what does the interpreter do the next time in encounters the same lines (which I see in several places): Packet p; p = Packet.getPacket(single, Packet.SND, Packet.ALLOC); If this is creating another Packet object named 'p', does it ignore creating more arrays? 
The person who wrote this article is misinformed. The main point made is that Java EE is not modular and cannot be used with plain Tomcat. It would be a good point except it is wrong. If you want to use an enterprise server with all the Java EE stuff built in you can. If you want to use plain Tomcat and include the components in your application you can do that too. If you want CDI just include the Jar file and a few lines XML to enable it. If you want JSF or JPA do the same. I know this because I have been doing it for years. 
I just downloaded it, it works fine for me in Unity running Numix theme. [Here's a screenshot](http://i.imgur.com/nfOrDCt.png) The reduced whitespace makes a huge difference. I like it. [Here's the GTK Version](http://i.imgur.com/dCHpLMc.png) 
Can anyone comment on the actual Java 8 support? My understanding was that in the Kepler update there was a lot to be desired. My enterprise is basically stuck on 6, at least until we get an EE server that can support SE 8.
You're getting a reference to a packet and p points to it. A new Packet object may or may not be created, what happens to the array is inside the black box. The only way to know is to look at the source code of Packet.
&gt; oncurrency control though. But it depends on what you're doing. In what way does the 2nd app update the user data? Do you know any I can do testing on locking and performance? Any good resources out there that talks about it? 
It does CRUD actions on the user data. Do you know any I can do testing on locking and performance? Any good resources out there that talks about it?
&gt; Do you know any I can do testing on locking and performance? Any good resources out there that talks about it? Do you know any I can do testing on locking and performance? Any good resources out there that talks about it?
Just think of a simple java program to make (eg hangman, pig Latin, sorting a list), and as you run into problems, stackoverflow it. No better learning than learning by doing!
Checkout the doxygen+graphviz combo http://www.stack.nl/~dimitri/doxygen/manual/ I use it for exactly this. Wish there was a Scala plugin. 
You can't compile and run programs with it, but I have used [Neutron Drive](https://www.neutrondrive.com/). It is an Add-on / extension that integrates with google drive to allow you to collaborate on writing code in a ton of languages. It definitely works well in terms of functionality, but I have never done any large-scale or serious projects with it, so I don't fully know the true practicality of it. 
This isnt formal, just a side project. I only want to show two or three others what I'm doing, not have them help much. Only with trivial tasks like coming up with names for things and adding them in as String. 
Yes. You can define a persistence unit (the more or less formal term for what you are describing) as a JAR file. There's an element "jar-file" in the persistence.xml just for that.
Thank god I wasnt the only one thinking that
I see. Do you know an easy way to extract classes in all packages named "model" to a separate Maven module?
Copy the files over? A maven module (reactor build) is just another source three.
also a developer should be able to go in the finest details of a field I'm not thinking at something one time use; probably a framework or something more general
&gt; he is taking it one step further and saying that you should put those parts in your WEB-INF/lib With his proposal the version of Servlet is still fixed. If we go this route we need something that goes even further.
Not really basic instructions, intermediate. 
The gist of this article is we should use Spring instead of Java EE because Spring is modular and Java EE is not. That premiss is not correct. You can easily include the parts of Java EE that you want by packaging the Java EE jar files in your application just as you would with Spring. There is nothing wrong with using only the parts of Java EE that you need. I am not sure why you think that. I guess you think anyone using JPA with Hibernate + Spring is wrong too. There is also nothing wrong with using a full container like TomEE either. There are advantages and disadvantages to both. Here is a link to the other article you wanted to discuss. He is arguing about some of the advantages in using a Java EE server. He makes good points that I have no issue issue with. My point is there are other options as well. http://www.reddit.com/r/java/comments/28pnee/its_not_spring_anymore_its_the_summer_of_java_ee_7/
&gt; The gist of this article is we should use Spring instead of Java EE &gt; because Spring is modular and Java EE is not. That is not the gist article. The author is not saying don't use Java EE, he is saying avoid the Java EE *standard*. A Spring app obviously uses Java EE, but you must include both the APIs and your chosen implementations, whereas a standard Java EE app uses the JARs available on the app server. The point of the article is that it is better to roll your own collection of JARs than depend on the standard. If you want further proof that your understanding is incorrect, look at the component diagram. The only mention of Spring is in the batch application. The web application is using Weld, which means CDI for dependency injection and not Spring. His argument for Spring has nothing to do with modularity, but container independence. &gt; There is nothing wrong with using only the parts of Java EE that you &gt; need. I am not sure why you think that. That is exactly this guy's point. You should build off of a simple servlet container like Tomcat and add the Java EE JARs you need. That's not what the other guy said: &gt; And for those of you out there, Servlets are NOT application servers. &gt; I guess you think anyone using JPA with Hibernate + Spring is wrong &gt; too. I never said that. But a person who promotes use of the Java EE standard might say that, such as the other guy: &gt; The fact that you simulate all these by using Spring is a naive &gt; approach. TomEE a ,very nice try @dblevins is a big effort and works &gt; really good, to bring JEE stack in Tomcat in the correct way by &gt; following the specification. &gt; My point is there are other options as well. That is *exactly* what this guy is saying.
Eclipse has a DocShare Plugin which let's you piggyback on Google Talk/Jabber to do shared editing. http://wiki.eclipse.org/ECF/DocShare_Plugin It's sometimes a little clunky to get going, but once you have it working, it's great. I used it to build a plugin to add shared editing to PyDev a while back and it worked like a charm for what I needed.
There are good arguments to be made for using a full Java EE server and mix and matching components. They are both good options and both can be done with Java EE compliant libraries. I am not picking a side on that. The only issue I have is claiming that you cannot run Java EE on plain old Tomcat when you can. You can do it by including only the parts you want in your web app or you can use OpenEJB and get the whole spec. Using that as an argument to use Spring is not valid. 
Actually, he already mentioned that. His batch app is built off of Java SE. JBoss need not apply.
Adam Bien just did a short video on this: https://github.com/Thomas-S-B/visualee
I've tried all the packaged ones, any suggestions of other ways to fix this would be awesome.
simulate traffic with full volume. Have one app up, take benchmark, switch on the other app, and see what's the impact. Not sure what tools are out there but that's what our NFT department does at a high level.
Why not? JBoss still runs on any JRE and he still proposed to have Tomcat as the universal deployment target, tying you to whatever Servlet version that Tomcat implements.
&gt; he still proposed to have Tomcat as the universal deployment target Reread the blog post. He proposed to have Tomcat as the universal deployment target for *web apps*, because a Java web app needs at minimum a servlet container. He wants to develop his *batch apps* without an app server at all. Tomcat need not apply either. *Not so anymore - there has been a trend towards building web apps as ordinary JARs using embedded microcontainers such as Netty or Jetty.
https://www.eclipse.org/eclipse/news/4.4/eclipse-news-part2.php
Still stupid simple to do with github pull requests.... not too mention you should always version your code.
Little bit of forewarning: Usually in the beginning, this seems like an acceptable approach: it's easy to follow, implement, and maintain (at first). As the projects grow, it'll become harder to make isolated changes without breaking something down stream in another project, especially when this pattern becomes unwieldy and you are sharing classes between multiple projects. I know it violates DRY to have basically duplicated classes between projects that are even backed on the same database, but it does have its merits. It allows you to move the projects along independently of each other, otherwise all the projects have to move together or you risk older versions not running correctly on any schema changes.
I'm fairly certain I must be the only person on the face of the planet that still doesn't like the ribbon.
Not gonna happen, ever.
&gt; also a developer should be able to go in the finest details of a field That's part of the problem, it can take many years of intensive study to get to the point where one can even understand the problems. There are very few developers who have the technical background required. &gt; I'm not thinking at something one time use; probably a framework or something more general Any idea what languages would be a good target? I know that C++, Fortran, Stata, Mathematica, and Python are all used to various degrees. Maybe a good place to get started on this would be to investigate packages like Python's SAGE to see if you can contribute to one of those, with the aim of getting a better feel for where the major issues in the field are. It could also be that some of the problems are education issues. People picking the wrong development tool for the job, or not taking the time to learn some basic coding skills before jumping in. If so, part of the solution to the problem may be to push some intensive 'programming for scientific research' mini-classes that are styled and marketed to appeal to busy researchers. Some of the bad software that we're talking about (I don't know what proportion) are data transformation or statistical analysis scripts that only need to work once or twice. That's part of why so little effort is put into the software engineering aspects. Of course we developers usually shrink from the idea of those 'run once' apps, because sure as shit some sales guy is going to get ahold of it and sell it to 3 customers who will then want their $5000 annual support contracts to pay for $50,000-worth of support and customization on that miserable POS that should never have seen the light of day. That doesn't usually happen in scientific research software.
Look into Openshift for a more Java-friendly hosting environment that has a fairly generous free plan. It's perfect for playing around with stuff.
Intellij IDETalk has the ability to send code pointers and run diffs between files over jabber, though its not exactly what your looking for.
More stickers will be available shortly and you can once again place your order without registration. We are working through the current backlog to get them out as soon as we can. Thanks for your patience and glad to hear the love for Java!
Yes. They serve a different purpose. And Atomic* fields are larger than their volatile counterparts. A volatile int, for instance, is great for implementing some kind of counter that is only incremented by one thread but has to be read by many threads. An Atomic int, on the other hand, is what you want to use if multiple threads are updating the same field, regardless of how many threads want to read it. Volatile guarantees that when you publish a value, it'll be visible to all threads as soon as it's published. Atomic does the same, and much more. At a cost.
+1. Just decide on a project, and build it. If you can't think of anything useful, then implement a Sudoku game.
Or as the other guy said you can deploy JBoss (or TomEE or GlassFish or ...). The point which you seem to miss is that most every lightweight AS is just a Java app that runs on a JRE. It's not necessary to have it installed by someone who then never wants to replace it again. You can simply let your app BE JBoss + some war or ear and deploy THAT as a single unit.
Of course every Java EE AS is an app that runs on a JRE. That's not the point. The point is deployment, as you've noted. I've never seen an entire Java EE app server and its apps ever deployed as a single unit. Each is deployed separately, and the app servers are maintained by separate ops teams. Worse when there's licensing involved, like if you're running Weblogic or Websphere. I've never worked anywhere where the app developers could do whatever they wanted with the app servers. Tomcat provides minimal services on its own, so under this separate app server/app deployment regime, the apps have more flexibility in which Java EE services they use and which versions of those services they can use. The same goes with the single JAR solution. Then it's just a bridge between Apache and Java. TL;DR Of course everything runs on a JRE. But how the app gets to the JRE is the question. The app developer's JRE is not the same as the JRE used in the production infrastructure. That people even want to do what the blog author proposes, and that single JAR deployments are gaining in popularity, indicates that this is a widespread enough condition. And, what about batch apps that are run from the command line and are not even run on an app server?
So using volatile boolean as a flag to tell a thread to shutdown (as I have seen) is ok. One thread sets it and the other reads it.
&gt; I've never seen an entire Java EE app server and its apps ever deployed as a single unit. We do this more or less. Occasionally we indeed deploy a single unit, but most often it's a pipeline. We build the app server ourselves (mostly JBoss, sometimes TomEE or GlassFish). Depending on what changed our CI system builds the AS then automatically deploys it. Then the war is modeled as a dependency on the AS and is then build and deployed next. This is all highly automated. Fully automatic for our DEV and BETA stages (a commit in the associated repo triggers the process every 30 minutes), and semi-automated for our live stages (requires an explicit command referencing a tag in a special live branch of the repos). &gt;Each is deployed separately, and the app servers are maintained by separate ops teams. NO! They are not!!! The team that decides what jars in which version and what code goes into the war is by definition the same as the team that decides which AS in which version is deployed. &gt;I've never worked anywhere where the app developers could do whatever they wanted with the app servers. This is crazy talk. Think of how silly this sounds. We have a team of deeply responsible developers who can already do "whatever they wanted" with the code inside the war, but you don't trust them with the app server because they will do whatever they want!??? :( :( :( The way it happens is that the team prepares a version of the product according to the business requirements of the business and the technical necessitates. This essentially results in a series of commits to the above mentioned repos. At the end of the sprint the repos are branched and deployed to a BETA stage and after that to a QA stage. If after testing everything works correctly, the green light is given, which results in a live branch made and a subsequent deployment. Your statement about "app developers doing whatever they wanted with the app servers" sounds like you treat developers as a bunch of cowboys who would like nothing better than cause chaos. If also assumes that that if they are so inclined to cause chaos they would not be able to do so via the huge amount of code that's in the war. And finally it assumes that there is no testing and that whatever people produce is just blindly deployed live. &gt;The app developer's JRE is not the same as the JRE used in the production infrastructure. Within reason, it is. If we currently deploy to Oracle JDK 7u50, we encourage developers to have Oracle JDK 7u50 installed. Why would the JRE be radically different anyway? What's the purpose of that? Maybe one lone developer had forgotten to update his JRE, but since there are 3 stages between the developer's workstation and production this is rarely an issue. And minor version changes also rarely matter, but just to be sure we do encourage to have as much as possible the same versions. 
The whole RAP things looks nice but why the hell they didn't support maven by default ?
[LOL](http://imgur.com/1JFGeOB)? This can't be right. Surely.
Exactly. 
I don't understand what's new about Split Editors? I have been doing this in Eclipse for a long while. Admittedly split editors in Eclipse are terrible, but they are not a new feature. I will check out Luna, hopefully it has improved in that aspect.
How is this different than Spring Boot? Doesn't that also have a versioned, cohesive BOM?
It's a split editor for the same file. You can now edit the file at the top and at the bottom with two different editors. Before all you could do was to open two different files side by side.
No, you could open a new editor for the same file then split them. It was a little cumbersome but still doable.
Upgrading gtk and oxygen-gtk helped a lot :)
Is the Maven support still garbage?
currently it is getting an error. I am trying to get the col2 value for a specific col1 value.
My most favorite feature is that there's nothing that stops me from using IntelliJ.
Not sure why this was downvoted. Everyone I know who've switched are due to the awful m2e issues.
I was a die-hard Eclipse user for like 10 years. Then I started working on a new project that was Maven based. So horrible. IntelliJ is so much nicer.
But that still two different editors open on the same file. The new feature is about split editors, more of two split text edit views within the same editor. 
What is the difference when it comes down to doing something concrete?
&gt;The nice thing about Java EE is that I can do my development in Tomcat and simply provide the deployment descriptors to let the app work in Weblogic I'm a grown man, but that statement almost brings me to the brink of tears. But alas, if you're not bothered by it who am I to judge? &gt;This has been how it is at every place I've worked, from startups to enterprises. I'm seeing a clear tendency away from it, and where things are as you describe I either leave or try to change things. But I guess we can agree on the fact that you and I obviously don't think in the same way ;) &gt;They sign off on it and then it is no longer my responsibility. The "it's not my responsibility" mentality is not my ideal. For the startups and more established companies alike that my team has been working at we are deeply involved with the product and care for it at every stage. Maybe we're nuts for having that mentality, maybe not, but it's the philosophy of pretty much every member on our team. &gt;The app server contains configuration files with sensitive security information, such as usernames and passwords. That configuration is not safer when it's part of the app server and when you consider the app server to be a separate thing. It's not. Our datasources are defined in application.xml, but that has more to do with our desire to adhere to Java EE standards as much as possible (since we own the AS anyway and could put it there as well). Our infrastructure and setup is typically such that it doesn't matter that much if the developers know the password the app they themselves coded uses to access the database they themselves setup and provisioned. We work with a small team (typically 10 guys, 15 at most) that's fully responsible for a single product. The product could be part of a larger system, but the setup is nearly always such that the app doesn't need any privileges that we wouldn't trust a developer coding the app. Don't forget, if the developer owns the code and you don't trust the developer, then it's a farce to think that hiding the password in such way would buy you much. IFF the developer is particularly devious he can code in a backdoor to have access to the DB anyway (with the same rights granted by the connection of course). If the developer can have access via said backdoor, he could just as well have access to the password. OF COURSE, we assure that the app runs with the least amount of privileges and that the username/password, keys, or certificates for access to a remote system (typically DB, API, message queue) are likewise for an account with limited privileges. In rare situations we put placeholders in the config files for the username/password. Meaning that all config files are still fully owned by the team, but only the username/password are at runtime provided by an external properties file. As I said, this is rare. The major advantage of having ALL configuration in plain sight for the team is that issues in general are much easier and thus faster to solve. The team knows best how configuration is associated with the app. It's truly ludicrous to have some uninterested ops guy having to provide definitions for say an internally used JMS queue and then having engineers negotiate with said ops guy to have that (trivial) queue created, opening and closing tickets for this trivial job, heck even putting the exact definition for the queue in the ticket because ops guy doesn't know the first thing about the syntax for JMS destinations used by WildFly 8.1. And that only because of some rule that's only there for the rule, the engineer is not allowed to touch the configuration of the AS, while the ops guy is? The amount of time this wastes is just crazy and it absolutely helps nobody. 
I thought it improved a lot w Kepler. Juno and below were worthless for our spring apps. We use to have to run through the whole mvn build, go in and update project dependencies by hand and all of that every time I updated. Kepler and Luna I can just pull down the apps as mvn projects and they're good to go. Definitely worth a second look if you haven't used eclipse in a while.
I think just making it available by default was a first step. Hopefully it'll get better as other projects implement the dark theme. In the meantime the moonrise ui theme and eclipse color plugin is a decent alternative. Both are available in the marketplace
&gt; we are deeply involved with the product and care for it at every stage So are we. But my responsibility is to develop a robust, high quality application. Our AS teams care about maintaining the environments, so I can trust that our application will work well when deployed. I trust the AS teams as well as I trust the DBAs that maintain our databases. When you have trust, you don't have to control every aspect of every stage. "it's not my responsibility" means that I put my full attention on application development and trust others to do the same with their responsibilities. &gt; with our desire to adhere to Java EE standards as much as possible It is not in the Java EE standards to configure the data source in the AS? &gt; they themselves setup and provisioned We don't provision our own databases. We have a DB team for that. I don't have sa access to our DEV boxes, but I can alter schema and update data. But that is not possible in higher environments. It's not a question of trust that I have restricted access to PROD data. It is a regulatory issue. That data contains sensitive client information. The bank must restrict access to that information to those with a need to know. That data is replicated into lower environments for testing, but only after being thoroughly scrubbed. The bank would be stupid to give unrestricted access to PROD data. &gt; Don't forget, if the developer owns the code and you don't trust the &gt; developer The developer does not own the code, the bank does. And that is why our code is frequently audited. Not just for malice, but for stupidity as well. Not only that, but the systems are heavily firewalled and URLs are access gated through independent systems. Even if you built in a backdoor, you would have a hard time using it. &gt; In rare situations we put placeholders in the config files for the &gt; username/password We do this all the time for our batch applications. The config files are in protected directories and the app is deployed with restricted permissions in PROD environments. &gt; team is that issues in general are much easier and thus faster to &gt; solve We get what information we need from our ops team who have access to all of the configuration and know the systems far better than we do. They know all of the quirks of our application because they are watching it 24/7. By the time an issue is raised with us, they have investigated, and they already have all the logs and data we need. This is one of the cool things about having such a good ops team. Our ops guys are not uninterested, they are awesome. They rule the systems for a good reason. I don't want to step on their turf. I trust them to run a tight ship. Oh yeah, and back doors? Our ops guys are too eagle-eyed to let something like that slide.
well whats the error.. those are usually helpful
It just says SQLException. Nothing else. 
Thank you very much.
proof in point that the overall experience is what matters most to end users, subversion was almost as painful as maven last time i tried eclipse, to the point where I wound up opening another IDE or the command line any time i needed to refactor or do something non-trivial. could be that it's neither the fault of the eclipse developers or the maven plugin developers. but that doesn't matter. 
Sometimes it can make sense from a static context. Possibly a bunch of static functions which operate on one, or many instances of "orange" instances which are maintained within the class.
[Look at maps](http://tutorials.jenkov.com/java-collections/map.html).
In my years as consultant, this was business as usual - I got to know a new company with new folks and systems, folklore and so on. Nowadays I'm working at another company in-house on a single project, so it's much easier. If the project starts out new, a few rituals will go a long way. Depending on your role in the project, it may be important to first identify and get to know all shareholders (then again, if you're a junior developer, you better follow your seniors there). Listen to what they have to say, take notes. Look out for conflicts and note them down as risks. Get a feel for the scope of the project and think about module boundaries. On the other hand, if you're new in an established project, get to know the team, don't be afraid to ask everyone stupid questions (they'll be stressed and you'll take their time, but the sooner you get this over with, the sooner you can start being productive). Don't read too much code before you have down the aforementioned module boundaries and can navigate the broad structure (but I have in the past also taken over projects where the original team was unavailable, the code was a mess and the documentation outdated, in that case I had to dig through). Usually people are more important (and more helpful) than code.
Been coding for 15 years. I've always found the that reading and understand the architecture and technologies involved (libraries/apis/frameworks), along with actually using the product/feature is a good start. 
Now I haven't gone through it fully but it looks like my example would have me enter in Map allDogs = new hashmap(); allDogs.put(custName, "dog"+dogNum); in place of line 7 above. Where "dog"+dogNum would be the name of the dog object that I am creating (e.g. dog1), and whatever was entered into custName becomes the key for the element that is the dog object (e.g. jones). I'm fairly sure all that is wrong. It seems to me that I will run into the same issue with trying to name something with a variable. Only now it's a map key and map element.
I simply try to execute the code and see how things behave with a debugger. It also helps to understand how the data is structured, as much of the code in large applications juggle it around. An ER model can do wonders IF you can generate and see the relationships between some tables. My experience is that documentation, if any, won't help much as it is most likely outdated or insufficient or unclear. No one cares to maintain it when the project is big, unless the project is an API of some sort. Asking around and trying to build your own "knowledge base" doc with stuff you discover helps too. Other than that, try to keep positive with an open mind. Don't let your mind get polluted with things like "man, this piece of code is a piece of crap".
Where did the Apples go?
So does the Map&lt;String, Dog&gt;... mean that mean that I am creating a new map and that the key will be a string and the element will be a dog object? And how do I name the dog object I am creating? 
For example if you have a data structure where you need a "predecessor" and/or "successor" of each object, then what else would you do?
Find an existing expert and get the high level overview (and their opinion of where to start). Then review whatever documentation is available. Hopefully a network diagram or other architectural pictures to get an idea of how pieces work together. Ultimately you have to get the code on your machine and start building it. I don't feel confident until I can get a full Maven/ANT build running, which hopefully includes tests. If I can deploy it locally or to a remote dev machine - it's another great step. Test cases are my next move - they should explain basic functionality and show the entry points into the application. Then it's all JavaDoc, inline comments, and debugger step throughs...
Thanks yes I meant new to an established project. Usually I go straight for the architect or designers and as you say ask stupid questions. Fire up a build. Look at integration tests. Check frameworks and tools used. I feel it's an area unexplored, it really is up to the new guy to get up to speed as quickly as possible. A point of many wasted hours in lots of cases.
&gt; A point of many wasted hours in lots of cases. I find that if you diligently document your findings as "the new guy", you can already bring something to the table even as you ask stupid questions. At least the next new guy will benefit from your documentation.
Absolutely
Yup. They key will be a string (so your dog's name for example - but that would be a bad key for a map). The name of the actual dog should be taken as an argument in your constructor, as you appear to have above. That way you can retrieve the Dog object by calling allDogs.get(key), and get the dog's name by calling something like dog.getName() - assuming you have an accessor method.
What could possibly be the problem with having the two extra methods defined? forEach is just a slightly different way of doing the one thing you do with Iterables, and spliterator just lets you build a Stream, which is just a more powerful way of doing the same. Can anyone explain what could be "undesirable" about having these methods defined?
I'm a Java consultant so this is pretty standard fare: most projects last between 6 and 18 months so I tend to switch pretty often. I basically observe; how do others do stuff. Often they have some kind of documentation (a wiki typically) with development standards / guidelines and I start off by making sure my code formatter settings match theirs. From then on I tend to just start with small tasks and work my way up to more complex ones. And don't be afraid to ask questions: it's only logical that you know nothing about the project. You're not supposed to be asking how to write a for-loop (you should know that) but you can ask questions like why they're using mockito in one module and powermock in another for example.
I use spring source toolsuite distro of eclipse and it is okay with maven. If you are not using git you do need to get the right maven connector. 
The best resource I suspect are the guides at http://spring.io/guides. They provide 10-15 minute long introductions to various Spring- and Spring-ecosystem projects. Most build on Spring Boot. They tend to be our best-foot-forward examples, in any case. Also, I think the samples for the Spring Boot project are amazing as sort of simplest-thing-that-could-possibly-work examples: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples
Tuples aren't really any more Iterable than say any class composed of multiple member fields is...
Ask the author?
Pretty much any tree collection uses 'Node' objects that point to other 'Nodes'. So yeah, this happens a lot.
many things crossed my mind while reading your question - but no i can't read your mind if you already searched and found nothing, it maybe not a very common topic, 2 short sentences are maybe a bit low on effort?
Another common design pattern that uses this idea is the typesafe enum pattern. http://www.javacamp.org/designPattern/enum.html
I certainly do this all the time. Especially if I have object models that are shared by separate applications, I keep the model, any serialization code, unit tests, and integration tests in a nice clean shared module that gets "reactored" into the related projects. With CI, there's little risk of a breaking change lasting very long.
&gt; Other than that, try to keep positive with an open mind. Don't let your mind get polluted with things like "man, this piece of code is a piece of crap". I think that nugget right there is what separates IT professionals from civilians right there. It isn't letting frustration fool yourself into thinking something is undoable or unlearnable. 
The dark theme in Luna is actually a fork of the MoonRise theme that was donated by the developer so I'm not sure how much different it will be to use the actual MoonRise theme.
Usually for me, it's on the way to and from work and occasionally during the weekend.
&gt;And don't be afraid to ask questions this
Are you looking for GC tuning? 
on the job
Do you find in that kind of situation you read only enough to solve a problem rather than going more in depth?
depends on how large the subject is. when my employer switched from c to java in 2000 - yeah, i had to spend time outside of work to fill in the background about using and OO language. when i started using PHP and Javascript - not so much. they are object oriented scripting languages and, IMO, loosely typed scripting languages are easier to learn than strongly typed compiled ones because of that whole interactive execution environment. learning jQuery seems to be more like learning Java because jQuery has a richer library than javascript. yes, there are in depth nuances of PHP and Javascript that I haven't gotten to but i think it will be easier to zero in on those now that i've got a working knowledge of the languages. 
Am I the only who find Eclipse maven support nice ? Our codebase is with &gt;50 modules, average customized pom (plugins, property, some custom lifecycle) and Eclipse (and since Juno m2e too) handle it well. I tried the last couple of version of Intellij and I found its maven project management awful.
Java Performance by Charlie Hunt. Best. Book. Ever. http://www.amazon.com/Java-Performance-Charlie-Hunt/dp/0137142528
Exactly, that last point made no sense.
To add to this, the best way to learn is to read lots of good code and write lots of code. Reading articles and blogs are not going to be able to replace actually practicing the craft. This also means working with smart people where you can learn from other. In addition, in my company, we have a very strict code review and testing process. Code reviews not only ensure that code multiple eyes are looking at it but is a good way to learn new approaches of writing code. Often, people will comment, "have you considered using xxx library?" or "this would be cleaner if you use xxx design pattern". As a senior engineer, I also send my code to junior engineers to demonstrate different patterns and coding styles. Sometimes we send out preliminary code to each other just to have a basis to discuss design. Sort of like "this is how I plan to attack this problem. This code review is just stubs or interfaces, does anyone have any concerns on this before I spend the time to implement it". Code review is not just about the code but also spreading information and knowledge within the team. Even if your company or team does not have a structured code review process, you can start one informally with coworkers that you trust and value opinions of. I guarantee you that this will make you a stronger programmer and a stronger team over time. 
The [Bugzilla documentation](https://bugzilla.mozilla.org/page.cgi?id=fields.html) disagrees with you: &gt;**INVALID** &gt;The problem described is not a bug. &gt; &gt;**WONTFIX** &gt;The problem described is a bug which will never be fixed. "it's doing exactly what they want it to do" == "not a bug"
I have done some serious dev with vaadin in 2009 to 2011 at my previous job. Ama. Struts2 I don't know much. 
First of all - describe your application. Vaadin is the best choise for enterprise-like applications: forms, tables - all that stuff. If you need to build rich client/java-script application with some server backend, then probably, it's better to look for another framework.
whenever my eyes are open.
I can tell you a bit about Struts 2. It's very flexible, but in general you will want to follow the MVC approach. If you're using Maven, you should look into including the convention plugin. Struts 2 will "just work" without any configuration (no struts.xml required). MVC means model, view, controller. The Struts 2 Action class is your controller. The return value is the view, which is typically a JSP file (but can also be Freemarker, Velocity, etc.). Struts 2 doesn't have a model by default, but you can use the [ModelDriven interceptor](http://struts.apache.org/release/2.3.x/docs/model-driven-interceptor.html) to configure Struts 2 to use one. You should put your action classes in a package with the word "actions" in it, like com.foo.actions. URLs will automatically be mapped to classes in the package: /foo -&gt; com.foo.actions.FooAction. You should put your JSPs in /WEB-INF/content, with the name of the JSP matching the URL (/foo -&gt; /WEB-INF/content/foo.jsp) or the return value from the `execute` method in the Action class (/WEB-INF/content/foo-success.jsp, /WEB-INF/content/foo-input.jsp). See the [convention plugin](http://struts.apache.org/release/2.3.x/docs/convention-plugin.html) for more details. Finally, you can use the model class as a bridge between Struts 2 and the rest of your application. Especially, if you're using a DI framework like [CDI](http://struts.apache.org/release/2.3.x/docs/cdi-plugin.html) or [Spring](http://struts.apache.org/release/2.3.x/docs/spring-plugin.html). See also [Hexagonal Architecture](http://alistair.cockburn.us/Hexagonal+architecture). You can structure your application class something like this (if you're using CDI): public class FooAction extends ActionSupport implements ModelDriven&lt;FooBean&gt; { @Inject private FooBean fooBean; public FooBean getModel() { return fooBean; } // called when /foo is requested public String execute() { fooBean.save(); // the file /WEB-INF/content/foo.jsp will be used to show the result return SUCCESS; } } @Stateful // required to make container managed transactions work @Named // required to be injectable by DI @RequestScoped // required to destroy this bean after the request completes public class FooBean implements Serializeable { private String propertyA; private String propertyB; // setters, getters @PersistenceContext private EntityManager em; @Inject private FooDAO fooDAO; @Transactional public void save() { // business logic // save into entity manager // or, if you want to put the business logic elsewhere fooDao.save(...); } }
I start by setting up the environment. Once I can build and deploy I check to see if there are any known minor bugs. Pick bugs that are not critical for release, you don't want a project manager breathing down your neck just yet. I make sure to do everything by the book (even if it's simple one liner fixes), the main reason to fix these issues is to learn, this is not the time for short cuts. Make sure to get a lot of code review and ask for feedback on how the more experienced team members would solve the issue. Pick as many minor bugs as you have to to get a feel for the code base.
Does Alt + f4 still work? That is definitely the best feature in Eclipse.
yep - i got bit by a similar thing with webstorm (the javascript version). reported it and got a WONTFIX. webstorm some nice features for sure, but under the hood it seemed pretty kludgy http://youtrack.jetbrains.com/issue/WEB-6438 
Here's your first lesson, free of charge: It's Java, not JAVA.
 float SquareRootFloat(float number) { long i; float x, y; const float f = 1.5F; x = number * 0.5F; y = number; i = * ( long * ) &amp;y; i = 0x5f3759df - ( i &gt;&gt; 1 ); y = * ( float * ) &amp;i; y = y * ( f - ( x * y * y ) ); y = y * ( f - ( x * y * y ) ); return number * y; } John Carmack's code to quickly calculate a square root.
+1 It was my first Java book and still the best one.
Curious, where the heck did he come up with that magic number (0x5F3759DF)? Is there a method to get that number? Thanks :)
[Enjoy!](http://en.wikipedia.org/wiki/Fast_inverse_square_root#The_.22magic_number.22)
Well then. I stand corrected. Thanks for the link. 
Thanks man, that's pretty cool. For others, I found this link too: http://blog.quenta.org/2012/09/0x5f3759df.html
https://en.wikipedia.org/wiki/Duff's_device send(to, from, count) register short *to, *from; register count; { register n = (count + 7) / 8; switch(count % 8) { case 0: do { *to = *from++; case 7: *to = *from++; case 6: *to = *from++; case 5: *to = *from++; case 4: *to = *from++; case 3: *to = *from++; case 2: *to = *from++; case 1: *to = *from++; } while(--n &gt; 0); } } Yes, that is K&amp;R C. I know we are in /r/java, but this is what I like.
Thanks for the feedback, it is very much appreciated. I also made a basic html/web dev tutorial. More to come, this site is still very young. I am working as hard as I can on it. Please don't give up on it. I am trying.
You can use Duff's device in Java too.
You don't have to spend $45/month to get a VPS capable of running small Java Web apps. I run a couple of low-traffic Tomcat-based sites on a 128MB Xen VPS that costs $5/month or $48/year. You wouldn't want to run anything huge, but Tomcat can play in that amount of memory.
&gt; Now it’s possible to generate tests for methods and add them to an existing test class. It's about time!
Check out DigitialOcean, great pricing and reputation https://www.digitalocean.com
 number = 144 sqrtNumber = number ** 0.5
squareRootFloat*
/r/shittyprogramming
I just want them to fix the 2 year old bug so you can have it add the plus on the next line when you press enter in the middle of a string.
For some reason this surprises me- I distinctly remember seeing it used in Java somewhere before.
I'm running tomcat on an Ubuntu computer at home right now but I'm just getting used to Linux so Im not sure if getting a blank VPS and trying to config the entire thing myself is a smart idea? 
I use Digital Ocean for a little playground box and I can highly recommend it. $5/mo and if you archive your instances when you're not using them you only pay for when they're running, so even less than $5/mo. Great web interface as well, allowing you to pick from many various template machines when you create a new one.
AWS Free Tier meets your requirements: http://aws.amazon.com/free/ A "micro" instance comes with 613 MB memory and 30 GB disk. It's also a great way to get exposure to the AWS ecosystem. 
As /u/Marvelt says below you might be better off with [H2](http://h2database.com/html/main.html) which is in pure Java and should be easier to package with your app (just include the JAR file as a maven/gradle/etc dependency)
In my opinion, Struct 2 is not good at the moment. And my choice definitely is Vaadin. 
Could you explain why this is a faulty operation? I know there are probably some edge cases, but would this conflict with datatypes or return a float instead of int? 
Can you explain what the code does for us that aren't geniuses?
Finally, some code that kinda makes sense to me!
Its a clever way to do loop unrolling by putting a do-loop inside a switch statement. It just happens to work due to the switch statement's fall-through behavior and labeling being equivalent to `goto` labels. It is completely redundant with modern compilers, since compilers like gcc include the `-funroll-loops` optimization option.
What I'd give for proper tail recursion on the JVM.
Loop unrolling? Just graduated with a BS in computer science and ive never heard of this... :(
Because 9 times out of 10 it'll be far more of a pain in the ass to implement and/or maintain than it's worth.
Not a direct answer to your question, but never use "smart" code. It makes the code hard to read. One of the great strength of Java is its readability. But don't use smart code in any language. If I was reviewing code and saw a XOR swap, I'd smack whomever is responsible on the fingers. However, some of the answers I saw in this thread are actually not smart for the sake of being smart, but are the right way to do things.
Heroku.com
It is also important to note how maps work with regards to duplicate objects. If you try to put in a dog with the same key "fido", then it will replace the value dog object regardless of whether that instance of the dog object is same or different (using the .equals () method)
No readme? How does this compare to other benchmarking tools like caliper?
In Java, the correct syntax would as follows: double number = 144.0; double sqrtNumber = Math.pow(number, 0.5);
This is great. Good work!
I thought it was inverse square root, not normal square root. Also, wasn't it confirmed by Carmack that somebody else who worked at id wrote that chunk, not himself?
Had to Google that. http://introcs.cs.luc.edu/html/gcdexamples.html#preview-recursive-gcd Greatest Common Divisor
This is by no means smart code like the XOR example or the other stuff posted, but it also has a bit of this hacky component. Also, it's Java-specific, for a change. I just changed this code partly from its instance version because that one used a date string generator from yet another class (It's quite a lot of code already.), so if there's a stack trace offset in the code, it *might* be off, didn't test it. It offers two very convenient debugging methods: syserr(yourText) outputs ERROR: com.you.yourproject.YourClass.theMethodYouUsedThisIn(): blablablablablabla , which is very useful for debugging: You can put it in places that you don't expect will happen (e.g. a file missing that was shipped with the code). methodCallPing() outputs 1403931330257 com.you.yourproject.YourClass.theMethodYouUsedThisIn() in YourClass.java line 676 (which would have been much more useful if I could have left it in its original proper-date-string state) which is great if you just want to find out at what point which method is called. final public class DebugUtils { final private static int offsetFromTopOfStack; // This value is OS/Java-version dependent, so STATIC is close enough. static { // Determine offset from top of stack. int i = 0; // for (StackTraceElement ste : Thread.currentThread().getStackTrace()) { for (StackTraceElement ste : new Throwable().getStackTrace()) { i++; if (ste.getClassName().equals(DebugUtils.class.getName())) { break; } } offsetFromTopOfStack = i; } /** * Returns a stack trace entry of your choice or NULL if your offset was out of range (or if something else went * wrong). This Method takes into account the OS/Java-version dependent offset shift, so if you figure out a certain * offset for your Method call, you can theoretically rely on it. */ final public static StackTraceElement getStackTraceEntry(final int negativeOrPositiveStackTraceOffset) { // final StackTraceElement[] ste = Thread.currentThread().getStackTrace(); final StackTraceElement[] ste = new Throwable().getStackTrace(); final int idx = offsetFromTopOfStack + negativeOrPositiveStackTraceOffset; if ((idx &lt; 0) || (idx &gt;= ste.length)) { return null; } return ste[idx]; } /** * System.out.println() of the following kind: * &lt;p&gt; * "1403931330257 com.you.yourproject.YourClass.theMethodYouUsedThisIn() in YourClass.java line 676" * &lt;p&gt; * Spares you some typing plus the thought "What do I put here that tells me where this text is?". */ final public static void methodCallPing() { methodCallPing(2, null); } /** * Like the other overload of this method, except you can say something. */ final public static void methodCallPing(final String additionalText) { methodCallPing(2, additionalText); } final private static void methodCallPing(final int steOffset, final String additionalText) { final StackTraceElement ste = getStackTraceEntry(steOffset); if (ste == null) { System.err.println("INTERNALERROR: DebugUtils.methodCallPing() could not get desired StackTraceElement!"); return; } System.out.println(System.currentTimeMillis() + " " + ste.getClassName() + "." + ste.getMethodName() + "() in " + ste.getFileName() + " line " + ste.getLineNumber() + ", " + Thread.currentThread() + (additionalText == null ? "" : ": " + additionalText)); } final public static String getGlobalMethodName(final int stackOffset) { final StackTraceElement ste = getStackTraceEntry(stackOffset); if (ste == null) { System.err.println("INTERNALERROR: DebugUtils.getGlobalMethodName() could not get desired StackTraceElement!"); return null; } return ste.getClassName() + "." + ste.getMethodName() + "()"; } /** * System.err.println() of the following kind: * &lt;p&gt; * "ERROR: com.you.yourproject.YourClass.theMethodYouUsedThisIn(): blablablablablabla" * &lt;p&gt; * Very convenient for debugging. */ final public static void syserr(final String errInfoText) { final String err; if (errInfoText != null) { err = errInfoText; } else { err = "?"; } System.err.println("ERROR: " + getGlobalMethodName(2) + ": " + err); } } 
Sorry for putting so much code in here, but I felt like offloading stuff that could be very useful while at the same time being obscure. This method checks if two numbers are *kind of* similar, something that I hadn't seen so far: /** * Returns TRUE if the two double values v1 and v2 are similar. * &lt;p&gt; * Example: v1 is 500, v2 is 550, and this might still count as similar in your opinion. If you set maxRatio to 0.11, the result will be true, if you use * 0.1, the result will be false. It does not matter if you swap v1 and v2. If you set maxRatio to NULL and * maxDifference to 50, the result is true, with 51 the result would be false. Again, v1 and v2 can be swapped * without effect. * &lt;p&gt; * If "onlyOneNeedsToBeTrue" is false, then both conditions have to be true for true to be * returned. If it is true, then only one needs to be true for true to be returned. (To memorize this easier: This * parameter bends the outcome-probability more towards false or true.) * &lt;p&gt; * Possible use: What ultimately caused me to write this Method is that I needed to determine the newlines used in a file. I know how many \n and * \r and \n\r and \r\n there are, now I have to make a decision. To just use the ratio-similarity would be * insufficient, because what if there are only like 2 in the file, and I use a 10% ratio (0.1)? This would result * in an ill decision. I also needed to take the overall difference into account. */ final public static Boolean isSimilar(final double v1, final double v2, final Double maxRatio, final Double maxDifference, final boolean onlyOneNeedsToBeTrue) { if ((maxRatio == null) &amp;&amp; (maxDifference == null)) { return null; } boolean ratioOK; boolean differenceOK; if (onlyOneNeedsToBeTrue) { ratioOK = false; differenceOK = false; } else { ratioOK = true; differenceOK = true; } final double mean = (v1 + v2) / 2d; if (maxRatio != null) { if (maxRatio &lt;= 0) { return null; } final double ratio = ((mean / Math.min(v1, v2)) - 1) * 2; ratioOK = (ratio &lt;= maxRatio); } if (maxDifference != null) { if (maxDifference &lt;= 0) { return null; } final double difference = Math.abs(v1 - v2); differenceOK = (difference &lt;= maxDifference); } if (onlyOneNeedsToBeTrue) { return ratioOK || differenceOK; } else { return ratioOK &amp;&amp; differenceOK; } } 
Scala? Is that not proper tail recursion?
This is from the days when compilers were glorified assemblers. Its a micro-optimization. I wouldn't worry about it. http://en.wikipedia.org/wiki/Loop_unrolling
Fake it till you make it: https://blogs.oracle.com/jrose/entry/tail_calls_in_the_vm
I'm not sure what you mean by mail. If you want mail for your domain, there are 3rd party services that would probably be better. /u/jplget mentioned one. I use Google, but that's paid. You could install your own mail server, but tbh mail servers are pretty complicated and a pain to configure. I don't suggest it unless that's something your'e interested in. I did it just enough to know that it's better to just use a 3rd party. But if you wanted to you could, a VPS is just renting a computer from someone else, it can do anything a computer can do (and a server is just a computer). [Official Ubuntu documentation](https://help.ubuntu.com/community/MailServer) If you want to send mail, then that'll be done through your app and connecting to an SMTP server (which will be provided by your mail service). 
Digital Ocean is good, but once your app grow huge, Openshift is the cheapest one if you want to be able to scale on demand compared to other cloud provider.
No matter how high the version number, still not interested.
what's the use case? printing points? if we put something that takes longer than the update intervall in the doTick() method elapsedTicks will not amount to the actual elapsed ticks ? since it will only check if enough time has passed for one tick and then set the timeOfLastTick to now in updateTimer()? also why not use a timer from the standard library?
I was just messing around. Trying to work out how things that come standard work helps me use them better.
ok, so the MyClass class is how i would use the timer?
Yeah. MyClass's constructor updates the timer and runs the ticks.
ok, so to use this timer the timer relies on me calling the updateTimer() and also regularly enough that the timer will notice every tick; also i wouldn't be able to see timer.elapsedTicks you use for the loop, it has package private access in the Timer class ( and i shouldn't have public access to that field, that's ok) generally i would not want to do that stuff, the timer should update itself (you may need concurrency for that)
Yeah, I was seeing how far I could get before I needed concurrency. I'm really new to the subject.
Thanks I'll check it out!
I messed around with java.util.Timer for a bit and now I just have the program schedule a task just before it enters the loop and every time it does a tick it schedules the task again. EDIT: Here's the files: http://pastebin.com/vGvvisKB (Sorry for the mess that is is)
Too bad Swing is being deprecated in favour of JavaFX from Java 8 onward :(
you could use java.util.Timer's scheduleAtFixedRate method so you would only have to schedule it once http://docs.oracle.com/javase/7/docs/api/java/util/Timer.html#scheduleAtFixedRate(java.util.TimerTask,%20long,%20long)
Have you ever seen the Guava's [Splitter](http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Splitter.html)? https://code.google.com/p/guava-libraries/wiki/StringsExplained#Splitter
Nice, and for longs?
I'm the author of Bayou framework. Hope you'll like it. Ask me any question.
hm hard to say but, the main-method starts/is a thread; in the main method you create a new thread; the timer has it's own thread and the Display maybe too. not sure what for you actually need the timer, it seems to do nothing right now; if you look at the example http://ninjacave.com/lwjglbasics1 you maybe don't need more threads, or what exactly do you want to do?
This is what comments are for. If changing something to smart code is resulting in real performance improvements, use it, but document it properly. 
Looks great! Tell me please 1. What inspired you to create Bayou? 2. Is it used in production environment already somewhere?
The reason we dont do it now-a-days is because micro-optimizations are no longer the programmers responsibility. There was a shift of this when programmers realized that it is more efficient to convey what you are trying to do than it is to convey exactly how to do it. This allows the compiler to have more say in the specific implementation - removing the burden of tedious/unmaintainable optimizations.
Yes, I had seen Guava's splitter a few days ago, after the above method was already months old, but I wanted to explicitly do one-character-splitting with no options, anyway, so the above solution might still be a bit faster (not that I really care about that too much). But I like to 1) do stuff myself (partly because it makes me indepentent of libraries) and most importantly 2) strive for simple straightforward usability. This method's interface is absolutely clear, and there are no hidden options to know about. - But it's not like I don't value available library code, I just extremely rarely need any.
1. I wanted to have a set of APIs that model HTTP precisely and cleanly. They should be low-level and composable. The Async API is also an interesting project. 2. It's used to host its own website (bayou.io), obviously. Other than that, nothing yet. This is the initial public release, so give it some time.
One of the problems of this code is it centers the JFrame across the screen width, which may be irritating if you have a duel screen setup, and the centered frame is now split across two screens.
It's something compilers do for us these days. By "these days" I mean for the last two decades at least.
Maybe at the bytecode level?
At the bytecode level, the JVM is really just like any other stack-oriented microprocessor, albeit with some very weird (and hard-to-implement-in-hardware) instructions, and weird memory semantics. So you can do pretty much whatever you want.
relevant username
You cant cast from File to Class. What you probably want is java.io.File.class or File f = new File(somePath); Class&lt;?&gt; cls = f.getClass();
"If code is harder to debug than it is to originally write, then you should never write code as cleverly as you can, because then by definition you will not be clever enough to debug it" - Paraphrased from somebody
Not a Java programmer here, but shouldn't that be Math.sqrt(number), if going for code intent clarity? Also, MyNameIsOP didn't say it was Java, my guess would be python, where it is correct syntax. I'd still probably suggest to use non-generic power operator with python, so importing math and using math.sqrt() would also be better. edit: I just noticed I was on r/java
It's actually originally from SGI (of course), and it's C rather than Java, to be fair. Regardless of who came up with it it's black magic. It's using pointers to tell the computer to simply treat a floating point number as an integer, subtracting another integer from that integer and getting a good answer to a floating point calculation that you didn't have to do from that.
This is my go to response to anyone who says "computer science is just programming" 
That comes under beware of premature optimisations, though. If it doesn't work when it's simple *carefully* break out the complexity.
What is the use case for this?
:) Well, I didn't think about general ways to use this. But 1) recently, someone in one of Reddit's java forums asked for how to do this. And 2) I developed this for myself for the following use case: I thought about a more reasonable unit system for the time of day. While I'm aware of the astonishingly high number of factors that 60 (12) based numbers have in comparison to the 10 or 16 based numbers, I find the 60 60 24 time-of-day system unreasonably complicated. I believe that the binary (and hence also hexadecimal) system is the most natural number system, the one that is most purely oriented towards the concept of *difference* and hence the concept of *meaning itself*. A smaller (integer) base than binary does not exist, so it's the purest numerical expression of the concept of difference or form. Without that concept, nothing would exist, or all that exists would just be a formless void. So, I tried to come up with candidates. First, I thought "60 seconds/minutes? Why not 64?" and implemented it in a little Java application. Then I realized how simple and awesome the correct answer is: Just calculate the *fraction of the day* (0 to 1) and express the result in hexadecimal. Since I didn't arive there right away, I made the above function to have all bases covered. Screenshot: http://i.imgur.com/WHJZ2nR.png
 private int gcd(int a, int b) { return b == 0 ? a : gcd(b, a%b); }
you sir, made my day
I was using the power operator because the guy above me used it, but the correct syntax would be to do `double sqrtNumber = Math.sqrt(number);` 
Recursion!
Linode gives you a decent sized box for $20/mo. I have several low traffic sites on one virtual right now.
No, not yet anyways. Swing will still be supported, but there alternatives to swing. My guess is that it will probably be depreciated in the future. http://www.oracle.com/technetwork/java/javafx/overview/faq-1446554.html#6
Even if you could, there is no point. The jit unrolls loops for you anyway 
It's not even particularly obscure, the main issue is the code at the top calculates the inverse square roots of floating point numbers which is a quite separate operation.
I've got a master's degree in computer science, but that just made my head explode. 
&gt;A smaller (integer) base than binary does not exist You could have a singular number system with only one digit, and you just count the number of digits. So one is 1 and three is 111 and 8 is 11111111.
Used this Saturday morning and afternoon to write code using new tech when I should be jogging and taking care of the yard. It's kind of a struggle to manage my responsibilities. I have to keep up with new tech, but I have personal responsibilities too.
Never call this in production usage... computing a stack trace is very expensive.
 Integer.bitCount(num);
... or use a proper logging framework which will give you all this and more and be configurable to enable/disable log levels and associated overhead in production/staging/development.
Ternary logic ? A function with return type Boolean that returns null looks like a bug wanting to happen. Especially if not documented.
Except what does it look like in the IDE when I show Javadoc on a call to that method?
Actually there is a standard notation for this that is also supported by `String.format()`, although it does not print the same way than your code does. It uses the 0x111.222p33 notation where p denotes the ~~operand~~ exponent which is in powers of two (not 16). Example: String.format("%a", 20.75) -&gt; 0x1.4cp4
Well, the [debug menu](http://i.imgur.com/TnnmYv7.png) in eclipse shows just the 2 threads anyway. But the original purpose of the timer was for running update ticks in a game I made.
I use something similar to transmit temperature measurements from a sensor over a serial line. I'm using text mode transfers for the easier debugging but converting to decimal from the internal hex representation is too expensive for my device so I use hex floating point (which is standardized).
Aw you left out the original comments 
&gt; Too often I need to split a String into parts where one part at the end could possibly be empty. Java's split function drops that last entry completely. `String.split()` supports this. Simply supply -1 as the second argument: "/path/to/something/".split( "/" ); -&gt; ["", "path", "to", "something"] "/path/to/something/".split( "/", -1 ); -&gt; ["", "path", "to", "something", ""] 
For simple while loops I've always been a fan of operations inside the while, though not very common int DivideByToInt(float num, float denom){ int q = 0; float sum = 0; while(sum += denom &lt;= num) { q++; } return q; } Note: I know this is badly typed code. I'm on my tablet atm so I'm not too inclined to put much into it. 
Using what definition?
[full disclosure: I am the [JMH](http://openjdk.java.net/projects/code-tools/jmh/) maintainer] While it is an interesting concept, the lambda-fied benchmark frameworks usually suffer from a quite a few nasty problems which almost always render benchmarks results incorrect. For example, in the sample code you have on the project front page: * "src" is fully predictable, and can be folded within the executed code, which would mean the part of the benchmark is eliminated, while users expect them to run. This can be avoided with a few arcane incantations, like pushing users to always capture the object in lambda context, not the copies of local variables, and then "force re-reading" on each call. But, that's confusing and error-prone. * The results from the benchmarks are not claimed, which sets an executed code for a dead-code elimination, again removing parts of the benchmark. It can arguably be avoided by requiring benchmark lambdas to return the value, and deal with that return value in some manner (this task is super-hard in itself), but that will introduce quite a mess for acceptable functional interfaces in add(...). * Most sane frameworks would fork out the distinct tests in separate JVMs to avoid mixing the profiles during warmup and measurement; lambdas make that hard: would you serialize lambda *and* its context to pass to other VM? * etc, etc, etc... If you still want to follow the route of building the proper lambdafied harness, I would recommend to watch my [benchmarking talks](http://shipilev.net/#benchmarking), and then try to port [JMH Samples](http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/) to your harness and see if it is up to the challenge.
+/u/dogetipbot 40 doge verify 
What are the benefits over Tomcat or Jersey? Do you have any benchmarks?
You forgot to mention that 'continue' can also be used with labels.
Similarly, if this is going out on the web, where does security come into play? Roll your own? I'm pretty happy with EE 7 APIs which include things like async calls and WebSockets. 
Can't believe I've never even realized we could have labels, though I've seen the same functionality in PL/SQL. Mind you, these use cases would probably be better served with lambdas in SE 8. And I personally get squiky when I have to use break/continue in the first place. As you said, "people subsequently reading your code will probably try to strangle you".
Better is: public static final int gcd(int a, int b) { for (;;) { if (a == 0) return b; b %= a; if (b == 0) return a; a %= b; } } No recursion, no variable swapping.
You might note that the bases start with the digit zero, and that 0000000 doesn't mean 7.
Probably a consistent one rather than a fairly sloppy definition in which 'base one' is essentially tallying while every other base doesn't use tallying at all.
The best way to learn is by doing it, there's a site with java challenges to train logic and stuff. http://codingbat.com/java 
That's disgusting, and I love it.
Can you push code in github so we can track the development?
Thanks so much. I had some ide issues so sorry it took a while to respond but I do appreciate your assistance. 
Agreed, just a bit of the old "avoid GOTO like the plague" reflex.
Then use zero. It doesn't matter what symbol you use. And 111 doesn't mean 7 either, unless of course you're using base 2.
In my experience, no. I've always had to parse out the list into a comma delimited string and pass it to a subreport as a variable.
Maybe some jasper ninja can give a better answer (tried StackOverflow?) but I've found that to do anything remotely complex means having to do it in a sub report, or preprocess everything before handing to Jasper. 
&gt; What are the benefits over Tomcat or Jersey? I believe Bayou's APIs are better than Servlet API:) especially the Async part. Bayou can easily handle tens of thousands of concurrent connections with very low memory footprint. At least I claim so. Hopefully some impartial parties can benchmark Bayou to verify that. Jersey is a higher level framework, so there's no direct comparison. But it's easy to do REST on Bayou too. &gt; Do you have any benchmarks? Benchmarking is better done by 3rd parties. My own testing suggests that the bottleneck is at the network layer, and Bayou's performance is about the same of Nginx and Netty's, probably a little faster. 
Bayou is a much lower level framework than EE. Some programmers may want to, or need to, work on low levels. 
yes, will do.
This is such a programmer community thing to do. "Oh look cute you made a lit - Fuck you and your shitty project you fucking idiot. Why the fuck would anyone use this over hurr durr" Sure, laugh to me, but you shitheads do this every fucking time. Super passive aggressive scumbags.
Java provides async APIs for file read/write (since 1.7), see [AsynchronousFileChannel](http://docs.oracle.com/javase/7/docs/api/java/nio/channels/AsynchronousFileChannel.html), which Bayou's [FileByteSource](http://bayou.io/release/0.9/javadoc/bayou/file/FileByteSource.html) and [FileByteSink](http://bayou.io/release/0.9/javadoc/bayou/file/FileByteSink.html) are based on.
Actually, you can break from any enclosing statement, not just loops. step1: { ... if(condition) break step1; ... } But `continue` with label only works for loops.
Thanks, copied your comment into my library. Just like with my getStringFromDouble method, I prefer the exponent-less output, though. Also, String.format comes with a bit of parsing-overhead.
Well, I could have thrown an IllegalArgumentException in that case instead of causing the NPE further up. But it's a matter of code-style: I have learned to live with the null just fine. Since the Java creators *did* decide to use null |Let's not judge that decision :| I tend to actively use the null as a return value. Not just where it is inevitable, but whenever it can be useful, hence I do not fear/hate the null. This leads to me treating cases like this one here differently. I check for null returns in most cases. &gt; Ternary logic ? Not a problem if the arguments are proper. I could have documented it, though, but I didn't plan on publishing this.
Not more expensive than creating an Exception instance, and that happens more often than the test- and error- output caused by these methods.
Interesting thought. However, I rather want to see the increase in String length as an inevitable necessity than being the sole means of expressing the concept of *difference*. Also, let's think of bits/transistors: How would the presence or absence of a "1" translate to engineering a computer? The computer would still have to denote somehow "Is there something?" or "Is there not something?", which translates to 0 and 1. You could argue that the system would rather have to denote *how many* elements there are, but now you'd have an engineering problem: If you need to store e.g. 100 or 256 etc. different values via changing the voltage, you would need *a lot* of mathematically-distant thresholds which is very hard to do reliably. If you wanted to use several such registers, you'd suddenly have the counting-problem again - the problem of several elements. We solved this before via different voltages and lots of thresholds, but now we can't just use a third voltage-register that expresses how many other registers there are - it also has to take into account their voltage. Hence the solution would be to right away use more thresholds and/or a larger range of voltages. In short: The solution does not scale! We need to have one simple element that can describe the concept of *difference*, then we can use as many of those as we want to express larger or more complex values. The simplest such element is the either-0-or-1 bit. A different way to look at this is the problem of *decision*: E.g. "Is the value equal?" This is a binary decision: Either, or. Also, there are the [logical absolutes](http://rationalwiki.org/wiki/Essay:On_Logical_Absolutes) (and [truth in logic](http://en.wikipedia.org/wiki/Truth#Truth_in_logic)). E.g. something either is the thing it is, or it is not the thing it is. The smallest element to describe *difference* in the numerical realm would be one that has two states. The smallest element that describes whether your "11" String has two elements or just one that can reliably be engineered is the either-0-or-1 bit. Hence &gt; I believe that the binary (and hence also hexadecimal) system is the most natural number system, the one that is most purely oriented towards the concept of difference and hence the concept of meaning itself.
It's important to note that this use case is one of the very few where reflection is the right answer to this problem. In most other cases, reflection in this situation is a quick-and-dirty solution and an anti-pattern. It's willfully disregarding what the language is saying: you've done the design wrong or you haven't developed for testability correctly. Private methods and fields exist in support of testable methods. In most cases, you should test those testable methods. If you can't bring about the behavior you want to test in the private method via exercising these testable methods, chances are: you're trying to test code that won't be run under the conditions you're testing for (in which case the tests need to be improved) or your design is hiding the wrong things. You'll be much better served by figuring out how better to design the code than to use this shortcut. I bring this up only b/c someone reading this post might well be tempted to use this solution whenever this problem comes up, rather than in the specific instance of legacy code in which OP brought it up.
I use the free tier of openshift and very happy with it. You can read more here: http://dmly.github.io/blog/2013/05/01/diy-java-app-server-on-openshift-so-far-so-good/
Well said. If you do have to resort to this it's usually against a dependency's private members. Ie ones you have no control of and are not easily mockable. Spring's got you covered: http://docs.spring.io/spring/docs/4.0.5.RELEASE/javadoc-api/org/springframework/test/util/ReflectionTestUtils.html
Powermock's [Whitebox](http://powermock.googlecode.com/svn/docs/powermock-1.2/apidocs/org/powermock/reflect/Whitebox.html) api provides this funtionality so no need to reinvent the wheel.
It can hardly be considered as a bug, more as a feature. Moreover, such behaviour could lead to sneaky bugs in languages where semi-colons are optionals.
I know that this isn't really what you're getting at, but in my experience, pair programming is the best way of getting someone up and running in very little time. Another benefit of it is that new hires get to absorb the prevailing coding conventions without having to waste time reading confluence pages.
double-post link for comments: http://www.reddit.com/r/javaTIL/comments/29c6h5/jtil_you_can_break_to_an_outer_loop_with_a_label/
Looking for Java assignment help? Connect with Ask Assignment Help for quality and plagiarism free Java programming and homework help solutions. Send assignment questions at support@askassignmenthelp.com
Take it from someone who's had to deal with that nightmare: don't use JasperReports. It's terrible.
Except now you are creating two Exceptions potentially... the one that caused the error in the first place, and now this one to get the class this has been called from. I'm not knocking the code, it serves a great purpose in debugging, but warning in case people were to use this outside of an exception thrown scope.
What's the alternative? It seems alright, and offering report output in multiple formats is really great. Plus templating reports in a markup format is much better than the experience I had generating enormous custom reports with Apache POI.
&gt; Except now you are creating two Exceptions potentially... the one that caused the error in the first place, and now this one to get the class this has been called from. I didn't think people could use it like that. *My* use cases have always been stuff like "This kind of impossible scenario popped up anyway. Take note.", *defitinely* not "An exception occurred. Better use my syserr() method instead of the already created Exception to communicate this."
99% of the time, if you are following software design best practices and writing your components in a sane way, you should have zero need to ever do this
In general it's a valid question, although this particular one is ill informed. There are a few well respected solutions: netty for instance. It's fair to ask what the benefits of any new project are. How does this project improve on the existing 'best of breed'. Down vote for the vitriol.
I'll usually take a couple of hours at the end of the day (on a slow day) to code up something quick to test out ideas. Thru the day I usually have an article open to read while waiting for a build, server startup, db update, whatever. Sometimes it applies to the job, sometimes not.
Hmm, I just tested your code and I get 97 for both pieces of code. How are you running it?
Yup. Thats exactly what my configuration is as well
Dammit I made a mistake. You are right, I was running it wrong. I better delete it before anyone wastes their time on this any more.
I believe your issue is an infinite loop. The first time through your while() loop, str.indexOf("(red)") does return 0 - you should be able to test this by stepping through with a debugger. The problem comes on subsequent loops because "start" gets set to the index of (\red) - which is the (length of the string - 6). So (start &lt; str.length()) will always be true and your loop will never terminate. To fix this you probably want something like: String end = "(/red)"; int second = str.indexOf(end, first) + end.length(); As an aside it is probably worthwhile to validate your input (i.e. make sure that the text contains (/red) to avoid the case where bad input causes infinite loops. You might want also to look into using a java.util.Scanner and/or regular expressions to parse that kind of text construct. 
OK. If it helps put it in context, the string in question is: (red)(R U\' R\') d (R\' U²) (R U²\')(/red)(green)(R\' U R)(/green) And I need to style the sections between the tags, and then remove the tags. I'll give your solution a shot, unless you come back with anything else :)
Ah, another thing you should probably have then is some code like this: int first = str.indexOf("(red)", start); if (first &lt; 0) break; that will avoid an infinite loop in the case where you've parsed the (red) tags but there's still a longer string beyond just that (as in your example above).
This actually works now :) I just have to figure out how to delete the tags :P If I try to delete them in the loop, I end up getting IndexOutOfBounds errors since I'm concurrently modifying it :(
Yeah, that's why I suggested a regex, something like capturing: \\(red\\)(.*)\\(/red\\) the middle .* can be captured and retrieved by the regex engine automatically without having to strip anything out yourself. Of course that comes with its own set of challenges/pitfalls and has quite a learning curve and could be overkill for this relatively simple use case, so it would be a tradeoff for you.
I have worked with regular expressions before, but its been years :/ Is that how you would handle this situation?
Thank you for your feedback! I am happy to contribute something to the Java community, after all, I have learned so much from free content myself. Let me know if there is anything I can do to improve the format of the tutorials. I'm trying to think of ways to make them more condensed, which is difficult because there is so much material to cover. I'm looking forward to creating the next one, hopefully we can start working pretty soon on setting up persistence in our application, and then start moving toward the creation of a client written in AngularJS.