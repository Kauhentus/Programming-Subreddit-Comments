Very interesting project! Maybe I'll contribute someday.
Thanks, makes sense.
Neat! Is this related to Lobo? Or is a new code base? You might get some additional help from the Lobo devs - if they are still working on it.
It really depends on what you mean by the "beast" and what you're trying to accomplish. Java is enormous with some many libraries, standards, 3rd party libraries and 3rd party libraries that compete with standards and other 3rd party libraries...that absolutely nobody can know everything. There is also Groovy/Grails which is a simplified version of Java: It also runs on the JVM and can be use interchangeably. Grails already comes with a predefined framework and build system. It maybe a good starting point to understand how everything in a Java web app fits together. 
I'd look at something pulls and parses information from the net. That lets a little code do a lot of things. For instance a simple Reddit client, RSS reader, twitter client, etc. You're able to access tons of content online with code, and then do interesting things with it. 
&gt; Each endpoint class must be a Spring bean in order to be able to use Spring &gt; DI inside the JAX-RS endpoints. The `@Component` annotation makes it a Spring Bean, and you wire up your services the standard way, with `@Autowired`. Since the audience of this article is Spring developers, why would the author bother to spell this out?
Standard CRUD means your I/O will be taking all the place, the VM has little to do with resulting performance. SSDs FTW.
Yes it is [a deep fork of Lobo](https://gngr.info/doc/credits.html). Sadly, there is no activity on the Lobo project since 2009. And a new maintainer has taken over Lobo via some strange transfer policy in SourceForge.
Is there anything someone with less than a year of java experience can help with?
Yea isn't that necessary to show almost every website imaginable?
Probably easier if you post a question or something.
In short, those technologies are a major concern from a security and privacy perspective. Would you allow an unknown entity to execute their code on your machine and store data on it? Whenever you visit a an unknown website with javascript and cookies enabled, that is exactly what you allow the website owners to do. In our opinion, only trusted websites should be allowed to execute their code and store their data. The longer version is [here](https://gngr.info/doc/introduction.html).
I feel that the hate for JavaEE in this subreddit is rather high, but i would still say that you should learn that before going into Spring boot or whatever. In JavaEE 7, if you use JSF you don't really need to write any xml at all. web.xml is deprecated, beans.xml is deprecated. The only xml that you might need is faces-config for specific navigational rules. Creating a EAR project in JavaEE 7 is not any harder than using Spring boot. And if you want to use maven, there are several good archetypes to use. JBoss even has a good "example" archetypes that explain the use of CDI etc. My two cents atleast.
Am I the only one who dislikes JSF? IMHO it is overly complicated (server-side stateful tree based on the Dom with a complicated lifecycle), way to chatty (constant calls from the client to the server), difficult to debug (XHTML and components to actual HTML and javascript, and half of the client code runs on the server), Ajax is pretty much bolted on (my experience from JSF 1.2; maybe JSF 2.0 is better), and it hides what are you actually doing (writing HTML and JavaScript). To be honest I prefer making web applications using HTML and JavaScript with Angularjs (or something similar). But I will never work with JSF again if I can help it.
You may want to take a look into micro frameworks such as Spark or Jodd. [Here](http://www.gajotres.net/best-available-java-restful-micro-frameworks/) you can find a little overview over some other frameworks for Java. I have only worked with Spark among those and I must say, it is very straightforward and simple. You will use Java8 language features a lot if you go with Spark. Other than that I had great experience with Vaadin and JBoss (or Tomcat) inside Eclipse with the plugins. With Vaadin you can create Web UIs like you would create a simple Swing desktop application. Additionally with the plugins you will not have to change any XML code etc. by hand. If you want to go with this approach, i suggest you get Eclipse for JEE with the JBoss, Vaadin and IvyDE plugins. This will however not make you learn much about web.xml or maven and so on.
Yes, I am closely following Kotlin. Waiting for things to stabilize over there a bit. Our project's not very stable either at the moment. We seem to be at a cusp. Java 9 making lots of progress. Scala catching up with lambdas from Java 8. Kotlin maturing towards 1.0 release.
&gt; I need some help on Java homework. In this case, you should post to /r/javahelp. /r/java is about **News, Technical discussions, research papers and assorted things of interest related to the Java programming language** but not about actual Java programming. &gt; I need somebody who can help me out That's what /r/javahelp is for. Also, you will need to state your problem clearly, show what you already have, what errors you get and any piece of information that could help us deciphering your problem(s). Before you post to /r/Javahelp, be sure to read the **sidebar** there, the [Posting rules](http://www.reddit.com/r/javahelp/wiki/posting_guides), and, if applicable, the [Code Posting Guidelines](http://www.reddit.com/r/javahelp/wiki/code_guides). As it is right now, this post is of absolutely no value to any of us and also to you because you do not provide any information on what you need help with. Also, if you're *that* stuck, you might want to use a tutorial to help you getting back on track. The /r/javahelp wiki has a [Tutorials Page](https://www.reddit.com/r/javahelp/wiki/tutorial_list) with some recommendations. In particular + [Java for Complete Beginners](https://www.udemy.com/java-tutorial) by John Purcell, free on Udemy.com + [MOOC Object Oriented Programming with Java](http://mooc.fi/english.html) free from the University of Helsinki are very recommendable.
Jigsaw is the most exciting part of java 9. Beyond that, not much really.
well, this thing only works because of a Java 9 feature. The REPL. I think the REPL is super exciting.
I'm currently doing something very similar. I wrote Java in University, but Python is my main professional language. I've been using https://github.com/akullpp/awesome-java#resources as a useful aggregator, and writing a toy project with the help of Effective Java and Java 8 in Action. 
great article!
REPL is a Blub http://www.paulgraham.com/avg.html
Imagine the bar that is set between getting started with java in a REPL, and understanding how to set a break point and run with a debugger. One is easy, the other takes advantage of the fact that you already have a good understanding of java. The REPL will be great for language adaptation and education.
So, everyone just gave up on transactions? I've been wondering for a while now where people keep finding all these brilliant devs who seem to have no problems working without consistency guarantees, when I can't seem to interview a single one who even understands the difference between a static and an instance-based nested class.
Because it doesn't work out of the box. JAX-RS wants to create the objects itself so it can process the annotations and decorate the service. Sprint wants to do the same. How do you make them share? Well you have to write some glue logic. That is presumably the point of spring-boot-starter-jersey, which the article is about. Yet it doesn't mention this crucial point. 
function(,,,,,) &lt;- that is a tuple. The function accepts an anonymous grouping (a tuple). The naysayers of Java tuples say to just make a class to return a group of values/references. But why don't Java methods only accept one argument, too? I mean, if you need a group of values/references to be passed in, why not just make a quick class for them? Because we already enjoy the luxury of using tuples every time we make a function/method.
2nded. try joda time
Whenever I see these questions, I always have to ask back, **What do you *want* to do?**
Yeah, I am. What do they have to do with my points addressed here?
I've been primarily involved with web application programming and looking to switch paths into more server side development for enterprise applications and I'd be open to working on a Java project with you if you're down for that. If so, I'd like to put it on github for possible employers to be able to check out as "proof" of knowledge if you will. If anyone is open to something like this, let me know! 
I'm not sure I would equate method parameters to a tuple. A tuple is usually handled kind of like an immutable array with elements that can still be addressed like x[0], x[1], .etc, and not by a name. Method parameter lists have strict names and types for everything included in them. You're forced to at least partially define the meaning of everything. I can see the reasoning against them in Java; it allows you to be lazy and not really define a meaning behind what you're returning from a method. A class kind of forces you to at least define a name for the results of you function. That being said, there are a lot of times I wish Java had actual tuples just for the sake of simplicity :)
How is this a new argument? I believe this is the main argument... The "naysayers" will say that a tuple is a poor mans object. Just create an object with named fields. It is just slightly more verbose, but it inherently provides better documentation through the name of the fields. It sucks to have to make these classes, but that is what an IDE is for. Like every single programming feature, there are tradeoffs.
I realize you don't want to use git, but that's pretty much what it was meant for. Having other people live edit code you are working on is going to be a nightmare if you ever want things to compile or run.
I know what you mean by anonymity and location referencing versus literal names. So would that make function parameters a kind of anonymous Java-struct? As confusing as it could be to implement, we have to this day generics and lambdas. That's a lot given how complex the implementations were to pull off for backwards compatibility. I think having methods return the same kind of thing that they take in (the anonymous structs I mentioned) would be well worth it. It wouldn't have the overhead of type erasure that a normal tuple library would introduce; they'd act like minimalist references to either an implied single value (as they currently are) or an anonymous struct with named fields. What goes in should also be able to come out. You're right in that they're not tuples at all, but they're something recognizable.
Here you go, I've been using tuples in production Java code for 3 years now: http://www.javatuples.org/ 
You're right in that it'd be like opening up flood gates. Because the flip is that all methods only accept one value but can return many. It's one freedom versus another. But having both open could allow most people who start coding to just string tons of things together because of how easy it'd be to. Still, I'd 100% love to see it happen!
What do you think of Guava's argument against tuples at the [top of this page](https://github.com/google/guava/wiki/IdeaGraveyard)?
Thank you this is what I needed I have basic syntax rules down and all that but didn't know where to begin at learning networking!
Based on your comments, I'm wondering if you really want tuples, or if you want multiple return values (like golang) instead. I agree with other comments that tuples often tend to act as poor man's classes - they get abused like maps often do. But I don't think multiple return values has the same problems.
Users 1 and 3's commits would conflict and require a merge because they edited the same line and git can't automatically decide which line should go first. A dialog would be presented allowing the user to take User 1's version, User 3's version or to manually merge the files.
No, not really. In functional programming where tuples are king, arguments are still not tuples. Arguments are more frequently auto curried for easy partial application. Don't confuse parenthesis in functional languages like haskell, ocaml, scala, and f# with argument application. Tuples are just anonymous containers, and without clean sugar to help in destructuring them (like pattern matching) then they are more a pain than they are worth. Just look at c#s tuple class. It's rarely used since it's really annoying and not easily discoverable what "item1" is and "item2"
good god I hate that name. ;-)
Alright thanks for your help
For a google docs like development experience [Saros](http://www.saros-project.org/) is really good. Hope you guys have good internet as this going to be network intensive. Also there will be considerable initial setup by 1 developer later synced by others. I think soon you will have a lot sync problems and will consider looking into DVCS like git.
Several libraries support tuples. I used Apache Commons ImmutablePair a couple times, and I later regretted it when I forgot what the undocumented relationship between the two types was. A little time spent defining a new class would have helped in the long run. If you disagree, you're free to use one of those libraries.
&gt; What you think you want is not what you want. Why are you against Git? Your problem is a large part of why Git exists. FTFY
Go study the Spring framework
I’m detecting a slight bias here.
Use a library (like the excellent [joda-time](http://www.joda.org/joda-time/)) and move on. Life’s too short.
I wasn't confusing anything. I was associating the idea of anonymous grouping with that of just shoving values into function parameters. It's the concept that I was looking at. But yeah, the more I hear about the whole "item 1" and "item 2" argument against the tuple philosophy, I agree that I'm looking for multiple return values with names similar to what goes into a function.
https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html
That basically boils down to "you aren't smart enough to use tuples correctly", which is frankly insulting.
If you're researching webmvc/rest frameworks in the java space, here is a list I keep track of. Its a combination of the big boys, and a lot of newer 'micro' frameworks, which are a bit of a rebellion against the bloat of JEE and Spring Spring (Boot) thundr spark framework http://www.ninjaframework.org/ dropwizard http://ratpack.io/ https://github.com/gwizard/gwizard pippo http://jooby.org/ vert.x http://makumba.org/ Note - i'm a maintainer of thundr. If you're interested in choosing between spring or guice, in your situation I'd recommend spring.
&gt; The "naysayers" will say that a tuple is a poor mans object. Those naysayers probably never used python and never saw how awesome tuple unpacking is. &gt; Just create an object with named fields. It is just slightly more verbose It's actually a LOT more verbose. I know I'm probably preaching against the choir here but "return ("John", 14)" versus having to create a whole class including getters and setters just for that is a PITA. 
They're 'nice' but IMHO not 'real' tuples. They're just generic container classes. For example they're not type safe: you can create an array of tuples and have one tuple be &lt;String, Integer&gt; and the next be &lt;String, String&gt;. They also don't support cool features like unrolling because that's something you need language support for.
What are you talking about.. Spring pwns.
I'm a JEE teacher[2nd job] and architect[1st job] and .. I also HATE jsf. I write ajax apps, and hate having a faces-config.xml to write. The only point why it remains interesting is : 1. It still is the standard and 2. As long as you stick to sone kind of 'struts2' only sub feature set, it is actually quite straightforward to write. There is another reason for jsf to still exist : if you work for government/big companies, then your site must be proven to work on TTY-like interfaces (minitel, I'm looking at you ;) ) and Angular/Ajax/jQuery and the like are ill-performing on accessibility - and SEO-friendliness. For the sake of completness, AFAIK: * Server-side state tree : unused. Only stateless services over JAAS in my experience * Chatty : don't get you. It's quite request/response oldschool isn't it ? PS: I don't use ajax 'inside' jsf, taglibs and jsf lifecycles are just a waste of time compared to, say, deployd.com and friends solutions * Debug: yes ! +1 upvote * Ajax: same, even in 'industrial' projects we split up ajax from the jsf navigation * Hide: yes, it should be Dead. But I have to give coins back to JSF : the struts2-like "merge forms with actions" strategy is perfectly implemented. *That* is the (only?) strength of JSF. [.. To be honest ..] perfectly agree, even though I'm actually teaching it (I use haskell at home ^_^ ) 
&gt; I agree that the documentation would be better, but then we already have a "poor mans object." It's what's going into a function already. That's not really equivalent because what's going into the method as parameters are explicitly named. Example: &gt; public Person findPerson(String surname, String address) { ... } Is not the same as: &gt; public Person findPerson(String x, String y) { ... } See the difference? The first method signature is *not* the equivalent of providing a Tuple of two arguments, because the individual arguments are *named* and the names provide meaning. In a Tuple parameter, they would not be individually named, and it would be about as clear as second method signature is. &gt; And if documentation is what you want, you can still create your class and pass that into your parameter and return another. Even with the current poor mans object for method parameters can you instead swap all of them for a single class with all of those fields together. And people do exactly this when those arguments are in some way related to each other and it makes sense to model them as a class. If you bundle a bunch of arguments together in a class, and pass an instance as an argument to one method call when those arguments don't relate to each other in any context *other than that one method call*, then all you've done is create code bloat. &gt; You're arguing for the status quo. That's 100% fine! It's not like we'll see this change tomorrow. I still have to work even without this as a feature. I'm just analyzing what would be a simple way to improve Java's method signatures symmetrically. It's nothing new, but I can't change the title of this thread (lol). If you want a Tuple class (or classes), all you need to do is to use something like Guava, or simply write your own and use that. Then you may well walk the path many others have walked before you; you end up overusing Tuple everywhere before realising that you've actually made your code less readable and you've used Tuples in places where you should have used a "real" class instead. The real case for Tuple is that rare situation where you have to return two unrelated things from the same method, and you don't need to do that same thing anywhere else. 
You could always ask /r/startups
Started in '95, been making money with it ever since.
I was up until Friday, but am now moving onto a new job where they don't use much java. I started learning in college so in 2008, and got the job I left straight out of college.
What is the OP trying to ask? If they should learn Java? Or get into coding? Way to much fishing. 
same, but since '99
I'm a singular person and I'm just curious.
Kinda. Just got promoted to an Automation Developer position from QA. Working with Selenium WebDriver using Java. Been using it since May of this year. No degree. 
It doesn't fit in the "News, Technical discussions, research papers and assorted things of interest related to the Java programming language" of this forum. It may be better to ask this question in /r/javahelp I'm not a moderator so I really don't have a dog in this fight, but it seems like the probable answer to your question.
Yup. Been doing it since '08.
Yup. I started using Java in '98 during my CS education and started working as a full time developer in 2002. My first paid internship (using Java) was in 2001 IIRC.
If learning is what you're interested in you should check out /r/javahelp and /r/learnjava. This isn't the right sub for that. 
I started in 96, but was employed as a C/C++ programmer at the time. In my next job in 97 I was officially a Java guy. I'm between jobs at the moment, and am catching up on Android, cloud stuff, web server dev, and JavaScript. 
For fast prototyping you could just as well use an in-memory DB like H2. It's just as easy to implement since the tables get created for you. 
Oh, yeah that's probably right. 
Started in 2000, got a job 3 months prior to graduation. They needed Java programmers so bad they let me work any hours I wanted until graduation. Been doing Java exclusively since. I don't think it's the language in demand so much as enterprise development. So for instance, I think C# is also highly employable. I've never known an unemployed enterprise developer.
You simply can't go hire a new workforce every time your company changes technologies. People learn on their own, some companies offer internal and external training. The way HR writes job offerings gives you a false perspective that people live in technology specific niches -- but I dont think this is normal or healthy. You can make a living being a contract Java coder, but it doesnt have to be that way.
I've been a software developer for my entire career and jumped between various languages. I studied Java since 1998 but I didn't get paid for my Java skills until 2005. 
Try telling recruiters that.
Well, I get what he's asking... you can't get a job solely using a tape measure, but there are tons of jobs out there that are strictly (or at least primarily) Java development.
Yes. I never really studied Java in a dedicated way, I've been programming since I was around 12 in my spare time. I had a Java course in high school and then there were one or two uni courses that required you to use Java. But aside from that, I never really put too much effort into Java specifically. Once you've learned a couple of different languages, it's not that difficult to pick up another one on the fly. Though I've picked up more specialized knowledge in Java while working with it, of course. My workplace never asked me about my Java skills specifically, they were more interested in my general developer experience. It's hard to answer your second question since I never really aimed at a high Java proficiency, I just studied programming and computer science in general. I got a job pretty much straight out of uni, though.
Did you have prior programming experience?
In this case the main language is python, I had a little experience writing sooner scripts using it in the past, so I just found some projects to do and practiced that way.
also been paying the bills with it since about '95
same, but since '14
Started in college in 2001, been learning ever since. I still write or review code almost daily as an Application Architect. 
I studied computer science in undergrad but never got a degree, got a degree in environmental sciences. after about a year of graduating i got a job as a developer. I write in many languages but my specialty is Java.
δουλεύει !!!! Thanks !!!!!Makes sense compared to others 
Like what projects? Im also a java dev, also interested in python, but I dont have any pet project ideas
I am using 24 hour time format! Sorry, should have been more clear. Simple date format seems worth a shot, I just can't use external libs.
Certified in '03, really started programming as primary occupation around '07. In the interim years I did java and perl work, but it was just part of my IT job to make some one off tools. After that I did an inhouse app then went to work for a software company. Worked in Java until about 3 weeks ago when I took a job doing Ruby.
Started getting paid for Java in 2007 or 2008. Had never done any Java prior to that. Had done plenty of programming before, of course. So I guess you could say I made money from Java before I knew the language.
Personally, I prefer to view it as specializing (like a doctor that specializes in ears/nose/throat)... it's fun to tinker with other languages for side projects, but I'm much more productive and I feel much better about myself when I can specialize and really crank out some cool projects quickly.
If you're using java 8 or above, the java.time package is the newer better way to do date manipulation and comparisons. The easiest way without using that is Date.getTime(): *Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT* So get the time in milliseconds as a long value, then compare to the current time in milliseconds plus or minus 1,800,000 (30 minutes in milliseconds according to google).
If you want a quick and easy way to compare some of the Java Frameworks use the NetBeans tutorials. They are quick and easy and cover the major stuff. You can download the IDE using a .exe file and include a configured application server.
I agree this subreddit often touts the flavor of the month but that is kind of the nature of the internet. Java EE is a great framework with a convention over configuration mindset that makes it easier to get up and running.
What is the hate about having a faces-config.xml to write? Mine was generated by the IDE and is 9 lines long.
I was actually earning money as a java developer before I knew java. I got a job offer from a visiting professor's start up before I graduated from college. I knew python (physics background), and C from a class I took in college. Picked up 95% of it within a week or so, and was working in the project after 2 days, with very heavy code review. That being said, I now write in Swift, Python, Java, &amp; Scala. But my work right now is mostly java, bash and sql.
I started learning Java in 2012. Took my first 3 levels of Comp Sci classes (1300, 1301, 1302) and then went to a coding boot camp called the Iron Yard for Ruby on Rails. Finished my boot camp the last week of March, started working for CareerBuilder the first week of April as a Java developer. So, it took me 2.5 years to get to the point where I considered myself worthy of a "junior" java developer position.
I was being completely serious. You can't learn to program in a week. But you can definitely learn Java in a week.
Thanks for making me feel old. When I was a kid we didn't do that to old people.
I don't buy this "right tool" abstraction, because I believe it's flawed, so is the example with construction workers and their tools - terrible. I would argue, that judging by mental/experience effort required to master bigger platforms, better analogy would be - brain surgeon, plastic surgeon, or universal surgeon who does anything.
Ah, if that's the case then there's no reason your proposed solution wouldn't work, except in the edge case of times near midnight. In your example the times are inarguably 11 hours, 40 minutes apart. Which your algorithm should've given you as 12\*60+50 - 1\*60+10 = 770 - 70 = 700 minutes apart. The other case would have been either 0050 to 120 or 1250 to 1350, which would work fine with the algorithm as well. The problem arises when you try something like 2345 vs 0010. You could certainly adapt this strategy to handle times near midnight (and it's not too terribly difficult to do). Though something like SimpleDateFormat is still going to be more simple, more accurate, and more readable.
Had a well paying Java job since 2004.
Scoped beans classes may now be annotated - so it's not in the faces-config anymore. But custom navigation rules like https://docs.oracle.com/javaee/6/tutorial/doc/bnaxf.html#bnaxg remain a pain IMO. I agree this is opiniated to dislike long XMLs.
We have some applications that require us to control memory in a way that keeps current data in the CPU's caches as much as possible. We also used vectorized operations/SIMD and regularly review disassembly to ensure optimal implementation in the hot parts of that code --- Java is the 100% wrong tool for that job. I could likewise cite tools we develop that work at a much higher level and are just as distinctly better off with Java over C++. And, sorry, but to compare a Java coder to a brain surgeon --- i have to admit i chuckled at that one. Someones got a big head.
Went to community college for C#/comp sci. Was bored to tears, got a D in my C# class. My Dad died suddenly that year, and lack of money and depression made me leave school just before my 2 year. Friend of mine who recently graduated from URI landed a job as a Java programmer for CVS (contracting). I spent 3 months straight watching free (and some paid) Java tutorials almost exclusively from caveofprogramming.com (shoutout to John Purcell!). Friend convinced them to let me phone interview, 2 more calls and they had heard enough and gave me a job @ $27/hr as a contractor. My buddy with his degree from URI makes $35/hr, to give you an idea of what a degree will do for you. A degree will also give you a lot of debt to pay off for the majority of your life. My 1 year anniversary at the company is this month, and still going strong. TLDR; you can do it
Have you tried xtend?
started learning in 2005 at university started working with it in 2006 (full time) getting paid enough to pay my bills, university was during the evening. now I'm 28 and nailed a big career change which pays me a lot, seriously, I was hoping to get that kind of amount in 5 years! I know there has been a big push from other langs like JavaScript but Java is still one of the few trusted languages for big enterprise systems, mainly because of its readability and maintainability. Frameworks like Spring (SpringBoot) keep preventing it from getting extinct, I just wish Java itself made more effort in trying to keep up with competition.
Yes. Today should make exactly 2 months, though I did have an internship where I did mostly Java for a year. Started Java 4 years ago first thing in College and never touched it before. All I had ever done was a cs course in high school where we used Visual Basic and C++.
started around 2001 - been earning every day since (well - I take weekends off)
If it makes you feel better, my first real programming language was C.
I started with Java in 2007 in High School, started earning money with it in 2009 and now a days I'm working more specifically with Android (Still Java but not for long I hope) since last year. 
I hope not. This shit is dead unless you've convinced your company to use it .... I've only saw old school programmers like jsf.
I don't know why you're so salty.
Why do you need tuples or multiple return values when you can use a descriptive wrapper class? 
The problem is that it complexifies a lot for almost nothing. Is it really needed by applications? I don't think so. You do not need all that stuff at the language level. C++ likes very to add a lot of stuff to the language. At the end nobody understands anything and people stop using it.
&gt; The problem is that it complexifies a lot for almost nothing. In many cases it makes code less complex and more readable. It's like saying lambda's or generics should not have been added because it makes the language "more complex"; those are not "really needed" either.
I just can't see the difference between def someFunc(): (A, B) = { ... } val (a,b) = someFunc() and func someFunc() (A, B) { ... } a, b := someFunc() Thinking of the implementation, the Go function has to tell the callsite how many values it is returning and what are the addresses of those values. This is the same as the Scala function telling the callsite what arity of tuple it is returning and what its address is. The addresses of the individual values would be found in the tuple. You could argue that the Go way is more efficient, because it's one less indirection. The Scala way is compatible with Java's single-value return. In practice, they both look the same. I understand your second paragraph though, some people will use tuple the bad way.
That's not reality, that's you living in your own tech bubble. It's just like /r/programming collectively thinking Java is a marginal language used by only a few "old" programmers. In reality I see startups using JSF all the time.
Indeed, and together all the updates since that announcement makes quite a list.
All I know is there have been more JSF jobs than the year before every year. I don't think Richfaces would be the choice for most new development since there are other component libraries like PrimeFaces now.
[removed]
This is more of a /r/javahelp type question. A Google of 'java jdk 1.x' returns plenty of results. Be aware that if you use features that were introduced in say 1.7, then your code will not work on earlier versions of Java. You can configure your projects to use compile against a particular version, so you could have 1.8 installed and have it compile with the rules from 1.6. Finally, there is probably a reason you are using a particular version of Java - whether that is your institutions IT environment management policy, syllabus requirement, automated marking tool, unit tests to mark assignments, etc. Please be more considerate for the poor people who have to teach you, when you come and rage dump but can't put together a three word Google query...
Yes.
We have no problem finding coders who can write in more than one language -- don't get insulted, we just require a little more versatility from our staff.
Trust me, if someone is in a teaching position and can't teach, that is a major screw up in the school board. Plus the fact that the teacher didn't bother to mention that they have no knowledge of the field. Anyhow, it has been edited. Edit: also I would like to say that I am not downvoting you, so please do not ban me.
&gt; P.S. you can replace surgeon to many other professions, it was just first thing that came to my mind. I know I was just picking on ya. &gt;If programmer/surgeon decides not to specialize and look at it as "right tool for the job", in my opinion, he/she is destined to not produce quality results, compared to someone who does. I'm open to hearing your reasoning as to why. It is not my experience. Most people that I see pick up Java/Python and then write confused code generally have had a weak fundamental understanding of how programs work in the first place. In example, I often find people who select the wrong data structure in Java generally don't understand 1) the cost of indirection and 2) the cost of cache misses in their programs, and 3) the access patterns of their callers/users. This is *not* a Java knowledge problem -- this is a fundamental computer science deficiency. Basically these people are "black box" coders -- they write code but don't know what it's doing. If you approach learning new platforms with a mind for avoiding "black box" coding (start from the hardware/OS and work back to the platform), then coding efficiently in multiple languages is a simple thing to do. 
&gt;I'm not looking for things like git, version control etc.. Don't be scurred.
Using the same logic a Map&lt;String, Object&gt; is also a poor man's class, therefore Maps should be abolished. &gt; slightly more verbose Really? class PointlessClass { private final A a; private final B b; public PointlessClass(A a, B b) { this.a = a; this.b = b; } public A getA() { return a; } public B getB() { return b; } } PointlessClass doSomething(A a, B b) { return new PointlessClass(a, b); } vs Tuple2&lt;A, B&gt; doSomething(A a, B b) { return new Tuple2&lt;A, B&gt;(a, b); } 
Yes, I started learning it in college, had on really bad optional course. Then took the advice of a friend and did CISCO Fundamentals of Java course, got hired right after that.
Well maybe I'm wrong. Where do you see its place? I could have just had a bad experience with it. I just didn't feel there was a separation on the controller and view when I used it. There were a lot of specific jsf objects that had to be used to make some things functional. 
I had a very similar experience in my college. The teachers were *extremely* imcompetent and taught much the way you describe. They got canned material from the coursebook manufacturers, including power point presentations and tests. Any code we wrote was simply run to see if it generated the correct output. I could have pretty much just used System.out.println the entire time and I probably would have been ok. It is supremely frustrating to be in this position especially when you want to learn so badly. In the end I started hanging out with a bunch of students that wanted to learn just as badly as I did. We started learning on our own and teaching each other the things we were learning. I say with all seriousness that this was the best experience I got out of college and is still to this day probably my most formative experience. I hope you can find people like I had so you can all help and support each other. If not transferring is always an option. The professors will not improve, you can almost count on that. They hide behind the iron wall of tenure, where they cannot be touched, and this gives them no incentive to improve their skills.
My first paid job was doing VBScript and LotusScript, but transitioned to Java for my own sanity. Even while doing primarily Java development, it is not the only language I use, with python, javascript and groovy being the others.
I actually think I've resolved it. The program took several minutes to load using Java 8. I do have another problem now where it won't work in IE for whatever reason, and my boss uses IE.
This... seems dangerous. Like, almost PHP eval() dangerous.
I think it depends on usage. It will be dangerous if the code comes from an external source and can possibly be malicious, so for example an internet webapp should not just get code from its users and execute it. It may however be used in scenarios where the code is provided by someone who doesn't want to destroy the application but rather make use of it and writing a malicious code would only do harm to the writer. So yeah, it's exactly as unsecure as PHP eval() - should not be called if the input cannot be trusted. Anyway, I've added info about potential security problems in the readme :-) Thank you for your remark!
A quick glance at the graphs make it look like this increases response times by about 10-20%. That's minimal?! Perhaps a better question is why are you getting exceptions that get logged so often.
I think a batch file or C# program would be more appropriate. Java is designed to be independent of the operating system, so things will probably be harder. 
i have read a lot of articles and i _still don't get_ what modules are
thanks yall
Yeah, rather than adding this JVM option, I would think some development time should instead be spent fixing these bugs. A logged exception stacktrace should be exceptional, not routine.
It's like a package for your packages!
Yup, and that's exactly what's wrong with most of these frameworks. They're "oh so easy", until you actually have to integrate with *other frameworks* that are also "oh, so easy". Throw in 3 or 4 internal "enterprise architects" who haven't seen anything BUT Java their whole lives, and then the project is well and truly f*cked.
Whoah there buddy. This is doesn't seem dangerous. It is dangerous. Very dangerous. I give you huge props though for the idea. I would make the warning in the readme *WAY* more prominent. Also, I would suggest looking at more strict classloader isolation. OSGi for example does class loader magic to prevent delegation outside of the allowed scope. Using fully qualified class names, you can easily get around the limitation on imports to create a vector that completely opens you up to arbitrary execution. Having a means to explicitly white list classes that you want your classloader to be able to delegate loading of is critical to it being something remotely safe to use in any place where your assumption of security is greater than zero. You also would be best suited to have appropriate security manager policy files in place and revoke access to the getClassLoader permission, as the attacker could gain access to the parent class loader and have a party with your JVM. Again, nice work.
It's behind paywall (paying using your personal information). Passwords from here may work: http://bugmenot.com/view/oracle.com (remove leading spaces from copied login/password if any...)
*twitch twitch*
[removed]
They better release 8.2.2 and 9.0.2 :-( What sense to use always new and always unstable application server?..
It boils down to "there's many definitions of full stack developer so to confuse matters even more I'll add my own".
A new infosec vector has been born. Lambda injection!
Functional programming without tuples is like coffee without sugar: A bitter punch in your face.
&gt; Ennead That's much better than something like `Tuple9` ;)
AFAIK the first release of EAP is available for free, you just can't get the further fixes, which require a subscription.
Why *buy*? EAP is (l)GPL, check the license. It's fully open source with all the liberties and requirements that the GPL gives and mandates. WildFly is buggy because all beta software is buggy to some degree. Do you blame Apple that OS X 10.11 beta 2 was buggy, even though some people have been using the betas as their daily OS from day 1? If not, why would the WildFly releases of EAP be any different? If you want to use free and stable software then again wait for the final to be released of the Java EE 7 server, which is EAP 7. And if you want ultimate stability wait another year for EAP 7.3 or so. If you want to test EAP 7 early you can use its betas, which are clearly marked with the "WildFly" tag. As with every other beta from every other vendor it allows you to test technology early, but bugs are to be expected. You "pay" only by the assumption that you'll report these bugs and/or send patches, which as someone who wants free free free and stable and good quality software is what you do I presume?
For development use only. You can't use it in production.
http://www.jboss.org/products/eap/download/ &gt;The terms and conditions describe how the developer program subscription may be used. The major difference between a full commercial Red Hat subscription and the Developer Program subscription is that the Red Hat JBoss Developer Program is intended for individual developer-use only. Integration, test and production environments will require a paid subscription.
You are confusing matters. There's no legal question. The GPL is crystal clear. What happens with the binary download is that you yourself promise not to use the software in production as part of a (zero dollar) subscription that you voluntarily go into with red hat when you make use of their build and download service. I agree, this is a debatable practice but not illegal. The gpl allows someone to charge (indirectly perhaps) for gpl works. Eg someone can download the Linux kernel sources, build them, burn them on a CD and sell you this. However, you are not mandated to use the build and distribution service of this person. You *must* be able to have free access to the source yourself and then build it yourself. Red Hat does not restrict the source. It's available on their FTP servers and is (as demanded by the gpl) totally free from any restrictions other then those imposed by the gpl itself.
Read carefully, this talks about a *subscription*, NOT about the license. IFF you enter into a subscription with Red Hat THEN you have agreed to the terms of that subscription. BUT, you are NOT obliged to enter into that subscription for using JBoss EAP. Only if you want to use Red Hats build and download service.
Do modules improve speed and security?
&gt; have no problem finding Thats great, I am not against not specializing - its a lot of fun actually. But thats not the point. In your original post I replied you complained about developers who want to specialize. Implying that they are somewhat lesser developers - making it seem that this is their problem. But at the end of the day all I see is that this is your problem, not theirs actually. &gt; those people are boat anchors ... &gt; it's a giant headache unless you have just the right slot for them to drop in to That's your problems, not your developers! &gt; to be honest it threatens their long term employment. Is it really a problem for them? Or it's just that you assume it is? 
Or maybe don't be so cynical and give it a try before you complain.
So, a dose of reality. We have a finite amount of work to execute. To do so we employ a certain number of developers and we pay them very competitively. The language used across those contracts varies; some of the work is embedded (C/C++), some web stuff (mostly Java), some general purpose applications (a mix), even a little mobile (Android). Now, when one contract ends, we have to take the people on that contract and either 1) find them new homes or 2) lay them off. In this environment (where we choose to not throw you out like a piece of garbage because it's convenient) I need you to be a bit more of a generalist. If you refuse to work the jobs we have for you.. have a nice life. And yes, I think someone who can code effectively in two languages is superior to another who can only do it in one. 
&gt; What I am just saying - there are always a cost in any direction you go. Cost of universalizing being not deep enough knowledge and possible financial implications. I think people confuse experience with expertise. And that most people who call themselves specialized in a language really mean they are experienced with it. I regularly see folks with lots of java experience, and when i dig in on tuning garbage collection, remote debugging live applications, or viewing disassembly from JIT compiled code --- well, i generally get a deer in headlights. 
&gt;sources are under LGPL, but when you dowload them - you have to accept "developer agreement" There's no such disclaimer here: ftp://ftp.redhat.com/redhat/jbeap/ If there's a disclaimer anywhere when downloading the **source** (not the binary) then you should file a complaint. 
Interesting pick! Never thought ehcache would be a candidate for a *persistent* key/value store. And definitely a mature and widely deployed option.
JPA metamodel, criteria API seems to have good ideas, but execution is just bad. I use [querydsl](http://www.querydsl.com/index.html) which replaces JPQL, Criteria API and metamodel in a much more usable package.
&gt; This... seems dangerous. Like, almost PHP eval() dangerous. It's dangerous if you use it dangerously. Also, it's full of libraries that do this kind of stuff: http://commons.apache.org/proper/commons-jexl/ So let's not act as if OP has created a new kind of monster and let it loose onto the unsuspecting masses. :-) This library is simply a convenient interface to an existing Java capability.
My colleague is making it, so you can ask questions right here.
nice! I already have a small application running with cassandra, but I have to confess it took me a considerable amount of time to understand it and configure it properly. I'll take a look at those. Are they up to date with the newest cassandra releases? Also, thank you ;)
I didn't get that from their article. What I get from them was their reasoning for not requiring Java EE 7 as the minimal version at that time because it wasn't not being widely adopted AND supported, being different the case of JDK 8.
Can a client api be deployed separately from the controller implementation?
Yeah, good point -- we should wait and see. I *predict* it'll be like generics and lambdas: beneficial if used judiciously but a total nightmare if you go overboard.
Hey brenoinojosa, yep; they up-to-date with the latest and greatest! Awesome to hear that you have a small application going with Apache Cassandra, mind if I ask what your use case for Cassandra is? (ex. Recommendation engine, IoT / Sensor Data, etc.)
They've got six weeks before they hit their original switchover date.
I have been doing JSF apps for 5+ years and have come to value it for it's productivity. If you write complex business applications, or basically any web app that relies heavily on forms, there is no easier way to do it than in JSF, once you understand how the framework works. It makes a few sacrifices (lack of control over the lifecycle, no routing, higher memory consumption, "disrespect" of HTTP, ease of scalability etc.), but it let's you concentrate on designing the application instead of an API. It just gets the job done. The tight coupling between client and server greatly reduces the amount of boilerplate Java and Javascript (for Ajax) code you have to write. We mostly use it without any extra framework like PrimeFaces and it is still very efficient. One of our application instances serves tens of thousands of users each month and runs on a single machine. So JSF definitely has it's niche. That said, there are many use cases where JSF just doesn't make any sense: Apps with a lot of static content like news sites or blogs, highly scalable applications and applications that specifically need a REST API.
I'd be ok with it depending on price. Not sure why there is so much drama about this. The monthly model might be more welcoming to get it into companies. And as a polyglot developer with current licenses for pycharm,intellij, and webstorm I can't wait for the one subscription for all of them. *edit ployglot -&gt; polyglot (as my snarky friend pointed out :)
&gt;"disrespect" of HTTP It depends on your own programming style and the choices you make. A component only/navigation rules only/postback only application may come across as disrespecting HTTP. But if you use the PRG pattern, use GET requests to navigate between pages (e.g. using h:link or h:button) and view params and/or view actions (or alternative something like OmniFaces' @Param), then JSF is really as close to HTTP as most other web frameworks who are close to HTTP. Okay, it's not REST, and it doesn't by default do much with HTTP verbs like PUT etc, but honestly I don't see a lot of web frameworks that do this for web applications. Those verbs are more reserved for API/Web service usage. &gt;higher memory consumption You can use stateless mode in JSF, but even with serverside state (which in indeed has some issues, but also advantages) the memory consumption of JSF is actually not that high anymore. See for instance this analysis: http://www.jsfcentral.com/articles/understanding_jsf_performance_3.html
&gt; Did you benchmark this? [I did](http://blog.codefx.org/java/stream-performance-your-ideas/).
I just published [a follow up post](http://blog.codefx.org/java/stream-performance-your-ideas/) where I benchmarked `min`. Long story short: It does not seem to make a difference.
I think we are running in circles here and my short attention span cannot cope with that. Again, what you say just proves, that what are you talking about is your problems, not developer's. You want them to switch technologies, some of them doesn't want to do that. Basically "if you don't do what I think is good for you, you are stupid, because I know better than you" world view.
So, this is a framework, for a framework, for a framework?
&gt; the autogenerated Javascript It seems like you're mixing up GWT with JSF
&gt; I cannot imagine that JSF would score that high where I live. Most of my colleagues at the consultancy firm I work for don't use it and most of the other people I meet don't use it either. Which is funny, since where I live as well as at many places I visit (way out of my area) I see JSF being used all the time. 
I am continuing to roll this around in my mind. I wouldn't mind the POJO-mapping IF there was a way to save unmapped attributes into an extra attribute specifically reserved for that purpose. I also wouldn't mind putting on some validation to ensure that required fields were present, and of the right types, as long as unexpected attributes were preserved somehow.
What's with the sneaky URL? For anyone that doesn't want to be tracked more than necessary: http://blog.arungupta.me/au-revoir-redhat/
Things aren't always what they seem..
That's what I'm using.
Well then you're just plain wrong, because the amount of "autogenerated" Javascript in JSF is minimal. It has one static JS dependency for Ajax-stuff and the only thing it adds are a few onclick handlers when you use ajax.
&gt;For me that's pretty shocking, what else have those people tried... Why should it be shocking? Maybe *you* don't like JSF or Java frameworks in general, but lots of people do, clearly. /r/programming and hackernews are known to reside within their own tech bubbles. There's some kind of census at any moment of what's cool and hip and what's not, and if you only hang around there your world view gets skewed and distorted. Specifically for JSF, there are outdated 1.x practices floating around which may look like it's a cumbersome framework. But 2.x is a different thing entirely. Likely this is where some of the surprise comes from.
You are aware that pycharm and webstorm features are all available in intellij, maybe except simplified view that webstorm and pycharm have. Also they have stated that if you find a feature in any of these simplified apps that is missing in their main product(intellij) they will add it to it. 
&gt; Well then you're just plain wrong This is a bit hard to discuss, I personally think I'm right and that you are wrong :-) &gt; the amount of "autogenerated" Javascript in JSF is minimal Any framework that does that is trying way too hard to help me write a program; and when that program does not work; I have to figure out what JSF has done for me. *This indicates a bad design*, there is not much you can do with a bad design besides scrap the whole thing and try to start over; like JSF 2.x
&gt; Why should it be shocking? Because JSF is poorly designed, this is why they have to do massive changes in 2.x to *move away from the original mess* &gt; Maybe you don't like JSF or Java frameworks in general, but lots of people do, clearly. That's true, I don't like JSF, Jave frameworks for the web have often been terribly designed (JSF,JSP,Portlets...), even to the point that Gossling have said **he hates JSF with a passion**, as the creator of Java he's typically somewhat positive towards Java tech... &gt; /r/programming and hackernews are known to reside within their own tech bubbles That's true, I mostly feel the same about most new hip web trends as I do with JSF.. &gt; But 2.x is a different thing entirely At least they realized that they were on the wrong track at some point, I still think it's the wrong way to go to create web apps. [This is still valid IMO](https://en.wikipedia.org/wiki/JavaServer_Faces#Criticism) The [rebuttal](http://blog.primefaces.org/?p=3035) seems somewhat strange, for instance: &gt;Things can get really messy for complex form oriented web applications with tons of javascript and css, JSF handles the heavy lifting here.. What complexity or heavy lifting is this guy talking about, are form based web apps complex?
For example there are frameworks that allow every form that submits a delete request to use the DELETE http method, PUT for creation POST for update etc and cleaner routes for that (like /entity/5/delete etc., while in JSF the postback always goes to the same view). I don't think this is the only universally acceptable approach, but that developers who have only worked with things like JAX-RS before might find that JSF violates some HTTP fundamentals. At least that's the criticism I often hear about JSF. On the other hand in JSF you get this nice abstraction like the lifecycle, the concept of views, the component tree and other things. To provide this abstraction that, some sacrifices need to be made.
&gt;Because JSF is poorly designed Not entirely. There's legacy, but JSF goes back a long time. And it's this longevity that has proven to be its strong point. Many things in JSF were extremely well designed. It introduced IOC/DI before many other frameworks did, it introduced the concept of scoped beans (which has now been taken to the next level by CDI) and it provided a huge set of extension points that plug-ins and utility frameworks could take advantage of. &gt; this is why they have to do massive changes in 2.x to There have been massive changes with respect to how one uses JSF and the effect is has on applications, but they were all done in a highly compatible way. Many other frameworks would have to have started from scratch, but in JSF the original architecture could support these changes. Just look at Facelets, this could be cleanly introduced to JSF. Look at partial state saving, a huge change but could be incorporated in the existing architecture. There are many more examples like this; ajax, view parameters, you name it. You could just as well say that C# 1.0 was a mess and that massive changes were needed to reach C# 6.0. This of course nonsense, C# has proven to be capable of incorporating these massive changes, and so has JSF at the framework level. &gt;Gossling have said he hates JSF with a passion, **GOSLING MISSPOKE AND MEANT TO SAY J S P ** I don't know how many times this has been rectified by now. If anything it proves you haven't actually listened to the recording, since if you did it should have been clear from the context that he meant **JSP**. Gosling hates JSP, not JSF. &gt;This is still valid IMO No, it's not. Since the person who wrote it only had experience with J2EE 1.4 and JSF 1.1. That's over 10 years old! This person had NO idea what JSF 2.2 and Java EE is about. After their initial publishing they sneakily updated their "recommendation" so it's less obvious they talked about JSF 1.1 from 10 years ago. &gt;What complexity or heavy lifting is this guy talking about, are form based web apps complex? IDs get in the way and you can't just put two snippets of markup on a page without being very careful about all element and child element IDs. Global javascript variables clash and interfere. It's not for nothing that client side is looking at components as well (see web components discussions) 
&gt; I have to figure out what JSF has done for me. This indicates a bad design If you feel that way, you can really only program in assembly for utterly simplistic hardware designs from the 70-ties. Anything else is higher level and you have to figure out what the underlying levels do. 
&gt;For example there are frameworks that allow every form that submits a delete request to use the DELETE http method, PUT for creation But below you say: &gt; I would also reserve PUT/DELETE request purely for REST Apis. If I navigate a little through various popular web sites on the net, I honestly don't often see my browser doing PUT/DELETE when perform actions on those sites. &gt; while in JSF the postback always goes to the same view A postback goes to the same view indeed, but you can redirect immediately after (the PRG, Post-Redirect-Get pattern), which is often really a good practice. It keeps the URLs clean and the response clear. '/entity/5/delete' looks more like an API call. You'd expect client code to call this, but I don't often see this in my browser address bar really for popular web sites. 
This is not so much the fear of abstraction as it is a problem with the very way many JSF frameworks are written. If you are coming from webdev point of view and maybe even care about things like progressive enhancement, you quickly realize that JSF is generating an unholy code-mess, which might make you dislike it from the start. If you don't, it all works reasonably well as long as you stay strictly within the JSF frameworks author's idea of what web development should be and can be. Woe onto you if you get any requirements that threaten that -- which is what /u/bjarneh was talking about, I think.
&gt; GOSLING MISSPOKE AND MEANT TO SAY J S P JSP is also bad of course, I saw a video some years ago I thought I remembered JSF.. Although I do find it strange to think that a person could hate JSP and then like JSF, but who knows... &gt; IDs get in the way and you can't just put two snippets of markup on a page without being very careful This is the kind of mess you end up in when you throw together markup from all over the place with a crazy FRAMEWORK (perhaps even some autogenerated bits of markup). Portlets also solve this problem, but the problem shouldn't be there in the first place...
Because Node.js wasn't out yet.
Some of us don't like the idea of our software having to call home every 30 days. I'd like all the products that I purchased to not refuse to work because of no internet connection or the company no longer exists.
I agree, no need to beat a dead horse if we simply disagree. In parting, it is not a problem for either me or any given developer -- we both have alternatives. If your attention ever waxes again, I would like to hear any concrete example that would require a language specialist. This goes to the root of my argument -- that such claims of specialization are invented to make stubbornness look like utility. In my mind, it's no different than having an employee who wont work on Wednesdays, or won't wear a tie, or wont bathe. And it makes your argument appear to me to be "this is the way i want it and you have to deal". Mmmm.. no.
I laughed. Don't know why the downvote shower...
Meh. I figured it would attract the downvotes. Not really the right sub for the joke, and I knew that, but I just couldn't help myself.
&gt; many JSF frameworks are written. Uhm, there's only 1 JSF framework, which has 2 different but by definition compatible implementations. &gt;JSF is generating an unholy code-mess But JSF doesn't generate anything. JSF renders what you ask it to render on the template, like every other template engine does. If I put a `&lt;div&gt;` on the page, it renders exactly that, verbatim. If I put a `&lt;br/&gt;` on the page, it also renders exactly that, verbatim again. If it put a composite component or a (facelet) on the page, it renders whatever markup I put in the template that's behind that, which can again just be a simple `&lt;br/&gt;` or whatever other combination of markup, css and javascript. If I put someone else's component on the page, it renders whatever that someone else put in there. This is exactly like most other systems work. Now I've got a feeling you somehow thing there's this magical transformer engine in JSF that analyses your markup and changes it, but this is not the case. You may also be of the opinion that one is only allowed to use components provided by third party libraries, but this is also not the case. Heck, it's not even required to have only components, not even to have the majority of the page being about components. And if your beef is with 3rd party provided components. then consider that when working client side and using a fancy javascript widget on your page then that widget does whatever it needs to do with the DOM, which can be an unholy mess or not depending on the widget. Similar things hold with 2D desktop toolkits, mobile toolkits, 2d and 3d engines, etc etc. If you think 3rd party provided higher level building blocks always create an unholy code mess then I don't see any other option than sticking to assembly on 70-ties CPUs. 
This guy is awesome. I met him at the Silicon Valley Java users group. You can see the passion pouring out of him
I really enjoy working in Vert.x 3.0... You could have a quick look at a small example program I wrote in Vert.x for ReST. https://github.com/JUGGL/Raffle And Vert.x Documentation is available at http://vertx.io/
Yep, something like that. I guess this subreddit is not the best place to write something negative about any form of Java tech, but when I see headlines where JSF is the tool of choice; I felt I had to say something.. :-)
Spring Boot
&gt; Spring Boot What's the difference between the Spring Framework and Boot?
I do like Play! But it plays a little nicer with Scala than Java.
`Function.identity()` is great in theory, but in practice I think it's just so much shorter and easier to write `x-&gt;x`.
have a look at ninja framework. I like it more than play. But i think it doesn't have app concept like Django does.
Or, again: Map&lt;Color,Integer&gt; counts = imgData.stream() .reduce(new HashMap&lt;&gt;(), (HashMap&lt;Color,Integer&gt; accum, Color c) -&gt; { accum.put(c, accum.getOrDefault(c, 0) + 1); return accum; }, (HashMap&lt;Color,Integer&gt; accum1, HashMap&lt;Color,Integer&gt; accum2) -&gt; { for (Map.Entry&lt;Color,Integer&gt; e : accum2.entrySet()) { Color key = e.getKey(); accum1.put(key, accum1.getOrDefault(key, 0) + e.getValue()); } return accum1; }); is replaceable with Map&lt;Colour, Long&gt; counts = imgData.stream() .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
How does this implementation differ from PCollections? http://pcollections.org/
Yeah its multi-core capabilities (a must have for bigdata) would have rocke,,,,,, oh wait.
Well, yes. But inside Spring Boot you use Spring Data -&gt; JPA -&gt; Hibernate. The guide is helpful. http://spring.io/guides/gs/accessing-data-jpa/
Thank you. :)
It is on GitHub, you could just submit a PR to fix that you know. :)
If you want the Java equivalent of Sinatra, then you should look at Spark: http://sparkjava.com/. Terse (for Java), modern (lambdas) syntax with a simple API and great documentation. I would personally still use Spring Boot because I find it easier when I want to do something more complicated. For example, if I'm tired of manually mapping JSON to/from Java or configuring/integrating Jackson to do this for me every time.
*Premiering in Java 9, the Java Module System sets the stage for a new kind of dependency system, one where modules are the primary unit of organization. True dependency resolution is a notoriously difficult task, but given the scope and timeline of the JSR, certain compromises are expected* Wasn't this supposed to be in JDK 7? Its a bit strange to see them complain about the timeline. 
I almost missed the joke and downvoted—we live in a world where someone with years of experience could actually say this and be perfectly serious.
JSF did not exist in the year 2000. It did not really start to get popular until 2010 and has gotten more popular every year since. Today it is arguably the most popular Java web framwork. It is certainly is in the top two at the very least.
While much of what you say is true, it is kind of silly to pretend that JSF is "just" a template engine like velocity, handlebars or even JSP. It's bordering on dishonest to say that's not what 99% of developers mean when they say the implement in JSF. They take their toolkit of choice often promising stuff like "modern AJAX" and run / paint themselves into a corner with it. Admittedly, for much of the company intranet stuff it is used for, it works reasonably well, with the [usual caveats](http://i.imgur.com/a9PGLe2.png). &gt; Similar things hold with 2D desktop toolkits, mobile toolkits, 2d and 3d engines, etc etc. If you think 3rd party provided higher level building blocks always create an unholy code mess then I don't see any other option than sticking to assembly on 70-ties CPUs. There we go with the extreme hyperbole again. It's about choosing the right level and kind of abstraction for the problem. 
This subreddit is full of people without real clue and the strong conviction of being right and / or a strange affinity to Java orthodoxy -- hence all the Spring hate. Every strange catch-up solutions JEE comes up with must be at least as good as the stuff that inspired it and you must only use that.
Yeah, it'd be funnier if there weren't so many people actually pitching it with a straight face, including people who *really* ought to know better. 
The hpcc-systems platform is primarily c++ under the hood. 
&gt;it is kind of silly to pretend that JSF is "just" a template engine like velocity But that's not what I said. JSF is a complete MVC framework, which is itself part of a larger full stack framework. The templating engine is Facelets. What I said is that programmers can put on their page whatever they want, and JSF will not magically add JavaScript to that or transform it. Their are various levels of how much control you have and how much you want to make use of prefabricated blocks. I fail to see why that would be dishonest, as it's simply the truth. Modern JSF pages have a LOT of plain HTML on them, and JSF does nothing with it. The code is rendered as you type it. Then as I explained you can use composite components, tags and (I didn't mention them yet) includes, which group your own code. Why is it dishonest to say that? This is simply what I as a JSF developer do daily for the apps I write. Then you can use your own Java based components, which still render your own code (I didn't mention this yet), or provided Java based components. For provided Java based components you can choose to write them as pass-through components, meaning you write regular HTML on your page with a special namespaced ID that makes it a JSF component. Yes, THIS kind of construct will be replaced by JSF, but it's only one of many options. &gt;They take their toolkit of choice often promising stuff like "modern AJAX" and run / paint themselves into a corner with it. I think this is the absurd idea that an entire page should consist only out of 3rd party provided components. I don't know if there are actual JSF developers who actually think this, or if it's just opponents of JSF who accuse JSF developer of doing this. In practice however I don't see people who actually use JSF doing this. 
No. Containerless or embedded container is the way. One container per service per JVM, shared-nothing. 
All the places I've worked, I've never seen JSF and I don't know anyone using it. I have used it for some of my own projects here and there, only JSF 2.x although I did mess around with JSF 1.x, but overall, I prefer action-oriented frameworks like Spring MVC and Struts. This makes me very curious about Ozark. As they say, birds of a feather flock together.
Because it's a pretty big time investment. The IDEA internals weren't exactly well documented last I had cause to dig into them. This might also explain why some of the bigger plugins end up going commercial (eg. Cursive)
Then you havent worked in much places. If JSF would not be used as you seem to infer, how can there be so many questions on SO about it? Why do people ask questions about a tech they don't use?
You missed the sarcasm. You can program for the year 2000 in any decade. Also, arguing by popularity is a poor form of argument. JPA and ORMs are also very popular, but there are those who wouldn't touch those with a 10-foot pole because they consider them tools for the lazy who are willing to tolerate leaky abstractions and overhead just to avoid writing SQL.
I believe they published the final decision here http://blog.jetbrains.com/blog/2015/09/18/final-update-on-the-jetbrains-toolbox-announcement/
Then you havent worked in much places. If JSF would not be used as you seem to infer, how can there be so many questions on SO about it? Why do people ask questions about a tech they don't use?
I have worked in plenty of places. Why would you assume that I haven't? You completely missed my point. I never said JSF isn't used, obviously it is. What I am *explaining* is that, despite the popularity of JSF, it makes perfect sense that people wouldn't have encountered it as opposed to your experience, because people have their biases (birds of a feather), and will tend to work at places that cater to their biases (flock together).
I'm hoping this is in the same vein of jokes, if so - nice. 
My current toolbox is Spring, Hibernate, Jetty (embedded), GoCD, Chef, Intellij, Pacto (http://thoughtworks.github.io/pacto/) I would like to give Netflix OSS stack a try and use docker to deployments.
My guess is that if the identity lambda gets used a lot, the JVM will inline it. Edit: http://www.oracle.com/technetwork/java/jvmls2013kuksen-2014088.pdf
What serves the application inside the container, then? Netty?
Their plugin API is pretty well documented though, and that's how majority of features would be developed. However, even documenting the internals is not insurmountable if there was a will to do it.
&gt; Because it seemed highly unlikely that you never encountered JSF &gt; yourself *In the places I've worked*. Obviously I have encountered JSF *myself*, because I don't restrict my exploration of technology exclusively to the tools used at work. Otherwise, I would never have encountered Haskell either. &gt; even don't know anyone using it Being a Java programmer isn't something I look for in my friends. Given that I've worked at places where JSF is not used, it isn't a leap that the Java developers I know wouldn't tend to use JSF either. At least, none of my friends who happen to be Java developers use JSF, and when they do talk about it, it is not in the nicest of terms. Maybe my friends have bought into the REST and Javascript framework kool-aid. I like REST and Javascript, maybe that says something about my choice of friends. &gt; avoid clients that ask for JSF I have never in my life encountered a client that asked for JSF. All they care about is: does the site work and how much will it cost? They would be none the wiser if I developed the site in PHP, which I have done. I don't discriminate. Although, I did have one client who asked me not to use JSF (specifically Primefaces) because he said that the HTML was "garbage". I have never "avoided" JSF. But because I know Spring, I tend to apply for jobs that ask for it, you know, for better odds of landing the job. Birds of a feather flock together. &gt; your original statement really sounded unlikely to me. My original statement was "birds of a feather flock together". I have literally spent two posts explaining an English saying to death. 
I'm a bit sceptical about parameter name reflection, not only because it's using reflection, but also because it won't survive obfuscation.
That's all fine and good. That is a real argument for ORM. There are also arguments for server-side components, such as security based on the UI model. Some prefer to stick to the relational model, and keep OO concepts such as object graphs and object identity out of their persistence layer. In this way, ORM is analogous to JSF. HTTP has no notion of components, and thus, some would prefer to keep UI concepts out of their backend services, preferring more UI agnostic REST APIs aligned with HTTP, and preferring a API driven security model. Popularity is a dumb metric, and choices should not be made based on what is popular, but rather based on an informed decision considering the type of application you wish to write.
Internally. VMs in multiple data centers running docker on Ubuntu. Far from ideal, but hey, not my problem*. *Actually, I'm really interested in what else we can do, I just am glad I'm our ops guy.
I thought [Benjamin Winterberg's tutorial](http://winterbe.com/posts/2014/04/05/java8-nashorn-tutorial/) was really helpful. What are you stuck on?
&gt;Netflix OSS Netflix is my new mantra, I love the stuff they're releasing open source. Find any good articles/examples? I [linked one above](http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html), about the best one I've found so far.
Impala is written in C++, but, admittedly, that sits on top of HDFS, which is written in...
It *is* good, but I was hoping Oracle would have provided a detailed reference guide. I want to know how to pass a function to a Javascript function from Java. Something like engine.eval("function foo(callback) { callback({ output: 'hello world' }) }"); invocable.invokeFunction("foo", &lt;what do I put here&gt;); I can't seem to find anything that indicates how to do this. I tried passing a lambda or an object that implements an interface. Nothing seems to work. 
I think they wanted to carefully contain the problem. If you examine the OpenJDK mailing list, you can see how the discussion evolved from initially [considering SAT-solvers](http://mail.openjdk.java.net/pipermail/jigsaw-dev/2012-May/002608.html) to [questioning the merits](http://mail.openjdk.java.net/pipermail/jigsaw-dev/2013-September/003380.html) of using them in practice. If you look at the [initial draft](http://cr.openjdk.java.net/~mr/jigsaw/notes/jigsaw-big-picture-01), they originally wanted dependency resolution but soon realized that implementing it [would be intractable](http://mail.openjdk.java.net/pipermail/jigsaw-dev/2011-December/001881.html). That requirement alone took several years to debug. By the time they figured out how to effectively [contain the problem](https://www.youtube.com/watch?v=y8bpKYDrF5I&amp;amp;t=3274), Java 8 was released and [it was already 2014](http://openjdk.java.net/projects/jigsaw/goals-reqs/03#version-selection). In its current form, Project Jigsaw [deliberately avoids](http://openjdk.java.net/projects/jigsaw/spec/reqs/02#version-selection) dependency management, as "Maven, Ivy, and Gradle have all tackled this difficult problem", despite [eschewing OSGi](http://mreinhold.org/blog/late-for-the-train-qa#q17) for ostensibly the same reason. I suppose they need to choose their battles. By choosing to validate dependencies, but not actually solving them, they dodged the NP-complete bullet, and could focus on [more pressing matters](http://openjdk.java.net/projects/jigsaw/spec/reqs/#reliable-configuration).
Brian Goetz said on several occasions that his main goal is not to add new features but to make sure that unnecessary stuff doesn't get in. Being convenient is simply not enough. He is very strict about this and has very good reasons to do so. http://www.infoq.com/presentations/java-history-present-future
Doesn't word have this built in? Does your version produce nicer HTML, or was it just a school project/learning exercise?
I don't think anyone here said not to use PrimeFaces components, just that the frameworks doesn't force you to exclusively use them. Even if the in-house tools is written with JSF and uses PrimeFaces components, then in modern JSF you would not go out of your way to avoid any usage of say a `&lt;p&gt;` tag. Modern JSF is about using plain GET based links between pages and not doing silly things with navigation rules where you postback and navigate witout redirect (so you get the infamous one-url-behind pronlem). Modern JSF is about using components where it makes sense and using direct HTML where it makes sense, and not forcing yourself into an idealistic world where everything should be a component or everything should be direct html.
I will second dropwizard. I've had great success.
I'm not really sure what the point of extension methods is. Other than switching the order of the function name and the first argument, what do they do that regular functions do not? Polymorphic?
I'm using Dropwizard. Hibernate or pure JDBC on backend. Angular front-end. I used webstorm for some app dev, but use eclipse on the backend. I deploy after a maven build as single runnable jar. containers buy me tnothing that I can find.
I need convert a lot of doc files (talking about 100+) to HTML. So I built this to use it with PHP/Python script to automatize it.
Not exactly. An extension method is a special type of static method. The compiler just translates the call, turning what looks like an instance method invocation into an ordinary static method call. public static BigInteger square(this BigInteger n) { return n * n; } new BigInteger(2).square() = square(new BigInteger(2)) = 4; Scala implicits are not static. If the Scala compiler sees that an object does not have a method, it will look for an implicit function which takes that object type as an input and returns a object that does implement that method, performing an implicit conversion. An implicit function is essentially a proxy factory, used by the Scala compiler to create a new proxy instance at the call site. This has more overhead than ordinary static dispatch because a new instance must be created. class RichInt(i: Int) { def square = i * i; } implicit def richInt(i: Int) = new RichInt(i); 2.square() = new RichInt(2).square() = 4;
&gt;Note that from Java SE 8 onwards, users are asked to migrate to java.time (JSR-310).
if you do implicit class RichInt(i: Int) extends AnyVal { def square = i * i } and then call 2.square You can look at the disassembly and see that it calls a static method and doesn't wrap anything for the conversion.
&gt; becouse classes have fields beside methods. While methods can be overridden in the child class, letting the developer "choose" his way, members cannot. This could be dealt with in a similar way they chose for default methods. Any reference on the child class to the ambiguous field should give a compiler error. You must specify which field you're using at each time. Since normally fields should be private anyways, they would hardly be more of a source of diamond problems than methods. &gt; costructors follow a strict logic about which is run before the others ... This can easily be broken with multiple inheritance Why? Again, some arbitrary definition could be done, i.e., start by the first parent declared, and go up to its parents. A sort of depth-first search upwards. To me it seems things are evolving in a "hacky" way in Java. I believe that if the people conceiving the language back in the 90s were forced with the requirement of allowing default methods in interfaces, they would just abolish the concept of interfaces altogether and have multiple inheritance instead. The only reason interfaces were invented IMHO was to allow for a way to implement multiple contracts without falling into the diamond problem, but now with this default method thing they've had to face the diamond problem and come out with a solution (compiler error!) to it.
I was stuck on exactly the same thing a couple days ago. [Here's the answer](http://stackoverflow.com/questions/32596733/set-a-javascript-name-to-be-a-java-function-in-nashorn).
So because the communication between the L2 cache and the ALU in a CPU don't care about HTML, we should compare a visual widget to the address bus? Strange...
My team moved to Dropwizard about a year ago. We love it.
I really like how JetBrains took our feedback into consideration. What I'm getting from this is being able to still use the software after you pay for a year, just no updates. Am I wrong?
I don't really get how that is different than paying once getting free upgrades for a year, then paying for an upgrade after your year is up and getting another year of free upgrades. I got to be missing something.
I was just describing what I have seen in projects out there. YMMV. Personally I've been using JSF directly and as target for a meta-framework. Been questioning the wisdom of that approach in the face of recent client-side developments. Recently wrote a Spring MVC view implementation that uses react.js to do the actual rendering (potentially isomorphic via Nashorn) which seems pretty promising, e.g.
I believe Undertow is now also a Spring Boot option.
I think what JetBrains is going for is a lower cost of entry. A new customer can now pay for the software monthly, if they hate it, they can stop. After 12 months they get a perpetual license. I think it's pretty cool, but I don't think I'll use that payment method.
+1 for [Ninja Framework.] (http://www.ninjaframework.org/introduction.html) It's was built for nearly the exact purpose described. The only downside is it is relatively young. I'm also a big fan of Groovy, a slick dynamic JVM language, that integrates easily with plain Java.
Sounds good to me. Glad they came around.
This is so far best I can edit it and make it my code, but still error shows up I have no idea why the error keep shows up import java.io.*; import org.apache.poi.hssf.usermodel.HSSFCell; import org.apache.poi.hssf.usermodel.HSSFRow; import org.apache.poi.hssf.usermodel.HSSFSheet; import org.apache.poi.hssf.usermodel.HSSFWorkbook; public class test { FileInputStream fis=new FileInputStream("D:\\roqkffhwk.xls"); HSSFWorkbook workbook=new HSSFWorkbook(fis); int rowindex=0; int columnindex=0; HSSFSheet sheet=workbook.getSheetAt(0); int rows=sheet.getPhysicalNumberOfRows(); for(rowindex=1;rowindex&lt;rows;rowindex++){ //행을 읽는다 HSSFRow row=sheet.getRow(rowindex); if(row !=null){ int cells=row.getPhysicalNumberOfCells(); for(columnindex=0;columnindex&lt;=cells;columnindex++){ HSSFCell cell=row.getCell(columnindex); String value=""; if(cell==null){ continue; }else{ switch (cell.getCellType()){ case HSSFCell.CELL_TYPE_FORMULA: value=cell.getCellFormula(); break; case HSSFCell.CELL_TYPE_NUMERIC: value=cell.getNumericCellValue()+""; break; case HSSFCell.CELL_TYPE_STRING: value=cell.getStringCellValue()+""; break; case HSSFCell.CELL_TYPE_BLANK: value=cell.getBooleanCellValue()+""; break; case HSSFCell.CELL_TYPE_ERROR: value=cell.getErrorCellValue()+""; break; } } System.out.println("Written on it :"+value); } } } } } 
Where does it say fired?
The error code tells you the problem exactly. Basically, your class needs a main() method. This will be true of all java applications. The compiler looks for a main() method, which must be public and static (it would be a good exercise for you to think about why), as a driver for your program. String[] args is an array containing the passed in command line arguments, if any. Once you've defined main(), you should move all of the code you've written in that class into it. 
I would never use this in production. I see this as good for testing and other non-critical environments. 
I'm pretty excited to complete the next version, which replaces LRU with an optimal replacement policy. I may co-author a paper on this new policy, which is much simpler and more space efficient than the current gold standard (ARC, LIRS). Those policies rely on retaining a large number of evicted keys for historic recencies, whereas we use a highly compact sketch to probabilistically estimate the entry's popularity. This version will also introduce a fast-path optimization that may significantly increase the concurrent throughput.
First of all Java is not the option for this. If you don't like the templates then why don't you just go to Photoshop and create your own card. Here is another one http://lmgtfy.com/?q=how+to+create+a+ecard+in+photoshop
Async IO and event loop is all you need, didn't you hear? If you need multiple cores, you're ~~probably~~ doing it wrong ...
I confused this with [Apache Spark](http://spark.apache.org/)
&gt; Netflix is my new mantra They're awesome. And if anything the sheer volumes of requests and data they handle prove that their stuff work. Dogfooding to the extreme. And also worth mentioning is their development practices: having [chaos monkey](http://techblog.netflix.com/2012/07/chaos-monkey-released-into-wild.html) shoot down instances so that their developers simply have to take failure into account. Something like that is unheard of in most companies.
dafuq is that public static void main(String args[]) { try { WordToHtml wordtohtml = new WordToHtml(new File(args[0])); wordtohtml.convert(wordtohtml.docFile); } catch (Exception e) { System.out.println("0"); } finally { System.out.println("1"); } }
I dont understand what u mean, those prints?
That exception handling sucks. You dont know what happened when something went wrong. 
Can someone summarize the main differences from guava caching?
Yeah I see what you mean, I'm going to fix it.
Yep.. Netflix OSS looks interesting. The best resource i've come across for Netflix OSS is their github wiki page and source code. Hopefully this state improves over time. BTW, thanks for the link :)
Because having a clear separation between the client and the server is important is why you should care about it. That's how you avoid having a clusterfuck of an application where everything is a giant tangled mess, like pretty much every JSF applications I've seen. Oh and of course you can now do things like write different clients such as native mobile against the same server without having to rewrite your app entirely. The fact that a lot of Java developers have no understanding of these basic ideas in 2015 is what's really strange.
Great library. Many algorithms.
Are these creating intermediate representations for each operation? The way the streams API defers processing until termination is one of its great strengths IMO.
Looks like it's in the project wiki: https://github.com/ben-manes/caffeine/wiki/Guava
&gt;HTTP has no notion of components To continue this original slapstick, SSDs have no notion of strong typing. You may also want to consider that Pascal doesn't have any notion of DPI. Just saying.
this looks awesome. has anyone written a scala wrapper to clean up the syntax a little while keeping most of the perf? could see this being pretty nice for some play apps...
I understand why that question is so uncomfortable that you wouldn't want to answer it. :)
I really like Caffeine as it supports all the nice Features of Java 7 and Java 8 which Guava does not i.e. CompletableFuture&lt;T&gt; for the AsyncLoadingCache and Lambdas/Method-References as CacheLoaders A feature I would really love is preloading values within a AsyncLoadingCache on a second low priority Executor. If you use AsyncLoadingCache.synchronous().refresh(&lt;aKey&gt;) it's currently computed on the specified Executor. If I initiate a refresh of a couple hundreds of keys and a new request comes in it has to wait until the Executor has computed the preloading values. A function like AsyncLoadingCache.hintFutureUseage(&lt;aKey&gt;, &lt;aExecutor&gt;) would be really nice
Since I remember your username showing up in the earlier threads on this topic, and how clearly you seemed to understand the issues back then, you really need to go back and re-read what's has been announced. They have not come around at all. No one, and I mean no one, wants to roll back 364 days-worth of versions if they decide to not renew. JetBrains would have been better off setting this up and describing it as an open-ended lease program with a buy-out option for the most recent version, since this is what it boils down to when you push aside their misleading wording. People would understand it clearly, as it would use terms with which they are already familiar, and then we could all move on and leave JetBrains in the position to learn just how much the majority of people hate leasing things. ;) Instead, we are left with replies from their staff which are very nearly as dismissive and disrespectful of their customers as during the earlier posts and comments, but with the newly-added and purely underhanded move of a perpetual license that fools only those who aren't reading all the details. JetBrains have lost their way. They clearly don't respect their customers, and in turn I cannot respect them or give them business. And I've given them lots over the years. Time to give Eclipse and NetBeans a fresh try. It's been forever since I tried them out, and I'm only doing myself a disservice by staying with IDEA any longer as I'll have to move away from it sooner or later.
I guess you have access to better drugs than I do. :)
Please consider opening an issue so we can discuss this in more depth. The `get(key, (k, executor) -&gt; future)` method is a workaround. It could be slightly annoying because the caller needs to know how to load the entry. A `getAll` with a bulk loader (`loadAll`) would be my preference, though. I'm not convinced that a high/low priority executor is useful due to Thread not honoring priority and `ForkJoinPool` (default) doesn't suffer the same bottlenecks that `ThreadPoolExecutor`does.
JSF: just slow framework 
JSF is really huge, lots of startups use it (see Adam Bien's series), and lots of established businesses use it (eBay, bmw, NH hotels to name a few) and it's off the scale big at intranet apps. And don't forget that ADF is based on JSF. Now Reddit &amp; hacker news may not talk about ADF often, but a lot of applications are powered by it, like eg the systems used to process tax collection in many countries around the world.
We use JSF extensively and have recently been hiring contractors and lots of them have JSF and Primefaces on their resume but when queried can't really back much up. It's been interesting but I don't think JSF is very "hard" for what we need so hasn't mattered much.
Banks &amp; Government love it due to the 'Enterpise' tag.
I've worked with several top tier banks and in government and they don't use it for anything I've seen. Most of my clients have old-fashioned, risk-averse IT managers and they usually consider Spring to be the "safe" choice. If not, then they choose Microsoft stacks.
cheers :)
Hi. Ok, so I finally had the time to do this. Sorry for the long delay. I will explain the differences in performance and show that this benchmark is generally a bad one as it caters exactly to Go's strengths and avoids its weaknesses, and how Java still manages to win. But first here's the [Go code I used](https://gist.github.com/pron/56e51bd3cbe86e26e962), and here's the [Java code](https://gist.github.com/pron/c7ce44bca55fb46431d9). The main difference from your code is that now, instead of a single ring, there are multiple ones, and I'll explain why later. There are a few issues at play here: 1. Runtime Support for Fibers Go's support for fibers is built into the runtime, while Quasar implements fibers using bytecode instrumentation. Quasar's implementation adds some overhead that is very small, but this benchmark measuers *just* overhead (there's no actual work done), so a small change in overhead can result in a big difference in the result. 2. Scheduler Go's goroutines are scheduled with a rather crude work-stealing scheduler that doesn't have very good scalability. Its operation is very simple. Any scheduling task (a goroutine woken up by a running goroutine by sending a message to a channel) is scheduled in the current kernel-thread's scheduling queue, unless it is full, in which case it is scheduled in the global queue, which is protected by a lock. Quasar schedules fibers by default with Java's ForkJoin, which is a state-of-the-art work-stealing scheduler written by Doug Lea. It has elaborate load-balancing mechanisms, and is completely non-blocking, however it has a problem dealing with the degenerate case where a single kernel thread is optimal. If only one fiber is running and another is scheduled (when woken up by sending a messag to a channel), the scheduler first checks if there are any kernel threads that are completely idle, and if so, it wakes one up and schedules the fiber there. Wakng up a kernel thread is very expensive, and in this case, as each fiber communicates only with the next one, it is best that they all share the same kernel thread, otherwise there will be cache-misses as the channel messages need to travel from one core (running one kernel thread) to the other. The original benchmark recreates this degenerate case exactly, which is the only circumstance where Java's ForkJoin is suboptimal. Of course, real-world scenarios are very different. That's why I've added the multiple rings to occupy multiple threads. 3. Memory and GC The benchamrk has two types of objects allocated: channels and fibers. Channels take a few bytes each, while fibers are bigger because they have a stack. HotSpot's GCs are far better than Go's, but in this case, the odds are stacked against them. In Go (I think, though I'm not 100% certain) goroutines' stacks aren't plain heap objects, but are deallocated immediately when destroyed. Quasar, OTOH, allocates fiber stacks as plain heap objects which are deallocated by the GC. Go's approach is very good, but in a real application it doesn't matter much, as heap objects far outweight goroutine stacks -- but not in this benchmark. The channels are tiny and in themselves trigger GC collections very rarely, but the Java version has to do many more collections for the fibers -- that is the reason why in the 1M fiber case the Quasar version is much slower (you can run it with `-verbose:gc` to verify that most of the time is spent in the collector). A real application, though, looks very different, and there HotSpot's superior GCs would yield wins. 4. Compiler Java's optimizing compiler is much more advanced than Go's, but, again (see point 1), this benchmark contains no computational work. Now, for the results. First, a single ring: Go: Test time: 589 ms 100001 Test time: 90 ms 100001 Test time: 236 ms 100001 Test time: 93 ms 100001 Test time: 95 ms 100001 Test time: 106 ms 100001 Test time: 249 ms 100001 Test time: 105 ms 100001 Test time: 117 ms 100001 Test time: 110 ms 100001 Test time: 145 ms 100001 Test time: 106 ms 100001 Test time: 110 ms 100001 Test time: 118 ms 100001 Test time: 111 ms 100001 Test time: 330 ms 100001 Test time: 114 ms 100001 Test time: 113 ms 100001 Test time: 114 ms 100001 Test time: 335 ms 100001 Java: 0: 1837 ms 100001 1: 375 ms 100001 2: 298 ms 100001 3: 795 ms 100001 4: 240 ms 100001 5: 181 ms 100001 6: 428 ms 100001 7: 475 ms 100001 8: 281 ms 100001 9: 204 ms 100001 10: 187 ms 100001 11: 205 ms 100001 12: 138 ms 100001 13: 272 ms 100001 14: 291 ms 100001 15: 173 ms 100001 16: 210 ms 100001 17: 159 ms 100001 18: 252 ms 100001 19: 287 ms 100001 Indeed, Go performs better. But why? Let's now look at 2 rings: Go: Test time: 1095 ms 200002 Test time: 181 ms 200002 Test time: 410 ms 200002 Test time: 187 ms 200002 Test time: 196 ms 200002 Test time: 219 ms 200002 Test time: 298 ms 200002 Test time: 195 ms 200002 Test time: 241 ms 200002 Test time: 377 ms 200002 Test time: 247 ms 200002 Test time: 254 ms 200002 Test time: 383 ms 200002 Test time: 270 ms 200002 Test time: 248 ms 200002 Test time: 390 ms 200002 Test time: 294 ms 200002 Test time: 257 ms 200002 Test time: 367 ms 200002 Test time: 273 ms 200002 Java: 0: 2689 ms 200002 1: 542 ms 200002 2: 1071 ms 200002 3: 452 ms 200002 4: 319 ms 200002 5: 410 ms 200002 6: 324 ms 200002 7: 405 ms 200002 8: 293 ms 200002 9: 235 ms 200002 10: 259 ms 200002 11: 233 ms 200002 12: 197 ms 200002 13: 294 ms 200002 14: 291 ms 200002 15: 347 ms 200002 16: 368 ms 200002 17: 141 ms 200002 18: 183 ms 200002 19: 304 ms 200002 Already, in spite of the lack of runtime support, in spite of the lack of work and in spite of more GC work, Java wins, but not by much. Now 4 rings: Go: Test time: 2043 ms 400004 Test time: 535 ms 400004 Test time: 693 ms 400004 Test time: 496 ms 400004 Test time: 1431 ms 400004 Test time: 568 ms 400004 Test time: 575 ms 400004 Test time: 599 ms 400004 Test time: 1804 ms 400004 Test time: 673 ms 400004 Test time: 631 ms 400004 Test time: 661 ms 400004 Test time: 642 ms 400004 Test time: 1029 ms 400004 Test time: 666 ms 400004 Test time: 651 ms 400004 Test time: 682 ms 400004 Test time: 1007 ms 400004 Test time: 686 ms 400004 Test time: 767 ms 400004 Java: 0: 3066 ms 400004 1: 1696 ms 400004 2: 931 ms 400004 3: 1258 ms 400004 4: 463 ms 400004 5: 1294 ms 400004 6: 558 ms 400004 7: 1153 ms 400004 8: 374 ms 400004 9: 336 ms 400004 10: 282 ms 400004 11: 476 ms 400004 12: 287 ms 400004 13: 443 ms 400004 14: 317 ms 400004 15: 281 ms 400004 16: 231 ms 400004 17: 227 ms 400004 18: 329 ms 400004 19: 427 ms 400004 Now Java wins by a bigger margin, so we can be ceratain that it's mostly the scheduler at play, and Go's win in the 1-ring case is due to ForkJoin's suboptimal handling of the degenerate case where a single thread is the best scheduling strategy. With more fibers, however, the GC pressure becomes too big to handle gracefully, and Go wins. I hope I've made it clear, though, that in a real-world scenario, Java's wins would be significant. In general, this benchmark caters to Go's strengths and avoids its weaknesses by: creating a scheduling scenario that is best served by a crude scheduler, and avoids a more elaborate, real-time scenario where a crude scheduler would be challenged; it avoids doing any computational work, which is great if you have a simple compiler and avoids interesting work that would require a good optimizer; it allocates only a very small amount of heap RAM and large amounts of stack, whereas in a real-world scenario the case would normally be the opposite. 
Be glad, you have the possibility to get in touch of computer science in school. The teacher could just (asked to be) withdraw (from) the position and there would be no class at all. The administrative work you have to do in the background to make everything work is quite large, like arranging the budget for the machines, maintenance, time, etc. It is like writing the school books for the pupils yourself which is the standard tool for learning in schools. Sometimes teachers are submitted doing tasks for which they not even signed for (taking classes they did not learn); reasons might difffer from country to school. But just being angry at your teacher will not solve your issue. You should use your student council to improve your (you and of your teacher) situation. --- You can use newers JDKs if you want but if you are lacking permissions to install them you should know to set it up in an user environment (download zip version for your OS and set up the `JAVA_HOME`). Installation of Eclipse does not require permissions but a working JRE. I think the latest Eclipse requires at least JRE 7 so you have to downgrade depending on your requirements.
High vs low priority could be useful for cases in a thread pool like the one my threadly project provides: http://threadly.github.io/threadly/javadocs/4.3.0/org/threadly/concurrent/PriorityScheduler.html You could have a master PriorityScheduler pool, and then wrap it in a 'PrioritySchedulerDefaultPriorityWrapper' with a default priority of low. In that case this provided scheduler would consider the tasks submitted from the wrapped scheduler to be low priority with respects to other tasks submitted. The goal in my design is to use priority to determine when execution should start compared to other pool needs, rather than attempt to apply a priority for the OS scheduler to adhere to.
Minecraft Mod Making is another possible choice. Content would be: * Working with a non-standardized "API" * GUI * OpenGL * Customer Service * Build Scripts * Publishing * Dependency Management * ASM * Reflection * Multi Threading * Performance Tuning * Netty (networking) * Game design and probably more or less depending on your idea
i really doubt anything jsf does could be as fast as a simple js to java interface. the lifecycle is heavy by design. its a none generalized component framework - need a datatable? great design it over and over and over... i hate extjs but its a lot closer to what i need than jsf regardless of implementation.
Oh sure, a design like yours could be very useful. It requires a little knowledge of queuing theory and system behavior to know whether priority provides a significant benefit. In this case its also important to ensure that the interfaces carry their conceptual weight. If the case of priority is valuable but can't be easily supported due to API limitation then there is a problem. If the API can be simpler, priorities are a rarely used feature, and there is a simple workaround then its okay. So exploring that in a github issue would be valuable.
Xform is an immutable builder for transformations. It just makes a list of the operations you specify without carrying any of them out. When you call foldLeft() or one of the "endpoint" methods like toImList(), it creates the lightest-weight execution path it can for the operations you specified, and does them in a for loop with (I think) only 3 if statements (each has sub-branches). On my machine, single-threaded, with 30 million items in an ArrayList source, Xform takes an average of 122ms as opposed to 120ms for the native for loop. That's better than 98% as fast as the fastest iteration available on Java, but due to those 3 if statements, it has a lot more functionality. The heart of the implementation is _foldLeft() in Xform, but it's kind of where "useful and easy to code" meets "fast to execute" and is probably some of the hardest code in the project to read and comprehend: https://github.com/GlenKPeterson/UncleJim/blob/master/src/main/java/org/organicdesign/fp/xform/Xform.java The Transfom implementation is loosely based on Paul Philips concept of a "View," not on Clojure's Sequence abstraction. https://www.youtube.com/watch?v=uiJycy6dFSQ&amp;t=26m19s
We did contracting work for one of Germany's largest airline companies and they used JSF a lot.
I think it's more accurate to say that Clojure's Seq (sequence) abstraction is lazy and cached. The collections are mostly separate from that, and where they were intertwined, I discarded that part. The lowest common denominator in UncleJim is not Sequence, but UnmodIterable. The reason for that decision is about a 50x performance improvement over my best shot at implementing Clojure's Sequence abstraction. I also tried replacing Iterable with something that returned an Option&lt;T&gt;, but Java native iteration and the current Xform implementation are both about 3x faster than that was.
+1 for PrimeFaces. This has greatly contributed to JSF's ongoing success. 
&gt; The web was build with the idea of servers serving HTML You might want to tell Tim Berners-Lee about that. As the inventor of the web, [his ideas](http://www.w3.org/DesignIssues/Architecture.html) about what the web should be might hold some weight. In his words: &gt; The value of a common document language has been so enormous that &gt; HTML has gained a dominance on the Web, but it does not play a &gt; fundamental key role. Web applications are required to be able to process &gt; HTML, as it is the connective tissue of the Web, but it has no special place &gt; architecturally. So, if the web isn't "about" HTML, what is it about? Tim Berners-Lee says this: &gt; The most fundamental specification of Web architecture, while one of the &gt; simpler, is that of the Universal Resource Identifier, or URI. The principle &gt; that anything, absolutely anything, "on the Web" should identified distinctly &gt; by an otherwise opaque string of characters (A URI and possibly a &gt; fragment identifier) is core to the universality. Thus, your conclusion: &gt; JavaScript doing dozens of small requests and then generating HTML and &gt; then letting that HTML be rendered client side again was never the intend &gt; of the web. Is not what Tim Berners-Lee had in mind. He had in mind a network of web objects, resources identified by URIs, with operations defined by HTTP, having many multiple representations, identified by MIME, of which HTML is only one. Of course, it is possible that you might know more than the inventor of the web what the web is about. &gt; And with your js to java interface you're paying twice in computational &gt; costs! This is not true in general and depends entirely on the usage of the application. For example, consider GMail vs. Twitter. A user usually keeps a GMail window open for a long time, and thus only one full HTML rendering is required, and after that it is only incremental updates, in which case JSON RPC wins in computational cost. Whereas Twitter users usually stay on a Twitter feed for only a short while, which means more full HTML renders, in which case JSON RPC loses. With incremental updates, the cache doesn't matter at all. It is new, dynamic content. What could possibly be cached? Also, if you're using HTML templates, as in Angular, you still benefit from server caches. The HTML is sent as a static resource, cached in a static asset pipeline (or even CDN, so the app and the HTML don't even have to exist on the same server!) Subsequent JSON updates copy and manipulate existing DOM nodes already loaded in the client web browser. In this case, a JSON update is substantially faster than parsing and generating totally new DOM from server generated HTML. &gt; what is heavy about it? Is it really necessary to reconstruct the UI on the server side in a UIComponent tree? And then in multiple phases, translate the HTTP request into UI events? This is a lot heavier than merely translating client input in form encoded or JSON form into to a lightweight POJO and passing that is an input to a single controller method.
I'd say it's popularity can largely be attributed to being part of the Java EE standard. There's so many frameworks to choose from why not go with the proposed standard which has been designed specifically to fit nicely with the rest of the Java EE stack
Beware that their documentation is consistently terrible or non existent. That plus a lack of much on Google / Stack Overflow and you'll find the source code is usually your only option.
The tab you closed is called a View, there's a lot of them. You can open it again by going to ````Window -&gt; Show View -&gt; Javadoc````
IMO a bunch of folks have been vote brigading JSF articles on r/java for a while now. For e.g. check out the history for: /u/henk53 | /u/avoidhugeships | /u/johnwaterwood
I used to works with Ant on a large project, it took 2 minute to compile the project every damn time. Right now, I use Maven, and it take about 2ms for a new build. Setting up your build to into account previous build really help a lot thought(thanks to IDE integration). Also, manage dependency with ant usually end up in jar-hell on large project despite you use ant-ivy. Gradle is fine, but I known it tend to get slow on large project. As for Maven, well the enforced standard structure will make it a lot easier to get thing working for later. The IDE integration does help to get thing done and there's ton of plugin to make your old custom task working. Also, I like to separate different part of my project into multiple smaller project, so it make working in team enjoyable.
Maven is pretty simple if you have a Maven-y project structure with a normal goal (like pooping out a jar). Even a multi-module project is easy to setup. But as soon as you add some esoteric constraints to the workflow things can get pretty hairy.
Seems nice. The search looks like very much what we are doing at work. But I do not know about the game. Sorry to ask, web guy here. What is good new ui? Javafx?
Maven, its not perfect but will do the job for you. Gradle is bit slow based on my experience.
As an ant person, you're going to struggle with either maven or gradle. You're going to want to do your builds your way and you're going to end up fighting maven or gradle all the way. Stop, relax and let go. Give in to their opinionated ways. Don't fight the inevitable; if you choose to use them eventually you'll let them do what they want. Because you won't win. Maven and gradle are massively opinionated about how they build projects. Ant is procedural; you tell it how to build and it does it. Maven is declarative; you say what you want and it does it for you. You've used ivy so you already have one main point of maven and gradle. Because they're opinionated, most Java developers will understand straight away how your build system works; they don't have to guess where the source code is. They don't have to wonder what files will end up in the jar or war. Being able to walk up to a strange project and instantly understand how it's built is not to be underestimated. It's a cognitive load you don't have to worry about. Because maven is declarative, your IDE can import a project and reason about how it all fits together. A pom.xml is almost netbeans' native project format. You'll end up writing far less build code with either of them compared to ant. Which to pick? Maven is older, more mature, but uses a more verbose XML format, where as the newcomer gradle's build. groovy is lighter, but because it's groovy, you have more flexibility. This comes at the price of automated tools not being able to reason as well about your build any more. Gradle can also be quite slow.
Maven repositories are not mimicked; they are just used. Maven repositories are the industry-standard for the JVM world, but that doesn't mean Maven (the build tool) is the best choice. There was simply no need to re-invent a new repository structure.
Everything my team writes and maintains is JSF. Everything new also uses PF.
It's much, much easier to get reliable, portable builds with Maven, which is what's important with large projects with many people working on them. Its strictness makes for better tooling as well. The main difference between Maven and Gradle is that Maven's build file is XML, while Gradle's is a Groovy script. The lack of scripting doesn't mean that Maven is less flexible, it just means that you're forced to factor out the custom build work into a separate, pre-compiled plugin that you write yourself. Because Gradle is a Groovy script, you can typically write that custom build logic into the script itself. But you pay for that flexibility with worse tooling and slower builds as the project gets large (because the entire script has to be recompiled every build instead of merely parsed). The only way Maven could be better is if they allowed the POMs to be written in JSON for brevity, which I think is on the horizon for a new release soon anyway
This, for me, is the essence of what is wrong with these type of IDEs.
What exactly? The ability to show and hide data as needed?
I prefer Maven. I use Gradle for Android builds. Gradle is nice and does cut down on some verbosity, but having to copy and paste some dependency tag sections when using Maven doesn't bother me. The reason why Maven appeals to me is that the project will build after I check the project out of source control...unless the developers had no clue what they were doing or the project uses some ancient or custom jars that were never uploaded to Maven Central or some other well-known Maven repo that isn't configured in my Archiva repo. Other than that, I typically use the same Maven plug-ins over and over again. I primarily do web development and use multi-module Maven projects (pom project with a child ear and war). Whenever possible, I usually use a parent pom whose plug-in and dependency config are inherited by my multi-module projects. The one thing that I really don't like within the Maven world is messing with the Shade plug-in when dealing with Uber jars. I figured out how to use the Shade plug-in after completing a project and attempting to build an executable Uber jar, but it had me sweating there for a bit when I had to muster that unexpected, final mental lunge for the finish line. That was 2011, so maybe the plug-in has improved since then.
Why do people like server-side UI state? In fact, why do people like UI state in the first place? I have never understood that. I'll always prefer a simpler, (almost) stateless data transformation flow, e.g. using SQL and XSLT, or SQL and JSP
Hmm. People working with things like JSP for web applications don't have a voice...?
I found the Shade plugin pretty easy to use, even doing the actual class relocation junk. These days Capsule is also popular to create an executable uberjar: https://github.com/puniverse/capsule I'm not sure how well it does the actual class relocation though if you're trying to create an uberjar to be used as a library and not an executable.
This submission is kind of opinionated. I have some opinions, too. --- The bean style is atrocious. It violates every attempt at good style; I really hope we can get rid of it. &gt; This is a reduction in number of lines of code by a half. Unfair comparison. The no-arg constructor is equally relevant in both situations; and if you want it you should always define it because explicit &gt; implicit. &gt; immutable unless you extend it is not immutable. Make the class `final`, too. In fact, consider editing your IDE's templates to generate `final` classes instead. &gt; private final Optional&lt;Bar&gt; bar; I share Stephen Colebourne's opinion that `Optional` is only for boundaries. This is an unnecessary indirection and pessimisation. &gt; if it's obvious, don't document it. It's not obvious; document it. Even the public no-arg constructor. &gt; Java 8 has a nice stream and lambda syntax. It also has method references, and every time you write a lambda you should ask yourself if it should be made into a method reference. &gt; more fluent code, which is more readable. The former does not imply the latter. Counter claim: fluent interfaces are rarely more readable or ergonomic in the long term than traditional non-fluent interfaces. In the specific example, the biggest win would have come from a better variable name than `filtered`, which is neither specific (what was filtered?) nor accurate (elements of `filtered` will not compare equal to their sources in `list`). &gt; Java Tuples If you think you need a tuple you have n problems. &gt; Lombok Don't. &gt; AssertJ AssertJ is an excellent example of a fluent interface that dramatically improves readability.
&gt; So I see comments like this often and have to ask, if a tool works, does the job and you're comfortable with it, what do you gain by switching? Yes, this is one of the core reasons I'm asking. I an expert with Ant, so what do I gain by taking a tool I have little experience with over one where I can practically have the knowledge to turn in to a full blown app if I'm stupid enough?
Please see my comparison of build tools here: https://github.com/tkruse/build-bench Short-version: Ant: No caching, very slow, but okay for special projects Maven, Gradle: Faster, a lot of convenience for standard projects Sbt, Leiningen: Good for mixing Scala and Clojure, but won't beat Maven or Gradle for Java Buildr: Similar to Gradle, nice if you like Ruby Buck: Specialized on Android, similar syntax to Bazel Bazel, Pants: Google/Twitter tools optimized for speed on monorepos. Lots of caching, in particular for Bazel, so this can be VERY fast. But more effort to set up than Gradle. I think you cannot go wrong with Gradle, but if you feel adventurous and want to see amazing speed, you might try Bazel.
I've been thinking about this, and poms would be much nicer if you could write &lt;dependency&gt;groupid:artifact:version:scope&lt;/dependency&gt; That change alone would cut your pom.xml in half.
There is https://github.com/takari/polyglot-maven allowing you to choose from a variety of languages to define your maven build. YAML is probably a little better than JSON for that purpose (e.g. JSON has no official support for comments, because it is intended as a message format for sending messages, not as a file format for specifying stuff. Of course inofficially several parsers support comments). Writing custom logic leads to worse integration in both Maven and Gradle. In Maven it just don't happen as often, as people will shy away from that.
Maybe you should do a comparason yourself, and blog about it so we can all see!
A version is required, right, but my objection is more of a semantic one, I.e. tripartite logic means there are separate meanings for null, non-present, and empty. :: implies empty, not non-present. Most projects are multimodular.
Maven is garbage, go with Gradle. sorry all. That is just my PTSD shining through from having to debug large and complex maven builds. The great strength of maven is its strict standardised way of working. The great (and fatal) weakness of maven is its strict standardised way of working. A standard way of doing things is fine provided it matches your project. Most simple Java projects do, and that is fine. But sooner or later your project will grow and you need something which doesn't fit maven's model and that is when it goes off the rails. (Note: every large project requires something which is non-standard but still reasonable. It happens every time.) Fighting maven is terrible and it is a nightmare to debug what is going on. Maven is more of a build framework where you can plug things in or tweak settings on fixed structure. Gradle is closer to a toolkit where you tell it what and when to do something. The original poster sounds like a perfect candidate for Gradle. He/she prefers more of a scripting approach and already knows groovy. 
Are there any Java libraries that implement HTTP2 yet?
IntelliJ has a powersave mode though, does eclipse have that?
I'd argue it's worth the investment to learn maven, but barring that you can build with ant and use Ivy for dependency management.
Dude honestly this isn't a big deal. They will all have similar battery impact and even so if you charged your laptop to full before leaving with it it should last you all day.. I leave intellij or web storm open all day in the background and I'm at school from 11am to 9pm and i get by just fine. Also, if it's that much of an issue for you just take your charger. Use intellij over eclipse or net beans imo. Also, they provide their ultimate intellij version free for students. Although you could just use the already free community edition. 
I have intellij open all day and like 15 tabs on chrome. Not to mention three terminals, maybe sublime text. Everything is still fast. No ram issue here. If you have a new Macbook pro, you'll be fine since it usually comes with 8gb. Now if you plan on compiling a kernel or something while doing video editing while playing a game or something and watching a movie. Then you might have ram issues. 
Well, thinking about it, the first build took ~30-40 minute. No test involved. Then it took 2 minute for a new build. But at time, my CPU wasn't so great either. Thought the 2 minute build-time really got on my nerve when I had to debug how to import a large database from multiple specific format. Also, breaking the project in smaller pieces to get a better build time was almost impossible. My suggestions would be to use maven to get a clean base working. Then if you want to introduce build pipeline, etc... go ahead with Gradle, then just use a maven plugin wrapper and you're done.
Looking at /u/johnwaterwood post history looks like a PR newswire for enterprise java. Just shit posts about new versions of whatever products. The Spring posts that get voted up have relevant content in them.
The inbox fills up pretty quick at least if you say anything negative about Java tech, even JSF :-)
Besides archetypes, i can't think of any real pluses for selecting Maven at this point in time. It seems to be waning as a project, or perhaps it's just watered down because there is so much competition. We recently switched to Gradle, and it didn't have quite some functionality we needed out of the box, but it was easy to add with a little scripting. That being said, the overlap in functionality is so great between most of these tools, that it likely doesn't matter. I think the most important thing to consider is longevity -- the more active the development, the more likely the tool is going to be around and working longer. Nothing worse than going back to update an old project and finding that the tooling has crufted out from underneath you.
You should switch to classic theme? This looks ugly.
Thanks for the link! I'm also using Spring Boot and Docker. I'm using Gradle instead of Maven and haven't implemented automation as yet (just wrote a short bash script to tear down and stand up as required). I'm [consul](https://github.com/gliderlabs/docker-consul) for service discovery. I'm using it with [Registrator](https://github.com/gliderlabs/registrator) to automatically capture any services and allow the other microservices to interact with them. That said, I'll check out Netflix Eureka!
I've never submitted a Spring article and probably less than 0.1% of my comments are about it. 
That didn't quite answer the question whether your are working for Pivotal, did it?
I don't think it's worth it to us vim or emacs or whatever plus a terminal with Java. Java lends itself very well to IDEs and having the ability to effectively use one will be beneficial to your productivity, especially once your projects get larger. 
I am a big maven fan, but you can't say ant is slower (unless you're referring to development time) Building is faster with ant.
I've used all three - a lot. I like Maven for anything "work related". Maven keeps things standard - any dev can come in and instantly know what the F is going on. Ant is the exact opposite. Gradle, if using conventions, is the same; however, it's as flexible as ant so you can fall into the same issues as ant. If I'm on my own personal project that no one else uses? I prefer Gradle.
Maven forces you to have 1 artifact per project. It creates a clear dependency path which, at times, is less "efficient" than Ant super custom jar builds, but it prevents this situation. If a class is used in multiple projects, you create a jar file (lets say "myproj-util") and then that jar/module is a dependency of another... 18 jars? 18 modules. If I'm editing that one "util class" now, I can clearly see who's using it without inspecting 18 jars. (by the way, I'm using a real life example that I ran into when I started at my currently company ~ 3 years ago. I'm now up to speed on things, but when I started I made one very normal change to a util class and ended up breaking a lot of shit.) 
Yeah I agree. I'm one of those people that just hate typing a lot of boilerplate code and it really stinks that current frameworks require so much of this boilerplate. (At least the ones that I'm using). The most important one to me is @Data because of JavaBeans that are still popular. Equality and hashed you should probably generate yourself. Just helps with that awful boilerplate.
If I understand it correctly, we can run multiple spring boot application in the same machine, by changing the tomcat or jetty ports. But I really like your point about killing the docker vs process and resolving host names using the container name. Can we have multiple docker containers for database and try to attain high availability? Have you tried it? Thanks. 
Thanks. Thats exactly my thoughts, if we have multiple configurations and setup, docker will make sense. But for running self contained fatjars, I don't think docker will add any benefits.
True, however seeing he's/she's still a student, learning java Sans IDE might help him/her a lot. Plus terminal its alright for small projects with simple build instructions.
"Why do people like server-side UI state?" For this particular question: I like that jsf can restore the view (the page) after submitting the form. This is important when working with forms like "when you choose option A, another c.d.e. fields appears, when you choose option B, different f.g.h.i.j.k fields appears, etc. When user click on Zz a panel with additional information appears, but user can close this panel* " etc. So in general you modify the DOM, and/or the state of the components. Then user clicks "Save" (submit the form) and you have to validate input, and if there are any violations, you have to show error messages... but you have to also restore the whole view (or force him to fill all input again). *And the info panel he just closed, you want it to be closed- it's its state. Of course you can do it all manually, but with jsf (and properly written components) you have it out of the box.
It has by itself great promise for easy parallel processing, but I personally like a bit more control over the thread pools being used. I work mostly in Java EE, so parallelstream is not exactly for me at the moment. 
The question I would ask myself in this situation, since you have chosen to go with Vaadin and it is Maven based, is it more work for you to reconfigure the Vaadin tools to use Ant or more work for you to get Maven working for your other components? As in the end they both simply generate class files, take the path of least resistance, get it working and then don't worry about it.
&gt; This isn't really Java's strength to begin with Not sure, Java is one of the fastest higher level languages out there.
Yeah... Took about 30 minutes to get working with Ant. Haven't bothered tying to get the other projects working in maven yet, the ones I did try were a pain the the ass what with dependencies etc. I'm considering just sticking with ant and creating a separate build project to test gradle.
You know, this is what i dont like about the "java world". It has been more than one year since v8 was released. Still, the only interesting articles you can read today are about forEach.
That's the only blemish in the new subscription model. I suspect it's a combination of making it easier to suspend updates to expired subscriptions (older version wouldn't get updates) and giving an extra incentive to renew (ie. negative reinforcement for not renewing). I believe its more of the former than the latter, since up to this little "bump in the road" I plan to renew my subscriptions because I'm satisfied with the service and not because I didn't want to downgrade. Edit: The changes does address most of the major concerns I had with their original subscription plan.
There was an article a couple weeks ago that showed how DSLs were now possible in Java 8u60. Did you see that? It was interesting enough to me that I went out and wrote my own DSL.
In my company, we have hundreds of projects each with their own unique build process using Ant. Often the documentation for the build is relatively lacking and there are no two builds that are alike. This makes working on multiple projects simultaneously very time consuming because you must learn and re-learn each process. However, none of the builds are doing anything particularly special. They all get some dependencies, compile some source code and then package it all into a single war. As we begin migrating these builds from Ant to Maven, we have found that we are able to standardise almost every single one of these builds into a single documented process. We no longer have to maintain (or rather fail to maintain) documentation for each one. Therefore, for us the problem was in fact the exact opposite. We were not stuck in our ways and so the same thing was implemented in a hundred different ways. Maven forced us into a single convention so that we can get on with writing applications, rather than fiddling with the build.
I saw an article which showed it was by quite a bit. Still, there's no guarantee and this may change over time as new optimization are introduced to the jvm. As always, if you have code that is critical to run fast, keep profiling it.
Because parallelStream in general is less efficient with smaller streams and more efficient with bigger streams, it's more of an optimization option down the line. So yes, people who profile their code and find that parallelStream improves runtime will use parallelStream
i dont want to point anyone, it is how the language evolves i suppose.
Nope, link?
Nagios? 
upstart?
In addition to the general service monitoring tools mentioned, there is also [Manage Cat](http://managecat.com/) which provides some more detailed insight into your Tomcat (or [TomEE](http://tomee.apache.org)) instances.
Sometimes you need cores, actually this is textbook one of those cases.
Java Service Wrapper? or YAJSW?
I think the point of the article wasn't that it's a good alternative or even faster, but it allows you different access by obtaining the stream and using function calls to run conditional operations on it to return only certain items. Cool? Yeah, I might mess with it, especially for that specific use, but I wouldn't call it the best choice in every scenario of course, and I don't think this article was either. 
So do most apps really do use proguard?
systemd?
[Here](https://www.reddit.com/r/java/comments/3haj8b/hash_literals/?ref=share&amp;ref_source=link). Also, [this](https://www.reddit.com/r/java/comments/3hu94j/html_in_java/?ref=share&amp;ref_source=link) is a later post by the same guy that shows a more sophisticated application of the technique.
I agree. You point out the major issue with functional programming: cool for solving very simple code. However, not usable when it is more complex. 
Yep, you can set the port on jetty/tomcat with Spring Boot using a command line switch but docker can randomly assign a port number and then you can use a service discovery tool (such as Consul) to look up the port number of the service at run time. All this shifts to a more scalable application. If you want high availability (HA) on your database then you need to select a DB which supports HA. Mysql will support HA but isn't particularly easy to set up whereas something like Cassandra is much easier. Docker won't help you with getting HA up and running but it'll make it easier to test/simulate. So you could fire up 10 nodes for your database cluster in Docker quite easily on your local machine and test killing them off. If you were doing this on a VMs you'd need to fire up 10 VMs which would be a pain to do locally.
Can we just all use Log4j2 and end the madness? I fight this battle everyday at work and even with data I can't get everyone on board. 
&gt; If your software is interesting enough to someone, they will reverse engineer it. That sounds like its not just a Java issue, but a software issue? (eg, other languages aren't immune to be reverse engineered?) I like that business model, but its probably better for enterprise and enterprise-like software, right?
ProGuard is nowadays intergrated into the SDK, you would have to turn it off by default.
&gt;That sounds like its not just a Java issue, but a software issue? Yes. Game developers spent millions on copy protection, yet cracks and mods exist. If it runs locally, it can be reverse engineered.
Oh ok, it has been a few years 
&gt; That sounds like its not just a Java issue, but a software issue? (eg, other languages aren't immune to be reverse engineered?) No language is immune to reverse engineering. Following on the answer from /u/knaekce, the demoscene roots go back to cracking games to remove code protection and add cheats like unlimited lifes or choosing the starting levels. Here are two well known tools for trying to figure out what the binary code is trying to do. http://www.hopperapp.com/ https://www.hex-rays.com/products/ida/index.shtml Signed binaries, code obfuscation, remote keys, native classloaders (in Java's case) are all obstacles, but if the attacker has access to the executable, it is only a matter of skill, determination and time.
&gt; If it runs ~~locally~~, it can be reverse engineered. FTFY. Even webapps can be reverse engineered... Decompiling, on the other hand...
Can we all just use Logback and end the madness?
Yeah, not claiming this is full proof. Just pointing out a strategy to make it more difficult to reverse engineer. Others have already discussed the impossibility of stopping a determined effort.
Of course, that's with HUGE amounts of research being poured into it every release. Most commercial apps won't have enough people giving a shit for it to matter, really.
Wouldn't you need a cron job that periodically checks the pid and send the email if it changes or is that built into upstart?
I don't want to post details because people may steal the idea. I would want to personally show someone over some voice chat. My idea has been done before but not this same way making it easier for users to be able to access and change between social media's. I don't want to go any further on reddit so if you would like to hear my further explanation pm me on what voice chat you would like to talk to me about it on. Edit: I basically just want to know if what I'm thinking of is even possible which I think it is but some people I know have said different.
Security through obscurity is not security, it might as well not even exist at this point. Looking at you, javascript community.
If it's running on someone else's computer, they deserve the right to view how it works and make changes. The solution? Don't put anything in the app that you wouldn't want your users to see. It's really not that hard to do.
I never thought I would see enigma mentioned anywhere outside of minecraft. Glad to see its use is widening!
In the end, you can't stop decryption/deobfuscation in any way. While you can make it harder, it simply doesn't work. You're still protected by license and copyright though.
Polyglot Maven is great but it does not work with IDE. Well at least not in Eclipse. 
Do you lock your doors at home when away? What about your car? It would be trivial for a determined person to get in either so why bother. Security through obscurity seems valid in certain situations depending on your requirements and risk tolerance. At the very least it will keep honest people honest.
I love it, fantastic tool.
but the encryption is only a minor deterrent. it will be obvious what is encrypted vs obfuscated based on the decompiler output. The loader code will be small, the amount of time it takes to deobfuscate (is that even the correct name for the operation?) will be low. We quickly jump to decrypting the meat. Even if we assume that's obfuscated too, there is little gain over only doing so.
What about the latest government funded viri !?
That's what we do in our enterprise software. We use a proprietary bootstrap written in C++ which decrypts the class files. As others have pointed out it's not bulletproof but it does prevent casual decompilation.
How much more difficult would it be to reverse engineer the software if you somehow inflated the compiled binary? Say, randomly include 2GB of code that doesn't effect output.
No language is immune to reverse engineering. If you don't want people reverse engineering code you've released to the public, then don't release anything.
Probably not much. If there are no jumps to the unused code, the reverse-engineers probably would not even look at it. It would be a minor annoyance. And you would have to explain your customers why your software is that big.
Another product made by hex-rays does great with C/C++: https://www.hex-rays.com/products/decompiler/
Rarely - the overhead created isn't wanted/cost effective most of the times. But in some very specific cases, where I have more than a 1M quick operations to execute, I'll use it. (like summing millions of entries).
I haven't used an obfuscator in quite a while, but back when I did, we used [Dash-O Pro](http://www.preemptive.com/products/dasho/overview). It's not free, but it was pretty good. 
I guess we can sum up the issue: * Java is indeed easier to decompile and reverse engineer than other languages * Obfuscators help, but won't stop an attacker with time and good skills * It does not matter how hard you try, there will be a way to reverse engineer you code, there are many examples of how DRM does not work. This affects all languages. I guess you could also use an ahead of time compiler, but then you would lose platform independence. 
It is heavily used in mobile, but not for obfuscation. Proguard saves a lot of space by stripping line numbers, removing unused classes and shortening names. 
... I'm a dyed in the wool Java programmer, but even I don't think that's even remotely true.
how would you reverse engineer code that only runs on a remote server?
This might not apply to your situation, but I've been selling my own java based software for nearly a decade, I've learned that you only have to make it hard enough to prevent your customers from stealing additional licenses. Don't worry about competitors, you should be so lucky to have to sue them. Bury some identification in your field/method names or something like that to prove theft (if they're stealing, they're lazy). As for preventing non-professional programmers from decompiling and making simple changes to unlock product, I base64 encode my licensing enforcement class (which cannot generate unlock keys even if found), hide it well, and load it the fly. Other random tips. Hide logic in java.lang.Object methods such as equals and toString when you know the method won't be used, the key here is to prevent text search from finding it. When you do determine a license violation, activate the kill switch in a separate thread making it harder for a debugger to trace the logic. Kills switches should be boring and look like something else. I employ more than one, spaced hours apart so the time commitment for tracking it down is substantial.
Seconded, regarding cors.
Program to slf4j and then everyone can use what ever logging framework they want. One nice feature of slf4j over straight log4j is no more: if (logger.isDebug()) { logger.debug("bigObject: " + bigObject); } You can just do logger.debug("bigObject: {}", bigObject); To be honest, thanks to slf4j's bridges and adaptors, it doesn't matter what you use, because I can replace the implementation with whatever I want. 
What do ZKM and Allatori do to the code that is so resistant to decompilation?
And then you have to ask yourself if all of this is even worth the trouble…
We don't bother. Our time is better spent on making our products more useful and attractive. There isn't much to steal anyway. The value is in our finished products, not in the details of their implementation.
&gt; Well, the 1-2 character field names make the code much less readable. That's why you use refactoring tools that just rename them. Sure it's work but once you guess what a certain var/method does your IDE can simply rename it for you. 
Any code that is distributed to users can be reverse engineered. You actually don't even need to look at the source most times to know how it works. Everyone uses the same libraries anyway. The only thing that's unique is the business logic, and that is obvious to any user. So why are you so concerned with people looking at your jars? I've seen obfuscation used at one of my jobs, and it was so clients couldn't make modifications without paying us. If a client stayed on the same version, they could write all sorts of extensions. There would be a ton of work if they ever needed to upgraded. The value of obfuscation is not so much that it scrambles the code than it's different every time your run it. Edit: typo
Noob career question: ain't working remote very hard? I find it very hard to put what I wanna say into writing. Skype calls is choppy most of the time..
Very nice, I didn't know that was possible. I just tested it with a pool size of 32 and 32 trivial parallel mappings with a forced delay of 1 second. It must have used all available threads because the whole thing took just a little over a second: final int nThreads = 32; ForkJoinPool forkJoinPool = new ForkJoinPool(nThreads); long t0 = System.currentTimeMillis(); List&lt;String&gt; values = forkJoinPool.submit(() -&gt; range(0, nThreads).parallel().mapToObj((i) -&gt; { sleep(1000); return Integer.toString(i); }).collect(toList()) ).join(); System.out.println(values); System.out.println("Duration (seconds): "+(System.currentTimeMillis()-t0)/1000.0); I then did some experiments by changing nThreads and found that I get a constant execution time (i.e. ~1 second) up until nThreads=55. If I use nThreads=56, it suddenly jumps to ~2 seconds, which would indicate that it still only utilizes 55 Threads or even less. Is this just on my machine (Intel quad core with HT, i.e. 8 logical processors)? It should be a sufficient number of threads for most purposes, but 55 just seems like such an arbitrary cutoff point. Edit: Tested it on my work PC (Intel dual core with HT, i.e. 4 logical processors) and I got a cutoff at 23/24.
You can quite easily intercept communications between a local client (or web client) and remote server. The hard part is figuring out what all of it means.. For the code that's run on the server but never is expressed over a network stream, well, you're still reverse engineering (technically) if you uncover that a certain activity is happening on the server and emulate it entirely yourself. This is, of course, dependent on the depth of knowledge of the server's purposes and interactions.
Thanks. Yeah I tried sockets before. Low level. Cool but I need something that I can get up and running. Maybe this is the answer: https://github.com/pubsubhubbub/PubSubHubbub found it while searching for "pub sub". This service offers a free account: http://superfeedr.com/ Google has it too, ~~but haven't checked it they got it free.~~ they got a free trial for 60days: https://console.developers.google.com/freetrial?hl=en&amp;_ga=1.117936265.1672557316.1442920898 Any other options I got? My application is just an open source hobby project, non-profit
Four trivial classes, about 300 lines of code (mostly javadocs), last commit 2 months ago. Why is this even here?
They're all for work and some of the projects I don't have access to anymore (aka, maven one is all that's left). One project I converted somewhat recently went from a 1 minute ant build to a 1:30 Maven build time. That said, the project went from a monolithic (build 4 jars from the same source files) to a 1 parent project, 4 submodule project. Overall, the Maven build is much more maintainable, upgrade-able (no more lib/ folders or hacked in ivy) - but the cost was a longer build (by default). There are ways to speed maven up, but I don't choose to use them to stick to the "Maven way" - standards and all that. Since the conversion, the 4 submodule project has grown to something like 6-7 submodules. Additional custom clients to the server.
Thanks
My take away: avoid streams for large numbers of cheap operations.
Typically Project A would get tokens from your OAuth provider and pass them along to Project B. If you don't want Project B to deal with storing keys and doing decryption, you can have Project B do what is known as Token Introspection, passing the tokens back to the provider to get information about them. (Including scopes etc.)
Don't forget Lombok manipulates the AST, meaning it's subject to breakage at any point during future java upgrades.
I think you're right, I've found twits talking about Spark Web Framework since May 2011, the same date sparkjava.com domain was purchased ( https://twitter.com/perwendel/status/71639515076366337 ) while Apache Spark has been there since March 2010 ( https://github.com/apache/spark/graphs/contributors?from=2010-03-28&amp;to=2015-09-22&amp;type=c )
[**@perwendel**](https://twitter.com/perwendel/) &gt; [2011-05-20 18:12 UTC](https://twitter.com/perwendel/status/71639515076366337) &gt; Check out Spark - a Sinatra inspired web framework for Java! http://www.sparkjava.com \#java \#web \#ruby \#sinatra \#rest \#restful ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
i agree with /u/njetwerk let us know when it's something worth knowing about. right now this is just a waste of time.
You can have a look at JWT. It's based on secure Tokens which a server can generate and give to a client which the client can then use to authenticate with other servers. they're really neat
Yep, I've gotten to know -Dmaven.test.skip=true well.
I hate to call you on it, but 2ms for a build in Maven? Uhh, it takes longer than that to just have mvn tell me it's started to start. [user@build parent-project]$ mvn package [INFO] Scanning for projects... ... rest of bulid ... ^^ That right there took 3 seconds. I realize it's firing up a jvm and all that - I get it. But that's not 2ms. [user@build big-ant-project]$ ant all Buildfile: build.xml ... rest of bulid ... ^^ That took 1.2 seconds.
After reading the docs, Capsule looks really interesting. I'm trying to figure out why it's better than Shade though. I mean, if I run my app, isn't it going to have to download the rest of it anyway? Why not just download it up front?
There's a bit more that this does than just setting up the routes, specifically on a POST request right now. For example: using the `@Exposed` annotation on member variables adds them to a list to be validated that they exist on a POST request. I'm not sure how this will compare against something like Spring in the long term, but right now, I totally understand your stance on Spring vs this. This actually spawned out of a Hackathon project. I just wanted to be able to generate basic CRUD operations so I could focus more on the frontend. If you have any suggestions (DAO interfaces included), I'd be happy to hear them, as I'd love for this be more than just something used at Hackathons by myself. :) 
You're a legend OP. Thank you!
&gt; As for preventing non-professional programmers from decompiling and making simple changes to unlock product, I base64 encode my licensing enforcement class (which cannot generate unlock keys even if found), hide it well, and load it the fly. Can you break this down a little bit? What does this class do when loaded?
Thanks for input, I appreciate your comment. You make some good points for consideration. I guess I would want to stop pirating of the software. But I guess you really can't stop pirates, is what I take away from this thread.
So do you still use these techniques?
I think you might be confusing Maven and whatever hot swap tool you're using. The latter isn't affected by Maven.
It validates the unlock key (which is bound to the host) and if invalid disables the product. The unlock key is a whole different subject and yes, they could just clone the hard drive to steal it, but I mostly work with specialized embedded controllers which makes that difficult.
And this is why I don't ask those questions in interviews. Hey, if memorization were all anyone needed to actually succeed on the job, then companies could just Google for all their answers and they wouldn't need anyone with experience or real skills.
Use the Kindle App.
if you have a phone running Windows, iOS, or Android, or if you have a web browser running on any kind of machine, then you have a Kindle.
I completely agree - in fact I mention on the first page that you shouldn't memorize anything, instead attempt to explain things in your own words, and expect variations. Questions you can find anywhere, my goal with this book was to explain the underlying concepts as clear as possible.
Are stuff like JVM internals covered? Classloading etc. just curious
In this scenario, my OAuth provider would be another project (Project C) right?
Only briefly do I talk about classloading. I chose to spend more time on JVM internals such as memory management, reference types, and garbage collection.
So I read the article and I felt that CORS is indeed an invaluable tool, however, my concern now is what about security? Anyone can just make a CORS request and access my server if this is the case. I want Project B to be only accessed by authenticated sources, like Project A (and more succeeding projects in the future) and CORS just seems like a secure way on how to access data that's in a different domain
So...if you can read reddit, you have a Kindle. 
&gt; We have been considering it for quite some time, but our name is very established, we can't just suddenly change it. Rip the band aid off man, the sooner the better! Establish your new brand ASAP. Even if it was an extension on Spark. Something like SparkMVC or something
yes: http://netty.io/news/2015/09/02/4-1-0-Beta6.html
Yes it is, you can't configure one of those for a path that you don't know about. If someone visits mysite.com/blah and I have no route mapped for "blah", I can't make it redirect to my own 404 page - I'm stuck with Jetty's 404 page and there is no way to stop that.
and for giggles where do you keep this magical schodingers symmetric key :p
I had your release notes on my screen today at work and a colleague asked me if I was using Spark. Unfortunately they meant as in Apache. This is not the first time this has happened.
btw, did you ever use gant or easyant? Did you know about those?
In the box of course but don't open it.
I use bintray as my gateway for deploying to maven central, but I sort of regret it. The advantage of using bintray is that they do the GPG signing for you, so you don't need to generate a keyring and all that stuff. The disadvantage is that you'll need to wait for bintray for manual approval of every new package you ever create - takes between 15 mins and a couple days, average time 4 hrs (sample size = 6 for me). If you go straight through Maven Central, it'll take a day or two to get ownership of your prefix "com.yourcompany", but once you have that, every new package is instantaneous. I've had a big email chain with bintray support about this, but it seems they have no immediate plans to remove manual approval for every new project you create. If you're open sourcing some stuff that depends on other packages, using bintray can add a couple days of schedule (just happened to me last weekend). It's a shame, because they've put a lot of work into making it look and work very nice otherwise.
How do you seperate the good canditates from the bad ones?
This frameworks looks really awesome (to someone used to Django, Laravel). I'm trying to get into webdev using Java and until now SpringBoot was the only thing that looked that it made sense to me (I don't want to drown in XMLs or use JSP). Now this looks even nicer and easier to use. Is it production ready? Are there any live sites using this? How's the community? How would you structure a larger app (I assume you won't keep everything in a single file)?
OAuth itself is just a way to use a 3rd party provider to authenticate your app. I am unsure if this is what you are wanting or not. There is another aspect of OAuth you can use separately from a 3rd party provider and that is OAuth message signing. If you are just trying to secure your API then using a 3rd party oauth provider is probably not the way to go (do you want someone to have to sign up with facebook to use your API?). There are open source apps that can secure your API which are probably easier than reinventing the wheel. Take a look at WSO2 API Manager (http://wso2.com/api-management/try-it). I am sure there are others. EDIT: you will also need Identify Server which manages oauth tokens (http://wso2.com/products/identity-server/)
Nice! Worked like a charm. Thanks! 
Thanks didn't know this exists. I usually prefer reading from an actual book, but this one seems interesting and important.
This is, indeed, a big pain in the ass.
I haven't done a lot of interviews, but my theory is just *talk* to the person. "What was the last thing you worked on? What did you use? What do you think about X? Have you messed with Y? Any experience with Z?"
Here's a sample pom from a project of mine after you get set up on ossrh. https://github.com/tchoulihan/musicbrainz-tagger 
The problem is the stakes are too high for a casual interview like that because good and bad programmers would be able to answer questions like those equally. If you hire a bad programmer, especially at a big company, not only have you put a huge burden on the team, but it could take months to replace them. Not to say that those things aren't important to talk about, but if the candidates don't understand the fundamentals they lose value very quickly.
because it installs both the JDK and the JRE, separately. just keep clicking continue things will end up fine.
It boils down to finding out what they have done in the past, what they have learned, and how they have dealt with others. It's never about what they think they will do in the future, because that's a fantasy. What a person has done in the past is, by and large, going to be the same as what they do in the future. Now, change is possible, but I'm not looking for great big changes during the hiring process. For example: If you don't already take time on your own to learn new technologies, then why would I believe that you will do it in the future if you claim you will in an interview? One has to be quite specific with the questions. I often get candidates who will say something like "we used Hibernate extensively on this project", but when I specifically ask them "what problems did you personally solve with Hibernate and what were some of the problems you faced in using the technology?", it can easily go sideways from there. This is a question that can be answered only by someone with personal experience with it. It's easy to detect hesitations at that point, or over-generalizing, hand-waving, etc. I'm not going to suggest that good interviewing can be boiled down to a science, but in the end, asking trivia style questions you can actually look up on Google comprises maybe 5% of the interview when you use this style of questioning. Good questions are those you would be be asking yourself if you hired a bad candidate. "Hasn't this guy worked on a team before? ... Doesn't he know how to write unit tests?"... Etc. The bottom line is that if those things are important to you in a new hire, then you should ask that during the interview. Good questions will often cover multiple areas of competency at once, which is why coding/problem solving questions during an interview are also useful. If you skip important aspects of good coding or just general problem solving logic during an interview, that's an important flag you can use in the hiring decision. Etc. I'm not an expert and everyone's organization has different needs around an interview, but you have to tailor the interview to those specific needs. One book or resource could not possibly hope to be the be-all-end-all for candidates or interviewers.
If employers want to find good programmers they should use an online IDE based test like codility.com, interviewzen.com, or testdome.com. The kinds of interview question lists in this book don't find good programmers. That said, you have to prepare for whatever interviewers do... and unfortunately, that's the kind of interview you will often experience. So, this book might be useful in that case.
the JRE is what actually runs java, and the JDK does not include it. you need them both, so it installs them both. you should have 2 folders now, one for JDK and one for JRE.
What if I have a class that represents an employee. I would think I would have a getter and setter for all their attributes? Name, position, phone #. How else would I do this?
Thanks a lot! Just what I was looking for to get a deeper understanding of Java.
Unfortunately it's unavailable in the Brazilian store. 
In application code the core reason is that it more easily supports refactoring and abstraction. In many cases (such as DTOs) you won't see too much advantage with that, and public members will probably be quicker in the first instance (maintenance is another issue, which could be a driving factor). However, many many libraries and tools make the assumption they're dealing with javabeans, and the likelihood of common tools libraries decreases as you move away from javabeans. My advice is learn to get your IDE to the heavy lifting with javabeans and use them where they're appropriate, stick to "tell don't ask" where you can, and favour immutable objects where possible.
Make the employee immutable. You take in the values in the constructor and assign them to final fields. If you want to modify it you create a new instance. These immutable instances are then fully safe to share between different parts and threads in your app, unlike a mutable class. In reality your employee class probably represents a set of data in a database. You read that data atomically and create an immutable representation of that data at the point of reading (and add a timestamp to identify that time). Then if you want to update the employee, you give the database system the version your read (V_1) and the new version (V_2), and tell it: "Update this employees records to V_2, but only if V_1 matches the current state." This eliminates race conditions from your system, which are one of the biggest and most dangerous classes of bugs.
Try launching a command prompt first (windows-key + R, type 'cmd' enter), and enter the commando 'java -jar &lt;yourjar&gt;.jar' in it (may have to navigate to the right folder first). That way, you will see the output. There's probably something wrong with your Java installation or the jar only works up to java 1.7.
Please do not post things like this here. You can post that in /r/javahelp/
&gt;Is it production ready? Are there any live sites using this? Asana, Apache Camel, and Arquillian all use Spark (just to do the A's). We have hundreds of thousands of downloads, but Spark is mainly used for creating REST services. &gt;How's the community? ~3000 stars and ~650 forks on GitHub, pull requests and issues are created all the time. &gt;How would you structure a larger app (I assume you won't keep everything in a single file)? It's pretty much up to you, Spark is not very opinionated. My personal approach ([David](http://sparkjava.com/contact.html#team) writing now) is usually something like this: public static void main(String[] args) { Spark.staticFileLocation("/public"); //static pages get("/", PageController::serveIndex); get("/download", PageController::serveDownload); get("/documentation", PageController::serveDocs); get("/news", PageController::serveNews); //rest endpoints get("/user/", UserController::fetchAll); get("/user/:id/", UserController::fetch); post("/user/", UserController::save); delete("/user/:id/", UserController::remove); } So far I haven't seen a lot of other people who prefer to do it this way, but it feels very natural to me. If a project has a lot of config and routes, I usually extract everything from main(). 
Private Versus Public JRE Installing the JDK also installs a private JRE and optionally a public copy. The private JRE is required to run the tools included with the JDK. It has no registry settings and is contained entirely in a jre directory (typically at C:\Program Files\jdk1.7.0\jre) whose location is known only to the JDK. On the other hand, the public JRE can be used by other Java applications, is contained outside the JDK (typically at C:\Program Files\Java\jre1.7.0), is registered with the Windows registry (at HKEY_LOCAL_MACHINE\SOFTWARE\JavaSoft), can be removed using Add/Remove Programs, might be registered with browsers, and might have the java.exe file copied to the Windows system directory (which would make it the default system Java platform). So when you install the JDK, you actually get 2 JREs, one is contained in the JDK folder and one is in its own public folder.
Yes, this looks nice and also something I would use. (regarding your approach). Even if it's used mostly for REST APIs, would there be any issues if it's used for a normal website (HTML, templates, etc...)? Can you use custom HTTP methods? (i.e. not just get, post, but mkcol for example) Any benchmarks? Anyway good job, and keep continue working at this/improving/releasing new versions/etc. Frameworks like these that can be understood so easily and used make non Java people like me interested in Java.
And not in [buildapc](https://www.reddit.com/r/buildapc/comments/3m11cd/jar_files_not_opening_java_isnt_set_a_default/) either.
I do have the same problem...
[Project Lombok](https://projectlombok.org/) can generate trivial accessors for you.
I must be missing something obvious. Why isn't the answer with `final` the highest voted answer? It achieves the same as the highest voted answer but with much less boilerplate.
Does this work? [Amazon.ca](http://www.amazon.ca/gp/product/B015HF9SJQ)
Sometimes you want non final information in the anonymous class. That's why I found this in the first place.
I needed a mutable counter, I can't have a reference, even non-final, to the initial final value in the method, IIUC.
It would only break encapsulation if it revealed members that should really be hidden.
Yes !! Thanks. Funny how it didn't work before .. But THANK YOU :)
I think it's a parody. The most convoluted way to do something simple. The "right" way to do this is with a final.
If that's the case, this is not obvious at all to me. Sometimes I hate SO...
1) JDBC is more sophisticated than the .Net data layer. It supports more databases and has better abstractions to make supporting different databases easier without changing code. 2) JavaFX is more modern than WPF - and WPF seems to be the less preferred technology for Microsoft today. 3) There are a lot of tools for mobile in java like http://gluonhq.com/ 4) Neither language is that "modern" in the sense that they are not recent languages. Both support object oriented and functional styles. Java is a bit more verbose but IDEs help a lot with that. 5) Java is huge compared to C# in the open source world. 6) Web is generally the strongest area for Java. More frameworks, toolkits, app servers and it runs on many operating systems. 7) who knows. They are probably similar in performance with variations in different areas. Both perform well. 8) Java. 
Java and C# are similar languages but they are typically used for very different things because of the tools they are associated with. I work in a company where both technologies are actively in use. 
Yea but it's not an MVC framework so that wouldn't make any sense.
Not sure how I feel about this. I think their products are great but in general I really don't like subscription models for software. At least you can "fall back" to the version of your subscription when first subscribed if you let it expire. In truth it won't change things much for me, and being able to buy it for one month is kinda cool. Really comes down to the effective price increase.
Getters/setters of an object's fields are not a good idea in general practice, because they break encapsulation. There's nothing wrong in principle with direct field access for simple DTO classes, as long as you mark the fields final. However, the most common use case for getters/setters is JavaBeans, which is how databinding is popularly done in Java. If you specify that an HTML input field should modify the property "foo" in the backing bean, you will need the `getFoo()` and `setFoo()` methods so that the UI library knows which methods to call to call to read or write that property. Java doesn't have a first class property syntax, and the JavaBean spec calls for getters/setters called through reflection to implement properties. Tools like Lombok or AspectJ can help with the boilerplate.
Why not just call it Spark, and call the apache project, Apache Spark. Simple solution to a problem that won't exist in 2 years.
The SO answer is silly: final int value = 0; myButton.addActionListener(new ActionListener() { private int anonVar = value; public void actionPerformed(ActionEvent e) { System.out.println("Initialized with value: " + anonVar); } }); You can pass `final` parameters into an anonymous class, which means the initial value can't change. But the initial value can easily be assigned to an instance value in the anonymous class, which can change.
&gt; Why not just call it Spark, and call the apache project, Apache Spark. Simple solution to a problem that won't exist in 2 years. ...because it's confusing? Are all your variable names single letters?
Low skill =! bad. A bad programmer, IMHO, is merely a programmer who does not seek to improve their skills. It's impossible to stay horrible forever if you're continually attempting to raise the bar.
Yea until I need more than 26 variables.
If your code's on GitHub, the easiest way to upload artifacts to *a public nexus* (not necessarily Maven Central), is [jitpack.io](https://jitpack.io).
So what should I use now ?? Netbeans or eclipse ??
Ahh sorry about that. You're right. I did do a search before hand but didn't see any useful results. Just did it again and realized that I missed results due to some unfortunate formatting on the search results combined with my small monitor. I'll zap this post. EDIT: Just unhide the post since this news was apparently new to someone else here.
I asked my self this question when I began programing. I chose Java because it's the official language for Android
From what i feel working with both, C# is somewhat better as a language (generics designed better, some convenient syntax sugars present and such), while Java is waaaay better in terms of an ecosystem. The latter fact makes me personally sway more towards Java. Some notes: JavaFX and WPF - both seem underused, since desktop is not a thing nowadays, both seem to stagnate. Don't know about Oracle's stance, but wpf's development kinda stopped at 4.5 or so. Performance wise both on par. Hard to compare with C or C++, because you have to do comparison in exact application fields, but in computation it may as well be close to C in some cases. Interop is there, not as convenient as in c#, kind of a PITA, but frankly, it use cases are pretty narrow in both languages
Yes, it is You need a proper backend in both projects since there will be a secret key
The mono versions of C# appear to lag behind the windows ones in performance. Java is faster on Linux. On windows they are likely very close. C# uses reification for generics, Java uses type erasure. Java is significantly more popular per all the major indicies that try to measure such tings. Java certainly has more libraries, as is evidenced by Maven central, etc. Both languages are actively developed. C# has LINQ and some other niceties for databases that Java doesn't have a direct analog for. Java has a much firmer footing for mobile development/android. Java is used more often for web development, specifically because Linux is so widely adopted for hosting/cloud-deployments. Again this harkens back to mono not being feature complete and being slower than the windows .net experience. 
Thank you, it worked! 
&gt; Yes, it is &gt; You need a proper backend in both projects since there will be a secret key With a back-end portion in Project A, that would definitely make it easier to store secret keys and polling in general (no need to use CORS or JSONP). I just find it weird that I need to make a back-end for Project A just for security purposes. Am I wrong here?
on firefox it shows up as: 36 5
RemindMe! 364 days
Java has more scope than any other language. Desktop, Mobile, Web you name the platform you will find java best suitable. Besides java has the largest collection of resources and Dev community. **Most Importantly:** look at all the answers indication , you will find one answer.
[removed]
No, you can use different languages. I imagine the libraries are fine, just throwing that out there as something to look at if something isn't working right. The signatures are strings that you can look at so it would be readily apparent if one of the libraries was doing something different than another one. 
jitpack.io is not nexus, thanks God.
It's far less of an issue these days with three web used as the delivery channel. Vast majority of customers would never get access to a compiled file. 
ProGuard is mostly just field/method/class renaming. This means that you can decompile it and make it work after some minor changes. More advanced obfuscators contain things like String obfuscation and control flow obfuscation which aren't as easy in comparison. 
&gt; echo, cat, sed, and javac , cat, sed, and javac 
So this is under the GPLv2 license. That means there will be no embedding the browser or components of the browser into other non-GPL projects.
RemindMe! 364 days
RemindMe! 363
RemindMe! 360 days
Right, but in this case this is not being done through the setBalance() method though, instead we're doing it through withdraw(). What I've been seeing is that lots of DTOs are littered with these plain getters and setters. But probably it is required by the persistence framework or something.
This recently went from a draft JEP to a candidate JEP and was endorsed by Brian Goetz, so it seems relatively likely to happen for Java 9. If you follow the links through to the [openjdk issue](https://bugs.openjdk.java.net/browse/JDK-8048330) you can find some [early implementation code](http://cr.openjdk.java.net/~smarks/reviews/8048330/webrev.20150910/) for this, which is pretty cool. I was disappointed to read that they're backing away from new concrete implementations for immutable List/Set/Map, and just returning Collections.unmodifiableX(mutableX) from these methods instead. Not that it should make a difference for me in practice as a user... I was simply curious to see the immutable implementations in code. It also looks like their new `Map.entry(k,v)` / `KeyValueHolder` thing permits null keys and values. Maybe that's just a mistake in that snapshot of the code, given that they say "Null elements, keys, and values will be disallowed" in the JEP.
This is a deal-breaker for me: &gt; It is not a goal to provide unmodifiable collection types. That is, this proposal does not expose the characteristic of unmodifiability in the type system, even though the proposed implementations are actually unmodifiable. &gt; &gt; It is not a goal to provide "immutable persistent" or "functional" collections. Even if this is available, I will continue to use Guava's immutable collection types and factory methods like ImmutableSet.of(). When I have an immutable collection, I want that benefit conveyed in the static type.
This JEP is pretty cool and all (although sad that it doesn't offer the functionality of Guava's Immutable(Set/List/Map etc.) stuff)...but I just can't take your comment seriously. How in the world would this JEP of *all* things impact whether or not you do more/less development work in Java? This is one of the most ridiculous, cookie-cutter comments I've ever seen. 
It's a shame that they've rejected list and hash literals in the language. Having seen them being used in groovy, they could be an interesting addition to the language.
Setters are generally not needed for most things... your classes should most be comprised of immutable constants injected via the constructor. If you find your code eating a lot of memory because you're creating tons of immutable instances, that's indicative of a design problem.
Can you elaborate a little how your implementations differ from Guava's implementation? I see that you're not implementing the standard java.util.Collection interfaces. Do you see that as a feature? You also seem to implement more datastructures which is probably nice.
We are using Jackson and JPA (Hibernate)
RemindMe! 364 days
RemindMe! 364 days
Use PUT to *replace* resource and use PATCH to *update* resource. http://restcookbook.com/HTTP%20Methods/patch/
The returned collections are immutable.
&gt;1) on Database and backend are they on equal footing ? which is bigger between oracle or sql ? can they do the same thing ? are they as fast as each others I mean in scaling large project ? I'm fairly certainly that Oracle is the biggest name in RDBMS's still. I don't mean to be pedantic, but each one uses SQL, Microsoft's database software is called Microsoft SQL Server. &gt;4) modernity of the language itself which is less verbose or more modern if we cound the latest versions of each ... what's the main differences between the 2 It's fairly well admitted even by Java programmers that C# is more modern, but Java has caught up and is catching up. &gt;5) on the open source scene which is bigger in term of framework librairies... are companies bigger on java because its older and they invested a lot of code in it or C# is starting to grow because they are open sourcing it ? If we're talking about open source, then Java is the only choice between the two. C# is available on Mono, but I don't know anyone who does Mono/C# development. &gt;6) web dev is there still ppl developping large scale web project with java like servelts and others stuffs ? can it compete with the new asp.net mvc etc ? or node, javascript etc People are doing all of the above. ASP.NET has a lot of penetration in government (where I work). Java is all over the place and probably the most widespread, Node is big in the startup world. &gt;8) which is more open or more future proof then the other ? C# who's getting open sourced or the jvm who's developping many different languages like scala etc Java probably is the most future proof because even when Java goes out completely as a language that's being actively developed, there will be legacy code for decades after. We haven't come close to that point, though I'll add my two cents as well: The worst thing about C# is Visual Studio. I cannot stand it; it's so bloated with feature overload. C# seems like a fine language, though. More feature rich than Java, even.
Have you considered writing unit tests in groovy? If you're using maven, adding support is fairly quick and easy, and you can mix and match both groovy and Java unit tests. It should be able to cut down on some of the verbosity in your unit tests.
I believe android is still around java 5 or something in terms of features kek
When a piece of code has a chance (small or not) of producing an error, it is wise to add error handling. You are essentially indicating to the compiler "this block may produce this error. If it does, do this stuff." You can even be generic about the and say "If you encounter ANY exception in this code block, here is how you handle it."
Uuuhm, well, you're not giving us much to go on, but as you probably guess error handling is the handling of errors. In practice this means stuff like throwing and catching Exceptions. If you want more, you have to be more specific.
The concept is pretty simple, the implementation can be much harder. In concept error handling is just a way of dealing with unexpected or unplanned situations in your code. For example lets says you have code that takes in a date as input, what would happen if a user gave the input "&amp;DF%$)" instead of "2015-09-24"? Your program would likely not work as intended. So you have to determine how you want to handle situations like this. In this simple example you would likely just want to deliver a message back to the user that their date is not formatted correctly. In large projects this can get much more involved. In my current project we are using a centralized error handling approach. We throw exceptions into a JMS queue and they get picked up from there, parsed, and it is then determined what needs to happen with the error. Sometimes the error needs to go to a UI, sometimes it just gets logged, and sometimes we can attempt to correct it. It all depends on what the error was.
It allows the program to give the user a more verbose error message and handle the error more gracefully rather than just cut out and die. 
Version control is EXACTLY what you want. I still use SVN and have not needed to change to GIT yet. But I intend to a some point. Once you use source control you'll never go back. If you use Eclipse, it has excellent tooling that makes SVN work point-and-click easy. I'm sure this is true of Netbeans and IntelliJ. Eclipse also has plugins (that I have never used) to support Git. I'm sure also true for Netbeans and IntelliJ. Try it, you'll love it. My experience with SVN. In Eclipse, I prefer SubClipse to SubVersion. But there are two to choose from. I can set up an SVN repository on a Linux box. Just use the SVN command to create a repository. It is just a folder! In my home directory under some path. In Eclipse, using the perspective for SVN, create a repository. For the URL use an SSH url! For this, give it the server, port of the SSH, user name, password, and sub-path of the SVN folder within the user's home directory. Then in Eclipse you can commit and update code. The SVN tooling manages this via SSH login to the Linux box and updating of the SVN repository files. This is all done atomically and as a single transaction. Each Eclipse user can do the same. You can merge changes. You can even lock files so others can see that you have them locked, if you prefer to work that way instead of merging changes. The Diff and merge tools are nothing short of amazing. I'm sure this is similarly true of Netbeans and IntelliJ. 
Is it a good idea ? No, just like dynamic SQL its a pain.
Yep, but Guava is a 3rd party lib. They could have done better. What you get there are utilities and wrappers for existing collections. There are so much possibilities now, so much awesomeness...
Some of the discussions did ask what they could do about picking an implementation, and it was pointed out that you could do the following without too much trouble, given that lambdas pick the right class based on what they're being assigned to. TreeSet&lt;Integer&gt; set = [1, 2, 3]; Obviously the compiler would have to pick an implementation if an interface was used. There was another discussion about making literals a general syntactic sugar over a method or constructor, so it would apply to any class, not just collections, which would end up with the following being possible: Person person = ["Alice"]; You may have just vomited, but that's an (ab)use the designers of the feature had to consider. I think the main reason it hasn't been included is that there's no consensus over the scope of the change (and as you can see, it could be quite large), and there are other features people prefer to prioritise.
What is the difference between this and collections from functionaljava?
ugghh, these are exactly the questions that I do not ask in an interview. If you can find the answer in five minutes with an internet connection, then all it proves is that you know how to use the internet. If you can't answer the question _and_ don't have an internet connection, then the question demonstrates nothing. When I give interviews, I look for less tangible skills. Can the interviewee communicate effectively? Does this seem like someone that I could work on a project with for 40 hours a week? Etc.
Just to clarify - the inclusion is done **once in a lifetime of the package**. Onboarding a lot of packages at once take time, but once the packages are created and linked, no human intervention needed from any side on any step of the release process.
You can use Javaslang collections also in conjunction with other JVM languages that are bound to the Java type system (read: have no higher-kinded types regarding generics). Example: [Xtend](http://www.eclipse.org/xtend/). And just to say it once more: java.util based collections are *mutable*. In a concurrent/parallel context you really do not want to deal with mutability, trust me. See [Java 8 Do and Don'ts](https://blogs.oracle.com/java/entry/java_8_do_and_don)
So is there anything against using collections from Guava for parallel computing?
I did the google search, I just do not have any experience with any and I would like one similar to Visual studio. I have used eclipse, just to run an adriod VM. Should I just stick with that since it is installed?
I wouldn't recommend using eclipse unless you're on linux. Eclipse is a really good IDE, but it's getting slow and old. The biggest pro is compatibility and the plugins available IMO Eclipse pros: - Thousands of plugins you can install. From git stuff to even a gtalk plugin and screen sharing/pair programming plugins like Saros. - Tutorials will often use eclipse as the IDE, so if you get lost in some configuration, it's easier to find stuff than in the other IDEs (intellij,netbeans) Eclipse cons: - Slow on Windows, even Slower on a Mac (they actually released an update that tried to fix this, but scrolling and typing is still pretty slow) - Autocomplete is good, but not smart enough. What I mean by "smart"? just check out IntelliJ. - Plugins will often bug - Some weird bugs will make you go into the workspace folder and delete a few folders manually I'd recommend checking IntelliJ. Wouldn't recommend NetBeans. I've used Eclipse for Java for 6+ years and I'm making the switch to IntelliJ now after having worked a lot with PHPStorm (also from JetBrains).
As I said - Guava has not really own collections - they are wrappers around Java's collections. For concurrency there is Java's ConcurrentHashMap for example. During development of Javaslang we experienced erroneous behavior of Java's ConcurrentHashMap. We used it in the context of memoization (read: caching) and produced infinite loops which haltet our unit tests. See [#513](https://github.com/javaslang/javaslang/pull/513) and [#522](https://github.com/javaslang/javaslang/pull/522). Java's ConcurrentHashMap has to be used with caution. I think Guava does not come up with s.th. better.
Normally, yes, you'd use an interface in the declaration and assign a concrete type, but in this instance it buys you very little. The main reason is to stop yourself using a method that's only available in your concrete implementation so you can change implementation easily. You're asking for a particular implementation in this instance, you you probably want to use functionality that's not in the interface.
The problem with these types of "false-positive adverse" test, is that these little games hugely favour people who do lots of job interviews or people who have to make up for a lack of practical experience (e.g. recent grads, devs from alternative disciplines, or isolated devs with little exposure and experience outside of a few niche domains/technologies). If you want someone really good, ask them about their experience. Ask questions that only someone who had done what they say they've done would know. "Oh so you've worked with threads? The production server keeps locking up, and you can't replicate it locally. What do you do to investigate?" If you are scaling a team, and need low/mid-level guys, it's all about independence: the real questions that should be asked, should be based on judgement as well as skill: at the end of the day, the more pragmatic they are, and the more they care about collaboration, the more work your team can collectively take on without hitting a wall How much oversight is this person going to need? Can this person adapt pragmatically? Can they communicate, or will they simply end up building the wrong thing? Will they build the right thing the fundamentally wrong way, no matter how much you try to dissuade them? Can they work independently or will they drain the team's senior skill set by turning the senior techs into baby-sitters? What affect will their attitude have on the team? Can I trust them to *want* to do a good job? Is their judgement so good that I could give them responsibility over entire projects/other devs? 
You wouldn't recommend Netbeans? Have you used it lately? I've recently switched to Netbeans because IntelliJ kept thrashing my hard drive while running. I arrived in Netbeans 8 to find that it's surprisingly responsive, and the code assistance tools work quite well. It also has fantastic Maven integration.
I've yet to need a plugin with Netbeans that didn't exist. Everyone's situation will be different, of course. Never really understood the hate for Netbeans. disclosure: we have an eclipse faction and a netbeans faction at work. I'm on the netbeans side.
Android Studio is based on IntelliJ. Originally it was a suite of Eclipse plugins, but they've moved off of that platform.
Some projects are so tightly coupled to the IDE (don't ask) it's really impractical to try to use something different. Usually the eclipse guys that do that. So they basically force us Netbeans guys to use Eclipse too. Jokes on them though. We know their IDE enough to destroy them from the inside now!@
the virtual machine seems a tad laggy, is that just my computer. I have 2.4ghz-3.4ghz amd quad core and 8gb ram/ssd. should that be the issue?
Honestly, I haven't given Netbeans much attention. Part of it was because the interface was boring back when I started using it. Then I kept using Eclipse and I was happy with it til I saw IntelliJ. I haven't had problems with IntelliJ, though. I'll give Netbeans another chance one of these days.
completely true. the problem is that most projects are built by the IDE and programmers don't have to worry about it (unless they want to use another IDE as you said). it shouldn't be that way IMO
&gt;write code on the paper LOL. I'd thank them for their time and leave.
Actually, the specialization of `TreeSet`/`TreeMap` is captured by `NavigableSet`/`NavigableMap`. I don't think there are any standard concrete collections that don't have an interface which generalizes their specialization.
Well, currently (with Netbeans 8) it's really easy to have a nice, sleek, modern interface. The default configuration isn't so bad, but throw the dark theme at it and close all of the toolbars and you've got a pretty sweet IDE. However... if you're sold on IntelliJ then there's nothing wrong with that. The real big difference between IntelliJ and Netbeans right now is the keyboard bindings. The loss in productivity from having to learn new shortcuts should not be underestimated.
Why you can't stand what's widely considered the best development IDE in the world ? tried it with re-sharper and the others plugins ?
The android emulator sucks, if that's what you're talking about. Use Genymotion. 
You can get the locked production server JVM to dump all the stack traces of all the actively running threads into the log output (e.g on unix/linux run "kill -QUIT &lt;pid&gt;"). That's a good first place to look
Either Netbeans or Eclipse with WindowBuilder extension.
Good example, @Column(name="")...make sure it's spelled correctly. Always a fun time hunting those down, especially with Entities that have 40+ columns.
I set intelliJ to use the eclipse compiler, it solves some of those issues
/thread
All of those three are better than Visual Studio as far as features are concerned. Not sure if you've used Resharper, but all them include that funcitonality. * Eclipse is the most customizable (I read it as most powerful), but it is a little quirky once in a while. "With great power..." and all that. * IntelliJ is the middle * Netbeans is the easiest to use with the least features 
Still endlessly submitting your website, eh? --- Recent Submission history for sthies: domain submitted from|count|% :-|-:|-: [blog.sematext.com](/search?q=%28and+site%3A%27blog.sematext.com%27+author%3A%27sthies%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|16|80% [self.node](/r/node/search?q=%28and+author%3A%27sthies%27+is_self%3A1+%29&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|5% [developerblog.redhat.com](/search?q=%28and+site%3A%27developerblog.redhat.com%27+author%3A%27sthies%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|5% [digitalocean.com](/search?q=%28and+site%3A%27digitalocean.com%27+author%3A%27sthies%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|5% [kamon.io](/search?q=%28and+site%3A%27kamon.io%27+author%3A%27sthies%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|5% subreddit submitted to|count|% :-|-:|-: [docker](/r/docker/search?q=author%3A%27sthies%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|6|30% [devops](/r/devops/search?q=author%3A%27sthies%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|5|25% [java](/r/java/search?q=author%3A%27sthies%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|4|20% [elasticsearch](/r/elasticsearch/search?q=author%3A%27sthies%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|10% [node](/r/node/search?q=author%3A%27sthies%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|5% [javascript](/r/javascript/search?q=author%3A%27sthies%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|5% [iojs](/r/iojs/search?q=author%3A%27sthies%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|5%
IIRC there's an mxbean which finds deadlocks for you, so hook into that and log when it tells you stuff. In the big project I worked on, we had a cron job we could enable that provoked the server processes into dumping stacks every 15 minutes. That helped us find many many bugs. 
I've used all three IDE's (Eclipse, Intellij, and Netbeans) each for an extended period of time. Intellij is the only IDE that feels like a professional tool. I'm not sure what you mean by comparable, but I'd say Intellij is pretty comparable in terms of quality and reliability to Visual Studio.
Yeah IntelliJ has the VS keybindings as well which is nice for VS devs.
My favorite interview question recently is "how do you come up with an estimate?" Tells you a lot about the candidate.
I'm always amazed to hear that people don't bother to learn SQL and just start using an ORM solution without any knowledge of what's going on with the plumbing.
&gt; Let me know if this is the wrong subreddit. On the right hand side bar there is a red block of all-caps text that says: "PLEASE SEEK HELP WITH JAVA PROGRAMMING IN /r/javahelp!"
School must have just started 
Could do it with a few if else statements if you're doing that. If input = 1 then print Sunday. Else if input = 2 then print Monday. Etc.
This one is really important. "There's not enough time: What do you cut?" is another
No, you can't . Or actually you can, but it'll screw you system performance-wise. Because PrintStream.print* methods are synchronized on **this**. Once I heard that someone offered to use System.out.println methods for logging on JFokus conference(Stockholm). Because it's simple, there is not any additional dependencies and you can forward your output wherever you want and etc. Worst advice ever. Don't do that.
I think we should write one more framework. And name it "Highlander". Because you know... *There can be only one*.
You will get a better response by giving it your best shot and posting the code for discussion. None of the programming subreddits take kindly to people wanting their homework done for them.
I'd suggest NetBeans. I used to do .NET development and liked VisualStudio. Something about NetBeans just made sense to me as compared to Eclipse. When I had to start messing with plug-ins and more advanced features, Eclipse proved to have quite a learning curve. There are a lot of features that simply work and work well with NetBeans, maven being one such example. These days, I use Eclipse and NetBeans about equally and switch between the two depending on what I'm doing (I.e. Checking a project out of GitHub to test something or explore code, working on a web project for work, using Tomcat/TomEE, using WebSphere, etc.)
Not accessible *by default*. The API is not internal, but it's not cross-platform, and the JDK strives to be cross platform. If they provide you with a cross-platform API for achieving the same, what is there to complain?
Very simple program?? Ahhhh.... the thing is you said: 'Input a number' - How is this input? From the Console? From a Swing GUI? From a webpage?... I will go for the webpage, as your users will probably be most familier with a web browser. So, you're gonna need some kind of web server. The new kid on the block is Spring Boot, that greatly simplifies, by having everything built in.... so we'll go for that. In this day and age, you're probably want some kind of SSL.... to protect your services. Nowerdays everything comminicates using ajax and rest, and normally I'd use some kind of front end framework like mustash to handle this. However, as this is just a basic example, I'll stick with JQUERY. So, the stack would be Java Spring Boot Javascript JQuery thymeleaf to prepare the HTML templates Gradle to tie it all together: So, The code would be: Application.java package dayofweek; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.ApplicationContext; import org.springframework.context.annotation.Bean; import org.springframework.web.servlet.ViewResolver; import org.thymeleaf.spring4.SpringTemplateEngine; import org.thymeleaf.spring4.view.ThymeleafViewResolver; import org.thymeleaf.templateresolver.ClassLoaderTemplateResolver; @SpringBootApplication public class Application { public static void main(String[] args) { ApplicationContext ctx = SpringApplication.run(Application.class, args); } @Bean public ViewResolver viewResolver() { ClassLoaderTemplateResolver templateResolver = new ClassLoaderTemplateResolver(); templateResolver.setTemplateMode("XHTML"); templateResolver.setPrefix("views/"); templateResolver.setSuffix(".html"); SpringTemplateEngine engine = new SpringTemplateEngine(); engine.setTemplateResolver(templateResolver); ThymeleafViewResolver viewResolver = new ThymeleafViewResolver(); viewResolver.setTemplateEngine(engine); return viewResolver; } } Controller.java package dayofweek; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import dayofweek.services.DayOfWeekService; @org.springframework.stereotype.Controller public class Controller { @RequestMapping("/") public String index() { return "index"; } } DayForWeekController.java package dayofweek; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import dayofweek.services.DayOfWeekService; @RestController public class DayOfWeekController { @Autowired DayOfWeekService dayOfWeekService; @RequestMapping("/{dayOfWeek}") public String index(@PathVariable int dayOfWeek) { return dayOfWeekService.getDayOfWeekFromNumber(dayOfWeek); } } DayOfWeekService.java package dayofweek.services; import java.text.DateFormat; import java.text.SimpleDateFormat; import java.util.Calendar; import java.util.GregorianCalendar; import org.springframework.stereotype.Service; @Service public class DayOfWeekService { private ThreadLocal&lt;DateFormat&gt; dateFormat = new ThreadLocal&lt;DateFormat&gt;(){ protected DateFormat initialValue() { DateFormat df = new SimpleDateFormat("EEEEEEEEE"); return df; }; }; public String getDayOfWeekFromNumber(int dayOfWeek){ Calendar calendar = GregorianCalendar.getInstance(); calendar.set(calendar.DAY_OF_WEEK, dayOfWeek); return dateFormat.get().format(calendar.getTime()); } } index.html &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;script src="//code.jquery.com/jquery-1.11.3.min.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; Enter Day of Week Number &lt;input id="daynum"&gt;&lt;/input&gt; &lt;button type="button" id="theButton"&gt;Submit&lt;/button&gt; &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;div id="dayname"&gt;&lt;/div&gt; &lt;/body&gt; &lt;script&gt; $('#theButton').on('click',buttonPress); function buttonPress(){ $.get($('#daynum').val(),function(data){ $('#dayname').text(data) }) } &lt;/script&gt; &lt;/html&gt; build.gradle buildscript { repositories { mavenCentral() } dependencies { classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.6.RELEASE") } } apply plugin: 'java' apply plugin: 'eclipse' apply plugin: 'idea' apply plugin: 'spring-boot' jar { baseName = 'gs-spring-boot' version = '0.1.0' } repositories { mavenCentral() } sourceCompatibility = 1.8 targetCompatibility = 1.8 dependencies { // tag::jetty[] compile("org.springframework.boot:spring-boot-starter-web") { exclude module: "spring-boot-starter-tomcat" } compile("org.springframework.boot:spring-boot-starter-jetty") // end::jetty[] // tag::actuator[] compile("org.springframework.boot:spring-boot-starter-actuator") // end::actuator[] compile("org.thymeleaf:thymeleaf-spring4") compile("nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect") testCompile("junit:junit") } task wrapper(type: Wrapper) { gradleVersion = '2.3' } And the moral of this story, is DON'T ASK ON HERE FOR PEOPLE TO DO YOUR HOMEWORK FOR YOU!! Thanks you! (ps...and the other moral is avoid Spring!...you'll end up with monstrosities like this if you don't!) 
Thanks so much!
Do you know a place where I can upload my java code online and send to people? like one that will run a terminal window
Or export to TSV which is a bit easier to read in a text editor and generally just as good as CSV.
Learn the first principles. For example, take MyBatis. Don't be happy that you were able to write mapper file and get a few rows out of the database into some objects. How did you create the SessionFactory? How did MyBatis map the database columns to JavaBean properties? Can you tweak the mapping? Do you understand how all of the parts work? Working in small example projects is perfect because you can take apart the library. Read the manual, explore each of the different configuration options, even poke around the source code. Then when you start getting lost, you can fall back to first principles. Connect the first principles back to the project specifics. You'll learn a lot about the project that way too.
I think you missed the smiley at the end of my statement....
Nope, I got it. I've just seen that even senior programmers don't know why System.out is bad for that purpose. Don't be so serious ;-)
I suggest you do a bit of reading on immutable objects; see also functional programming. I prefer my objects to have final fields, which means no setters. I haven't tried "public final" but wouldn't be opposed to it for value objects. Java is stupidly verbose, but Eclipse (etc.) will help you write a lot of the boilerplate code. And you can also create templates to help reduce repetitive typing tasks. 
&gt; public String getDayOfWeekFromNumber(int dayOfWeek){ &gt; Calendar calendar = GregorianCalendar.getInstance(); &gt; calendar.set(calendar.DAY_OF_WEEK, dayOfWeek); pfft no where in the api does it guarantee that calendar.DAY_OF_WEEK is 0 based! need to add getMinimumValue() :p
I've used all three of the big ones. I personally prefer eclipse. I realize this goes against the grain of what many people believe. I like the plethora of plugins. I like the fast that the compile is, hands down, the fastest of the three. It can be a learning curve because it's so configurable. And free never hurts. The key thing here is CHOICE. unlike the MS world. Try all three and choose the one that suits you. I would keep two things in mind. 1) Over the course of years which is best may change. For example netbeans used to suck around 2005, but has become much better. Eclipse various from release to release. and 2) The IDE that is easiest to get going with is not necessarily the one that will carry you furthest. This is not unlike $PHP vs Java. $PHP is easy to get going but sucks for large or complicated projects. FWIW, I think VS is a really annoying IDE. This is because alot of the way it's structured and operated harkens back to writing C++ code for windows. It's just clunky. For example it doesn't always compile your code, and sometimes the display on the IDE doesn't match the compiler warnings. This is WHY I have an IDE. I don't want to manually hit "rebuild solution" all the time. It also doesn't play well with git unless you use it's built it UI, which doesn't match the way the rest of the world uses git. But hey if you gotta run C#, you're stuck with it. And I do find it pretty ironic that most people use resharper to make it better. Why does MS need help ? why ? 
God people still use JSF? Why?!
Because it's a really good technology!!!
Well, if you are using these frameworks/libraries the first time, it will take time to learn them. In enterprise environment, most work is finding relevant libraries/frameworks and stitching them together. Writing something from scratch is rare. Spring in itself is a framework that changes your entire application architecture. Google dependency injection or inversion of control. Other two should be easier. Do ask the questions on what fails to work, or what you are trying to accomplish and how to best do it. Your more experienced teammates should help, and "being busy" is a poor excuse. Teaching teammates should take priority unless something is really on fire. Otherwise juniors sit there stuck or idle doing nothing and not being useful. And that is a failure on part of seniors/team leads, not on part of juniors... I am not able to advise you more until I know more details on what you are struggling with.
the API sketch includes methods with boolean parameters - that hardly inspires confidence (see [Clean Code](http://www.amazon.co.uk/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) for a discussion on why).
If you are a professional Java Developer you really should be more informed of the Java technologies that are widely used. JSF has about have the Java Web market. It has increased every year for the past 5. You should really be more informed. As to why there are lots of reasons. For me it is a very productive framework that allows me to create Rich web applications quickly without having to spend all your development time writing JavaScript and CSS.
...wat?
&gt; If all you're doing is supporting a couple hundred or even a couple thousand users, then any framework, including JSF, will do fine. I'm not sure what you're on about. JSF is one of the fastest frameworks out there and uses the least memory from a large selection of frameworks. Only pure Servlets and thereafter pure JSP pages can be faster and use even less memory, but for anything other than small trivial apps they are a nightmare to extend and maintain. Performance and moderate memory requirements help tremendously with scaling up. The thing is that unlike some hipsters seem to think, hardware does not scale up automatically. At some point a single rack is full and it's hard to add hardware and switches. And cloud providers are just hosting providers too and there's eventually hardware again and limits to how many nodes can be physically near to each other and access a data store without unreasonable delays. Needing less nodes saves enormously on the energy bills or the costs for the cloud service, and believe me, money is a BIG obstacle when scaling out. "Just" using the client's memory and CPU is far from ideal either, as users will complain you drain their battery and hog their CPU. If your app or site is known to be more resource demanding than a similar service from a competitor your users WILL favor that competitor.
In a clustered environment, you can't transactionally distribute multiple megabytes of session data across all nodes in the cluster after every request. In that environment, the session data needs to be minimized to the greatest extent possible, and throwing around @RequestScoped and @ViewScoped with a bunch of instance variables maintaining session data for hundreds of thousands of users (equating to multiple terabytes of memory) does not scale. I don't know how else to explain it.
I am a huge Java EE advocate...... But, I have tried, I really have tried to use JSF. I cant. It doesn't seem right. I believe that quite fundamentally, the front end should be written in a front end language..... HTML. It shouldn't matter what the back end is, java, PHP, Ruby, etc... the same front end code should just work. I use JSP...but JSP builds my I18N templates, which are sent to the client to be rendered further by Mustash, after the browser calls REST apis. this setup is so sweet.... very VERY productive. JSP has not been deprecated. It is still supported. And it isn't that bad especially with Jstl 2 TAGS http://stackoverflow.com/questions/1296235/jsp-tricks-to-make-templating-easier But, as I said, I don't really use them for this..... In my web.xml, I have: &lt;context-param&gt; &lt;param-name&gt;javax.servlet.jsp.jstl.fmt.localizationContext&lt;/param-name&gt; &lt;param-value&gt; literals &lt;/param-value&gt; &lt;/context-param&gt; and, then I put all my I18n text in literals.propertes... or literals_fr.properties, etc. The correct property file is automatically chosen according to the browser language setting. I don't need to code any servlets / controllers / or anything else. and in my JSP, I have &lt;fmt:message key="keyToLiterals"/&gt; where I need to put translated text. And thats it!!.... The fully translated template is sent to the browser . Can anyone tell me a nicer, more cleaner solution, in any language, not just java based? Seriously. :-D 
I guess I could, I can't write though.
That would be fine =)
It literally takes a minute to figure it out yourself, and it is better than relying on a blog post which might be out of date. If you have the Oracle JDK, start JMC, attach to a running Eclipse instance, start capture for a minute duration, done. If you don't use Oracle JDK, there are other free profilers available.
Interesting, and I agree. I think I'll start a new post however, because I go a step further with JSP's.
There are limitless ways to analyse data. If you just want *some* analysis, then sure, you could try finding it. But if you are looking for *specific* analysis criteria, the chances of finding relevant prior work are close to zero. I was pointing out that you can do the analysis yourself, since the profiling part is pretty easy.
PSA: A bunch of folks have been vote brigading JSF articles on r/java for QUITE a while now. For e.g. check out the history for: /u/henk53 | /u/avoidhugeships | /u/johnwaterwood ... and going to be downvoted in 3... 2...
Yeah. Personally, I wouldn't go out of my way to *avoid* using the new JDK methods, but the number of places where I'd actually use them is pretty small. I certainly won't be changing code that currently uses Guava's immutable collections to use this instead. Kevin Bourrillion posted a longer form of your argument on the JDK core-libs-dev mailing list today. It's worth a read, as most of his posts about Java are: http://mail.openjdk.java.net/pipermail/core-libs-dev/2015-September/035441.html
This is one of those extremely good/bad ideas. Apple fights to keep scripting engines/ides out of the app store because of security, reliability, ease of support, and consistency. They aren't wrong. But, having a dev environment for ad hoc simple development would be great.. EG, had a database app on palm called think db which would let me make lists easily and I loved, and hasn't been replaced in 10 years. Would make forms for price comparing. Loved the dev environment on ti calcs and am always amazed these are difficult to get on mobile oss.
Finally! Looking forward to it.
&gt; I believe that quite fundamentally, the front end should be written in a front end language..... HTML. But then you rule out a large number of serverside web frameworks, and not just JSF, right? JSF can be used as mostly a templating engine as well, where you "just" group your HTML into reusable parts. This is what you would do with JSP or clientside templates as well. You get some of the extra benefits of data binding and conversion/validation, and the door is open for if you do want that one or two pre-build components on your page. 
Because Google in its wisdom to screw Sun now forces us to either use Java 6 (if targeting &lt; 4.4) or come up with community hacks (retrolambda). It will only get worse when Java 9 and 10 are out there.
Or use Kotlin from Jetbrains. Either way, it's more the irony in relation to the API court cases and all. The question is what UI toolkit will be used, and how well interoperability with intents and other Android isms will be. I assume this would have to be deployed as tho it were an NDK application, will be interesting to see if anything follows material design etc. 
Good luck testing code with static singletons DI with or with out a framework allows for more testable code
I passed the exam on wednesday (86%). I used the same book from Kathy Sierra. It's quite good, but seemed to not cover everything - on the exam there were questions on topics not covered in the book. One example I remember is RandomAccessFile class - this is not covered in the book, but I saw it in the exam. I also used Enthuware - application with tests similar to the real exam. It seemed to be slightly more difficult than the real exam. If you pass tests in Enthuware with high score I think you are ready for the real exam ... I studied in the evenings for about a week, but I've been programming in Java for several years. I usually read a chapter, made notes of not obvious things, then tried Enthuware exam focused on this topic. On the way to the exam I tried to read all the notes (finished about half way). On the exam I found about 40% of questions quite easy, 40% challenging and 20% very difficult - I usually just guessed these.
Kotlin is not an option for production code, given how it keeps changing. Still it is yet another workaround. I only code for Android as an hobby, but usually many customers require first class languages on their projects from contractors. As for the rest, I agree with you.
I don't expect the Android port will get much support within Oracle until the lawsuit between them and Google is over. Reach out with one hand and attack with the other?
Maybe is an example of multiplatform failure: "Try this and see how, no matter where you run it, you gonna get a red complain".
All the irony aside, this would be cool if Swing apps can be directly used on the mobile platforms. Is that planned?
- No public - String not string
1.0 should be out soon, I think it'll slow down the breaking changes.
It was no different in Microsoft's case.
probably why the string is lower case - because case was auto corrected to
Not capitalizing your types. Rookie mistake. 
'Redditor robi2106 ran the suite for 500’000 elements on his “i5-4310 @2Ghz w 8GB DDR2”. I added the results to the spreadsheet. It’s hard to draw conclusions from the data. Robi noted “I didn’t stop using my system for these 2.5hrs either”' Classic Rob. 
I didn't downvote this, but maybe this would work better as a blog and then posting the link here?
Extension should be .java, not .png
Your question being?
So far I have been using a mix of Java and C++, as I also care for WP. Right now I am between waiting for the WP10 Android bridge or jump into Xamarin. Actually a Kotlin.NET might be an interesting project. 
I fixed the image: http://i.imgur.com/ZrYADSn.png
No, that would be spam. So, exactly what can be posted here? If this kind of stuff isn't wanted.... And you can't post java help questions. Then what is acceptable? 
Google has a *very* large investment in OpenJDK, and they cooperate with Oracle on Java all the time. The number of people at Google working on OpenJDK (i.e. actually improving OpenJDK) is about the same as the entire Go team. Funnily enough, while Android may end up incorporating other languages, on the server side Java has no viable alternatives (at least not for Google). Corporate giants fight in court all the time, and they try not to take it too personally. Both lawsuits and cooperation are just business.
https://mail-archives.apache.org/mod_mbox/www-announce/201509.mbox/%3CCAECLKPGYGXvMhiRZDsmX%3DRqcHmFjzf1Ys-4m7-rKbk4bd7HoAw%40mail.gmail.com%3E
I hope this means they are finally giving up on Java ME. It's relevance has been diminishing rapidly for the last decade. A full SE port on a Raspberry Pi should have been a clue that ME's time was past.
You laugh but I remember writing a Corel WodPerfect macro and WordPerct was the "IDE". The nice things was that you could use rich text formatting for your own macro! Is this comment important? Use bold! Is that function call puzzling you? Then set its background color in red!
People post blog articles all the time here.
Either you're complaining about Dependency Injection/Inversion of Control generally, or you do mean letting your DI framework figure out things itself. DI/IoC means that you can quickly replace dependencies in your object. You may say "that's fine, I can just update my code with the new class and recompile". But now you have a compiled class that's tightly bound to a particular implementation. It's impossible for you to separate out the dependency for testing. Imagine you have a class that uses another class to make HTTP requests somewhere. class FooService { private HttpService httpService = new HttpService(); public void makeRequest() { httpService.makeRequest(); } } You don't want to be making HTTP requests in your tests, because you need to have an entire infrastructure set up to respond to your tests. Instead it would be better to be able to use a mock dependency that didn't make HTTP requests, but responded as if though it had. class FooService { private HttpService httpService; public FooService(HttpService httpService) { this.httpService = httpService; } public void makeRequest() { httpService.makeRequest(); } } Now you can do: FooService fooService = new FooService(new MockHttpService); in your unit tests, and you don't need all the infrastructure around to respond to unit tests. If on the other hand you're complaining about your framework automatically figuring out dependencies for you, sure you don't need to do it, and can wire everything up by hand, but if your framework can do it for you and it saves you writing lots of code, why bother? As long as you can direct your framework when it's doing the wrong thing, I don't have a problem with autowiring.
Might as well try to pave the earth.
Sidebar: &gt; Please seek help with Java programming in /r/Javahelp! /r/netbeans might be able to help you better, seeing as it's not a Java question but about how to use Netbeans.
Bonus points if you remember Corel Linux
So I work in a place that his tons of business logic in stored procedures written in PL/SQL as well as custom apps in Struts 1 and Struts 2. For the past few years the company recognized the fact that our stack was aging. So last year we started a project to modernize everything we have. This is being done by leveraging existing code where possible, but creating a REST API over the top of it. I'm actually using Apache Camel to do most of this work. My point is that even if you have outdated tech you can usually eventually convince management that it is a business risk to continue running it. There are absolutely legitimate business risks to running old software and I'm sure we all know what they are. I guess it could be risky to go into an environment like this, but if you have confidence in the management then they may be able to see their risky behavior and change course at some point. It just could be that point is too far out for you to be comfortable.
You can often post your own links in moderation, as long as you don't exclusively post your own links and don't engage with the community in any other way. Most Reddits have a 10% rule, but some don't accept it at all while others don't have any limit. When in doubt ask the mods and read the sidebar carefully.
Wow! Thanks for the explanation. I guess Unit testing would be a huge pain without DI. Thanks so much!
Read [Singletons are pathological liars](http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/).
LOL As a poster in /r/javahelp this sounds about right.
If they are using struts it means a very legacy environment where you are meant to touch the code as litlle as possible, just keep it running and add some reference data from time to time. Its a place where good development practices and developers are not a priority. Specially after so many years of contracting you would get bored qui cly. Is it really that stressful to look for work each couple of years? Many employees in consulting firms do the same, without the advantages of being freelance. It really looks like a career dead end, you would have difficulty finding work as a developer after a few years there, and might be forced to take testing positions to end your career or even unemployment. Best of luck 
*Write once, test 300000 times, exceptions everywhere!
Java is a bit of a headache that's true but it has some of the best multi-threading support of any of the "high level" languages and that gives it a fair amount of staying power.
Not capitalising String? That's a paddling.
Your information is dated. OpenJDK is GPL'ed software. Stallman used to be very anti-java, but i have not heard him speak out about it in some time. Red Hat commercially supports OpenJDK, so you can even get a support contract on it if you want.
I have done all those side things but I guess in the end I've also kept up to by job switching and picking assignments that kept me up to date.. 
Crossposted in /r/learnprogramming - [link](https://redd.it/3mi59v)
There's Github.
The article conclusion is horrible and wrong in so many ways. 
They probably can't use a proper JIT on iOS, as only first party Apple code is allowed to set memory as executable last I checked.
Jupp, but they could always [ahead-of-time compile like us](http://robovm.com) :)
Meh, finding errors in documentation is simple, just view any rarely read document, you'll find at least a few mistakes. When I look through AWS's API docs, I find at least one error per page. Just report the issue, good organizations fix them pretty quickly.
What's with that space before the []?
wat
After some testing, i conclude that for basic java programming, Eclipse does indeed give the best battery life comparable with safari in the activity monitor. This is followed up Intellij and netbeans. Thank you for all yr inputs
Too bad Oracle drove down popularity to its lowest levels ever such that it will never hope to be the number one used language. Such an evil club.
I agree. You'll also learn a lot about the business rules of the application and which UI screens there are. When done right it can also bring to light inconsistencies that had been lurking in the code for a long time. There's risk too. Depending on the app, small side-effects in the original code that may originally have unintended, may actually be used by users. Eg people linking to pages with parameters that you thought were private, but someone once found out about them and had an entire scripting service running against that. They *should* not have done that, but they're an important customer and now management is all over you why FooBar.jsp?weirdUd=10&amp;jaxa=3 doesn't work anymore. 
Produced inefficient queries, which is a bummer, because in theory it should be faster, since no parsing of HQL is required. 
Indeed, it is alarming, because it's a very good compiler tool chain. However, commit stats are not a great measure of activity. Might have been more interesting to show statistics of bug reports. One of the areas where I have seen a lot of recent JDT work is in nullness checking. I happened to enable nullness checking in Eclipse JDT for one of my projects and it has helped reduce many redundant null checks!
neat! Thanks for posting
&gt; However, commit stats are not a great measure of activity Indeed. [Might be a good time to review an official answer on /r/programming](https://www.reddit.com/r/programming/comments/3m8h1a/is_eclipse_jdt_dying/cvd1ipr)
Is this useful for someone wanting to learn a bit of how to create Java GUIs? Or is it just 25 mins of watching him build the application?
Why submit a blog post from which you know that it's using wrong data (and as /u/hrjet said a dubious metric in the first place)?
It's [alias to String](http://stackoverflow.com/questions/7074/whats-the-difference-between-string-and-string) like in C# ;)
No it's not. This is clickbait at best and spreading FUD at worst.
Your analysis is precisely the same as mine. However some friends suggested that I was over thinking and over analyzing and creating a false reality based on fear in my mind, and most people just take a job and make the best of it..
yea my thoughts exactly. Some friends suggested I was thinking too much.. still I didn't enjoy that early approach to development, loading up business logic in the database, struts ( ugh !) Still it seems like Javascript is really taking over just based on the job ads.. is java on the backend vanishing? 
good points. Guess when I go in for the interview I will have to ask questions about the future direction they plan to go in. By the way I did a lot of camel work in my last job and it was awesome..
Swing apps on mobile is not something I am looking foward to... it was never designed for mobile platform and it will never give a smooth experience on mobile. There shouldn't be a unified ui between desktop and mobile. It just doesn't work.
The latter
He's pretty fast though. I had trouble keeping up.
It is true that, in this case, AngularJS is being upgraded to 2.0 but the integration with 1.x is very much possible [Angular 1 and Angular 2 integration: the path to seamless upgrade.](http://angularjs.blogspot.com/2015/08/angular-1-and-angular-2-coexistence.html) Personally, I have migrated applications from JSF to AngularJS. This, in turn has changed the architecture of our application to the extent of exposing all of our API through REST services. With JSF, some of those APIs were buried in the JSF related code (bad design for sure; but this was possible in JSF). With JavaScript Frameworks I recommend you try a few. Check out some video sites such as [egghead](https://egghead.io) or [TutsPlus](http://tutsplus.com/) and see what videos they have on the other frameworks - try Meteor. ReactJS and well as AngularJS. At the very least those frameworks will push you to explore Microservices.
All IDE's have built in shortcuts to do it as well. When I was using Eclipse I had the keyboard shortcuts memorized so it only took about 10 seconds. One could argue about the usefulness of them, and I definitely think it's absurd we don't have a shortcut to say "just pretend they're there" for the 95% of cases where they just get and set property values. But if you try to avoid them you'll run into a lot of problems because frameworks generally assume you're using getters and setters.
Fyi, the people claiming getters and setters are a bad idea and you should encapsulate your data don't know what they're talking about and have never written web apps. The http model breaks any reasonable attempt at encapsulation, making it time consuming, pointless, and worse than not doing it. Putting html tags inside your object is a terrible, terrible idea. Mixing html into string constants is far worse than exposing your data. And it becomes impossibly complicated for more complicated pages - differnet pages will display your data differently. Having those tags and css embedded in the object would be a nightmare. Same thing with getting data in and out of the database. And when you add complexity in, it becomes impossible to write a complex query that needs certain data from 2 objects by embedding the sql only in 1 object. And being that when you get your data back, it comes from String values submitted from the page - you can't maintain encapsulation anyways. The browser is incapable of keeping it as a java object - the browser only handles text (which then gets converted back and forth). The idea of encapsulating your data in an object is completely impracticle for anyone who's actually written web apps, and trying to do so adds way worse issues than you would be "solving" by doing it.
@myfear
Have you looked into zmq? Here's a whitepaper describing how you can implement brokerless application. http://zeromq.org/whitepapers:brokerless
Seems cool. License isn't stated anywhere on the site or in the readme, though.
I was tempted to adopt this for a library I'm working on, but since it's not available in Maven Central it's a no go ( author doesn't want to ) :( Sadly. Not such an issue for an application since I can run nexus, declare repos etc. but for a library destined for Maven Central, no chance :( 
These aren't problems with Spring but bad architecture. They are important points to think about *in general*, whether your application is a Spring web application, a JSF web application or an ASP.NET MVC application. **Problem #1: Modularization** *The layered approach.* There is nothing wrong with dividing the application into physical layers. Every class does not have to be public. In fact, dividing the physical layers into different packages allows you to keep package visibility. The problem is that you can't subdivide packages below that because package visibility is restricted to exact package name. Java 9 modules will be helpful for finer granularity. Mapping physical layers into separate packages (of depth 1, currently) is the best way to restrict visibility, allowing designation of internal package classes and public API classes. Eric Evans has good information about defining physical layers in "Domain Driven Design". *Circular Dependencies.* Two words: Dependency Inversion. Problems with circular dependencies, and requiring setter injection instead of constructor injection are almost always caused by improper design of abstractions, and mixing up concrete and abstract dependencies. Bob Martin specifies two good rules of thumb in Agile Patterns, Principles and Practices. The Acyclic Dependencies Principle and the Stable-Dependencies Principle, and provides very helpful guidance on preventing the issues described by the OP. The author of the post alludes to aggregates, which are important, at the domain model level. But that has nothing to do with physical layers, which often have to do with system boundaries. The web interface and the domain model should be at different physical layers, and the web interface should only be able to access domain model services through aggregate roots. Separating physical layers allows the domain model to be used in different contexts. **Problem #2: We Select Entities Inside a Read-Only Transaction** The problems here have nothing to do with Spring or ORMs. Instead, the author of the posts goes into great detail about how to abuse both entities and DTOs. A DTO is a *data transfer object*. In DDD terms, it is a bounded context mapping between two systems. The DTO should *never* replicate *all* of the fields of an entity. This breaks encapsulation and tightly couples the bounded contexts. The DTO should instead reflect the common ground between the two systems to allow efficient data exchange. The DTO is a product of an intentional and specific mapping, and because we know the intent, the side with the entity knows exactly what fetch graph to use to transfer as much data as required to implement the mapping. Blindly transforming an entity into a DTO is just plain stupid. All of the problems with selecting too much information, N + 1 selects and efficient query construction have to do with stupid implementation of DTOs and improper definition of system boundaries. These problems have nothing to do with either Spring or ORMs. In fact, the author's suggestion is to bind DTOs to the database directly, which significantly increases coupling in the system and ties the web interface to the database. Eric Evans goes into great detail about how to define bounded contexts and how to transfer information between bounded contexts in "Domain Driven Design". **Problem #3: Reinventing the wheel** I don't see how that has anything to do with Spring or Spring web applications, but again, piss poor architecture caused by rushing through implementation. **Problem #4: We Create Reports From the Database Tables that Store the Data of the Application** This is just dumb. Web applications are typically OLTP systems, reporting is typically OLAP. They should never be mixed up. It is idiotic to use ORMs for OLAP workloads. Related to this, the database model and the object model are not the same. The object model serves the application. The database model serves the data. The ORM should be used to facilitate the mapping, that is projecting columns onto fields and rows onto objects as necessary to serve the application, but the object model should not drive the relational model and vice versa. They serve different masters. The database and the application are two different bounded contexts. The ORM is a tool to create a mapping between two alien systems. **Problem #5. We Treat Error Handling as a Second Class Citizen** This is a problem with API design that has nothing to do with Spring.
I think a better solution is to forget about Spring (at least conceptually). Instead, think in terms of designing an application around Dependency Inversion. Then sprinkle in Spring annotations (hopefully) or XML bean definitions (if you must). The easiest way to forget about Spring is writing unit tests, and do not use the Spring test runner. Wire classes manually in the test suite using framework-less constructor injection. This forces you to think in terms of Dependency Inversion instead of Spring or CDI or Guice. Also, it helps to divide applications up into independent modules, instead of having one giant monolithic application. Maven can be used to great effect for this. Using this approach, I have moved systems forward from Spring 2 to Spring 3, and the application actually looks like it was designed for Spring 2 or Spring 3. Also, if we decided to abandon Spring and use JavaEE and CDI, we could actually do that without too much trouble, at least from the dev side. And with little work, the application would look like it was designed for JavaEE and CDI. The secret is an architecture designed around Dependency Inversion.
Ugh, projects like this are the worst to work on. There is nothing worse than checking out a project from four years ago and discovering you need NetBeans, which noone uses at all, that support deprecated functionality. I have a policy with my developers here that we'll never instruct them what IDE they're forced to use, so long as they can do what they need to with whatever tools they choose to use. For that very reason we've had great success in allowing individual devs to test out new IDEs, which was particularly helpful for those of us working on things like Blackboard building blocks. Having your build in an IDE just locks you to using that IDE, and ultimately slows you down if you're more proficient in another. Any decent IDE can call Ant, Maven or other build tools anyway - and chances are you've got little chance of having your Continuous Integration or deployment platforms do a completely clean build.
Of course, the problem isn't DI, that's a given good approach. The problem is that best practices of 2006 are not the best practices of 2015 (for example JSR330, which wasn't final until 2009) so it's more of a management issue to allow updating 100,000 line applications when spring is updated. 
It's a matter of trying to decide what's really "outdated" vs what's just "flavor of the month". My favorite example is Ruby On Rails. Everyone made big claims about how it was going to "replace" Java, and Java was outdated, etc etc. Hasn't happened at all. In fact a lot of places that implemented in Ruby On Rails converted their apps back to Java for performance, reliability, and maintenance reasons (Twitter being the most famous). A lot of the whiz-band javascript libraries now will be seen as outdated in a couple of years when the next new whiz-bang javascript library comes along. These are the things I think are stable: - Sql and relational databases. Decades have gone by and nothing has supplanted them, despite endless attempts to. Mapping frameworks - I've worked with them, they're not a real improvement and for anything complicated you need to understand databases anyways. - Html (after they added css). They've added new stuff but it hasn't fundamentally changed past css being added. Mostly refinement and - Java. - Spring Mvc (possibly Struts 2), it's optimized to the point where to make any big advancement you'd have to change how browsers work. PL/SQL - not a great language, but not the worst either. It's just basic functional programming. I'd personally be way more scared of the homegrown persistence layer. Maybe you'll be lucky and it's small and most of everything is in PL SQL. To be fair I've written my own "persistence layer" because, but it was just an action pattern to make sure that prepared statements were used and all executed in the same transaction. But I've seen a lot of complicated, absolutely horrible, custom frameworks. I'd much rather work on PL/SQL. Things that actually scare me away: - Enterprise JavaBeans. It was so bad and so disliked they finally just copied Spring/Hibernate for the latest spec. Step backwards and frustrating as well. - Any of the "component" web frameworks. They didn't catch on and they sounded awful to work with. - Someone with way to much enthusiasm for new tech and projects. Source: My last job where I got burned out by a constant stream of "we have to start using this new framework - why are things taking so long, here's another new framework for you to figure out why aren't things done". I don't think we'll see a "huge shift" happening. I think the people are pushing their own frameworks are being super loud exactly because there's less reason than ever to learn yet another framework or library.
This is not your video, but someone else doing FireEmitter and Minesweeper?
&gt; Autowiring is easily misused, and bad autowiring offers no benefits over well written Java, trading the evil of having to think about software development up front with the much greater evil of having to think about it in six months. It's rare to see my thoughts on the subject so accurately reflected by someone else here. The wiring aspect of an app is essential to defining how dependencies flow through the codebase. And how they flow through the codebase, is a key aspect of defining the software architecture of a project. The fact so many give up control of their project architecture in order to save on writing a few lines of minimal factory code boggles my mind. &gt; Real examples of issues with autowiring abuse include classes that cannot manually be put in a valid state and exposed internals. Can you please explain "classes that cannot manually be put in a valid state" through an example. Not sure what situation is being referred, but sounds curious.
@cowtowncoder wrote Jackson and knows a few things about Java performance. Tho he tweets about all kinds of things.
&gt; Q. Why not use setText("" + bombs); instead of setText(String.valueOf(bombs)); ? I have a sort of answer. When you combine a String such as "" with anything else, be it an integer or whatever, Java creates a new instance of some class to deal with all of the things you're combining, which ends up creating some more instances on its own. I don't know if they did it on purpose, but it does slightly increase perfomance. 
Principles such as Dependency Inversion (not to be confused with Dependency Injection) and building large programs out of small modules are principles that have been around a lot longer than 2006. Best practices, like JSR330, are matters of fashion, not principles. Well designed software can adapt to changes in fashion without substantial change. What you are describing is not an issue with Spring, it is a universal issue with poor software architecture. Poor software architecture is a problem on all platforms, and poorly designed software that has survived long enough will have cobbled into it all the technologies it has lived through. Whether that is software that has survived different iterations of Spring, the transitions between J2EE to JavaEE 6, 7 and 8, or Windows software that has survived the various platform decisions made by Microsoft. On the other hand, well designed software, built around a solid and principled core object model (as described in books like "Domain Driven Design"), will stand on its own merits, independent of the platform changes around it. Well isolated unit tests are a great guide to achieving these kinds of designs, especially if you stay away from platform specific test runners such as `SpringJUnit4ClassRunner` and Arquillian (except in narrowly defined integration tests). "In matters of fashion, swim with the current. In matters of principle, stand like a rock".
It's an issue with poor management. Best practices of 2006 are not the same as best practices of 2015. To say that the notion of good architectural norms don't change over time is not realistic IMHO. 
I don't think the example in the article is good either, but I do think the article has a good point in that dependency injection containers, objects full of setters etc are not optimal. 
You could have linked to [spark](http://sparkjava.com/) /u/thouliha?
well yea you should be using constructor injection
Take a look at who I am following: https://twitter.com/henk53 I tried to follow the most interesting people in Java/Java EE, so maybe that's a place to start for you.
I've recently done something very similar, as I have recently moved abroad and the company with the 'old' tech stack was able to offer me way more holiday than any of the competitors. I would speak to the management and find out if they have plans to upgrade the tech, as I was considering quitting after a few days but had a chat with the boss and the appetite to modernise the stack convinced me to stay. Its still early days for me, but working on upgrading everything is quite interesting, and quite a different challenge. However, if there isn't any desire to upgrade things, I'd probably give the job a miss
Doesnt look too good though 
Awesome content. The kind that blows your mind at slide 8 and big java names hate.
Awesome java?
No need for shouting. Even less need for a shitpost.
I think that comments that fall under "technical context" are the most important. Sometimes I hear intermediate programmers say things like "good code doesn't need comments". I even see it here on Reddit occasionally. The people who typically say something like that are past the beginner stage where they feel like they need comments just to understand code, but it's clear they've never worked on anything complex. Most of the comments I read/write at work less about the code and more about the problem domain. The problem domain itself is sufficiently complex that it is not always well understood in fine grained detail. I also find a lot of hypocrisy from the "good code doesn't need comments" crowd. They proclaim this for their own code, but are the first people to reference API docs or questions on StackOverflow when they run into problems. They rarely dive into the code for third party APIs, but expect others to derive everything they need from the code they produce.
It would be really nice if Google added all the missing classes to their support
Interesting list on Jaxenter at https://jaxenter.com/the-top-25-social-influencers-in-java-120862.html
I've been in software development for thirty years, best practices change, as they should. For instance Sindi tosses out many approaches currently used by DI in Play! And certainly is radically different than classic OO IoC approaches used in less functional languages like Java, while still being DI. Haskell frameworks like Yesod don't use DI at all, but use more natural monad to solve the problem.
&gt; If I can leverage my tools to do the work for me to allow me to express abstractions in my preferred form, why wouldn't I? Jodatime is a tool.... In fact it is the most well known data/time handling tool in a java developers toolkit. If I see Jodatime code, I understand it instantly. To not use a standard time parsing API, but instead deligate the time parsing to Spring framework, where you yourself "didn't even know these annotations existed", is only decreasing the ability of a programmer to understand what is going on. Why would I want to not use Jodatime, but to let spring do it for me instead..... if, by your own admission, the knowledge of the annotations for date formatting is not well known? &gt;Why bog down the controller with type conversion details There is not much else a controller should be doing, other than converting types, validating and then submitting the results to some other service to do the work.... Honestly, the only thing that doing this would result in is a system more tied to Spring Framework. 
Do folks here routinely use profilers? What for and what tools?
My original problem was having four different versions of Spring constructs and patterns in the same application. Your solution was to not be dependent on a specific version of Spring, but be independent in architecture. At the three place I've worked with Spring stacks that may have been the approach taken ten years ago, but has since devolved into a mess. And I've repeatedly said it's not a Spring issue, but a management issue.
Still not banned, eh? Amazing. domain submitted from|count|% :-|-:|-: [boxfuse.com](/search?q=%28and+site%3A%27boxfuse.com%27+author%3A%27axelfontaine%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|24|69% [flywaydb.org](/search?q=%28and+site%3A%27flywaydb.org%27+author%3A%27axelfontaine%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|8|23% [infoq.com](/search?q=%28and+site%3A%27infoq.com%27+author%3A%27axelfontaine%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|3% [blog.jooq.org](/search?q=%28and+site%3A%27blog.jooq.org%27+author%3A%27axelfontaine%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|3% [axelfontaine.com](/search?q=%28and+site%3A%27axelfontaine.com%27+author%3A%27axelfontaine%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|3% subreddit submitted to|count|% :-|-:|-: [java](/r/java/search?q=author%3A%27axelfontaine%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|13|37% [programming](/r/programming/search?q=author%3A%27axelfontaine%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|12|34% [aws](/r/aws/search?q=author%3A%27axelfontaine%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|6|17% [sysadmin](/r/sysadmin/search?q=author%3A%27axelfontaine%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|6% [devops](/r/devops/search?q=author%3A%27axelfontaine%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3% [Database](/r/Database/search?q=author%3A%27axelfontaine%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|3%
I use VisualVM about once a month, though I'm typically looking at memory consumption on micro versions of our production app/workload. This usually involves getting the app into a certain state usually where it has done some work, but isn't actually doing work now, taking a heap snapshot (to know what objects exist, and who references them), then doing more work and returning it to roughly that state and taking a second snapshot. Comparing those should give you some raw data to mull over regarding leaking memory, or at least growing persistent structures. CPU profiling tends to be less important for me, but it does come up, and often ends up showing symptoms that you have to track back to their root causes. For example, we had an issue where mongojack's BSONDecoder and Encoder were taking unbelievable amounts of time and slowing down our roughly IO-bound process. The profiling didn't tell us what was wrong, but it helped us to look in the right direction - we were writing objects to mongo in a tight loop that is frequently called (ostensibly as a logging measure), but we were updating existing objects and growing them one object at a time, rather than appending new ones and querying them en masse. Making this change resolved this issue (but doesn't fix the underlying problem of Mongo itself...).
Really? The standard practices of OOP don't solve many day to day implementation problems today? Which particular problems have you found that OOP cannot address? Because I have been applying OOP principles to solve implementation problems today for quite some time now. Eric Evans, Steve McConnell and Bob Martin have provided plenty of practical guidance in how to apply these principles to address every day implementation problems. I have shown the problems with the specific points you have raised - that is, convolution of Spring versions due to an architecture tied to Spring and "fashionable" best practices. You raised one point about Play! v2, which indeed caters to a different paradigm, but that is still a periphery concern. Considering that most web application today still use ordinary MVC and OOP and still get manage to get delivered, I think your point has significant counterpoints against it.
... For which you should go to stackoverflow, not some blogspam site that add nothing of value... 
I also thought it was pretty cool. Wondering if there is any OO alternative, though...
Yes, any time investigating performance. YourKit or VisualVM/JMC 
The most popular lab sessions get booked up before the show so you want to sign up to anything you are really keen to attend
Isn't A just the frontend for B? like a javascript page? Then you'll probably have some kind of login-call in B which the javascript from A calls, then you can store the token in the browser without the need for a backend in A
Dude, you are completely misinterpreting what I'm saying. Blocking this thread.
Exactly, for instance having at least three different configuration mechanisms: XML, annotations, and Java based configuration.
Lambdas give Java developers access to the [invokedynamic](https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5.invokedynamic) instruction introduced in Java 7 for dynamic languages (Jython, JRuby, JavaScript, etc.) They have [significant differences](https://www.youtube.com/watch?v=MLksirK9nnE) to anonymous inner classes beyond being limited to implementing functional interfaces.
Generally I will use profilers when working with a local build. One of the risks with profilers is that they affect the way the JVM runs. A lot of the time I find that when trying to diagnose a performance issue with a profiler that the profile itself is creating a new bottleneck that is preventing me from reaching the volume that triggered the original error. I generally just will take heap dumps and thread dumps on the command line or rely on a monitoring tool such as new relic rather than connect a profiler and analyze in real time. Profilers can be helpful though. They generally are a lot more user friendly than the offline tools. For me it would generally come down to whether or not the problem is reproducible on a local/dev environment at lower scale. In those cases I think profilers can be really effective.
You're thinking of joomla.org. It looks like .com is just where they host sites.
thanks for bringing it to our attention.
I dont really think this is a problem for the 99% of apps made in java. For iterators generate garbage, sometimes lambdas generate garbages, hashmaps and linked list generate garbage, string manipulation generate garbage. If you are going to worry about it, it is in my opinion because the kind of application you are into should not be made in a language with garbage collector. But if it is not a problem, stuff like anonymous classes exist to make life easier.
I'm giving a talk on [libGDX](https://events.rainfocus.com/oow15/catalog/oracle.jsp?event=javaone&amp;search=libGDX&amp;search.event=javaoneEvent). Join if you want to learn about game development with Java on all sorts of platforms.
I've gotten a lot of "do this test before you come in" things that are completely unrelated to the actual job you're applying for. I got the opposite - they wanted a web developer, the recruiting firm asked me a bazillion questions about inheritence, threading, a bunch of stuff I almost never do as a web developer (yes you use threads but sticking to "don't do anything multithreaded" works for 99% of the work I do). There's a good chance you were sent a test unrelated to the job you're applying for. 
JavaFX provides a tool allowing you to bundle java with your application and distribute it as an executable. https://docs.oracle.com/javafx/2/deployment/self-contained-packaging.htm
Well it depends. Questions about maps, lists, etc. sound like garden variety Computer Science stuff. Not at all unreasonable to ask, especially for an entry level position. If they are intending for you to work on an EE application, a little familiarity with Servlets and databases isn't unreasonable either, IMO.
The horrible implementation of Java's initializers makes me wish Java had C#'s Object and Collection initializers: https://msdn.microsoft.com/en-us/library/bb384062.aspx
Its not about generating garbage. Its about not allowing that garbage to be cleared. In this case the instance of the anonymous class that is created will hold on to references to the creating class. Depending on your usage, this may prevent the creating class from being GC'd when it otherwise could be. &gt; If you are going to worry about it... should not be made in a language with garbage collector This is a horrible attitude. The fact that we have a GC removes *so much effort and thinking* from development, can we at the very least agreed to understand how the GC works and how to best let it do its job? It is not perfect, you need to work within certain parameters to let it do its job properly. This attitude of "if you have to care about how things work then you're doing it wrong" should actually be "...then that thing is doing it wrong". All abstractions are leaky, the GC is not immune. 
Couldn't you just do this? `List&lt;String&gt; testList = new ArrayList&lt;&gt;(Arrays.asList("ba", "asdf", "asdfkl"));` No anonymous classes, you can use the add/remove functions, and it's pretty.
It's *very* verbose. While it incurs no technical debt, conciseness is a luxury that this style doesn't buy.
Fair. It was one of those sentences that starts out with more content than you edit it down to, and thus has too many words. =P
&gt; the instance of the anonymous class that is created will hold on to references to the creating class Why is this so? Is it only true if the anonymous class refers to variables in the creating classes's scope? Secondly, couldn't the compiler / run-time optimise it away with escape analysis? Since, the constructor of an anonymous class is not accessible, they need not hold onto the reference.
It probably could optimize it away, but in my experience it does not. Open to being proven wrong though...
Are you asking if I've conducted a poll or performed a formal study to verify these results? No. It's purely anecdotal. My experience has been that the types of people who rant about good code not needing comments are rarely the types who will solve a technical problem by digging into the code. They google for documentation and API references. Now, if you want to say that anecdotal evidence is just a fancy term for talking about of my butt, you're welcome to make that point. However, I'd be really surprised to meet someone who's been in this profession for a while who has NOT met someone meeting my description.
Could we get a few more ad popups /sarcasm.
I could not close all of the popups on my phone and was mit able to access the content. 
Do you really think that's pretty?
There is nothing to optimize because [as per the spec an anonymous class is not static](https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.9.5).
You should know the Java collections like the back of your hand.
God do I hate hibernate. Nothing like debugging that crap in production.
no.11 After using it on several projects you identify it as garbage and start writing software properly. 
Use your energy constructively by writing blog posts! If they're good, someone will surely link it here.
this. i only use the openjdk and in fact java is made strong by all the open source projects out there. look at all the things available from Apache and Red Hat, amazing stuff and all open source.
&gt; The poor expressiveness of the Java language means that code takes longer to write, is harder to read, and tends to be rigid instead of flexible in the face of new requirements. Really? I always thought that Java is very easy to read. It can be verbose, yes, but Java is one of the most unambiguous languages in modern use.
&gt; Depending on your usage, this may prevent the creating class from being GC'd when it otherwise could be. Yes, like everything in a garbage collected language. If you are corcerned of that, you should not use then list, arrays, or references. With anonymous classes you are sacrificing some memory and performance (negligible) to program faster. This is an example of the trade offs of garbage collected languages. &gt; This attitude of "if you have to care about how things work then you're doing it wrong" should actually be " But i never said that, i said it hardly will be a problem for 99% of programs. Tomorrow "Why you shouldn't use tcp/ip when udp actually exists".
I was trying to find a link to where he explained his reasons but can't find it. From memory it boiled down to Maven Central being a 'single point of failure' and not having control. However, a practical solution would be to continue running the repository he is now, but _also_ sync it to Central.
&gt; Java continues to struggle from the “jar hell” (in analogy with DLL hell) that .NET solved years ago with .NET assemblies Hahahaha. No. 
What the author is talking about? Arrays.asList() returns a mutable new ArrayList&lt;&gt;(a);
I use visualvm very often, weekly at least. Works great :)
That it returns an `ArrayList` is an implementation detail, though, upon which you should never rely. The returned list is called a “fixed-size list” in the documentation and is only guaranteed to be serializable and implement `RandomAccess`.
It is really a lovely thing syntactically, I wish there was actually a good, yet elegant way to do this in Java.
It returns private `java.util.Arrays.ArrayList`, not public `java.util.ArrayList`. Completely two different classes with different behavior :) BTW, a short version w/o temporary List garbage: List&lt;String&gt; lst = new ArrayList&lt;&gt;(); Collections.addAll(lst, "thing one", "thing two");
Or you know... you can just move Arrays.asList into the constructor args... new ArrayList&lt;&gt;(Arrays.asList("a", "b"));
This is a real concern for java &lt; 7. However, Java 8's metaspace by default has a metaspace specific GC enabled that works pretty well. That being said, I agree with you. Anonymous inner classes put more pressure on the GC and JIT (vtable code compilation fun!). Using them shouldn't be something you do for something silly like list initialization. 
&gt; Specifically, we find that if a developer has spent too much time with Java to the exclusion of other languages, they tend to expend heroic efforts structuring code so that it’s possible for the Java compiler to check more error conditions. This effort is usually better spent on automated tests, which can catch a much wider range of error conditions. I don't recognise this. Can someone explain what they mean?
Never.
This topic reached me in a very intimate way. I'm just having this experience right now. I was working in a good company, the environment/people were nice, we had a lot of autonomy, my last move there before I left was to update our main project to Java 8, and I didn't need to get permission or anything (this project is responsible for all the money the company gets). I'm glad to say it worked as expected, and I left a good update to my friends there. Anyway, I received an offer from another company, the previous one couldn't raise my salary that much so I left. Now I'm facing a bit of depression, the bureaucracy in this company almost kills me, the project they put me in is total madness, I thought I knew what a monolithic was but this is a behemoth. The problems keep growing because all the new code people do is bad as well, so it's like a beast and I have no idea how to stop it. If I didn't have a daughter and a wife counting on me I would leave this job in a bat of an eye, without thinking twice. Their CTO interviewed me, he's a very nice guy and told me to be patient, that someday we will change this structure of the team I am. But this could happen in a year or so and by then I would be obsolete, as you are afraid of. I do work in side projects as well, but it's not the same thing. Damn, I go out with my old coworkers sometimes and they tell me all the cool things they are doing, trying all the new stuff Spring is creating like crazy, I envy them so much. Just wanted to share this with you, yesterday I read this topic and felt so bad. Like some people said, now I have time to read all the internet everyday, but this just makes me more sad, it's like a waste of my talents, I'm a good developer, I can say that specially after seeing the code people do here. If I can tell you something, don't go that way, I'm 27 years old and I feel like this is a waste of my time. Or do, maybe you have more structure then me.
It's basically just a static factory method for list. It wouldn't be hard to implement. It would necessarily be more verbose because you would have to use a static method, but not bad at all. To be fair, scala's syntax for instantiating data structures is pretty far ahead of most languages. Most languages that support shorthand syntax also lock you into specific data structures. In scala you can write your own and still use that syntax. 
Perhaps /r/androiddev would be more informed?
Exactly. What the hell is he talking about. I deal with huge apps and have not had to deal with any jar hell in a long time.
Wut? I know what these words means but the phrase does not make sense. It is not even wrong.
Use guava
Aka "why do my developers waste time with this '? extends Foo' nonsense? Just use Object everywhere"?
Exactly. I worked 5 years in .Net (a long time ago) and don't remember it being even a fraction as easy as Java dep management using let's say Gradle
 List&lt;String&gt; listOfLetters = Lists.newArraylist("A", "B", "C"); http://docs.guava-libraries.googlecode.com/git-history/v18.0/javadoc/com/google/common/collect/Lists.html#newArrayList%28E...%29
Oh thanks! 
ok thanks!
This is an awful tutorial. If you don't know much about the WeakHashMap, it's a great thing to understand, but the linked page is not a good place to start. Strings and Integers make really bad keys for the WeakHashMap. The one that comes with Java is actually pretty bad, since it uses .equals() equality where reverence (==) equality is more appropriate when weak references are involved. Guava's implementation (in MapMaker) is much better for most use cases
This is extremely basic. So basic that you're not even a beginner, and it's clear that you've made zero effort. You can google "java temperature converter tutorial" and get a ton of results. 
Google is your friend.
Thanks, yes, I am googling and reading, but getting a simple programmer-to-programmer breakdown helps too. Pros, Cons, Tips, what's good, what's bad, what's better elsewhere -- that sort of stuff is hard to glean from documentation. 
I don't have a problem with Hibernate. It's just like learning a framework. You learn the quirks/nuances, look under the hood and play around with all the features to get a better understanding. It's not a fix all, just have to know how to leverage it properly in a situation it is suited for.
Fuse and Fabric8 FTW
I really don't understand how one can legitimately claim Java is used in games; sure, there are a few libraries/projects around but of all the usecases Java *is* good for, gaming is not one of them.
That's cause it's called experience...
Exactly. That's why I posted my question, hoping to learn from the experience of others to add to what I read. Being able to learn from others experience is very valuable.
Lucene is a search library, and Solr is basically a server which uses Lucene and abstracts away some of the complexity and adds additional features. You might say that you'd use Lucene for special complex search needs, and Solr for something more run of the mill. A good way to learn everything there is to know about Lucene is from the book Lucene in Action. Otherwise I'd say Googling and [the docs](https://lucene.apache.org/core/5_3_1/index.html) are your best bet.
Sounds like they outsourced a problem they were having to a potential hire o_o
So what pays better? Android or Java EE development?
check out /r/dailyprogrammer
Being in the top 10% of either.
Codingbat
I find it's easiest for me to focus on one aspect I want to improve in particular. You can solve programming puzzles, but that's pretty language agnostic. What in particular do you want to improve? OOP skills? Design skills? Algorithms? Threads? GUI? For example, when I wanted to improve my algorithms knowledge, I solved algorithm problems by making a bot for a puzzle game. When I wanted to learn about how to use Gradle and Logging, I made a small app that did something inconsequential and focused on logging / building. If you have a particular goal in mind, maybe we could help you brainstorm a project you could work on.
Check out the [Programming Challenges](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_where_can_i_find_practice_exercises_and_project_ideas.3F) in the /r/learnprogramming wiki. Plenty resources for all difficulty levels linked there.
&gt; not much predictable income to be made in the ~~"create unexpectedly wildly popular~~ game ~~franchise~~" industry. 
Tons of (cross-platform) mobile games are made using Java/libGDX. From hobby projects to big studio games, e.g. Ingress, InnoGames, PerBlue, etc. Definitely not as popular as Unity, but enough to make a dent. Steams also.becoming a lucrative target.
Making a living developing indie games is improbable. Making a living developing indie games in Java is not significantly more improbable. You're right that the claim is disingenuous, but the reason is disingenuous has nothing to do with Java. 
And you keep ignoring the purpose of the article is to discourage you from using them when that only matters in the 1% of the cases, and that my response was to point out how you will care in a tiny percent of cases.
You _can_ make a successful game in Java, but it doesn't therefor follow that Java is a _good_ choice for game development. You _can_ kill bears with bow and arrows, but if killing bears is your purpose there are nonetheless better options out there.
Code help belongs to /r/javahelp, not in /r/java as is stated + in the sidebar + on the big banner that appears when hovering above the submit text button + on the red, separate "Seek programming help" button + on the submit text box. **Post removed:** wrong subreddit **Formatting help** is available just below the Text submission box and in many places in /r/javahelp. Please read and follow the posting guidelines there before posting.
&gt; Also worth noting that since Microsoft bought Minecraft, they're rewriting every version of it in C++. Got a source on that? Because that's a suire fire way to destroy minecraft's modding community. 
Java Webstart was supposed to be pretty awesome.... It turned a Desktop application, into a distributed web application.... you had all the advantages of a desktop app, but with the ability to access and have it up to date like a webapp. It was never gonna get anywhere..... for 3 reasons. 1) Apple / Microsoft aren't gonna let you deploy native like apps to their systems!.... its a HUGE business threat, if they think that applications, that could work on multiplatform, OSX / Linux / Windows, can be launched by clicking on a website link. 2) Java Bugs..... If an application can escape its sandbox, its a massive security risk. Sun dropped the ball here. Cant blame Oracle. If the java sandbox was rock solid, it would have been ideal. However, this isn't just a java problem - look how Apple and Microsoft are constantly patching their systems from applications getting privilege escalations.... its a huge job to keep complex software secure.... 3) Not open source..... Java Webstart is Sun (now Oracle) technology. It wasn't open sourced as part of the JVM. So, imagine if it had taken off.... My guess is that Oracle would have turned it into a iOS like App store, and be charging 30% of revenue.... This whole idea is.....frightening. So, Yeh, Java Webstart. Fantastic, and I mean that, technology. BUT.....far too powerful for its own good, and better off dead. HTML5 is probably the closest we have to it now...... 
I've been looking for something like devdocs.io except for Java related stuff for a while. This looks good except that it doesn't do anything (for me). I put 'PrintWriter' in and hit enter and nothing happens. :( 
Not sure what has been updated to this article recently, but yes, it's really simple to get your Spring Boot apps running on Heroku. It's pretty awesome.
&gt; Another newly announced application [finds bugs in Java code](http://www.nasa.gov/centers/ames/news/releases/2005/05_28AR.html). Really, 10 years ago is "new"? SunSPOTs are discontinued (via Wikipedia: "After the acquisition of Sun Microsystems by Oracle Corporation, the SunSPOT platform was supported but its forum was shut down in 2012.")...Author couldn't use Raspberry Pi in it's place?
At least the Window 10 version is C++. [Announcement](https://mojang.com/2015/07/announcing-minecraft-windows-10-edition-beta/) / [Discussion](https://www.reddit.com/r/windows/comments/3c615w/mojang_announces_c_version_of_minecraft_for/). I don't know nor heard about other versions though. 
Nothing in that announcement mentions C++
You're right, the C++ part came through other sources. E.g. [here's a comment](https://www.reddit.com/r/Minecraft/comments/3c3e5m/announcing_minecraft_windows_10_edition_beta/csry0j5?context=3) from a Mojang developer.
or whatever number he is currently using to bash on Java...
The mobile edition isn't written in Java. The Xbox edition certainly isn't written in Java. The Windows 10 edition (currently in beta) is, presumably, not written in Java. It's pretty clear with the cross-play features being added in that they will consolidate Minecraft eventually to a version far more in line with the existing non-java editions, rather than the original Desktop one. How or when this happens is unknown, but it seems inevitable given the current direction they're taking.
&gt; Java, though, has been [open source for nearly nine years](http://www.infoworld.com/article/2660558/application-development/sun-ceo--open-source-java-is--momentous-.html), with interested parties able to access code. Which is why I'm not worrying. I fully welcome Oracle dropping Java like a hot potato so they can go focus on whatever it is they're wanting to do instead. When Java is so critical to the enterprise software ecosystem, an interested party will pick it up for further development, guaranteed. Maybe they'll even distribute Windows binaries without bundling Ask toolbars.
I agree. I couldn't see Oracle selling to Google, though I could see Google making an offer.
It depends on who is hiring, but generally they are similar at entry level. Java EE projects can get rather large, so I would imagine that more senior developers have a higher pay ceiling before hitting management. Of course, if you work at some hot-shot startup like Uber or Airbnb, you are probably raking in stock options and bonuses.
Oracle is driven by profit. If Google offers them enough money, they will accept. Edit: Sentence structure
Wouldn't they even be obliged to take a deal to satisfy shareholders? I have no idea how you would evaluate "Java", though. It might be too expensive.
I'm not sure what the community expects from an almost 25 year old mature programming language. Maybe there is a lot that *could* be done to the language, but at this point *should* it be done? Oracle *should* leverage it's investment in the language. Sun's problem was that is was a businesses operated like an academic institution. Eventually investors want returns. It *should* also make sure the language is as stable as possible. Maybe it's time to fork it, but the core Java language should ride the horse that got it here. 
What did he say? just curious
*public class* ?? *x==true* *year+=1*
Those last two are perfectly fine statements.
Meh, sell it to Google or Amazon
Yep, totally is. Friggin' lunatic.
Python 2 -&gt; 3, C#, PHP, there have been a lot of languages that have had notable syntax changes in the past several years.
What do you guys mean by "syntax changes"? New features?
I'm not sure what previous poster meant, since I don't know of any real 'syntax' changes that Java made, but I'm assuming he's talking about new features like lambda's, which obviously C# did as well. PHP added namespaces and autoloading, and Python 2 -&gt; 3 was a large breaking change. At any rate, since there was no real 'syntax' change, it would seem that just major feature additions with new syntax would count towards what he meant, and that's what I was saying had happened in plenty of other languages, some to much more of a degree than Java.
Don't forget their credible source: "an insider"
Yep, this is the way to go.
Agh, this InfoWorld FUD... I'd like to hear some facts. If those are "open letters", then publish them!
Saddens me, because Google would do a lot for Java. They're probably the biggest Java shop in the world.
if you can legally fork it with no repercussions than why is Oracle suing google over the SSO copyright of 37 Java API's? Also, Google has never called what they use Java and don't even use a VM that's even related to the stack based VM of the Java.
Aye. Bitbucket is nice.
Absolutely.
GPL is the open source license. You can fork GPL code at will, but can't change it to other open source licenses such as the apache license which is what android uses.
I am also trying to include actual text though and it won't let me. That is what I don't get. System.out.println("Tax " + TAX) ; won't let me do it. 
That should work. The only reason it wouldn't is if TAX isn't defined in your local scope.
 MEASUREMENT Length 12.0feet Width 10.0feet Area 120.0 square feet Charges Description Cost/Sq.Ft. Charges --------------------------------------- Carpet 10.0 1200.0 Carpet 0.0825 9.9 Works fine for me.
Arguing with you is pointless. I don't think you know what 'SSO of 37 Java API's' means. What a waste of time.
It's hard to get track of those these day: https://en.wikipedia.org/wiki/List_of_Java_virtual_machines#Free_and_open_source_implementations
Yeah, but they need spend a lot of their money requiring rights to media. Which is very important to their business. This is probably why you see them open sourcing their tech, using open source tech, and using AWS to power their tech. 
Yeah, I kind of do. It would have helped if you knew what you were talking about, though, because it's clear you had no idea. Rambling on about implementation and clean room when it wasn't even related. As for what it means, well, it's in regards to the sequence, structure and organization of those 37 Java API's that Google used. This has nothing to do with implementation, but rather the method signatures and their structure and organization within the packages. 
Ahah, he probably doesn't know how to program in Java 
I actually would love to meet him IRL. See if he's a complete troll, a total lunatic or just someone who is trying to give C# devs a bad name. 
He is in fact going nuts in the /r/programming thread on the same subject. I guess he doesn't want to bother here because here the audience is just ignoring him. 
You forgot "LOL retarded, pathetic, horrible java. I'll never stop laughing at its utter idiocy." I'm sure that guy is just a Markov chain that triggers on certain keywords. 
Offtopic but: I think that that thread really shows the sorry state of /r/programming. Sensationalist news with very little background is immensely popular and around half the comments there are from kids thinking it's edgy to shit on an immensely popular programming language. 
If I told you that saying ++x is the equivalent of saying *increment x by 1 and then return x (x = x + 1)*. Can you understand why you get the outputs that you do?
Thanks, I get that part. Now [this is my concern](https://www.reddit.com/r/java/comments/3n31cr/if_x_1_and_y_x_x_then_why_does_y_equal_4_and_x/cvkcftf).
As others have pointed out. ++x is what is called a preincrement. It is incremented then returned. x++ is a postincrement. It is returned then incremented.
specifically, try exploring - 'operator precedence' and 'order of evaluation'. That should help you with both the current problem and future problems of a similar nature.
Yeah from what you say that test just doesn't sound right. So I wouldnt worry about it, pick yourself up and dust off, go for the next one and then the next one after that until you find a competent company.
Yes I am not so intelligent as you are
What exact effect I can do
I don't think this affects the example though, because the G1 string deduplication only deduplicates the backing char[] arrays, not the String objects themselves. So removing a reference to the String allocated via "new String()" object will still allow the object to be garbage collected. 
The Servlet is not outdated, is the foundation of Java web technology. However, it is a bit primitive. Frameworks like JSF built on top of Servlets are designed to improve productivity. But Servlets remain a vital technology. JSP is not outdated. It is deprecated as the view definition language for JSF, which has been superseded by Facelets. AWT isn't outdated, per se. AWT is the native layer that is the foundation of Java UI. But the widget library is outdated. For maximum cross platform support, AWT only supported native widgets that exist in all supported platforms. That's why there is no AWT tree widget (because Motif doesn't have it). Swing superseded AWT by providing its own widgets, allowing for a greater variety of widgets that work on all platforms. But Swing is built on AWT. On the other hand, Swing is outdated, because it has a very limited scope (ordinary windowed applications), that can't provide the rich user experience that makes up the "modern" approach to UIs. Which is where JavaFX comes in. Same thing happened in the Microsoft world in the transition from WinForms to WPF.
Andrey Cheptsov, the product marketing manager at JetBrains in person. Hey, thanks for all the great work you guys are doing. IntelliJ IDEA rocks, I'll never look back. I find the new subscription model wrong, but at least you changed your minds and allowed the fall-back to the version that the subscription started with (or how exactly it works).
Ouch, that reminds me. You know what? You *faiiiiiiiled* ;) somewhat. Because: Before my recent edit (2015-08-15), the Wikipedia article about IntelliJ IDEA *did not* say that the Community Edition can be used freely for commercial projects of any kind. But this is a major misunderstanding that's still making the rounds! You really should have done that yourself. Not meaning to be rude, but I'm sure you agree. EDIT: I wish the people who downvoted this would stop drinking so much cum, because it seems to inhibit their ability to put the voting rules into action properly.
.NET is not immune to the forces of nature. You can literally ask these same questions about Microsoft technology. Like, is ASP.NET WebForms outdated because of ASP.NET MVC? Or WinForms because of WPF? If nothing is stable is in the Microsoft world, that what can you depend on?
Bit of mention of some Groovy updates, but no reference to Grails 3. They made a lot (too many?) changes to Grails 3 - it's Spring Boot-based now - but there's essentially no integration with IntelliJ now for using/parsing Grails 3 projects. :/ The primary support ticket on this says "version 15" but no real progress/info posted. Checking out latest release just now, but was hoping for some public news on this. EDIT: and yet... there in 'new project' is a separate 'grails 3' option. testing now... EDIT 2: launching debugger and pausing on breakpoints seems to work. Changing the file then trying to stop at a new breakpoint doesn't seem to work, although it does pick up the change and say it's recompiled. But... this is great progress :) EDIT 3: I was sort of wrong on edit 2 - it seemed to work in my second test, but not the first. First test was going from no method body to adding one line. That didn't work. Once there was a body, adding more code and breaking on those additional lines seemed to work.
Yes, the preview comes with the initial Grails 3 support. Because it hasn't yet been tested by EAP-ers, we've decided not to mention it in the announcement so far. Still it's there. Later today I'm going to post an update to https://youtrack.jetbrains.com/issue/IDEA-136970 about it.
Not entirely sure why you are getting downvoted, you are just pointing out that there is a common misconception floating around that CE can't be used commercially. Maybe it is the "You faiiiiiiled" part people are downvoting (i.e. didn't like your delivery).
For a moment I was really happy about improvements with the reactjs integration, and then really bummed when I checked out the improvements. We need JSX attribute / props completion, if only for components with defined PropTypes.
The fall-back license fixed any concerns I had with the new model. I renew every year anyway (user since 4.x...2004ish); however, if for whatever reason I couldn't pay I didn't want to lose access to IntelliJ. Thanks for making that adjustment to the model! (and principally I am against renting software...this is why I boycott Zeroturnaround's JRebel). 
Since I've been hearing a bunch of Negative Nancies, over the course of the past year, spouting off that this project was essentially dead, it seemed fitting to post this link. The project doesn't look dead to me...
WAT
Has anyone really been far even as decided to use even go want to do look more like?
Worse: "former high-ranking Java official."
Don't laugh (too hard). It has been tried. AOL tried in the 1990s. Their grand plan was to pave the earth until the continental US sank into the ocean under the weight of AOL floppy disks. 
I think OP is asking about the new module system, [Project JIgsaw](http://openjdk.java.net/projects/jigsaw/quick-start). It uses module-info.java files that look like this: module com.greetings { requires org.astro; } So, if that is indeed what OP means: This is the major change in Java 9, that's why you might be surprised by it.
50554666f184a2d85918c4344301a39c56444d4e : "maven folder layout" build.xml :-(
&gt; Maybe it is the "You faiiiiiiled" part people are downvoting The edit with the cum drinking part is not going to help either.
Set the language level to 1.8 or lower in your IDE, and ideally also the compiler level (or the recipient would need 1.9 regardless of language level). Then you don't need to bother with these awesome new features just yet. Why did you install 1.9 at all? It isn't released yet.
I know nothing about the CLR book. However, the [JVMS](https://docs.oracle.com/javase/specs/jvms/se8/html/) is a good read. If you have time and are not afraid to look at C++ code, I also recommend checking out Hotspot's source code if you have specific questions. It's a huge code base though. That's the main resources I used. I'm weary of calling myself an expert in anything but I think I know quite a few things about the JVM. There are a lot of additional specs and documents you might want to look for such as the instrumentation APIs (JVMTI), debugging protocols (JDWP) and stuff. Depends on the particulars you want to know about.
There are two open issues: https://youtrack.jetbrains.com/issue/WEB-16323 and https://youtrack.jetbrains.com/issue/WEB-14741 Are they relevant to your case?
Yes I heard about jsf but now my faith is over I am fear to use new techology bcoz my bad luck which I do become outdated so help me is jsf is safe and thank for the help
It is release offical check oracle
[removed]
Nothing is "safe". If you're afraid of learning new technology because it might one day become obsolete, you're in the wrong industry. You have to always keep learning. 
14741 would be maybe, but it's not the main point. I want the usage side of the React component to reflect the possible ( or declared) props. For the example in 14741 what would be completing "aProp" and "thisIsAProp" when "Input" is used within another component. 
The problem with this model (the way I understand it) is that if you buy a year subscription today, you'll be able to download v15 next month. But when it lapses you'll be back on v14.1 despite having used v15+ for 11 months of your subscription. 
[This book is geared towards performance](https://library.oreilly.com/book/0636920028499/java-performance-the-definitive-guide/toc) but, since you have to know about some of the ins and outs of the JVM to understand how to tune it, there are a few relevant sections in there, particularly chapters 5, 6 and 7
No, [the official download page](http://www.oracle.com/technetwork/java/javase/downloads/index.html) still shows 1.8 update 60 as the current version and will for some time, too. Only because you can download it from Oracle doesn’t mean that it has been officially released.
Well you could probably blame that on the fact that despite a release of 2.4.0 months ago, they didn't update this most obvious expression of the project. &amp;nbsp; It still said 2.3.0 was the release version.
I've been using the EAP 15 versions since day 1 because it's the first version that allows me to run TestNG unit tests. You should really mention that TestNG is now usable and working great. Support for it was utterly broken and unusable in previous releases.
Frege?! Do you really think they have time for an absolute niche language?
I swear this has been posted like 10 times.
This should be in [/r/javahelp](https://www.reddit.com/r/javahelp) anyway it's not difficult at all. just think about the order of the code executed by the computer
Hm - usually if I accidentally repost something, reddit warns me that it's already been posted, but I didn't get a warning nor did I notice it in my feed.
Pics or it didn't happen...
if 100 bucks is too expensive for you, you probably need to find a new job. 
Interesting, why stock Java w/out helpers (Guava/Apache, etc)? 
Mainly because I haven't found a need for them
[Here you go!](http://imgur.com/a/WRU8s) Yes I realize that GUI sucks. But it has lots of different types of swing components so I think it makes a decent display of the changes. To me it looks like the product of some high school kid fucking around in XCode rather than some High School kid fucking around in Eclipse. IMO that's a big improvement. The important thing though is that this is the first thing Apple has done in a long time to actually support java on OS X, after seeming to try to make it so difficult for developers to use it that they're forced into objective-c. 
Java *scripts*? Are you sure you're in the right neighborhood? 
Java programs aren't generally called *scripts*, but... Here are the official [Java Tutorials](https://docs.oracle.com/javase/tutorial/).
Here's an example of an opensource script https://github.com/gbaelement7/scripts/blob/master/AutoWoodcutter/AutoWoodcutter.java
Would JavaFX stuff look any different?
I don't think so. From what I understand JavaFX doesn't have a built in "System look and feel." You're expected to find something that looks decent on both windows and OS X, or if you really want to you can use a different custom theme for each OS. JavaFX is much easier to customize using CSS and such, but there's no official windows or mac LAF. That said, there is a third party ["AquaFX"](http://aquafx-project.com/) theme that seems to be pretty convincing, and that's been available for years. 
Is the source or a build currently available? I couldn't find a link.
No, the source is on bitbucket, but it's still a private repo. When the first release is done, I'll GPL the source then.
Is this the Oracle or Apple JRE?
I thought apple stopped making their JRE?
It's just searching for classes annotated by a marker annotation. For many applications, like long running servers, startup time isn't all that important.
This looks very sweet. Kudos for getting this far. The music is fantastic. Love to see it done. What's the tech stack or libraries you are using for the game? Any game engine or framework?
Yeah the last one that shipped with OS X was java 6. Since then you have to install java from oracle, but it still looks for LAFs available on the OS. I didn't update my JRE or JDK but it's not actually part of the those anyways. The cross platform LAFs are, but operating systems have the ability to provide their own as well. Apple just updated that. I don't know what it would be classified as, a system resource I guess? 
Internet fist-bump for being awesome. I'm really looking forward to seeing how this turns out; the quality of your game assets is *really* good.
Thank you! I'm particularly glad you like the music because that is what has received most of the lukewarm reviews. Someone actually went Godwin on it... crazy. No game engine or framework is being used. One thing that keeps me interested is having to solve problems myself in straight Java without relying on 3rd-party code. The one exception is the audio library... I'm not that crazy! There are interesting problems to solve, especially in the planet generation code. That's what I enjoy most about the project. 
Thanks! I've been fortunate to find a very talented illustrator. I am inclined to use his talents in as many areas of the game as I can afford.
I completely understand, but hopefully you can understand the desire to not present my unfinished code to the world. In addition, the game is using some copyrighted art assets as temporary placeholders, so I will not open up the repo until those assets are replaced.
No? Who is Martin Fowler?
It is called separation of concerns and it is done to make testing and refactoring easier. Your data object and the signature that accepts it is essentially a contract. It is much easier to test that the implementation of that contract works correctly if inner object logic and additional state change wireups are not needed with the data object. That said this is mainly most relevant for the API layers and the areas you are exposing to consumers, internal implementations can have more varied layouts (like a state machine). 
Okay that makes sense. Thanks so much for your help. Man, I'm really loving how robust both Spring and Hibernate are.
Yeah, they do a fantastic job of doing a lot of work around that internal implementation side of things I was speaking of. They make it easier to follow good practices as many parts of it require you to do so. That said you can still shoot yourself in the foot. One simple tip that makes like easier down the road. Do interfaces for everything you can and refer only to interfaces when wiring between objects. This makes testing and dropping in different changes much easier.
Everything can be an anti pattern if done incorrectly. Coding is all about abstracting away as much as possible so it can be consumed in a sane way by something or some output. The "service" layer people put in between controller and repo with business logic or whatever is a good way to abstract away the request and generating some response. It really doesn't add much value, but its better than deciding to put that same logic on the frontend or extra constraints on the persistence layer. It also makes it easy to mock out error handlers and output cases while asserting things about that one middle layer. Ie use mockmvc to check your controller while faking what comes out of your business logic with spys or mock beans.
It is procedural. You are right. However, after litterly decades of experience I have come to the conclusion that it isn't an antipattern. Object Orientation is actually the antipattern. I have tried being pure OO.... designing my domain, the way objects message each other.... It works at the small level... to a degree, but it just wont scale up to the big systems.... A customer, for example might need different behaviour depending on what part of the system it is being used.... you have to have big gap analaysys to make sure you're not screwing anything up. ORM is just a symptom of this.... Its so much easier just to load a set of data objects from the DB, manipulate, and store back..... rather than explain to your ORM what the stucture of your data is, and try and manipulate using OO, and hope the ORM keeps up with lazy loading / storing back efficiently....and screaming blue murder when it all breaks. To create a new service, that just manipulates data objects, just like they did in the old mainframe days with cobol, is easy. and easy is good. The biggest mess, and horrid code I have to work with today, is that code that has been built using OO principals. Like large inheritance trees, over use of interfaces for sodding everything, making it so difficult to work out whats calling what. 
While it's probably a bit ambitious to dive deep into the JVM when starting with the langauge I also think if you really want to know everything about the platform, this deep knowledge is only going to help you. The ready and free availability of the specs is something I always liked over most other languages which are behind huge ISO paywalls.
Thanks for writing this. I'm gonna use it for my open source fan-made javafx application. _I still chuckle at that article I read about IoC frameworks having 200-page manuals._
Since I know about them I find it hard to envision a sufficiently complex application that has no suitable need for Guava's collections. Multi sets and maps are just missing from Java's standard library.
Why wait if you intend to open it anyway? Nobody in their right mind is going to judge you for an unfinished project.
This is in fact due to El Capitan shipping with a newer version of Apple's "legacy Java Runtime" package, called Java for OS X 2015-001, which upgrades the Aqua look and feel to match the 10.10+ UI style. The new look can be installed on 10.10 too; https://support.apple.com/kb/DL1572?locale=en_US
Light year is a measure of distance.
There are pros and cons about class scanning. Personally, I find long startup times while development highly annoying. Which can add up to a lot of time during the day. Blackcat was designed for game development with as minimal impact as reasonable. There are enough well established full blown DI frameworks, so writing another one would have been pointless.
&gt; I completely understand, but hopefully you can understand the desire to not present my unfinished code to the world. I actually can't. Basically all we now have is an announcement that you're making a game with little bits of artwork. What's the point of that? There's always people who start writing games. Most of them just stop somewhere down the line. Also: there's loads of rather experiences developers here who might be able to help you with some hints and tips along the way that might just save you a ton of time along the way. It's a real shame that you're not open sourcing this now. It's also a shame that you're not using something like LibGDX which would allow relatively easy ports to for example iOS. Seems like something that would work on a tablet. 
* It shows me dubios error messages. * It keeps already removed dependency versions (so that they need to be removed from project structure by hand) * It doesn't offer much functionality Maven support is way better.
You are getting confused by the order. d = ((w &amp;&amp; r &gt;= 7) || (r &gt;= 8)); Is actually parsed as: d = ((w &amp;&amp; (r &gt;= 7)) || (r &gt;= 8));
I dont know the answer to this question, and have been doing Java since 2004. Please, if you pass your course, and end up working in Java, don't put *anything* like this in real world code. 
Thank you! Now that cleared up my question!
:-) Im kind of glad that Shimmen answered the question..... 
Please, follow the rules of the sub and post such questions in/r/javahelp! There are *plenty* hints here that should have directed you there instead.
+1, either it is (1) fear or shyness of any kind, which is understandable but not reasoned/reasonable or (2) some preparative spam - I don't say you're doing it here, you mentionned GPL. You have a point in not "disclosing too early", may it be to "not annoy/disappoint really tough fellow programmers with my dirty code" or to "prevent early unmaintanability by cleaning things up before showing a jewel to the outer world". But.. As an open-sourcer myself I can only repeat again the very *kind* welcome message : 1. Don't worry, we all write crap - at some level 2. Be proud and share early - "Given sufficient eyeballs, every bug is a blinking neon" 3. Many [more than you imagine] will be happy to help and have built sthing with you to make the world a bett.. funnier place :D 4. Final point but decisive: don't take that fear, you have no idea how many people will just pass their way/ go on to the next topic/ click somewhere else and you still can re-fork your work as 'my private experimental branch' - nobody is standing out in the dark waiting for the day to bash you up afaik Long story short: welcome to a world of welcoming,kind,free programmers if you share, the shown material is already of awesome quality.
To anyone thinking about commenting: Please don't. Look at OPs submission history. It's full of troll questions like this.
&gt; I dont know the answer to this question, and have been doing Java since 2004. You've never heard of operator precedence in 11 years of programming? That's somewhat shocking. 
Not just that; he hardly bothers to participate in the discussions he starts himself. No point in responding at all. 
Ok thank u
I voted you up. People who use the down vote button as a disagree button are idiots.
w &amp;&amp; r &gt;= 7 This is confusing to me..... Operator precedence or not!... AND,,,, for info, I have coded since I was 12....so thats 30 years. And, IF statements on the old Commodore Vic 20, which could say: IF (W AND r&gt;=7) OR (r&gt;8) THEN and, for some strange reason, I understand this fully, even though its is the identical logic. in fact I can say the brackets can be dropped. They are superfluous, as operator precedence takes care of everything.... .... but the original post: d = ((w &amp;&amp; r &gt;= 7) || (r &gt;= 8)); this just doesn't make immediate sense to me ... maybe I'm getting too old for this, but I think, rather, I would prefer to see code that is easily parseable by a human, as well as a computer. 
That is why in situations like these you should _always_ use parentheses to make the meaning clearer (even if it’s already perfectly defined): &gt; w &amp;&amp; (r &gt;= 7) Problem solved.
However, we you see that Stroustrup (the inventor) of the language just defined a first draft of guidelines that are 12,000 lines long, you can wonder if such a language is still usable 
Any news about when they'll ever move to JPA 2.1? :X
Question 4 is not fully answered. Question 7 is even better. Pass by reference or pass by value **in Java**? I would rate this as trick question.
I have shared couple of [books](http://javarevisited.blogspot.co.uk/2014/07/top-5-java-performance-tuning-books.html) on JVM internals and Performance tuning, you might like it
You're saying OO is an antipattern *in general*? Traditional OO isn't an antipattern in itself, it's just a bit stupid to reject anything that doesn't conform to it as there may be better ways to do some things. It can be a great way to abstract over certain problems. OO doesn't necessarily mean large class hierarchies, and it is a compatible approach with other, different styles if you use common sense.
You are right, the CLR is the equivalent to the JVM, that is why the CLR also runs in ARM hardware for its portability, and is now running on Linux with Roselyn. A book that explain the classpath, jar files, the different compiler options it is what I need, not necessary the inner parts of the JVM.
Interesting. Glad to hear it's improved. I've been using 15 EAP for months and enjoy the improvements to testing all around. Now I'm stuck on JUnit in most projects :(
I've found that inheritance leads to bad things when there are more than 2 levels of classes. AbstractThing -&gt; Thing1, Thing2 is just DRY. AbstractConcept -&gt; AbstractSlightlyDifferentConcept -&gt; Thing -&gt; AbstractOtherConcept -&gt; AbstractSpecificConcept -&gt; Thing2, Thing3 -&gt; OtherThing is an antipattern IMO.
ok, I'll repost when I open up the code. Thanks for the feedback.
The reason we can't understand it is because you don't specify your objective in a clear and concise way. Saying you don't understand a certain part means nothing. When you ask a question you need to do your best to make the people trying to help feel willing to help.
I'm 27yo junior and work in a company that runs with Oracle SQL, Java7 and Spring. Folks here are really laid back and conservative. If a task can be done with bash, we strive to do it in bash.. The simpler the solution is, the better. There is no pressure etc. I'm not an expert in any of the technologies I use here, and I think that is one of the reasons why I would not move...
It wasn't me who said it: https://www.google.co.uk/webhp#q=4%20pillars%20of%20oop If you want to redefine OOP as not including inheritance, then that's fine by me.... BUT, there is a wealth of information out there and many textbooks that says Inheritance is a fundamental part of it. Its not me you have to convince! I just know that using it makes OO to be less than ideal.....and OO, without inheritance, is, not OO anymore. By Definition. Composition, is not specifically OO. Composition can be used in procedural coding also, and is indeed used every time you add a C Include for example. 
Inheritance can be extremely useful in moderation. Sometimes it's appropriate, sometimes it's not. I think it's generally pretty pointless - counter-productive, even - to try labelling such hugely wide categories as 'antipatterns'. Just know what's good about certain patterns, and know their limitations well enough to understand when their use would be problematic. Strict/stubborn generalisations aren't helpful and often breed compromise in architecture design.
Well important to the dev community. Started thoughtworks, has that tech radar every year -&gt; https://en.wikipedia.org/wiki/Martin_Fowler
*sigh...* As the sidebar and multiple other places state: &gt; Please seek help with Java programming in /r/Javahelp! Please read it's posting rules (sidebar!) before posting there.
Thanks, interestingly we had another discussion about this at work this week. Those against it couldn't give any examples about how it causes any problems and they never tried to deny the benefits that it gives, but they're *adamant* it's pointless. I'm always surprised when intelligent people can't be reasoned with.
If you are looking for help, go to /r/javahelp. Be forewarned, If you want anyone to actually help you, you need to provide *way* more information on exactly what you're trying to accomplish, you need to narrow down the scope of the problem, and you need to show that you've put in a reasonable amount of initial effort.
"Every single dev who tells me the line you do ends up crying in 6 months when they need to add interfaces to 500 files that should have been interfaces in the first place. They THOUGHT that it would be a waste, then they discovered they are human and cannot see the future." If you can't see a need for something right now - don't put it in. Chances are "You Ain't Gonna Need it" (or YAGNI) - Each layer of abstraction has a conceptual cost, a bunch of interfaces that have a 1:1 mapping to implementations doesn't save anyone any time. In IntelliJ "refactor -&gt; extract interface" has the option to have the extracted interface keep the same name and have your implementation be renamed - so you don't have to update it in your 500 other files - they just keep on working. When the time comes that you _need_ another implementation of an interface - refactor the code then - not now.
Or just get a certificate to sign your code... it's not that hard.
Even the 3 mentioned are not fully described - https://docs.oracle.com/javase/specs/jls/se8/html/jls-6.html#jls-6.6
Springboot embeds tomcat/jetty out if the box as FatJar. DropWizard and SparkJava probably do too.
All three major IDEs have GUI Designer support. There is WindowBuilder in Eclipse, a out-of-the-box support in IntelliJ IDEA and NetBeans comes with out of the box support as well. They all generate the code for you. I personally prefer IntelliJ IDEA since it separates generated and your code into separate methods.
W-what are you talking about my mother!