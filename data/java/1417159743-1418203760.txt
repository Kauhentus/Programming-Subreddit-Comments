If you get a [github student account](https://education.github.com/pack) (if you already have an account do it anyway, your current account can be "upgraded") you one of the things is a $100 credit to Digital Ocean. You can spin up a VPS and run whatever you want on it. I'm running a couple with just standard Apache/Mysql/PHP installs for a class I'm taking and my own side project. The downside is you'll have to learn to manage that stuff server side, but the upside is you'll get experience managing that stuff server side. Digital Ocean is really good about tutorials and help as well.
it does help, but it wont turn intellij into eclipse. (i still stick to intellij).
The post has nothing to do with it, the delay is most probably caused by a compiler process start, and incorrect detection of changed files - [both that was fixed in 14.0.2](https://youtrack.jetbrains.com/issue/IDEA-128944), although it will never be as fast as Eclipse, because Eclipse do not compile in an external process.
Try a new EAP, you will see that it is better. http://confluence.jetbrains.com/display/IDEADEV/IDEA+14+EAP
I've considered that earlier, but the top of the page says &gt; Be Careful &gt; It is important to distinguish EAP from traditional pre-release software. Please note that the quality of EAP versions may at times be way below even usual beta standards. so I decided against it. An important part of coding is to have a map in your head of what could possibly be "the issue", and if that landscape suddenly also has hidden volcanoes etc., I would not benefit enough from new features.
You can find showstoppers in normal releases, and you can find them in EAPs. You can always use older version if you find some. EAP is no night build, some new features are used by JetBrains developers moths before releasing in EAP. I personally have been using always the newest EAP for the past year without much problems, sometimes I even build from master when I want something fixed. 
I tried JavaFX Scene Builder 2.0 and it did the exact same thing. Here's a [screenshot](http://imgur.com/rTdRApD) from the program I'm trying to run. Will try JavaFX Window Builder as well. If I resize the window back and forth by dragging the edges, I'll sometime get the correct output. I have to do that every time I want to see some changes. edit: Resizing..
&gt; Eclipse incrementally compiles in the background whenever it sees fit. Intellij does not You can configure IntelliJ to compile on save/autosave - just tick "Make project automatically". 
Add [mechanical sympathy](http://mechanical-sympathy.blogspot.dk/) to the list of blogs and I think we're reading the same ones.
Sounds to me like your key sticking point is psychological rather than technological. Get a mentor, but don't use him/her as a crutch. Take each assignment, complete it diligently, then make a conscious effort to *exceed*. Find something small but related and do it on your own, and make it a part of what you show your mentor. Learning to be self-driven will benefit you more than learning any API.
Yes, you should still have appropriate visibility. Your job is to create a model of a phone bill. You may have public fields like: public final String phoneNumber; and private ones such as: private static final float TARRIF_RATE = 0.035f; and the same for methods: public double getTotalCharge(); private void printOutTotals(); This will work just as well for your current assignment, but if you later need to make, say, a budget simulation assignment, it will have appropriate visibility to reuse for that. 
What kind of webservices are you talking about? What are your requirements? Basically it is a good thing to look at standards like [JSR 339](https://jcp.org/en/jsr/detail?id=339). There is always a reference implementation (in that case [Jersey](https://jersey.java.net)).
Yep. Nothing irritates me more than seeing a class that is 90% immutable but has arbitrary setters in it because someone didn't want to change the constructor signature. The only thing that is on the same level seeing a getter return a mutable object (commonly a collection) and everything mutates that thing. So This herp.getDerp().add(foo);
Spring or JavaEE There is JavaEE, which is the standard, and is still used in many companies. I am sure there are plenty of pros to use javaEE, but personally I don't like it that much because you need boilerplate code and specific JavaEE app containers. (I am sure some javaEE guy will comment here to say that EE is better now and that would be wonderful) Then there is Spring, it is (relatively light), comes with a lot of tools that improve productivity. There are many other tools &amp; frameworks related that you can choose to use, depending on your needs (Spring MVC, Spring Data, Spring Security...) You can deploy a spring app on any webapp container. The main difference I see between Sping and JavaEE is that in EE there is a lot of configuration that is done at the server level. So this configuration is server implementation specific. In Spring, all the configuration is in Spring and you can deploy the same executable on any java webapp container, like Tomcat.
check out amazon ec2 cloud. its free for a year and then fractions of a cent after that. http://aws.amazon.com/ec2 
You don't need to add access modifiers to anything if you don't want to. Many other OO languages like Python don't have access modifiers at all. It is a good practice to add the access modifiers to protect you from yourself. Marking a field as private lets you tell the compiler to mark this field as "mine, hands off" to other classes who might want to use the field. This is important because "shared ownership" is very dangerous. Another class can change values behind your back.
- How many arguments does the [Math.pow](http://docs.oracle.com/javase/6/docs/api/java/lang/Math.html#pow%28double,%20double%29) method require? - How many arguments are you passing to it on line 13? Seriously, there couldn't be a clearer error message than this one. Also, I think this should be in /r/javahelp and have a descriptive title.
&gt; Math.pow(m/i); Math.pow takes *two* arguments. If you wanted m^i then do `Math.pow(m, i);` I hate that schools don't let pupils use IDEs, it would *accelerate* instead of hamper the learning process, contrary to popular beliefs.
oh god thanks, I didn't realize that mistake... 
Your expression `m/i` evaluates to a single double, hence the compile "*found*" one double. Math.pow, however, "*requires*" two arguments separated by a comma. "e value of the first argument raised to the power of the second argument" http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html#pow(double,%20double)
When type the height 1.80 and the weight : 80 it reads the height as 1.8 without the 0... how do i solve it?
If you want to specify how the number print out then use printf/formatter: `System.out.format("Gjatesia juaj ne metra: %04.2f %n", i);` https://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html
You're thinking wrong. There's the data side of things, that's what the computer needs to understand, and there's the user side. When you want to calculate like you do here, you need computer readable information, and you are getting that via nextDouble(). For a floating point double, 1.8 and 1.80 are identical, so it's also the same as 1.80000. That means that the second the data has been swallowed by the computer via nextDouble, the 0 is gone, or a 000, because all that the computer sees is "1.8". On the other side, when you output the computer-readable information for humans, you might want to format text differently. That's what I meant: You contracted all these thoughts into one, you clumped them all together in what you just said. You have the computer-side down, now let's fix the human side: I guess you just want to output your info with 2 decimal places, whether the value is 1 or 1.9 or 1.927. That's a bit tricky, and here's a simple way to do it: import java.math.BigDecimal; public static String getStringFromDouble(final double value, final int digitsAfterComma) { final BigDecimal bd = new BigDecimal(value).setScale(digitsAfterComma, BigDecimal.ROUND_HALF_UP); return bd.toPlainString(); } Just use that between the computer side and the human side, and you'll be good. There are also a few other ways to format a number.
Shkruani programin në Java i cili llogaritë Indeksin e Masës së Trupit (ang. Body Mass Index ‐ BMI). (15%) BMI kalkuohet duke e pjestuar peshën (masën) e trupit në kilogram me me katrorin e gjatësisë në metra: Kërkoni nga shfrytëzuesi të shtypë vlerën e peshës m dhe gjatësisë l dhe duke perdorur formulën BMI=m/l2 kalkuloni dhe afishoni Indeksin e Masës së Trupit. Shembull i rezultatit pas interpretimit (ekzekutimit) të kodi so the teacher wants us to use that formula , we didn't learn what you showed me here yet. 
http://imgur.com/hTY1Sg0 thats how he wants it shown.
Thanks for the hint. I'll try these two subreddits, too. But I was specifically interested in the Java programmers' answer. Nowadays many Java GUI programmers start to replace their Java GUIs by Javascript GUIs, so I hoped to find people who know both worlds.
If you didn't learn about number formatting yet, then you can't format your number and have to accept that "1.8" will be shown as "1.8" instead of "1.80". There's of course an alternative, if you have learned about basic String manipulation and String methods like .indexOf and .substring(). Have you?
If you want it to look closer to that image then change: `System.out.println("Shtypni vleren e gjatesise ne Metra: ");` `System.out.println("Shtypni vleren e peshes ne KG: ")` to use `print` instead of `println` so that the input number is on the same line. and delete ( or comment out) : System.out.println("Gjatesia juaj ne metra: "+ i); System.out.println("Pesha juaj ne kilogram: "+ m); System.out.println(); 
You have to use mutable collections, but who is telling you to directly expose the collection with a getter/setter? Certainly not JPA. The immutability of a class has nothing to do with the mutability of its members.
Thanks for help. I've seen a lot of people giving me tips on how to encrypt passwords etc with hash, but dont worry this system will never actually be in use its just for practice and we were told we dont have to worry about hash, thanks anyway though!
Heh. It is interesting to see this popping up more and more. I will share my story. I only recently started doing full time Java development(last 1.5 years). Before that I was mostly doing C++/C kernel level work. It was a bit of rough transition moving from vim+tmux+gcc+make into a real IDE. At my coworkers suggestion I started with Eclipse, and was instantly frustrated by a million tiny things that just didn't seem to work right/make sense. On top of that the Eclipse vim plugin was(maybe still is?) quite broken. After a month of this, a friend of mine mentioned IntelliJ IDEA after listening to me bitch about having to restart Eclipse for some reason or another. I *loved* IntelliJ, the default configurations are sane, it warns me about things. The keybindings like ctrl/cmd-W are amazing. The auto completion suggestion is really nice, the debugging interface is much simpler, etc. But after about a year, and learning a lot more about Java and the JVM and getting used to navigating Java projects. I really started to feel like starting up tests was becoming my bottle neck. Waiting 3-4 seconds for a 200 ms unit test to run is not ok in my book, and really slows down development. Heaven forbid you have a client server application that requires a server and a few clients to start up(you can only start things sequentially) so it is click run, wait 3 seconds, click run, wait 3 seconds, click run, wait 3 seconds. Not ideal. I tried everything to make it faster. Everything suggested in this thread, and in every article on the Internet. Different JVM settings, "Make automatically on save," compile independent classes in parallel, use the Eclipse compiler, etc, etc. Finally I was working on a Gradle project, and that was the last straw. Gradle project start times were in the 20 seconds. It was insane, and another person working on the same project with me but using Eclipse saw sub-second start times. Naturally this lead me back to... Eclipse. I gave it another shot, and you know what? IntelliJ basically taught me what things make Java easier to write, a lot of those things are in Eclipse, they are just poorly configured by default. For instance on OS X the IntelliJ cmd-W like feature is bound to ctrl-alt-page up, a key that doesn't even exist on a lot of Mac keyboards... And it is one of the most useful methods of selecting grammar elements. TL;DR: Eclipse suffers from massively poor default configurations, but has fast test startup times. IntelliJ has good default configurations, but is very slow to start. One of those can be fixed by myself fairly quickly, the other cannot. It is worth retrying Eclipse and investing in some configuration. This has worked well for me.
A lot of people presume that when Sun specified "beans", they meant getters and setters. Not so. Database locals and remotes (a'la attached JPA entity instance) were beans. Message-driven beans were the async services. We used a gazillion different beans in our systems and they worked perfectly well. When I started working with Spring about 10 years ago, it was a big step back. I was looking for a way to make declaring a transaction on receiving a HTTP-request the default behaviour for my application. No way. I was looking for a way to do some asynchronous crap, which I can't remember why I couldn't do at that point, but I do remember that it seemed ridiculous. No one at Sun ever told anyone to stop producing nice, domain-specific APIs. For some reason people immediately thought as soon as they got their hands on EJB that they need to forget everything they knew about OO. There was no reason not to develop your application as you would have done otherwise, picking the stuff from the container that was actually useful for your project. For a while now, Spring does everything an app-container did back then. In fact, it _is_ an app-container. So, now I hear people whinging that Spring is too complicated. The reason EJB wasn't good enough is not that there was anything wrong with EJB it's that programmers suck at what they do.
&gt;The section does highlight that bean customization is expected to make available a mechanism of serializing beans as source code, via the PropertyEditor.getJavaInitializationString() method. Standard Java object serialization is a mandatory technique, while the source code route is optional. If you haven't done so yet, look up the Javadoc of that method. In today's world it's absolutely hilarious!
Dropwizard, Spring, RestEasy. It's pretty easy in any of them.
My intent was to have somebody that knew what they were doing to give assignments, that is all I really need to get myself going. I wasn't intending to use them as a crutch as you put it, more as a "give me something to do and a date to have it done by" kind of thing and also somebody who could answer questions if I were to get stumped.
&gt; A lot of people presume that when Sun specified "beans", they meant &gt; getters and setters Actually, they did. There are JavaBeans and there are Enterprise JavaBeans. Amusingly, if you go to the Wikipedia page for [EJBs](http://en.wikipedia.org/wiki/Enterprise_JavaBeans), it says "Not to be confused with JavaBeans". That's because they are two entirely different component models with entirely different purposes. JavaBeans are just plain Java classes which implement properties using the simple getter/setter protocol, since Java does not have a specialized syntax for properties. The java.beans package provides some service classes for introspection, property value change management and editing of bean objects. Swing was designed in large part around this model, with the idea that Swing components could easily be edited in a visual builder tool. I still remember designing Swing UIs using JavaBeans that used things like the [L2FProd Property Editor](http://www.l2fprod.com/common/). Your property could be of the java.awt.Color type and BAM! you could edit it with a color picker. This specification was from an very different era, and how JavaBeans were envisioned to be used didn't really pan out. This is what the author is talking about. Enterprise JavaBeans are entirely different. They implement a server-side component model and have nothing to do with the regular JavaBeans that the author is talking about.
I'd like to know. I've switched from Eclipse to NetBeans 8 because the code completion is not as buggy but I want to like Eclipse. On OS X if it makes a difference.
I am in the same boat as you. I have been trying to learn spring using spring boot. I tried 2 years ago to learn spring, but ended up giving up for the same reasons you stated. Mysterious classes implemented, and never used. App refusing to start because I haven't implemented a class that I will never need to use. Spring is supposed to be a framework for enterprise apps. Enterprise apps has a lot of requirements that a simple crud app will never need. If you are just starting to learn web dev, spring adds a lot of complexity you don't need to worry about, and I would recommend a simpler framework before attempting to learn spring. You need to be an intermediate level java programmer and almost an expert level web dev to begin to grok spring easily. If you are a competent java programmer and web dev learning to use spring, I would grab the source code, create some break points, and read through the stack traces to start understanding all of the stuff that spring is doing. This is how I learned spring. It was painful. I read the docs and read stack traces for weeks before being able to make a functioning spring app. I believe this is the only way to learn spring. Once I learned Spring, I can't imagine starting a medium to large sized program without using it. It saves so much time. The DI framework lets you be modular without the pain. Event based programming saves a huge number of lines of code. You can focus on software design first, and plumbing second. 
While it's true that you don't need access modifiers as others have said, this really is the best answer. Get in these good habits early and you'll be ahead of the curve later. 
Did you mean to reply to /u/handjobs_for_crack?
Go take a java use class at a community college.
I maintain a swing app that is both web start and NSIS packaged. If you're looking for a totally stable install agent, NSIS is so glacial in development pace C++ looks fast. If you like coding that looks like assembly macros, NSIS shines. That said, I clearly hate it. 
I wish Java was default immutable and you had to explicitly set mutable. Would make life a lot easier.
The concept of JavaBeans was very confusing to me when I was just starting out in the Java world. I felt like I was missing something. But no, that really was it.
You already seem to know the answer. It's absolutely good practice, but pretty much incidental when you only have the one class anyway. 
You need to be able to follow documentation, or to be able to learn from tutorials. You should be able to jump straight to making Controllers, then when you need to modify some part of the MVC stack, search for it, and learn how to override the default spring boot part. Being able to read instructions and learn how to do something is crucial-- as there's no way you'll ever know how to do everything, but you should always be able to say "I don't now, but I will find out"
That's what I'm trying to do since 1 week. Every tutorial I read, they say : We will create this class (which will never be used) and implement those methods (which we will never call) and don't say why. I like to understand what I do and not just learn it and then forget it 1 week after. (btw, no need to downvote because I'm just saying my opinion and asking for other's ...)
// Handles Jumping if (jumped == true) { speedY += 1; //While the character is in the air, add 1 to his speedY. //NOTE: This will bring the character downwards! if (centerY + speedY &gt;= 382) { centerY = 382; speedY = 0; jumped = false; } } By theory, when jumped=true,every 17ms 1 px will be added to speedY. But, what does the next statement mean? if (centerY + speedY &gt;= 382) { centerY = 382; speedY = 0; jumped = false; } And to jump upwards, should you be removing 1? Therefor the y will be decreasing? 
14 build 139.224, built November 4 so I guess it doesn't have this change. I wonder how quickly it'll be before this makes it into the next release -- or is it in the EAP now?
the `speedY += 1;` simulates acceleration from gravity. as /u/tr1bune suggested, [+ Y is downwards](http://www.kilobolt.com/uploads/1/2/5/7/12571940/7304906_orig.jpg) &gt; `centerY + speedY &gt;= 382` checks to see if the next motion would move it below the bottom edge. &gt;`centerY = 382;` &gt;`speedY = 0;` &gt;`jumped = false;` if we've hit the bottom then move our character to the bottom edge, set the y speed to 0 so it'll stop moving, and set jumped to false, to indicate that the "landing" portion of the jump is completed.
Yeah I see what you mean, maybe I'm trying to understand too much. I'll just do as they say and if I have to change something in it, then I'll focus on it.
To jump, you could set speedY to -10 or something like that. This would give a strong speed upwards that would decrease, become zero, and increase downwards until the avatar hits the ground.
&gt; The reason EJB wasn't good enough is not that there was anything wrong with EJB So you mean that implementations not actually formally implementing the interfaces they "implement" is not wrong?
https://www.owasp.org/index.php/Authentication_Cheat_Sheet http://shiro.apache.org/ http://en.wikipedia.org/wiki/Java_Authentication_and_Authorization_Service 
&gt; Flyway is much lighter weight. Flyway uses plain SQL commands (possibly db vendor specific) rather than XML files. Liquibase has a bunch of input options; json, yaml, SQL, or XML. What's nicer about liquibase when your not using the SQL option is that you effectively have an agnostic database layer. Also, the database refactoring can be handy and optimized for each database.
You could use a panel with something like GridLayout or BoxLayout, add the JLabel's to that and then add that panel to your main panel.
I think this is what I am missing and need to do thanks.
[Here](http://www.reddit.com/r/javahelp/comments/2n2bio/how_to_terminate_an_object/cm9sq8d)'s a short example where I wrote my own timer instead of using an existing one. It uses a constant interval, but it would be easy to change that to an alternating interval, either using one value, then the other, then again the first value ... or even iterating over a list of values, looping or just once.
I didn't look at the implementation, but I'd customize a JTree for the selector on the left, and use a JPanel on the right to display the selected UI. I imagine a composition like that would be an easier way to go than customising JTabbedPane.
Agreed; though this was a shorter path in some ways. If this works fine, we will keep the implementation or else, change it to use a completely custom component. One shortcoming in JTabbedPane is that the tab-bar is not resizable (manually or programmatically). That by itself might be one good reason to change the implementation.
Please make sure that each line of code has at least 4 spaces at its beginning (and an empty line before all the code) so that it's formatted properly by Reddit.
fixed 
Don't solve problems you don't have. Then again, don't be afraid to restructure aggressively. It's almost guaranteed that you don't know right now how you're going to need this logic to be structured if you ever so. Write some tests and move on to your next task. 
Probably ought to post this in /r/javahelp instead of here. That said I find it hard to believe you've no idea about any of visibility, static/instance, return type, and abstract methods if you've been coding for a few months, or that you were unable to find anything through Googling your questions. I'd suggest to visit http://docs.oracle.com/javase/tutorial/ and go over the language's fundamentals again.
These are all very different things. https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html re: public, private, protected, etc. Static means it can only be instantiated once (other languages call this "belonging to a class" rather than "belonging to an instance of a class"). Abstract means it is uninstantiatable except via super/subclassing of a concrete type/method. void identifies something uninstantiatable, Void is the type reference for void The lexicon doesn't really tell you much, though, unless you have some examples handy which you can reference and tinker with. If I can give a small bit of advice: if you're dusty on what public/static/void are then you should probably not worry about abstract yet as it is a higher level concept more related to object-oriented programming as a whole.
Like I understood why the tutorials and why I was using them I just didn't know what each meant. If that makes sense.
&gt;But JavaBeans still have nothing to do with Enterprise JavaBeans. Indeed, and my comment was not about that part of your comment ;) That said, while in practice they have nothing to do with each other and are completely different things, the actual intended purpose of JavaBeans as detailed in the spec and explained by that jodatime guy, has some scary similarities. Both shared the idea of a component model, where a "living" bean with all kinds of abstractions and mappings could be integrated with visual builder tools into an application, and where those beans could be separately bought from a bean store. For both JavaBeans and EJB this never happened. The fantasized "tax calculator bean" that you would supposedly buy and then integrate as a lego piece into your app remains a pipe dream. There's another sad remnant of this in the specs btw. The Java EE spec to this day talks about a "bean provider" role, and an "application assembler" role, which was supposed to just combine beans into an application without really writing code (only wring mappings in deployment descriptors).
* `public` everybody has access to this field, method, class. Highest visibility * `static` a shared method or field among a class * `void` return of no type * `abstract` you can not instantiate this class. Its meant to be extended from to deliver same behavior and functionality
See from following tutorials and programming some stuff myself I figured that out I just wanted to confirm it. I know I could've googled it but most of the stuff I've googled for Java or Java Game Development or something along those lines it's been outdated.
No, that doesn't make any sense; you either understand the tutorials and why you were using those terms, in which case you would know what each term meant, or you don't have an understanding in which case you have to ask questions like the one in your opening post.
I don't think I've ever seen a commercial for a programming language. I feel a little vulnerable and exploited right now.
This isn't the correct sub for this question. This one is about writing software in Java and related frameworks, not debugging problems related to random .jar files.
ok, sorry i guess. I deleted my post because I found you had to write file before the domain
For new projects, I won't use Swing. For example, a [project](https://github.com/hrj/abandon) which I began developing last year (even before Java 8 was released) uses JavaFX. However, JavaFX is not fully mature yet (see the other thread yesterday about MacOSX issues) and its widgets are not complete either. The tab component in JavaFX has even less functionality than Swing's JTabbedPane, although they are working on improvements in Java 9. Hence, migrating existing Swing based code to JavaFX is not optimal IMO.
No denying - pretty cool commercial! 
Do you understand Dependency Injection and Inversion of Control? I'm not trying to be condescending, but a lot of Springs functionality comes from implementing/extending an interface/abstract class in the IoC container and letting Spring do the rest. If you are at all shaky on DI and IoC you are going to have a hard time doing anything more than simple Spring apps. Read and understand this [page](http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/beans.html), then read it again :) I also would not start with Spring boot when learning. Spring boot is something to use once you know Spring and do not want to deal with much configuration to get going. With that said, Spring Security can be one of the more complex parts of Spring. It gives the user ton of power with pre/auth filter chains, but can be a lot to understand.
I feel like a language cannot sink lower than having to make a commercial-type video. Any developer would digest all of that much better and much faster with a 1-2 screens of bullet points or paragraphs. This shit only appeals to mid-level managers who've never coded in their lives. 
If you're thinking of the parkourish stuff, you should consider checking out Titanfall. 
Yeah. A pretty looking commercial, but definitely a mild turn-off.
Project seems pretty.... unstable still. It doesn't feel like it has a clear purpose in mind....the first paragraph talks about hooking up with Soundcloud, Vimeo, Grooveshark, etc, but the dependencies and source code don't seem to actually do that. Also, the code itself seems questionable. It's generally rough to read, no comments, no sign of testing. No pull requests, only 1 contributer, only 1 branch. Seems like there's a lot of potential for bugs and crashes. Having said that, it's an interesting idea. Some friends and I are working on something similar, so it's neat to see how other people are thinking about the problem. 
 public static void main(String[] args) { Scanner user_input; user_input = new Scanner (System.in); System.out.print("Enter Your Number:"); int number = user_input.nextInt(); ; got it thanks, had to make a couple other corrections
SoundCloud support was removed 3 commits ago so it could be redone properly as SoundCloud updated stuff on their site and redoing that + restructuring the server classes would have taken to long. And while not everything is commented, things are and more will come as the rest of the code rewrites get laid out. As for no sign of testing, its on build version 2.8, it has continuous bug fixes and clear git logs to show for it. Bugs are always potential is new software, but most that have been found have been squashed and there has never been a single crash. Having said that, its just me making it, that is why I posted it, the more people willing to commit the better. I don't need more than one branch if the only time I push is when development is done locally. 
Try to use a switch instead of the "million" else-ifs! :)
Another thought is to get rid of your if-then-else chain: String[] numberWords = { "ZERO","ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", "NINE"}; Then later on in your code: int number = user_input.nextInt(); if (number &gt;= 0 &amp;&amp; number &lt; 10) { System.out.println(numberWords[number]); }
I stumbled upon this application a while ago, perhaps again from reddit (can't remember now). Funny thing - I have then downloaded a version that tells 2.5, but the actual release from the site is 2.1.6 :) I like it although there is a lot to be improved. A build system would be great with java 8 and javaFX and maven you get installers for different platforms for free.
I'd like to emphasize finalize, it's something really scary to overrode and really hurts the garbage collector. For example, what if your "deallocation" process actually requires you to allocate a byte of data? Now you have an object in the eden space being referenced by an object that has been marked as unreachable/dead. Technically, that new byte should also be dead but is not because your object is still kind of alive and needs that new byte. Furthermore, one benefit that a GC can provide over a traditional explicit allocator/deallocation process is memory placement. Each time the garbage collector is run, it can reorganize the memory in a way such that fragmentation is minimized and temporal and spacial locality is exploited. This really gets more into runtime optimizations instead of garbage collecting though so I'm not sure if this is entirely relevant. Nice writeup. I skipped the diagnosis section since it's getting late but overall it's decent.
i know there are better ways out there, this is just an if else assignment i was given and i have to use this method. thanks a lot though guys
also just compiled it with netbeans successfully and ran it in cmd console lol. maybe i have to use the jar command? it doesnt make sense because we've been working with javac this entire semester, this is actually my first time hearing of the jar command
This post is better posted in /r/Javahelp because /r/Java is for: &gt;**News, Technical discussions, research papers and assorted things of interest related to the Java programming language** as is clearly stated in the **sidebar** where you would also find: &gt;**Please seek help with Java programming in /r/Javahelp!** **Also:** be sure to read the [Posting Guidelines](http://www.reddit.com/r/javahelp/wiki/posting_guides) on /r/Javahelp before you post. And format your code properly.
Probably a classpath issue.
Nailgun is scala, not java.
Lol, as i was typing the code filename and command i realized it was a classpath issue. I had used the same class name and changed the titles. Thanks
https://www.google.com/search?q=java+jtoolbar Though instead of JToolBar, which is quite optimal for this purpose (though you might have to deactivate the other buttons whenever one is clicked - I'm not sure), you could also use a group of [JRadioButtons](https://docs.oracle.com/javase/7/docs/api/javax/swing/JRadioButton.html).
...what does this have to do with Java? You posted another javascript link on here the other day, you are aware that Java and javascript are two different languages, right?
Ah true. It does do java too though right? Wonder if that would help OP
uhhmm.. ok
This post is better posted in /r/Javahelp because /r/Java is for: &gt;**News, Technical discussions, research papers and assorted things of interest related to the Java programming language** as is clearly stated in the **sidebar** where you would also find: &gt;**Please seek help with Java programming in /r/Javahelp!** **Also:** be sure to read the [Posting Guidelines](http://www.reddit.com/r/javahelp/wiki/posting_guides) on /r/Javahelp before you post.
2014...please kill struts already
Enterprise applications, esp web services, generally have demanding performance and stability requirements. Tuning the GC for milliseconds of less time, especially in the stop-the-world GC can be very important.
People do write systems that require low latency in Java. I know of one very important trading system for example.
I haven't run across a real-world example of finalize() being used in a good way. If anyone has any code, or an anecdote, I'd be curious.
As listed in the **sidebar**, this subreddit is for: &gt;**News, Technical discussions, research papers and assorted things of interest related to the Java programming language** **Java** and **JavaScript** have as much in common as **car** and **carpet**. Please refrain from further posting your **JavaScript** stuff here as you are clearly in the wrong subreddit.
Even the user is deleted... Means most likely that they have been banned already somewhere and start over again... Can't cure ignorance.
Bullet points?! I would honestly prefer Celine Dion singing about Java 8 over bullet points.
Here's my guide: if an an employer asks a long set of questions like this, work somewhere else. They've probably hired a bunch of programmers that have good memorization skills without testing to see if they can actually write code.
Totally agree with this, and I wrote the article :). Big question lists like this are a terrible way of finding good candidates, but alas whilst people will keep asking them I may as well provide the answers.
No mention of Weak and Soft References?
Caveat: It's a beginners guide. In the next round I'll do weak/soft, diving into the algorithms... anything else people think is missing? 
&gt; You can configure IntelliJ to compile on save/autosave - just tick "Make project automatically I would be very surprised if IntelliJ doesn't also use incremental compilation - and if it is using the Eclipse compiler, I would be surprised if there were any difference at all, except perhaps in reuse of process and/or state in the compiler - is that what you mean?
The rise of press releases presented as interviews.
Low latency web services - GC pauses can really bite you in the ass when you have to uphold a certain SLA for performance
30 GB heap? Jesus man 
It's similar but not exactly the same. Read http://help.eclipse.org/luna/index.jsp?topic=%2Forg.eclipse.platform.doc.isv%2Fguide%2FresAdv_builders.htm &gt;An incremental project builder is an object that manipulates the resources in a project in a particular way. Incremental project builders are often used to apply a transformation on a resource to produce a resource or artifact of another kind. Resources created by a builder are typically marked as derived resources. &gt;Plug-ins contribute incremental project builders to the platform in order to implement specialized resource transformations. For example, the Java development tools (JDT)define an incremental project builder that compiles a Java source file into a class file any time a file is added or modified in a Java project. It also keeps track of dependent files and recompiles them when necessary. &gt;From an API point of view, the platform defines two basic types of builds: &gt;A full build performs a build from scratch. It treats all resources in a project as if they have never been seen by the builder. &gt;An incremental build uses a "last build state," maintained internally by the builder, to do an optimized build based on the changes in the project since the last build. Incremental builds are seeded with a resource change delta. The delta reflects the net effect of all resource changes since the builder last built the project. This delta is similar to the one used inside resource change events. &gt;Projects can be periodically cleaned by the user in order to force a rebuild of a complete project the next time an incremental build is performed on that project. Cleaning a project removes build information such as problem markers and class files. &gt;Projects support multiple build configurations which allow Incremental Project Builders to build a project in more than one way while providing a resource delta for each build configuration. &gt;Builders are best understood by example. The JDT Java compiler is driven by a Java incremental project builder which recompiles the files in a project that are affected by changes. When a full build is triggered, (or an incremental build after a clean), all of the .java files in the project are compiled. Any compile problems encountered are added as problem markers on the affected .java files. When an incremental build is triggered, the builder selectively recompiles the added, changed, or otherwise affected .java files that are described in the resource delta and updates the problem markers as necessary. Any .class files or markers that are no longer appropriate are removed. &gt;Incremental building has obvious performance benefits for projects with hundreds or thousands of resources, most of which are unchanging at any given point in time. &gt;The technical challenge for incremental building is to determine exactly what needs to be rebuilt. For example, the internal state maintained by the Java builder includes things like a dependency graph and a list of compilation problems reported. This information is used during an incremental build to identify which classes need to be recompiled in response to a change in a Java resource. &gt;Although the basic structure for building is defined in the platform, the real work is done in the builder code. Patterns for implementing complex incremental builders are beyond the scope of this discussion, since the implementation is dependent on the specific builder design.
Cool, thanks for the response! I'll have to look into JavaFX :)
I bid $1 Bob
What is the correct anwser? It chose xkcd.
The issues I've primarily seen are running server applications with under sized heaps given the load/allocation rate. You end up with a situation where young gcs happen too frequently causing objects that should be short lived to get promoted into the tenured gen. As such this results in the tenured generation filling up and causing expensive tenured collections to occur. So, generally I start with making sure the max heap is appropriate (keeping in mind the actual amount of physical memory on the server and other applications running). Then from there, if the tenured gen has more than enough memory given the long lived objects in the application, start to increase the size of the young generation (Xmn or NewRatio arguments) so that young gcs start to occur less frequently and premature promotion to the tenured gen is less likely to happen. 
VisualGC is a nice plugin for VisualVM to better understand how garbage collection works with a generational heap. Maybe next guide you could show that. 
Could you be kind enough to give me the tl;dr of spring boot?
For objects that have a dispose() or similar method that should be called when the item is no longer used so it can free resources. Putting an "assert !disposed;" in finalize() can help during development to indicate if dispose() was not called before GC.
a good beginner article, but the fucking popups are annoying as hell.
There is one pretty good book that was published but I think the very smartest thing to do is start with the free [Spring Reference](http://docs.spring.io/spring/docs/current/spring-framework-reference/pdf/spring-framework-reference.pdf) There is a large section here about Spring MVC. 
Even when you use a getter to modify the object state, e.g. by adding something to the collection?
Yes, definitely. Gives me some extra advantage: I can do **validation**, maybe **sanitation** and again hide the internal details. The internal representation of the data (whatever that may be) should completely be hidden from the outside. (At least IMHO). 
&gt; Now we call System.gc() periodically at night to eliminiate the possibility. ಠ_ಠ This is probably not doing what you want...
This is not entierly true of the CMS collector. It does not defrag on young gen or concurrent GCs. This is why you are likely to eventually have an allocation failure and will then require a full stop the world GC where a compaction will happen.
You mostly seem to be thinking along the lines that GCs are milliseconds. They are very frequently in the order of second and in extream cases minutes or even hours. Many people will find their websites being unresponsive for more than a few seconds unacceptable. And I think most people will view min/hours as totally unacceptable.
I don't like either. I prefer: cart.addProduct(myProduct); As far as the getter implementation, I generally prefer something like: public List&lt;Product&gt; getProducts() { return Collections.unmodifiableList(this.products); } 
I've seen it used by code generators like SWIG to wrap a C/C++ object controlled via JNI so that they can be disposed of properly once the object is really gone. Seemed clean enough to me. 
"Security is a great benefit of the JVM." Yeah, well, in an ideal world.
I understand, but that can be avoided by testing and deploying often, hopefully continually (several times per day). Understand when the magic breaks and revert quick and fix. It can work in a production application as long as you stick to it and are disciplined. 
A trading system in Java? Wow, that's bold.
Wow thank you!!!!
There is a simple way to test the author's hypothesis. Cross-post this piece to /r/programming. The controversy this piece will cause there will stress the Reddit servers, which as we know are not running Java. If we get the "Ow!" page, the article has merit. If Reddit keeps chugging along, we'll have to rethink this.
Nice article. I might steal the idea with Java shell scripts, although Groovy exists.
do not do the second one. products would have to be public. 
This gels very well with my own experience and my aims with the DBvolution project.
Does net friendly mean a web service? In Java that'd be either SOAP (JAX-WS) or REST (JAX-RS). REST is more popular/trendy but while it seems easy at first it takes a lot understanding to make a well designed RESTful web service. If the employer wants to see if you have a clue about either JAX-WS or JAX-RS you can start with http://docs.oracle.com/javaee/7/tutorial/doc/home.htm but if you expect to be able to impress them with your mastery of RESTful web service design I'd think again which is why I mentioned the possibility of using a technology you are already familiar with. All depends on if they want to see if you have an idea about the tech or if they want API design to be the focus.
Twitter is commonly used for "Java is fast" arguments. The twitter example proves the JVM is fast, from what I understand they mostly write in Scala.
"Schemas need to be generated frequently" - In what universe? Seriously, the only use case I've ever had for this is integration testing my ORM (DBvolution) across 7 different DB engines, and I hardly call that normal behaviour.
in pseudo code... if input != what I want it to equal output try again user, I am looking for this 1,2, or 3 input again please user
You're going to want to use if or case statements to check user input no matter what. Depending on the complexity of the input you are expecting you might look into regex. If user input will end up in SQL then you'll need to escape the input.
Plural sight.com has a good course on it.
thank you
Ask your question and then you can be pointed in the right direction...right now no one has a clue what you need help with other than it being your last HW 
SpringByExample
Not that, but thanks for the link! I was looking for http://dropwizard.io/
Thanks for the detailed reply! I was actually looking for http://dropwizard.io/
I suppose you could use a customized @Version column
http://www.reddit.com/r/programming/comments/2nvybk/java_for_everything/ Cross-post confirmed. Servers still alive. So far it seems like programming with other stuff is working out.
No way to dummy-proof an input! That's one of the axioms of programming 
Our input routines are certified _dummy-resistant™_ !
You can set up a second data store for the lock - you need three pieces of data, a unique order ID, a timestamp for when the lock was acquired, and a unique ID fore whatever component is working on the order. Then other components can check the table and see if they either own the lock or if it has expired.
The author spends a lot of time explaining the advantages of java over dynamic languages like python and javascript, and I buy a lot of his arguments. However, he does a terrible job doing the same for other compiled languages like C and C++. He spends a single sentence in which all he does is write them off as "not applicable to my work." He gives little to no explanation for this casual dismissal. Personally, I don't think that half (using that term in a loose sense because there's really only one paragraph in the entire article discussing other compiled languages) of his argument has much weight to it. He managed to argue fairly successfully against dynamic languages but when it comes to other compiled languages he just tells the reader to ignore the rest of those other compiled languages basically because they aren't Java.
This post is better posted in /r/Javahelp because /r/Java is for: &gt;**News, Technical discussions, research papers and assorted things of interest related to the Java programming language** as is clearly stated in the **sidebar** where you would also find: &gt;**Please seek help with Java programming in /r/Javahelp!** **Also:** be sure to read the [Posting Guidelines](http://www.reddit.com/r/javahelp/wiki/posting_guides) on /r/Javahelp before you post.
I'm gonna guess that the biggest reason is he knows Java the best and would have to learn C++/C/C# ecosystems
Yep. Hence rule#1 in regards to any data input, be it by user, file, or network: Sanitize your input!
There is a lecture out there by Robert Martin on [The Last Programming Language](https://skillsmatter.com/skillscasts/2323-bobs-last-language). It's kind of old, but he makes some interesting points. You might find it interesting because he talks about paradigms more instead of static vs dynamic. In fact, he doesn't see the type system as that much of an issue because of unit testing. I don't really buy it. I buy the idea of simplifying a project by not bringing in unnecessary technologies and languages. However, I don't really see the bazaar of programming languages as all bad. 
So simple, so great. Reading code is hard, however you try to make it better. Something like this helps a bunch. Unfortunately, it doesn't work for me. The plugin installs OK, but the lines don't show up. Latest Eclipse (Luna).
&gt; you've also not been using IntelliJ, because it would have told you. ...or NetBeans.
or Eclipse, i can confirm. Maybe the author was using notepad++
Or jDeveloper. I know I am, unfortunately..
Errr.... for existing JS library, I guess you can include it as webjar in Gradle dependency. 
Groovy is 10-20 times slower than Java. http://java.dzone.com/articles/groovy-20-performance-compared 
It might be one example, but just about everything from micro-benchmarks to full system case studies always show that Java is fast. It's not in any way a controversial assertion these days.
Or vi, as he explicitly says in the article..
Xkcd. No limk necessary
And your point is ...?
What are you interested in? A buddy of mine wrote an app that pulled cricket scores from different feeds and let you play around with different kind of statistics. If you need ideas, try implementing the [case study](https://docs.oracle.com/javaee/7/tutorial/doc/dukes-bookstore.htm) in the Java EE 7 tutorial. You could also try implementing the PetClinic, which is the most common demo app out there.
Agreed not disputing Java is fast. But twitter converted from Ruby to Scala which means they didn't give up all of the nice features Ruby has since Scala also has some of them. Makes it a weaker argument to support go from dynamic to Java.
Probably not.
This (and all the similar options showing up recently) seems like a huge step back from stuff like git and svn. It is already hard enough to "load" a complicated project into your head to fully understand the changes you are making. Having to deal with other devs making changes in real time would drive me bat shit insane.
I could see it being useful for those who want to pair program, but have to do it remotely (such as someone working from home).
This will probably work best when the two collaborators are in sync through some other channel (either in the same room, or in an audio conference, etc) and for brief / dedicated collaboration.
You shouldn't be using the getter to modify the object state. [Tell, don't ask](http://martinfowler.com/bliki/TellDontAsk.html): let your object that has the list know how to properly manage that list, rather than making it just a dumb "holder" of the list and forcing everything else to be careful to play nicely with it. Your cart should know how to `addItem(Product p)`, `removeItem(Product p)`, `emptyCart()`. The extra nice bit about this is that now your code reads like sentences about the actual problem domain, rather than about data manipulation: `cart.addItem(p);` vs `cart.getProducts().add(p);` Besides, what if later you find out that you need to have your items in a `Map&lt;UPCCode, Product&gt;`, so that when a user hits "add to cart" on the same item twice, they have one entry with a quantity of 2, instead of two entries with a quantity of 1? Now you have to go back through and change all your `cart.getProducts().add(p)` to if-statements that check if `cart.getProducts().get(p.getUPCCode())` exists and if so update its quantity but if not...and so on instead of just having one nice method that knows how to update the list of products accordingly? You *can* use the getter to know what's in the list, but for that it's sufficient to hand back a separate list of "here are all the items" so that the original list doesn't get mangled. This is known as a "[Defensive Copy](http://www.javapractices.com/topic/TopicAction.do?Id=15)", because it uses a copy of the list to defend against unexpected changes to the original list. Something like this: public List&lt;Product&gt; getProducts(){ return Collections.unmodifiableList(this.products); } This ensures that someone outside knows what products are in the cart, but can't sidestep any validation checks for adding items or do weird things to the original list that will break anyone else looking at it.
Hits
&gt; Context: &gt; &gt; It really sucks when you have to add type declarations for blindingly obvious things, e.g. Foo x = new Foo(). – @pazsxn &gt; Claim: &gt; No, actually, typing Foo one extra time does not “really suck”. It’s three letters. The burden is massively overstated because the work is mindless, but it’s really pretty trivial. It's trivial when Foo is Foo. It's not trivial when Foo is a WebServiceRequestProcessorFactoryConfiguratorInstance or some other idiomatic Java abomination, and yes, it really does suck. 
Once you’ve risen above the level of “I write all my code in notepad” you will realize that your IDE can auto-complete that name from (probably) the first keystroke.
This is not gold but adamantium. Is there a page to donate some cash to show approval ? 
Thanks for your reply. That was insightful. I do like economics, and well, this sounds like more than enough. I could aggregate many informations about this from many sources, from quotes to keyword news from RSS, etc. I'm sure there is something similar to it though.
I wanted to stand up and cheer when I read this. Totally right. Java for everything--damn straight.
&gt; But also writing and maintaining unit tests takes time. Most importantly, the kinds of bugs that people introduce most often aren’t the kind of bugs that unit tests catch. With few exceptions (such as parsers), unit tests are a waste of time. To quote a friend of mine, “They’re a tedious, error-prone way of trying to recapture the lost value of static type annotations, but in a bumbling way in a separate place from the code itself.” ... wut? Anyone that thinks unit tests are a waste of time has not been disciplined enough to use them consistently. And what does static or dynamic typing have to do with unit tests?
worked with this tool about 30h and it was very nice together with skype, we've done pair programming and it was very helpful P.S. it's from the local university here, I live in Berlin.
If you are using any kind of decent IDE, you won't even have to type most of that thanks to auto complete. All arguments against static languages always seem to boil down to either: "I have to type more" or "I have to wait for the code to compile" neither of which is really true when using a proper IDE. Even when you are working with an application server the incremental compiler + hot deploy will make seeing your changes in action mostly instantaneous.
OK, what should I use? :)
I'm writing an IRC client to learn Haskell, which has been done to death. It's what you learn that's important, and if you can actually create a product out of it, so much the better.
&gt; The advantages of C and C++ (slight performance gains, embeddability, graphics libraries) don’t apply to my work. As a comment above states (and he says many times in the article), he knows Java. The potential advantages of C++ don't buy him much (features not relevant to his problem domain), and don't overcome his familiarity advantage with Java. If you're proficient in C++, you probably want to do everything in C++. Then again, C++ plays with other languages more easily than Java via libraries, and is "harder" for your library-users to implement correctly. Sure, you can write trash java, but it'll probably GC and NPE along rather than coring. Depending on your environment and program, this could be okay. Exposing your C++ lib to other languages with SWIG isn't that hard, and makes it easy to extend your language availability. Like all language flamewars, there's no *correct* answer. There's just some spectrum of what's most appropriate based on your library dependencies, team proficiency, target library users, performance requirements, development time constraints, etc etc etc &amp;c &amp;c &amp;c... There Is More Than One Way To Do It
From a quick Google search: http://java.dzone.com/articles/top-21-java-based-content this site might be your best bet.
If you don't mind the learning curve you could use Hippo cms. It is less of-the-shelf than WordPress or Drupal.
*Tests* are not a waste of time. I often find myself looking at unit tests and wondering: "Are these actually testing anything useful?" The process of writing them seems to be fraught with pitfalls. Testing things that are only going to make refactoring more painful, rather than safer. I find testing and coverage a balance that is incredibly difficult to get right.
Minecraft is written in java yes, android apps are also written in java.
At the risk of me-tooing the post, this is something I've been looking for for a long time. Alfresco CE is probably the closest thing to what you're looking for. I had some success with MeshCMS a few years ago (deployment is dreamy!) but the project appears to have stalled.
Minecraft , Android and BlackBerrys, Java Card (SIM cards), RuneScape, bits of Twitter, lots of back end server stuff in places like telecoms and finance.
You did say Installer. That is, you want to create an installer, not just an EXE. You want the EXE installed onto the system, and the ability to remove it in a clean way. I'm sure you can find a free way, but the way I do it in my job is using Advanced Installer. We buy a license from: http://www.advancedinstaller.com/ I package a Tomcat application server using Advanced Installer. Totally turn key. I can build either an MSI or a SETUP.EXE. To the user the process is: * Luanch SETUP.EXE * Next * [x] I Agree * Next * Next * (wait . . .) * Finish Then the server is installed, and running, no reboot required. If the user did not already have JRE installed, then the SETUP.EXE is capable of diverting to that procedure first. I developed my application with the following feature: To configure the application connection to a database, use a web browser to access a built in web-based control panel, enter your activation code, database connection information, etc, then the application creates the database tables, and the login screen appears. Congratulations, the application server is up and running. 
Almost everything Google does is Java on the server side.
I have used this in a production setting where I had to do some pair programming with a coworker from a different location. There were some quirks (but surprisingly few) which had painless workarounds, other than that a complete joy to work with and well worth the initial time investment to install and get acquainted with. I would use it in similar scenarios again anytime.
I'm not trying to start a language flamewar. Quite the opposite in fact. I believe that different languages have different advantages/disadvantages, and some are thus more suited to certain problem spaces than others. This is directly counter to the article author's &gt; Java for **Everything** (emphasis added) mentality. That's all I was arguing against. I completely agree with you when you say &gt;There Is More Than One Way To Do It. In the article I really didn't like how casually the author dismissed every statically typed, compiled language that isn't Java in existence. He listed some advantages of C and C++ as you point out but he doesn't explain any disadvantages other than a vague statement that the advantages, "don't apply to my work," which isn't actually a disadvantage anyways, strictly speaking. He doesn't even bother to explain why they don't apply. There's a similar story with the other languages in this category that he mentions. Compare the maybe 100 words he spends discussing compiled languages to the likely several thousand explaining why Java is superior to dynamic languages, and I get the feeling that he either isn't very familiar with the other compiled languages and thus didn't give them fair thought and consideration, or he purposefully ignored and glossed over them because that was more convenient to his argument. Either way, I really dislike that about the article, and I think that the sentiment that Java should be used in all cases is absolutely ridiculous. Java is a very good language for many problem domains, but there are others where it is less than fantastic.
I wish there was an Intellij version of this one. (Is there one?)
I really, really hope that if it isn't, it's at least in the development pipeline.
It sounds to me like /u/-H__H-'s suggestion is more in line with what I need to do: Abstract the locking away from the RDBMS's concept of locking, and write a locking mechanism in my data access layer instead. However, checking for locks before any CRUD operation on a certain subset of Entities in my domain model seems like largely a cross-cutting concern. I'd like to avoid such boilerplate code in my data access layer. Any suggestions? I've seen this "document locking" concept in document management systems before. Maybe I will check out an open source one and see how they do it.
I think he is trying to say that dynamically typed languages require more unit testing because you have no compile time checking like in statically typed languages. Poorly worded is all.
Additional questions here: https://www.reddit.com/r/java/comments/2nwo02/entity_locking_in_spring_perhaps/cmi27so
Anyone that thinks you should pick one language for everything is crazy. There are advantages and disadvantages of every framework/library/programming language. No reason to limit yourself for no reason....
The list time I tried using this (which, admittedly, was about a year ago), the performance was *awful* for even moderately sized code bases or moderately high-latency connections (e.g. when you're using a corporate XMPP server over VPN, which pretty much ruled out the "pair programming when working from home" use case for my team). Anyone have more recent experience with it?
If you're using [Hibernate](https://docs.jboss.org/hibernate/entitymanager/3.5/reference/en/html/configuration.html), you can implement an [interceptor](https://docs.jboss.org/hibernate/orm/3.5/api/org/hibernate/Interceptor.html). That way, you can isolate and encapsulate the cross-cutting concern.
~~The UI~~ Part of the UI of [Bitwig Studio](http://www.bitwig.com/en/bitwig-studio/overview.html) is written in Java. As for the web: large parts of Amazon, Google+ and eBay.
Well... Good point.
Look at the back of just about any DVD or Blu-ray player and you will see "powered by Java" 
Google Inbox (inbox.google.com) is made using Google Web Toolkit. 
I thought they consistently wrapped C++ with Python for clean code that shits on Java in terms of performance. They don't use Java as far as I've heard.
Android is a Linux kernel written in C with a java api for client apps. Android isn't written in Java. Plus the JVM isn't written in Java
The Android Open Source Project is a pretty big one. Edit: Android apps are written in Java, and a fair amount of the OS is also, but it is based on the Linux kernel, which was written in C.
Cool! :) So, as always, i'd recommend the Spring Boot documentation and the guides (spring.io/guides) since they do show things using Spring Boot. If you _really_ want a book, my colleague Greg Turnquist (also from the Spring team) just released "Learning Spring Boot" from PACKT that looks pretty good... Toshiaki Maki (@Making on Twitter) (in Japan) also just released a Japanese-language book on Spring Boot book. (Edit: I should also say that Toshiaki's book is probably amazing, but as it's in Japanese, I don't know for sure.. his English posts are always top notch!) I know there are more books coming, so stay tuned!
Oh interesting. This is a new project, so which frameworks to use is pretty flexible right now. Thanks!
I am in the same situation as you. I started learning spring 1 month ago (with spring boot). I have read a couple of tutorials and also some parts of the documentation. What I have focused on : * Spring MVC Rest (for @Controller and @RestController). * Spring Data (JPA, Mongo, Neo4J). * Spring Rest HATEOAS. (Not always useful but nice to learn) With this, I could create a Rest API for a CRUD type app with some more business logic (I wanted to build something like a social network, that's why I learned to use a graph db with Spring Data Neo4J). For this part it was really nice, easy, very good documentation/examples/tutorials. And when I saw all the libraries and guides that Spring offers, I thought : " This is it, I just found the best framework and tools to work with, I can do EVERYTHING ". I was so happy that I found this and gained a lot of confidence and continued to build my "social network project". But then, I wanted to implement security (roles and OAuth), and this is when it broke my momentum and my happiness. This is where I saw the evil part of Spring (oh please... don't downvote me for this, I'm not the only one thinking like this... I have the right to say it out loud...). What I found out to be really confusing : There's tons of mysterious classes that you have to implement, with some mysterious methods receiving mysterious parameters and returning mysterious objects and you don't even know who call them or use them. I tried, tried and tried, each tutorial was giving different implementation, no consistency, and I couldn't understand the logic behind so I couldn't implement it my way (following spring security's way...). It was like natural for them to do it, but most of them don't explain WHY those mysterious classes are here, why am I coding something that I will never use and don't even know who will use them. It took me more than 1 week of trial/error and reading, and I am still confused. I know 1 week is nothing, but I think that if I can't at least understand something in 1 week of effort, then it is not worth it. Maybe if I would have implemented it by myself it would have been faster... After trying and tweaking lot of things, I also found out that the Spring boot autoconfiguration is nice, but when you break something, good luck.... After thinking a lot, I told my self : Why bother learning a framework that needs a framework to configure it. This is just the begining and I will personally not go farther and prefer to learn something else. Spring boot doesn't remove the boilerplate configuration of Spring, it just hides it ! I am actually collecting some tutorials and documentation to do the same project but using Grails (yes, it is based on spring, and on spring boot on v3, but at least it is consistent and better for personal projects (Grails can handle very big projects too from what I'm reading). For work/enterprises, I'm already using JavaEE and will learn Spring if my actual job or future job requires it.
Tomcat
They use Java. I get phone calls from them asking me to interview with them as a Java dev in the UK occasionally. I think they said all their advertising backend was in Java, something else significant too which I can't recall...
It would be easier to answer once you tell me what attracted you to WP/ Drupal in the first place? Functionality, community, plugins, themes, hosting costs, "performance", cost? There's no equivalent I'm afraid.
When I need it, I'd like to use it. When I don't need it, I shouldn't have to. 
Eclipse? It's written in Java and I use it to write Java.
I can't recall ever writing a line of code in Notepad. Whether I'm spending tomorrow in the Java world or in the .NET world I will spend most of my non-thinking keyboard time Control Spacing or Alt Entering. It's still a royal pain in the ass. 
You are right I should've mentioned these information. First of all, they seem more popular, which brings more documentations and communities. Also yes, they are cheaper to host, like I need to purchase another host because my current one doesn't support java. But I also don't want to waste my time, learn PHP which I don't see much future for it compare to java or JavaScript.
Hadoop Oracle Database(not pure java but highly integrated) SAP Business Objects Many, Many Enterprise Back end packages are written in Java for their portability and performance
Neo4J (which is a graph database) is written in java and widely used by big corporations (walmart, ebay ...)
No. Google engineer quote: "Man, I cannot imagine writing, let alone maintaining a full software stack in Python" http://www.quora.com/Why-does-Google-prefer-the-Java-stack-for-its-products-instead-of-Python
Define "All of android". Android is built upon Linux kernel. Most of underlying android is C. However, the apps are written in Java mostly.
Twitter moved from Rails to Java for performance reasons, if that is any gauge.
Agreed - if you have a 1:1 method-&gt;unit test ratio you're probably not doing it right.
&gt;The UI of Bitwig Studio is written in Java. Can we get a source on that?
SoapUI. Pretty sure that's written in java. Its an application with an elaborate UI that allows developers to test Soap XML requests/services.
Google Docs
I wouldn't say almost everything. C++ has a huge codebase that, IIRC, rivals the size of the Java codebase.
&gt; Minecraft is written in java What do you want to bet that its rewritten to C# sometime soon... now that MS owns Minecraft...
[Here's the source](https://www.facebook.com/bitwig/posts/676830755689149), but it turns out that it's not the whole UI - screen drawing and then some more is implemented, like the audio engine, natively.
With that being said. You can write an android app in C++ if you wanted too. A lot harder and you have to be a lot more careful but it can be done. Sometimes carriers who have their own apps will do this because it is portable to every type of device. 
I think Twitter uses Java for its search engine. The rest may be Ruby.
Hey, don't ask questions - here.. take a ******* down vote.. how dare you!?
Thanks!
So is PyCharm.
Yeah, I said it based on their recent paper . Trustin, one of their development guys also writes Netty IO but I don't know whether it's used via Java or Scala
Yeah I know. What's up with that.. Thought it's all about learning in this subreddit. 
IBM literally wrote their own JVM and they wrote the original Eclipse as I understand it. 
It's clearly an opinion piece, you're supposed to disagree. But if it makes you unhappy, well that's very unfortunate for you, you must be a very sad person.
Wow.. people are so aggressive !
At this point, I suspect Minecraft is probably the most well known. Hadoop is probably the one that impacts the most people, as I suspect that there probably are very few Fortune 500 companies that don't have their own Hadoop cluster at this point. 
What do you mean by manifest?
Thats not my code.
Eclipse
Atlassian JIRA, Tomcat, JBoss.
If I have to add in a new parameter 10 times for the test to catch an actual error once, I'm more than happy.
var is your friend
Heh... Possible... I've given it a lot of thought actually. I think its fair to say you might be right; opening of .NET *may* actually be part of the reason for buying Minecraft. "Well... We need to be more multi-platform... Let's open up .NET... What's the biggest software thing written in java? Minecraft? Cool. Can we buy it, convert it, and develop 'migration tools' at the same time?" Its possible too that MS views Minecraft less as simply a 'game' and more as a 'platform', especially a platform targeted towards a younger audience. It's already a 3D virtual world that multiple users from around the internet can interact with. It could form the basis of an interesting framework for VR applications when they hit the public in a year or two. OR it could just be *one more* example of a large company overpaying for a company, and then doing nothing with it... Like a spoiled rich kid who overpays for a shiny new toy, quickly becomes bored with it, and then throws it in a corner to forget about it. 
How are they for using Erlang these days? It was still pretty significant to them ~3 years ago when I went for a visit, so I doubt it has changed too much...
I would actually suggest you look at the maven shade plugin - http://maven.apache.org/plugins/maven-shade-plugin/
&gt; I could see it being useful for those who want to pair program, but have to do it remotely (such as someone working from home). Or pair program sitting right next to each other.
All of JetBrains' IDEs are based off of IntelliJ and thus are written in Java
Look on the website, there's a guide on how to! (Praise the overlords!)
This has some pretty interesting concepts, but I'm super confused about `join`... What exactly does it do? I tried to look at the source for it, but it's also pretty confusing and my brain is fried already from work. Person.ADDRESS.join(Address.POSTCODE).set(person, "RA8 81T"); Is this essentially just setting the person's address's postcode? And if so, wouldn't `person.getAddress().setPostCode("RA8 81T")` be way more intuitive? Obviously I'm probably missing the point (like a concrete use case).
Hidden promo piece. Pretty well hidden though.
Yes it is. It forces a stop-the-world, compacting "Full GC" which eliminates the fragmentation caused by using the CMS collector. System.gc will *not* invoke the CMS collector (unless one specifies `-XX:+ExplicitGCInvokesConcurrent`). I explictly want to compact memory during low usage. We do this twice a week. Better at night than randomly during the day. If you use CMS on a long running server a "Full GC" *will* eventually occur when memory becomes too fragmented to service allocations.
I had the same problem. Go to the workspace preferences and search for "Indent Guide". By default, it should be enabled. Disable it, click Apply, then re-enable it and click Apply or OK. Then, restart the IDE.
The plugin is nice, it definitely helps with readability, but it seems to break both tabbing of the indents (converts it to spaces) and ~~code folding~~. Edit: I was able to re-enable code folding by installing the JSF Web Tools as a replacement for the built-in tools
&gt;It forces a stop-the-world, compacting "Full GC" No, it doesn't **force** a garbage collection. The JVM *might* preform a collection, but not necessarily. It can also be disabled with VM flags. From the javadocs for [System.gc\(\)](http://docs.oracle.com/javase/7/docs/api/java/lang/System.html?#gc\(\)) (emphasis is mine) &gt; Calling the gc method **suggests** that the Java Virtual Machine expend effort toward recycling unused objects in order to make the memory they currently occupy available for quick reuse. &gt; And, the VM might be started with this feature disabled completely. The [-XX:+DisableExplicitGC](http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html) flag will prevent calls to System.gc() from doing anything. And, as you mentioned, you can use the -XX:+ExplicitGCInvokesConcurrent flag to have a CMS collection preformed (which doesn't necessarily do compaction). Maybe saying that it *probably* isn't doing what you want was a bit stronger wording than necessary. But these and other reasons are why it's generally frowned upon to explicitly call System.gc(). EDIT: All that being said, you aren't doing any harm. Especially if you schedule it to run off hours. 
A rewrite in another language has been speculated for, well, forever. But what's the point? 
It largely is. Twitter has a huge set of open source scala libraries available here: https://github.com/twitter
Here's a really good list of what Big companies use: http://en.wikipedia.org/wiki/Programming_languages_used_in_most_popular_websites. Btw Banking/Insurance/Healthcare is always Java or .NET. Those apps aren't really "popular", but are extremely important.
I mean PHP pretty much has the blogging sector on lockdown. There are plenty of Java/.NET/Python/Ruby alternatives however you won't get the massive community Wordpress has. That being said if you just want something simple in Java, try http://roller.apache.org/. It's very easy to use and easily extensible if you know Java. 
JVM ception
[Terasology](https://github.com/MovingBlocks/Terasology) is a Minecraft like game, also written in Java and open-source.
Almost everything running behind the scenes at Amazon.com is running in Java. The website itself is still running on an little-known platform that I don't feel like speaking out loud lest I summon some sort of devil, but they are in the middle of migrating the entire website to a Java based service. All of the back-end services are Java.
Well, I personally think the performance is... less than stellar... on all of my computers except for the big, beefy gaming rig I have. I mean... come on... Portal 2 performs better than Minecraft on my Surface Pro 3. Clearly something in Minecraft is not optimized someplace.
Thanks for your help. I'll definitely be looking into those technologies soon, but I did a simple RESTful API with Spark and jUnit Tests. They seemed impressed enough to ask me in for another interview. 
Python is used heavily internally but all of their products are java or c++.
It's used a ton in the enterprise. Most investment banks and media giants run Java for their internal systems and usually for public web sites. There's also a ton of enterprise middleware written in Java.
Not that I know of. I simply found the extension and thought that the reddit Java community would appreciate it. Happy coding!
Link for the lazy: http://www.saros-project.org/setup-intellij-environment
It's not on their official support list of plugins, however it may still run. EDIT: Link to Compatibility Page: http://www.saros-project.org/compatibility
Not surprised. It's on the Takipi blog, which I removed from my feed reader after it became apparent that not only was their content often poor they were shilling in every single post. Yeah, sure, I get that it's their company blog but they should know better: You don't build a community around your offering by trying to sell it in _every_ damn post.
Shhhh Edit: for the curious, http://www.masonhq.com
In looking at this I just realized that it would might solve some ADA issues for us. I often have vision-impaired students in class, and it is often hard to read eclipse when it is projected. I have tried various screen-sharing technologies, but directly sharing Eclipse itself might be very helpful.
If the whole interview consisted of this it'd be a red flag, but I'd be worried about hiring a senior dev that couldn't answer the more general questions fairly well. 
Every line of code you have to maintain has a very real cost associated with it. The harder it is to make changes, the more likely someone in a team of coders is to one day find a way around it. Depending on your team, you may not like their workaround.
It's a real shame SoapUI is so bloated nowadays.
What JVM?! The JVM is a specification with multiple implementations, there isn't The JVM rather a JVM. Just look for Maxime, Graal/SubstrateVM, JikesRVM, SqwakVM for a few examples of JVMs written in Java.
No. They have lots of implementations. OS/400, Aix, embedded real time JVM, Linux, Windows. There isn't "The JVM", rather a specification with a reference implementation. There are plenty of comercial JVMs to choose from.
And you suppose is because of the programming language and not the programmers?
Netflix heavily uses Java (and other JVM languages) for their back-end APIs. edit: See http://techblog.netflix.com/
Try using one of the optifine releases. It can up your fps from 10 to 30. It basically tries to optimise the graphics calls used in minecraft
Hadoop and associated technologies
Many companies including NSA to, ...
As much as I appreciate a good bean mapping framework, doesn't this create more code than using getters and setters?
Gmail
A `Getter&lt;T, V&gt;` of a field of type `V` on a class of type `T` is essentially a `Function&lt;T, V&gt;` - you give it a `T`, and it gets a `V` from that `T`. Functions compose - given a `Function&lt;A, B&gt; f` and a `Function&lt;B, C&gt; g`, `f.andThen(g)` will return a `Function&lt;A, C&gt;` which applies `f` to its input, and then applies `g` to the result of `f`. The `join` method composes `Accessors` in the same way. `Person.ADDRESS.join(Address.POSTCODE)` takes an `Accessor&lt;Person, Address&gt;` and an `Accessor&lt;Address, String&gt;` and returns an `Accessor&lt;Person, String&gt;` which can be used to get *and* set a `Person`'s postcode. Accessor&lt;Person, String&gt; ADDRESS_POSTCODE = Person.ADDRESS.join(Person.POSTCODE); is the equivalent of Accessor&lt;Person, String&gt; ADDRESS_POSTCODE = Accessor.of( p -&gt; p.getAddress().getPostcode(), (p, v) -&gt; p.getAddress().setPostcode(v)); The general point is that `Accessors` can be passed around just like `Functions`, and composed when their types match up.
At some point the Amazon website was even delivered from c/c++ code as well : http://www.quora.com/How-did-Google-Amazon-and-the-like-initially-develop-and-code-their-websites-databases-etc/answer/Charlie-Cheever?srid=0uc&amp;share=1
Compare: Function&lt;Person, Knight&gt; mapper = Mapper.from(Person.AGE).to(Knight.AGE) .andFrom(Person.NAME).via(String::toUpperCase).to(Knight.NAME) .andFrom("I seek the grail").to(Knight.QUEST) .creatingWith(Knight::new); to Function&lt;Person, Knight&gt; mapper = person -&gt; { Knight target = new Knight(); target.setAge(person.getAge()); target.setName(person.getName().toUpperCase()); target.setQuest("I seek the grail"); return target; } The answer is: *slightly* less code.
(I've assumed that accessors are already defined for `Person.AGE` etc. - which obviously is *more* code up-front, but once defined they can be re-used)
&gt; lest I summon some sort of devil Coldfusion, is that you?
It's the blessed Perl!
Spring Data + Mongo DB has got to be one of the easiest things to set up. It can be done in minutes.
Also check out twitters scala guide here http://twitter.github.io/effectivescala/
LMAX use Java for low latency FX trading. Their use case is pretty interesting. They won an Oracle Dukes award for there disruptor framework. http://www.lmax.com/ https://lmax-exchange.github.io/disruptor/ A lot of big companies use Java * Netflix * Amazon, * Google, * Ebay, * Experian, * Square * Salesforce * GCHQ The list goes on. 
Are you familiar with JavaBeans?
One guy I know that works for Google will only use Python. 
Many don't dream of this, but the financial sector, if they are not running cobol, they are most likely running java. Already a good chunk of it. 
Is Beer one of the tools?
JOSM, the Open Street Map editor
android LOL
Use RDI at my work place. It's a pile of shit.
&gt; No, it doesn't force a garbage collection I know that. I wasn't precise enough in my wording, I guess. For our usage, *requesting* a gc is sufficient. &gt; And, the VM might be started with this feature disabled completely... This is for our web service. We control the settings. No problem. I fully understand why it's frowned upon. I consider this use a system maintenance function rather that part of the application. I never call gc() in any other case. The CMS collector is the best way to eliminate pauses in an actively used long-running server. With CMS comes fragmentation. With fragmentation comes eventual random Full GCs. What other way could this be solved? If you come up with something *better* then I'll use it. I don't believe you can. Calling gc() is by far the best solution that I can think of. I am unapologetic. I understand the issues with using gc() and how it works. I've been programming Java since '96 and have helped maintained servers with huge loads and large heaps.
Actually works pretty damn great to me.
I don't use it much although ironically I will be using it for some analysis more or less when I finish this post. I agree. The UI is a little... bloated? Odd? Not sure. Haven't used it enough.
For example, this little device that was created before Arduino and similar took over the world and sold by Sun to anyone wishing to use them http://www.sunspotworld.com/ Oracle has taken most of the information from Sun off the net, so there is little now besides http://en.wikipedia.org/wiki/Squawk_virtual_machine https://java.net/projects/squawk/pages/SquawkDevelopment https://fisheye4.atlassian.com/browse/squawk/trunk/doc https://fisheye4.atlassian.com/browse/~raw,r=96/squawk/trunk/doc/TheSquawkSystem-Sep02.pdf The little C code that the system has, is used as portable Assembly in that same vein as any OS and generated from Java code for bootstrapping. Oracle is also pondering to eventually replace Hotspot with Graal and SubstrateVM, if you check the JVM Language Summits from 2013 and 2014. Just no deadline in sight. However in Java 7 and 8, lots of C++ code was replaced by Java and JIT intrisics, for example. If you check the OpenJDK mailing lists. 
You said that you are using Grails, can you tell me if you're satisfied ? (knowing that you were using JEE before). I used a little of JEE, I wanted to enhance my knowledge in JEE and Spring by doing some personal projects but then I discovered Grails and I'm actually reading some books and I find it very interesting. So do you suggest me to continue learning grails ? What did you like/dislike about it ? Are there a lot of jobs in your area (which is it ?) using Grails ? Thanks
RuneScape(but it may be showing the pitfalls of Java game development now)!
I've never used Spring ... so, why is it useful? I don't even understand how a framework could help you with depencdency injection.
That's why I only sometimes check in my refactorings! Sometimes, I go bold and do check it in, especially when the complex code obfuscates the actual business rules supposedly implemented. Through refactorings, I deduce the business rules and consult with the business analyst to make sure I know what I'm talking about. I try to write tests where possible, or manually test the crap out of it if I can't. I have introduced bugs this way, but bugs still get introduced when anybody has to add or modify existing business rules in the existing mess. I have observed that the defect rate seems become less in the future when the code is made comprehensible and the business rules are made explicit. Sometimes, you have to make the call and bite the bullet.
Seriously? I thought GWT was basically dead, an that inbox is their new showcase app for Polymer? If it's really GWT, colour me surprised...
DVD players do not _need_ to have Java. All Blu-ray players are _required_ to have Java.
IoC. 
I write REST api's using spring for big companies for a living. Beyond DI -- I use it to cut down on boiler plate. Transaction management, datasource management, exception handling, etc -- Spring has conventions using AOP and/or annotations to handle these concerns in a cross cutting way where you don't have to write this code over and over. For CRUD apps, spring data has been great for us, no more implementing the same DAO classes over and over... Built in paging, built in querydsl support... You can couple it with Spring MVC and jackson and have first class objects in your method signatures on your REST controllers. You can couple that with the JSR 303 validation api and do all your validations that way, then catch the validation failures with another aspect type layer and write them out in a common manner. I agree with the principal of what the author is saying -- java is a verbose language by nature, so go ahead and embrace it. There something to be said for looking at a piece of code and being able to just step through it step by step. I prefer the spring way of doing things, because I understand "the magic" and I enjoy the benefits it brings. 
If you read my link, he mentions that they use Python for testing and other devops stuff. 
I did read the link, what I was trying to say was the guy I know only uses Python, not that the company only uses Python.
Fine, but nobody would use spring for just the IoC container, so the argument is a bit moot. You use spring because you want web, transactions, complex batch processing, REST, security, message queues, and other goodies like live reload, or scaffolding. &gt; The best feature by far is compile time safety. With Spring we have taken one of Java’s greatest features, the fact you can compile and be sure your application is syntactically correct, and completely removed it. Apparently the author haven't heard of java-based configuration, in Spring since 2010. 
Does it bother anyone else that buildACar() does not return a *Car*?
this article barely is one. seems like they were just trying to fill some spacem
Thank you. I will take a look at this plugin.
Spring's java based config feels so unwieldy after using something like Guice.
Thanks for the answer!
Some people DO use spring just for IoC. Its auto included in a lot of projects, which I think is super insane.
&gt; en great for us, no more implementing the same DAO classes over and over... Built in paging, built in querydsl support... You can couple it with Spring MVC and jackson and have first class objects in your method signatures on your REST contr Nice, never used it. Did a quick google -- You think it has features over java 8 at this point that outweigh the benefits of bringing a new syntax into a project, potentially one that needs to live a long time and be supported by a lot of different people? How does scala do transaction management, datasource management, exception handling, etc. Seems like it's just more about concise/powerful syntax. Is that a correct statement?
A jar is just a regular zip file.. There's even [online services](http://online.b1.org/online) for this.
I use it only for wiring in quite a few cases
I often use 7-Zip to look at a Jar's contents.
www.7-zip.org
Do you know any decent decompilers? 
&gt; You think it has features over java 8 at this point that outweigh the benefits of bringing a new syntax into a project, potentially one that needs to live a long time and be supported by a lot of different people? Yes, if you are willing to put the effort in and carry it forwards. It needs team support. If 1 guy says this sounds cool, the other 9 guys on the team aren't going to learn a new paradigm just to follow the leader.. &gt; How does scala do transaction management, datasource management, exception handling, etc. For most of this stuff you would fall back to use java libraries, because any java library works in scala. But stuff you interact with more, they is often a scala wrapper that adds nice scala like syntax on top of what you already have. &gt; Seems like it's just more about concise/powerful syntax. Is that a correct statement? No it is a paradigm shift. Java is an OO language with functional programming bolted on (lambdas etc). Scala is built to be a functional/object oriented hybrid, with both sides getting first class support. As a side bonus, they got rid of a lot of the crap from Java. Having to use "final" all over to make stuff imitable, gone. Having the concept of checked exceptions? Gone. Lots of things we learned are crap are gone, and you are encouraged to write in an immutable / functional way.
No, that's mostly why i'm asking.
Small CMS in Java Tapestry: * https://github.com/fscheffer/arras * https://github.com/thiagohp/eloquentia
Look at JD-GUI or Luyten. If the jar is obfuscated it'll probably be difficult. 
[JD](http://jd.benow.ca/) looks like a good option, never used it though. Given that it's decompiling stuff, your mileage may vary no matter how decent a tool you're using.
&gt; But then, I wanted to implement security (roles and OAuth), and this is when it broke my momentum and my happiness. This is ultimately a challenge with every framework. We have frameworks on top of frameworks, layers on top of layers. When the conventions provide what you need it's simple. Once you need to break that and peel back a layer it becomes clear how little you understood to begin with. It's a product of the size and complexity of Spring. What you need to do is understand the fundamentals that underpinned the pieces you were using in the first place. &gt; After trying and tweaking lot of things, I also found out that the Spring boot autoconfiguration is nice, but when you break something, good luck.... As you say, Spring Boot simply hides the configuration from you. Much like using a WYSIWYG editor if you don't understand the language behind it you're in trouble the second you need to dig a bit deeper. &gt; After thinking a lot, I told my self : Why bother learning a framework that needs a framework to configure it. It's important to realize that more and more we're not developing in a particular language so much as we're developing on a platform or set of frameworks. Different companies are using different platforms for different reasons in various languages. Looking at something like Rails and Grails faces the same challenge, it's not so much about learning Ruby or Groovy as it is about learning the platform and framework(s). They may be simpler for a variety of reasons and they may be better suited for a particular company or project for a variety of reasons. All of this is a challenge not at all unfamiliar. We've literally moved from looking for "Java Developers" to looking for developers skilled in the specific frameworks and technologies we require for a given team. It's simply too much of a drain trying to teach it. Depending on the team that may be heavy Spring or it may be heavy Guice and Netflix OSS for example. As for why to learn it. Simple. You think it's the optimal solution to a particular problem or you're interested in it or you want a job that requires it. Why are you? Depending on your motivations maybe it's a good idea, maybe it's not.
Not sure. I used the Java 8 version and loved it. Exactly what I wanted.
https://www.youtube.com/watch?v=ZxZQnaetrwQ Dead? No. Floundering? Yeah. If the GWT team can implement Java 8 compatibility in the near future (i.e. Q1 2015) then I'd be a lot more comfortable suggesting GWT for use in projects. Someone (I assume it's Ray Cromwell) stated on HN recently that Inbox was "about 70% GWT, 30% Closure": https://news.ycombinator.com/item?id=8554339
Also, you still have Dropwizard, which also uses JAX-RS and Jetty, but is much more complete: http://dropwizard.io That is what we use in production. It is killer. No more WARs or any of that heavy Java EE garbage. 
http://envers.jboss.org/
This is a nice (if misleading) blog post...5-6 years ago. Spring has had annotation-based config for a long time now so if the XML is what is turning you off, no problem. And he's right, if your only concern is creating objects and injecting them into other objects to make an object hierarchy you can write straight-forward code to do that. Now when you want more than that, for example if you want different classes to be injected with different property settings depending on environment, or depending on if you are unit or integration testing, then you have to start coming up with a mechanism to do that. You can choose write your own mechanism or use an existing framework. At that point Spring may be your best choice. &gt; how many Spring projects actually test the wiring of the application All of them? On startup if an expected dependency is missing Spring poops out an error. How is that not testing the wiring of the application? &gt; With Spring we have taken one of Java’s greatest features, the fact you can compile and be sure your application is syntactically correct, and completely removed it A strawman argument that implies that Spring recommends never using the new statement, even for trivial cases. The common use case is to have Spring wire up the external dependencies (DAOs, etc) where they probably are configured differently depending on environment, or if you're testing or not. Even if you went to the extreme and springified every last class you wouldn't lose Java's ability to compile the classes, ensure the type checking is correct, etc. All you lose is knowing which instance of a dependency is being injected at runtime. You still know that it will be of type Class&lt;X&gt;. &gt; However, next time you come to build your application, why not try to structure the dependency injection without a framework for a much leaner and understandable code base? ... and of course the author doesn't provide an example of a production-ready, non-trivial code base where no configuration/DI framework was used. I'm not saying Spring has to be used on all projects. Only pointing out that if you're trying to convert someone familiar with Spring on not using it at all you better be able to back up your statements with an example. 
https://www.youtube.com/watch?v=zg79C7XM1Xs
"Dependency injection is about removing hardcoded dependencies from classes and moving dependency configuration outside of the class." No, that's Inversion of Control. Dependency Injection is but one means by which to achieve it. Service Locator is equally applicable, though with its own (smaller, IMHO) set of upsides and its own (larger, IMHO) set of downsides. If you are going to call out GP, at least call out something they got wrong.
https://news.ycombinator.com/item?id=8681875
You're right. In my case, I am learning it to make a personal project and to add something on my resume that is widely used in the industry (two things at the same time). I know Spring is huge and I don't know it a lot (I beginned to learn Spring with Spring boot so...), but the fact that Spring boot advertises itself as something very easy attracted me (even if I knew the old reputation of Spring). So I do really not recommend learning Spring with Spring boot, but learn it from the ground.
&gt; You think it has features over java 8 at this point that outweigh the benefits of bringing a new syntax into a project, potentially one that needs to live a long time and be supported by a lot of different people? No. It's just a different, debatably more elegant way, to get the same job done. But with lambdas in Java 8 and other features beyond, there is now very little reason to look at Scala IMO. In the end, you'd have to try it to have an opinion. I loved Scala briefly and did try it, and walked away from that experience with the impression that the trade-offs aren't worth it over the long term.
Yep I use annotated Spring configs(not xml), and when done right, its a beauty of a thing to behold. And honestly, its not that tough to do it right either.
Self-executing jars are the wave of the future. I don't know why we haven't done this all along.
a billion of reasons. JEE is one (and it itself has a billion reasons to use it). self-executing jars are not the wave of the future. they have their place, but so do application containers (anyone who says differently has not fucking clue what they're talking about). self-executing jars are nice for simple apps, or desktop-in-the-browser apps (advantage of that being the html cross platform UI) or for other little things, not for something a bit heavier. 
HAHA...I would love that to be true. Can I tell my enterprise customers running clusters of Websphere this?
Wait, does this mean that Java does pattern matching in methods? 
Actually, that is not Inversion of Control, and Dependency Injection is orthogonal to it. Inversion of Control reverses the direction of the dependency. Instead of depending on concrete classes, you depend on interfaces that you own. The concrete dependencies depend on the interfaces. Concrete depends on abstract. IoC is the architecture DI is the wiring. You can still wire together concrete dependencies.
We have big complex apps with lots of business functionality (and realtime response SLAs) running in Dropwizard. It works great.
Really, so you want 2 apps in the same container? Fighting for the same heap? if one app consumes all the memory it kills the entire process and brings down all the other apps with it. This is precisely one of the reasons we moved away from servlet containers a few years back. One misbehaving WAR killed a platform where the other 4 WAR files were doing just fine. If you have a large server with multiple NUMA nodes, it is better to run the apps totally separate in their own NUMA node using numactl. Dropwizard rocks.
No. This is just URL routing.
Sigh. "Inversion of Control reverses the direction of the dependency. Instead of depending on concrete classes, you depend on interfaces that you own. The concrete dependencies depend on the interfaces. Concrete depends on abstract." No, that is Dependency Inversion Principle as per Fowler et al, which is essentially a prerequisite of Inversion of Control but don't make the mistake of confusing the two. Heck, even the Wikipedia coverage of IoC goes out of its way to highlight the distinction.
Technically sure it works...and if you host the app...that works. Our stuff is run on our customers infrastructure, with teams of people managing that infrastructure. They typically don't like the idea of an embedded container running due to loss of control
Wikipedia says: The term is related to but different from the dependency inversion principle, which concerns itself with decoupling dependencies between high-level and low-level layers through shared abstractions. Inversion of Control is more generic, as the Wikipedia article states. IoC is a generic pattern where control of the application is held by the generic framework part and specific concrete behaviors are provided by the dependencies. This is technically dependency inversion because the application using the framework is controlled by the framework and not the other way around. Dependency inversion the specific architectural pattern is therefore related but distinct. Which is besides the point because Dependency Injection specifies wiring instructions and says nothing about how control over the application is spread out between the dependencies.
There's literally nothing you can do with a container that you can't do with a jar. Same code, same JVM. The only difference is configuration management. Containers were better than the build tools 10 years ago, but not anymore.
hahahaha. what kind of a QA system do you have there? misbehaving war? that should be caught way earlier and sent back to the devs. numa nodes ... wasting resources needlessly when all you need is just some kind of QA. not even good qa, just ... some.
? have you ever seen a container? a war doesn't have to have 50mb, 2mb is just fine for most apps. sharing services, libraries, configurations, messages. if you have no idea what you're talking about, just shut up please.
Makes more sense after some sleep and your explanation. Loving all the Java 8 stuff and the fluent API, but the source is pretty hard to wrap your head around. Also, mappings are awesome. Have you thought about applying some of these concepts to immutable classes with builders? I was trying to think about ways to do that with your interfaces now, but it looks like the best you can do is map from a bean to a builder that acts like a bean.
Sigh. No, of course you don't *need* Spring. You also don't *need* Hibernate to map your RDBMS to your objects. You don't *need* Jackson to convert your objects to JSON, either. Or SpringMVC to scaffold your Front Controller. But if you're rolling all of this on your own, I hope I never end up maintaining your codebase.
A bean is basically just a serializable class with a no-argument constructor and a number of getter/setter methods for its properties following a `getX()` and `setX(...)` convention. It was used by a lot of frameworks for setting properties through configuration and stuff like that. You could define a property in some framework-specific XML format, e.g. `&lt;property name="MyProperty"&gt;example&lt;/property&gt;` and the framework would instantiate a default version of the class, read that file, and then look for the `setMyProperty()` method via reflection. I'm sure someone else could explain it a lot better, since it's from a little before my time. These days, there are better ways to do this stuff and a trend toward immutable objects, and you see fewer JavaBeans. Though the getter and setter convention is still very common.
we have it deployed at customer sites all the time. They get an uberjar jar, a YAML file with the app config and a start.sh script. So the entire deployment is: * myapp.jar * myapp.yaml * start.sh where start.sh is pretty much just (plus some heap settings): java -jar myapp.jar server myapp.yml That's it. It's the same deployment model you now have in Go, Rust, etc.
hahahaha. it's pretty clear to me who is the "no clue" person is in this conversation. and, unfortunately for you, it's not me. just keep this in mind: containers have their place, where they are better than executable jars. executable jars have their place too ... less so, but there are applications.
whatever. If you wish to suffer with containers and WARs, it's your choice. We've been kicking ass in production with Dropwizard for 2 years now. It has been a blessing both in production and during development. 
Depends on if you consider having to recompile hard-coded dependencies every time you make a change to be "simple." Embedded servlet containers are deceptive. import javax.ws.rs.GET; import javax.ws.rs.Path; @Path("") public class HelloWorldService { @GET public String noParams() { return "Hello, World!"; } } There's an entire RX service, sans web.xml. No implementation, no container dependency, no JAR file. 200% more maintainable.
They are not deceptive. They are exactly what you expect them to be. Only Java has this legacy WAR container concept. All other modern languages have moved on a long time ago. Clojure (with Ring): http://techbehindtech.com/2011/01/19/introduction-to-clojure-web-development-using-ring-compojure-and-sandbar/ Go: https://github.com/go-martini/martini#getting-started Rust: http://nickel.rs/ Elixir: https://github.com/phoenixframework/phoenix Node.js: http://expressjs.com/starter/hello-world.html etc. All of Google Downloads runs of Go's standard "net/http" library, so it's definitely able to handle any load. Spark and Dropwizard are just Java catching up with modern development patterns that other newer languages have introduced. That's all. After suffering through years of WAR redeployments, struggling with installing Tomcat, Websphere, Weblogic, etc...there are a breath of fresh air for those of us who see what is happening in other, newer and more productive languages. But, Java is all about choice. So if you like servlet containers, feel free to continue. 
You are talking on a technical complexity level. We agree there...I was serious when I said i would love that it to be true that uberjars are the wave of the future. Maybe we have different customers or serve different needs. My customer bought IBM...they want to use that existing investment in infrastructure, staff and all the various other tooling and integration services it provides without "loose ends" lying around. 
Cheers for that! 
Ah, if they bought IBM, then you are out of luck. Fortunately for us, since we are a realtime app with big data, very revenue sensitive, we get to dictate the entire technical infrastructure at a customer site. In my previous job, we had a stack similar to Dropwizard/Spark (in-house developed). Our Ops guys just wrapped our JAR into an RPM. Then when doing an upgrade they would just do a rolling upgrade, take the server out of the load balancer pool, run simple yum update which would stop the old server, update it via RPM from local repo, start it up again with new version and then put back the server in the load balancing pool. It was all automated and we had 100% uptime during upgrades. For our DevOps stuff, we also wrap it in an RPM. Then our Chef scripts just provision a new VM, install the RPM of the app on it and deploy the VM. Being able to wrap the app in an RPM or DEB for every install/upgrade on Linux boxes is a godsend for Ops. 
Well, then good luck to you and enjoy it. Freedom of choice.
I like how you're ignoring dokku and heroku. Why are these such successful deployment models? Hm. Untarring tomcat and running a bash script is struggle? You just drop a war in a folder and you're done. How do you do that with an embedded server? Add more plugin dependencies that may or may not be supported in a few months? That's fine for a blog, not for an enterprise application. Keeping your implementation separate from your API is no-brainer.
yea, sure, freedom of choice. one more question: how do you do connection pooling when you have 3 apps using the same database in your model?
figure out the right number of connections per app. We are in NoSQL land with Cassandra, so this is not an issue for us. It does not have the connection pooling limitations of RDBMS.
http://gary-rowe.com/agilestack/2012/10/09/how-to-deploy-a-dropwizard-project-to-heroku/
oh, hahaha. ok. better have then no relations between your entities :). it'll suck when you find that they actually do ... so the answer is: you don't do shared connection pooling (well..shared anything really). this works fine for a few cases, breaks badly for most.
Yeah, that's how you use heroku. Let me ask you something, what is Java's strongest feature and how do things like dropwizard completely neutralize the benefit of it? This isn't an opinion question; you may have to set your emotions aside to see it.
We were originally on oracle and postgresql. We just rebalanced the connection pool and things went on. Cassandra is a newer app. Very complex object models stored in Thrift. So let me ask you a question: Let's say a customer calls you at 2 AM because your app is slow all of a sudden. You connect via SSH to their remote production server. You just have the command line, nothing else, since this is a restricted production server. You fire up jstat to look at the container process, you see lots of STW GC pauses everywhere. You see a lot of stuff in new gen, old gen, etc. But really you have no clue as to what the root cause is. You have the container + 4 WARs all munged together in a single giant proces. Any single one of them could be the root cause...or maybe a combination of them running together. For us, if we have 4 apps, we have 4 separate processes. I fire jstat at the pid for that particular app and immediately see all of its internals in isolation. I can pinpoint what the problem is. Next, if something bad were to happen and the app actually crashes (for whatever reason, let's say OOM), since it is a process, it is trivial to deploy it using upstart or systemd with the respawn stanza. That means Linux monitors the process and if it dies, it restarts it immediately. I'd take this level of control and runtime insight into my running app over whatever minor issues there are with connection pool rebalancing.
Java's strongest feature is the choices it gives you and its depth of the library ecosystem. Spark and Dropwizard continue that great tradition. P.S. Here is what it takes to get a new developer running with our stack: git clone &lt;url&gt; gradle run That's it. When we were still on Weblogic, it would take a day sometimes to properly install that beast and get it running on a developer workstation. P.S. When we got rid of Weblogic, we saved our company nearly 200K in license fees in the first year alone. Our Ops team was ecstatic too, I recall them talking about making a bonfire out of all the 800 page Weblogic manuals they had lying around all the times.
&gt; I'd take this level of control and runtime insight into my running app over whatever minor issues there are with connection pool rebalancing. These are major things: sharing stuff is not a minor issue, it's critical. The 2 am call ... that should never happen if you do your testing. but let's say that it does, spawning a new instance while you take this one off the load-balancer is a few seconds job. then you debug the problem offline. logs, reproduce, find the culprit =&gt; fix. 
Sure. It's that simple. You have an app with endless configurations, every customer configures it differently, runs it on different hardware, with different data, on different OSes. And your QA is supposed to find all of these combinations and test every single customer with their full set of data prior to release. Right. How do you reproduce it when the data is 500 GB (i.e. impossible to download over the net), restricted (i.e. you cannot download it locally anyway since it is private customer data) and the log shows no errors. Just slow response times. Good luck. 
I forgot...Spring Boot. Same thing. http://spring.io/blog/2013/08/06/spring-boot-simplifying-spring-for-everyone/ Basically a Dropwizard clone with Spring baked in. Although they have been developing it very actively recently. So the trend is definitely away from WARs. Like it or not.
&gt; And your QA is supposed to find all of these combinations and test every single customer with their full set of data prior to release. Right. yes. you are. can you set X to 1 and Y to 15? you better check that in QA, not let the customer find it. customer data? find the pattern and reproduce it locally. look, there are 1 billion things you can do in production, but debugging is not one of them. never. ever. you should always have a qa set that mimics production. no , you cannot mimic every single configuration out there, that's why you have your list of requirements, you can provide support for. imo you're losing too much for so little gain (and in the case of debugging for dangerous so called gain). from outside it looks like you're putting down fires more often than you should've, if only the architecture would have been chosen a bit better.
For an app that has 1,000,000 potential configuration options, across different data points? I think we are dealing with different types of apps. I guess we will just have to agree to totally disagree on this one. We've been doing this for 4 years now and not a single member of the dev or ops team has any wish to go back to Weblogic, WARs and all of that. So, despite your opinions, we will stick with has been working great for us and battle proven...
&gt; I think we are dealing with different types of apps. apparently. i can't even fathom wtf kind of monster you have there. but no, debugging in production is not the answer. i think you got a lot of problems because of this, but hey, whatever floats your boat.
I'm sorry, but this isn't very useful and the video is incredibly long and boring
&gt; its depth of the library ecosystem Its core libraries. Its guarantee for backwards and cross-compatibility. You do not get that guarantee from 3rd party implementations. So it sounds like you're running a start-up, that's fine. Best of luck, but you're gambling. Don't gamble with something you can't afford to lose. To put it bluntly: Java is not a high-velocity environment built on tech bubbles. It's not a jet engine strapped to a scrap racer. It's the Golden Gate Bridge, the Eiffel Tower, the Taj Mahal. If something really truly breaks it breaks the company in ways that can't be rebuilt. It's not a dynamic scripting language that you can chug some coffee and Jerry-rig back together in a few weeks. We maintain about a dozen web services, literally hundreds of automated testing environments, production environments, dev environments, countless client schemas, 5 minor versions tested and supported at any given moment that we can swap and deploy with a simple web form... all running on Oracle and WebSphere with Sun standards. Difficult? Yep. Anything that's worth doing is going to be difficult. But is our technology going to disappear in a few months because someone doesn't feel like maintaining their git repo anymore? Fuck no. There's a sales pitch for you.
Not a start up. 20 years in business. Revenues in hundreds of millions every year. Most of our customers are Fortune 100. Our products drive the pricing (the most revenue sensitive part of their business) every day, during millions of real time requests. Sun standards? You mean the garbage that was J2EE 1.4? Give me a break.
&gt; All of them? On startup if an expected dependency is missing Spring poops out an error. How is that not testing the wiring of the application? In a lot of projects (I've worked on several), the "full" spring context is too unwieldy to run in every unit test; too much stuff gets instantiated, adding as many as 30 seconds to each unit test (yes, there are ways around this, but they make the unit tests less unit-testy and give a chance the execution order matters). So there are many projects, unfortunately, where there is no overall application smoke test as it would appear in production (often-times, only the last environment before production is anything like production, so some configuration will not get exercised). I believe the poster was probably referring to not having an explicit test for the "full" system that could be run by CI. It seems pretty ridiculous, but I've had to suggest on several projects that a simple smoke test be added as part of the CI build. (FWIW, this can be partially overcome with ATDD or similar.) &gt; ... and of course the author doesn't provide an example of a production-ready, non-trivial code base where no configuration/DI framework was used. You're right, this is typical of people who don't like Spring. Spring trades a certain type of complexity for another type. My personal belief is that there are few projects that don't benefit from using Spring or a similar framework. I believe that a lot of "Spring is needlessly complex" people are comparing their 300 line script to parse a file with their 300,000 line production Java app. No kidding it's hard to write in this app, it's *huge*.
IMHO, Scala has some good ideas, buried in a mess of techniques that make code incredibly hard to parse as a human. One of the few things I *actively* dislike are the implicit conversions. Everything else goes from "OK" to "Awesome, but something like Guava gives you that functionality".
The inspiration for posting this was the recent submission ["You Don’t Need Spring to Do Dependency Injection"](http://www.reddit.com/r/java/comments/2o1tc8/you_dont_need_spring_to_do_dependency_injection/). I didn't feel that post was a major value-add, but rather than complaining, I thought I'd share some source-code. Questions and suggested improvements welcome.
Gah, IBM. The king of overpriced, unstable, memory-hungry, overly complex crap. 
Agreed. &gt; All you lose ... ...and if you really needed it, you always have the option to implement the ability to ask your dependency what it is, or where it came from. I don't recommended this in terms of design, but rather recognize one could do it in the rare case one needed to. &gt; ... and of course the author doesn't provide an example of a production-ready, non-trivial code base where no configuration/DI framework was used. Also noticed. Conceptually, the reason behind dependency injection is to avoid hard dependencies, and know as little about them as possible. For example, if all you need is an X &amp; Y axis, that is all you should ask for. Whatever gives you X &amp; Y is irrelevant, you only need something that implements a particular interface or a simple adapter. Continuing with this example, one could pass an angle into such a method by implementing an interface which determines X&amp;Y based on the sine and cosine of the given angle.
Somehow I managed to copy/paste a constructor instead of the hardcoded calls to new. But I disagree, dependency injection is not about "remove hardcoded dependencies from classes and move them to configuration". That is a means to an end and not an end on itself: why is this done in the first place thats the point of dependency injection. And the point is: testability (easier to replace implementations), modularity (small modules that get injected in each other), and maintability (the system is easier to refactor and evolve).
Yeah, been using intellij for some groovy work, unfortunately netbeans groovy editor is not on par. I came across the decompile, and it was seamless. That being said JAD *used* to work well, but development stopped around Java2 1.4 :(
https://github.com/vhf/free-programming-books/blob/master/free-programming-books.md#java https://free-programming-books.zeef.com/?query=java 
&gt; self-executing jars are not the wave of the future. they have their place, but so do application containers (anyone who says differently has not fucking clue what they're talking about). Indeed, and I see no strong reason why Java EE at one point shouldn't be able to support both models. In fact, some servers (TomEE, GlassFish, Jboss-if-it-works) already support running in a fully embedded mode. GlassFish is even the RI of Java EE, go figure. If they can do it, how hard would it be to standardize it so all Java EE containers can do it? 
&gt; debugging in production is not the answer. Sometimes it's your only option. &gt; you should always have a qa set that mimics production. This is not always an option. For situations/clients/projects where this is not possible, you can set expectations that because of logistical and/or policy restrictions, optimal development and support is not possible, detail what the reduced support entails, and work within those constraints.
&gt; Really, so you want 2 apps in the same container? Fighting for the same heap? I too never understood that model. It might have worked in the container used different processes and maybe even was more like a kind of hypervisor-like thing. But it never became that. Then, now, and in the forseeable future there's just one process and one heap. You can't control the CPU time allocated to each application and you can't control how much memory each one gets. Security between apps is especially weak if you consider JNI and global resources. So while not getting the most basic mechanisms you need to control apps, like you know any decent OS has provides for decades, you DO get a slew of problems. The old argument: "I can't upgrade the container, since I have to upgrade all 10 apps running on it at the same time" for instance, or the never ending amount of class loader leaks when redploying individual apps. When you kill a process, most everything it holds just goes away. When you remove an app from a running container, there's no telling what stays behind. After a decade and a half of containers supposedly fixing their class loaders leaks, I think it's time to just throw in the towel. The model is flawed, no amount of fixing will ever get it right. 
Looks interesting. I've been using a reference JSR CDI framework (Weld). It can be a little non-intuitive, but generally plays well.
As a CF guy in the process if learning Java, ouch.
Check the /r/Javahelp wiki
Yes there's always an option. You know what's not an option: not having a qa that mimics production. Not being able to reproduce a bug offline. So you (and jfurmankiewicz) are saying that essentially the main reason to not use a container is because you need to debug code in production since qa is "not an option". You know what this means? It means that there are way bigger problems lurking there than what (if any) container you're using. Dropwizard allows you to push them under the rug, for the time being, not fix them. Container or no container ... that's dangerous, amateurish and frankly a big WTF in and of itself. Even more wtf-ish is bragging about this like this is the way, the wave of the future, the ... Ha, hahaha. Dunno what even to say anymore: go ahead, have fun.
&gt; I too never understood that model. I think that there is the main problem. &gt; When you remove an app from a running container, there's no telling what stays behind Yes there is. This is not magic, is a clearly defined algorithm. &gt; The model is flawed, no amount of fixing will ever get it right It's very much right, for a lot of reasons. Separating apps for the sake of separating is not ok. &gt; So while not getting the most basic mechanisms you need to control apps Say what? Have you ever used an application server?
* Effective Java (2nd Edition) * Java Concurrency in Practice * Thinking in Java * Clean Code 
[best book](http://www.amazon.com/Functional-Programming-Scala-Paul-Chiusano/dp/1617290653/ref=sr_1_2?ie=UTF8&amp;qid=1417615038&amp;sr=8-2&amp;keywords=functional+programming)
&gt; 100% replicated dev/QA environments are not always a reality Because you cannot afford not to be a reality. If you don't have QA you have no business asking money from people. If it's some open-source app that you do in your spare time, sure, knock yourself out. If you're charging a dime ... no. It's amateurish. &gt; you're obviously in a different league where you control 100% of the all scenarios, have the time and budget and staff to replicate everything to your specifications, and not have to deal with some of the situations other have to deal with It's just the cost of doing business. If I don't incur that cost i die. Tomorrow. That's what I don't understand. How can it be even remotely acceptable to push code to production, charge money for it, without the least of qa? This is thedailywtf.com worthy in and of itself. How do you want to even grow as a programmer when 80% of the time you're stopping fires left and right. How can you ask for a bigger paycheck if you let that management stomp all over you and you writing code directly in production? When your code doesn't work, and that code makes it to production, you're only hurting yourself. Management will be quick to take the glory when it does work, and even faster to shift the blame when it doesn't. You, you'll be lucky to still have a job.
&gt;Yes there is. This is not magic, is a clearly defined algorithm. In theory, but class loader leaks and code not properly cleaning out things is all to common. So while it works in theory, in practice after an X amount of hot redeploys leaks start to occur. X depends on the app and on the container. &gt;It's very much right, for a lot of reasons. Maybe we should agree to disagree then here? ;) I think it's fundamentally flawed. It just can't work to support multiple independent apps. The container tried to be a replacement (Java abstraction) of a multi-tasking OS, with process protection and scheduling. But it doesn't do that at all. What I DO believe in, but it's a kind of obscure case (at least I'd like to belief) is to deploy multiple cooperating application modules to the same AS. In that regard, it's really an extra layer on top the ear (or war, or rar, or (ejb) jar). So you'd have: AS ear1 war1 war2 ear2 war3 war4 ejb1 ejb2 rar1 It's logically 1 app, which has 7 modules. ejb1 is shared between war3 and war4, while ejb2 is shared between all wars, as is rar1. If an update of the AS is needed, say to introduce a newer version of JSF, there's no crying about having to update both ear1 and ear2, and how difficult this is, since both ears are logically the same app anyway (and thus developed by the same team etc). &gt;Say what? Have you ever used an application server? Yes, the question would almost be better asked the other way around; have a ever not user an application server for the last 15 years. The answer to that would be no. I work with them daily. Have debugged them (send patches back to origin of course), even have our own builds (JBoss in our case), etc etc. We strictly hold on to the rule of ONE application for ONE container. Containers are deployed to virtual servers. In many cases it's even 1 container per virtual server. SO many problems just go away with that model. Yes, there's some overhead in memory of course. If hardware (mostly memory) is tight we sometimes have multiple containers in a single virtual server, each configured to run on different ports. We also have a deployment pipeline where if anything has changed in our own AS build, the deployment happens in two steps - first the AS is deployed (as if it was an app itself, which to the OS it of course is), and then the EAR (or war) is. If nothing changed in the AS build, that step is automatically skipped and only the EAR is deployed. 
&gt; without the least of qa? Strawman alert: This is not what was being said. I was fairly specific in identifying a 100% replica of production (or 99% replica, perhaps) is not always possible. I don't have a job - I freelance. I've been in situations where code has been tested locally, then tested in a QA environment, then pushed to production, and it breaks. It breaks because of something specific in production that is usually unknown, or not reasonably possible to replicate (usually budgetary or timing). Process X is only running on production servers. Our team didn't know about process X because we didn't write it, don't manage production servers, and the management team doesn't coordinate (intentionally or not) information flow about various environments and other needs. New code pushed out, process X flies out of control and ties up all the memory. No one knows about process X - we're just told "memory is 100% - you broke something". "Can we get on the production server to view the logs and see what's going on?" "No, that would violate security policy". So... go ahead - try to create a replicated code environment that mimics production when you don't have access to production to know what the setup *is*. Give it a go. Is it a good situation? Is it even workable long term? Of course not, but it's how some companies work. I've been involved in more than a couple of these over the decades. For me, it's now easier to walk away as a freelancer, or at least not get as bogged down in the political aspects of internal squabbles.
You can also use CDI... Spring is not the only game in town...
http://jaxenter.com/tutorial-introduction-to-cdi-contexts-and-dependency-injection-for-java-ee-jsr-299-104536.html Spring does something similar, with @Autowire vs @Inject. I'm not 100% sold on the annotations approach, given that I find annotations less flexible, and tending to obscure application behavior. Perhaps this is due to my ignorance related to Annotations in general. I find annotations to often not be 'obvious' about what they do, and perhaps to make matters slightly more confusing, I regularly hear variations of *"Annotations are only metadata and they do not contain any business logic."* Given time to rewrite this with annotations, would I? Not sure. private final Renderer gameRenderer; private final Renderer uiRenderer; MyClass(AppContext gameContext, AppContext uiContext) { this.gameRender = gameContext.get(Renderer.class); this.uiRender = uiContext.get(Renderer.class); } ....versus... @Inject("game") private final Renderer gameRenderer; @Inject("ui") private final Renderer uiRenderer; MyClass() { } Perhaps another alternative: @Context("game") private final AppContext gameContext; @Context("ui") private final AppContext uiContext; MyClass() { } someMethod() { gameRender = gameContext.get(Renderer.class); ...do stuff... } Certainly looks cleaner. The one part I dislike, is the use of strings like "game" and "ui" strings would be somewhat annoying to refactor, because as far as I know the following is invalid: @Context(OtherClass.GAME_CONSTANT) private final AppContext gameContext;
Whoa. I'm saving this for later, you actually made me understand DI / wiring a lot better in terms of its value to me as a programmer. It always confused me how to know where to draw the lines between DI and "regular" style.
You should learn Spring and JQuery. For Spring, you can do no better than reading the excellent and free [Spring Framework Reference](http://docs.spring.io/spring/docs/current/spring-framework-reference/pdf/spring-framework-reference.pdf). Spring is killing it. JQuery is a close second.
While there's some value in using this as an exercise, please please don't roll your own DI in a project. Seriously, use something like Guice instead. 
Well your language there does consist of writing everything in xml right? Do not worry though, the Haskell and Scala people woukd say the same about Java.
Great tip, thank you!
&gt; The one part I dislike, is the use of strings like "game" and "ui" strings would be somewhat annoying to refactor, because as far as I know the following is invalid: &gt; @Context(OtherClass.GAME_CONSTANT) private final AppContext gameContext; Where did you get that? I always define enums for such cases, and if possible, I also use directly the enum type without mapping Strings to each case. With Weld this would look like this: @Inject @Context(ContextType.GAME) private AppContext gameContext; @Inject @Context(ContextType.UI) private AppContext uiContext; where *ContextType* is an enum public enum ContextType { GAME, UI; } and *Context* is a custom qualifier. @Qualifier @Retention(RUNTIME) @Target({METHOD, FIELD, PARAMETER, TYPE}) public @interface Context { ContextType value(); } As you can see, this becomes very verbose. If you add JPA and BeanValidation then this blows up. Usually more than half of all code lines in my model code (MVC pattern) are annotations. The idea that *annotations are only metadata and do not contain any business logic*, altough theoretically appealing, is completely misleading (at least in a JEE setting).
Nice, thanks for the tip! Win 8 Users: Right click column header &gt; Select columns
This is really good advice. However, note that should you find yourself in the rare situation where your custom scopes are not uniquely determined for a single Thread (i.e. you can't just put the current custom scope in a ThreadLocal because a single Thread might use more than one instance of the scope) then you're pretty much f*cked with Guice (or any other existing Java DI framework for that matter). You're very welcome to correct me if I'm wrong. It has already taken days for me to realize this and it would probably save me months if I were wrong because then I wouldn't have to roll my own framework. The problem is easily stated: Once the framework gets a request to provide a certain bean from your custom scope it will ask for the current instance without providing any further information on the consumer of that bean. If your scopes are such that there is at most and one instance of a scope per Thread (e.g. RequestScope) which might be shared between Threads (SessionScope, ApplicationScope) then you could just look the instance up in a ThreadLocal and create instances as they're needed. Now imagine you have instance A and B of CustomScope and neither is tied to the current Thread, in fact the Thread is able to access both scopes, and you want to create a new bean in instance A. How do you tell that to the framework? This issue has been generously overlooked, the whole Guice architecture assumes that scope instances are determined when you call the framework, all it requires for an injection is the required bean type.
you can check this out http://learn2geek.com/best-way-learn-java-online/
I think you need a job change :-) Life's too short too waste it on being miserable at work...every day. Good luck and all the best to you.
Why this isn't on by default I will never know.
Aaaaaand Eclipse is gone, the workspace metadata corrupted and don't forget that damn lock file. I feel you bro.
The `jps` utility in the JDK will give you all the running java processes. Use it with `jps -vml` to get maximum verbosity. It will show the pids, what was executed and which params.
Isn't there a way to make something like "Thread.setThreadName(var)" or "Process."..
It does that? Time to switch to IntelliJ.
VisualVM has a plugin to kill processes. You'll find it in your jdk/bin folder.
&gt; For me, it's now easier to walk away as a freelancer, And walking is what you should do, because the only thing what you can say before pushing to production is: "it may work". And if that's something that's fine for that company, sure, go ahead. In order to be able to guarantee something, to be held responsible for something, you have to be given the tools to do your job. If you're not, then no, you cannot guarantee anything and cannot be held responsible for anything. In this case qa or not qa it doesn't matter. As I said: the problems are much bigger than that, are fundamental. I am going from the premise that I am asked to guarantee (within a reasonable extent, but a very high certainty) that my product will work on a given configuration on a given server. Why? Because it has been tested (it had to be) on that configuration on that server. If it hasn't (cannot) then no such guarantee can be made. If the guarantee is not needed though ... the entire discussion is moot. The "sometimes you cannot have QA" statement can only have one answer: who cares? The product is not required to work anyway. 
&gt; Yes, the question would almost be better asked the other way around; have a ever not user an application server for the last 15 years. The answer to that would be no. The answer to that would be : hell no. (except development). &gt; We strictly hold on to the rule of ONE application for ONE container Then ... what's the difference between the executable jar or the container? You're fine with the executable jar since you're not taking advantage of what the container offers anyway. It comes down to: then what's the point?
Wow, I can't believe I didn't know about this tool. Thank you.
Well, if you kill a process that's writing to your config file then it will be corrupted right? Of course it that needs some mixture of bad luck and unwaryness but once you're habituated to killing processes basically by lottery the law of large number will sooner or later f*ck you over. However, as long as you don't expect your IDE to implement ACID transactions for its config files this can't really be attributed to the IDE but only to your own insanity. If IntelliJ really is better in this regard then either it implements transactional config files (hahaha) or it just fixes corrupt files instead of throwing errors. Neither case would tempt me to switch to IntelliJ and I'm not even talking about its price. I don't need programs that cost your firstborn and silently swallow/fix errors for the purpose of appearing stable. I really hope IntelliJ isn't built that way.
&gt; Well, if you kill a process that's writing to your config file then it will be corrupted right? Only if the programmer who made that application is ridiculously retarded. It takes like 1 minute to add safe-saves features to a file saving method. (Saving to temp file, then deleting original / renaming temp once completed.) &gt; and I'm not even talking about its price. Have been using the CE professionally for almost a year. Zero dollars.
&gt; Only if the programmer who made that application is ridiculously retarded. It takes like 1 minute to add safe-saves features to a file saving method. (Saving to temp file, then deleting original / renaming temp once completed.) The idea that a platform like eclipse that has houndreds of plugins configured on a single project stores all its configurations in one place and recreates that file every single time something has been changed, is simply not implementable. This is not how Eclipse/OSGi works. And by the way, if you kill a program on which you just changed some settings and that's still working on applying those changes, it's your fault if somethings goes wrong. Attributing that to this program is short-sighted. &gt; Have been using the CE professionally for almost a year. Zero dollars You don't need the Java EE stack, right? Because that's where things get difficult (and expensive). If you succeed in bringing Eclipse to corrupt its config files in the SE version I'll send you 10$ right away. Don't compare SE with EE versions, even the memory requirements differ in magnitudes. The complexity in configuration needed for EE projects is far greater what you imagine.
BTW, Heroku handles single binaries just fine for other languages. It's just for Java they have the WAR file limitation. See this Go book: http://codegangsta.gitbooks.io/building-web-apps-with-go/content/deployment/README.html The Heroku buildpack automatically handles a Go binary with an embedded server in it. 
I agree, I often don't use spring at all for unit tests if I don't have to, which is one of the benefits of a DI coding style, injecting mocks. Once a project is up and running for awhile I find that the spring config stabilizes anyway. I wouldn't expect to have it run all the time with every unit test but I would expect it to report errors when a dev runs it locally or when we deploy it to dev or qa. I guess that's what I meant by having it "tested". It's an integration piece so belongs in some sort of integration test.
That doesn't change the executable name of the JVM, which is what you're seeing. That changes the Thread name, I only see those in my IDE.
You misunderstood me. I'm very well talking about the process of saving and I'm talking about what your solution implies for a complex project: Either you save everything in one file, then you would have to reconstruct that whole file every time something changes (which will hog your IDE in a EE setting but probably not in SE), or you have your settings distributed over multiple files. In a EE project it will be the second case. For example: Every EE application server needs sooner or later its own configuration file for launching your project. Those settings are not separable from your project settings and you won't be able to merge them in one file and keep the servers working. You need to swap those configurations simultaneously if you want ACID behaviour. Good luck with that on the JVM, virtually all disk IO is asynchronously managed and you don't have any means of checking if something has actually been sent to disk nor of forcing the VM to flush it. Also the deleteOnExit routine fails completely if you kill the process. You still have to synchronize the process of saving and it's no accident there's a distinct lack of transactional file system frameworks in Java. I'm not accusing you of anything, I'm just saying that those simple 2 line tricks are really too simple for a complex product like an IDE. If you want a Java IDE that can save its configuration under ACID requirements you simply can't store that information on disk because the file system itself and the Java API dedicated to it don't provide ACID even to the slightest degree. You would have to use another storage technology that provides these capabilities. So assuming IntelliJ stores its configurations on disk (instead of SQL-DB for example) your claim that these issues are a pro argument for IntelliJ compared to Eclipse is unsubstantiated because IntelliJ can't possibly have solved these issues in the first place. If I'm accusing you of anything then it's this: The implied but unsubstantiated claim that the issues with Eclipse I jokingly mentioned in my first comment are due to bad coding and that IntelliJ would do a better job. I don't know a lot about IntelliJ but I know enough about the JVM to know that can't be true. Even with perfect programming methods the problem would remain because it's caused by the underlying technology shared by both products.
Well, when I mentioned IntelliJ, I was thinking about my three or so situations where I killed the IDE, without having any issues afterwards. What you said about Eclipse sounded to me like you were reminding a hypothetical audience of a well-known behavior, hence something rather frequent. That's why I thought that IntelliJ might be better in that regard. About splitting settings into many files and the problem of safe saves: Would not a multiple-state-per-file (e.g. current / previous) make the whole system consistent again? I can't think how a killed IDE wouldn't be able to recover from that 100% (except data would be slightly old) when it's restarted.
&gt; Well, when I mentioned IntelliJ, I was thinking about my three or so situations where I killed the IDE, without having any issues afterwards. What you said about Eclipse sounded to me like you were reminding a hypothetical audience of a well-known behavior, hence something rather frequent. That's why I thought that IntelliJ might be better in that regard. Actually, that's what I'm doing. Especially the lock file is a very well-known issue because you will run into it every time you kill the IDE. This has changed by now but it's still present in the minds of the audience I was speaking to. But to be fair, you certainly won't run into the other problems if you don't kill Eclipse during mid-saving of a complex EE project. It isn't as bad as it looks, just a minor inconvenience that has happened at least once to a big audience. &gt; About splitting settings into many files and the problem of safe saves: Would not a multiple-state-per-file (e.g. current / previous) make the whole system consistent again? I can't think how a killed IDE wouldn't be able to recover from that 100% (except data would be slightly old) when it's restarted. The problem is that you can't even be sure that those states have been written to disk after you closed the streams, nor at any other point in time. Java simply doesn't provide the degree of control necessary to ensure consistency in disk IO after a fault (I don't know enough to say this could be solved differently, no idea about that). Say you have to save 2 config files and you wrote the new versions to disk. You can't verify that those files actually exist on disk and not just in some OS buffer. By the time you issue the move command for the first file you can't be save that the other file has been written to disk. If the process gets killed at this point in time, you won't have consistency. What if one file has been updated successfully but for the other file not even the temp file has been sent to disk? You wouldn't be able to infer the correct state from what's left over on the disk. Same thing with deleting the temp files. The JVM doesn't give you enough guarantees such that you can guarantee recovery in every case. The result is that Java programmers don't even start to write ACID for file systems because you won't be able to finish the job 100%, it only makes the code more complex.
Ugh, manual dependency management. I didn't even know Java people still did that... I disagree about the monolithic releases and java language ones though. Vanilla Java is just so wonderfully unambiguous. With Scala/Groovy/... you sometimes have trouble telling what's happening but you don't really get that with plain Java.
You can also right click on the Application you want to end (in the 'Applications' tab) and choose "Go to process" which will select the correct one for you.
Awh :)
Process Explorer is a generally more useful program than task manager. There's also a load of useful sysinternals tools here: http://technet.microsoft.com/en-gb/sysinternals/ 
java sucks. Java 8.25 just told me it refuses to run a Java Applet on GoogleDocs because *googles* se3curity certificate had expired. Either Google is drunk, or Java is drunk, or firefox is drunk. My bet is Java. I discovered this after spending hours trying to get Java 8 to work on a Win 7/64 work machine with SkillSoft. Fail. Uninstalled, installed 7.71. Works. 
Thank you :-) It's Awh :) from our end as developers as well.
&gt; Hm, I guess the problem is that apart from at the beginning, when you check what's on disk, later you'll just be in an imaginary file reality without knowing what's really out there. Is that the problem? Pretty much. To my knowledge the behaviour is OS dependent (if not file system dependent). A linux system would have no problem in reading you from a file you just wrote to but isn't yet comitted to hard disk. If a power outage happened that data would be lost even though you checked its content. I had a linux web server running for at least six hours after some fool pulled out the hard drive in mid-flight. An OOM brought it to fall, not IO. However, the rotation idea is a very good one and it will hedge you against most cases. The problem with Eclipse though is more complicated. You also need to keep the correct history of multiple files jointly and that's what makes it really difficult to implement because all the features have their own configuration requirements and must nevertheless be wired to each other. Take only the plugins for Git, Maven and some application server of your choice. All have their own configuration layout, all must additionally be configured in the eclipse framework and even the plugins themselves rely on each others configurations (think about dependency management). We want to make writing to those files jointly transactional? Saving to this mess in mid-sized EE project can cost you seconds on gamer hardware, without synchronization and I think Eclipse does use multi-threading for those things. Even if you had an OS independent way of rotating one file safely, there be dragons in rotating 100s jointly.
Well if the Java process you accidentally kill is Eclipse itself, you're gonna have a bad time. 
I know, but normally you just hit the stop button from the IDE, since it knows which process it launched. EDIT: I'm assuming that the problem is when you have other java processes that weren't invoked from the IDE, as others have pointed out there are solutions. Visualvm is probably the most useful.
&gt; But if you're rolling all of this on your own, I hope I never end up maintaining your codebase. Oh, please. I've thrown away weeks and weeks of effort trying to get Hibernate to work around something that's easy in jdbc but requires extensive hacking in hibernate. Last one was trying to get a Criteria query to do a "like" on a number field in the database. Trivial in jdbc, massive amounts of hacking to get Criteria to do it. (The easy ways lead to ClassCastException's). You really think it's going to be easier for the next developer to maintain hibernate? LOL. If someone 5 years from now who doesn't know hibernate looks through it, good luck figuring out what's going on. I like Spring Mvc. One of the few frameworks that hasn't caused a "far more trouble than it's worth" solution. Since annotations it's relatively straightforward to look at the code and know what's going on. I haven't used Jackson. I have used Maven. LOL, yeah, good luck to the developer in 5 years guys. Rather than putting the jars in source control where they would work excellent, someone decided we had to use Maven. Maven doesn't play well with the firewall, so you have to manually copy a directory of jars over from a network drive. Then you have to know to press the magic menu item to update Maven. Then, since we're using eclipse, it makes the project not work any more every time you run a Maven update so you have to know the magic path to re-add the other projects to the project facet to get things to actually run on the server. If in the future you aren't sure how your object is created, if you wrote it in java directly you just trace through the code to find it. Initiate it with Spring depency inject? haha, good luck tracking that sucker down if it's not working and you weren't the person to set it up. 
Just wondering. Why do you think it's shit? And please give a decent reasoning.
Same here; that's on of the first toolkits I "install" on a new windows machine I do any serious work with. Why doesn't microsoft ship this by default? Surely they could code up a skin to make it look like the regular gimpy task manager by default.
Fun fact, the instance that led me to make this was a hung Tomcat server launched from Eclipse.
Hibernate: of course someone 5 years later *who doesn't know Hibernate* will have trouble. Now, how many people know Hibernate, compared to how many people know "reallyCoolORMIWroteMyself"? Maven: ah, the old "we'll just keep it all in source control". I hope I never end up maintaining your codebase.
It works sort of like binary delta compression. 1. It runs a query on source and destination DBs that returns two columns: PK and Hash (ordered by PK) 2. It essentially does a join - walking the two JDBC cursors simultaneously comparing values 3. If in left but not right, it inserts 4. if in right but not left, it deletes 5. if in both, and hashes don't match, it updates 6. if in both, but hashes do match, it does nothing So the more often you sync, the less there is to sync. It has a few features like filtering by tables and a where clause so you don't have to sync the whole DB if you only want a subset of the data.
Lock file? What is this, the 1980s?
Changing the process name is highly platform-specific, if it is possible at all. Still, that would be a useful API for Java to provide. Certainly better than "java" everywhere.
This is not true of Dagger v2. Scopes are explicitly expressed in components and validated at compile time. Since the whole system is end-to-end type-safe and compile-time validated you would never be able to create instances in ambiguous scope.
Thanks, didn't know Dagger. I will have a look at it.
Eclipse is $200-$500 cheaper than IntelliJ. That's a bit of a mitigating factor for a lot of people, unfortunately.
Sometimes i forget that some platforms don't have ps. No idea how one could be productive without all the gnu coreutils.
Let me show you the holy grail: "jps -vm"
Holy shit as a java developer this made me fuckin LOL
Nice!
&gt;It's just as good as the professional version. No, it's definitely not. But it's good enough for most people and I strongly recommend everyone to give it a chance.
Standard Task Manager can show you the command line among other things: http://www.reddit.com/r/java/comments/2o5s5e/every_time_i_need_to_kill_a_hung_jvm_process/cmjyll1
Not if it's a process that doesn't have a top-level window such as in this case it's a Tomcat server process.
What is it called?
jvisualvm.exe
Such as?
thanks. I thought there was a command line app that did it. I now see it's a plugin through the gui.
I gave a talk a few weeks ago at Devoxx about it if you want a crash course: https://speakerdeck.com/jakewharton/dependency-injection-with-dagger-2-devoxx-2014. Although without me rambling over it the slides will only be partially comprehensible. If you're looking on GitHub make sure you look at Google's fork (https://github.com/google/dagger) which is where V2 is being developed. The version by Square, V1, is the original repo.
Joda, this guy must be.
Well I'll be damned. That's gonna save me some headaches in the future.
Possibly. Do you have a job offering you wish to post, or are you just a headhunter? You have no posting history on this account so balls in your court
I'm still waiting for a good tutorial on DI that explain how to plug it with Hibernate. Also, since I have no idea who is the best between Guice, Dagger2 or Spring Boot/non-boot/etc, or using CDI... I simply don't bother to learn, since it might become obsolete by the following 12month. Yeah, I known, I'm probably miserable for acting like that.
Check out r/forhire
Shiiiiiit. Why didn't you tell me about this sooner?
Oh my god WebJars is the coolest thing
Does anyone know a good discussion about this containers vs. no containers thing? I'm new to Java web programming and am writing a test app using Jetty, and various JARs for various JavaEE APIs I'm utilizing (Mojarra for JSF, EclipseLink for JPA). Is it really that much better to use Play and trust that it's doing everything correctly? Coming from Django in Python, I'm loathe to use a framework that claims to do everything, but if it's that much better than gluing together Spring/JavaEE JARs, I guess I should start learning about it sooner rather than later
There was a panel this year where they had intellij, eclipse and netbeans. Geertan from netbeans stated the philosophy of netbeans was to be productive right after installation(Or something to that effect) * I like original they used ant as the build system, now maven and gradle. Eclipse is the complete opposite and I see alot of junior guys struggle when maven is being used. * No perspectives like eclipse. So I can open any file and not have to worry that I am in the java perspective and cannot go CTRL + SHIFT + R and xml file won't appear. * Easier to debug, no need to set up various profiles. * I find with eclipse users, that they rely alot on the plugins so they can deploy to whatever appserver they are using, and thus forgo any automation. Tho I have seen some things that are small annoyances recently. * External changes to poms don't get picked up. * Sometimes when sources are generated from maven for jaxb they do not appear(Seen this on another fellows machine, but works on mine) * groovy editor not as good as intellij's * last time I tried the gradle plugin I did find it was rather slow. Having said all that, I am productive with netbeans, it has all the functionality I need. Note with the statements regarding eclipse users, it's just the junior/intermediate users that I have witnessed and not a gross generalization for all users. 
I agree and I generally prefer NetBeans as my primary IDE for the reasons you've stated. Eclipse is pretty nifty and all but in general I'd say NetBeans is better suited for me. I guess Eclipse does have its own niche when it comes to making java apps though.
Agree strongly with your thoughts on Groovy and Scala though for simple tools, prototypes, and non mission critical software I do tend to use a lot of Groovy since it strikes the perfect balance in my opinion between rapid development and still feeling enough like Java that I or the company I work for can a Java developer to maintain/update the program if necessary.
Maybe some Java stuff is still there - you could try [JavaRA](https://singularlabs.com/software/javara/). Also, you could try to install the [JDK](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) instead of the JRE, because it does not come with the Ask toolbar, so if that installer page causes the error, you should be fine. It also doesn't have the browser pluging, so you should be quite somewhat safer - bad luck if you need it though, but that's imho unlikely if you're not at work. The JDK also does not nag your for updates. All that doesn't solve *why* you're getting the error though, and the reason might just be important.
does it handle ddl changes as well, i.e. if the table structure is different ?
If it's good enough for MongoDB, it's good enough for 2014...
Yes, Groovy is perfect for small(ish) scripts like you might also write in Python or Lua. But you wouldn't use it for a big mission-critical application, in my opinion.
alright. it seems like i have a partial installation of the JRE, which is what i think is killing the installer. i'm trying JavaRA now, i'll update once it's finished. Also, thanks for helping me out. this is NOT my area of expertise.
alright, so, i have the JRE 7 now, which is great, thank you! but the Java 8 installer is still a no go. further, the Java browser extension won't install either. any ideas?
You need to put more effort into your problem description to receive more effort from me.
 if (uses &gt; 0) { return true; } else { return false; } This can bother some people. You can reduce this to 1 line, return uses &gt; 0; public void attack(Pokemon enemy, Pokemon me) { This method seems wrong. Normally you would have my pokemon1.attack(pokemon2). If you were going to write a method that takes 2 Pokemon objects, then it would belong to a CombatCalculator class. You aren't taking which private static Pokemon pickPokemon(Pokemon p) { This screams command pattern. It might be a little early for a first year student but if you are interested in bettering yourself then you will probably enjoying reading up on it. The abilities and pokemon could probably be created from raw configuration rather than creating separate classes for each of them.
Thank you, that's exactly the type of advice I wanted to see. I'll look into changing those and look into command pattern tomorrow, as it's 1am now haha. Thanks for the advice. And the reason they were made as seperate classes was because this was originally me just trying to better understand inheritance. I will switch it over to what you recommended, since I have no reason to keep them as classes now that I understand it.
Task manager and resource monitor are good enough for non technical users?
Yeah, the 1 thing that does seem to make sense for a fair amount of companies is building their own toolsets from eclipse. springsource, jboss, mule come to mind readily. I've not seen that with netbeans's to the same extent.
It is worth considering adding this to eclipse.ini: -vm C:/Program Files/Java/jdk1.7.0_71/jre/bin/server/jvm.dll Eclipse.exe will be listed instead and the splash screen appears faster.
Not true in my case unfortunately.. :( That is the game I try and then 'chose poorly'.
[http://i.imgur.com/uX5Mo9f.gif](http://i.imgur.com/uX5Mo9f.gif)
I work on a large, complicated Java app that has 10 different WAR files that it builds. We deploy all of these into Tomcat when we run them in production. However, the build itself uses Maven. And I've made sure that all of them have the tomcat7-maven-plugin installed and correctly configured, such that we can start them up from the command line with a single command, including Maven profiles to point to different Dev/QA systems for development and testing. And for the main business app - the only one that has a database - there's also a profile so that it will start an in-memory HSQL database and use that instead of using an external database. And it all works really easily and really well.
I'm really liking Kotlin as a sweet spot between the clarity of what you're writing but also removing a lot of the verbosity - for example you don't need to define getters and setters, but you can if you want. I also really like the enforced Null safety that it brings along with it, and as of M9 it works really well with Java interop as well...
I think VisualVM is built upon the NetBeans platform.
You're referring to the Java Runtime Environment...not the Java language as to which the article refers.
&gt;Then ... what's the difference between the executable jar or the container? You're fine with the executable jar since you're not taking advantage of what the container offers anyway. There's not that much of a difference indeed. Of course we take advantage of what the container offers, which is a huge slew of libraries and services, but we don't necessarily see an advantage of the thing being installed once by a grumpy system admin and then having the "pleasure" of not being able to allowed to update it. In the grant scheme of things, the container in our case is now just another level of modularity. The libraries it contains (like JSF, JPA, CDI, etc) are at the outer level of layering, compared to libraries that are shipped with any of the ears or wars. If nothing has changed in our container build, the container deploy step is skipped, so this makes the deployment faster. Whether this is still an advantage is arguable indeed. The container is relatively small today, some 120MB for JBoss. The war or ear is maybe 2MB. In 2003 servers were often huge compared to the network bandwidth and diskspace, so deploying a server with potentially every deploy was not always an option. Today, it's less of an advantage. A 2MB deploy is still somewhat faster compared to a 122MB one, but it's not a difference of many minutes like it was in 2003. Restarting the server though is still faster when you only have a few libraries in WEB-INF/lib and the rest in [server]/lib, compared to having say 90MB of libs in WEB-INF/lib, so there's some advantage there.
Do do that have a look on [uniVocity](https://github.com/uniVocity/univocity-examples/#mapping-between-incompatible-schemas). You can migrate data between totally incompatible schemas, detect what changed on the source, and migrate the data accordingly.
Sounds like something for my bookshelf.
And it resets itself when you close task manager
Personally I hate operations in return statements. I'd much prefer to do something like boolean isUsed = uses &gt; 0; return isUsed;
I've heard about it but I've yet to take a look at it. I thought it was a proprietary language though? Jetbrains, I believe. EDIT: Never mind. It's Apache 2.
I can definitely recommend it.
Jetbrains are the main guys behind it but it's open source and at least as general purpose as Java is - possibly more so since it has more functional programming support (lambdas and support for what java 8 does on streams but kotlin does on normal collections...) it also interops with java better than scala does... 
Yes, choosing Windows was a really poor choice, but I bet you have to live with it right?
no connection pooling, messages, shared this or that ... you can put those libraries in your uber jar should you want to. and the grumpy sysadmin: the most important thing for an important app in a corporation is to work. for a container ... same. the developer in you is screaming: I wanna use the shiny new stuff. Reality check: no you don't. Not until the sysadmin made sure it won't crap all over the server, since he's the one who'll get a call at 2am should something break, not you. You have to work with IT, not make them your enemies. If you have a good reason to use the shiny new stuff (code is faster, simpler, etc.) there's no problem approaching IT with your request. If it's important management will support you. There's absolutely no reason to not take advantage of the container. The sysadmin, upgrades whenever the dev feels like, the perceived complexity: this are amateurish problems, all solvable. But i guess it's easier to say: fuck it, i'll be the sysadmin, how hard of a job can it be?
&gt; and the grumpy sysadmin: the most important thing for an important app in a corporation is to work. for a container ... same. the developer in you is screaming: I wanna use the shiny new stuff. Reality check: no you don't. Not until the sysadmin made sure it won't crap all over the server, since he's the one who'll get a call at 2am should something break, not you. Dude! For real???? No sysadmin in the world is going to know why Mojarra 2.1.18 is needed over Mojarra 2.1.19. It's a PIPEDREAM that a sysadmin knowns ANYTHING about the AS internals. You assume that only a sysadmin is a responsible person, while a developer by definition is a fool that only wants shiny new toys. I'm not easily offended, but this is really insulting. Whenever I as a lead developer with 15 years of experience decide that a new version of something is needed, then this is MY decision. I carefully weigh the pros and cons, and assess the stability of whatever needs to be updated, often in negotiation with the team. We have tons of unit and integration tests that test whether the application still works, and three stages (dev, beta, qa) a new version of the application needs to go through before it reaches production. And when something breaks in the code, no sysadmin is going to fix this, regardless of the scary 2AM call. This is irregardless of whather the breakage is in a new version of Mojarra, or in my very own code. So injection didn't happen in Bean A? Good luck with that sysadmin. A sysadmin can reroute traffic, set up and maintain firewal rules, monitor memory usage, monitor disk space usage, operate the loadbalances and what have you. ***BUT NO BLOODY SYSADMIN SHOULD HAVE ANY SAY OVER WHICH VERSION OF MOJARRA IS BEING USED***. This is a code level concern, and to even hint that the sysadmin should decide this because he gets the 2AM call is so incredibly out of touch with reality and the source of so many isses in IT, that whatever company thinks that this is "how things should be done" is on my eternal ban list. I won't take a job from such company and I'll never ever want to work for such place. It's -so- wrong, and if you can't see that, I'm truly sorry for you. 
The best thing about NetBeans is you can get a complete IDE complete with Application servers by installing a simple .exe file. It is not like Eclipse where you have to use all sorts of configuration and plugins to make it useful. It also has great code wizards and Maven support. 
Netbeans is easier if you want to do just Java for just yourself on just your computer. As soon as you're part of a bigger environment (more languages, more people, looser integration), Eclipse might be better.
Or at linux, extract the files and run ne netbeans main file. What took longest at setting up was to read the install instructions. I also like that the NetBeans error messages are (in my opinion) easier to read as eclipse sometimes produces some crypted stuff. When installing Mercurial, NetBeans (on Linux) automatically noticed the extension, my friends using eclipse and windows first needed to install mercurial, some plugins, and add everything to the path variable
Or use process explorer 
If type is an enum you could simple add a function to the enum that returns a hardcoded sprite. I would personally prefer to keep this separate and just for example that you could simply load a file like "img/sprites/types/&lt;fruittype&gt;.png".
Yes type is an enum. And i'm using this.setSprite(with a string to the png); So would it be better to move the switch to its own method and put in the constructor something like: this.setSprite(method that containts the switch that returns a string). Btw sorry, my english isn't very good. xD
It does not reset (win 7).
Try Abstract Factory design pattern. http://en.wikipedia.org/wiki/Abstract_factory_pattern
On Windows platform you can use (out of the box): tasklist /v
You could do something like this: public enum FruitType { APPLE("apple.png"), PEAR("pear.png"), ORANGE("orange.png"); private final String sprite; private FruitType(final String sprite) { this.sprite = sprite; } public String getSprite() { return sprite; } } Then you could just do: public class Fruit { private FruitType type; public Fruit(FruitType type) { this.type = type; } public Image getSpriteImage() { return loadImage(type.getSprite()); } } No need for switch-statements in your constructor. A switch statement would not make sense anyway because this kind of stuff does not change between instances of the same concrete type. 
My place of work choose Windows.
&gt;Why not explain to them? Because in general people not directly seeing the benifit of something can't easily be persuaded. At best it will be a chore for them. The thing is that it's just not needed to explain a sysadmin that Mojarra should be updated. In the model our company uses (and other companies I've worked), the person willing to update Mojarra (i.e. a developer) is also the person doing it. This ensures a greater motivation of people to do things. A sysadmin should simply not be given the responsibility to upgrade Mojarra. There's simply no reason, ever. &gt;But also you have to be aware of his work as well But hit work doesn't have anything to do with Mojarra. He has no business there, and should never be asked to decide about things he has no clue of. &gt;The IT department is not at your feet, They don't have to be at my feet, since there's no need for them to make my decissions. In a devops this is even more so; there's no need to confince a grumpy sysadmin of anything. There's the team, and everyone in the team works together and knows what needs to be done. There's no throwing of requests over the wall to be handled by someone who doesn't know the context and frankly doesn't care. We, and more companies than you probably think, have a process where a team consists of both engineers and people more concerned with the operational side of things, but everyone works together as a team. When the code is deployed, the very engineer that build that code is present. If there are any issues with the code, they are resolved right there. Facebook has a good presentation about this process. Compare this to the ancient waterfal like model where you have a separate engineering team, and a separate sysadmin team. Engineering creates a new app, throws it over the wall to sysadmins, who then configure it (configuration stays hidden of course, since... well, since that's how we always do it), and deploy it. If something goes wrong, there's a painstakingly process to get the right engineer. But that engineer only sees part of the picture, since he's not allowed on the live servers (of course not, since that's what we never allow) and as said he's not allowed to see the configuration. &gt; I really hate working with other people, since when they get bossed around they tend to not help, so fuck it, I'll do their job as well and I WILL MANAGE THE SERVERS THE WAY I WANT TO DAMN IT .... I'm sorry, but you -so- do not understand it. We are a very professional software development team, people have years of experience, and are well known in the industry. If anything, working together is at the heart of what we do. We don't throw a new version of something intro production since, hey, we like shiny toys. As I explained before, the team discusses the need for a new dependency. We have a whole system of testing out new versions, assessing impact, doing CI, QA, etc. Nothing ever reaches production just like that. What we explicitly don't do is divide the team up in two, put a wall between them, and let one team decide about things they have no business deciding about. In this case, the team (which I explained consists of engineers with mixed backgrounds, some have more affinity with the software development side of things, some more with the operational side) prepares a version of the software. This is a bundle consisting of the JDK, the AS and the EAR. This bundle is tested together, and as mentioned this is NOT taken lightly. Eventually this is deployed to production as this bundle. I didn't mention the JDK earlier, but this is actually the first step of the three phase deployment: 1. JDK changed -&gt; deploy JDK 2. AS changed -&gt; deploy AS 3. Deploy EAR The deployment of the JDK and AS are so straightforward and automized, that it's really just a fully automated deploy. There's thus never a need to beg some sysadmin who doesn't know about the need of an updated JDK or AS to update it. Updates of those are simply part of the application deployment pipeline, and the "sysadmin" that is there has already been part of the whole sprint to get to the new version of the application all along. He or she is not insolated person sitting in another office at the other side of the building. So it's not about "managing servers". The deployment of a new version of the AS is not "managing servers", just like updating a jar in WEB-INF/lib is not "managing servers". You're really thinking about the entire process in an 80-ties waterfall like way, which is not longer a reality for many companies. 
Lots of competition in the SQL DSL space with Jooq and QueryDSL
I wish it hadn't been written before The Great Database Crash of 2010 which cost me much (I suppose it's the lack of proper backup procedures that actually cost me, but I digress) but I wrote a blog post at the start of 2005 where I said annotations were inevitably going to get abused and make things, in many cases, no better than alternatives like the much-maligned XML config files. I'm just sayin', you didn't need to be Nostradamus to see it coming, you just had to understand the way developer's minds work as a generality. 
&gt; So it's not about "managing servers". The deployment of a new version of the AS is not "managing servers", just like updating a jar in WEB-INF/lib is not "managing servers". It's not when you're the only app on that AS. But if there are others, from possibly other teams ... then it is "managing servers". Those apps need to run too. &gt; You're really thinking about the entire process in an 80-ties waterfall like way, which is not longer a reality for many companies. No, I'm thinking about the realities of most corporations. You say that your team is a good team. Great, fantastic, congratulations. You're the 1%. Now, what about the other 99%? I used to work in a large corporation too, and to get my own way I got my own servers. I controlled everything from the jdk to the final bits of code. Yes it worked. No, I don't do that anymore, it's fucking stupid. Let other people do their jobs and learn to play nice. you'll get more mileage that way.
I know this is a really old comment but I think [Pebble](http://www.mitchellbosecke.com/pebble) is a great templating engine. For some more opinions on Pebble, [here's a current reddit thread](http://www.reddit.com/r/programming/comments/2o6i7z/pebble_a_modern_java_templating_engine_inspired/). Disclaimer: I'm the primary developer of Pebble.
&gt; It's not when you're the only app on that AS And for that reason alone you should always stick to the rule of one app per AS. There are so many problems that just don't exist if you follow that rule: * But I can't restart the AS since all other apps will go down! No issue if there's only one app! * But we can't update anything since crappy old app X is still on that AS too! No issue if there's only one app! * We don't know which of 10 apps is taking up so much memory! No issue if there's only one app! * Etc &gt;Those apps need to run too. They do, On their own AS, in their own virtual server. &gt;Now, what about the other 99%? It's not 99% that follows the ancient waterfall model. More and more companies out there practice the more lean and agile approach. The "install AS once, don't ever touch, and beg and bribe the sysadmin" thing is just ancient. Spring shops, Play shops, Ruby shops never had this issue to begin with. Java EE doesn't need to have this issue either. I'll do you one better. In companies that think they have that ancient model, where e.g. WebSphere was installed once and may never be touched again, not rarely developers just embed an AS right within the war. Just recently, rather big company I noticed just this. They have WebSphere and nobody is allowed to touch it. Of course the nasty old thing doesn't get anything done. So the application those guys deploy first boots up an embedded TomEE (I kid you not) and then the real code is internally wired/deployed to that. WebSphere is reduced to a stupid HTTP gateway. &gt;No, I don't do that anymore, it's fucking stupid. If you're a single isolated guy, perhaps. If you're a professional team thinking out each step you take with a lot of care, it's utterly stupid to have a clueless sysadmin taking those decissions. &gt;Let other people do their jobs and learn to play nice. But (again), it's ***NOT*** the job of a sysadmin to decide what the version of Mojarra is. I'll happily let the sysadmin decide which brand of switches to install in the network, but the sysadmin has no business whatsover, in no situation and under no circumstances EVER to decide anything about the version of Mojarra (or Hibernate, or Weld, or any of the other Java EE components). 
&gt; the more lean and agile approach This doesn't mean what you think it means (hey, let's go crazy,forehead meet keyboard and deploy when compilation is successful (just joking, this step is optional)). Anyway, this thread went on for too long. Not for nothing though, since I did learn quite a bunch of things: 1. I need to debug applications right in production (kid you not, someone did say that) and it's harder to do that when im not the only one running (he's doing the uber jar executable thingy). 2. I really really really hate everyone else (apps, devs, devops, sysadmins, the moon and the sun together), i wanna be by myself, do things my own way (and I can since i have a good team) so i go the other way by having one app per AS per vm per jdk, which I control. Both solutions can work (depends on how competent the engineers are after all anyway), and they sometimes can work better than other alternatives. Usually, they don't, but don't let that stop anyone from trying. Anyway ... good luck, have fun. 
Reposting the same link that was popular [two weeks ago](http://www.reddit.com/r/java/comments/2n5xe5/a_look_into_the_mind_of_brian_goetz_java_language/) under its mobile url, eh?
Uhm, I think you just replied to the wrong guy or maybe even the wrong thread ;) If you did intend to reply to me, then both points are exactly anti to how we work. The only thing that appeared in what I said was the "one app per AS". I don't know what the "per vm per jdk" even means, and that practice doesn't follow out of the fact that I or anyone hates anyone. The "one app per AS" rule that we established follows from a best practices process that we developed after at least a decade of experience per person. Everyone in the company involved with this understands the importance of this rule and indeed wants to live by it. This includes engineers, devops, sysadmins and support staff. Everything from deployment, to testing, QA, monitoring, load balancing, profissioning and what have you is centered around this model. It's not born out of hate, or out of some childish desire to control things, but out of a firm belief that this way of working is the most professional and productive approach we can think of at the moment. We evaluate our process and architecture from time to time. Currently we're investigating (like basically everyone else I guess) whether Docker and Kubernettes would work for us, instead of the XEN virtual server approach that we're using now.
Not necessarily and you don't have to use something like Play Framework. The issue they're getting at is the need to have an external application server like JBoss that is separately configured and managed. It's quite easy to use Spring with an Jetty or an embedded Tomcat. Setup for our projects is literally clone the repository and run Maven. Done.
&gt; If you did intend to reply to me, then both points are exactly anti to how we work. These 2 things came up from my original post. 2 threads (one with you one with some other genius). My original post was a reply to some smartass saying how the containers are dead and executable uber jars are obviously the future, since the containers are dead (and some new nice http embedded servers appeared). And the point ultimately is this: containers are not dead and self executable jars are not the future. Both can live toghether, both have their place in the hands of people that know how to use them. There are good reasons to use either of them. Only a complete and total moron would make such a blanket statement, that could be taken as gospel by other morons (because ... it's written on the internets). And actually I even saw an article by some dumbass saying the exact thing few weeks back: applications servers are dead since now we have spring boost. Hahahahaha, now that's a stupid statement. and then you come along ... who knows with what problem anymore. Yes, what you're doing works for you. So it does for the guy who debugs code in production. Putting one's head in the sand and choosing technologies because "the internets" and because "whoa...it's new and shiny" is done only by script kiddies (who nonetheless could make the next 1 billion $ startup), not by software professionals that should choose the best tool for the job and who can stand by their product.
This library seems pretty similar to lenses found in Haskell and Scala libraries. Is the author familiar with these the concept of a lens? For the JVM the lens implementations found in Monocle and Shapeless would be a good place to start.
Hint: [Date](https://docs.oracle.com/javase/7/docs/api/java/sql/Date.html) implements the [Comparable](https://docs.oracle.com/javase/7/docs/api/java/lang/Comparable.html) interface.
I personally like to have JPQL queries in their designated own file. See this one: http://jdevelopment.nl/put-named-queries-jpa You can organise them the way you want. Put queries for all related entities in one file, or organise them by some higher level logic, eg all queries used by admins in one folder and then other in another, etc.
With a Comparator?
compareTo() doesn't return the days. only a negative/positive or 0 Returns: the value 0 if the argument Date is equal to this Date; a value less than 0 if this Date is before the Date argument; and a value greater than 0 if this Date is after the Date argument. 
Sorry, misread your question. Use [JodaTime](http://www.joda.org/joda-time/). The built in Java date classes are woefully underequipped.
Or if using Java 1.8 use the new [java.time](https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html) classes, which were heavily influenced by (and if I remember rightly advised by the author of) JodaTime.
quick and dirty...love it 
Nice!
Or just give us multi-line strings finally...no need for separate files. 
Try the [Spring PetClinic](https://github.com/spring-projects/spring-petclinic/) application.
I don't know how popular it is this days, but I still prefer using MyBatis 3. I can use annotations in a mapper or I can define things in XML for complex queries. Everything just gets called from my DAO layer. 
 public long compareDates(Date exp, Date today){ long b = (exp.getTime()-86400000)/86400000; long c = (today.getTime()-86400000)/86400000; return b-c; } 
 @Configuration @ComponentScan("com.foo.bar") public class CoreConfig {} This is unwieldy?
 public long compareDates(Date exp, Date today){ return (exp.getTime()-today.getTime())/86400000; }
Thank you for the response. I'm using a similar setup and have been very impressed with how painless it is. I can easily add new features just by adding more dependencies to my POM. It seems really cool so far so I was bit surprised and confused to read what I thought was a criticism of that setup. I don't have experience yet with the monolithic app servers like Glassfish or JBoss. They're hard to deal with?
I would make a new version or fork it (use your company's group id, etc). That said, our company policy is to do "#2" anyway, but if you rely on this for your problem it's a recipe for later disaster. Imagine you leave the company because you won the lottery. Some shlep comes along and clears the maven cache on your private server, he finds the jar on maven central and doesn't realize that it's been updated and now your code doesn't work.
Thank you for the feedback. The query's annotations was just an example where annotations abuse can get out of hand pretty easily :)
You love it now.... I do millis all the time, but I often find myself regretting and refactoring later. In my most recent project I was using Java 8 so I had the ability to use LocalDateTime and my life instantly got better. JodaTime is the &lt; Java 8 way.
Noooo... You'll fail at the daylight savings/summer time boundaries. Better to do it properly or not at all.
As much as I like Intellij, announcing RCs feels like spam.
...basically the exact same thing
making your own isn't free either. Ultimately, it's fine if you roll your own, but it's fine if I use Spring/Guice/Jodd/whatever too.
Yes, thus the "quick and dirty".
Jotatime
I'll check it out. Thanks!
I just wish they finally enhance it to allow something else than XML. It is so bloody verbose, especially with CDATA on complex queries. MyBatis would be killer if they only enhanced it to support a YAML format as well, where entering multi line queries is drop dead simple and so much more readable than XML.
Very good point. I think changing the GroupId is the way to go. I can still merge in upstream changes from the original maintainer too. Ok thanks!
My point is that like everything in engineering, it's a tradeoff. The reason why I bring it up is that for some reason many people blindly advocate adding third party dependencies as if it is always the best thing to do. They're not evaluating the tradeoff, probably because they haven't understood the downside to third party dependencies. In the short term external libraries are great when you're hacking and get all this functionality quickly and cheaply, but in the long term the cost adds up. It's a constant cost to keep up with the libraries, especially since many library developers these days are happy to frequently break backwards compatibility. I've seen projects die because they didn't keep up with the constant update work, and realized that they were stuck with outdated versions of everything. They had a big pile of external dependencies that had broken backwards compatibility, been abandoned, or moved in a different direction, and the work to get everything up to date would've been overwhelming. I've paid the cost of developing our own foundational components, like DI. It's an up front cost, but the upside is that I don't have nearly as much running cost. I have the components, they work, they're reliable, they do exactly what we want, and they are further developed based on our specific requirements. Of course we do have some external dependencies, but very, very few and very, very carefully chosen.
I went with Netbeans over Eclipse because the code completion always works properly in it. Eclipse's code completion is very buggy. You can use Enter, Tab, Space or a period but they don't always work when you would expect it. It drove me nuts.
&gt; Why this isn't on by default I will never know. Because Windows isn't about command lines, silly!
&gt; productive That's a relativistic term :)
That would still be prone to runtime errors though, whereas /u/johnwaterwood's suggestion will fail on deploy/startup.
It's a surprisingly complex question. What does "days between" mean? How many days are between 3:55 a.m and 7:01 a.m? How many days are between 3:55 a.m and 7:01 a.m GMT, if you're in Grenwich? How many days are between 3:55 a.m and 7:01 a.m GMT, if you're in New York? You probably want to use JodaTime, and do something like this: private static int daysBetween(Date a, Date b) { return Days.daysBetween( new LocalDate(a.getTime()), new LocalDate(b.getTime())).getDays(); }
I'm sorry, I thought the original post was clear. When I run the chrome installer (for the Java plugin) or JRE 8 update 25, I receive an error code 1603, just after telling the installers that I do not want to install the "ask toolbar". 
Yes compared to guice. Try it and see
We #3 and increment the version number. We include the full groupid beneath our heirarchy to make it clear: com.ourorg.3rdparty.org.providor.lib::lib
That was pretty funny,I stopped watching 1/2 way through the rookie though. 
This just in, one of the JetBrains developers just went poop. More at 7.
Accessors are very like lenses, except that they mutate values in place rather than returning a new value with the modified property substituted. For "proper" immutable lenses in Java 8, see [Octarine](http://github.com/poetix/octarine).
...I literally just need the number of days between two dates
&gt; WMIC PROCESS get Processid,Commandline Displays ID and full command line. Then to kill the process: &gt; taskkill /f /t /pid &lt;processid&gt;
I definitely prefer it over any other IDE. I used Eclipse for a while and just couldn't stand the design of its interface. Eclipse also makes simple things complicated. After months of using Eclipse, I finally got too fed-up with it and started the search for a new IDE. When I found NetBeans, I couldn't believe how much better it was than other IDE's I have used. It has the clean, crisp feel that programmers love and I thoroughly enjoy programming with it.
The function has a name that should describe what the return value is
Also in the news, EnragedMikey has a spy camera in JetBrains' bathrooms.
&gt; ... and the endorsed standards override mechanism and extension mechanism have both been nixed That statement concerns me somewhat. It never seemed good that these were *necessary*, but I hope they've got something in mind, so either these solutions aren't necessary anymore, or there's any another way to do what they're currently doing (e.g. I believe overriding the version of JAXB that comes with the JRE for a newer version).
A colleague of mine coined the term Annotation Driven Development to describe the trend in Java. :) 
We suffix our own qualifier and monotonically increasing integer to the version. "1.0.0-square-1", for example. This allows Maven/Gradle version conflict resolution to still work properly.
I feel like Java EE Tutorial is sometimes an "overlooked gem" because it's extremely dense with jargon and doesn't really explain that much.
&gt; Please seek help with Java programming in [/r/Javahelp](http://www.reddit.com/r/Javahelp)!
Nevermind, thank you for the feedback. I have just started to make tutorials and I am in a need of that.... Sometimes I am not sure if I didn't "cross the line" with the jokes :).
http://docs.codehaus.org/display/GROOVY/Groovy+Truth 0 is evaluated to false in an if statement. y == false fails because one is a boolean and the other is an integer. 
Hi, the medium security level has been removed from Java 8u20. https://www.java.com/en/download/help/jcp_security.xml
I thought it was great. Entertaining, and something I'd actually like to play with that I'd never heard of before. Thanks for sharing! 
It definitely should. If you have to scroll up to find/read the method name though, that's kind of annoying and not very efficient.
Great stuff, Roberto! I feel extremely proud everytime i see one of your posts ;) Keep it up!
The idea of deploying a war to an installed application server? Probably. The application server itself? Probably not. The main difference will be that you'll just deploy your AS to a container, in the same way that you now deploy an app to the AS.
Groovy '==' is actually java .equals() for objects. With the if statement there is 'implicit type casting' going on. Java only accepts a boolean false, Groovy accepts a null, zero, or false as being 'falsy' in conditionals. If you need to test if one object reference equals another use if(this.is(otherObject))
OP's link history indicates he's unlikely capable of recognizing that line in the sand.
Thank you Fábio :)
You could export functionality through [JNI](http://www.ibm.com/developerworks/java/tutorials/j-jni/j-jni.html) or [services](http://martinfowler.com/articles/microservices.html).
I've struggled to understand the benefit of this JEP, or others like it. There's not a lot of benefit of bringing a JSON API into the Java Core, given that we already have APIs like Jackson and Gson that do a perfectly good job, aren't difficult to use and aren't especially large to distribute with your app... The idea of pulling everything into Core has the risk of leading to stagnation - if JSON processing is in core, why bother developing Jackson or Gson? - and there are better things to spend time working on... (Note - I do agree that JSR-310 should be in core, because Date/Time stuff is so important to get right, and impacts on so many things)
It worked well with XML : DOM, SAX, JAXB... It would only make sense to have a similar APIs in the core for JSON. But I agree that there are more important things to spend time working on.
Did it though? JaxB is certainly very useful, but would have been just as useful as a third party library instead, and right now there are quite a few different ways of parsing XML in the Java core. And then because Java needs to remain backwards compatible, these core APIs stay around forever. With third party libraries, at least you can only depend on the ones that you need and not need to include things that you don't care about. 
Install Cygwin and stop being a masochist. Or you could still be masochist a little and install a VM, but whatever, you do have to live with the choices others make for you correct? Edit: My point is you don't, if that wasn't clear ;-)
-__-
Same here, though we have had problems with bugs in the JAXB version that ships with particular JREs and as such have to mandate that a particular micro version of Java is used...
and don't forget 4) Sending a patch upstream and getting your changes integrated in the project.
Ehh. I'm usually not a fan of multiline strings and just end up using ""+(\n)+""+(\n)+... Idk. I'd like to use multiline strings if rx/(I understood better how)? they interacted with indentation/.
/r/groovy
Nah, jokes were good. I've used roo and forge before - not really my thing TBH, but it was entertaining enough to get me to watch 1/2 of the video which is a feat :)
This is a good thing. Oracle should be focusing their Java development budget on things that can't be done as simple libraries, and it seems like they are.
Have you seen how inactive that sub is? Also it is diluted by lots of posts having nothing to do with programming. Thanks though!
Ah. Wasn't really sure if this was the right place or not, thank you. 
Thanks!
Not necessarily hard to deal with though they can be. It's more an issue of the dependency on an externally setup application. Now everyone has to set it up before they run your application, which implies they probably have to go through some work to launch your application in it. Then there's the possibility of version differences between environments. On top of that it's not uncommon to need to configure the application server, so now you have the external setup, the configuration, the version problems. Then consider something like JBoss. It comes with a certain version of Hibernate, for example. What happens when that version is incompatible with your application? It's a pain to update and doing so often reveals other incompatibilities in libraries that were contained in your application or the application server. You very easily end up with the 10 page configuration document the blog referred to.
wow, thank you very much. That's a huge success for me :)
Great, I am glad for that then :) For any questions, you can join #forge IRC channel on freenode
&gt; Oracle should be focusing their Java development budget on things that can't be done as simple libraries, and it seems like they are. And what is doing Oracle for JDK9 that needs more focusing? new c# is offering a lot of good stuff for their new version. If Oracle starts to drop things, i dont see what interest will cause this release. Unless they include value types / primitive generics ...
NOPE! order of operations is really important when you are dealing with integers and division. things which mathematically are equivalent are NOT when the output of every operation is an integer.
It may be required, for an assignment say, to use the java.util.Date class. However, in the long run this class will cause FAR FAR more headaches than it appears it might. Do NOT use it unless there is no other option. This is because time is far far more complicated than it initially appears. (Even Jodatime, which is awesome, got it wrong the first time out. ( note that DateMidnight is now deprecated, review why! ) ) Time is so weird because there are exceptional cases. For example Daylight saving time. And Leap Seconds (OMG weird ! ) I would highly recommend either a) http://www.joda.org/joda-time/ The equivalent class is "DateTime" (my preference ) or b) the new java Java 8 JEP 310 package ( they are very very similar ) For the JodaTime version. You want to use a class called DateLocal to represent your dates. This class knows about the weirdness ( for example some timezones don't have days that start at midnight ). Regardless we want to convert the two dates to a "Duration" after asking the DateLocal's what the start of the day is for each of those dates. Now you want to report the Duration in units. You've asked for "number of days" and the Duration class has something for this getStandardDays() returning long. So all told you have something like: public static void main(String[] args) { // if you are doing alot of these, this formatter is thread safe and should be created ahead of time and used lots. DateTimeFormatter df =DateTimeFormat.forPattern("MM/dd/yyyy"); LocalDate today = new LocalDate(); LocalDate a = df.parseLocalDate("06/18/2015"); Duration da = new Duration(today.toDateTimeAtStartOfDay(),a.toDateTimeAtStartOfDay()); long numDays = da.getStandardDays(); System.out.println("So, "+a+" is "+numDays+" days from now"); } 
Jigsaw. 'Nuff said.
Two new proposals have been added in. * 228: Add More Diagnostic Commands http://openjdk.java.net/jeps/228 * 229: Create PKCS12 Keystores by Default http://openjdk.java.net/jeps/229 http://mail.openjdk.java.net/pipermail/jdk9-dev/2014-December/001671.html
What's a form file with swing? Never heard of such a thing 
Annotations and runtime code generation is what keeps Java alive. Without either Java would be somewhere between Cobol and Perl.
I prefer eclipse, but now I'm using NetBeans since gtk doesn't play nice with kde. both are highly annoying each in their own way. Tried idea for few months(forced myself to use it) and I just had to dump it. Idea is by far the most annoying piece of software I have ever used(though to be honest my son's iPad is competing hard for that spot) Working with web apps on NetBeans is an exercise in frustration. Pages are far from resources, from unit tests... It wants to deploy stuff to servers (now I know how to tell it to shut up), is all in all quite not a good experience. Oh well, is better than the alternatives . 
I meant OS level container (eg. LXC, Docker, Rocket, etc), not application server container. 
This would be the safest bet.
Bitch this isn't stack overflow it's reddit stfu
'Should' is a dangerous word in mvc. Mvc can appear in lots of different ways that can work in a given situation. With that said... The point of mvc is decoupling the gui from the business logic. The model is the business logic, so mvc doesn't really say how different models should be related. Still, dependencies should be kept to a minimum in order to maintain the separation of objects and responsibilities.... so that an individual class can be replaced without changing the other classes. In short, I think you should avoid the dependency if possible, but I will admit I only skimmed your post.
You're both sort of right, but neither idea seems very appealing. You sure you're both using MVC correctly?
Yes, this is called a stored procedure. Don't reinvent the wheel, just use stored procedures. 
No, we're not sure! We've read a lot of articles, but this problem seems hard/unique to us and we can't find an example like it.
This sounds like an awful version of stored procedures. See if you can use those instead: http://en.wikipedia.org/wiki/Stored_procedure . Look closely at the "Comparison with Dynamic SQL" section. Alternatively, consider implementing these functions through your ORM or database access layer (jOOQ, etc). If you think that these options don't give you what you need, elaborate here and someone will be able to help you find a better solution. 
if you do that, Josh Bloch will come to your house while you're sleeping and teabag you to death.
thanks, stored procedures are what I needed to know.
Map&lt;String, Map&lt;String, Map&lt;String, Object&gt;&gt;&gt;. I think we need more cowbell.
Well, what's the problem you're trying to solve or what's the system you're trying to model? Maybe MVC isn't the correct pattern to apply.
I can only say as much as what's in the SO thread, sorry. :(
I am working on a legacy system that has a "master" SQL statement in a single row, one column table. That master SQL calls other SQL statements in other tables, which, depending on the results of the statements, call other SQL statements in other tables, basically forming an expanding tree of statements all nested away in different spots in the database. FML.....
Thanks for clarifying. I have the situation that multiple applications and services need to be deployed to one servlet container so we only need one port number. Is that a valid counter example that spring boot type of thing cannot be my choice?
But we already have [JSR 353: Java API for JSON Processing](https://jcp.org/en/jsr/detail?id=353) which is comparable to DOM and StAX and [JSR 367: Java API for JSON Binding (JSON-B)](https://jcp.org/en/jsr/detail?id=367) which is comparable to JAXB. I never understood what this JEP would offer. JAX-WS made its way from EE to SE, if we really needed JSON support in core, why not use those JSRs? 
Might have better luck in /r/javascript 
Beautiful solution. I love that enums in Java are full blown classes. So many elegant ways to solve problems using the method you've outlined here. OP, this is a good method to solve your problem. 
source?
I had a feeling that superfluous individuals were about to approach me with manifestations created by their underdeveloped brains. I am God. You are not needed here.
What i do is use the generare gui into java source code option in Settings -&gt;GUI designer and after any form designer changes i make the project again. This way i avoid any use of java2c in gradle.
Those are two distinct skill set. Teaching/Communicating and Programming. Given that programming is universal and english is not the first language for many programmers worldwide, it might fall a bit short - unless the interviewer has a bit of patience, knowledge and an ability to see beyond the covers. I remember one of the best hires i made couldn't speak much english beyond a few mumbling phrases. I asked my secretary to informally talk to him, and then let him loose among my developers for an afternoon - with the proviso that they give him a machine, some help when needed etc. That guy built a complete, though simple game in Turbo C using BGI. It turned out that his entire schooling had been in his native language and he had never been exposed to english. Conversely i know a lot of people who can BS quite a bit about technology but fall flat on their face when asked to code anything of significance. Nowadays i don't even trust my own interviews and, after a preliminary chat, i let them loose in my lab.
I'd rather get the json api one that those two.
That should be: public class MyFirstJavaProgram { public MyFirstJavaProgram() { System.out.println( "Hello World!" ); } public static void main( String[] args ) { MyFirstJavaProgram test = new MyFirstJavaProgram(); } } The reason you see no content assist is because your starting point is invalid. You code was not withing a class, to start with. Next, you needed to put that attempt at a print inside a valid location--I chose to put it in the Constructor method. You could have put the print into the main method but normally main should just fire off the constructor method, as it does in my example. 
What is up with the player on that site? Such a horrible UI. How many reasons could there possibly be to redesign the "play" button. I can only think of zero.
Because the application server in this case refers to Java EE. You may not want to use its classical deployment model (AS installed on server, deploy application archives), but that doesn't mean you also don't want to use its APIs and features (JSF, CDI, JPA, etc). 
Is there an RSS feed for the podcast? I didn't see one jump out at me...
I see that you are using eclipse on Linux because I recognized the font. If that is the case then your problem would be that Linux is intercepting the ctrl+space combination. Google on how to disable it for your linux distribution. Happy Coding :)
This is what will en up as POST, but I'm having it get for easier testing. get("/write/:data", (req, res) -&gt; { String data = req.params("data"); FileCarver.writeJSONtoFile(data); res.redirect("/"); return "/"; }); I won't copy/paste the whole d3 code since this is the only important part in it: d3.json("data.json", function(error, treeData) { root = treeData[0]; update(root); }); This all works fine. The get route writes the parameter to the file. The d3 script generates graphics out of that file. But if I update it, nothing happens.
Thanks, I'll give that a try. But it's mostly a SparkJava problem as is. But somebody over there might have some experience with it.
First stop using Swing, use JavaFx instead.
The Swing tutorials from Oracle are pretty good with explaining JTables. I had to use one recently and didn't know anything about them prior to the Swing tutorial, but it was easy to grasp what I needed.
Unless OP has a Windows skin in a distro of Linux, this is definately Win 7/8
There is a tutorial on JTable [here](https://docs.oracle.com/javase/tutorial/uiswing/components/table.html). You may want to use an IDE that includes a GUI builder, like Netbeans or IntelliJ. They make it significantly easier to build Swing applications quickly.
 http://corejavainterviewquestions.podbean.com/feed/ is the feed for the podcast. Been trying to find a decent wordpress plugin or something for displaying a "subscribe to rss" but have had no luck. I've added the link to the page now. Edit: Now put it through feedburner. Much easier. http://feeds.feedburner.com/CoreJavaInterviewQuestionsPodcast
Stored procedures are evil. There are two good things 1 - They can easily allow you to have business logic externalized 2 - They externalize SQL Some argue that it helps security. Those people need better security practice. Cached query plans largely mitigate any performance differences. Good programming practices also mitigates this. Why are they bad? 1 - They externalize business logic in an unmaintainable way 2 - They are totally unmaintainable 3 - They are not at all even remotely translatable. You get hit with massive vedor lock in the second they are considered 4 - By comparison to other methods, there is literally 0 tools and processes designed for stored procedures 5 - They seem great at first, till you get a list of 7000 stored procedures. At that point, DBA rip what's left of their hair out and the list starts growing fast and faster as they just say "screw it. I'll never find the one you should use, here's a new one". 6 - If you didn't get it yet, THEY ARE COMPLETELY UNMAINTAINABLE. Avoid at all costs. There are much better suggestions in the thread that aren't stored procedures. Granted, there are cases where stored procedures make sense. But definitely DO NOT rely on them for everything. If you are going to start stored procedures, document, document, document and document more. Because once you go there, theres often no coming back. There's nothing to help you but your own internal processes with them. So it's extremely important to make your own searchable documentation. Web services. Dynamic SQL, etc. There's a host of better options out there.
Google Java Physics Engine. I don't think you understand how complex this problem is.
Eclipse now offers the free Window Builder Pro plugin, as well. Bidirectional GUI design tool. http://help.eclipse.org/indigo/index.jsp?topic=%2Forg.eclipse.wb.doc.user%2Fhtml%2Ffaq.html 
This is a really really simple use of Docker. All the magic is on the spring-boot ability of start an embed web container with the command line: java -jar app.jar You should try just to have a felling about how docker work.
It really isn't specific to Java, and as /u/thomasgalvin says; it's a really hard problem. https://en.wikipedia.org/wiki/Collision_detection
For irregular shapes you can use Separating Axis Theorem, I've not implemented it myself, but it is what some physics libraries for collision detection. This looks like an okay tutorial: http://gamedevelopment.tutsplus.com/tutorials/collision-detection-using-the-separating-axis-theorem--gamedev-169
The poster wants to store SQL in the database. You think they should store it in text fields in a table instead of a stored proc? They didn't ask for opinions on their design. How are stored procs worse than storing them in a table? Most of your bad points can be mitigated by good design practices - even your 4 points that say the exact same thing (1, 2, 4, 6) 
Edit: /u/bearcherian has a much better link below. This is all I could find for release notes: https://jira.codehaus.org/browse/MASSEMBLY/fixforversion/20750
Which version of Eclipse are you installing? You also may need to downgrade your JDK verison to 7u71 to get Eclipse to work
I just had 5 java oriented interviews yesterday XD
Im not op but id like to hear a few. i have worked with swing a fair bit (all code, no builders) but have been thinking about catching up on fx and possibly getting over my phobia of gui builders.
physicist here, pretty sure i did this in first year but i forget how to speak in code etc and this is my first day at looking at this reddit. pretty sure you want to use coulombs law as thats the force that makes objects come apart after collision, http://en.wikipedia.org/wiki/Coulomb's_law. then again I'm probably over complicating it.
Yes, the problem concerns 2D objects and at this stage I'm only talking about detection.
I used Clover, Emma and Cobertura in different projects and I can't understand why people still pay for Clover. When we used it about 12 years ago, there was no free alternative, but today, I don't see the value over either of the free tools. As for debugging, your best friend (as you already said) will be your logs and your debugger (Duh, I know). If you have a simple enough system, I often find that having a secondary logging of serialized "command-objects" describing the full state of the system's inputs helps a lot in reconstructing what led to the failure, but I understand that that might take a while to proxy over all the stuff within the system. It does carry the massive benefit of having a repeatable way of reproducing your errors or being sure that it's either a synchronization issue somewhere or some form of external state you forgot to add to your command-objects.
I would be curious to know what those would be.
I checked out Emma and Coberture and they just focus too much on % of code covered by tests. I am more interested in things like Class complexity, and finding Classes that are used heavily through out a project. General hints about the quality/state of the Project seems more useful, telling me 60% of my code is covered doesn't say much imo. That's why I was leaning towards Clover. SonarQube seems to do the same, but is free. The setup is really weird though, poor documentation as well.
Or just use CLOBs. By the way, see me in my office this afternoon. I have a project for you.
Well, the scene builder is a really big plus. I've been using swing with code for a long time, but stepped to miglayout and Eclipse window builder pro in the later stages of my career, for the same reason I use the scene builder right now: it's a time saver! Face it, gui programming (the actual layout part) is boring and time consuming, fx really has a nice solution for this. Scene builder produces FXML, wich can be styled with css. The FXML is human readable and can call methods in controllers (no more action listeners to bind buttons to actions). This saves a lot of time. You can still do swing like programming using layout managers if you want, but I recommend using the builder whenever possible, it's pretty good 
Call me a cowboy, but I have yet to see a project where those metrics made a difference. The way I approach these projects is try to cover as much of the code (as counted in block percentages) as I can with (semi-) functional tests and the ones I couldn't, I start asking people if that bit of functionality really is needed. Get people to reply to emails of you asking those questions with a yes or a no. Support often becomes requirements management pretty quick. When it's done, start restructuring the code, with the support of your testcases. If you have time, invest in a good testsuite. Worry about functionality, not about abstract metrics that no user cares about, describing code you will refactor as soon as you get a chance anyway.
It's hard to know what you mean without the actual error messages. What does the error actually say?
Well this is great, much easier. The problem you are dealing with has been solved tons of times before. So please don't reinvent the wheel. I'd be shocked if you can't find a library that does a fine job. One consideration is always accuracy vs speed. And one way to do speed is to have two levels of collision. The first level is FAST but can only guarantee non-collision. The second level is run only if the first level can't eliminate a collision. It is slower, but perfectly accurate. 
Hi I am learning Java from scratch and am doing a project soon next year, it would be great to get your help and tips when I struggle with it. Thanks I am English as well? 
here's some help to start out (not trying to be mean about it) "I'm looking for someone who wants to learn Java". and good luck with finding someone. Besides that, it sounds like you are better at speaking English than a lot of people already.
I agree that OP speaks, at least writes, very good English
Perhaps handy to know: in Process Explorer those child java processes stand out as they show up under the parent Eclipse java process in the process tree view.
I am using Windows 8 hehe but I will try to do the same for my computer! Thank you so much!
I would definitely agree with you - One of my current pet peeves at work is having unit test code coverage goals. The number is pretty reasonable (70%), but its annoying to have to explain any given week to my manager why code we checked in as at 60%. I'd say that code coverage is an OK barometer of how well tested your code is, but I can write a test that gets 95% coverage and checks a fraction of the use cases that I might care about. What I like to do is focus on the functionality, write the tests, and then use code coverage as a double-check to make sure there wasn't anything significant that I had not thought of previously. 
Have you tried serving your JSON as an in-memory string/object and not as a file? Could be any number of reasons, from immutability to caching. I don't think D3js (or even Spark framework) is the problem, you could be using any simple AJAX call and you'd get the same results. Is it absolutely necessary you serve data from a file in src/main/resources? Try creating a JSON object with some random numbers, or the current time, and accessing it with D3js and see what the result is.
well you get to the base case when n = -1, so it returns 1; then each step up is subtracted from that so you have 1 - 1 = 0 for Recurse2(1) 0 - 3 = -3 for Recurse2(3) -3 - 5 = -8 for Recurse2(5) -8 - 7 = -15 for Recurse2(7) Does that make any sense? Recursion can be pretty hard to wrap your head around at first
but you aren't adding 5+3+1+1, you're subtracting all except the base case so 1 - 1 - 3 - 5 - 7 it might help if you change your println: public static int Recurse2(int n) { int result; if (n &gt; 0) result = Recurse(n-2) -n; else result = 1; System.out.println("Result of recurse2("+n+") = "+result); return result; } Ninja Edit: changed it to print on the base case as well 
I think this is very cool I hope you find someone. I am already a professional software engineer but if you can't find anyone I'd be willing to help with you English.
Are you installing on top of an existing version?
I am actually in High School taking AP Computer Science to learn Java, I'm not looking for a tutor but someone who could help me actually learn the language cause I feel useless without knowing somesort of coding language.
&gt; I think this is very cool I hope you find someone ... I'd be willing to &gt; help with you English. Heh, not a good start.
I'm an undergrad cs major considering dropping the major due to the quality of the program (I'm also a math major and the cs dept. is terrible here!). I have basic familiarity with java (I've taken up to data struct. in it). I speak English quite well and would love if we could help each other out! 
Yes go with a stored proc
Sir, be my Santa, pick me please :) 
I'm going to evangelize [OrientDB](http://www.orientechnologies.com/orientdb/) now. I love this database, love the SQL-like language they use, love the native Java bindings, love that the CEO-himself is active on stackoverflow the google user group (4 questions I've had over the course of a large project using OrientDB he has personally answered, the guy is great). Neo4j is great, too. I experimented with it a bit, but not too much so I can't formulate a totally accurate opinion about it. I haven't used the REST API, I've used some of the Cypher language (I "get it" but I'm not a fan). I think it's changed a bit since I used it back in October. Just learning Cypher query language I corrupted my "schema" a few times and had to hard-reset. I think they have schemas now, not sure. Schema-less design was a huge pain in the ass while learning the database. I liked how much closer Neo4j is integrated with tinkerpop stack, but after using OrientDB for a while I realized none of it was even necessary. The only thing I couldn't get OrientDB to do was import/export databases over REST, but I didn't really try very hard. OrientDB also has a much nicer back-end web interface, much cleaner, faster, more powerful, and easier to use. I haven't tried managing any "big data" with either of these so I can't speak for performance, but I believe they're both relatively similar. If you want my honest opinion, I'd say give OrientDB a solid shot before thinking about Neo4j. In the end I think Neo4j just has a better marketing team, and that's about it.
As anyone who has studied a foreign language probably knows, writing and speaking a second language are two very different things.
How have you all found performance to be? Is it fairly simple to optimize in general?
Neo engineer here - can you elaborate on what you're missing in the admin interface in neo? We did a big update of it with the release of 2.0, and have been building on that since. Feedback on what's missing is super welcome! &gt; In the end I think Neo4j just has a better marketing team, and that's about it. Its not *just* marketing :) Try, for instance, `kill -9` neo4j under heavy write load, and compare how many transactions neo told you were committed with what's there when you start back up, and then do the same test with our competitors. 
I would love to learn from you, I haven't used Skype in forever but I'd open up my account again for this
Haven't tried to serve it as a in-memory string. The data is supposed to come from an 3rd party client that POSTs to the server. And the easiest way I thought of, was to write that to a file and let the javascript refresh every once and a while. When I paste a different json in the url bar, I can clearly see that the file changes and when I restart the server I'm presented with a different chart. I got a reply over at "r/javahelp" that said that the sparkjava framework most likely treats the files as immutable.
I second anything with the Tinkerpop stack. I've tended toward Titan a few times just because that's what another project at my work uses. I do like how polished neo4j is though.
Sorry, please check again
No, no, no. I don't have anything against IBM, I think the mainframe as a platform has a lot more going for it than people give it credit for. But their programming tools are behind the curve in many ways. 
Anything by Jetbrains. But not necessarily over 400$. 
It's called virtual memory or swap.
Try adding **-XX:+PrintFlagsFinal** to see what the JVM actually allocated to the heap.
Wasn't `-Xms` supposed to allocate physical memory?
Wasn't `-Xms` bound by the amount of actual physical memory?
It can work, but if it actually needs to allocate to non-existent memory, crashes be your world
Hello. I have a written java exam coming up where you have write the ouput of code given the input. Could you help me with this?
OMG Thank you so much I have been searching for so long. Someone else in my team used the background label without removing it when he decided not to use it :/ Thanks a lot 
Yep, pretty standard error really. Though my guess is that Background.png doesn't exist at that location (since the form of the other resources is the same). OP, this is a pretty rudimentary error that points right to the problem section of code. You may want to look into [how to read and understand stack traces](http://stackoverflow.com/questions/12688068/how-to-read-and-understand-the-java-stack-trace)
You wrote -Xms32gb you should put -Xms32M for 32mo and -Xms1024M if you to use 1Go of ram (but it's a lot, generally you start at 64M and you allow a Max of 512M with -Xmx) 
I'm also interested on this.
No, never. It's just (and has always been) the minimum size of the heap. From the point of view of the OS, regular programs such as the JVM should not care about physical memory, and they generally do not, and generally cannot (there are system calls and privileges for the few programs that truly need it).
Very roughly speaking, it's just the size of the first call to malloc. How malloc behaves is very much OS dependent.
-- Sory, this reply was for the wrong comment! :) -- 
-Xms1G works just as well as -Xms1024M, and is more legible. -Xms1gb gives an "invalid initial heap size", at least under Windows, so the "gb" syntax is invalid there. -Xms is also generally a useless option, specified out of bad habit dating back to very early JVM versions.
&gt; It's called virtual memory or swap. More accurately, virtual memory = RAM + swap + peripheral I/O (and probably others I'm forgetting). The OS handles the reality, and only shows virtual addresses to the programs.
You tried to copy paste things instead of actually learning what the code does. That's what's wrong.
Pretty good for a million vertices. I am interested in titan for scaling, but I think neo4j has a Hadoop scaling solution too.
Also, you want to use println instead of printIn.
The errors in your code tells me that you don't even know how methods, brackets work or what static and void mean. This is fine. I am not bashing on you for not knowing this. But to me it seems like you copy pasted some stuff and now when it doesn't work you want us to fix it for us. I could fix the code for you, but you won't learn anything until you actually learn basic object oriented programming first. This in return means that I would just be working for you for free without you learning anything. That ain't happening.
Hey I am currently working on a android application and would love to exchange skills with you. I am currently a teacher so would love the opportunity to help you help me.
Specifying the minimum heap size is useful if you know the heap is likely to grow above a certain size and want to avoid the initial heap resizes to get there. 
Thanks for sharing. Some examples would be great.
http://stackoverflow.com/questions/tagged/java
That's because at the end of your for loop, k has the value of i because of the loop condition k &lt;= i. In the loop, you're trying to print n[k]. Because the array only has i = k elements (so the indices go from 0 to i - 1), this will throw an ArrayIndexOutOfBoundsException. Change the loop condition from k &lt;= i to k &lt; i and you should be fine. Also: The time difference will be in nanoseconds, which is not really readable to the human eye. You could do (ende - start) / 1000000.0, which would print the result in millisecons. Hope I was able to help. Also, there's a subreddit dedicated for java related questions, /r/javahelp, where you should be able to get help more easily.
__^[wow ^so ^verify]__: ^/u/bolzano_ ^-&gt; ^/u/firedroide __^Ð10 ^Dogecoins__&amp;nbsp;^__($0.0022925)__ ^[[help]](http://www.reddit.com/r/dogetipbot/wiki/index)
just a little note on your coding practice. try using more meaningful names. n, k and i are really not good. for example in your case instead of n you should use Fibonacci, that will make the purpose of your array much more clear. i, k and j(i know you did not use this) are generally used in for-loops and nested for-loops. they refer to [Unit Vector](http://en.wikipedia.org/wiki/Unit_vector) in physics. so a general nested for-loop will look like this: for( int i=0; i&lt;size; i++){ for( int j=0; j&lt;size; j++){ for( int k=0; k&lt;size; k++){ //code } } } it is much better to define i, j and k inside the for-loops so if you have many loops they don't end up conflicting. i would personally(in no way 100 correct) name your variables as bellow: i to input in to console n to fibonacci k to i(convention) or index one last thing since i am guessing you want the time it take to create you Fibonacci sequence, you should move your start to top of your for-loop, since you have no idea how long it will take the user to actually input something and the time will pollute you sequence calculation time. also if you end up having more timers in your code later or even if not, its better to give more meaningful names to your start and end like startFibonacciLoop and endFibonacciLoop.
You should check out CardLayout. You can setup panels which are assigned a different 'card' and it automatically flips between them based on a selection. 
Resizes at best cause a stutter and at worst cause a crash. Have set my xms and xmx to the same value for years. Very rare app you would not so this.
Agreed, schemas can be incredibly helpful. We're moving to a schema-optional model, where the default mode is "anything goes", but where you as a developer can constrain the model and enforce schema where that is important. The first step there was introducing unique constraints and schema-based indexes in 2.0. There's lots more to come in this category :)
Neo4j *is* open source, it's on [Github](https://github.com/neo4j/neo4j), licensed GPL/AGPL. You can download it for free on [our website](http://neo4j.com/download/). It is true that, for our enterprise edition, if your project is not open source, we do require a commercial license (as per the AGPL). But there is a reason for that - we intend to build a viable business. You should be able to choose Neo as your database and trust that you'll keep getting cutting edge features, and that ten years down the road there will be someone answering the phone if you run into trouble. If the pricing has been too steep in the past, I encourage you to reach out again. We're not in the business of trying to starve startups. Enterprise edition is free for companies with &lt;3 employees (*personal license*), and for startups with &lt;$3M annual revenue there's a separate license as well. 
What kind of app do you use that has a visible stutter when its heap increases? Have not set Xms for years, no problem for me.
Server side apps such as high frequency trading or SAAS web apps.
Hey, thanks for all that detail, that was exactly what I was looking for. There's been a good bit of work on the Neo4j Browser in 2.2 (which had milestone 1 out a few days ago) - there shouldn't be any issue with the bookmarks, but let me know if there still are (or open a GH issue). It does let you swap to a tabular layout as well for results. I'd encourage trying neo4j-jdbc, or just the native JVM API if you're running in the same process. For embedded usage, in 2.2, your "minimum viable snippet" looks something like: GraphDatabaseService db = new GraphDatabaseFactory().newEmbeddedDatabase( "/my/db" ); try(Transaction tx = db.beginTx()) { // Create a user db.execute("CREATE (u:User {name:'jakewins'})"); // Find a user Result res = db.execute("MATCH (u:User {name:'jakewins'}) RETURN u"); .. }
No. If you didn't know stored procedures before you created this thread, they are DEFINITELY not what you need to know, but rather what you need to avoid. Same goes for storing SQL strings in a table, by the way.
Peter certainly does :) As do the rest of our exec team, we remain a company with a very permissive culture, at least in my opinion. Talking about Peter - he's working as an advisor for us now, and is spending much of his time with a new startup, competing with google street view :) Check out Mapillary: http://www.mapillary.com/
There's no hadoop backend - but I'd encourage you to compare neo to the competition when it comes to storing and querying large amounts of data. There are *lots* of production deployments of Neo4j that have billions of nodes and billions of relationships. There's a new batch import tool shipping with 2.2, which clocks in at around a million records ingested per second. There's a reason we spent engineering effort making it that fast, the datasets neo runs in production are some of the largest graph datasets out there.
why would i do that? i want the latest versions of both
nope
Some OSs are lazy about really allocating memory until it's been written to, you can force the JVM to eagerly zero out memory at startup with this flag: -XX:+AlwaysPreTouch
I believe the problem is swing does not automatically re-render on all actions. You need to tell it to redraw the screen. Of the top of my head calling repack on the frame after switching the content pane should do the job and force a re-render. As for the warning from what I can see in your code you write to the myFrame field with myFrame = this but never read from it anywhere in the mainFrame class.
I really hate if software companies don't make their prices transparent! Why don't you write the prices on the [subscription page](http://neo4j.com/subscriptions/)? It the same thing business dinosaurs like IBM or HP do.
We used to have our prices there, and I think its those prices /u/curmudgeon99 is referring to, and his/her comment in a way highlights why we took them down. The prices we had there were what we charge from big, established companies. For those deployments, our prices are significantly below the industry average for databases, and in the average deployment where we replaced an existing system the customer cut infrastructure cost multiple times. All in all, that meant the prices we had there were *very* low. You put in a cost equivalent to one or a few engineers, and get back the output of several hundred people around the world. However, for startups or smaller deployments, that price list was still intimidating. Like I mentioned, we're not in the business of extorting small companies or strangling startups, we want to be flexible. So, we took the prices down, because that allows us to make case-by-case deals, particularly for startups and small companies.
That is fantastic. Peter, Marko and Luca are always super responsive on the gremlin group, I have no idea when they sleep.
Java version 8 makes a few significant changes that may affect the whole Eclipse install process. However, this may not be the issue overall. Are you using 64 bit Eclipse or 32 bit eclipse, as well as 64 or 32 bit JDK? These need to match for Eclipse to work, as Error code 13 points to this issue: http://stackoverflow.com/questions/4945178/cannot-run-eclipse-jvm-terminated-exit-code-13
Agreed, it's a very nice framework and keeps getting better.
I'm curious, any particular reason for posting this now? Don't get me wrong it's a great library (I've used it on one of my personal projects, very easy to use), but it doesn't seem like there's been a major release/etc to trigger the post.
Thanks! I'll keep it in mind! 
Jake, Pardon me for mistating the license. But, as you noted, when I tried to use Neo4J on a large startup, it was *way* too expensive to use. Unless I had planned to give away my intellectual property, it was not going to fly. At this point, too, it's too late to revert. You have a great product but your revenue model killed off the golden goose--at least in my case.
Yeah, you're right. CDI is a concept someone should probably learn after basic OOP. I also realized after I posted this that OP didn't specify that this was being run in a container, so CDI probably wouldn't be useful anyways.
I noticed there is a new release on Maven. It seems to support a few new image types. Full release notes are on github.
Jackson and Gson are proprietary crap like Spring that only exist to get you into a vendor lock-in. You should not used them.
Exactly. Tried to use the kiss principle to encourage a google search.
Not that I'm aware of. Xms is the minimum heap, and heap is virtual memory.
Yes, that's the idea. I'd say it's fairly mature. Latest release is 2.6.0, documentation is great, it supports many different graph databases, and it's been around for 4+ years (v0.1 was released in 2010). One thing I'd say is that (like any database abstraction layers) you need to be aware of potential sub-optimal behavior in the queries generated by the framework. Some blueprint implementations for graph databases are better than others. But I understand the neo4j one is pretty good.
Interesting... This may help my thesis along a little bit faster.
Do your own homework :P Google is your friend. He will help you when you are stuck.
Turn up hibernate logging to trace. It will show the query/interaction being executed in hibernate that is failing.
Repack resizes to the preferred size of all components together. Wich in turn repaints the panel. If you don't want to resize, just call repaint and revalidate in conjunction. 
Thank you for the response :) this is really helpful. I managed to solve the problem by seperating my panels and having them all unique and to not have any duplicating elements.
or , you know, always return the same datasource (by name). just that the profile will determine what provides that datasource (c3p0-h2 backend or something from the app server).
It definitely helps the readbility of your code if your panel is your own. For intance you want a JPanel named UniversalJPanel, so do it like this: @SuppressWarnings("serial") public class UniversalJPanel extends JPanel { public UniversalJPanel createGridBagTitledUniversalPanel(String borderTitle, String name) { UniversalJPanel basePanel = new UniversalJPanel(); basePanel.setBorder(createOrGetTitledBorder(borderTitle)); basePanel.setLayout(initGridBagLayout()); basePanel.setName(name); return basePanel; } This will help you diferentiate between your own components and the defaults. Also you will save time by not setting the same fields all the time on your own :) When you have time and this is your own project, take a look at Spring Framework (which we like to say at our company: It's good for nothing and everything). It will help you bootstrap your application and save you hassle with dependency injection, RMI etc. It is a bit advanced stuff but save it for later and definitely look into it: http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/
Im using 64 bits on both versions, would you suggest intellij community edition if eclipse wont work
There are some similarities here with the MBean specifications. For example it provides a means for exposing a bean's properties as readable and/or writeable. 
Make a swing UI
How does your code interact with XML/JSON serialization frameworks, or Spring, or bean mapping, or Hibernate? If your code is isolated from all the major frameworks in Java then yes, you don't need to care. A Beans spec is about *how* to share data between frameworks at a higher level than just reflection.
/r/javahelp is pretty much dead? With 15 posts in the last 24 hours and responses in under an hour? Oh. WTF. Seriously. I just found your post that you made there. Posted **EIGHTEEN MINUTES AGO**.
For JSON I use gson, which does not require beans. The selection of frameworks that use beans seems to match closely with the selection of frameworks I've evaluated and rejected for my use cases. That's probably due to the same design approaches and ideas being behind both JavaBeans and those frameworks. I guess it simply boils down to different approaches and ideas on how software systems should be built. &gt;A Beans spec is about how to share data between frameworks at a higher level than just reflection. But it's a poor way to do that since it mandates that *my* code uses Beans, or more likely that I have to translate between beans and my internal data models at every framework boundary. Instead give me an interface that describes in minimal terms what your framework requires from its data, and I'll give you an implementation.
I'd like to threaten you with the worst possible Hell now, but I'd like to keep contributing to the community here, so I just take notes in private.
My point is that you're a dufus.
intelleij is a valid option, as well as Netbeans for an IDE
See https://translate.google.com/translate?tl=en&amp;u=jaxenter.de%2Fartikel%2Fjava-ee-8-interview-mark-struberg-177714 for the translation.
Out of curiosity, what would be your standard stack for a web application? I always wanted to do non-beans-oriented development, but failed to find a way to get everything I need. I mean, how do you handle persistence, security, transactions, etc...? Have you created your own libraries for everything, do you have a list of libs you like? Do you at least use some sort of dependency injection? If not, how do you handle testing? I seen to have forgotten how I did things I the time before Spring...
I've used lamdas(especially the functional interfaces) to construct a matrix containing only the functions. The functions are indexed via Enums ordinal() integer and I can access a single function by calling Function&lt;Double, Double, Double&gt; function = matrix.get(EnumA.A, EnumB.B); double result = function.get(2,3); Creating the matrix was something like that matrix.add(EnumA.A,EnumB.B, (x,y) -&gt; x*x + y*y); Yes, I could have done this the pre lamda way by creating anonymous classes, but two thing: It is aweful to create something like that: matrix.add(Enum.A,EnumB.B, new Function&lt;Double, Double, Double&gt;() { public double get() { return x*x + y*y; } }); Lamdas have better performance than creating an instance of an anonymous class. The compiler will create static methods for this and a method call is cheaper than creating an instance and call its single method. Summary: You can do everything without lamdas, but they will be ugly and no programer would use Streams without lamdas.
Is there a JavaBeans 2.0 spec coming or is this just dreaming?
Oracle controls Java, so its their choice. I'm willing to work on a Beans v2.0 if Oracle will agree its needed.
Thanks for explaining your approach. It sounds like you are well away from the middle of the bell curve of Java development (through choice), so Beans v2.0 may not affect you. 
I think the benefits start to show when you look at the api that allow you to uses them. Streams, RxJava etc ... Not that those api were not doable before but anonymous classes were not very much liked. If you look how some problem get solved now with the Stream api it is very neat.
One thing that I'm still waiting for people to start doing is Ruby-style configuration. For example, instead of WidgetSettings settings = new WidgetSettings(); settings.setWidth(15.6); settings.setColor("#FF0000"); // red Widget widget = new Widget(settings); something like Widget widget = new Widget(w -&gt; { w.setWidth(15.6); w.setColor("#FF0000"); // red }); To me, the second is much cleaner and more readable. As for what it's used for now, here's an example of something that's easier to read/write with lambdas/streams: // given int[] integers = new int[]{2, 4, 6, 8, 9, 11, 13, 15}; boolean anyOdds; // with lambdas anyOdds = IntStream.of(integers).anyMatch(n % 2 == 1); // otherwise anyOdds = false; for (int n : integers) { if (n % 2 == 1) { anyOdds = true; break; } } Edit: Came up with a better example
&gt; Is it a feature that was added just to appease folks who are coming from a functional background? No, it's a feature to make Java more expressive to prevent people from quitting to a (more) functional language 😈
I've been using this with a project where I have to store data attributes of image uploads. It is pretty handy. Too bad there isn't any support for setting metadata, though.
Wow, butthurt much? :-)
Properties, auto hashcode/equals/toString would make Java beans a lot easier to read... I hope Oracle will be interested by a new spec 
The JPA type converter is really cool and I'm glad type conversion has been standardized. So much easier than a Hibernate type converter. Then again, the Hibernate type converter has hooks for dealing with stuff like serializing values to the second-level cache. I wonder how this interacts with caching? Especially if you create EncryptedString objects instead of mapping String to String. Which, by the way, I would recommend. It's nice to have the type system tell you if the string has already been encrypted.
I seriously hope so. Perhaps, you can even encourage bringing C# style properties into the language level. Although, I do understand the Java Achitects goals and why they want to solve those problems first. I really don't see a downside to having these community side projects to bring newer features faster.
If you have to make it work as an app then you need to import the swing package I would think and then fundamentally change your code to make it a GUI app. I won't go into making a web app because I don't know a thing about JavaScript. I would look on StackOverflow if you get stuck with the code for making a GUI app.
*instance initializers Yes, but that's not quite the same. My syntax is functionally equivalent to providing some sort of configuration object. Yours should be creating an anonymous inner class. Additionally, yours adds `setWidth` and `setColor` to `Widget`, which I might want to be immutable. Finally, your settings wouldn't be available in the constructor.
JavaBeans implement generalized data binding. JavaBeans started as a component model targeting UIs because that is the most natural use case. Swing was designed around beans. The idea is that you can easily implement two way bindings. This is a very useful feature that has found its way into other technologies, such as EL, which is the foundation of data binding for both JSTL and JSF. If you use the XML layout in Android, beans are used for data binding there, too. JavaBeans are everywhere. The problem with beans is that properties are implemented using reflection and coding convention instead of being made a first class language concept, probably because of the usual suspect - backwards compatibility. Meanwhile, other languages like Scala and C# have made properties first class citizens. Java has Project Lombok which lets you use annotations to specify certain members variables as properties (and writes the getter/setter methods for you). TL;DR - beans are very useful, but maybe not in your problem domain.
This is the same entertaining presentation that Dr. Venkat Subramaniam gave at JavaOne 2014. It's by far the most concise yet complete explanation of Java lambdas that I've seen. 
Maybe Oracle should look to Project Lombok. They seem to have implemented a fairly concise representation for all of those things but is backwards compatible with existing code.
5 interviews in one day? That sounds fun
We'll see how things pan out. I'm happy that we can keep the core OSS. It's a fine line between providing something of value for money and alienating your user base.
Everything is 'interesting' once it goes through Google translate
I'm thinking you're using the Hibernate Validator (on purpose or not) and some of the validations are failing. See [here](https://stackoverflow.com/questions/4067920/what-would-cause-an-hibernate-invalidstateexception).
Usually anonymous inner classes are used to implement callbacks on behalf of the containing class so that the anonymous inner class has the same lifetime as the containing class. The reference is never meant to be shared outside of the containing class. Thus, the anonymous inner class having the parent reference is not an issue. The anonymous inner class in this case is not being used that way. You are creating an extra class for convenience. As opposed to a callback, which is unlikely to be shared outside the containing class, this is an independent reference, which if shared by the containing class with another class, takes the entire containing class with it. The lifetime of the independent reference has been tied to the containing class, even if such association were never intended. This is an example of one of the most common causes of memory leaks in Java. Objects that are effectively not being used but cannot be reclaimed by the garbage collector because the object contains an unintentional reference to a longer lived object.
I think performance is the key. I have heard that Lambas can better be fished off to other cores allowing Java to take better advantage of a multi-core environment. This alone should encourage you to explore using them. As for readability, I would say that anything new is non-intuitive at first. Once you start using the, you might find them more readable than reading an Anonymous class.
One key difference that pops up in my work is that all anonymous inner classes are `protected`. Passing any non-`public` class to a `JSObject` from a JavaFX `WebEngine` causes permission exceptions because it uses reflection.
&gt; The class where the above statement is written? Yes. &gt; If so, why would the anonymous class contain a reference to it? Because that's how anonymous inner classes work. &gt; Once the code is compiled, the anonymous class is not really any &gt; different than any other class. The java compiler adds the this reference of the parent class to the anonymous inner class when it compiles it. That is how (apart from not having a name) an anonymous inner class is compiled differently than a regular class. This implicit reference added by the compiler is the source of problems, if you didn't mean for that reference to be there. 
I don't have any links offhand. But it is very easy to demonstrate. Run javap and check the generated bytecode. I'll reference a [Stack Overflow answer](http://stackoverflow.com/a/5054363).
You should look up JScrollPane for the text area. You can display text and make it editable, as well as set it up to dynamically resize the page to allow for scrolling.
I know I'm a bit late with this, but I was a UCM admin at one of our projects, I even oversaw all the other IBM developer tools at the time at the company (as an architect, this was in large part my job) and I have to say that even though they did a lot of stuff a lot earlier than others, nowadays I much prefer Git, Jira, Fisheye and the others to the IBM suite. 
As a followup, what's the best way to get an introduction to how to use functional programming? I can read about the syntax for lambdas, but I have a hard time coming up with situations where I'd use them because it's not a concept I've really looked at. The intro doesn't have to be java, I just want to get an idea of how functional programming is used.
I believe it is not about people ***coming*** from a functional background rather than people ***leaving*** to a functional language! ;-) Of course functional concepts have proven - especially over the last years - their extraordinary capabilities to enable parallelism. That counts a lot these days because of Moore's law and the "big data" buzzword ;-)
Hmm, I'd argue that for this trivial case the second example is as clear and certainly could be written to be as succinct if you use static imports of utility methods: for (int n : asList(-3, -2, -1, 0, 1, 2, 3, 4, 5, 6)) { if (abs(n % 2) == 1) { out.println(n); } } I'm not denying the usefulness of lambdas but I think you have to be careful with trivial cases because it only looks "more readable" if you're already familiar with lambda-style code. A more impressive example would demonstrate how many try/catch scenarios are abstracted away using lambda api methods.
Nice project, keep it up.
Oh I'm not using it any more. Im just using sockets now. Sure was a little harder but its good to do things the hard way some times. 
It's just the way the Java compiler works. The compiler does not optimize that way. I don't think it has anything to do with reflection.
Thank you. I've got plenty of features I want to add, code that I want to refactor, GUI elements to tweak... Where do I go from here lol..
If you can keep the memory usage low, and logging, I can see a lot of people using it.
I wonder if much of what might be in such a spec would be covered by value types or related work. http://openjdk.java.net/projects/valhalla/ http://openjdk.java.net/jeps/169
Yep, I've got the logging going - and its live as well so it writes to the log file as it receives it. There are two modes - channel logs or server logs. The channel log is just what you'd see in the chat window, the server log has absolutely everything that is going on, it even tells you if it was handled by the client or not (good for troubleshooting at the moment). I plan on also limiting the number lines in the text window also to help decrease memory usage. All toggleable of course. 
&gt; My only complaint […] is that whereas Scala and Kotlin both went with the short "var" and "val" keywords to distinguish mutable vs immutable variables, Ceylon chose the longhand "variable" and "value." I’d like to point out that only `value` is a keyword; `variable` is an annotation, and *can* be renamed with an import alias: import ceylon.language { var=variable } var Integer foo = 0; You really shouldn’t do that – it hurts readability, because most people won’t look up your import aliases before reading your code – but you can do it if you really want to. Also, the quote sounds a bit like `variable` and `value` were symmetrical. Just to avoid confusion: they’re not; variables don’t work like this: variable v = 0; They work like this: variable Integer v = 0; where you can substitute `Integer` with `value` (type inference): variable value v = 0; And for an immutable value, you simply omit the `variable` annotation: Integer i = 0; value v = 0; Just my two cents :) Very nice article!
I really love the pluggable subsystems of Wildfly. Keycloak is another example of a great subsystem that can be added. Hopefully, there will even be a marketplace of subsystems that people can use to build their own custom servers.
This post is better posted in /r/Javahelp because /r/Java is for: &gt;**News, Technical discussions, research papers and assorted things of interest related to the Java programming language** as is clearly stated in the **sidebar** where you would also find: &gt;**Please seek help with Java programming in /r/Javahelp!** **Also:** be sure to read the [Posting Guidelines](http://www.reddit.com/r/javahelp/wiki/posting_guides) on /r/Javahelp before you post. /r/Javahelp is **anything but dead**, but since you didn't actually bother to show **any effort from your side** the answers there will be quite limited. The [Posting Guides](http://www.reddit.com/r/javahelp/wiki/posting_guides) over at /r/Javahelp clearly state that you, as OP, have to **show some effort first** and **that you should prepare a proper post** with detailed explanation and **if possible, some sample code**. You failed to comply with all of the above and thus you won't receive much help there and even less here.
This post is better posted in /r/Javahelp because /r/Java is for: &gt;**News, Technical discussions, research papers and assorted things of interest related to the Java programming language** as is clearly stated in the **sidebar** where you would also find: &gt;**Please seek help with Java programming in /r/Javahelp!** **Also:** be sure to read the [Posting Guidelines](http://www.reddit.com/r/javahelp/wiki/posting_guides) on /r/Javahelp before you post.
This post is better posted in /r/Javahelp because /r/Java is for: &gt;**News, Technical discussions, research papers and assorted things of interest related to the Java programming language** as is clearly stated in the **sidebar** where you would also find: &gt;**Please seek help with Java programming in /r/Javahelp!** **Also:** be sure to read the [Posting Guidelines](http://www.reddit.com/r/javahelp/wiki/posting_guides) on /r/Javahelp before you post.
This post is better posted in /r/Javahelp because /r/Java is for: &gt;**News, Technical discussions, research papers and assorted things of interest related to the Java programming language** as is clearly stated in the **sidebar** where you would also find: &gt;**Please seek help with Java programming in /r/Javahelp!** **Also:** be sure to read the [Posting Guidelines](http://www.reddit.com/r/javahelp/wiki/posting_guides) on /r/Javahelp before you post.
&gt; TBH: I was just copying of the code because only after I have mastered it, I will modify the code till I get what parts of it are the ones that make the code 'tick' hehe That's the wrongest possible way to learn. Type out the code letter by letter. Try to see the patterns. Look at the errors you get, search for the errors, analyse the red squiggly lines, etc. By copy-pasting you don't actually learn a single thing. You think that you learn, but it will not imprint in your memory.
This post is better posted in /r/Javahelp because /r/Java is for: &gt;**News, Technical discussions, research papers and assorted things of interest related to the Java programming language** as is clearly stated in the **sidebar** where you would also find: &gt;**Please seek help with Java programming in /r/Javahelp!** **Also:** be sure to read the [Posting Guidelines](http://www.reddit.com/r/javahelp/wiki/posting_guides) on /r/Javahelp before you post.
This post is better posted in /r/Javahelp because /r/Java is for: &gt;**News, Technical discussions, research papers and assorted things of interest related to the Java programming language** as is clearly stated in the **sidebar** where you would also find: &gt;**Please seek help with Java programming in /r/Javahelp!** **Also:** be sure to read the [Posting Guidelines](http://www.reddit.com/r/javahelp/wiki/posting_guides) on /r/Javahelp before you post.
A marquee for joins and quits isn't a bad idea, but maybe consider adding a toggle for the transcript view to put it inline. Some people do care about those as they happen, or want to view the history at a later time (they could toggle it later and see the events as they occurred). Cool project, though! I've also created IRC clients as a way to learn new languages. It's a perfect way to learn a language's basic networking and GUI. The IRC RFC will help you a ton, by the way. 
This is really amazing. Going to test it right away.
that would be great
We're already experimenting with it here, have been for a while (MIR) Good job, Mario :D
Is that you Richard?
Yes sir
Given the Beans v2.0 spec I outlined, it is reasonable that the fields of a value type could be exposed as properties (without needing to have public getters or a no-args constructor). Value types is actually a key motivation to move Java beyond JavaBeans v1.0 and its fixed mutable/reflection view of the world.
Since you could already declare anonymous instances of Runnable and Callable and close on them, this is really just syntactic sugar. In fact, if you create an anonymous Runnable or Callable in IntelliJ in a Java 7 project, it visually collapses it into a lambda expressio.
Ooh, that initializing *is* nice. Watch me put it in *every single class ever* from now on!
Can interfaces define instance variables? Each of the Archer, Horseman interfaces have variables (number of arrows, assigned horse) associated with them. I guess the answer is to define accessor methods in the interfaces and leave the actual instance variables up to the implementing class. As the nun said, there are many solutions, none of them pretty.
&gt; That’s the main reason one of my colleagues advocates XML over JavaConfig: with XML, you’re sure there won’t be any abuse while the project runs its course. Clearly his peers aren't trying hard enough if he hasn't seen XML abused. 
You can also just make methods named the same as the properties which return "this" so you could write: WidgetSettings settings = new WidgetSettings(). Width(15.6). Color("#FF0000"); 
Despite what the title says, this article is just some badly written Ceylon hyperbole, e.g. &gt; But Ceylon looked at the problem with fresh eyes and found brilliantly simple improvements that resulted in an even stronger, safer, and simpler type system than Scala's! Incredible! Amazing! Fantastic! &gt; which allow Ceylon to provide tuples of arbitrary length. By contrast, Scala's tuples have arbitrary length in a different way -- they're arbitrarily capped at 22! If you'd like to use a 23-element tuple in Scala, you're out of luck! If you're trying to use 23-element tuples you're doing something seriously wrong. &gt; Ceylon has again made clever insights to simplify matters even further here, and along the way it somehow also delivered reified generics (the ability to recover generically compiled type information at runtime, a seemingly impossible feat given Java's type-erasure architecture whereby generic types are discarded during compilation). Type-erasure is handled by the *Java* compiler, mostly to maintain backwards-compatibility with source code and byte-code written for older versions of the language. Ceylon, being a different language, *has its own compiler*, which isn't bound by the same restriction, so I don't see what's so "seemingly impossible". &gt; Getters and setters are seamless Great, what other anachronisms does it have? etc.
My body is so very ready.
&gt; If you're trying to use 23-element tuples you're doing something seriously wrong. The point is that some other recent languages (including Scala and Java 8) don't provide a single interface that abstracts over all function types. So for example, in Java you have a bunch of SMI types, and in Scala you have `Function1`, `Function2`, `Function3`, ..., `Function22` or whatever, and matching `Tuple1`, `Tuple2`, `Tuple3`, ..., `Tuple22`. (FTR, in Haskell, apparently, you have [this](https://downloads.haskell.org/~ghc/7.4.1/docs/html/libraries/ghc-prim-0.2.0.0/src/GHC-Tuple.html).) The issue is that this approach means it's not possible to abstract over function or tuple types of unknown arity in Scala, Java, or other similar languages. Which makes it difficult to create certain sorts of abstractions in those languages that are possible in Ceylon. For example, in our typesafe metamodel, we're able to have a `Function` and `Method` metamodel objects that abstract over all function and method signatures in a typesafe way. Or, as a second example, our generic higher order functions like `compose()`, `curry()`, and `uncurry()` work for functions of arbitrary arity, not just for functions with a certain fixed number of parameters. Besides, an arbitrary upper limit set at the arbitrary number 22 is just not elegant. And elegance is to me an important animating design principle. &gt; I don't see what's so "seemingly impossible". Well, I'm not the author of the article, but I interpreted that as a gentle dig at all the folks we've heard claim that it was impossible or at least impractical to implement reified generics on the JVM. I highly doubt that the author thinks that something that Ceylon and Gosu actually _do_ seems impossible _to him_. &gt;&gt; Getters and setters are seamless &gt; Great, what other anachronisms does it have? Eh? Property abstraction is anachronistic? That would make it difficult to explain why so many new languages now have it. I guess I don't understand your point here. Are you saying it would be better to: 1. continue with Java-style `getFoo()`, `setFoo()` methods, or 2. just force all attributes of a type to be fields, directly accessed, with no possibility for intermediation or polymorphism? To me, both of these options are unacceptable, and, thus, property abstraction is a totally useful thing, and well worth its weight.
So sorry, was not aware of that subreddit. Thank you for redirecting me I will be sure to post there next time
&gt; from _your point of view_, [this is the implementation of `Tuple`](http://modules.ceylon-lang.org/repo/1/ceylon/language/1.1.0/module-doc/api/Tuple.ceylon.html). Note the `native` annotations in this class, which are your hint that something special is going on.
Sure, there are a million ways to do it. The nice thing about the ruby-style syntax is that the `Widget` class can take care of the lifecycle of the configuration object.
You're right. I didn't put enough thought into the second half of my comment. I think having the verbs (filter, anyMatch, etc.) makes streams clearer, though. An (any|all)Match example would've been better, as that tends to be a ugly in imperative languages. Here it is with fair initialization: // given int[] integers = new int[]{2, 4, 6, 8, 9, 11, 13, 15}; boolean anyOdds; // with lambdas anyOdds = IntStream.of(integers).anyMatch(n % 2 == 1); // otherwise anyOdds = false; for (int n : integers) { if (n % 2 == 1) { anyOdds = true; break; } }
Yep, thats already in there. You can have it show in both the text window or just in the marquee :). But yes, i've been using the IRC RFC and it's a little confusing but it's been handy when something doesn't quite make sense. I agree, it seems like a very good (relatively simple) way to jump into a language. Best of all, it's actually achievable - and I will probably actually finish it.
I would appreciate to know why I am being downvoted? Am I wrong about performance? Am I wrong about readability? If I have a misunderstanding, I want to know.
I feel so lucky to have had him as a professor.
Yes!? Your question is rather vague, but one could create a rain-meter in many software languages including java. Depending on your use-case, it may make more sense to use other languages, or a combination of Java plus other languages.
Look into [JNA](https://jna.java.net/). You can use it to call native windll methods you'd need to create a desktop app like rain-maker
put in color support, that's where it will get difficult, assuming you used just something like a plain text field or label to display the text.
Is there a text summary somewhere?
I've seen examples with JavaFX where the window has a transparent background. I'm not sure how you could remove the icon from the taskbar though. 
Yep, Thats already in there. I just haven't set up a proper way of handling messages for the formatting. I'm thinking something along the lines of adding a method that returns a Font object depending on the typing of String you feed into it. I've got an IRCUser class as well which I want to be able to set individual text formatting depending on the person - so this will override the main formatting of the channel text.
Github link? EDIT: Also, try and split it into two packages if you have not. A frontend package, and a backend package. The frontend starts the backend, and uses it to connect to servers, and the backend handles most of the logic. It should be to the point that you can completely replace the frontend with a different frontend, and the backend with a different backend (as long as they use the same APIs!) and it wouldn't make a difference who wrote them or how as long as they functioned as expected... This may be a while off though. This would allow you to make your code more modular. People could make a backend library that actually uses JNI to call a C library if they wanted. Or a frontend that is written in C, C++, etc, and use graphical toolkits such as GTK+, Qt, and as long as they have a wrapper (prob using JNI to connect the two languages), it would work.
I'm not sure if i'm ready to share the Github link at the moment - it's very amaturish I suppose. But what do you mean by two packages? At the moment it's made up of multiple classes/objects. There is a Driver which has the main method and that constructs the GUI class, it's not until you click connect that it then constructs the socket class for that particular server. I'm guessing your talking about taking that even further though.
That's the thing with open source – if you aren't embarrassed, you've released too late. :-) Once you release your creation into the wild, you'll probably get a good number of thumbs up, and a lot of criticism, some of it constructive. Ignore the haters, use the constructive criticism to learn and bask in the glory of people liking what you coded.
Some people can be pretty brutal i've noticed. There is one guy in the Java IRC channel infact that i've learnt to not ask questions when he is active.. he knows what he is talking about but has no patience for noobs - i'm pretty sure when I asked a question it was like i'd done a shit on his keyboard or something.. he was terribly offended ha ha. But you're right - I need people to look over it so I can fix the silly things i've no doubt done.. particularly with the Threading. Threads are something i'm yet to really master. Maybe another month and i'll throw the GitHub link out there. :) 
Why wait a month? Don't feel bad about not having mastered something. We are all somewhere on the learning curve. Some may be farther, some just beginning. Some may have come faster to where they are than others, but that does not make them better or worse. As I said, just ignore the haters. Ask questions. If guy-who-knows-what-he's-talking-about-but-gets-easily-offended is active, just tell him that the question wasn't meant for him. Of course, you can also google around before going on IRC.
Ok.. .. i'm scared lol. I'll add it into the main post. [GitHub Link](https://github.com/matty-r/urChat)
[GitHub Link](https://github.com/matty-r/urChat)
I will take a more in-depth look at this later. But from a quick glance around, it looks pretty good. Good syntax, good indentation, very readable. This late I dare not comment on logic of the code, as I am too tired to really understand what it is doing... Tomorrow! I shall take a better look tomorrow. Maybe split the frontend from backend, or try to implement some odd feature. RemindMe! 12 hours (hope remind me works here)
Messaging you on [**2014-12-09 19:27:01 UTC**](http://www.wolframalpha.com/input/?i=2014-12-09 19:27:01 UTC To Local Time) to remind you of [**this comment.**](http://www.reddit.com/r/java/comments/2oo0up/update_my_irc_client/cmpk0cn) [**CLICK THIS LINK**](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[http://www.reddit.com/r/java/comments/2oo0up/update_my_irc_client/cmpk0cn]%0A%0ARemindMe! 12 hours) to send a PM to also be reminded and to reduce spam. _____ [^([FAQs])](http://www.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/) ^| [^([Custom Reminder])](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!) ^| [^([Feedback])](http://www.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback) ^| [^([Code])](https://github.com/SIlver--/remindmebot-reddit)
Yep.
Congratulations on your efforts and determination! Probably most people would have quit by now. Keep going and don't make big breaks (say a couple of days) in this - otherwise you'll lose this great flow. It's looking great so far :) Also never be ashamed to share code (and ask questions) . Sure, yours might be weaker than the code of an experienced programmer, but you can learn much faster and much earlier what you could improve and what you're doing wrong. For me that's more important. I'd rather be ashamed a whole year and by the end of it write excellent code than hide it and make much slower progress. Works for me. Good luck :)
Good luck and glad you found a project to get excited about and learn from! It is key in the beginning.
Thanks for the kind words and advice mate, I appreciate it.
Thanks mate. There are some silly things going on in there that i'm aware of, in particular the static methods in the Connection class. It's on my TODO list to.
Thanks for the update. I am currently using C++, and looking at C#/F#/Clojure (via clojure-clr) as future options. I care about Windows Phone, because some of the European countries I visit often (southern Europe) it has more share than iOS. 
* I haven't actually integrated GitHub into Eclipse, I should probably do that. * Good call. * I think I understand what you're saying - it should be List users = new ArrayList&lt;IRCUser&gt;; Something like that anyway. * Ah yes - whoops. * That section is a bit of a beast and needs a bit of an overhaul for sure. It's been a little while since i've visited that Listener - there is no real reason why I hadn't added it to the switch statement.. pretty silly. * Yep, good point. Thanks for taking the time to check it out and giving me some feedback. I'll check out FindBugs and see what it comes up with.
&gt; git vs. Eclipse If you use git directly from outside eclipse, you can use gitignore. &gt; List vs. ArrayList Exactly. The idea is that fields and parameters are defined by the interface type so it's a) easier to swap implementations and b) the reader of the code only cares about the interface type anyway.
tl;dr It's another tool to create meaningful abstractions. There's the often used answer of mapping, filtering and reducing. Say we want to find out all the money that customers in a given zip code owes us. public double getTotalOwed(List&lt;Account&gt; accounts, Zipcode zip) { double total= 0.0; for (Account account : accounts) { if (!zip.equals(account.getZipcode()) { continue; } total+= account.getOwedMoney(); } return amount; } In my opinion with streams and lambdas we can do better. public double getTotalOwed(List&lt;Account&gt; accounts, Zipcode zip) { return accounts.stream() .filter(a -&gt; zip.equals(a.getZipcode()) .mapToDouble(Account::.getOwedMoney) .sum(); } This to me is more terse, but IMHO more readable. We filter out only values we want, convert it to the type we want and sum it. One other example. You can create guards. Say you have some builder object that prohibits nulls for most fields. You're just not supposed to set it if it's null. But you have a user request where fields may or may not be null. So you create some obnoxious code like this: public static AwesomeSauce from(Map&lt;String, String&gt; notSoGood) { AwesomeSauce.Builder builder = AwesomeSauce.newBuilder(); if (notSoGood.contains("userId")) { builder.setUserId(notSoGood.get("userId")); } if (notSoGood.contains("zipcode")) { builder.setZipcode(notSoGood.get("zipcode") } .... repeated a lot ... return builder.build(); } compared to: public static void setIfNotNull(Consumer&lt;String&gt; consumer, String value) { if (value != null) { consumer.consume(value); } } public static AwesomeSauce from(Map&lt;String, String&gt; notSoGood) { AwesomeSauce.Builder builder = AwesomeSauce.newBuilder(); setIfNotNull(builder::setUserId, notSoGood.get("userId"); setIfNotNull(builder::setZipcode, notSoGood.get("zipcode"); .... repeated a lot ... return builder.build(); } Now this could be made better by making the mapping between fields slightly more explicit, the setIfNotNull more generic to work on all types. However, it'd be easy to create more complex guards. Of course these can be abused to make code less readable. I'm sure we'll see some horrible spaghetti code. Though I'm sure people have said that about object oriented programming. I guess with great power comes great responsibility?
*breathing intensifies*
I think OP is asking for windows skin/themeing app, not the device he wrote. Confused me too.
I've been looking for something similar myself. I'm currently trying to expand my skills by digging into other languages so I'm looking for that "writing a real java program" tutorial (non game examples), something that will give me a good taste of the language without me having to wade through half a dozen chapters on variables/arrays/classes (I can do that if I decide to spend more time with the language). As an example of what I'm looking for, I recently went through this C++ tutorial, and found it to be the perfect introduction; http://latedev.wordpress.com/2012/04/29/writing-a-real-c-program-index/ Is there anything like that around for Java?
You're looking for a Look and Feel library :) (for instance http://weblookandfeel.com/)
To be clear, my main objection is to the style and tone of the article. Language wars become religious very quickly and this kind of proselytising simply fans the flame wars. The article makes very little attempt to objectively compare language features across the three languages mentioned in the title. My objection to getters and setters is based on the belief that, for pure data structures, value types are the way forward. For encapsulated classes, immutability should be preferred, which rules out setters - objects should be correct through construction, not by exposing a plethora of setters. Generally, getters and setters are an outmoded concept which don't deserve eminence they gain by making them first class language features.
Well the only way you can modify the about dialog - that I can think of - is to [bundle](http://docs.oracle.com/javase/7/docs/technotes/guides/jweb/packagingAppsForMac.html) your java program and edit the plist file to set the icon and the app title. As for adding items to the actual application menu, I don't think that's possible anymore. You basically have to create a JNI bridge to the *Cocoa API* yourself and at least initialize the interface and also edit the *MainMenu.nib* file. But maybe somebody else knows more about this. There seems to be no official way though. None that I'm aware of.
Just in case you care about this: insert the following snippet try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); } catch (Exception e) { /* log something */ } at the beginning of your *main* to get a more native look and feel.
This is great thanks; but are lambdas just a means of shortening the code it takes to do something or does it have other advantages?
JAVA RPC WEBSERVICES
Very vague question, without much context. Hard to answer without more information. Maybe a screenshot of what you are trying to accomplish?
Not that I know of... I normally hate videos because I have a hard time focusing and not multi-tasking but this is definitely one that's worth an hour of your time.
Why you didn't use JavaFX for this?
http://www.reddit.com/r/ProgrammingPrompts/comments/2l9c9r/write_a_game_of_battleships_aka_sea_battle_to/ I made a polished one in about 12 days, just to give you a figure. Mine did only weakly use Swing and did most work with custom drawing and java.awt.Shapes, but you could use buttons and such instead.
Is OSGI in action worth reading anymore?
Why did he reject those? Sounds like your teacher sucks or there are more constraints at you arent telling us
I spent 10 minutes looking over the docs and I still can't tell what this thing is. I mean, what is an example of a problem that can be solved with it? Even a toy example: Would you write a sudoku solver with this? Does it solve those puzzles that go like "the baseball player does not live next door to the girl who likes lasagna?" (I'm not trying to suggest it's only for fun and games, just looking for simple examples)
It also allows you to write code than can be easily run concurrently. 
he rejected those based on the fact that there are a lot of implementations of them online. he doesn't really trust us despite the fact that we have given him no reason for distrust. maybe he just sees himself in us.
It would actually be quite nice, but i doubt he'll go for it given that it is a very popular game. Nonetheless, i will present the idea to him. Thanks.
Not unless your shop has decided to use OSGI. Most shops I've seen have their own idioms that don't come from a book and are by far the harder thing to learn. 
The whole argument is moot anyways. In Scala if you want a more principled tuple, you use a heterogeneous list instead, which has no limit, but is slower to compile. Which the author of course doesn't even mention.
&gt; The point is to be able to write a function that abstracts over tuples of unknown length, in a typesafe way. You can't do that in any language, you mean a tuple of arbitrary length, not unknown. And you can do that in Scala, see the implementation in [shapeless](https://github.com/milessabin/shapeless/wiki/Feature-overview:-shapeless-2.0.0#facilities-for-abstracting-over-arity).
I don't like articles that say "don't ever do this". I read that article, and yes, there are some good reasons to limit your usage of double curly braces. But to *never* use them? I suspect somewhere, somehow, there is a perfectly acceptable reason to do so. 
I guess somewhere this could be useful, just like the label / goto in Java, but I generally don't see it in day to day coding.
JMock also uses double curly braces. But JMock is not exactly everybody's favourite mocking framework.
Clean Coder (different than Clean Code) works as well
that's called a fluent interface. The sets aren't traditional set methods, since they return the settings object (or a new cloned one) each time.
One program I like in particular is [Wa-Tor](http://redd.it/26i7is) (link to a ProgrammingPrompt), a population dynamics simulation originally written by Alexander K. Dewdney. You could build a nice SWING GUI for it with just about everything Swing has to offer (especially if you add rule variations). Should be doable in your time frame. Another little project (where I haven't yet seen any source code for) is the game of ["Mille Bornes"](http://en.wikipedia.org/wiki/Mille_Bornes)(Wikipedia link), [Mille Bornes](http://boardgamegeek.com/boardgame/590/mille-bornes)(Boardgamegeek link), also graphics/Swing heavy, design patterns, object orientation and doable in your time frame.
&gt; AFAIK, you can't represent this function signature[2] in Scala. I'm not familiar with Ceylon, but I don't see what that signature has to do with tuples. Composing functions is pretty trivial in Scala. Welcome to Scala version 2.11.1 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_72). Type in expressions to have them evaluated. Type :help for more information. scala&gt; :paste // Entering paste mode (ctrl-D to finish) def compose[X,Y,Arg](g: Seq[Arg] =&gt; Y, f: Y =&gt; X)(args: Arg*) = f(g(args)) def hasEven(ints: Int*): Boolean = ints.exists(_ % 2 == 0) def message(hasEven: Boolean): String = if(hasEven) "has an even number" else "doesn't have an even number" //with a tuple def leftValue[L,R](tuples: (L,R)*): Seq[L] = tuples.map(_._1) compose(hasEven,message)(1,2,3) //Have to explicitly annotate here because the compiler can't infer [L,R] when we curry leftValue compose(leftValue[Int,Any],hasEven)((1,"abc"),(2,3),(3,List(1,2,3))) // Exiting paste mode, now interpreting. compose: [X, Y, Arg](g: Seq[Arg] =&gt; Y, f: Y =&gt; X)(args: Arg*)X hasEven: (ints: Int*)Boolean message: (hasEven: Boolean)String leftValue: [L, R](tuples: (L, R)*)Seq[L] res0: Boolean = true scala&gt; 
C# does not only have more syntactic sugar! C# has evolved from a Java clone to a distinct language with lots of nice features. Java had been stuck in development until Java 8 for five years. So yes, I believe that Java has to look closely to C#...
Yeah, that was a simplistic statement, so I have to backpeddle a bit. It's certainly more complicated than that as the entire ecosystem has a different set of trade-offs than Java's: some better, some worse. But I am thinking about the countless .NET folks I've known who are former Java developers who simply got sick of being locked into a language that didn't even have first class properties; amongst other features. At any rate, I think many exciting new features will be coming to our favorite APIs thanks to the new Java 8+ features. We'll probably start to see more excitement around Java development in general. That said, it will be really interesting to see where Core .NET goes with their new portability strategy. If they take it far enough, that will seriously challenge Java's value proposition all over again.
Well, yes, you can write Ceylon's type class in Scala, but Scala tuples aren't implemented that way, and Scala function types _certainly_ aren't represented in terms of tuples represented that way. Which means I can't naturally abstract over functions of arbitrary arity in Scala, at least not AFAIK. Shapeless is a separate library which has nothing to do with how Scala models function types, and has nothing to do with the language-level support for tuples in Scala. And of course, the fact that functions are represented this way means that we can have a _typesafe metamodel_ where the metamodel object for a function or method captures the signature of the function or method!
I have mixed feelings about GoF Design Patterns. It seems like they have morphed into interesting discussion points during interviews rather than solid design principles. On the other hand, I do find myself continually using patterns like Decorator and Builder (not GoF), but factories can die in a fire. They tend to be way overused in Java land. 
&gt; Shapeless is a separate library which has nothing to do with how Scala models function types, and has nothing to do with the language-level support for tuples in Scala. There is no language level support for tuples in Scala(outside of the sugar which rewrites (X,Y,Z) to Tuple3[X,Y,Z]). Tuple is a normal scala class distributed in the standard library. &gt; Which means I can't naturally abstract over functions of arbitrary arity in Scala, at least not AFAIK. I don't know what natural means to you, but the shapeless implementation, though significantly more advanced (because it's judicious use of functional dependencies) is still plain Scala(ie, there's no exceptions in the compiler or doesn't use macros), the compiler doesn't treat either implementation special.
While reading your comment all I could think of was Spring. Funny.
Although I agree with the author, it would have been nice for him to write how you SHOULD do it. At least in his opinion.
The verbose way, which is annoying. I loved double brace initializers when I found them, then realized they had cost, damn.
I'm not the author, but in the given case I'd use an [Guava ImmutableMap](http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/ImmutableMap.html), most probably using the `ImmutableMap.Builder`. The design would then be better overall in my eyes by using true immutable data types (better performance, better showing purpose, less bugs by misusing mutables) / using a builder pattern for dynamic construction for readability.
Looks nice! But I'm not 100% sure what the article submit policy is. Do you submit links like we do here on Reddit, but instead of a link you have to copy the text of the post into the submit box of Voxxed? Or are people supposed to write original articles into the submit box, like I'm typing this comment here?
&gt; The point is that we use these tuple types to represent function types. Which enables abstraction over function arity. Even though you keep saying functions, but this isn't a functional problem. It's a type expression one. HList is a type that allows you to sufficiently express a arbitrary product of other types. It does this via functional dependencies. in Ceylon, it's the same thing. The expression of a type, which represents the product of other types. Apparently in Ceylon however, the compiler special cases this expression. EDIT: As for which approach is better, I am mostly undecided, the expression of product/union/intersect types is common enough where it does make sense to special case it for efficiency, however I do prefer the transparency and mathematical soundness the type level implementation.
&gt; Let me start off by apologizing if this isn't the right place to post this, but I need some help from people who are good with Java. [Help with Java you say](http://www.reddit.com/r/javahelp)? 
It doesn't seem like you've understood anything I've written above. I'm talking about representing the types of __function__ references. Scala does this with 22 different interfaces, whereas Ceylon does it with one interface and a class. Your call which is more elegant. And the Ceylon compiler only special cases tuple types at the byte code generation level for _performance_. There is no special case in the language spec or type checker.
Would be nice if Java formalised this but without the cost then. Something like a uses{} block.
New Java info site, built on PHP
So glad to hear that. Just ordered that book the other day! Fowler's blogs are ridiculously well-written, hopefully the book is just as good!
Head First Design Patterns by O'Reilly is a great book. 
Now while the site is down (or is it only for me?), can somebody try and post the list here? EDIT: this is what I get: Error 1001 Ray ID: 1964657201fc0731 DNS resolution error
Prototype is a bit of an oddball when coming from OOP, JS feels a bit weird for includes/libraries, and most JS debuggers suck dirty hobo ass. JavaScript cab still be fun to learn, just different.
What exactly do you find hard in Javascript? Any particular concept or feature? Or you're just having trouble getting used to it?
coming from Java, I had trouble with JS. After working a few stories/bugs, its not much different anymore. Although we don't really use JS in an OOP fashion, I have never seen us create Classes in JS or use prototype. Its mainly Angular stuff though. For some reason Hoisting had me really confused, and returning functions from functions..didn't see the point/. 
GREAT, another Me Too Java site written by illiterate Indians. Pass.
I guess the programmer for that web site didn't read all of those books.
I think the key thing to remember about JS is that it was built and shipped (e.g. locked down as a spec ), in a very short period of time. So there are a bunch of things which probably would have been done "better" if there had been more time. a few I can think of: a) Goofy ass "arrays" I hesitate to even use the word arrays. since they're not arrays like any other language uses, they're maps/dictionaries with a bit of syntactical sugar. And this has lots of consequences. b) the various meanings of truthiness and equality. Some of these are outright humorous, but they're also hard to keep track of ( FWIW, I think the java == vs .equals is a similar problem ) c) usage of "this" it's just weird. d) scoping. Sorry javascript scope is bad. to much tendency toward the global. That said, it IS a different paradigm than java OO. So yeah it won't be necessarily what you are used to. I don't think the overall concept of the language is bad, I do think it suffers from a lack of "baking" time. many parts of it are underdone. The two appendices A and B in "Javascript: The Good Parts" detail these problems well (great book BTW, just long enough to actually deal with the topics, no fluff). It's too bad that Mr Eich didn't discover and fixes many of those problems before it had to ship. It's the cards we're dealt. Another thing is the nature of the language is not statically typed. This means the tools will never be as good as the equivalent java tool. IDE and debugger for example. So part of my own headache around JS was simply learning to live with the tooling. It IS getting better though. The nature of JS is similar to the nature of other things in technology which certainly out grew and outlived their original design parameters. Another one close to JS is the XmlHttpRequest system which appears to have been tossed in at the last minute by Microsoft, but which is now extensively used. 
Well, to be honest, I wouldn't expect too much help either here or over at /r/Javahelp. You posted a link to an applet without **any** description of it's functions. Do you really expect programmers to click on any presented link without knowing what will happen? I'm not saying that it is malicious, but it could well be and that's why extremely few people will actually risk clicking the link. Also, it would be common reddiquette to **mark an X-Post as such** so that users willing to help can check if the question is already answered somewhere else.
Ah, those are all good points. Can you tell I'm new here?
Here is a Google cache version of the page: http://webcache.googleusercontent.com/search?q=cache:S912VejeGqQJ:www.programcreek.com/2013/08/top-books-for-advanced-level-java-developers/+&amp;cd=1&amp;hl=en&amp;ct=clnk&amp;gl=de
&gt; There's a lot of Scala developers who just don't use standard library for tuples, unions, options, functors, or anything really. But they _have to_ use `Function1`, `Function2`, etc, because there is no way for a third-party library to replace the way the language models function types. Additional third-party libraries are simply irrelevant and unhelpful in this context. (And even the very fact that you even _need_ an additional third-party library if you want to do tuples "right" is already a problem.) &gt; The `HList` in shapeless however, which is the implementation I prefer is much more principled. It's definition is pretty much a type level analogue to immutable Lists OK, now imagine how much cooler it would be if `HList` were named `Tuple`, and [built into the language module](https://modules.ceylon-lang.org/repo/1/ceylon/language/1.1.0/module-doc/api/Tuple.type.html), like it is in Ceylon. And then imagine that function types are defined in terms of this `HList`/`Tuple`. Wouldn't that be nice? Seriously, just try out Ceylon. You'll like it. It's worth your time.
What are the equivalents of these for cpp?
Have you tried Darcula theme?
something like: val letters = Map('a' -&gt; 7, 'b' -&gt; 0) that would be awesome
&gt; But they have to use Function1, Function2, etc, because there is no way for a third-party library to replace the way the language models function types. I don't see a problem here, given a proper product type, why would you ever use anything besides Function1 to implement that product in a type parameter. Just like when you use TupleN. &gt; Additional third-party libraries are simply irrelevant and unhelpful in this context. (And even the very fact that you even need an additional third-party library if you want to do tuples "right" is already a problem.) &gt; OK, now imagine how much cooler it would be if HList were named Tuple, and built into the language module It wouldn't be cool at all. HList while awesome isn't perfect. For example, it has awful Java interop. The TupleN classes while incorrect, do work well from Java. HList are also incredibly slow to compile and creates a box for each element, which may be problematic for those working with a large number of tuples. The ideal implementation would involve completely unboxed value types, but that's not going to happen without project valhalla. 
Indeed - lambda behave doesn't have the memory leak problems that are mentioned. I think Lukas has raised some good reasons as to why to not do it in the Hashmap case, but seems to over generalise the conclusion to apply to all situations.
I use [Solarized](http://ethanschoonover.com/solarized) with an almost-black background instead of that weird blue color. 
Guava ImmutableMap.of() or Java 8 Stream.of().collect() are good options.
I found them very useful in one occasion: JPanel panelTop2 = new JPanel(new GridLayout(4,1)); panelTop2.setBackground(new Color(249,249,179)); panelTop2.add(new JLabel("T") {{setFont(displayFont);}} ); panelTop2.add(new JLabel("Z") {{setFont(displayFont);}} ); panelTop2.add(new JLabel("Y") {{setFont(displayFont);}} ); panelTop2.add(new JLabel("X") {{setFont(displayFont);}} ); panelTopContainer.add(panelTop2, BorderLayout.WEST); content.add(panelTopContainer, BorderLayout.NORTH); These are labels that go next to textfields in RPN calculator program. I want the font to be set, but I never need to change them or do anything with them, so anonymous classes/constructors are just fine.
This is a terrible way to demonstrate OOP, with taxonomies of things, shapes and animals being the usual suspects, leading to wrong ideas about how to effectively use OOP. Whenever I see this poor presentation of OOP, I just have to respond with this article: [Heuristics and Coffee](https://www.google.com/url?q=http://www.objectmentor.com/resources/articles/CoffeeMaker.pdf&amp;sa=U&amp;ei=qLuHVIzDA8yXNqz5gNgI&amp;ved=0CA0QFjAA&amp;sig2=VCkKXRsSqpyt28rGnT7C-Q&amp;usg=AFQjCNHGVsGWUvG-gp_YMM6wuv3sAQWp6w). This article graphically demonstrates the flaws in OPs approach. TL;DR do not create classes based on properties of real world things, but instead on software behavior expressed as communication between objects.
So Scala?
You caught me
Pick up Crockford's "Good Parts" book, it's designed to keep you out of trouble. It's a good book for all the people that program in some other language mostly and yet still have to 'deal' with javascript. The key point in the book is that javascript is a bit wonky, the author has a clear plan to ignore the wonky, effectively reduce the instruction set of javascript to only safe operations, and then opines that you should just ignore the bad parts at all costs and just work with the limited functionality he's defined. It's still 'real' javascript programming.
 import com.google.common.collect.ImmutableMap; Map&lt;String, Object&gt; myMap = new ImmutableMap.Builder&lt;&gt;() .put("firstName", "John") .put("lastName", "Smith") .put("organizations", new ImmutableMap.Builder&lt;String, Object&gt;() .put("0", new ImmutableMap.Builder&lt;String, Object&gt;() .put("id", "1234") .build()) .put("abc", new ImmutableMap.Builder&lt;String, Object&gt;() .put("id", "5678") .build()) .build()) .build();
Watch his lecture series too - https://www.youtube.com/playlist?list=PLK2r_jmNshM9o-62zTR2toxyRlzrBsSL2
Heh. If he thinks that's a lot of anonymous classes, a decent-size Scala program would make him shit bricks. By the way, shouldn't javac optimize this away? If the anonymous class contains only an initializer, and the initializer only accesses public members, why the hell does it need to generate an actual anonymous class?
The language being hacked is Java (or some other programming language), and fortunately most people in this industry are willing to overlook superficial things like imperfect use of a spoken language and not wearing a suit and tie. Programming is a meritocracy, where skill in what you produce cuts through the BS. I care more about programming language syntax than English syntax, as long as I can understand what you're saying. That is the business and profession I'm in. The only rights I care about are human rights. There is no right that says only perfect English speakers need apply. Would a Hindi speaker mind if you put up bad Hindi teaching material? I doubt it unless the content were bad and you were insulting their intelligence. My Bengali is pretty pathetic, yet when I go to West Bengal, I could get by in English yet I choose to speak in Bengali. Those whom I speak to appreciate the effort and care more about the content of my speech more than whether or not I butcher Bengali conjugations. Go ahead and don't cut non-native speakers any slack. It's your loss. For my part, I will restrict my criticism to the technical merits. I understand what he is saying and I disagree with the contents.
Mastermind? That is what my C# class had as extra credit. I built a version that was better (see less buggy) than the example version.
One of the issues the author raises is that anonymous classes contain a reference (this$0) to the enclosing instance. Question: can the garbage collector clean this up once the code is done with the enclosing instance? This may be related to garbage collecting and circular references, i.e. Object A contains reference to Object B, and Object B has reference to Object A. I hadn't considered this situation before - does it cause problems for garbage collections with Java?
I used to work with a lot of maps in a former job (don't judge me, I had to work with foreign code). To create all those maps I used a (wildly unsafe, but generic) "map" helper method that just took alternating keys and values. So using that method would make the code look like: Map&lt;String, Object&gt; myMap = map("firstName","John", "lastName","Smith", "organizations", map("0", map("id", "1234"), "abc", map("id", "5678")))
The Heuristics and Coffee example is a great article and we suggest this as a reference frequently. Incidentally, it is very close to what we use as a practice exercise. However, we feel that it is a bit too much for someone new to OOP and hence it is preceded by much simpler explanations and discussions like the one that is mentioned in my blog article. If you noticed, there are certain differences when you compare it with a typical Animal or Shape example. * It does not introduce an OOP terminology and then puts an example to explain it. It approaches the problem first, then possible solutions and then the formal term * It is not an exhaustive guide for all OOP concepts - its rather a way of how should one think in OOP * It is written in a discussion flow, rather than as a lecture. Hence, the oversimplification. I hope I've not gone too wrong with the explanation. Point out if any :) The article was written only after putting it in practice and validating its effectiveness. I would not say that there isnt a scope of improvement, but it is a proven way and working well. Your constructive criticism noted. Particularly, about the last sentence of having it finally on software behavior expressed as communication between objects - that is indeed how OOP started. Thanks for reading and posting. 
&gt; I don't see a problem here OK, well I've already explained the problem already several times, so I guess we're not making any progress here :-( &gt; HList are also incredibly slow to compile and creates a box for each element, which may be problematic for those working with a large number of tuples. Well that's because `HList` isn't optimized by the compiler backend, as `Tuple` is in Ceylon. I've been trying to explain this point, but apparently the message is just getting lost somewhere. &gt; The ideal implementation would involve completely unboxed value types Yes, that would surely be ideal.
I still wonder how long it will take until the cloud fashion is over in the US. I believe other parts of the world (e.g. Europe) are less cloud crazy. We'll see...
Good question. The GC is pretty smart about determining what is "live". Object references are a tree and the GC marks alive objects that can still be referenced from "live code". Objects no longer referenced will be collected, even if they have (circular) references See also: http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html And this explains it better than I can: http://stackoverflow.com/questions/1910194/how-does-java-garbage-collection-work-with-circular-references 