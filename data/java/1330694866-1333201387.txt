Ok, fine, skip a collection, but use a customized object. The memory difference is all but inconsequential for all but the most performance intense systems. The cost of readability here is rather extreme. 
Actually that is perfect. Thanks! And I appreciate being proven wrong. TIL :) Using that link I played with Wolfram Alpha and it explained a bit a better the number of permutations. This would mean though that real world hand shuffles have bias? 
Welcome to the reason why it's important to learn how to design programs.
The dcm4che project has a lot of J2EE code, mostly from version 1.4 which most people consider XML hell. I know they'd love some attention if you can stand it :) http://dcm4che.org/
I can see why they need help. Their website is like reading hex code. haha
Two I didn't know about for a long time: Arrays and Collections.
I don't use it very often but it can be amazing when you need to dynamically load and unload modules. java.lang.ClassLoader
How about [java.awt.geom](http://docs.oracle.com/javase/7/docs/api/java/awt/geom/package-summary.html) package. Tons of classes to work in 2D space with points, lines, curves, and other shapes. Very useful.
Executors. It has a bunch of static methods for building ExecutorService objects - they give you lots of thread management support.
ThreadLocal, easy per-thread state.
org.xml.sax.Locator. Not because it's really all that useful, but because [it was my idea](http://markmail.org/message/h5h7xr4xkdc3n7me).
I'm teaching my wife to become a programmer. Unfortunately, she knows nothing about computers except Microsoft Office. I tried to teach her how to do "Hello World" in Java first, but she asked what is "public", what is a class, why do you use curly brackets there, what is "static", what is main, what are square brackets, why do you need to pass arguments to main, what is System, what are member methods... how does the computer understand this, what is bytecode, what is JVM... it was ridiculous. So now I'm back Right now, I'm teaching her about programming in general, using pseudo code. I'm working on variables and arrays. After that I'll introduce functions. Eventually I'll move onto data structures. After that I plan to move on to classes, inheritance, composition, overriding, overloading, etc. I'll introduce Java-specific syntax after she is very familiar with core programming concepts.
StringTokenizer 
java.util.Scanner -- makes parsing files easier.
* Scanner - for reading lines from a stream * Arrays and Collections for useful things like asList or emptyList * Everything in java.util.concurrent and java.util.concurrent.atomic * java.lang.Character for various ways of checking characters (isUpperCase, isLowerCase etc.) * Add the google guava library for tons of useful classes 
Everyone should know about BigDecimal -- never use floating-point values for discrete amounts like money! Also, everyone should know about the classes Date and Calendar, and what they should know about them is to never ever use them. (Google "Joda-Time.")
A simple one is StringBuffer. Much faster than concatenating strings via the '+' operator. I'd venture to say that it is always faster but then I'm sure someone will come up with an example that shows straight String concatenation to be faster.
[StringUtils](http://commons.apache.org/lang/api-2.4/org/apache/commons/lang/StringUtils.html) specifically, StringUtils.isBlank(""); StringUtils.equals(stringVar1, stringVar2); There's a bunch of other null safe methods as well. This will save you from writing little private convenience methods in your classes (which I see all over code I work with on a regular basis). Another "trick" for strings is using "Yoda Conditions" when you are comparing to a known string. Ex/ - "myString".equals(strVar); &lt;-- can not throw null pointer, ever - strVar.equals("myString"); &lt;-- can throw null pointer - strVar.equals(strVar2); &lt;-- good time to use StringUtils.equals(strVar, strVar2); unless a fail-fast NPE is a good thing (which it sometimes is)
Desktop so you can open files and the same command will work across all os. Think it came in java 6. 
the Robot class... for making irritating programs :p ... or just to troll your friends with! haha 
As sort of a funny followup, I tested the StringBuilder/StringBuffers with 1750000 char starting sizes and I also noted a ~10ms increase performance (for both of them) bringing the avg duration down to 24 and 35 respectively
java.util.PriorityQueue. The heap is sort of a special case data structure, but when you need one, there it is.
I think you have that backwards.
ArrayList&lt;Class&gt; is nice, but for Java 6, ArrayDeque&lt;Class&gt; is nicer. With addFirst(), addLast(), offerFirst(), offerLast(), push() and pop(). 
I prefer just to read the chars individually. I don't like how Tokenizer skips spaces and such by default. Though i guess if you want to skip them...tokenizer all the way.
We have a massive legacy project at work that no one likes to work on, maybe this could shed some light on it. I think it's around 20,000 lines of code. If you give me a few days I'll see if I can find time to give it a shot and then I'll fill in the questionaire. 
[java.nio.file.FileVisitor](http://docs.oracle.com/javase/7/docs/api/java/nio/file/FileVisitor.html) I was having a look at this recently from Java 7. It allows you to implement a visitor to traverse file paths. Created a small application to clean up a lot of my downloads. 
Not to be pedantic, but this is from the javadoc for StringTokenizer: StringTokenizer is a legacy class that is retained for compatibility reasons although its use is discouraged in new code. It is recommended that anyone seeking this functionality use the split method of String or the java.util.regex package instead.
Fair enough.
Then you should also have a look at the ServiceLoader.
I recently made heavy use of these classes in a project and I had no idea about them until I started coding. Found them in a Google search and they replaced a bunch of code I wrote :o
Good replies. I'm liking this :)
The last slide is a bit funny: &gt; •Seemscool Damn right. &gt; •Not sure what I’d actually use it for Huh? &gt; •Integration tests most likely candidate [Precisely.](https://plus.google.com/100660127586085393031/posts/ApySFFxWujm)
[java.lang.reflect.Proxy](http://docs.oracle.com/javase/6/docs/api/java/lang/reflect/Proxy.html). Lets you create an implementation of an interface at runtime. Do things like proxy session bean calls over WebSockets and other silly stuff.
I have yet to take a course in which at the end of the semester, the entire material from the book was taught. http://www.youtube.com/user/thenewboston/featured he has a beginner and advanced java section. also more advanced material http://see.stanford.edu/see/courseinfo.aspx?coll=824a47e1-135f-4508-a5aa-866adcae1111 then even more advanced http://see.stanford.edu/see/courseinfo.aspx?coll=11f4f422-5670-4b4c-889c-008262e09e4e
Not in the standard library, but we started using the StopWatch class in spring to handle our elapsed time. It has a really intuitive interface, and the prettyprint method on it is actually really nice. 
I also found this useful when attempting to make a sceen capture program - just grab screenshots as fast as you can (with Robot) and append to an avi. Managed to get about .2 second delay at best.
Yeah, but I like how they created a really friendly system. I didn't use Intellij so far, only Eclipse and Netbeans.(for java)
 java.util.logging Saves you and your users the trouble of adding a dependency to log4j.
A friend just told me this got posted up here. I blame finishing this at 1AM. :P I think it was the examples of using it for tracing that left me a bit cold. Particularly where it just made me think "yeah, my IDE's debugger does that just fine". The fault injection examples are definitely what resulted in the "seems cool" bullet point.
The new Datetime classes that should be arriving in Java 8 will be a massive improvement over the current ones, and a small improvement over Jodatime. So probably something to think about
Isn't it strange that we all use SwingUtilities.invokeLater() when all it does is delegate to EventQueue.invokeLater()? 
I do maths gud
I just recently discovered the power of this myself.
It's a shame most of our companies seek for (or rather, require) 100% stability. I'd love to switch myself, but every company I know of needs to see 7 in the wild for a while first.
TRUE. I shouldn't have framed it as a replacement class.
Better to use slf4j. http://blog.lidalia.org.uk/2010/11/logging-dos-and-donts.html
A while back I had to make the choice (again) too, and we decided for Java EE. Overal Java EE appeared to be simply a cleaner programming model. Everything is moving to a zero-XML based approach, while Spring still advocates using XML for everything (even though they're following Java EE now in adopting annotations and conventions over configuration). At one time Spring was indeed better (when J2EE 1.4 and EJB2 were still current), but Java EE completely rebooted itself, while Spring seems to have been stuck for too long in the mindset that they were the superior solution and only minimally innovated. Not that Java EE is perfect; there's still some legacy surrounding the overlap between CDI, EJB and JSF Managed Beans, but overall the platform is very elegant and lean. A Java EE 6 Web Profile edition is just 25MB and that includes everything (MVC Framework, ORM, Transaction Manager, everything...), while to get the same with Spring you have to download over a 100MB of additional dependencies.
java.util.Formatter or the String.format which invokes the Formatter. 
www.memberantash.blogspot.com
I think it is actually such a bad idea, that they made a property that turns it off. 
i have heard very high of PrimeFaces, having used Icefaces quite extensively in a much recent project, i would say its a solid product, but the main selling point among these UI+presentation framework is their components, which Primefaces, apparently has more, as per the latest release. could you share some thoughts on why, it rips off?
Why don't you sign up for GitHub and publish your source? My biggest regret from uni is having not published right from the start. It forces you to work better; you don't want to be embarrassed by nasty hacks.
Try [DataOutputStream](http://docs.oracle.com/javase/6/docs/api/java/io/DataOutputStream.html) and [DataInputStream](http://docs.oracle.com/javase/6/docs/api/java/io/DataInputStream.html). 
Read about object serialization.
thanks, this is what I needed
It's a shame, I liked both PrimeFaces and IceFaces really, but the move IceFaces made is really puzzling. There is no shame in copying opensource and using it as a base to improve it or simply use it for something different. IceFaces are a big fan of direct-2-dom rendering, while I think the PrimeFaces guys kinda hate it. So, they were probably never getting an agreement about that, so IceFaces could have just said: "Okay, we'll create a fork then and may the best idea win". Instead, they suddenly came up with their "new generation" components that were so much better than their old ones and not a word about it being a fork. Yes, deeply tucked away in the actual source code there was a mention, but ordinary component users don't read that code. 
The first time I experienced computer science was in my senior year of high school, in and AP Computer Science course. It was also java based and we used BlueJ. BlueJ is a good IDE, especially for beginners. While the actual programming you will learn will be primitive, the greatest importance from a beginning CS course comes from the fact that it will introduce you to the tenants of coding. You'll learn about data types and loops and statements and objects, and all that other basic stuff that lots of code uses.
I am the only software dev at my company. I started my latest project in 7. Type inference on generic constructors makes me happy haha
Probably because I work for IBM I have been indoctrinated to love websphere ;)
It does do something on Android (early versions at least, not tested 3+) and the pause while it ran was obvious to the user. I used it to start gc when the delay would be least noticeable which for me was after each turn in a turn based game. Otherwise, animations could look jerky.
There's a good explanation in the "other discussions", but let me try too: Normally when you invoke a method on an EJB bean, you don't invoke it on the actual class but on a dynamic proxy. This proxy then does some magic, like checking the user's roles, setting up a transaction etc and then calls the actual method. This is mostly transparent to the user. But... once inside the actual class, when you call method b() from method a() in the same class you'll be using the "this" pointer. E.g. public class Bar { public void a() { b(); // same as this.b(); } public void b() { } } Now if method b() happened to have an annotation that said to do some stuff, it wouldn't be processed if a called b. There is in Java unfortunately no way to intercept, wrap or otherwise manipulate "this". E.g. public class Bar { public void a() { b(); // same as this.b(); } @RolesAllowed("admin") public void b() { } } If a() would be called by a user who would **not** have the admin role, he would still be able to call b() via a(), since there is no role checking being done if the call originates from a(). While the example of the author uses EJB, the problem is more widespread and many Java platforms (and even platforms in other languages) suffer from this problem. Byte code manipulation and/or code generation instead of using proxies might be a solution, but these have some of their own problems.
Thank you.
Hey thanks alot man. I like this one the best and it is unique. I appreciate all of the above people too! I read them all. Thanks again!
Thanks man! I'll be sure to do that shortly and post a revised version on GitHub. For a first time project how do you think I did? 
What Set implementation are you using?
Do you have to run them as two different programs? You can probably get them to talk to each other using unix sockets if they are running on the same machine, or if on separate machines by creating a webservice for your first program that your second program can use to communicate with, but I really don't see why this can't be two components in the same program.
I think sites like http://www.spoj.pl/ are the best place to learn and test your new language skills. Apart from that you can improve your algorithmic knowledge and optimization techniques.
Tic-Tac-Toe The AI is a solved problem. The interface will get you to use swing or more advanced libraries (Like LWJGL) in addition to swing if you want something special. It will also require event handlers. Or you can look up a jsp tutorial and get into web programming.
Very nice! I am interested in video with java and was wondering if you could post your source code?
nice, but why are you making a video player? are you messing around with JMF? have you tried running it in Linux and OSX? I once worked on a program to show images and play sounds and measure user response time, there was quite a bit of problems running stuff on Linux, since the program was developed and deployed on Windows machines.
A good old Contact book, or a To-Do list are always a good way to begin a new language. If you're new to Java, take a look at JDBC, I believe Microsoft has it's own stuff to do the same, but getting data is always useful, especially if programming is your job. ps : If you do not have a database (like mysql or postgresql) take a look at sqlite
Aren't they a little bit too hard for a beginner ? I'm a professional Java programmer since six year, and I have no idea on how to do some of these stuff :)
There are two seperate, but intertwined projects here. One is the codec, which is written in Java because I find Java easy to code in. The other project is this player. It plays my custom codec, as well as MJPEG streams. I will probably give the player away, but I am not open sourcing either project at this time. The video seen here is 150KB/s , matching MPEG-1, so nothing to brag about yet.
Being 100% pure Java, it would run on Mac/Linux/Win. It needs JRE7, but there's no JNI platform dependent stuff. To answer why, well, I feel very much like the guy who climbed the mountain to see if he could.
&gt; the guy who climbed the mountain to see if he could. Wow, I really like that saying.
Sorry I probably worded that wrong. When I said programs I meant two separate classes. Sorry = \ The first class which I already made. Forms the 6 random numbers togethor. The other methods in this class get and set the numbers which the user will input. Then the second class will need to collect the actual input. Run it through the SETTERS in the other class and have those compared to the random 6 numbers in the specific order. Does that help? Sorry :P oh and its a HashSet hunt.
Ah, thanks. I'm wasn't too familiar with EJB.
the program I worked on was pure java and there were issues between both OSes, go figure. also, best reason to do anything. keep us updated on your progress.
Ugh, what a pain. Had a weird problem with PostgreSQL between OSes once. A Windows server ran the pgsql DB, Linux clients could not connect through psql (cli), pgadmin3, and even the JDBC library. Only on this particular Windows server, others, installed from the same HD image were fine. I did not have enough time to keep developing (putting out fires) and solve this problem, my BOSS told the client to keep using Windows computers. Contract ended in november, clients are still using that server.
I have a little mostly-empty Ant-based sample project in a Git repository. When I want to test out something small, I'll clone the repository and dump my little test in the main method.
Could you give me a sense of direction as to where I would start a project like this?
You just create one in your project (class with main method and associated run/debug setting) and keep reusing it, that is what I do. I would think the pain is resolution of packages and possible version mismatches (e.g. java 1.4 vs 1.5 vs 1.6 vs 7 and something like http-client 2.x is different from 3.x) would keep the online version more cumbersome. Your own class with main and combined with 'Display' window is very powerful in evaluating expressions on the fly.
Not sure how you'd go about starting your own, but part of my goal is to provide a Gene-class api for allowing people to create there own shapes with shaders. Here's how you'd be able to write custom shape genes for my system: http://www.youtube.com/watch?v=8savdyFH25o
[Something like this?](http://ideone.com/)
You can try [this](http://www.compilr.com). Not only it compiles, but actually organizes your projects. 
You know what sucks? Blujay.
Pffft. A real Java programmer would have demo'ed using Episode IV.
Climbing to the top of a mountain is tough, but [the sights you see](http://i.imgur.com/iXq8M.jpg) on the way are worth it.
I don't suppose I quite understand what you are trying to achieve, but seems like you are trying to create a game we used to play "guess my number".. If so, don't think too complicated. This is not a rocket science. It won't matter if you come up with the smartest algorithm or not. Job is simple enough to make it work. Assuming you did all the necessary adjustments up to this point and possible validations, you can try something like below: public void int[] findMatches(String computerNumber, String guessedNumber) { /* 923107 vs 913207 */ int correctMatches = 0; int incorrectMatches = 0; for (int i=0; i &lt; guessedNumber.length(); i++) { char digit = guessedNumber.charAt(i); if (computerNumber.charAt(i) == digit) { correctMatches++; } else if (computerNumber.indexOf(digit) &gt; -1) { incorrectMatches++; } } return new int[] { correctMatches, incorrectMatches }; } This should return you an array of 2 numbers. First would be correct matches and second would be matches on incorrect places (i.e. for above numbers, it would return 4, 2) And if you really wanna go smart and come up with the best algorithm, I'd encourage you to solve very same problem with 10-based shifting operations.
Eclipse has this wonderful [**Scrapbook**](http://www.eclipsezone.com/eclipse/forums/t61137.html) functionality. It's just perfect to test drive some lines of code.
No Im sorry. I just wanted tips on the best route to take. I didnt even need code so it wouldnt be cheating.
I'm not sure why you'd want to mix the technologies (java and php) rather than sticking with one or the other but I'm guessing you have your reasons. If I were doing the same thing I the first thing that would come to mind would be a web service (REST or SOAP depending on your needs). I don't think it is the *only* method (I'm thinking RPC), but it is most likely going to be the most suggested.
Android has concurrent gc now days, so the entire dvm don't need to pause any more. But since a gc is often a heavy task you can still notice it at times.
That's a good one.
OH MY GOD! THEY KILLED JAVA!
 public final static boolean[] toBoolArray(double d) { return toBoolArray(Double.doubleToLongBits(d)); } Maybe that subverts your intended goal of practicing, though. 
Agreed with Tic-Tac-Toe. There is enough scope for good design, and like you said also various levels of AI to implement. In the case of games and enforcing their specific rule sets you could also consider: * Connect 4 * Sudoku * Go Of course, there are many others, but that should be a start!
* [Quercus](http://www.caucho.com/resin-3.1/doc/quercus.xtp) * [PHP/Java Bridge](http://www.php.net/manual/en/book.java.php)
Aren't REST services a subset of web services?
Fantastic! Great idea!
Then go code in C, Asm or even binary codes directly. Libraries are cool, man.
Stuff I ask Jr Java applicants: Difference between interface and abstract class. Difference between HashSet and List. Overrride vs Overoad What do final, finally and finalize mean. Difference between a regular Exception and a RuntimeException. Maybe a very small coding program. The main thing is to be interested and ask questions back. 
What do they/you expect from a Jr. Developer? 
Study up on some popular java design patterns if you really want to impress them. http://www.javaworld.com/columns/jw-java-design-patterns-index.html
This is spot on from what I've encountered in the past few months (I graduate in May and interviewed around with Amazon, a few smaller commercial companies, some defense contractors, etc). In addition to these, I've started seeing (what I would call) more valuable and intricate questions in which a scenario is posed to you, "You have some company x, some group of workers and projects, etc ... How would you model this using OOP?"
The technical questions are often only a minor part of interviews. In my experience, the bulk of each interview is about work ethic, personality, intelligence, ability to solve ill-defined problems and level of personal interest in what you'll be working on. Dress well, arrive appropriately sleeped and caffienated, and try to work out why the interviewer is asking particular questions to give a tailored answer that ticks whatever boxes they're looking for. Stay positive and be smiley (but not creepy). Be polite to the secretary and strange old man in the elevator (because he's probably the CEO). Also: try your hardest to get into an actual I.T. company - they actually know what to do with programmers, as opposed to non-I.T. businesses where you'll end up being class as a "corporate overhead". Getting Java certification might help. Or it might not; certifications often mean that an applicant has been out of work (for some reason) for a long time. If you want an awesome job then you'll want to contribute to Open Source software. Do this and stick this on your resume; it give a strong message that you're passionate about what you do.
Can you explain, more specifically, what you want it to do? === &gt; Number.setFirstNum(numbers[0]); Firstly, `numbers` is a `List`, so to get the first item you would use [List.get(index)](http://docs.oracle.com/javase/6/docs/api/java/util/List.html#get\(int\)) to get an item from the list: &gt; Number.setFirstNum(numbers.get(0)); Secondly, your `setFirstNum()` method is an instance method (not `static`); meaning that you need an instance of the `Number` class to use it. In this case, you probably want to use `this` instance: &gt; this.setFirstNum(numbers.get(0)); Thirdly, &gt; public void setFirstNum(int firstIn) &gt; { &gt; firstIn = firstNumber; &gt; } You have your assignment reversed. "`firstIn = firstNumber;`" will assign the value of `firstNumber` to the `firstIn` local variable, which will be discarded when the method returns. You probably want: &gt; public void setFirstNum(int firstIn) &gt; { &gt; firstNumber = firstIn; &gt; } Which will assign the value of the `firstIn`parameter to the `firstNumber` instance variable. 
One thing I like to ask (though I don't normally interview for Jr positions) is find a technology (framework, language, library, etc) that the interviewee is passionate about and ask what they don't like about it. For example, I had a Java developer that really loved GWT. I asked what he didn't like. He listed off 3 or 4 things that could be better. I asked another developer what he didn't like about hibernate (which he said he was very use to and like, etc). He had no problems with it. This may be as worthwhile to a Jr developer since you haven't had a chance to have the opinions and gripes that come from experience, but something to at least keep in mind going forward.
&gt; Overload FTFY They should know what's the difference between a HashSet and a TreeSet. Just give them a simple class (that doesn't implement Comparable, and ask them if we can use a TreeSet on it? You'll know how familiar they are with collections.)
 &gt; while(word != "exit") You shouldn't use `==` when comparing strings. You should use String.equals(String): while(!word.equals("exit")) 
Yup, == checks if the references point to the same object, while equals check of the objects are equal.
few months ago I applied to Jr Java programmer. I'll list a few question I had to answer (most of them had nothing to do with Java however). 1. Describe an agile development methodology. 2. In your opinion what development model is the best (Waterfall vs Scrum). 3. What is MVC? 4. What is EJB? 5. What are POJOs? 6. What is IoC (or dependency injection). Why is it good? Why is it bad? 7. Different questions about frameworks And that was about it really. After that we talked about my ambitions, what have I done so far etc. As far as I can tell if you apply for a Jr position then your requirements are minimal.
And in general its a good idea to do this while("exit".equals(word))
Thanks guys, I will try netBeans.
* what collection types do you know and what are the characteristics of each? Why should you use a certain collection type instead of another? * draw polymorphism for me. * what is the purpose of overriding equals() and hashcode()? * what is your favourite design pattern and why? * what are the four pillars of object-oriented programming? what are the SOLID principles? * (this question stumped me at first) what is the difference between an interface and an abstract class, assuming that your application only has two classes (a superclass, which is either abstract or interface, and one subclass) and you agreed with your group that you will not implement any methods in your superclass.
Well, IBM does publish a lot of very interesting blog articles related to Java EE (e.g. the JSF Fu series is legendary) and those are universally respected. But it seems there is a lot of hate for IBM WebSphere in the community. Part of it is maybe not WebSphere itself, but the fact that companies using WebSphere never upgrade. WebSphere 6 is still used a lot, and I think that even you as a WebSphere lover have to admit that 6.x is an ugly mammoth? WebSphere 8 is already much better, but its download size is still way too big and its start up speed way too slow. Operations may not really care about that stuff (what's an extra GB on a server machine anyway) and if you deploy twice per year, what's an extra 10 minutes of start up time, but developers absolutely loath things like this. Last time I used WebSphere, it also still seemed necessary to use a separate tool to 'enhance' EJB classes in some situations (remote clients). IBM should let this stuff go. Such a separate tool should *never* **ever** be needed. The container should *always* generate dynamic proxies or sub-classes on demand, or do byte-code injection or whatever. The developer should really never ever have to use a separate tool to modify compiled classes. Last I heard though was that WebSphere 8.5 is going to be a complete reboot and will follow the likes of GlassFish and JBoss AS 7 in providing a small and lightweight core Java EE 6 implementation. We'll see ;)
I was using NetBeans for years before I switched to Eclipse for work purposes. Netbeans is by far better and more user-friendly than Eclipse (in my opinion) but Eclipse has better plug-in support (eg. Google technologies like Android or AppEngine). Also, Netbeans' interface just makes sense (you wouldn't want to create a new project by right clicking on a package would you? Well Eclipse thinks so)
IMHO IntelliJ is head and shoulders above the rest of them. Certainly worth giving it a test run.
I understand you have to use a loop, but this is how i would do it. boolean hasPalindromeSuffix(String word) { String suffix = word.substring(1); String reversedSuffix = new StringBuilder(suffix).reverse().toString(); return suffix.equals(reversedSuffix); } 
well a list is an interface and a hashset isnt. where's my job sir.
If you have your SCJP, you should be more than ready to answer questions about Java the language. The frameworks and libraries -- J2EE, JDBC, XML, SOAP, REST, Spring, etc. -- are another story. 
I'll tell you questions I ask all Java developers (you'd be surprised how many experienced devs can't answer these): * Define Object Orientation -- points if they know the basic APIE (Abstraction, Polymorphism, Inheritance, Encapsulation). Major bonus points if they understand [SOLID](http://en.wikipedia.org/wiki/SOLID). * If you have an application layer and a database layer (or any application with two separate layers of functionality), how do you enforce separation between the two layers. (OK: use interfaces. BETTER: Design patterns. BEST: can relate what they know of OOD to the [Unix programming philosophy](http://en.wikipedia.org/wiki/Unix_philosophy). To date, I have never received a "best" answer, which is OK.) * You've done a lot of work in X [insert technology/language here]. What don't you like about it? (I hear a lot of answers along the lines of "Well, I can't really think of anything I don't like about Java..." All that says to me is that the applicant doesn't know how to think critically about the tools he or she uses.) When I interviewed for my current job, I almost flubbed this last one. I was asked about Spring, and I hemmed and hawed, and finally said, "Well, I'm not a big fan of the standard Java XML configuration hell." The guy interviewing me guffawed. (I quickly followed up with "...but a lot of these headaches can be worked around with annotations.") Find the one fly in the ointment and you will do OK with this sort of question. I may also ask about unit testing. The more I develop, the more religious I become around the topic of TDD. It is pretty frictionless in Java, it saves you massive amounts of time down the road. My baseline for these kinds of interview questions is that I'm not all that interested in tricky syntax questions that can be answered with a quick Google search. Tomorrow we may need to develop in a language in which those questions don't even apply. But I am *very* interested to know that the code you write for me today will be something that I can maintain tomorrow.
The new version of Eclipse (3.7) has a GUI builder as well that results in FAR cleaner code than the one in Netbeans. Our University compsci classes just switched over and I haven't looked back.
I've been asked that once for an webmaster position at school. [Wtf really?] For Amazon, they've asked me about linked lists with really weird rules. Thats kinda difficult to do while talking on the phone. [I hate phone interviews]
Even the community edition is pretty well rounded for every-day work. 
Yeah, not discounting it here, as I started with it. Community is really nice, but ultimate has the spring support I need. 
I don't have the source in front of me for reference. I believe this was the only public constructor, however I seem to remember that the author didn't limit the scope of the default constructor so it could still be instantiated.
Most developers at my work use Eclipse, but some of them are starting to switch over to IntelliJ IDEA.
Bloch says that cloning is inherently broken in java, so it's better to use a copy constructor. http://www.artima.com/intv/bloch13.html Basically, clone doesn't allow you to create polymorphic copies. Additionally, the java convention is that clone should return a shallow/field copy of the object... basically just newObj.property = this.property
hehe!
[Help me!](http://www.reddit.com/r/java/comments/qkms6/input_verifier_for_a_jtextfield_issue/)
I suspect there are doGet and doPost methods that both simply call the processRequest method.
You're just saving the last grade entered. You might want to look into something like [this](http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html) to save the grades that are entered. And it might be handy if you post a short explanation of what you're trying to do, trying to figure out what's going wrong without knowing what it's supposed to do makes things a bit more difficult :)
I would not use that example. It uses an old library, see their comment at the end about having to pull in [COS](http://www.servlets.com/cos/).
it's not part of anything. It's a method they wrote to handle either or both of those. So the class would be something like... public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { processRequest(request, response); } public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { processRequest(request, response); } protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { ... }
not sure what you mean... If i enter in the first grade of say 85, i do integer math and devide by 10 i should get 8. case 8 should increment totalB by 1 and then start the while loop over... isnt that right?
I think it should be inside but I tried that and was unable to get out of the loop.. it would either take -1 and just keep going or just stop right there. I am fairly sure that you should have it inside but the program seemed to break even more when i did that.
 import java.util.*; public class Chapter3Project2 { public static void main (String[] args) { int totalA = 0, totalB = 0, totalC = 0, totalD = 0, totalF = 0; int totalGrades = 0; int grade; double percentageA, percentageB, percentageC, percentageD, percentageF; Scanner input = new Scanner( System.in ); System.out.println( "Enter in the grades and I will provide the"); System.out.println( "total number of grades entered, number of each letter grade"); System.out.println( "and their corresponding percentages of the total grades."); System.out.print( "Please enter in a grade or -1 to exit: " ); grade = input.nextInt(); while ( grade != -1 ) { totalGrades = totalGrades + 1; grade /= 10; switch (grade) { case 0: case 1: case 2: case 3: case 4: case 5: totalF += 1; break; case 6: totalD += 1; break; case 7: totalC += 1; break; case 8: totalB += 1; break; case 9: case 10: totalA =+ 1; break; default: System.out.println("Out of the switch structure."); System.out.print( "Please enter in a grade or -1 to exit: " ); grade = input.nextInt(); } } if ( totalGrades != 0 ) { percentageA = (totalA / (double)totalGrades) * 100; percentageB = (totalB / (double)totalGrades) * 100; percentageC = (totalC / (double)totalGrades) * 100; percentageD = (totalD / (double)totalGrades) * 100; percentageF = (totalF / (double)totalGrades) * 100; System.out.println("The total number of grades = " + totalGrades); System.out.println("Number of A's = " + totalA + " which is " + percentageA + "%"); System.out.println("Number of B's = " + totalB + " which is " + percentageB + "%"); System.out.println("Number of C's = " + totalC + " which is " + percentageC + "%"); System.out.println("Number of D's = " + totalD + " which is " + percentageD + "%"); System.out.println("Number of F's = " + totalF + " which is " + percentageF + "%"); } else System.out.println( "No grades were entered" ); } } 
I think I am just really that stuck. For some reason I can not see the logic in why its not working inside the loop. I can usually see whats going on when I can look at the code but no so much when im screwing up the code... Thank you Soo much for helping. at least i feel like im moving in the right path.
You're right that it should be inside. But by then moving it outside of the loop, that tells me that you're not exactly sure of the reason why. Have a look at this example code: Scanner input = new Scanner(System.in); System.out.println("Please enter a number, or -1 to exit: "); int value = input.nextInt(); while (value!=-1) { System.out.println("You entered: " + value); value = input.nextInt(); } System.out.prinltn("You're left with: " + value); If you were to enter, say, 1, 2, then followed by -1, you'd see the following output: You entered: 1 You entered: 2 You're left with: -1 ...and then the program would exit. Once the loop ends, you notice you're left with only the final value entered; the same value which is the value required to end the loop. All the other values are gone and can't be used anymore, because you either haven't assigned them to any other variables (such as a List, as BroodjeAap suggested), or used them in any other meaningful way to produce other data (such as the grade totals that you're attempting to work out). So, now that you understand why the switch needs to be inside the loop (hopefully), we can start to look at why the switch didn't work when it was inside the loop. This is slightly more difficult, as I'm looking at your code with it outside the loop, and can only take educated guesses from what you're telling me about why it didn't work inside the loop. My guess with that is that you were resetting the value of grade, as follows; grade = grade/10; This is a bit of code you've written in the switch statement which you're using to turn the marks out of 100 in to 0 to 10 boundaries, but notice that in doing this, you're changing the value of grade.But then you're also using the grade variable as your check to exit the loop. It's possible that when you had the switch statement inside the loop, you were changing the value of grade in this way before the loop re-evaluated the value of grade to see whether it should end. This would cause the loop to never end. If you don't quite understand what I said, have a look at the example code I wrote above with the loop. If I was to explain the execution of each line given the data I supplied above (1, 2 and -1, remember?), it would go as follows: 1. Create a scanner and tell it to read from the standard input stream. 2. Print out the instruction. 3. Input an integer (1) via the scanner, and save that in the variable value. The value variable now equals 1. 4. Have a look at value to see whether or not it is -1. It's not (it's 1) so we enter the loop. 5. Print out the value. 6. Input another integer (2) via the scanner. 7. We've reached the end of the loop, so we need to go back to the start of the loop and have another look at the value to see whether or not it it -1. It's not (it's 2), so we enter the loop again. 8. Print out the value. 9. Input another integer (-1) via the scanner. 10. We've reached the end of the loop, so we need to go back to the start of the loop and have another look at the value to see whether or not it it -1. It is, so we exit the loop and carry on with the next bit of code. 11. We print out the "You're left with: -1" message. 12. The program exits. If for some reason we were to modify the number held in value between inputting it and then reaching the end of the loop and rechecking the value, it would check the end criteria of the loop against the new modified value, not the one we entered via the Scanner. I'm only going through this because some people don't intuitively get how loops work and at what point stuff happens (such as the evaluation of the exit criteria), but it will eventually click. With what I've said in mind, try putting the switch statement back into the loop and see how it goes. Any more trouble, let me know, and I'll do my best to (as I said) nudge you in the right direction.
I guess my only worry is how is this subreddit going to be different than stack overflow questions tagged with Java? Will this be a good thing to discuss Java related jobs and how to work effectively as a team? Will we discuss new Java tech? I don't think there is much value in people posting code and just asking why it doesn't work or how can it be done better.
I don't have to confront me because I'm driving to class. I think you're referring to the grade divided by 10 statement. From what you're saying I think I need to move the statement out of the switch statement. As soon as I get to class I will update the code and post to see if it's what you mean.
Stupid text to speech. I meant I do not have the code it in front of me. Not confront. Lol.
What you are doing is consuming values from the input in a while loop, and storing them into the grade variable if they're not equal to -1. Every time you consume a value, the previous value that was stored in the grade variable is lost. So that's why you only ever see the last variable entered. Later on, you process the grade variable once, and only once. (Outside of the loop) HTH
I was at one point convinced this was true, but more often than not it's an error if `word` is null, and I'd like to know.
I feel retarded now... lol I think I got it working... going to do a few checks then I will post it.
Yep, except you wouldn't use `new` in that case, since you're dealing with values instead of pointers/references. Irrelevent for Java, of course, since all non-primitives are references.
Yeah, I gues you're right.
I don't know of any Java libraries that will do this for you, but this might help: http://stackoverflow.com/questions/4583950/cepstral-analysis-for-pitch-detection/7211695#7211695
Also, can't one use the Prototype design pattern for times like this? I remember needing to create 100 points on a map that all stored location, their images, the name of where they were pointing to and an action. So, instead of having a for loop that went to 100, I used the Prototype pattern which basically made ready-made "prototypes" (so all I had to do was fill in the name and location) whenever they were needed. Sorry if this doesn't make sense; it's 2:40 AM and I've been reading about Neural Networks all night. :(
Depending on what you want to do, you might want to write the Object, serialized, through an ObjectOutput stream. This will pipe all of the useful fields out. However, if you want specific control over what's being written, I'd come up with a format to write/read it, and then use a DataOutputStream to output all of the primitive fields.
[As I mention in another comment](http://www.reddit.com/r/java/comments/qkgbu/why_do_this/c3yihxd), copy constructors are very, very far from the most fundamental case. Here's a simple example: linked list data structures. You'd naturally want to have a constructor with a signature like this: public LinkedListNode(E value, LinkedListNode&lt;E&gt; next)
I am using [Infinitest](http://infinitest.github.com/) to run junit unit tests automatically while writing code. Although I don't think that every java programmer should know about it :\ Maybe you raised the bar to high.
JRebel looks interesting, but the name is totally off-putting. I'm here to do work, no to rebel against something. :-/ In Eclipse, I use Grep Console, which can highlight lines any way you wish, according to patterns you specify. Makes browsing server log immensely easier.
Why? :)
&gt; good knowledge of the swedish language, Therefore you might as well not have translated it, because those people that can't read swedish won't get the job.
Yeaahh... didn't think of that. Kudos to you sire
Intellj Idea mainly, but that is just a widely known IDE. Were you looking for less obvious? (Like Eclipse for instance hahaha, I miss the vi vs emacs days. ) Edit: There's Jenkins as well, you may want to have a look at.
I use Netbeans because "things are where i expect them to be"
[YourKit](http://www.yourkit.com/) is a nice profiler.
I used Eclipse for the longest time but ended up buying a copy of IntelliJ Idea. Been using that for about six months and I like it a lot.
i use netbeans and get made fun of. i use jrebel at home for scala. it's free. i dont think netbeans plays well with jrebel thats why i have to do a mvn scala:cc to get it working
I like using FindBugs and JBoss Tools in Eclipse.
This is not an appropriate subreddit for ads.
A very nice profiler indeed. I use it only a few times a year but it pays for itself when I do. 
Used the free version of JRebel when I was trying out Scala. Then decided Scala was for the birds. JRebel worked as advertised though so if you're doing a lot of container-based Java work it would be a great plugin to buy. 
I guess the main different is that stack overflow is more question oriented - you can't make broad questions - so question about how to rewrite a piece of code or how to optimize an algorithm would fit better here than there. 
* I would make HIGH_NUM a class variable instead of a variable local to main. * Why do you send testNum into the numberGame method? I would remove that. * goodGuess is always going to be false in main. * Use { }'s all the time, even if it's just to surround one statement in your if or else-if. It'll save you trouble in the long term. It's part of the [coding standards](http://www.oracle.com/technetwork/java/codeconv-138413.html) for Java. * For things like while and if, you will generally want to use while ( instead of while(. It's part of the coding standards for Java. * The formatting is kind of wonky here and there but that might just be pastebin. Lines 19 and 20 and then 27 on down (mostly). * There's a bunch more stuff you could do too (for instance on line 29, what if they type a non-numeric) but not really needed for the scope of your personal learning project.
I use netbeans for my highschool comp sci class, why do you get made fun of?
never heard of it either. there is a link to yet [another all-uppercase one](http://en.wikipedia.org/wiki/SOLID ). 
A couple other things I use pretty much all the time: Ctrl+Shift+R to open a resource - e.g. hit ctrl+shift+r, type a class name and hit enter to open that class. Useful for navigating a large project with many packages, when you know exactly the name of the class you want. Ctrl+click something to go to its definition (or hit F3 when your cursor is on it). Alt+shift+R is the shortcut to refactor rename. Use this to rename something. Don't you dare ever find/replace to manually rename something!
I've been a senior Java developer for about 5 years, never heard of it.
someone asked the same here http://stackoverflow.com/questions/4270912/what-is-the-difference-between-gof-and-grasp-design-patterns got me wondering too... but when i read the answer there it makes sense again i just forgot it. gof is mentioned a lot more on the net as specific patterns. but in school only gof was mentioned briefly and later used specificly in my code and grasp principles were the ones that was teached in class.
From skimming the Wikipedia article, it doesn't sound like a pattern, but rather a grouping of design patterns and principles. Seems like a bit of an arbitrary thing to ask, at least to ask for it by name.
its actually in the http://www.amazon.com/Applying-UML-Patterns-Introduction-Object-Oriented/dp/0131489062 which is used in many educational institutions. still see it used on my friends education and he just started in january. i had it back in 2005 or so
http://dl.acm.org/citation.cfm?id=1044919
Yes. Thank you. I think you missed my point. In many if not most cases, `test` shouldn't be null, and if it is then something went wrong further up the line, or will further down the line. It's better, then, to throw the NPE and not allow the system to continue in some undefined state.
maxmsp has allows a java interface and has a way to analyze different sounds
If you have a professor that does that again, point them to section 7.2 of the Java coding standards. http://www.oracle.com/technetwork/java/javase/documentation/codeconventions-142311.html#430 &gt;Braces are used around all statements, even single statements, when they are part of a control structure, such as an if-else or for statement. This makes it easier to add statements without accidentally introducing bugs due to forgetting to add braces. I once tried to convince another professor of a similar thing and he relented fairly quick when I pointed him to the documented standard from the company of origin. Professors either need to grade that stuff to the standard or not worry about it. Their preferences shouldn't factor into your grade.
That makes me feel better, I seriously walked out of the interview feeling like an idiot. Good to know I'm not :) In a surprising twist, I was just called and offered the position. Guess GRASP isn't as important as they made it seem.
FindBugs is great. It does exactly what it says on the tin.
Cleaned it up: [Code Tidy Link](http://codetidy.com/2157/) Thanks for all your help. I think I've got everything aligned according to Oracle's standards. Going to work on coding in a check statement to insure they enter an integer now. Thanks again.
* No need to use System.exit(0); on line 13. It's going to do that anyway. * Aside from calling numberGame() for the sake of making a method, there's no need for that to be it's own method. I think you know this though. * I would still move HIGH_NUM inside class RandomGuess instead of having it inside numberGame(). * Think about changing the variable goodGuess to badGuess. Then your while statement can be "while (badGuess)" and remove the equality check. This is more of an "exercise for the reader"... * Display the range of possible numbers in the input dialog. Look up what random.nextInt(int) does. It might not do what you think exactly. It currently is not giving you a number from 1-100. * Consider moving your dialog messages to final Strings as private variables for the class RandomGuess. * If you want to use methods in a more legitimate way, consider having a method that takes in their guess and the correct number. It can return -1 if their guess is too low, 1 if it is too high, and 0 if it is correct. You could also have a method that takes in the -1, 0, or 1 along with their number of guesses and returns the correct String message to be displayed in the JOptionPane. Just some thoughts of "things to do" as it sounded like you were doing this for personal betterment.
I graduated in May 2005 (undergrad) and was only taking Senior Seminar, Senior Design, and had an Internship. I graduated in May 2010 (grad) and didn't do anything other than standard design patterns. I guess I just missed it...
Dinosaurs?
lots of things wrong with that. remember, = != ==
I use Vim and Bash.
Thanks for the info! Do you have a preference? I think I might have to just take the dive and try it!
also remember that '!=' means 'does not equal'
You need to learn to interpret what the compiler is trying to say. If it tells you else without if, it probably means it can't see your if. Look at your if. You put a semi colon so that completes your if statement. Remove the semicolon after if and the error should go away.
Kill that motherfucking semicolon, and bracket yo' shit up, son. if (lower = 0) { System.out.println("The equation has no solution"); } else { System.out.println("x is " + x + " and y is " + y); }
The semicolon after "if (lower = 0)" ends the "if" block so your next statement will always run. And (lower = 0) is assigning the value 0 to lower, not comparing the values, so it will always evaluate as true. Also your code could still crash at runtime because you are dividing by the variable lower without first checking that it isn't zero. 
I recommend always using curly braces even for one-line if statements. right now, your code translates to: if (lower = 0){ ; } System.out.println("The equation has no solution"); else { System.out.println("x is " + x + " and y is " + y); } You want to get rid of the semicolon after the closing parentheses.
Thanks man! I appreciate it. This helped 
The rest of the responses on here are correct, but I think there is one last thing to say; Stay confident and always, ALWAYS keep talking. Interviews are about getting to know how you think and if you stand there thinking really smart things quietly you may just look clueless and lost. Also, ask questions when you need clarification, and state your assumptions about a problem out loud. Good luck!
Well I started a new project which then took over (was initially just a learning exercise) and this one got put on the back burner. I guess I just didn't have the dedication to finish it, I'll be coming back to it after I release a v2 of my current project. Also it was stressing me out lol.
What simonsays. It's a pretty stupid interview question.
I'd suggest grabbing the free trial and giving it a go. I really like it. It has built in support for a LOT of frameworks.
Well, I didn't clear the carriage return. But I did construct a new scanner and the program works now without skipping to the second round of battling automatically. Thanks.
No sanity lol. I had it drawing lines all coming out of the bottom left corner and doing all sorts of crazy stuff. It's enough to drive anyone mad. Thinking about it now I should have approached it in a different way.
How do I download the JSci.maths package to use this class?
You don't: There's only one class in that package, the FourierMath class.
I would just say that lot's of free libraries already exist for Java to assist in rendering charts. http://www.jfree.org/jfreechart/
In your for loop, the value of newSampleIndex is never changing. It will always be 0. You are copying that value in to i, then increasing i, but never increasing newSampleIndex. You could just use newSampleIndex as i in that loop, like: for (int newSampleIndex = 0; newSampleIndex &lt; newSamples.length; newSampleIndex++).
Reminds me of [this](http://rogeralsing.com/2008/12/07/genetic-programming-evolution-of-mona-lisa/). [Timelapse](http://i.imgur.com/zVYMx.gif).
Most companies want you to have experience in some object-oriented language, and it seems (at least in my area) that C++ and Java are the two they want to see code examples in. I believe there is a Java certification; there used to be a practice test on the Sun website. Really learning object-oriented programming (not just in Java) can be a challenge, but it's well worth it in the end.
Are you looking to move into a development role? If so, you'd only be qualified for entry-level positions, despite your management experience. Without at least a respectable degree, it will be very difficult to assume a technical role. In the world of software, people only care about what you do. If you have Java on your resume, and haven't done anything substantial, you'll be passed over. Fortunately, the best way to learn is to do. Write an Android app if you're interested in mobile development. Make a web app with Spring/Hibernate if you want to break into enterprise backend development. While you're doing that, show your work off via the Android Market or on Github/Bitbucket/Google Code. In the process, you will learn a lot about programming best practices outside of the code itself, like source control usage and app builds/deployment. Java is very different from JavaScript. Despite the similar name, they are in no way related. You'll be in for a bit of a shock being used to web tech - Java is very static, while JavaScript is very dynamic. Both paradigms have advantages and disadvantages, which you will come to understand in time. The most important thing is that you must be interested in what you are learning! Writing code for a living is a tough slog without passion - you have complex problems to solve every single day, and you will be unhappy if you are learning it for purely financial gain. 
Okay I'm a bit clueless right now. What exactly do I put into my Complex array to perform the transform? I want to be able to extract the frequencies or amplitudes of a .wav file.
Aren't certifications looked down upon (as marketing schemes)?
In the trendy startups, yes. In corporate HR and enterprise, they get you in the door.
I use Eclipse. I personally think it is the best one. It is a good all-around IDE, and there are plugins to support pretty much anything else you might need. It is highly configurable among developers, making it easy to make lots of people happy, while still working from a consistent toolset. I have used IntelliJ in the past, and it was good, but managing licenses for my team became too much of a hassle, so now we use Eclipse. 
It's the Comp Sci degree that you should learn along with it that is probably more important than the language.
Eclipse because it's the most common one and you can do everything with it.
IntelliJ Idea has a free community edition. I've been using it for the past 4 years and love it.
I've only ever used Eclipse. A friend and previous co-worker now use IntelliJ and pointed out some of its benefits. While IntelliJ isn't as widely used, they develop most of the support for 3rd party tools themselves, so the integration can work better than the Eclipse variant of them. For example, I've heard that the Maven IntelliJ plugin is easier to use than the Eclipse one.
Learn all you want, but please please please do your fellow developers a favor and don't pretend like you know how to program. There's a huge difference between "learning a language" -- which can mean anything from knowing the basic syntax, to writing a "Hello World" program, to being able to write actually useful snippets -- and actually working as a software developer. While there are many highly competent programmers that started in other fields, it's a very long journey and you have to put a lot of work (years of it) to becoming good. Java in particular is fairly steep learning curve, not because Java itself is really that difficult to learn, but that most Java developers in the industry -- the kind that you hear about making lucrative salaries -- work with complex high level frameworks (e.g. J2EE, Spring, Struts, etc) that require you understand a lot of software concepts (OO, Design Patterns, etc). I can't count how many times a manager has told me something like "Oh yeah, I taught myself how to program. Here's this code I wrote. Can you maintain it?" It inevitably is always horrible code. Also, with respect to Certifications, I personally don't put too much stock into them. It's interesting, but I certainly wouldn't make a yes/no decision based on it, although for certain companies (the kind that works on contracts) it may actually be a requirement. I think the Java Certification from Sun used to be respected, but I've also heard that their standards have dropped. Whenever I interview a developer, I almost always request sample code, as well as asking them to write something during the interview.
Eclipse, better then netbeans... and compatible with mac if needed.
Netbeans, no configuration required. Just download with Tomcat and Glassfish bundle and you are good to go.
I agree. I like Netbeans better then Eclipse.
I use Eclipse, because I have to. Our shop 'chose' RCP &amp; OSGi, and my preferred IDE (IntelliJ IDEA) apparently doesn't handle this flavor of OSGi. But I much prefer IDEA over Eclipse. Eclipse is just too buggy and unstable for me-- IDEA is much more polished and thought-out. Eclipse is more like a bag of... "stuff". 
&gt; managing licenses for my team became too much of a hassle, so now we use Eclipse. Have you tried the IDEA community edition? It's free... but it sounds like that ship already left the port in your case.
used to use Jgrasp but now eclipse
A few that I can think of: * [The adapter pattern](http://en.wikipedia.org/wiki/Adapter_pattern) which is prominent in Swing/AWT. Some examples: [ContainerAdapter](http://docs.oracle.com/javase/7/docs/api/java/awt/event/ContainerAdapter.html), [DragSourceAdapter](http://docs.oracle.com/javase/7/docs/api/java/awt/dnd/DragSourceAdapter.html) * The [factory](http://en.wikipedia.org/wiki/Factory_pattern). Some examples: [SAXTransformerFactory](http://docs.oracle.com/javase/7/docs/api/javax/xml/transform/sax/SAXTransformerFactory.html), [DocumentBuilderFactory](http://docs.oracle.com/javase/7/docs/api/javax/xml/parsers/DocumentBuilderFactory.html) * The [singleton](http://en.wikipedia.org/wiki/Singleton_pattern) pattern. Usually uses a Factory to achieve this. * Abstract classes (best example is in the AWT/Swing adapters: [MouseAdapter](http://docs.oracle.com/javase/7/docs/api/java/awt/event/MouseAdapter.html) * The [decorator](http://en.wikipedia.org/wiki/Decorator_pattern). Some of the examples I've seen of this are in Java EE, such as [HttpServletRequestWrapper](http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequestWrapper.html) EDIT: Looks like mine are a subset of the GoF design patterns link submitted by an-ant
Sublime when I want to impress others. Eclipse when I want to impress myself.
I use GEdit and terminal. :D Mainly because I don't need to program for a living.
Adapter/wrapper for IO (e.g. `new BufferedReader(new FileReader(new File('config.xml')));`)
I'm an amateur user of both C# (mostly for XNA) and Java (more java experience), and I have to recommend Eclipse. I use Visual Studio 2010 for C# and I just really like the feel of Eclipse much more. Didn't get into anything too advanced asides from installing the Andriod SDK, but the whole interface is pretty intuitive and clean. I tried using Netbeans because I know a lot of people like it. I had nothing wrong with it, but it was not as easy to jump into. Really that could just be due to my ~1.5 years of Eclipse use prior, but still. That's my input :33
http://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns
Certificates do not mean experience, they just prove you can cram. Around these parts certification means little, employers usually find out how good you within the initial trial period (ie: your first three months of employment)
 String[] images = new String[] { "images/image 3.jpg", "images/image 1.jpg", "images/image 2.jpg" }; getImage(getDocumentBase(), images[(int) (Math.random() * images.length)]); Here is a cleaner way of selecting the image. If your problem is more with the way you display certain text with an image then you need an object that represents the image location and some text. Then you store that in a variable for the paint.
Interesting concept. -- Basically you would have x threads whose job would involve polling the DB for the job with the highest priority, pop it off and execute it. Submitting a job to this queue would involve serialising it (with a priority) and storing it in a database. -- Problems would include the fact that you have to serialise the objects. If your jobs are simple enough may not be an issue. If you have 2 Threads executing the jobs then you have to make sure that they both don't grab the same job. I feel this is a weird thing because jobs in PriorityQueues are generally a short lived things. What I'd like to know is why you are wanting to store them in a db? Are you expecting the job to be executed sometime tomorrow? Is it a reliability thing, you want to guarantee that the job does get executed?
When we initially made the decision, Community Edition didn't exist. It's something we might reinvestigate in the future, but its lack of web development support doesn't look promising.
Exceptions use the decorator pattern - you can catch an exception then throw it again wrapped in a different exception.
Are you kidding me?! You haven't learnt about the fundamental data structures of the language you are learning? I don't know how to help you. I could give you an answer but I don't know how you are meant to be learning. Best to bring it up in class/whatever interaction you have.
Outstanding link! Thanks!
I love eclipse. Also check out [eclim](http://eclim.org)
ah shit. i just got out scala'd. im still learning :(
Singletons in modern languages like Java and C# are almost always design flaws. It is almost always unnecessary and there are far better alternatives. The problem is getting stuck too much in objects train of thought instead of understanding the situations were functional programming is better. There is nearly no cases were a singleton should be used over say a static class or other techniques--not even for testing. Singletons are a code smell, and I for am and really happy that they are finally falling out of style as more and more people realize this.
Depending on your needs, you could also look into a MQ solution such as ActiveMQ or RabbitMQ. They can persist themselves to disk or via JDBC.
You have to *try* them. Give each one a week or two's real usage, and see which you prefer. Don't just listen to what a bunch of other people say and go with it, really try them to see which fits better with your process. That being said, I much prefer netbeans. [This exact thread](http://www.reddit.com/r/java/comments/qjegy/what_software_should_i_use/) happened a couple days ago, where instead of the eclipse love-in that this thread has become, it was a netbeans love-in. Since there's a lack of netbeans love in this thread: * The netbeans gui editor is better than eclipse windowbuilder. Sure, there's an XML file in the background that it uses, but it's better than the windowbuilder "guess what this code means". * Eclipse configuration settings are never, ever, where I expect them to be. It's never clear to me what settings are {project-wide,system-wide,OS-wide,etc}. There's a couple settings that I have to change every single project, because I can't figure out how to set them permanently IDE-wide. Netbeans seems to always do what I expect, with behaviour like just about every other IDE [VS, XCode, code::blocks...] * I find netbeans is faster and more responsive. Others find the opposite * Eclipse has many, many more plugins than netbeans. I find the paradox of choice is alive and well, and I have yet to even figure out what modules to install to "just show me a damn UML diagram", despite that being [a huge thing](http://www.eclipse.org/modeling/mdt/?project=uml2). Additionally, read the list of acronyms on the left hand side of that page, and marvel at the lack of "just install this to get started". Of course, for all that bitching, netbeans doesn't even have a UML plugin anymore. * The hoop-jumping required to "just run the goddamn code" sends me into a nerdrage every time I open an existing project for the first time in eclipse. I've never had that problem in netbeans. It's sad, because I desperately want to like eclipse, it seems like a great tool. I just get stymied every time I try to do anything simple, before I even get to the neat stuff it's capable of. Mylyn's a seriously compelling thing, but since netbeans remembers the debugging window positions when I launch the debugger, it doesn't matter.
True, the plugins do tend to be higher quality. The converse is, there tends to be less of them.
correct
I'm shocked at how few netbeans users there seem to be here. I love open source and I really wanted to get on board with Eclipse; but I just ran into problems repeatedly, and found Netbeans just faster to get going on, whether that was starting my own project, or cracking open an unfamiliar project tree.
My monocle hit the floor and shattered. Are you serious?
Us NetBeans users are typically hidden below the Eclipse users. I feel kind of bad for the IntelliJ users. :(
OP here. The problem I'm trying to solve is that I have a lot (possibly &gt; 1M) "jobs" that I need to run. So say, the job has a "seconds delayed" attribute. The higher that value is (the more "late" it is), the sooner I want that job dequeued. Use of a PriorityQueue seems perfect for this but since this is a long-running process, I'd need the queue to be serialized somehow to survive restarts, crashes, etc.. I think a DB of some sort would be a good choice for this. JMS is almost fits the bill, but JMS message retrieval is FIFO (or close to it). I need the messages to dequeued in a specific order. Thanks for brainstorming this with me.
By far the best example is the Iterator pattern. Java has even has syntactic sugar for it (for-each loop). http://en.wikipedia.org/wiki/Iterator_pattern
Say I have a object that has 2 attributes, "id" and "secondsDelayed". I add to a queue in this sequence: {id=A, secondsDelayed=10} {id=B, secondsDelayed=5} {id=C, secondsDelayed=40} If i pulled them out with a normal queue (or JMS), I'd get them back in that order I put them in: A, B, C. What I'm looking for is to get them in the order C, A, B. 
Second for visual studio- as somebody self learning programming, it's the only one I was able to pick up and understand how to implement the language I was learning in a book- c#.
Well, create a SQL table with an int field secondsDelayed, a task ID field of whatever type you need (I don't know enough about your system to make a recommendation here), and Ye Olde Autoincremente Keye. Insert a new record every time you get a job. Assuming you have a database with atomic transactions, you can dequeue an action as follows: START TRANSACTION; SELECT priorityQueueTableKey, taskId FROM PriorityQueueTable ORDER BY secondsDelayed DESC LIMIT 1; DELETE FROM ProrityQueueTable WHERE priorityQueueTableKey=?; --use the key you got from the last query COMMIT; You may also want to use a timestamp field rather than the number of seconds delayed if that's what you're really using as a priority, as time marches on after a job is enqued. In that case, sort by the timestamp ascending rather than descending to get the oldest job first.
I'm not exactly sure why you wouldn't think so. I am very much correct, but instead of providing, say, serious counters as such--most decide to downvote without a word. Singletons are very much a old design hack for older less modern languages, like C. There is literally no place for them today (unless you're using said older languages). There are scarce good examples of a proper place to use them modernly. I've seen some good claims for sockets... but no real good explanation for why other than we can. But ultimately, I have never seen a single proper singleton in the wild that wasn't a blundering mess.
ZipFileInputStream is a good example of how to completely fuck up an API. I guess that's an anti-pattern though.
A different perspective: a pattern used in a language is a flaw in the language. It is a frustrated abstraction potential. It is stuff that the language is too weak to express, so you need half a page of code or more. What is a pattern in assembler is not a pattern in C (loops using goto, return stacks) What is a pattern in C is not a pattern in Java (structs+procedures to approximate objects) What is a pattern in Java is not a pattern in Smalltalk, Scala, Erlang or Haskell (look into closures, monads or actors to see what they can express). So Java the language should not be considered to have patterns in itself, but its set of constructs force people to use patterns.
At least with IntelliJ, JavaEE projects theoretically support hotswapping, but I haven't been able to get it to work with the projects I work on. On the other hand, both startup and redeployment performance of current application servers (JBoss 7, Glassfish 3.1) is really good, so I don't miss it too much...
If you have an open file, how do you serialize it?
rather inject an object. singletons have many issues, especially around testing.
Maybe what I like is the autocomplete starts right away when typing, not having to hit a key combo to make it come up. Anyone know how to make that happen?
"HashMaps however take up more memory." ... than what? Than IdentityHashMap? Sure, but that's an apples-to-oranges comparison. Than Guava's ImmutableMap? Yes, by about 20%, but he didn't mention that class (the first Map many developers reach for). Than TreeMap? No, they're about the same. 
Why bother? Does your application have trade secrets? If so, don't distribute it; you can always reverse engineer bytecode. From your video it seems that your application doesn't do anything very novel. Is it simply a genetic vectorizer? http://www.youtube.com/watch?v=T00r7EK5BFU At most, you can make it harder to do so. Here's an open source obfuscater: http://proguard.sourceforge.net/
They didn't, I am reading about it on my own. I think serialization is usually a Java 2 topic.
I've also run across this issue. Is there really no way to flush Scanner's internal buffer, other than using the nextLine method? Seems odd.
1) You can't. You can make it harder at best. 2) Why do you think anybody will? 3) Nobody will. 4) You are not doing anything so secretive or advanced that anybody else couldn't replicate without even looking at your code. 5) If I was intending to copy you, given the above, I wouldn't even bother to try to interpretate your, probably crummy, way of doing it instead of my own (we all think we can code better, not that your code is necessarily crummy really) 6) You should be looking into protecting your idea, not the code. That is, if it is even revolutionary or unique, which it really isn't. 7) Speaking of which, I'd probably be more concerned about somebody trying to sue you for breaking copyright, that's how unrevolutionary your method looks. Just stop worrying about other people really. Who cares if they decompile your program? What are they going to do that you fear so much?
One word: JRebel ;-)
I'm not saying you're entirely wrong, and I can see where you're going, but the Singleton pattern for a service that provides access to shared global state IMO really isn't such a bad idea. The pattern is basically something like this: @Singleton @Startup public class MyFooService { private List&lt;Data&gt; someGlobalData; @EJB private MyFooDAO fooDAO; @Schedule(hour="*", minute="*/30", second="0") public void fetchData() { someGlobalData = fooDAO.getLatest(); } @Lock(READ) public List&lt;Data&gt; getSomeGlobalData() { return someGlobalData; } } This pattern works really well. The scheduled timer is guaranteed to have only one instance running per vm. This Singleton can be injected into client beans, which don't necessarily have to be aware of the fact they're dealing with a singleton. For all they know, each call to getSomeGlobalData would invoke a service directly. In this case the `fectData()` method is simple, and it wouldn't need the write lock (a single assignment is atomic anyway), but in case the method would need to do a little more the write/read lock system is ideal. &gt;Is there a price list for Monday, and a price list for Tuesday? As far as the client's are concerned, there is no timing label associated with that data. All the client does is ask the Service for the current data. If it asks this on a Monday, yes it will get the one for Monday. It it's a Tuesday, the data will be for Tuesday, but the client is unaware of this. If you go to a bi-daily update scheme, everything will keep working. You only need to update the scheduling in our Service. 
A HashMap isn't really O(1) either. Given a decent hash function it probably has a average complexity of O(1), but worst case is always O(n).
If you use an open source library/framework and don't contribute money to the project, you have no grounds to complain.
Because too many already are... Java needs fewer serializable objects, not more. 1) Serialization makes the object's internal structure effectively part of its API. Breaking serialization breaks your clients just as surely as changing a method signature. So you've committed yourself to maintaining your implementation, at least sufficiently to deserialize, forever. 2) It's a lousy way to persist data, yet clients will use it to do that. Networks of data relationships have to be reestablished when you read the data in, and you end up reading in a big ball of stuff even if you'd be better off reading in only a portion of the data and reading in the rest only as needed. You have to deal with singletons and recursive data structures. It fixes your document storage format to the objects used to implement it, which means you can't update your document format as your requirements change. Java's default serialization mechanism is a real mistake, in my opinion. Serialization has its place (like RPC), but it needs to be used designed carefully and used judiciously. Providing default serialization to any object implementing Serializable just invites misuse. Objects as complex as java.text.Format and java.util.Calendar implement Serializable, which makes no sense at all.
Thanks for that question. Yeah, I think the whole app will run inside a browser. I really don't have much need for the graphics capability of JavaFX for this one. Yesterday I went through the code to see how to include a Java FX panel in my app in case I need it. Actually I'm just having fun with NetBeans right now. jMaki looks nice and will do most of what I want. But thanks for confirming some of my suspicions about Swing/JavaFX. If I ever do a game :) I'll keep them in mind.
Saw this question in Java certification tests. It's know feature
public static class MyFooService { private static GetData() { return DataGrabber.getLatest(); } } Done and done. The part you want, is a cache. Do note, you do not have to update the data every hour. You ONLY need to update the data once it is accessed and it's been over an hour. Such as: public static class MyFooService { private Data dataCache = DataGrabber.getLatest(); private Time lastAccess = CurrentTime; private static GetData() { if(CurrentTime - lastAccess &gt; 1) // Assume appropriate time logic here. dataCache = DataGrabber.getLatest(); } return dataCache; } } There is nothing your code that does over mine better (and in fact, I already improved over your design). The fact of the matter is, you don't have to use a singleton at all. You don't. There is no point to using it, unless your just using to gloat about how you are. We are of course being simplistic in the code, but you need to realize this very quickly: there is nothing you can do with a singleton that I cannot do without it. And this is assuming that the separation of the getLatest function (however it is implemented) and this class is good design--which is a pretty big assumption. ... But there is a bigger issue here, and that is *you aren't showing an example of a singleton*. You are using a singleton session bean. Singleton session beans are not really singletons (there can be multiple), they are not the same design pattern, and they are a separate technology altogether. It is not the design pattern we are actually talking about. 
Boxing to the same object is a form of [interning](http://en.wikipedia.org/wiki/Intern_(computer_science\)). 
I spose it can be blurry due to semantics, but i guess that's true - OP could have meant REST web service. For clarification sake, i was suggesting REST web services as opposed to Web services through WSDL generation.
It sounds like you may have installed an old version of Eclipse. What version of Eclipse are you running?
I am using the windows 32 bit located http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/galileosr2
I gave up on eclipse tonight, it's been nothing but trouble. Idea community edition was really quick to setup...
Yes, you should keep the GUI logic and the game logic separate. Here is a good place to start reading http://en.wikipedia.org/wiki/Single_responsibility_principle As to whether WindowBuilder is a good tool for this. I've used it a little and it will help you build classic GUIs in a number of technologies (notably Swing and SWT), however to get something looking like a Monopoly board you will have to customise those GUI components quite a lot.
Thanks for the follow-up. I wasn't criticizing, I was genuinely interested!
I'm glad we agree.
That's all okay, but she's in her right to warn other users about the particular unreliabiliy of Play, isn't she? This helps other users to decide if they go with Play or not.
I used it 1-2x a month for android dev and each time I would try to update the android components or eclipse there would be issues. The upgrade system between version sucks. 
You can actually achieve this using [spring integration](http://www.springsource.org/spring-integration) as well. We use it quite a lot.
Okay, you need to understand mavn to get this to work. First create a project with which you want to use JBehave. Then in the pom.xml file add the dependency to the version you want. &lt;dependency&gt; &lt;groupId&gt;org.jbehave&lt;/groupId&gt; &lt;artifactId&gt;jbehave-core&lt;/artifactId&gt; &lt;version&gt;3.6-beta-3&lt;/version&gt; &lt;/dependency&gt; Here I'm importing the core for jbehave there are other versions you can import for different jvm languages etc.. see the documentation [here](http://jbehave.org/reference/stable/dependencies.html) Now you'll need to define a jbehave plugin in the maven pom.xml so when you write your tests it knows how to execute them. http://jbehave.org/reference/stable/maven-goals.html Have a look here it's quite detailed. That should be it, you should then be able to execute the tests from the command line using "mvn integration-test" or from eclipse using a plugin. I have never personally used jbehave, I use [cucumber](http://cukes.info/) instead. 
It works now. I let it download while i slept and then installed it this morning. Just needed the newer edition. As for using a different program I really can't since the book that I have instructs through the use of Eclipse.
I have the m2e plugin installed. My pom.xml file looks like this: &lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;behave&lt;/groupId&gt; &lt;artifactId&gt;behave&lt;/artifactId&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;name&gt;behave&lt;/name&gt; &lt;url&gt;http://maven.apache.org&lt;/url&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;3.8.1&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.jbehave&lt;/groupId&gt; &lt;artifactId&gt;jbehave-core&lt;/artifactId&gt; &lt;version&gt;3.6-beta-3&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; How do I make eclipse add the jars to my build path?
Polymorphism means that calling a function/method may result in different code being executed, dependent on the run-time or compile-time types of the objects and values involved. This fits.
&gt; There are different types of session beans. The @Singleton is definitely a singleton. A singleton session bean is not a singleton. I'm not joking, I'm not kidding, they aren't singletons. The singleton annotation deals with *scope*. I know it can be confusing since two different design methodologies use the word "singleton", but you're just going to have to deal with it. Singleton session beans have their own issues and concurrency problems as well. A singleton is a pattern, a singleton bean is scope in Spring. The singleton deals with the classloader, and the bean with the container. Singleton bean in Spring and Singleton pattern is quite different. Singleton pattern says that one and only one instance of a particular class will ever be created per classloader. I'll repeat, a singleton bean deals with scope. The problem is, you don't understand the underlying technology. Here's the easy part, we are replying to a link in which the singleton pattern is discussed and used. Did you use any of the behavior from the link? No? Exactly. You are not using a singleton patter. &gt; It gets the data asynchronously This behavior has nothing to do with the class being a singleton. What you are referring to is the timer. You like how it automatically updates every hour. This can be wasteful, as what if that data isn't used for a hour? Especially if this isn't that time consuming of a method, the cons drastically outweigh any benefits. But that is largely something to be judged on a case by case level, not really in scope here. &gt; The static version also lets multiple clients wait and fetch Oh shove it. You know quite well that there should be an update of the lastAccess in there. If you couldn't put 2 + 2 together, I feel sorry for you already. I'm not writing a program here. And if you are thinking there will be more than one static instance you are mistaken. &gt; plays nicer with injection and declaritive security and such BS. Tell me how you think that is. The "and such" shows you know nothing about what you are saying other than some list you found online about the benefits of a singleton. But again, you did not give a singleton, you gave a singleton session bean. &gt; that have hardcoded embedded references to services I'm unsure where you are drawing this from.
First, only consider things you will enjoy making. What I consider fun now is very different than what I did then. I took comp sci ap in 2002 when it was C++, and they let me take it again the next year (my senior year) because they changed the language to Java. So, looking back a what was fun for me, the first year I created the game of hearts, complete with network play and AI. The second year I created chess with easy, medium, and hard AIs. Both graphical. I was very enjoyable watching my AI destroy my teacher (same teacher both years). That being said I also started programming when I was 10 and did all of my work in class because I knew what I was doing pretty well at that point (relative to the class, compared to my experience now I used to be a complete idiot but then again no programmer can look even 6 months back and be happy with their old code). YMMV Other things I found fun back then was a simulator for cars and street lights, conways game of life (you could implement that and then turn it into a game of some sort), and basic OS development (don't attempt this for your class). Hopefully some of this helps guide you to picking out the project you want to do. Don't recreate what someone else did unless it's really what you want too. Good luck! Let us know how it goes.
One more thing, most projects that fail do so due to improper planning and requirements. Once you decide on a project, write down a clear set of requirements and stick to it. Some can be changed, but don't let feature creep or an unclear vision of the end goal be the destruction of your project. As you go and start thinking "wouldn't it be cool if...," write it down, mark it as a nice to have, and move on. If you keep thinking about it keep writing it down until your head is clear. Don't let your mind or time get caught up in nice to haves until the core of your project is complete.
Flattered by your interest. Good intentions all around! :)
You're probably right. I guess I'm just trying to get a spark before I actually start my project.
Not sure how feasible, but maybe write something that plays an mp3 while analyzing the output to create a fun visualization? Many things already do this, windows media player for example, but no reason you couldnt do the same.
On later versions of version 6 of the JVM it has been switched on by default. Drawbacks would include reduced maximum heap size to 32Gb, though for many this is not an issue, other than that I havent seen any as yet.
I highly recommend [/r/javahelp](/r/javahelp)!
I'd go with [Apache Commons Math](http://commons.apache.org/math/) - as it looks like, most of their implementations are based on the Jama code but in contrast this project is still active ... and it also offers pivoting: [LUDecomposition.getPivot()](http://commons.apache.org/math/apidocs/org/apache/commons/math3/linear/LUDecomposition.html#getPivot%28%29)
Thanks for this post. I think I got my answer, which is, method overloading is NOT a form of polymorphism. The other comments, while I appreciate them, didn't really explain anything, but re-state that they think it is. I guess if there is an open debate, I'm on the "it's not polymorphism" side of the fence.
Floating-point numbers are useful when time is more important than precision, because precise calculations (with int or long) can be very slow. Example: graphics programming. It often does not matter whether a certain shape is located at coordinates (150, 250) or (151, 250). But it is important that shapes are rendered quickly so that the user experience is fun.
The most basic reason: You can't represent irrational numbers to an infinite precision. `float` and `double` are two specifications for a specified range/domain of precision, and at less cost than a `BigDecimal`. For example, In most cases you don't need to know something is `80.00000000000000000000000000%` done, only that it's very close to 80.
quoting the tutorial: "This data type should never be used for precise values, such as currency. For that, you will need to use the [java.math.BigDecima](http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html)l class instead. [Numbers](http://docs.oracle.com/javase/tutorial/java/data/numbers.html) and Strings covers BigDecimal and other useful classes provided by the Java platform."
Thanks! I have never really dealt with a situation where I needed a very precise number but this will definitely come in handy in the future some time.
BigDecimal BigInteger
you are correct about the @singleton annotation, it is basically a main line into a DI pattern. a true singleton (as per GOF) has a private constructor and is only accessed via getInstance(), which is an anti pattern.
There are libraries out there (like `java.math.BigDecimal`), but money or any specific thing with a specific behavior can be a class, something like this: class Money{ long dollars; byte cents; } Why use floats? Well, let me ask you, why do you use decimals in real life? How often do you use numbers like "one third" or "pi" that decimal can't represent and does it fit your needs? If for instance you need to know how many seeds will cover a certain patch of land, will an error in the 18th decimal place make a difference to you? The payoff of floats is that you can represent huge numbers and tiny numbers with much fewer bits. The difficulty is that you can't represent every single number in between.
My favorite demo sequence of examples: 7/25 7.0/25*25 14.0/25*25 21.0/25*25 double b = 1e308; 2000 + b - b - 17 -17 + b - b + 2000 It'd be nicer to swap Java's priority on correctness vs efficiency. Languages like ruby or racket do correct arithmetic by default, and you circumvent a whole class of bugs (like using == to compare floating points, currency round-off and salami fraud, etc.). (python goes halfway -- it uses big integers by default, but fractions are floating point.) If you find that tracking the right-answer-exactly is leading to performance issues (your "velocity *= 0.95" friction term generating numbers with thousands of places), then you go back an declare the types to use inexact floating-points. (Don't jettison correctness to optimize prematurely though -- look for *actual* performance issues, not just hypothesized performance issues.) 
Doesn't storing numbers as fractions using integers allow the associative property to hold? While in floats there is no associative property.
ahh i didn't know that existed ,i shall venture over there, thanks!
when speed is more important than precision
Of course I understand the point you are making, but I don't really think it's the same. If you are working with ints, you (presumably) only care about integers, and therefore the fact that there are an infinite number of irrational numbers between any two ints is irrelevant. Ints can always either store a given integer or not. If the number is within the range, great, it's 100% accurate. If it's out of range, you get either wildly incorrect results or errors depending on the language and usage. The point is that as long as you remain within the int's range, you always get perfectly accurate results. And, since the range extends all the way to "ginormous" with 64-bit ints, it's not hard to ensure that you never stray outside of this range under normal circumstances. The set of problems raised by floats' inaccuracy is completely different, as they are inaccurate *even during their expected day-to-day usage*. Under normal everyday usage scenarios, you will *never* get perfectly accurate results out of a float\*. I think that's a pretty significant difference. \*Yes, I am obviously aware that it is possible to perform exact calculations using floats, such as using only whole numbers or binary fractions. Obviously that is going to be the exception rather than the rule.
Good point! I've never thought about it like that before. 
This doesn't always work. What if you are dealing with gas prices or anything else that typically uses fractions of cents? $3.999 can't be represented without manipulation.
What I have understand is that next generation of play is going to be kind of massive leap from 1.X so I can really understand that they priorize to the top all the stuff on the new branch. It may seem a bit rude but totally understandable
In cases, like currency, where you know that all numbers will be the same precision then often it makes more sense to convert to the smallest monetary unit. If I was writing a program that did a lot of math with currency my variables would be in cents than dollars so I could use int or long. long dollarsInCents = 1000; // $10 Of course, if you divide you'll only have Java's built in long rounding available to you (which may be fine) vs some of the more custom ones. 
Yeah, looks like I'll need to do something like that. Thanks.
You can actually prove that there are a lot more irrational numbers than rational numbers, if you accept that irrational numbers exist. Between any two rational numbers there are an infinite number of irrational numbers. Once you go from fixed precision to variable precision, you really need to keep track of the potential amount of precision that is lost. Most applications don't do this. `float` and `double` are defined in such a way that as little possible precision is lost, when doing common operations.
I know that the irrational numbers are uncountable while the rationals are countable (and thus obviously infinitely more numerous), not to mention the fact that your comment that there are an infinite number of irrational numbers between any two rational numbers is somewhat fallacious, since there are an infinite number of rational numbers between any two irrational numbers, as well. But the point I was trying to make was that when we humans do our calculations, we're usually dealing with a number with an exact representation as a rational number or one of a small subset of the irrational numbers which we happen to be very good at approximating to an arbitrary degree of accuracy, there being little need, for example, to approximate pi past the 40th digit or so is largely unnecessary, since you can approximate the size of the observable universe to the size of a hydrogen atom at that level of approximation (from wikipedia) and yet we can still have calculated it out to about a trillion digits or so, but if we're not using a rational or one of those irrationals, we're probably using a product of them. So, realistically, we as human beings are going to theoretically be able to calculate, more or less exactly, anything we could need, but to do so with a higher precision format or using variable precision can be quite slow, so we just accept the inaccuracies of something like floating point for the speed and try to be smart about our required precision, along with the precision of our calculations, to try to keep all those little errors from accumulating, since speed and accuracy are kinda trade-offs, but we've done our best to give you the ability to choose which one you want, with floating point serving a vital role in calculations which need to be done en masse and often, with a decent amount of accuracy, but not that perfect, such as weather and other scientific calculations, where the speed of each individual calculation is vital as you may be doing billions of them.
Thank you for an excellent and well written answer! Seems like a source for headaches in certain projects. Are there any numbers on exactly *how* slow BigDecimal is in comparison? Any best practices?
In terms of orders of magnitude, we're talking anywhere from hundreds to thousands of times slower than doubles depending on what Java version you're using and what operations you're doing. Older JREs (pre-7) are substantially worse. As far as best practices go... * Profile your code and make sure that you're actually waiting on BigDecimal math before you do math-related optimization. Sure, they're thousands of times slower than doubles, but that doesn't mean you aren't waiting on hard drive access, network I/O, GC, a 10 million-element bubblesort hidden in your code, etc. * Don't use them unless you need them, and don't do unnecessary operations with them. Algorithmic improvements can pay big dividends when you're working with slow math.
I have now change the blogs blogger template from dynamic to simple format, so hopefully the page should now display properly. I had noticed that the post views did not match the number of people hitting the site, this may be why.
awesome! Thank you to both of you for the help and explanation. just one more question: I'm working on making a rectangle but am having some problems loading it because of one line of code(line 48). here is the [code](https://gist.github.com/2029499)
Why didn't you just ask the teacher/professor? sincerely, Richard Nixon
 Lol! You're pretty damn good in futurama! He takes a long time to get back in touch and I have two questions that I have asked him and he still has no replied back. Figured this might be a quicker way to get answers
The statement gives me no error but when I launch the Applet , I get an error on the Applet stating "start: applet not initialized". Here are the assignment instructions: "Box.java should have these instance variables (all of type int): upperLeftX, upperLeftY, height, width, and one more instance variable of type Color named boxColor. Make them all private and provide Getters and Setters for each instance variable. Provide the body of the following Constructor that sets the values of the instance variables: public Box(int upperX, int upperY, int h, int w, Color myColor) Create a method called display(Graphics g) that uses setColor(boxColor); and fillRect(upperLeftX,upplerLeftY,width, height); to fill our box". and then there is a part 2 where I have to make a 4x4 grid(which I have yet to create or been shown an example of) of boxes that will display colors. here is the question for part 2 just in case: "This applet should display a 4 x 4 grid of boxes, each with a different color (there are 13 standard colors you can look up in the Color Class in the API, you can use a few twice to get 16 boxes). You must create 16 instances of the Box class and display them. Do not reuse just one box object". 
Are you loading this from an html file? Could you post the part where you load the applet?
problem is, classes[12] is uninitialized (null) in line 2. first classes[12] = new ArrayList(); then works classes[12].add(5) first line only initializes the array with null references as entries, not the elements of the array with empty ArrayLists.
That's it.
awesome, thanks for the help guys
your answer is correct, if MyObj was declared as a type of MyClass earlier.
&gt;for(int i = 0; i&lt;n; i++) &gt;classes[i] = new ArrayList(); Shouldn't it be "i&lt;n.length"
I can't promise you that I'll answer your questions quickly but I wouldn't mind helping you out when I can. Shoot me a PM with questions or we can figure out some other method of communication. 
For an EJB, you wouldn't create them with new() anyway. From the managed (EJB) view of things, they are of course singletons ;)
this doesn't always work. You often need more precision than cents in order to know the right answer. Remember sig figs from elementary, middle, and high school? They are needed for money too.
The Amiga SHOULD have won over the PC. Crazy that it didn't. Oh well...
That's not valid syntax. I think you meant to have for (int k = 0; k &lt; 20; k = k + 2) { if (k % 3 == 1) System.out.print(k + " "); } You should know this by now, but the answer would be B. The AP exam is in the beginning of May! (this coming from an AP CS teacher)
This problem seems trivial. How is this in an AP class? Seems like I could have figured this out when I was 12 without any schooling, and indeed even without knowing Java at the time (I did know C, however). I mean, this whole problem boils down to: 1. Have you ever seen a curly-brace style language before. 2. Can you pay attention to detail enough to interpret basic routines in your head and not miss anything significant. 3. Do you understand the modulus operator (which is significantly less difficult than the division operator). As a professional Sr. Software Engineer who deals with fresh-out-of-college know-nothings on an almost daily basis, I'd expect the bar to be a hell of a lot higher than this for an AP class. And how somebody can be in an AP class at all and write "if for"...I mean...what the hell people?
If you really need them, then yes. But the times I've compared programs w/ exact and floating-point arithmetic, I've been shocked at how little that specific difference makes to the overall program. (Most of the program's time is spent on network lag, or startup swapping-in-memory, not in a tight numeric loop.) Those comparisons were in Racket, where numbers which still fit in 29 bits still are just a single word, and only numbers that don't fit are out on the heap.
If you have such requirements, obviously mark them in your requirements.
PS: My sorting solution: import java.util.Arrays; Arrays.sort(array);
It's a high school online class which I can't drop or retake. I don't know why that's just what I was told. And I don't have a textbook. :( 
So I kept looking it over because I was confused by what you were doing, and it turns out a lot of that code isn't needed! Or my test data was working without it for some reason. I really didn't spend long looking at it. Tips to clean up the code: * you can just track what position you are at in the array with a variable. * looks like you are using count = myLocalArray.length to break out of the loop? you can use the "break" keyword for that. * since you are always starting at the first spot in the array, which should be the first in order since you keep sorting, its much easier to just find the first element which should be after whatever you just added, and fixing everything in between that element and what you just added. I think you are doing a lot of extra work in your second else if. Here is how I simplified your code and do a lot less looping. Please actually try to understand it rather than copy/paste! public void inputData() { int position = 0; while (reader.hasNext()) { String holder = reader.nextLine(); if (holder.substring(0, 1).compareTo("ˇ") == 0) holder = holder.substring(2); myLocalArray[position] = holder; for (int count = 0; count &lt; position; count++) { if (myLocalArray[count].compareTo(holder) &lt; 0) { backTrack(position, count); break; } } position++; } } private void backTrack(int from, int to) { for (int index = from; index &gt; to; index--) swap(myLocalArray, index, index - 1); }
Don't use native arrays unless profiling suggests that you should. http://jdevelopment.nl/java-best-practices-4-native-arrays-and-not-using-java-5/
Small correction: Line 09 of the first example should be: processData(data); (Isn't there a comment function on dzone?)
Post up the code that you're using, so that we can see whats wrong with it. 
This is a cheap shot, but my spidey senses are tingling. Did you write correctly to the file? Maybe you didn't close the output stream. Also, are all Strings shorter than 2^16 characters?
True.
So you removed all seeks except the first one? If that failed, it's possible that whoever wrote the file made the same byte-per-char assumption (which is still invalid!). It might not matter here if the data contains only chars that will be written as one byte, but it's wrong in general. I'm afraid there doesn't seem to be anything else wrong in the code. The core problem is that the data does not match your expectations. You'll probably have to compare your understanding of the data with the writer code or a data specification if you have one. Have you verified that the data you are reading before pName makes sense? If the seeks are wrong, it might not throw an exception but will just read nonsensical data hiding the true cause of the problem. Try printing out fields like name, age, and eContact. If you get crazy results like age = -56, you know that the data is read from invalid positions.
Which "new datetime" library are you talking about? [JSR 310](http://jcp.org/en/jsr/detail?id=310) did not make it into Java 7. The decent built in class is [Date](http://docs.oracle.com/javase/7/docs/api/java/util/Date.html) or [Calendar](http://docs.oracle.com/javase/7/docs/api/java/util/Calendar.html) and the good 3rd party library is [Joda Time](http://joda-time.sourceforge.net/).
&gt;*Another* motivation You mean aside from how the current one sucks so bad!?
Yes to upload too often might make a too good to sink ship , too heavy to even float updates should not be released but they should not be too widely spaced out . java 7 is 5+ years after java 6 but there is just a year for java 8 (announcement only)
All arrays do have a .length. He merely specified that n was an integer (int n = 0;) You are correct though that generally for loops that iterate through an array have the form of: for(int i = 0; i &lt; array.length; i++) //stuff
Lol, where to begin with that piece of shit.
By answering the question? Otherwise you're just proving vermicin's point.
http://thenewboston.org/ - Excellent site for starting out. Very easy to learn by following these video tutorials. http://docs.oracle.com/javase/tutorial/ - Once you've got the basics, use this, and the documentation, as your #1 resource. Big Java is a very, very good book. I've also heard that Head First Java is also good, as Pagirl said.
Not necessarily any of the Java Libraries, or .NET's DateTime, just **any** Date library in general.
Try www.processing.org for a fun and gentle introduction to java
This is how I learned java without opening a textbook once.
Dunno if it is the right thing, but maybe Launch4J is what you want.
In eclipse you can generate something called an executable jar, where they can just double click to open, but you can't really give it a custom icon or anything. To make an exe you would need to use another programming language like vb, c#,c++,etc. that calls the java. But make sure the target machine can support that language, like vb.net and c# need the visual studio sdk (forgot whats it called atm). They would also still need java on their machine. Can also make a bat file that calls the command line parameters...
Just 'Open With' the jar with javaw.
yeah, i can't tell if he's being sarcastic or not :)
Unless you are already a programmer of some flavor, I would suggest a formal college class or two. Jumping straight into a language with little experience can be daunting. That said though, do whatever feels right. Some people can really catch onto books or other mediums better than instructors. It really depends on the level of commitment you are willing to sink into it, and how important it is for you.
Get BlueJ - http://www.bluej.org/ - and the accompanying book - http://www.bluej.org/objects-first/ Not only is it great for learning Java from the ground up, it's also amazing for getting your head around Object Oriented programming which I personally found very tough until BlueJ.
you can use radius x radius or use the pow method in class Math, pow(double a, double b); "returns the value of the first argument raised to the power of the second argument."
If this program is targeted toward people who are scared of command prompt, i doubt they would be okay with using 'open with' and 'javaw'
An inner class does not magically run all the code inside it when it is constructed, when that code is inside methods. continueB when clicked will look to all of it's ControlListeners, and call the onClick() method of those ControlListeners. The difference here is that because you have an anonymous inner class, you can also gain access to the member variables of the object. If these member variables haven't been initialized by the time you click on continueB, then you will get an NPE. TL;DR: onClick() isn't called until the button is clicked, not when you construct the anonymous inner class ControlListener.
It looks to me that because the call is in the "onClick()" method, the levelSelection method isn't called until the user actually clicks the control. So as long as levelSelection is initialized before the user clicks, there will be no null pointer.
I'm not saying it has anything to do with command prompt. I'm saying if their mentality is to be afraid of the command prompt, i doubt they'd be okay with using 'open with' and 'javaw.' typically people don't open things like that, they just click it 100 times, progressively harder, until it opens.
how and where do i put that into the code?
It would be: area = Math.PI * Math.pow(radius, 2);
you can put it directly into the variable: area = Math.PI*(Math, pow(RADIUS, 2)); 
0) radius squared is simply "radius * radius" 1) remember to declare your variables (e.g. use "float area = ...;" or "float area; ... area = ...;" not just "area = ...;") In your previous program, for example, you declared "pounds" and "kilos" to be of type "float". 2) Math.PI is a static constant of type "double" in the class Math. "Math.PIf" doesn't exist. You can, however, declare PI as a float constant by saying, for example, "float PI = 3.14159f;". By default, floating point literals in Java are of type "double" unless you add the "f". 3) If you mix doubles (i.e. Math.PI) and floats (i.e. float radius) you will get errors complaining about converting type double to float. To fix this you can either a) cast the result to float, or b) use double everywhere. It would be better to use "double" everywhere instead of "float".
So how do I use double instead of float. I have this at the moment: public static void main (String args[ ]) { Scanner input = new Scanner(System.in); float area, radius; System.out.println("Enter the radius"); radius = input.nextFloat(); radius = Math.PI*(Math.pow(radius, 2)); System.out.println("A circle with radius of: " +radius +" has the area of: " +area); And I am getting errors. How do I use just double as that is evidently what is suggested? 
It takes so much effort to do the simpelest things. Here is some code from my app, which is probably wrong, but screw thier crappy API. These are the REAL variable names. direct cut and paste: Calendar fuckthis = Calendar.getInstance(); fuckthis.setTime(ExpireDate); // If in the same year, the number of days difference given directly if (fuckthis.get(Calendar.YEAR) == C.get(Calendar.YEAR)) { DaysDiff = fuckthis.get(Calendar.DAY_OF_YEAR) - C.get(Calendar.DAY_OF_YEAR); } else { fuckthis.add(Calendar.YEAR, 1); DaysDiff = fuckthis.get(Calendar.DAY_OF_YEAR) - C.get(Calendar.DAY_OF_YEAR); }
All of my code is executed from a code block like this. Is it somehow necessary to have sub runnables?
I agree with this guy. You learn by fighting through an assignment like this--not having people tell you how to do it.
community college is a good place to start
All my code is executed from something resembling this: EventQueue.invokeLater(new Runnable () { @Override public void run() { // your code here } }
I just got hired by one of the big 4 US banks as a Jr. Developer and the only technical question I had was: What is the diffrence between final, finally and finalize and what do they mean. I had some other crazy riddle that didnt really have an answer they just wanted to see what I said and they told me that afterwards. All the rest was competancy. Id suggest following the stuff nefreat reccomended and just really brushing up on the basics and the rest is all personality and work ethic.
When you declare a variable like: float radius; You can simply change the type: double radius; Note that, if you do change the type of radius, you will have to call a different method on your Scanner instance to get a double instead of a float.
http://lmgtfy.com/?q=Main-Class+of+the+jar+in+the+manifest+file
I agree that Big Java is the way to go. I've just started Java and that's what I'm using. There arr tons if great examples and the explanations are clear. I tried Head First initially but with little previous programming knowledge I didn't get far (don't let the novelty of it all be the selling point)
What's really going on is that the inner class has a "magic" field that contains a reference to the outer class's instance. You can even refer to this field as OuterClassName.this. When you refer to levelSelection above this is turned into the equivalent of OuterClassName.this.levelSelection. That is: you actually are referring to the field of the "outer" instance, not a copy. 
It's caused by repaint manager, not EDT. // force repaint in order button.setEnabled(false); RepaintManager.currentManager(button).paintDirtyRegions(); or less optimal: mainContainerWithButtons.repaint();
and then get into arduino too :)
I can't figure out how to get Java to play music, so this isn't working to well for me, hehe. I'll figure something out eventually...
An abstract class could contain some method implementations which subclasses would inherit. Interfaces have no implementations in them whatsoever. Also classes can implement multiple interfaces, but can only inherit from a single (abstract) class.
Just to clarify I was talking about JSR 310.
I think its best if I link you to a blog post that explains in detail what's wrong, and how JSR-310 is going to improve matters. http://londonjavacommunity.wordpress.com/2011/08/17/about-jsr-310-a-new-java-datetime-api/
Languages are like a set of tools... if a psychopath has a knife you should expect that he is not making a tasty dinner...
Sure, glad I could help. It sounds like you're having some difficulties with the fundamentals of object-oriented programming. The Java tutorials are good, but they are focused on the Java specifics and don't really go into the bigger picture. For that, I would highly recommend [Agile Software Development, Principles, Patterns, and Practices](http://www.amazon.com/Software-Development-Principles-Patterns-Practices/dp/0135974445) by Bob C. Martin.
I think one of the best guides is to look at the [Java API](http://docs.oracle.com/javase/7/docs/api/). Generally interfaces are mixed with classes and sub-classes. Packages denote a different usage (e.g. `myapp.swing` for GUI vs `myapp.xml` for XML parsing/generating)
I've always gone with the reverse URL com.company.application.subsystem If you don't have a domain, just make something up for the fun of it. 
The most important thing is not to go crazy. Don't create 20 packages 5 layers deep for your 2000 line program. Remember that one of the points of packages is namespaces, so you shouldn't put classes in the default package. However, there's no need to add a bunch of empty packages (e.g. org.net.com.company.project.appname), or really long names (e.g. com.mylawfirmlikename.mylongapplicationname) to achieve uniqueness. A single level is fine for many programs (e.g. appname), two levels are good, especially if you are writing a library to be used by others and you weren't very original with the name (e.g. noedig.util). Packages are also useful for organization, so create them when it helps you organize the project. Also remember that you can always refactor it later, so don't sweat it too much up front---write the classes, and then group them into packages when it makes sense. When in doubt, simple is better than complex.
While Scala is a JVM language and has special interop with Java, I'm not 100% sure this belongs in r/java.
First of all, it seems like you have several different Duke classes there. An abstract base Duke, and several other Dukes (WritingDuke, ThinkingDuke, etc.). IMO this would be less complicated if you designed it in a more object-oriented way. Second, if you want a random ordering of an array (of 3 things or 100 things or 1000 things), look at the [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
Caved and did it for you, hope you learn something. Your parameter diceRoller.nextInt(n) was flawed. You need an hour integer between 1 and 12, a tens place minute between 0 and 5, and a minute integer between 0 and 9. It is important to note that you cannot use random(60) for minutes because if it came back with a number less than 10, you'd lose the zero in the tens place and be left with something like 12:7 for 12:07. For choosing AM and PM randomly, just create a container of strings containing "AM" and "PM", then use random to choose which element of that container is chosen, there maybe a better way to do this, I just did what came to mind. Also, this was quick and sloppy, I wouldn't recommend using magic numbers. Also, comments are really helpful, especially in schoolwork. Write down what you are thinking for each step and see if the code corresponds to the comment. Really helpful to your future self and others. import java.util.ArrayList; import java.util.Random; public class RandomTimeGen { public static void main(String[] args) { Random diceRoller = new Random(); ArrayList&lt;String&gt; AM_or_PM = new ArrayList(); AM_or_PM.add("AM"); AM_or_PM.add("PM"); for (int i = 0; i &lt; 10; i++) { int hour = diceRoller.nextInt(12) + 1; int mins_tenSlot = diceRoller.nextInt(6); int mins_onesSlot = diceRoller.nextInt(10); String AM_PM = AM_or_PM.get(diceRoller.nextInt(2)); System.out.print(hour + ":" + mins_tenSlot + mins_onesSlot + " " + AM_PM); if(i &lt; 9){ System.out.print(", "); } } } }
I suggest you look at the java.util.Date, which allows you to Date date=new Date(someLong); You will need to utilize a little math and the use of the java.util.Random to figure out what long value needs to used to create the new Date(...). Hint: use the java.util.Calendar and its getTimeInMillis() method. To format the time for the output, look at java.text.DateFormat.getTimeInstance(DateFormat.SHORT).format(someDate) 
teach a man to fish...
Are you talking about the relative path on Sun's site or the relative path to your project?
i learned the most by examining working code and walking through it, trying to understand each step and why it worked. I feel like the options should be out there. If s/he wants to just copy it and turn it in, s/he can. If OP wants to look at it and learn from it, even better.
I currently have the repository saved on my computer in my java folder.
Instructions are impossible in any form?
Thank you very much.
Heaven knows why you were downvoted, your answer is clear, concise, describes the way the student should attack the problem, but stops short of writing the code for them. You shall have my upvote :)
I believe OSX ships with the JDK installed, so you should have the javac compiler, probably at /usr/bin/javac
I would still use a reversed domain name you own, because it's rather cheap, reasonably ensures uniqueness, and you never know when you're going to share your code. Just look at the mess that is the groupIds on the central Maven repository, and the tendency in recent years to move to reversed domain names. org.yourdomain.appname(.subpackage) is not too deep, and unless you're going to develop hundreds of apps, you don't need more complexity.
And there is JFreeChart.
JavaFX 2.0 - Chart http://docs.oracle.com/javafx/2.0/charts/jfxpub-charts.htm 
If you want something simple I would just make your own. It shouldn't take long and will be simpler than a framework and you avoid an external dependency.
Wrong kind of graph. OP is talking about this [http://en.wikipedia.org/wiki/Graph_\(abstract_data_type\)](http://en.wikipedia.org/wiki/Graph_\(abstract_data_type\))
not anymore since the 10.7 version .. i was surprised by that and didn't notice because i have the dev tools installed anyway
One-dimensional array: A B C D E F G H I Two-dimensional array: A B C D E F G H I From that, can you see how to represent a two-dimensional array in a one-dimensional one?
For Lion, good breakdown here: http://stackoverflow.com/questions/6614380/jdk-on-osx-10-7-lion
Looks good, we actually set it up in our current project, the problem is: * Years of ingrained habit of looking at the last trace (which is also conveniently closer to the bottom of the log file) means even us have sometimes trouble reading this better format; * The server which keeps its own log in the classical order, opposite to ours; * Integration and production crews who are not used to our new format; I'm not sure we'll ship it.
I use the JVisualVM executable that is in the jdk/bin dir. Nice GUI that lets you profile your application.
Stanfords cs106a video lectures are on youtube http://www.youtube.com/view_play_list?p=84A56BC7F4A1F852 I've watched most of them and they really helped me learn. Also, as mentioned, Head First Java is an awesome book. So is Head First Design Patterns (uses Java).
Eclipse RCP &amp; RAP is very useful for building cross-platform executable applications. http://www.eclipse.org/downloads/
You're missing the point. I'm not saying that they won't know how to do it. I'm talking about **fear** they don't know what's going on, so they're **afraid** i know the kinds of people the OP is talking about. when they see something they're not used to the automatically freak out and assume it's a virus. Someone thought that .zip files were viruses because when you open them more files 'come out' 
This is honestly one of my biggest gripes with the language. Beginners get rightfully completely confused, and for the experienced, there is often no elegant way to code up arithmetic.
It is not just java that suffers this problem. It harks back to the fact integer operations are faster than floating point operations, and so the compiler goes for the fastest interpretation. You have to explicitly tell the compiler you want the floating point operations. All languages have their nuances, and this division one will have caught the most experienced programmer. You can very legitimately use this trick, but it is always helpful to put a comment in the code to say you are using integer division, in case people skim over this when debugging, assuming it to be floating point division.
This is Default.jsp &lt;html&gt; &lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt; &lt;title&gt;User Login&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt;&lt;font color=orange&gt;Media Galore Welcomes You&lt;/font color&gt;&lt;/h2&gt; &lt;form name="firstName" action="custinfo.jsp" method="post"&gt; &lt;p&gt;First Name: &lt;input type="text" name="firstName" /&gt; &lt;br /&gt; &lt;form name="lastName" action="Welcome" method="post"&gt; &lt;p&gt;Last Name: &lt;input type="text" name="lastName" /&gt; &lt;br /&gt;&lt;br /&gt; &lt;p&gt;&lt;input type="radio" name="interest" value="music"&gt;Music&lt;/input&gt; &lt;input type="radio" name="interest" value="movies"&gt;Movies&lt;/input&gt; &lt;input type="radio" name="interest" value="games"&gt;Games&lt;/input&gt;&lt;/p&gt; &lt;p&gt;I am in:&lt;select name="country"&gt;&lt;option value="1" selected&gt;United States&lt;/option&gt;&lt;option value="2"&gt;United Kingdom&lt;/option&gt;&lt;option value="3"&gt;Japan&lt;/option&gt;&lt;/select&gt;&lt;/p&gt; &lt;input type="submit" value="Go to Store" name="submit" /&gt; &lt;/p&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; 
&lt;html&gt; String name; String fname=request.getParameter("firstName"); String lname=request.getParameter("lastName"); name=fname + " " + lname; &lt;%@ page import"java.util.*, java.servlet.*, java.servlet.http.*" %&gt; &lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt; &lt;title&gt;Movies Galore&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt;&lt;font color=orange&gt;Movies Galore :: Customer Info&lt;/font color&gt;&lt;/h2&gt; Custinfo.jsp &lt;%="Welcome, " + name %&gt; &lt;/body&gt; &lt;/html&gt; 
I'm in total agreement here. But languages like S or R actually do a pretty nice job of dealing with math -- syntactically that is. They're otherwise nightmares to deal with. I just wish Java offered more elegant ways of attacking even simple math problems.
Shame it doesn't actually extend Iterator.
p.s. see right side of blog for parts 2 and 3
StringCharacterIterator is using character index and length, plus now you have the memory and garbage collection overhead of a new object instance. The only place this even remotely makes sense is if you need to pass the iterator to other functions or store it in a collection for later reference. If you are simply iterating over all the characters in a string in a standard loop, save yourself the pain of all the extra OO-ness and do it the simple way.
I would create inside your src a package named "img" and inside u should copy the image that u want to use. I would define a variable of the type Icon like this: private ImageIcon icon; then set the image from the file like this icon = new ImageIcon(GUI.class.getResource("/img/Down16.gif")); &lt;-- thats the path if u put the image on that package. now u have ur image on the variable "icon" good luck! 
Who is iterating over a string and why?
I prefer foreach syntax: for(char c : str.toCharArray()) { //Do stuff } Same concept, more readable! 
I was going to say, I wish String implemented Itterable&lt;char&gt; so I could do a for each loop, but that obviously does't work because char isn't an object, and creating a Character object for each letter of the String would be way to expensive. Doesn't .toCharArray() allocate a new array and copy the String over to it, though? That could be pretty slow with a long String, or if you called that method a lot.
It does, but that that level of performance optimization is rarely important - I prefer the simplicity and readability. If you're working with large amounts of text, you should be using Streams anyway. 
here is the rest of the code: int x2; int y2; for (int i=0; i&lt; nPoints; i++){ double t=i*Math.PI/90; x2 = (int)(r*(k+1)*Math.cos(t)-r*Math.cos((k+1)*t)); y2 = (int)(r*(k+1)*Math.sin(t)-r*Math.sin((k+1)*t)); g2.drawLine(x1,y1,x2,y2); x1=x2; y1=y2; } } } 
It's a solution looking for a problem. 
The code is a little hard to read, would you mind using a site such as [Codepad](http://codepad.org/)? Could you also try and go into a little more detail what exactly is wrong?
I've used JSF. Its actually really pleasant to work with. 
Here's the code laid out better: import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.awt.geom.*; import java.awt.Graphics.*; public class Spirograph extends JApplet{ public static void main(String s[]){ JFrame frame= new JFrame(); frame.setTitle("Spirograph"); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); JApplet applet = new Spirograph(); applet.init(); frame.getContentPane().add(applet); frame.pack(); frame.setVisible(true); } public void init() { JPanel panel = new SpiroPanel(); getContentPane().add(panel); } } class SpiroPanel extends JPanel{ int nPoints= 1000; double r= 10; double R=60; double t=1; public SpiroPanel() { setPreferredSize(new Dimension(400,400)); setBackground(Color.white); } public void painComponent(Graphics g){ super.paintComponent(g); Graphics g2=(Graphics)g; g2.translate(200,200); g2.setColor(Color.blue); int k=5.5; int x1 = (int)(r+R); int y1 =0; int x2; int y2; for (int i=0; i&lt; nPoints; i++){ double t=i*Math.PI/90; x2 = (int)(r*(k+1)*Math.cos(t)-r*Math.cos((k+1)*t)); y2 = (int)(r*(k+1)*Math.sin(t)-r*Math.sin((k+1)*t)); g2.drawLine(x1,y1,x2,y2); x1=x2; y1=y2; } } }
What decompiler did you use? What are the errors?
Many decompilers make changes to the source code that cause compile errors unless they are fixed; I had similar problems decompiling the Minecraft launcher. At least in [JD](http://java.decompiler.free.fr/), the one I used, there were a load of $s popping up in anonymous classes that had to be removed. Your best bet is to get an IDE like eclipse, paste all the code into that, see where there are errors and try fix them.
That s the problem. It compiles and runs but doesn't show the curve.
I've never de-compiled anything myself, but if the app runs, then you must have the .class files of the dependencies. De-compile these into source code. Once you've done this should be able re-compile everything. Knowing what I know about Java, there will end up being lots and lots of source files.
Could you achieve the same result by extending the class?
Basically there's a verification I want to bypass by modifying a value to true... extending the class might be an option but I wouldn't know how to do that. 
ejb's are cool
I've done PHP/JavaScript/AJAX before. I'll give it a go
Calling length() only once is a little faster: for (int i = 0, len = str.length(); i &lt; len; i++) { char c = str.charAt(i); // Do something with c }
eh abstracts database and doesn't afraid of anything.
You're welcome. I have sent you a PM. Please check
Save them some money and go with a free eBook
Thanks for the suggestion! I just downloaded and ran it, but unfortunately it reported "EOF error while attempting to decode file" :(
A quick update...I tried running that jar with -debug and it looks like it's getting a ton of objects, but then it EOFs at the end and I cannot actually see what's there.
JAVA_HOME probably
Agreed. There's been two posts in the last day. Not exactly drowning in them here. Edit: also, why does OP think he's qualified to discern a problem's complextiy? The only post on Java he's made is this: http://www.reddit.com/r/java/comments/mz4ru/compare_string_to_member_of_array/
At my work, we started a project on JavaEE 6 with minimal previous experience with anything non-JavaSE. These links have given me a huge boost in understanding wtf is going on: * [JavaEE 6](http://refcardz.dzone.com/refcardz/java-enterprise-edition-6-most) * [CDI](http://refcardz.dzone.com/refcardz/contexts-and-dependency) See if you can get the version of JBoss and Java EE (J2EE/JEE5/JEE6 ) you will be using because that'll make a huge difference in what you look at. Note that the links above are for JavaEE 6 only. You can also look at what their JBoss AS does, website (JSP/Struts/JSF/etc.) or web services (SOAP/REST/etc.). There may be more, I don't entirely know given how new to this I am.
If you are supposed to do it by typecasting you could do something like if (amount % 0.01 &gt;= 0.005) amount += 0.01; amount=((int)(amount*100)) / (100.0);
The [Java object serialization protocol](http://docs.oracle.com/javase/6/docs/platform/serialization/spec/protocol.html) is not that complex. You should be able to write up a quick throw away script to load in the data you have as a byte array recover the values.
Seconded.
This just makes me like the multi-threaded approach even more. The exert included for it shows that Java's usual boilerplate code doesn't have to get in the way of clarity and understanding of the most important sections
Sure, but you'd expect him to show some sort of evidence of helping people, before trying to create his own java help reddit. There is none.
I don't see how this is not multi-threading, he is just using a thread pool.
The person's implementation of Iterator does not follow the contract of remove. That one will remove the next element of the list, while the Javadoc states that Iterator should remove the last element returned.
I would ask them specifically what you should to do prep. Other than that, I actually wouldn't sweat preparing too much. More than likely, senior guys will be mentoring you.
Didnt scour the article too in-depth, but I thought the same thing. Threading (at a software level) is just an abstraction. If you're doing 'concurrency without threading' youre just creating a custom 'thread'.
Yes they know OOP's from the C++ course but not GUI's I will look at deitel thx
Without the rest of the code, I don't know what you mean by having an error. Your set method basically only accepts numbers between 0 and 9 inclusive. If it gets an acceptable number it sets the member variable. It then returns true if the variable got set, or false if it didn't. It would be up to the caller to decide if returning false would raise an error condition.
I don't understand this language.
Thanks!
I'm still confused - why are your methods faster than using LinkedList#remove(Object)?
If the point of the question was the performance of instanceof vs indexOf, I would bet on instanceof since indexOf still has to loop through the list to find the index of the element. So, IMO the best answer would be: if (entity instanceof AbstractShotEntity) { shotEntities.remove(entity); } else { entities.remove(entity); }
Nice job, very well done video. Topic was interesting as well, I am sure I learned something somewhere in my brain :)
Besides LWJGL, there's also a nice library called libgdx - has more helper methods/classes than LWJGL but supports fewer OpenGL features.
Congrats fellow Java intern! I don't know what you have exposure to so far, but here's some (disclaimer; not trying to start a debate) very anecdotal advice based on my own 8-month experience. I didn't really receive much mentoring and was pretty much passed along the previous intern's nightmare of a codebase. If I had known then what I know now, I could have had a less stressful first few months. Eclipse. I don't know if it's just me, but I had a dreadful experience with it. Hangs, crashes, and simply cannot be depended on for any moderately sized project. Also as an enterprise Java beginner (I've been coding since I was 12), managing Eclipse and configuring it with plugins is just plain not fun. After about 3 months of hating Eclipse, I tried out IntelliJ IDEA. My Java development life has been a hell of a lot more sane. It works amazingly right out of the box and since it has all the features that enterprise programmers need, I ended up purchasing a personal Ultimate license and it's been worth every penny. Side note and highly anecdotal: Learn the VIM keybindings (+ intellij vim plugin), it's very very valuable IMO. Also be comfortable with a shell (I highly recommend zsh+[ohmyzsh](https://github.com/robbyrussell/oh-my-zsh)) for managing your filesystem outside of your IDE. If you're forced to use Windows, use Cygwin. The projects I was handed were coded using plain old low-level Java servlets, very tightly coupled, and were using extensive, nasty, and overly complex JDBC code. Do yourself a favor and at least KNOW SpringFramework exists and understand how much time it's capable of saving you. Its a steep learning curve for some folks, but it's well worth it. Have a passing familiarity with Subversion and maybe Git. I personally prefer Git (I've gone as far as configuring an enterprise Gitweb/Gitolite+LDAP/Apache Linux server) and I use it for my own projects, but most of my organization still uses Subversion. You'll most likely be safe with simply understanding Subversion's role. Lastly, Maven. Learn it, love it. The projects I was given did not previously take advantage of it. Again, just be aware of what this tool's purpose is for (hint: dependency management). If you're checking Jar files into source control, you're doing it wrong. If you have no choice because they're proprietary artifacts (Oracle! ಠ_ಠ), you're still doing it wrong (hint: Nexus/Artifactory). Version control is for source code, and Maven repositories are for your code's binary dependencies. That a bit longer than I had hoped and sorry, but I have no advice about JavaEE (I use Spring). Where you're going, it could be completely different from my own experience, but those were my main hurdles. I guess the **tl;dr** here is that coding is the easy part, knowing and using a diverse dev toolkit is absolutely crucial. You'll learn architectural patterns, test driven development, best practices, etc., along the way. Hope that helps, and good luck!
[jMonkeyEngine](http://jmonkeyengine.org/) furthers lwjgl.
thanks for taking the time to write that
From this short example, it seems like you shouldn't be using a LinkedList in the first place...
IntelliJ. Eclipse is a set of components which loosely integrate to simulate an IDE. IntelliJ is _designed_. (I'm being slightly facetious of course, but it's true.) And yes there is a free version. There are various dark color schemes available: http://stackoverflow.com/questions/4414593/where-can-i-download-intellij-idea-10-color-schemes
I will be working from home thus I am looking for an IDE that fits me and allows me to work most efficiently. Thanks for suggestions! 
Jdeveloper, if you're dealing with Oracle tech. Best support for it out there, and it's cross-platform.
&gt; and it's cross-platform. ... as is every other Java IDE. Not exactly a huge selling point.
I have worked professionally with Eclipse, Netbeans and IntelliJ. Of the three, I'd have to say that IntelliJ feels the most "professional" as far as integration, ease of use, supported features and so on are concerned. This goes for the commercial edition, never tried the free product. However, I find that often my needs are better met using Eclipse, so that's my go-to IDE for private projects, and I also just finished migrating a work project from NetBeans to Eclipse. Most of the work I did consisted of repeatedly bashing NetBeans' autogenerated Ant scripts with a stick until they went away, then writing vastly simplified code by hand that did the same stuff in 10% the amount of original LOC. NetBeans is not exactly bad, but I experienced some reproducible hang-ups where you couldn't use the whole application for ten minutes or more (can't kill it when you haven't saved all your changes yet), plus I felt more comfortable working with the code in Eclipse - NetBeans felt more clumsy, this may very well be subjective because I am more experienced in Eclipse, but since you asked for personal preferences, there you go.
Isn't this question posted about once a week?
Do you know graphic guestbooks or online games where you have to draw certain words and people have to guess the word? My program idea is that your program will import a picture (jpg,gif,png,..) and convert it into a black and white picture. Then you find the pixels with the darkest shade (which will be the outlines). Once you have saved the contours you mark a region of your desktop and the mouse will "redraw" the outlines of the picture within the marked region. You could use the program to win every sketching game or draw awesome pictures in graphic guestbooks. I am planning to do this in C++. If you really try to do this let me know when u're done and we can compare our methods (big learning factor).
Those that are primarily Java IDE, yeah, that's true. But there are IDE's that aren't cross-platform, that do do java. Code-Blocks, for example. 
Is it just me, or do the buttons / general UI Look and Feel look very bad: http://i.imgur.com/N5lye.png Just a first impression.
Well I am on my phone... And this app doesn't have a subreddit search feature. 
&amp;#3232;\_&amp;#3232;
Sorry about that, just realized how much of an ass that made me seem like. My real reason was to specify that I needed an IDE that supports darker UI. Sorry if my post caused you inconvenience. 
Black terminal window, vim with desert256 color scheme. CommandT plugin for quick file system navigation (like eclipse's CTRL+SHIFT+t, except it works for all kinds of files not just types or resources), taglist plugin for class outline views, ctags/cscope for quick code navigation. If you know what you are doing, this is really all you need. If you must use an IDE to help you with coding, then you are going to have to compromise on some of the things like UI brightness and some feature sets. 
Try doing a project that will force you to learn something new. For example, if you haven't done much networking make something simple like a networked game (Same applies for NLP, AI, 2D/3D graphics etc). Use new frameworks/development tools (Maven, Hudson etc.). Maybe even try making an app for the android if you haven't already. 
Vim here, also. However, I don't use any plugins; just a few aliases in the vimrc.
Eclipse is wonderful, in my opinion. 
Wow, I completely disagree. I think you are missing 2 very important points here: 1. context switching is costly. 2. threads in a managed environment, i.e. jvm/.net/mono are fat... very fat. suuuuuper fat. .NET gives 1 meg to each new thread from the top, before it even does anything. Sure for long running things where there is a lot of state to maintain managing your own threads might be better for you performance wise, but small little calculations like this operate MUCH faster simply being thrown at a thread pool or something like it.
IntelliJ IDEA. Again. If you have any budget at all, get it. Hell, I have bought myself licenses because I don't want to deal with the crap out there. And the Community Edition is pretty damn good. The difference, as someone else may have stated, is that Eclipse is a general-purpose tool that just happens to have started as a Java IDE. It can also be a UML editor, python editor, or a file system manager. IDEA was created as a *JAVA* ide. It writes java code first. Everything else is branched off of that. 
It seems like all the plugins (especially Google's plugins) are built for Eclipse. I don't think that's because Eclipse is necessarily better, rather that's what the plugin developers use. I also think that Eclipse is an unpolished turd, and so I use NetBeans. It's maven integration is awesome.
minecraft is done in java ?
In that case check out VI/VIM plugins. Eclipse has commercial one and Netbeans has jVI which is actual port of VIM c code to Java. It's a really great VIM plugin. I use them when I have to use an IDE (prefer Eclipse for other reasons). But I usually work from the command line and vim.
I forgot about your dark theme requirement. Netbeans does have to dark themes, "Norway Today" and "City lights". I haven't used them so I don't know how it is. I would assume the same thing for other IDEs that they have either theme or plugin for dark themes.
Well, if you know what you're doing Notepad is really all you need, right? No need for all those special VIM editing keys if you just type it up correct the first time. As a 20-year coding veteran I'll vouch for IDEs and productivity, refactoring support, debugging support, easy use third-party tools (profilers, JRebel) support, auto-complete, etc. I also use VIM everyday and know how to customize it (pathogen is awesome, no?) so not just bashing it. I could code Java/Groovy/Flex/XML/etc in VIM but I find myself much more productive in Intellij with VIM mappings and use VIM for large data files and the occasional screwing around. If I was going to build an IDE from scratch though I'd allow complete plugin extensions for 3rd party editors and just do the windowing, plugins, build and debug, and file support. Would be great to have two-way communication or even in-pane VIM support and not just the mappings. 
If you're looking for a great and well-though-out color scheme take a peek at [Solarized](http://ethanschoonover.com/solarized). It's one desiger's concept and there are settings you can import into Intellij, VIM, Netbeans, terminal, etc. Basically it's a light and dark color scheme that work well together and share the same color values for the different kinds of text elements. The dark one is quite pleasing.
and is the most used opengl binding (yeah okay, I just made-up this statistic)
Think of things you need or would like to automate... and do that. Before you know it you have a product that solves a problem not only for you, but others as well.
It's probably a good guess. :)
For our final project, we are creating an rpg. That could be a good idea and it could be as simple as a text based on or as complex as a 3D Elder Scrolls game
I created my own programming language. I created a syntax, then used [Haskell Happy parser](http://www.haskell.org/happy/) to create the parser. Then it would compile down to chunks of assembler and finally executable linux binaries. I think v11che's advice is good, make sure you do something you could later show an employer. Getting that first job is important, get into a good company and you'll learn good practises and other companies will instantly want to hire you.
i was just interested in learning the functions, and how to do things. Not in creating an actually usable calculator. I have about negative interest in finance calculations. But good point none the less
Upvoted for IntelliJ IDEA. I never knew how much Eclipse hindered me until my new co-worker showed it to me shortly after I was hired.
There's a pretty good book with some interesting ideas in it: http://www.amazon.com/Java-After-Hours-Projects-Youll/dp/0672327473 The other classic personal project application is one that would scrape the contents of a website. Write a application that will download the contents of /r/aww and save the files in a folder or something.
Ah, well that definitely helped! Thanks for that! Have good night sleep!
I feel I should qualify my Oracle statement, PL/SQL is the main flavour of procedural language for Oracle databases, but Oracle has supported stored procedures written in Java for years now. Wanted to get that off my chest before the Oracles of Oracle came and beat down my door with "How dare you, I'm a die-hard PL/SQL'er!" :)
Well perhaps I'm biased. I work for a company that makes our own VI, port of POSIX APIs, std c library and standard UNIX shells for Windows (and other platforms) and we also make our own awk compiler, perl compiler etc and X Server for Windows. We also build large multi-million LOC ALM product that works on Solaris, AIX, HPUX, Mac OS X, Linux and AS/400 and it works on slew of databases from DB2 to SQL Server, to Oracle etc. But where I work we all live in the shell and vi/vim and official build on all platforms is using our own command line tools. IDEs are OK, I don't have anything against them, I just like how the standard UNIX toolchain works as is for pretty much any kind of development. One minute I'll be editing C code, next some Java, then I'll modify some SQL here and there , then some Javascript, CSS, then I'll write some perl or python etc. Plus the kinds of one off reporting and searching you can do from the CLI is simply not available in any IDE and I have used them all. There simply is no comparison between speed and flexibility CLI offers for people who really take the time to learn the completely new culture and way to do work. 
The question of good alternatives for IDE's that support a dark colour UI is a good question. One I'd be interested in hearing. The title doesn't asks that though, so it may not attract those who can answer it.
* [Minecraft!](http://www.minecraft.net/) * As a Java Dev, I've built a lot of websites for customers. * It's a great tool for getting systems to talk to each other.
Ooohh sweet! That's kinda what I'm looking for. I need a language to learn that helps me get things across different devices and platforms. Thanks! that's really promising.
Fullscreen mode. I can read the text just fine. 
Ok, using the java.awt and javax.swing api's (when you learn them). Make a simple maze game like pac man.
It's a lot easier to make a 3 minute video than a web page, as my web skills are non-existent. Also, TRUST ME - the IDE screencast is a lot easier on YOUR eyes than a camera on me would be. If you don't have a 1080p monitor or two, I feel bad for you son.
I'm impressed that you managed to insult a helpful post while at the same time blaming something on the Rails devs.
&gt; I love trying to solve problems. [Then this might be of interest.](http://projecteuler.net/problems)
I think this is the most appropriate answer. If you're going to do something, do it well. That means having the emotional and intellectual investment in it to keep persevering. Find something that interests you, and is actually useful to you. I don't think that writing a piece of software simply for the sake of writing it is very fulfilling.
Is your numbers.docx a Word file? Those are **not** simple text files. Are you sure the list actually has values in it?
UDP for video, TCP for controls.
if you are in a hurry, maven is like make but it reads pom.xml and downloads dependencies listed in it also.
Just as a point for any future posts, consider using a service such as PasteBin for your code- it makes things much more readable!
I always noticed so many similarities between the two. It's nice to see them listed out.
Cool! I our private log handling code we actually do the *exact* same thing ;)
I like the idea behind maven and some of the functionality it brings, but it's support in Eclipse is sub-par. It is even worse when you're writing GWT apps. Maven has its uses, but it's not perfect and not a fit for everyone. http://stackoverflow.com/questions/861382/why-does-maven-have-such-a-bad-rep 
I dropped maven the first time I had to set up an offline development machine. Setting it up offline is not practical. 
I always like this page for language comparison: http://hyperpolyglot.org/cpp
I can't speak for ChaosLab's experience, but it's very common in the defense industry to have such things.
I use Maven at work for school portal development, but it's not by choice. I have no complaints, though. If anything, it makes things easier (I code with vim though, not eclipse).
I controversial thing I know about java exceptions are Checked vs UnChecked exceptions, Here is a link http://www.ibm.com/developerworks/java/library/j-jtp05254/index.html
Maven support in Eclipse is awesome, but the GWT support is a pain. The build process will pull in dev-mode compiled artifacts created under the source tree instead of building and packaging completely under target. If you do a cleanup (a tricky task) of the source tree first, then everything builds pretty well. That's more of a GWT problem than an issue with Maven, though.
Walk me through this then. You start a project and want to use Spring. How would you get the library? 
Download the library, burn it to disc, have it virus scanned and passed by IA, then couriered to the lab and loaded into the repo there.
I use Maven quite a bit and even outside of the Java world. Used it for many years. For me its essential when dealing with any component based architecture. We have a large PHP based set of products and a good number of Java builds. I currently use Maven in over 350 builds in a Jenkins CI system for general building and release management. Using it in the Java world is a no brainer. Integration of your build and being able to have the transitive dependencies pulled in automatically is simply indispensable for me. The Unit test running and full CI support is very key as well. On the PHP side we mainly use it for packaging, running PHPUnit tests and release management as well. I have a good set of custom plugins i've developed in order to support a bunch of different custom features for PHP builds. Anything where you really have to track and control dependencies of included components its key. I know you can use the repo and dependency features with ant using IVY or the Maven plugin for ant, but having to repeat the same build scripts again and again just make it unfeasible. As for the network dependency, maven has an offline mode, but it can be a pain. All in all maven works for me in our environment. Not saying things like Ant are bad, it just has its place.
Some people believe that all exceptions should be runtime, some people believe that they should all be caught, some people think that some should be caught and others runtime. Of those that think some should be caught and some should be runtime, there are factions and within those factions there are factions. "Opinions are like assholes. Everybody's got one and everyone thinks everyone else's stinks"
There are two error types in java, exceptions and errors. The error class is for serious errors, non-nearly-fatal errors should use the exception class.
So you don't have a repository of trusted software projects can use? 
If this is just for a class, I'd suggest programming something other than a game, and making a game on your own time. Making a game properly takes a LOT of time.
well this is going to be my final project that i turn in at the end of the semester it has to be a game. previous semesters have created versions of Contra/Frogger/Asteriod/Galaga so i hope to do something on par with those
Well this is going to be my final project which i turn in at the end of the semester. it has to be game, previous semester have handed in versions of Contra/Asteroid/Frogger/Galaga so i hope to complete something on par with those
The main controversy, as others have said, is between checked and unchecked exceptions. Basically, a checked exception is declared as part of a method signature and must be handled by the caller, for example: public void myMethod() throws Exception {...} Anyone who calls myMethod must handle the Exception. Unchecked exceptions do not have to be declared and do not have to be handled by the caller. AFAIK, Java is the only mainstream language with checked exceptions. RuntimeException and its descendants are unchecked exceptions in Java. Note that unchecked exceptions must still be handled, or otherwise the application fails. They just don't have to be handled by each and every caller in the stack. The controversy is that handling checked exceptions makes code complex and ugly, because the programmer either has to add a try-catch, or they have to declare that their method throws the exception. This has to be done at every level. Sometimes people argue that, in many cases, the only thing a caller can do is rethrow the exception, which leads them to either wrap the exception with one of their own, or pollute their own API by declaring that their methods throw exceptions from the lower-level API, or dumb things down by throwing a plain Exception, which doesn't tell their caller anything useful about how to handle the problem. Many times, because of lazyness or lack of imagination, programmers will just catch and ignore the exception like this: try { doSomething(); } catch (Exception e) { /* IGNORE THE ERROR */ } Other people have argued that exceptions, checked or not, are a bad idea. They say that exceptions disrupt the normal control flow (much like goto) and cause convoluted, confusing code. They say control structures to handle exceptions (try-catch-finally) are too difficult to get right and cause buggy code when done improperly. Other people say that exceptions are OK, but that they are used too much. They argue that only truly exceptional cases should be exceptions, and that exceptions shouldn't be used for ordinary errors. For example, running out of memory should be an exception, but indicating that a database lookup didn't find any results shouldn't be. They complain that exceptions are used too much. I think most people would argue that using exceptions for things that are not error conditions is bad. For example, using an exception to signal when you have reached the last item in a linked list traversal would, IMO, be considered bad form by most programmers. My personal opinion is that exceptions are good, checked exceptions are bad, and you should only use exceptions for errors. I think the common idiom in languages that do not have exceptions, which is to return a value that indicates there was an error and set some kind of global error message, is really ugly because you have to either overload the return type (by, e.g. returning a Result object that has both the desired result and/or an error message), or the language must support multi-value returns (e.g. result, error = object.Method()). To me it is far too easy to ignore error codes returned by a method, and not easy enough to ignore checked exceptions. Unchecked exceptions are nice because they cause the code to fail if the error isn't handled, which IMO is the correct behavior (this principle is called fail-fast). Checked exceptions are not nice because they force your code to handle the error at every level, even when a given level is not capable of doing anything about it. An exception deep in your application may need to be handled several times by different methods until it reaches the point where you can do something about it. By the time it gets to that point the original message may be obscured or lost by all of the intervening layers that wrapped the exception to make their API less ugly. This is why you get these enormous stack traces in Java that have 10 different exceptions chained together. The one good thing about checked exceptions is that they clearly and unambiguously tell the caller that the method they are calling can produce an error. They also frequently indicate the kinds of errors that can occur. This is tremendously helpful to programmers trying to use an API. Maybe a good middle ground would be for a language to require that any method that throws an exception should declare it, but not force the caller to handle it (declared unchecked exceptions)? [edit] formatting [edit] add the bit about the value of unchecked exceptions
Sure, but it still has to be moved over the air gap.
Sounds like a prime candidate for something like Sonatype's Nexus.
I can't speak for the non-java world, but I can't imagine writing Java without it anymore. I've maintained my own little 'repository' of libraries, and it sucks. Maven can be a little painful if you don't get it, or when it screws up for some hard to decipher reason, but those are prices I'll gladly pay. I would turn down a job if I couldn't use Maven, for instance.
/r/javahelp
Unless I missed it, you didn't ask a question. I'm sure you will find plenty of people who are happy to help if you have a specific question, but people aren't going to do your homework for you. If you *do* have a specific question, you should probably pose it over at /r/javahelp or StackOverflow.
briliant
You have to restructure your if-clauses. You need to use **else if** and **else** to make sure all following cases will be discarded once a condition was true. I'd recommend the following: if (selected == answer) { ... } else if (selected == 0) { ... } else if (selected &gt; answer) { ... } else { /* implies selected &lt; answer, since all other cases have been handled */ ... } You should also post on [r/javahelp](http://www.reddit.com/r/javahelp) the next time.
Sounds almost identical to the setup we use at work.
Well said. Put this in Wikipedia.
your scenario sounds very similar to mine actually. We build PHP webapps to interface with our java services, but our PHP code does not go through any of the rigours that the java code goes through. I've recently finished migrating our common framework (which uses Zend) and one of our projects to maven. Starting in a week or two, our PHP code will be going through a variety of quality checkers (PHP_CodeSniffer / PHPMD / PDepend) with cruisecontrol as our CI server and Sonar to track progress on how well we are improving our code. As well, Maven handles the creation of phars, and bundling everything up. But it was a challenge, mostly because maven has one way of doing things which seems not so uncommon in the java world, but very uncommon in the PHP world, and it got me thinking just how popular is maven? Especially for non-java things. How many .net developers do you know who use maven? python? ruby? php? so on and so forth.
ahh thanks! Didn't know that subreddit existed.
Please stop Capitalizing random words In your Sentences. It's distracting and disrupts the fluidity of your sentences.
Can we get some actual numbers? Benchmarks mean nothing out of context. What is the complexity? Will there be points at which linked lists outperform the GapList? What about ArrayList? 
I haven't tried hazelcast yet, but after looking at it, I went with gridgain and liked it
He's just being like Java. Capital letters everywhere! It's possible, anyway...
I'm using my own custom 'theme' which I have designed in Photoshop including background images, icons, colours and what not. That is why I want to change these simple borders. However I cannot change it in the UIManager as I do not know what they are called, I tried everything with the word cell in it that I could find, but nothing changed the colour of these 'cell' borders. But thanks for trying to help, :).
Yet IntelliJ IDEA won't let me click things in my Linux Window manager. Eclipse is the only IDE that works (XMonad). I Wish. I'm sticking with swapping out another WM when I work on Java or working in Vim with Eclim currently. I just wish that I could get their PyCharm to work. I'd love to have a brilliant python IDE.
Oh, thats easy then. Two options. * Create a J2EE/Tomcat style application. Any ongoing code can be put into a context listener servlet. * Create a java application and embed something like jetty into the application opening a web port for control. The former is a little more complicated if this application is to be distributed to each machine but simpler in a SaaS style manner(you run one server). The latter is easier if you are distributing it because they start the application and it can spawn a web browser. Another option to look at is GWT. Final question is, do you actually have a specific need for java. Setting up a simple HTML application isn't difficult. A Simple XAMPP stack isn't difficult either.
most of the time I use try-catch, it looks something like this.... try { something(x); } catch { System.out.println("Error: " + x); something(x); } Basically I force it to crash anyway, and print out the value that caused the error so I can actually debug it.
One point I came across before. I used the Exception being thrown as part of the logical code. So if the method threw an exception then the program was working correctly. That got a few sharp intakes of breaths from peer review, but it was the only way to solve that issue at the time. 
logger.error("message", exception) is 100,000 better than what you have there.
&gt; Try-catch-finally are too complex? Because they are used profusely in **C** I beg your pardon?
&gt; Database don't throw an exception if zero rows are returned. I beg to differ. See http://docs.oracle.com/javaee/5/api/javax/persistence/Query.html#getSingleResult() True, this is an example where a DB abtraction layer does it, but JPA is widely used. So noedigs point is still valid. Compare `JPA` and `SQLalchemy` for example // ======= JPA ========================================== Object result = null; try{ Query query = manager.createQuery("SELECT ... WHERE ..."); result = query.getSingleResult(); } catch (NoResultException exc){ // nothing to do. result is already "null", so this exception handler is useless. } if (result != null){ // do something with the result } else { // notify the user, logging, or somesuch? } # ======== SQLAlchemy ==================================== q = session.query(SomeMappedClass) q = q.where(...) result = q.first() if result: # do something with the result else: # notify the user, logging, or somesuch? 
OP. This is a good example of controversy. If Tobar7 and I sat together we would not see eye to eye on this. I think checked exceptions are the work of the devil, and 99% of the time runtime exceptions are much better. They allow you to handle the error where and when you want. With a checked exception you have to rethrow it at each layer also losing some cool AOP abilities to rewrap and handle exceptions at a particular layer. The example given by Tobar7 is from the standard java api, which is pretty old (since it remains backward compatible). Most of the newer frameworks, spring and hibernate for instance have moved from checked exceptions to unchecked ones. 
I find what you are saying is very controversial... ;) Consider the two following pieces of pseudo-code: try { email = prompt_user('Email Address') mailmodule.sendmail(email, 'Hello World') } catch (IllegalMailAddressException exc) { alert-user('The e-mail address you typed in was incorrect!') } You might improve it even to give the user a chance to retry: while true{ try { email = prompt_user('Email Address') mailmodule.sendmail(email, 'Hello World') break } catch (IllegalMailAddressException exc) { alert-user('The e-mail address you typed in was incorrect!') } } Now the same without a checked exception, but let's add a test-function instead: email = prompt_user('Email Address') while mailmodule.check(email) is false: alert-user('The e-mail address you typed in was incorrect!') email = prompt_user('Email Address') mailmodule.sendmail(email, 'Hello World') Both solutions have their defending camps. Much like any controversial topic (vim/emacs jumps to mind). And you can talk this into oblivion. *You* may prefer forcing the user (of the library) into handling all possible errors in his/her code. *I* prefer having code that you can read, as it makes - in my opinion - maintainance easier, and it gives flexibility to the user. Let's assume for example, that the user of the library only accepts e-mails to one specific domain. So he/she already has some sort of validation present. In which case, the checked exception becomes plainly annoying, and will clutter your code. On the other hand, if someone uses the library who does not understand the underlying concept, checked exceptions will invite them to think about what they are doing. Unfortunately, I've seen lots of code in my life with empty `catch` blocks (usually with a `todo` flag as generated by popular IDEs). Which reflects the laziness of some developers. This is sad but true. And empty catch blocks are even worse than unchecked exceptions, as they may hide the error and make debugging a pain. No matter *what* solution you chose, checked or unchecked, it will *always* be up to the user to do the right thing! As a closing thought I want to add this. You can think of a library as an application with a user-interface. The user-interface being the exposed API calls. And according to this, you can apply [Schneiderman's rules](http://faculty.washington.edu/jtenenbg/courses/360/f04/sessions/schneidermanGoldenRules.html) to that as well. The important one here being: &gt; Support internal locus of control. 
No need to yell. It's "error", "Java", and "users".
Get out of here, no beggars allowed in smart talk.
Too bad they aren't like vaginas.
It uses a pseudorandom number generator, although not one good enough for cryptographic use.
I believe the re-throwing is the main reason I prefer unchecked exceptions- that way, you deal with it at the level of abstraction appropriate. That said, could you not wrap a checked exception in an unchecked exception to draw the 'boundary' where the kind of responsibility you want ends?
If an error is to be expected, it should certainly not be handled with exceptions — neither checked nor unchecked. Exceptions are — like the word already says — for **exceptional** situations. ... not even mentioning that Java provides no abstraction techniques for exception handling. The concept of exceptions in itself is better than the stuff people did in C (or Go), but it is just a temporary step, either towards a condition system or a effect system.
also note: there are about 75 -XX options http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html
Your second option is fine with me, except that there's no mechanism to give the developer the information that the error is common and expected. 
- I handle the error where and when I want now, I simply re-throw the exception, to the level it's required. I can't understand why you wouldn't want the experience of the developer's unit testing, to improve your code before it goes into production. 
Depends on how basic. Given the recent RSA public key problem, I'm not sure how much I trust any RNG. But if you're just trying to generate a key for AES and don't need all the weird properties an RSA key needs, it should be fine.
Isn't the generally accepted wisdom in Java simply "Don't use finalize."? 
You could put that into the documentation. Which the developer will have to read anyhow if he/she wants to use the library. Any experienced developer will pick up on these things.
I've always considered implementing some form of Conway's "Game of Life" (http://en.wikipedia.org/wiki/Conway's_Game_of_Life) to be a fun project when trying to learn a new language. It can even be started with using just the console screen as the cell grid.
Yeah kind of, it's just I haven't got much time left. I do feel bad about asking but if anyone can help please do
Please don't ask reddit to do your homework for you. I, as well as many other people, would be happy to explain exceptions to you or answer any questions that you have about them. We would be happy to look over what you write and give feedback and pointers but this is just unethical and lazy. Do your own damn homework or man up or ask your teacher for an extension.
That's a slightly mealy question. SecureRandom has a non-guessable iteration strategy based on SHA1. It still needs to be used properly.
You're never actually using your outputCode() or generatorCode() methods, try putting "outputCode();" under the "numberOne = generator.nextInt(10);" line. public class consoleRandom { int numberOne; int numberTwo; int numberThree; public consoleRandom(){ generatorCode(); } public void generatorCode(){ Random generator = new Random(); numberOne = generator.nextInt(10); outputCode(); } public void outputCode(){ System.out.println(numberOne); } public static void main (String[] args){ new consoleRandom(); } } this should work
I'm really sorry, I am terrible at this. I have done that, like so: public void generatorCode(){ Random generator = new Random(); numberOne = generator.nextInt(10); outputCode(); } But it still isn't working. Do I need to add a return type or anything like that? I am really sorry about this. EDIT: Taylee has helped me work this out, but thank you for your reply! You said exactly what they said, but also gave me code example to help explain. Thank you though! I truly appreciate it. 
your main method creates a new generatorCode object. Whenever an object is created, its "Constructor method" is executed, which is a method with the same name as the class. In the above case public consoleRandom(){ generatorCode(); }. In this method I executed your generatorCode() method, which generates a random number and then executes outputCode() method, which prints it.
sorry, I think we misunderstood each other. Maybe it isn't java docs I'm going after then..... In eclipse, you know how when you hover over a object it gives you documentation on how to use it? Like "String" that's built in. I would like to have that (because it is SUPER helpful) but with a new library called lwjgl that I have.
getHSBColor is a contructor/factory method. I think two almost identical constructors (Color(int r, int g, int b) and Color(float h, float s, float b)) could be very confusing...
What I meant was, why call the method "get" if it's not returning a value?
In the Build Path settings, Libraries tab where you have lwjgl.jar, expand its entry, highlight the Javadoc location line, and click Edit. Paste the url in there. 
Looks very similar to [Apache Commons CLI](http://commons.apache.org/cli/index.html)
+1 for Rubyists improving java conventions though. I'm a java dev crossing to ruby and am in awe of how to-the-core Ruby devs are for good engineering practices.
Haven't used it myself, but some people said good things about GNU getopt port to java. http://www.urbanophile.com/~arenn/hacking/download.html 
If you put these comments above the method, Eclipse should automatically detect these as Javadocs for your own source, and display them as your hover hint.
I think the primary purpose of getRGB() is as a convenience method for getting the red/green/blue components of a Color instance as a single integer, rather than having to perform an invocation of color.getRed(), getGreen(), getBlue(), getAlpha() and then having to bitshift and then OR those values. Besides, one method is static, and serves as a factory method (again, as a convenience for creating a Color instance from HSB components), while the other is an instance method with no parameters. So, I don't think it's terribly likely that the two methods would be confused. 
Setters are typically void (do not return a value) and passing an illegal values to a setter should not result in a no-op, but an Exception to be thrown. IMHO a better implementation of the setter would be this... public void setFourthNum(int fourthNum) { if (fourthNum &lt; 0 || fourthNum &gt; 9) { throw new IllegalArgumentException(fourthNum+" must be greater than 0 and smaller than 10"); } this.fourthNum = fourthNum; }
Because programming for money involves a lot of duct tape code.
Try starting with http://www.java2s.com/Code/Java/Tiny-Application/HttpServer.htm just a micro http server with no security, no JSP pr PHP. Then check for form post and get info. If you want something *really* tiny that you can extend and improve.
Maven is status quo, although most people who care about their work e. g. not the typical 9-5 guy have probably tried alternatives like Gradle, Buildr or SBT.
For those who care, Scala is shipping with the latest version, targeting Java &gt;= 5.
&gt; why call the method "get" It's probably a bad API design :) For example, [Qt](http://qt-project.org/doc/qt-4.8/qcolor.html#fromHsl) uses QColor::fromXX which looks more logical...
Quite a fun uni project for Software Evaluation class. Maybe ~12 hours total. Most of which were spent fighting findbugs, then deciding to go with a only-BCEL approach. Very simple, spits out line numbers of unused or partially used lines from a traced execution. Differs from normal code-coverage tools in that it rewrites classes to remove instrumentation after probes are hit. Over long-executions, the performance cost is nearly nothing.
use recursion? :) 
Things that I have learn while working as an entry level Java developer. * Know some design patterns * some companies may use some version control systems GIThub or SVN * some places my use project based tools such as ANT or MVN Going into an entry level job they will not expect you to know all about these other tools, but having some knowledge of may them show that you have looked a little further than just the java programming language. 
They are focusing on web apps mostly, looks like I'll be brushing up on my JSP. Thanks for the advice.
Use a site like [Codepad](http://codepad.org/) to link code. Most people won't bother downloading a package from mediafire. More information about what you are doing would also really help. Edit: Forgot Codepad doesn't have Java support. Use [Pastebin](http://pastebin.com/) or [Github](https://gist.github.com/) instead.
How did you do it?
&gt;some companies may use some version control systems GIThub or SVN If the company doesn't, you don't want to work there...
Implement swap function, step through array from beginning to end, at each index find random second index and swap.
Oops didn't see the last part of the question.
Why not? 
If you *actually* know how to program, you're ahead of the curve and likely have nothing to worry about. Do you have some code samples? If they see some of your work it could also help a bit, assuming you may have a fellow programmer for an interviewer... polish it up if you have a little time and bring a copy or two with you. Try to pick a small yet capable sample.
Hmm... Yeah, you're right
hrm, i'm going to have to do some digging then. I want to find something decent.
So I made a new link using Github. By the way thanks for the tip. So its https://gist.github.com/2179043 Thanks
Be enthusiastic and answer "I don't know" when you don't. 
Ditto here. It makes me wonder why so many generic interviews focus on asking the question. The only reason I know about it is because of interview questions. Asking about final and finally are fine I guess, but they don't really have anything to do with eachother and seem really asked in this setting to trip someone up and get them to say the wrong thing on accident because of nerves. I'm a sr. java dev and I got so nervous in an interview I forgot the name of "polymorphism" -- I could describe it in great detail, but the interviewer asked "what's that called" and I just blanked. I like asking algorithm questions in the interviews I give.
This seems a more cocky move than a good interview technique. I would not recommend putting effort into this. If you saw a bug in a public repo -- fine, do it... but don't go hunting (not likely that they even have public repos at a private employer, but w/e).
Know about Spring (IoC / Dependency Injection). Talk about at least one MVC (or MVP if that suits your fancy -- aka GWT) framework (Struts or Spring MVC are two common ones, but there are many others if you have experience with one of those). You should probably know a little bit about servlets. "What are the two commonly overridden methods in an httpservlet and why would you override them (provide a use case/example)?" I got asked that one once and I couldn't answer it because I had only used Struts before and never a bare servlet. I didn't get that job even though I could describe Struts pretty well. They also might ask about some "front-end" stuff like Javascript. What does the following return and why: var myVar = "1"; if(1 === myVar){ return "hidey"; } else if (1 == myVar){ return "ho"; } else { return "neighbor"; } 
I thought it obvious that I was referring to private open source projects.
So just be my normal nerdy self when talking about this stuff? Got it.
Without a doubt. One of the first questions I ask when interviewing, especially for entry level or college grads, is what they work on at home during the weekends. What do they love to work on and why they like to work on it. Most of the better developers I have hired or worked with tend to not leave programming at the office. It's their job, but it's also their hobby and a passion. I'll take a passionate beginner over a "just doing my job" midlevel developer any day of the week. 
One of the questions they asked me before they invited me to interview was about the open source projects I had contributed to. They asked why I do it and I told them that I liked to help out and get involved with different things and open source was a great way for me to learn.
I came here to say this. That book changed the way I thought about Java.
Many interviewers will google 'java interview questions' so they'll know what to ask. Do the same, and be prepared.
That's JCommander you are describing here :)
There's another OSGi developer here? 
Lot's of us at Apache - come join the fun:) http://karaf.apache.org/
I use final all the time, and rarely use finally anymore (yay spring!). It's funny though, in all of hte interviews I've been through (10ish by now I guess), recently they're much, much more like converations than question and answer periods. In fact our company is the only one I know that actually has a set question and answers rating. I guess everyone is very trusting that you didn't lie on your resume.
Have you tried oDesk.com?
It might make sense to implement Comparable on the class? Then if you put them in a Collection, then you can use `Collections.sort(Collection T)` to get a sorted order and object1.compareTo(object2) etc.
Also in Java the convention is not to start fields with an underscore. With the exception of some old Java libraries, most well-known projects aren't starting variable names with underscores (see JBoss, Tomcat, JFC, etc.).
I always liked Effective Java the most, might be a little too advanced. I'm really not sure where you are in terms of comfort with syntax and basic concepts. Can you explain further what you've done in terms of programming in Java, and how you understand these concepts? Also, I would suggest checking out TheNewBoston video series on Java programming, lots of great syntax and implementation of concepts you mentioned. http://www.youtube.com/watch?v=Hl-zzrqQoSE&amp;playnext=1&amp;list=PLAFF55E55870752DA I think I may have found a book more for your level. www.amazon.com/Thinking-Java-4th-Bruce-Eckel/dp/0131872486. Thinking in Java. From a review, here are some topics covered: Object-design basics Inheritance and polymorphism Object lifetimes Exception handling Multithreading and persistence Java on the Internet Analysis and design basics Java basics: keywords and flow control Initializing objects Java packages and many more. Some of these I'm sure you've seen, and this will be another look at them, others will be new but important to know and understand.
Thinking in Java is really good. Also available for legal free download by the way.
Of all the things wrong with Eclipse, bloat is the least of them. Bloat can be solved by throwing hardware at it. Abominations like the "workspace" thing (instead of, you know, opening a Goddamn project wherever I put it) or lack of real Maven support cannot.
I use the workspace all the time. I even have a meta workspace, because I have multiple workspaces. 
I, meanwhile, have *projects,* and my IDE, being that it doesn't suck, does not constrain me in where I put them. I use Maven, because Maven is how not to do it wrong, and my IDE, being that it doesn't suck, can open and build Maven projects. While it keeps around additional information about my projects, the Maven POM is the authoritative description of the project, as it should be. Any IDE worthy of my use will do the same.
At university I went through several Java books, including Head First Java. I can safely say that Thinking in Java was by far the best book I have read on Java, and it got me through my three years of Java programming at uni.
If you think Maven is nothing more than a build tool, you're thinking it wrong. Maven is also a framework for performing a variety of analyses on a project and generating reports from the results. A Maven POM is a description of a project that any Java IDE worth its salt can understand. It's far from perfect, but it's still by far the best solution to the problems it solves. POMs are not merely nice; they're mandatory. Ant is horrible. IDE-specific project structures are horrible. I've played that game before, and I'm not going to play it again.
I am not. So, can you tell us how you handle robustly and without a lot of boilerplate code the simple examples I gave ?
source: https://docs.google.com/open?id=0B6dc8EGS3h1_OVNVN2MzOXNRYUtuYWZoMDBOSGVxZw
Daily Razor? 
Rackspace or EC2?
I'm in an Intro to Java class. We are JUST going over array syntax. Love it when things like this happen!
You do not need to use Eclipse to build or run programs written in Java. Just use javac which is in the JDK. 
NetBeans seems to have the best Maven support, actually. Not sure when you last tried it, but as of 7.1 it's pretty first-rate. IDEA's Maven support is a bit more iffy, since IDEA still has its own "compile"/"make"/whatnot commands that don't delegate to Maven, but it still works. I use IDEA not for its Maven support but for its Scala support. The Scala plugin for NetBeans is terrible.
I recommend Core Java Series. [Volume 1](http://amzn.com/0132354764) and [Volume 2](http://amzn.com/0132354799) Both are great read and covers good fundamental principles. I am sure you can find it cheaper somewhere else.
Maven allows plugins for reports, and other tools. It has quite a nice plugin framework, though working with something like JDepend, is different from being that thing. Also, OSGi is not IDE specific. It is a standard released by the [OSGi Alliance](http://www.osgi.org/Main/HomePage), and Apache have their own [Felix](http://felix.apache.org/site/index.html) framework that implements it. 
You should be looking into Design Patterns if you really want 'Inheritance/Polymorphism/Abstraction/Encapsulation' to click. Check out 'Head First Design Patterns', the university I attended used it and it's terrific. Look past the silly illustrations and writing style, the book has real information and the examples show simple real world uses of the patterns I can still remember.
Also including a torrent to Breaking Bad. It's a great show, but maybe should have held off that download...
OSGi is not IDE specific, but Eclipse project structure is. OSGi is a runtime framework, not a project structure standard. While I wouldn't mind an actual OSGi-like project structure standard that can do all Maven can and then some, that simply does not exist.
Java has changed a lot in 8 years. Java 5 came out in september 2004, and added for example generics, foreach loops, and varargs, which were **huge** changes. On that basis alone i would not recommend this book. 
Generics and foreach seem to be addressed. See the TOC Chapter 8. 
I think a better book is Josh Bloch's [Effective Java 2nd Edition](http://java.sun.com/docs/books/effective/). It's more recent and it covers a lot of good practice instead of just being a reference guide. Similar to what you use the Cookbook series' for.
Im a developer that hasn't used Java for a while now ( since Java 1.2 ) and now has been called to "help" on a Java project. Do you consider this to be a good investment? I see the second edition is from 2008. What new features don't get coverage? thanks
Google is one of the best resources available, it has more obscure problems/solutions than any book will.
Thanks captain obvious but google doesn't provide a systematic guide for learning as, supposedly, a book does.
There's no need to be snarky. If you are being called to "help" on a Java project, but are trying to learn the basics of Java, then the best way to learn is to read the code that you are helping on and understand what it does. 
Basic just get something that will transfer a file over a network 1 computer being the server the other being the client.
You lost me on "trying to learn the basics of Java". Read my original post again.
&gt; Thanks captain obvious but google doesn't provide a systematic guide for learning as, supposedly, a book does. That sounds like you're trying to learn the basics. I understood that you have a basic knowledge of Java, that's why I suggested Google for solving your issues. If you just want to know the differences from 1.2 onward, then look [here](http://en.wikipedia.org/wiki/Java_version_history). P.s. are you that much of a dick in real-life?
That is not my original post. If I was looking to learn the basics, I wouldn't consider picking up this book. About being me being a dick... maybe ask your wife/mother? Any think else you want to misunderstand and not be helpfull at all?
&gt; Do you consider this to be a good investment? I see the second edition is from 2008. What new features don't get coverage? thanks I think the most important thing is to have coverage of the new syntax introduced in Java 5 (which the 2008 edition should have). Most projects and libraries depend on them now, you need to understand what you read. Java 6 was more about API updates and additions, if I recall correctly; while nice to have, it's not as important as catching up to Java 5. That said, the 2008 edition should also have coverage of Java 6, since it was released in 2006.
Now boys....
This is the last in the series of Apache Karaf provisioning/deployment demos. I hope the Java OSGi developers here in r/java have found them useful - the demo code will be available in our up coming release of Apache Karaf 2.2.6!
Comparing two ints in that was is broken if there's no limit to the number, as integer overflow will give you incorrect results. Consider comparing Integer.MAX_VALUE to some negative number. This adds the magnitude of the negative number to Integer.MAX_VALUE, which overflows to a negative number.
Having played with EJBs for a few years: stay away.
EJB3. I've also abandoned the application server. EJBs are unnecessarily complicated. Anymore I just use Spring and Tomcat. They do everything I need and they're extremely common which has its own benefits. Edit: Oh, and EJBs never seemed to work as advertised. You had to jump through more hoops than the docs let on, and those hoops were poorly documented.
:|
1. Head First Java - so that it's explained to you like you're 5, so when you read the next books your head doesn't explode. 2. Core Java I - So you really know what's going on, Horstmann's examples are a little hard to follow if you're not at least a little familiar with Java. 3. Core Java II - For all the things most people don't need to know about.
Tomcat is an app server. And given the number of successful EE systems out there currently, I'd say avoiding EJBs is pretty much impossible.
Negative. Tomcat is a servlet container. I'm sure you may encounter them in the wild, but that's no excuse for perpetuating them.
What's complicated about EJBs then? For most things it's a POJO with a single annotations: @Stateless. I'd 100% agreed if you said EJB2, which was utterly rubbish, but not EJB3. If anything, I would say you're a Spring zealot then who bashes EJB because that's how Rod trained you. I somewhat can understand people who are against Java and the entire concept of the managed bean (I absolutely don't share their feelings, but if you don't like the idea, okay). But the Spring and EJB models are very similar, which most people recognizing EJB 3 being a bit simpler and more lightweight than Spring (much to the dismay of Rod of course, who had this as the main selling point for Spring over EJB for years). Again, if don't have any other criticism than some vague "EJB is complex", I suspect you're just trolling. 
I haven't used them in years, because I recognized Spring was a better solution. If it was more recently, I'd have specifics. Call it zealotry if you want; I've been doing this long enough to recognize a good tool when I use it. Spring has the tastiest kool-aid around. I have better shit to do than troll a Java subreddit, particularly under my real name.
Learn the language here: [The Java Tutorials](http://docs.oracle.com/javase/tutorial/). Then read *Effective Java* to learn good practice. Then read [*Java Concurrency in Practice*](http://www.jcip.net/), so you can build GUIs and network applications correctly. It's really a whole new language today than it was in 1.2. 
Hint: They don't teach you everything in lecture. Look up singletons and reflection - two examples of powerful stuff I never learned in class -_^
I have an idea for you. So you use the NIO package. The ByteBuffer to be exact. Parse the whole file as a giant string. So like, StringBuffer.append(stream.readLine()); Then StringBuffer.toString().toBytes(); Store that in the ByteBuffer. Create a datagram socket. Send the bytes to the server. The server will just use String.fromBytes() on the input stream. Just send the whole byte buffer :D. The server will store everything in a queque and print it to a file.
On the contrary, I strongly advise to look into using EJBs if you aren't using them already. The bias against EJB, especially from the Spring camp, is legendary. And it's completely and utterly unjustified. EJB beans are incredible simple, yet super powerful things that makes working with eg JPA so much easier that it's hard to understand people don't use them based on angry blog posts from people who used EJB last in 2004 and have been brainwashed by Rod and his friends to hate the technology.
&gt;I haven't used them in years, because I recognized Spring was a better solution. If it was more recently, I'd have specifics. See, but that's the entire problem. I'm pretty sure you remember all the rhetoric from Rod about how evil and bad EJB was and how supposedly utterly superior Spring was. But maybe you never asked yourself "why" this was so or whether it remained to be so? Meanwhile EJB has seen an immense simplification, while Spring only got fatter and more complicated (see, I too can call something complicated without giving specifics!). The matter of the fact is that EJB 3.1, and actually the combination of it with the rest of Java EE 6, is very rapidly becoming more and more popular. And that's not without its reasons. The problems with EJB2 were many, if you can't remember them, I can. Stupid required base classes, stupid required framework provided interfaces, with tons of life-cycle methods that were required to be implemented (without anyone really getting them), overly verbose and required XML descriptors, unable to use a simple compiler to compile the classes, but extra enhancer tools were needed to compiler the proxies, to generate stubs, skeletons and the like. Stupid framework methods to cast references obtained from JNDI. Brain-dead persistence where an entity was a kind of Servlet and where each "simple" getter/setter call resulted in a remote invocation, severely underspecified semantics (making portability a pipe-dream), required vendor specific XML deployment descriptors (in addition to those overly verbose 'standard' descriptors), required presence in a separate module, only closed source and very expensive implementations, specifications were crafted in ivory towers and behind closed doors. I've not even mentioned all issues, but you get the idea. Let me assure you that EJB 3.1 has NONE of these issues. They ALL have been dealt with. An EJB is a POJO with (typically) the @Stateless annotation. There's not a single line of XML required. Period. There's no base class or interface requirement. Not your own, and not those of the framework. Everything is open source, lightweight, free and developed in the open with tons of community input. Shame on Rod for trying to make people believe EJB never progressed beyond what was offered in EJB2, and shame on you for seemingly believing him. 
FWIW, I don't read any programming blogs. My choices are entirely based on my own experience. I'd have to google this Rod guy.
Assuming the gif files are in the same package as the code: lblResult.setIcon(new ImageIcon(numberOne + ".gif")); It'd probably be better to load those Icons somewhere else and store them, rather than load them each time, but this is a good starting place.
Thank you! It doesn't error out, but the images aren't showng up. Randomly they might do, but often they don't. lblResult1 = new JLabel(); lblResult1.setBounds(20,70,60,60); lblResult1.setIcon(new ImageIcon(numberOne+".gif")); panel.add(lblResult1); lblResult2 = new JLabel(); lblResult2.setBounds(200,170,60,60); lblResult1.setIcon(new ImageIcon(numberTwo+".gif")); panel.add(lblResult2); lblResult3 = new JLabel(); lblResult3.setBounds(400,270,60,60); lblResult1.setIcon(new ImageIcon(numberThree+".gif")); panel.add(lblResult3); Is there something wrong with what I am doing? Sometimes the image will show up but as soon as I press spin it just removes the images and shows numbers again. I attempted to change it but commenting out the setText (below) but that didn't change anything, or just made the form blank. Do I need to repaint and revalidate on each spin, or will this do it: lblResult1.setText("" + numberOne); lblResult2.setText("" + numberTwo); lblResult3.setText("" + numberThree); lblThisGame.setText(""+thisGame); lblResult1.revalidate(); lblResult1.repaint(); lblResult2.revalidate(); lblResult2.repaint(); lblResult3.revalidate(); lblResult3.repaint(); I really appreciate you using your time to help me, thank you so much. EDIT: I did test it by manually setting the variables to 1, 2, and 3 and only one image would show up. 
I had no idea these websites existed, they are so cool! [Link to full code](http://ideone.com/uEXLV)
Fantastic! Thank you so much my kind Sir! I think I understand why this works, I really appreciate this. 
What do you mean OSGi-like? What do you want OSGi to do that Maven can?
An ImageIcon array would make the most sense, that way you can just label.setIcon(icons[pictureNumber]);
This one: http://www.chapters.indigo.ca/books/Java-All-One-Dummies-Doug-Lowe/9780470371725-item.html?ikwid=java+all+in+one&amp;ikwsec=Home Then this one:http://www.chapters.indigo.ca/books/Programming-Android-Mednieks-Dornin-Meike/9781449389697-item.html?ikwid=programming+android&amp;ikwsec=Home Profit?
Put the RoundButton class in your TrafficLights project, remove the main() method from RoundButton, then replace all JButtons in TrafficLights with RoundButtons. Since RoundButton extends JButton, it can replace any JButton you already have. 
Let me explain it a little more, then. **RoundButton.java** This class *extends* JButton, which means it can do everything a JButton can do and more. In this case, the "more" is the fact that it is round. **TrafficLights.java** Your TrafficLights code does not care what the RoundButton *actually* does, it only cares that it does everything a JButton can do (remember, RoundButton extends JButton). Here's how you'd use it in your code: import path.to.RoundButton; JButton red = new RoundButton("Red"); JButton yellow = new RoundButton("Yellow"); JButton green = new RoundButton("Green"); JButton pink = new RoundButton("Pink"); Notice that I have declared the variables as JButtons. Again, this is because you don't care about what the RoundButton does behind the scenes - you only care about the part that acts like a JButton. So, you leave the RoundButton class to do it's thing, and use the RoundButtons like JButtons. This code illustrates two core concepts of programming - *inheritance* and *abstraction*. Since RoundButton *inherits from* JButton (aka *extends*), you can use it exactly as you would use a JButton. The RoundButton is designed to augment the JButton class transparently, requiring no method calls on your part to activate the "roundness". This is a kind of *abstraction*, where code is designed to hide implementation details from whatever is using the class. 
so do i need to replace all the jbottons with the round ones
also should i include the round button in the file or keep it seprate
Definitely recommend Play. A lot of java web frameworks are really bloated and enterprise-focused, but Play is fairly clean.
im getting a error http://screenshooter.net/6210350/oexipyq that error is where i put the import path.to.RoundButton;
Don't go for enterprise-y software stacks like Spring/Spring MVC/Hibernate/Tiles. They're a bit much to take in just starting out. Groovy on Grails is nice, but Groovy is not like Java at all, and will take some getting used to. GoG is a lot like the Ruby on Rails experience, rather than enterprise Java. I hear good things about Play!, though I have not used it. The impression I get is a simple framework that gets out of the way and lets you work. Sounds great to me! Also, it supports Scala, which is a great bonus - Scala is tits. GWT is a different model altogether - your Java code is cross-compiled to JavaScript. Probably not very useful as a Java learning tool - it's more of a bridge to help Java developers write directly for the web. Avoid Tapestry - my company's collective experience with Tapestry has been nothing but pain. In the end, you want a good understanding of MVC and how to use it - that is the dominant architecture for the web by miles, and with good reason. In fact, f you applied MVC to absolutely every piece of code you wrote ever, that would not be a bad decision. 
You need to import the file containing the MyDrawPanel class, wherever that is defined. 
but the file that contailns mydrawpanel is the trafficlight one or do i need to make a class im getting confused
You need to make a class called MyDrawPanel - you're trying to create an object that doesn't exist. You can't just invent names and instantiate them, you have to define a class with that name. 
ok and do i do in this class and where does it go im sorry for all the questions just not sure
i took that out and im still having trouble with the my draw panle so what do i put in the class or what 
Personally, I've landed on Spring and JSP. I kind of like GWT; it's powerful, but you pay a lot for that power.
Let me expand a bit on this: I usually use Tomcat, but AppEngine is great if it's an option. From there, I setup Spring to use annotation-based controllers, and JSP-based views. For persistence, I like SimpleJdbcTemplate which I use to map MySQL to a POJO domain model. (Objectify fulfills this role if you're on AppEngine). You can be up and running in one fairly straight forward config file, and a bit of config in web.xml. I could probably throw together an example project if you're interested in specifics.
If you're like me, it will always anger you because web development is so primitive compared to desktops. Web browsers vary considerably, and you can never have very much control over the user experience. Plus it always involves half a dozen different technologies (HTML, CSS, Javascript, in addition to the backend stuff). That being said, you might like GWT. It's Java compiled to Javascript. Another option is Play, because it's pretty simple to start and it does a lot of things automatically. A lot of the other ones tend to involve a lot of configuration files and a ton of dependencies.
What is the class "MyDrawPanel"? I don't see it in your package. You can't instanciate a class that doesn't exist.
&gt;Another big benefit is that I can use it in any servlet container and it will behave exactly the same. I don't need an app server with a implementation specific quirks. What on earth makes you think this is something only Spring can do? FYI, EJB can be used in a Servlet container in exactly the same way. Just add jars that implement EJB (e.g. OpenEJB) and you're done. That most people rather download TomEE where everything is already setup and guaranteed to work is another point, but if building and maintaining your own stack is your thing, EJB won't stop you. (and it's the same with CDI, JSF, JPA, etc)
&gt;I'd have to google this Rod guy. You are *not* serious, are you?
&gt;Spring also does more than EJBs; it's scope is broader. DI and bean management are only the core of the thing. It's actually not Spring vs EJB, but Spring vs Java EE. Spring core approximately maps to EJB/CDI. Java EE also does more than Spring core; its scope is much broader.
A tangentially related tip: to use your app while developing, use Maven and the excellent Jetty plugin. That way you won't be copy-pasting war files.
I noticed you don't have a draw panel. Where's that class?
Going from Spring to the latest Java EE is an easy switch. Java EE is easier to work with so the learning curve is small. Spring was great when it was first developed but it is no longer the easiest solution. It is now just a more complicated way of doing what is already built into newer versions of Java.
Start with the standard JSF. Check out the PrimeFaces Demo to see some really rich components and how simple the source code behind them is. JSP, Struts and Spring are all really legacy. There are many application running these frameworks so it helps to know a little but new applications should not use these frameworks. Most of the other frameworks you mention are popular in blogs but not used a lot by government or companies. Below is a good place to start with some quick tutorials so you can get a feel for different approaches. http://netbeans.org/kb/trails/java-ee.html 
I can attest this guy/girl knows what's up. Spring MVC is more or less an 'industry standard' and is not terribly difficult to get working.
If Groovy creator James Strachan prefers Scala, everyone probably will. [[1](http://macstrac.blogspot.com/2009/04/scala-as-long-term-replacement-for.html)] But, you can't know until you use both.
Interesting... I'll have to check those out. FWIW, I don't really mind XML configuration. If I'm going to be writing some configuration anyway (programmatic), it's kind of a wash.
This sounds really interesting. Do you have an example graph you could show off?
Currently it's in PS format, and it's rather large. Is there a good way to get PS files (or some derivative format, like PDF) onto the Internet? Can Imgur handle them? It's also not entirely legible, since there are 30,000 connections and they cross over each other frequently. Still, looking over it is interesting.
I've done Java/web development for many years. It is a tough call these days with so many framework available. I think for productivity, Grails is a fantastic choice. Once you learn the layout of a project, it is easy to work with, and hides much of the complexity of Hibernate/Spring via convention over configuration. 
Too bad someone didn't explain when downvoting.. but it's not a wash, it moves the configuration with the code it applies to. This really helps when your making any kind of large web-application. e.g. I'm working on a Struts1/Spring2 legacy application and wanted to remove a struts action. Just delete it from the struts-config and I should be good but there were several aliases defined in other XML files that I spent hours tracking down. If all configuration was all with your code, all I'd have to do is read the annotations above the code I wanted to remove. Eliminating the search for dependent configurations through my project. Saving time and the mind of any programmers trying to maintain your java web-app.
It's possible to use native SQL with hibernate. Sometimes it's needed for more complex queries.
It's the default value, haven't touched it. I'm going to make a test increasing it.
It makes interaction with a database much easier, if you do some upfront work (i.e. data mapping). For instance, if you want to look up one record and put it in an object, that's just one line when using Hibernate. If you use JDBC directly and manually, it'd probably be more than a dozen lines.
Try the reverse, decrease the heap. It may sound counter productive, but making your heap smaller will mean Java will run out of free memory, and have to GC. I believe that's what ajkj2009 was alluding to.
I use MyBatis now, previously I was doing a lot of work with HQL on enterprise projects. MyBatis seems a lot easier to use for small to medium projects. Also it has an easier learning curve. 
Mostly unrelated to your question, but have you considered using a ThreadExecutor and not managing your threads manually?
Well, with jvisualvm I just made sure that there are always 100 threads running. I've done different tests, and I really can't tell. When I do "little" tests let's say that this doesn't happen, but when I do the "final" test I have to let the computer 5hours+ with a 500x500 area so 100 threads x 5 times, and then I see the increase of mem. When it starts it's like 100.000k , at zone 250/500 it goes around 200.000k and one time i let the computer 18 hours for a 1000x1000 zone and it reached 400.000k+ and SSL Sockets layer throwed very weird exceptions that never throwed before about null pointers and then it the programm got stuck. I remember a exception about the heap. I touched few lines and now with tests of 100x100 ( 10-15 mins ) everything seems Ok. I really don't know what's going on here. I touched a line like this: activeThreads[freeSpot] = new Thread(fqThread[freeSpot] = new FoursquareThread(...)); by fqThread[freeSpot] = new FoursquareThread(...); activeThreads[freesSpot] = new Thread(fqThread[freeSpot]); Tomorrow with the "big test" I gonna check if this was the problem.
Have you looked at [other layout managers](http://docs.oracle.com/javase/tutorial/uiswing/layout/visual.html)? 
The difference between JNI and JNA is, to drastically oversimplify it, this: JNI requires you to write some native code to serve as glue between the native library you want to use and your Java code, while JNA lets you write a Java interface and maps it to the native library semi-automatically. Generally, JNA is easier to work with, and should probably be your first choice. As for *how* to use JNA, please consult the documentation [here](https://github.com/twall/jna#readme).
I am using Eclipse, I have NetBeans as well, but I'm not allowed to use a GUI builder it's for a school project...
yes i concur.
Upvoted for dropping the F-bomb.
I would recommend using WindowBuilder in Eclipse. It doesn't prevent you from editing code like Matisse does, and it has the ability to read and edit any code you write by hand.
What exactly is the GUI supposed to look like?
I prefer JNA because it feels that things are done in more the 'java way' by defining a java interface to the native implementation of the library. One thing to be aware is if you are using 64 bit java you need dll's that were compiled for 64 bit, and 32 bit java need to use 32 bit dll's.
I agree; Java GUI coding is a bitch. What I do, since I use Eclipse, is make a new project in Netbeans, design the interface with the Design button, then copy the generated code from the project and put it into the appropriate class in Eclipse, and then write code around it. It works great, and saves me hours of GUI coding. 
Whoa whoa. Let's go back to first principles here. I hope you have a good reason for building a text adventure game from scratch in Java when there are already several existing, well-established interactive fiction engines. What's your purpose here? Is this a let's-learn-java project or an Interactive Fiction project? If it's the latter, it's my opinion that you're way the hell off into the weeds here.
Eclipse comes with its own GUI designer now, called WindowBuilder, developed by some people at Google. Instead of locking people out from editing the GUI code, it's built specifically to allow custom GUI code to be read and edited. Once I found out about it, I have never gone back to what you do (I did it before too).
Really? I had no idea. Is it better then Netbeans editor? I would rather use that then Netbeans
Hi, read the javadoc on converting Strings to Doubles (specifically, parsing) reference your declared 'radius' to the freshly parsed double and you should be good to go
Download Netbeans and follow this tutorial. Just learned this way myself recently http://docs.oracle.com/javase/tutorial/uiswing/ 
 * [Devoxx](http://www.devoxx.com) 
You're not doing it wrong. Swing is terrible, that's why it never took off. Not only is it a pain to build any sort of decent looking UI, but once you have it working, it renders at 3 frames a second as soon as anything starts animating. Just get through it for the school project and then forget it ever happened, that's what I did... O.o
Honestly, after having spent the last year and a half dealing with legacy Hibernate code, I recommend not using it unless you're planning on heavily investing time in learning how to use it and tune it properly. Instead I recommend you use something like Spring JDBC which is much simpler. You'll have to write more SQL but your programs won't generate queries which triple left inner join on the same table just because you forgot to set some default parameter to false in Hibernate... -.-
The J2EE bandwagon crashed a long time ago, so goodluck jumping on it. There is a Java EE bandwagon though, and people who jumped on it have lots of fun. No need to wait anymore ;)
You took a fucking screenshot of code? What the fuck is wrong with you? sincerely, Richard Nixon
It's a way I figured would be an interesting way to learn about java even further.
Yup, closing them too. This + using a fixed thread pool executor definetely solved my problem. Now it doesn't occupy more than 115.000k
I found the article to be very informative. It recognizes Springs contributions and makes a case that Spring helps Java EE 6 develop. I happen to agree with the article that Java EE 6 is the way to go.
I'm going to come out and say it: Java EE looks like a good set or services. Period. It looks like they recognized past mistakes, made changes and even exceeded expectations. Kudos. That being said, let's REALLY talk about what it is. * It is overhyped at this point and some of the claims are downright dishonest. On this blog, the author touts 14 compliant application servers. Wrong. There are 7 full profile servers (they list two of them twice under different licensing models or environments). Then there are 5 web profile compliant servers which only implement a subset of Java EE. And three of the web profile servers are duplicates of the full profile servers. 14 complaint servers? Hardly. http://www.oracle.com/technetwork/java/javaee/overview/compatibility-jsp-136984.html * Now let's talk about the full profile servers - the ALL of Java EE. The reason I use Spring is because I can take what I need and leave the rest. Don't use Javamail? Don't need that jar. Don't use JMS? yep, can leave that one out too. You can't do that with full profile Java EE application servers. Oh, and I want to change which version of a particular jar to use and hope it doesn't conflict with all the other jars at the application server level. Does Java EE have it's place? Certainly. But so does Spring. It doesn't have to be an all-or-nothing contest. * Lastly, I'll take Java EE seriously when I hear a single client take it seriously. So far, I don't hear my client base scrambling for a full Java EE implementation. Maybe it's because they are still choking from the EJB CMP debacle they got sold a few years back. 
If you can access tomcat, its just a matter of finding the resource. Check your web.xml, and your project names. Make sure that your war is included in the server. e.g. right click, add resource, move .war over
I'm trying to reach http://localhost:8080/electricity/, which is straight out of the tutorial. Is it possible to find a directory tree or something of all the pages on the localhost? Is there a way to debug and find out why the app isn't starting, or if it is starting why it isn't connecting with tomcat?
You can enable the tomcat manager app (if its a vanilla Tomcat install) by defining a user with the roler manager-gui in the /path/to/tomcat/conf/tomcat-users.xml. With the manager-app you can go to localhost:8080/manager/ and see if your electricity application is actually deployed. 
That's true but (not having read the article) you should read any argument based on the argument itself, not who's saying it. He can still have valid pro-EE6 points even though he works for Oracle.
would be better to stick to facts in such articles: take for instance CDI - it's really awesome in combination with JSF, JPA and EJB. you could compare this to springs DI/AOP. number and size of JARs - really? we have JEE 5 app server EARs with 85 MB - enterprise portal, many features etc. thats not the selling point. much better is the great architecture for common DB-based business apps - the perfectly interlocked frameworks. yes - you have more ready-to-use spring-solutions (e.g. JPA or JDBC template or neo4j or whatever) but this can also be a barrier.
Ok, very good then.
&gt; Is your local JUG bad? Why not attend JUG meets? This is a great tip. I'm in Los Angeles (west side) and there are some ok meetings. I can't believe I didn't think of it!
Many thanks everyone for your replies I'm going to try and work through all the suggestions an get my head around it. I appreciate all the advice everyone has given!
Welp, I was just having fun cos this is actually the second or third time I've had trouble with this (and it seems others have trouble with it too), but I'll give you the boring details: I'm going through the Deitel Java book (9th ed.) which recommends setting a global classpath. I know this is frowned upon but I figure I'll do it while I'm running the examples and get rid of it later. Anyhoo I had some trouble with PATH and worked that out, now when I run `java Welcome1.class` (this is Ch02\fig02_01) I get the following: `Exception in thread "main" java.lang.NoClassDefFoundError: Welcome1/class Caused by: java.lang.ClassNotFoundException: Welcome1.class` I've gone through a lot of variations of CLASSPATH - it's currently `.;C:\Program Files\Java\jdk1.6.0_17\bin;`, however even when I override it like so: `java -cp . Welcome1.class` I still get the above error. I should mention that I've navigated to the directory the class is located, &amp; have confirmed that typing `java` and hitting return works anywhere in the shell. I know my User PATH was overriding the system PATH which is the previous issue I had - maybe I should be adding a CLASSPATH in my user variables...
[Obligatory](http://i.qkme.me/3oih9w.jpg)
What I don't understand is why you would want to leverage the Tomcat Java EE features? Why not just add the JSF libraries to your war and be done? Then you don't have to worry about switching server contexts. For example, there have been quite a few shops that use Tomcat for LOCAL and even DEV, but then use Weblogic for upstream environments. Using the app server context for this could create some issues with compatibility. 
I can't stand when people use number of JARs as an argument... who cares? Disk space and memory are cheap.
If he's using an IDE to create the JEE example he also should look into Roo. Matter of minutes, too.
This is Javascript, not Java. They're *very* different things. Try [/r/javascript](/r/javascript).
the semicolons?!?!??!?!! Where are they?!?!? j/k. I know it's javascript. btw. just because it has java in the name doesn't mean they're the same. you should post this here: http://www.reddit.com/r/javascript edit: i hate typing "cause" 
String command = "MyLauncher.exe My.file"; Runtime.getRuntime().exec(command);
I don't think Eclipse's built-in JAR functionality allows you to stick anything you want in there, so you will probably need an ANT script to build it like you want. Generally speaking, you'd use the ANT &lt;copy&gt; task to copy the database from your project directory into the build directory, which will then get JAR-ed up with the compiled source files. Then, just make sure the relative path of the database remains the same between the JAR root and your project root, and your code should find it. [Here's a pretty good ANT tutorial which will get you started.](http://www.vogella.de/articles/ApacheAnt/article.html)
Next time you wish to share code, I would suggest something like [Pastey](http://pastey.org/). Much easier to examine than a screenshot. 
Noted, and bookmarked. Thank you very much.
Err, Preview displays _valid_ GIFs just fine.
&gt; On the point of the class not being a file, I am compiling first using javac and this generates a Welcome1.class file. Right, but what "java org.something.something2" is saying is "run the following class' Main method: org.something.Something2. What you're saying with the '.class' on the end is: run the following class' Main method: org.something.Something2.class (there is no class of type 'class' in the 'org.something.Something2' package!) glad I could help.
Before you agree with the article, I suggest you read the comments on https://blogs.oracle.com/arungupta/entry/why_java_ee_6_is#comment-1332476069680 and https://blogs.oracle.com/arungupta/entry/why_java_ee_6_is#comment-1332509231931. Yes, they are both from SpringSource/VMware employees, but for me they get to the real pain points of the JavaEE: it does too little, too late, and worse yet, they tie the developers to the will (and politics) of Operations and Infraestructure teams. I'm all in favor of having specifications and etc, but putting the implementations inside applications servers for stuff like DI, ORM and the like is all about vendor lock-in, no matter what they say about it.
I guess I am a little late to the party here but you could try defining your program into rows and columns. I believe it uses GridLayout. Wish I could help a little more than that but unfortunately I'm a Java noobie as well. Best of luck.
The command should be: open -a [path to application] file.gif For example, I use [Xee](http://wakaba.c3.cx/s/apps/xee) to display gifs, so I would run the command `open -a /Applications/Xee.app myimage.gif`
Is there no way of doing this by using JNA?
Oh, if you need to show animated GIFs as animations, you'll need to be quite picky about what program you choose, and probably offer the user a choice.
Ah, I wasn't even thinking of static GIFs. Good point though - Preview does correctly show a static GIF.
Wow. I didn't know JNA existed (although I don't feel too bad because it looks very new). Very cool. TIL. It looks like you need to put those Init and SetMotors methods in an interface instead, and instantiate an instance of that interface via the Native.loadLibrary call. (edit: also drop the "native" keyword - that's for JNI not JNA) The wikipedia page has some simple examples: http://en.wikipedia.org/wiki/Java_Native_Access
You are post-incrementing, so you are always passing "0". Use pre-increment instead (++count, not count++). Actually, there is no need to reassign the parameter. "count + 1" would be a better choice. (edit: Do the same with start too).
[Does this help](http://stackoverflow.com/questions/2642371/can-jni-handle-any-dll-files-windows)
The scenario you describe is just plain and utterly silly if you're in a shop developing for itself (as opposed to developing for an unknown number of clients in a heterogenous environment). If the upstream environment is Weblogic, all developers should be using Weblogic. If the upstream environment is JBoss AS, all developers should be using JBoss AS. At most you could at times test you app on some other environments, but as primary development and staging platforms this is just nuts. People advocating that should not be in IT.
The problem is your increment - the ++ never actually happens. Try pre-incrementing instead: `++start` and `++count`. If you add code to print `start` and `count` to your current code, you'll see that they're always zero, and so your termination condition is never met. Ergo, the stack blows up. 
as the slightly late, but correct comment, you'll likely get little love. so here's some from me. i love you too :) upvote.
&lt;3
Really? So because the application used absolutely NO Weblogic-specific functionality and had ZERO impact on the performance of the app, the concept of not using a bloated local application server implies those people should not be in IT???? Even though there were two additional environments the app staged through before prod??? Again with the absolutes. First rule of IT: You don't know everything. 
I got $10 you work for Oracle. Edit: Forget it. I saw your comment history. No need to discuss anymore with you. Good day. 
The keyword 'this' is a pointer to the object of the enclosing class. Whenever you are within the scope of a class, there is a reference to the class, that is magically prepared for you, and is called 'this'. Read more: http://docs.oracle.com/javase/tutorial/java/javaOO/thiskey.html 
I have seen this done many times. Each time there has been at least one occurrence of a bug that was very hard to track down because of using a different environment in test then in production. Sometimes it may be necessary but it is not a good practice.
It may fail if you filename or program path contains spaces, for example "MyLauncher.exe My Long Name.file". In this case MyLauncher.exe will be launched with three different args "My", "Long" and "Name.file" :)
See here: http://www.reddit.com/r/java/comments/ri4wx/having_trouble_with_recursion/
Thanks for this! Just installed it and it looks really helpful.
&gt;the concept of not using a bloated local application server Here's where you go wrong. There is NO BLOATED local application server in case you use GlassFish, JBoss AS, TomEE, Geronimo, Resin, etc. Their download size + startup speed is comparable if not better than Tomcat + Spring + Hibernate. So for Java EE in general, yes, it's silly. Now Weblogic is maybe a separate case indeed (together with WebSphere), but for starters I would never ever advocate using those. They are closed source and that's where the story ends for me. I'm not sure what the current download size of Weblogic is, I thought the latest 12c was somewhere in the 100MB, a far cry from yesteryears 1.2GB or so. I also don't know about startup time. If it's slow, couple it with JRebel. Then you typically start up your server once and can hot deploy changes. Additionally, if the developers have decided to use WebLogic and its known to be slow and/or resource demanding, they should budget in extra cash for more powerful development workstations. A manager or other budgetary person should not accept the request for WebLogic without also accepting the requests for more powerful workstations. Denying the latter would be a case of penny wise, pound foolish. The operational costs associated with subtle bugs most likely will dwarf that ~€2500 per workstation. &gt;Again with the absolutes. First rule of IT: You don't know everything. I agree with that yes. Actually the more I learn the more I realize how little I know, so I give you this. With two additional staging platforms that ARE based on WebLogic where the app goes through before it lands in production it's indeed a bit less silly. Although I really still wouldn't advocate it, but again I wouldn't advocate using WebLogic in the first place. Use GlassFish, JBoss AS, etc and you will have none of those problems to start with.
You're still implementing, basically, a for loop: when recursing, generally, you shouldn't need to track your position in the way you are. Instead, you should modify the argument you're passing to your recursive function. Something like: public int magnitude(String input) { // base case: don't recurse any further if (input.length() == 0 || input.charAt(0) == '.') { return 0; } return 1 + magnitude(input.substring(1)); } (Note that I haven't compiled/run this so can't guarantee I've used substring correctly). I realise I'm several hours too late, but had to stick my oar in too :)
&gt; libspotify.dll loads fine but when I try to load the JLibSpotify dll I get this error You mean when you call a procedure you get the error? Do any of the other procedures work? Maybe you also don't have the original dll that this wrapper dll wraps, thus calls fail but the wrapper dll loads fine?
swing noob here ... &gt; but once you have it working, it renders at 3 frames a second as soon as anything starts animating. Was this sentence for or against Swing... ? is 3 frames a second a good thing because other GUI packages are not able to do it, or is it a bad thing because it eats up battery/cycles and makes the computer into a toaster ? 
henk53's super list of recommendations for me: 1. Tell client that regardless of the boondoggle and YEARS/MILLIONS wasted after adopting the last round of enterprise java solutions put our by Sun, they should forget all that, forget all the successful years of Spring development outside the Java EE containers, because now this is coming from Oracle, and they should absolutely trust Oracle because they've never been screwed in the past by Oracle. 2. Tell clients they are silly for not running one the above listed application servers locally even though they have EXACTLY WHAT THEY WANT, NEED, AND ASKED FOR with the Tomcat/Spring/Hibernate. (Not sure if this should be 1 or 2) 3. Tell silly clients they need to budget an extra 2500 per workstation. Your team of ten developers is not going to be an extra 25k. Why? Because you might catch a stray bug every so often. Sure they won't balk at that. Thanks for all your help, henk53. This is a wonderful list of reasons everyone should switch from their years of successful development to a new platform with a very bad track record. You sure seem to know it all, don't you? 
Not sure where you're coming from, but you might possibly be interested in Greenfoot (www.greenfoot.org), which provides a simplified approach to learning to create 2D games like this in java.
Just for clarity, because I'm pedantic. 'this' is a value reference to the object, a pointer can be changed to point to another location, a value reference cannot.
The keyword "this" can be used in several ways: - to refer to a member variable when a parameter with the same name is supplied e.g. this.age = age; - to pass a reference of this instance to another method e.g. foobar(this) - to call an alternative constructor (with different parameters) within a constructor e.g. this(a, b, c);
Just installed it, pretty slick. It's a bit better than just searching with CTRL-F in my opinion.
It's exactly the argument Spring used against Java EE in the past: Hey, you're 1GB in size, we're only 500k. Then the Java EE guys countered. Hey, wait a minute, you're not counting the dependencies in your pom.xml! That pulls in an additional 100MB. Then the Spring guys went again, slightly shamed: Oh yeah, uhmm... but it's still less than 1GB! Now in many cases Java EE is smaller while offering the same or more functionality, and now all of a sudden disk space and such doesn't matter any more???
Still pretty unclear :( Do you mean you have a Member.java and a Group.java ? You want to know how you can add Strings into an array (located in Member.java) from another Class (another .java file)?
yeah ive been working on it. and there is a member.java, group.java and an input.java. and then the tester class.
The Classloader takes care of finding the classes. I'm assuming that you're not using any packages in your java files and that's fine for very small things like homework. You'll want to introduce packages before you get to anything sizeable. Anyway, the classloader reads the classpath to find the different class files. So for example, if your classpath is this: CLASSPATH=. Then that means to look in the current directory for all class files. When ever you say new Member() or new Group(), the classloader will look in the same directory as java was executed from and look for the Member.class and Group.class there.
so like the input class has a bunch of strings in an array. and then there is the getNextString method that basically returns the string in the arrays, starting at 0. and the input is set up like this: array[0] = group 1 array[1] = member 1 array[2] = member 2 array[3] = group 2 array[4] = member 1 and so on
I fail to see where he or anyone said you as an obviously happy Spring user should switch. Were you to start a new project, maybe in a new shop that's formed by a startup, then Java EE would absolutely be the first choice and not Spring. Spring fixed something that nowadays doesn't need fixing, but if you're a happy Spring user, keep using it. On the other hand, we run on Java EE 6 and that is EXACTLY WHAT WE WANT, NEED, AND ASKED FOR. There is no reason at all for us to switch to Spring. Should be trust Springsource, when we have no experience with them and didn't always hear good stories about them? I also think that your point 3 is unjustified. I read the previous remark that if you want to go with Weblogic, then you should budget in that extra 25k. If you can't afford that, don't use Weblogic. There are plenty of free alternatives that are just as good or even better. 
Doesn't Spring Roo, though indeed impressive, litter your project with tons of mandatory AOP?
is the DLL 32 bit too? Also, as "runnable jar" your project might run in 32 bit, while using an IDE it might run in 64bit. Are you sure the DLL is at the right path?
This is a really cool program. I've been using BlueJ, so the similar interface will be a huge help. Thanks for showing me this!
To clarify: each of the statements inside an if has to evaluate to either true and false, and &amp;&amp; only works on boolean statements. Think back to your math class where everything inside () is evaluated first "if ( (age &gt; 6.5) &amp;&amp; (age &gt;7.5))" will become "if (true &amp;&amp; true) " (== true in total) This can also be used in return statements where the funtion return a boolean, like "return (a == 1) || (a == 2);" (true if a is 1 or 2, false otherwise)
This will also report pH of 6.5 as too alkaline. And what about a pH of 9?? 
Why the fuck are you naming the variable age instead of ph?
I would recommend [Forms](http://www.jgoodies.com/freeware/forms/) I do a ton of swing work and it's the only manager that makes life easier.
...and now for a little help with your formatting... -------------- Given the class '**ReadOnly**' with the following behavior: * A (protected) integer instance variable named '**val**'. * A constructor that accepts an integer and assigns the value of the parameter to the instance variable '**val**'. * A method name 'getVal' that returns the value of '**val**'. Write a subclass named '**ReadWrite**' with the following additional behavior: * Any necessary constructors. * a method named '**setVal**' that accepts an integer parameter and * assigns it the the '**val**' instance variable. * a method 'isDirty' that returns true if the **setVal** method was used to override the value of the '**val**' variable. **Answer:** class ReadOnly { protected int val; public ReadOnly(int arg) { val = arg; } public int getVal() { return val; } } class ReadWrite extends ReadOnly { private boolean dirty; public ReadWrite(int arg) { super(arg); dirty = false; } public void setVal(int arg) { val = arg; dirty = true; } public boolean isDirty() { return dirty; } }
I found the answer online because I was having difficulty. Now I am trying to understand why the answer is correct. I don't understand the portion: private boolean dirty; public ReadWrite(int arg) { super(arg); dirty = false; 
That is to satisfy this requirement: "a method 'isDirty' that returns true if the setVal method was used to override the value of the 'val' variable." 'dirty' is initialized to false in the constructor so that if the setVal method is never called then the isDirty() method will return false. If the setVal method is ever called, it sets the dirty flag true so that every subsequent call to isDirty() will return true. [edit: isDirty() could be better named hasSetValEverBeenCalled()]
Yes ! I noticed that when I entered a number &gt; 7.5 and two windows popped up afterwards.
On a note unrelated to your problem; why call the variable "age" if it contains a pH value? That seems rather misleading to me, unless "age" is some terminology I'm unfamiliar with (in which case, ignore this post!). I'd have called the string variable something like pHstring, and the double variable (the one you're using the most) pH. The name of a variable (or function/method/class/subroutine) doesn't affect whether your code runs successfully or not, but using sensible names helps enormously with understanding the code, especially when looking at the code again months or even years in the future. 
/r/programming is a java-hating place in general, but there don't seem to be much Spring fans here. Though tbh too, it's a trend that I see at more places. A few years ago Java EE fans were everywhere in the minority, but now it seems to be the other way around.
http://en.wikipedia.org/wiki/Serial_comma
&gt; It also shows what I did wrong easier then me explaining. If you had to explain the problem, maybe you'd be able to figure out the solution? How long did you spend thinking about this before you rushed off to the Internet for assistance? sincerely, Richard Nixon
It simply depends on who you ask. Programming languages are too often a tool to propose personal attributes. Java had lots of lack in the 90ties. Those are mostly grown out by now, but the prejudices still remain.
It's not a favorite but it I believe it is the most widely used. Java pros: 1. portability, it works on any machine (nearly). 2. Such a widely used language with so many libraries, code has already been written for anything you want to do. 3. Ease of use, def great for learning because it is much more forgiving than other languages like C. ---- Java cons: 1. Speed, not as fast. The price you pay for portability in this case. 2. You don't have that close relationship with your hardware like with C, not really much bit-by-bit memory management because everything has been done for you so may not be ideal for systems programming. This is all I can think of at the moment but I would say more pros than cons.
People object to: 1. Sometimes bloated syntax. What some other languages can accomplish in a line or two of code, Java might take 2 or 3x that 2. Frequent security issues with the JVM (though this bothers users as much as developers) 3. It's not the hip thing 4. (edit) More recently, Oracle. People complain about their business practices 5. It can be slow to advance with new features. And sometimes when they are added, they're added in a stupid way for backwards compatibility (see, Generics). But I wouldn't worry too much, I still think it's pretty great and has a good future.
Thank you. So I just feel the need to ask: I want to create an applications for personal use. Would Java be ideal for that? I seem to hear about it being much more useful on the server side, rather than application. Edit: Personal application
From /r/programming's FAQ, in which they list the disadvantages of most common programming languages: &gt;Java: Syntax too big. Too slow. Everything has to be in a class. Swing sucks. Spring. Associated with horrible enterprise bloat, a la Kingdom of Nouns. No function pointers. Collection framework can't handle conversion to collection of a supertype. Sometimes awt is hardware accelerated and sometimes it's not. Float type is not compatible with anything. I personally think the syntax is counterintuitive in a lot of places and could be streamlined.
I often hear a lot of gripes about exception handling in java as well.
it's not bad once you understand it IMO... figure out what kind of exceptions are being thrown, and then decide if you want to throw or catch. You can always label whatever kind of exception you want as a generic exception if you want to take the easy route (just found out about that). But if you need to make something work, you can make it work.. even though it might not perform optimally.
They're faulting Java on speed? Java's fast. Faster than pretty much every language except c/c++. Everything else there is reasonable, but nobody's yet mentioned the lack of support for unsigned integers.
It can be pretty quick. Theres the hotspot optimizer. Also don't forget the whole LMAX trading performance claim, and http://vanillajava.blogspot.com/2012/02/high-performance-libraries-in-java.html
This. If you want to built hobby applications, you'll be most happy creating some type of web-centric app, like an image or music library browser, etc. GUI apps in Java are notoriously difficult to work with. Not sure if it's any more difficult than something like C# in that area, but you can create much better UI stuff working in the web paradigm than the Java GUI libraries.
Care to elaborate more on the stupid things about generics? Inquiring minds would like to know...
http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136373.html Basically it looks for ways to optimize code: loop unrolls, synchronization fixes, etc. Also I forgot to mention there are alternative VMs that are a little better at running the bytecode on specific platforms. J9 is IBM's. IceTea is RedHat's opensource one. Oracle's JRockit "realtime vm"
&gt; a programming language no one hates, is a programming language no one is using. I will remember this! Thank you.
That, or they do work in the enterprise space and code in VB.Net. And by code I mean, "drag &amp; drop, configure, and inject spaghetti code" in VB.Net.
J9 is reportedly very very fast. I've used JRockit and its memory management was much better than the stock JVM. Although that advantage his lessened over the years.
The answer was included in the wall of text. 
The answer is in the submission above. He has jsut reformated it. Took me a secodn to realise that as well thanks to the crappy formatting :)
I do most of my work in Java, but there are several recurring issues that make it a less pleasurable experience than it could be. The first of which is the language's propensity for verbosity and bloat. I often find what I could write in 10 lines of Python or Scala often turns into 20-30 lines in Java. I doesn't help that pretty much everything needs a getter and setter. I am also often disappointed by the lack of support for functional programming paradigms. There are many cases where the right application of map, reduce, and filter can make the code look cleaner and better designed. From what I've read, these are coming in the next version of Java, so perhaps this complaint will go away. Strings. While Java is way ahead of C/C++ for strings, I still find manipulating them a bit cumbersome. It would be nice to easily take slices or iterate over parts of them without having to call several methods. In a related manner, I find that working with regular expressions requires many more steps to do matches and finds than it should. The IDE programs not the programmer. Java is practically impossible to program without using an IDE, and I think that without discipline this can lead to some poor habits where people just look for the matching method instead of thinking about what is actually needed for the task. I also find Java's checked exceptions to be a bit heavy-handed. Requiring all of the exceptions to be part of the method's signature exposes implementation details that don't need to be broadcast and can lead to boilerplate try/catch blocks that mask real errors. That said, I really like the Java ecosystem and the wide support and availability of libraries. For all my complaints, there it is still a very usable language and having libraries like guava or commons.io really help to keep code cleaner and more polished. 
Take a look at Scala or Clojure instead. The JVM is great, but Java the language is stuffy.
That, or they have... and they're sick of seeing a typed abstract class that's so far away from what they want to do that it takes 5 control+clicks (Eclipse on a Mac) to get to any semblance of logic for the feature they're looking at. Seriously. The next time I see SearchCriteria&lt;T&gt; that's a parameter to an abstract SearchService&lt;R&gt; with a SearchServiceImpl&lt;SearchCriteria&lt;T&gt;&gt; I'm going to kill someone. A lot of the "good" ideas in Java development are absolutely ridiculous when taken literally, applied all-at-the-same-time, and combined in a large codebase. Sadly, people seem to latch onto a "Java enterprise" perspective and stick with it rather than thinking "you know what, this code I'm writing would be a lot more simple if I just thought about extensibility from the point of view of an outside user." EDIT: I forgot about XML-based dependency injection. When you have to navigate through a maze of xml definitions about how these weird subclasses are initialized for specific types, it adds an extra layer of complexity/obscurity to the task of simply trying to figure out what the hell is going on.
It is just as fast as anything else. Google it. 
Just because you've been able to build your career on something doesn't make it worthwhile. A lot of developers use a PHP-based eCommerce platform called Magento which, if you know it well, can easily earn you in excess of $100k/year. Is it worth it? Well, it's a terribly written platform that essentially puts an unreadable schemaless key-value store on top of MySQL and has awful scalability problems... but you can make shitloads of money if you know its ins-and-outs. I've built my career around being a software generalist. So far, I've been mainly doing work in Java. You should never close up your options to a specific language/platform just because you can build a career out of it.
With the jackson library its super easy! And then free from Python syntax :)
No. Java's exception handling is designed incorrectly. I'll illustrate this with your remark: &gt; This is both on the designers of an API throwing too many exceptions that no one cares about [...] See, the problem here is that this is a polynomially large problem. So your method A uses library methods B, C and D. Each of these throws its own distinct type of Exception—let's assume just one type each. What can you do? * You can catch B, C, and D and handle them. This means that you have to write up to three exception handlers in your method A. But A is most likely the wrong place to handle these exceptions. Why? Because most of the time you want exception handling to be unified in one place, relatively up in the stack, in an "entry point" method. * So you can make A throw all those three Exception types. But now you've just moved the problem to A's caller(s)—and if there's more than one caller, you've *multiplied* the problem. (Which, BTW, shows that this "handle exception here or propagate to caller" problem can get exponentially large. Not a good sign!) * A can catch all three exceptions, wrap them with its own checked exception, and throw that. All you've done here is contributed to creating a stack of meaningless exceptions, with the true one at the bottom. * You can just give up and wrap each possible checked exceptions with a `RuntimeException`, and throw that. This is normally the only sane solution. The thing is that checked exceptions make it painfully hard to perform the simplest kind of exception handling that you should do: if there is any kind of exception, abort whatever you're doing (because the result is going to be wrong), release all resources, roll back to a safe, predefined initial state, and produce an error message that helps you troubleshoot the problem. An exception system should help you get to that point with minimal effort; only after you've got that much working, then you can start discriminating between specific types of exception and handling each one in a sophisticated manner. But checked exceptions are just back-ass-wards in that regard.
I haven't used Jackson in a little while, but declaring this: returnValue = { "message": "This guy knows what he's talking about!" } in Python seems a lot easier than public class Response implements Serializable { private static final long SerialVersionUID = 1L; private String message; public Response() { } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } } in Java. Also.. I'm not sure about what you mean about being "free from python syntax"... imho there's a lot more syntax in the java code than python. The python code here is actually directly interpretable in javascript.
You know, it's not like XML provides an unified syntax at any more than an extremely superficial level. There's still the whole issue that without a schema, XML is just a bunch of meaningless SAX events or DOM elements that you will have no clue what to do with or how to produce.
Have you checked this link? They seem to have some answers which may help you. https://forums.oracle.com/forums/thread.jspa?threadID=2213081 Another suggestion is to update your Windows installer (not sure how reliable that advice may be) http://www.itninja.com/question/help-with-msi-1723
Actually, the point of SGML and XML was to be **text markup languages**. You know, like, to write natural-language documents and put in tags specifying things like "here's the start of a new paragraph," "this text here should be emphasized," "here is a bibliographical reference," etc. The problem is that the following two things happened: * The Semantic Web crowd (who seem to have ignored the memo that symbolic AI failed) became its owners. These people then proceeded to make these things way, way too complicated, and for bad reasons. * A bunch of rock star enterprise Java consultants decided to abuse XML for things that it was never designed for, like RPC. &gt; Secondly, the whole reason for SGML and XML is so that you can define semantic structure for your data that made sense for your specific problem. If your data contains the blueprint for an engine, a list of names of engineers who worked on the engine, and a list of parts for that engine, then your data should have tags that say things like &lt;engine&gt;, &lt;engineer&gt;, and &lt;part&gt;. Now it is explicit what your data means. Syntax is not semantics. Just because your tags have English words as their names doesn't mean that you've given "meaning" to your data. Even the Semantic Web folk know this much.
Yeah it is quite some extra work, but once its done you never have to worry about it.
This is a good point. I'd say Java has a pretty good ecosystem. Tons of freely available libraries, decent syntax, solid virtual machine. Hell, even different languages on the same VM.
Thank you. The first thread was unhelpful and seemed outdated, I will try the second one and see what happens. This is a very annoying problem because now I can't play minecraft or some other games. Edit: The second link seems to be for windows XP. I am currently running windows 7. 
Try this one; it deals with Windows 7 http://www.tomshardware.com/forum/495-63-java-error-1723
I'm curious, do you have an example of where that would be helpful? I haven't run into a situation where I needed the type of the object beyond it's generic "type" (? extends Foo)
You *can* accomplish that for the most part. If you really don't care what went wrong, you can always throw Exception. It's ugly because of convention, but if *any* error condition would cause you to abort, then you do have a shortcut. I'd also say more API/library authors should be conscious of this, and write their libraries to extend from some base Exception class. There are definitely times when the list of checked exceptions thrown gets a little ridiculous.
I really like Fantom, myself.
The same could be said for any type of config file or format. It seems like JSON is taking the place of XML in a lot of instances, and for the better if you ask me. However, XML is awfully expressive in some contexts.
I think your strongest complaint here is regarding fields. C#'s properties are awesome, and Java needs to bring that shit over ASAP. Checked exceptions can be a little verbose. But in my experience, 80% of the time, it's really not a big deal. There *are* cases where it gets really fucking absurd.
The learning curve for the web side is way to goddamn high. I blame Sun, and now Oracle for that. The official standards kind of suck, and the defacto ones are hard to find when you're just getting started.
Processor speeds are only a fraction of what's changed. The JVM has become a lot more lean and a lot smarter since early versions. The hotspot VM is really quite an impressive piece of technology, which is one of the reasons so many other languages actually compile to be used by the JVM.
Thank you so much for this one! I suppose I should get myself within forums like this to be REALLY submerged. What an awesome link. Thank you, sir! 
if it is good enough for Google,Facebook, Disney and a lot of large enterprise companies then it is good enough for me. I would say they don't really understand development and/or someone else said it to them. also.. not apple.
And if all that you used that message object for was to return a string from a web endpoint, you might be right. However, that object gets used throughout the system and tends to have a more complex structure - especially if you're working with a domain model or request and response wrappers. Jackson is excellent for that.
&gt; You can accomplish that for the most part. If you really don't care what went wrong, you can always throw Exception. No, it's not as simple as that: * If you do this, some random large subset of your methods' signatures need to say `throws Exception`. * But not all of them will, and the compiler will report an error for a method that says `throws Exception` and cannot actually throw a checked exception. * When you change the code for a method so that it changes from non-throwing to `throws Exception`, you need to revise all the callers to also have `throws Exception`. * When you change a method so that it no longer throws any exceptions, you will need to modify some subset of its callers too—the ones that only threw `Exception` because they invoke the one you modified. * And of course, this whole breaks down as soon as your classes have to implement third party interfaces; i.e., all the time. * Also, if your interfaces' methods' signatures have `throws Exception` all over them, I hate you, hate you, hate you, hate you, because now you've infected my code with this nonsense.
Exceptions are an implementation detail. If abstraction is used properly, the caller of a service should have no concern for the actual details of the implementation. Exceptions should not be thrown up the chain. Instead, they should be dealt at the local level and, if the issue cannot be resolved locally, should be communicated back up as an exception that is meaningful to the caller.
in some cases faster and more scalable. I read a good article a while back comparing a servlet to a php script. What I remember out of it was that they executed in approximately the same time, but Java could handle something like 12x more requests than the PHP equivalent. I think that went down to something like 2-3 times more after they optimized the shit out of the PHP script. now i've got to go find that article
One last try; this thread http://goo.gl/6Qgzc - had this entry " http://support.microsoft.com/mats/Program_Install_and_Uninstall Friends i found here.. and it worked for me... Thanks a lot to Marilyn Microsoft Answers Support Engineer .. Glad it worked ! --&gt; In case you have created user variable( System properties&gt;environment variables&gt;user variables&gt;Path) please delete that too.. May be it can help you.. i did for me :) " 
I'd just like to chime in and say "hobby applications" aren't always GUI, and in fact, they usually never are for me. When I write code in Java, it's usually because I know its strengths, I know that it will allow me to basically "get in and get out" instead of wasting time garbage collecting, and more. I rarely use a GUI because a lot of my hobby projects are "I wonder if I could do that"-typed ideas. My most recent project (tonight) was to see if I could create my own great compression scheme. I did pretty well and not a GUI in sight! :P
Yeah, I agree. I was just trying to format it so that those who felt like actually helping him would have an easier time. My guess is he hasn't learned a thing in his class. He googled the question, found an answer and now wants someone else to explain it to him. Considering his other coding post, this is how he's been sliding though java. Sorry to be a grouch as well; but yeah...
I think you're being a bit unfair to poor old Java and just wrong about why it took off. Java the language took off because of the JVM, which started out as a dog and quickly grew into something that rivals native C for speed for certain tasks, good GC, good multi-processor handling. Microsoft at the time had nothing to compete with it (VB 6 was still the big enterprise thing). Java filled the vacuum and did it well. It had it's startup pains (show me one platform that didn't) but it's hard to find somebody who invested in java development and it failed them. Dissing the platform because of the language is missing the point entirely. I'll trust the JVM over Mongrel or Node.js or almost any other language-du-jour's environment for stability and portability. The language takes a distant second in importance to the environment, and community support, and stable 3rd party libraries. Pros: * Super easy for average programmers to build and maintain relatively large codebases. Mostly due to a reasonable static typing implementation, which helps IDEs do most of their magic. * Extremely readable. Verbose, sure, but unlike some languages that let you to crazy stuff (looking at you Scala) most java developers can follow most java code. The language itself is a sneeze guard against a way-too-clever programmers. * Extremely portable. I write on macs, use libraries coded in Windows, deliver to Linux and have never had a compatibility issue. * Extremely stable. You know that problem where a language designer changes something fundamental and it screws up everybody's code? Well Java developers don't. Libraries are still useful and have been stable for over a decade.. * Huge industry support, user community. Your investment won't have to be rewritten in two-years when people decide that language du-jour didn't have the staying power. **On Exceptions:** You make a good point with checked exceptions being evil, but I think you're over-selling it. Most modern 3rd party APIs have moved toward RuntimeExceptions so the problem has been greatly reduced. Every language has it's orignal mistakes (I'm looking at you Scala embedded XML) but this is one that is solved by convention. Your exception example is misleadingly verbose and no seasoned Java developer would catch and re-throw a runtime exception like your first catch() statement. What purpose would that serve? Catching the 3rd party API exceptions tend to be limited to service integration classes: public void doIt(String a, int b) { try { // method body... } catch (Exception e) { throw new IllegalStateException(format("a=%s b=%d", a, b), e); }} All of a sudden the pain of having to catch that 3rd party api becomes an opportunity for the logging you'd need to do anyway if you plan on writing maintainable code. Here I throw a nice runtime exception with the state of the method call so when my exception barrier catches it can log something that will actually help me debug. Of course, since I'm using the JVM I could also just use Groovy or some other higher-level language that automatically downgrades all exceptions to runtime-exceptions, eliminating your largest complaint. People hate on java because it isn't sexy anymore and I agree, the language feels 'out of date'. That hardly matters when most of the best new languages are available on the JVM and are 100% compatible with all the java code. * Edited for clarity.
&gt; My sys admins hated it, because they felt the run time consumed a lot of memory and other resources for even small programs. I think a lot admins feel that way. This will probably be the case with any language that has a garbage collector since it has to grab it's memory up front. The JVM can be tuned quite a bit and the code size can be reduced greatly with careful jar selection. I use a shade filter when building one app that I need to be slim, which pulls out only the classes I need from 3rd party jars and repackages them. But yeah, if you have a bunch of tiny apps, each JVM instance will need to grab it's share. Better to combine the apps into one executable.
Because it is a lot of people's job, and people hate their job
&gt; Speed, not as fast. Not as fast as C and Fortran you mean? Because it's sure a hell lot faster than Python, Perl, PHP, Ruby, etc.
I agree with you on Python. My 9 and 0 keys are getting pretty worn down.
Because they are hipsters.
&gt; pretty much everything needs a getter and setter. Nothing needs a getter or setter. Those are crutches from not fully apply proper design methodology. &gt; map, reduce, and filter I agree, the lack of functional programming paradigms is unfortunate. However, there is nothing stopping you from making your own implementation... or using another. Funny you should mention guava. &gt; Java is practically impossible to program without using an IDE This is absolutely incorrect. Once your program in a fully capable IDE there is little reason you'd want to go back. And this is the same for every language, it's just that other languages have not gotten such marvelous tools to work with as Java... due mostly to timing and the advancement of the field. &gt; poor habits where people just look for the matching method instead of thinking about what is actually needed for the task ??? This didn't come out clear. Try again, and give an example. &gt; Requiring all of the exceptions to be part of the method's signature exposes implementation details that don't need to be broadcast and can lead to boilerplate try/catch blocks that mask real errors. You uh... apparently do not understand what exceptions are. If a method can create an exception, I should darn know when any why that occurs. Give me a good example of how implementation would be leaked by an exception. That makes no sense. ... The rest of it is fine.
Depending on the issue, file A would be the perfect place to handle it where there is still context around the error. Otherwise throw it back to the top. I don't understand your complaint, which seems to be "oh no, I have options!"
I came from an environment better than Java, and Java still has miles to go to be as good as 1995 Smalltalk. Smalltalk allows you to program as fast as you think. Java, for me, does not. Haskell and Forth have also given me that kind of flow, Scala, Lisp, Python would probably do that too, Basic and Cobol would not.
&gt; Nothing needs a getter or setter. Those are crutches from not fully apply proper design methodology. Every try hibernate or spring IOC? &gt; This is absolutely incorrect. Once your program in a fully capable IDE there is little reason you'd want to go back. And this is the same for every language, it's just that other languages have not gotten such marvelous tools to work with as Java... due mostly to timing and the advancement of the field. I think the point was that simpler languages require less tooling around productivity because they are by nature already more productive (easier to understand, less verbose and less mental overhead in general). &gt; You uh... apparently do not understand what exceptions are. If a method can create an exception, I should darn know when any **why** that occurs. Give me a good example of how implementation would be leaked by an exception. That makes no sense. The why is probably irrelevant to users of an API. All the client should care about is whether it gets the expected results. If it has to know *why* these expectations fail, then implementation details have leaked. Imagine the scenario where you have a, file backed, persistence API. Now say the implementation exposes the whys of its exceptions (IOException for example). How much would users of this API have to change if they wanted to switch to a different implementation (say database backed storage) and hence different *whys* for its exception (SQLExceptions for example)?
Java through and through here! I did write my own Dev tools - Gui and Xml parser but that was like back in 2000. Still use there progeny too this day.
I won't recopy my rant (look in this thread for my name) but I'd recommend you to learn java (a good career move) AND another language, so that you can understand what's good in java (memory management for example as was written by albert) and what's terrible. And you'll avoid to blindly imitate the bad code you'll see almost everywhere.
agreed. everything does what it is does, sometimes you don't think that's the way it should be but that's what it do.
I really appreciate this response. Thank you very much. 
There's a reason that languages like Java are used to teach CS. If you are given a nice, easy language like Python, it may take longer than it currently would for someone to realise that CS isn't for them. Language quirks are part and parcel of programming; they may as well get used to them quickly.
Because loud opinionated jerks like being loud and opinionated. And there are a large amount of people that simply agree with those that sound like they are smart, and shout loudly, without actually examining their arguments. Java is a perfectly good tool for many things. I think it falls down on desktop GUI programming (and Applets, urgh), but other than that I've found it to be a pretty productive language that allows me to get a lot done pretty quickly. 
Just to add to this, in case the confusion is the 'super' call- remember that calling `super(arg)` is invoking the parent constructor, `ReadOnly(int arg)`, which sets the `val` variable.
Yes. Go for it. There will be few bumps but overall you will enjoy the ride. Learn or pay more attention towards principles or Object Oriented Design. It will help you in your thinking process.
C people have NEVER attempted to move their language into the modern age. They fight any advance tooth and nail. 
Java babysits you too much. Assembly is where the big boys play.
I think you misunderstood what I was saying. I wasn't suggesting that the exception be handled in the method where it occurred but in the calling method. It should not, however, be propagated up the call stack, unhandled, where it has no (or less significant) meaning. As for why the exception is part of the method signature, that is because part of the intent of Java's design is to be self-documenting and is based on design-by-contract. Explicit declaration of exceptions also prevents the caller from having to guess at all of the various things that can go wrong. 
Yup, had a year of Java and it nearly put me off programming for life. The drop out rate from year 1 to year 2 was phenomenal but since then, having had to learn C# and asp.net/xaml and js and basic Python/Rails, it has proved it's worth. I still think back to that year and never want to see a line of Java code for as long as I live though. It was a lot to learn in too little time, but the college seemed to think it was a good way to filter out those who can and those who can't. Unfortunately this was a silly strategy as there were many in the class who weren't on courses where they would continue with coding of any sort. So those people had no grounding and were essentially fucked :(
Oh I know they do. I just mentioned HTML since they are similar (especially XHTML). Good point about figuring out command sin non-XML config files though. Maybe I just find XML ugly. :)
Java on the client side is like using Linux on the desktop. It can be done, but it's not really a good idea. Think about the programs that you love to use. What are they written in? Go with that. ;-)
java.sql.* was a huge reason that java took off in business. There was nothing like it at the time.
In contrast to GMNightmare's "bad programmers" comment, I think a lot of what you're describing happens because Java makes it somewhat hard to follow some really worthwhile programming practices, most notably keeping classes loosely coupled and individual classes highly cohesive. I find that writing testable code sometimes nudges you in this direction, as well - you really want to be able to use mock implementations of your dependencies, since that helps you enforce the relationship between the class you're testing and its dependencies (keeping those classes as loosely coupled as possible). In Java the best way to do that is to create an interface for your dependencies and use dependency injection, so that your unit test can inject its mocks. That can introduce a lot of complexity for performing a relatively simple task. I really think a big part of the problem has to do with the "land of nouns" problem - you can't ever have a dependency on a function, you can only ever depend on other objects. So when you have a dependency, you're forced into the very situation described above. There's no way to just say "this functionality requires a callback function" then have your test pass in a dummy callback function. Instead, your class has to depend on some class that contains a callback method, and if you want to pass in a dummy, you'd better have some way of creating that dummy. That means that the concrete implementation of the dependency can't be the only thing that your class knows how to deal with - you need to introduce an abstraction layer just so you can write your test the way you want to. That's not necessarily "bad programming", it's just compensating for a language that doesn't make it easy enough to implement a good design. There are frameworks like [PowerMock](http://code.google.com/p/powermock/) that aim to resolve some of these issues. But I still think that because of the way that Java works, there's always going to be some tension between writing testable code and writing code that is easy to understand.
Thank you. I tried ccleaner, but it returned the same error message. I will try Revo. I am using a program that must have JRE7, not 6. Edit: Revo Uninstaller worked! Thank you so much!
http://www.jooq.org/
As I said in another reply, these are some of the reasons why people hate Java. They don't seem to exist for you (or maybe they don't bother you) but they do for others. I personally don't feel that the verbosity to expressiveness ratio is a little too high. I work with a few of other languages and for me Java needs all the help it can get, productivity wise, from an IDE (not as bad as VB though). I think that the hard requirement of declaring checked exceptions in the function signature is more trouble than it is worth. I feel that real progress to Java, the language, is held back by the strict adherence to backwards compatibility. The compile-test-code-repeat cycle is an order of magnitude slower than the code-test languages that do not need compilation. I think that null is severely overloaded and _maybe_ that a general purpose language shouldn't have nulls at all. I think Java is virtually useless when I need to write code for a resource constrained environment (ie... in pay as you use environments like heroku or amazon ec2). I could go on. Don't get me wrong I don't hate Java but I do see why other people would. Edit: Bonus: Somethings in Java make little sense. someMethod({1,2,3}); // compile error // You have to do this instead. int[] someArr = {1,2,3}; someMethod(someArr); Integer.valueOf(127) == Integer.valueOf(127) // true Integer.valueOf(128) == Integer.valueOf(128) // false 
Verbosity *isn't bad*. This is important. Verbosity often improves readability, while too much can impede generally it is not the language itself pushing that boundary--it is the programmer. Verbosity shouldn't hinder performance either, because you should be spending far more time designing and thinking over typing. Java only need "all the help it can get", because you've become attached, when programming in Java, to the very useful utility of full featured IDEs. Every language would like to have such IDEs. I guess it would be different if you started Java programming in notepad, like I did. It really, really isn't any different than most languages in this regard. &gt; The compile-test-code-repeat cycle All languages past assembly use a compiler or interpreter. I'm not sure what you are referring to, so do give an example. &gt; declaring check exceptions in the function signature is more trouble than it is worth But why is this? So telling people what outcomes your function has is trouble? You seem to think there are no upsides to it, but can't really give any real reason as to why they are bad. And that's fine, really, you can hold the opinion that you don't like them, but stop attempting to allude to reasons and just give it as an opinion. &gt; I feel that real progress to Java, the language, is held back by the strict adherence to backwards compatibility No quarrels there. &gt; general purpose language shouldn't have nulls at all The concept of null is quite useful... but you don't have to use them if you don't want. And this is continually the problem here, as a programmer, if you don't like a feature of a language *don't use it*. You lose a lot of functionality in this case, because null allows a lot of things and techniques, but if you went to a language without nulls (there aren't many) you'll face the same thing. &gt; I think Java is virtually useless when I need to write code for a resource constrained environment So? Then don't use it there. Part of being a programmer is knowing when to use a language for one task and another. You found a task that Java is not suited for? Don't use it for that then. It's not some issue with the language, all languages have their strengths and their weaknesses. I'm not really trying to imply that you hate Java. It is just that consistently, it seems the issues you bring up are more about you then about the language itself. I think this is typically whenever people speak of "issues" in a language, and all I see is somebody who can't learn to work around them as needed... which is practically what it means to be a programmer.
&gt; Convoluted libraries You don't have to use them. &gt; are the specifics of Java Java is actually well-known for having some of the best and well-documented libraries. So, you're just blowing hot air. &gt; These libraries are not written by "bad programmers" We're not talking about libraries, are you completely off-track on what is being said? Stop introducing BS that has never been there! This is completely irrelevant, an absolute strawman, follow the conversation before you run your mouth! &gt; missed the point of what a readable program Programming isn't all about coding, I see where you have a problem with what was said. &gt; My point is that you cannot blame the whole thing on "bad programmers" I wasn't "blaming" the "whole thing" on bad programmers. Read the first paragraph of what was said, then read my response. &gt; Its the whole mindset of programming in Java that has problems "Whole mindset" being bad programmers, excluding the good ones. &gt; that mindset is propagated from the schools and from the books So what? I'm not talking about that. Just because bad teaching has created bad programmers does not mean that the bad programmers are not bad programmers. &gt; then you would have to call amost all of programmers bad It is pretty well-known that most programmers *are bad*. &gt; And no, not all are bad Leading the question of your own hypothesis you made up is intellectually dishonest. &gt; But what struck me is that this was completely new for them And whose fault is that? Nobody becomes a complete master of anything just by going to school. 4 years in college is nothing, people can barely grasp the basics in that amount of time and can barely program. They are, bad programmers, just like any beginner in anything are bad. They are what they are, and trying to blame everybody else but them is inane. &gt; As for other programming languages, sure those have their own problems too, some even more serious than Java. Java holds hands. It allows more bad programmers to actually get something to work. Plus Java is far more popular and bigger, thus easily having more bad programmers than other languages. There *are bad programmers in every language*
I can't blame anyone for needing time to recover from CMT. Indeed, some people I know are still having therapy to help them overcome this traumatic experience. True web profile implementations are offered by GlassFish, JBoss AS, TomEE, Geronimo and Resin. There's a sixth implementation in the works called JonAS. I think 5 implementations with one more in the pipeline is pretty good. You can absolutely upgrade parts if you want. The parties themselves release updates, eg GlassFish 3.1.0 to 3.1.2 are all Java EE 6, but contain for instance updated implementation versions of Mojarra (JSF). But you can also upgrade yourself. It are just jars afterall. Because of a particular bug in Mojarra 2.1.2 we upgraded it ourselves to Mojarra 2.1.7. This even works most of the times for completely new spec versions as well. For testing we replaced JSF 2.1 with the 2.2 beta release and it worked perfectly. 
I can't, seeing as how I got marks deducted for "readability" the last time I tried that. We're using the conventions in *How to Design Programs*.
For the record, Scheme is my third language, after Java and C#, and we're using HtDP instead of SICP.
It's simply impossible to provide an unified syntax at any more than an extremely superficial level ... that's the point of XML - share what can be shared, leave the rest for particular applications of XML.
Almost all recursive problems can be solved iteratively. Recursion is one of things I learned in school but never use in practice, for fear of blowing up the stack.
Recursion is definitely superior to iteration in many real-world cases, though. Any structure with arbitrary depth (trees, XML, object models) or some level of self-similarity (composite objects, data processing problems) is better solved recursively. Recursion is definitely a technique that should not be ignored, because iterative solutions to recursive problems are generally very ugly and difficult to maintain. 
Uhmm . . . I would answer "Maybe" and "Yes"... There is HUGE demand for Java devs from what I can see. I get headhunters bugging me all of the time. The real hitch is going to be that you will likely have to start on the "ground floor" again. While you are probably an experienced programmer, C++ and Java are hardly similar anymore. The real issue with getting a foot in the door with Java these days is being able to grasp at least a few of the many frameworks that are out there (e.g. PrimeFaces, Struts, Spring, JPA, JMS, EJB, ZK, just to name a few). If you really want to move into learning and using Java, I would recommend getting involved in some of the Open Source Java application projects to help beef up your skills. I know that OpenNMS and XWiki are pretty accepting of developers once they prove they are up to the task.. In addition, that would be a great bullet on your resume for when you look for that dev position.
No. Haven't you been reading /r/programming and /r/learnprogramming? Java *sucks*. *No one* uses it. Python is teh coolz and C++ is the only good real language. Other hip languages like Clojure are also acceptable. But...never Java. Take my word for it. Or, learn it, apply and see what happens. 
ok one more question. I have completed the code for the rest of the methods and none of them are working entirely properly, but they are all doing the same basic thing. for computeNegativeSum it will just return the last negative number that i entered instead of adding the rest of the negative numbers in the array. this is what i have. int negativeSum = 0; if(startIndex == endIndex) //base case { if(numbers[endIndex] &lt; 0) { negativeSum += numbers[endIndex]; } return negativeSum; } else { if(numbers[endIndex] &lt; 0) { negativeSum = negativeSum + numbers[endIndex]; return negativeSum; } return computeNegativeSum(numbers, startIndex, endIndex - 1); } 
Thanks for the tips. I think that this is where I'm going to be concentrating my efforts. I actually really miss programming. Way back in the old days, I used to be quite the whiz at it. 
I want to learn it, but I'm a bit out of the loop, so I don't want to waste my efforts on technology that is on the way out. I spent way too many years becoming a Novell NetWare expert to fall into that trap again. 
An arguably more recursiony way to do is: static int findMin(int[] hayStack, int position, int lowestValue) { if (hayStack.length == position) return lowestValue; if (hayStack[position] &lt; lowestValue) { return findMin(hayStack, position+1, hayStack[position]); } else { return findMin(hayStack, position+1, lowestValue); } } called similar to int lowest = findMin(numbers, 1, numbers[0]); 
this is my method header. public static int computeNegativeSum(int [] numbers, int startIndex, int endIndex)
The negativeSum variable is in your method, and when you recursively execute that method over and over again, it will keep resetting to 0 at "int negativeSum = 0;". Solution is to take int negativeSum = 0; out of the method. Also I don't see how this is recursing. I think the last few lines should be something like: else { if(numbers[endIndex] &lt; 0) { negativeSum = negativeSum + numbers[endIndex]; } } return computeNegativeSum(numbers, startIndex, endIndex-1); 
It's not the language, it's the programmer. I love Python, Java is workable, Groovy made it easier, but still, issues... I've done extensive C/C++ (encryption/driver related), a lot Spring MVC, Hibernate, etc. in Java for enterprise applications, machine learning algorithms in Python, R, Matlab, web development in PHP, Ruby on Rail, a little Perl, and so on... anyway... I have a long list... My point is: You real question should have you tried all these languages, rather than "Haven't you been reading /r/programming and /r/learnprogramming?". Reading others' experiences is not always the truth.
If you are good with Linux and want to learn java enterprise, apply to Red Hat. Especially if you're willing to travel.
People often mock or slander what they don't understand.
Java is most definitely *not* in the way out. Much to the contrary. It's just not the cool new thing of the week. Java EE 6 took a lot of lessons from modern app development, it has convention over configuration and you actually don't write too much code or weird factories anymore. And the infrastructure around the platform is second to none for enterprise apps.
yes - it can create one uberjar (using the default 'jar-with-dependencies' configuration). I avoid that though since it's so slow at build time. But might be useful at release time.
&gt; Note that in the Java case you are adding a lot of code (class declarations and reference alone are at least 3 lines) which has nothing to do with the behavior that you are modeling. In no way does this add any clarity. Let's make this simple: that isn't *verbosity*, that's boilerplate code. They *are* separate terms. But this is again, ridiculous, no, putting a static function inside a class declaration does not actually lower clarity. It's a structure, and believe it or not, if you aren't structuring your python into files by functionality you are destroying clarity. You're talking about a structural overhead, but it is incredibly minimal. I always find it funny, it's always like, "if you want to make one function"... the overhead is eliminated the moment that becomes two, and then three, and the four... And when you're making whole programs, suddenly this boilerplate code is what actually gives it structure. You see, python is actually no good for big applications comparatively. It becomes a mess, a big mess. But this isn't something bad about the language... no, it's just not the strength. Python is good for small short scripts. That's it's strength. And it can get a lot down with a short amount of stuff. That is why most, most not all, all short and quick scripts. &gt; Sure you can write Java code in notepad but you will not be productive. Let me explain this to you: you're wrong. You'll be as productive as *any other language without an IDE*. Do you understand this? Yes, you are *more* productive with a good IDE, but that *is the same for every language*. I used to write games in notepad with Java, you shut the hell up about how I can't be productive. Anybody competent with the language can be competent at writing it in notepad, it might take a little getting used to if you are used to the nice perks of an IDE. Boilerplate... ha, my god it is so hard to write public class Hi { public void ShoveIT() { ... Tadaa! }} I mean for goodness sake! Every time I hear this argument it is absolutely ludicrous! Again... productivity does not come from time spent writing code. Those precious 10 seconds you spent writing that boilerplate code is nothing, because most of the productivity happens *outside* of typing on your keyboard nonstop. If you only sit and just churn out lines of code as fast as you can, you aren't being productive. Productivity is not measured by how fast you can type or spit out lines. &gt; There is a huge difference between a compiler and an interpreter. In general a compilation takes a lot longer than just edit and run in the interpreter (without the compilation step). Actually, there isn't that *huge* of a difference, it's mostly a matter of when. And people like you are often confused... python is compiled by the interpreter at run-time, or just when it is executed. "A lot" is pretty arbitrary. In actuality, there is not that big of a gap. Especially considering that doing a compile step will catch a lot of issues upfront, saving you time tracking them down. Compiling takes moments, of course depending upon size... but here's something you probably don't know... if you had a huge python program, uncompiled, it will take quite a while (relative) to start up as it's compiled at its start. You don't see this a lot, because people often don't write huge programs in Python. Even then, people often don't write huge programs for the Java compiler to take much longer than a few seconds. You make it sound like it's such a big deal, such a huge hassle... well, it isn't. &gt; You'd have to have each function in the call stack declare the exception in its method signature. So in essence you still have error handling code everywhere. Does every layer need that information? No, you don't have error handling code everywhere. Putting the exception in the method signature is not error handling code. In fact, it specifically saying that the method will not handle that exception and if you call it you will. Furthermore, this is just ridiculous. Is it seriously so hard for you to note which exceptions will happen for a particular method? I mean hell, it's one word *throws* followed by a comma separated list of what exceptions might be thrown! Now, I'm not the biggest fan of checked exceptions myself all the time. I like them in some cases, and I liked unchecked exceptions in others... but you're arguments against them just not there. &gt; Null does not mean anything. "0 does not mean anything." Look, I don't mean to rain on your parade for every thing, but the concept of 0 is harolded as one of the greatest mathematical breakthroughs of all time. It is quite important in many languages as well. Null is the absence of a value. &gt; But you have to use the classes that come with the JVM Err, no, you don't. You can get things down without touching them. Furthermore, not all the classes that come with the JVM use nulls. &gt; Name one piece of functionality that you lose without nulls Simple. Lazy instantiation. Every variable that is not yet initialized is null. You'd lose all ability to declare without initializing. You can do a lot with that... I tend to make everything immutable anyways so it doesn't affect me as much in the first place. I tend to avoid nulls as well... it's actually not that hard, even though you seem to think it's such an impossible task. &gt; Haskell has no nulls I didn't say it didn't. &gt; Everything is guaranteed to have a value. Which is nice, I'm not saying it isn't. You answered your own above question in a way, just had to actually apply it. &gt; No need for any of that "if (obj != null)" nonsense There is very little need for it in the first place. Most of the time I see that, apart from a few specific situations, it is a mistake every time coming from the lack of understanding how everything pieces together. For example, what do people often do when they do this check? Throw an exception. And then they use obj. You should be able to tell why that is pointless. &gt; this is an unnecessary constraint I'm pretty sure there are and were good reasons for said constraint. And it likely has and still is talking a lot of work getting rid of it. &gt; Is it my fault that I need to pass an object when all I am interested in is an action? Oh no, in this regard it is indeed a shortcoming of Java. And I agree with you on that. Lambdas are sweet awesome sauce. &gt; What about that I have to wrap everything in a class even when it does not make sense? You are thinking "class" in too limited of a term. There is absolutely nothing that couldn't make sense in a class. But I'll give you this if you can come up with something that wouldn't. &gt; What about when some things just don't make sense syntactically This would be a good complaint. You have brought a few of them up, honestly, we just have to dig to the technical ones over opinionated ones really. &gt; (ie to pass an array literal to a function I need to store it in a variable first) You don't have to store it, but you do have to declare it as one first. A pain, but I'm not quite sure if that doesn't make sense syntactically--or maybe I'm just misunderstanding.
First question would be why use recursion, a simple for loop would be a much cleaner implementation. Otherwise it seems to be as Taylee said, plus by the looks of it your endIndex value shrinks by 1 for every call to computeNegativeSum. Best bet is to step through your code using a debugger to figure out what's not behaving in the way you want it to.
If you wanted to replace 3 one dimensional arrays, you wouldn't need a 3 dimensional array, just a 2 dimensional array that has 3 items. Each item would be one of your original arrays. Java would still be tracking your 3 original arrays and also tracking the array containing them versus tracking 3 separate instance variables if you declared them individually. Either way you're not going to see any measurable difference between the two options so use what's going to be easier for you to code and easier to understand when you come back to it later.
You are calling the implemented method - this is how abstract classes work
I'm a little new to java, but isn't it just polymorphism? TestSub a = new TestSubSub(); You tell the a to be a TestSubSub right there
Maybe you should have thought a step further: What would be the point of abstract methods if you couldn't call them?
So, I pass in a reference to TestSub (**TestSub a = ...**) to fnt() - a method which accepts TestSuper as a parameter - and the version of fn() that actually gets called is from TestSubSub, which is what the TestSub reference in main() ultimately refers to? Polymorphism is seriously whacky..
I thought you could call them only by using a reference to a subclass which actually implements the method. What confused me was that I when I call a.fn() from fnt(), *a* is an object of abstract class TestSuper.
One of the big points of them is being able to group subclasses into the top one, so you can have multiple different classes that extend TestSub, then have an array of TestSub, each item in the array being of the different subclass. When you call a function that TestSub has (which the subclasses override) then it'll run their individual functions that override the TestSub one.
I have no idea if the above makes sense right now, I'm half drunk.
Yes, that is true. You *are* using a reference to a subclass which actually implements the method. `a` is *not an object*. It is a *reference* of type `TestSub` *to an object* of type `TestSubSub`. The variables you have in your source are never objects. They are references to objects, and separate from them.
That method fnt() knows that its parameter is abstract, and so must be an instance of a subclass of TestSuper rather than of TestSuper itself. Therefore, the method decides at runtime which fn() to call based on which type of TestSuper is passed to it.
Yeah, uh.. thanks for the headache. =P
One more relevant detail of polymorphism is that you can write executable code in the methods of an abstract class, you just can't execute it unless you subclass the abstract class and instantiate the subclass. That's one of the best reasons to write an abstract class in the first place.
Not sure if you're being flippant or not. I do not prefer Scala - I prefer Groovy (and more specifically, the Grails framework).
You can also do neat things like this: https://gist.github.com/2263938 Generics are also nifty in abstract classes. But yeah, the entire point of abstract classes is to model a reusable resource. So for instance, JDBC, at a very basic level, is an abstract resource for being able to access a database. A developer will write code that implements JDBC abstract or interface classes so other developers can transparently call a databases without having to worry about implementation specific code.