The one place I do this is when parsing dates that I know can be bad and don't care if they are. There is literally no reason to handle the exception. I do put comments in though. 
Programming is a means to an end. It's a sunk cost that you go through to create an end product that you sell to customers. If there's a competitive edge to hiring highly skilled people who can code "closer to the hardware" and create a better product for it, there will be a reason to hire skilled programmers. 
http://knowyourmeme.com/memes/malicious-advice-mallard
http://knowyourmeme.com/memes/malicious-advice-mallard
In those cases I like to make it very obvious that I did it on purpose by renaming the variable. `catch (ParseException ignored) {}` or `catch (ParseException expected) {}`
Why did you use JSP if you also use Angular?
Provocative, I like it, but so far it seems beer is winning ... people are so simple
he he -- we could ruin workplaces across the city ... the power!
I saw one like these in last years conference ... maybe we could ask the brains on our company to help come up with riddles to engage the audience 
No mention of OAuth2? 
&gt;One or two of these might even be serious: &gt; The 2015 Linux Kernel Developers Pinup Calendar http://nogoblinstore.com/collections/frontpage/products/men-of-game-development-2015-calendar I think we found a winner.... 
In such situations, do something like this: try { return s.getBytes("UTF8"); } catch( UnsupportedEncodingException encodingEx) { throw new RuntimeException( "Program logic exception: hardcoded charset name misspelled?", encodingEx ); }
It's a bit long in the tooth, maybe, but then again [some classics](http://www.amazon.com/The-Zombie-Survival-Guide-Protection/dp/1400049628) never goes out of fashion.
What do you mean "expected". It's out and is having the best adoption of any release. Your note should read "If you can't use Java 8 then Guava is a good stopgap"
General advice: You should start learning to use java tools. For example problems 1, 4 and 7 could be easily fixed by using maven (or gradle) 
I have this at the top of every swing app I create: try { UIManager.setLookAndFeel( UIManager.getSystemLookAndFeelClassName()); } catch(Exception ex) { // Can't claim I didn't try } Because there's nothing I really care about; if the look and feel setter succeeds, awesome. If not... there's still going to be something there. And if not, I have bigger concerns.
Maybe you (also) want to post this series in /r/learnjava. Guess that it will be better received there. /r/Java is more about the language and the ecosystem than about actual programming.
Wire length matters too, and practicality must be taken into consideration. Theoretically, you could send a packet through to an adjacent machine and the measurement wouldn't be useful. Do you mean a practical measurement? You could theorize about GC and cpu time and IPS and all that, but what will matter is the proximity of the clients
I don't think you are missing something. I think you are just unfamiliar with the tools used with Java. All of the things you have mentioned, are things that I have had to relearn, when moving from language to language because each language has a completely different tool set and way of doing these things. Personally, I did find Eclipse frustrating and have switched away from it but I know you are stuck with it so let's see what we can do. 1) It doesn't sound like you have got Eclipse and Maven integration setup. Which version of Eclipse Kepler are you using? If you are using the standard build, then you need to install the m2e-wtp plugin. If you are using the EE build, then it should have this already. Do the rest of your coworkers also use Maven? 2) The way I do this is by using a Maven plugin. I can then run this through my IDE, or on the command line. Try adding this to your pom.xml: &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt; &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; Then you can call mvn tomcat7:run on the command line or as a run configuration in Eclipse. Here is a video I found to demonstrate: https://www.youtube.com/watch?v=o-Y15VPw5KA You should then be able to go to localhost:8080/${artifactId} where ${artifactId} is whatever the artifact ID of your pom.xml is. 3) This is the kind of thing that made me switch away from Eclipse. Sorry, I can't be of help here! 4) I can just add multiple projects into Eclipse and because each of them has its own pom.xml, each will build a separate jar. If you want to be able to reuse pieces of code as a library then you need to install them with mvn install, or if you have a company package manager like Nexus, with mvn deploy. Maven multi-module projects may also be useful depending on exactly what you are trying to do. 5) Can you give an example? 6) I hate reflection in Java and find it to be terrible compared with every other language I have used. You might want to look at using the Reflections library which makes it somewhat better. It at least handles the basics: https://code.google.com/p/reflections/ 7) Deploying to a web server is completely dependent on what infrastructure your company uses. Are there other devs writing Java web apps where you work? I presume there must be if your company has a policy on which version of Eclipse you must use! If so, ask them how they do this. If you are writing web apps then you are likely to want to be using wars rather than jars. You can set Maven to produce a war by setting &lt;packaging&gt;war&lt;/packaging&gt;. The absolute simplest way to "deploy" a Java web app is to create a self executing war, with the Tomcat plugin, then just run it with Java and it will come up on the configured port. I would normally run this behind an Apache reverse proxy.
I don't want to be mean, but this post is very confusing. So you've gone to work for a company which ***mandates*** that you use an outdated version of an outdated IDE (sorry, Eclipse fans!). The fact that they have such a mandate suggests that they have other Java programmers there. So why not just poke you head over the cubicle wall, and ask the guy sitting next you how to use the tools? Most of the questions you're asking have nothing to do with Java the programming language, but rather with IDE and build script tooling. 1. **Can't build a JAR file:** Question #7 suggests that your company uses Maven (a blend of "make" and "NuGet"), yet in Question #1 you're asking how to setup a new Eclipse project without Maven. Well, you probably wouldn't. Just get the guy next door to show you Maven. However, if you ***are*** playing with a non-Maven Eclipse project just for learning purposes, then you can highlight the project and click "File-&gt;Export-&gt;JAR file". When I type "eclipse build to jar" into a Google search, this is literally the [second link on the results page](http://help.eclipse.org/luna/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Ftasks%2Ftasks-33.htm). 1. **You can't run a web app in Eclipse:** Well, what kind of web app? This isn't the .NET world, where ASP.NET is the single de facto choice. If your company uses Spring, then modern versions bundle an embedded app server into the JAR file. You'd probably test it through the Spring Boot plugin for Maven. If your company uses JEE (more likely, given how conservative the place sounds)... then you would install the Eclipse plugin for your company's preferred app server (e.g. Tomcat), right-click the project in Eclipse and select "Run on Server". Again, when I typed "run web application in eclipse" into a Google search, this [YouTube walkthrough was in the top 5 search results] (https://www.youtube.com/watch?v=Av6zh817QEc). 1. **Eclipse "breaks" when you change its default colors:** I have literally no idea what you're talking about, or what you might be doing. However, back when I used Eclipse before switching to IntelliJ, I used the "Eclipse Color Themes" plugin with its "zenburn" theme... and never had any problems whatsoever. Again, when I type "eclipse themes" into a Google search, [this plugin is the very first search result](http://eclipsecolorthemes.org/). 1. **You don't know how to setup sub-projects within Eclipse:** Well, with a plain Eclipse project, you don't. But that's one of the many reasons why everyone switched 10 years ago to using Maven or Gradle for their project structure and build system. Again, since you apparently work in a Maven shop you should be asking the guy next to you, or looking at your company's own source control repo... but when I Google search "maven subprojects", [this is the second search result](https://maven.apache.org/plugins/maven-eclipse-plugin/reactor.html). 1. **You don't like Java's implementation of generics:** Yes, I understand that C#'s generic metadata is available at runtime. Java's implementation is merely a compile-time check, and that metadata is not available at runtime. I'm sure that there are some design patterns that are facilitated by having this information at runtime. However, I'm highly skeptical of this "killing your productivity", and I have no idea what you're talking about in terms of "trying to use boxed objects for everything" (autoboxing in Java refers to conversion between primitive types and object wrapper types). At this point, I'm highly skeptical of this entire post. But if you are being honest, then don't try to apply idioms from one language to another where they simply aren't applicable. 1. **Reflection:** You don't know the difference between an Eclipse project and a Maven project, and you don't know how to run a "Hello World" web app in Tomcat. You don't even know that Java groups classes into "packages" rather than C#'s "namespaces". But you're trying to write your own plugin system using advanced reflection? http://2.bp.blogspot.com/-1f4zjgMGHBY/UdNw9z7HqjI/AAAAAAAAQhc/M6_GyQQ9o7s/s320/anchormanlol.gif Stop. Everything about this post is so bogus. However, just for giggles... when I type "reflection get all classes in package" into a Google search, the very first search result is a StackOverflow question which leads [to an open source library that does this](https://github.com/ronmamo/reflections). 1. **You find that when learning a new programming language, learning its surrounding ecosystem and tooling is as much of a challenge as learning the new language syntax itself:** Well, yeah. This is true of leaning ***any*** new language. Coming from the .NET world you will have it even worse, because most every other language has an ecosystem where there are multiple ways to do everything instead of one monolithic standard.
I must say, it's pretty neat that HotSpot's GC is so quick. While 1ms may be a show-stopper for your application, that is *awesome* GC performance for most.
&gt; A multithreaded server is not the way to go for latency. For ultra-low-latency network applications it is mandatory to use a single-threaded, asynchronous, non-blocking network library. How would that handle hundreds or thousands of connections with continuous traffic while keeping latency low? I mean, there will be a break even point at which several threads will give lower latency than forcing one more connection to be handled by a single thread.
That's a great question. For thousands of connections you might have to use a demultiplexer and a multiplexer to distribute the load across a fixed set of working threads. However, the critical reactor thread, the one handling the connections, can still be kept at one without compromising high-availability. Of course, you can add an extra single-threaded server to load balance your infra-structure, but you are still adhering to the single-threaded design principle. One thing is to make your server multithreaded. Another thing is to add multiple single-threaded servers in a load balance configuration. This is explained in detail here: [How to handle 10k socket connections on a single thread in Java](http://www.coralblocks.com/index.php/2015/01/architecture-case-study-1-coralreactor-coralqueue/) 
&gt; there is no simple relationship between heap size and GC overhead or pause time I totally agree. The best solution for the GC in my opinion is not to produce any garbage. Then you can be absolutely sure you won't have stop-the-world pauses.
Not that the numbers aren't impressive, but it is worth noting... &gt; The machine used for the benchmarks below was an Intel i7 quad-core (4 x 3.50GHz) Ubuntu box *overclocked to 4.50Ghz*.
The machine is good but it was bought in 2012. It uses an i7-3770K Intel processor. There are better chips these days like [Intel's Devil's Canyon i7-4790K](http://www.engadget.com/2014/06/03/intel-devils-canyon-haswell-chip-details/) which goes to 4.4GHz *without overclocking*. 
It's been a while since I have had to tackle this problem in Java, but the biggest issue was always garbage collection. There are a number of approaches to addressing it, but generally it's some combination of minimizing allocations and object pooling. You also want to avoid inter-thread communication as much as possible. When it's absolutely necessary, you may want to look at [disruptor](http://lmax-exchange.github.io/disruptor/). As to avoiding actual network latency, TCP offload engines are probably one of the best options (SolarFlare, etc...). If latency is a higher priority than throughput, you also want to disable Nagle batching on the sockets (TCP_NODELAY). Those don't address the latency added by CPU contention, context switches, memory latency, CPU cache issues, traversing the JVM, Java code, etc... though. I'm not sure what the best approach currently is (JNI, JNA, NIO and `DirectByteBuffer`, etc...). It sounds like you may want to look at the NIO API if you're not already.
Hardware does matter when latency is really important.
It's not weird, it's a mandatory requirement that the `main` method is inside a class. Whether it creates an instance of itself or not doesn't really matter sine main is static and thus belongs to the class and not to an instance.
That totally makes sense! I just thought about putting it in a class 'Application' or the like, so that you kind of seperate the logic of the execution of your program from what your program is acutally doing. Just a side thought though, I might be completely wrong and the method used here in the video is considered absolutely best practice.
Edited my second post.
Wire lengths do matter, and they're a major consideration in IC design. It might not matter as much as people think though. If you assume a constant speed of light, it's roughly a nanosecond per foot.
I am surprised, for an OP that has at least 17 years of experience in "C/C++/Perl/Python/C#/.Net/etc", I'd imagine he's competent enough to research what tools do, which ones he need, and in general how projects are setup for various different kinds of Java projects, before turning a bad decision of downloading Eclipse and randomly pressing buttons into a rant on the internet.
Absolutely nothing in this adds up. You're apparently the only Java developer in the company, and yet *someone* made the decision that you must use the previous generation of Eclipse. Apparently your company ships some kind of product or service tied to an Eclipse plugin or fork (who wrote it?)... yet the questions you're asking involve how to write a web app. A hello world web app with a convoluted Reflection-based plugin system. Last but not least, you're telling people that your company blocks access to Google. You're telling people this... on Reddit. Uhh, umm, err... I dunno, it looks to me like you have enough Internet access to get by somehow. Look, I don't know if you just took a job that you're completely unqualified for, at the worst company on earth, or if some of this is make-believe. Either way, if any developer finds him or herself faced with maintaining an application in a completely alien tech stack, start by researching the stack: 1. Is the existing codebase built using Spring, JEE, some older or niche framework (e.g. Struts, Wicket, etc), or something completely home-grown? It's probably one of the first two... so start by reading either the Spring Framework manual (http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle) or the JEE documentation (http://www.oracle.com/technetwork/java/javaee/documentation/index.html) 1. If you're writing a web application, and not using an embedded server (e.g. modern Spring Boot apps), then your company is already deploying to SOME kind of application server. Tomcat, Jetty, Weblogic, Glassfish, something. Figure out which one, start reading its documentation, and install the plugin for Eclipse. 1. If you ***must*** use Eclipse Kepler, then read the documentation for Eclipse Kepler (http://help.eclipse.org/kepler/index.jsp). If you don't have Internet access to read any of this stuff, do basic Google searching, etc... then quit your horrible job. Or use whatever technique you're using to access Reddit. Whatever. 
For low latency you can never have a context switch happening on a critical thread. A context switch is when a thread preempts (i.e. kicks out) another thread to take over the cpu core. So the first advantage of being single-threaded is that you can pin the thread to an isolated / dedicated cpu core, avoiding context switches. Cpu cores are also a very scarce resource and the less threads you need the better. The second advantage is that multithreaded code is expensive in terms of performance, simplicity and risk due to thread synchronization, lock contention, race-conditions, deadlocks, visibility and starvation, all common pitfalls of multithreaded programming. For these reasons we recommend the single-threaded design principle whenever possible. When there is an unescapable need for inter-thread communication we recommend using [CoralQueue](http://www.coralblocks.com/index.php/category/coralqueue/) which is a high-performance, garbage-free and lock-free queue. It also makes the code much simpler because you can forgo all multithreading synchronization tricks and use a queue to exchange simple messages between threads. For more details about inter-thread communication without compromising the single-threaded design principle you can refer to this article: [Inter-thread communication within CoralReactor](http://www.coralblocks.com/index.php/2015/04/inter-thread-communication-within-coralreactor-reactor-callbacks/)
What sort of stuff do you want from your build system? Are you using maven? I'm not sure about .obj files but on linux they are .o files. Its just that .class files are runnable. A jar is nothing more than a zip of .class files (and perhaps some metadata). Yeah, not sure why companies hate upgrading. Anyways, like I said before there are multiple web frameworks so check which one you're using.
Ah, I can't make bad assumptions and rant like that but you can, okay gotcha. Your latest post here contradicts your opening thread. You now say you are using custom in house tools all across your development environment which are inferior to what you get from some of the best .NET development environments. That... makes sense...? Still agree with parent comment here, your words are confusing, makes it seem like you are just venting and ranting.
I spent more than a month, way more than a month. The best way to learn is to get your hands dirty and write some code. You'll learn a lot, but you'll have to realize that it will take a lot of time to understand the basics, put them to practice, encounter more advanced problems to solve during your practice, and then figuring out a solution to said advanced problems. Then, factor in that you'll probably get sidetracked with other non-Java EE libraries, API's, and solutions, for example an LDAP API, FTP API, or potentially some Continuous Integration tool. Then, there's always life happening and presenting challenges when least expected. Cumulatively, I've been learning as I've been going with Java EE 6+ for the past 5 years. I feel like I know a lot, but there's always more to learn. The same could be said for other stacks like the Spring framework.
because this is r/java, not r/programming?
writing logs is not overthinking. Logs &gt; SQL queries. SQL (RDBMSs) store data as logs. 
If you really know languages outside of .net then you shouldn't be surprised that the tooling doesn't do everything for you. .net languages are the only languages I'm aware pg that are like that. It's the benefit of having one single company we with huge amounts of resources controlling every aspect of the language and all of its tooling. Frankly, I think you're going about it the wrong way. You want to write java like its c#. That doesn't make any sense. They aren't isomorphic. No two significant languages are. You need to learn java. Not merely translate to it.
I took a course at my university. Here is the course webpage for [2014](http://www.it.uu.se/edu/course/homepage/pvarkjava/vt14/) and [2015](https://studentportalen.uu.se/portal/portal/uusp/student/filearea?uusp.portalpage=true&amp;entityId=120374&amp;toolAttachmentId=308129&amp;toolMode=studentUse&amp;mode=filearea308129). The spring 2015 one is currently going so more lecture slides will show up.
Just wanted to let you know that we spoke with relevant lawyers and there is no way anyone might think the injected code might be copyrightable. The simplest reason is that for a work to be copyrighted it needs to be fixed. If it is generated -- it is not fixed. For the same reason, a synthesizer maker holds no copyright in the music you produce with it. But we don't need to go so far: every compiler generates much more code, and therefore presumably shares the creation of the binary with the source writer, yet the makers of the compilers hold no copyright over the generated binary, neither do they proclaim they don't. Why? Because the generated code is not fixed, and they didn't create it. The compiler did but the compiler can own no copyright because it isn't a person. As no compiler explicitly makes this obvious guarantee (although runtime libraries do), doing so in Quasar will only cause confusion. If you're worried about this, you should be much more worried about code generated by gcc and javac -- both are GNU licensed -- as their code generation is much more pervasive than Quasar's. Use Quasar -- or don't -- but if you don't for *this* reason, you should know you have bigger things to worry about, as not only the bytecodes of your Java programs are generated by a GNU-licensed compiler, so too are the machine instructions run by HotSpot are generated by a GNU-licensed JIT, so 100% of your code generation is powered by GNU-licensed code. 
Be glad you don't have to learn J2EE. Now, *that* was difficult. The new Java EE is a walk in the part in comparison :)
&gt; The best solution for the GC in my opinion is not to produce any garbage. While that may be desirable as a goal it is unrealistic in a language like Java. If you try this in Java yet still need to store temporary state you'll end with large *byte[]* (or other data structures which you can use without *new*) which you encode your data in. Then you can as well use a different programming language altogether.
Whoops. Edited. Thank you!
There are techniques to not create garbage.
apple's swift will definitely not be the most used language and apple will not overtake the IT field. C# ecosystem isn't the best, but I can see it improving following the open sourcing of .net. 
Don't feel bad at all. It took me a matter of ***years*** to really feel comfortable with the handful of technologies you just listed. Of course, I've spent more time working in Spring shops than JEE shops, and learning really depends on getting hands-on experience. Reading books is a great start, but to really internalize the information you have to write code. Doesn't matter if it's job related work, or some "chat room" or "message board" example app you write in your personal time. You have to code in order to put together the pieces that the books leave out, and make the knowledge all snap into place.
Do you have no argument except saying it's a shitty language ? Because you can say that for everything and you won't convince people. When you compare the memory taken by programs in C#, C# is far better. The language updates are also frequent (once a year I would say) and the support community is big. And finally Microsoft put the .net framework open source on github, I won't be surprised to see more C# on portable system like arduino or mobiles
Could you please elevorate how all this is true?
Even I can't come with ones like this.
YouTube. Channels like Derek Banas and thenewboston have a bunch of tutorials.
As said above: using Java and avoiding garbage altogether can be done, but is a strong indication that you are probably using the wrong tool for the job.
I use intellij and didn't know that existed. 
Because the team knows Java.
interesting answer! and +1 for correct user name 
I have done some brief work with it. It definitely has some nice parts to it, but considering it was only the last java update that brought dialog support to it — I question the actual commitment to it Oracle has.
Misleading title. I was hoping for a list of the pros and cons of becoming a foster parent to an orphaned gherkin. 
I don't really know anybody who uses javafx for cross platform app building, but it looks like it's a decent solution for cross-platform app development. It looks like it took steps forward this year to make ios/android development easier. The sample applications I saw on youtube look not bad. If you want to do games and such, I'd point in the direction of LibGDX
I'm not completely familiar with it, but I mainly worry about using it in Android. If it really us just css/html, wouldn't Cordova be better since it uses the Chrome-backed WebView? If Java FX uses its own web renderer, you'll miss out on the continual updates and optimizations of the native Android one.
For context: I don't develop mobile applications professionally. I only dabble around. I professionally develop software though. Right *now*, I don't think JavaFX is a good bet. It looked promising in the very beginning, but it never really got anywhere. Before JavaFX1 was even remotely usable, JavaFX2 came. It never really caught on. I stopped following it. As someone else mentioned, it's questionable if it's high on Oracles list of priorities. There *are* frameworks to develop apps for multiple platforms in one go (with one source base). But they all suck in some way. They need to use the "lowest common denominator" of all the devices to make your app work. So they can't make use of all the platform specific widgets. Depending on the situation, the apps might also lack that "native" feel. That said, those libraries *are* useful for quick prototyping, to see if your app catches on. But then again, if they don't have the native feel, and are bad in performance, they might not catch on for that reason. There is unfortunately no "magic bullet". If you only develop for yourself, or have a choice in the matter, I would go for Android development. You code in plain Java, the development environment is very easy to set up, and it runs on all platforms.
&gt; I question the actual commitment to it Oracle has. According to Oracle, Swing is going to be phased out and JavaFX (currently version 8) is supposed to become the standard GUI library.
I like it quite a bit , it is either FX or Swing. Does seem to change how it looks depending on the machine. I some VM versions seems not to be throwing some exceptions. ( the ones about working with UI outside FX threads ) A bit of a pain to use with build tools , because you can not simply import FX into an average project. Scene builder feels a bit derpy and has some differences with how elements behave. Edit : FX uses its own set of collections , so linking FX with non JPA ORM is problematic , JPA ORM you have to uses setters getters and give them custom logic
Is the stack trace not filled in when the exception class is instantiated?
I have no interest in games - I'd think the learning curve is a little steep. I mainly wanted to go in to web development and not sure which way is the best way to go with Java in that regard. I just happened to stumble upon JavaFX and wouldn't mind keeping with it on the side if it wasn't a complete dead-end and had some future.
It's a breath of fresh air. I used it for two projects, and I don't ever wanna see Swing again. I followed the Oracle tutorials to get it to work, and I really like it. It lets you cleanly separate your GUI logic from your actual layout, and the scene builder works very well for me. FXML is great, although the CSS is a bit weird. Every property is prefixed with "-fx-" and the naming isn't all that consistent (-fx-background-color and -fx-text-fill for instance). It's also much more powerful than Swing (although I gotta say I haven't worked too much with Swing). You can very easily define very nice effects and theme your application the way you want it, and it works very nicely with Java 8's lambda expressions. However, it lacks what Swing calls a "Native" Look and Feel. I'm not sure how much of your experience can be directly applied here. The CSS syntax is the same, but the properties are different compared to HTML. VB6, is that a .NET language? If so you might feel FXML looks like XAML, although I don't know as I've never developed in a .NET language. About Oracles commitment - I don't know. I think they definitely noticed that they needed a new GUI framework, but it's a bit weird right now. The JavaFX library is under a different licence than the Java Standard Library. You see some very nice things that aren't really that GUI related like observable properties and observable collections, but they're still in the JavaFx package which I suspect is because of licencing reasons. However, and this is purely speculation on my side, I don't think JavaFx is going away anytime soon. If I need to develop another graphical application I'll happily use JavaFx again.
Hey, this looks like an interesting art-**BIG ANNOYING POPUP THAT TAKES UP THE WHOLE SCREEN**
That commitment requires action. Presently JavaFX cannot replace Swing.
Maybe I should say.. some of Java's syntax is more like JS than Ruby, PHP, or Python - it wasn't like learning an entire new language with every sentence read - some of it seemed familiar. Loops for the most part were about the same syntax.
Thanks! I'm not really worried about my experience being applied as I'm alright with learning a new language. Just wanted to make sure it wasn't a total waste. VB6 was when I was 15 or so. 
It mainly interested me because of the cross platform capabilities. iOS and android.. Not just android. 
yeah but cross platform apps are always terrible. you might as well be using phone gap at that point. sorry you just can't replace the native experience
​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ I never said swing didn't have its problems.
I've only played with JavaFX8 in a hobby project, but I'm not impressed by it. Performance is terrible, quite often the app screen stays black for a few seconds after coming back from background. The layout managers are clunky. The position of everything is based on doubles, due to rounding errors you might end up with a fractional value somewhere which causes blurryness. Interoperability with other graphics packages is not easy, for example you can't display a java.awt.BufferedImage with JavaFX, you have to use a of Swing wrapper around a JLabel. The interface is too high level and makes some things impossible, for example when you add an item to a list it auto scrolls the list, and there is no way to turn off this behavior. The interface is not stable either, stuff breaks from one version to the other. I really question the quality of the engineering of JavaFX, it feels much inferior to what we're used to in the standard Java library code. However there is potential, the reactive style of architecture is certainly an improvement. Oracle need to step up their game to make it a really good, usable product.
Okay thanks. Did not see your other post. I imagine I should be able to feel safe with 4 cores with two threads if I can feel safe with 4 cores and one thread though.
VB6 predates .NET. Its heyday was the late 90's. Unfortunately, some enterprises still use it...
fwiw josh bloch throws assertionerror throughout effective java. he just says not to subclass error, not that you shouldn't use it. and his only real reason for not subclassing error is that by convention errors are for use by the jvm. so why can you use it and not subclass it? i'm not sure. 
A `catch (RuntimeException e)` is a bit specific imho - saying 'well if something goes wrong that I'm specifically not able to check', as opposed to 'look for something that goes wrong' that catching `Throwable` will do. Catching Throwable also lets you grab other 'ohmygodwhathappened' issues like running out of memory, stack overflow, etc. Don't catch `RuntimeException` unless you actually have an interest in RuntimeException. Also, expressly throwing an `AssertionError` might not be necessary to cause this issue, but just failing an `assert` will cause that. 
It makes no sense to inject a fixed (i.e. immutable) code rather than just call a method, as the JIT inlines everything anyway. The *only* code you need to inject is code that is somehow dependent on your program. Even if it did inject large pieces of code (which there's never reason to on the JVM), that does not make the resulting program a derivative as you've not derived it -- it was injected for you. And again -- whatever it is that bytecode transformers do -- it is *always* less than what compilers do, and no one would think compilers somehow give their creators copyright over the generated code, therefore they do not promise they don't. This, BTW, does not apply only to open-source compilers. Microsoft makes no such promise on the output on MSVC. &gt; and that's why your licensing, without an explicit guarantee, is too risky No one seems to share your opinion, and no one ever provides that guarantee. If you think it's risky, it's still less risky than using a compiler. A work created by a machine does not grant the maker of that machine any copyright over it. There is no sense in providing a promise that we don't own something that no one other than you would ever think we own. Car rental companies do not issue guarantees that renting their car does not grant them ownership over stuff you transport in the car. Since no one thinks it does, providing this guarantee would only confuse people and possibly make them worried about other things that are not promised. To summarize, we've been advised that under no common interpretation of copyright law does transforming and/or injecting bytecode grant us any sort of copyright over the resulting binary, and that we should not be the first to provide a guarantee no one else does and may confuse rather than make clear.
Yes, when the object is instantiated -- unless you override `fillInStackTrace()` -- but not when the exception is *thrown*. So if you reuse the same exception object and/or override `fillInStackTrace()`, throwing and catching an exception is practically free.
&gt; hence the gcc exemption i linked earlier that you've conveniently ignored I have not ignored it. The sentence you quoted -- like the entire document -- applies to *runtime library* header files. In fact, our lawyers pointed out the GCC exemption precisely because it exists *solely* for the runtime libraries and *not* the compiler, even though the compiler -- even without the runtime -- is likely to inject some small chunks of fixed code. No such exemption ever exists for a compiler or anything that generates code. &gt; "other people" aren't using viral licenses - it's a big difference That makes no difference. For example, MSVC is under a proprietary license. If your unique interpretation holds, you have no permission at all to distribute the compiled program under *any* license. Even the Apache license doesn't help you because it terminates at patent litigation; it also requires inclusion of the license with the distributed program -- both of these would apply to the binary created by an Apache-licensed compiler (the latter also applies to BSD, hence to clang).
You can circumvent all asserts by using a simple compiler switch, in that case it won't check any of them, nor throw an AssertionError. Asserts in your code are thus bad practice. Never swallow checked exceptions whole, always do at least some logging. If you are going to rethrow, rethrow something that makes sense. Throwing RuntimeExceptions everywhere isn't really helpful, it just creates new problems. An example: Let's say you have a RestClient class to perform simple REST operations against a URI. `new URI("foobar")` throws a checked exception, you can catch it and throw your own RestException instead. You can also do URI.create("foobar") which throws an unchecked exception, you can use that if you know the URI is formatted properly.
Yeah, that was a great description of how that works. Layed it out, wrote it down, easy to follow and didn't wander into "just like listening to myself type cool sounding words" a lot of tutorials seem to do...
A shame indeed!
Portable micro USB chargers. Phones get a lot more use than usual in conferences (pictures, tweeting, etc), the battery tends to die fast.
Uh, no. `VirtualMachineError` is for use by the JVM. `Error` itself just means "shit is FUBAR over here, come fix it!"
I just `throw new Error` for that. It's not really an assertion failure, but it is something that Should Not Happen, so `Error` seems like the correct type.
Weka is a mature and well-known library. Instead of trying to make comparison, I would rather prefer to list some of the features of Datumbox framework: large support of different algorithms, several storage engines and ability to handle at minimum Large Data, focus on NLP applications. :)
True, but most of the earlier API designs come from Java. It does have *something* to do with Java at syntax level.
I suppose I could've worded my question better. What I wanted to know was whether it supplies any functionality not currently available in other libraries, like Weka. 
I don't know much about maven, but I'm happy to take pull requests that add this functionality. Can you find an example of another plugin that ships with dual bindings? If you create a GitHub issue with an example, then maybe we can make it easy for someone with Maven expertise to get this done.
Thanks for sharing this. A good read
Really great to see payara fill the gap oracle left for glassfish support 
&gt;I was in the C# section of reddit You must be new to the Java section, as well; otherwise you'd know the only thing we circlejerk here on /r/java is JetBrains.
As per documentation `Error` is intended for situations that a normal application *would not* try to catch whereas `Exception` is for those situations an application *would* try to catch. Generally speaking most programmers are not working on projects in which they should be *creating* conditions that *should not* be caught. So in that context it's almost always inappropriate to subclass `Error`. `AssertionError` on the other hand is for failed assertions. Naturally if you have a situation that *should never happen* it's logical to presume that a normal application *shouldn't catch it*. `AssertionError` is appropriate for this scenario. A far more common circumstance is having a checked exception that should be caught, just not caught *here*. You want the exception to propagate but you don't want to introduce checked exceptions to your API. `RuntimeException` is fine, it's not even that verbose. There's little reason to create a specific class unless you anticipate needing or wanting to handle it more specifically or otherwise differently (e.g. catch clauses, toString() implementation).
Financial engineer. Makes sense.
&gt;As for replacing the Map&lt;String, FormatExtension&gt;, I'm guessing this means that FormatExtension objects should just create the tasks themselves rather than register themselves with the map? And then it would be the job of SpotlessPlugin to use the DomainObjectContainer to look for every FormatTask and itt to the global spotlessCheck and spotlessApply? My idea was to still have the FormatExtensions objects registered into a container, just using Gradle's containers instead of a map. However on second look, you'd need to modify how the FormatExtensions get constructed to make that work, so it's not as straightforward as I'd thought and may not be worth it. I should've looked closer at how you were constructing things before making the suggestion to use DomainObjectContainer, sorry about that. &gt;I see two problems with this. Problem #1 is that the SpotlessExtension has a global "lineEndings" property which applies to all of the FormatExtensions. How can I be sure that SpotlessExtension is "done" when I'm executing the closures for FormatExtensions (and thus count on the "lineEndings" value being what the user set)? The only way I know right now is the afterEvaluate hack. It doesn't look like lineEndings actually gets used until task execution (the TaskAction block in FormatTask), so if it's meant as a global value, then the task action block could reference the value on the extension directly (task execution always happens last) rather than having it passed in during task creation. &gt;My second problem is more stylistic, but since you've got Gradle experience I'm very curious what "canonical" should be. If a user manually creates a task in her buildscript, and it gets automatically hooked into other tasks, then that seems like "magic" which she might not want, and would have a hard time debugging to fix. My instinct is that the DSL should be used to build a data model, and that the Tasks should be independent atoms of functionality that get wired up by the DSL, but don't wire up themselves if they're created manually. Does this approach go against "the Gradle way"? I don't know that there is an official canonical answer for this one, but I think your instinct is a good approach. I think what you want is that FormatTasks created by the extension get automatically wired up, but manually created FormatTasks would remain independent, right? The tricky bit is whether you want users to be able to remove formats that have been added. If so, then order matters and you're stuck with afterEvaluate, otherwise I think you could just eagerly create the tasks as FormatExtensions get added. 
that actually makes sense thanks. wish ole josh had elaborated a bit more in that section. 
Thank you! :-)
LMGTFY: https://dev.mysql.com/doc/refman/5.0/en/ha-memcached.html
Swing might be the only viable java alternative for the desktop, but c# does provide much more sophisticated desktop based ui frameworks with superior tooling. With the c# core being opensourced, one does start to wonder what the future holds for desktop java... 
im a java developer that started using C# I actually like it a lot. It feels a little less patterns heavy. the one thing i wish they would both get rid of are Annotations. Annotations makes it hard to understand and trace code. Java has actually now allows indirect multiple inheritance which is kind of WTF. (see default implementations of interfaces for detail) 
Thanks for the summary! this sounds really cool actually. I might give it a shot in my research! Memory issues has kind of been a pain in weka. 
I used both Takipi and AppDynamics. They both awesome, but quite different. And yes, it is extremely helpful to be able to trace and connect a spike on a DB CPU usage to those exact request parameters that triggered a nasty query that nearly broke your app. Edit for clarification: I did not use both at the same project. Those were different projects with different companies.
If the data is meaningless, why are you parsing it in the first place? My take on this is that if you work in web or security, you want to log that. You may have to deal with malicious input that exploits some very subtle flaw in your application or the date library it is using. Without a log you won't know where that is coming from. Of course, I haven't see your code and don't know what you're doing, so this may not apply to you.
An abstract class can have a constructor, interfaces can not. They also serve different purposes. Abstract classes force extension and force the extending class to have a base class. Interfaces allow any base class as long as you write to the contract. Oracles site even mentions why java doesn't have multiple inheritance e in the sense that you are looking for. It comes down to something as simple as two classes having the same method. You extend both and now call the method without defining an over ridden version. Which gets called? Ambiguity leads to bugs and unforeseen issues with code. https://docs.oracle.com/javase/tutorial/java/IandI/multipleinheritance.html
I'm a pretty inexperience Java programmer, but... I've kinda been wanting that for a long time. I suppose a couple of reasons why they haven't or won't might include: 1. Overlapping methods or variables - I could see this as a potential problem. Which super class's method/variable would you use? 2. Using the 'super' keyword. - This might not be too bad, I suppose it could just run through all the super classes until it finds the method. (And come to think of it, returning to #1, you'd have to have an internal sort to FIND the method, I figure.) Can't really think of anything else to say for now - it's been a while since I thought about that.
I have no idea if you're jerkin or not right now.
thanks will check it out
Very true. But I'll keep my common design patterns for now.
By using single inheritance, Java removes some very subtle footguns that developers who overuse inheritance tend to build for themselves and others. Even when leaving the diamond problem out of the discussion, I believe from experience that even single inheritance can and will get messy and unintuitive, unless one is very careful. Have you ever had to chase a bug through a jungle of method calls in an inheritance hierarchy, with one or two `super` calls thrown in? It's not pretty. Java 8 has default methods in interfaces, which are basically mixins, but with very limited means of defining extension points. Be careful when using them.
Thanks! It seems a pretty good website! 
This is an argument I never understood. I'm not saying I'm for multiple inheritance but why not handle it like with default methods? If you implement two interfaces that have the same default method, you get a compile error. Why not do the same with classes? $ cat pkg/Test.java package pkg; public class Test { interface Foo { default void foo() {} } interface Bar { default void foo() {} } class Cls implements Foo, Bar {} } $ javac pkg/Test.java pkg/Test.java:10: error: class Test.Cls inherits unrelated defaults for foo() from types Foo and Bar class Cls implements Foo, Bar {} ^ 1 error
I recently asked a similar question on the Project Lombok mailinglist: https://groups.google.com/forum/#!msg/project-lombok/KvIBNvL3EL0/IsgjGzk-7kUJ They prefer UnsupportedOperationException instead of AssertionError.
Bucky's vids are okay but the ones with the incoherent sleepwalking dweeb are atrocious.
Java allows multiple Interfaces, and I guess default functions in java 8 will make it easier to mix multiple functional interfaces. Should a language have multiple inheritance? I'm OK with multiple interfaces and a delegate pattern for each interface. I think if you start mixing parent classes you have to worry about namespace collisions and such, it can be a mess.
who said that? Default methods are an implementation of the [mixin](http://en.wikipedia.org/wiki/Mixin) concept that is available in many other languages in a way or another
Because your child class becomes coupled to its parent class. - Changes to the parent, can ripple down to all its subclasses, and cause bugs where you didn't expect. Prefer composition over inheritance http://en.wikipedia.org/wiki/Composition_over_inheritance 
Yeah, I agree. This is not a great example of encapsulation. Encapsulation is about hiding the implementation behind an interface so that you can change the implementation without having to change clients. I suppose it's better than having public fields, but it's still bad in my opinion.
You could throw ``java.lang.IllegalArgumentException`` or ``java.lang.IllegalStateException``, if you do not have your own exception for validation errors. Throwing something else than a RuntimeException or subclass is not a good idea because almost no one catches Throwable. 
The risk you mention is due to shared state between parent and child classes, if you properly use private fields and methods then the problem largely disappears. I agree that composition should be preferred for architecture purposes, but GP said inheritance shouldn't be allowed at all, that's a more extreme position.
The tutorial is fine, very short / concise + simple (almost too simple) whats lacking is really the why you do this. If I sumariese his bullet points they quite obviously say "keeping variables and methods in one class", not data hiding. But actually, data hiding is half of the truth and encapsulation has been referred to as data hiding. The full truth lies in object orientated programming. Writing programs in long lists of functions (bash...) gets problematic fast as reuse is difficult and its quite frankly a free for all where everything gets accessed / edited/ controlled from -- there's just a lack of a concept of ownership. Encapsulation provides a way to take your related core innards and wrap them up in something restricts that free for all access. You can then add methods / functionality to do things on your core variables in a controlled manner to manage its state, edit and safely access it. There's now actual ownership here, the innards / state of the class is private and controlled by the class, so its much safer than a free for all and much easier to build complex systems. A simple example here is say you have an address book. You have a class that holds a list of adresses. Free for all way you go class.adresses. Now anything accessing could call .clear() and delete all the adresses -- very very bad. So you can use encapsulation andl make that adress list private / nothing can acess it and provide related functions to use it. So, provide a getter that either returns a clone of the list, or maybe wraps its internal list in an Collections.unmodifiable list to protect the internal state. Either way, the thing accessing cant clear the list / affect the internal state of the object. Encapsulation here has help hide that state away and provide controlled acess -- much safer and scalable. 
what could possibly go wrong?
* becouse classes have fields beside methods. While methods can be overridden in the child class, letting the developer "choose" his way, members cannot. * becouse classes have constructors, and costructors follow a strict logic about which is run before the others. Constructors are always executed "parent-down", so when you instantiate a Button, it will call the constructor of Object, then Node, then Component, then Button (made up hierarchy to get the point). This is always done even if you don't call "super" on your constructor, and is necessary to guarantee that each class can fully control his state regardless of what children will do. This can easily be broken with multiple inheritance 
Feature envy ftl
not terribly interesting but it's not wrong 
Multiple inheritance also causes problems to language implementation. A big issue is that if there are multiple bases with data members, then an object no longer has a single unambiguous physical address, because both bases cannot exist in the same memory location. Casting a "pointer" from second base class to derived class would change the value of the pointer. In language like C++ it's not that much of a problem because memory safety is programmer's responsibility (but multiple inheritance still makes things like method pointers a [complete disaster](http://www.codeproject.com/Articles/7150/Member-Function-Pointers-and-the-Fastest-Possible)). Java on the other hand would have to prevent invalid casts. So every object would always have to contain information how to locate the possible derived class object, causing a lot of overhead.
It's basically 1995 material.
You are still tightly coupled to the implementation rather than the interface. It makes it impossible to do IOC if you aren't always going to rely on the parent class implementation 100% of the time. Say for example, you are writing a unit test but want to mock the parents logic. How do you accomplish that?
Still interesting but yeah. High impact target for sure. 
Java applets have an abysmal history when it comes to security. HTML5 isn't necessarily "better"; Google simply has more control over the implementation and can better secure it. It really has little meaning for Java newcomers. Java is powerful for server-side and desktop applications. Also, Android. :)
Yes Abstract classes can have data (aka state). Constructors matter as well.
Considering that the overwhelming majority of Java is server side, this really only affects legacy applications that still use applets, which have been a dying breed for a long time now.
Just what I was looking for, thanks!
Sorry man...
it makes heavy use of java opengl libraries ... i dont know if gwt is ready for that.
exactly what i said, abstract classes have data. constructors however...no, do not matter by a long shot. that's not the difference between interfaces and abstract classes. go back to the drawing board.
The only thing I've used an applet for in the past decade is WebEx (the only web meeting software that works on *nix).
Why did you choose applet as deployment technology? It was quite obvious that this will happen sooner or later. Depending on the nature of your project there might be alternatives for you.
You could probably use something like [libGDX](http://libgdx.badlogicgames.com/) which supports deploying to Javascript/WebGL with the same codebase. Is there any reason it needs to be web-accessible?
1. Stop shouting/using all-capital letters. 2. &gt; Please seek help with Java programming in /r/Javahelp! 3. Search this subreddit and the ones linked in the sidebar (/r/javahelp, /r/learnprogramming, /r/learnjava) for "project ideas". There's many many similar submissions.
Not just the XML, but the interfaces, too.
It is, and I'm not sure I would put it external facing, but putting it on the boundary between my internal network and my production / test network? Yeah. That could be awesome. And, further, it's probably an excellent source for any developers who want to learn about ssh, java, and key management.
When I learned Java in 1999, I wrote one Java applet. Haven't done so since, so go figure. :-)
Right, my issue as a newcomer is that I don't have a great understanding of how java is used in the real world (e.g. blending Java, REST, and HTML to get to your end product). I'm still learning syntax and the basics of OOP (in my spare time, without any formal training) so I didn't have a sense for how hard the line was between applet, app, javascipt vs java, etc. Reading through comments I'm glad to find that java applets are something very particular that have been essentially dead and gone for years.
Which is exactly where an applet is the perfect solution to a given problem. Thick clients are the replacement for applet hate which is especially ironic because applets were the "solution" to requiring the installation of thick clients.
Android takes a pretty big part of the Java dev cake nowadays.
&gt; Java today is mostly Java EE and/or Spring I think. Java EE guys have no idea about Java desktop (and vice-versa)
if universities didn't teach useless things, who would?
I've used both (though it's been a long time since I used IDEA). I just always use whatever the shop has standardized on. I remember noticing that IDEA is more full-featured, but I also haven't missed much in using Eclipse. 
Right. I knew I forgot something :)
I liked the idea of it being auditable and tied to the IdP too. I've never been impressed with hooking up PAM to LDAP or whatever. And this makes key management somewhat easier. And it becomes a single point of control. Without going through this box you wouldn't even be able to SSH to another box. And you could set up your heavy defenses on it. (Intrusion prevention and protection.)
Maybe not, I'm not sure honestly. There is no easy way to find out. Many Java-desktop applications (swing/javafx) are non-public enterprise stuff that never leaves the intranet so it's hard to count. The embedded stuff is probably even harder to measure. And how do you want to count it anyway - LOC? deployments? users? development man-years? And as someone else pointed out Android development might be the second biggest Java-development category.
IntelliJ IDEA + GTK/native theme = "Holy fuck, this thing is Swing?!?!" The relevance being that its the IDE of choice for most of us :)
All of the Eclipse fans are too busy watching the Updates and Anal Diseases dialog freeze the entire IDE as it tries to inexplicably download a new version of CDT that they didn't ask for. Also, every single version of Eclipse (since Kepler) seems to have the same lol-tabs-are-giant-swollen-clown-penises issue when used on Ubuntu (if not most *nix + X11 + GTK environments). Every time I've had to install + use Eclipse, I end up having to find the one random StackOverflow post that describes how to edit the GTK config file to make things look reasonable. IntelliJ IDEA, on the other hand, is by far the best $150 (personal Ultimate license) I spend every ~1.5 years. Every single Eclipse user I've gotten to try it (18 so far) has not only ended up switching, but many have remarked on how stupid/stubborn they were.
Eclipse vet - I don't see how anyone will pursue Eclipse after this. Intellij is more user friendly and simply 'figures it out' for you in a variety of ways, too many to list right now. 200 seems like a lot, but i think i'm going to buy ultimate just to not deal with repo updates anymore and to get a better frontend experience. haven't even explored the ui side too much, using typescript def files and plugins like angular are pretty surprising. i think its sad that jsf predated angular by a decade at least using definition formats that are actually inspectable (xml xsd etc) and somehow the community never reached the tooling level and sophistication and mindshare of the intellij/angular plugin combo.
The thing is: sometimes you WANT that coupling to the parent class. Practical example using my project (a parsing framework): First you have an [AbstractParser]( https://github.com/uniVocity/univocity-parsers/blob/master/src/main/java/com/univocity/parsers/common/AbstractParser.java) - this centralizes all core operations of a parser - exception handling, state initialization, data processing, etc. With everything taken care of by this class, I can build different parsers with no effort: * [TsvParser](https://github.com/uniVocity/univocity-parsers/blob/master/src/main/java/com/univocity/parsers/tsv/TsvParser.java) * [FixedWidthParser](https://github.com/uniVocity/univocity-parsers/blob/master/src/main/java/com/univocity/parsers/fixed/FixedWidthParser.java) * [CsvParser](https://github.com/uniVocity/univocity-parsers/blob/master/src/main/java/com/univocity/parsers/csv/CsvParser.java) Same thing goes for configurations: * [CommonSettings](https://github.com/uniVocity/univocity-parsers/blob/master/src/main/java/com/univocity/parsers/common/CommonSettings.java) - centralizes settings (and documentation) common to all parsers and writers * [CommonParserSettings](https://github.com/uniVocity/univocity-parsers/blob/master/src/main/java/com/univocity/parsers/common/CommonSettings.java) - abstract, each parser has its specific configuration class based on this one. * [CommonWriterSettings](https://github.com/uniVocity/univocity-parsers/blob/master/src/main/java/com/univocity/parsers/common/CommonWriterSettings.java) - same as above, but for writers If you used composition instead, you'd have 1. Extra complexity for no added benefit - lots of boilerplate code just wrapping internal classes and exposing an interface 2. Performance problems - this is a text parsing framework - every method call counts as billions of method calls happen to process a 100mb file. 3. The structure of a parser would be much harder to understand, as you would need to introduce multiple resources from multiple places into each parser implementation. If you still think otherwise, try and refactor this code.
I did not choose java, i certainly didn't choose to use an applet. they are existing frameworks i'm inheriting. The problem is porting them. I would much rather change it to an app then rewrite them from scratch.
We currently use jogl. I've used libgdx but it was really rough the last time I did. still it would require rewriting a large section of code.
it's not so easy to just rewrite two whole programs like that. If I was starting from scratch i'd probably choose sdl2 and c++
I did not. it was chosen years before I was put in charge. My goal now is to convert it to an app.
again the problem is rewriting 2 programs from scratch 
Tertiary? 
OK, now I'm *extra* seriously curious about what the applets actually *do*. I'm willing to bet it's well within the realm of possibility to separate the code that comprises the "backend" part of each applet from its UI, stick it inside an actual server backend (servlets, web services, etc) and implement a proper, modern web frontend on top (with anything from simple GETs/POSTs, to AJAX, to WebSocket to communicate with the server).
ReadyTalk has a native Linux client.
Something else I'm guessing those books don't cover that you should learn about: version control and build systems. Version control is useful period, even outside of programming - if it's text-based, version control software is useful. Some major version control systems include subversion (older, centralized), git (popular, higher learning curve), and mercurial (similar to git, easier learning curve). For java build systems, there's maven and gradle. The upshot of using them is that they can do dependency management for you, e.g. they make it easy to pull in libraries and frameworks in a way that isn't IDE dependent and doesn't require you to manually download and setup every single library. Gradle also makes it easy to play with other JVM languages like Groovy and Scala alongside Java code.
And goog is throwing their weight behind WebRTC for that use case.
Like secondary, but even more so.
&gt; it's just ... wrong. You want to unpack that for us, or are you just angry at it for being different than you're used to?
Thank you for finally giving a thought out answer finally. Also it does matter to know the difference if you are learning Java like many on this sub probably are. Also usually a good design would have the super class take care of its own state which sometimes does require a constructor. I get that you are an "experienced" developer so trivial concepts like this are useless facts that do not matter. I would suggest that in the future you refrain from being a tool and explain yourself better other than the high school attitude you have been portraying. Good day sir I am done with this discussion.
The value is building a program that will verify you haven't broken other parts of your program as the whole system slowly gets more and more complex. If you plan to work on large, complex systems that will have many parts and be in production for a long time, absolutely. If you write tiny, easy to understand throwaway programs (e.g. for data analysis or something like that) then you can probably skip it.
very nice * any idea how many clients can be running in parallel ? * what about websockets ?
&gt;We are especially working on fixing GTK/SWT on Linux This is fantastic news! Eclipse is practically unusable on my Linux PC right now due to GUI problems.
&gt; Tertiary http://dictionary.reference.com/browse/tertiary &gt;of the third order, rank, stage, formation, etc.; third. Calling something tertiary would be kind of like saying it's unimportant. You might want to learn it it's there, but it's at the bottom of the queue, if done at all.
oo jeebus, you put the entire thing inside the applet D: You sound like you might be a some kind of scientist/engineer if your programming for a research project. Generally businessish software they break it up along some kind of software design pattern like mvc ect; to avoid exactly that. It's probably fine for now, just chrome so far, and I think they've done this before and gone back on it. 
i would not like to tell the class today why intellij sucks. i did on many other occasions, and is pretty much irrelevant. I do not care if members of the class use it or not. what I expressed was an opinion, just like the idiotic parent post. since the idiotic parent post did not choose to enlighten us with the reasons on why he thinks that intellij is worth of our consideration, i will leave it as an exercise for next week for the class to come up with the reasons on why intellij is not worth the bytes is stored on. if the class fails to complete the assignment, they'll simply just have to pay 150$ per year for a subpar IDE (but feel good about themselves). 
It has been a while, but I was involved in changing some applets to webstart apps, it seemed pretty trivial at the time.
I had to switch back to Eclipse because of these problems: - TestNG support is broken and much inferior than TestNG support in Eclipse. I have thousands of test cases and depend heavily on them for developing. Found 2 bugs (reported 4 years ago) and opened a new one. This on the first try (I'll post them here later) - IntelliJ does not work well with broken code and made development impossible for one project I'm refactoring. I grabbed a few hundred classes from elsewhere, and started a new project with them to build an independent library. At first nothing compiled, so I refactored a few classes and their test cases to make them run (need to ensure I'm not creating side effects). The test cases won't run because IntelliJ can't "make" the entire project (that "make before run" option did not help either). I opened this broken project in eclipse and was able to run the test cases in the first try. Basically, IntelliJ is unusable for me because of these problems, so I reverted back to Eclipse. Edit: here is the list of TestNG bugs I found on my first attempt to test [univocity-parsers](https://github.com/uniVocity/univocity-parsers): * First, I found this 2 year old bug: [Tests are run, but display of results is wrong ](https://youtrack.jetbrains.com/issue/IDEA-100752): basically I had 258 test cases and IDEA displays 0 to around 20, depending on it humour (every time I restart the IDE, a few different test cases are listed). * Then I created this one too: [Not all TestNG test cases are executed](https://youtrack.jetbrains.com/issue/IDEA-138222). IntelliJ does report failing tests if I force them to fail. * Finally, another 4 year old bug: [IntelliJ test runner mixes output from different tests when TestNG parallel is used](https://youtrack.jetbrains.com/issue/IDEA-73260) - you won't see the output produced by some test cases, or you will get mixed contents In response to my support requests, they mentioned TestNG support will be rewritten from scratch as TestNG changed some of its internal behaviour since version 6 (which has been around **since March of 2011**): &gt; Andrey *** (JetBrains Support) &gt; &gt; Mar 30, 12:37 &gt; &gt; Hello, &gt; &gt; I've talked to the developer and the problem with TestNG is hat the TestNG protocol is now (since 6.x) very broken and the integration is needed to be rewritten completely to make it work again. We will prioritize this problem for the ETA soon. Please follow the https://youtrack.jetbrains.com/issue/IDEA-73260 for status update. Thanks. &gt; In short, I'm not impressed at all. This is just unusable and VERY broken. I was expecting IDEA to at least support TestNG as eclipse does, but it does not come even close. It's a pity as everything else in IDEA is so polished. That said, I'd be back to IntelliJ in a heartbeat once these problems are resolved. There are many useful features to use (git support is great, code analysis too) TL;DR: As it stands, it simply doesn't work for what I need to do.
Hi nqzero, you only need one HttpClient for all concurrent requests. I should have made that clear in the doc. You probably meant to ask how many "connections" in parallel can be run. This is how I tested it: On my PC (Windows), I have one JVM running a simple HttpServer, another JVM running HttpClient sending concurrent requests to the server. I had no problem with establishing 16,000 concurrent connections. More TCP connection attempts would be rejected (probably because of some OS limit) but I didn't investigate further. The throughput is not good though on 16K connections - it's about 7K requests/second. On low concurrency (e.g. 20 connections) the throughput could achieve 40K requests/second. The memory footage is about 60MB for 16K connections; so each connection overhead is about 4KB. Based on those numbers, I think HttpClient performance is fine for most use cases. 
Yes! The benefit of tests is that you can refactor and rearrange your code later and still have confidence that you haven't broken things. It's also a way for other people to make changes to the code and still be confident that they didn't misunderstand how a piece of logic is meant to work. More over, making code that's relatively easy to test correlates with code that's modular.
Currently we only have websocket server, but no websocket client. Websocket client is not a priority for us now, but it could be added in future. The same [WebSocketChannel](http://bayou.io/release/0.9/javadoc/bayou/websocket/WebSocketChannel.html) interface will be used for the client. Websocket is symmetric in the sense that both server and client see it as a channel for read/write messages.
I haven't tried to compare bayou client performance with other client implementations. But I did compare server performances - http://bayou.io/draft/Comparing_Java_HTTP_Servers_Latencies.html - and I would imagine that bayou client performance should be on-par with those you mentioned. bayou is written on top of Java NIO; it has no dependency on 3rd party libraries. POM is coming..
javascript will do that for the front end on modern browsers. Your phone will even be able to display it if you do it right; won't even have to care if it's apple or android. Get the java back end doing the heavy lifting calculations database calls ect. Then you create a bunch of rest or soap web services to do the method calls(I recommend rest). This component can live anywhere you have a java web container. Now you SOA.
Sell it for whatever you can and buy Joshua Bloch's Effective Java. 
Well, first off you failed to recognize that he was asking specifically if you had gone from intellij to eclipse and not looked back, and secondly you decided to answer him in the most aggressive and douchey opening statement I've seen about an ide that gets near universal praise for its ease if use and feature richness. You didn't say that it does things in a way you don't like, you called it fucked up beyond repair and utterly wrong. Those aren't mere opinions you're stating, so if you're not prepared to talk about *why* you feel so strongly negative about this then keep your unnecessarily hostile attitude to yourself. This silly tech tribalism we live in is bad enough without those kind of comments fouling up the mood, and they are anathema to healthy community discussions.
All that stuff takes way way more time than the 10 hours a week i have to work on it.
&gt; gets near universal praise for its ease if use and feature richness don't say, really? the only ones who praise it are the fanbois who are/want to be blind to all its shortcomings. yes, they are loud. yes, they are few. &gt; You didn't say that it does things in a way you don't like yes i did. being fubar implies that. &gt; if you're not prepared to talk about why why would I wanna talk about why? what do you care why i dont like it? if you like it, you are wrong, but hell ... keep on paying. I can only tell you that you're wrong, not stop you from using it. that's one thing, secondly, I am not in the mood to talk about why. I did so for years, i convinced numerous people, numerous still remained unconvinced and kept on using it. &gt; keep your unnecessarily hostile attitude to yourself. how about all of you idea fanbois keep your hostile attitudes to yourself as well. you shut up, i shut up. i only speak when i hear you talk. &gt; healthy community discussions. about an IDE? when have you ever seen one? emacs is obviously the right way to go, VI is definitely the devil incarnate. 
not really, they can't have member variables. Also mixins usually don't support "instanceOf" type operations.
Thanks for the detailed article. As a regular user of TestNG, I feel something very useful has been left out: running tests in a particular order, and prevent them to run in parallel. You'll need this when you have many tests using a shared resource such as an in-memory database (you could create an in-memory database for each test class, but try to keep names consistent across hundreds of test cases). The following `testng.xml` executes all test cases in my project. Examples must run in a specific sequence. &lt;suite name="CoreComponentsSuite" verbose="2" &gt; &lt;test name="CoreComponentsTest"&gt; &lt;packages&gt; &lt;package name="com.univocity.*" /&gt; &lt;exclude name="com.univocity.examples.*" /&gt; &lt;/packages&gt; &lt;/test&gt; &lt;test name="Examples" preserve-order="true" parallel="true"&gt; &lt;classes&gt; &lt;class name="com.univocity.examples.Example_001" /&gt; &lt;class name="com.univocity.examples.Example_002" /&gt; &lt;class name="com.univocity.examples.Example_003" /&gt; &lt;/classes&gt; &lt;/test&gt; &lt;/suite&gt; My last recommendation is: use the XML features sparingly and if you do, make heavy use of wildcards. It's very easy to forget to add new test classes to an existing testng.xml (and you will end up with a build that does not execute newer tests cases). I think you are using too much XML in your examples. To create a test suite, you can annotate your test classes with `@Test(suiteName="yourTestSuiteName")`. I only had to create a `testng.xml` for my project because there is no other way to run tests sequentially. I'd rather be XML-free but had no choice there. 
Ummmm....NetBeans! Ha! It's my favorite IDE. Everything just works...for me at least. I use 2 IDE's at work for non-Android Java: Dev: 1.) the latest version of IBM RAD for Java EE Dev for WAS 8.0 2.) NetBeans for everything else. I'd use it for everything if the damn WebSphere plugin still worked... I've tried IntelliJ, since it also works with WAS 8.0, however I had a hard time figuring out some of the simplest things that I'm used to doing in Eclipse/RAD. For example, I like the ability to click Republish, within the servers tab of Eclipse, whenever I want to publish my changes. For IntelliJ, I've been told that I need to create a Run Configuration. It doesn't have comparable feature. Seriously, IntelliJ? Just give me a button to push! I only use Run Configurations in Eclipse/RAD to run m2e builds, JUnit tests, or Arquillian tests. I don't use "Run on Server". I haven't really had the time to invest learning yet another Java IDE. I use Android Studio, too, so I figure eventually I'll glean enough from it over time to potentially make the transition to IntelliJ. IntelliJ is on my list of things to check off. I've used a lot of other IDE's, such as Visual Studio for .NET Dev and Xcode for Obj-C and Swift Dev. So far, Xcode and IntelliJ have felt the oddest to me, IntelliJ perhaps the most for me. That's just me though. Getting back to Eclipse/RAD, I'm at a point where I'm surprisingly happy with it, even though it's based on Indigo. The only plugins that I use are m2e, m2e-wtp, subclipse, and the m2e-subclipse plugin. I don't care about the visual stuff people seem to complain about often. I've learned the hard way not to get crazy with the plug-ins. Then again, I'm using only the plugins that I need. I'm don't feel as though I'm missing out. I'm getting my work done. Also, overcoming weird, hair-pulling Eclipse issues, such maven plugin goals not meshing with m2e-wtp or anything related to JPA, the proper way helps too. It was during the times when I was knee-deep in such problems, and many more, that I really hated IBM, RAD, Eclipse, and WebSphere and was kicking the tires on a trial-version of IntelliJ Ultimate Edition.
Why not just use JavaFX. Works better.
Did you try faking your window manager? [wmname](http://awesome.naquadah.org/wiki/Problems_with_Java) usually does the trick for almost all java apps...
One particular pitfall TestNG may cause is, that TestNG does not guarantee that i.e. a *@BeforeTest* method is directly run before the Test. It only guarantees that it was executed at some point in time before starting the test. I often see People trying to misuse these annotation to build a sequential, linear test execution path this way.
Why would you choose an abandoned framework to replace another one?
I love the implications this has for testing with an embedded EE instead of a managed/pre-deployed EE with Arquillian. (You'd still use Arquillian in both cases but it'd be a lot easier to distribute the specific test container configuration.)
I like them both and the both have features I like. IntelliJ runs smoother but handles multi-module maven projects fairly stupidly. When I have a module only activated on a profile it tries to exclude it from the project as best it can. I don't like the at it handles POMs in general. Errors and warnings aren't as visible as in Eclipse either. It also has some AWFUL code practices built in by default. Import *? No brackets for one line if statements? Are they kidding? That's just the surface. It's not like Eclipse is perfect. I've been using IntelliJ for about a month and haven't gone back yet. I could go on about Eclipse but most people shit on it as it is and I don't think they deserve that. Truth is that between Eclipse, IntelliJ, and Netbeans Java developers have a wealth of tooling and something for everyone.
i did about 4 years of free form Java dev a few years ago. to make sure my code did what i expected, i made heavy use of the debugger and lots of system.out.println type things. a couple of months ago i dove back into Java, but also JUnit and (some) TDD. i am yet to use the debugger and re-factoring is much easier since my pass/fail test "tell" me how much refactoring there is to do (all the failing tests) and how much refactoring there isn't to do -- all the passing tests. i am by no means an expert at Java nor TDD, but I def. recommend it to beginner / intermediate (Java) devs.
Cool, you deleted the original post and reposted the link to clear up the comments. Let me put them back: Thanks for the detailed article. As a regular user of TestNG, I feel something very useful has been left out: running tests in a particular order, and prevent them to run in parallel. You'll need this when you have many tests using a shared resource such as an in-memory database (you could create an in-memory database for each test class, but try to keep names consistent across hundreds of test cases). The following `testng.xml` executes all test cases in my project. Examples must run in a specific sequence. &lt;suite name="CoreComponentsSuite" verbose="2" &gt; &lt;test name="CoreComponentsTest"&gt; &lt;packages&gt; &lt;package name="com.univocity.*" /&gt; &lt;exclude name="com.univocity.examples.*" /&gt; &lt;/packages&gt; &lt;/test&gt; &lt;test name="Examples" preserve-order="true" parallel="true"&gt; &lt;classes&gt; &lt;class name="com.univocity.examples.Example_001" /&gt; &lt;class name="com.univocity.examples.Example_002" /&gt; &lt;class name="com.univocity.examples.Example_003" /&gt; &lt;/classes&gt; &lt;/test&gt; &lt;/suite&gt; My last recommendation is: use the XML features sparingly and if you do, make heavy use of wildcards. It's very easy to forget to add new test classes to an existing testng.xml (and you will end up with a build that does not execute newer tests cases). I think you are using too much XML in your examples. To create a test suite, you can annotate your test classes with `@Test(suiteName="yourTestSuiteName")`. I only had to create a `testng.xml` for my project because there is no other way to run tests sequentially. I'd rather be XML-free but had no choice there. 
no i have not, and i have no interest in doing so. if you'd learn how to read you'd know why. until then, keep on using intellij.
&gt; Cool, you deleted the original post and reposted the link to clear up the comments. I take my comments seriously. I didn't delete, there was another comment along with yours for which I responded and added a new example to the post. After I improved my post, the article simply vanished from the search. I can see the link in my history but not any more in the search so I re-submitted. About the second comment and my response. bentolor: One particular pitfall TestNG may cause is, that TestNG does not guarantee that i.e. a @BeforeTest method is directly run before the Test. It only guarantees that it was executed at some point in time before starting the test. I often see People trying to misuse these annotation to build a sequential, linear test execution path this way. My response: rsatishm If you want to run a specific method right before or after the invocation of a test method you should consider implementing a IInvokedMethodListener listener. You can compare the method parameter with your test method to make sure that the test method being invoked (or already invoked) is the one you are interested in. I have add one more example to listeners section based on your use case. Cheers!
It drives me crazy but I haven't put too much effort into it. I know I'm missing a bunch of unchecked type conversions and whatnot.
Something very relevant IBM has been working on, http://www.slideshare.net/mobile/mmitran/ibm-java-packed-objects-mmit-20121120
[JEPS-191](http://openjdk.java.net/jeps/191) has more details about what is being planned. Is this what you're looking for?: &gt;Mechanisms for binding, based on metadata, a specific memory structure (layout, endianness, logical types) to a Java endpoint, either via a user-defined interface or a user-defined class, in both cases backed by plumbing to manage a real block of native memory.
Thanks for this! I'm looking at getting into JGit. I'd really like to be able to manage git access with it somehow. I'll be looking into how GitBlit uses JGit when I get (git) some time.
why did you post this here? It's dealing with the part of android that isn't actually java haha
That's how I feel in Intellij after switch from the darkula theme to the classic one. With darkula the warnings were very visible (in opened files)
I gave Intellij a pretty good run I think, you know, to see what all the fuss was about. It's pretty awesome, but I don't really miss it all that much after switching back, and OSGi development is just far easier and faster in Eclipse with bndtools so I had a lot to miss when I was using Intellij.
I'll look at c-F7, but c-tab and c-pgup/dn are definitely not what I'm talking about, they only cycle between editor tabs. I want to be able to cycle between currently visible (or perhaps also minimized) views.
Then yes, Ctrl-F7 is what you're looking for I think, and I don't think this is a new feature or anything. Though for the record, Ctrl-Tab and Ctrl-PageUp/Down don't just cycle between editor tabs, they cycle through the tabs on the currently selected view panel, whereas Ctrl-F7 is global over open views (including the editor). It's surprising how often people complain about features Eclipse doesn't have when it does actually have them. I remember reading an article titled something like "Features to Show Eclipse Users From Intellij IDEA" or something, as if it would get them to switch, and out of the few dozen or so features it listed there were only two which Eclipse didn't do out of the box iirc, and that wasn't even considering plugins.
&gt; kind of aggro intellij fanboi out to get you when I've already stated flatly that I have almost no experience with either platform. Nobody gives a flying fuck what you have experience with. Try them all, why wouldn't you. It's your problem to fix, not mine. No, you're not out to get me, you're looking for "reasons" when i clearly stated that I am not in the mood to provide them. I did provide them many times, to many people, im done. Wanna find the reasons? Try the IDEs and decide for yourself. Surely you must be capable of that. &gt; So you're just here to talk shit and foul the air with your presence, then? I don't see a reason otherwise. I am here to state facts. You may or may not like them, that's your problem not mine. Feel free to check them. Nobody is stopping you. &gt; I have. People like you are the reason the editor wars are still a thing. Editor wars only start when marketing guys convince idiots that their turd is better than the other one. People who can think can see the flaws in their reasoning, and voice their opinions. Those who cannot think, believe whatever they want. 
Or they may cut features if they have problems with the deadline...
JUnit testing means you can spend more time doing interesting coding and less time fixing things which used to work...
Please also read the [Reddit rules](http://www.reddit.com/rules/) about only submitting your own website.
Funny enough, this is exactly what I did today! I created my own SP based on the idea of Shibboleth by creating a SAM, having it send a SAML AuthnRequest to an IdP and processing the SAML Response.
Isn't part of the point of TDD to tease out the architecture of your code through a cycle of failure, then writing code to pass, refactoring, then repeat? 
More Java integration with native libraries makes me a sad panda.. :( Most of the complaints I have about people who write bad Java is because of things like JNI/JNA and incompatibilities across platforms. We're losing one of the original design goals of Java, write once - run anywhere....
It seems to be a lot more verbose than Hibernate Validator annotations, at least at first glance. 
If you look at what java is used for today, write once deploy everywhere is not as important as it used to be. You know exactly what environment your java backend will be running on and it is unlikely that you have to deploy it anywhere else. 
It's not supposed to replace annotations. It's for application that need complex validation. FluentValidation is a .net framework that I've used that really impressed me, and though it is not possible to duplicate in java, I attempted something with simular aims. It's best used for business rules
Absolutely you should learn TDD. I don't like to develop any other way. - With TDD you think first about the business value of what you're about to develop. Not the technical implementation. Benefit: the code you write is guaranteed to be of value because your unit test is tied directly to an acceptance criteria in the story. And if you're having trouble coming up with a good unit test, maybe your acceptance criteria are poorly defined and need to be revisited. - TDD lets you think about what you want your code to do before you get into the details of implementation. Benefit: your APIs tend to be cleaner and have better names (that reflect the intent and not the implementation). - TDD gives you the freedom to refactor with confidence. And you should *always* refactor to prevent the code from becoming an unmaintainable mess. Benefit: a codebase that is easy to maintain. I follow what's typically called the "red-green-refactor" cycle. The "red" step is where you write a unit test that fails. The "green" step is where you write the minimal amount of code necessary to make the test pass. The "refactor" step is where you clean up the code to follow good design principles. So, yes, *please* learn and use TDD. I recommend starting out by doing a few of the TDD katas. I'll be glad to answer more questions if you have them.
Honestly not sure. It sounds like it might be a way for Java to hold a block of external memory, not necessarily a way to give native code a pointer to a Java object w/o having to copy. 
Also with how it will make dealing with legacy C code easier, and ease the development of interfaces between Java and other languages - without having to re-implement the whole language in Java (see Jython, JRuby, etc) . 
I feel sometimes it's useful to first ask the question: "In an ideal world, what would the interface to this module look like?" Before implementing the code. You can do this by writing the tests first. The ideal of how it will be used can drive the implementation.
I did refactor it a bit to use composition, creating a ParserDriver that accepts a Parser with a parseRecord() method that is implemented by a CsvParserImpl class. I got it working well enough for CsvParserTest#parseIgnoringWhitespaces to pass. 1. Extra complexity: the ParserDriver takes a Parser parameter in addition to settings. I suppose the settings object could hold the Parser as well. The call to parseRecord(), instead of calling an abstract method implemented by a subclass, is now calling Parser#parseRecord(char ch, CharInputReader input, ParserOutput output, DefaultParsingContext context). Everything else was just moving code around. 2. Performance: there was no noticeable performance difference in the ProfilerTest. (I downloaded worldcitiespop.txt.gz from MaxMind, I'm guessing that's what you used.) I think you might be surprised at how performant the JVM is nowadays, especially on a modern processor. 3. Structure: see extra complexity. I don't think there's a noticeable difference in understandability. Overall I like your code, I found it readable and quite easy to work with. (I think the fact that I was able to perform this refactoring, including getting a major unit test and performance test to pass, in under 2 hours, says a lot.) I'm not criticizing what you've done with AbstractParser and its subclasses, but pointing out that IMO composition won't be more difficult/complex here. 
[Deja vu](http://www.javaworld.com/article/2076977/core-java/microsoft-s-j-direct-called-death-of-java.html)
It really depends on how complex your application is and what kind of tuning you need. Thought, if you want to use stuff like collection in your POJO, the easiest way is to create your own entities. In such case, you may have to use annotation such as @OneToMany or @ManyToOne, so foreign keys are generated for you and object are persisted correctly. At the end of the day, your design skills will matter the most, but keep in mind you can always make scripts to enhance the model of your DBMS, if you need to do something a bit more hybrid with pure-SQL later.
It does depend on your strengths. When you're just starting an app and don't have much experience with schema design, it can be a lot faster to write the entities by hand and have the JPA provider generate the schema, but in the long run you'll probably find that you'll need to turn it around to get the most control.
Personally I wouldn't rely on them unless it was a terribly simple application you were building. If you have any complexity around transient fields, cascade operations, transactions, etc. the JPA tools won't cut it.
I'm just learning jpa, hibernate and orm I suppose that for the moment they are enough. What is your approach make everything manually?
Hey that's fantastic! Thanks for taking your time to look at this. I'm curious to see the end result (your code). Did you fork it from github? Regarding your points: 1 - In fact there's not much extra complexity added for the AbstractParser as it requires a single method (parseRecord) to be implemented. If you had more abstract methods there, it would become increasingly more annoying to use composition. You already had to create a method with 4 parameters there. An interface with Parser#parseRecord will be public. This is not good for a public API as the parseRecord method is meant to be kept hidden from the external world. 2 - Yes, performance changes in the parseRecord won't be noticeable as it is not dealing with individual characters, but entire lines of the input... there are not too many calls being made here to make a difference. 3 - Try with the *Settings... you'll have to create wrappers on top of wrappers using composition. That's been very interesting. You should publish this on a blog or something. Try refactoring everying to use composition only :) 
The memory database is just ONE example of a shared resource. You can have many... static state kept by static variables/Singletons/Crap libraries, for example.
I annotate all my jpa entities very explicitly. Every entity and its fields are mapped with the @table, @column, @joincolumn, @onetomany, @manytoone annotations etc, and I fill in all the attributes on each. You can even name all your foreign key constraints, do multi column indexes/unique constraints etc... I also do not add any custom getters/extra functionality - I consider jpa entity to be a direct representation of the database table, and nothing else It is a bit of a chore, but I find that when I do it I can leverage the hibernate Ddl generator with pretty reliable accuracy. I was then able to create a utility that fires up the session factory, calls the hibernate Ddl generator, and it kicks out the scripts that it plans to run. I review them, 9/10 they are fine. If not, I have always found a way so far to fix it in the annotations. I then add those changes to liquibase, and I am done. For me, this saves a lot of time, but most of my tables are simple business object mappings with a single synthetic id, and I've had control from the beginning. The extra annotations have great ide support -- especially when coupled with live data sources in IntelliJ . Another benefit is that by going through this process I am very confident my jpa entities line up with my db tables/schema. Makes it easier (never painless) to switch db vendors as well. Just to be clear -- orm is a tool. It is not magic. It will help you with the 90% use case -- get widget out, put widget in. There are times where it will be harder to work with it than native sql. If you have a complex existing legacy table design, are doing complex multi table operations, or trying to leverage db vendor specific features, it might not be your best solution. Turn on up your Sql logging and watch what it is doing! Still prefer it over jdbc prepared statements most of the time.
If you are a big project, entities from tables, and tables from ER design tool. Smaller projects, take your pic. 
The problem I've always had with this approach lies in how to handle database changes (migrations). While the first time this works fine as soon as you want to rollout an update you cannot use the schema generation anymore. However I also despise migrations how they are done in rails/symphony2. They are an absolute pain to work with. That's why I always write everything manually and maintain a wiki with db changes that I then execute on rollout. Its not that much more work and everything ends up the way you want it to be. Ddl generation is great for tests and to get started though.
Good reasons for generating entities from tables (or writing both manually): - You can control storage options - You can control constraints - You can design a decent schema - You're not limited to the use-cases supported by your ORM - You know your schema well - You can also access your schema easily from other applications (e.g. written in Perl, PL/SQL, etc.) - You can also replace your Java application easily with something different in the future, because you modelled the database schema independently - You can control database migrations easily (e.g. using [Flyway](http://flywaydb.org)) - You will (be able to, no guarantee) stay friends with your DBA Good reasons for generating tables from entities: - You might find it easier / faster when you start the project - You're prototyping your application (but let's be honest. Every prototype ever created also went to production) However: You might not need any of the advantages of the first section and if you're doing things like [/u/tom_dick_harry suggests here](http://www.reddit.com/r/java/comments/354ilt/hibernatejpa_orm_what_is_considered_good_practice/cr11v8y), you can get away with writing entities first and generating the DDL
What I would really like though is to investigate and change things in a running JVM using a scripting language. YourKit Java Profiler is nice, but it doesn't feel powerful enough (only looking, no touching). And it's also prohibitively expensive.
concur
Yes I usually go with a manual approach (i.e code the Java side manually). On a general note I try to simplify the the mappings to the database as much as possible, that way it's entirely clear what is going into/out of the database - even at the expense of code reuse. Over abstraction of the Java objects, having them use complex inheritance tables or P/F key relationships can turn out to be both a database management and code maintenance nightmare. Oh and for goodness sake make sure you put a version into your DB schema. It's sure to change at some point and people will want to upgrade from previous versions.
Either is fine. But the decision should factor in how important it is to get the data model right and how efficient you want the database to be. If your strength is coding then creating entities and letting JPA fit the database to the code will result in faster development time. If your strength is relational database theory AND the project is data-driven then building the database first and using JPA to fit the code to the data model will result in a faster / better end product.
There are some items in there that resonate with me, because I have encountered them myself. Particularly that notion that less lines of code equals better code. This becomes particularly silly when you see people replacing a few lines of code with a library call *just to reduce the lines of code*. That they have just outsourced (pardon the pun) the code to another location is something that some people fail to understand. It's like they only see their code and everything else is magic that just works and, more importantly, it's somebody else's problem.
Both suck. JPA is a low-power tool useful for speeding up prototyping in a language that is generally unsuitable for prototypes. Pretty much every code generation utility will bite you in the ass over the long term. If you generate entities, then each and every clean compile will scan your schema and generate the code, which has two downsides: one, you hope and pray that the generated code is what the rest of your application expects, and leaves you at the mercy of changes in the code generator. And two, all that code generation slows down your compile cycles, which increases the odds that your devs will go grab a cup of coffee while their code is compiling, and ruins productivity. And unless you're writing SQL (i.e. as a String) directly, you're more or less beholden to when the framework will release support for great new DB vendor feature X, and how much you'll have to pay for the new version with that support. It's unsustainable as your project grows. If you generate the schemas, you lose the ability to properly optimize. You start to create workarounds upon workarounds to fit your use case into the framework instead of the framework into your use case. You wonder why the hell Hibernate is running 10,000 individual select ... where statements instead of either a single stored procedure or returning everything through a single select call and then allowing the application to filter out the results. You start to write native SQL queries to work around the idiotic generated queries and then run into subtle bugs because those queries bypass the caches that JPA implementations may or may not have. You basically spend development time fighting the ORM instead of focusing on business logic. Stop the madness. If your system will live longer than a few years, do it right the first time. Grab a JDBC helper library, fetch the results directly into the DAO (instead of entity objects fed into the DAO), and have the DAO return the data that the business logic actually needs.
I think most of these are very use-case specific. Memory doesn't matter when you're writing a script from a cron-job in a garbage collected environment the same way it matters when writing a binary for a router. Algorithmic complexity matters as much as algorithmic complexity matters. If it's faster for your use case to linearly search through an array instead of setting up a hash table, then it's faster. Often times it isn't. Most times it doesn't matter. I also take issue with the smug tone with which much of this is written, and that it spares no over-generalization.
There are very few truly timeless lessons, _particularly_ when it comes to technology. There is no better person than someone with experience to tell you what is possible. Just don't depend on them to tell you what is impossible.
Yes you can. Checkout update mode. http://stackoverflow.com/questions/438146/hibernate-hbm2ddl-auto-possible-values-and-what-they-do I'll try and post the little tool I made earlier that dumps the proposed update scripts instead of just applying them on session start up. Again it's not going to handle 100% of every complicated change you may make, but it is right enough that it has been worth using for the 90% use case. You do allude to the most important mindset to maintain -- The integrity of the db of course ultimately lies with you, and you can't count on any orm or tool to do it for you. The wiki approach is also a good one too. I would checkout liquibase/flyway which is essentially a more structured version of your wiki -- gives you a little more power and also the advantage of having your scripts being maintained in version control -- which can be a huge advantage especially on larger teams 
I guess I must be old school. Performance is more important to me than supporting a variety of databases. I write the SQL, then write the API using stored procedures, then worry about the Java/C#/C++ whatever. All interaction with the database is through stored procedures, never directly interacting with the other database objects. From a performance standpoint, it will beat an application developed with entity mapping every time, sometimes in dramatic fashion. From a maintenance standpoint, having one place to look for database interactions (the stored procedures) is way more convenient than looking for code in various middle tiers for all applications. Security, access audit, etc.. is also centralized in one place. To me entity mapping is nice at first, you get to prototype quickly, but as your application grows, trying to tune it and control what it does is more complicated than explicitly stating what you want done. Sometimes, you have a process that needs to modify 15 tables. It is way easier to have everything encapsulated in one stored procedure and it is way more efficient from a network latency standpoint (one call to db rather than an app hammering the DB with different calls), not to mention the overhead of context switching between the database engine and the external call. And I always see eye to eye with a DBA :-)
It's not silly if those libraries are well written, tested, supported and used by thousands of developers.
Valid point. An alternative is to nest the calls.
I am not advocating against libraries. I love libraries. But using them just to reduce LOC is stupid, because those lines still exist. Using libraries because they are awesome, were created by people much smarter than you and are well-tested absolutely makes sense.
&gt; Oh and for goodness sake make sure you put a version into your DB schema. It's sure to change at some point and people will want to upgrade from previous versions. Can you elaborate on this ?
Algorithmic complexity. Working with MongoDB for the first time this spring, my initial algorithm took approximately 4 days to complete. Proper use of indexing and loop elimination brought it down to about five seconds. 
Actually, this would fit better in /r/Javahelp than here. /r/Java is for: **News, Technical discussions, research papers and assorted things of interest related to the Java programming language**. We have various hints in place that help with programming should be sought in /r/Javahelp.
Handwaving aside, the points made in the article are salient. 
I think you missed the point being made. No matter how nifty and well-written it is the wrong choice to add another dependency to a project to save a few lines of code. Saving many lines of code and not reinventing the wheel on important functionality are what I'd describe are solid considerations for libraries. Edit: looks like you got it on another comment. Leaving this up since I too the time to write it :-)
I think your comment supports the need for such an article smug or not. Many programmers tend to not think outside of their own use cases. Considering things like disk space, memory, compute time and bandwidth still matter. For example the graybeard in me asks what happens over time when many other tasks are added to the server that your cron-job is running on? All of a sudden you find you shouldn't have been so unmindful of resources and that garbage collection isn't a cure-all.
My dad's one of the graybeards of web development, and he drives this home any time we talk about persistence. Most data storage engines are exceptionally good at doing what they do - but whether you tell them to do it in an algorithmicly sane order is another matter altogether.
Well, everything you described is the reason why Maven exists. You can manage dependencies with it, easily download .jars and libraries into your project, as well as export your project and use it in another one. Maven is really useful for importing everything you need without having to worry about conflicts and knowing what versions you need to get that guava/kryo library you're going to use.
I have been trying to learn Maven, and sometimes I see pom.xml files with &lt;repository&gt; tag and other only with &lt;dependency&gt; when should I only use &lt;dependency&gt; and when should I add &lt;repository&gt;
Don't agree with the compiler one. Yes compilers have bugs, but overwhelmingly the problem is going to be in your code. By including the item on the list I think it will more often lead junior developers (who I think this article is mostly directed towards) in the wrong direction as they will think the next difficult/weird bug they are working on is a compiler issue when it is almost certainly their code that is the issue.
Read the java collections package and guava. It's both well commented and well written.
indeed; do you know about algorithmic, other programming languages, oop... but as mentionned elsewhere java is relatively easy so you can end up building some stuff fast; now not sure how much of what you build you'd really understand.
I work in a big enterprise environment with mission critical applications that have to be available 24/7. You can tell the difference between the teams that manage applications that have embraced TDD and those that are still fighting it. Those that are still fighting TDD have critical failures nearly every day. They are constantly having to run emergency changes, hand massage data, and do manual processing to get the data to flow. Those teams are constantly working after hours and weekends. You hear crap from them like "It worked on my box, or this executed in Systems Integration Testing." The teams that have embraced TDD occasionally have a problem, but it is rarely ever code related. Their biggest problem is the crap data coming out of the applications managed by teams who don't embrace TDD. TDD can greatly improve the quality of your code and testing. It is just one more tool in the tool box, and when used correctly their is a definite measurable improvement.
I did. I thought there were a couple of tricky multiple choice, but the free response wasn't bad at all.
Nothing comes close to [guava](https://github.com/google/guava) in quality.
That submission title is very misleading...
Wow, is nim worth learning?
I think the most complex thing the course covers is inheritance structures. Off the top of my head, it doesn't cover bit operations, generics, reflection, or anything specific to the JVM (as opposed to the language).
You should manage dependencies with a tool like Maven.
With Java 1.0 it was possible to know everything. Those days are long gone...
I also took it today (but I'm a freshman). The MC was sorta hard, but the FRQs were easy (I think I only got a point or two off)...
Same! Was pretty easy overall. Multiple choice was tedious, and I almost ran out of time at the end, but the free response was pretty relaxed. Went over my code like 3 times, glad I did because I caught a few minute things each time.
That was the same with me, but I had been learning a bit longer. I finished both sections way early and napped. On one problem it was required to sort 3 integers, and I didn't know if we could use something like Collections.sort - so I wrote my own implementation of a quicksort for the fun. Got a 5
On mine there was nothing even *close* to as difficult as implementing a sort. The one I was bad at was related to interfaces cause I kinda forgot to study them. So I know I lost 1-3 points on each of the parts for that question. I feel confident enough about the rest though that I think I got a 4 at least. 
If you are familiar with OOP it won't take you long. If you're not it will.
I loved gridworld! I made a new worm class that could move the rocks, and man the things they would do. Changing some simple behavior would make them build highly ordered structures, or crush each other to death with the rocks. Set the size to be full screen and watch them go for hours. I thought it was a wonderful teacher of polymorphism, but only if you expanded on it yourself and did something with it.
Which one did you use recursion for?
I took it! I thought we really needed more time with part 1. 
Oh man, thank God!! We have some COBOL code we really need you to take a look at...
I got a 5 on it last year without studying. Last year's test was a piece of cake but now they have added those three separate case studies. That should spice up the free response a bit.
Awesome, thanks for those ideas. I am teaching myself Java and think I am doing a pretty good job of following good practices, but figured I need to start reading other people's code so I can better see how to structure my programs. These suggestions look like they'll help a lot.
If it's any concern, I started learning Java in 1998, I'm still learning it today. They keep changing it. 
If you want to develop in a professional capacity YES!
You are partially right, it should have been: "Heroku free dynos soon won't be 100% free anymore."
Can I use tomcat for Java EE web apps with JPA, JSF, CDI, EJB? Thanks for the link the mvnrespository so I just search for the jar I need, for example, mysql j connector and just paste the following in the pom.xml: &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.35&lt;/version&gt; &lt;/dependency&gt; Is it really that easy? 
to practice gridworld I created new creatures that had abilities that mimicked Dota 2 Characters. My Nature's Prophet bug would teleport to a random location and spawn flowers around him 
Took it three years ago! GridWorld sucked, but there's far worse things in college haha.
The case studies weren't covered on the test
Haha we went over that a bit in class anyways, so glad it wasn't on the test.
Tricks like this usually help for low traffic apps, where ease of deployment matters since neither will ever reach "scale". Besides if you ever do start to really scale, if they're too well isolated apps it should be easy to break them back out into isolated WARs.
It was absolutely awful. I had a terrible teacher and all 6 of us in the class sat there clueless. The only kid who knew what he was doing was a homeschool student taking the exam at my high school. I drew a dick on one of the free response questions and managed to take a pic of it with my phone without the proctor seeing. By far the slowest 3 hours of my life.
Anywhere between 5 minutes and 5 life times.
Read the sidebar: &gt; Please seek help with Java programming in /r/Javahelp! Also search around for other submissions. Passing variables has been asked and answered many times.
When I took the test last year I didn't answer half of the multiple choice, and still made a 4 out of a 5. 
&gt; On a daily basis I work with Spring Boot/MVC/Data/HATEOAS/Security/Cloud, JUnit/Mockito, Cassandra, Mongo, ElasticSearch, Netflix Archaius/Ribbon/Eureka/Zuul, Gradle, Docker, AngularJS, Node/Gulp/Grunt and we use Stash (Git) and Bamboo. Well I guess you fit the profile of working with 'modern trendy alternatives to those "enerprisey" stacks' which are not mainstream however. Depending on your location of course (so following numbers are very biased): as Java developer, there might be 95% chance you'll endup working with 'enterprisy' stack, 4% - some legacy Jave SE, and only 1% chance of ending up with trendy stack. So we might represent viewpoints from totally different angles. So my view on this is - its all about numbers. Even Ruby jobs outnumber, modern-Java-stack jobs in my area. Not to mention .NET jobs, where 90% of them are on modern stacks. Hell, in my area, you have better chance to get Scala job. So natural question - why bother with that 1%? Not even mentioning, the fact, that all that new and trendy stuff introduces even more fragmentation to already super fragmented Java development. Which IMO makes no surprise why every architect/lead has his own vision about pretty much everything.
Took it today also. Multiple choice was annoying in the way where there were really no giveaway answers. I've done a shit ton of practice worksheets and there's always a few that are definite answers. But this test had 5 at most. However, there were also only 5-ish that were incredibly hard, so it evens out. Free response was easy except for one particular problem. #3 I believe.
I made a random guess on the last one because I was out of time.
The AB test covers data structures as well. It's a course on computer science, not on Java programming, so it's unsurprising that generics and the JVM aren't covered.
Pretty cool, did not know that this exist. Definitely checking this out... wow I am so excited now. :D
Yeah I had trouble with #3 too.
http://www.reddit.com/r/java/comments/351egx/wildfly_swarm_directly_executable_java_ee_jars/
What do you want to do? Learn for what?
Years
wow really 
wow really 
android application development 
They have AP Computer Science now?!?!? No fair!
Nice, that is good to know. I've been studying the core JavaEE stuff and am just getting into learning Spring. This will be helpful to have as a reference. Thanks.
Cool, thanks. Looks like a nice one to check out.
ran out of time on multiple choice. Was done with free response in all of 30mins
Aw gee. I have often wondered which of our classes are truly worth reading, though, just because it seems to me like the kinds of things we have to do are so... atypical. Anyway thanks!
It's funny when corporations don't consider unsupported java versions a big enough risk to move forward. I think 1.7 is sunsetting as well. If a critical security issue pops up, you'll be without support.
noob ur bad gg
Con: It's Java EE :P But to your point, that's a major difference that I overlooked.
Slightly? There is no more Gridworld :P
No shit, I had to learn all this stuff outside of school when I went.
Yes really, why do you think java developers are paid what they are paid? Not anybody can just pick this stuff up.
As per the sidebar, /r/javahelp exists for a reason. Even then you'll need to re-word whatever it is you're asking, as it's not at all clear what the problem is - what images are you referring to, where are they in your project, where are they in your jar, how are you reading them, where are you trying to display them, how are you trying to display them, what have you Googled, what have you tried, etc. As it is, no-one will be able to help you.
TIL /r/javahelp is a thing
Damn. That looks awesome. I have been looking for a way to get off Glassfish and WildFly looks like it is the best option. I've been really unhappy with the stability of Glassfish for a while. Between slow downs, obscure errors, bloated error logs, and just general bullshit, I am ready to ditch Glassfish. I wonder if this would work for my needs.
public static void main (String[] args) { System.out.println("The same way you would for a PC"); }
So this is essentially a Java port of https://github.com/JeremySkinner/FluentValidation . I think that's awesome! I've been doing lots of FluentValidation work recently. I would recommend a full port. This would include wrapping the messages (which are currently strings) into objects as to provide more detail. For example, in our API, we return error codes, along with messages, when a rule fails. We also make heavy use of adding a custom state to each rule validation result. Message me if you need any help in accomplishing that!
+/u/CompileBot java public class Main { public static void main(String[] args) { System.out.println("The same way you would for a PC"); } }
Yeah,TDD and Unit Testing are good, is there anyone who can share some best practices ? I am kind of new to this, and usually find it harder to write unit testing than to write actually product code.
[Here's] ( https://blogs.oracle.com/hinkmond/) a good blog on the topic. 
 for(int i=0; i&lt;10;i++){ //do stuff } Is there any particular reason people do it this way? The only benefit I suppose would be a reduced line count
Yea some people just don't see the need to put the bracket on it's own line. I can't really blame them. Although I always use brackets and I like all my brackets to have their own line. I am not really concerned with line or character count. I am concerned with readability. Sometimes adding the line helps sometimes it actually does because it can make indents harder to see. It ultimately comes down to preference. How about no brackets at all for 1 line ifs statements? Does this bother you? if(flag == True) //do stuff vs if(flag == True) { //do stuff }
Wildfly/JBoss EAP has been a great experience for us. I definitely recommend trying it out.
yea, if your'e going to nest you damn well better put some brackets. damnit. It's interesting to me all the preferences. I definitely do not know all the best practices. 
What can this do that mockito can't?
That does look very nice. I like the recursive faking of objects.
They really should change "difficult to build" to "difficult-to-build" or rephrase the entire motto to "Fakes Java objects that are difficult to build".
I suppose it's just the same basis every year, just different incarnations. (That fish program probably wasn't the first, either.)
Pretty much this. Actually it doesn't do anything that Mockito and JMock can't do, but it makes creating value types a lot more convenient. It's like Mockito's RETURN_DEEP_STUBS but with nice defaults for primitives, lists etc, plus the ability to override just by providing an object with field names matching. It's work in progress, I do value feedback. 
Very insightful! :P
&gt;Programming graybeards grew up in a time when the Internet didn't exist. Nah, it did exist, just not publicly available to many. 
Ideally maybe, but you often need one to pump as arguments into some code, under test, and especially when immutable they can be a dog to build. I don't see these as mocks - we're not interested in inspecting interactions with them - they are fakes, just standing-in for something to allow other code to fetch values.
I can't argue with that - I'm not sure that it's a motto yet though!
+/u/CompileBot java public class Main { public static void main(String[] args) { System.out.println("Does this actually work?"); } }
Output: Does this actually work? [^source](http://ideone.com/aWTCok) ^| [^info](http://www.reddit.com/r/CompileBot/wiki) ^| [^git](https://github.com/renfredxh/compilebot) ^| [^report](http://www.reddit.com/message/compose?to=compilebot&amp;subject=Report%20Abuse&amp;message=--report%20http%3A//www.reddit.com/r/java/comments/35c7ju/raspberry_pi_and_java/cr3lqq0%20Include%20your%20reason%20for%20reporting%20here.) 
It's better to program in Java without IDE in the very beginning, but when you are involved in some big projects, a productive IDE is necesssary, sometimes a must.
I feel that as long as your tabbing indicates which else the if go to it is alright. I am a self-taught coder though, so take me with a grain of salt.
I studied that for 2 hours the night before the test before I found it it wasn't required :C
Junior here, I thought it was pretty easy. I finished the multiple choice on time (accidentally left one blank though whoops) and had ten minutes extra on the free response. I gave a really convoluted solution for the word guessing game question, sorry AP grader.
 int a = 0; int b = 10; a = a + b; a += b; That said I still don't particularly enjoy; c|=b;
Does anybody have an idea when Websphere 9 will be released? I believe JBoss EAP 7 is looking to be available late 2015 or early 2016.
This. Unit testing should always be done. It will help you write better code by making sure it is testable and force you to understand what your code actually is doing. Also, someone else coming into your code can look at the tests and understand what your code is trying to do. Unit tests, although no one like to write them, are precious. 
Thanks for the suggestion. I could make it a generic instead of a string, and then it could be used like that
Link to course?
There's nothing wrong with if (b) { c = true; } It's the most explicit and easiest to read form of this logic, so use it unless there is a good reason not to -- and saving a few letters of typing is not a good reason.
If you're interested in using RPi as a server I made this tutorial for setting tomcat in the RPI: http://cooervo.github.io/tomcat-web-server/
No one is going run a random jar on [dropbox](https://vimeo.com/122611959#t=29m00s).
&gt;However, my declaring your methods to return an Optional, it serves as a reminder that the method may return a null. Uh no? Isn't that exactly what it's avoiding (the method returning null). The method returning an Optional serves as a reminder that the value may not be present within the optional, not that it returns null (because the method doesn't return null... unless you're stupid)
Let me emphasize this: &gt; saving a few letters of typing is ***not a good reason***. 
I did, and now my disk drive keeps opening and closing
Indeed, it seems like this is a trap just about every new programmer falls into just after they become comfortable with the basics, I know I did. Being explicit and clear about what your code is doing is ridiculously important when you are going to be maintaining a code base or are working with other people. Sometimes this means verbosity is a good thing, sometimes brevity is a good thing, it's completely dependent on the situation but specifically trying to make your code use as few characters as possible is often going to end up causing you a headache.
I think it was rather obvious what he *meant*.
Always good to clarify for anyone reading the article that may get confused.
I'd also add the size of the code base as a criterion. As to my experience, dynamical programming is fine until your program reaches a size of 1000-10,000 lines. Granted, tools have become better these days, so nowadays the limit is probably closer to ten thousand than to one thousand lines, but a some point in time programming becomes tedious using a dynamic language.
doyley24: Opensource? yes I will soon post the source code Milyardo: No one is going run a random jar on dropbox. why? duckes: I did, and now my disk drive keeps opening and closing I did not understand ...
There's also a lot more to Optionals that using isPresent() instead of ==null. In fact, I think if you're using if (optional.isPresent()) at all, you're using it wrong. The power of optionals come from its API methods that let you 'unwrap' the value in a smart way such that the consumer doesn't realise it was originally an optional, which this post doesn't go into. For example doSomething(optional.orElse(DEFAULT_VALUE)); should be used wherever if (value != null) doSomething(value); else doSomething(DEFAULT_VALUE); is used. EDIT: using correct optional method, inverted if statement to make sense
&gt; In fact, I think if you're using if (optional.isPresent()) at all, you're using it wrong But the doSomething method in your example will surely be checking of the optional is also present? To operate on the value in the optional you need to, at some point, ensure it is not empty... This is of course in the use case where there is no 'default value' and you are simply only operating on an optional that explicitly contains a non-null value.
Reasonably, people don't trust compiled jars as the code could be harmful. If you make it open source, then we can run the project knowing that it is safe by reviewing the code. Keep that in mind when posting for a community.
I guess this is where I love Groovy with its optional typing. Write the core using static typing and then let the fringe areas and extension points use dynamic typing.
Yes. Besides the usual snide remark that virtually all programming languages are turning-complete (and thus theoretically equivalent), Java has many libraries for this kind of thing. Besides the raw graphics, there are mechanics libraries like [JALSE](https://github.com/Ellzord/JALSE) and guides like [roguebasin](http://www.roguebasin.com/index.php?title=Main_Page) Really, just google "java roguelike" libraries, there's lots of stuff out there.
Thanks for the info! :)
There is something wrong. There is no need to introduce another variable simply to set it to exactly the same value as one you already have.
Use the reply button to reply to people. People won't run a random jar for the same reason they won't run a random exe.
It depends on your team. Personally, I prefer the shorter version. But I'm mathematician. I've got a lot of practice deciphering boolean expressions. If the other team members have a different background, you're possibly better off with the verbose version.
Which abandoned framework are you referring at? I've counted 35 commits to AngularJS during the last week, so I suppose you're not talking about Angular :).
Okay, would it be possible to programm a sidescrolling view with such libaries?
Decompiled ; It's safe.
As others have mentioned, you should post the source and allow us to compile it; To ensure that we don't run any malicious code. That being said, I went ahead and decompiled the jar; It's perfectly safe; Very minecrafty haha. Well done OP.
This post does not really belong here as /r/Java is for: **News, Technical discussions, research papers and assorted things of interest related to the Java programming language** and not so much about programming per se. Just posting a *jar* on a file host will most likely rather drive people off your post than actually wanting to check out what you did. Opening random *jar* files poses a security risk that very few people will want to take. I am not stating that your file is harmful, but there is a potential risk. Post in /r/learnjava, or in /r/javahelp, but please: post the *source code* along with the *jar* and don't expect people to execute a random file. Also, use github, gist.github, or any of the commonly used source code hosters.
This post does not really belong here. /r/Java is for: **News, Technical discussions, research papers and assorted things of interest related to the Java programming language** and not so much about actual Java programming. It would better fit in /r/javahelp or /r/learnjava. About your question: Yes, it is definitely possible (and has been done before). Java is an all-purpose programming language and has virtually no restrictions on what can be done with it. (Just think about *Minecraft* - it's programmed in Java.) You'll probably need extra libraries, but that's basically it.
Mate, what they're trying to tell you is your only limitation is your experience with Java.
Sorry, you're right. I was getting orElse mixed up with Map's getOrDefault, which does similar unwrapping for nullable map values
Sorry, I think I got the if statement inverted, I've fixed it now, as well as used the correct method of orElse(). The point I was trying to make was that optional's API can be used in a way that means you really never need to use it the same way a null check is used. Another situation would be where instead of the value being consumed, it has some method invoked on it, or some unrelated code block executed. For example: if (value != null) { value.doSomething(); doSomethingElse(); } With optionals, you can use the ifPresent(Function&lt;T&gt; consumer) to achieve the same result. optional.ifPresent( v -&gt; { v.doSomething(); doSomethingElse(); }); It might not seem any more expressive but it means you can remove all explicit null checks from your code. Also, if you have some public API with arguments, you can also wrap the arguments in an optional using Optional.ofNullable() and then use them from there, in order to safeguard against API users who pass nulls in by mistake.
So how would you suggest changing this? Optional&lt;String&gt; test = Optional.of("test"); if (test.isPresent()) { System.out.println("Present"); doSomething(); } else { System.out.println("Not present"); doSomethingDifferent(); }
Yes, all of the above. Having clear names that clearly communicate the intent of the (field, method, class) is gold for someone else who has to read your code (or yourself in a few months). In a similar fashion, any potentially unclear bit of code is a candidate for extraction into a method and/or field. For example I will refactor "`if (account != null &amp;&amp; SecureStatus.SECURE == account.getSecureStatus())`" into "`if (isLoggedIn(account))`". The latter much more clearly communicates the intent of the test, especially for someone unfamiliar with the code.
Lol your code is just a longer version of isPresent? Yours unboxes the Boolean value in the condition whereas isPresent doesn't. I don't see why you're trying to achieve something a library method already achieves.
I've found using isPresent()/get() to be useful in places where I want to throw checked exceptions (e.g. IOException from some I/O code) cleanly in the "isPresent" case (which you can't do using map(), as the lambda you pass to map() can only throw unchecked exceptions).
i think youre shadowbanned mate
Until you get someone on your team who loves to auto format their code.
try to go to his user page, its not accessible.
Good point, how about [optional.orElseThrow()](https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#orElseThrow-java.util.function.Supplier-)?
My favorite part of JavaFX has to be the [Tasks/Service API](http://docs.oracle.com/javafx/2/threads/jfxpub-threads.htm). It's easy to create a task, submit it to a executor service, and when it's completed, do something with the returned value, like updating an existing ListView control. final Task&lt;List&lt;Integer&gt;&gt; task = new BackgroundTask(); task.setOnSucceeded(new EventHandler&lt;WorkerStateEvent&gt;() { listview.setItems(FXCollections.createObservableList(task.getValue)); }); threadpool.submit(task); 
It has been mentioned before, but `if (something) true; else false;` probably also is a common pet peeve of many an experienced developer. Apart from that, look what the standard APIs (or third party libraries) have to offer before writing code. The next colleague who badly reimpliments `HashSet.retainAll(...)` won't be as lucky as the last one...
not sure
I think you've misunderstood. I'm not talking about throwing an exception if the optional is empty (for which orElseThrow is fine). I'm talking about throwing checked exceptions from *within* the body of the lambda passed to a method like isPresent, map, etc. To demonstrate: optional.ifPresent(x -&gt; { // you can't throw a checked exception here (because the accept method in the Consumer interface does not let you) }); v.s: if (optional.isPresent()) { T x = optional.get(); // but you can throw one here }
Wasn't hashmap revised in java 8? I thought it didn't use linked lists anymore 
Where?
[Here](https://apstudent.collegeboard.org/apcourse/ap-computer-science-a/exam-practice)
Sparse Array honestly fucked me over
i think there is a problem on line 574...
Link to the GitHub: https://github.com/caneroj1/gitRecommender This was built as a part of my AI class's final project.
And now someone @ javarticles.com is wondering why a 3-year old blog post is now their most popular post. 
&gt; Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 4412861 bytes) in /home/content/p3pnexwpnas04_data03/21/2360221/html/wp-content/object-cache.php on line 574
Nothing in Spring is standalone. It is not really a modular framework.
I think you know it is Angular. You should know that Google has already announced that Angular 2.0 will not be backwards compatible. It is a new framework that happens to share the same name. Angular 1.0 is a dead end.
It also hasn't used that creeky interation scheme since before Java 5
This looks really great! I'm excited to look into it. Can you eli5 how it learns?
Wouldnt take too long to roll your own. Apache DBUtils + BoneCP for pooling. Let BoneCP handle the conenctions, then just use DBUtils to make the sql calls.
http://persism.sourceforge.net/main.php
Nope, no need at all. If you actually need to run code that accidentally accesses AWT/Swing, just run a Xvnc server. 
ah, thanks. This server will likely be running either Minecraft or /r/terasology on the side so i needed to know if going with out integrated graphics was wise. 
If its a Minecraft server, just start it with the --nogui flag, and you won't ever need any kind of gfx on that box.
No, just make sure to enable headless mode for your application. -Djava.awt.headless=true More information here, http://www.oracle.com/technetwork/articles/javase/headless-136834.html
I would say first things first, make sure that developing software is what you actually want to do. There is a pretty good post [here](http://www.reddit.com/r/cscareerquestions/comments/35ht4u/what_is_a_cs_career_really_like/) on what a career in the IT field in general is like, and I am sure there are other places you can find more on what it's actually like to work as a software developer. Once you decide that this is what you actually want to do, it is a bit of a toss up from here. The great thing about this field is that you don't *need* to have a degree to get a great job, but it certainly doesn't hurt either. The amount of resources online (free and paid) is mind boggling, so there isn't much of a likeliness that you will learn something from a university that you couldn't learn from some resource on the internet. If you prefer to go the route of a degree, go for it. I am not sure of the details of pursuing a Masters degree in a different major than you got your Bachelors in, so I can't really help out there. Also, yeah this might not be the best subreddit for this, since it doesn't have much to do with Java specifically. Good luck with everything. :)
Holy shit, looks useful. I save all my text messages from my phone (to look back and laugh), I wrote a small Python script to parse out the XML backup into a more readable format. Python barfs when it encounters an emoji and throws an encoding error. I've had to set the encoding to UTF-8 so it wouldn't barf. Once finals are over I plan on using this library to convert those suckers into HTML entities. Then format the whole thing to a pretty web page.
Your post is neither completely right, nor completely wrong in the subreddit. It would be better suited for /r/Javahelp, /r/learnjava, or /r/learnprogramming, though. The rest of this answer goes along with what the others suggested, but I want to offer you some online possibilities: + The sidebar in /r/learnjava has links to some good resources + /r/Javahelp has a [wiki](http://www.reddit.com/r/javahelp/wiki/) with links to [tutorials](http://www.reddit.com/r/javahelp/wiki/tutorial_list) + /r/learnprogramming has a [wiki](http://www.reddit.com/r/learnprogramming/wiki/) with links to [tutorials](http://www.reddit.com/r/learnprogramming/wiki/online). They also have a pretty comprehensive [FAQ Section](http://www.reddit.com/r/learnprogramming/wiki/faq) that could possibly answer some of your questions. Now for some really good online courses that are also listed in some of the resources above: + The free *MOOC: Object Oriented Programming with Java* of the University of Helsinki (in English) is very good. + [Part 1](http://mooc.fi/courses/2013/programming-part-1/) + [Part 2](http://mooc.fi/courses/2013/programming-part-2/) + Also, the free course "Java for Complete Beginners" is a nice resource: + [CaveOfProgramming link](http://courses.caveofprogramming.com/course/java-for-complete-beginners/) - John Purcell's site + [Udemy Link](https://www.udemy.com/java-tutorial) + [YouTube Series](https://www.youtube.com/playlist?list=PL9DF6E4B45C36D411) 
you should call you app tviter?
Yes, you can just pull in Spring-JDBC and use it. You may require another jar or two, but you can use the JDBC library without any Spring DI. Just create a new JdbcTemplate and away you go...
I agree that it could return null - if you have a bug. If you return an optional there is an implicit contract that you will never return null. Treating optional as "maybe null anyway" makes it a lot less useful. It is as if you wrote the javadoc to say "returns a list of foo or an empty list if no foo is present" and then expecting the caller to make null checks. 
What?
What you're going to end up with is a piece of paper saying congratulations on a broad understanding of computing - not creating software. Software engineering is a white collar trade skill, not something university's teach you how to become proficient at.
That string.substring(i, i+1) was way too stupid for me to comprehend
&gt; Python barfs when it encounters an emoji and throws an encoding error. I've had to set the encoding to UTF-8 so it wouldn't barf. Python throws of course an encoding error, if you choose an (output) encoding, which has **no** character for such a unicode code point within! That is not related to emoticons but to the [knowledge of unicode and character sets](http://joelonsoftware.com/articles/Unicode.html)! Java does often not complain (neither does Python3), because the **default** encoding for all IO-operations is the default encoding of the underlying operating system. Whenever you read (*decode*) something that has an **incompatible** encoding to the default encoding (CP1252 for many western european Windows Versions vs ISO-8859-1 for example), you will get errors in all unicode aware languages, if you don't tell the operations the exact encoding of the source. The same is true for the *encoding* process Here is an example for Java: package encoding; import java.nio.ByteBuffer; import java.nio.CharBuffer; import java.nio.charset.CharacterCodingException; import java.nio.charset.Charset; import java.nio.charset.CharsetEncoder; import java.nio.charset.CodingErrorAction; public class EncodingTrouble { public static void main(String[] args) throws CharacterCodingException { // "\u1F609" = WINKING FACE GetEncodedBytes("This will not throw " + "\u1F609", "UTF-8"); GetEncodedBytes("This will throw " + "\u1F609", "ISO-8859-1"); } static byte[] GetEncodedBytes(String s, String charSetName) throws CharacterCodingException { Charset charset = Charset.forName(charSetName); CharBuffer unicodeBuffer = CharBuffer.wrap(s); CharsetEncoder encoder = charset.newEncoder().onUnmappableCharacter( CodingErrorAction.REPORT); ByteBuffer byteBuffer = encoder.encode(unicodeBuffer); return byteBuffer.array(); } } Python works in a similar way (as C# does and so on). So you just have to be aware of the difference between **encoded Bytes** and the **internal String** of a language and how to **proper** convert between those two **different** concepts. This is true for every language that has an internal string representation on a higher level than just bytes (like C oder C++). By the way: the error you mentioned is definitly **not** thrown during the parsing of an XML file by python, as it is an **encoding** error, which is thrown during the opposite process, the **encoding**! During the parsing process python would throw a **decoding error**, for example if the XML file has a wrong encoding attribute related to the characters within. (Python 3 has imho made the wrong decision to choose the OS default encoding and so repeated the failure Java has made long time ago. It would be so much simpler and cleaner if the default encoding would be static, as *UTF-8* for instance. But that's another story...)
Worst Grammar O' the Day Award
I would look at [dropwizard](http://www.dropwizard.io/), [spark](http://sparkjava.com/), [jersey](https://jersey.java.net/), and [restlet](http://restlet.com/products/restlet-framework/). To get an idea of performance, I'd probably start with something like [this](https://www.techempower.com/benchmarks/#section=data-r10&amp;hw=peak&amp;test=json&amp;l=3k]) to narrow down your options. Obviously it'll depend on a lot of variables. 
Isn't jersey just a reference implementation of the JAX-RS spec? Does it come with a lightweight runtime now? Regardless... OP should definitely research JAX-RS, JAXB for marshalling and Jackson for JSON format. Then you need to decide if you want to deploy to a container or as a standalone service
That is basically what I've been doing for 6-1/2 years. I hand write the Liquibase files to generate and upgrade the database. Beauty of this is that all databases, whether new or old end up in exactly the same state once the upgrade is run. I also hand write and annotate all of my entity beans for Hibernate. I write the Liquibase table definitions first, then do lots of copy/pasting from existing Entity beans for each of the getter/setter and 1-M, M-1, M-M relations. I also have an enumerated type that has one value for every table. That enum type and each value has parameters for the class and earlier declared enum values which are tables referenced by this table. Then there is a public static void main( String... args ) { . . . . } function in the enum class that prints out: 1. Each table and what tables it references 2. Each table and what tables reference it 3. A stack of DROP TABLE statements in the correct order. (Handy sometimes) 4. A stack of DELETE FROM statements in the correct order. (Handy sometimes) There is also a public static function in the enum class that adds table configurations to a Hibernate configuration for every table. (Remember, each enum value constructor gets passed the class object for the entity bean class it represents.) 
Have a look at the Tech empower benchmarks as a starting point. https://www.techempower.com/benchmarks/ You probably want one of the non blocking libraries. What database or state storage mechanism are you using?
Basically we are using two methods: nearest neighbor and decision trees. The first thing we do is calculate your "Average Language Composition" across all of your public repos, which is the doughnut chart labeled "Language Breakdown," and try to match you up with repositories with similar language compositions, your specified keywords, more recent commit dates, and high numbers of stars. The decision tree section still needs some work, but we try and get an idea of whether or not you will actually follow through and like that repository on GitHub by analyzing your starred repositories.
servlet
 public class Main { public static void main(String[] args) { RuntimeException up = new RuntimeException("Up, in heaven!"); throw up; } } 
It really depends on what "processing" means. Includes database read/write? Any outside service? With not a lot of experience with Java it seemed like those were good places to start. Some lightweight, some not so lightweight. 
Computer Science is an applied Science. I don't see why you can't apply to to Poly Sci. :) 
For sake of simplification we can say that processing is simply running a calculation on the fields of the object I received. I don't care much if the container is lightweight or not as long as it provides good underlying performance, and allows for scalability 
My connection is quite good "10mbps" but the oracle website is the only website where I dont get download speeds. Which country are you in ? 
If "in memory" you mean a network hop remote store like couchdb, this will be the bottleneck even with the most optimized app-server.
fluent-jdbc may be a good option: https://github.com/zsoltherpai/fluent-jdbc 
Yea yea, but that's a different story, for our sake we can assume immediate lookups, the processing time will not take too long. And even if it is long the server must add to this delay as little as possible Edit: If we do use couch it will probably be more of a backing agent to the actual data, assume the important data is available in ram (obviously this is another issue to itself with it's own challanges but its not one that currently concerns me) 
Maybe, but why only oracle website , why not other websites ? oracle website md5: 2747e20e210bfd649e6087067f439d07 softpedia md5: 8D9BADE03F9D25A648C5618B032BDF1E
I migrate them to sbt. I use [sbt-pom-reader](https://github.com/sbt/sbt-pom-reader) to port some builds over, replacing executions one at time, until the sbt build reaches feature parity.
You say you don't know anything about Java, throw up a test without doing any tuning and say "performance was mediocre from what you could tell"? Really? What answer could someone give that would satisfy you? 
The top one bothers me only because it doesn't contain brackets at all and some junior developer is going to mess up logic. I would be pretty pissed if I had to deal with constantly going to between brackets on the same line or on their own, it doesn't really matter as long as it's consistent.
Ivy is a semi-dead project as well, only basically only propped up by sbt using it in it's backend.
/r/cscareerquestions which is linked in the side bar would be the better subreddit for this question.
Well, I said it should be "thin" - I don't think something that pulls in a bunch of extraneous Spring components meets that criteria.
Nice, this is pretty-much exactly what I was looking for, thank you.
Not an option here I'm afraid, Java 8 only.
This smells like a homework prompt.
You might look at vertx, it is evented so there is not a lot of overhead while you retrieve data from your datastore. If you do want to also have data cached in-memory, vertx is well integrated with hazelcast, an in-memory datagrid that can be clustered. Just make sure you look at vertx v3, v2 is very different.
Okay, I'll post the source code. Please post in the Comments bugs or let me know about bugs or what I add in future updates. Thanks! =)
+1 vertx. You can easily setup and cluster multiple instances by adding -ha to the commandline. You can also spawn workers to handle multi-threaded blocking operations if you really need it. It ships with an eventbus that allows communication between other vertx instances on your cluster, so you can host multiple micro services with ease without making everything RESTful. The logging framework uses logback underneath the hood so its compatible with log4j. Dropwizard is another good choice if you're used to a fully featured framework and the more traditional request-reply model.
Sounds good will definitely look at it thanks. 
Not logically the same as `c|=b.` If c is true and b is false, c stays true in `c|=b` but becomes false with `c=b`.
I think you are wrong. Python has quite good Unicode support with its string concept. Of course you need some discipline to handle it right - but you need that everywhere, especially within a dynamically typed language. The rule is quite simple: Decode as early as possible and encode as late as possible during your process. That is the same as in other languages, as most of their APIs is based upon strings. In python this is not different! Further more you have to distinguish between python 2 and python 3 as the string semantics have changed in a deep way. In theory in Python 3 they tried to cover your critical point: they introduced a ``byte`` type for **encoded** texts. So ``string`` remains as an interface for pure internal Unicode representation. But there are drawbacks with this approach - or to be precise: with the realization -, as the byte interface was ridiculous simple and offered too less functionality. ``print`` has no parameter for defining the output encoding and so on. Overall I had less trouble in version 2, even I like the approach to clearly provide a separate interface for both types. But that is far away from a mess ;-) I would assume that within the Java world most people do not know more about the fundamental concepts! Many libs and frameworks are built all around strings as they might have little contact to IO on a lower level. Database driver are just configured correctly and voila you talk with strings to the DB and not on a byte level... so imho it is fine to foster the approach to just deal with internal Unicode types most of the day as a common base. But for the sake of clearity and platform independence it would be better to have a static default encoding when it comes to decode bytes or encode strings! That is where many languages have failed. The problem arises sooner or later and then it is much easier for developers to cope with a clear and easy rule, rather than the *magic* of a platform dependend default encoding...
Good to know IIS can handle the data. From my tests with azure worker roles and web api performance was abysmal. If we have to write native c++ code than I'd rather just write java and learn the new stack. Btw not sure what you meant by scaling to 10ks but we need way more then that. That is a minimum per server. Today i got jetty runing with 50k so it seems nice. Netty seems a little low level but seems to provide excellent results also. 
We did billions a day and broke SLA if we couldn't prove to our customers it left our network in under 30ms. This information was used before an ad could be rendered, so depending on ad company, they would give up on us after 40ms (same DC) to 100ms. We had various sized configurations all over the world, even the slowest dual core setups with anemic memory we had did tens of thousands of requests per second, and our biggest boxes we never really thoroughly tested the upper edge, but we had boxes cross 600,000/s in real production use, I suspect our cap was in the 1.5M/s range on our quad (32 core/64 thread) boxes. If you need to go beyond that without too much hardware, http://www.seastar-project.org/ is amazing, a project I am currently working on has been testing it -- with mindblowing results so far, but setup is a bit of a beast. If you are just serving cached results, using the seastar memcached is awesome... we are getting 2M+ r/s from cache on (top end, 5960X / 64GB memory / Stripped SSDs) desktop hardware. 
Sorry to tell you that you are in the wrong subreddit. /r/Java is not so much about Java or Android programming, but about: **News, Technical discussions, research papers and assorted things of interest related to the Java programming language** You better post this in /r/Javahelp or in /r/Androiddev, but be sure to read and obey the posting rules there. General posts as yours is are not really allowed there. You need to be a bit more specific with what you need help on. **Post removed:** wrong subreddit.
The problem with a "no deep sh*t" intro to Maven is that maven is designed to be a project management tool, and all projects are different. There are certain common things that MOST maven projects do, and [sly_as_a_fox](/u/sly_as_a_fox)'s 5 minute tutorial will get you going there, but beyond that there is so much that Maven can do, it would be impossible to distill it into a short and simple tutorial.
Why does the last update date of ant-contrib matter? That just means it has all the features it needs and is stable so doesn't need updating. If you need any tasks offered by ant-contrib then by all means use ant-contrib. Java is very serious about maintaining backward compatibility so I doubt there is any danger of ant-contrib not being compatible with future Java versions.
Why do you think Ivy is semi-dead? There is still a new release every 3-6 months. If you use ANT and you want dependency management then you use Ivy. Ivy will be dead when ANT is dead, something that is still very very far off, if ever.
Pitfalls of event systems like vertx is that you can quickly and unintentionally block the event loop. They're poor suited to doing actual real processing without jumping through threading hoops (I think vertx has a "long running task" command just for this). If ops processing takes any real time they may accidentally stall the whole app. Personally I don't like vertxs decoupled routing style. I find it hard to debug and navigate who is subscribing to what and when. At least with akka you have clear hierarchies of actors that you can trace Honestly if I was op I'd use dropwizard with async responses and horizontally scale by tossing a few more instances of the app on a box or two behind a load balancer. 
You could also use Undertow, which is built on Netty and compares favorably to using it in the benchmarks [here](https://www.techempower.com/benchmarks/#section=data-r10&amp;hw=peak&amp;test=plaintext). It also gives you handy abstractions on top of Netty like servlet hosting, http/2, SSL, etc.
Spring ORM is very good for that. Very lightweight JDBC helper classes.
Sounds fast, though we cant cache results at all. Still, writing c++ will be more of an issue for us than using a new stack. But good to know IIS can do well under load. Wi) look at the link you provede now, thanks. 
Current from [head](https://github.com/undertow-io/undertow/blob/master/pom.xml) is Netty 4.1.0.Beta4. Undertow is *also* the HTTP server that underpins JBoss's Wildfly application server.
Just wanna say that when I learned Maven, I took a year long sabbatical from just about everything else in order to create fully working (tri-level) enterprise POMs (with scm, build, site, and internal archiva repo mappings) up and running bug-free. Aside from basic, all-encompassing tutorials, StackOverflow was my best resource during that time. The good news is that it's pretty stable and upkeep is rather minimal after you achieve that level of Maven zen, but it takes awhile to ramp up and understand how the pieces fit together. The benefit? I can check out enterprise-grade projects with dozens of modules (and build them) in about four clicks. Also, CM has never been so easy. If you're just aiming to use flat project-level POMs for dependency management, and no CI/builds/artifact libs/version management, well that might take a day or so. IMO there's little to no reason to learn more than that unless you want to go big and learn how it all works with the intent of some practical application down the road. TLDR: *Maven ftw* Edit: words
So there is a massive tradeoff between eventual consistency vs transactional. If you go transactional ( or at least immediately consistent) , your latency numbers will be worse since that data must get to all the nodes before the response. Use this requirement sparingly if you insist on low latencies. To be honest I'm not sure what the best architecture would be around immediately consistency (leaving aside the tighter possible requirement on transactionality), so this is probably the first thing I would prototype and benchmark. I think it's safe/healthy to design for multiple machines from the get go. It's MUCH harder to add this if you don't design for it from the start. Even if you start with only two machines that are bored most of the time, you know your system will scale better. You also get high ( or higher ) availability. Memory is pretty cheap these days, so buy more memory and keep the entire working set of data on every machine. receive your request, calculate your response, queue up a cluster wide update, and send your response(note all of that is within the JVM, so no worries about network latencies ). Inthis case you must use queue/message system which has guaranteed delivery if you want to ensure that the nodes actually ARE eventually consistent.
Sorry! Was just trying to add some perspective. If you want to learn how to use "average" maven features, which probably means creating a simple project and specifying dependencies, take a look here: http://www.mkyong.com/maven/how-to-create-a-java-project-with-maven/ There's also a lot of other good maven material on mkyong.com
&gt; If it's a new project I would recommend Gradle instead, IMHO. I wouldn't unless it's an Android application. I'd stick with Maven.
Because the person that are replacing the java with something infected with malware only hardcoded the url från oracle, not the one from softpedia. 
My kingdom for a simple project manager. Not every project has tens of dependencies. I'd like to throw together some lines to generate a jar with or without certain classes depending of the args.
RE Last update not mattering too much..... true, it isn't that significant. Don't get me wrong... I LOVE ant-contrib. I like to see and use active projects so I can help with bug reports, etc etc. So that is just a preference of mine. 
I've tried maven and am not a fan of the "magic"-ness of how it handles dependencies. May be that is the ant part of my brain complaining. Dependencies absolutely need to be checked into code so that entire projects can be resurrected for maintenance releases and have EVERYTHING they need to build in the repo. I'll probably look more into porting to gradle when I have time.
If it's a Java application I'd stick with Gradle as it's easier to read, less baffling, continues the trend away from horrific xml, produces nicer error messages etc.
&gt; stick with Gradle as it's easier to read Agreed &gt;less baffling Depends on how much imperative code has been added. &gt;continues the trend away from horrific xml This is a case where you are making a general statement on a tool based on it's use. With schemas you essentially have a type safe DSL. With editors it's not a pain to write. It's just reading it sucks. For configuration files, it's better than YAML, properties, etc... &gt;produces nicer error messages etc. Debatable. What you're ignoring: * maturity/stability * breadth &amp; depth of plugins * the archetype functionality * the community penetration * the stable intgrations IntelliJ and Eclipse both don't work with it as nicely as I would like.
Not to pick a fight selectively (you probably know a lot more about this than me - i'm doing more java stuff than usual at the mo) but: &gt; It's just reading it sucks. I find that reading and making tweaks to large xml files (maven, for instance - you're not going to wade through data in xml format) is where the pain is. I mean, even perl is ok while you're writing it. I've never used a single plug-in with maven so perhaps that's part of the problem. From the moment I saw xml, with those initial 3 or 4 lines you just get used ignoring after a while (but why are they there if you don't need them), and the fact that &lt;everything&gt; &lt;is&gt; &lt;written&gt; &lt;twice&gt; &lt;/twice&gt; &lt;/written&gt;&lt;/is&gt;&lt;/everything&gt; it just frustrated the hell out of me whenever I have to use it. For situations where you're not validating/translating stuff (ie config files!), and assuming Eclipse improves, do you think it's good that things seem to be moving away from xml or would you still miss some elements (no pun intended) of it? 
You're right about needing to keep the dependencies available, and that's why you would also need to run your own maven repository using something like artifactory or Nexus. It's very easy. Note you should probably be running your own repository if you're using Ivy anyway. 
have to concur
&gt; maturity/stability Good to know maven will still be bad in 2025. &gt; breadth &amp; depth of plugins Breadth &amp; depth? I assume you mean numerous. You don't need plugins when you can just define functions to accomplish what you intend to do. &gt; the archetype functionality Not unique to maven. &gt; the community penetration Just because maven was first, doesn't make it right choice. &gt; the stable intgrations IntelliJ and Eclipse both don't work with it as nicely as I would like. Handwaving.
&gt;Good to know maven will still be bad in 2025. Thanks for the circular argument. Moving on to a useful point. &gt; Breadth &amp; depth? I assume you mean numerous. You don't need plugins when you can just define functions to accomplish what you intend to do. I'd rather not have every build file be a snowflake. Declartive style of builds makes a whole lot more sense. Gradle bridges the snowflake crape to sensible clean plugins. It's just not there. &gt;Not unique to maven. You're right, I should have focused on the variety of templates. &gt;Just because maven was first, doesn't make it right choice. I never said that. For a user just picking up creating a sensible build package for a JVM application, I would argue that Maven is easier to pick up because of that penetration. &gt;Handwaving. [regarding IDE integrations] Could be my experience, but I get a stack trace dump pretty reliably with the Gradle plugin or within IntelliJ. I made it clear that it was my personal experience. Are you free of issues on both platforms? Did you start from scratch or import a script?
It's _very_ unusual to use it everywhere. It clutters your code and will easily hide a single meaningful `this`. It's very usual to just use it where has a meaning - in invoking a constructor from a constructor, or in assigning a value to a field in setters, constructors. If you look at any modern Java project, it will only use the keyword where needed.
We've been using Crystal Reports but switched to Jasper Reports. Jasper is free, actively developed, keeps report definition in xml files, has a nice API. We use reports which are based on SQL Views. User can set parameters for the reports, but he cant change the layout.
this.isSparta();
Of course, the question is and always will be opinion-based, so your opinion is as valid as any other one. In my experience, though, it's a teeny tiny minority. I seriously can't think of any decent library that uses it. And about the `m_` and `s_`, these are, in my opinion, horrible things that should die and burn. Your IDE will happily highlight your local variables / fields / statics in a different way, effectively removing the need for any non-semantic naming. And again, luckily, there's virtually no one that uses this nowadays.
I disagree with the sentiment. I don't like seeing references without an explicit 'this'. The same with unqualified static references (especially foreign through static imports). It might make lines longer but I find it scans better. Is a personal preference for the verbose to make things clear. Call it a personal quirk. I try not to "fix" other people's code and of course you should adhere to a given projects conventions and standards. I mean some people think that using brackets around one line if statements is too much clutter. Lunacy!
You can definitely write declarative builds with Gradle, and the upcoming model DSL should make that easier. The problem is a lot of people see "groovy" and immediately ignore the Gradle APIs (to be fair, the Gradle user guide is poorly maintained and confusing, even though the DSL and API docs are excellent). I agree that builds shouldn't be special snowflakes. And I would argue this is actually easier with Gradle, because plugins use the same language and api as the build files, so it's much easier to extract logic from a specific build and generalize it into a plugin. We routinely lift something that was project-specific into a plugin or common configuration to enable re-use across projects. Thus, individual projects can quickly make changes to try something out or do something new, without turning everything into special snowflakes.
Where I work we only use it whenever there are two variables with the same name. Even if the code compiles/runs fine it just makes it more readable if you clarify which variable you are using.
[whatyearisit.gif](http://i.imgur.com/omBCzFn.gif) --- ^(*Feedback welcome at /r/image_linker_bot*) 
Gradle seems simple to me: plugins { id 'java' } tasks.jar { exclude '**/*Foo.class' }
&gt; For example, m_field or s_staticField Oof, I wouldn't be able to resist the urge to rename any code I saw like that.
It's awesome! Play is my goto framework. It is ridiculously easy to create a project and get started writing the code you need to write. It's not as frameworky as other frameworks I have seen, so it's very beginner friendly. Although that may seem like an absolute good, sometimes the Java API doesn't have what you need, and you have to come up with crazy work arounds to use the Scala APIs for the more advanced features. Here's an article I wrote on that topic: http://www.ivanmartinvalle.com/blog/10271105/play-framework-java-filters . I'll be happy to answer any questions you have!
jar files will soon be a thing of the past. EDIT: downvoted, really? It's in an upcoming JEP. Oracle are dropping jars for modules.
Of course the brackets *have* to get there own line too. if(condition) { statement } 
While I'm not a fan of underscores, the "this." or "mField" naming convention is nice for non IDE code browsing, like if your shop uses github.
This information seems pretty useful! It also gives me something else to look into so I can learn more about how to do this. This is probably how the thigns like IBM Health Center, AppDynamics, and New Relic work. 
In setters and when necessary in a closure. Can't think of any other good reason.
I bet you use that format on for loops too, don't you?
I believe you could implement a custom class loader to do something like this. It would be possible to have a byte array of valid java byte code that you load and execute. See: https://docs.oracle.com/javase/7/docs/api/java/lang/ClassLoader.html#defineClass(java.lang.String,%20byte[],%20int,%20int). I don't think there's going to be any performance difference though, unless you are specially crafting that byte code.
Trying to start a holy war? In Java brace on the same line
Try including asm in C code, expose it to java through JNI, and hopefully you get to see some real performance benefits in your library - though at the cost of deployment complexity for your users.
agh you people!
Did you actually read what you replied to?
You bet I do.
Going against the frothy circle jerk here, but I thought it was pretty fucking stupid too
Google used to make use of that convention in Android API implementations. They might still, but I haven't checked in there for a while now. I also dislike it. Now people might say it's good for when you don't have an IDE but in that case I would prefer "this" over naming convention that can be broken.
Now I want a code formatter plugin for this :c
Pretty much this; not to mention looking long and hard at the algos used... 
&gt; can be clearly communicated in non IDE environments I don't use an IDE, but I still think using 'this' everywhere is painful clutter.
i prefix fields with _ instead. there is a lot of hate for this convention, but i love never having to type this, and it avoids accidentally assigning a field to itself (this.field = field) if a parameter of the same name is renamed. edit: 6 people favour cosmetics over robustness
great stuff
Yeah. You can't simply do this in the language itself, you need a specialized library for this. There is a lot of them out there, so here's a random sample based on a single google search: [ASM](http://asm.ow2.org/), [Byte Buddy](http://bytebuddy.net/), [Apache Commons BCEL](http://commons.apache.org/proper/commons-bcel/), [JBoss Byteman](http://byteman.jboss.org/), [Javassist](http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/), [cglib](https://github.com/cglib/cglib), [Serp](http://serp.sourceforge.net/), [GNU bytecode](http://www.gnu.org/software/kawa/api/gnu/bytecode/package-summary.html), [Cojen](https://github.com/cojen/Cojen), etc. All of these seem to be able to help you with the task. Good luck!
I don't believe you will get the kind of performance benefit you are expecting. The degree to which you could improve the code by hand-writing it in bytecode instead of Java is way smaller than that of assembly -&gt; C. Do you have any particular use-case where you know writing in straight bytecode would give you better performance? I can't imagine any case, tbh.
I always use a proper IDE, since it makes code more readable. When I see a certain color, I know we're talking about class scope, which saves a lot of brain power. Example: https://i.imgur.com/SHrYHBs.png (It's an old screenshot, not optimized for this purpose.)
I only use it in constructors and setters, although most of these are generated automatically on-demand by my IDE. A lesser-known usage of "this" is to [refer to an outer class's method](http://stackoverflow.com/questions/56974/keyword-for-the-outer-class-from-an-anonymous-inner-class), which has some niche uses. I've used it to delegate methods to other classes from a generic class.
I like using `this`, because it makes it easier to separate instance methods from static methods.
The only upcoming release we have announced is the 8.5.5.6 fixpack currently estimated for 26th June [source](http://www-01.ibm.com/support/docview.wss?uid=swg27004980).
I use this when accessing fields, when accessing methods in the same class this becomes redundant since you clearly see the method being called without an instance. 
&gt; You see some very nice things that aren't really that GUI related like observable properties and observable collections, but they're still in the JavaFx package which I suspect is because of licencing reasons. My impression is that they are in JavaFX because they are necessary for JavaFX. You can only update the GUI from the main thread, so having GUI observing underlying data structures and updating themselves is necessary to enable multithreading.
Yes, m_blargh is wrong for Java. It seems common in C++ but I've got no idea why since it provides nothing of value. There was a period where IBM Software Group pushed a style like this: void function(String pFieldName) { // Class-level fields are named as normal, parameters have a 'p' prefix fieldName = pFieldName; // Local-method names have a 'm' prefix String mFieldName = "something"; // ...and this means for everything for (int mI = 0; mI &lt; something; mI++) { // Do stuff.... } } But even this style is wrong. Just use this to disambiguate, and never use the same name as both method parameter and method local variable. 
Sounds like something that could/should be prevented by the JVM in a future release, but an interesting dive into APIs where ordinary mortals should never venture.
maybe_longMethodsWouldBeMoreReadable_using_camelCase_combinedWith_snakeCase(); 
And here is a comparison of some non-performance related features: | Availability | License -|--------------|---------- **CoralReactor** | Request Trial | Unknown **Netty** | [Download Now](http://netty.io/) | Apache License v2.0 
Always always? I mean I quite like my "import static org.junit.Assert.\*; import static org.mockito.Mockito.\*;" in my tests, not to mention other things. I think adding "this" just to mark non-static methods will make code less readable (beside IDEs can mark statics).
Right. And I'm talking about using static methods of Assert and Mockito without writing "Assert.assertTrue(x)" or "Mockito.verify(something)". IMHO importing those static methods makes tests cleaner (also may be useful in other places). In other words I disagree that one "should always" use class name with static method.
There are ways to do it, but it's really a waste of time. You're better off simply making cache-conscious choices in plain java code. The HotSpot VM is really good at finding the busy parts of your code, and compiling it down to machine code for you. This will be much faster than any Java bytecode you, or anybody else, can write.
A complete change log can be found here: https://www.linkedin.com/pulse/released-jeplayer-jepldroid-v13-jose-mar%C3%ADa-arranz-santamar%C3%ADa
If there are brackets, they get their own line. I guess people feel strongly about code formatting, lol.
Yeah, I do the same thing but only for unit tests because I don't want a lot of code and I know what assert methods I'm calling. However in the main code, I advise to alweys prepend the class name because you never know where the method is located.
It does look interesting as an option for commercialized support. But I'm surprised Oracle's lawyers aren't all over this thing. Looks like they pretty mush ripped off Glassfish, renamed some classes and packages as their own and said pay us. Working for a company that currently does pay Oracle for support for Glassfish (not my decision), I wouldn't touch this with a ten foot pole, in case of audit.
I'm a Mac guy at home, but I'm always forced to use a Windows PC at work, which I generally hate. However, I'm so used to using Eclipse and developing Java on work Windows PCs that I find it trickier to develop on Mac. Things like setting environment variables, installing Tomcat, JBoss, MySQL, Oracle, stopping and starting services ... I generally find to be easier to do on Windows than on Mac. Mainly because Windows distributions usually come with simple install wizards and so on. I also find -- and this just might be because I spend more time there -- I also find that Eclipse looks and feels better on Windows ... something about the size of the fonts and the way the scrollbars work. I did actually work on a full time Java dev project on my Mac once (on a six month project) and I got used to the (slight) differences pretty quickly. At the end of the day, I think you're fine either way. But I *generally* find it easier to get things going faster on Windows. Also, when developing web apps on Windows, you have the benefit of being able to test on the fly with IE, which is (sadly) highly necessary as IE has way too many eccentricities.
Not on Android, sadly.
I just don't see how any developer can use a Windows machine for development (unless you are a Windows developer). Cygwin makes Windows somewhat tolerable, but I much prefer OSX. I would also happily use Linux if I couldn't have a Mac for some reason.
I prefer working in Linux. The Mac is closer to that experience than Windows is. &gt; Things like setting environment variables, installing Tomcat, JBoss, MySQL, Oracle, stopping and starting services ... I generally find to be easier to do on Windows than on Mac. Mainly because Windows distributions usually come with simple install wizards and so on. http://brew.sh/ 
[Here's a good introductory video](https://www.youtube.com/watch?v=mBmExt184vc)
Windows at home for games. OSX at work. I prefer Linux for development though. 
Thanks for the link. The thing is, my day job is all Windows all the time. Most of the time it sucks. But I'm so used to developing Java on Windows, I just know where all the settings and switches are. I'm certain that if I worked on Mac (or Linux) full time, I'd get very used to doing things the UNIX-y way too.
I prefer developing with OSX. Linux works too, but I prefer the OSX GUI. Technically most of the tools I use would work on Windows (IntelliJ IDE, Gradle build system, Git, Vim, etc.) Most of my coworkers use Linux or OSX, and we primarily target Linux servers for production.
It seems to me bypassing Overrides is a case of poor design. 
Strange, isn't it? All the effort they put in backwards compatibility when they are going to stop supporting old versions anyway.
No.
any good documentation on TomEE the other day I tried to configure it for JPA but got frustrated after a while.
Snakes... why'd it have to be snakes...
That's to make upgrades easier. 
Because you'll still get the overridden method that way. Edit: I suppose that isn't very clear. What I mean to say is you'll still get the "most specific" override, in simple terms. If you have class Foo with method A and Bar which extends Foo and overrides A, then create an instance of Bar b and later cast b to Foo and call A on the result, what you get is still the A defined by Bar, not Foo.
Oft, replied to the wrong comment
Well, imagine you have a class Animal which has a method "makeSound" and a class Dog which extends Animal and overrides "makeSound". If you cast the Dog to an animal, would you expect a "Bark" or "GenericAnimalSound"? It's still a dog after all, it doesn't make different sounds because you started calling it "Animal". Java behaves exactly as you would expect here. At least that's how I explain it to students … although the example isn't a perfect example ("GenericAnimalSound"? Haha.)
Yeah yeah, dynamic types etc etc. Good thing this isn't something most people would do everyday
&gt; Do you mean the Java EE Identity JSR 351? No, JSR 375 "Java EE security API" - https://jcp.org/en/jsr/detail?id=375 Identity JSR is a bit muddling the waters here. It was completely silent, then got renewed today.
Most code should work when migrating from 6-&gt;8, however companies are concerned about compatibility issues with upgrading, so they stick it in their backlog and procrastinate doing it while they work more high-visibility items. Eventually either they upgrade, or they get bit by a security vulnerability.
OS X, I view it as a *nix platform with the most intuitive UI I've found. Also, I'm a bit biased because I work on mobile and have run into really annoying driver issues working on Android on Windows, and if I ever need to deal with iOS code I'm out of luck if I don't have a mac.
In my comment I just pointed out suggestions. I was neither negative, nor abusive. I just suggested possible better places for OP's question. As opposed to you, I at least provided plenty other resources that *go along* with the comments of the others, as I stated in my comment. And instead of **you** actually helping, you have nothing better to do than to be derogatory and offensive. You seem to only be able to use abusive language, but actually lack the capabilities to contribute to a useful discussion.
No. because in java all methods are virtual. other people explained it more fully but that's the actual reason that nobody seemed to get to
the term you're grasping for is virtual method :)
You poor bastard! Lol
I appreciate it.
Then I guess I fail to understand how this is news. Even on their site they still list the new version as a 2.0-SNAPSHOT
&gt; Dear developer, &gt; I’ve been wanting to talk to you for a while now, but words don’t always come easy. We’ve had some really fun times together. I st... ::deleted:: TL; must delete. Whoever wrote that damn test thought he was Shakespeare. Die!
Good night, sweet prince
Without question, use a Mac. The power and stability of any OS X totally outweighs same on any Windows machine. Secondly, the experience most developers get and need with a Linux environment will serve them well on an OS X machine, which is a unix flavor. All of the tools you need are available for the mac and, frankly, when I go to a hackathon and a developer is working on some crappy Windows PC, it yells: "Amateur". EVERY hard core developer I know works on OS X.
Yes. Version 2.0 was rewritten in Scala. With Typesafe in charge of this, Scala and Akka it's no small wonder they all work seamlessly together.
Can confirm.
I use UNIX based distributions. Don't make me conform to your standards!
Hey mate, I dev on a platter of linux distro's . But you can get some very nice windows based machines with a similar build quality to macs, and as long as you maintain the OS stability is never an issue.
But it should.
Have a look at a company called LMAX they are doing some interesting stuff in fx trading with there disrupter ring buffer. When you want speed you need to tune at every corner. Have a watch of martin thompsons react video on youtube. It will give you an idea of the sort of perfromance tuning techniques the big banks are using. Things like non pausing gc are also possible. Spring reactor framework is based on disrupter and it can send messages at a rate of 15 million a second on a laptop. Tomcat can handle 10k messages a second and if it couldnt you could always horizontally scale the system, stick a load balancer in front. Run several instances of your app and use a messaging system. But im also sure the same is true for .NET
Or they can be trapped by WebSphere :-( 
Whatever computer I have at the moment. IntelliJ and Netbeans look the same on both platforms.
Can confirm. I support an app for a client who runs the crappy openjdk 6, and when I ask when they will upgrade to 7 or 8, I get the "deer in the headlights" look. Every. Time.
Yea, we will definitely build it in a scalable fashion and thankfully we don't need immediate consistency. It might be OK to lose a message here and there so we will see if we need a queue or not, for now were building it without. 
One of the client in my company just recently paid 250K for a new change-request done in their loan system which still use Java 1.4.
Wait... Java 8 and above doesn't have ask toolbar? 
Funny, because to me OSX screams "poser". My order of preference is Linux, Windows, Mac - with quite a gap between second and third. 
Could Jetbrains use said new docs internally to hurry up and make an IntelliJ IDEA Ultimate plugin version of CLion :D? I'll give you a kidney if I never have to use Visual Studio or Eclipse CDT ever again. Add GNU Make support and I'll throw in some bone marrow.
The Glassfish JIRA at least is very active, there still seem to be a lot of users, reporting bugs etc. For us it is still a great option because it includes jersey, mojarra, eclipselink, grizzly, tyrus, weld which are among the better Java EE implementations out there.
Interesting. It is scientifically proven that the amount of swearing or the use of foul language is indirectly proportional to the speaker's intelligence.
I think nothing beats Linux for development. The console tools are just so amazing and the filesystem operations are so quick, making even larger Maven builds a breeze. Macs may come close, but the tools are not as up-to-date as under Linux and you need to install it from third party web sites etc. I just never felt the need to even try a Mac because Linux is so perfect.
For me Windows will never be tolerable because of stupid file locks. They make building and deployments to appservers a pain.
Google really needs to just suck it up and buy Java from Oracle. One the main advantages of Android development is that you can leverage all the Java libraries out there, and you get easy cross platform support. With the world now moving past Java SE 7 and Android still stuck on 6, Google is going to lose that advantage when less and less Java libraries etc. are compatible with Android.
CMS can be pretty useful in some cases (it's recommended over G1 for Lucene), but yeah, pretty useless guide.
&gt;the question is and always will be opinion-based, so your opinion is as valid as any other one. There are concrete reasons for it, so it's not just opinion based. Using `this` lets to know the scope explicitly, otherwise you need to figure it out implicitly (or rely on a tool). &gt;Your IDE will happily highlight your local variables Code is not always read through IDEs. E.g., code reviews are often done through web interfaces, and not every developer uses IDEs even for Java. &gt;And again, luckily, there's virtually no one that uses this nowadays. It is used, and very justifiably so. Just because you don't see it personally doesn't mean it's not used.
Its possible I'm just not doing a good job searching, but I would love to see a guide that does more than list out possible JVM args w/ descriptions, talk exhaustively about GC generations, or a combination of the two. There are seemingly a billion of those out there. I am nowhere near an expert, but I think I understand the architecture to a sufficient degree. Now, turning that understanding into a practical approach to maximizing real-world (and possibly application-specific) performance of a JVM, and not devolving to guess-and-check, is quite another thing. Sure, profiling the crap out of a codebase may give you a far better set of ideas, but, as far as I know, turning that data into a precise JVM configuration is an art, not a science.
Exactly. The clarity of intent that explicitly qualifying variables provides greatly outweighs any purely stylistic consideration.
Makes it even easier to use code folding in an IDE because folded lines will be displayed with an open bracket before the ellipsis / w/e the editor does.
Yes, and for the same reasons you should always call instance methods with `this.instanceMethod()`.
https://github.com/javaee-samples/javaee7-samples I'm not sure it you consider this one good, but it's definitely a nice place to start. There are actual modules that need polishing or updating.
If you think that, you're deluded. I have used Linux for over a decade professionally but not as a desktop. I'm sure there are now options but for me OS X is perfect. I must also confess that you seem pretty naive. Very few professional developers that I have met since I started my professional career years ago use a Windows PC for their personal development. For example, I worked for Conde Nast in New York City and at one point in my career there, the entire development team was switched from sucky Windows machines to Macs--and our productivity skyrocketed. If you think that Mac is worse than Windows--I want to know what you're smoking, dude.
Oh I know, I was just making a joke about how strongly people feel about certain style things. Apparently people feel *very* strongly. lol
&gt;Dependencies absolutely need to be checked into code so that entire projects can be resurrected for maintenance releases and have EVERYTHING they need to build in the repo. This is what things like Artifactory are for, especially if you're using a VCS like git that doesn't handle lots of binary files well. The problem with checking dependencies in is that unless you manually validate all of them every single time they change, you have no idea where they came from, whereas pulling them from a central source means they're validated and versions correctly. Plus you can then automatically handle things like transitive dependencies. Coming from ant, I strongly suspect you'll prefer using Gradle to Maven. For starters, Gradle can flat out import ant builds, so it should be much easier to get started. And while it does favor convention over configuration like maven, you can still step in and set things up explicitly where needed (I strongly recommend sticking with convention unless you have a good reason to deviate though). Also, Gradle is compatible with both ivy and maven-style dependencies and publishing, and you can even link against direct file dependencies though as I said, you really shouldn't do that and just use something like Artifactory or Nexus instead.
&lt;3 
I haven't noticed any issues with it being slower to operate or start up. I don't have a source but I read somewhere that the IntelliJ versions of webstorm/phpstorm/pycharm are ~6 months behind the full fledged products. So most of the basic functionality is there, just may not have the latest fixes and support for the latest frameworks.
I've had enough of your insults. If you are not even able to produce one sentence without insulting anyone, it's not worth continuing. 
but but..... I like xml.......
Dude, okay if you discount my experience in a Fortune 500 company, that's your right. I develop at work on a Windows 7 machine every day. Then at home I develop on my iMac, which indeed set me back more than did your machine. If you are unwilling to pay for your tools, that's also your business. Let me ask you a question: when you are around other developers do you see them all using Windows machines or Macs? Obviously, my experience has been the latter. I work on Windows while holding my nose. If you can stand the Windows stink, more power to you.
I spent 10 of the last 12 years doing .Net, so most were using Windows on a PC. A few ran bootcamp on MacBook Pros, but it didn't make them any better. Now I'm at a java and python shop, and everyone uses centos VMs on Windows hosts, except one devops guy who uses a Mac host. I like Mac laptops - I'd pick a MacBook Pro over any other laptop on the market; I haven't owned a non-Apple laptop since 2003. But for real work I prefer a desktop, and on the desktop OSX is 3rd. 
You might have heard about the end of public updates for Java 7, coming up in just a few days with the release of Java 7 update 80. See the following Oracle pages for a reference: https://blogs.oracle.com/java-platform-group/entry/future_updates_of_java_7 http://www.oracle.com/technetwork/java/eol-135779.html Let’s clarify what it really is: the end of public updates, and by no means an end of life (EOL). With the second link above, scroll down to the “Oracle Java SE Support Roadmap” section and you’ll find the actual EOL dates: Dec 2018 for Java 6 and Jul 2022 for Java 7. Yes, that’s another 3.5 years for Java 6 from now, and even another 7 years (!) for Java 7. IBM’s EOL timeframes are similar, although an even longer Java 6 support timeline is to be expected there. It’s generally worth noting that any end-of-updates statements from Oracle are completely irrelevant for IBM users: The IBM JDK is an independent product that just happens to be based on the same open source project (OpenJDK) in recent years. So please, if you see any statements about Java 7 getting EOL’ed these days, take them with a large grain of salt. The end of public updates is just the point of time when Oracle starts to charge for maintenance releases, that’s all. Java 7 remains with us for another 7 years. In case you’re wondering about the Spring perspective: We designed Spring Framework 4.x to support Java 6, 7 and 8 in the same framework generation. That’s a unified programming model to cover three generations of Java, allowing you to upgrade at your own pace while at the same time getting the maximum out of the JDK that you’re currently using!
...and I'm an idiot.
There's plenty of others in this thread. And 10 years of .Net represents only half my career, and even whilst doing .Net I was also doing plenty of scripting and web dev, so don't bother trying to pigeonhole me based on that. I use the best tool for the job, which is usually Linux, often Windows, and rarely OSX. You can talk about the sheer power of your iMac all you like, but I guarantee my cheaper Windows box will smoke it on any benchmark. 
Spring batch.
Glassfish is still fine if you don't need support. Payara is a maintained version of Glassfish, so if you're hooked on Glassfish but need support that's an option. Wildfly's worth a shot too - I believe support/maintenance can be purchased. It's a different beast to Glassfish, but it does seem marginally faster for the development cycle, albeit at the cost of the tight integration with Netbeans that Glassfish provides. In terms of popularity, gut feel says Wildfly's the way to go these days. There is also a free, cut down version of WAS available - if I remember rightly that's only just getting to the point where it's got full support for EE7 - plus it still carries with it the painful memories of working with full fat WebSphere.
Seems to expose a couple of nice APIs. The n-Tuple &amp; n-Lambda constructs are pretty ugly though.
Or just... Use scala? 
Any test can be ignored as long as the developer added a comment. If there's no comment then those tests end up on the cutting block and will require a refactor if code isn't covered properly. It's a difficult rule to enact but once you set that hard requirement then you'll notice the code really clean up. Developers can no longer ignore broken tests, instead they have to write a working test. The benefit I have is that I'm a Dev lead so I can enforce these rules, otherwise I would agree with your statement completely.
Thanks for the feedback :-) you are totally right. I removed Tuple7-26 and Function7-26. https://github.com/javaslang/javaslang/pull/229 Update: This is also tracked here because there is ongoing discussion: https://github.com/javaslang/javaslang/issues/234
name clashes are a good point. i fixed that: https://github.com/javaslang/javaslang/pull/230 ignore the 'algebra' package or read it as 'internal'. it is mainly used for api design purpose. java has no module concept to hide it
I've never worked in a coorperate environment (programming is just a hobby for me right now) but even I can tell that you have no idea how that works. I don't remember the exact qoute, but it was something similiar to "80% of working with code is maintenance". If you're the only guy who can do Scala you can't just switch to it, because nobody else will understand what you are doing from that point on.
it's a one-liner to add them again, if they are really needed. we will see
I would highly recommend the Indie developer on Youtube. Because of him I was able to build a fully functional 2D game in Java. You can see the progress on my website at: http://www.programmermind.com/Javaopengl.html I hope you find what you are looking for. Just remember Java is all about mastering the ticking and rendering methods for optimum speed. I am learning a lot about development and that is what drew me to your post. Sounds like a great group of people here. I hope this topic is still current.
Sorry, but I just don't see how applicatives make functions with too many arguments any more or less of a code smell than however much they are. I mean, literally, plain old functions *are* an applicative functor already (the identity functor), so any argument that you make about applicatives translates automatically to functions!
Haha. Oh, wow.
That's twice you've tried that narrative, I don't know why you're bothering. If I wanted cheap, I'd use a $300 laptop. The fact that I spent thousands disproves that notion. I do like value for money though - why spend $6K when I can get the same performance and high-quality components for less than half of that?
Gradle. - am I the only one who thinks gradle fails the KISS principle is overly complex and nearly always gets in the way? Half the time you can't seem to do an edit compile run cycle because what (frequently) few targets are available seem to download precompiled jars... Very confusing and needlessly complex
I must say I started with a very simple build script and now feel it's something I have to explain to people (the ```buildscript``` stuff). But for more [simple projects](https://github.com/Ellzord/JALSE-HappyCows/blob/master/build.gradle) it's pretty easy to tell at a glance what it is doing. I think if you need real granularity with your builds it may not be the right choice but for my **examples** it really helps for it to be readable!
I use Windows both at home and in work. I personally don't like OSX, but that's a completely different argument. In work, we don't have a huge amount of choice due to certain required applications. We could still dual boot Linux, but that would pose a few additional issue with our security and infrastructure, and would slow development overall. We do also have a platform for spinning out VMs for testing/development purposes which we frequently use. Our servers are also primarily Linux (there may be a few old Windows servers used for some legacy products). At home, I enjoy playing a few games now and again. Constantly changing OS is simply a pain (even with an SSD). I don't find that there's any negative to developing on Windows for the kind of work that I do. The tools available are excellent, crashes are virtually non-existent (and I've experienced crashes on Macs too), and familiarity with the OS helps a lot. Deployments are easily handled by CI tool, and there isn't really much that I would benefit from by switching to OSX or Linux. I do find it strange that people claim hugely increased productivity when switching to OSX (or even Linux). I don't struggle with my OS, and the majority of my time isn't spent actually writing code, but thinking, planning and designing what I will build.
I will update the Javadoc for internal classes like HigherKinded. Monoid, Functor and Monad are very common in functional languages. There is a minority of Java users which are familiar with these concepts, they may want to use them. I think, clarifying these with better javadoc should be ok for the moment.
&gt; Wildfly's worth a shot too - I believe support/maintenance can be purchased No really, WildFly is the open beta for EAP. Betas are not supported other than via a (not paid) best effort community option. &gt;There is also a free, cut down version of WAS available Not really. There's a new server from IBM called Liberty. It's not so much a cut down as a totally new server. For some reason they're now able to implement Java EE 7 needing only 100MB, where for some reason the old server needed 2GB for that. Liberty despite its name is only free for installations that in total use not more than 2GB of memory. Liberty is *almost* Java EE 7 compliant now, but not yet.
Looks like a cool library. I raised an [issue](https://github.com/threadly/threadly/issues/145) showing how you can make it look a bit more sexy!
At first I thought this would be bad. I see the premature optimization argument so poorly used on the Internet, but he got it right. Everything but number 9 is really good advice. Number 9 can be done poorly, but I don't think that was a good example. A lot if useful classes are just wrappers around some data structure class. 
Pretty much, diverging into another language will make other developers pissed off at you pretty quickly.
Trashy code in common in all languages. I agree with Aellus, I would probably walk out of the shop.
$6K? Where are you buying your Macs? My top-of-the-line iMac cost around $3K.
Dear Lord, Why?!
Why!!!!????!!!!
&gt; |@| aka, append, aka, cinnabun operator, aka tie fighter, ... I did not know this was a thing, but now that I do, my day is better. Thank you. 
I find setting environment variables to be easier on a Mac because I don't have to work with in a text box sized for 20 characters that I can't resize like on windows. 
See above. You cannot buy an iMac that matches the spec of my PC - you would need a Mac Pro. iMacs are not available with 6-core hyperthreaded i7s. If I go onto the Apple Store and configure a Mac Pro with the same number of cores, same amount of memory, and same amount of RAID storage, it costs about $6K. 
The worst developers are those who code to some strict standard and absolve themselves of forming their own thoughts. The best standards will make a developer think (i.e. is this method getting too complex?) vs those that must be obeyed always (i.e. all string literals are bad.) Rant aside I was glad to see anti-patterns that indicate problem behaviors amongst the team. Too often these go unmentioned and can lead to a toxic working environment for all.
The discussion on [/r/programming](https://www.reddit.com/r/programming/comments/35k2no/9_antipatterns_every_programmer_should_be_aware_of/) is mostly about how the article is not necessarily bad, but very generic and unfocused. It doesn't say anything that hasn't been said before in multiple places in multiple ways. In that thread, I said the following about a glaring point that indicates the bigger issues with the article. &gt; Most of these aren't even [patterns](http://en.wikipedia.org/wiki/Software_design_pattern) to begin with. They are mostly tendencies or situations that can hinder productivity. "Management by Numbers" has nothing to do with how the code is written, but how to manage the project. Bikeshedding isn't even specific to programming, it can happen any field the requires design. &gt; Using the wrong terminology at the core of the article speaks to how much this is just pieced together the article is without fully understanding them. 
There's a bunch of examples that just don't have a test. Should be the easiest way to start contributing.
For me, using the command line is quick. It's opening a file with a path of about ten characters and then the source command. I find it to be very fast. 
False equivalency. You need that many cores on a Windows box because of the crappy architecture. A Mac with fewer cores will perform as well as your shitty Windows
Coming back to Spring after a couple of years spent with Play Framework, I could not help but get overwhelmed by all the Spring stuff I had to re-learn, as well as all the new directions that Spring seems to have taken (embracing the cloud tech, convention over configuration, etc). I found JHipster at the time I started reading about SpringBoot, and it helped me cut down the pick-up time tremendously. One can always take the Spring documentation, and start reading the 100s of pages, without understand how stuff fits together. One needs an opinionated approach to application building, to see the essential things connected together. That's what JHipster does. As a learning and bootstrap tool, so far I love JHipster, but I am yet to see its potential in an actual app. I already started working on an old idea of mine.
Go ahead and stand on your cherry picked metric. In my 18 years as a professional software engineer, I have worked on many environments and I would never voluntarily go back to Windows if I did not half to. But you are welcome to work in Windows or COBOL or whatever you prefer. Best of luck, Dino.
To add to the Liberty information the 2GB limit doesn't apply to development machines so if you're after somewhere to develop Java EE apps then you can do so for free on Liberty.
http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420 http://www.amazon.com/World-Night-Hacks-Dissecting-Business/dp/1447672313/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1431711654&amp;sr=1-1&amp;keywords=night+hacks are two pretty good sources.
That's a badly misguided misapplication of Magic Numbers and string. Any time you think you're applying Magic Numbers and Strings, ask yourself, "Does the name of this constant describe its purpose or its content?" Simple: Never make a constant whose name describes its content. Make a constant whose name describes its PURPOSE. And if you can't do that, the magic number or magic string is not the real problem. This is actually potentially useful: VALUE_PREFIX + value1 + VALUE_SUFFIX + LIST_SEPARATOR + VALUE_PREFIX ....
The term "anti-pattern" is often used to describe broken processes in many areas, including management. It isn't unique to programming: http://en.wikipedia.org/wiki/Anti-pattern &gt; The term, coined in 1995 by Andrew Koenig,[3] was inspired by a book, Design Patterns, in which the authors highlighted a number of design patterns in software development that they considered to be highly reliable and effective. &gt; &gt; The term was popularized three years later by the book AntiPatterns, which extended its use beyond the field of software design and into general social interaction and may be used informally to refer to any commonly reinvented but bad solution to a problem. 
Yes, quick if you know the ten characters and the command. :)
unfortunately some people do not realise that...
Similar experience to you. Only thing I can't get used to on my mac is making windows fit the entire screen. All applications seem to behavior inconsistently, double clicking intellij fits the window to size of the screen without 'fullscreen mode'. However, double clicking firefox just opens a new tab. So to get firefox to fit the size of the screen, I have to spent 2 minutes fucking dragging each corner of the window to the size I want.
"do developers have superstitions?" "yes, but they're called 'best practices'"
The Start Menu on Windows Vista (remember that one?) took over a year to design. There was a Slashdot article about it back at the time.
I've witnessed such abuse of standards at my previous job, ironically at one of the "big four". We've had a set of (partly unwritten) rules that were to be followed strictly on our team, and deviations got called out during code reviews. It felt like both the developers and the reviewers were more interested in appealing to the herd mantra rather than actually thinking about the whys. Examples include: * *Thou shalt always add javadoc comments to fields and methods, even private ones.* This led to useless comments like these: /** The current date */ private Date mCurrentDate; * *Thou shalt not use magic strings and numbers.* I've seen one developer declare: private static final double ONE = 1.0; * *Thou shalt have 100% test coverage.* This has led people to waste time writing unit tests for literally everything, which is good in theory, but in practice devs were more interested in getting the "100%" badge than actually writing meaningful tests. A common case I've seen was mocking every single class outside the one being tested, then making wrong assumptions about the behavior of a class being mocked, thus testing behavior that didn't occur / worked differently in practice.
&gt; if a function with a large number of arguments is not a code smell when you use an Applicative Builder, then it can't be a code smell either when you don't use it, because functions are an applicative functor already (with a friendlier syntax, too). But that doesn't answer why you would need an abstract `Function6` or `Function12`. The fact that functions are applicative is irrelevant. Constructor's are legitimate functions with a large number of parameters. The applicative builders you use to work with those constructors are a use case for abstract functional interfaces with a large number of parameters.
Why do we need a generic blog post regurgitating something that has been said so many times before?
Isn't the real problem building up the long string in the first place. 
Personally think spring is becoming too overblown, it's become what it was a reaction to. Dagger2 looks exciting. 
Update: Oracle JDK 1.2 now available in Docker. https://github.com/mcandre/docker-java/tree/java-2 Update: Oracle JDK 1.1 now available in Docker. https://github.com/mcandre/docker-java/tree/java-1
Applications can start JMX by themselves, maybe spigot does this. You might want to try to connect to the JVM via the JConsole via localhost:PORT. If you can gain access, somehow a JMX server was started... You can gain access to all kinds of information through JMX so you will not want to expose it externally. This looks a bit like your problem: https://bugs.openjdk.java.net/browse/JDK-8035404
Does not seem enabled. I can't connect, however on a local VM running with JMX I can connect.
This regurgitated crap has made it here too? After getting totally trashed on /r/programming ...
To Summer.
My first question would be: how far did you get on data structures and algorithms? If you can't make a double linked list using both iteration and recursion, or you can't tell me what the maximum asymptotic runtime of simple algoirthms (like nested loops) are using big-O notation, you don't have a great foundation in data structures and algorithms yet and I would start there. Make the linked lists as I said, and pick a more advanced data structure and implement it yourself and test it. A KD-Tree, Red-Black Tree, or really anything that involves some fun graph theory. The purpose in these exercises is to *understand* the basics of data structures so that you can use libraries better later. Generally you won't need to reimplement these "basic" structures as there will already be a library for it. If you want to know how to truly be a better programmer (read: software engineer), swiftly (read: don't obsess but know the "big ideas") go over something like Code Complete. Your course probably taught you a lot about syntax and maybe some basics about data structures, but there's much more to programming than syntax and Code Complete will help you get a foundation. If you want to learn more Java, I honestly don't know a more "advanced" resource specifically. I find that once I know the syntax of a language, I learn the tricky and advanced stuff by doing projects in the language and looking at other peoples' code. An introduction, like the course you took, will give you enough of a foundation in the language to find the answers you need on Stack Exchange or elsewhere.
I like this, and can see me using it. I'm wondering about the use of Iterable rather than Stream though - my initial experiments suggest that the JVM favours Streams for performance. http://stackoverflow.com/q/30025085/97777 
What of the nanosecond latency? Will that be affected by using windows instead of linux?
The fastest Intel CPU is the Xeon E5-2699 v3 boasting 18 cores. The fastest consumer CPU is the Core i7 5960X with 8 cores. The highest clocked Intel CPU is the Core i7 4790K.
I wouldn't add jstl,use vanilla html and angular for the frontend
Something like VALUE_LEFT_DELIMITER or VALUE_RIGHT_DELIMITER would be a better name as it describes what you are trying to achieve. But that looks like trying to roll your own XML - in which case using XML DOM is usually a better option rather than try making a totally configurable function. If you are trying to make a CSV line you need to escape any quotes in the value and how do you handle things like “\r\n” but if you are generating XML you need to escape chars &lt; &gt; / etc. So when you change the code you will need to change more than the constants and if the constants were in a separate file/globally accessible you need review every usage of them (not fun when project is thousands of files and million+ lines of code and had no re-factoring tools available). You can actually make code more complex by trying to make things too generic/flexible and having dealt with such code what happens is it becomes very difficult to work with achieving the exact reverse of what the programmers thought it would. You can get sucked into making things too generic and avoiding what looks like duplication and lose track of just how much more complex you are making the code.
tab is usually mine as Spreadsheet programs can open them 
What about the difference between how windows and linux virtualize files? Is there some risk of the IPC being bottlenecked by disk access on windows? Sorry, I am ignorant to how the IPC actually uses the file.
Great, thank you for checking!
This particular reply was a bit of a jest, but in general I marvel at the irony when hate is directed to Spring. The thing that I grew up with Java EE when it was perfectly normal that hate was sprouted at Java EE. People were typing code, people were compiling and people were hating on Java EE. It was part of the daily routine and nobody thought anything of it. Rod Johnson had indoctrinated the Spring community in such way that sprouting hate was just part of the culture of being a Spring user. It was a surreal time that somewhat resembled 1984's two minutes of hate toward Emmanuel Goldstein. Then Java EE became more popular, and it first Java EE was only defended, but eventually someone carefully directed a slimmer of hate back to Spring. And guess what? People were "offended" and "hurt" and "why the hate" :X Something they themselves did for years, was suddenly wrong when someone did it to them. 
Think about what you find the most interesting. Then start a project making that thing. You'll learn a ton by the time your done. 
Well I didn't see this in the last [18 hours](http://www.reddit.com/r/java/comments/362yzs/five_practical_tips_for_building_your_java_api/).
Hm. Unless I am missing something the first item &gt; Secure Authentication Requests with TLS Is completely valid. But the code given is related to checking client certificates, which isn't really related to using TLS to encrypt the connection..
Yup, besides, doing security explicitly in every single servlet is a horrible idea, you're better of using a ServerAuthModule or a Filter.
https://jordan-wright.github.io/blog/2015/03/08/elasticsearch-rce-vulnerability-cve-2015-1427/ https://news.ycombinator.com/item?id=9551551
Can you elaborate on this? I mean, annotations were already there, when I left Spring for full-time Play, a couple of years ago
For Linux you can make use of shared memory with this library by creating readers/writers which point to a file in "/dev/shm/..". What you loose is the persistance of messages.
Thank your very much, my pleasure!
Please post your code on pastebin.com or some other code sharing site. 
They keep making updates to log4j but I've been using it exactly the same way since 2002. Maybe I should look into what they've changed since then 
I didn't read the whole article, but skimming through this looks like an advertisement to use the Stormpath product more than giving out useful tips.
Fixed! Yes this is awesome and very useful for what I am doing. Thanks to you for sharing and thanks to Daniel for writing! :)
The features in log 4j2, like markers and burst filtering are super nice 
Think of a cool application or game and work on it. The whole point of languages are to help build applications. Nothing else matters. Schools and university courses wrongly focus on syntax and not on building real applications. Imagine how difficult english would be if schools started teaching grammar without focusing on writing exercises? Bottomline: All programmers learn by doing - and what we do is writing applications ( webapps, mobile, desktop, console, web services etc ). If you want to learn more, write more applications. A cool way to extend your horizon would be to open source it, and collaborate with your school mates who are interested in similar projects. Checkout github or bitbucket for this.
I've never used hadoop but log4j 2 allows you to route calls to log4j 1 (as we as other logging frameworks) through to log4j 2. You just need to include a jar on your classpath and remove the log4j 1 jar.
Html templates, jsp pages are an awful mix of languages that ends up ugly ... IMHO.
not as ugly as jsps/freemarker. You can split up the project nicely, send the front end code to the desginers.And leave the heavy lifting to proper programmers. Secruing a rest api, you just pass a token - whats ugly? And translations, again you just look up a string based on a key, angular has a module for this.
There are pros and cons. PROS: * The application serves only JSON so it's a natural web service * Better performance since you're not serving dynamic HTML - it can be all static. * Less bandwidth. JSON is small. * Better separation of concerns. * Testable. CON: * Having to use JavaScript (MAJOR CON) The con is improving slowly with things like TypeScript etc which give you a nice type-safe language that compiles to JavaScript. 
[This project list](https://github.com/karan/Projects), and check out /r/dailyprogrammer. An alternatively, if you ever think "I wish there was something to do xyz" then make it.
&gt;* Having to use JavaScript (MAJOR CON) Not really a con IMO
Run through the EE8 Tutorials. 
One of my favorite things to do is, once you're past the point of making tiny little games, make an AI for them. I've made a snake AI and am currently working on a Frogger AI.
If your concern is that Hadoop logs directly to log4j 1, I suggest slf4j. They have a log4j 1 jar that re-routes calls to slf4j, just include that to your classpath instead of log4j. Then you can bind slf4j to any logging framework you want. A good practice is to not include a slf4j binding with your distribution. At deployment you can include whatever binding you want by simply adding a jar to the classpath. This makes having different logging strategies super easy. 
"If you want to get rich, solve a problem"
I would argue that PROS you wrote are appropriate in comparison to classical "one server rendered view per page" pattern. However you can have as little as single JSP page as main entry point in your SAP and everything else is using Angular or any other SAP library based on REST API calls. This will bring you some benefits of server side control when loading the app.
"in general you either put it all on client side (which is ugly design in my view" Thats the conventional way of doing it, I don't have a problem with this. "security in the context of page rendering" You can still use and secure endpoints conventially, using spring security for example, just becuase you are using angular doesn't mean that it has be *strictly* one page only. Just have a second endpoint that returns an html view for the secured pages.
you need to be decent at javascript for any front end dev, using angular doesn't make the javascript dependency any worse. It just means you have to use/learn angular. Hopefully you'll be using some other JS framework, that requires you guessed it - js developers. Way to go with the "you don't run a shop". How charming.
&gt;Way to go with the "you don't run a shop". How charming. He's not wrong. /u/bmrobin even says as much. JS development is extremely expensive when compared to equivalent functionality, maintenance, testing, etc in a more commodity language. The market is so much tighter for JS devs than for JEE people. The JS bandwagon has only really existed for the last 5 years. JEE has been around forever. The tooling and experience is catching up but it's not there. As someone else who manages a budget, I can attest to that with no reservations. JS (and any of the new breed frameworks, so not yui) is more expensive in nearly every way. I have to have a really good fucking reason to choose it. 
My point is *not* that good javascript hires are cheap, its that you need JS for any front end dev work. Using angular is actually easier for Java guys to pick up (it uses the same patterns they are familar with). You manage a budget, well done. Why are you sending me links to peoples profiles ? I would choose angular every time for my front end framework ...
&gt;I would choose angular every time for my front end framework ... Which is how I know you're not responsible for a budget. No one with that responsibility relies on a single tool. Also, it's pretty common to use the /u/ prefix to alert someone that they're being referred to in a conversation. 
Thats why I said I *would* choose, not that I do. Your point was the reason not to use it is because JS developers are expensive, I also stated why I thought that was a mistake. You think I am not responsible for a budget - think what you like. All else being equal, I'd choose angular - I fail to see why the cost of JS developers comes into this discussion. I've used angular and I've used other frameworks, and I've used no frameworks. 
khanacademy.org is a great place to start.
Write an instant runoff voting simulator. Then a condorcet voting simulator.
Really great advice, thank you.
you don't understand the skill sets of JS frameworks then, if you think angular is somehow more javascript than ember. And way to go with not quoting the beginning of what I said "All else being equal". You are picking and choosing what you want to hear from what I say, and not really listening/reading any of it. 
Could you explain what "line markers" are? I read [this](https://logging.apache.org/log4j/2.0/manual/markers.html) but this doesn't tell me anything. How is this different from adding a constant prefix to my log message?
The coolest thing is: People underestimate how many other people usually think the same thing but never come around solving the problem.
Well, lots of designers I usually work with don't even know javascript: they only know what it's used for. But I've had no problems so far using freemarker or thymeleaf on my projects, as designers find their particularities unobtrusive to the work they have to do. Of course JSP is a whole different story.
Why not a phantom reference instead of a weak reference?
My guess: It was developed with Android in mind and Android's GC immediately collects weak references.
Programming is exactly like every other (specialized) skill. You can start slightly better at it than someone else, but in the end it's the number of hours you put in (and how much it interests you) that will decide how good you are. I don't know why you would think it is different.
Unfortunately no built in WebSocket support just yet, but you (and everybody else) are very welcome to create a pull request on [GitHub](https://github.com/perwendel/spark). Maybe it can make it into 2.3? :)
/u/akm0706, this is *the very same* spam submission that you did [a day ago](http://www.reddit.com/r/java/comments/36661r/example_of_testng_groups/). But you deleted the other one (and the ones before that). Did you delete them to avoid being recognized as a spammer? My comment still stands: &gt; Why are you linking through DZone? Why is this an article by the same author as the last one you posted? Did you make this account just to get some views? Stop spam-promoting your blog.
I am not spammer my dear...
But that applies to most technical skills. Most (brilliant) software engineers I know of could never be medical doctors, lawyers, etc. Outliers don't count, there are [prodigies](http://en.wikipedia.org/wiki/List_of_child_prodigies) in virtually every field: literature, music, art, sport, chess, mathematics... Korotkevich is just a brilliant algorithmic thinker, nothing less and nothing more.
Many places mention Eclipse, but in reality use also IntelliJ or NetBeans - the only important thing is just identical code formatting - which is not a problem nowadays, and that you can import the project to your IDE. For example when I started 3,5 years ago in my job, the requirement was Eclipse, nobody used anything else, but I tried to use IntelliJ and there was no problem. Currently almost everyone have migrated to IntelliJ (except 2 new people, but I would say that even I know Eclipse better than they), even testers (they use my IntelliJ plugin for our testing tool), and a new job listing still contains Eclipse as requirement...
I don't see why IDE should matter that much to an employer. One thing about these job listings is that Eclipse is often used as a framework for actually building applications rather than an IDE. Perhaps those kinds of listings are what you are seeing?
Yes, Eclipse is a defacto standard. Learning Eclipse will not get you a job, but it will make transitioning into a new job much easier. Many online tutorials use Eclipse in their examples so you will get that benefit and the benefit of being on the same page as everyone else in your shop. 
Thanks a lot for your insight? Others have been saying the two are more or less interchangeable and the message between the lines is just, "we want you to be able to work out of an IDE." Have you heard or known of anyone getting turned down for a job because they use Intellij over Eclipse or vice versa?
Like I wrote, knowing Eclipse will not make the difference in a hiring decision. It will just make your life as a Java programmer easier as many educational examples are written with Eclipse in mind and many shops use Eclipse. Some shops insist that everyone use the same IDE. No reason you can't learn both. Some places let people use what they want and sometimes a shop will be open to input for tools/software to settle on. If you know something better when those opportunities come up that is your big chance to introduce something cool to others.
Noted, thanks again!
Or it will make your life hell, because Eclipse...^s^o^r^r^y
I think you're looking at it in the wrong perspective. Mark Zuckerberg is a great programmer not because he's naturally gifted or because he's an algorithm genius. He's a great programmer because he took a different approach to a problem that most people would not recognize. I like to compare programming to the English language. One writer is not better than his coworker because he knows more of the English language or because he was born knowing the language better. We consider writers better than their peers because of how they *use* the English language in a way not previously seen. They take a different approach to writing their story than their peers, or they write a story which has never before been contemplated. When we consider great programmers, we think of them as great not because of how many hours they've programmed or how many algorithms they've written, but because of how they've used their experience and their algorithms to create something innovative. Sure, just because you have 10,000 hours of programming under your belt doesn't mean you will be a great programmer, but the same can be said for someone who is mathematically gifted and programs. Just because they know how to write the algorithm doesn't mean they will implement it in the correct way. A good algorithm isn't the same as a good program, and to be considered a good programmer you need to incorporate both in an innovative way. So to answer your question, putting in the extra hours will make you an an expert, but it won't make you a brilliant coder. Brilliant coders use the tools available in a way that was previously unimagined.
Looks nice, I hope this finally will end this Java web framework mess we are in. However what will be interesting to see is, what MVC 1.0 + Spring integration story will be like.
One thing that's worth pointing out is that the plugin is itself downloaded over the net, so the protection isn't complete, for it to totally work maven would need to verify the signatures of the plugins it downloads.
A talent can be a lot of things, and I think our definitions at least partially overlap. Winning the International Olympiad in Informatics, being best among pupils from throughout the world, requires creativity, experience and brainpower. The complex tasks can be solved by taking many different paths, and although born in the 1990s, some of the coders can write algorithms like poetry, with a little touch of creative magic in them. This was primarily the type of talent my original post was about. Some, or many, of these also dream things that never were, and say "Why not?". I agree with the points you are making about Facebook, and finding ingenious ways of doing things is a crystal clear hallmark of talent. If 'kids' with such achievements continue to deliver, no doubt they are unique. And this pretty much underscores my point: Coding and swinging a bat shouldn't be lumped together. With enough practice, many can swing a bat almost like a professional athlete, but few can write code like creative geniuses, and the best coders aren't just a little better than an average coder who practices for ten thousand hours. They think outside the box, they come up with new ways of doing things, they write new languages. In my opinion, if Isaac Newton was alive today, he'd love coding, and he'd be pretty darn good at it!
Also, it may be important to note the differences in license. Eclipse is free to use for commercial software. Last I checked, some features of Intellij require a paid license. There are developers where I work that use Eclipse and some that use Intellij, so it really is a personal preference. However, since my company officially uses Eclipse, those that choose Intellij purchased their own licenses.
At least it's decreasing the number of attack vectors
&gt; However, since my company officially uses Eclipse, those that choose Intellij purchased their own licenses. Which says something about the quality of IntelliJ
I have noticed similarities between the two as I've been working, but didn't know that AS was related to intellij. Thanks for that insight! 
For what it's worth, I'm an Android developer and I still use Eclipse. It's buggy and has its issues, but it's much more refined than Android Studio, which feels to me like it's in the late stages of a beta. I've been trying it off and on for about 2 years now... it's come a long, long way, but I'm not ready to make the switch yet. In our shop, about 90% of the Android devs use Eclipse.
The $100 I pay Jetbrains every ~1-1.5 years for my personal license of IntelliJ IDEA is among the best money I spend. There is no competition between Eclipse and IntelliJ; there are only developers who haven't tried IntelliJ.
Would you say your shop is pretty typical or an outlier in that regard? Thanks for taking the time to respond, I really do appreciate it. 
That very well could be. None that I can remember have said specifically whether or not they are just using Eclipse as an example of sorts. I'm really just wondering if using one or the other will get me entrenched in that ide, but it seems the consensus is not really. 
From my perspective, and take this with a grain of salt as java is not a language I use professionally, it appears that eclipse is pretty much the de facto standard IDE. It is also used in a lot of universities for their java courses, so employers may have some expectation of familiarity just due to this fact. That being said, android studio is based on IntelliJ. So I would guess anyone who's going to hire you to write android code would prefer that over eclipse. So it really depends what you want to do. If you're interested in the de facto standard with the broadest reach, I'd go eclipse. But if you're really set on android development then learn to use IntelliJ and Android Studio. Honestly it wouldn't be a bad idea to try them both out and see the difference first hand.
I sincerely wonder if Hibernate OGM is a good idea. ORM is a hard-enough, controversial-enough topic. Abstracting away the "R" seems to make for even leakier abstractions... What are your thoughts?
I pretty much only use IntelliJ, and most people where I work also use IntelliJ. There's really only one team left on Eclipse, and they're trying to move to IntelliJ too minus some quibbles with the build system integration. Honestly, in my experience while Eclipse has a lot of flexibility and plugins, it's also incredibly fragile and unstable, and a lot more work to get working properly than it's worth. That said, IntelliJ versus Eclipse versus Netbeans etc ought to be a pretty flexible choice, and I would be rather concerned about the state of their codebase / infrastructure if they mandated a specific IDE (e.g. because they're cutting corners by trying to use the IDE as a full build system - I know this can be a real problem with people using Eclipse).
This is not true. The community edition is licensed under the ASLv2. Not only can you create commercial work with it, you can base your own closed source IDE off of it. edit: Deleted parent claimed that you only create open-source projects with the community edition and have to purchase a personal or commercial license if you want to do otherwise.
You would also need to verify your version of maven. It is secure if installed through a package manager, but what about the one built into your ide?
I use IntelliJ and I agree it is awesome. But I'm afraid Maven in Eclipse is much better, being able to search dependencies from the IDE and having it display the different dependencies is great and the one huge thing IntelliJ is missing. 
How does this compare to [lombok](http://projectlombok.org)? From what I can see, the implementation is horribly inefficient, when compared to an e.g. ByteBuddy-generated class (which wouldn't be too horrible to implement, btw.). A generated class could use fields directly instead of creating a Map for each object, also you could get rid of the sluggish InvocationHandler.
&gt; There is no competition between Eclipse and IntelliJ; there are only developers who haven't tried IntelliJ. I use both IntelliJ and Eclipse. At work, it's Eclipse (because my employer standardizes on it), at home it's both, depending on what I want to do.
Lombok is for those who don't mind code generation. I do. An implementation which generated concrete classes at runtime would be optimal in terms of both storage and access. I made a start on one a while back. Parts of it are non-trivial, even with the assistance of ByteBuddy. But it's certainly something I want to do eventually.
You're free to remap your shortcuts, though; switching keymaps is even easier.
I've not been able to give it a real compile and test but have you checked that it works with `default` methods in Java 8 (pom is 1.8). If someone wanted to use `default` methods that do a bit more logic with your POJOs (I know it defeats the point slightly). if (method.isDefault()) { lookup.unreflectSpecial(method, method.getDeclaringClass()).bindTo(proxy).invokeWithArguments(args); } You'll have to get the private constructor `lookup` for the type the proxy represents (see comments [here](https://rmannibucau.wordpress.com/2014/03/27/java-8-default-interface-methods-and-jdk-dynamic-proxies/)). I do like how neat your examples look btw! Edit: formatting
Oh I do, but it is annoying violation of the principal of least surprise.
Is there something like the workspacemechanic plugin for IntelliJ? Afaik no. This is the main reason why we can't switch to IntelliJ. The other one is that we only need the HTML/CSS/JS stuff from the pro version and none of the Spring/Whatever stuff. So the pro version is pretty much 80% waste of money.
Thank you very much, it looks like I need to learn Java that seems to be the primarily language, then start to look into android development
I am looking for someone to help bring [JALSE](https://github.com/Ellzord/JALSE) into the EE world via a [RemoteServer](https://github.com/Ellzord/JALSE/issues/50), [Plugin system](https://github.com/Ellzord/JALSE/issues/5) and [Persistence API](https://github.com/Ellzord/JALSE/issues/44). We want to get to the point where we have a JALSE backend and a HTML5 front end (with Node.js bots communicating via REST + WebSocket). Let me know if you're interested
Exactly. Get a solid grasp of Java first, then move on to Android.
Dynamic proxies will create a new class each time. I'm not sure how this plays out in the Java 8 metaspace, but could definitely cause out of memory issues on Java 7 w/ permgen. Are you caching the proxies? (Or planning to)?
Proxy.newProxyInstance appears to re-use generated proxy classes: Person harry = PhantomPojo.wrapping(harryProperties).with(Person.class); Person sally = PhantomPojo.wrapping(sallyProperties).with(Person.class); System.out.println(harry.getClass() + ", " + sally.getClass()); prints "class com.sun.proxy.$Proxy3, class com.sun.proxy.$Proxy3" - so both instances are instances of the same class. 
Shameless plug for XML Wrappers: https://github.com/JeffreyRodriguez/XML-Wrappers-for-Java
It's hard to change habits
Great!
Good luck on your journey. Don't hesitate to ask if you run into a problem. /r/Javahelp or /r/learnjava are the places to go with your questions.
When programming for production, if you feel like you are doing something clever, you are propably doing something really stupid. 
I thought they were going to recommend python-style for loops: for(int x : IntStream.range(0, 10).iterator()) { foo(x); }
If you want to build software for an entire career, you're probably going to be forced to change your habits at least a couple times.
Although streams are a gift from heaven, I think you should not use streams to parallelize heavy tasks. How are you going to interrupt the tasks if necessary, and how will the interrupts be handled? How do you control how many threads will be running simultaneously, etc.? In my opinion, you need more powerful tooling than streams for that kind of stuff.
I don't necessarily disagree however I haven't used Eclipse professionally in over 10 years. I've worked contract, consulting and FTE at startups and Fortune 500 companies. Quite simply nobody has ever *cared*. Even my current employer, a company wherein every piece of software must be carefully reviewed by legal, couldn't care less which IDE I use because they all have acceptable licenses. In that same time I've had a total of two team members use Eclipse. Both of them switched to IntelliJ before long because both of them got tired of fighting Eclipse plugins. I don't know that this is Eclipse's fault, I simply don't have the information to make a judgment on that. It's entirely possible the only reason they switched is because I was using it which necessarily guarantees that the project will be easy to work with IntelliJ and I can answer questions. I wouldn't go choosing an IDE based on the theory it's going to be required for a job or otherwise improve your chances. It's *never* been a point of contention on either side in my career. If someone told me they wanted to use VI and a CLI it would make no difference so long as I believed they could get the work done to an acceptable level.
I really dislike the method chaining. I.really().hate().it(); // WTF does a function called "it()" do anyway?? Mainly it's the Builder pattern that drives me nuts, but this irks me too. ... That said, this stuff looks pretty powerful. I'm going to have to suck it up and deal with it. Compared to the other habits that I've had to make and break over the years, this one is pretty minor (but with major payoff).
IntelliJ already does this. Either you're unaware the feature is there or I'm not understanding what specific feature you're looking for.
The gist of my argument is that the muscle and the mind responds totally different to optimal stimuli. The more complex the task, the bigger the gap, and that's why I think writing brilliant algorithms and kicking a football shouldn't be lumped together in a single optimistic rule saying that almost anyone can be great. Messi hasn't been dealt the best cards in life when it comes to his body, but that hasn't stopped him from being an amazing athlete. But in the IOI, you wouldn't find a single one that wouldn't get accepted as a Mensa member, and most of those cards are dealt at birth. Korotkevich begun his life with a strong hand, good genes, and then he has got his experience, and has got good 'nurturing'. If you gave a young Nick Lachey a brand new computer and paid for ten years of education in coding, the best money could buy, I would bet my hat, cat and house that he wouldn't be able to write a truly complex algorithm, and that his general coding skills wouldn't impress anyone, perhaps besides Jessica Simpson. A young Alan Turing on the other hand, could reason and write fairly complex algorithms in no time. Many can become athletes if they are nurtured from an early age; few can break the enigma, even if they have been raised in optimal conditions.
I like for loops. They're more recognizable then some method calls on some class.
Builder pattern is convenient at times. I think it is fine since there is nothing stopping you from just ignoring the return values and making it look more "traditional".
 IntStream.generate(() -&gt; ThreadLocalRandom.current().nextInt(10)).limit(3); You can write that even shorter without an IntStream ThreadLocalRandom.current().ints(3, 0, 10); https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#ints-long-int-int-
I'm a fan of the "boring" method vs using the finally block for anything other than resource cleanup. The boring method is clean, explicit, and will work so long as someone doesn't do an end around. While the finally block ensures that those methods will be called. It doesn't ensure that everyone obeys or takes the time to understand what the finally block is trying to accomplish. A refactor, new return statement, or someone adding to the bottom of the method "extra functionality" could easily bypass what the finally block was trying to accomplish in the first place. On top of that, I've been bitten by the "return statement in a finally block" Those are one hard bugs to find.
Agreed
Certainly. I'm more voicing my frustration with tracking down that particular bug. It has made me a bit leary about doing more in a finally block then just resource cleanup.
Please don't do this.
I assume the rights to 1.1 were transferred to Oracle during the corporate takeover oh you're joking nevermind
Can you link this, I can only find 6 and 7
The [spec](https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.13-500) seems to contradict that: &gt; Evaluation of a method reference expression produces an instance of a functional interface type (§9.8). and from [§9.8](https://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.8): &gt; A functional interface is an interface that has just one abstract method (aside from the methods of Object), and thus represents a single function contract. ... from which I infer that a method reference creates a new object of the appropriate functional interface. Sorry, I can't really claim to understand how all this is actually implemented, I only know what the docs say, and I may well have misunderstood something. Can you elaborate more on what you're trying to say?
Doesn't maven have something like the Gradle wrapper by now? Our projects pull the required version of Gradle via an internal server, and they're customized distributions with things like internal repository logic and general conventions baked in. This has the added benefit of not having to depend on a single version of your build tool for all projects on all machines, and upgrading is automatic once a new custom wrapper generated and the version bumped in the project.
You might want to check out some benchmarks before making that claim. For CPU time, the benchmarks I've seen show non-parallel streams to be only slightly slower than for loops. With regards to memory, most streams are lazy. So if you're doing something that ends with reduce, you're probably never holding the entire stream in memory at once.
I agree with that principle, but I don't think this is "clever" in that way. Streams, map, reduce, and their other functional companions have been common idioms in many other languages for some time.
I think rules like that are holding Java back. There are cases where it's true but its not always true. This is elegant. It's not clever and obfuscated. It's just new. Rules like this are holding Java programming back far more than the language itself. 
I'm pretty sure that between javac and the JVM a well-written for-loop gets parallelization, unrolling, and other optimizations. But, of course, I haven't worked on either of them so I can't say for sure.
&gt; `I.really().hate().it(); // WTF does a function called "it()" do anyway??` This is really more a criticism of bad naming than of function chaining. Let's say someone came up to you with requires saying they're gonna give you an HTML document, and they want you to find all `div` elements with a class of `"customer"`. Then, for each of those divs, they want you to find its parent containing element. Then within that parent, they want you to search all of its descendants for any `li` tags with a class of `items`, count the number of direct children that `li` has, and report a total. How would you feel about this code? return htmlDocument .findDescendants("div") .filter(div -&gt; div.hasClass("customer")) .map(customerDiv -&gt; customerDiv.getParent()) .flatMap(parentElement -&gt; parentElement.findDescendants("li")) .filter(li -&gt; li.hasClass("items")) .map(itemLi -&gt; itemLi.getChildren().size()) .sum();
Functional programming isn't stupid or clever, it's not on the bleeding edge or anything of programming in general. You don't have to use it if you don't want to, but the fact is, functional programming, when appropriate makes code cleaner and easier to understand, and more resilient to bugs, just like other concepts such as immutability.
You know, you can just final int i, and not have a final int val = i; in there. The copy to a final is not necessary. 
This does not compile.
I just typed it randomly in reddit. I can see typo's right now. for (final int i=0;i&lt;100;i++) to start. Otherwise it looks ok.
Yeah you are right, I guess I don't iterate like that very much anymore. Enhanced foreach doesn't have the ++ and assigns at every step. for (final int i:Arrays.asList(1,2,3,4)) { new Thread(new Runnable(){ public void run() { System.out.println("print: "+i); } }).start(); } I at least usually use iterator() or the enhanced for loop, and I usually use final on my enhanced for loops so I can call them from inner functions. Definitely wrong in this case though.
Or [SimpleXML](http://simple.sourceforge.net) if you're programming for Android.
Python, Ruby, JavaScript, and C++ all interpret code in the style of a Von Neumann architecture, so the code that is executing can pass-around and call references to it's own code as first-class objects in the program; functions are first-class objects. But the Java VM really something of a Harvard architecture, there is no machine-code instruction that says "jump to this address and continue execution there." This isn't strictly true, because of reflection and class loaders, but these are more of a Java binding to the native Java VM itself, and are not designed to allow for functional programming. This restriction makes it much easier for the Java VM to verify the correctness of classes loaded at runtime, because the execution call graph **must** follow the flow of function calls. The advantage of this restriction is it is impossible to trick Java's call graph verification algorithm which runs every time a class is loaded to make sure the code is safe. In fact, because all jumps must be function calls, verification of code correctness is very simple and efficient. In other languages, you can make program control flow very difficult to follow and thus difficult to verify. In C++ you can cast a function pointer to an integer, encode that integer as a string, pass the string to a function, decode the string back to an integer, cast the integer to a function pointer, perform a function call on the pointer, and the function call will still work. In JavaScript you can cast a function to a string using "toString()", modify the string, the cast the string back to a function using "exec()", and the function will still work. In Java these kind of hacks are impossible because there is no mechanism in the Java VM to make it happen. Although in Java you can use a string to retrieve a method from a class loader and call it, this is different from C++ or JavaScript because you are still going through the class loader, so you cannot bypass it's call graph verification mechanism when you use reflection. This makes Java very safe, which is one of it's design goals. But then this makes it very difficult to implement functional programming into the language, which is why the functional programming extensions to Java are all basically just syntactic sugar. If you are wondering why they don't just use reflection to implement lambdas, the short answer is: efficiency. Basically every single anonymous function call would have to execute a lookup in the class loader, which would be an order of magnitude slower than using the anonymous class mechanism. Of course, if the class loader caches these lookups then reflection will run every bit as fast as anonymous classes, but whether or not the class loaders can do caching depends on which Java VM you are using, so the caching feature is not guaranteed to work everywhere. **EDIT:** ~~So lambdas are just syntactic sugar for anonymous classes and you still get those annoying `ClassName$1.class`, `ClassName$2.class` files emitted by `javac` when you use lambdas. There is one of these files for every place in your code where you use an anonymous class, lambda, or function reference. These `ClassName$1.class` files all go through the class loader when they are executed, and you cannot create pointers or references to these objects. And method references are further syntactic sugar around this mechanism.~~ 
Debunking the belief that JSF can't or isn't used for (big) public facing websites?
Well worrying about the size of your ear or war seems a bit odd in this day and age. However mechanisms do exist to let you use your own version of libraries. There are mechanisms for globally updating the version of libraries within the application server (which would affect all apps on the server). Example: upgrading the version of Hibernate without upgrading the entire application server. There are mechanisms whereby you can include libraries specific to your application and you use configuration to tell the application server to use your libraries for your application (this doesn't affect any other application on the server, but you do have to deploy the libraries where appropriate within your ear or war, and configure the classpath appropriately so the application server knows to not override them). On one application I worked on, we use this model to ship our application with much newer versions of Hibernate and several other libraries than are available on the (shared) application server. This was on JBoss 5.1. We accomplished this by putting the necessary libraries within our ear file, and including configuration in the application to instruct JBoss to use our libraries before its own. I would suggest reading the documents for the version of the application server you area using. The way you can override the default libraries tends to vary considerably from version to version. Note that this creates a dependency that you have to fix and re-test any time the application server itself is updated. I believe in JBoss 7 there is a jboss-deployment-structure.xml file that you can include in the META-INF of your application where you can tell JBoss which modules to not load from the application server (and presumably they would be pulled from your application instead) 
To be honest: The described use case does not sound very challenging at all: A questionnaire with maybe a few steps which change based on previous input. In contrast: The mentioned hardware specs are rather frightening. I assume they must compute the answer for Life, the universe, and everything as a side-effect during their process.
Are you guys so poorly paid that your time to change all that is less that a bit more storage... Which is a very cheap commodity nowadays?!?!
There are many valid reasons to move from a servlet containter to a full fledged Java EE app server, saving disk space is not one of them. And why aren't you moving to Wildfly, which is basically JBoss 8?
Renaming their AS server was a bad decision by JBoss in my opinion. Management and ignorant tech advisers at several places I've been think it's an entirely new, unproven product and people are literally scared of it. 
Good idea, thanks. I know someone on an unrelated team who would love this link to help them make their case for Wildfly.
&gt; Management says it saves a lot of diskspace Have these guys touched a computer since the 90s?
They only renamed their open beta program, which you may not want to use in production unless you know exactly what you're doing. The final (GA) versions are still called JBoss EAP, as they have always been called.
&gt; There are mechanisms for globally updating the version of libraries within the application server (which would affect all apps on the server). Run 1 app per server! And deploy the Java EE AS just as it were an app. Problem solved. 
&gt; if you have multiple applications That's where you go wrong. Always deploy 1 logical application to a single server. IFF you deploy other things to that same server it should exclusively be modules that are logically part of the same app. In that way you just extend the EAR concept with one layer. But often you shouldn't need that, and one archive per server is more than enough. 
&gt; That's where you go wrong. Always deploy 1 logical application to a single server. Well, but apparently deploying multiple apps to one Tomcat is what the OP is doing. Tell *him*. :-)
Oh the banality!
The application of the concept as a hard rule seems specific to Java. The post I was replying to is an example of that. 
His management is probably not very tech-savvy. I would bet they're suit-wearing businessmen that make poor technology decisions that the IT department has to deal with.
Not sure how moving to a bloated application server full of libraries you don't need or want will save disk space. Perhaps they're planning on putting several applications under one application server? I'd spend the time finding a new company to work for.
1- As people already mentioned, IntelliJ is the default IDE for Android and if you are focusing on Android then just stick with IntelliJ 2- If an employer wants to impose that you use Eclipse or IntelliJ than that is usually a sign that you don't want to work for that employer. If your code and build system are setup correctly then both IDEs should works correctly and there is no reason to force your employees to use one over the other. 3- It won't take you long to learn how to use the IDE. The operations are the same. The biggest difference is where the options and menu items are.
Let me know if you ever need help, I do data visualization in my day job.
I asked around: due to compatibility with Redhat enterprise linux. Wildfly isn't supported as of yet as it seems.
I'll try to find out those specifics. For the moment I could only find an xml config to disable specific modules (like hibernate). Thanks
Well actually, it's for a government branch. Due to severe budget cuts there's almost no budget left for harddisks :-/. The dev's are already budgetted, so yeah, that's life in the public sector :-).
Great idea about the graph. I learned something new from it already: was surprised to see Mockito vs EasyMock chart.
&gt;I believe each app is going to use it's own class loader. While each app gets a classloader, a classloader has a parent that it can devolve to, and so on up an entire hierarchy of class loaders. Some ASes will delegate the class to the most "senior" class loader instead of the "closest" class loader (i.e. "parent-first" resolution). In these scenarios, applications can end up sharing classes with other applications if they are loaded at a point higher up the classloader tree. This can actually result in unexpected behaviour if one application plays tricks on a class, or fiddles with its statics; it can end up cascading to other applications. So it's not always true that each application in the application server gets its own copy of a class.
That's honestly a classic government scenario -- but if they lack budget for hard disks, and they are that hard up for space, they are going to have tears when the disks they have inevitably fail.
Are all your apps using the same versions of the dependencies? If so you could put then in Tomcats lib folder and set them as provided in your pom file (assuming you're using maven) If you're stuck with jboss or the like, isn't there a way to reverse the order in which classes are loaded? I know it's possible with WebSphere
Very nice! Prettier than http://search.maven.org/ The charts don't seem correct all the time. For example: org.apache.wicket:wicket and com.sun.faces:jsf-api Wicket dominates the chart. Which cannot be (however nice wicket is).
thanks, I'm glad it's useful.
JBoss 7 was built on the 'module' concept I think, I am not sure they have a nice simple "parent last" delegation flag like 5.x had. You may have to create a [big deployment descriptor](https://docs.jboss.org/author/display/AS71/Class+Loading+in+AS7) and pick and choose the modules you want to ignore or replace with ones from within your application.
I've been doing spring-based apps for a while now. What is the benefit of going with Tomcat? Spring boot embeds tomcat inside of it. You get the exact same thing, only instead of the container dictating what technologies your app uses, you do. I can't think of a downside.
Like they always say, it ain't government work if you don't gotta do it twice.
I guess it's a good article for people that just completed a course on Java should read. To me, that was just a waste of time reading.
The only real disadvantage is it becomes hard to run multiple apps on the same tomcat instance. For single application servers there isn't much of a downside... I guess it is harder to update the server sysadmins.
That's great for development, but I'm thinking about production. How do I run multiple related but distinct webapps on one server with a containerless system? With Tomcat as infrastructure, I just deploy all my wars to it. With Spring Boot.... what?
Is it easy to modify Tomcat (etc) parameters in production with a bootstrapped system? That would be something else I'd expect Tomcat-as-a-server to possibly do better. Performance tuning.
So what would that architecture look like in production? Say I have 3 webapps in my environment. Would I deploy each executable jar to a separate server, w/ nginx in front? Or just run each jar on its own port on the same server w/ nginx? I'm not sure what that buys me over a full manageable Tomcat instance.
I've been reading :-) I'm here to try to get a better overview. Isn't this an appropriate venue for that sort of discussion? Part of the problem is I'm only finding older resources on the topic. Was hoping someone would have more up-to-date info. I'll keep reading.
Useing "containerless" tends to be easier because you can just have X instances running their own tomcat with a loadbalancer of your choice routing traffic. In this scenario, if there are 3 apps, you could put all of them on their own hardware, or all 3 on one box. then have a separate load balancer or run it on the same machine, or any combination. The thing that "containerless" gets you is not having to configure tomcat to all hell to serve multiple wars from one servlet container. I currently work in a shop with both a monolith tomcat instance serving 10's of apps out of desparate war files in 1 tomcat instace connected via load balancers complete with failover, as well as spring boot apps with embedded tomcat containers running as their own process. The "containerless" spring boot apps using embedded tomcat are way easier to manage than the tomcat monolith. You can tune settings for the tomcat instances of the embedded tomcat settings independently, manage them via JMX in a much cleaner way, and generally prevent domain creep from other apps/processes. A traditional enterprise-y system will benefit greatly from embedded tomcat instances, as it will help segment concerns. you said yourself that you will have a rest interface with batch processing, which to me indicates perhaps a couple different concerns that could be segmented. imagine the rest interface queuing messages on rabbitmq for the batch processor. You have 3 components, a SpringMVC container doing the REST interaction that drops messages on the rabbitmq system to be consumed by the batch process consumer that is a third subsystem. Imagine if any of those systems need to scale independently... spin up more batch processing consumers, or a couple extra rest servers or processes. 
Scaling becomes a lot easier using nginx as the load balancer. You can put all of your wars on the same server, or you could move them to separate servers, or you could put half on one and half on the other. You can concurrently run two different versions of the server while testing and then when you are satisfied the nginx config is pretty simple to make the new stuff live. It even becomes possible and easy to do some interesting autoscaling stuff, bringing up and tearing down new instances of your app in response to demand rather than just having a fixed number of tomcat instances churning CPU just in case a request comes in. Doing this sort of stuff with tomcat is much more painful. Not impossible, just painful. As a side note, Embedded tomcat AFAIK isn't quite as popular as Jetty. Jetty lends itself better towards being an embedded library/server than tomcat does.
I've worked on projects with the traditional wars and projects with dropwizard (the inspiration behind spring boot). I would rather work on the dropwizard projects. Here's why: * Can use your ide to debug. * Development is far faster. Partly because your project builds faster without all the copying of libraries, and also because you don't have to keep redeploying. * New developers have a lower barrier to entry since you just point to them to some main class to run instead of having them run some command to make a war and then deploying it to an application server. * More consistent dev environment across the team. Mainly because there's no longer this additional manual step of downloading tomcat, making sure you copy jsf jars, right version, etc. And even if you do this correctly the first time, people tend to forget to update their jsf versions. * No more dealing with memory leaks caused by redeploys. Sometimes it's your fault, other times it's an external library. Either way it's painful to deal with. On a side note, I would say go with dropwizard over spring boot.
I would say go for it. If you get an interview, ask them your questions. 
I use Tomcat with a single application deployed as a war file for a few projects. I have not seen any downside to it yet. The biggest difference I guess would be in configuration and management? I haven't used spring boot yet but i'd imagine that if you wanted to upgrade your Tomcat, you'd need to fiddle with the application settings itself?
I'm not sure I see a lot of these as very different. I already debug in my IDE, I let Eclipse install it's own copy of Tomcat and deploy to it automatically, consistent dependencies are handled in Maven. Why does the project build faster? I would still build the same libraries into the project via Maven, no? Why do you prefer dropwizard? I was leaning Spring just because I like using the rest of the Spring environment, but I'd like to hear your opinion. Thanks!
That's fine if the versions are close enough to what's in AS 7.x. There may be API incompatibilities to fix though; not the end of the world.
Multiple camel releases that particular month. Artifact camel-core is used in other camel-* artifacts (and there's lots of them) and when they release it, they also release all others. For example month 2015/3 had 955 new releases, but 881 of them were apache camel - related releases: version 2.13.4, 194 artifacts; version 2.14.2, 217 artifacts; version 2.15.0, 234 artifacts; version 2.15.1, 236 artifacts 
All the points I made apply to spring boot as well. The last line is just my personal recommendation.
What's the tech stack for this application? 
How multi-cluster/load balancing will be handled using containerless?
The code in the Streams example is showing up with special characters replaced: List&amp;lt;Task&amp;gt; taskList = Arrays.asList( new Task(&amp;quot;Task A&amp;quot;, Task.Priority.NEW), new Task(&amp;quot;Task B&amp;quot;, Task.Priority.COMPLETE), new Task(&amp;quot;Task C&amp;quot;, Task.Priority.PROGRESS)); For a moment I thought that there was a whole new set of operators that I knew nothing about.
front-end: server: Embedded Tomcat configuration: Spring Boot presentation layer: Spring Web MVC + Thymeleaf, JQuery, HighCharts, Twitter Bootstrap data access: Spring Data JPA, Hibernate database: PostgreSQL indexing: Maven indexer, Eclipse Aether, JDBC plus several procedures inside PostgreSQL
Thanks, who is the host? If you can answer, how much is the cost involved in bringing up something (excluding development) like this?
Host is currently VPS on wedos.cz (in czech), I guess it's very similar to Digital ocean, it runs on Ubuntu. 2GB RAM, 1 core, 15 GB SSD, no traffic cap. Price is about $7/month excl. VAT. I must have this server up and running because of my job and it had lots of unused resources, so I put them to use :-)
Nope. They also offer domains (for good price I might add), but I have all my domains for historic reasons parked at forpsi.com (in czech), it's similar to GoDaddy and price is about $10/year excl. VAT.
exactly
&gt; Not a lot of datacenters running on low end consumer drives though. haha, okay, for HDD that's certainly a point ;) Let's then go for the most crazy reliable enterprise grade HDD in the world. The ones that are made by elves using silver tools in the moonlight beneath the 100 thousand year old tree. Those are ~10x more expensive per MB, so then the company saves that $1, **in total**, IFF they have 100 apps indeed and IFF they would all run on a single AS (which really, nobody does). 
Java does not compile lambda expressions or method refs into anonymous classes, and you do not get class files. Have you actually tried it?
Each new release a special set of new characters to make Java less accessible and less readable... Let's follow the latest fads....
&gt; If not, then I plead ignorance. Is this a eclipse plugin? I didn't know this was possible. If you have the Web tools installed (which you need for Web development), you can let Eclipse take control over your AS or have it download one (there are a lot of adapters, it's not just Tomcat). You then have all the usual options of running, debugging or profiling a Web application just as you would any other application. It's neat imho.
I've had the unfortunate experience of working on a similar beast. In a previous position, I inherited this monstrosity that runs on 10 JVM's. The technology was similar: JSF 1.2, RichFaces 3.3.3.Final, Facelets (after I upgraded it from JSF 1.1 and JSP - bleh), Tomahawk, Tomahawk Sandbox, some version of Hibernate 3, and many more. All of it ran on WAS 6.1. There were "memory leaks" associated with RichFaces and the particular version of Hibernate we were using. That project taught me everything that I should NOT do, and it almost claimed my sanity at several points. Never again!
JSF is overal one of the most popular frameworks ;)
If there's one thing I don't regret doing was learning Java back in 2001. It has now a massive ecosystem that keeps growing and I don't see the end of it. I tried to get back to C++ a few years ago but couldn't. I felt like I had to reinvent many wheels in order to be remotely as efficient. Same with other feeble attempts with C#, RoR and Python. In my opinion the only *new* languages that stand a chance of taking over the world again are the ones that can reuse the massive ecosystem that exists around Java &amp; the JVM (Scala, maybe?). Anything else is almost a wasted effort as there's a LOT of catching up to do. I'm pretty sure that Java will be at the top of the charts for the next 20 years, and Java 6/7 becoming what COBOL is today.
But unlike COBOL, Java will have millions of developers 20 years from now.
An actively developed, free alternative to jRebel is [spring loaded](https://github.com/spring-projects/spring-loaded)
For the record, you *can* build a Spring Boot application as a war and deploy it into a servlet container. We've run with Spring Boot in my current project, and use the embedded Tomcat rather than a container. Firstly we decided to go down this route because we were shipping the apps as RPMs and a self-contained app was simpler to package than managing a Tomcat instance through RPMs. Now we've changed direction and are moving toward Docker in AWS. A self-contained app makes even more sense there, since the process we run in the container **is** our app, rather than a Tomcat instance.
It's all moot anyway because even if they save the disk space, what are they going to do? "Ok boys, the deployment is 20MB smaller now, let's rip out all the 120GB drives and replace them with 119.98GB drives!"
IntelliJ and NetBeans are both also rich client platforms.
Oh yay it's.... uh no. It's not. Why is this here?
Interesting! Thanks for the explanation.
Actually, doing anything auto or home insurance related in the U.S. is extremely complicated, even for a "simple" use-case such as this. Every state has their own laws covering insurance, there is no unified set of laws. Having said that, I still wouldn't use JSF for an application like this (or any application for that matter)...
They implement an agent which can do pretty much anything—at least [the documentation suggests that](https://docs.oracle.com/javase/7/docs/platform/jvmti/jvmti.html#RedefineClasses). It doesn't really have anything to do with breakpoints (I remember hour long coding sessions without restarting the JVM). I'm not sure how that compares to the [feature matrix](http://zeroturnaround.com/software/jrebel/features/) I just found... Anyway, with Eclipse debugging realistically you can only edit methods, not add or remove them. I'm not sure if that is a limitation of the interface or the implementation. With regards to the link above I suspect the latter. In any case, I don't want to deny that JRebel is useful. I have all reasons to believe that it's a solid and valuable piece of software.
Are you familiar with Spring? I was wondering if on some test server, I could add a resource mapping to localhost since my team is using gulp to watch and serve files so that way all of their UI changes will be updated instantly. Any help would be seriously appreciated thanks!
Make sure you get your object names correct, kinda like your title. 
Similar project experience here; slightly different stack. Performance profilings only showed IceFaces / JSF classes bothering with themselves. After dropping JSF*-frontend and replacing them with an Angular/REST based solution, we were able to shrink three 24CPU, 48GB machines to: 1 GB Quad-Core while increasing the maximum concurrent users from 30 to 1000+ The JEE backend was 1:1 untouched. 
[Start here](http://lmgtfy.com/?q=java+tutorials+for+beginners).
great to see more support for @jsdoc tags. as primarily a java programmer, IDE code understanding makes it a lot easier for me to code in javascript 
If you're interested in that sort of thing, there is also the [Java Instrumentation API](https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html) (used with the -javaagent switch) which seems to be much more limited than JVMTI (-agentlib and -agentpath switches) but also allows redefining classes without having to use the low level C interface. "spring loaded" which is also linked in this thread uses the Java interface.
I'll try to do that, but what about my integration tests? They depend on hibernate (entitymanager) to connect to the db (rollbacked transactions). If I set the scope of hibernate as "provided" it won't be available during the maven surefire phase. Correct?
I almost did that but there was a problem with cookies not working.
How is it handled when you use a container? Clustering and load balancing are always handled the same way. There is some web server or load balancer that knows about all the sockets your application is listening on and it distributes traffic to each of those. Some stacks like WAS provide a management UI that maintains this for you while something like apache + mod_jk + tomcat it's a manual process. Either way you are doing the exact same thing at the end of the day.
Yes, but nobody knows about that feature, and virtually everybody says there's no such thing. Which leads to frameworks that aren't as good as they could be. So the article does have some value, even if the title is slightly misleading.
That's hardcore - Spring 1 - I didn't even think to have that as an option in the poll. Well - early results look good - looks like Spring 4 is over 50% adopted, and Java 8 about 40% - so quite high. We'll see in a few days what the final numbers are. Cheers, Eugen. 
I don't quite understand what you mean. Can you tell me what you're trying to accomplish?
Damn they really did a lot for 8.1. Impressive.
It's stupid one way or the other. $30 per GB... I think that's rare, especially to store non-unique data (like wars that are generated from source, and an AS + jars that are off the shelve). But let it be $100 per GB, totally unrealistic. But suppose you get an 110% uptime guarantee and a contract with a divine being who will personally restore each and every bit should even one become lost. Then we're still talking about a whopping $500 in total savings??? :X And that's under the totally ridiculous assumptions of deploying 100 apps to one AS (again, NOBODY would do this), and an over the top out of this earth $100 per GB cost. If you are at 95% capacity and 1 GB makes the difference, and you are really running 100 apps, then I think the company has much more severe problems than saving a GB of disk space.
The real bad decision was to skip JBoss AS 6 for an EAP release. So JBoss EAP 6 is the same as JBoss AS 7. I work in an enterprise that deploys both and this was leading to a ton of confusion.
From an enterprise perspective, standardizing on a full app server often makes sense. If you have 100 different applications in production running tomcat it means that you have 100 teams that essentially rolled their own app server. This means that your QA, DevOps, and Performance teams need to be able to support all the quirks built into these projects. Things like security patching or even auditing the licensing of all the libraries used become very difficult. A licensed version of JBoss EAP will come with support for security patches and the like. If you are talking about something like how to tune, cluster, and scale the apps; your Ops team has to be aware of what capabilities are built into each project and how to tune them individually. If you force all of your teams to use JBoss AS 7 or something, you will have some teams that are upset because it is harder to use the latest version of Hibernate or something but you at least know that the cluster configuration for all of the applications will be the same.
I love it, but I understand your mixed feelings. * What do you feel like you're missing out on "container integration with IDE"? I'm not too familiar with using IDE tomcat/glassfish/etc, so I don't know. * What challenges are you having with debugging? * Spring Boot supports logback out of the box, you throw your config file in and go. Even more simple than that is using spring properties to configure your logging. * Convention over configuration *has* been a big pain point. Spring boot makes doing it there way *really* easy, but if you want to change that, you have to have a pretty good understanding of what Spring Boot is doing, as well as an understanding of Spring as a whole, which can be very overwhelming. Overriding Boot's defaults has definitely been a pain point. We've been really happy with Spring Boot. We haven't had a lot of time to see how it does in production, but it has been miles ahead of other containers we've used in the past. The amount of support Spring and Boot have received in the last year has been staggering. I highly recommend checking out [this webinar](https://spring.io/blog/2014/09/17/webinar-replay-building-bootiful-microservices-with-spring-boot) covering a lot of features of Spring Boot, and to see how companies like Netflix are using it in production as a true microservice architecture. I'd love to hear some of your struggles, maybe there are solutions :) 
I use intellij and with a bit of copy + paste from the spring boot web-services tutorial I can have an up and running RESTful service in minutes. If I have to do data storage I won't use it though. I use it for my personal projects and for putting up services at work.
I'm relatively new (started my first software job 8 months ago), so when I learned Spring Boot, I went "okay, that was nice". When my coworker (who is young but has years of experience) learned Spring Boot, it absolutely blew his fucking mind. I was so shocked to hear that he used to spend days getting a web application running. My company now has a number of projects in development that use Spring Boot. I don't think we've had issues with debugging or logging, but maybe we just haven't run into them yet. I don't think we have any such projects in production yet, so I can't comment on that, but hopefully we can sidestep most production configuration issues by running these apps in Docker containers.
debugging is wonderful in spring boot i find (better than a maven +jetty app). i am in love with spring boot. tomcat and friends will never go away, they have their place, but spring boot is awesome.
I don't like it at all. It has uses, but in general I feel that, as an abstraction, it does not help at all for me at least. Unless you want to setup project that aligns perfectly with Spring Boot defaults you'll have to deal with lots of pain points. It's simply not a "5 minute project setup technology" I was hoping it will be and in many cases traditional Spring MVC setup offers less pain, so I'am sticking to that for the time being.
While Jackson is great and works well, I always feel like it requires a bit more work than another library such as MOXy, which doesn't force me to use an ObjectMapper. MOXy's @XmlRootElement and @XmlElement usually does the trick. @XmlPath typically allows me to use only 1 POJO too instead of a POJO hierarchy for most use cases. MOXy provides solutions for more complicated JSON structures as well. As I said, Jackson is good. I just think that there are other JAXB alternatives worth considering.
Lovely and useful, as always :) Have you ever written about the low-level guts of Java 8 streams, i.e. Spliterator, etc? I've recently had to delve deep into this level in order to bridge a necessary gap between Iterator-coupled and stream based APIs.
The Java enhancements are the very first on the release note list. Support for other languages is both well behind Java, and those languages (and their associated technologies) change faster (or, more accurately, go in and out of fashion faster), so obviously there's more work to do. It might also be a better marketing strategy, because NetBeans has less competition (or isn't so far behind in adoption) in those other languages. NetBeans is my favorite Java IDE (I prefer it to IntelliJ for Java, though I use the latter for Clojure), and while I wish for a new, mindblowing, Java feature, I can't really say what it is (whatever it is, I haven't seen it anywhere else). Maybe an integrated omniscient (recording) debugger? While not strictly Java related, I also wish for better Gradle support. While NetBeans' Gradle support is better than IntelliJ's, it is still far behind the support for Maven. Most of all, I'd like a Gradle debugger, or something that would let me introspect the inputs and outputs of each task or configuration.
If it's improving your productivity, why not? Unless u're not a spring programmer or have no one to guide u around. Then I believe switching to spring Boot for production, simply because of the hype, is a suicide. In addition to that, u don't have to deploy it as micro services. U can run it as micro services during Dev for productivity reason, then switch to normal war deployment during staging or prod phase. 
Can you elaborate on the pain points? And what you've tried to do that was not consistent with the defaults of Spring Boot?
I have elaborated many times in the past (you can check my comment history), but just because it never ended up being constructive, do not think like elaborating. There were many problems, for example one of those was time I needed to setup JSP templates.
oh, sure, I get that. Yeah, at this point, just trying to figure out if there is *any* good use case for a standalone app server. Seems most /r/java people are saying no.
And sure enough, tucked away in the documentation, you can't build fat jars for JSP projects. This took me *hours* to figure out :|
and you say that based on what?
it is great, but I still prefer Dropwizard as a more rounded and flexible approach. The ability to open 2 ports (one for public API, one for admin ones hidden behind a firewall), integrated healthchecks for monitoring, etc. makes Dropwizard a great fit for a cloud-based microservice architecture. That said, it's probably trivial to add the same equivalent functionality to a Boot app 
How did you deal with cookies?
&gt; but nobody knows about that feature Any Java developer, that is worth their salt, either knows this or can find this out easily. &gt; So the article does have some value Yes, and I am happy that some people write about Java features. But please do not mislead people like that.
good write up but it's misleading to say atomic are faster than locks. They aren't. Atomic and atomic instructions introduce memory barriers and will prevent cpu reordering so you will actually be slower than compared to an unconteded lock which Is nearly always implanted as a spin lock first before switching to kernel monitors The reason to use atomic is not speed. The reason is guaranteed throughput. Though it may seem faster on heavily loaded systems doing lots of locks, but on a lightly loaded system where the chance of contention is actually reasonably low a lock is probably much faster. Anyways, as always benchmark first :)
&gt; I am nervous about this whole obfuscation business. I agree, things like debugging, logging etc are doable, it is just another way of doing it, which is proprietary to Spring and it bothers me. Proprietary? I don't know what you're talking about. &gt; I like to tweak my containers separately and I have to admit - I bother juniors to better understand how to set applications from ground up so they better understand what Spring does and WHY we use some particular module here or there. I would encourage you to write down *what* you like tweaking and *why*. Start using technologies like Boot and Docker and after two weeks ask yourself if you actually need any of those tweaks anymore. &gt; I know Spring boot is meant for something small and simple, but assuming you know your way with (some) Spring modules and all your procedures, workflows, pipelines are tailored to normal webapps, would you consider creating new pipelines for Spring boot apps? * Boot *is* a normal web application. Whether you embed or not is a *choice* and you can do *both* even in a WAR format. * Boot represents an implementation of a new paradigm. Yes, I would absolutely create new pipelines. I never *stop*. Even if you don't use Boot you probably want to be changing your pipelines. * Boot isn't meant for "small and simple". It removes largely unnecessary boilerplate and puts Spring in a position to take advantage of modern architectures and technologies. The size of the project is essentially irrelevant. Boot looks special, it's not. It's just Spring configuration streamlined.
These are not issues directly with boot, but issues with the whole micro service architecture. 
I see no point of having a WebSocket Client API. The only time it would be helpful would be if you wanted to connect to a server that only offered web sockets. However, surely no one would write a server that only accepted web sockets? The Netty library makes it trivial to write server applications that accept both normal TCP sockets and web sockets. I would imagine that is what most people would do. Seems like a lot of effort for a very limited use case. I suppose I could just be short-sighted and not seeing the use cases but I can't think of anytime I have told myself I wish there is a Client API for web sockets in Java.
&gt; So converting function pointers to strings was completely irrelevant then. No. Java checks the call graph of the byte code when the class is loaded to make sure that all function calls are to other functions that have been defined *somewhere.* If you have ever tried to implement a language analysis tool, you know how difficult these call graph algorithms can get. If the call graph of your program involves interpreting a function that was generated from a constant string somewhere else in the program (as you can in JavaScript), the call graph analyzer needs to invoke the entire language interpreter to interpret that string to see where it calls to, and the interpreted function itself may define constant strings which are interpreted, and so on. If you can perform arithmetic on pointers to functions (as you can in C), then call graph analyzing algorithm must be able to evaluate the arithmetic, and this arithmetic may involve calls to other functions, which may in turn involve more pointer arithmetic. In either case, the algorithm has to give up at some point and say, "I cannot verify whether this call graph is safe." This is called the undecidability problem. Now, unless I have been misinformed, the original designers of Java knew about that and so to keep the call graph analysis simple, they avoided any JavaScript-like mechanism to convert a function to a string and back, or any C-like mechanism to convert a function to a pointer and back -- in other words, they made sure functions in Java were **not** first class objects, and this makes implementation of functional languages more difficult (but not impossible), because functions as first class objects is one of the defining features of a functional language. I don't know much about the new *invokedyamic* instruction but the fact that Scala was able to implement a functional language without that instruction goes to show you how difficult it must have been to try and extend Java with functional programming features -- they actually thought it was easier to build a whole new language from the ground up than try to extend Java with functional programming features. Because like I said, a defining feature of a functional language is that functions are first class objects, which something the JVM does not like to do. The Java language is a kind of "low-level" language to the JVM, so it doesn't surprise me that in order to implement the lambdas feature, they needed to actually modify the JVM itself, because the original JVM design did not allow for functions to be used as first class objects. 
I actually haven't used Java 8 much, so I don't know what the state of the art for libraries look like. What I wrote is basically how I'd "like" an HTML parsing API (so yeah, your BeautifulSoup comment was spot on) to look like, based on my experience with JQuery and Scala's collections API, but adjusted to match Java8's syntax.
Well, you know where Tomcat configuration files usually are, Spring has different, it's own (this is what i mean by proprietary) ways of configuring embedded containers. Properties files, annotations, whatever, it is different from the default. A person who knows how to configure a normal container will have to RTFM. It is not bad, it is just different. If you have a farm of Tomcats, you need to consider consistent ways of maintaining your infrastructure. By tweaking I meant something rather "unnatural", at least to me. Configuring container through the application properties is strange. As for the part with embedded or not - it is not entirely painless as you describe it. I agree with you, we change our processes constantly, but I doubt that "change" itself is the argument why Spring Boot could be a reason good enough to change. In the last point you mentioned something very important. What do you mean by removing "unnecessary boilerplate"? Boilerplate what? Spring was born boilerplate and is still boilerplate. I do not entirely understand how modern architectures are involved here. For micro services there are plenty different ways, more straight-forward and light, but that's another topic. I know, Spring Boot is an opinionated technology, this is why I asked the community for more insights. Thanks a lot, I really appreciate your comments, it gives me food for thought :) I am not against the technology, every technology has its application areas and I am just trying to find out which gap Spring Boot fills out in the enterprise landscape. Thanks again!
I haven't read the whole thing but no one really took those ideas and reused them. Each top language is pretty distinct. Like JavaScript, Python, Ruby, Clojure, Haskell, C# I like two main aspects of Java which I would like to see in other languages. * A virtual machine that runs bytecode (you kind of see this in JavaScript with modern JavaScript engines like Chrome/V8). The browser is becoming a virtual machine but a backwards way towards it. * Compile time type checks. Compile checks for basic type errors. By having compile time error checks and compiling to bytecode, you have a pretty good idea how the code will operate, even 10 years later. JavaScript and Python (for example) are decent languages but how many developers have to take apart the code sometimes if there are run time bugs.
Push Notifications to a JavaFX app? An example use case could be someone wanting real-time updates from a service such as Google GCM or Twitter.
This looks interesting
nice auto correct, nerd!@! Hearthstone by any chance? 
At a glance, this reminds me of how Gradle plugins work - they're really just a unit of build configuration that can be applied to a project, which makes it really easy to extract out common build logic into plugins.
Ah no, I've never gotten around to playing that haha. All I play at the moment is old school runescape :P 
You wrote an excellent response. Don't mind anyone that tells you otherwise. Thank you.
You will probably find this out yourself, but learn your way around the three major Java IDEs (NetBeans, Eclipse, IntellJ IDEA). Get to know the basic concepts of version control and project methodologies (Waterfall, Agile). And also - this is actually a ProTip: Look at Guava, apache-commons and spring. This will help you immensely. Guava and apache-commons supply the tools you need to work around some limitations of the Java language.
doesn't gradle use maven?
This never works reliably for me with one of the legacy apps at work. I always end up building and deploying it outside the IDE and then attaching the debugger. 
Yea, you are right, I wanted to throw it in there on top languages. Only caveat is that it is tied to microsoft/windows. 
I enjoyed your video. It's very well put together. I just wonder if you should be talking about casting, and instead should have just stuck to using an int. Might be too confusing. 
It can use maven-style or ivy-style dependency resolution and publishing if that's what you mean.
It's incredible rare for this not too work. It worked all the way back in 2003, and that's really legacy now. The only situation may be where you have an incredible obscure ant based build, that you just can't integrate with an IDE. This is really the exception and not the norm in Java EE.
What IDE and server are you using then? Of all popular combinations I only know of GlassFish and Eclipse. The Eclipse plugin for GF is extremely buggy. NetBeans and Gf work fine.
Hi Wombat Just randomly stumbled across this and felt it deserved a comment. This is really good. Seriously. I would say the best things about it are the comments with links to different parts and the fact it's done in intellij. Keep up the good work. I wonder would many people specifically search for Java tutorials in intelliJ. Would it be worth putting intelliJ in the title to possibly get better search results? Aim for that niche. One thing that would possibly concern me is are you losing traffic by putting so much in a video rather than split it up into many small videos with separate titles? Even though i would personally prefer it like that you might be losing SEO traffic. 
Thanks Your-Ma (nice name), I didn't know people were searching for tutorials in IntelliJ, I will do some research into that. And I think I would get a lot more traffic in the future with seperate videos, that's a good point. I am planning on doing less topics in a video in the next videos, but I just thought you had to know most of this things to get started in Java, and as an absolute beginner it would be hard to look these things up since you I imagine you don't know what to search for. (except for casting, but I just felt like doing it.) Maybe I will make (apart from the tutorial series that will teach you everything if you watch through it entirely) really short videos on one specific topic with almost everything there is to tell about it. And did you have trouble understanding what I said because of my accent, since English is not my native language (Dutch is)? 
I'm working on it, so I'm biased. Sorry, you asked, hence the promo below. YMMV. It's been production ready for over a year. It's essentially an alternative to Xamarin for the Java ecosystem, with the benefit that Java is native to Android. Performance is great (on par, or better than ObjC). You have full access to all iOS APIs and you can easily bind 3rd party libs via our Bro binding bridge (think JNA, but fast). You can even extend ObjC classes and implement protocols straight from within Java. Debugging is supported, both on the Sim and device, supporting standard JDWP. We also integrate with Interface Builder, so you can create UIs in a WYSIWYG fashion. We support Eclipse, IDEA and Netbeans. We have Gradle and Maven plugins for sane build and dependency management. Scala, Kotlin and Clojure are also confirmed to work. What are the downsides? Binary sizes compared to ObjC apps are bigger because we need to ship parts of the Java class library. We are currently working on this and want to bring it down to 5mb per CPU architecture (currently 10mb). You can't load byte code at runtime on iOS, due to Apples TOS, so everything has to he compiled ahead of time (we do support full reflection though, including proxies). Compile and link times could be improved further (10 secs from pressing a button to seeing the result on the Sim/device for a simple app). You can only share business logic and the C/VM part of MVC/MVVM across iOS and Android as we don't have a native cross-platform UI API yet. We do however support JavaFX, though that is not yet 100% production ready. You will also always need a Mac to compile for iOS due to Apple restrictions. We are however thinking about a build host solution. You can use it for free (no debugger, interface builder integration -&gt; write UIs programmatically) or give the 14-day trial a try.
But you cannot program anything. You have to program an applet with it's own preloader. I'll leave [this](http://www.javaworld.com/article/2077321/client-side-java/creating-download-progress-bars-for-applets.html) in case you need it.
NetBeans main focus through all the years has mainly been on Java development... i.e., there have been more hints, more refactoring tools, more debugging, and profiling in each release. E.g., one of the major features in the upcoming 8.1 will be a redesigned profiler, to name just one thing.
 class birthday { public static void main(String[] args) { System.out.println("Happy birthday, Java!"); } }
I'm going to trust you on that and force the captions. It does take an hour or more for a video like this one to make them, so it would be nice if they would be used. I remember that name, I will do some research on him. Anyways, thanks a lot.
Netbeans (up-to-date) and Tomcat (old). 
Funny. Been using Java since 1996 and probably wrote two applets total. In 1996.
At least spell birthday uppercase like the Java style guides tell you to.
Java and I share a birthday?! I'll remember this forever!
This checks out as I remember being given a book, Java 2nd edition for my 15th birthday about 19 years ago... Damn I feel old.
So does [MySQL](http://en.wikipedia.org/wiki/MySQL). A little surprising that they were both released on the exact same day.
ETA for a release date?
That sounds really weird, but just for fun and giggles, did you ever tried Eclipse?
Why are the classes implementing `Serializable` ? It's not needed for jackson
Is there an accompanying unit testing library? Is how is security handled?
That's actually a good collection of links. I approve.
No. To be honest it's not a big deal since I probably spend no more than half a day a month in that codebase, so I'm not highly motivated to fix it. Other devs in the team use eclipse, so maybe next time I'll try it. 
Using Gradle, this is a matter of applying an additional plugin. 
Oracle are developing Graal in their research labs in order to make it easy to create language frontends that use a common optimising backend. http://openjdk.java.net/projects/graal/
Idd, but mixing kotlin, scala and java at the same time (full joint compilation) is difficult to achieve..
Debugging works fine, I just have to jump through hoops to do it. 
Spring Boot has the equivalent, it is called Spring Boot Actuator, which has support for Dropwizard Metrics. 
The project is unlikely to grow much on the backend, only new features on front end. It's not a webapp and I don't think the client is going to be hosting it, so REST isn't really useful. JSON's on the table, but so is everything else, since anything I'd do I'd have to learn. XML things I'd found on stackexchange suggested its best to use things outside the API, so I'm in a position where anything I do is going to require work so I'm trying to figure best course of action first before moving forward. The exportability of any data is, ultimately, only one record at a time.
So, tl;dr: not really, unless you need to run stuff on a 32-bit machine.
Sad .. subscription renewal is not part of the discount ...
I think maven for now is faster than gradle. And in the long run maven will always have better tooling (i. e. IDE support) than gradle.
Unreadable in mobile Firefox.
Works much better in mobile Chrome.
Interesting post. I usually run 64-bit but a most recent assignment had me migrating data from a foxpro table. Only way to accomplish it was getting a 32-bit driver and running it in a 32-bit environment 
Is it worth it? I'm quite happy with eclipse and I'm old enough to hate change ;p
I have the student version and I love IntelliJ ;)
As a long time intellij user, most of these aren't actually true. You can do all the things you claim you can't... It's just slightly different than how it's done in eclipse so if you don't spend a little time figuring out you'll think functionality is missing
[This](http://www.stlouiscountymn.gov/portals/0/Library/Land-Property/Garbage-n-Recycling/Garbage-Disposal/electronics3.JPG)
Why are you clicking around the package tree? Ctrl N to go to a class you want. Then hit the little x thing to scroll the tree to that package. Shows you exactly what you need without randomly clicking around the source tree. 
I switched from Eclipse to IntelliJ about two years ago. After a couple weeks of awkwardly learning the differences, my productivity level soared. I didn't mind paying $199 for an "Ultimate Edition" license, in part because I knew that future upgrades would only be $99. Then about a year later, JetBrains changed their renewal policy. It used to be that paid owners could "skip" an upgrade, and only pay the $99 when a worthwhile upgrade comes along. Today, your JetBrains subscription is now an annual thing that you MUST renew every year. If you let it lapse, then you must pay the full $199 the next time you want to upgrade. That change left me a bit sour. I still wholeheartedly recommend the open source "Community Edition" of IntelliJ, because it's free and much better than Eclipse. However, I no longer recommend to newbies that they pay for an "Ultimate Edition" license. The paid add-ons really aren't all THAT necessary (e.g. HTML syntax highlighting, Spring/JEE stuff that is almost redundant if you're using Gradle or Maven anyway, etc). Just use the open source free edition, until you find something that you absolutely MUST have the paid version for (you probably never will).
The only thing shit and broken is you dude.
I wonder for newbies if it might be better to point them to Netbeans. I'm finding it to be a very clean IDE to work with that seems to have good built in default features. For Python I use PyCharm, so it's not like I'm not familiar with the IDEA editors. It's just for a small, self contained project Netbeans does a pretty good job promoting a solid layout with build scripts, tests and javadoc.
IntelliJ is a lot faster than eclipse in my experience, and has better features.
 Student here as well. Love it!
In short H2 database is most commonly used as database for integration tests. It features in memory DB (the one that gets wiped after progrma stops), DB in file (the one that will suit you the most) and standard TCP/IP server DB mode. I really recomamend you to use in file H2 DB. It makes data manipulation a breeze. As far as external packages goes take a look at [maven][(ttps://maven.apache.org). Maven is used to handle dependencies and building JAR among all other things it provides. Google "fat jar maven" when you come to the part of packaging your application. Anyways good luck :)
If you're coming from popular dynamic languages and frameworks like PHP, Ruby on Rails or Django, JSF is really weird. I would not recommend it, although I'm sure others in this sub will. I never got a super solid grasp of it but it seemed like a lot of unnecessary trouble to create most basic parts of a website. And I suppose that me not grokking JSF isn't necessarily JSF's fault. But from what I did get through it seemed JSF strongly favors HTTP POST for basically everything, and the navigation was strange. I really had a hard time grasping how the ideal JSF website was supposed to behave and why it was so different from every other framework I had worked with (which include PHP, Rails, Django, Flask and Pyramid). That said I'm still kind of curious about it, maybe just because it *is* so different. That said I had a much easier time hitting the ground running with Spring MVC and JAX-RS. For me personally I'm mostly focused on JAX-RS (which will be the basis of the upcoming JavaEE MVC framework). Also, while JSF is weird, JPA seems very popular.
Agreed. Wish they would do something about this. I know it's not easy because of the way Java handles fonts but when you're paying for an IDE, you expect a solution. 
As for the project files, you can get it down to 3 files and 0 folders. When making a new project, you can select .idea (Folder Based) or .ipr(File based). If you go with .ipr, you get 3 files for a one module project.
&gt; That said I had a much easier time hitting the ground running with Spring MVC and JAX-RS. For me personally I'm mostly focused on JAX-RS (which will be the basis of the upcoming JavaEE MVC framework). Thanks for your answer. Im very newb about REST can I use JAX-RS which I understand is Java EE REST framework to do a simple crud app? 
&gt;Also make the 300 testNG test cases in univocity-parsers[1] run in one go and display the results correctly. Also try to make the outputs of the examples print out correctly. TestNG is currently fixed in master, so make sure to try IntelliJ 15 EAP when it gets released, it works very nicely.
A ton of apps are written with JSF + JPA but not so much public web sites. JSF side emphasizes type safety over rapid development so it depends on the kinds of apps you want to write.
You can do CRUD in JAX-RS, but I don't know if there's anything like Rails scaffolding or the Django auto-admin. Pretty sure there's nothing built in. I did find this through Googling: http://lightadmin.org/ But aside from scaffolding, JAX-RS can be used like most popular MVC frameworks. JPA entities are your model, the JAX-RS resources are your controllers, and then presumably you also use a rendering engine such as FreeMarker or Velocity for your views. You should be able to find resources about it online. Most people use Jersey to implement JAX-RS services, and Jersey has decent docs
JAX-RS is better for constructing *services* vs. apps. The idea is that you would use JAX-RS to implement service calls, for instance (but not necessarily), API calls that take JSON or yield JSON. JAX-RS is not good for full web-apps because it's not a templating engine, just a way to map requests to responses. You will have to do a lot of experimenting with web frameworks in Java, because everyone uses a slightly different tool stack. Not that it should influence your technology decision, but JSP is much more popular than JSF, at least in the sphere of web developers I've been exposed to. So it is a little tougher to find information on JSF w.r.t. its integration with other tools. You *should* be able to read JSF and JPA tutorials independently. JSF is a view technology, while JPA is a data persistence framework. Typical tool stacks will also include Spring or a similar Inversion of Control framework to handle all of the wiring, although, again, popularity shouldn't be the sole basis for your decision. What problems specifically are you having? If you're just having difficulty conceptualizing how to build your app, I can tell you that no other framework will eliminate that. I'm not a huge fan of JPA (or its original basis, Hibernate), but it's not too bad when used for a new application. (I find it painful to get it all working with an existing database schema unless it's a trivial schema).
I've been using IDEA for quite a while, and the thing I'm still missing is ALT-[1-9] to immediately arbitrarily switch editors.
Thanks! I submitted s few bug reports and they seem to be working on this lately.
That's right. Control-B to go to the declaration of a type, find usages for seeing implementations/usages/references, etc. Package structures are nice, but even better are diagrams (FYI: which can be auto generated) that can give you a better idea of topology and coupling/coherence. Package navigation is pretty much for junior engineers that haven't learned more efficient ways of navigating and managing complexity. If you aren't a junior engineer and are still doing it that way -- you have some catching up to do or had some shitty mentors.
Name your classes well. Obviously first week in a project you need to click around. But that hardly requires the navigator every day or something. 
Without circle jerks reddit would lose a bit of its purpose :) To you first point, I'll counter with that when dealing with a thousand class project, I usually have a starting place. A utility method I'm using, or an object - something I can use to begin understanding the code. From there I open declarations... Open interfaces... Parent objects... Etc. Maybe that's just my preference but I wouldn't know where to start just opening the project tree. If it's a project written in house, the package structure is fairly standard so it makes it easy to find things. If I'm doing something with an Organization class... Just search for classes with organization* will give me appropriate services and daos. But yes... This is something they have a keyboard shortcut for so it would be nice to add in a mouse button as well. Though you could remap the key. Regarding the compile error stuff... You could try this: http://stackoverflow.com/questions/7418379/intellij-debug-a-program-even-if-it-does-not-compile I'm not near my computer at the moment to test it out.
I have been building JSF and JPA web applications for about 5 years. JPA is used by the majority of Java web applications. JSF is also very popular but the MVC and frontend for Java development is very fractured. I can tell you I am dramatically more productive with JSF. It is by far the best improvement to Java in the 17 years I have been working with it. 
&gt; The thing to do for web applications these days is have RESTful services and a client side framework that renders everything and, well, that's not really JSF. Which is sad, because JSF could've been that. Sadly, it got design-by-committeed to death in classic enterprise Java fashion, and ended up being made into something... different.
It was a product of its time. It was designed over 10 years ago. At that time, you did server-side rendering because of how deficient the client side was.
That's a byproduct of allowing generic HTML to be rendered. People will find a way to make it do cute tricks. That, and JSF 2 formalizing client side interactions. My point is that the decisions made back in 2002 or whatever impact what you see today. It was never designed to fit into a SOA mold. But for the time, it did a good job.