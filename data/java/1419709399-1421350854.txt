Yeah, I guess you're right. I just read somewhere that the recommended way of upgrading was through apt-get, but since it hasn't been packaged yet, this is not possible. Whenever it *does* get packaged and is able to be installed through apt-get, how will I do this if I have already installed it through a repository? Uninstall Java 8, remove the repository/PPA, do apt-get update and then install it?
Why do people even consider "the JavaBeans pattern" a viable pattern anymore? You should minimize mutability, especially if any kind of concurrency is involved. Even my mutable classes lack JavaBeans style setters, though. It's just bad practice...
&gt; since it hasn't been packaged yet, this is not possible Whatever do you mean? See: https://packages.debian.org/sid/openjdk-8-jre Based on your mention of PPA, I guess you use Ubuntu, which is based on Debian testing (jessie) which is currently in freeze. So you won't be able to install Java 8 directly. However, you might be able to download the *.deb manually and install dpkg, though I wouldn't advise that personally. It seems easiest to just use Java 7 for now, then upgrade to Java 8 whenever you can. Shouldn't be a rush unless you're looking to code in Java 8 (in which case you can go the manual install route).
it really depends on the req. If db is mandatory, i would go with a simple web app that can be made in like 5 minutes instead of swing app. the fact that you think about scalability makes me chuckle. The same reason I think a db is overkill. spreadsheet as an export - to view existing data in a spreadsheet format. The data is "not" stored as spreadsheet. 
I think anyone that says "*new version* is less stable than *old version*" is just fear mongering. Java is a solid platform with a comprehensive automated test suite (the TCK) which is why different versions and even different implementations are fully compatible. New versions have more attention (they're actively developed), get security updates, and have all sorts of new features. Java 7 still gets security updates, and maybe for production servers this makes the most sense, but in a development environment, it seems best to be able to make use of the newest and best stuff.
That's why I use SecureRandom.
If you don't want to setup a WebDriver, I like to use [Mechanize4j](http://gistlabs.com/software/mechanize-for-java/). (MPL licensed) But it's pretty basic... just use it to fill some fields and press on a submit button or do simple http request. I doubt it can handle complicated html5 page with javascript, etc.
Thank You! I've been waiting for something like that for a long time.
&gt; I don't know about this apt-get business, but if you're looking for an interaction-free (and crapware-free) installer, https://ninite.com/ should have that. I was going to say that Ninite doesn't run on Linux (which is what /u/Inzorbia was asking abut), but apparently they have a [beta version of it](https://ninite.com/linux/). But still, Java is not a supported program.
I feel that liking and disliking patterns is not a good thing to do. If the pattern fits the problem that you're working on, use it. Otherwise, don't. Having emotional attachment to specific patterns could lead to bad decisions being made.
The second argument is flimsy at best - someone could just as easily create duff code through the builder pattern as they could through the other patterns. Bad coders are bad coders no matter which pattern they follow - if anything it could be argued that given the better support for code completion for getters/setters, and that errors in logic can happen when substandard developers are forced to think, the builder pattern should be avoided if you know someone on your team isn't up to scratch. Although it goes without saying that if you find yourself in that position you've got bigger problems to be worried about.
Honestly, you need to make sure that your applications run correctly in the new environment first. Yes, Java is supposed to be backwards compatible, but that's not always so. I'm probably going to have to make contributions to PureJavaComm to bring my project into the Java 8 world. Of course, Java Platform, Enterprise Edition 8 needs to drop before I'm ready for that, so I have some time. Once you do that, make the move.
I've been running a few Minecraft servers with Java 8 for some time now with no issues. Mojang themselves is planning on bundling Java 8 with Minecraft through the launcher in the near future, as well. As long as your Minecraft servers are relatively up to date, you should be fine. Also, /r/minecraft, or even better, /r/admincraft, would be a good place to get advice on running your Minecraft servers.
You go ahead and chuckle, I get the impression you haven't programmed much yet. It's called "a little bit of foresight"; having been there multiple times, I guarantee that if they use this program for any length of time, that question will come up in &lt; 1 month. db is overkill? What do think a db actually is? I'm not talking about an oracle installation here, this is &lt; 1mb jar that you add to your project and run's in the current java process. It is 3 lines of code to add hsqldb / h2 to your project. It's easier (coding) than it is using xml, and it provides more benefits out of the box, plus future proofing.
Data binding. For example, JSF uses the JavaBean pattern through EL to implement two-way data binding between components and the backing bean.
Most of this is pretty high level and fine, but do not use Thread.stop() under any circumstance. It is a deprecated and unsafe operation. For more info, see http://stackoverflow.com/questions/16504140/thread-stop-deprecated Also: &gt; Runtime Exceptions thrown inside the TimerTask kill the thread, so following scheduled tasks won’t run further; with ScheduledThreadExecutor – the current task will be canceled, but the rest will continue to run This is not true for future executions (Any currently running may continue running though). Right in the [ScheduledThreadPoolExecutor Javadoc](http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#scheduleAtFixedRate\(java.lang.Runnable,%20long,%20long,%20java.util.concurrent.TimeUnit\)) it states: "If any execution of the task encounters an exception, subsequent executions are suppressed."
Maybe this question should be in /r/scala
H2 or SQLite file databases are probably a good option for you. Derby has lots of foibles and I've told it to pick it's shit and get out. MySQL or PostgreSQL servers are probably the best idea long term but H2 is quick, safe, and easy to code to. H2 can also act as a server too, so it scales ok. Google Drive and DropBox are excellent for storing, protecting, and distributing file DBs. There will still be synchronisation issues tho, you'll need a server to avoid those.
You should fuck with reddit and auto post on every merge.
I like it for simplicity. Depending on your situation installing and upgrading tomcat on machines can be messy. I work on a product that is sold to a client, installed by us, but the machine is owned by the client. So over the years its been messy to upgrade tomcat for that product since the environment is unpredictable. We also have a product that uses jetty. So a jar is changed with each patch, jetty being in that jar gets upgraded with it. Also from the development standpoint its more flexible, I can start jetty in a test, do some asserts, and shut it back down. I also don't have to install or setup any server on my machine, I just hit the run button in eclipse and its going. I'm a big fan of embedded servers, its easy to maintain. Even if I wasn't in a situation where the environment was unpredictable I still think embedded jetty would be easier.
I love this pattern, but it is awkward to use with inheritance and very verbose ([example](http://stackoverflow.com/q/10941464/946814)). It simply implements a contract for a value class, and I would favor some code generator tool to accomplish this task, like protocol buffers.
But then you already know what the answer will be there.
Don't most modern libraries have constructor annotations for this kind of thing? That's why I prefer constructors over builders in classes that need data binding. I try to encapsulate my class structure in ways that minimize constructor parameters so I can use these annotations to create immutable classes. **edited for derp**
There is one other advantage: let app_versions = { 1, 1.1, 1.2, 2, 2.1, 2.3, ... } let tomcat_versions = {6, 6.1, 6.6.6, 7, 7.1, 7.1.2, 8, ...} let test_combinations = cartesian_product(app_versions, tomcat_versions) Enjoy testing.
Before you jump on the Scala bandwagon, look into [what Odersky has recently been saying about the future direction of Scala](http://www.javaworld.com/article/2604122/scripting-jvm-languages/scala-founder-language-due-for-fundamental-rethink.html) in light of the functional changes to JDK8. I definitely think learning Scala is a good idea to expand your toolbox, but in an either-or situation, it depends a lot on what you're planning to do with it. I think that Akka and Play have a lot to offer in a different direction from what Java EE and Spring have on deck. Java 8 is still very much playing a game of catch-up on the reactive side, where the Scala guys and [Typesafe](http://typesafe.com/) have been at the forefront of the reactive revolution.
Not really minecraft related, but at the new company I started working for, they are *just starting* to look at java 7. We have to re-write our app thankfully and have already started using lambdas. No turning back now. On the installation statement: &gt; but since it hasn't been packaged yet, this is not possible Just download your preferred binary from Oracle/azul, update your JDK_HOME and PATH environment variables and reload your .bashrc or .profile file(which ever one you modified). That's it. 
Yes they do. I got burned by JSF myself, I've heard it's better now. But statements like &gt;JSF uses the JavaBean pattern through EL to implement two-way data binding between components and the backing bean Make me weep
relax. I feel like I should come up with a programmer version of navy seal copy pasta as response. It's okay to have different people to have different perspectives and come up with different conclusions. Drink something hot, enjoy the holidays and look forward to 2015. 
Yes, Just like final StringBuilder sb = new StringBuilder(); Other languages have a bit better type inference, so val simple = new SimpleOne() Is valid Scala; inference will likely be better in Java 9
Yes, and in systems like OSGi Spring services you don't need to "re-set" a value if a service changes - as the injected property is a proxy to the actual service. Still, it's easier to configure the bean than a many-argument-constructor.. beans have named properties.
I've had trouble running certain containers under tomcat because so many assumptions were made about the server and I didn't know what they were at the time so errors came frequently.
see the IO package. https://github.com/audit4j/audit4j-core/tree/master/src/main/java/org/audit4j/core/io 
Correct
Question, what is this from? puppet/chef/docker?
Its from Math.
Names of tests should specify the behavior like so - shouldBeAbleToScheduleTaskOnce or something like that. The given format (no pun intended) is just rewritting the test into test name.
That was cruel, but hilarious. 
Can you elaborate? WAR files that conform to the servlet spec should be platform agnostic. Or was the app created to utilize server specific features? 
I have never personally seen any actual situation that called for a builder pattern. They don't tend to look pretty in the wild either as people imagine them being and just tend to be hard to maintain. They enforce mutable design because the builder itself is mutable. They leak implementation and take control away from the object. The builder class itself is absolutely no different from a bean ultimately (hey look, a constructor, and then methods that set properties basically). The only difference really is the ability to chain the methods but personally I see that as a real benefit at all. So... a lot of extra code to do ultimately the same thing, and really only introduced issues such as with threading (and parallel work is a big thing now). So no, it's not less error prone than constructors, it's more. So... that doesn't solve the issue though, does it? Why are you using the builder pattern in the first place? Because your object has a lot of parameters... yes? Then why not fix the root there and resolve why your object needs so many of them. Stop using dumb data objects and actually make a meaningful object, one that ties in behavior with the data. Stop having so many getters/setters, and in that vein, stop having everything mutable. These are the kind of issues that make people go to patterns to help resolve, and yet the patterns only enable you to use such designs with a better conscious. The builder pattern is just enabling you to stick to a design that likely just problematic in the first place.
Here's an article I found on the subject: http://www.grahambrooks.com/2014/04/07/container-less-web-applications.html It actually considers tomcat to be in the family of container-less deployment. I think the biggest argument is about testability. If you can't test your service on your own machine something is wrong with your development procedure. This can be offset somewhat by rigorous integration testing, but in my experience testing at every stage after your own local stack is a factor less; therefore if you have very little unit tests and/or integration tests you can run on your own machine your team will probably not invest in creating as many on a testing or beta stack.
oh right...thought it might be some system testing framework. Only seen the 'let' keyword from a few Apple swift examples. Pardon my confusion 
depends on how you take it
Scala is very good for when you have non "programmer" guys in your team, e.g. mathematicians/statisticians and want to include their work in a java app. e.g. when building analytics tools, it's much easier to have them code the heavy math in scala
let is more akin to haskell and ML
Hmm, yes it can be done with `UserType` and binding `oracle.sql.DATE`, which has the same effect as the explicit cast. Is there any way to ensure that the relevant `org.hibernate.annotations.Type` annotation is present on every one of these `DATE` attributes? For the record, this is a minimal implementation of such a `UserType`: import java.io.Serializable; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.sql.Timestamp; import java.sql.Types; import java.util.Objects; import oracle.sql.DATE; import org.hibernate.HibernateException; import org.hibernate.engine.spi.SessionImplementor; import org.hibernate.usertype.UserType; public class OracleDate implements UserType { @Override public int[] sqlTypes() { return new int[] { Types.TIMESTAMP }; } @Override public Class&lt;?&gt; returnedClass() { return Timestamp.class; } @Override public Object nullSafeGet(ResultSet rs, String[] names, SessionImplementor session, Object owner) throws HibernateException, SQLException { return rs.getTimestamp(names[0]); } @Override public void nullSafeSet(PreparedStatement st, Object value, int index, SessionImplementor session) throws HibernateException, SQLException { st.setObject(index, new DATE(value)); } // Dummy implementations @Override public boolean equals(Object x, Object y) throws HibernateException { return Objects.equals(x, y); } @Override public int hashCode(Object x) throws HibernateException { return Objects.hashCode(x); } @Override public Object deepCopy(Object value) throws HibernateException { return value; } @Override public boolean isMutable() { return true; } @Override public Serializable disassemble(Object value) throws HibernateException { return null; } @Override public Object assemble(Serializable cached, Object owner) throws HibernateException { return null; } @Override public Object replace(Object original, Object target, Object owner) throws HibernateException { return null; } } And then: @Entity @TypeDefs( value = @TypeDef(name = "oracle_date", typeClass = OracleDate.class) ) public class Rental { @Id @Column(name = "rental_id") public Long rentalId; @Column(name = "rental_date") @Type(type = "oracle_date") public Timestamp rentalDate; } Execution plan *without* the `UserType`: --------------------------------------------------------------------------------------- | Id | Operation | Name | Starts | E-Rows | A-Rows | A-Time | Buffers | --------------------------------------------------------------------------------------- | 0 | SELECT STATEMENT | | 1 | | 0 |00:00:00.01 | 103 | |* 1 | FILTER | | 1 | | 0 |00:00:00.01 | 103 | |* 2 | TABLE ACCESS FULL| RENTAL | 1 | 40 | 0 |00:00:00.01 | 103 | --------------------------------------------------------------------------------------- Predicate Information (identified by operation id): --------------------------------------------------- 1 - filter(:1&lt;=:2) 2 - filter((INTERNAL_FUNCTION("RENTAL0_"."RENTAL_DATE")&gt;=:1 AND INTERNAL_FUNCTION("RENTAL0_"."RENTAL_DATE")&lt;=:2)) Execution plan *with* the `UserType`: -------------------------------------------------------------------------------------------------------- | Id | Operation | Name | Starts | E-Rows | A-Rows | A-Time | Buffers | -------------------------------------------------------------------------------------------------------- | 0 | SELECT STATEMENT | | 1 | | 0 |00:00:00.01 | 2 | |* 1 | FILTER | | 1 | | 0 |00:00:00.01 | 2 | | 2 | TABLE ACCESS BY INDEX ROWID| RENTAL | 1 | 1 | 0 |00:00:00.01 | 2 | |* 3 | INDEX RANGE SCAN | IDX_RENTAL_UQ | 1 | 1 | 0 |00:00:00.01 | 2 | -------------------------------------------------------------------------------------------------------- Predicate Information (identified by operation id): --------------------------------------------------- 1 - filter(:1&lt;=:2) 3 - access("RENTAL0_"."RENTAL_DATE"&gt;=:1 AND "RENTAL0_"."RENTAL_DATE"&lt;=:2)
Saying that an ORM can save you from knowing the DB is crazy. Nowadays there are JPA fanatics claiming [you shouldn't care about the JPA implementation either](http://java.dzone.com/articles/eager-fetching-code-smell#comments). That's why one should know its tools. Surprises keep on popping up and the JPA spec cannot help you deal with all the small details. Thanks for raising awareness on this one. Indeed the type def can make it difficult to ensure everyone uses it. I think one issue should be added to Hibernate JIRA. Can you file a ticket?
The emphasis may of changed by the time you are looking for employment - however it is worth bearing in mind that so many existing Java applications will use Swing. Chances are at some point in your career you will be working on legacy systems. I'd say, from a pure employment perspective, it would be more worth you learning Swing and have a basic familiarity with JavaFX. It would be the better option except when working on brand new applications where you have the freedom to do the new thing. 
As has been stated, you have to do the associate level exam before you can do the professional level exam. That said, the Sierra and Bates is a good one and it would not hurt you to own it. Unless you drop it on your toes - its heavy :(
Dear OP. Reddit has a 10:1 policy when considering spam. For each 10 constructive links (or comments) 1 self promotion link is ok. Everything above that threshold is considered **Spam**. Kindly refrain from spamming the same over and over. Failing to comply will result in a permaban.
&gt; Nowadays there are JPA fanatics [Yannick](http://java.dzone.com/users/yannickmajoros) has a very black/white opinion with respect to "standards", vendor-lockin, and FOSS. I've made his encounter as well, in the past. He seems to take this stuff very serious. But this doesn't matter. Anyone capable of remaining slightly objective will notice that even "standards" like JPA are always incomplete. Their innovation is derived from their implementations (like Hibernate), which may produce sufficiently well-designed APIs that can eventually be merged into the standard. I personally don't think that `UserType` is a well-designed API / SPI. It will need a lot of reworking when/if it goes into the standard. Missing features: - Binding to stored procedures (which are supported in JPA 2.1) - Binding database user-defined types - Generating alternative SQL for the bind value (e.g. an explicit cast, such as PostgreSQL's `?::json`) Writing a good SPI is hard, though. &gt; and the JPA spec cannot help you deal with all the small details. Is it even possible to do this via JPA only?
I'm currently playing around with that converter implementation, and at first sight, it looks as though I could use it to return `oracle.sql.DATE` values in this particular case. But unfortunately, Hibernate 4.3.7's implementation thinks that all `Serializable` types should be bound as `VARBINARY`: public &lt;X&gt; ValueBinder&lt;X&gt; getBinder(JavaTypeDescriptor&lt;X&gt; javaTypeDescriptor) { if ( Serializable.class.isAssignableFrom( javaTypeDescriptor.getJavaTypeClass() ) ) { return VarbinaryTypeDescriptor.INSTANCE.getBinder( javaTypeDescriptor ); } return new BasicBinder&lt;X&gt;( javaTypeDescriptor, this ) { @Override protected void doBind(PreparedStatement st, X value, int index, WrapperOptions options) throws SQLException { st.setObject( index, value, jdbcTypeCode ); } }; } That's a bit random, if you ask me. I'm going to create an issue with Hibernate, once this new blog post (about Oracle DATE and Hibernate) goes live...
&gt; Stop having so many getters/setters, and in that vein, stop having everything mutable. It's pretty much impossible to not have everything mutable when building JavaEE/JSF apps. JPA also requires mutable classes with getters and setters. 
I am looking forward to reading your post. To customize the Java object to SQL type mapping you have to extend the Oracle Dialect, add your new mapping and then supply the Dialect class name as a Hibernate configuration. Hope it helps.
I suggest to look in /r/javahelp and the less frequented /r/learnjava, plus there's /r/learnprogramming All of these should have something like an FAQ - and be aware that what you're asking is *definitely* a frequently asked question.
@/u/Leffeleffe: All these links can be found here in the sidebar, you should get into the habit of reading them. Also check the sidebars of the linked Subreddits. 
Aha! Ok cheers, I'll try that for a start
It depends on what you are doing. If you are binding an object to a form then by definition you need it to be mutable since you are going to be *set*ting values on that object. If you are just displaying data in a table or whatever then you don't need setters. Input components are read/write, output components are read-only. I don't think that's hard to understand.
&gt; h2 database or hsqldb. Both are database "servers" that can be run just as easily in the local java process, meaning they run in "embedded" mode. How is Derby not exactly this? It also has embedded and server modes.
yeash, do people do that? That removes some of the best benefits of a builder.
Over 900 hundred pages lol It will probably take an eternity to read all that, still judging by it's quality I think it's worth it ( although you're right, I'm kinda disastrous so I'll probably loose my toes in the process :/ )
:D If you've got any suggestions/questions feel free to come my way!
Besides the really good info the other commenters gave: A solid start in Java and OOP is the + University of Helsinki MOOC **Object-Oriented programming with Java** (it's in English - free) + [Part I](http://mooc.cs.helsinki.fi/programming-part1) + [Part II](http://mooc.cs.helsinki.fi/programming-part2) Or some other resources dealing with Java only: + John Purcell's **Java for Complete Beginners** (free) + [Udemy.com link](https://www.udemy.com/java-tutorial) - original course + [CaveOfProgramming link](http://courses.caveofprogramming.com/course/java-for-complete-beginners/) + [Youtube series](https://www.youtube.com/playlist?list=PL9DF6E4B45C36D411) + [Derek Banas' Youtube channel](http://www.youtube.com/user/derekbanas/playlists)
Sorry this is the code link. http://www.gcclinux.co.uk/wp-content/uploads/2014/12/pixeltree.txt
I dont like the whole idea of paying for an ide when i can use eclipse for free. If its not good enough then surely we should commit to the eclipse project and make it better rather than paying for a commercial product. 
With any IDE you get what you pay for.
Hey question: what is object oriented java? I mean, compared to just java?
You know you are a sad rude individual that rather complain than explain and your note is nothing more than criticism to your own small mind. 
If your Minecraft servers are functioning correctly with Java 7 then don't worry about it. You could upgrade to Java 8, but Minecraft wouldn't make use of any new language features anyway. Just wait for it to appear in your apt repository.
Thanks. I'll stick to 7 then :)
I'm a fan of Eclipse because it's free and I'm most familiar with. But a lot of crap is bundled into Eclipse that makes it slow (example Mylyn who uses that?) on older systems. I'm using [Yoxos](https://yoxos.eclipsesource.com/) for making my custom Eclipse and pre-added plugins. Just download a new instance every time you need it and it will install your plugins and you're ready to go. Will try out IntelliJ in the future. NetBeans is also good but I rather use Eclipse.
Yeah... but sometimes people don't pay attention when the writer doesn't use a slightly provocative article title. ;-) TBH this page was a bit of an unfinished work and I wanted to add more examples before even considering about discussing it on Reddit and such. But what's done is done.
Absolutely, I too find signed bytes infuriating and useless. http://www.nayuki.io/page/javas-signed-byte-type-is-a-mistake
More the object oriented part. Sorry I really am new to all the. What is meant by object?
&gt; C does everything about this wrong Not exactly. The C standard designs implicit conversions the way it does in order to preserve value in as many cases as possible. But some conversions by nature cannot behave correctly for all values, and I think where the designers went wrong is to allow implicit conversions for just about every situation.
We have dozens of JPA entities, which can't easily be made immutable. I'm genuinely curious, what would you suggest? Considering I can't just drop JPA for something else. 
It appears to be the same as ctrl+shift+L in eclipse. Is it just a global text search. That's what it is in eclipse.
Its not a bug. Y (uppercase is week year) and y (lowercase is year) http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html 
Yes, explanation of "week year": http://docs.oracle.com/javase/8/docs/api/java/util/GregorianCalendar.html#week_year
"You're saying to do this, but I'm using said library that requires me to not... so..." I don't care. Completely irrelevant to what I'm saying, which is when you're designing, not using existing code. You're not curious at all, what the hell are you expecting with such stupid questions?
I just added my java build tool to github, if you want to check it out or offer suggestions. Apache 2.0 Licensed. https://github.com/dorkbox/OAK
We had a contractor who would blame errors in his code on the compiler... yeah, dude, no. He didn't last long.
Good to know that in your Ivory Tower you can just ignore existing libraries and codebases because you're such a fucking genius. I'll keep on living in the real world, thanks. 
&gt; which is when you're designing, not using existing code What is your problem? Are you just so incapable of reading and stuck inside your own little world that you can't read plain words on the paper? You prattle illogical nonsense statements to my comments. This topic is about the builder pattern, not JPA you dumbas. Now, I know this might be a bit outside of your capabilities apparently, but when you get around to developing your own code instead of just staring at others, you'll take advice into how you should design it. Maybe, perhaps, when you get over thinking you have to use JPA for apparently everything. Get over it. If the library your using requires something, so be it. What exactly do you expect me to do for you? I have no clue what you want here.
Hey, I started where you are and now I study Java at the college level. I started by watching thenewboston's youtube videos, but then i found http://math.hws.edu/javanotes/ and I learned tons from there. If you come across any problems in your coding experience I recommend stackoverflow.com or coderanch.com Good luck!
An Object is basically a structure of programming that has its own properties and behaviors. Think of a Person as an object. This Person might have a name called "Arnold", an example of a property which would be stored in a variable. They might also have a behavior such as "walk" which is part the object's functionality and is in the form of a method. Now, if you wanted to have another person, using OOP, you could make a new Person and set a different name without rewriting a whole new class file. The best way to learn about objects is to read about them and then experience them for yourself. It is rather confusing the way I put it but in practice they are logical and make sense.
&gt; I'm a fan of Eclipse because it's free Oh, great. 
&gt; I dont like the whole idea of paying for an ide when i can use eclipse for free Oh, great.
Have you had a look at Apache Wicket?
But these three patterns are alternatives on how to solve the exact same thing—construct and initialize objects. All three, by definition, fit the problem that the article is talking about.
Applets are ridiculous these days. When I actually want to run one, I have to click thru 5 popups saying "Yes! I DO want to run this" and then it still doesn't run because some obscure setting somewhere is apparently set. Its like they don't want you to use it
I've actually been bouncing back and forth between Eclipse and IntelliJ for use as a Java/Scala IDE. In my experience the Eclipse editing seems more stable (understands the classpath and syntax more predictably), but Intellij goes to greater lengths to integrate contemporary workflows (i.e. Gradle and SBT integration). In example the IntelliJ Scala plugin randomly forgets about classpath items that should be automatically imported, and often displays syntax errors in Scala projects that compile and run fine. Other times it will forget the SBT DSL and show errors in a working build file. And what makes it worse is that when things do go wrong, there is no diagnostic output that would allow you to make a meaningful bug report. Something to do with index generation. I rarely have such issues with Eclipse-based "ScalaIDE", but have to generate Eclipse project files using an SBT plugin from the command line every time I change a dependency. Annoying. 
I love Java, but for this consider Php + CURL, where a small script could do all that for you.
Besides the standard web.xml, you can have sun-web.xml, glassfish-web.xml, maybe others.
The article references itself as one of its top 10 websites, nice.
AwesoMe thanks!
Thanks!!
I was once told: If a professor wrote a book and they aren't making you read it for their class, then they either shouldn't be teaching or shouldn't have written the book. Just a thought :-) 
What's an "advanced" java developer anyway?
A developer who can put together a top-10 java site blog (with circular dependency) and then post it on reddit.
I can't seem to find a tutorial on how to setup spring with the community edition... do you have some clues?
I did found it a bit odd. It's a fairly big company and they do give a reasonable salary. I was wondering if I should buy a license for myself... but that's not gonna happen before I get my second pay check.
Where do you people get this information? IntelliJ Community is completely free for whatever use, even the commercial one. The only one for non-commercial use is the Ultimate edition given to open-source projects or for education for free.
[Here you go](http://blog.jooq.org/2014/12/29/leaky-abstractions-or-how-to-bind-oracle-date-correctly-with-hibernate/)
Seems like a nice tool. How is it performing so far? What do you need help with?
Thanks, I didn't release it to the public yet (developers and a few 'friendly users' only). The core functionality seems stable. There is still some work with the WebDAV mounting on various Linux distros to be done. UI polishing, a few features like changing passwords or better progress indicators for initial encryption of non-empty folders. And last but not least: Tutorials. I want my grandma to be able to use it :)
Yes, Derby does that too; I don't really have too much of an issue with Derby, just that h2 (in particular) is better. Much better performance for a start.
and why would one use the oracle date instead of java's Date or Joda's? 
Interesting that it is written in pure-Java! How did you manage to create virtual drives that work cross-platform?
It's about using the Oracle DATE SQL type in the database, while having java.util.Timestamp on the Java side.
... again, so why would anyone want to do that? Honestly i can't remember last time i used sql.Timestamp, is just not ... there's no point to it. You tell hibernate that this is a temporal type, use a decent type to store into , and off you go. Why give yourself a headache, when you don't have to?
What about all the rest of us stuck with java 1.6 because every other system that we communicate with uses that and was made ten years ago and still is not legacy. Also, 2 million records is not really that big. Touch 1 billion transactions and then we will get talking. 
wow jooq open source edition excludes oracle &gt;_&lt;; ah well looks like no jooq for me at work
Builders are a sloppy workaround for the lack of named arguments :/
&gt; All in all, java.util.Date and Joda are the safest choices. So, shouldn't then the article just be 1 sentence long: replace sql.Timestamp with java.util.Date? But then i guess the author would miss on the opportunity to praise jqqqqqq and bash jpa/orms. 
I am not sure how does java.util.Date either. I personally would choose that instead and find a workaround if I found such an issue. But probably this kind of issue would be discovered quite late in a project. Not many developers jump to SQL query plans from the first Sprint iterations.
https://www.jetbrains.com/idea/features/spring_framework.html /r/IntelliJIDEA/
http://www.cvedetails.com/vulnerability-list/vendor_id-93/product_id-19117/Oracle-JRE.html http://www.cvedetails.com/vulnerability-list/vendor_id-93/product_id-19116/Oracle-JDK.html http://www.cvedetails.com/vulnerability-list/vendor_id-5/product_id-1526/SUN-JRE.html http://www.cvedetails.com/vulnerability-list/vendor_id-5/product_id-1083/SUN-JDK.html http://www.cvedetails.com/product/21118/IBM-Java.html?vendor_id=14 http://www.cvedetails.com/product/27730/IBM-Java-Sdk.html?vendor_id=14 http://www.cvedetails.com/product/20285/Redhat-Icedtea.html?vendor_id=25 http://www.cvedetails.com/product/23642/Oracle-Openjdk.html?vendor_id=93 http://www.cvedetails.com/product/17151/SUN-Openjdk.html?vendor_id=5 --- http://www.itsecdb.com/oval/definitions/product-23642/0/Oracle-Openjdk.html?class=4 
Excellent question! This is actually the one single genius idea, everything else was quite straightforward. The answer to this question is: WebDAV. All major OSs can mount WebDAV natively. The Servlet handling the requests encrypts write requests before passing the streams to NIO.
https://www.eff.org/fr/deeplinks/2014/11/certificate-authority-encrypt-entire-web
This looks very good. And needed. Can you clarify what is encrypted? I take it that the data at rest either in the cloud or locally is encrypted. Data in flight should be encrypts since its client side. And data in memory would not be. It looks like TrueCrypt except with access to cloud storage. Is that fair?
Install java 8 in a test environment and move on? It is pre-java 5 that you really need to worry about. For the most part, 8 is a drop in replacement for 6. This isn't .net. Java has a strong focus on backward compatibility.
I can not say that I have an understanding of how quantum computers would calculate, but *my guess* (Nothing more.) is that they would do informationally what electricity does when it finds the shortest path through a conductor or system of conductors (e.g. a plate of metal, or the connection from ground to cloud when there's a lightning). So, in my imagination, it would find the best informational configuration for a question/problem, of course within confines - just like electricity would not suddenly flow through a conductor that is not there. If this is a bit correct (And I have no idea if it is.), then quantum computers would e.g. be a great tool for artificial intelligence, where *path finding* plays a key role. Just think about a non-player character in a game where you're running around, too. You have rooms and doors - but the kind of pathfinding I mean is not spatial, it's one of *possibilities*. Which *logical* path through this labyrinth of possibilities (rooms, doors, keys, buttons, maybe tools that open up new options) leads from the current situation to a desired situation? This is not a hard problem, it can easily be explored via classical algorithms/computers. But the possibility space quickly becomes so vast that the classical way requires too much calculation time and maybe too much memory (You have to use the stack a lot, compare lists/results etc..) - it would be great if instead all possibilities could be explored in parallel by this quasi-electrical approach, where the best/shortest/most "conducting" path would win. This is not specific to Java at all, in fact these machines require special algorithms (which I don't understand in the least, and again - my electricity interpretation might be completely wrong), but I am convinced that *if* quantum computers will eventually become a normal part of our world, then we will be able to utilize their powers with any language and even (somewhat) with classical algorithms, just like programming graphics hardware directly is a nightmare, but with a few layers of abstraction, it's just button-pushing. 
Quantum computing has nothing to do with 3d printing or copying or teleporting entire objects. Decades in the future maybe some of these things might be linked to quantum mechanics, but not computing. Quantum computing will change cryptography and improve both telecommunications and specific types of calculations including physics simulations. 
I continue to hear the "IDEA is expensive" argument but it seems the messaging about [community edition](http://www.jetbrains.org/display/IJOS/Home) hasn't spread wide enough. I would bet that a lot of those who use Eclipse would be perfectly served by the features in CE. I am beating the drums about [PyCharm community edition](https://www.jetbrains.com/pycharm/), too, because *everyone* deserves an intelligent editor.
If you are experiencing crashes in IJ, there are two avenues of recourse: there is an in-editor feedback mechanism that allows one to submit the error and what you were doing when it occurred. It's the red exclamation mark in the bottom right corner. The other is that the JetBrains issue tracker, [YouTrack](https://youtrack.jetbrains.com), is open to the public and you can file feature requests or bug reports and they will be examined.
But that's not for community edition, right?
&gt; often displays syntax errors in Scala projects that compile and run fine Wow, I've had the exact opposite experience: the Scala plugin thinks everything is A-Ok but the `scalac` execution disagrees. If you are experiencing your problem a lot, it would be great if you could submit that to the [Scala YouTrack](https://youtrack.jetbrains.com/issues/SCL) in hopes they can tighten things up.
yes https://www.jetbrains.com/idea/features/index.html https://spring.io/tools/eclipse 
Why not? The commercial edition still ships with all sources...
I'm asking about spring with the community edition...
You might want to crosspost this to /r/crypto for some feedback about the implementation.
Thanks, will do that later Edit: just posted to /r/crypto
Why did you put #-signs in the title on those words? Sincerely, Richard Nixon
Don't think you need a tutorial. Just set up your project like you would for maven. There is a good maven book online. Use the tomcat maven plugin too. http://books.sonatype.com/mvnex-book/reference/public-book.html
According to one of my cs teachers the government has had them for years and it hasn't changed the field yet so why should the public getting them change it. (not sure if he is just a conspiracy nut or not, and I don't know if he's right...)
Experts would only use system.out.print on for debugging only. In the professional world you would still do logger.log.
Thanks, I guess I'm looking for something which isn't there.
I think I still prefer for (String name : names) System.out.println(name); to names.forEach(name -&gt; System.out.println(name)); in terms of legibility whenever it's applicable, however the idea that classes could create their own sorting logic is very nice. The thing I'm most excited about is the streams though.
It's unnecessary visual clutter that doesn't even provide the trivial functionality that it does on Twitter. It doesn't belong in the title. Sincerely, Richard Nixon
It's the dirty double crosser award.
As long as the change doesn't shift contents inside the container, yes. But good to know, that Dropbox can handle this, thanks for trying out!
Congratulations for ignoring: + the **big red button** saying **"Seek Programming Help"** + the **big red banner** when **hovering** over the **"Submit Text"** Button, saying **"Please seek help with programming in /r/Javahelp"** + the **big red box** in the **sidebar** saying **"Please seek help with programming in /r/Javahelp"** + the **"?"** icon in the **blue "Related Sub-Reddits"** box in the **sidebar** with the text **"Java Help ← Seek help here"** **Post removed** - Programming help belongs in /r/Javahelp
http://www.reddit.com/r/crypto/comments/2qqrvn/check_out_cryptomator_an_open_source_personal/
Since you've been directed to javahelp I'll just give you this bit, make it recursive instead. 
http://www.reddit.com/r/programming/comments/2qqb2x/javabased_open_source_tool_cryptomator_encrypts/
I think you haven't understood the essence of the article. Oracle `DATE` types contain time information, but no fractional seconds. Using `@Temporal(TemporalType.DATE)` is the same as using `java.sql.Date`, which truncates timestamps to days. This will generate wrong results! Example: **Without `@Temporal(TemporalType.DATE)`** @Entity public class Rental { @Id @Column(name = "rental_id") public Long rentalId; @Column(name = "rental_date") public java.util.Date rentalDate; } Query: List&lt;Rental&gt; rentals = session.createQuery("from Rental r where r.rentalDate between :from and :to") .setParameter("from", new java.util.Date(Timestamp.valueOf("2005-08-23 22:43:00.0").getTime())) .setParameter("to", new java.util.Date(Timestamp.valueOf("2005-08-23 22:44:00.0").getTime())) .list(); Bad plan: --------------------------------------------------------------------------------------- | Id | Operation | Name | Starts | E-Rows | A-Rows | A-Time | Buffers | --------------------------------------------------------------------------------------- | 0 | SELECT STATEMENT | | 1 | | 1 |00:00:00.01 | 103 | |* 1 | FILTER | | 1 | | 1 |00:00:00.01 | 103 | |* 2 | TABLE ACCESS FULL| RENTAL | 1 | 40 | 1 |00:00:00.01 | 103 | --------------------------------------------------------------------------------------- Predicate Information (identified by operation id): --------------------------------------------------- 1 - filter(:1&lt;=:2) 2 - filter((INTERNAL_FUNCTION("RENTAL0_"."RENTAL_DATE")&gt;=:1 AND INTERNAL_FUNCTION("RENTAL0_"."RENTAL_DATE")&lt;=:2)) Correct result: Rental [rentalId=16048, rentalDate=2005-08-23 22:43:07.0] **With `@Temporal(TemporalType.DATE)`** @Entity public class Rental { @Id @Column(name = "rental_id") public Long rentalId; @Column(name = "rental_date") @Temporal(TemporalType.DATE) public java.util.Date rentalDate; @Override public String toString() { return "Rental [rentalId=" + rentalId + ", rentalDate=" + rentalDate + "]"; } } Same query, better plan: -------------------------------------------------------------------------------------------------------- | Id | Operation | Name | Starts | E-Rows | A-Rows | A-Time | Buffers | -------------------------------------------------------------------------------------------------------- | 0 | SELECT STATEMENT | | 1 | | 0 |00:00:00.01 | 2 | |* 1 | FILTER | | 1 | | 0 |00:00:00.01 | 2 | | 2 | TABLE ACCESS BY INDEX ROWID| RENTAL | 1 | 1 | 0 |00:00:00.01 | 2 | |* 3 | INDEX RANGE SCAN | IDX_RENTAL_UQ | 1 | 2 | 0 |00:00:00.01 | 2 | -------------------------------------------------------------------------------------------------------- Predicate Information (identified by operation id): --------------------------------------------------- 1 - filter(:1&lt;=:2) 3 - access("RENTAL0_"."RENTAL_DATE"&gt;=:1 AND "RENTAL0_"."RENTAL_DATE"&lt;=:2) But no result! In Oracle legacy databases, many people do use Oracle `DATE` types with the semantics of `TIMESTAMP(0)` (i.e. `TIMESTAMP` with no fractional seconds). You really cannot solve this problem unless you either: - cast the bind variable `CAST(? AS DATE)` (this is very hard with JPA / Hibernate) - bind an `oracle.sql.DATE` variable to the `PreparedStatement`
[Last week, you said you understood the problem?](http://www.reddit.com/r/java/comments/2q1slt/are_you_binding_your_oracle_dates_correctly_i_bet/cn2wlui) But I doubted it... ;-) I suggest you re-read the article(s) and experiment with your own Oracle instance, measuring execution plans. It doesn't matter what user-type you're using (e.g. `java.util.Date`, Joda Time, or `java.time` types). In all cases, Hibernate will bind a `java.sql.Timestamp` variable by default no matter what type you choose, which leads to full table scans because of implicit conversion. The problem is in fact in the JDBC API, which doesn't support Oracle's `DATE` type out of the box. And this problem leaks into your application as the article explained.
Surely no expert, or even senior, would ever be recording a statement of "got here" - they'd know to use a debugger.
&gt; yes, i have dealt with dates in oracle before. no, had no need for jqqqqqqq I never had the problem, never. Dealt with oracle databases, had dates (util.Date), used hibernate, never had an issue. That was 2008-2011 (with oracle). Since then, moved companies, now we're on other RDBMS-es. Don't have an issue with either mysql or postgres. Never had to actually make a converter, at all. Been doing this shit for over a decade (discovered hibernate in 2003 or so, used with with DB2 back then), and the times i had to use either a native query (oracle hints and crap) or a specific driver type (such as the blob reading from Oracle, or like this Oracle DATE) ... i can count on one hand. Usually I can nicely develop on my own machine with h2 or derby or some other local database, move to qa to a "real" one, then go to production without having to worry about this kind of stuff. Hibernate was always nice enough to me to shield me from this crap. Long are the days (1999-2003) when i actually needed to touch jdbc itself and write only native queries. You're talking about issues that ... they probably exist i guess, but so do unicorns. They must be out there since everyone talks about them, but the number of people who actually did see a unicorn ... they had to take some heavy drugs for that.
That is a big difference. I'm just trying to understand where data is exposed with your system. If someone hacked your computer, would they have access, or would they still need a password to access the encrypted data? FWIW, some guys that work on a plugin to google drive asked me what I thought they needed and I basically said what you have built. Good job.
Sorry, I misunderstood you ;) Well the decrypted files only exists as long as Cryptomator is running. When quit (even when force-shutdown) the mounted drive no longer exists. All data is decrypted on-the-fly. No physical decrypted files exist on the filesystem. Of course the key needs to be in RAM, so attacking memory is probably your best chance.
&gt; , this issue is often not an issue in most queries. which is why DBAs worth their weight in gold. what they do it's black magic. 
From the article: &gt; How are servlet xml and application context xml related in a spring based java web application? Answer: they aren't. At all. One is in the milky way, the other in the andromeda galaxy. There, done and done. 
/r/QuantumComputing/ /r/Quantum
Does it turn every `scala.*` thing red, like `List`, `Map` and built-in things like the `println` you mentioned? If so, I have seen *quite* a bit that the Scala plugin no longer believes in my Scala SDK. And, rather infuriatingly, when I click "Setup Scala SDK", it happily shows a list with my 2.10.4 SDK in it. Taunting me: oh, you mean this one? Your report of the plugin going crazy when refreshing sbt dependencies squares with my experiences (I'm using Maven, but same idea). I have been adding more informative messages to `master` builds of the [scala plugin](https://github.com/JetBrains/intellij-scala) in an effort to track down where it thinks my SDK went, since it **obviously** knows it exists. So maybe between the two of us, we'll make the plugin sane yet. *Update*: [This bug](https://youtrack.jetbrains.com/issue/SCL-8025) may be interesting to you.
This is pretty much the most reasonably secure you can make data. I'm actually quite surprised that cloud storage does not make client side encryption more available. SpiderOak has this, but then the data on the client side is not encrypted. I think the reason I heard for others not supporting it is that it does not promote sharing... fuck that. Anyways, looks good. Would love to see the progress. I would potentially use it if it used S3.
[Or just calculate it outright](http://en.wikipedia.org/wiki/Fibonacci_number#Closed-form_expression)
Yeah! For() for side effects, forEach() for transformation.
Java really painted itself into a corner with its generics implementation. In my opinion, it's high time to break compatibility and get it done right.
Proper random numbers!
Hi there, I am currently a junior at a university. Is there anything that needs to be done that is relatively straightforward but you don't have time to do yourself? I would gladly try and contribute!
Thanks for pointing that out to. I now realize that Oracle's DATE is SQL's DATETIME. That's kind of misleading, but probably they've been having this type for ages and there's no way they can refactor it.
I feel like DBAs don't have a clue what happens in the enterprise Data Layer, while Developers don't have a clue what happens in the database. Somehow, there's need to be someone who knows how to integrate these two. In reality, probably a senior back-end developer is as close as possible, but newcomers are always going to be unaware of so many database specific peculiarities, in spite of the programming platform or framework they use.
In this particular case, I've talked to a DBA about it, and he didn't know what `INTERNAL_FUNCTION()` meant. After all, the database *is* called Oracle, for it produces answers in unfathomable ways :) On the other hand, it's really a problem on the developer side of roles, as it has nothing to do with storage, and everything with data modelling. While I agree that it is always beneficial to a team / company as a whole when people look beyond their noses, it is simply hard to be knowledgeable in all areas. You say *"a senior back-end developer"*. By this, you already categorise the developer as *not* being very knowledgeable about frontend stuff, which is yet another area... In any case, these articles made sure that if someone googles `INTERNAL_FUNCTION()` + Oracle + `DATE`, they will find the answer for this very specific problem.
&gt; what they do it's black magic. Well, the database *is* called Oracle after all
You can serve the frontend with dropwizard itself, as an asset, or you could serve it separately. The frontend can be angular or anything else, and like you said, dropwizard can communicate with the frontend with JSON. Dropwizard doesn't need a frontend, you can use it to just build a web service that speaks only JSON. Or, it could communicate in JSON sometimes and also serve up HTML or XML. But generally you use dropwizard to build a web service, the frontend is just a client that can speak the language that the web service speaks. It can be an HTML application, a QT application, cURL, wget, a browser, or anything else that can make HTTP requests to the web service backend. (Don't be confused by the fact that the backend may have to serve up the front end, the important thing is that the front end is spending it's time wherever the user is and the web service lives on the server)
10 years ago, a Java developer had to know everything: databases, middle-ware technologies, MVC frameowrks, JSP, HTML, CSS and of course JavaScript. But that's non-sense, because it's impossible to be skilled on such a great variety of technologies. In the last three years, most projects I worked on had front-end and back-end developers. No more, all guys do everything. Nowadays the front-end developers specialize in JavaScript frameworks (e.g. d3.js), CSS, HTML and spend a lot of time with UX and design teams. The back-end developers are more concerned with databases, message queues, web services, integration. But even in this layout, you still have a separate DBA, that's not even allocated full-time on your project. Most DBAs we've worked on, are assigned on more than one project, and most likely they join when you are about to releasing your project. So, that's why I think the back-end developers should try to know more about databases as well.
Dates, times, and timestamps in SQL are confusing. Once you start doing date time arithmetic, you're doomed. &gt; probably they've been having this type for ages Yes, and many of our customers use it in a "datetime" way - because they can. Trust me. &gt; and there's no way they can refactor it Well, the skeletons in Oracle's closet are numerous. Other candidates: - `BOOLEAN` - `VARCHAR2` - `VARCHAR2` length restriction of 4000 - `'' IS NULL` - `NULL` not being indexable (except with tricks) - `ROWNUM` (finally, there is `OFFSET .. FETCH` in 12c) On the other hand, you probably can't beat Oracle's CBO.
Brilliant.
I think it's depend on your context. If you can limit the number of container to take in charge, it can cost you less. For example, i worked in a place were they decided to deliver only the WAR to multiple client and one client deployed in a container they have never heard of. It didn't work and they didn't know why until they installed the used container and check what is going wrong. It took several week to handle the configuration of the container. The keyword here is cost. Using a container will reduce your maintenance by limiting the number of technology to handle. When you craft your software this point will probably not bother you or you will probably not see this but when your software go in a maintenance cycle after you delivered it, the IT guy will be happy to have one and only one container. /u/zzing also mention the cost to test it here http://www.reddit.com/r/java/comments/2qkcji/can_someone_explain_to_me_containerless/cn74p34 What i'm saying here is less true if you work at the final customer who will use your software. You will tend to have one technology decided by the "Lead architect". It's more applicable when you build software for other companies like a contractor and your give the maintenance cycle to another guy in your company. TL;DR : it can be cost effective
I think it's depend on your context. If you can limit the number of container to take in charge, it can cost you less. For example, i worked in a place were they decided to deliver only the WAR to multiple client and one client deployed in a container they have never heard of. It didn't work and they didn't know why until they installed the used container and check what is going wrong. It took several week to handle the configuration of the container. The keyword here is cost. Using a container will reduce your maintenance by limiting the number of technology to handle. When you craft your software this point will probably not bother you or you will probably not see this but when your software go in a maintenance cycle after you delivered it, the IT guy will be happy to have one and only one container. /u/zzing also mention the cost to test it here http://www.reddit.com/r/java/comments/2qkcji/can_someone_explain_to_me_containerless/cn74p34 What i'm saying here is less true if you work at the final customer who will use your software. You will tend to have one technology decided by the "Lead architect". It's more applicable when you build software for other companies like a contractor and your give the maintenance cycle to another guy in your company. TL;DR : it can be cost effective
Hi, thanks for your offer! Yes there a lot of things indeed. The most important things right now are cryptographic issues. Then we need proper packaging for various linux distributions. Some missing features like changing passwords. And polishing of the mounted drives (check out issues on github). Also if you are familiar with Path.walkDirectoryTree, a proper progress bar during initial encryption would be a great improvement.
One reasons is website hosting in php is cheaper in comparison to java.
Because, as unfortunate as it sounds, Big Companies™ are willing to pay thousand $/user/year to use the insanity that is ClearCase, while they will argue during month to buy a single license for all workstation that is less than 800$...
Well, if you are working with popular frameworks such as JavaEE, Spring, Guava, templating engines etc... you'll get a lot of handy additional support from the Ultimate Edition. Those productivity gains have a ROI far greater than the cost of the license.
Sounds too much like a homework question to me. There's a few advantages to PHP, a few more for Java (mostly that you don't have to use PHP); you're in a Java sub, so the answers are likely to be skewed. Google it, tell us what you find, and if there's anything in particular you think needs discussing.
And the only other objective one is that PHP developers are cheaper.
Good that EE security is addressed, but I don't really see a pressing need for editing users. afaik only WebLogic's authentication providers have this now. It's maybe a nice to have extra, but I hope this doesn't become the main focus. What I hope the JSR will focus most on is aligning all the existing stuff and modernising the APIs, like JMS 2 did. There's an issue on the Java EE JIRA that comes quit close to this: https://java.net/jira/browse/JAVAEE_SPEC-37 That's the stuff you see most often come up. How do all the pieces fit together and how can we easily create and declare a custom authentication module? The user service and role service sound confusing. Is it a more modern login module and role mapper, or something else? Why use the term "service" here? Is the role service a role mapper that manages the mappings from things like glassfish.xml? Or is it the second half of a JAAS LoginModule splitted out? 
&gt; Hello everyone, both are great programming languages There's a lot of people who'd disagree on that, for both languages, depending on where you ask :)
Don't know if I should upvote for the great tool or for the HHGTTG reference ;)
I know, I know... That's why they ultimately acquire startups, because their own time to market will never be sufficient, given their internal processes. Nonetheless. This madness must not be supported by giving those companies software for free. Au contraire. There should be a Big Companies™ license: 10x the price.
Good thinking. Perhaps we can head over to github and make that happen. Abstract the WebDAV layer.
You forgot: names.forEach(System.out::println) I myself am enjoying java 8. My large code bases are also enjoying it.
The WebDAV protocol is not implemented by myself. I'm using Apache Jackrabbit in my servlet running on an embedded Jetty sever. Using the Jackrabbit API I expose the decrypted files as DAV resources.
I've used PHP before and recently switched to Java and to answer your question, it depends on alot of things, each language has its advantages and disadvantages. - Java is a byte-code compiled language and because of that, it should be alot faster than PHP, but it's heavier and it'll use more resources. I'm not saying PHP is slow, but PHP is a scripting language, it's not compiled so it won't be as fast as Java. - Because PHP is interpreted and not compiled, this means it's lighter and not as resource hungry as Java which means webhosting will be cheaper for php websites. - PHP's learning curve isn't as steep as Java's, so it's alot easier to learn if you're in a hurry. - Java is a statically typed language while PHP is dynamic. I prefer statically typed languages myself, but some people prefer dynamically typed languages instead, there's advantages to both, it's up to the developer to choose the one he's most comfortable with. In the end I went with Java because alot of the companies in my area used Java so that's what I chose and I don't regret it. This is an important factor when making a choice. If you're trying to get a job in your area try to find out what the companies in your area are using and learn that. 
&gt;both are great programming languages I reject that assertion. PHP is a fucking abomination. Sincerely, Richard Nixon 
I doubt it. If they did, then like someone else says they would be much more efficient and effective about how they operate. And, the government isn't usually a hub of innovation.
How so?
I really depends on what you want to build. PHP is easy to start with. There are more and cheaper hosting options. With PHP you can get a working web application with database up and running very quickly. Java development world looks much more complex (some would call it over-engineered) in comparison. However the simplicity of PHP has it's price which you will start noticing when things get more complex. The Java community is IMHO more concerned with separation of concerns, modularization, reusability etc. which make thinks a bit more complicated but are totally necessary for larger projects. PHP and the framework have some serious flaws because it was designed by people who have no idea how language design works and generally poor knowledge of theoretical computer science. This is a nice and often cited summary: http://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/ PHP was never designed to build large applications and it shows (that hasn't stopped people from trying and even succeeding sometimes). PHP is often the laughing stock of the programming world and it's at least partially justified. If you want to get into programming and want to start with PHP than that's fine (although there are probably better options like Python). Just don't use it build anything big.
For a reason.
"PHP is a perfect beauty" Adolf Hitler
I've checked the source. There is always only one static context. Why? What's the point of having a "context" if everything ends up in a global static variable anyway? That's not a context, that's just a global state hiding behind a class. 
Don't all dependency injection frameworks lead back to a static somewhere?
No. That's one of the reasons why you should use a DI. You don't want static because in Java static is just another name for global variable. Typically you create a DI context and then make sure you keep the reference to your context in order to resolve beans/services/whatever. How you keep a reference to your context depends on the application framework you're using. Unfortunately many people do this by storing a reference to the context in a static variable which turns it into global state. One of the reasons why you don't want a static context (=global state) is testing. Tests should run in isolation. You create a new context for each test, execute the test and then destroy the context. That way you can ensure that there is no interference between several tests. There cannot be any interference between tests because once the test is over then the context is gone. When you do it properly (=no storing of context in a static variable) then you can even run your tests in parallel without any fears of interference because each test only sees it's own context.
 /** * Create a new context with properties loaded from path * @return A new context, Sizzle.getCtx() will now return the created context */ public static Sizzle newCtx(String propertiesPath){ if(ctx == null){ //lazy init ctx = createContext(propertiesPath); } return ctx; } This method is broken. In the below example, s1 and s2 would be the same object despite the method contract claiming to create a new context for the given properties. Sizzle s1 = Sizzle.newCtx("properties"); Sizzle s2 = Sizzle.newCtx("other/properties"); As others have pointed out, you should avoid the static references altogether. Leave it up to the consumer of the DI framework to decide how to hang onto the context. Well built applications will not use static references to application contexts.
The usage of an extra article (the, a) here and there wouldn't hurt :X
I do completely agree with you. I think maybe the "best" option would be to limit the current licenses in terms of seats or use in production and have a "call us for a quote" one that those companies could use. It's so frustrating but they seem to have a need to legitimate their facilities department.
Servlets are the foundation of all web apps. One of only three ways to start a Java program. JSPs are the foundation of all other view technologies. Spring can only run by leveraging Servlets--in a web app. Spring can only produce views by leveraging JSP--in a web app.
The first rule of default method club is "class implementation always wins". In this case `EmptySpeakImpl` provides the class implementation. &gt; Otherwise, if C has a superclass, step 2 of method resolution is recursively invoked on the direct superclass of C.
&gt; but it's heavier and it'll use more resources. To start up maybe, but once it's running it's far more efficient. Think about "it should be alot faster than PHP". &gt; Because PHP is interpreted and not compiled, this means it's lighter and not as resource hungry as Java Your contradicting yourself here. You compile at home which makes more efficient bytecode which then is run. The VM takes some additional memory for itself, but that's not why it's cheaper to host PHP. PHP is easier to run in a multitenancy enviornment. 
What's up little c# fan-boy, not getting enough attention...?
The issue with basic authentication is you need to send the username and password and just handles authentication but not authorization on subsequent request calls. 
Or use [PrettyTime](http://ocpsoft.org/prettytime/)
You mean you get money from the hoster when you host PHP? Do you know that Java hosting is free these days? (Google GAE, OpenShift, ...)
I also don't understand how starting up a VM and feeding it binary precompiled instructions could be slower than starting up an interpreter and processing the text files into instructions for the VM, before actually starting the VM and feeding it instructions. It's just funny when they say python is a compiled language and runs on a VM, and then still dare say that it has a faster startup time than Java.
IIRC the so-called diamond problem was precisely the reason why multiple inheritance was not introduced in the language when it was created. Now we can see why :-) This is indeed rather odd that the specification would say to arbitrarily choose one of any fitting superinterface methods. This would mean that programs would be non-deterministic. Not only that, but programs might come to rely on the specific kind of "arbitrary" implemented in Oracle's JVM, breaking compatibility with others. An abhorrent thought.
...excuse me? I program in both C# and Java for my daily job. About two years ago I was at a different job where I programmed Java nearly constantly. I can write Java in my sleep. I execute bytecode in my dreams. Being a master at the language gives me the perspective to understand the weakness of its design. There are some things Java has gotten right, and then there are things like type erasure. If you would like, I can shower you with the attention you suggest by enumerating examples of the strengths and weaknesses of the language. Demonstrating the wrongness of petty trolls on the internet isn't a normal habit of mine, but for you I'll make an exception since it regards what I eat, sleep, and breathe. Just let me know. 
Really? Secure with Base64 encoding? Might as well send in the clear...
JFC, did you really write all of that, or is it just fan-boy copy-pasta? Java was and continues to be heavily used, consequently the language evolution has always favoured backwards compatibility. Java Generics were a reasonable and well-designed compromise given the time constraints and the requirements for backwards compatibility. Meanwhile, in the Windows world we have had over 30 years of non-stop clusterfuck of one framework/paradigm/all-encompassing-life-choice after another, starting somewhere around the time of the wretched DDE crap, leading through the godawful MFC and OLE, and up to and beyond .NET, Silverlight, WinRT and whatever junk they foist on unsuspecting Windows developers next. Microsoft's fundamental raison d'être is and always has been to sell more copies of Windows, not language/framework design, and it shows. P.S. C# isn't even the best .NET language. :-P
You still seem to think that I'm a C# fanboy. You are still wrong. I don't really care about Microsoft's history of short-sighted designs except where they intersect my professional life. But this article isn't about WPF, so I'm not sure why we would discuss it. Java was and continues to be heavily used *by me*, consequently I'm quite familiar with its darker corners and missing features. One of my favorites is its inability to express a type relationship between a pair within a collection where this relationship only extends to individual pairs. For example, let's say you a class that behaves similar to a `Map&lt;Class&lt;T&gt;,T&gt;`. In practice, this object acts like a singleton registry, which is not an uncommon pattern. The twist is that the parameter `T` is different for each entry. Entries could look something like `.put(FactoryFactory.class, mySuperFactory)` or `.put(Troll.class, (Troll) new UserLocatorService().locate("ford_madox_ford"))`. While you can easily write a method signature that enforces that specific constraint (`&lt;T&gt; void put(Class&lt;T&gt; clazz, T value)`), you cannot enforce the type-safety of the storage. More seriously and more annoyingly, it is *impossible* to create a generic collection (like a `Map&lt;&gt;`) that supports variations of this type constraint, such as `&lt;T&gt; void put(Class&lt;T&gt; clazz, Supplier&lt;T&gt; valueSupplier)`. Such a generic type constraint is *completely inexpressible* in Java. Isn't that fun? I'll provide another example upon request. 
Did you miss the sentence before where they said you need SSL?
&gt; To start up maybe, but once it's running it's far more efficient. Yes I agree completely, which is why I said Java would be faster. But even when running, it uses more resources than PHP, which is fine by me since it's more efficient. &gt; The VM takes some additional memory for itself, but that's not why it's cheaper to host PHP. PHP is easier to run in a multitenancy enviornment. Yes, the light resources PHP uses compared to Java might not be the main reason why it's cheaper, but it's certainly one of the reasons. 
Not using Jersey 2.x
Hmm interesting. Right now, we're actually going the opposite way: Transition from a per-seat model to a tiered price model once you reach 10 seats. This has greatly facilitated sales processes with medium-sized companies, e.g. software vendors who can reuse the license in subsequent projects and don't need to count the exact number of seats. Being transparent about the entire price list has helped in the middle section.
&gt; How else would you achieve the same functionality, without a container? If you really have to store a reference to the context in a static variable (bad but sometimes necessary because the architecture doesn't provide a way how to pass the context to some components) then you should put the variable into one of your application classes, not the DI framework itself. Why? Imagine that you have an application that uses two libraries A and B which both use Sizzle **internally**. This is a problem because A and B always see the one global context. You cannot have a private internal context in a subcomponent with your current solution. &gt; Which are held in a global map, within the spring container and injected into fields. It may not use the keyword static, but that is essentially what is happening. The beans map is not global. It is stored in the context and there is no global reference to the context (at least not stored by spring itself). Some application frameworks do create a global reference to the context but that's their problem. Spring itself allows parallel contexts that don't interfere with each other. Same goes for Google Guice (IMHO the better choice than Spring when doing desktop apps). In other words neither Spring nor Guice solve the problem of keeping a reference to the context. Both allow parallel contexts and leave the managing of the context reference "as an exercise to the reader" (while providing some optional helpers for that). What some application frameworks do is to hold the context in a static ThreadLocal variable. public class ContextHolder { private static final ThreadLocal&lt;Context&gt; instance; public static Context getCurrentInstance() { return instance.get(); } public static void init() { instance.set(new Context()); } } This allows you to easily initialize and obtain the current context from anywhere (just call ContextHolder.getCurrentInstance() - it's static!) without creating a single global context because it's always scoped by a thread (which in some web frameworks means a request because each request is processed by a thread). It also allows parallel testing because each test runs in a separate thread and thus tests always see only their context. Of course all of this is not really that important if this is just a side-product of some college assignment.
Well, the author's interpretation was slightly wrong. He updated the article. There is no ambiguity in the Java language spec. He mentions that there might be some ambiguity on the JVM. I am not entirely sure, though, why on the JVM ambiguity doesn't just cause a runtime error. (That really seems like an oversight. In fact the HotSpot JVM does catch this, but why is it not specified?) Either way, on the language level behavior is clear and there is no reason not to use default methods for multiple inheritance.
Great post. This is exactly what I was looking for.
I cant imagine a scenario where you would want authorization on a REST API. Having said that I'm sure there are many scenarios that do exist. For simple use cases, could you just use more than one security realm? Each securing a specific pattern of urls with a specific set of users?
I do not work much with default methods and I was expecting java to do it the way it did. I do not see any wtf in here.
Indeed it is a very well written article.
Really interesting blog. I have added to my feedly RSS list
It seems like a runtime error *is*, in fact, thrown, as specified in the JLS. This could simply be a mistake in the spec.
Interesting, I wasn't aware of this "attribute" either. I wonder why this hasn't been made an annotation `@ValueBased` to formally communicate (and later on, perhaps, validate) this fact
this is an exciting feature! Been doing scala for a while now and Optional (monads) are awesome to work with and just generally make the code cleaner and less error prone. Very nice to see this on the roadmap for java!
ThreadLocal wouldn't work since you have a new instance per thread, which would contain a new empty singleton map, it wont be able to see singletons created in other threads. Which would lead to new instances of singletons to be created, so they are no longer singletons. I have changed Sizzle.newCtx() to always return a new instance of context. The user is free to hold the object returned by the newCtx() in any variable they want, and pass it around however they want. However Sizzle.getCtx() will always return the last context created, if they still want to use Sizzle.getCtx(). Heres an example: Sizzle ctx1 = Sizzle.newCtx(null); Sizzle ctx2 = Sizzle.newCtx(null); //returns singleton from first context ProductDao productDao = ctx1.getOrCreate(ProductDao.class); //returns a singleton from the second context ProductDao productDao = ctx2.getOrCreate(ProductDao.class); 
Someone should file an inconsistency report. I might do so when I get back from vacation.
This is already in java 8, the article was about the thought process that led to it's creation.
cool, didn't know it made it in to 8. 
Unrelated note: I own one of the metal tins shown in the thumbnail. I've had it for years and never seen another one.
&gt; there is no reason not to use default methods for multiple inheritance. default methods were introduced as a means to evolve interfaces and reduce redundant implementations in them (Ie InputStream.) They are not meant to be used as a solution to multiple inheritance in Java and I would still highly advice people avoid design situations where they are performing multiple inheritance.
This project sounds like the solution for a *lot* of problems. I do like btsync, but the closed source worries me. Cryptomator + btsync would render any vulnerability in the btsync protocol moot. There'd still be the problems with vulnerabilities in the client, tho...
I have got rid of the static to get around temporal coupling, and have changed the way the library works, its a container, no other way around it. Added a new Interface called SizzleAware, any class which wants the sizzle context (almost all user classes) simply implement the SizzleAware interface. On instantiation the setSizzleMethod(..) method will be called, passing in the instance of sizzle which created it. Allowing to support multiple contexts.
The code has changed the newCtx() is no longer there
Why, in the world, are people still using Ant with Maven ridiculously mature and Gradle providing the imperitive building.
Maven is brlliant if you have a standard setup. If you want to do complex things in your build, Ant still has advantages.
One has little to do with the other. The use of HTTP basic provides the mechanism to identify the user. Spring Security is still perfectly capable of providing authorization as it would in any other circumstance.
But does the Spring Tool Suite (based on eclipse) have special tooling for Spring that i would miss if i used IntelliJ or Netbeans?
I'm sorry but this is simply not true. Servlets have little to do with starting a Java program. They're deployed inside a container. Thymeleaf, Freemarker and Velocity are just a few examples of view technologies that aren't built on JSP. Spring can run with or without a web application, it doesn't care. Spring MVC is dependent on Servlets and thus a web application. Spring MVC supports JSP, Thymeleaf, Velocity and Freemarker (at the very least) out of the box and has no dependency on JSP. Any view technology can implement the APIs required, those are simply the ones supported by the framework directly. That is without even bother to mention simply returning XML or JSON as in a REST API which is essentially another view.
&gt; Eh? What dangers? It looks like they behave exactly the same as every other object in java You're correct that there is no difference now, but there there is a high probability that Value types will be coming to Java http://cr.openjdk.java.net/~jrose/values/values-0.html There will be a differences in the future. 
FindBugs is a great tool. Combined with [PMD](http://pmd.sourceforge.net/) and [Checkstyle](http://checkstyle.sourceforge.net/), in addition to making my own code better, I've used it to assist in code reviews and grading. 
Right, but the differences won't make a difference. Code that is correct today will (should) be correct tomorrow when value types come down the line. Value types will (probably) change the rules on how == works. But you generally shouldn't be using == on any object type anyways, you should be using .equals. .equals will be unaffected by value types (unless I'm woefully misinformed). I don't see the danger unless you are already doing something wrong/dangerous.
Duh, if you noticed, I said servlets are the foundation of WEB APPS. Implicit in that is the need for a container. Did you even comprehend what I said? The servlet spec indeed is the **third kind of executable Java program [Application, Applet &amp; Servlet]**--and it goes without saying that this is deployed within a servlet container. Second, the commercial number of Velocity-only webapps can be counted on one hand. In 17 years as a professional developer--since 1999 on Java--I have never seen a professional organization release any view technology that was not, ultimately, based on JSP. Surely, it's technically possible to deploy something only on a Velocity front end but it's simply not done. Spring MVC--which I have deep and extensive experience with--is a Swiss army knife that can be used with many other technologies--but 99% of its uses include JSP. So, it appears you're just trying to speak in asterisks and edge cases for the dubious point of finding exceptions to the obvious rules that I stated clearly. Every one of your "exceptions" the the general rules I laid out are microsopic edge cases that are never used professionally. Surely, it's possible to write a Spring MVC app that writes full HTML instead of using JSP but can you suggest one professional application that does this, when the full suite of JSP-dependent technologies are right there? 
What are you trying to monitor, exactly?
JMX?
On a related note, it would be nice if Scala `Option` had cleaner syntax. Having to write `Some(...)` all the time sucks, but a straight implicit conversion would give every value a bunch of extra methods...
Based on your mention of supervisord, I assume you're just looking for something which can check if your process is running or restart it otherwise. In that case, I would suggest that you opt for native operating system strategies for doing this: services on Windows, systemd unit files on Fedora/Debian/Ubuntu etc, normal init files (or indeed, supervisord) for other platforms like BSDs or where systemd has not yet taken over.
If you just want to check in occasionally, the recommendations for jconsole and visualvm are fine. If you want historical data and something a bit more production-level, Zabbix does a decent job of pulling information from attributes over JMX.
Have you ever seen one public api that requires the username and password on every subsequent rest call ? Yeah neither have I
I'm not sure what you're getting at. I don't advocate using HTTP basic in production however it doesn't have much to do with authorization. Besides most if not all browsers will ask once per session and other tools such as Postman have explicit support.
And these days there's JMC too.
the point that one doesn't have to do with the other. I have never seen a use in production of authentication without authorization. They go hand in hand. To believe that they don't is either naive or possibly inexperience.
Does this apply to Java at all, the code is all Scala.
Yes it should. Akka is designed to work with both Java and Scala.
And my point is still valid, Here are the problems with basic auth * The password is sent over the wire in plaintext. * The password is sent repeatedly, for each request. (Larger attack window) * The password is cached by the webbrowser, at a minimum for the length of the window / process. (Can be silently reused by any other request to the server, e.g. CSRF). * The password may be stored permanently in the browser, if the user requests. (Same as previous point, in addition might be stolen by another user on a shared machine). http://security.stackexchange.com/questions/988/is-basic-auth-secure-if-done-over-https I wasn't even talking about spring security. Second I didn't call you names, but its probably due to inexperience with basic understanding of securing REST api's outside of the spring security way of doing things that you have this opinion.. so my statement is still valid. Third you should understand fundamentals before taking offense to statements.
It depends on what exactly you want to monitor, but assuming you want to see exactly what the process is doing (what code is executed, memory usage, etc) and you're using Java &gt; 1.7.40 then Java Mission Control (JMC) is a good tool. Marcus Hirt has a good introduction tutorial on his website: http://hirt.se/blog/?p=611
I learned java alongside android so it's not too soon for you. In fact, past the basics of java, anything you learn from specific java frameworks probably won't transfer over. Check out /r/androiddev for more info.
Given that I have java experience 
A colleague of mine uses Ant and while it works, it's pretty bad at managing dependencies (putting them in a lib folder included in svn or something like that). Also, it uses a WSDL to generate classes from and if you do a full clean, it has to generate all of those files again. Because wsimport is broken, it even generates a faulty class (cannot compile due toe a com.sun import) and he has a "fixed" version which he copies over after generating those sources. I have a similar project and just created the WSDL classes once, put them into a separate jar and included that jar with maven. I think Maven is a good idea implemented horribly, but still better than using Ant in such a broken way.
&gt; a little bit My university started using android a few years ago. It replaced the Java graphics portion of our xxx2 section. So all you should need is one semester's worth of java to dive into Android. You would want to go over the basics of OOP so you can work with and understand data type and collections and stuff like that.
I stopped reading at "The following remarks are based on Spring 2.0.". 
&gt; The Spring Framework is popular. It has also met with a disturbing lack of criticism Wait, what? 
The sidebar links * /r/learnprogramming * /r/javahelp * /r/learnjava All of these contain many resources in their sidebars, wikis, and thousands of threads. There you can find anything you need.
If in making comments you seek to account not for the majority of uses but for every tiny edge case, then be my guest. 1. Thymeleaf--never heard of it before your mention. 2. Velocity is used extensively--but in JSP applications. You stated that Velocity was used as the **only** view technology without JSP. Examples? 3. I have used XML, JSON but these were not the only view technologies used. They were used in conjunction with JSP. Since HTML is XML, I will consider that an irrelevant example. I have used YAML and love it because it enforces perfection but that was in a Ruby-on-Rails app, so JSP was not possible. I have used JAXB, Jackson and Jersey (in a Spring MVC app, no less)--and again those are used for marshalling and unmarshalling and I don't really see how you're equating those to a JSP-replacer. Now you look like you're just trying to be obstinate. I will try one more time. Yes, these are all free-standing technologies whose origin was independent of JSP. Yet, you are looking for a unicorn if you want to find an example of a professional Java web application that was made using those technologies and had NO JSP. You're just being a dick with your last comment. Obviously the Spring Framework is chock full of other technologies and that's the glory of Spring--they are so broad. Also, I never said they "were not used professionally". I see you really don't have any examples of what you said so you have attempted to set up a straw-man argument. I never said they were not used professionally: I said that--in practice--they were used in conjunction with JSP. You have yet to provide any counter examples of professional applications built the way you originally argued.
I can agree with all of that. If that's what you meant, so be it. I interpreted your original post far differently, you seemed to think HTTP basic somehow posed an authorization problem when it does nothing of the sort. You're probably right though. It's not your marginally coherent, ambiguous sentence that confused me. It's my lack of experience.
&gt; Yes, these are all free-standing technologies whose origin was independent of JSP. Thank you. Agreed. &gt; Yet, you are looking for a unicorn if you want to find an example of a professional Java web application that was made using those technologies and had NO JSP. I have over 150 of them right here one Stash project. There's a few hundred more in other projects. I'm not aware of a single use of JSP within our organization and while they may exist in a legacy code base there certainly isn't any new development done with them. This was also the case at my previous employer. The last JSP I looked at professionally was over 4 years ago in a code base we acquired and removing them was one of our first priorities. &gt; Every one of your "exceptions" the the general rules I laid out are microsopic edge cases that are never used professionally &gt; I never said they were not used professionally: I said that--in practice--they were used in conjunction with JSP. I'm sorry I misinterpreted. Look, while I can be a blunt and abrasive person I'm not actually trying to get into a pissing contest here. The only reason I bothered to reply is I don't want to see a young developer get what I consider bad or misleading information. If you come into an interview and give me those assertions it's probably going to be over right there. Here's a few things I hope we can agree on. 1. JSP is an important technology in the development of Java web applications from a historical perspective *at the very least*. 2. There are still many projects using JSP and many jobs asking for JSP experience. 3. The Spring Framework can be used in virtually any Java project, it does not require a web application or web container. 4. Spring MVC, a part of the Spring Framework, is implemented using Servlets. 5. Spring MVC is agnostic of the view technology used and JSP is one of many that are directly supported out of the box. I wouldn't be at all surprised if JSP were the most popular by number of jobs or lines of code. All that being said, I would never counsel a developer to learn JSP in the hopes of finding a "good" job. Quite frankly the jobs and companies that are still developing in JSP are the ones I want to stay well away from and I would be *amazed* to find it in a startup or anything cutting edge. I don't advocate Thymeleaf, Velocity or Freemarker either. There is no shortage of Java web applications being developed *without* using a single JSP. If anything I would tell someone to learn how AngularJS and mobile applications are being developed and how to support those well and efficiently through APIs with the primary (Java side) view technology being JSON. That kind of experience and knowledge will generate a line out the door at $100+ an hour even for a young developer. In fact, if you (meaning anyone) learn enough of that to pass our interview and I have a job with relocation assistance waiting for you.
I think you might actually be a better android dev if you don't know too much Java. My biggest problem was using public static variables to pass data between activities (using bundles is a pain in the ass for complex objects, and I never quite figure out how to make a parcelable object). The problem with public static is that android can kill and recycle an activity at anytime, and when it rebuilds it, it reload its data from the bundle, and the public static variables might be null. So I had to go back and change a ton of public static variables into bundle parameters, when at the time I though I'd outsmarted android with this simple hack. Also along the same lines, I would make public static lists of data, and access them from everywhere instead of using the sqlite dB like you're supposed to. This was another case where instead of googling for a solution, I though my Java knowledge would suffice, when in reality there are only a few places you can safely store data in your android apps.
Strings are objects, unlike the primitive data types. 
I'll answer from my junior software developer view. Servlets are not used in standard context. For spring MVC application you need only one servlet and that is dispatcher servlet. Even that dispatcher is done by spring you only need to define it in web.xml * JSP are still used as view technology but they are not that popular any more. People nowadays tend to go for RESTful JSON + javascript frontend like ext.js and such or other view technology like Thymeleaf. * Haven't heard of JUEL so cant tell you much. * Haven't used WebSocket so cant tell you much. * Bean validation is used for persistence validation. JSR 303 specification more specific Hibernate validation implementation is mostly used. * Although i haven't used JMS it is used heavily in enterprise. * JPA is used heavily. * Haven't used JTA yet. Spring replaces servlets in a way. It makes it easier to make web apps but internal technology what spring uses is in fact servlet. Spring supports JSP as view technology. 
C'mon henk, don't be like this. Just go ask our brother henk54 ;)
Does your rMBP employ any kind of throttling?
I believe the article says that (at least now it does).
The second to last does but not the last.
You should learn to setup spring independent of the ide. The specific ide should help speed up using your framework, but should not replace your knowledge of how the framework is setup and works. What server and build technology are you using? If you don't know, I'd suggest using spring boot and maven/gradle or jetty and maven/gradle. Those server/build libraries work well with IntelliJ community (and netbeans and eclipse) and work without ide magic. That way you can focus on using spring regardless of ide.
Not sure about this particular project, but spring boot is widely used. It really depends on your needs, but the spring projects offer a very nice suite that many developers are already familiar with.
Get yourself a copy of Head First Design patterns before you start Android. It will help you immensely to understand the framework and why it's structured the way it is (callbacks, builders, dependency injection, factory methods etc.). I was fairly competent with Java before I started Android and I felt completely lost until I learned about patterns. You're gonna encounter a lot of stuff that feels counterintuitive to the OOP basics you're taught in the beginning.
Intel chips can throttle down to a few hundred megahertz to save power and heat. Check if that is the problem.
Edit the config file: http://wiki.netbeans.org/FaqNetbeansConf For netbeans_default_options add -J-XmxXXXXm increase the max heap size(I run -J-Xmx2048m at work). More details on settings to tweak: https://performance.netbeans.org/howto/jvmswitches/ 
Are you running the latest NetBeans (8.0.2)? Newer versions have been much faster. You might also want to remove any plugins you do not use (Plugin Manager makes this very easy).
Storing a Future in a Set seems to be the questionable thing here. A Map with a sensible key type would make more sense and would avoid the issue entirely.
The `Future`/`Set` types are just a way to present the critical issue: Which is that there are less instances in play than one would derive from looking at the code. This can be true for any crowd of instances created by lambda expressions and is not limited to functional interfaces (which is why I picked `Future` to present the case instead of, say, `Function`). What you're suggesting could equally well result in an unexpected situation where two keys unwittingly point to the same instance.
Lambda expressions are logic not state, so two keys pointing to the same instance shouldn't be an issue - it simply indicates that the same logic applies for both keys. `ImmediateFuture` can't contain any mutable state, right, so it's not as though the instance could be mutated. To elaborate on my previous point, a `Set` is conceptually similar to a `Map` where the value is also used as the key. Clearly neither a `Future` nor a lambda expression make sense as a key.
That's a pretty naive view. Branding and marketing play a huge role whether you are a charity or for profit, especially in the 'corporate client' arena where nobody wants to pay for good tools but will gladly pay someone a salary that dwarfs the cost of good tools. It's insane. The point with the ANALOGY of MSVS is when you create a reliance on the IDE via some bells and whistles, you get lock-in, and as a result you eventually get bad code. If that's not effective branding I don't know what is. Another analogy is the reliance on WYSIWYG editors and form creators.
Boot is basically a Pre-configured Spring environment. It is intended to be a highly productive framework like Dropwizard. I am using at the moment and it's really good. A lot of the Spring advantages, with few disadvantages.
In all my years using Spring, I've never used STS. I've used both IntelliJ and NetBeans for professional Spring application development and never felt like I was missing anything. STS might be better for very specialized Spring application development, such as with Spring Roo. But for 99% of app development, the other IDEs are fine.
You mean the question mark boxes? Nice. There are some nice photos of them on Flickr.
This looks interesting, will it work with TestNG though?
cool thanks
Hmmm - I haven't tried it, but it looks like they do have support for it: https://code.google.com/p/mockito/issues/detail?id=304
The whole topic of `hashCode` and `equals` is indeed interesting. While I would argue that it makes sense for an object to know a way of determining whether it is equal to another, the prominence of `hashCode` is really strange. It seems like an utter implementation detail of some - often used but structurally not special - collection implementations. And I occasionally come into a situation, where I need a different semantics for both methods and I often got stuck. So I implemented something myself, which I am currently patching up and moving into my open source library [**LibFX**](http://libfx.codefx.org/). It's basically a decorator of arbitrary map implementations which forces them to use an [EqualityComparator](https://github.com/CodeFX-org/LibFX/blob/feature/comparerhashmap/src/main/java/org/codefx/libfx/collection/comparer/EqualityComparator.java) specified during construction. I know that alternatives exist (like [Trove](http://trove4j.sourceforge.net/html/overview.html)) but I see some benefit in this implementation.
Yep. I've found your proposal just shortly after my comment :)
Took a brief look at the code, it's well written! Good job. My only suggestion would be more commenting, but other than that it's pretty good.
Are you required to use NetBeans? If not I'd suggest Eclipse or Intellij.
Thank you :)
Sounds likeacool side project. I use java at work for 10 years already. But mostly server side. I really wanted in learning the ui with libgdx. Pm me please.
Yes, and more generally any code that depends on the reference identity of a lambda seems super sketchy.
beginners
What? No queue? 
&gt; Interruption simply means for a thread to stop doing whatever it is doing. Extra note: threads can't be interrupted at any arbitrary point. Interrupt points are typically on calls to perform I/O and to sleep, where it may yield to other threads. A thread spinning in a loop without blocking cannot be interrupted. 
&gt; time in ms and ns. Sleeps for 5.5s 5000ms + 5000ns = 5000.005ms = 5.000005s
I echo that sentiment from the Eclipse standpoint. I never felt anything that STS provided actually did anything.
Java threads sometimes remind me of a speeding train, once they get out of control good luck stopping them.
While I think that it's important to have an understanding of threads and concurrent programming, it strikes me as the kind of thing that the vast majority of development shouldn't have to think too much about, much like memory management / garbage collection. You should be sure you know what you're doing and what you're trying to achieve before you start creating your own threads. If not, chances are you'll just make a mess that could have been more easily implemented using a mature third party library. 
Yes, but an anonymous class that can be converted to a lambda really shouldn't be a more reasonable target for reference identity comparisons.
Nice to hear! I've made several ray tracers before which either used the simple phong or the cook-torrance shading models but this was my very first attempt at a path tracer. As for future development; I'm planning to implement triangles, a simple .obj loader and perhaps even some sort of multi-threading, we'll see. Aand I'm going to rewrite this in GLSL some day for sure, just to see some real-time movement and so on. :D
For a first attempt, it's pretty impressive. I look forward to see where you go with it!
[read this](http://home.lagoa.com/2014/04/ray-tracing-vs-path-tracing-in-plain-english/)
I agree it's reasonable to assume it creates a new instance. What I mean is that I can't envision a use case for needing to use such an assumption. That is, what task are you trying to accomplish where you would use an == or != operator on this object?
Nice! Didn't know that one. This seems to be the relevant feature to serialize `Optional`: &gt; So if you have trouble with stock JDK serilaization speed/efficiency, you might want to register a piece of custom code defining how to read and write an object of a specific class. ([source](https://github.com/RuedigerMoeller/fast-serialization/wiki/Serialization#custom-serializers))
Or like the Sorcerer's Apprentice from Fantasia.
This is outdated advice, and not something to teach new developers. The last thing a machine needs is a new developer spawning their own threads willy-nilly. Real advice would describe use of a proper thread management service like an executor or thread pool. It's still basic stuff, but sets the right course.
I think the language designers got this wrong. They should have made == a shorthand for calling equals(object), and had an explicit 'is(object)' method for the less common operation of comparing instance identity. Far more useful, and removes this gotcha. It would also work nicely if primitives ever became real types.
Highly recommend learning it right the first time by reading [Java Concurrency in Practice](http://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601/ref=sr_1_1?ie=UTF8&amp;qid=1420323757&amp;sr=8-1&amp;keywords=java+concurrency+in+practice).
Eh, I'll just assume that's a joke but if someone is still unsure; this is Windows 7 x64 Ultimate.
Nice stuff. How many samples per pixel and rendering time for these images ? Edit: you should add a licence.
Thanks, working on multithreaded rendering atm. The filenames include the amount of samples per pixel taken. As for rendering time; Approximately ~10 minutes for 1000 samples per pixel for a 720p image on my Core i7-4790K. We'll see how that improves once my multithreaded version is complete.
Let's see if Gavin let's this go now. I doubt it but...
This seems to be a question about the Android SDK, only tangentially related to java..
Oh, neat. Weirdly enough I didn't know of the existence of such subreddit.
Nice try, Brian.
I read the entire blog post, dude. &gt; As the post clearly states, the code is a contrived example. And my claim, which you seem to not have read, is that I believe *all such examples will necessarily be contrived*. I believe that if you have written code that would be affected by this, then that code is at best morally suspect and at worst wrong. &gt; Furthermore, the example tries to convey the fact that this problem can manifest itself in situations where the functional aspect is not obvious. There are certain semantics that necessarily attach to anything that can be transformed into a non-capturing lambda. In particular, every single instance of such a thing must be behaviorally identical and interchangeable for every single operation *except* reference identity (and operations that follow from same). This means that reference identity is not a meaningful operation on these things, and should never be used.
 Naive? The clients have standardized on STS, and paid for the licenses, and it gets the job done. Not sure how you can blame STS/Eclipse for "bad code", do you have facts to back up that claim that Intellij or Netbeans results in "better code"?
 It depends. For jumping into a large existing Spring codebase, I think STS blows aways Intellij, STS's AOP, bean, and MVC views would be hard for me to give up. I've never used NetBeans. You should try them all, there are free versions available of all of them and see what works for you.
"Furthermore, please note that the 3.2.x line - and therefore the entire 3.x generation - is approaching its end of life in 2015. We are still committed to basic maintenance for critical issues; however, don’t expect more than two or three further 3.2.x releases down the road."
&gt; Brian took much more time than it would take to communicate the technical issues talking about how it's way too time-consuming to communicate the technical problems. In Brian's defense, he might have anticipated an even longer discussion if he had just outlined a few random issues with one possible implementation option like Rémi did. Some people might have started to try to solve the issues one by one which would have required Brian to spend even more time on the topic and could have lead to an almost endless discussion. I think it's not unresonable to expect others to come up with specific examples for why something is not feasible that is such an obvious mismatch with the existing Java language and the way JVMs work today. Rémi described a few problems that would arise if it would be implemented at the VM level, Brian hinted at problems that would come up if it was implemented purely on the compiler level. There is not this single blatantly obvious obstacle that clearly shows why it couldn't be done at all. Of course it would be possible to force it into the language in several different ways, but it would always turn out as a ugly trade-off between contradicting goals. You could make it reasonably fast but then it wouldn't fit consistently into the existing language and lead to lots of new surprising corner cases that all developers would need to be aware of. You could make it somewhat consistent but then it would most likely have to break compatibility at least at the source code level and it would prohibit several optimizations in the VM. You could do a complete overhaul of the bytecode and the VM and add a transitioning path for legacy code but that would be a huge effort and then you would essentially have a new language or have to make Java source code look really messy and it's still not clear whether you would be able to achieve at least the performance of existing JVMs.
In the real world, you just need one.
I use an IDE so I can't really answer your questions. But let me comment on this here: &gt; Is it productive? Anyone that *does* code Java without IDE will of course say that it's productive – otherwise that approach would be silly, no? IMO coding in Java is – contrary to other languages – strongly enhanced by using an IDE. And there's not much reason to not use one.
I tend not to use it when writing for Play Framework. This is because the quick compile cycle from PF takes a lot of the pain out of it, and it's a good way to get more of the package structures stuck in your head. An IDE is way more productive a lot of the time, but for simpler projects I prefer to skip the overhead, it's just so nice to be able to manage everything in a nice SSH session to my server, I do have syntax highlighting enabled in Vim since I can't stand to stare at a monochrome screen.
Very cool! Reminds me of the work David Brackeen did on a pure 3D engine in Java. http://www.brackeen.com/javagamebook/
&gt;Is it productive? No. You might get away without using an IDE as a student ( the ideal time for not using one as doing without one has educational value) or as a hobbyist. However, in a job situation it just isn't practical. You have projects with dozens, if not hundreds, if not thousands of files of thousands of lines of code each. Time matters too. Bosses and clients will not give a shit about your IDE-free Kung Fu. Above all else they appreciate stuff done quickly and there are just so many things an IDE does more quickly........and sorry, more thoroughly, than you can do with just a text editor. 
Android Studio is forked from IntelliJ, right?
Yeah, keep using System.out.println, IDE are overratted anyway. /s
I'm currently learning Java right now and have chosen to start learning without an IDE, which allows me to have a better understanding of the language without the assistance of an IDE. However, I would imagine once someone has the language under their belt, that switching over to an IDE would be the most beneficial for productivity.
Google dumped Eclipse in favor of Android Studio. It is based on IntelliJ.
Once I tried to move to sublime+maven instead of eclipse. It was a good experience, but I made a lot of mistake that normally wouldn't happen in IDE, and it made it less productive for me
How do you debug?
In my experience with eclipse, there are times when it doesn't work as it should, where I will have to waste hours to solve IDE errors, build problems or plugin issues, but at the end of the day, I can't imagine being productive without the tools it provides. 
Things like auto-completion in the IDE and the sample code projects will give you a much better understanding of Java. 
On the occasions I'm coding Java without an IDE, the thing I miss the most is autocomplete of imports. There's a lot of other things that I will use the IDE for - other autocompletes, refactorings, debugging, and lots else - but I can cope without those if I need to much easier than I can cope without the imports...
Even when teaching Java I've found the use of e.g. Eclipse immensely helpful. When you don't use an IDE and have little experience with OOP you will most definitely shy away from the more advanced OOP practices that are very common in third party JAVA components. From what I've seen most beginners without a JAVA IDE (and no other OOP experience) will write procedural code. Moreover tool support is one of the prime reasons to use JAVA in the first place. Without the typing, strictness etc, why would you even bother to write in JAVA? You could use a more dynamic language.
Decent IDEs also make those features modular. They do not negatively impact performance or get in the way.
&gt; I think Brian is being quite reasonable Not having any affiliation with either two of them, I did found Brian's remarks to be more than a little belittling. "Ah, dear little Gavin, now you be happy that you got some attention on a big people mailing list. Now, you should be very happy with this really, because your friends at kindergarten don't just get that you know. Getting a shimmer of attention from big people, that's really special, you know that little Gavin, don't you? Now you go play with your friends, and just let the big people figure this out for you" I'm not native English so maybe it's just my interpretation, but without having any (no pun) idea who's technically right or wrong here I found this more than a little distracting. 
I love vim, occasionally I'll do something quick in it if I need to. But as a rule, 99% of the time if you're working in Java you'd be insane not to be in an IDE.
Do you ever refactor anything beyond simple symbols?
You do realize that java itself has features you will never use in 9999 years and the cpu you run on has instructions you will never use in 9999 years as well.
jdb
I would agree. I just hate the UX, honestly. Wherein I get the simplicity in editors like Sublime, etc..
Isn't Eclipse slooow? I just used it, and I hate it.
I put off doing anything with Java for years specifically because I didn't want to use an IDE for it. I eventually gave in, but... there's just no way I could ever even follow tutorials or anyone's articles/demos on anything, because there's always so much that's left out (and, I presume, assumed your IDE would take care of it). For me, the biggest one by far was/is imports. I'd see article after article showing something like BigDecimal number = new BigDecimal(50); Well... you have to 'import' BigDecimal. Where would I even begin to know where that and the other 35 classes that are in an example piece of code stored? IMO it's the biggest downfall of java that *nearly everything* has to be imported manually all the time. Obviously that hasn't hurt it's adoption too much, but it's still a big hurdle to deal with - doing it *without* an IDE would just be insane, imo. 
that's exactly what I was looking for. Thanks.
I use Emacs for all my professional Java development. With the right packages and configuration, I probably get about 80% of what a heavyweight IDE offers (completion, quick jump to compiler errors/warnings, quick doc lookup, debugging, quick navigation, imports management, hot code replacement). It's the 80% I care about and I get to keep using my favorite editor with all its capabilities, so I'm not missing out on much while reaping lots of benefits. It's not for the faint-hearted, though. 
I'm trying to push Intellij on my shop over it. Need Ultimate though because we're Spring. Two of us already got our own licenses so we don't have to use eclipse
I can't imagine seriously using this on any large application for regular development. It seems like self imposed torture.
Thanks
I love using vim, and I really wanted to code java in vim. I gave up after a couple months for the following reasons: 1. Java's package imports are a complete pain to manage without an IDE. You will spend a lot of time finding the correct path, and then importing the exact right. 2. Auto-complete saves so much time. If a class or method is one character off, the whole project will fail to compile. You have to reopen the file and fix it. IDEs catch misspellings on the spot, and it can recommend the methods in a class which prevents you from wasting time and looking it up. 3. Java divides functionality into different files. Opening 20 different files can be painful in a text editor. IDEs offer shortcuts for jumping to method or class definition. Being able to jump directly to where you need to look saves a lot of time. I found my productivity jumping 10x as much as compared to coding with an IDE as opposed to a text editor. I went from hating coding in java to loving it. IDEs turns java weaknesses into strengths.
Yeah I know that is why I said by default. I did try it, but it didn't seem to help a whole lot. Maybe I didn't give it enough of a chance. I also tried enabling parallel build and auto-Make, they helped about from the defaults, but still not as fast as Eclipse. I think this is becoming a well known issue people are having with IntelliJ, so I suspect JetBrains is working on it. Though their CLion IDE really disappointed me, so I am worried they are spread a bit thin.
As some one who programs as a hobby rather than a job, I can get away with programming in a simple text editor, and it is "productive." On the other hand, I would doubtlessly be more productive using an IDE. It's also worth noting that you will never get away with using a text editor like notepad. If you don't want to use an IDE, at least use notepad++ or some other text editor designed for programming. 
Dear god. How are you doing nowadays?
Instances of iterable can't be transformed into non-capturing lambdas. As you observe in your post: *And since lambdas are not designed to have state, different evaluations can also not “drift apart” during their lifetime.* The same reasoning as to why the JVM shouldn't create two intances explains why no user code should have ever relied on two instances in the first place (or by extension, on reference identity at all).
I worked at Amazon for a while and there were a LOT of developers who did this too, with the same exact side effects of horridly disgusting code. 
You really should learn to program with an IDE and without an IDE. There are times when knowing what is really going on with CLASSPATH and being able to edit a file with Nodepad++ or vim will serve you well. There are also times when IntelliJ/Eclipse will make your life easier. Learn both, spend most of your time in the IDE. Be able to use a command line if needed.
Hi, I just stumbled across this thread and I found it very interesting. Some of the answers here are accurate, but they cover only a small aspect of DukeScript, namely the ability to run DukeScript apps in the browser. Since we see that a lot, I wrote a blog post about it using some of the questions and answers here as a starting point (I hope that's OK with you): http://dukescript.com/update/2015/01/04/Common-misconceptions-about-DukeScript.html Cheers Toni (from DukeScript.com)
I use vim but with a ton of plugins, which gets me close to an IDE like Eclipse but without the overhead and staying in my everyday editor, which is pretty cool. Using vi/vim for Java *without any plugin* would be crazy.
The only bit of that which is not available in a good editor (vim/emacs/etc.) is refactoring.
Have you tried using gradle with intellij? Gradle will run a background daemon to alleviate startup costs for builds. http://www.gradle.org/docs/current/userguide/gradle_daemon.html
&gt; you simply will not be able to provide an easy-to-setup environment In any sizable team, you will have a diversity of views on the preferred environment to code in. People will make different choices here, and as long as they are productive, they should be able to do so.
Those results sound to me like the results of poor programming habits, not what they typed their code into. VI has long been considered an IDE as it has been beefed up over the years. FWIW, I've done most of my programming EMACS, visual slick edit, and eclipse over the years. 
Cannot stress this enough. Try IntelliJ.
Having an SSD helps also 😊 
I find it consistent with my experience. Vim users don't refactor in Java because they don't have the tooling. 
That's just laziness. The tools exist for vim, but you can't force someone to use them.
Such as? All I've seen is eclim.
^ 
If you dont mind me asking, what plugins do you use with vi/vim. I have been using it for about 3 months now, and finally fell like I am starting to get comfortable with it. 
Try Intellij. It has a better UX than eclipse IMO.
&gt; You really should learn to program with an IDE and without an IDE. Some 30 years ago the advice was to be able to program with a visual editor and without one. For the record, a "visual" editor back then was a line oriented text editor. Without one meant using single commands to set and get bits in memory. 
Easy, just write the python code as a string in java, have your program save that string to a file, then run it.
Should being the keyword, but in practice different people with different skill levels doing whatever they like often leads to at least some limited form of chaos.
Lazy people are lazy. Fire them.
Bad code period. Back in the day before OO was ever heard about large nested conditionals and functions that ran on for pages was considered crappy programming.
You can but I don't understand why you would want too. The setup alone to piece everything together an IDE does for you is a waist of time in my eyes.
Not a ton of Java experience but I have worked both with and without an IDE. When I started with Java, I did it at a job I had that was completely unrelated to programming. I had limited access to the Internet and found a compiler called jikes and started writing some .java files and compiling them to class files. As I started learning and using more it became a lot harder to track down issues in the code, bundle in packages, and create executable jar files. I got a manager to grab me a copy of Eclipse, and besides checking out other IDEs at some point, I'll never look back. 
Because of my inability to part with Vim bindings, while still in the need to use Java, I have been using IntelliJ with IDEAVim up until now. May I ask how you build your projects when they grow out of the scope of a 15 line ant build? This is the main feature I can't miss when programming in java. I supopose I could import the project in IntelliJ and then copy it's build script into the root project dir, but this seems like an inefficient workflow. 
&gt; And [here is my .vimrc](https://github.com/bfontaine/Dotfiles/blob/master/.vimrc) if you want. I must say, this is one of the slickest vimrc files that I've seen. Good on you for keeping your dotfiles well organized and easily extensible. 
I'm curious, I don't see nerdtree or any of its ilk here: does command-t fully scratch that itch?
I'm in the try intellij camp too, but if it doesn't quite do it for you, do try netbeans as well. 
People need to learn their tools. The canonical build is from the build server / continuous integration. Do whatever else you like on your sidetree, but don't break the real build. And when (not if) you do break the real build, be sure you have a full env to mimic it and fix the issue. Variations on this have been working for me for a long time.
I prefer ant over maven, and our ant and maven files are not small (couple hundred lines each for several projects). The key for ant in my view is to have sensible targets that let you compile and produce artifacts that make sense for interactive development. What those targets are depends on your project, but doing a full build with installers, etc. is not needed when you just want to make sure your code compiles. You can do things like this for build output integration in your .vimrc: if filereadable( "build.xml" ) set makeprg=ant\ -emacs "command make ant endif " ctrl-n, ctrl-p for quickfix mode map &lt;C-N&gt; :cn&lt;CR&gt; map &lt;C-P&gt; :cp&lt;CR&gt; Then you can run ":make [antTarget]" and the build will execute, and output will be captured for quickfix mode. vim will keep the output and jump to any lines reported in the build. I map ctrl-N and ctrl-P to scrolling through the output. Makes it very easy to build and fix issues. You can do the same thing with maven. Or are you looking to have your build.xml automatically generated? Hmm, perhaps I misinterpreted your question?
Awesome, I really appreciate it.
I think most if not all languages probably benefit and IDE, but OOP based languages like that the ones you posted seem to specifically fit nicely in the IDE world.
Ok, so more like &gt;18-wheelers are slow, so I don't drive cars ? But really, it's not "IDE is the tool for a job", just like it's not "automobile is the tool for a job", it's **which** one of the tools *of that class* you choose that makes a big difference. 
I couldn't take anyone seriously who says they don't use an IDE and are almost proud of it. WHY would you NOT use one? Using an IDE has no drawbacks and will increase your efficiency as a programmer.
There's about a million solutions to the problem before this one becomes acceptable
I use Vim as my editor but don't use it for java development. I map VIM keystrokes in my IDE so I get the basic goodness. I'd say my time is split up about 60/40 between IDE and VIM IDE boot time isn't a problem for me as I often leave the IDE open for weeks at a time when developing a project. Most of the boot time for the IDE I use tends to be the processes that crawl the codebase and do the inspections, highlighting, etc. I could turn those plugins off to speed the IDE up but I'd lose some features I like. I assume that if I installed scripts and VIM plugins to get the same feature set it would take them time as well. I'm not arguing so much as providing a counter point. Everyone should use the toolset they need to get the job done well. 
I actually learned java without an IDE from my comp sci class in high school. It was good to learn how to use the command prompt and a text editor but I will never move back now that I've used an IDE. You would have to spend so much time looking for simple errors like semicolons or parenthesis. It was just a pain.
For Python and JS I don't use an IDE. 
It is fine for small projects and writing java scripts. But professional programmers will use an ide. I have found compiling java from the command line to be useful and saves you from the cumbersomeness of the ide. I'd rather have a few java/class files in a single folder than an entire project in some cases.
I always used http://math.hws.edu/javanotes
I was mainly thinking about JS and Python, which I personally only ever used with a text editor (granted, I never really did a large project in Python). 
To be honest I cannot think of not using IDE (Eclipse or IntelliJ) when coding in Java. I do not use IDE for Python though (mostly Gedit or Kate)
I have a fealing OP (or someone else who doesn't like to use IDEs) is downvoting the replies s/he doesn't agree with. The later responses that say that it's more efficient to go with an IDE all seem to be sitting at 0.
&gt; IMO it's the biggest downfall of java that nearly everything has to be imported manually all the time. I haven't dealt with many languages yet. How do other languages solve the namespace problem?
&gt; Don't rely on it, you never know when you'll need to code with just notepad or vim. When does such a situation ever occur? What I mean is, I have gotten the impression as if programming languages and also how little IDEs and languages are really tied to each other is as if people need to be able to program while in a spacesuit levitating next to the ISS on a pocket calculator. And I wonder why that is so.
I've used twitter4j, it's great. You could also look into [Spring Social Twitter](http://projects.spring.io/spring-social-twitter/).
I really don’t know.
PHP has pretty much all basic stuff built-in by default, which is where I was coming from. $date = new DateTime('2000-01-01', new DateTimeZone('Pacific/Nauru')); echo $date-&gt;format('Y-m-d H:i:sP') . "\n"; No need for imports. Stuff that's so basic like dates, basic math stuff, etc... always annoying to have to have a bunch of imports (whether done by IDE or not). Certainly there's a lot of 3rd party libs you can use, and you'd have to import those, but for a lot of daily stuff, it's just built-in. I actually do a lot of Groovy now, and it automatically makes a lot of standard imports available (math, strings, etc) so there's a bit less need than plain Java.
That is Eclipse. Try NetBeans or IntelliJ.
Great list. Bookmarked it. Thanks for sharing.
Twitter4j is good, but no longer on [Twitter's recommend list](https://dev.twitter.com/overview/api/twitter-libraries). They are now recommending [hbc](https://www.github.com/twitter/hbc) for Java.
With pleasure, I just observed that you guys have indeed chosen a more radical use of style sheets. (hovering over "submit text") :) *That's* the stuff that helps, I am convinced.
Also: [Understanding Weak References](https://weblogs.java.net/blog/2006/05/04/understanding-weak-references)(which includes soft and phantom references)
Manually. Its not too complicated in my view, and you get all the control you need. Third party libraries are pretty easy to manage via a fileset or similar. And yes, maven is *far* more opaque.
PM me with what you had in mind - would really like to know :)
If you really want you can run a full instance of eclipse within vim (eclim), or stuff like YouCompleteMe etc. But I make due with just find/replace. There's shortcuts to automatically jump to te first instance of a highlighted keyword etc, and vim is inherently magnificient at jumping to the next quotation mark, semi-colon, end of the line, whatever. It's just a keystroke or two away.. If I want all the extra stuff I'll hang out in an IDE. The nice thing about utilizing base vim is I really don't have to adjust my workflow for Ruby or Python etc. It's all the same. I just like the ability to feel I can get my work done as long as I have a terminal with Vim.
Then it was two other people. Sorry for the accusation I just didn't see many others on the side of non-IDEs so I assumed.
Not hopeful, they will remove type erasure sometime in the next 50 years, in the meantime, guava
Explain to me like im an idiot what am I looking at ?
It is a link to a git hub repo that contains a library that can be use to map a result set - provided via the jdbc api -, a csv file to an java object. for example assuming the csv firstname,lastname myfirstname,mylastname and an object with 2 properties firstname and lastname. it will provide you with a stream, an iterator or a callback with one instance of your object with the value myfirstname and mylastname in their respective property. The code will looks like that in java 8 try (Reader reader = new FileReader("myfile.csv")) { CsvParser .mapTo(MyObject.class) .stream(reader) .forEach(System.out::println); } 
A good leader will incorporate your input where they can -- but once decisions are made conformance is part of your job. This is just a basic part of being in a team.
Night and day difference indeed!
If Guava solves most of the problems you think type erasure causes, which for most people it does in my experience, then you don't really *need* reification all that badly... You just need a better reflection API OOTB over the existing type system - which in fairness would be very welcome imo.
Its a pain in the ass to pass the type around, when it's literally already there in the code. Reflection doesn't help if the JVM discards the type information.
I use both eclipse and vim. The refactoring tools in eclipse are really useful, but vim is much better at text editing and has less clutter. With plug ins you can get most IDE features in vim anyway. 
The strongest reason for reification that I can think of is serialization. The hoops to jump through to deserialize a generic of something (List&lt;Integer&gt;) is just rough. Yes, solutions exist today, but they are somewhat inelegant. (new Typereference&lt;List&lt;Integer&gt;&gt;(){}) Beyond that, the only other case where reification sort of stinks is in method overloading. Having addThings(List&lt;Integer&gt; things); addThings(List&lt;Double&gt; things); doesn't work today because of reification. Maybe there are ways around it though better compile time semantics, but today it is an annoyance.
Yeah I definitely agree RE serialisation, it definitely is a bit of a pain... I just don't think it's *that* big of a deal, since as you say, it *is* possible to achieve all this in a type safe manner, it just clutters up the API a little. I'm writing a type safe data binding library myself atm and it's been frustrating... I've had to re-implement the entire generic method type inference algorithm to get type safety to a level I'm satisfied with. I *really* wish these tools were provided as part of the core reflection API. Perhaps then we could have syntax support for something like `Map&lt;Integer[], String&gt;.type` as a shortcut for `new TypeReference&lt;Map&lt;Integer[], String&gt;() {}`, alleviating some of the most annoying verbosity issues. The method overloading issue you mention is not actually something which can be solved with reification. Method overload resolution is done at compile time not at runtime, meaning reification wouldn't solve anything since it provides no extra information to the compiler. The compiler *does* actually have enough information to resolve overloads properly here as it is, since it knows the exact types of any arguments, but it doesn't allow this due to backwards compatibility concerns regarding interaction with raw types. I agree that it sucks, and I'd be more than happy if they fixed this, but it doesn't really have anything to do with reification. In fact I may be remembering this completely wrong, but I believe if you write the bytecode manually, you *can* overload in this manner, and when compiling against the resulting class most compilers will already resolve the overloads correctly with no modification!
it's just a concept how to arrange the components and i m working on real chat application 
Docs: https://github.com/google/auto/tree/master/value Maven artifact: com.google.auto.value:auto-value:1.0
I doubt there will be any free apis. ESPN has one but doesn't really return anything for public: http://developer.espn.com/docs/scores#overview
https://erikberg.com/api
You might be interested in /u/zamansky's blog he posts in /r/CSEducation http://cestlaz.github.io/
/r/datasets might be able to help.
Why on earth would you want to do this? Or why do you think you have to do it? Smells bad man.
I remember a class where everyone implemented provided interfaces to compete in a simple strategy game. Then we had a party and set all our "players" in action against each other, went over people's strategies/code. Prizes etc
Yeah why learn how to to use api documentation when you can randomly select from intelliguess menu...
Using an IDE with a ton of bells and whistles like eclipse might be a bit confusing for beginners, it may be better to stick to something a bit more basic, but that's just my opinion
So that I can build different versions from the same source tree.
What are you replacing it with. You might need to use Pattern.quote("\"") since the first argument is a reg ex. Also there is /r/javahelp which might be more suitable for getting development questions.
No. Netbeans is doing very well. See Geertjan's update at https://blogs.oracle.com/geertjan/entry/netbeans_top_5_highlights_of
Ah - that makes a lot of sense. Didn't realize this was acquired. I knew somebody here would know the score.
Was the "for developing a Java PDF viewer" part necessary here?
[Clean Code - A Handbook of Agile Software Craftsmanship (Robert C. Martin)](http://www.amazon.es/Clean-code-Handbook-Software-Craftsmanship/dp/0132350882) [Java The Good Parts (O'Reilly)](http://www.amazon.com/Java-Good-Parts-Jim-Waldo/dp/0596803737) Both books are great, with good examples.
Yes and No. The JavaFX object model closely fits the way PDF works. If you have a very linear data structure to convert to display in a Java Container, Graphics2D might still be a better bet (and is still faster in some cases). The points about support and platforms are more generic.
Spending hours looking for missing brackets isn't going to teach you anything other than the fact that life is so much better with an IDE.
As the second person to say this to me, I think I'll start using an IDE from now on to continue my learning. Thanks for the advice.
Nope.
https://github.com/google/FreeBuilder
this is spam. no useful content at all...
Some DNS hiccup it seems. Working again now but https://github.com/google/FreeBuilder is also a valid destination.
no direct experience with roo - i'm learning more about boot because grails 3 is built on top of boot. that just feels the way spring is going - if I had to make a choice, I'd probably lean towards boot.
Last I checked, JavaFX is still missing the ability to turn OFF the annoying anti aliased fonts. I need to have crisp fonts, and every toolkit in existance; from GTK, Qt, Windows, .Net, Swing, AWT etc can be configured without using anti aliased fonts. Not JavaFX. So it will remain a dead end for me, unfortunately. It's not a preference, it's a user accessibility thing, anti aliased fonts burn my eyes in &lt; 10 mins.
It probably does not really matter. Roo was supposed to be the big thing to make Spring more usable last year. This year it is Boot. Next year it will be something else so both will probably be outdated by then. Use what works for you. If you want to make your life easy then use JSF for a CRUD application. Add Primefaces if you want to make it fancy. It will be a lot less work to build and maintain.
Yes it was. JavaFX is better than Swing in one regard and one regard only, developing a PDF viewer. It's a very specific piece of technology. Some laughed at Oracle/Sun for developing it. But whose laughing now.
JVM: You're not my type.
Have you tried `-Dprism.lcdtext=false`?
Would it work to add a different font that would work for you? It's incredibly easy to do with JavaFX. Or do you mean in the actual designer?
Roo and Boot approach rapid application development from different angles, one is not a replacement for the other and neither is outdated. Roo is a classic code generator like Rails or Django and the output is a standard Spring application. JSF does not provide the same features as Roo (for example, will JSF automatically create fully-styled and usable admin screens from entity definitions?) Boot doesn't do code generation, but uses the configuration to download and automatically activate the correct pieces of Spring (the BOM concept). Boot is more bare bones and more work to develop an app is expected, for developers that want more control over the process but don't want to configure as much by hand. Why are you comparing two products with different goals and audiences?
Using an IDE as a beginner wouldn't be a good idea. Using a text editor only makes you better understand the syntax IMO. 
Isn't Java2D already hardware accelerated? There is even a property to specify opengl use I think (http://docs.oracle.com/javase/6/docs/technotes/guides/2d/flags.html - http://docs.oracle.com/javase/6/docs/technotes/guides/2d/flags.html#opengl). I've looked into this a while ago, but I don't remember very much.
Yes it is, but there does not exist any interface to upload &amp; execute custom fragment shaders to the GPU in Java2D.
I see. That's out of my league. You could try checking with the JOGL people. #jogamp @ irc.freenode.com or their website. Wikipedia says that Java2D can work together with opengl stuff. Maybe if what you want isn't possible, something else good enough is. I don't know about the subject very much tbh.
The goal was to create a CRUD application. There are different ways to do that. I know Roo and Boot are not exactly the same thing but since Boot has come out I rarely see Roo mentioned. Of course Roo and JSF do not work in exactly the same way but you can have a CRUD application up and running with JSF if you use the Netbeans CRUD generator. It will create your application based on the entity definitions.
It doesn't aim to be better than Hessian, JAX-RS or Spring HTTP invoker. It just should offer different way how remoting can be done. This adds to your project only one few kB JAR file, offers very simple and transparent use on the client side and full control over implementing the remote request processing on the server side. Maybe someone will find this useful.
No. Just PDF viewers.
for kick ass remote call performance (in the millions per sec) try fast-serialization+kontraktor :-)
JavaFX works really nicely with images and you can apply complex transitions and animations to the images. It has a lot more power than Swing in a lot less code.
I do not know who you are arguing with or what you are talking about. You are arguing points I did not make or disagree with. Not sure why you are talking about micro sevices and Spring Data. The OP wants a simple CRUD application.
 name == "Freddie" This here is your problem - you are comparing objects (the two strings) by reference equality.
1. You need to compare Strings in a different way - see [**here**](http://www.reddit.com/r/javahelp/wiki/string_comparison) 2. Thank you for **ignoring** the **plenty different hints** on this subreddit that tell you to **go to /r/Javahelp for help with code**: + The big red box in the sidebar saying "Please seek help with programming in /r/Javahelp" + The big red banner that appears when hovering over the "Submit Text" box saying: "Please seek help with programming in /r/Javahelp" + The big red button that says "Seek Programming help" + The "Question mark" in the blue "Related Sub-reddits" box that is labeled with: "**Java Help** ← Seek help here" So, for the future, kindly post code questions in /r/Javahelp.
WHY!? WHY did you feel the need to reply to this??? :X
&gt; I know Roo and Boot are not exactly the same thing but since Boot &gt; has come out I rarely see Roo mentioned. I explained why. &gt; The OP wants a simple CRUD application. That is not what the OP said. He said he wants to write a CRUD application. He did not say a "simple" CRUD application. Do you see the word "simple" anywhere in OP's post? He was asking whether he should continue using Spring Roo while Spring is promoting Spring Boot. The choice of Spring Boot or Spring Roo depends entirely on what the OP hopes to achieve or expects from the product offering.
The tutorials in eclipse usually show test results. How would I add a test? I have never tested/used junit before so I'm super unsure of how to add test cases.
The problems I read about Tomcat in this thread don't actually exist. Tomcat can be tested on your own machine. You do not have to 'install' tomcat in a messy customer environment. Simply unzip a Tomcat archive. Have your own scrpit (or bat on windows) that sets environment variables, and starts / stops tomcat. For Tomcat, just be sure CATALINA_HOME, CATALINA_BASE and JAVA_HOME are set. Here's the neat thing. You don't need to deploy your app into Tomcat. Deploy your app into a partial copy of Tomcat's structure structure and call it 'catalina base'. The folder name can be whatever you want, but point the CATALINA_BASE environment variable to it. Point CATALINA_HOME to your unzipped tomcat instance. Now anything you put into CATALINE_BASE under the directories: conf, lib, webapps, etc will override those missing items in CATALINA_HOME. Still need to run Tomcat as a service? No problem. What I do is have a SetPaths.bat which sets the environment variables. Then I have my own service-install.bat, service-remote.bat, startup.bat and shutdown.bat which first call SetPaths.bat, and then run the corresponding command in CATALINA_HOME. For example. Server number 1. Folder: C:\MyApp\MyApp01 In this folder there is: * CatalinaBase (which contains a few sub folders like conf, lib, webapps) * SetPaths.bat * service-inistall.bat * service-remove.bat * startup.bat * shutdown.bat Server number 2. (yes, on same Windows OS) Folder: C:\MyApp\MyApp02 In this folder there is: (basically the same as above) The SetPaths.bat for MyApp01 contains: @echo off set "SERVICE_NAME_SUFFIX=MyApp01" set "CATALINA_HOME=C:\MyApp\apache-tomcat-7.0.27" set "JAVA_HOME=C:\Program Files\Java\jdk1.7.0_04" set "CATALINA_BASE=%cd%\CatalinaBase" The SetPaths.bat for MyApp02 is almost the same, but I bet you can figure out that MyApp01 changes to MyApp02 everywhere. The startup.bat contains: @echo off call .\SetPaths.bat "%CATALINA_HOME%\bin\startup.bat" The shutdown.bat contains: @echo off call .\SetPaths.bat "%CATALINA_HOME%\bin\shutdown.bat" The service-install.bat contains: @echo off call .\SetPaths.bat "%CATALINA_HOME%\bin\service.bat" install %SERVICE_NAME_SUFFIX% The service-remove.bat contains: @echo off call .\SetPaths.bat "%CATALINA_HOME%\bin\service.bat" remove %SERVICE_NAME_SUFFIX% Now to install the service for MyApp01, I can just run service-install.bat in the MyApp01 folder. Similarly I can install the Windows Service for MyApp02. Note that both services, with distinct names, appear in the Windows Services Control Panel. Similarly run service-remove.bat to remote them from the Services control panel. Note that both servers share the same copy of Tomcat code and the same JRE on disk. Now suppose I need to upgrade server 1 to a newer tomcat. Just unzip that tomcat along side the first one so that I have two folders: apache-tomcat-7.0.27 apache-tomcat-7.0.54 Now run the service-remmove.bat on server 1. Change SetPaths.bat in server 1 to point to the newer Tomcat for CATALINA_HOME. (Hint: you could also point it to a newer Java right now too!) Now run the service-install.bat for server 1. It's upgraded! And this upgrade can be done with only seconds of downtime if you have the new SetPaths.bat already prepared. Note that server 2 was undisturbed and continues to run the older tomcat on the older Java. Note that we never used the Tomcat installer (setup.exe). To get rid of all this, simply run service-remove.bat on all servers, and throw away the entire top level: C:\MyApp It's all gone! Nothing left behind. Nothing in left in the registry, etc. You can run as many Tomcats as you want on a single machine. Because you control all the paths, you don't care what other crap the customer may have installed on the machine. Even your tomcat services will have distinct names in the Services control panel. You can easily run test tomcats, of different versions, and against different Javas, on your development machine -- at the same time! If you don't need to install Windows Services, then use the startup.bat and shutdown.bat instead of service-install.bat and service-remove.bat. 
Well... you might be looking for a generic JUnit tutorial, then. There should be plenty of those.
yep. however http-remoting is underdocumented (needs kontraktor + switch to fast-ser codec). licensed by a major european exchange :-)
What? It takes making folders to manage a java project. How it is any more work than any other language? Don't blame your lack of build tool experience on java.
I mean the fonts in the applications themselves, so that includes the designer + whatever I happen to be building / running. Setting a different font won't change the aliasing, as that is separate from the font.
I just tried it on the scenebuilder app itself, that flag did not have any noticable effect. I believe that just tweaks some part of the antialiasing, it doesn't enable / disable the entire thing.
Is your goal to learn Java, or to learn Computer Science. These are two completely different things. You can PM me and I can provide some assistance with Java. Been doing it for 14 years. Taught it at a college level, and in corporate world. 
By your excitement, you seem to be interested in computer science rather than just learning Java. I'd recommend you to take Introduction to Computer Science and Data Structures on Coursera. If you wish to specifically learn Java, or just exercise programming, there is http://www.codewars.com , that you can use to practice with programming exercises. 
Thanks I'll look into the case study 
Long term I want to learn computer science but short term I have to focus on Java for my upcoming AP exam.
If you want to develop your problem solving skills, [Project Euler](https://projecteuler.net/) is a great thing. It will also help you become more familiar with the language, which is essential for the AP exam.
If you are looking to get ahead in class I would also suggest learning Unix. Linux is a good place to start. Knowing how to talk and use Unix will help you tremendously. Open a terminal and learn how to use the Unix command line. It will help you to wrap your head around Unix.
Solve a bunch of Project Eurler problems. Try to use classes as much as possible. Implement different data structures and sorting algorithms from scratch. Profit.
I took the AP CompSci exam about 5 years ago, so I kind of remember what the class was all about. The best way to prepare for the exam is write Java programs. You can write small ones on your IDE that do various things, or you can do one of the fun learning sites people have suggested. Writing Java is the best way to learn. Wholeheartedly agree with the person who said write comments throughout your code on the exam -- graders LOVE that. Also practice coding questions on paper because that's what you'll use for the exam. In order to get as much out of the AP class as you can, go above and beyond on projects. If the teacher asks you to design and code a multiplayer game, turn in a pimped-out game with lots of cool extra features and levels. This is actually fun, if you like to code. I went on to major in CompSci in college and go into software engineering after college because of this high school AP class, so don't underestimate it! :)
From what I can see its not just that you want to learn Java like some people are asking, but to learn more Comp Sci, and things that would suit a comp sci major. A few things would be to learn your language well, Java in this case. Do some problems on Project Euler, or Code Abbey, or hackerrank. Take some online classes on Udemy, or Udacity or wherever you'd like. Study things like basic data structures. Basic CS algorithms, etc. Learn how to use a bash shell. Use something like [vmware player](https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_player/7_0) to run a Linux virtual machine and do things like learn some [commands](http://www.informit.com/blogs/blog.aspx?uk=The-10-Most-Important-Linux-Commands), write code and compile/execute in a shell. Learn basic things like how to configure a database or webserver, then how to harden one. 
The Tree structure allows much finer control over values like Opacity which can be inherited and also allows you to add/edit/alter parts of the image very easily. I will do a more detailed follow-up article as it seems of interest. You also have much more functionality in JavaFX (like being able to set a width on a General Shape easily). You can actually download the JavaFX code and take it apart yourself at https://www.idrsolutions.com/open-fx/downloads/ 
go to java.com download it, it coming with something called "ask toolbar" then ask it.
wow im funny, they should mod me @ r/funny.
This is what I used when I was in AP computer science to get ahead of the class. Also you could go ahead and buy some college books, I personally loved my introduction to object oriented programming book as it was more detailed than my AP computer science book.
Also go over the AP computer science book that they sell, the one to prepare you for the test. The book has an introduction to basic computer science concepts and helps with remembering what each function and call does.
All those are true for CORBA as well for example. Why should someone use your technology over one of the established? I think you need to advertise *some* advantage otherwise not many will be compelled to switch because that means a new dependency, learning a new technology etc.
You can switch JDK's by "sourcing" an environment script before running the java apps, ie. a sample "/etc/profile.d/jdks.sh": #!/bin/bash # java env export JAVA_HOME=/opt/jdk8 # mvn env export MVN_HOME="/opt/maven3" # global env export PATH=$JAVA_HOME/bin:$MVN_HOME/bin:$PATH JBoss, Eclipse use it's own settings (JBOSS_HOME and eclipse.ini). OpenJDK used to have poor Swing/AWK support (which affects JConsole and SoapUI, for instance). I'd use git instead of SVN, though, as it doesn't require an initial "server setup" and it's quite popular too, besides there's "git svn" for compatibility.
Correct, you need different settings. Or if you're "lazy" you can use "symbolic links" ie, setting JAVA_HOME to "/opt/jdk" and changing it every time by replacing the link: $ ln -s /opt/jdk-&lt;version&gt; /opt/jdk I also "hate" Eclipse, it's too much trouble. IntelliJ would probably be a better choice (the link approach would probably make Netbeans completely lost). (edit: netbeans rant added)
What's running in production java-wise? I'd download/install that to /opt and point my IDE to that
If you like technical books, maybe find a chapter of Effective Java online, see if it's the right level and buy a copy if it works for you. It taught me a lot. 
Still, if someone is versed in one remoting technology she would need a reason to switch to something else for a new project. Why even look at something that is just different and not better at least in some aspects?
I spent about 6 months very recently using Ubuntu as my development environment for both some back-end Java web dev and Android dev. It was fine for both. I liked it considerably more than Windows 8 actually. That being said there were still some messy gotchas when initially getting set up. You will need to still probably google a few things to figure out why some stuff doesn't work and get it configured properly. Off the top of my head I can recall that IntelliJ actually does not work properly using OpenJDK and you will have to use OracleJDK when running it and it can be a little annoying actually figuring out where the stock OpenJDK JRE is installed and tell Ubuntu not to use it as the default JDK if you want to resolve it that way. Anyhow, if you're using Linux, why not use the tools it provides? Instead of manually downloading everything use apt-get (if on Ubuntu) or whatever other installation tools are provided. You can set environment variables in Linux in a similar fashion to Windows. The command is EXPORT I believe instead of SET when doing it from bash or another console environment. Anyhow, bottom line is that Java dev works fine in Linux. A matter of fact it also works fine in Windows and on Mac OS X. I think you can choose whatever you want and if you're willing to put in a little bit of extra effort to figure out whatever quirks are native to that platform (because there is always something) you can be productive and fine getting your work done. EDIT: Here is what I was talking about with EXPORT: http://unix.stackexchange.com/questions/26047/how-to-correctly-add-a-path-to-path
Thanks for the path explanation! But iirc, EXPORT just changes the path for the terminal/application scope. Once closed it uses the old one again, is this right? I also have the problem telling my system to use the OracleJDK instead of OpenJDK, IntelliJ won't start and Netbeans crashed when i create a project. Do you still remember what you did to tell Linux (in my case Ubuntu) to use OracleJDK? Also about the apt-get thing: As i said in my post, the tools provided in the repos are a bit old for my taste.
Is the $HOME/bin a standard in Linux or just personal taste, iirc /opt was the standard to install manually downloaded programs into. But the symlink is a nice idea, thanks!
6u20~ish and that's what i am planning to do :)
Just a heads up, this is not needed when working via netbeans. You can source multiple JDKs and define which one is used for each project. I'm pretty sure IntelliJ has similiar functionality.
I run IntelliJ with OpenJDK on Arch, what was your problem?
I believe there are some weird font rendering issues and some other issues. When I tried it, it gave me a warning when I started up the IDE about incompatibility and there were some UI problems that were visible (blank popups, unclosable modals, etc). If it's working fine for you though then that's great. I was using IDEA 12 at the time so it's definitely possible they resolved it in 13/14.
I write a lot of scripts and download a lot of one-off applications, jars, etc, and it just is easier to keep them in a home folder that I can control. Default shell scripts for various distributions do put that folder on the path, so although i wouldn't call it a standard, it certainly isn't strange to use it. Back in the old days I spent a lot of time writing Perl and sh scripts, and need a place to keep them without affecting others, so it became a habit. The problem with opt is that it's shared with other users.
LOL, you didn't benchmark any compiler. You just validated that you have a strange, slow, swapping machine. Tried it in Netbeans on a decent machine, and it ran under 1 sec. Which is even unfair, as it spawns a maven instance for this, which runs a new jvm etc. So, this 1 second measured my build overhead (which is up to 40 seconds in some of your IDEs). It didn't measure any compiler performance: you need much better benchmarks for that.
 I took the test last year and got a five. I showed up to the class maybe 60% of the time and when I was there, I was goofing off. The key here is really just to be a competent Java programmer. I had already been writing for 3 or 4 years by the time I got to the class though. At this point, I'd say it would still be in your best interest to get ahead in Java if you want to get a good AP score. Though, if you were truly passionate about being a programmer, you wouldn't necessarily need a class or an AP score to motivate you to do it. As far as learning Java on your own, everyone has their own advice, just make sure you get a lot of real problem solving experience because that will help you tremendously on the exam.
Thread is 4 months old... And yes it was not synthetic benchmark but some interesting real life observation.
Javafx doesn't come built in to openjdk, even in openjdk 8 and it's been a headache getting it to work thus far. Irrelevant for OP, but it's worth noting for others.
I'm curious, what were some of the tricks that the new employee showed you that really changed your mind? Any big ones stand out in memory, or was it just the culmination of lots of small things?
http://imgur.com/RadSf
I mean incompatibility between OpenJDK and JBoss/JavaEE
Thanks for this, wasn't aware.
not really - it's a getting started guide, and that's how you get started. Whatever your plugin does will happen in the runActivity method, using the Project object provided to get at whatever the plugin is interested in.
Because what we really need is another blog post that is going to go out of date when the examples from intellij are easily google-able and are in their commercial interest to keep up to date... https://confluence.jetbrains.com/display/IDEADEV/Getting+Started+with+Plugin+Development
I'm surprised that you consider Java development on Linux a bit of a mess. it's the default development environment for Java! On Linux every tool and library will work out of the box. The Oracle JDK for linux is production quality, you can use it and expect everything to work as intended. I found Java development on Windows very fiddly. You need a number of 3rd party tools to even have a proper command line, there is the eternal problem with the backslashes as file separators, and quite often your IDE or middleware, all of which assume a unix environment, will create files with a path name longer than 255 characters, which can't be deleted under windows. How was it a bit of a mess on Linux? Can you elaborate? 
Just because I don't express myself very well online, doesn't mean that the image was unrelated to my second point, nor was I claiming that my second point was the same as my first. 1. The blog post explains very little about creating intellij plugins, which relates to the first image, 2. blogs frequently go out of date and contain bad information as opposed to official documentation. 3. the official documentation is easy to understand, and is far more complete, complementing point 1. Happy now?
Reddit would be he chaff, if that's your goal. 
[Cassandra High Availability](http://www.amazon.com/Cassandra-High-Availability-Robbie-Strickland/dp/1783989122) is a solid new book I'd recommend. It's very up to date with a section on CQL and Spark connector. 
Your IDE will be able to handle a lot of this. IntelliJ is pretty awesome at it especially if you pay for Ultimate. VCS integration is very smooth through the IntelliJ context menus or you can always fall back to command line. You won't miss Tortoise. Running MySQL isn't too difficult, but it might make sense for you to use a simple development database like HSQL or H2 for local dev since it's much lighter for startup. I've had a few tiny hiccups with OpenJDK, but it's 99.9% compatible with HotSpot.
Spring Roo is a code-gen based approach. It works well for what it does. There are some differences, however, and I would recommend Spring Boot as the super choice for today. Here are some of the places where Boot wins over Roo, where they might overlap. Some examples: - Roo code-generates server-side generated HTML UIs. Today's developers don't want their HTML5/Android/iOS/car/whatever clients code-generated based on a backend Java domain. They want easy-to-setup and secure REST APIs, like Boot (working in tandem w/ Spring Data REST, Spring Security and Spring HATEOAS) delivers. - Roo code-generates Maven builds. Today's developers can use Spring Boot 'starter' dependencies to make Maven and Gradle builds as concise as possible - Roo code-generates CRUD repositories, but Spring Data (and Spring Data REST) can do the same trick, without code-generation, entirely at runtime, *and* it can export it via REST. All of this is dead simple in a Boot app. - Roo retains compatibility with existing Spring apps because it can be made to code-generate native Java and XML. Spring Boot is Java-first, and there's no intermediate language. It's justthe latest and greatest Spring, and Java, and Java 8, working together. It *is* existing Spring. - Roo makes building a normal 3-tier architecture app super simple. But, sort of speaking to the first point, today's architectures are very, very different. Boot is a cloud-native, microservice and other buzzword-compliant framework :D But seriously, you could achieve the same thing w/ both, in theory, but Boot is already winning in cloud-based services. See, for example, Netflix' heavy use of Spring Boot. - Roo code-generates web.xml and persistence.xml and beans.xml and orm.xm and all that other stuf. There's no need for any of that in modern Spring, and esp. not in Spring Boot. Unless you're using Maven, there's no need for XML at all today. Even if you're using Java EE standards like JPA that require the XML, Spring obviates their need. In theory, though, there's no reason Spring Roo couldn't be used to code-generate a Spring Boot applications. If you like the code-generation approach, check out ihipster. jHipster is a Yeoman-based code-generator for Spring Boot. It isn't so round-trip friendly as Spring Roo, but I don't think you'll miss that part. I'd start w/ bare bones Boot (http://start.spring.io) until you decide you need more, though. jHipster is all about 3-tier web applications and so includes artifacts for all the *other* stuff Spring doesn't handle, like a Bower and Grunt-based node.js-ecosystem toolchain. Happy new year and happy coding!
Thanks for this one. It's brand new (december 29, 2014) :D
I'm running a dualboot Manjaro(Arch) with Windows 7 for about a year now and with basic linux skills you can do all the same stuff like on Windows. Just google around and you'll probably find a solution quikly to fix it. Or just ask around in the forums of your linux distribution. Also I think OpenJDK can offer [OpenJFX](https://wiki.openjdk.java.net/display/OpenJFX/Main) for the equivalent to JavaFX.
I read it a few years ago so I didn't know it was so far out of date. 
If you're just starting out and want to learn, all you need is to download the [JDK+NetBeans bundle](http://www.oracle.com/technetwork/articles/javase/jdk-netbeans-jsp-142931.html) from Oracle. That's it. Once you've moved beyond the basics, you should familiarize yourself with Maven (I think it's included in NB), or [Gradle](http://gradle.org/), downloaded separately alongside the NetBeans Gradle plugin (that can be installed from within NB).
Mostly incompatibility between non-repo IDEs (IntelliJ Ultimate &amp; newest Netbeans/Eclipse). Most of them just won't start with OpenJDK, but im glad this seems to be resolved now.
By problem solving experience do you mean solving a lab?
That sounds like my post high school plans and the thing about going above and beyond on the labs sounds good.
ill look into intelliJ because i currently use blueJ and have no problems with it but it seems somewhat simple
When I went on the codewars website, I noticed that they don't have java only javascript. 
http://www.wikihow.com/Create-an-Executable-File-from-Eclipse
need the 7th edition
I've never heard of BlueJ(I use eclipse) but you can try: Project&gt;Create Jar File. If that doesn't work try reading [this](http://coding.developer-works.com/article/2451506/How+do+I+export+a+program+from+BlueJ%3f) thread. EDIT: You probably should have posted this over at /r/javahelp.
Pardon my mistake. I've used the website for other languages and thought they had Java. I've looked some more and found this other website, in the same line. Take a look. http://codingbat.com/java
Thanks 
My teacher wasn't the greatest, so we didn't really have labs in our curriculum. But yeah, I can see labs as being great practice for problem solving. The problems on the test however won't be as big as a full blown lab.
If you want something more advanced, you could try gradle. One of the functions of gradle, is to build debug and release packages. Althoug I'm not sure if BlueJ has gradle support. But, In my opinion, gradle is glorious.
export to executable jar
Netbeans is great for that. It builds an exe installer with all the trimmings.
Hurray! Someone with the same question as me! Along with someone else who uses BlueJ. Haha
&gt;ThreadLocal exists for a specific thread as long as it’s alive and will not be garbage collected unless you free it or the thread dies. Not quite. The reference held by a `ThreadLocal` will also be released if the `ThreadLocal` itself becomes unreachable. That said, it is still true that careless use of `ThreadLocal` can result in references being kept around longer than they should be. If you put a value into a `ThreadLocal`, consider removing it in a `finally` block when it is no longer needed. Alternatively, you might store a non-strong reference in it, as in `ThreadLocal&lt;SoftReference&lt;…&gt;&gt;`. Might be useful for per-thread caches or the like.
If you're already using Spring Data, Security and Test why wouldn't you just use Spring Web MVC?
Usually when you produce a .jar, most OS allow for starting a JVM giving the .jar as input, by double clicking on it. If you prefer to distribute to other people, the best way is to package the JRE and application JAR together. As of Java 8, there is official support on the SDK for doing this, without relying in third party tools. http://docs.oracle.com/javase/8/docs/technotes/guides/deploy/self-contained-packaging.html#BCGIBBCI Another option is to compile to native code, but all the Java compilers that produce good native code are commercial. For example, http://www.excelsiorjet.com/
Respectable project, but there's obviously a lot to be done. Maybe it would be better for them to simply focus on rewriting their own WebEngine and the JS-Engine, since [anyone with JavaFX can easily make their own browser(based on webkit)](https://docs.oracle.com/javafx/2/webview/jfxpub-webview.htm).
Thanks! Yes we need to migrate to JavaFX sometime. The reason for using Swing is that [the code we inherited](https://gngr.info/doc/credits.html) was based on Swing. There was a recent thread on /r/java about how JavaFX could help with rendering tree-based structures. That makes JavaFX very suitable for this project. Similarly, we are using Rhino as the JS engine, and we would like to migrate to Nashorn (when we reach the point where performance is important).
Cutting content in 10 pages to maximize ad impressions ? I'm not going to bother when you have so little respect for your readers.
We are not increasingly hostile to newbies. We are only trying to move the **"help with code"** posts over to **/r/Javahelp.** Questions as OP's are reasonable and welcomed here. (Even though a simple search would have more than answered OP's question). Even before you posted your comment, there have been complete and correct answers without any hostility towards OP which clearly invalidated your comment that hence (and justified) received some downvotes.
I have used Consumer and Function quite a lot recently, I love how Lambdas enable you to hand a plain old method to another method like that. You don't need to program the implementation of an interface, don't even have to create an interface since there are a lot of options here: http://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html You can just hand a parameter-compatible method to another method, and that's awesome. main(...){SwingUtilities.invokeLater(ThisClass::new);} also kicks ass, but that's slightly off topic.
&gt; his post was sitting at 10% upvoted I guess that this is less hostility and more being fed up with having to answer basically identical questions on a regular (daily) base. Nearly every day, a question like OP's pops up and mostly will receive the same attention. Sure, the reddit search function is questionable, but even paging through a few pages would have answered OP's question without even having to post it. My statement above attributes to a general flaw in the reddit system. It's easier to post new questions than to look if the question has already been answered or not. We also see the same problem over at /r/Javahelp where sometimes (when course assignments are getting close to their due dates) the same assignment is posted several times in a short time period. Also there, such posts will not be very welcomed.
Lambdas are a very powerful construct. And as always coders need to be responsible with power :) It might be tempting to create smart abstractions with lambdas, like the one in the link you provided. processElements() has single responsibility (although at a higher abstraction level) so I'll argue that in that sense it is clean. But I also I think that making abstract functional code definitely raises the bar for understanding what the code does. Especially if the coder is not used to functional programming or is not versed with the specific APIs being used. On the other hand the code using processElements() does get a lot nicer. And if processElements() is used in multiple locations the whole codebase ends up better. So, basically it's up to the coders to balance the pros and cons. Trying to be too smart is not good, but if you manage to create simple but powerful abstractions the code will definitely be better.
You can write the method separately and just pass a method reference instead.
&gt; ... but one of the things I really don't like about them, is the way the allow users to group functionality together in a single method[2] , which according to me breaks the atomic nature of methods and prevents us from writing clean and concise code. I think you have to see the big picture first, in order to understand the benefits of paradigms like higher order functions: No matter which language someone uses, a (good) programmer always tries to avoid redundance and repetition. So he will strive for a design, which decomposes the problem first into small, independent problems. From those he can more easily write small and independent pieces of code (algorithms). The final application is then built by *"just"* **composing** those small pieces together. The core of this composition is always the **chaining** of method-calls, which can bee seen as a special kind of code, that executes functionality. A lambda expression is another example and just a **new** way (in Java) to achieve the **same**. So where do you see a significant difference? Lambdas (finally!) enables a Java programmer to express problems in many situations in a shorter and more readable way, than it was possible before with just using methods. This improves the expressiveness of the language and that is imho always a good thing. But the main concept of combining and composing smaller pieces of functionality to more complex ones stays the same.
Well, there's not really a difference in comparison with chaining, but with chaining you actually decide method names, naturally you can define functional interfaces with logical names, but most of us would use the predefined ones and I'm just not that sure the names of these would be a good fit for every occasion. To me, the danger is not really the lambdas themselves, but the inherent laziness of programmers. Why do the extra work when we can use the existing functional interfaces although the do not provide the readability that is expected when maintaining code?
Which is the way I prefer to do it, since it increases readability a lot.
Ya I guess I spent a long time in mongo so I gave up on trying to normalize everything a while ago. Biggest Cassandra thing for me was how to structure tables so you can query in the ways you will need.
It seems to me like default methods could be useful for providing the same functionality to multiple enums. Since enums can't extend anything, you can now allow them to implement an interface that contains default methods.
Of course it can be remedied by using code style guide lines, but in my experience, guide lines are more than often discarded as recommendations and functionality should preferably be designed in such a way as to make it hard to fuck up readability. Lambdas, imho, are designed in a way that decreases readability.
But why you should define a special functional interface, if you have already one? Readability is ok with functional interface, because already defined interfaces have clean names. I think improvements not only in a short code of lambdas but also in decreasing amounts of interfaces. 
I agree, i think the code is actually more readable than the Java7 alternative in the example he cites.
Unless there's a good reason to violate the style guidelines, like VERY GOOD reason, then I usually just mark it as something to fix during a code review and the offender just makes the code comply stylistically. 
I've been using [this one](https://en.wikipedia.org/wiki/HotJava) for years.
Not sure if you are joking, but we have been trying to find a copy of it to do some research. The download link has been discontinued. Do you have a copy that you can share?
But java didn't support multiple inheritance for a reason! And now it does? This is madness...
I think so, too. If inheriting code by multiple classes/interfaces (notice the confusion i have already?) is the only benefit over abstract classes, it seems a litte weird to me. I understand they needed it for the reasons mentioned before, but i don't see me using this feature without feeling like a hacker...
I thought applets were stupid because the web has evolved beyond them and it was kinda silly to try to explain to people what they were and why they weren't used anymore. Personally I enjoyed user input so much that I wrote a package for handling all instances of input and recently started adding more complex validation.
HotJava, several release, multiple platforms: https://archive.org/details/hotjava-evolt_browsers Did you look at other Java browser attempts http://sourceforge.net/projects/jazilla/ or http://lobobrowser.org/java-browser.jsp? If you guys make a working browser you might want to talk the the JNode guys and see if you can become the official browser for the OS.
You're absolutely right, thanks for this point. This is AFAIK problem of most RMI-like technologies such as *Spring HTTP Invoker* or *RMI* itself. In my library, when you want to change the interface on the server side, you also have to change the interfaces on all clients using it. However, when you change the server endpoint name in your REST-based communication, you also have to change the URL in all of your clients. The truth is that API versioning using REST may be much more simple, in *Carmine*-based API you can implement versioning using different package paths, e.g. com.my.api.v2.MyService. As one of the main advantages to use this library over REST-based API, one could consider the type safety of remote method calling.
What's that framework/component library that goes really well with gwt? vaa something?
Swing can be fast, however you have to tweak it a lot. Built in stuff is partially awfully slow (built in layout managers, table).
Vaadin? Never used it or GWT so no idea if they play well together, but it starts with "vaa" at least...
there's vaadin but you dont really have to use it. vanilla gwt works just fine too.
That was well put sir.
There are many ways to implement the behaviour you want, and it's actually not that hard for a novice programmer to do, the real problem is creating the dictionary file. One way of programming what you want is to create a file with keys and values. Keys being the source word, values being possible translations. If all these keys and values are sorted by their key, a binary search algorithm can be used to search for the right location in the file with log(N) performance. http://en.m.wikipedia.org/wiki/Binary_search_algorithm
Trait methods can override class methods, too. Java interface default methods, due to a rather strange design decision, cannot.
I just switch to IntelliJ after 13 years with Eclipse. (My company also has multiple custom tools built on top of Eclipse... But in my role I no longer need to use) The general consensus is that Eclipse is dying 
According to whom? It's still an incredibly active project.
Food fight!
If you program in _normal_ Java, you will not get any restriction using IntelliJ. Many perks rely on interaction to enterprise software. For now, I consider Eclipse a far superior Framework to create an IDE for a language of your choice, but if you want to stay in pure Java, I have better experience with IntelliJ.
How is this any different then allowing multiple inheritence?
NetBeans, Eclipse, IntelliJ . . . Who cares... Use whatever is comfortable to you... And if the projects you are working require a specific IDE, you are likely in with the wrong crowd... Maven, Gradle, Ivy, etc...., they make your choice of IDE irrelevant.
Come to think of it I've read no books about Java, almost all my Java reading is done exclusive on various blogs. That being said I must read some often recommended books. I think Effective Java is mentioned a lot.
So if I had a program that just printed hello world and I converted it to a jar, I could double click it and it would print something.
Also I figured here would be fine because it isn't actual code help
ahead of the slow class pace but not years ahead
It only inherits behavior, but no state. Possibly an attempt to find a happy medium where many of the use cases of multiple inheritance can be satisfied, but with less of the possibility of abuse.
Well there's the [4chan programming project graphic](https://wiki.installgentoo.com/images/5/5c/Programming-Projects-for-N00bz.jpg) but honestly nothing beats trying to build something YOU want to build. I spent most of my time programming on my own making games, and, while maybe 'off-topic' compared to the content of the test, the problem solving you have to do when making games helps *immensely* on the test. One of the questions on the test last year was about finding the two highest of three prices and adding them together (seriously) and that's something that any programming project would help you get through. The important part is to just be programming.
Not sure what the headline means. You mean this is better than Java EE containers? Honestly, the few times I've used heavyweight containers, we still never even considered distributed sessions. Just use sticky sessions. Still, this is pretty neat.
While the internals of Scala's collections are messy, they aren't /broken/. They work just fine.
I used Dietel and Dietel How to Program. Great book that covers everything you'd need to know to start. 
There are a lot more companies other than IBM behind Eclipse, along with many open source contributors like myself. And since Intellij is not open source, what happens to it when/if JetBrains bottoms out? I think there are advantages and disadvantages to each product, but to claim there is a &gt; general consensus is that Eclipse is dying is just being ridiculous, if not a bit malicious. Try both and see which one works best for you.
After 7 years of Eclipse (and loving it), then I tried IntelliJ... IntelliJ hands down. FrostWire Team
Not just dispatch -- abstract classes can have fields, interfaces can't. C++'s inheritance is a mess as a result.
Stop spamming your website please, read [Reddits rules](http://www.reddit.com/rules/) and it's [definition of spam](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F).
I'm fairly new to multiple inheritance and the whole philosophy of using interfaces over polymorphic solutions, but *default* methods seems to have introduced the diamond problem in Java. Previously, a clash of interface methods would mostly have been a problem in the sense that for some implementations, it would be hard to satisfy the roles of all interfaces. 
Does it make sense to use @Override for an abstract method?
It's honestly not as hard as people imagine. Just get a good library, I like Slick2D, and watch some tutorials. Graphics are the easy bit in simple 2D games, the thinking is the hard part which is what you would want for practice anyway.
I used to be a die-hard IDEA user by switched to NetBeans. It is fast, works out the box, and has excellent Mercurial support. 
A lot of good Java code. (And some bad Java code, preferably with explanations of why it was bad.)
Few points: * StringBuilder and Concatenation: [there is no performance impact](http://stackoverflow.com/questions/15397515/stringbuilder-vs-concat-vs-operator-relative-performance-different-in-ecl), [another question on the subject](http://stackoverflow.com/questions/1532461/stringbuilder-vs-string-concatenation-in-tostring-in-java) * volatile != double checked locking and SingletonHelper != double checked locking. both != Singleton. OP mixed up patterns to solve a concurrency problem. there is no downside in using pattern X per se. * Static class initialization &gt; Unfortunately, it also means that classes with time-consuming initialization can cause stop-the-world events. what?... stop-the-world events are related to JVM and more accurately the JVM GC. I can do static { sleep(10000); } and just create [custom classloader](http://docs.oracle.com/javase/8/docs/technotes/guides/lang/cl-mt.html) in a different thread. I think author meant that it can lock "main thread". 
Unless I'm mistaking the blog post talks about string concatenation inside a loop which is when you should use a StringBuilder, ptherwise it's not needed.
&gt; what happens to it when/if JetBrains bottoms out? IntelliJ IDEA Community Edition is completely free and open-source, licensed under the Apache 2 license and can be used for any kind of development. Android Studio, which has the same codebase, has the same licensing terms. 
Thanks for the responses--going to try Intellij and then Eclipse if I am lacking anything.
Or build a rest service that abstracts away the sessions from the server.
Thanks kakakarl! I found an even easier approach. One that the programmer can work indenpendently on the module and merge with the rest at the end. We can use maven overlays to merge modules on build time. if we need something more for files conflicts there is cargo. http://cargo.codehaus.org/Merging+WAR+files so normal wars + overlays + cdi for discovery = great way to have plugins
Before you ask a question at an interview, you should ask five of your developers. If they don't get it right, that answer is completely unimportant to your day-to-day work.
There was a big thread when that change was made. Many feathers were rustled. I agree with you people shouldn't expect the old behavior and roll their own when they need specific performance/behavior. But some people were adamant that Java was literally broken now that *substring* returns a new object (and that it explicitly doesn't matter that it was an implementation specific behavior and din't apply to other VMs). 
Honestly I'm new to this, I was just reading some theory about how to secure Rest API, but when I try to apply it I can't find something already established. If most of the Rest API use HTTP basic auth with SSL/TLS on each request, then I think I'll do it this way.
No! This will make the situation worse! It creates one per string variable if within the same scope. This is generally speaking.. there are other factors. 
I don't think there's really any standard way. Internal APIs are frequently not secured at all. If you're googling best practices, you might be seeing opinions on public APIs. If you use a self-signed cert, you're still open to MITM attacks if someone sniffs your network traffic and inserts a dummy cert. If you want an added layer of protection, you would have to either run a local certificate authority or explicitly add the self-signed cert as trusted (this is called certificate pinning). Basic auth plus a self-signed cert will make the transactions vulnerable but at least discourage casual hacking. Getting onto the private network would be much harder than sniffing packets.
Yes, I know its worse, but I remember reading in a few places that it creates a new object every iteration, instead of making one outside the loop
EDIT: you are correct. IntelliJ fooled me with debugging. I've inspected the bytecode on my machine and it does create new StringBuilder apparently because of the scope.
Sounds more like it *was* as long as you're using Java 7 and up.
yeah.. no kidding. They're used all over the place.. wtf
Good question and I'm really not sure what the answer is. Some companies are still relying on sessions for authentication. A lot of public APIs rely on an SSO provider and use something like OAuth. Internal APIs are quite often not secured at all or depend on IP authentication. Using SSL for every request is not necessarily a bad idea as these days the overhead really isn't a major concern for most applications. That being said HTTP basic is still undesirable if for no other reason than the simple fact it's sending the credentials with every request.
This is exactly what I mean. You can even see some of the latest tutorials on how to secure Rest endpoints with Spring boot (on the 1st page of this sub) and they use basic auth which I find very weird....
Check out Apache Oltu. It's an OAuth project. There's also PicketLink. I recently watched a YouTube video with Les Hazelwood, lead of the Apache Shiro project, suggest using API keys instead of OAuth 2.0, which is apparently less secure than OAuth 1.0. It convinced me to investigate API Keys soon when I find the time.
I've never heard of integrating JSF with JCR, so excuse me if my upcoming suggestions seems naive. Wouldn't you treat JCR as a data repository/source, much like JPA? If so, wouldn't you access it with either a CDI-managed bean or more likely an EJB? In either case, you'd probably end up setting the data in a CDI-managed bean that's bound to a facelet via EL.
What's your experience with Java and how long have you spent working on this? I've just finished an object oriented programming module in Java and I'll have 5 months to complete a project of my choice next semester. I'm interested in ray and path tracing but I'm worried something like this might be too big a challenge for me at the moment. Do you have any advice on what material I should read up on and how to get started on something like this?
I'm going to have nightmares about your company. There's very little out there designed to work with JCR. Most developers haven't even heard of it. Working with JCR is a bit cumbersome *period*. I would encourage you to look into a NoSQL alternative. On the up side at least you're not using Jackrabbit.
Bytecode generated by his example: Code: 0: ldc #2 // String 2: astore_1 3: iconst_0 4: istore_2 5: iload_2 6: bipush 100 8: if_icmpge 36 11: new #3 // class java/lang/StringBuilder 14: dup 15: invokespecial #4 // Method java/lang/StringBuilder."&lt;init&gt;":()V 18: aload_1 19: invokevirtual #5 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder; 22: iload_2 23: invokevirtual #6 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder; 26: invokevirtual #7 // Method java/lang/StringBuilder.toString:()Ljava/lang/String; 29: astore_1 30: iinc 2, 1 33: goto 5 36: aload_1 37: areturn That would be a new StringBuilder for every iteration. The JVM may be smart enough to optimize this at runtime.
I stand corrected. IntelliJ fooled me to believe it's only one instance. This is the correct answer
I've played around with java for roughly at least 4 years. I'm just a hobbyist, programming on my spare time for fun. I study automation engineering (2nd year) which involves programming obviously but it's not really gfx programming. When I first made this post here on reddit I had worked on this program for 2 evenings, the thing is that I've made several ray tracers using Java, GLSL, C &amp; C++ in the past so that experience and knowledge I got from those projects sped this up quite a bit. As for studying material, I've found everything I've needed mainly by just googling "Ray tracing", "Path tracing", "BRDF", "Phong / Other shading models", etc... Some sites I found useful in the beginning; http://www.scratchapixel.com/index.php http://www.scratchapixel.com/old/ (Old version of the site above, there was no "new" version when I read their tutorials so this is the one I used) http://www.raytracegroundup.com/downloads/Chapter25.pdf I don't really know what to say about your concerns regarding whether it's a too big challenge for you or not. To make a simple ray tracer in java with no "external" libraries I'd say you just need to know; How to create a window (JFrame is what I use), how to manipulate the colors of the pixels in that window individually, how to create a simple render / update loop and the knowledge of how a recursive function works (Whether it is iterative recursion or normal recursion that you choose to use for tracing each ray doesn't really matter)... Other than that the ray tracing or path tracing part is just math, mainly vector math. Correctly done path tracing which this demo of mine doesn't resemble (at least yet) would have a quite bit of physics involved in the calculations I'd guess. Let's just say that the concept of ray tracing is... really simple, if you compare it to rasterization which is the common way of rendering graphics in games and so on... So, again, I don't know how long you've been programming or how large module that object oriented programming module you've taken was but I'd say 5 months is more than enough to write something neat regarding ray tracing or path tracing or photon mapping or whatever. :D If you have the resources and interest I'd suggest you focus on doing that on the GPU instead of a CPU like I've done for obvious reasons.
"We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil" [Knuth]
Java and Perl.
I'll add that simply preventing object allocation might not help at all or make things worse. in many cases the object allocation can be done on the stack instead of the heap via escape analysis. Trying to do something fancy like reuse those objects would greatly hurt performance. 
Second rule: take measurements of performance Third rule: after reviewing measurements, optimize if needed and measure again.
You should look into [Keycloak](http://keycloak.jboss.org/) as well
Im studying from a book called big java and im a beginner. Its pretty decent
I was really happy with Absolute Java 5E. I learned so much from that book!
nope, I'm returning HashMap&lt;String,Field&gt; (instead of what I said in the topic), but anyway, I'm accessing keySet() and the value shouldn't matter... =/
It's definitely not for everyone, but it can be a big help. It was for me, at least. OP should keep in mind that the text is a bit dated. I think it was written for 1.5, so it covers stuff like generics and enums, but OP may need to add some material from other sources.
I must have gone through 2 or 3 other books before being recommended this one. I really recommend it to beginners. At times it was a little overdone, but it definitely kept me interesting. It made me actually *want* to continue reading, as opposed to fearing another tedious chapter.
So, you typed a text, then switched to URL and pasted the address, right? Either text, or link. Or paste a link into / as the text. But you can't make both a link- and a text-post. Also, this subreddit isn't the right one for this. Try /r/javahelp, or maybe /r/learnjava, or /r/learnprogramming As the sidebar clearly says.
Did you migrate from Java 6? If so, Java 7 introduced the `&lt;&gt;` ("diamond") operator, meaning that ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(); became ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(); and maybe you're somehow doing something like ArrayList&lt;String&gt; list = new ArrayList(); instead. Just a wild guess.
Considering the API says "Returns a new string", I always assumed a completely new String object was returned. It seems really hacky to try to reuse the char[] behind the scenes. Looks like the right decision prevailed, eventually.
I think the problem is with the way your instantiating your abstract class. Would you mind posting that code as well? The reason I'm saying is if I try this on my machine: Model&lt;Integer&gt; model = new Model&lt;Integer&gt;(); for(String column : model.getMapping().keySet()){ it compiles just fine. Inspecting the .keySet() method shows "Set&lt;String&gt; java.util.HashMap.keySet()".
Came here to say this. Always [keep it simple, stupid](http://en.wikipedia.org/wiki/KISS_principle).
I'm not even instantiating yet =/
But the entity name is an instance of Entity right? Where does it come from? Entity being abstract, you can't have something like for instance: Entity&lt;String&gt; entity = new Entity&lt;String&gt;();
You should not be getting a object returned. You are just testing that the exception is thrown **before** the object is created If you remove the assignment and also remove the the assertEquals() then you should be fine. @Test(expected = IllegalArgumentException.class) public void negativeRadiusCircleTest() { new Circle(-1, new Point(0, 0), Color.BLACK); } 
Ok, I think I figured it out, at least partially. Are you declaring entity as a raw type (ie as Entity entity;)? Well if so, then Java automatically infers the generic as type Object. Parameterize your declaration of entity and your headache should go away as well. I'm too lazy to go look at why this is happening, but I bet this has to do with legacy issues in pre-generics Java, just a guess though.
Cool, glad I could help.
As the sidebar and the big fat hover text states: &gt; Please seek help with Java programming in /r/Javahelp!
Babysitting noobs is not my idea of discussion.
Great attitude to have. 
Rule 0 ammendment: Think about performance in terms of O-notation complexity and any dominating constant factors. If you don't think at that level then for some systems your solution will have to be thrown away. 
True, but sending your credentials on each request is not a good practice, even if it's encrypted. So maybe http basic auth should be used to login, but then it returns a token instead of resending the credentials.
Looks good, thanks. I saw the intro video and read a little about it, but it seems useful for really big apps or group of apps, since it is independant of the app you create, am I correct ?
Good on you, mate. Have seen managers hire programmers but get shirty when they ask for tools which increase their productivity. Your "right tool for the job" philosophy needs more adherants in this industry.
Yes, when building instrumentation or signal processing equipment that is related to the flight characteristics of the aircraft, we conform units to DO178 at an appropriate level. We have a Level C project coming up in the next few months.
Figure out the analysis you want to do with Python, then implement the analysis in Java and run it on your large data set. I've looked and tried, nothing beats Python with the libraries you mentioned for researching.
Try /r/jobs.
We are always looking for contributions to the [uniVocity-parsers framework](https://github.com/uniVocity/univocity-parsers/) it is be simple enough for people who can write good algorithms and you don't need to know a multitude of frameworks and tools to do stuff. We are looking into refactoring some portions of the code to improve performance by 25%. We already identified things that could improve in this regard. I don't know if this is of interest to you. We could help you write parsers for other text formats, or extend the functionality that is already implemented there. [uniVocity-parsers framework](https://github.com/uniVocity/univocity-parsers/) already has the [fastest CSV parser for Java](https://github.com/uniVocity/csv-parsers-comparison), but we are also looking to improve this comparison against other CSV parsers to include things such as reliability, flexibility and feature comparison. This should be easier to do. 
content marketing shitpost
yep, checkout OP's account not a single comment, only links to his articles
R has a lot of similar libraries that Python has and is probably used by more statisticians than Python. You can call R from Java through Rserve or Renjin. I've used rserve in production before. 
thanks Fhayde.
Stop spamming your website.
You are using replies wrong. You need to click the reply button under the post you are replying to.
O-notation is not about performance, it's about *efficiency*. I.e., it tells you how much work needs to be done to solve your problem. That doesn't translate directly to performance, because how quickly the hardware can perform a particular workload varies a lot. The biggest deciding factor of performance in real hardware is memory access patterns. That's why simple, inefficient, algorithms that access memory sequentially often beat more complex and efficient algorithms on real workloads. The classic example of this is bubble sort beating more efficient sorting algorithms on small inputs because it accesses the memory sequentially and only makes local modifications.
In the real world O-notation of the outer parts of your program will be the dominating factor. I've replaced O(logN) routines with O(N) routines because N is small and constant factors come in to play but that is pretty much always at the performance evaluation stage of a project. If you don't consider O-notation type effects at the start of your project you might choose a O(N) datastructure and have a persistance layer (files/db) that makes that choice hard to reverse. So I disagree - O-notation is about performance in the sense that it determines the run-time duration of your program. You're correct that there are cases where worse complexities can behave better but that's basically a rare corner-case.
Sorry its a new reddit app I haven't gotten used to it yet.
It's not a puzzler if you don't show the whole code upfront. Also, please please please stop submitting random crap like this. Not everything you see on the internet needs to be immediately submitted here.
Hi, sorry to get here late, but you expand on this, or have any links on the topic? Sounds interesting, and I'd like to read into it some more.
I find it funny that your reply acknowledging that you replied on the wrong comment, also replied on the wrong comment.
Yes, the Level C project will be in Wichita as well. We haven't picked an RTOS, and I'm not sure if we'll need one for this instrument, but I'll definitely take a look at VxWorks. I've also seen ThreadX from RTOS that looks like it might be a good candidate. Have you had any experience with ThreadX? We've already been through a Level B project, and I know exactly what you mean. We've managed to get the time down to a reasonable level by making our define/develop/document/test/verify cycles very very small. By keeping each piece extremely small (~20 lines of code), we can spin several items per day and be certified when we're done. This is a much better way than doing 40 hours of development, then working for 3 months on testing and certification. I'll post this position over to /r/jobs and depending on how that goes, will try out the /r/forhire as well. Thanks for the tip.
Ironically, we've talked about opening an office in Fairbanks simply because of the number of small commercial aircraft flying around in Alaska. You guys have nearly as many planes as cars up there. :) Good luck in your search.
This looks incredible! How much of this is made from scratch?
We are building on top of an old project called the Lobo browser. More info in the [credits](https://gngr.info/doc/credits.html). We have been chipping at it for about an year now.
Yo dawg, I heard you like replying to wrong comments...
You are absolutely right. Most people don't know how to measure though so they throw a lot of effort at what they "intuitively" believe is the problem. Most of the time pretty much any reasonable code will be fast enough. If the performance isn't there there it more than likely is some lock contention or resource contention that is grinding things to a halt. I honestly don't think the advice in the linked post is really going to apply to most people's issues. If you are creating a lot of objects how are they being initialized? Probably from reading data from an external resource. If that is the case accessing the external resource is going to be a lot slower than anything you do locally in code. So really your problem in that case isn't really memory allocation, it's IO wait.
Nice, I did not know, you can actually reference the constructor and store it in a variable Supplier&lt;Person&gt; x = Person::new
Stop spamming your website please, read [Reddits rules](http://www.reddit.com/rules/) and it's [definition of spam](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F).
I may be missing something, but the article doesn't actually explain _why_ anyone would want to do this instead of simply using an applet/web start/writing whatever they need in javascript in the first place. I mean it's somewhat interesting an all that people have thought to do this, but seemingly completely pointless.
Thanks for the tip. I was really worried trying not to reveal some parts of the code :)
Yeah its really cool actually!
Meh, that advice is only good if you don't really know where or if performance problems are likely to appear. It's terrible approach if your are writing a game engine for example because then early choices will be both crucial for performance and very hard to change. I wish this saying about premature optimization would go back to what it supposed to mean: micro optimization isn't good until late in project. Making design decisions with performance in mind is crucial from day 1 (unless you are writing something simple and unlikely to ever have performance problems)
both but i know a tiny bit of java, html, and javascript already
I was just looking at their stuff. I'm not familiar with Ruby, but hey, as the new students say, its all about how many languages you know!
Not sure about explanations for each part. But you can search open-source java projects on github and read through them.
Start (and finish) lots of pet projects. Learn to manage your program's scope ie functionality. Nobody likes a diary utility that can also post to facebook on command. School assignments will not help you write awesome code. They are not too fun either. Programming requires passion. Find a project or two and run with it.
This is very true. I just graduated from Geore Mason University in Dec moved here in January so Alaska is new to me. I told everyone I would just get my own Alaskan TV show. I will call it Alaska the Programming Frontier. The title screen will be me with a laptop and a rifle.
When comparing streams to the stuff in typical languages like haskell, I find the java is a lot more verbose, but in another way I can see how it would simplify implementation in certain respects (write the spliterator, get it all for free). 
Read lots of code.
yep yep. Im looking for a good source for programs with explenations
Same hossein761 as on GitHub. If so, hi there! :)
A [pic](http://cs.brown.edu/~spr/codebubbles/bubbles01.gif). Is interesting, i wonder if there exists a Eclipse Plugin for this.
What GUI Library are you using Swing or FX?
Can't upvote this. Flawed indentation, bad variable names, layout manipulation on main thread (no use of SwingUtilities.invokeLater). The latter might be ok as long as the window isn't visible yet, but I would not support teaching bad practice.
This is weird. It's for people who want to code, but can't keep enough stuff in their head so that they need bubbles??? I can't see it taking off. In order to be any good at programming you have to be able to think abstractly. I would suggest that the more concrete thinkers start with Scratch.
I feel like a more useful version of this software is something like www.umple.org. Doing actual code generation based on modelling. 
Keep apologizing.
Whyyyyyy.
This is the approach I usually take. But instead of loading the properties file directly from the file system, I load it from the class path. In JBoss /conf is automatically added to the class path. For Tomcat, you can edit the catalina.properties and add a directory to common.loader. This approach makes your application a little less server dependent. Also it makes using Spring's properties injection easy. With this approach I do NOT have a default in the application. I don't know which would get loaded first if you have the same filename in the app and in the server's class path. Someone else might be able to shine light on that.
It's SWT. What'd you expect?
I don't know. Except for example 3 i find the loop code way easier to read than the stream code.
It is Swing right now. Though we would like to move to JavaFX down the line.
What is with people in 2015 that can put a nice website design to promote their projects?
VisualVM
Thanks for the article. I didn't find the time/motivation to really look into Java 8, yet. Some of the features shown here seem nice, but i would like to mention that (1) the loop finding the first article matching the query tag ALSO ends immediately when the article is found. And (2) if you use a Set rather than a List when collecting the distinct tags, you will get this: public Set&lt;String&gt; getDistinctTags() { Set&lt;String&gt; result = new HashSet&lt;String&gt;(); for (Article article : articles) result.addAll(article.getTags()); return result; } ...which is less problematic, i think. Still: Good new features, they just won't make me abandon loops.
yeah but the stream api exposes clearer intent than a conventional loop. To me it's clear what a map function will do
&gt;On every request between my site and my REST API I will pass my User Access Token that I received from Facebook. If you're querying for user data you have to pass an access token. Otherwise there are some endpoints that allow you to use your own token. Each user access token has a expiration time , unless you ask for a special permission that allows you to query at any time. Sounds like everything is correct, Oauth2 is easy to implement. I'm not sure what you mean by spring security, but I think this depends if you're using Facebook login only or using a combination of both. 
The question is then, when do you use streams, and when do you use loops? Currently, I use streams whenever this is possible without writing my own complex stream manipulation functions, so when map/flatMap/filter cover what I want to do easily. I was surprised to see that indeed, I rarely ever write an explicit loop anymore. The code also looks more declarative and clearer to me, but my colleague (who knows little about streams and finds them strange and daunting) complains that he has problems reading it. So I'm not sure what to do about that, yet.
Hibernate. Why? Because there's plenty of support. Although, I am curious to others' recommendations.
JPA and some quite some experience with openJPA, Hibernate and EclipseLink as impl. Currently using EclipseLink and it's fine. JPA has some flaws I don't like for example no unified way to handle UniqueConstraintException. I think I have one or two others like it that I solve by interceptors so I can depend on impl as little as possible. Still hoping to go back to openJPA if it picks up some momentum again. I actually don't like JPA that much but it's all right. I do use http://deltaspike.apache.org/documentation/data.html and It has worked very well for us. Had some bugs being early adopter and all but now it's just great
If you know SQL well I would highly recommend not using an ORM. I recently started using http://www.jooq.org/ and I love it. Its so much easier to write the queries I want. And code generation handles all the boiler plate code. I think its a very solid mix of custom queries and not having to write boilerplate.
While configuring beans based on environment is certainly a possible use case that's not specifically what I'm asking about. To be clear I'm not really looking for a solution. My interest is in what various shops are doing and while I'm reticent to get specific on my motivations part of it is evaluating how useful the community would find some libraries and technologies we may open source. I'll try to invent a potential use case to explain the kind of situation I'm talking about. Say you have something like a file sharing service, perhaps something like Dropbox. You have a UI and you want to introduce a feature where a user can select N files and have your service deliver them to an FTP server, mail them to an address or SCP to a particular machine. So you have requirements to display a UI with documentation, variable sets of properties such as host/port/username/folder for FTP versus to/from/subject for e-mail. In a generic, somewhat high level sort of way, how do you typically handle this sort of scenario? On the UI side for example. Do you hard code in support for those specific three mechanisms (FTP,mail,SCP) or do you build a generic service that *explains* to the UI what the current capabilities are? Do you setup a single EmailService (for example) and call something along the lines of send(String to, String from, String subject, File ... files) or do you instead have something like a prototype EmailJob that you then call setTo(String to) etc. before finally executing it with send()? Obviously another use case would be you want to configure these things from a properties file, or XML, or through JNDI, or from a database, or through something like Archaius. That would be more in the devops realm, and it's entirely possible you might be building a UI, console or service targeted at administrators with similar concerns. I suppose it might be more productive if I could ask "Would you be interested in a library that did this" and gave a concrete example but I'm trying to avoid the selection bias that would introduce.
1. Favor convention over configuration. 2. Use sensible defaults where appropriate. 3. Use composition and overrides. So a typical configuration would be one where the most common conventions are assumed and defaults used where possible. If a developer environment is by far the most common target then you might set defaults that utilize a local datastore or an embedded database. These settings could be overridden through environment variables or a properties file in a location that convention dictates. What is appropriate and what order they are checked and when or how reloading takes place are all dependent on your needs. There are solutions out there that address this on some level. [Apache Commons Configuration](http://commons.apache.org/proper/commons-configuration/) provides support for composite configurations and assorted implementations. [Netflix Archaius](https://github.com/Netflix/archaius) provides a centralized service that applications can retrieve configuration from. For reasons that aren't entirely clear to me a lot of places either put minimal thought into this or end up with proprietary solutions. I've even seen environments capable of leveraging TXT entries in their DNS server so that applications can bootstrap themselves in combination with configuration service. That has been the exception however as a lot of developers seem content to toss everything into a properties file.
All this ORMs, I would really like to hear the answer to these two problems: First, how to use dates consistently with JPA? I know TemporalType, but what that does is change the date to java.sql.date which is worse that java.util.date and won't take into account the database timezone. Most of the solutions I did ended up converting the date to GMT and persisting the long representation, but that's a hack. I want true date representation and manipulation. Secondly, how do you solve the problem (in a highly concurrent system) of create if not exists, update if it does without full table locks. And "exists" is defined by its constraints (natural key), not the ID (since most of the time it has to be generated on insert anyways). The way I solved this was using the DBs MERGE command (not entitymanager.merge()). ORMs are fine, but JPA has some limitations. SQL solves these two problems in a trivial way. I'm actually curious to know your solution. 
Mybatis is free, and to me, there's no going back to "true" ORMs, once you try it.
:D
As a developer who used to evangelize about Hibernate, I too would recommend jOOQ. I don't think I will be going back to Hibernate anytime soon. Support for joins and other complex SQL operations is MUCH better in jOOQ.
iBatis, because in my firm we are masochist fucks. Also, we are now starting to use JPA and Hibernate.
Yeah. Same deal with LINQ. While C# devs rave about LINQ, I find it can make code pretty unreadable. Much better to focus on readability and performance. 
&gt; valuable Google is when you have a question. Im an accounting major who does java as a hobby and sometimes it feels like I am googling more code than I am typing. I guess there need to be something that sets the pros aside from the amateurs...
My point is Java has been commercialized and big guys like IBM, Oracle lead it to the wrong direction. Now with the non-blocking embedded http server like Undertow, it uses less resource than PHP and it indeed can complete with PHP especially working with front end Javascript framework like Angularjs. In most of the cases, there is no need for JEE not even Servlet and there is no need for deployment. 
http://www.reddit.com/r/learnprogramming http://www.reddit.com/r/learnprogramming/wiki/online http://www.reddit.com/r/Javahelp http://www.reddit.com/r/javahelp/wiki/index
The best way I would suggest is buying a starters Java book [online](http://www.amazon.com/Java-Beginners-Guide-Herbert-Schildt/dp/0071809252/ref=sr_1_1?ie=UTF8&amp;qid=1421114791&amp;sr=8-1&amp;keywords=Java). I'm taking my AP Computer Science class as well and my teacher is also pretty difficult. He goes quick so I definitely recommend trying this. Also, try [Khan Academy](https://www.khanacademy.org/computing/computer-programming/programming), [PracticeIT](http://practiceit.cs.washington.edu/), and [CodingBat](http://codingbat.com/). Ninja Edit: Grammar.
This. Two years ago i bought [Sams Teach Yourself Java in 21 Days](http://www.amazon.com/Sams-Teach-Yourself-Covering-Android/dp/0672335743/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1421115207&amp;sr=1-2&amp;keywords=sams+teach+yourself+java+7) and only read like half of it, and I know everything my APCS teacher is teaching us. Definitely recommend this if you are OK with reading a bit. Also, it really helps to practice what you learn. I got much better at Java just by coding Minecraft mods for a while. You could also just start coding random things with what you learn; who knows, you might come up with something useful!
Yeah, I used to play Minecraft. I might make some mods this weekend
Now that I think of it, I should have checked there first. Thanks a lot!
You're confusing Java with JavaEE. Java has been "commercialized" by IBM, Oracle, etc in the enterprise space? But who cares? Java has already had a lightweight app server for literally decades, Tomcat. Then came an even lighter weight servlet container, embedded Jetty, which is the basis for Dropwizard. Undertow is new, but nothing new. It's just another async embedded server like Netty and MINA. It's just another day in the Java ecosystem. The big commercial players set the standards, which are important. But Java's greatest strength has *always* been the ecosystem, which plays along with Oracle or goes counterculture, like Spring. Everybody has a place at the Java table.
This. After being burned many times by hibernate, I greatly prefer writing raw SQL. Most things only require basic SQL knowledge. Yes you'll spend a little longer writing the code, but when it comes to debugging it, you'll be able to tell exactly what is going on. Hibernate is the most widely used and its documentation is greatly lacking in a lot of areas. So unless absolutely required... I'd say don't use an ORM.
Hibernate, via GORM, when I'm in Grails. Supposedly you can use GORM outside of Grails, but I've not tried it.
File access is tricky. Some file systems do not track this, and some can have their tracking disabled so even polling file access times might not work. I don't believe there is an easy or robust solution to the problem, but you might try poking around in the Java NIO2 Watcher Service: http://docs.oracle.com/javase/tutorial/essential/io/notification.html
The issues you mentioned was the reason I was looking for another solution. Do you know of any other languages that might be better for this? I'll be checking out your link in the morning, thanks!
The "right" one depends on your needs. Hibernate is popular, supports JPA, is easy to staff for and find support for. The down side it can be quite a pain to model certain relationships and performance quite often suffers. It's not that Hibernate performs poorly, per se, however you'll find the vast majority of developers using it don't actually understand what it's doing. That results in a lot of eager loads, unnecessary joins and full table scans. In many cases the data model is relatively simple and the performance costs largely irrelevant. JPA and Hibernate make sense in this context, they're simple to learn and especially in conjunction with a library such as Spring Data remove boiler plate and trivialize persistence. For complex data models and those that require high performance or hybrid data storage solutions I'd seriously consider something like jooq.
It's not the programming language that's the issue. The operating system may simply not support what you're trying to do. Furthermore, on operating systems that *do* support this, the user may have disabled the access time feature entirely. The main reason for this is performance; updating a files metadata every time it's read can be a real bottleneck.
Streams are more compatible in parallel than loops. However, you shouldn't replace your loops with streams because "you can". 9/10 times, you should just use a loop for performance and readability.
The answer will almost certainly be very operating system dependent. For example, on Linux you might try inotify ( http://en.m.wikipedia.org/wiki/Inotify ) or FAM. Other OSes will have their own specific solutions.
Personally, the more abstraction and layer of "helpers" the more I hate it. Hibernate has so many layers of complexity I don't even understand how people think they're productive with it. Yes you're faster when developing it, but you lose that time debugging the edge cases you will encounter with hibernate. So if I'm on a project where I can chose how to access the data, I use raw SQL. Once the query is done, I use a very thin layer to map the resultset to a POJO, like spring or ibatis do.
How is it slow? I've tried IntelliJ and NetBeans and both seem "slower" than Eclipse. Where other IDEs have cluttered menus, confusing key binds and an awkward UI, Eclipse provides a comfortable environment where everything (at least what I use) makes sense. I've been using Eclipse for over 5 years and I am definitely a fan of the software but I would have designed the environment a little different. Lack of code generation key binds makes me angry. As a fast typist, I'd rather type out entire class definitions than click through the individual source gen. buttons.
That's not an ORM.
So much this. It is so frustrating to maintain complicated queries written in HQL to produce reports. Some projects have a stupid policty of HQL only and SQL is banned, even when HQL is a clear inferior choice, especially to produce reports which join dozens of tables and require all sorts of database-centric calculations. Reports in hibernate = many nested loops with calculations no one understands + extra database calls within loops to fetch more data (typically created by someone who did not consider the performance impacts of doing this)
Lack of tooling, poor documentation, can't staff for it. Last time I bothered to look the few tools available were dependent on a webdav setup. Jackrabbit in particular is full of partially implemented pieces of the "optional" specification. You can create a workspace but you can't delete one. Unless you do so directly on the file system. But that's nothing more than a mirage as the entire tree in the "deleted" workspace will reappear the second you create another workspace with the same name. Merging is a nightmare. Even if you read through some of the more detailed documentation you find simple merges don't work as advertised if at all. Jackrabbit has been corrupted through normal use more times than I care to count. It baffles me how anyone uses it in production. The indexing in particular is especially vulnerable to inconsistency. At least you don't lose data... probably. I don't remember what in particular was disgusting about versioning but I do remember running into seemingly arbitrary parts of the API that threw errors involving the phrase "not implemented". Working with the API itself is irritatingly painful. Nothing is generified, casts everywhere and little or no type safety. Schema changes... migrations... why would anyone want to do that? Add a property? I can do that says Jackrabbit. Remove a property? Fuck you, I'm JCR. Performance was off the charts bad. The query languages stink. We have an architect that wants so *very badly* for JCR work we speculate his alter ego was a spec lead but even he has given up on the idea. **All of that being said** it's entirely possible that JBoss has done quite a bit outside of the specification to make ModeShape far easier to work with. If I *had* to use JCR I absolutely would look there instead of Jackrabbit, after all many of these implementation issues are just that. However that's not going make the JCR API itself less antiquated. There are likely some very niche use cases where there isn't a good alternative for your data model. I'm not sure what those are, just about any I could think of I'd rather solve with NoSQL, SQL, Redis, Elasticsearch etc. or various combinations thereof. Given that Jackrabbit is little more than a terribad repository built on top of SQL and a virtual FS with Lucene thrown in. I shouldn't be so harsh. Obviously I've had a bad experience with it. I can't think of one good thing to say. It handles hierarchies decently well?
For simplicity, when control, performance and memory are secondary: Hibernate with JPA. Otherwise [Spring JDBC](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/jdbc.html) ^edit:format
Plain spring jdbctemplate / namedjdbctemplate , yes it is bit verbose, but once its settled, you don't need to touch that and no need to worry about any performance. 
If using ibatis makes you a masochist, then hibernate will make you a freaking martyr. Just wait before you have an unexplainable bug that makes you download its source code to debug it, spend countless hours reading logs, and write non-trivial hql stuff and wonder why the performance suddenly sucks that much.
Do you plan to do pure OO development? Then you should consider using an ORM. If you don't plan that style of development, you should do yourself a favor and look at other frameworks that makes it easier to work with the database. (Like jOOQ, Spring JDBC or something else). If you do plan to use Hibernate or JPA, make sure you study them well. Maybe consider taking a certification course - I did and I was surprised of how much I learned even after using Hibernate for years. If you embrace pure OO development and swallow the pill, you can make beautiful applications that is more or less just plain Java and you might not even think of them as a database application. To do this you must use the relationship between your objects and let the logic stay in your code and not in queries. By this I mean that you should avoid JQL/HQL as much as possible.
I would suggest that you might want to reformulate your problem. Looking at file access is tricky. perhaps you can accomplish your goal without looking at this file. if it's a specific program running, you might have better luck with looking into it's memory space and watching what happens there.
Having worked on a project where most of the queries consisted of stuff like: insert into table_1 (col1, col2, col3, ...) values (1, 2, 3, ...) select col1, col2, col3, ... from table_1 [optional where clause] update table_1 set col1 = 1, col2 = 2, col3 = 3, ... [optional where clause] delete from table_1 [optional where clause] It would drive me insane to have to write out those for *every single table*. JPA/Hibernate/etc combined with Spring Data seems like it would be ideal for this sort of thing, and then use JDBC/Spring JDBC/jOOQ/iBatis/etc for anything more complex than basic CRUD queries. Ideally there would be a very straight-forward ORM out there for doing CRUD queries, and you could link that up with one of the other projects for doing more complex queries.
Why an ORM for input? You should have small root aggregates and relations between root aggregates are a no-go anyway. Might as well use Mongo for both? 
Mybatis (possibly jooq) can generate all CRUD queries/class mappings for every single table in your model (along with a table-specific, type-safe criteria API), using database introspection. So if this is your only need you don't even write a single line of SQL.
Ah to witness the first realization that computers are not capable of doing *anything* one can imagine. It can eitber be tbe begiining or end of a hacking career.
Sort of:) JEE is a joke and money grabber.
File access times are not very reliable (can be disabled), and the way they work are file system/operating system/OS configuration dependent. What are you trying to do exactly? Do you need to monitor access by a single specific program? Can you modify that problem or does it have a plugin to notify you what it is playing or can such plugin be written? Alternatively, can your software provide data to that program? Can you run a HTTP server or feed data via named pipes or via network share? TL;DR: We need to know more about your use case to be able to advice. The thing you are trying to do is not possible to implement 100% reliably because of operating system/filesystem issues, so I would look for another way. --Coder
For simple apps, you can use [OrmLite](http://ormlite.com/). It's an insanely simple, anotation driven framework.
fair but at the same time i cannot use it at work then since we are purely all oracle and I could not get good enough reasoning to get management interested in payment for a db querying mechanism; and if other teams would get on board with using it...we'd literally pay enormous amounts of money to have simply a slightly better way to get data from our db to which we already have free alternatives (yes not as good as jooq but still..). for each of our applications we have 4-5 environments...(per workstation and year) that is a shit load of money no? Not to mention developer workstations? These pricing plans seem unreasonable.. :( but maybe I'm missing something.
Thank you, I'll take this into consideration
I wasn't think about the idea that the file might not be accessed when the file is loaded, thanks for that. As for your first two bullets, I don't have access to either. For your third, would this be inefficient to constantly monitor? Would muting the volume break the program?
Simplest answer I can think of is RMI. Launch rmiregistry and then a simple RMI console application which provides the password (you can make that app read standard in.) In your webapp startup have it connect to the exposed RMI interface and call your "getPassword()" or equivalent. You could also make a simple admin web page in your webapp which exists solely for you to access and bootstrap the password. 
I've used it for Android. It's actually very nice. 
I have a practice book from the class if you want. The only thing that i wrote in it was my name.
Everybody is hating on orms, but they are just an abstraction/tool that you have to understand. You can't just use it like some magical sack of objects you pull from. You have to deeply understand sql and your particular table structure. If you have control over the database you can map things very simply and consistently. When I have this control available I run into few problems. In my experience the most important thing is having each table have one synthetic primary key, and using it for all your joins. Just turn on the sql logging when implementing something new, and make sure it's doing what you expect. Then, if you have some sort of report view, or a view that requires 4 different entities, write a specific query for that however you wish. Jpql/Hql works great and in IntelliJ at least the syntax highlighting/ auto complete is great. You can write native queries too if need be. If you are dealing with a pre-existing database where people have gotten clever with compound natural primary keys and other things, that is where the benefits start to slide. Hibernate especially has support for all sorts of weird situations, but it will get unruly fast. 
You could attempt to hook into the Sound DAC and see if it can notify you when a sound is being played. This is probably far more trouble than it's worth unless you are only going to run this on one environment. In Windows, you can use the Microsoft DLLs and a Java bridge to pull more system information. If there is a microphone attached, you could listen for the sound to be played, but this is probably even more error prone than checking access times.
If you look at JOOQ's code generation they have an option to auto generate a POJO per object (mutable or immutable). There is also an option to auto generate Dao Objects for all tables with a primary key. The dao objects are built to have insert / update / delete, fetchById, fetchBy(any single field), insert many (automatically uses the batch api under the hood). So all of this exists in JOOQ you just need to turn it on. your example becomes. ThingDao dao = new ThingDao(); dao.insert(new Thing(col1, col2, col3)); List&lt;Thing&gt; things = dao.fetchByCol2("blah"); Thing thing = dao.fetchOneByCol2("blah"); This assumes you have a table named thing with 3 columns. Everything above would be auto generated and work out of the box.
&gt; But maybe I'm missing something Yes, I believe you're mostly missing the fact that only *developer* workstations need licenses. All *server* or *build* workstations are licensed automatically with no strings attached. Many of our customers have only bought 2-3 licenses. they're even floating licenses, in case you need to use them in different teams. So, I think you will not really pay a shit load of money, but I'm pretty sure you'll get a shit load of ROI! Pardon my French :) (disclaimer: I work for Data Geekery / jOOQ)
Not possible. Focus on teaching oo alone and what a variable is and what a class is. Point to sites for further self study
I would start by saying it depends on your requirement. If you need type safety then Jooq or query dsl. If you need perf manual jdbc or spring jdbc + manual mapper/roma/simpleflatmapper. you could also use jooq to generate the query + spring jdbc to execute the generate sql + roma or simpleflatmapper. you then have max perf and type safety for select. If you want to have the full lifecycle and complex object graphs and don't care about type safety then JPA. mybatis/ibatis is slower that hibernate and I find the wrapping of jdbc more of a constraint that anything else. 
If you are ok with having the password in cleartext in your tomcat configuration, you could use a container-managed-resource (containing the password). If you are not ok with having the password in cleartext in your tomcat configuration, you'll probably need to step up your system's security in any event.
Thank you! I'll definitely use those.
This is really helpful. Thank you!
Tell me about it. But that's what you get when the organizing commitee only has electronics majors. I'm just going to have to cut the writing-your-own-code part of the seminar.
Don't know what's the problem with the author, but the fact that he cropped out the "Frames" window seems suspicious. You know, the Frame window where you can go up on frames and see their scopes? Yep, right from the window with current frame variables. When I put the code OP provided, I can see the list variables in both forEach() frame and run() frame. Duh, of course you can't see the list in lambda scope, because that's just a function. You know, like if you would use a named function and you would'not see the list as well, because it would out of scope.
No, it's just that joins and "complex sql operations" in hibernate isn't well understood. Which is a shame, since it's just a matter of spending an afternoon learning the syntax and second-level cache interactions. 
When explaining OOP concepts, give real-world examples that are actually used in programming, i.e. not the old 'Vehicles-&gt;Auto/Truck' explanation for inheritance, but rather more like 'BankAccount-&gt;Checking/Savings'
I think you have never had to get a deep into the weeds as I have. The devs themselves have told me that Hibernate cannot do several things I have tried to do with joins and unions and other..
I'd say briefly touch upon what OOP is, how it differs from non-OOP programming, and briefly explain some of the core concepts. That is, assuming, that they just want you to explain OOP and not programming as a whole.
That's the problem. One hour is not enough to teach all the concepts and implement them as well. And doing a simple program would defeat the purpose as it wouldn't really implement concepts like inheritence.
Yeah, this was one of the first classes in my highschool compsci class. I think my teacher used animals as an example. (Animal as the super then various animals as the children classes).
I am curious: What would you think of introducing OOP by doing this? struct Circle { double x, y, radius; void (*draw)(Canvas*); bool (*inside)(double, double); }; Where it brings the functions inside the struct that they would already have known about from regular C style.
Wonderful, so when can we welcome you on board? :) Well, the mistake is at our side. It looks as though we must take measures to make this model more clear. You're absolutely right. If it had been the way you had understood it, the pricing model would be completely insane. It's good to have seen your comment as a reminder.
for time use joda, it has a de/serializer for hibernate. http://www.joda.org/joda-time-hibernate/userguide.html for the second: you should be using transactions (not table locks). for saving/merging: hibernate has a saveOrUpdate() method that take care of this (if i understand your question correctly). ps. i'm not a hibernate expert, and i'm still not convinced it's a good idea at all (i avoid it when possible). 
Basic things, declaration, the main method, output statements, if you can decision statements.
How come it's not considered an ORM if it turns your schemas into objects?
Yeah. It is hard for anyone without any knowledge about oo to get its context in 1 hour. I also would concentrate on java or oo principles
I doubt an hour would be enough to get most people doing more than print "Hello world" - would it be inspiring? An idea might be have an application where they can "hack it" - i.e. make some small changes you suggest as you introduce a few ideas but they can easily adjust the parameters to make them feel more in control.
I'm old now and don't remember exactly why, but I still remember when I first learned about polymorphism. It blew my mind at the time. Now, about 20 years later it seems utterly obvious and trivial to me, but at the time I found it very exciting. If you work up to it right, it should excite a few young minds. What is still interesting to me is the way that polymorphism is implemented at a basic level. The way that objects are laid out in memory so that code that receives the objects is able to call the appropriate methods without knowing the type at compile time. It's really quite elegant. If you want to get into the details, that would probably be very impressive. BTW, the whole polymorphism shapes example is a bit trivial (although it's the standard example used when explaining the topic). I suspect animals or people would be more interesting. EDIT: I just noticed that you have a grand total of one hour to teach this stuff. That's pretty ambitious. I guess you'll have to stick to the simplest stuff.
care to explain your "wtf"?
Stop spamming your website please, read [Reddits rules](http://www.reddit.com/rules/) and it's [definition of spam](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F). 98% of your 55 submissions are from your blog… 
eh, zookeeper is good for coordination and work distribution, not so good as a config engine. etcd is far better. 
Why not?
That's not the point at all. Databases have time zones that are not necessarily the same as your webserver one (especially in distributed systems with geological redundancy). If you want to check if a date is between two others, there is no way to use the server variables (ex: db2 has a current_timezone variable that you can use for date manipulation and to convert dates to the correct timezones). JPA does not support this, as far as I know. And joda is cool. I also use Gregorian calendar. The second question shows how little you understand about this particular limitation. If you have two concurrent container managed threads you will check if the object exists, and in the context of that thread before the commit, neither thread will find our object and both will attempt to create it. One will fail with an entity exists exception. There is a way. You can lock the table via jpa (at least in openjpa) but that is highly inneficient. I asked my questions with genuine curiosity, there was no need to be flippant. 
It was just added in 14. Feature called [scratch files] (http://blog.jetbrains.com/idea/2014/09/intellij-idea-14-eap-138-2210-brings-scratch-files-and-better-mercurial-integration/).
Welcome into the light. 
I am storing the password encrypted in memory. I am trying to protect the system as much as possible with the assumption that an attacker has gained privileged user status.
I might try this solution. As Eclipse has no problem binding stdin to it's custom Console window, I was hoping a simple Tomcat configuration would be possible...
I am trying to protect as much as possible working with the assumption that an attacker at some point attains privileged user status.
Only an hour? I would stick to basic OOP principles. I would personally go with a `Zoo` project presentation. You can have a `Animal` class, and then have `Lion`, `Lizard`, `Giraffe` etc. You could explain overriding, overloading, inheritance as well as mention other stuff. I would cover who uses it in the industry as well, and why they use.
Why switching?
Encrypted in memory using what key? Where is that key stored?
Customized version of https://sourceforge.net/projects/javasecurestr/
Perhaps I'm missing something, but you're sending in a password of "password" in those examples and not "admin" or "adminpmc" as is configured in your example tomcat-users.xml snippets.
I messed up when pasting it in here. The password is password.
Interesting, I haven't seen that before. I doubt that would thwart a determined attacker, but it's certainly better than nothing. So yeah, I would probably go with the admin/startup page, or /u/FatboyFitz's RMI suggestion. Just remember to keep those passwords in char[]s, not Strings, and overwrite them.
I used to do this same thing. Now I use Cucumber-JVM to describe my tests at every layer of the application. 
How about an XML parser that records offset and length of all tags/attributes? I recall wanting to use something like that being unable to find any implementations online. I imagine you'd want to decorate an existing parser. Depending on your definition of 'junior developer', I could see this taking a few weeks to create. Too easy? How about a Java source code obfuscator? It could accept [Java] source code and output valid code with arbitrary identifiers and no comments. Maybe use ANTLR. Or perhaps an IMDB-based recommendation engine for groups of people? It could lookup rating histories for a collection of n users and then recommend a movie that no one has seen but everyone is likely to enjoy. Or how about an app to make teams? It could accept a set of players with arbitrary attributes that are relevant to some team competition (gender, height, weight, age, etc.). App could then spit out 'fair' teams with maximum diversity.
..But I use Vehicle classes...
www.codingbat.com has some great questions that you can solve in your browser.
404?
I would go for embeded device (Raspberry Pi) with some fancy device (flashing LEDs or something) to just show how easy it is to start with it and how much fun you can have.
I have a little to no experience in java from a course i took in high school and right now im re learning everything with this awesome book named Head First Java, give it a try and see if you like it!
Ah. ok, most of my experience will be useless then. I've been on the web service / app side for all my Java experience and I also am interested in the app end of things.
I like you.
Likely not, the compiler probably takes care of it. Even if it didn't method access is basically free.
Check out the "Display" view as described here: http://stackoverflow.com/questions/4499944/how-to-use-eclipses-display-view-for-debug I don't think it's as nice as the IntelliJ feature, but perhaps it's more to your liking than the "Expressions" view.
Switched to a very attractive job at a large company. Only thing is, they use complete IBM stack, including the rad (IBM eclipse). So not my choice sadly, but I do see the benefits of having a complete suite from the same vendor
Underscore beats camelcase after a couple of words
Good thing that i'm already doing that then ... I also use JBehave that is a nice addition when you want your analysts to write your test and you write its implementation
Ditto
Stepwise refinement, ie breaking a problem down until it is something you know how to do. 
No, it wasn't. Because those can not execute code. At least, they don't have proper code highlighting - could someone correct me, please, if they can indeed execute code? Because I'm pretty sure that my experiments with them a month ago showed that they can't. https://www.reddit.com/r/IntelliJIDEA/comments/2mqn8r/what_are_intellij_14s_scratch_files_actually_good/
Congrats at the job, but be prepared for a potential world of...well, not pain, but frustration. Things may have improved in the past year or so, but RAD was always somewhat unstable (it'd typically crash a couple of times a week for me). Plus WebSphere is/was still stuck in the giant monolithic app server camp - again things may have improved (I believe 8.5 was a step in the right direction) so hopefully you're not running in an old stack. On the bright side, Notes and Domino are nice enough these days.
I also like, test_that_x_does_y, ie full sentences ...
i think you're making things much more complicated than they have to be. about the dates: it sounds like you want to store dates with no timezone information, use different timezones on different components, and of all places the object relational mapper should figure this out. why not simplify your setup? about the second question: if you have a practical situation where this can actually occur, anyways. if this is really a problem, why check in the first place? just create the thing without checking, if you get an exception you catch it and react accordingly.
&gt; the job, but be prepared for a potential world of...w To quote Ash from Alien: You have my sympathies. I know IBM liberty have been making a big push saying how great it is, however the pain I've suffered from IBM products has left me eternally skeptical. WSAD 5, then RAD 6 and 7, expensive plugins for eclipse to the worst developer app server. *rant concludes* 
I came across that comparison a week or so ago and wondered how much, if anything, has changed since it was written
This might not be much help, but I would focus on the concepts behind OOP instead of anything to "techy". In one hour you are not going to "teach" anyone OOP from scratch, but you might be able to introduce them to the concepts behind OOP and give them some examples of the kind of problems that it might solve, like inheritance and polymorphism.
Value types are actually scheduled for Java 10 (but they are, indeed, doing them right).
Spending a few moments getting Eclipse or IntelliJ installed is worth it. Too many classes suggest that you use notepad and compile by hand, hehe.
It is always pass-by-value; but with the addition that non-plain variables can _only_ be references. If you're from a C++ background -- all objects are created on the heap, and every (non-plain) variable is a "pointer-to" type automatically. The following has no Java equivalent: void func(MyObject &amp;reference, MyObject byvalue) All you've got is the equivalent of: void func(MyObject *reference) But obviously in Java, there's no "*" necessary.
Link is 404ing. Here's a [cached copy](http://webcache.googleusercontent.com/search?q=cache:MIOylfy60Q4J:www.mikedeluna.com/junit-tests-that-read-like-documentation/+&amp;cd=1&amp;hl=en&amp;ct=clnk&amp;gl=us)
I don't really have any specific use for it right now, but iterating through data is exactly what I was wondering about. My current job (paid internship) has me looking into QTP and VBscript for automating client side stuff, and I wanted to experiment similarly with web apps, but I want to continue with java in whatever time I have. Why is Cucumber your tool of choice? Thanks for the reply btw.
Yep.. Eclipse is actually really good, (I have been using it for years and years now).
And some of the best run on the JVM, making them more or less the backwards-compatibility-breaking Java people are asking for.
oh okay. if i understand it right, my nomenclature would indicate 'test the moviefinder', which could be a random class, while yours would indicate 'a moviefinder test'?
Is it me or is the article not correct (or just very confusing) ? &gt;If Java is pass-by-reference then the student should be pointing to the &gt;Student with name Jerry. &gt;**But the very next line prints Jerry**. That means Java is actually pass-by-value. anyStudent was actually passed value of student not reference. So any change in anyStudent did not reflect back in main method. So the quote says the 'next line' in the main method prints 'Jerry'. But the code comment says it prints 'Tom' System.out.println(student.getName()); // Prints Tom modifyStudent(student); System.out.println(student.getName()); // Prints Tom So... if you are new in Java, and you read this article, it must be quite confusing!
I'm curious about final syntax. This certainly represents potentially significant performance gains, but I can't imagine a syntax that doesn't make my eyes bleed.
Actually no. Object parameters are still pass by value. The value that is passed is a reference. Subtle, but Java is always pass by value. Think of it this way - if you can't change which object the parameter points to, it is not a reference.
How does it support Target Platforms? 
Sounds like that recent AskReddit thread: http://www.reddit.com/r/AskReddit/comments/2sbr2m/in_1_hour_every_single_human_being_in_the_entire/
Whenever you use a class in a file, you need to import it.
If everything is pass-by-value, how do you pass an object by value? When I try passing an object to a method, if the method changes the contents of the object, those changes are visible to the caller. class Stuff {public int x;} void changeStuff(Stuff s) { s.x++; } In C, when I pass a struct by value, the changes are not visible: typedef struct {int x;} Stuff; void changeStuff(Stuff s) { s.x++; } (edit:formatting) 
I'm guessing that it comes down to the fact that input/update doesn't involve joins, caching, unexpectedly greedy/eager/large queries. SQL INSERT/UPDATE/DELETE are single-table statements. So an ORM can probably efficiently reason about a large object graph serialization...I'm not saying optimally, but it's better at it. SELECTs in ORMs can result in gigantic, expensive, memory/heap-wasting transfers of data that often don't use proper queries and can't be index-tuned/optimized. 
As mentioned above, in Java, objects are always a pointer type. So this java code: public void changeStuff(Stuff s) {...} public static void main(String... args) { Stuff s = new Stuff(); changeStuff(s); } is equivalent to the following c++ code: void changeStuff(Stuff* s) {...} static int main(char** args) { Stuff* s = new Stuff(); changeStuff(s); } 
In Java and similar languages, it is generally agreed-upon terminology that objects are passed by reference and primitives by value. In contrast to C# in which classes are passed by reference and structs/primitives are by value. Passing by value implies that the object is copied and, therefore, any modifications are done only to the local copy. Passing by reference implies that any modifications to the object are retained in the calling scope. Reference in C++ has a different connotation than in Java/C# and as such does not apply to this topic. There is no need to confuse people.
So, in Java, there is no way to pass an object by value? 
When I worked at a big company that used those tools I just ran both and switched to IntelliJ to do actual work. WSAD didn't really provide anything useful.
No built-in way certainly. You could technically pass by value if you use a copy constructor or equivalent and pass the new object that creates. This is not usually done, however, as the act of copying an object is considered expensive and unless you know the internals of the object, you don't know if it will be a deep or shallow copy.
You pass the pointer's value. You can't pass an Objects's value only by using his pointer only. You need to create a copy of the passed in Object and operate using copy's reference if you want remain the original object unchanged.
You just need to write a lambda expression that implements the Function interface Function&lt;Integer, Integer&gt; f = (x) -&gt; 2*x;
CyberCoders and Indeed 
what city are looking to move to or stay in?
Talking about pass-by-reference vs pass-by-value is kind of pointless as this is not a ubiquitous concept and the meanings vary slightly between programming languages. All that matters are the semantics in a particular language, there really is no point to ever say 'pass-by-value' or 'pass-by-reference'. Typically 'pass-by-value' means you create a copy of an object and pass it to the function - if you modify this object in the function then it will be only this copy that you modify and not the original object. Whereas 'pass-by-reference' means you pass a 'reference' to the original object and any modification will modify the object the reference is referencing. Essentially 'pass-by-value' and 'pass-by-reference' do not have the same meaning in C++ and Java. People in here saying that Java is always pass-by-value but the value passed is a reference don't understand that these are implementation details of a pass-by-reference strategy. If this is way you want to talk about it you might as well say its 'pass-by-banana' and then define what that means as whatever.
I'm in Chicago, and have no plans on moving. Which makes it more perplexing that Austin, Texas wants to hire me. Seems all my offers come from there. 
Thanks. Do you know how accurate Indeed's salary estimator is? It's the best salary estimator I've found, and the methodology behind the numbers seem good. But I don't know if I just want to believe it because it gives high numbers for things I'm interested in, ha. 
Bad news: It's all for horrible, terrible web-based shit that uses JEE or similar libraries that distort Java so badly you'll feel like you're writing COBOL. Oh, and it's not *new* code development. They're finally realizing how badly the outsourced non-english-speaking code they got was, and now they're going to dump it all on you and expect you to undo a decade of the worst shit ever typed... in two weeks.
These kind of questions are better suited for /r/javahelp, as pointed out by the sidebar and the big hover-text when submitting.
It occurred to me that the important thing is that the value, whether a value or a reference, is copied to a new memory location. In C the value is copied to the stack. Java may do the same. In any event, if the called routine changes what is in that (new) memory location, it doesn't affect the caller's value as he still has his own copy.
care to explain your "care to explain your "wtf"?"?
Sure. I'm curious as to why /u/pilas2000 felt the need to utter a "WTF", or rather what specific part caused it. On it's own it's a pretty useless comment to make. Hence my question for an explanation - otherwise I'd just downvote it as it contributes nothing to the comments at all.
Pay me enough and give me a relatively stress free work environment and I don't care if you put me on a 15 year old legacy project really.
I believe there is a setting on there that makes you more visible to recruits. 
I'm with you on this, but I'm still in college and would just be happy to have a job once I graduate.
Aren't these two the same thing with the only difference being that one doesn't require you to use the "address of" operator? I'm assuming passing something by reference just passes a pointer that's automatically dereferenced for you. I just want to clear this up for myself (I don't use C++ much). void func(MyObject &amp;reference) and void func(MyObject *reference) 
You already know more about Indeed's salary estimator than I do lol. Coworkers at my past internship referred me to those sites.
Using cucumber for unit tests seems mind blowing to some people, but it seemed really natural for one of our projects. That + Swagger gives us a very nice toolchain. 
You can use a "given" scenario to load data from the SQL/Excel... something like "Given data from some-contracts.xls." You know you have to write the cucumber backing scripts.. you can really do anything you want back there. 
Austin is desperate for tech talent. Their problem is being in texas. And no, Austin is not that cool. It may be hip for people from Nebraska or Oklahoma, but if you're coming from a good city, it's a major letdown. 
The difference is the effect it can have on the caller. MyObject o1 = new MyObject(1); func(o1); In the first case, inside func(), what object o1 actually points to in the calling code can be changed, in the second, the only effect you can have on the caller is through side effects of changing inner fields of the object passed in. That's pretty much the definitive example that proves pass by value / pass by reference, any side effects you have on an object because you got passed a reference or a value are irrelevant, you can't change what the variable that passed in actually referred to.
&gt; Objects are not passed. References are passed by value. Also called pass-by-reference. The semantics of a language are always described from the programming language point of view, not the underlying implementation point of view. There is no such thing as pointers or references in Java.
I've got a ton of history with not only Java, but also QTP+VBScript (although I haven't touched QTP since 2007) Generally I like Cucumber mainly because it fills a very real need I see in the testing/QA industry. One of the most common issues with testing is folks asking "What are you testing? What are your tests doing?". With cucumber, I just point them to the feature files or the reports in our build system (Jenkins). Also, I've done Cucumber in a few languages and while it behaves slightly differently in each language, its basic functionality is the same. Its the devil I know, which I prefer to the devil I don't know. I've played around with others, like JBehave, but I usually circle back to Cucumber.
As a person who writes both COBOL and JavaEE software. Wut?
There is nothing quite as infuriating as reading double-escaped code-samples.
&gt; Also called pass-by-reference. By people who don't know what they're talking about. &gt; Some people will say incorrectly that objects in Java are "pass by reference." The term pass by reference properly means that when an argument is passed to a function, the invoked function gets a reference to the original value, not a copy of its value. -- James Gosling It was true then and it's still true now. The term "reference" in the context of "pass by reference" does not mean the same thing as the *type* of the same name in Java. When we talk about pass by reference we're talking about an evaluation strategy. It has meaning that pre-dates Java as a language.
I happy for you. Really, I am. I'm glad someone's getting work that doesn't suck. But I think you're the exception rather than the rule.
You shouldn't have a problem really, if you have any talent. I graduated four years ago with a liberal arts degree (Philosophy) and a CS minor. I found a job before I graduated and now I am a senior software engineer at that same company with a six figure salary, a reasonable bonus and vesting stock options. 
This might help you. http://en.wikipedia.org/wiki/Evaluation_strategy Please keep in mind that a "reference" in Java has *no relationship* to the term "reference" in the context of pass-by-reference. They're the same words with entirely different meanings. In Java it's a type, the *mechanism* by which that type is *passed* is an entirely separate discussion. If Gosling et al had chosen to call it an "address" or something other than "reference" it would have made this entire discussion a lot less confusing.
thanks, it should be fixed! Sorry for an infuriation that occurred.
The last 2 companies I've been did consulting and nearly all our clients needed greenfield java projects. Never JEE.
 synchronized (tables.get(table.getId())) { List&lt;Player&gt; tablePlayers = tables.get(table.getId()); if (tablePlayers.size() &lt; 9) { tablePlayers.add(player); } } List&lt;Player&gt; tablePlayers = tables.get(table.getId()); synchronized (tablePlayers) { if (tablePlayers.size() &lt; 9) { tablePlayers.add(player); } } Aren't this two examples basically the same? They both use the object returned from tables.get to lock.
Unlike .net LOL! But you notice that they have to mention it to keep the Microsoft funding.
I have coworkers that read Javit, and given I already mentioned my major/minor which they know, I don't want to say which school it was since that would make inferring who I am pretty easy for them and I could end up making for some awkward coffee refill meetings after I posted my compensation... But fwiw, It's a small liberal arts college that does not have a particularly great CS department, nor is it a world-renowned liberal arts college either (hovering right around ~100 in the U.S. News rankings).
what language, couldnt have been java
Since whatever changes I make to a parameter object's members from within a function are reflected in the heap and therefore visible to the caller, I agree that this is the easiest way to think about it. You just have to remember that changes made to the passed reference itself aren't visible outside the function.
Programming is about usability or we'd all be writing in assembly. Neat code *should be* expected. 
That is such bullshit. Java is one of the few languages that enforces code organization. What you said is completely false.
Go read [Clean Code: A Handbook of Agile Software Craftsmanship](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?ie=UTF8&amp;qid=1421286987&amp;sr=8-1&amp;keywords=Clean+Code) and write beautiful code yourself.
I've had no sleep, NO SLEEP!!
I was going to argue what you've just said 'cos it does feel like people are overly concerned with splitting hairs instead of conveying information. However ... looks like Wikipedia disambiguates this by using the term call-by-sharing: http://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing So we're all wrong! Heh heh.
I don't want to toot my own horn and say I have talent, but I'm definitely a lot better at picking new things up than fellow classmates. CS has just always made sense in my head for some reason.
Cool, thanks for the reply.
/r/shittyprogramming
My code is so ugly. I wish I could write neat code. 
&gt; When you say 'we are passing a reference by value' you ARE talking about a type. You say this as if it contradicts my statement. It does not. The word "reference" in "pass-by-reference" is not a type. The word "reference" in "passes references by value" is a type. They are two different contexts and have two different meanings. &gt; There is no 'reference' type in Java. Period. Except for you know the type... that is called reference... &gt; There are two kinds of types in the Java programming language: primitive types (§4.2) and reference types (§4.3). The *Java Language Specification* disagrees with you. Perhaps you should [read it](http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html). When you talk about references in Java you are talking about exactly that. References. Defined by the JLS, as a type. &gt; Yes, passing a 'pointer/reference' by value (where you don't treat with the reference/pointer explicitly, ie with special semantics and syntax) is the same as 'passing by reference'. Clearly you don't understand evaluation strategies. Call by value and call by reference *ARE NOT THE SAME THING* and if you can't grasp the difference you lack the fundamental CS 101 needed to even bother having an intelligent conversation with. There are no special semantics. It's a type, it's passed by value. &gt; Which is my point, yet you are using a Java-specific meaning of pass-by-value which is nonsense outside of java. What do you *believe* "pass-by-value" as a mechanism *means*? Either you believe in pass-by-value the argument value is not copied, or you believe this is not what Java does. In either case you're wrong. It's not an implementation detail either, it's specified at the language level. &gt; Yeah... this is how Java works, when you invoke a function that accepts an object, under the hood the function receives a reference to the original object, not a copy of the object. The object is not passed. The value is copied. That the type is called a "reference" has absolutely no relationship or bearing on the passing mechanism. And yes, it is a type, go read the JLS. Seriously, this is embarrassing. &gt; Maybe in several years when you actually understand what you are saying instead of blindly repeating shit you don't understand that others say you will feel embarrassed about this. Yeah that's likely. You might want to actually learn what the hell you're talking about before your next reply.
If $35 is expensive... I'm not sure what you're trying to do? Generally if I need hosting for something it's certainly worth that price. If it's small and for development only have you considered a VM on your desktop or laptop?
Yeah, that was the other option. Thanks so much for your input
It depends on the company, and the team, and the role. That applies to most languages. Applets are rare, does anyone still build those? It's primarily middleware, mobile development and back ends for enterprise sites that need to scale with an occasional desktop application thrown in.
That's pretty much been my experience as well. The fun of the Java really comes from what you're doing - at my last work it was distributed telephony so there was a lot of advanced middleware, at my current job the middleware has thus far been significantly more boring.
&gt; The word "reference" in "pass-by-reference" is not a type. The word "reference" in "passes references by value" is a type. They are two different contexts and have two different meanings. No they don't. There is a reason the same word is used and that reason is because it describes the same semantics in both cases. &gt; The Java Language Specification disagrees with you. Perhaps you should read it. When you talk about references in Java you are talking about exactly that. References. Defined by the JLS, as a type. HAHAHAA. It's talking about KINDS or 'META-TYPES' not TYPES, you would know this if you knew any serious CS whatsoever. Educate yourself please: http://en.wikipedia.org/wiki/Kind_%28type_theory%29 &gt; There are two **kinds** of types in the Java programming language lol... &gt; Except for you know the type... that is called reference... Except this is not a reference type in the way you are using the word... you seem to lack basic Java knowledge as well and just googling things that seem to fit your argument without understanding what they are. The java.lang.ref.Reference type is used for maintaining references (ie reference counts) that are used for garbage collection. &gt; Clearly you don't understand evaluation strategies. Call by value and call by reference ARE NOT THE SAME THING and if you can't grasp the difference you lack the fundamental CS 101 needed to even bother having an intelligent conversation with. There are no special semantics. It's a type, it's passed by value. I didn''t say they are the same thing. But I guess you're frantically trying to find a way to mangle my words for lack of any serious argument to support the bullshit you spew. &gt; Either you believe in pass-by-value the argument value is not copied, or you believe this is not what Java does. Wait you think Java objects are copied when passed to a function? Go read a Java tutorial at least lol. &gt; The object is not passed. &gt; The value is copied. A reference is passed as in 'pass-by-reference'. The object is not copied. &gt; That the type is called a "reference" has absolutely no relationship or bearing on the passing mechanism. It's not a type. It's a meta-type or a 'kind' that represents a reference. And yes it absolutely does have a bearing on the 'passing mechanism'. The 'java.lang.ref.Reference' is not what we are talking about nor is it the 'reference type' of types that your link is talking about either, I mean its so laughably obvious you just googled shit you have absolutely no understanding of. LOL. God, you are one funny retard. 
If I'm being asked this question I would gladly fail.
Unless you work for a startup with no customers, you will never spend all your time just writing new features. 
Look into openJDK standard libraries. Pretty much any popular framework that's opensourced. Android is pretty neat when you get the hang of the patterns. 99% of "neatness" comes from good design. The IDE + Lint will do the rest for you (indentation, removing unused variables, even warnings about various code smells). 
At this point I'm not sure if you're trolling or really this stupid.
Well if you want to modify an object either use setters or return the newly created object.
Ctrl-Shift-I ("Inspect") will open a quick view containing the result of the selected expression in the currently debugged scope.
I just like the incredible neatness of this program entry code. It's probably completely normal to most of you, but it's the only thing I could think of. public class Main { public static void main(final String[] args) { SwingUtilities.invokeLater(Main::new); } private Main() { // Program execution starts here, right away on the AWT thread. // Final fields can be set without problem even though program start (which is usually just "static main"). } }
What if modifyStudent calls student.setName("Jerry"). OMG! Now it's pass-by-reference ...
http://h14s.p5r.org/2012/09/0x5f3759df.html
Everyone except reddit.
Exactly!
that's funny, storing it as a char array and creating a new instance on every request.
Of course. And if the moon is flat, I can cry molten gold. What's your point? 
Semantics baby.
To OP, if you like some piece of code, save a link and share it. Reddit is about sharing ( even if the link is within reddit - recursive reddit ) Also check out David Flanagan's Java Examples in a nutshell. I liked his approach to coding. But nothing beats the JDK source code. ( This is true for picking up idioms for almost all programming languages )
You can also get the book as a series of videos but it's not as good. We set aside time on Fridays to watch a few at work so they are good for group settings.
&gt; Android is pretty neat when you get the hang of the patterns. Android is what happens when C++ programmers write Java for the first time. It's all kinds on unidiomatic ugliness and at the same time over engineered and poorly engineered. It's strange since Google also has great piece of Java in the Guava libraries.
In my environment we build web-based solutions for enterprises and government departments. This involves Java servlets to access databases and present the data to users for querying or updating. At the moment I am working on a project using JSF and JPA running on Tomcat to maintain a PostgreSQL database. 
That's really interesting, thank you for that. I've just been seeing this as a source of a lot of memory being created in a system with lots of threads that is just waiting idle.
What the fuck?
Your name?
I glance at that marvellous piece of code once every month or so. Everytime it amazes me.
Where does the 4% number come from? Did you make it up? In reality I'd say that number is MUCH MUCH higher. Many sites that somewhat ignorant people think are PHP (like Facebook), are actually mostly in Java, with just a tiny proportion (usual the view templates) in PHP. Tiobe (http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html) puts PHP at 3.8% while Java is at 15.5%, over 4 times as much. In reality nearly all major sites (Facebook, Twitter, ebay, Amazon, etc) have large parts of their backends written in Java. Tons and tons of all kinds of web services that sites use to display their content, banner adds, do payments, and what have you, are in Java. Counting per page view where Java is involved over all sites, I wouldn't be surprised if Java dwarfs PHP. PHP was and still is traditionally used by a lot of tiny 3 page "Joe's hamburgers from around the corner" type of sites, but most sites that are more serious than that stay clear from it and use Java, C#, Scala, Python or something else. (the number of commercial/professional sites using C# is also much higher than what you may think when lurking at Reddit and drinking HN's cool aid; many big brands and shops like gas companies, airports, etc use C#)
&gt; so PHP is a lot more popular than Java. Even after taking into account that there are many (pro) places where PHP is absolutely not an option, and that there are a ton of ultra simple sites where it is, I still don't see any convincing evidence that PHP is "a lot more popular" than Java. I looked at many sources; (e)books, blogs, questions on SO, http://tiobe.com, http://langpop.com, repositories on github.com Really nothing at all points at any overwhelming popularity of PHP. Basically the only thing where I found PHP to be over represented is when looking at the URL "file" extension (.php). Indeed, Java doesn't put .java behind a URL, Python doesn't put .python behind it, etc. Now Java did have the *.jsp and *.jsf extensions, but those are rarely used these days (especially by the big guys). My thesis is that a bunch of shitty low-end PHP sites don't take any effort to have nice URLs and don't remove any PHP headers from their response. OP looked at a source that mainly counts websites using PHP based on the .php extension, so concluded that 82% of sites use PHP and thus by extension that PHP is the most popular and most frequently used language on earth. There are many things wrong with that. A few: * Assumes that programming is only done for websites. Forgets about native desktop/mobile apps, embedded code, scientific code, etc * Forgets to take into account that 10.000 sites with 1 user per day are dwarfed by 1 site with 1000.000 users per day. Number of sites is just -a- data point, but does not tell the whole story * As explained above, assumes that all sites clearly have their main language as URL file extension, which is of course not true. 
For me fun factor is probably the last thing as that's more about game content rather than the actual programming / design choices you did. (I not a professor btw, althoug I think its worth a question or two for fun / cheek :P) If it were my dissertation (I dont know your course / dissertation specifics btw), in the design section I would talk about my design choices in the app/game, i.e. UI design, game algorithmic parts like physics / collision detection etc anything contributing to the design + code you are writing in the game that you can tally to an IT topic / lectures. I would then try to test all of those decisions in the evaluation, i.e. was the UI actually easy to use, did the collision detection work well / smooth, were the physics realistic, AI good etc. The only other thing I can think of in terms of evaluation is benchmarking (CPU/Mem usage etc). e.g. the AI algo could control 500 AI sprites before breaking / AI design was efficient. However, you need to be careful here that you are evaluating your code and not an optimised 3rd party library. For me the dissertation is more about accomplishing something using thought out / planned decisions in topics related to your degree / programming that you can discuss before hand, later evaluate how well they worked and then discuss afterwards when they were good / bad and how you could improve. Rather than the other approach people may take I'm gonna make a game, discussing whether to use wood elves or forest elves and then seeing if people enjoyed it, that angle doesn't have much to do with IT / programming and is more product design, which thinking about it is a valid discussion point, but a one of many.
Thanks guys these are some great ideas! I go back in 4 days and need to have some kind of plan in motion. Everywhere else I ask this I have been met with unhelpful rudeness. I really appreciate this :)
Sorry.
True but it would be there would be plenty of open source examples. Also people could post their editors for some editor porn too.
Kinda off topic, but I really hope this doesn't get removed.
For the most part, yes - it is interesting and can be quite fun at times. Be prepared for the mountain of red tape and paperwork that can come with the role though. Design and documentation is probably quite a large chunk of my work. This will vary by the role, but I currently work on a massive enterprise system that is almost as old as Java itself. Can be quite interesting when getting to lurk in the dusty corners of the system from 1.4 and earlier. If it ain't broke :)
https://www.google.sk/webhp?tab=ww&amp;ei=fbu3VMXNOMn3UuXQgZAH&amp;ved=0CAcQ1S4#q=define+agile
I'm a fan of the multi-stage tables used for unicode properties compression/hashing.
Your second example is better of course. It is much easier to read and modify.
hmm, that book is 7 years old? Is it still relevant? I'm usually skeptical buying books older than 5 years.
I really think that the "Don't use returns!" advice should have gone by the wayside a decade ago with the rise of IDEs that were worth a damn. As such, the concerns about the method not ending at the last line are spurious (to me at least). Also, I have yet to meet someone in real life that thinks methods should only have one return point, outside of a couple of academics that never coded professionally in their lives. Your second example is far superior for readability. Generally, when you start nesting too much, it's a sign you're doing something that either needs it's own method, or needs to be refactored. 
Like all good debates, it comes down to what you want to accomplish with it. My default answer is Hibernate though, mainly based on adoption/documentation.
You can pass a null type to a C++ reference if the reference has type &amp;pointer, the only difference between C++ &amp; and Java object passing is that you cannot change what the caller-scope variable that you pass in to a function references. But whatever, it doesn't matter whatsoever.
You haven't been sure of anything since the start.
I actually don't like it when creating a new object does more than set the state for that object. I'd rather see invokelater call a method that creates a new main and then starts it. 
I'm personally of the opinion that should never ever declare a throws clause. They're a failed idiom. Any libs that throw will get immediately caught and either handled or rethrown wrapped in a RuntimeException. Using exceptions for control flow is the anti-pattern and I think that's the predominant view in the java world now. Most popular libraries don't throw checked exceptions.
So, `SwingUtilities.invokeLater(()-&gt; new Main().doStuff());` I know where you're coming from (I think), but I don't see justification for that at the very start of a program.
True, but I still rely a lot in the old searches. Search everywhere is slower on machines without SSD. If you know the type that you are looking for, I think it's faster to use the "dedicated" searches.
Best parts: * Sitting in Meetings * Teaching offshore resources how to debug an Exception * Repeatedly having to step in and fix people's broken code Oh wait, that's what it's like here being an architect. Although the pay was lower, it was more enjoyable just writing Java code.
Ctrl-Space
Disagree. Any modern IDE will highlight all your return points with a click. Forcing a method to only have one return point usually creates more convoluted code that is harder to reader than the cleaner, multi-return version. 
good general article, which does not focus on a particular language, but on OO itself.
I prefer the second method along with returning multiple times in the method. When you have nested if/elses it can be hard to tie the throws clause to the validation problem in the if statement. It does mean you have a bunch of stuff at the beginning. When I have a lot of input checks, I sometimes create a private validate() method that is called first. It then throws an exception if necessary. After that I know the inputs are good and I can write the business logic.
Yes, it is. We're reading it in our book club at work, though for many of us it's a second read. Still very relevant IMO.
This is the only part of Eclipse I miss and IntelliJ has it, it just isn't as friendly to use.
PM me details please
I've been told that [my code](https://github.com/robot-head/PixelPusher-java.git) is beautiful. I'm not sure I agree.
The framework should be more or less a general purpose tool. Personally I like Hibernate too, but in this case the lerning curve would be too steep.
| Java is closer to pass-by-reference semantics That's the most important part, I think. The people who think they are language lawyers like to repeat the "Java is pass by value" mantra, but regardless of the internal implementation or the name given to object handles, they have the semantics of being passed by reference. 
I do Java and for me, it's almost entirely web apps. You can do a lot of things with Java, so you could work on all kinds of different things as Java developer, though as a language, it's fairly boring.
From the second paragraph: "In practical terms, many modern programming languages have converged on a call-by-value, pass-by-reference strategy for function calls (C#, Java)." Doesn't that contradict with what you're arguing? 
In one of the applications I work on, we rely on fonts from the system, and different linux distributions have different font packages available. So we package our app in a Docker container so we can ensure the fonts we've tested with are always going to look the same no matter where our app is deployed. (We give the containers to our customers to deploy on-premise)
This pretty much settles it. Thanks. :)
The simple answer is (as always): it depends. Your work environment is not decided upon by the language of choice but by the people you get to work with. From my experience, I can say that the biggest keyword in "enterprise" Java applications is: Transaction. You will need to make a lot of decisions about how to manage your transactions properly. First it will look easy because the Java EE container will be handling them but eventually you are going to hit a wall where you will be required to manage them manually. One other thing is knowing the ecosystem. Since Java is an extremely popular programming language, there are already tons of tools that you can use to solve your problems. Mastering these tools will give you a better life but some of them will just cause suffering. Of course I can write a lot more about that topic but I'm on mobile and going to cut here.
I agree that "methods that are longer than you can observe at first glance" are bad, but I think you make the wrong conclusion. An alternative solution would be to break the large method down into multiple smaller sub-methods. The length of the large method shrinks. Chunks of code that might be hard to decipher at first are now replaced with method calls that have descriptive names. Since the method now contains less code, the other return statements are not hidden.
Ctrl+W is the shit
Why don't you simply embed the font in your JAR?
shift escape to minimize the output panel alt-1 to hide and bring back the folder pane ctrl-shift-f10 to run the current file using end and home to get to the beginning of lines is good, shift-del to delete an entire line ctrl-q for checking a methods user put comments, ctrl-shift-i for inspecting the methods code probably a few others basic but i use all of these frequently
Don't do it! It's super slow. It's neat if you have simple applications, and you can use their out of the box tools. But when it comes to customization, outside of the box solution is hard!
We used it for a big messaging platform at work. Really nice tool, provides you with lots of "Enterprise" features. I've never used KryoNet but I can vouch for Rabbit MQ. Firstly you have message queues so that you easily distribute load across the system. The simple queue mechanism allows you to have multiple message consumers all reading from the same queue in a round robin fashion. So you could have an instance of service A that puts an event on the queue and have multiple service B's reading from that queue, each one processing a different message off the queue. This allows you to have resilience/load balancing in the system so that if any one server falls over you can carry on. On top of this, each message has an acknowledgement known as an ack which allows you to define a retry strategy if message sending fails or the service that reads the message fails depending on whether you send a response ack before or after message processing. Again this gives you resilience in the system that you know you can recover from network issues between services. You should have a read of the tutorials on the RabbitMQ site to get a feel for the more advanced types of message routing which can be really useful. You can message on regex, headers etc.. but I won't go into it here. To integrate to RabbitMQ it should be really easy using Spring framework. I personally use Spring Integration but you could just use Spring AMQP and use the RabbitAdmin/RabbitTemplate directly. Spring Integration provides the same messaging architecture internally to your application as you would define with RabbitMQ. I generally just use XML over Rabbit and Java objects when using internal messaging to decouple the domain model from AMQP. This way you can consume the messages from any language that supports AMQP. Hopefully this overview helps. [Spring AMQP](http://projects.spring.io/spring-amqp/) [Spring Integration](http://projects.spring.io/spring-integration/) 