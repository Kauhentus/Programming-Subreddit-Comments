The basics of annotations and XML are covered, which for me is enough. I have the commercial version and don't even bother enabling the Spring facet many times.
Good to know. All I really did with community was SE projects, basic POJOS, and edit javascript (which as far as js editors go, holy hell it rocks :)
He's been to the JavaOne conference the past two years.
GlassFish gets my vote. It always implements the latest Java EE spec way before any other app server. *Edit: I accidentally a letter*
I’m pretty sure you did something wrong here. 1. First of all: it’s overloading, not overriding, unless 1. you actually meant to say: public interface Generic&lt;T&gt; { public Map.Entry&lt;Boolean, Generic&lt;T&gt;&gt; validate(T item); } …because the code from above (once you fix the obvious typo) compiles just fine.
I'm having a Futurama Fry moment here. I can't tell if your argumentation style is unfocused rambling or you are purposely evading the points that I'm raising. &gt; But that's the same for Java EE really. I realize this. That's besides the point. I'm not arguing *against* Java EE, I am arguing *for* a particular use case of Spring. &gt; The sum of all services that you could potentially use is called an &gt; "application server" This definition hinges on what you mean by "services". When I said Spring MVC does not introduce an application server any more than Tapestry or Struts 2 do, this was not an idle observation. Both Tapestry and Struts 2 drank the DI koolaid, and both introduce DI containers themselves along with mini ecosystems surrounding them. Struts 2 allows configuration, so you could choose Spring, Guice and most likely CDI by now. Regardless of the DI container chosen, services are *injected* (not *provided*) into the controllers that need them through bridges into the deployment environment, which actually provide the service. Neither Tapestry nor Struts 2, Spring nor Guice implement services themselves, they only provide bridges to services provided somewhere else. If you deploy a Spring or Guice wired application into a Java EE application server which provides JTA and JPA, Spring and Guice merely build a bridge between the application and the application server. Neither Spring nor Guice are providing the services themselves. Spring can also bridge transactions and ORM to other service providers, such as JDBC or Hibernate. Incidentally, I wouldn't call Hibernate an "application server", because it implements a JPA provider. Would you? Thus, calling Spring an application server would be a ridiculous abuse of terminology. &gt; you can also use the holy pom.xml approach to cobble together your &gt; very own distribution of Java EE First of all, you don't have to cobble together your own Java EE. Because Spring is all about integration points, you can use the Java EE application server provided JTA and JPA implementations as you wish. All Spring needs is a persistence.xml. If you *have to* cobble together a Java EE implementation because for whatever reason you can't use a prepackaged distribution like TomEE for application servers that don't implement the full spec or you are forced to use something like Weblogic 10.3, Spring gives you options. The bridges are there for you however much you need them. In any case, by bringing Maven into the picture here, you're dodging the point quite badly. Working in Java is often a choice of which framework to use, and those frameworks have dependencies, which is why Maven was invented. If you choose to use Spring Web MVC, you are choosing a particular set of modular dependencies, just as if you were choosing to use Tapestry or Struts 2, which each have their own modular dependencies. If you choose *not* to use JSF, so you must make a framework choice. &gt; think you're using the term "lifecycle" as a stick to beat JSF with &gt; without realizing what it really entails You're trying to read my mind here, and are failing quite badly. I know exactly how the JSF lifecycle works. My understanding in mirrored in Rich Hightower's [excellent article on the subject](http://www.ibm.com/developerworks/library/j-jsf2/). Do you think Rich is misrepresenting JSF here? Every framework follows some workflow for doing standard web framework things, but the nature is quite different. There is no better illustration of this then how you would implement the "interceptor" concept in Spring MVC, Struts 2 and JSF. JSF has the [PhaseListener](http://docs.oracle.com/javaee/5/api/javax/faces/event/PhaseListener.html) while [Spring](http://docs.spring.io/spring/docs/3.1.x/javadoc-api/org/springframework/web/servlet/HandlerInterceptor.html) and [Struts 2](http://struts.apache.org/release/2.0.x/struts2-core/apidocs/com/opensymphony/xwork2/interceptor/Interceptor.html) have interceptors. While these "do" the same thing, principles are quite different. In Spring and Struts, the interceptor is merely a decorator around a controller method invocation. In JSF, the phase listener is involved in the application lifecycle, the process mediating the translation between an HTTP request and the JSF application model, such as appropriately firing action events. The phase listener must insert itself in the right place in this lifecycle so the correct effect is achieved in the JSF application model. It is perfectly okay for a developer to look at the lifecycles a platform implements, and choose to reject the JSF lifecycle for the simpler front controller lifecycle. &gt; Your "hate" is unjustified here. By calling my argument "hate" shows that you completely misunderstand what I am saying. In effect, I am saying, sometimes you want to use a screw and sometimes a nail, which means you need to use either a screwdriver or a hammer to do the job. You insist on using a screwdriver to hammer in a nail, and I am pointing out that while, yes, you could do that, you'd be better served just using a hammer. In saying this, I am not "hating" on screwdrivers. &gt; It's not exactly the same... You're going completely off the rails here. With the front controller pattern, you have a controller class which maps many different URLs to methods in the class and routes to different views conditionally. This style puts C before the V. The view action construct "looks" like controller routing, but it is completely different. But let's take a closer look at what is actually happening here. The view action is defined in a facelet, which is a view component. The view action automatically triggers an action event in the backing bean, which can conditionally choose the next view. So, you're proposing to go from the view to controller and then back to the view. In effect, treating the facelet as a very shitty knockoff of struts.xml file. Why would you do this? You don't need to bash in a nail with a screwdriver! JSF is a powerful component model technology. Use the components and bask in the glory of JSF allows you to do! Stop trying to beat it into the front controller pattern, and leave that for frameworks specializing in it! And JAX-RS is not an alternative to Spring MVC. It is not a front controller framework. Spring MVC is a front controller framework that can implement web services, because it's in the same neighborhood. JAX-RS is a web *services* framework, not a web *application* framework. [People have tried](http://macstrac.blogspot.com/2009/01/jax-rs-as-one-web-framework-to-rule.html), I would not say they have succeeded. Web frameworks implement a suite of functionality that have nothing to do with web services, so this is not surprising.
Build something simple with spring framework, start with some basic mvc and maven as your build and dependency tool. Get it compiling war files and deploy these to tomcat. Start small! 
What do you need IDE support for? Free version does everything you need. Are you planning on doing an EJB heavy app?
Honest question, why would anyone use tomcat or any variation of tomcat over an app server with the quality of jboss as 7, or glassfish, or jetty? I use tomcat in several scenarios but it's not because it's a superior container, far from it.
People who design java EE applications properly don't care too much about the implementation it will run on, do they?
I don't see it mentioned already so I'm gonna suggest the Play! framework.
90% discount - where, what, how?
Already [submitted](http://www.reddit.com/r/java/comments/1n7xs6/learn_to_program_in_java_for_just_the_price_of_a/) - and downvoted - yesterday, and [the day before that](http://www.reddit.com/r/java/comments/1n3qsl/learn_to_program_in_java_free_limited_coupons/) (and a third time in /r/GetStudying). and you know it. is "dizauvi" an alt account of yours? Stop spamming links please. Edit: oh, and it's not even a free course... so you're submitting the links to make money of it? Nice...
I had posted the free coupons, which are over now. So yes, the course was given for free initially. Don't assume stuff. 
&gt; This definition hinges on what you mean by "services". It includes many things, and as I said the very definition of what an application server actually entails is not entirely clear. But it's more or less: * An HTTP engine * A web framework (pages/ajax) * A web services framework (rest/soap) * A DI container * An ORM or optionally alternative data access * A transaction manager * A messaging and/or eventing system * A constraint validation system * A security framework (authentication modules, authorization rules, etc) * A job scheduler and/or job batcher The sum of the APIs and actual code implementing them is what we typically call an application server. Once again, remember that there's isn't really an authoritative definition of the term. Others may just call it full stack framework, and I've even seen people call all of this "the container" (which is obviously not correct). Both Java EE and Spring provide their own API for pretty much all things on that list, save for Servlet. They share this API. Now Spring doesn't *implement* all of these things necessarily with their own code. Spring is also about wrapping existing solutions with their own superior API. This is if I remember correctly one of the reasons of the falling out between the Hibernate and Spring team. After Gavin King (among others) created the JPA API, Spring just started wrapping it out of habit with their own "improved API", but the Hibernate team got pretty pissed about this since their new API according to them didn't need any wrapping. Java EE, in a way, doesn't implement any of its APIs either, since Java EE is just a specification. Apache has implemented JSF, JBoss, Caucho and Apache have implemented CDI, etc. Because of this similarity I called the whole of Spring an application server. TcServer with the Spring framework, Spring Security, Spring Batch etc pre-loaded by all accounts looks exactly like your typical Java EE server. &gt;In any case, by bringing Maven into the picture here, you're dodging the point quite badly. I don't think so. Maybe you were missing the point. With Java EE applications you write your apps against APIs that are just available. There aren't a million jars in WEB-INF, but the API is "just there" (namely system-wide installed on the server to which you deploy). Without Maven, you'll have to download tons of jars yourself. Just Hibernate is 12 jars or so. Add a transaction manager and you're at 20 jars and then you still have to add the Spring jars that wrap &amp; abstract all that. This doesn't make the developer experience lightweight at all! But with Maven you in a way get the feeling that all those libraries are just there as well and are system-wide installed. In a way they actually are, namely in your `~/.m2` folder instead of in `/opt/jboss/modules`. I've seen many developers who were "just using Spring" and were dragging in some 90MB of jars (Spring libs, Hibernate, etc...), but had absolutely no idea of this because of Maven. Their application contained just their code and the libraries were invisible. Whether the build process added those jars to their WEB-INF/lib prior to deployment or whether all those libs were already installed at the target server was pretty much outside their scope. That's why I mentioned that Maven specifically has been so important for Spring. &gt;There is no better illustration of this then how you would implement the "interceptor" concept in Spring MVC, Struts 2 and JSF. JSF has the PhaseListener while Spring and Struts 2 have interceptors It's a bit more subtle that that. There's event listening and intercepting. JSF has the PhaseListener as a coarse grained event listener to do things before a certain step in the sequence of steps start. There are also event listeners to which you can register for more fine grained events, e.g. listen to an event for when a component is added to the tree, or the event that is fired just prior to rendering (the preRenderViewEvent). And you can define your own events, such as OmniFaces does with the [preInvokeAction](http://showcase.omnifaces.org/eventlisteners/InvokeActionEventListener) event. JSF by virtue of using the managed bean specification also supports interceptors on methods in a (backing bean). Java EE has a [comprehensive specification](http://docs.oracle.com/javaee/7/tutorial/doc/cdi-adv006.htm#GKHJX) just for this; [the interceptors spec for Java EE](https://java.net/projects/interceptors-spec). With this I would intercept an action method as follows: @Named @RequestScoped public class MyBean { @Inject @ParamValue ParamValue&lt;Foo&gt; fooParam; @Audited public void myAction() { // do stuff with fooParam } } Here the `@Audited` annotation would express an interceptor, perhaps one that logs the action being called and the value of all request parameters. &gt;By calling my argument "hate" shows that you completely misunderstand what I am saying. The "hate" was put between quotes wasn't it? Whatever your emotions were, I don't think you used the term lifecycle in a very lovable way, did you? ;) &gt;You're going completely off the rails here. Is that a subtle hint that we should all just be using RoR? *lol* &gt;The view action is defined in a facelet, which is a view component. [...] &gt;Why would you do this? The idea is that the view on which the view action is defined is the default view that should be the one that is to be rendered if the view action doesn't select any other view. For instance I may have a URL like `http://example.com/inventory/warehouse?id=12`. The view action will hit and will see if the data for this `id = 12` can be loaded. If not, it might redirect me to an error page, or maybe to a notice page, or whatever. If the data can be loaded and there are no issues the view behind `/warehouse` is rendered. As a side note, remember that in JSF a view doesn't necessarily have to be a Facelet. A view can also be a [Java class](http://jdevelopment.nl/single-class-pure-java-jsf-application). &gt;Stop trying to beat it into the front controller pattern, and leave that for frameworks specializing in it! I'm not sure if you got my Scala analogy, but by that same token Odersky should not beat Scala into the functional paradigm, now should he? He should leave that to the languages specializing in it (like Lisp and Haskell). JSF will not likely become an action/request framework. Indeed, if you need that or feel primarily happy with that pattern, by all means use Spring MVC. It indeed does a good job there. But JSF -will- continue to absorb a number of patterns and ideas that have proven to work well in other frameworks, and that may potentially include some things that are traditionally associated with action/request frameworks. 
That would always print "a and b are not both even and not both odd", because *b % 2 == 2* is always false regardless of the value of *b*. Even if you fixed the conditional expression, this doesn't work correctly, as there clearly are three separate cases: - a and b are both even - a and b are both odd - a and b are not both even and not both odd
This asshole has been spamming his udemy course on different sock puppets for a week now. I've been in contact with the udemy people about that.
Spring indeed used to be the most popular thing during the J2EE dark ages. In fact, Spring + Struts + Hibernate had been the de facto stack for half a decade. Currently Spring is certainly still very relevant, but it's by far not the de facto choice anymore. A lot of things are happening in the Java EE space nowadays and Spring has started to copy some Java EE things (like the entire no-XML approach to DI). Knowing that it's no longer superior in its core feature set, Spring has branched out to some broader topics in computing, mainly big data/map-reduce, NoSQL and Social (Facebook/Twitter, etc). Java EE is taking a more conservative approach here and is waiting a bit till the dust settles regarding NoSQL etc, to see which particular solution or pattern really comes out to be dominant. &gt;I'm just wondering if they've stayed on top of things So yes and no. Arguably they lost the edge when it comes to their core competency, as Java EE's DI solution (CDI) is in many ways the better solution. But Spring has jumped early on top of new developments like the mentioned big data and social. Spring fans will say that Java EE is fighting yesterday's war (the best DI container, the best ORM API, etc), while Java EE fans will say that these things still matter most and that Spring should not have given them up so quickly in favor of trendy topics like NoSQL which may after all just be a passing fad.
&gt;Once you have spring you don't really need JEE stuff. It's the other way around as well, once you have Java EE (not JEE!), there is no need for Spring at all. &gt; (JEE stole/borrowed a lot of the CDI ideas from Spring, for example). No, it's rather the other way around. EJB was inspired by Spring and JPA inspired by Hibernate and TopLink (Hibernate helped build the JPA API so I would hardly call that stealing). CDI goes way beyond this, and was based on Seam and Guice. Gaving King who also created Seam was the main initial force behind CDI. CDI's main design principle is type-safe injections and NO-XML or String based configuration. Spring (at the time) was exactly the opposite. It wanted to call everything "configuration" and move out all that supposed configuration into XML files. While Spring didn't invent the term XML-hell, it sure gave it a face. In its later releases Spring has stolen/borrowed from CDI regarding the convenient no-XML approach to DI. 
I'm too lazy to reason through the code, which btw is unnecessarily hard to understand, but perhaps the problem here is a matter of operator precedence? &amp;&amp; binds stronger than ||, so e.g. x == 0 || x == size-1 &amp;&amp; y != 0 || y != size-1 is equal to x == 0 || (x == size-1 &amp;&amp; y != 0) || y != size-1 and not (x == 0 || x == size-1) &amp;&amp; (y != 0 || y != size-1) as I guess you expect. If you're unsure about operater precedence, it's generally a good idea to use parentheses.
&gt; As a contrast, not very many people involved in the definition of the JEE standards over the years, or the implementation of the application servers, have had very current experience of what's important to application developers. That's not true. Gaving King, Ed Burns and David Blevins (just to name a few persons who were involved with the Java EE 5 spec and beyond) have plenty of real world development experience. Most of the specs intensely communicate with the community to ask what they want. JSF 2.0 for instance was nearly completely community driven, nearly every thing in it came from a JIRA issue that was created by a community member. It's the same with Java EE 7. Things like e.g. the default data source in Java EE 7 are in there because some guy created a JIRA issue and asked for it. You'll see this with tons of other Java EE features as well. Any individual can join the various expert groups, whether you are associated with a big company, small company or no company at all, and then directly influence the direction a spec goes into, but as said indirectly by just creating JIRA issues at the tracker that basically each spec has up and running works just as well. So in addition to being open source for many Java EE implementations, Java EE is also open spec, or open design if you will. 
I’m pretty sure that `x != 0 || x != size-1` is not what you intended to write. Hint: it’s always `true` unless `size` is `1`.
What's missing is not "how" but "why" from a bigger picture.
&gt; There's also the community version (JBoss AS) But the community version is actually short for "open for community testing". It are always early alpha versions of their respective EAP versions. &gt;and is completely open source, Uhm... EAP is also completely open source. 
Why would EJB need special IDE support? It's an annotation on a bean! What EE support first and for all means is the ability to start and stop a server and to add and remove deployments to it.
I'd choose tomcat. I hate being at the mercy of a 3rd party vendor. It may not happen today, or it may not happen tomorrow, but eventually you will find yourself bent over a barrel.
not only alphas, there are stable version as well thou EAP usually fixes bugs found in AS versions, and are not backported
Java EE is not specified strictly enough to expect *any* consistency between platforms beyond API call names and general ideas of what will happen. Seriously, read a JEE spec or two. They are extremely loose. You can not, with any degree if reasonable expectations, develop on one implementation and then deploy on another. You are mortally bound to the implementation you're using. If you wish to change later, you must expect differences in behavior. I don't think this is unreasonable, it's the same with nearly every general purpose API library out there. In fact, I find it difficult to think of _any_ programming library or language where a different implementation carries 100% compatibility with its peers.
I don't really like the "roll your own" mentality that much. Sometimes you are doing something weird/special and you really need it- but then you need to ask yourself a question should you be doing that weird stuff at all, is it worth the maintenance difficulties that will follow. Most of the time, it results in non-standard hard to understand hodgepodge of code. And it takes a bit of skill to set up. I find it better to code to JEE spec, which most server-side java developers know, understand immediatelly, and it's there without having to spend a week to research various 3rd party bits and plug them into spring. The only thing I'm not certan in JEE is JSF. Depending on requirements, I would probably go with GWT or Wicket or try some newfangled HTML5 stuff. But I haven't really worked with JSF, so I might be wrong here. --Coder
&gt; Ed Burns You mean this fellow: http://ridingthecrest.com/edburns/resume/ https://www.java.net/blogs/edburns And Gavin, who's been working at JBoss and Red Hat? Why would you use guys, great server product developers who have been working at app server product license sales companies for decades, on those products, as examples of people who have "current experience of what's important to application developers"? Are you being sincere, or having fun?
&gt;not only alphas, there are stable version as well I don't think there are stable versions of "community editions". Every community edition is per definition a version that still needs testing. If it would be really stable I would be called EAP. &gt;thou EAP usually fixes bugs found in AS versions, and are not backported Indeed, but that wouldn't make much sense would it? It would be like bugs in JDK7u10 were backported to JDK7u9. EAP is not a different product and not a major new version. EAP is just a different name for when a given branch has become stable enough to use for production use. There was e.g. JBoss AS 7.1.0 (buggy), AS 7.1.1 (still buggy), AS 7.1.2 (getting there, but still not perfect), then AS 7.1.2.Final-redhat-1 (pretty stable). So AS 7.1.2.Final-redhat-1 gets renamed to EAP 6.0. Development then continues and a 7.1.3 is released (tagged actually) from the AS 7.1.2.Final-redhat-1 branch. It's again a little buggy. After some bug fixing it becomes 7.1.3.Final-redhat-4 and this is found to be stable, so renamed and released as EAP 6.0.1. Etc etc. It's a continuous development stream. Not entirely stable nodes in branches are released as "open to community testing", aka "community editions", while the better tested nodes are released as EAP. But it's always the same stream.
In case you forgot Gavin created the Hibernate **open source** project that was one of the pillars that allowed the Spring stack to rise to fame. Ed Burns has been instrumental in open sourcing the Java EE reference implementation starting with open sourcing the JSF RI, now called Mojarra, and the first spec lead to run the spec just like any open source project with a public JIRA, public mailing list, etc (unheard of in 2004, but now completely common). David Blevins has been with the Apache organization like forever and has only a few days ago for the first time started a company to support TomEE. So where you get the "server product license sales companies" nonsense from is beyond me. If you truly belief that Apache is a "server product license sales company", then the developers of your holy Tomcat are just as well guys who have been working for "server product license sales companies". If anything, SpringSource, now VMWare is more of a "server product license sales company" than most others in the Java EE space. And you conveniently left out the part where many, many features in Java EE 7 originate from ideas and even complete worked out specifications, by community members. Just another example, the [Ajax reset input values](http://jdevelopment.nl/jsf-22#1129) feature has been spec'ed and proposed by Çağatay Çivici, Kito Mann and BalusC, all of whom are not Oracle employees or otherwise employed for a "server product license sales company". Çağatay and Kito are EG members, BalusC is not, but as said everyone can join (yes, you too :P).
please look at gradle before making the dive with maven. Your life will thank you in a few months
Why is Tomcat different from TomEE and Geronimo here? They are all Apache...
Why not [jackson](http://jackson.codehaus.org/)?
I don't agree. Yes there may be differences, but that's often due to small implementation differences and not that often due to spec looseness. If you never have deployed on any other AS and after years you try this, you might be disappointed, but a lot of times the app just runs or you have maybe 2 days, maybe 2 weeks of work to do for a million lines of code app. That's much less than having to recode your app from RoR to .Net or any such transition.
When I download TomEE, where do those license salespeople come into play??? Or are you referring to the sharky VMWare salespeople when I want to use Spring?
&gt; You don't really need to purchase a separate server in order to play with Java on the web; you can do just as well with a local install of Glassfish or Tomcat This. The distinction between server *software* (servlet containers like Tomcat or application servers like Glassfish), and a *hosted* server facing the Internet, is basic and important.
&gt; what application server actually entails is not entirely clear In the *paragraphs* that follow, you are demonstrating a classic logic error: [confusing a part for the whole](http://en.wikipedia.org/wiki/Fallacy_of_composition) The list you've provided defines what the Java EE spec says makes a *complete, compliant* application server. That does not mean that some framework which implements some technology on the list, like Spring (DI) or Hibernate (ORM) are application servers themselves. You are taking an attribute of a whole, and calling anything which has some attributes the same as that whole. This confusion is leading you to making some ridiculous assertions. Step back, and ask yourself what an application *server* really is, and what makes it different than an application *framework*. A server, in the common definition of the word, provides client/server integration between different machines and different applications. A framework, again in the common definition of the word, provides some component model which defines the architecture of a *single* application. Spring Batch and Spring Data are merely frameworks to applications with a particular architecture, with the actual server parts implemented by other applications. For example, Spring Batch can divide tasks onto different cluster nodes, but it needs a real application server running a JMS queue in order to do that. That makes Spring Batch applications merely clients and not providing any inter-application services on their own. This should make it obvious that Spring is a application framework and not an application server. Spring has been traditionally been used to develop *single* applications that exist on a an application server like Tomcat. What I find really interesting is that I'm making straightforward technical arguments, but you can't seem to help but bring in all kinds of political bullshit into the argument. I'm think I'm beginning to get a better understanding of your usage of terminology, using words in a "political" context rather than in a "technical" context. For my part, I really don't care about any of the bad blood between different communities. I have better things to do with my time then to get involved in hissy fits between Spring and Java EE people. &gt; Without Maven, you'll have to download tons of jars yourself. So? This is true of any Java framework. Again, you bring up Hibernate and Spring, but leave out Tapestry or Struts 2. That's why Maven has come into existence, to address a *common* pain point in Java development. The Java EE application server model wants to centralize dependencies for EE applications, while Maven allows decentralization of dependencies. Big deal, two separate models of dependency management that each work very well. I don't see why you feel *compelled* to demonize one technology because it is an alternative to some other technology. &gt; Maven you in a way get the feeling that all those libraries are just &gt; there as well and are system-wide installed. Um, no I don't. And if you think that way, you really don't understand Maven at all. I get the feeling that the dependencies I need are managed separately in a separate solution *just* for dependency management, such as an organizational Nexus repository or the central Maven repo. Because dependencies are managed somewhere else, I don't have to worry about what the application server or even what my own system has installed on it. I can simply say "I need this" and I know Maven will somehow get it for me. &gt; I don't think you used the term lifecycle in a very lovable way, did &gt; you? Um, love or hate had nothing to do with what I was saying. Saying one thing is "simple" and another thing "complex" are neutral technical assessments without any emotional attachment whatsoever. The lifecycle for a front controller framework will necessarily be simple because it doesn't change the nature of an HTTP request - it only translates one type of method call into another type of method call. The lifecycle for a component framework will necessarily be more complex, because it is changing the nature of an HTTP request. The HTTP request must be translated into the application model, which in the case of JSF means building a component, binding values, firing the right kind of action event and the right point in the application lifecycle, which has implications for what can be done at each stage of the lifecycle. Did I say anywhere that the lifecycle phases are a bad thing? No. Not at all. You are reading love and hate into my argument based on your own biases. The lifecycle phases are the foundation for the component model, and that complexity is necessary complexity. Which is fine, because the component model is worth having. It may not be everyone's cup of tea, but that does not make it an illegitimate design choice. That code sample that follows is completely misses the point to the point I was making. Whether or not you use a coarse-grained listener like PhaseListener or an annotation targeted to a specific lifecycle phase, the *effect* is the same. You have to insert your listener somewhere in the lifecycle orchestrated by the JSF engine through some non-trivial code (I've stepped through Wicket's request processing code, which is quite hairy. I can't imagine JSF is any simpler). This style of programming is very different than the front controller pattern, were the interceptors are decorators around a *single* method call. There is no concept of a "lifecycle" like JSF. Interceptors are just a very trivial chain of method calls, like [Filter](http://docs.oracle.com/javaee/5/api/javax/servlet/Filter.html)s in the Java EE world, but more fine tuned to the capabilities provided by the web framework. &gt; Is that a subtle hint that we should all just be using RoR? No, but some people would prefer the RoR way instead of the JSF way. Surely you must understand that RoR and JSF implement web applications in completely different ways, right? Why must you insist that people do things the JSF way? &gt; The idea is that the view on which the view action is defined is the &gt; default view Again, you're going off on a tangent completely besides the point that I'm making. In the front controller pattern, the URL does not map to a "default" view, it maps to the controller. Again, as I have repeatedly stated, the front controller pattern puts the C first, and you are repeating my argument that JSF puts the V first, calling it the "default" view. This alludes the purpose you have in mind, which is *very* different from the purpose achieved by the front controller pattern. The point remains, if you tried to implement the front controller pattern for the *purpose* intended by that pattern, you would be simulating that purpose with default views and end up with a laughable solution. There's no need to put JSF through that. JSF stands well enough on its own for the purpose it was designed for. &gt; A view can also be a Java class. So what? Again, completely, totally, utterly irrelevant to the point of the discussion. &gt; I'm not sure if you got my Scala analogy, but by that same token &gt; Odersky should not beat Scala into the functional paradigm, now &gt; should he? I dismissed your Scala analogy as irrelevant. The functional and OOP paradigms can coexist because they are completely orthogonal. The OOP paradigm is an architectural pattern, while the functional paradigm is a data flow pattern. Scala provides very good *support* for the functional paradigm. Functional and OOP aren't diametrically opposed. The component pattern and the front controller pattern are not orthogonal and are diametrically opposed. &gt; JSF will not likely become an action/request framework. I should hope not. Because it would make a shitty one. &gt; But JSF -will- continue to absorb a number of patterns and ideas that &gt; have proven to work well in other frameworks Which is fine, because there is no harm in making certain use cases *possible*. But these use cases should never be confused for the primary use case for JSF which is the component model. You can't serve two masters well.
To me that's really not as important. The biggest add for me is the awareness: validation, autocompletion, etc. generating those annotations instead of typing them. Etc. validating them at edit time. Deployment should be made easy and automated through the build process, ideally... In other words, having IDE start/stop/deploy seems less important to me than other features, contrary to what many people come to expect from app server integration. (Yes, it is nice to have though)
The whole point of EE is to make the implementation of the spec separate from the applications that are deployed on it. Yes in reality there are grey areas but this is unavoidable. I have read more specs than I care to admit... 
How is it always true? For example, if size is 5, x must equal 3, 2, or 1 for this line of code. 
This looks promising. Thanks.
&gt; The list you've provided defines what the Java EE spec says makes a complete, compliant application server. That does not mean that some framework which implements some technology on the list, like Spring (DI) or Hibernate (ORM) are application servers themselves. But I never said that! The combined whole of HTTP Engine + DI + ORM + ... is often times called an application server. Of course Hibernate (ORM) is not an AS, but again I'm not sure where you read that I was saying that. &gt;You are taking an attribute of a whole, and calling anything which has some attributes the same as that whole. No I don't, the separate attributes are never the whole. There's no pars pro toto going on here. If anything, *some people* (not me) occasionally want to call the HTTP Engine (Servlet) an application server. &gt; ask yourself what an application server really is, and what makes it different than an application framework. Yeah, what is an application server really? As I mentioned over and over again, the term is not really well defined and above all the one thing that is associated with the term (Java EE) doesn't even mention it! &gt; This should make it obvious that Spring is a application framework and not an application server. I feel we're running in circles here. By that same definition Java EE is also an application framework, and yes, it indeed is. As I mentioned earlier Java EE is frequently called a full stack framework just as well. I think you desperately want Spring to be something totally different than Java EE, but it's much closer than you think. Both are full stack frameworks, application frameworks or yes, application servers. With Java EE you can put references to implementations of all Java EE artifacts in your pom.xml and deploy to the holy Tomcat. Or you can put all those jars in Tomcat's common lib directory and deploy slim wars. Or you can download a readily made distribution. With Spring you can put references to implementations of all Spring artifacts in your pom.xml and deploy to the holy Tomcat. Or you can put all those jars in Tomcat's common lib directory and deploy slim wars. Or you can download a readily made distribution. Really, what is the difference? If you put all jars in WEB-INF/lib it's an application framework, and if you put them in [tomcat]/lib those exact same jars are suddenly an application server? So just by shifting the directory that holds the jars a few levels we have a totally different thing? So this is an application framework: Tomcat webapps myapp WEB-INF lib hibernate.jar weld.jar mojarra.jar etc... But now those exact same jars are suddenly an application server, and are a totally different thing: Tomcat webapps myapp WEB-INF lib lib hibernate.jar weld.jar mojarra.jar etc... So all the Spring jars together are never an application server, since the jars are always in WEB-INF/lib (*except that they aren't always there, but for the sake of discussion let's ignore that*)? And Java EE is always an application server since the jars are always in /lib (*except that they aren't always there, but for the sake of discussion let's ignore that*)? Hmmm... weird reasoning... &gt;The Java EE application server model wants to centralize dependencies for EE applications, It's a model and the most convenient model to have a base line of functionality available at the server. Even with thy Holy Tomcat you don't include the Servlet API in your war, do you? If you totally want to control all your dependencies, then you should also include the HTTP engine in your application, and actually you should include the Java SE library as well. I mean, why should the `FacesContext` come from Maven, but is it okay for `HashMap` to be already installed? If you go that route, you might realize that you can ALSO package a Java EE application by just putting a war inside say JBoss, package up the whole and deploy that. Sounds weird? It's pretty much the model Play! uses. Liberty supports something similar. &gt;The lifecycle for a front controller framework will necessarily be simple because it doesn't change the nature of an HTTP request - it only translates one type of method call into another type of method call. But when that "method call" happens, you STILL have to get values from the request, still have to convert them and still have to validate them (at least hopefully you'll do that). When a method in your controller is called, that Integer parameter didn't magically became an Integer parameter. The HTTP request contained only text. You went through pretty much the same "lifecyle" (ouch, dirty word), I mean "process" as JSF went through. I agree with your explanation that JSF puts the V first and that Spring MVC puts the C first, but the lifecycle is not that different. With a GET request, where the backing bean primarily processes the request parameters, the difference is pretty minimal. In a postback (which is pretty much unique to component based frameworks) the organization is somewhat different. Then multiple components each (potentially) decode their own private section of the (POST) request parameters and push these into the backing bean. Essentially there's still the same thing happening, but the work is distributed over the components. &gt;This style of programming is very different than the front controller pattern, were the interceptors are decorators around a single method call. I won't deny that the style is very different. We otherwise wouldn't be calling if different patterns after all, now would we? But... in JSF too there is ultimately only a *single method call for the main action*. There can be many getters and setters that are called for values being pushed into a backing bean, and there can be many methods that listen to various events (including things like "value changed" for something), but there is only ever one action method that corresponds to *the* action, which is the request. If I didn't make it clear in my example, it was this method that I was decorating. &gt;Why must you insist that people do things the JSF way? I don't think I did, but there's a lot of FUD about JSF that I'm trying to take away. RoR is great too, for some very specific things it even has stuff in common with JSF, like the way the flash works. &gt;In the front controller pattern, the URL does not map to a "default" view, it maps to the controller. Again, as I have repeatedly stated, the front controller pattern puts the C first, I know that, and that's a difference in paradigm. Although, technically JSF implements the front controller pattern too, but doesn't expose this controller to the user directly. The controller in JSF is the FacesServlet. You map/route URLs to it (mostly using Servlet wildcards, but you can map individual URLs as well, like PrettyFaces does and Faces Views does in OmniFaces). &gt;This alludes the purpose you have in mind, which is very different from the purpose achieved by the front controller pattern. I never stated JSF lets the user explicitly create controllers just like in Spring MVC, but it has **some aspects** of request/action based frameworks, like *the* method that is called upon *a (GET) request*, independent of components or buttons being clicked. It is NOT the front controller, but it has SOME of the properties of it. 
&gt;So what? Again, completely, totally, utterly irrelevant to the point of the discussion. It was a side note, but the point is that when it's a class, it doesn't necessarily have to produce a component tree, this can be empty. Since the JSF provided front controller delegates to a "view", and a view action can be called when a view is processed, the view action can be a method in the same class that implements the view. Since the view can be empty, it can only consists of the method that handles the view action. The view action can then process the request parameters (as it normally also does) and then delegate to "another" view. Another between quotes, since the view in this class that handled the view action was empty. This other view can be a Facelet. Ergo, we have something completely within the JSF standard API that is really hard to distinguish from a used provided controller. E.g. @Named @RequestScoped public class Intro implements Controller { @Inject @Param(converter="...", validator="...") ParamValue&lt;Foo&gt; fooParam; @Inject Service service; Stuff stuff; public String doViewAction() { stuff = service.doStuff(fooParam.getValue()); return "mypage"; } } Here class "Intro" would be mapped to a URL pattern. By default the VDL could map any class implementing "Page" or "Controller" to the URL pattern corresponding to the simple class name. But, it could also take the mapping from an annotation on the class (like in JAX-RS) or from an XML file. When requesting `/intro` the JSF front controller would invoke the class `Intro` to build a view, but there is none so it's skipped. Since the class implements `Controller` it can use its `doViewAction` method as the view action to be called. It then calls the view action, which takes the processed request parameter, feeds it into a service, then returns a view. JSF then proceeds to the rendering phase and starts rendering based on Facelets templating and components. Because of the `@Named` annotation and `@RequestScoped` annotation the controller that handled the request is available directly to the view via EL. Optionally the controller could have put another bean into request scope. Now the question is, should we program like this in JSF? I'm not sure that we should. It sure is possible though, and it does take advantage of upfront request parameter processing and view selection for the initial request, and a powerful templating mechanism and components for rendering the view. Subsequent postbacks can be more component oriented and not or less front controller oriented. &gt;The component pattern and the front controller pattern are not orthogonal and are diametrically opposed. I'm not 100% convinced of that. As my example pointed out above, it may be viable to combine them. Not all the time, but for specific situations. A while ago in the famous Lisp vs C wars of the late 70-ties (yes, I'm a bit older) it was unthinkable that procedural and functional styles could ever be combined (OO wasn't even in the picture yet). Yet many languages today do just that.
Try Googling "Java for Python" or something similar. I found this. http://knuth.luther.edu/~bmiller/Java4Python/index.html If you're comfortable with programming you really shouldn't need a whole textbook for Java, it's a bit of overkill. But even if you get a good grasp on the language, read some sort of overview for the libraries included in the Java SE API as well as it's pretty big.
So I am a guy who programs in Python as a hobby, and VBA for work. I was just starting to really dig into Java today. I am definitely interested in something like this. I also really need to learn how to properly use Git if you want to go that route. Would you like me to pm you my skype?
If `size` is `5` then there is no `x` that will be both *not* `0` and *not* `4`. Welcome to the wonderful world of operators where `||` means OR.
Last time I evaluated it, the project appeared to be walking dead: http://tomee.apache.org/download/ Realistically, before investing in it in any kind of a strategic context, I'd want some reassurances that the development will continue on a different tack than Harmony. With Tomcat, the target isn't moving nearly as quickly, seeing as they just need to track the servlet specification, not the whole JEE (or SE) spec.
I understand now. Wow, didn't think I would have this much trouble with operators....
I did basically state that Spring and JEE are equivalent stacks, no argument there. Spring has had no-XML configuration MUCH longer than JEE/CDI to my knowledge, spring users, unfortunately, didn't get the memo and some to this day continue to use the XML hell approach. The annotation based approach has dated back to Spring 2.5 (at least, that's when it was usable) which was in 2007. I do not know when CDI came on the scene (JEE6 at the earliest, right?) As to who gave XML hell a face? I'd say that's Java overall. I almost said no to my early developer career due to Java XML hell. At the time I was a PHP hacker (and a bad one at that) and basically saw Java as the devil. I'm very glad that the Java ecosphere (Spring included) saw the err of their ways. Anyway, henk53 loves his JEE and likes to rail against Spring. I, however, see them as competitive (competition is good!) stacks that do the same thing more or less. I happen to prefer Spring.
Auto-complete of annotations is a standard Java feature. No special Java EE needed!
I prefer Java EE, but Spring's okay too. The no-XML direction started with Seam and CDI is mostly based on Seam. Spring didn't like annotations first, but when users were leaving Spring for the saner and cleaner type-safe approach they had to follow. Do not forget CDI is also about contextual injection!
You likely mean Java EE (6,7), almost no one uses j2EE for new work.
Walking dead? You mean The Walking Dead as in the series? What do they have to do with any of this?
JNDI resource names... Hmmm maybe, but yeah, who uses them? Deployment descriptors don't need special support if they have an dtd or xsd. For orm.xml a lot of support is needed for the embedded JPQL, but that's for JPA not EJB
Yup... There are lots of little conveniences... But like I've been saying, JEE support isn't really all that important for the reasons you describe. Especially in modern JEE.
A zombie project. Appears alive from a distance, but with little activity. In this case, six month intervals between minor releases.
Isn't this because it's the spec implementation?
It is the reference implementation for Java EE yes. For some reason some people think that this means it may not be production ready, but this is not the case, I have personally worked on two projects deployed to GlassFish in a production environment. If you want to gain experience in the latest Java EE API's before most application servers implement them, you definitely should check out GlassFish.
A lot of people are developing their apps against Servlet 2.4, which was in the last J2EE release.
Lots of things that were in j2ee are still around, and version 2.4 of servlets is ten years old. J2ee as a platform is obsolete, the last release was 2003. If anyone is actually developing new Java applications using ten year old technology they may have a hard time finding programmers. Edit: Here's a thorough explanation http://www.adam-bien.com/roller/abien/entry/j2ee_is_dead_completely_dead
You didn't mention the IDE you're most comfortable with, so if you're not averse to Eclipse, download and install the [Spring Tool Suite](http://spring.io/tools/sts) and create one of the included sample Spring MVC + Maven projects. They're a great starting point for learning Spring MVC.
Your ObjectGeneric interface is fine if you change your Generic&lt;T&gt; interface to: Map.Entry&lt;Boolean, ? extends Generic&lt;T&gt;&gt; validate(T item); The compiler is complaining because you told it that it *must* be exactly Generic&lt;T&gt; and then tried to use a sub class. Changing it to ? extends tells it that it may be any implementation of Generic&lt;T&gt;. * edit to fix typo *
This is a perfect case for using an enum. Using an enum, the code becomes: public enum Extension { PNG, TXT, AVI, DOCX, JPG, HTML, CLASS, WMV, EXE, SYS; @Override public String toString() { return "." + name().toLowerCase(); } } public class MainClass { public static void main (String[] args){ Scanner scan = new Scanner(System.in); Random rand = new Random(); System.out.println("Welcome to the random file extension generator."); System.out.println("Please enter your string of text to have an extension added."); String input = scan.nextLine(); int length = Extension.values().length; Extension ext = Extension.values()[rand.nextInt(length)]; System.out.println("Thank you. Your string with the random extension added is:"); System.out.print(input + ext); } } This is not only quite a bit simpler than the large switch statement or if's, but you can add another extension simply by adding it to the list of extensions in the enum. Using the switch, you could add another case, but you would also need to change the bound for the Random.nextInt call. A few other thoughts about your code: * you should CamelCase your class names in Java (i.e. MainClass not mainclass) * no need to add "my" as a prefix to your variables (i.e. Scanner scanner instead of myScanner) * watch the whitespace around your method declarations. void main(String[] args) {... not "void main (String[] args){" (this is just my preference, but it would bug me if you were on my team) 
Whenever you have a hardcoded list or map of non primatives, you should look for ways to turn it into an enum instead.
You really don't need a server on Internet to do server-side programming. Usually a local server is all you need. If you want a dedicated server any way the best option is VirtualBox. You can install Linux in a virtual machine and work with (Ubuntu server is a good start, but if you are not used to it Linux Mint is very friendly). I have used a VirtualBox (http://bitnami.com/stack/tomcat is a good start to download a pre-configured Tomcat) and NetBeans as an IDE (you could configure it to use an internal application server or an external one). And you also need to know about Design Patterns. You could use the Spring framework that has a clear Model/View/Controller design. As others have noted Maven is another must learn. Maven simplifies project configuration and integrates well with all IDEs (again NetBeans has native support for it). And from here onwards use Google a lot to search any errors or problems you will find while trying to program the server. (If you are not familiar with StackOverflow you will).
Of course you can.
Nice attempt at a puff piece to advertise your silly webinar.
Exactly. So if you define it as List&lt;? extends Object&gt; you can narrow it down later.
Right, which is what OPs problem is, he's using a literal, and Java won't let you narrow (or widen) a literal type parameter since generics are neither covariant or contravariant. If you want to use something other then the exact same class you have to use wildcards.
With all the things I have heard about version 4 I am happy I can stick with Indigo.
I read the article and being new to the Eclipse world I didn't understand its point about the IDE being ignored for other projects. 
Thanks for the response. I saw some titles of projects, but I didn't understand what those projects were about. Are most of them for tools that run in Eclipse by being a plugin?
Interesting! I will have to Google on some of those names. The last "Lotus Notes" I heard about was software in the late 80s/early 90s. Is the org that does Eclipse an open source project funded by IBM?
Nobody's going to help you before you show that you've at least tried yourself. You must have some code written. Post it.
Exactly!
I don't want to sound rude, but did you write it yourself, because I don't think you should have a problem formatting the output like this.
Not able to trace out the clear logic behind it 
I'm not very good at Java, but this is what I would do : int listCount = 1; while(currentNode != null){ System.out.print("List " +listCount + " : "); for(char c : currentNode.getNodeData()){ System.out.print(c+","); } System.out.println(" "); currentNode = currentNode.getNext(); listCount++; } It would be best if you knew what exactly is happening in your code, because this is pretty basic stuff and you should know this.
I don't consider myself to be a bad java programmer but I honestly have no idea. If someone asked me this question in an interview I probably say "this is why using a null convention is dangerous. I would write my methods in such a way that the parameters would either be populated or have a different version of the method without that parameter. That way you can use validation like that in apache commons to ensure safe behavior and avoid NPEs"
This is about the more bizarre consequences of overload resolution for `null` arguments. This follows from the basic rule of thumb that the most specific applicable method is selected if it exists.
same here buddy , i did not have any clue , But one thing i told the interviewer that null is an Object Data type
 you reach to the conclusion after watching the output , is there any oracle documentation for this 
You learn something every day (I didn't know either) - [Try here ](http://docs.oracle.com/javase/specs/jls/se5.0/html/expressions.html#15.12.2.5)
Gr8 ! But i am not kind of lucky in that sense , I am still an Oracle employee :(
Does anyone have any idea why does the method overloading behave that way? Also, is 'null' being implicitly cast into something else? Questions 1, 2 and 3 feel like they belong in a SCJP test rather than in an interview.
I am scjp certified with 96% , but i never saw that kind of question ...I thought , it was unfair to me to ask that kind of bizzare question :(
Technical interviews should be testing your problem solving abilities not whether you know the intricacies of a language.
So they did not give you the job based on those questions even though you are an Oracle employee? I assume you work as a Java programmer/expert there.
Noo , the result is not out yet , they will inform me , but i thought that part of the interview bit weird . And you do not need to assume , as i am scjp certified as well :)
I would also say that "Oracle recommends using method overloading as little as possible in their tutorials because it introduces confusion."
hmm true , questions are not the good programming practice at any angle 
The method lookup used by javac chooses the most specific valid overload. This way you can have a generic method for Object and a specialized method for Integer and the compiler will choose the best using its available knowledge. Since the null value is valid for any reference type it will always result in the most specific available function. You can observe the same behaviour using an ArrayList and methods taking Object, List and RandomAccess. javac will prefer List if only Object and List methods are available and error out if both List and RandomAccess methods are defined since ArrayList implements both and neither is more specific.
I really think something simple is helpful - have you tried greenfoot - it helps you make simple games, but also learn the idea behind classes etc. From there, I moved on to writing my own simple apps and hung around java ranch - some helpful friendly people hang out there who have good ideas about how to help beginners. Good luck. 
Are you allowed to tell what the other parts of interview were? 
Apply at a better company
lol advice taken sir :)
I've detected a hexadecimal color code in your comment. Please allow me to provide visual representation. [#301183](http://color.re/301183.png) *** [^^Learn ^^more ^^about ^^me](http://color.re) ^^| ^^Don't ^^want ^^me ^^replying ^^on ^^your ^^comments ^^again? ^^Respond ^^to ^^this ^^comment ^^with: ^^'colorcodebot ^^leave ^^me ^^alone' 
That is not a colorcode it is a # tag in the link
thnx for sharing a nice link , but the related information is not mentioned in the link 
thats a bit of harsh for Goldman sachs , i respect them a lot , not for their brand , but for the people who works there 
* http://www.tutorialspoint.com/java/index.htm * http://www.ibm.com/developerworks/training/kp/j-kp-intro/index.html If you are interested in making games with java, you should check out (when the time comes) [libGDX](http://libgdx.badlogicgames.com/)
xactly 
Righto, I'd hope those people you respect don't interview with these questions. 
thnx for being good to me ,I was also hoping the same but unfortunately not turned out that way 
I have a friend who worked for GS in NYC for a few years. He was a CA, but the interview was similarly meant to ask questions someone reasonably might not know. He realized that they were just curious about how he'd react in the situation, rather than finding out whether he knew the answers. In the end he was just hired to wear an expensive suit and look confident in meetings.
&gt;This is a perfect case for using an enum. Using an enum, the code becomes: &gt; public enum Extension { PNG, TXT, AVI, DOCX, JPG, HTML, CLASS, WMV, EXE, SYS; &gt; @Override public String toString() { return "." + name().toLowerCase(); } } &gt; public class MainClass { public static void main (String[] args){ Scanner scan = new Scanner(System.in); Random rand = new Random(); System.out.println("Welcome to the random file extension generator."); System.out.println("Please enter your string of text to have an extension added."); String input = scan.nextLine(); int length = Extension.values().length; Extension ext = Extension.values()[rand.nextInt(length)]; System.out.println("Thank you. Your string with the random extension added is:"); System.out.print(input + ext); } } &gt;This is not only quite a bit simpler than the large switch statement or if's, but you can add another extension simply by adding it to the list of extensions in the enum. Using the switch, you could add another case, but you would also need to change the bound for the Random.nextInt call. &gt;A few other thoughts about your code: &gt;* you should CamelCase your class names in Java (i.e. MainClass not mainclass) * no need to add "my" as a prefix to your variables (i.e. Scanner scanner instead of myScanner) * watch the whitespace around your method declarations. void main(String[] args) {... not "void main (String[] args){" (this is just my preference, but it would bug me if you were on my team) Enum: I've never heard of those, I'll look into them. Thanks CamelCasing: Okay, I'll try to get myself into that habit "My" prefixes: Yeah, that was a habit left over from the book I used to learn Java, I switched to calling them "scan1" and "rand1" and other names like that. Whitespace: I normally do that, I think I probably missed the spacebar that time
Head First Java, for absolute beginners. It's worth the time and money if you're really invested in learning Java. Do the exercises on each chapter. The fastest way to learn is to code as much as possible. http://www.amazon.com/Head-First-Java-2nd-Edition/dp/0596009208
I'm going to guess that because the bot looks at the comment source, it's going to see part of the link and interpret it as a hex code. 'Course, there's little you can do as a work around, except requiring either a space before or after the code.
/*This program calculates the BMR of a woman and man. Also it *calculates how many chocolate bars is needed to maintain your BMR. *Shayan Nick Raissian *shayanraissian@gmail.com *09/17/13 */ import java.util.Scanner; public class HarrisBenedict3 { public static void main(String[] args) { /** *wBmr = Woman basal metabolic rate *mBmr = Men basal metabolic rate *nCbw = Number of chocolate bars for men *nCbm = Number of chocolate bars for women */ double weight, height, age, wBmr, mBmr, nCbw, nCbm; /*In this section I am having the user input the variables *using the keyboard. */ Scanner keyboard = new Scanner(System.in); System.out.println("Hello"); System.out.println("Today we are going to estimate the number of calories your body needs to\nmaintain your weight if you don't exercise"); System.out.println("The term used for this calculation is called basal metabolic rate, or BMR"); System.out.println("First thing I need you to do is input your weight in pounds"); weight = keyboard.nextDouble(); System.out.println("Next input your height in inches"); height = keyboard.nextDouble(); System.out.println("Last step is to input your age"); age = keyboard.nextDouble(); /*This section includes the formulas needed to compute a *the two BMRs. */ wBmr = 655 + (4.3 * weight) + (4.7 * height) - ( 4.7 * age); mBmr = 66 + (6.3 * weight) + (12.9 * height) - (6.8 * age); String temp = scanner.next(); char gender = temp.charAt(0); if (gender == 'w') { System.out.printf("If you're a woman then your BMR is " + "%.2f%n", wBmr); } else { System.out.printf("If you're a man then your BMR is " + "%.2f%n", mBmr); } /*This section includes the outputs of the SBMR formulas. Also I include *the extra credit portion so that there is only two numbers past the decimal point. */ System.out.println("Now we are going to calculate your BMR"); System.out.println("Beep Boop Bop"); System.out.printf("If you're a woman then your BMR is " + "%.2f%n", wBmr); System.out.printf("If you're a man then your BMR is " + "%.2f%n", mBmr); /*This section includes the formula for calculating the number *chocolate bars needed to maintain one's weight. */ nCbw = wBmr / 230; nCbm = mBmr / 230; /*This section includes the output's for the chocolate bar *calculations. Also I include the extra credit portion so that there is only *two numbers past the decimal point. */ System.out.println("Now we are going calculate how many chocolate bars are needed to maintain one's\nweight"); System.out.printf("If you're a woman then you need " + "%.2f%n", nCbm); System.out.println("chocolates to maintain your weight"); System.out.printf("If you're a man then you need " + "%.2f%n", nCbm); System.out.println("chocolates to maintain your weight"); System.out.println("Thank you, and Good Bye."); } } 
There is nothing really "wrong" with using primitive arrays. the core of OOP is inheritance, encapsulation, and polymorphism. Using a primitive array to store objects doesn't break any of that as far as I can tell. 
They would have to be writing some ugly, undocumented code to require you to know thrse off tje top of your head
Do you mean English or Java? *"Is the code compiles ? If compiles then what will be the output ?"* Neither of these verbal catastrophes are grammatically correct. Why would I want to work with these people?
Your programming environment shouldn't matter enough to keep you from taking the course. Use whatever you're comfortable with, the language stays the same no matter what you're using.
Boost! It is C++, not Java. But that is some serious meta-programming! I use it as a benchmark for myself in coding. 
lol !! wish it was for English :)
TIL null is more String-like than Object-like
&gt; Neither of these verbal catastrophes are grammatically correct. You could even say... they don't compile(s)... :-)
I've seen similar where I work. A favourite that appears to catch many so called "Java programmers" out. short s = 0; int x = 07; int y = 08; int z = 123456; s += z; System.out.println("" + x + y + s); [edit] I see from the voting/comments some people seem to think that this sort of question is to trying to trick you. They aren't. Generally there is a set of questions to help gauge the level of knowledge of the interviewee, and if they are just BS'ing. But this isn't he sole factor in employing that person. [The answers here](http://www.reddit.com/r/java/comments/1ne1a8/goldman_sachs_interview_please_explain_the_logic/cci3a0t). 
Sorry, you're right. 
thumbs up ;)
thnx for sharing the question , even i got out as well :( . Can you please add some explanation too .
Or writing some sort of compiler.
Constructors could be less verbose, rather than duplication code for no parameter constructor just have it call your next constructor inline when it's doing the same thing. public Player(){ this(1,8.0); } public Player(int level, double strength){ this.level = level; this.strength = strength; 
This is a very nice, interactive course. Teaches you programming, teaches you Java. You can use any IDE you want, or just use the web interface.
&gt; but i never saw that kind of question They are definitely there on the newer (Oracle administered) OCPJP exam.
I just scoured Youtube for tutorials. I watched TheNewBoston's for a while, skipped around, got the feel for Java. Then I just went and tried to do things, accomplish certain tasks and go look up what I needed to know for them. I would suggest watching his tutorials and if you need anyone to personally help you I and a bunch of people around here could help out.
&gt; How is knowing whether null is overloaded as String or Object help with any other language? Debugging someone elses mess. 
To my question? There are a number of things going on in the question. 1. Line 8. The "" in the println causes the numbers to be automatically cast as strings. So it doesn't do addition, but appends together as string. 2. Line 6 the += does an automatic cast to a short. However the number 123456 can't be contained within a short, so you end up with a negative value (-7616) 3. Those other two are red herrings however as the code will never compile due to line 3. Any number beginning with zero is treated as an octal number (which is 0-7). [edit] Just a comment on the Octal identifier. It is almost never used (I'm sure at least one person uses it). However knowing the identifier is part of the Java Certification. So it is a good indicator of someone who has studied for the exam vs someone who memory dumped the questions/answers to pass. 
Red Herring: Trying to distract an audience by deviating from the topic at hand ^^Created ^^at ^^/r/RequestABot ^^If ^^you ^^dont ^^like ^^me, ^^simply ^^reply ^^leave ^^me ^^alone ^^fallacybot ^^, ^^youll ^^never ^^see ^^me ^^again
You're right, but... A GlassFish .0 version is rarely production ready. This was true for 3.0 and is true for 4.0. For actual production I'd wait for at least 4.0.1, maybe even 4.1.
The expression "" + x + y + s is evalated from left to right and whenever a String meets any other type, the String representation of the latter will be used.
null is more *anything*-like than Object-like, which is the point of the questions.
Grammar. 
First of all, please post these kind of questions over in /r/javahelp, not here. &gt; Searched all over the web and also looked throughout my book and power points. PLEASE HELP. What terms did you search for "all over"? I'm 100% sure that your book (and the web at large) *does* cover how to use an `if`. Also, your code already has an "if" in there (for printing the gender). So, what's your *actual* problem and question? Your post asks for help, but you don't state what you want help with.. 
Guava is pretty good.
Guava is probably the most well thought out code I've seen. These guys are obsessive about everything ranging from API design to performance, and they nail it. Not to mention, there's something like 200,000+ test cases? This stuff it so solid, it was used to find a number of bugs in the JDK!
Or writing on a system with no IDE and no internet connection. Both are plausible, just not for a bank like Goldman Sachs.
BORG calendar: http://sourceforge.net/projects/borg-calendar/
If we're going to do other languages, I've always liked the list.h implementation in the Linux Kernel, it's very &gt;I'm an assembly programmer, but I guess you don't have to be.
Tell the interviewer that you don't memorize every edge case of a language when the compiler can flag the errors for you, and that you prefer to use your brainpower to solve complex design and calculation problems. 
*whoosh*
Google commons. Yea, it is pretty code.
Why that one? I haven't heard of it.
I don't think his point is correct; GS makes it clear they want someone who really knows the ins and outs of java, someone who's more specialized than a general problem solver that could eventually get to know java better. Someone they can immediately toss into the fray of whatever crazy unnatural shit they are doing. 
This doesn't compile. `javac` won't accept 8 in an octal literal.
It's *really* well written. There's custom UI made, advanced Java practices used. You'll learn a lot reading the source. It is lacking in the test department though 
Just because there's a bad interviewer doesn't mean the company's bad to work at.
My favorite open source code is MigLayout. 
I kind of like DDD-sample by Eric Evans, http://dddsample.sourceforge.net/
Unless you're hired to debug someone else's mess, it's a terrible interview question.
Unfortunately, I have also been the victim of this sort of "I am better than you" types of questions. This type of inane trivia is what some technical interviews are all about. I usually just answer with "I would look that up in a book" or "I am not a compiler".
Was feeling the same , just did not express it to the interviewer
Not if the job you are going requires a deep knowledge of certain languages. 
yeah , the idea you mentioned is one of the tricks , but i was not able to get out of this nuclear bombs :( , suddenly code appears in front of your eyes , and you dont have any clue wwhat you were saying . 
I know the code is horrible but i'm completely stuck and i'm really new to programming overall aswell.
Sorry, i didint know such subreddit existed so i just tried /r/java since its the language java. As for the problem, I should have included this little bit code: for (int i = 0; i &lt; 4; i++) { If (gissning[i] == datorSlump[i]){ Rod++; } } So. If the array gissning has the values "1,1,1,1" And datorSlump has "1,2,3,4" I want it to return 1 rod and 0 vit Its supposed to work as the game mastermind but very simple. 
Seriously, and if this problem occurs it takes 3 seconds to see and fix it.
a tut on how to use the spring framework would be nice. or java back end web development using java servlets and jsp 
I made it to a third round of interviews with GS for a java developer position in their new Salt Lake office. I ended up on the phone with some old guy asking me questions about polymorphism, which I learned 10 years prior and haven't used since. Didn't get called back...
Hazelcast ( https://github.com/hazelcast/hazelcast/ ) really really well thought code that allows you to create shared collections between JVMs, queues and a lot of stuff so easily that you'll think it's not true.
Thank you for clearing this up - really dislike all of the unfounded GWT hate. It's progressed very quickly in the last 18mo and the major JS libraries are making GWT libraries that render Java into their JS. 
Well this is clearly a java programming test, so you should expect a few curve balls.
You haven't use subtyping in 10 years? 
 &gt;I bet you feel all smug when a candidate fails to see it doesn't compile. Nope. There are three parts to it. Most get (1) &amp; (2) but (3) rarely. Octal is almost never used but shows that they read the whole code. Also knowing the octal identifier is part of Java Certification, so it is generally a good indicator that the person studied for the exam and didn't question dump. Not the worst question that catches people out either. &gt; I also bet you made the same error Yep, many many years ago. 
If op Hasnt picked an ide yet bluej isn't a bad place to start, it offers really easy object creation and method invocation as well as decent debugging for runtime stuff. As a Cs tutor I think it makes a great baby's first ide. 
No. I would ask the prospective hire to explain how they go about integrating unit tests into untested legacy code. That would actually demonstrate to me that the person could clean up a messy project. These interview questions are just total bullshit.
It's a standard technical interview where I expect curve balls in problem solving and having to think outside the box, not whether I know some bizarre behavior of a language. Similarly, if I go into a Javascript interview, I don't expect the interviewer to expect me to know what [] + [] is equal to.
Lombok is a library that enables you to write dramatically cleaner and more elegant code. A lot of the complaints that I have about the verbosity of Java are addressed through features like annotated getters and setters and the availability of the (implicit) val type. Sorry if this a repost but the last post that I could find was from 2 years ago.
Oh man this looks amazing. I cannot wait to get home and try it.
Eeeh, I liked the idea when I first saw it, but found that in the end it adds another step where something weird can happen to your code. 
I've seen mostly positive regard to it, but the compiler auto-magic sometimes is a turn off to some people.
Looks like it was written by C# developers that had to use Java. The explicitness of Java is a big plus to me. Especially when it comes to synchronization you're better off not having any automagic steps IMHO. I'd rather take advantage of IDE tools to auto-generate boiler plate and leave it there for everyone to see. You never know who is going to maintain your code years later. There is less guesswork involved that way.
Again it depends on the nature of the job. Your average developer is never going to need the intricate workings of the JVM, but in some jobs it is a requirement to know the internals in depth. 
Which question, what have you done so far, what's wrong with what you've done, /r/javahelp, www.google.com, etc etc.
For more bullshit like this, checkout Josh Bloch's excellent book Java Puzzlers. "Is the code compiles ? If compiles then what will be the output ?" public class Arcane1 { public static void main(String[] args){ try{ System.out.println("Hello World"); } catch (IOException e){ System.out.print("Wow, I've never seen println fail!"); } } } public class Arcane2{ public static void main(String[] args){ try{ //if you have nothing nice to say... } catch (Exception e){ System.out.println("This can't happen"); } } } interface Type1{ void f() throws CloneNotSupportedException; } interface Type2{ void f() throws InterruptedException; } interface Type3 extends Type1, Type2{ } public class Arcane3 implements Type3{ public void f() { System.out.println("Hello World!"); } public static void main(String[] args){ Type3 t3 = new Arcane3(); t3.f(); } } 
But this isn't the intricate workings of the JVM. It's trivial information and kind of ridiculous.
Oh sure, often times in large companies it depends on the team, you might not even end up working in the team of the people who interviewed you.
All you need is a compiler and a unit test...
/r/javahelp's a better place for this type of question. Also, put four spaces at the start of every line of code - it makes it much more readable (compare the first few lines of what you've posted, compared to the start of the while loop onwards). As a hint though, what output do you get if you put the input as an even number - it results in a sum of zero, which isn't the behaviour you're after. Which part of your code could be causing this behaviour, i.e. where the input number is (incorrectly) being used to determine how the program behaves? Separate note - if you're using an IDE, fire up its debugger and step through your code - it makes spotting logic errors like this so much easier.
The problem lies in your test in the if. That should be enough of a clue to get you thinking
[A high level overview of the magic.](http://notatube.blogspot.co.uk/2010/11/project-lombok-trick-explained.html)
I would love the annotated getters and setters but I am not willing to add yet another library to get it.
Wouldn't it just be easier/better to have a plugin in eclipse that hides all getters/setters? Why package a 2mb jar file for this? What happens when you go to debug and you get a stacktrace, but the lines numbers are all messed up?
As a professional software engineer with decades of experience, you are 100% correct. Libraries like this which require that you are already familiar with the library before you can understand the code are a bad idea.
Heh same here.
Stack trace in a getter? Maybe that's not what you meant, maybe you're referring to a different part of Lombok?
Generally you hire for skills in spring frameworks not project lombok
What's wrong with adding libraries?
It's a good rule of thumb, but I'm willing to grant Lombok an exception, as it's pretty harmless. It's a good idea to use it when you're rapidly iterating your data model, and it's a good idea to remove it when your data model is getting more stable. It shouldn't take you more than 15 minutes to remove.
null pointer, but I am also referring to any code that throws an error in a class, since the file changes on compile I was wondering if it is a different line number, but the getters/setters are probably appended to the end... Null pointer might not be that big of a deal because you can see the method name. So the last question is probably null and void... /badpun
Really? Can you give me an example? In my experience it is highly deterministic and easy to understand.
I can see why you wouldn't want to use Lombok synchronization, but the getter/setter, hashcode, equals, and tostring are gold.
If you hire for skills in a library you're doing it wrong. 
You don't package Lombok. It's compile time only 
You only need it at compile time. There is no runtime dependency.
I can't tell if you are agreeing or disagreeing... So, I'd just like to clarify anyway. Framework is an entirely different connotation from library. Hiring for software designed to run on a specific framework is fine. Hiring for knowledge of a specific library is *lol* worthy because a library is supposed to do what it appears to do; it's why we have naming conventions. One shouldn't need to look at the documentation for a library to understand what a piece of code is doing (albeit, the behavior of method calls would have javadoc that may need referencing). I personally don't like lombok being described as a 'library'; it's more of a syntax-extension. Now I'm a bit lost by your comment...
Ahhh, cool, didn't even think about that, you may have convinced me to try it out.
I was actually referring to your assertion that you hire for spring, not Lombok. "Framework" is just a word for a big library. I disagree with that as a qualification for hiring, but I also mostly disagree with hiring for knowledge of a particular language, so feel free to consider me crazy.
I used it for a real world medium sized application with around 10 developers for over a year and after a brief period of showing people how it worked, the experience was highly positive.
This seems very helpful for people writing code in the wrong way. If you have trivial getters/setters you're Doing It Wrong. Stop asking your classes for data and start making them perform operations. I'm not saying I never have a class like this, but certainly not enough to want to optimize for it.
I like my data structures to be simple and preferably immutable. If you need more complex logic, you implement hashCode and equals yourself and hopefully people actually look at it. Lombok actually makes these cases more obvious because you see the @Override as something unusual, unlike what happens when you generate those methods with your IDE.
Basic reasoning for hiring for knowledge of a language is the existence of the libraries and naming conventions. Starting cold on a legacy codebase in a foreign language is going to make one a pretty useless hire for some length of time. But, on the note of framework, would you not say that framework carries the connotation that you fundamentally change the way that a piece of software executes? Sure, they carry their own API / library, but that's not the big leap. The big leap is understanding that the program behaves differently from the normal JRE we're used to; the programmer is no longer controlling the flow themselves.
Derek Banas on YouTube for sure. That is if you are looking to dive in head first and and feel you will have a decent logic skills and want to move quickly thru stuff
My point is basically that smart people who understand CS generally can pick up languages or frameworks or libraries in short order. Over the last 2 months I've worked on legacy code in one new language and picked up 2 other languages for green field stuff. It's something I would hope any new hire could do.
my apologies. I honestly didn't think about that.
When you have lots of dependency your project becomes more complex. When you upgrade there are more things to go wrong and more places to check when something does go wrong. Some libraries do not work well together and the more you have the greater chance this will come up.
I have a distaste for lombok because of how I was introduced to it. I was inspecting some company code and made a thousand method-not-found errors, until I discovered (&gt;1hr later) an IDE plugin was needed to make sense of the magic. I'll take explicit getters any day -- intelliJ has generators for those.
That depends on your use case. My team writes large scalable rest APIs. They require request and response objects to be serialized and deserialized for transport over HTTP. Simple classes that don't do any work but perfectly describe the request and response format are key for this. That said, I still don't really like Lombok. We have an internal team that uses it, and I'm struggling to see its advantage over auto-generated code. At least then I can see what the code is doing when I'm trying to debug.
looking at the site it looks like those aren't real annotations they're handled by this precompile step thing that actually generates the boiler plate for you. eg it's rerwriting your .javas so I suppose you can write as that then read as normal java.
This. 
spring is fuking everywhere, that should be a stable learn for first job out of college choice for a starter for the next few years. get used to architecture design patterns like mvc ect. here https://www.udemy.com/java-design-patterns-tutorial/ that'll probably learn ya a few there's more though. Most frameworks on a high level will do one or many of those. Also become flexible in paradigm; java isn't just pure object oriented, colleges love to teach it like that, but that's a lie. From there it's just reading javadocs. ooo also reading these helps in understanding weird things http://jcp.org/en/jsr/all not necessarily framework related but for instance something like @Resource you might be unfamiliar with or portals. 
Awesome, I'll definitely check out Guava! It looks like it fills in a ton of the holes in Java core. 
I agree 100% and I only add dependencies when they have clear and overwhelming benefits to the project that I'm working on. There's nothing worse than digging into a project to find that it's a science project filled with spaghetti references to every library dujour mentioned on StackOverflow for the past 3 years. Although I honestly haven't spent more then a couple hours in Lombak it seems to address several gaping holes in Java that force developers to write huge amounts of redundant and unnecessary code. The couple of classes that I've written post-Lombak are amazingly clean and elegant and will be much easier to maintain as a result. Instead of trading elegance for added complexity as is often the case, the concepts in Lombak are so fundamental and straightforward that they can't help but to simplify code. There's nothing groundbreaking here, just simple concepts that Java should have had 5 years ago and I'm sure will be part of Java core by Java 8 or 9. I still have some evaluation to do before I decide whether to start using Lombok in production but so far I'm liking it. Great discussion everyone!
I just wanna know how to do infinite amt
If you're using enough libraries in a single project/service that it becomes too complex, you're probably trying to do too much in that single project.
There are two types of loops: counter controlled and sentinel controlled loops. Counter controlled loops are used when you know how many items you're going to be processing. Based on the assignment description, it sounds like you won't get this info, so you'll need to implement a sentinel controlled loop. A sentinel controlled loop continues looping until a sentinel value is received. It'll be something along the lines of "when you run out of employee data, enter -1." The -1, (or whatever sentinel value you choose), will end the loop. 
Sure. You can prompt the user to see if they want to add another employee. They can type 'Y' to add another employee which will make you go through the loop again. If they type 'N', that can be your sentinel value causing you to jump out of the loop. After that, do all your calculations. 
You said you already have a calculator for one employee. You'll need to stick that in a loop structure of your choice that can test the users response to if they have another employee to add. 
Do you want to see my current one?
Logging frameworks. Log4j, SL4j, commons-logging - you'll get a taste of all of them eventually but you need to understand the premise behind them because you'll use them in nearly 100% of all projects. 
It's a good concept, trying to make Java cleaner, but I feel it seriously abuses annotations. I'd rather just have $JAVA_IDE generate the boilerplate for me.
Code, of course. I am an engineer, code is the best documentation for me. I would glimpse through the documentation to get the main concept and then dive straight in to the code. Half an hour later I would be typing an email to library authors about mistake in their documentation, btw.
As do Eclipse and NetBeans, for anyone interested
Once you find them you're stuck with them :-) 
CDI came in JavaEE 6, but EJB annotations were introduced in JavaEE 5 (@Stateless, @TransactionType, etc.) in 2005. Seam followed not long after that (and included e.g. annotations for web beans like @RequestScoped).
I have to agree about the hiding getters/setters part - I do this in NetBeans all the time, collapsing the code around them. The only hitch is that (unless things have changed) setting it as default for a class involves specially formatted comments at the start and end of the block. I would be interested in such a plugin, to automatically hide gets and sets with trivial implementations.
This library has played havoc with our project since embarking its own version of com.sun.jna
Yeeees, because it is always smart to hide essential functionality. No thanks.
Just be aware lombok will only compile on ecj or sun's javac. Not a huge problem, but its not as clear as it should be so that people don't get burned by that.
* Arcane1 will not compile. IOException is a checked exception and thus needs something that throws an IOException in the try block * Arcane 2 will compile (but will not do anything). Exception is also a checked exception so you would think you're in the same case as in Arcane1 but Exception is the exception (haha) to the rule. I presume this is because unchecked exceptions also inherit from Exception. * Arcane3 will compile and output "Hello World!". Extending methods with the same signature but different exceptions is allowed, but you can only throw the first common superclass of the exceptions (Exception in this example)
Ah! I see, thank you! Actually tried to the latter one, but I now see that I "misspelled" it. Thanks a lot :)!
Libgdx is great for game dev with java! I'm on mobile so I can't do a big writeup, but start with then wiki at www.github.com/libgdx/libgdx/wiki There is an article for making a simple game, plus there are a lot of good articles on the internals of libgdx, plus I'm pretty sure all the other frameworks that people are gonna mention are web frameworks. And that's no fun!
Groovy's got much of this already, no? Differences?
Its a terrible project, it hides way too much. I've seen it in use in enterprise software, trust me, stay away from unnecessary annotations!
I'd second this. A good place to start in Spring is learning Dependency Injection i.e. the @Inject annotation. Learn how to write stateless services and wire it together using Spring. Almost every project using Spring will make use of this strategy. WRT patterns, if learning MVC it's worth looking at MVP as is much more testable. Google have a number of tutorials and videos for using it in their GWT web framework. 
Might be possible 
I remember trying to use EJB and hated myself for trying. Perhaps it was my younger self being overly confused (likely), but I always recall it being quite confusing whereas Spring was straightforward with Java configuration (I'm the first to agree that the XML stuff was pretty lame -- and it still persists today even! It amazes me that quite often the documentation defaults to the XML style instead of the Java style).
 the behaviour you're seeing around being able to catch it without anything in the try block which is declared to throw anything is due to http://docs.oracle.com/javase/specs/#14.20 It is a compile-time error if a catch clause catches checked exception type E1 but there exists no checked exception type E2 such that all of the following hold: E2 &lt;: E1 The try block corresponding to the catch clause can throw E2 No preceding catch block of the immediately enclosing try statement catches E2 or a supertype of E2. unless E1 is the class Exception. The reason for this is RuntimeException, which is an unchecked exception subclass of Exception. So unlike all other checked exceptions, it's possible for catch (Exception) to catch an unchecked exception, which can be viewed (in a simplified model) as being potentially thrown by any try block.
IF (and that's a big if) I was to do this, I prefer the Spring Roo way of doing this using aspects to hide the boilerplate. That said, I still prefer using the IDE I think.
You are very wrong, and I believe quite inexperienced in said matter. Sure, there are different frameworks of different complexity, but talking about Spring - you do hire skillfull Spring programmers. Sure, making some basic Web Shop application with some basic DI and some Hibernate would be quite easy for anyone. I could write it in any language I know or don't. But practice shows that there are no perfect projects. Here's an example of a Spring-based project I worked on: it used spring as a core with apache shiro for web-authentication, and LDAP authentication through Spring Security, Jersey for REST (it started as Spring 2.0 which had inferior Rest support), uses several Spring abstraction (cache, transactions, etc.) and Spring Webflow which is also tightly integrated with JBPM, specifically - human tasks. Moreover, most of webservice classes are also wrapped with Spring AOP to provide request/response logging and service status monitoring (using SNMP traps). And don't get me started on unit and integration tests that test all that stuff. Now, for a person who knows how everything is coupled together - it's a piece of pie to add a new webservice or create some new form or even to (gasp) refactor some classes. For a person "skilled in Spring" - it will be a month of learning, but eventually he'll get it and become part of a team. Such person knows how Spring works internally, what is needed to be aware of, what are the reasons for specific exceptions, and so on. However, we would never hire a person who has less than 2 year experience with Spring (maybe a year if he's experienced in other frameworks we use). Reason? Money. We would have to waste half a year on him, and during that time he'd be able to fix bugs and do some minor modifications. Even after he learned everything there is with the project, it would be a nightmare to get an estimate on anything or even be sure that he did not fuck up some subsystem with some "minor" refactoring. Framework is not just "a library", it's a whole system that has it's own style (which you have to understand), it's own syntax (names of classes, structure of packages), it's own problems and ways to solve them. Unexperienced person will waste too much time solving those. 
The actually seem to be based on the same principle, when I use Lombok Eclipse's autosuggest suggests the Groovy annotations as well as the Lombok ones.
I agree that some aspects of it complicate things such that it makes debugging difficult. But is it that useful to be able to step through getters/setters? For simple getter/setter/equals/hashcode/tostring/construtors I like it. Autogenerated code is nice but no code at all is nicer (in the limited scenarios above, in my opinion).
While Lombok *can* emit source code for some specific purposes (Javadoc generation), in normal use there's no precompile step. Those are real annotations handled by the compiler and Lombok hooks the compiler to inject its own bytecode at the appropriate time. 
Believe what you want. I'm not trying to get hired. I do have years of experience with spring (security, aop, etc), jax-rs, jax-ws, blah blah blah. I don't think it's as complex as you make it out to be.
If explicit is always better than implicit then we'd all still be writing in assembly. It's a trade-off, where expressive power is gained by being implicit. 
You are right, in the end it is not. But if you hire a guy that is not skilled in the main framework you use - you will need to pay him for the time he will steal from other team members helping him, time when he won't be 100% productive and usually some time when the customer is not satisfied with his results and needs some bugfixes. Combine it with the fact that at average programmers switch workplace once in 3-4 years and in the end, it is much cheaper to hire a programmer who already knows how to use your frameworks.
**Is the code compiles?**
I was making fun of the grammar.
&gt; I remember trying to use EJB and hated myself for trying. That must have been EJB 2.x or ealier. EJB 3.0 and later have always been very straightforward, not in the least because of the annotation driven development that Sun started in 2005 (long before Spring!)
I think you'd be hard pressed to find something less self explanatory that. @Getter
Intellij has a Lombok plugin, you don't install Lombok like the way its hacked into eclipse.. Just intellij doesn't support SneakyThrows
I've never seen anything like this in C#...
getters/setters: public string ThisIsCSharp { get; set; } also "using (....)"
No one can give you an example because you're right, it's deterministic and simple. If compile-time complexity is the concern, you'd be wiser to disable optimizations in your compiler before chucking Lombok. 
I'm not sure Groovy's 'stealing' if it came first; I know the getter/setter behaviour was there in at least 2007 - Lombok didn't appear to start until 2009.
Could you show a snippet for how to do this in a pom file?
If you mean application frameworks, then Spring is certainly worth looking into. The best way to get your head into Spring is to read about design patterns, because what Spring does is implement application design patterns in such a way that: * all the common stuff is done once-for-all &amp; * there are hooks for the domain specific stuff.
lol ! indeed
No, it's not 
Run mvn install instead of package to add it to your local mvn repo.
Err... That's not really comparable. Besides, Java has an equivalent of *using (...)* starting with Java 7: Try-with-resources. And *{ get; set; }* is still a compile-time thing, no magic involved... It's just a shorter way of writing: get { return _var; } set { _var = value; }
If you think your biggest problems are solved with some syntax sugar, your problems aren't worth posting about.
Bugs and performance issues.
As a developer on Guava, thanks :D
Cool, that's what I use. If it sounded nice there is a bluej plug in to get that functionality in eclipse. 
This is the guy i started with, hes pretty good but too much comedy in his videos, I've found out thanks to the guys in reddit that Derek Banas is much better at explaining things, And wish i started with him. I'm also saving everything i learn to come back to later if i forget a method name, or something small to come back to.
That's why you can't let people who can't see past their own work make decisions which significantly impact others.
I can't tell you how much I bang on about Guava to my coworkers, even wrote a Guava by Example guide based on our code and how to do the same things the Guava way. Couldn't imagine working with Java without it :) 
Sun(not sure) made some really good and straight forward tutorials. http://docs.oracle.com/javase/tutorial/
when i learned python, the only thing i had to worry about was either downloading python 2.7 or 3.3, i chose 2.7. With java, what are the versions of anything java uses that i shuold be using. 
You'll want the [Java 7](http://www.oracle.com/technetwork/java/javase/downloads/index.html) JDK. Java 6 is being phased out, and Java 7 should be able to run most libraries/applications written for older JVMs.
You're basically always safe to start with the latest Java SE JDK from Oracle (http://www.oracle.com/technetwork/java/javase/downloads/index.html). Right now that's 7u40 -- Java 7 revision 40. JDK version numbers are a little confusing... Just know that "Java 5", "Java 6", "Java 7" refers to the minor version number, so it's 1.5, 1.6, 1.7. Unlike Python 2 -&gt; 3, a Java 7 compiler will still build very very old code, and very very old .class files will still run with a Java 7 runtime (JRE). However, code compiled by Java 7 will not usually run on older runtimes (unless you use special compiler settings and are careful not to use any features that didn't exist for the target runtime)
javac is capable of compiling for previous versions of java, and old code will be compatible with future versions of java. So really the only sensible answer is to get the latest version, whatever that may be at the time. If you need to pander to users running older versions of java - no sweat, make the compiler target a lower version and none of your existing users will suffer (however, you will lose out on some of the nicer stuff like switch(String) and diamond notation) [edit] If you're compiling for an older version, the only real gotcha is that you have to make sure you're not using classes which were added later than the version you're targeting. An example would be the java.nio.Paths class, added in Java 7.
I can't speak for everyone else (or elephantgravy) but I prefer IntelliJ IDEA (community ver.) over Eclipse, it just seems to do much better in absolutely every aspect. That said, downloading the latest can do no harm. After all, they only get better as time goes by and code gets improved.
I would go with JSF and PrimeFaces. This is a modern web development framework. There is still a lot of Spring MVC out there but a lot of it has become redundant to the standard JEE. 
Pretty much. It takes a bit of time to get used to Eclipse and Java in general, but if you do some of the Hello World tutorials, it should help you understand more about importing libraries and creating a new project. 
Java is a language that you need to sit and concentrate to learn I found. Once you wrap your head around Object Orientation, and play with programs the same way you play with Legos you'll be fine.
Not what you are looking for, but [this website](http://www.learnxinyminutes.com) is a great reference. I am on mobile, but that website should be correct.
Snag IntelliJ instead of eclipse. 
I typically roll with a boolean variable called done that initially is false. Wrap the whole bugger in a while (!done) { }, then when you want to end, you set done to true. edit: mobile typo
Normally I would use static Groovy when I want succinctness in my project: @CompileStatic class MyClass { // automatic getter, setter, and set the default access level to private String name // method are implicitly public def static main(String [] args) { // automatic constructor creation def myObj = new MyClass(name: "Andrew") // or you can simply do println myObj.name which will go through myObj.getName() println myObj.getName() } } It integrates seamlessly with your Java code, provide approximately the same performance (sometimes faster than Java, sometimes slower but only at most 2x), and no weird thing had happen so far :) + can be integrated with AOP.
weird like what? or conjecture?
http://lynda.com has excellent tutorials for much of the basics and a few advanced things. I have found them to be top notch. But you know what is harder a than learning the language....it's the toolset and workflow and all the stuff you don't learn until you are on a big team. The language is not too hard, but there are not really any online tutorials for the workflow for a large java project using eclipse, doing debugging, maven, jenkins, storing artifacts into a nexus repo etc..
is there a good bok for beginners on that?
took me an hour to get a hello world program working, i actually took java like 5 years ago at school and got an A, but i didnt learn or remember much of it. I am getting flashbacks when i create a class in eclipse, i remember that from college. I dont even remember how to declare variables though -_-
Wouldn't think so. Every team is going to do things a little different. best I could say is try collaborating on a project with someone. 
I think that there are 10 year old kids in Mumbai who are working on élancer as a sr java Architect. Shouldn't be tough for a bright boy like you to pickup.
There's a really good Java programming class on Udacity. It would be great for someone with your experience! Here's the link: https://www.udacity.com/course/cs046
[This article](http://www.jaxzin.com/2011/09/simplifying-logging-with-maven-and.html) shows you how to deal with that logging mess with &lt;dependencyManagement/&gt;. 
[Best place and ways to learn java](http://www.reddit.com/r/java/comments/1ne2jo/best_place_and_ways_to_learn_java/) was posted 2 days ago. Start there.
Lurking. Python programmer who is moving to Java.
Hey man, typically people wont answer homework type questions but Im willing to point you in the right direction. So what I think your supposed to be getting from this is that the results of the replace method dont alter the string passed in. Instead of trying to do all of these things as text2 through 7, try String text3 = text2.replace('e','3'); and continue the replacements down the chain. Then at the end just print text7.
I'd recommend starting with something like the JDK, Notepad++, and the command line. Write your first program there so you get the hang of it, then move to an IDE javac Program/ProgramName.java (This compiles the source) java Program/ProgramName (This runs the program) Note the forward slash, you need it even in Windows. Example folder structure in Windows: Bicycle\CreateBicycle.java javac Bicycle/CreateBicycle.java Dir Bicycle CreateBicycle.java CreateBicycle.class java Bicycle/CreateBicycle
Thanks a lot man. I tried this but it only printed text7's replacement, changing the spaces to underscores. Huh.
You should call your class L33TSp33k. String output = text.replace(' ', '_').replace('b', '8').replace('o', '0').replace('i', '!').replace('e', '3').replace('a', '@'); System.out.println(output); EDIT: I Suppose I should explain myself. replace returns a String that has been changed and replace is on the String object so we can just effectively chain calls to replace and retrieve the fully changed String. Anyway, what you need to do is take the previous value and replace it. Your text is untouched since last time because replace returns a new string and does not alter who called it. So, do it to text and store it to text2. Then do it to text2 and store it to text3 - on and on until done. And then only print the last String.
You can do it the way clamped nerve said or chain the calls by doing String text2 = text.replace('a', '@'); String text3 = text2.replace('e', '3'); String text4 = text3.replace('i', '!'); String text5 = text4.replace('o', '0'); String text6 = text5.replace('b', '8'); String text7 = text6.replace(' ', '_');
think of buckets, you fill one bucket and then pour that one into the next one, and so on. each time you pour, you alter the liquid. the final bucket will have what you want. every time you say: String text2 you are creating a bucket. See how you are pouring only one bucket "text" into all other buckets. It's always the same liquid. Try to read your code as if it were a story. edit: I think I found the mistake in your thought process, System.out.println(text.toLowerCase()); does not actually change the contents of what is in "text", neither does text.replace('a', '@'); change the contents of "text". think of the . as a plus sign, you are just saying x+y, you haven't changed "x", to do so, you would have to say x = x + y right?
how can such simple code as this return variable; or this variable = argument; throw a nullpointer?
I would recommend http://thenewboston.org/tutorials.php It has Java- Beginner, and Intermediate there Step by step that covers pretty much everything you need/want and will get you started pretty well. 
I am in a similar position as you (python to Java) and what worked for me was Ivor Horton's [beginning java](http://www.amazon.com/Ivor-Hortons-Beginning-Java-ebook/dp/B005LVQP0C). The problem I was facing initially while reading tutorials or jumping straight into projects was that I felt the java knowledge I was picking up seemed disjointed and there were things I didn't understand until I sat down and went through the book. I have covered all the chapters apart from the few GUI related chapters at the end and it seems to be a decent book so far, although I am just a beginner so maybe others have better advice. I am reading through Effective Java by Joshua Bloch now.
It does not require knowledge of which version of method will get called, the debugger will step into the correct one for you.
&gt; the debugger will step into the correct one for you. No, the debugger will step into the correct one for itself. Look at the OP linked questions, if you don't know the correct answer the person is probably going to go "wtf?" when the debugger is in JavaHungry(ArithmeticException ae) instead of JavaHungry(Object o) when calling JavaHungry(null). 
I disagree. If the person is confused by that, then they probably shouldn't be applying for a programming position. It's perfectly fine not to memorize whether the more specific or more generic method will get executed, as long as you realize it's going to be one of those, because it takes 5 seconds on a debugger to figure it out when you're debugging. This is precisely the kind of trivia that you should not be memorizing, because it's trivial to test or lookup if you need that information.
Knowing trivia is not how you maintain people's code. If you rely on your knowledge of trivia to catch those kinds of issues, you are doing it wrong. We have debuggers and tests for precisely that reason.
You say Triva, I say material that anyone who has worked day in/out in the subject matter would be aware of these oddities and the implications. Tools are a crutch. 
Java EE is probably the first Java framework you want to get started with. Most everything else with the exception of Play! (which isn't really a Java framework anymore) is based on it. Java EE is a full stack framework, so it covers pretty much everything that a typical web app does. Specifically look at JSF, PrimeFaces and OmniFaces. JSF is a part of Java EE while PrimeFaces and OmniFaces are external libraries. BalusC (StackOverflow/OmniFaces) has a page up about JSF that lists [several tutorials to get started](https://jsf.zeef.com).
You're certainly entitled to your opinion, I simply disagree. Tools are *the* most important part of the job. They allow the programmers to focus on dealing with the things that they are paid to do, not scan code for trivia that can be caught by compiler/debugger/static analyzer/etc. The more things you can push to tools, the better.
Thank you. The machine depending on project x may not have access to the same developer tools; it might only be able to accept a JAR.
alright, ive seen more than afew people recommend the CMD. I actually prefer the IDE since the entire time i did python i used notepad++ and the cmd. However, ill learn through the cmd line first since its recommended in the tutorial to
Created in eclipse, error is 'sytax error insert "}" to complete class body. But once I add it, it shows the same error. 
It wouldn't, but maybe a consumer of the data doesn't do a proper null value check or doesn't expect it to be null and throws an exception. The root stack trace will be in the right location but if you click on getVar() where it says "At location..." it won't link to anything in the source. But I was more concerned with the first scenario, if the code was shifted around, depending on where the getters/setters were placed, but like I said, if that was at the end, it wouldn't matter. Not really a problem, just what if questions. We of course could say it was bad practice but I was just trying to work out how this would work if the source isn't reflective of the generated class, because obviously we can't see the line numbers of the getters/setters in the source.
IMHO, that's cart-before-the-horse. Collaborate on a project, yes! Use version control, definitely.
&gt; But once I add it, it shows the same error. Where did you add it? Obviously you forgot a closing brace *somewhere*. The compiler tries to match the closing braces until none is available anymore - at the end of the file. You just have to find the correct position of the missing brace. You really should be able to do this yourself, without the need of reddit. Check all your methods, if's, code blocks, etc. where you're using braces.
there's at least once a day a thread about this. I really wonder about how all these future programmers will turn out if a subreddit search is already too much :(
Ok thanks for checking it. yes i'm new to learning Java i recently started a computer programming course at university. I believe that maybe my code is incorrect elsewhere. (i'm a little out my depth right now) I understand people might not be interested but I will post the working result once I finish. Hopefully it might help someone in my position. 
Clip clipCopy = (Clip)clip; - isn't copying the sound clip like you're expecting. It's assigning the enum's member clip variable to a local clipCopy variable. I would read up more on the sound api you're using. I did a quick skim of the javadoc for Clip and Dataline, and playing a sound clip isn't a synchronous operation, thus no reason to start it in a new thread.
I googled it extensively and everyone was suggesting to play them in their own thread. I kind of figured simply casting it to a Clip wouldn't "copy" it, but it doesn't have a copy constructor or any way to really copy it, so... Do you have any suggestions? I would use another class if I knew of one that would serve this purpose and allow me the same functionality, being able to play them statically.
There's no reason you can't invoke the clip's play method from one of your methods defined in the enum (no need to invoke in in context of another thread). What I suspect you are trying to do is have the ability to play a single audio clip multiple times, simultaneously, controlling the playback of each instance independently. It appears this approach, at least with the Clip api, won't support that. I'm not familiar at all with with java's audio api, so I'm afraid I won't be able to offer much help there. Take a second look at your Clip creational logic, and the associated javadoc. I suspect you'll have to create a Clip and/or DataLine each time you wish to play a sound. Also, look at this. I think it will help if you're trying to do what I think you're intending. [http://docs.oracle.com/javase/7/docs/api/javax/sound/sampled/Clip.html#open(javax.sound.sampled.AudioFormat, byte[], int, int)](http://docs.oracle.com/javase/7/docs/api/javax/sound/sampled/Clip.html#open(javax.sound.sampled.AudioFormat, byte[], int, int)) 
It doesn't. You will get a compiler error every time.. sounds like a typo to me
Definitely a typo. You will get compiler errors if you try to assign an int value to a method that returns void.
And /r/javahelp is linked in the sidebar. I should have pointed him/her there.
Like someone else mentioned its probably just a typo as a teacher these things often happen especially if like me you are new to teaching :-p on the upside you learn to debug the teachers code :-p
I don't think opening a clip every time I fire a weapon is going to work very well performance-wise... there has to be a way...
Change to (num1 - 12). Without the parens it is appending the value of num1 to the string, then trying to subtract 12 from the string. The parens cause the subtraction to happen before the string concatenation. 
Poorly indented code, poorly compressed images, poor quality screenshots showing red underlines in code that won't compile, poorly formatted blog posts. I would say the message is more important than its delivery, but the delivery's pretty overpoweringly bad and the message is almost non-existent.
I like the Stanford course on Programming Methodology. It's a good introductory course in Java and programming.
Wow! This is a goldmine! You should copy this over to the other dev subreddits as well (if you haven't already).
Yes, it would be frowned upon. Accept a List&lt;? extends Number&gt;, and use Number.doubleValue().
Look at JSF (JavaServer Faces) in combination with PrimeFaces and CDI (Context and Dependency Injection) to get a good taste of what a modern framework can do for you. 
What do they give you over the auto-generation that all IDEs already provide? Writing these methods for me is a case of writing all of the fields, and then pressing Ctrl-N a few times to generate all of the methods. I then have the huge advantage that I have the methods there so I can read them, change them, debug them and so on - which isn't an option when the code is generated behind the scenes.
I'll look into that today, thanks. Edit: StackPanes seem to be made with the intent of combining components. Is this really the only/best way to do it in Scene Builder? As noted in the other comment, I'm also a little confused about just where the functionality of FXML and Scene Builder is supposed to end. My left-side TreeView will have a population of TreeItems that will never change; am I meant to populate the TreeView at runtime, as well as add all the specific functionality of the TreeItems? Am I meant to code them directly into the FXML file that Scene Builder generates? Either of these options seem clumsy, but I can't find anything about SceneBuilder that would allow me to define this kind of functionality. Maybe for this functionality, it's best to just code it all within Java?
Is there something in Scene Builder that lets me specify this in the resulting markup language, or is this the sort of thing I'm meant to fill in by hand post-scenebuilder? I guess that's where I need a little understanding; at some point the generated UI code ends and the hand-coded functionality begins. Given that I've hand-coded all my UIs in the past, I'm not sure of where the seam is.
&gt; spring is fuking everywhere, Might be your corner of the world, but I see Java EE and JSF used at more places. Spring is there in a lot of old projects, but many newer ones are Java EE.
Stackoverflow.com
An enum - Mood.HORNY - Sexuality.HETEROSEXUAL
Reflection
It's an analogy. It doesn't have to have a remotely literal meaning.
Ya know, Java is like a box of chocolates. 
In what way?
Any chance of making that guide available outside your company?
JSF framework is a good one to start. There are many books and tutorial out there that you can check. One online tutorial that I would recommend is http://balusc.blogspot.nl/2011/01/jsf-20-tutorial-with-eclipse-and.html Very comprehensive, and there you would be guided in every single step how to make a working web applications.
Check out this site: http://chortle.ccsu.edu/CS151/cs151java.html We used to use this professor's course in high school for our Java class, its where I learned the basics of Java.
What version? There are a few outstanding bugs with pipelined transactions, i have a pull request for a few operations that was accepted verbally but never merged to master before this past release... look in the issues page on their github? 
I'm using version 2.2.1. I also tried version 2.0.0 as suggested on the project page on github, but it gave another exception (something like "B cannot be cast to java.util.List").
This issue comes from the fact that the Java compiler compiles code left to right (like most languages) So what Java sees is: "The hour is " + num1 "The hour is &lt;num1&gt;" - 12 Which is a String minus an int, which isn't allowed. So, like /u/treerex said, adding parenthesis around (num1 - 12) will force the Java program to do num1-12 before the String concatenation Also, you are going to run into an issue checking the value of num1, because you never assign it a value before checking that it is &gt;= 13 
I don't think you'll find many people on the various programming subreddits who don't know about stack overflow.
There isn't anything simple that fits the bill. Lots of if/else statements are your best bet, but if it is getting really complicated, you might want consider refactoring to something like the command pattern.
&gt; A memory leak isn't creating an object and forgetting you still reference it somewhere, that's just crappy code. All memory leaks are a result of "crappy code". A memory leak is caused by not cleaning up properly, forgetting to do a reference = null in java is practically the same as forgetting to call refDec(),unref() or whatever your ref-counted objects use in c++.
Doesn't the compiler also follow PEMDAS? String myString = "Hello" + 6 * 4; Has no problems, because the multiplication is done prior to the string concatenation. 
``Enum.valueOf()``
You'd think, wouldn't it? I sometimes would like to point people to [google](https://www.google.com/), too. As long as people keep submitting "questions" about homework and even trivial stuff like [syntax errors](http://www.reddit.com/r/java/comments/1nl6p6/can_anyone_help_me_with_a_code_tiny_error_i_think/), it's obviously needed. 
Check out these: http://www.reddit.com/r/learnjava http://www.reddit.com/r/learnprogramming
Those reddits are good for asking questions, but i really don't have a clue about where to start learning.
We've had this debate before (maybe not with you), but Gradle is a programming language. You can abuse it. You don't have to follow any convention. And sure enough, ever gradle build I've seen recently has a bit of its own "magic" in there because somebody didn't want to conform to a convention. It's imperative. Maven is declarative. You declare the project, then let convention take over. Once somebody goes through maven ramp-up, you can put them in front of any project and ask, "how do you run the tests" and the answer is always "mvn test". How about for gradle? Sure, if you install the maven lookalike plugin it might be "gradle test." Or they wanted something run before tests, so it has to be "gradle test-prepare test" or "gradle mytest". You can't know until you look at the code. Gradle is fine, but it's not what I want in a build tool. And your point about Ant being a first-class member in Gradle is a huge detractor to me, not a selling point. 
1. And **never** use Integer in for-loops: for (Integer i = 0; i &lt; 10; i++) 2. ~~Never~~ use Boolean in class fields *edit:* only if you known what you're doing ;)
And it even has a delombok tool!
I think I understand your reasoning for #1. It doesn't really make sense in the context of for-loops. I wouldn't call it a hard-and-fast rule, but still good advice. But I don't understand your rule #2. What's wrong with using Boolean as a member type? Sometimes I'll use a null Boolean to represent an uninitialized value. It's really very useful.
&gt; It's really very useful. I agree, but uninitialized (null) value may cause NPE like in the Integer example above
I ignore autoboxing warnings, until the other day.. ResultSet RS = doSomeDatabaseQuery(); Double foo = RS.getDouble("someDoubleField"); Silly me, thinking "getDouble()", which returns a field from a database which can quite plausibly be NULL, would return a Double. No, it returns a double. If the value in the db was NULL, it returns a 0. What you actually have to do is: ResultSet RS = doSomeDatabaseQuery(); double foo = RS.getDouble("someDoubleField"); Double bar = RS.wasNull() ? null : Double.valueOf(foo); Because I had autoboxing warnings turned off, we didn't notice this bug. Let this be a lesson! Don't ignore warnings!
This was the cause of the bug that I fixed today - and thus the friendly reminder. I wonder why they chose to return primitives instead of objects considering that the field returned could be potentially null. I imagine when they were adding the wasNull method, the design was questioned. Or, at least, I hope the design was questioned.
Check out [Sparx Systems' Enterprise Architect](http://www.sparxsystems.com). It can generate Java (and other languages) based from a wide variety of model languages. Edit: OP didn't specify that he wanted something to export 3D models. I thought he was referring to class or domain models.
I have a guess... try it again with the () but make it (5.0/9.0) and tell me what happens.
We certainly questioned it in our office :)
Sorry I'm really new, I'm only in AP computer science I and the code worked at school, then I brought it home and tried it and it didn't. I guess I'll learn more about it later on in the year. I just assumed that if I didn't put any parenthesis then it would have multiplied it by 5 and then divide it all by 9. Edit: Oh I did get a operator precedence chart, I just forgot it the lowest level goes first or if the highest level goes first.
When you say 5/9 the answer will come out to something like .55555, but integers cant hold a value like that, so it rounds it to 0 in this case. by adding the .0's to the end it makes them doubles rather than ints so the answer is able to be values like .55
Oh okay thanks for the explanation!
Spring framework, Jpa; IDE: Intellij
I'm writing a program that has the exact same setup as yours, so I know it works. However I have no experience with the scene builder, but most likely this must be done by "hand".
If you look for java jobs, you'll find enterprise backend stuff and android stuff. If you look for game engine simulation etc or applied data science you might find more of what you're looking for.
Note that at least for the latter you'll likely be using the jvm if not java itself... the former not so much
Look for Data Scientist jobs.
It has to do with what data type is returned when you multiply a double times an int, or divide a double by an int.
Start learning new languages now. Not just languages, by the way, but algorithms as well. Look up financial quant/programmer jobs. They want smart people and they pay well.
ehhh it could just be the dc area but I don't think I can find anything around here that doesn't require it =/ a lot of legacy integration with, government work, requiring weird duct tape solutions
I have no clue what you are trying to do. Are you drunk?
You mentioned a couple years of Java experience, how long have you been working in the field overall?
You don't want a Java job, you want a job as a scientist/physicist/mathematician that also happens to use programming. *Maybe* some big data jobs might interest you.
JetBrains products are incredible and worth the cost!
Not usually, Most places you go will have in house systems, frameworks etc.. that they will want to mesh with whatever new code you write. I don't know if it might be easier to approach it in the opposite way. If you narrow down your focus to more specific work that you would like to do, you may be able to search for that instead of based on a particular language. It seems like they would be more likely to advertise on the basis of the work involved especially if they didn't care what language was being used. I have worked some in Biomedical Informatics(with java), and some of that might be more similar to what you have in mind, but it depends on your specific interests.
Non-native speaker?
It is hard to find a job that is programming intensive and also involves solving difficult mathematical problems. But they are definitely out there for Java developers and demand is HIGH, so the sky is the limit.
Where are you located? 
2d or 3d? 
Apache http server
I apologize for the language, but I'm not english native and also because yesterday when I wrote that was already very tired :P I'll put another post where I detail what I want (screen scraping). http://www.reddit.com/r/java/comments/1npqql/jsoup_cant_login_on_page/
From /r/learnjava, [learn java resources](http://www.reddit.com/r/learnjava/comments/wjazj/learn_java_resources/). The /r/javahelp wiki: http://www.reddit.com/r/javahelp/wiki/index And you're not the first to ask this in /r/java: * [best place and ways to learn java](http://www.reddit.com/r/java/comments/1ne2jo/best_place_and_ways_to_learn_java/) * [Beginning java programming. What are some good resources?](http://www.reddit.com/r/java/comments/1n6x7h/beginning_java_programming_what_are_some_good/) 
Right.. so what about debugging?
The best thing about Java imho is that, generics aside, this is as complex as the language semantics ever get. Now compare that to rvalues and universal references in C++..
3d
What I was suggesting to /u/karthus25 is that an int times a double results in a double, which when divided by a double also results in a double - which is why when he removes the parentheses the code does what he expected (returns a double.) An int divided by an int results in an int (in this case, with a value of 0) and when multiplied by another int, it remains 0. I phrased it in the form of a rhetorical so that he could do his own investigation and gain this understanding.
Spring and weird duct tape solutions. Sounds like a perfect match ;)
There's even a key-combo for auto-generating them
What does `if` do? You're hyper-focusing on the condition, but look at the rest.
Depends on why, but java has built in utility stuff for arrays in [java.util.Arrays](http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html). Arrays.sort(array1) Arrays.sort(array2) return Arrays.equals(array1, array2) Of course this only works on one dimensional arrays. This isn't a java problem perse though, it's a general programming problem.
I don't know a lot of java, im just attending a "programming 101" kind of class. We solved this by adding booleans. But thanks anyway :)
My favorite autoboxing gotcha: Object o = true ? new Integer(1) : new Double(2.0); System.out.println(o); What do you think it prints? EDIT: A little clearer: Integer i = new Integer(1); Double d = new Double(2.0); Object o = true ? i : d; System.out.println("i=" + i); System.out.println("d=" + d); System.out.println("o=" + o); 
I meant C. Some more recent scientific models might use C++. C# is too new and too restrictive. C# runs on Windows only, while most scientific models run on *nix.
Put a println() after the first connect(). Maybe this site isn't keeping the login in a cookie. 
If you manually do a post to the login url with those parameters does it log you in successfully? Also, it appears that the url you are providing already has some parameters in it - s=000009z-redirectDefault&amp;secure=true - Try pulling these out into the .data call and see if you get a successful login. Connection.Response res = Jsoup.connect("https://lite.betfair.com/SLoginsubmit.do") .data("username", "testejsoup", "password", "*Jbet123", "s", "000009z-redirectDefault", "secure", "true") .method(Method.POST) .execute(); 
Buy a java book (I bought Head First Java from O'Reilly) do the exercises in one folder, do your own projects in a second folder. Add to the projects with things you learn from the book! Bonus is, as you read the book and learn new things, those possibilities inspire you to make stuff. And thinking about applications of stuff you learn helps you remember them better.
If you literally haven't done anything with Java yet then Oracle provides a [hello world tutorial](http://docs.oracle.com/javase/tutorial/getStarted/cupojava/index.html) which should get your foot in the door
OK I will try 
make sure you understand object oriented programming at a basic level first. I struggled early on with C++ because of this (as well as dealing with pointers). If you're really new to programming in general, try VB.NET or ASP which may be more procedure oriented and straightforward.
Ok sweet i'll look into that to get going, thanks!
cool i'll look into those, that's about where i'm at, no exp. right now lol thought i dabbled in python at one point for a class
I'd really like to see the technical explanation for this.
Looking for a job in Chicago? We have open positions for Java Devs working with our e-commerce platform. Front-end/back-end enterprise level software. PM me.
^ works pretty well. 
What I got was a successful login with a new location, heres the header: HTTP/1.1 302 Moved Temporarily Set-Cookie: JSESSIONID=ABCTEST; path=/; secure; HttpOnly Pragma: no-cache Set-Cookie: s=ABCCCTEST; path=/; secure; HttpOnly Location: http://lite.betfair.com/Loginsuccess.do?s=TEST123 Content-Type: text/html Content-Length: 0 Note that the older version of JSoup does not follow 302 redirects, so to be safe, use this: followRedirects(true) It should take you to: http://lite.betfair.com/Loginsuccess.do?s=TEST123
I started off with [MIT's OpenCourseware](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-092-introduction-to-programming-in-java-january-iap-2010/) when I first started learning Java. There are several different levels of courses you can take and each provides assignments for you to do. The assignments are what really helped me as I learn hands-on.
&gt; Is there some magic way to do this? Not that it would still compile as expected. However, your IDE might be able to autorefactor your classes into static classes under a bogus container class.
Are you talking about archiving .java files into a zip or jar or making one big .java file that is like public class PrimaryClass { } class AppendedClass { } class AppendedClass2 { } Note that in my example, the subsequent classes can't be public or it won't compile.
You'd also need to move imports from the appended java files to the top of the collected file
Uh if you live in Austin then possibly.
Python is actually more popular than Java for Data Science. 
I find video courses very helpful and they always teach something new. 
Whoever said "Coding" is absolutely right ! Video courses might help too in case you find books kinda boring
Please, god, stop using the term "data science" and calling yourself a "data scientist". You're a developer, a software engineer, a statistician, an applied mathematician, or a combination of the above. "Data science" is just as bullshitty a term as "social science" and "computer science". That said, the amount of Java you'd have to learn to use Hadoop is minimal, so just do it.
It really depends on your role. Usually there's going to be more than one person in the group. If you want to know how to analyze data, which means knowing math and statistics, that's different from worrying about networking and Unix pipes, which is more of an engineering job. You don't need to do it all.
Ignorance is probably the best answer to that question. We don't do a whole lot of DB interactions, so we've never spent any significant time evaluating the various options. JDBC did the trick, we never had any problems with it (until this bug cropped up), so there was never any reason to look for a better option.
Why don't you just use the Betfair API?
Thanks to you both I have now created this: #!/bin/sh grep -h import src/mypkg/* | grep -v mypkg &gt; /tmp/Submit.java grep -h -v import src/mypkg/* | grep -h -v package | sed 's/^public//g' &gt;&gt; /tmp/Submit.java echo "public class Submit { public static void main(String []argv) { Main.main(argv);}}" &gt;&gt; /tmp/Submit.java It works for this case, probably won't work for more complicated projects, note that you need to have correct indentation for it to work. 
The executives maintain the website separate from the developers. When I was there the big stink with the (now old) website was that it forced you to do www.mobicorp.com instead of mobicorp.com. Fun times indeed. EDIT: if you're even 1/2 interested in applying, I can get you in touch with the software architect. He's a friend of mine and he could give you a good (current) idea of what it's like to work there.
Someone really hates spring and is downvoting everyone who agrees with you. Fuck you whoever you are.
You're going about this the wrong way. Hadoop is just a detail. What you need to learn is machine learning. That's piles of maths, of course, but if you don't understand it Hadoop is going to do nothing for you. Also, Python is a far better language for data analysis than Java will ever be. A bit of Machine Learning using Numpy is going to beat Hadoop every time, unless you have 270 terabytes of data.
With this background I have no idea why you're asking for help. Learning Java should be about as difficult as tying your shoelaces.
Or use Wireshark or Fiddler to capture network traffic regardless of the application that's causing the requests, which will then allow a fairer comparison between what the browser's doing and what the java application's up to.
&gt; I'd rather learn it well than follow your advice and halfass it. OK.
You are getting a lot of not advice in this thread, so I will try to directly answer what you've asked. &gt;low-level, math-and-science-focused uses of Java Unfortunately, there are not really a lot of tutorials for Java in this area. Unlike other languages, Java does not interface well with lower level code, and it gives you no direct way to accesses or influence its decisions. For several years Sun never made any of the changes the scientific community requested, and so libraries in this area have largely stagnated (despite gains in the JVM's performance). For example, Java is capable of (and does) produce SSE instructions. However, unlike C# or lower level code, you cant actually control when and how they are used. If you try to find tutorials in this area, you will likely find a LOT of out of date information, miss information, and the same basic information repeated over and over. A company called OpenGamma actually has a few [decent blog posts](http://developers.opengamma.com/blog/2011/12/21/the-sparse-farce) and [papers](http://developers.opengamma.com/articles/DGEMV.pdf) on writing scientific Java though. You should also read everything Cliff Click ever says, and [be wary of thinking you know what is fastest](http://www.ibm.com/developerworks/java/library/j-benchmark1/index.html) (a little out of date - but still good). If you really want to know and learn what low level code Java is putting out, the best way to do so is implement algorithms and have the JVM print out the compiled code paths. You can get a better idea of what optimization the JVM can do for you by [looking at the official docs](https://wikis.oracle.com/display/HotSpotInternals/PerformanceTechniques). The other part of JVM performance is the Garbage Collector. Under Java 7 the new G1 collector is used. If you have a decent background in GC algorithms, diving [into the G1 paper](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.63.6386&amp;rep=rep1&amp;type=pdf) should get you up to speed on how awesome G1 is. It generally references the introductory papers for any concept you dont recognize, so follow the references. The final part to writing fast Java code for a math and science oriented application is the same as it is in C/C++. Accesses memory in a predictable way, dont copy memory went you dont have to, try and help the Cache and branch predictors do their job when you can. &gt; I need to be good enough with Java to be a competent Hadoop programmer The first thing you have to realize is that Hadoop is not about parallel computing. Hadoop's primitives are limiting and superficial, and it really only works well on problems that are already mostly trivial. Hadoop is about redundancy and IO throughput, and that is what it was designed for. With this in mind, you should expect to see a slow down when you use hadoop to do scientific computing, at least until you get into terabyte+ size data sets and using 10+ machines. The only reason Hadoop is used for scientific computing is because there are data sets that can't be done on a single machine. There are often better alternatives, but this is what is currently "hot". However, since you want to learn it - I would recommend Data-Intensive Text Processing with MapReduce by Jimmy Lin and Chris Dyer. It provides a good algorithmic description, and unlike many others, actually recognize and acknowledge the limitations of MapReduce. Honestly, if you want to learn Java well - you should replicate all the results from the book yourself in Java. They provide the algorithm description but not the code, so you can fill in that gap. Once you finish, go back and clean up your code. You will be making progress once you realize "oh god I wrote some shit code". Some people claim to benefit from reading other people's code as a "study". I've never found this particularly helpful, but if you do, I would avoid Weka. Its a machine learning library and it does it the wrong way. The biggest thing to learning java well is learning their standard library. Its one of the largest standard libraries in any language, and there is a lot of good tools in it (and some not soo good ones too). Again, I'm a proponent of learning by doing. So I would recommend writing you code, and then looking at anything that is common or looks similar to other parts of your code base and thinking to yourself "how can I avoid this duplication?" Check the standard library for any data structures that match up with what you need, and if none are found, try implementing your own. &gt;if I want to be a serious Data Scientist This is a big buzz word that means little. While its helping some business make a lot of money selling those services, be careful with how seriously you use the phrase / title, and how seriously your potential employer uses the phrase / title. 
Never tried them myself, but cloudera apparently has tutorials.
Primefaces honestly makes my job a lot of fun, we're subscribed to Elite releases and seeing the improvements almost weekly has been great.
Well math intensive can mean a lot of things. If you want something where you are doing cutting edge mathematics, probably aerospace or medical is a good bet. I would say that gaming is generally *not* going to be very math intensive. If you are interested in difficult *problems* that aren't necessarily tied to math, then you have a ton of options. Personally I love to deal with issues of scale and complex system interactions, which you can likely get at any of the big guys. Rarely are there problems with definitions such as "I need to solve these diffeq's to fix my problem", but something like "I need to make this system process the same data, but twice as fast" or "I need to process 500 records / second and split load between 100 machines without ever dropping data" IS very common and does involve a lot of logic. If you are looking for challenging scale problems and would be willing to relocate to Seattle, the team I am on is hiring. Send me a PM
try removing the last if and see if that works, so: else{ System.out.println("blah blah blah"); }
Please post your code to pastebin.com or something... Also, next time please use /r/javahelp
Two things. First, can you use a map? That would take care of the duplicates, at least. With a TreeMap, sorting will be handled for you. Second, if you have to use an array, can you make a second? Have one array have your initial 50 randoms, and have a second empty array. Then iterate through the first and, if the second array does not contain the number, add it. Then use Array's static sort method to sort. There might be better ways, but those are the two I can think of off hand.
Your last if/else if/else statement only checks for if the various tiers are greater than the others. However, what if two tiers are tied for the largest value? Then none of your if conditions will match and you'll never see the "largest bucket" message. Also, that's a pretty crazy if statement. I'd definitely refactor that. The first answer at [this link](http://stackoverflow.com/questions/12381346/java-find-the-largest-number-in-a-list-of-a-number-of-integers-that-the-user-ha) is relevant. Finally, you should put your lines 12 and 13 at the end of your while loop, not the beginning. Alternatively, remove line 7 and change line 8 to be `strEntered = "";` instead of `strEntered = sc.nextInt();` The way you have it now, the program will prompt the user twice the first time. HTH
You'll still have to do something with the remaining element of the array, though. Keep that in mind. Good luck.
Go back and read my last comment again. I addressed both of those questions.
Ah. You hadn't specified that you weren't allowed to use arrays. If you are limited to only what you've learned in class so far, then keep the giant if statement (though you'll still need to fix it to handle the case(s) where two tiers both have the highest count). As for line 12-13 and 7-8 stuff, I did, indeed, address the reason why in my original comment: &gt; The way you have it now, the program will prompt the user twice the first time. Expanding on that, currently when your program starts, you prompt the user and take input. Then you enter your loop and immediately prompt the user again and take input again. This makes the first prompt and input unnecessary. Moving lines 12-13 to the bottom of the while loop will let the first time through the loop use the original input (from line 8) and not prompt the user twice the first time. Leaving lines 12-13 where they are, removing line 7, and making line 8 will also keep the user from getting prompted twice the first time by removing the unnecessary first prompt and input. You have to change line 8 to set strEntered to "" so that it is initialized and you don't get a NullPointerException when you check to see if it equals "Done" the first time through the loop. Those are essentially two ways of achieving the same goal: not prompting the use twice and having an initial input from the user that isn't used. 
C# style properties is a nice fix for useless getters/setters sprayed everywhere. It doesn't matter what's behind the hood, it's made for our convenience.
Looking forward to more. I'll go along for the ride with ya!!
Sure. Sorry so long for reply. I went to bed. :-) PM me. I think I know what's wrong.
&gt;A bit of Machine Learning using Numpy is going to beat Hadoop every time, unless you have 270 terabytes of data. You'll be failing far earlier than 270TB. And when it doesn't fail, you'll be letting it run for many, many days. If you're going to have a data set that never grows, and you know it will work on one machine in a reasonable amount of time, this is okay advice. But r, and C++ directly are also valid in these scenarios and better in some cases.
WTF, have you been in a hole. Every data science job is asking for Java + &gt;mindset is much more of a mathematician, I enjoy unique challenges, physics, behavior, graphics, algorithms, and the type of code that takes a level of creativity and analytical ability to deconstruct just about anything into code Have you heard of Hadoop, Mahout, Machine Learning, etc....
I bookmarked this site. While Spring has a better than average quantity of documentation for an open source project, I've found the quality of documentation, especially for people more to new to it to be quite lacking.
 Debugging fluent apis can be a pain: Object I = something.dothis().dothat(p1,p2).thenthis(a,b,c,getthat(7).when(time()).end(); NullPointerException on line 1 Aw man!
&gt;A lot of the scientific code already written is written in Fortran and / or C. If you're talking about legacy code. New stuff is Java or C++
You'll need a graduate degree for most of the jobs that use the topics you mentioned if all you have is 2.5 years of experience.
[jMonkeyEngine](http://jmonkeyengine.org/) lets you load [Ogre3D models and animations](http://hub.jmonkeyengine.org/wiki/doku.php/jme3:beginner:hello_animation). You just need an exporter for [Ogre3D](http://www.ogre3d.org/). If what you want is to generate all-code animations I don't know anything. And probably doesn't makes any sense. As at last all you are doing is loading data that is just hard-coded into your source.
Actually, R has speed issues because of the way it's designed. C++ will be faster than Python, but with Numpy the actual numerical crunching is written in C, so it's not clear you'll be seeing a lot of performance benefit in practice. And you'll have to spend 4-5 times as long writing the code. But it's true that 270TB was an exaggeration. However, people shouldn't jump at Hadoop as their first approach to this stuff. Hadoop just makes everything harder, and often you don't need it.
Probably just because the API is really old and predates autoboxing. So you'd have to always call .doubleValue() on the object if it wasn't null. Looks like 1.7 added a generic getObject method that can return whatever object type you expect, though I'm not sure if it actually maps NULL to null. 
Does liferay.org have something prepackaged?
If they want a job as a data scientist they should probably get familiar with what employers are looking for and that's java, hadoop and R. In the fast trading space, that's C++
Because I'm concerned you won't get the subtle hint already commented here: You chose a very stupid name for the name of your class. It's conflicting with an existing class which you are importing with another bad practice of wildcard imports. Don't name your class Graphics.
Well, true. I was thinking of what makes sense, but you're right that that's not necessarily what employers are looking for. As someone said, "Hadoop is a straitjacket so fashionable everyone wants to wear it."
Glad you love it guys. I promise to keep those resources updated, useful and interesting.
Nice collection indeed! I like your PrimeFaces page too!
PrimeFaces is awesome. I not longer have to waste half my time working on dumb interface glitches. It really is a lot more fun to work with.
Why Java? Isn't C++ better for the job?
Looking back, would you have gotten a PhD in physics all over again? Or would you have chosen a different topic for your doctorate? Would you have even pursued a doctorate at all?
Depends on the strictness of the compiler you're using, most will allow this as it's pretty obvious what you intend, it's casting the 10 to 10.0
Think of a big project you want to make then learn the bits and pieces. Also looking at other peoples code always helps. [Do some of these as well](http://projecteuler.net/)
[The official java tutorials](http://docs.oracle.com/javase/tutorial/) contain lots of useful information. Personally I already knew some imperative languages like (MSX) Basic and Turbo Pascal before I started on Java, which made it a lot easier to grasp the concepts. If you are new to programming in general, it might be easier if you start with an imperative language like Basic first before switching to an object-oriented one like Java or c#/c++.
Just keep in mind that double rounds values to the nearest binary floating point number. So the double 10.0 might not be the same value as the integer 10.
seems like it would be quick to implement a shitty solution on your own parse line by line drop everything before the first { that isn't an import pop the imports into a set dropping duplicates, grab the implements and extends same process as imports, also grab the class name to id constructors, then drop the last } should handle everything but the exceptionally weird like nameless { } preconstructor things. Might even get fancy parsing method names and ordering them into a good format. It's very not what your supposed to do in general cases though, it's painful to appreciate you might have a weird need. XD
ehh depends what plugins you want one version old will support more, but if you just want it lightest and snappiest latest.
If you are compiling with the Oracle JDK using no options, this will compile. This is called automatic type promotion--you're assigning an integer literal to a double and a double occupies more memory than an integer so the integer can be automatically casted. It's perfectly valid syntax.
he's fine? a bit slow and his codes a bit roundabout, but he's perfect for a beginner. silly downvoters :&lt; 
As a word of warning, that came off as very aggressive
doesn't look too hard to do. Basic forums; all those 0 auths lined up is nice, certainly some polished html on the frontend too, but I really can't thing of anything doing it in java :( might be a nice funsies weekend project for someone :3
Watch Programming Methodology by Stanford University on YouTube. Its amazing introductory to programming and Java. It comes with lots of fun assignments. After finishing that, do some Project Euler exercises. Best of luck.
how is it syntax if it's it involves types? EDIT: tell me what I got downvoted for
I love Java tons. It's a fantastically practical, easy to understand language. But I'm going to give you some maybe counter intuitive advice. Learn C first. I met a lot of students in college that started with Java and had a very hard time grasping some of the more fundamental concepts like stacks, heaps, and pointers. They're not concepts you'll use everyday, but I think they'll help with any language you encounter down the road.
a for statement is read like this: for( initailization; test case if true continue; ran per iteration) so your (i &lt;=100) is testing to see if 'i' is less than or equal to 100 which it will not be for the first 99 iterations. This inner for loop will run for 99 times, and the code at the line //do some timing ... will be run 99*99 times If your just testing some function you can usally just use long starttime = System.currentTimeMillis(); them after, long totaltime = System.currentTimeMillis() - starttime; will give you how many miliseconds it took. If you need more accuracy there is System.nanoTime() but I've never had a reason to use it.
Floats ^(Edit: Meaning floating point numbers in general) are able to accurately represent any integer in their range, because floats have two components: A mantissa and an exponent, which are both represented internally as integers. Consider `1.234e10`, which is the integer `12,340,000,000`. The mantissa is `1.234` and the exponent is `10`. Note we can represent this *exactly* if we decrease the exponent by the number of decimal places (`1.234e10` becomes `1234e7`). So we're able to accurately represent any integer.
It's got nothing to do with the compiler. Any compliant Java compiler will compile that expression successfully.
Please [read this](http://www.catb.org/esr/faqs/smart-questions.html), specifically the section entitled "When asking about code", even more specifically the part quoted here: &gt; Don't ask others to debug your broken code without giving a hint what sort of problem they should be searching for. Posting a few hundred lines of code, saying "it doesn't work", will get you ignored. Posting a dozen lines of code, saying "after line 7 I was expecting to see &lt;x&gt;, but &lt;y&gt; occurred instead" is much more likely to get you a response. \*Edit: Also see the section on doing your own damn homework. And the bit about declaring it as ["Urgent"](http://www.reddit.com/r/java/comments/1nhmji/urgent_java_homework_help/). Honestly, kids today.
What do you mean homework? This is an actual payroll system used by a Fortune 500 company! Lives depend on it, man!
I fixed it, but it only loops everything but hours
&gt;Find what my mistake is No. You must know what it is, or you wouldn't know that there was one in the first place. So why did you leave that information out? That's your mistake. What you should be doing is explaining the problem and asking us how to fix it. Currently this is like a wordsearch puzzle where you didn't tell us what word to look for.
It's nice to see someone your age starting this, I'm 15 now and I started last year and I haven't gotten super far. Most of what I've written were from tutorials on YouTube. I reckon you should try Java for Dummies which I just recently bought and it's amazing or Green Foot which I thought was pretty fun and more hands on, it doesn't get too advance though.
This is covered by the [JLS §5.1.2](http://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.1.2). The Strict-FP conversion as specified in [JLS §15.4](http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.4) is specifically ruled valid for all widening conversions by §5.1.2. All compliant compilers must handle this expression. The expression `double a5 = 10;` is always valid Java.
Not sure why you've been downvoted. In fact, I would take it farther. Any compiler which doesn't handle that expression is invalid and is violating the JLS §5.1.2 which specifically allows compile time widening primitive conversion (i.e. int -&gt; double).
I'm not sure whether your asserting that floats can accurately represent any int in the range of int, or in the range of float, but neither of those are true. Float can accurately represent any int in the range [-16777216, 16777216] and cannot accurately represent any other int. So, there are 4.29 billion ints and 4.26 billion of them cannot be accurately represented as floats. Double can represent all ints, but can only represent about 40% of longs.
Worst advice ever. If they want to learn Java, they should learn Java. If they want to learn C, they should learn C. It’s not rocket surgery.
college
Doesn't look like there is anything obvious that's wrong. The release code is clumsy though and the isNotAcquired method has a side effect of possibly acquiring a semaphore. This could be done a lot cleaner (and clearer) - but the basic steps are the same. 
Swing Here's something i found recently which makes me want to rewrite my FX2 app in Swing: https://code.google.com/p/javabuilders/ Not sure if that'd help you out with accesibilty, but it brings a YML (in lieu of FX2 fxml) configuration for views to Swing.
This is what /r/javahelp is for. ~~It really should be in the sidebar.~~ It is.
Your mistake was goofing off when you should have been doing your homework.
To me it looks like task ownership/separation was not a goal, just the sequential execution. Totally agree tough, there are much cleaner and less obtuse ways to get that done. The big problem is that the release method runs the first waiter without consulting the semaphore.
Well that's 5 years away, so.
Hm, alright! Sounds good.
Thanks! I appreciate it!
Hm, alright! I guess I'll start looking into the C language and "C"ing how it is... Bwhahahahah
Thanks a lot!!!
Thanks for the help, I'm really grateful for all these awesome responses!
Okay, thank you!
System.getenv
My guess is that there is a corrupt jar somewhere. Jars can be signed (I think) and the class loader is probably checking the jar and the signature is messed up and throws a security exception.
&gt; I was actually surprised to find so many people here trying to talk me out of learning one of the most important tools in the field, and so few actually offering advice on how to learn it. I think the reason this is the case is that they really don't know about the field. 
start here: http://www.philippeadjiman.com/blog/2009/12/07/hadoop-tutorial-part-1-setting-up-your-mapreduce-learning-playground/ Then go here: https://cwiki.apache.org/confluence/display/MAHOUT/Books+Tutorials+and+Talks 
Hadoop &amp; Mahout are tools for large scale batch processing and machine learning respectively. 
That is horrible advice. Don't try and learn C first. Java is the standard used in schools and university for teaching programming these days. 
This is the *correct* way to list all env :P Map&lt;String, String&gt; env = System.getenv(); for (Map.Entry&lt;String, String&gt; i : env.entrySet()) System.out.println(i.getKey() + " = " + i.getValue()); 
I hope not, it's about time they committed to FX.
Unless a security breach is found, no, it won't be further updated. Source: Mark Reinhold
It will be maintained/supported (bugfixes, etc.) by Oracle but I don't expect new features
Shouldn't the mods be taking care of this?
That's pretty negligent, especially for a relatively large subreddit.
What does that have to do with anything? I could define a grammar such that it is illegal, according to the rules of the grammar, to have a double initialized with an integer. But that doesn't even really matter: given that it compiles, obviously it's valid syntax (or there's a compiler bug, but that's not the case here).
My point is that compilation is not just about syntax. A type error is not a syntax error. So yes, it's valid syntax if it compiles, but it's not a question of syntax is valid, all the syntax in this thread is valid. It's not necessarily free of type errors if it's valid syntax, that's what rocketblob implied. I would like to see your Java grammar with types. I can't imagine how it could be done since types can be defined by the user in Java. So maybe you could do it for primitive types, but what's the point? You'll need to do the type checking for user defined types outside the grammar anyway. 
I would go there. $ whois downloadjava.us Domain Name: DOWNLOADJAVA.US Domain ID: D42110591-US Sponsoring Registrar: GODADDY.COM, INC. Sponsoring Registrar IANA ID: 146 Registrar URL (registration services): whois.godaddy.com Domain Status: clientDeleteProhibited Domain Status: clientRenewProhibited Domain Status: clientTransferProhibited Domain Status: clientUpdateProhibited Registrant ID: CR150989451 Registrant Name: yang zhou Registrant Address1: nongye road 32 Registrant City: xuchuang Registrant State/Province: henan Registrant Postal Code: 461200 Registrant Country: China Registrant Country Code: CN Registrant Phone Number: +374.2701234 Registrant Email: 66158198@qq.com 
Did you even bother googling for same?
It means that objects are not introduced until later in the book. Some java texts might start out right away with objects but this one apparently starts with other topics such as primitives and branching and fully discusses them before moving on to objects and classes.
Sorry. I've never posted here before and didn't think to look for the javahelp subreddit.
Or [http://www.java.com](http://www.java.com) if you only need the runtime.
^^ This guy Yeah some asshat thought it was a great idea to teach you the wrong way to do everything in OO languages so you understand how "good" the OO way is. It's the same reason our asshat teacher wasted our first semester having us build a ghetto static array list class rather than teaching you what an array is, and moving on to List's. Same thing in every intro course.... Intro to PHP spends 2 weeks making you write headers for individual files before introducing include ~week 4. The educational system is designed for hung over 19 year olds, so either pay attention in high school or end up bored out of your mind at a party school /rant
Yeah, that sounds like a terrible way to learn Java, too bad OP had to learn with it.
&gt; I learned most of what a CS degree consists of myself, thanks to Wikipedia, tutorials, and persistence. While this may actually be true, I would recommend you not make this assumption because you're probably wrong. I am generally self-taught from a CS perspective (I had a minor in CS at a liberal arts college); however, I've always seen myself as having to learn a HELL of a lot over a moderately long career in Software (Java specifically). A lot of what I had to buckle down and teach myself is taught in CS majors that was not even glossed over in my minor. To this day, I have deficiencies in my skill-set that I can attribute to not having taken a full major of CS at a decent school. I'm making the assumption that you're relatively new to the field based on your response. If so, I think you're suffering from not knowing what you don't know.
If you can the job you want, I personally think a degree is useless in the field (assuming you're constantly learning on your own). I got my degree just in case I needed the paper, and I feel that I learned a very minimal amount in the program.
I've actually been at it for several years now. The money just keeps getting better, albeit slowly. My dad has been very graceful about letting me live in his house and eat his food at meager cost to myself, so I can afford to take my time with getting into the business. My cousin works at a web ad company, he recommended me to his boss when he heard they were looking for an Android developer. They contracted me for a brief project, and they were so impressed that they're ready to bring me on to their team. My work ethic and insight is repeatedly praised. I don't think I'm suffering because I learn as I go. If I suffered from something that I didn't know, then I learned it, or worked around it. Yeah, I got off on the wrong foot plenty of times. I've made a shitload of mistakes and got stuck down dead-end roads. But every time, I turned around, retraced my steps until I got back to something that worked, and started again. I've gotten a lot of lectures about how you can't go anywhere without a degree nowadays. But it seems like most of them come from people who thought they could rule the world straight out of high school because everyone else was wrong and they had it all figured out. And the world beat the shit out of them. I used to think that way, but I learned to the contrary before I jumped out of the nest. I'm not trying to be the next Bill Gates or Steve Wozniak or Mark Zuckerberg. I just want to see what I can do, how far I can get. I want to see how well I can prove my worth on my own before spending a fortune on a piece of paper that does it for me.
Presumably you've already got malware considering Firefox attempted to direct you to this site which is way way way not legit.
&gt;Yeah some asshat thought it was a great idea to teach you the wrong way to do everything in OO languages so you understand how "good" the OO way is. Cay Horstmann is a pretty well-respected author. I wouldn't be so quick to judge the quality of the book, or the way it presents information, without at least skimming through it.
No offense, but Gates, Woz and Zuckerberg didn't make it by learning from *Wikipedia, tutorials, and persistence.* I'm by no means advocating that a CS degree is the only way to do things (as I mentioned, I do not have a CS major); however, your post seemed to paint a picture about following some tutorials and feeling that it compensated for a CS degree.
It's a typo, it's meant to be "Big Java Latté Objects". They are used in cafe automation systems. :)
I don't even have a minor in computer science. Wikipedia didn't exist for me, but man pages did. I've been in software development since 1993. I'm a technical team lead and recognized by management as the go-to-guy for hardcore software design questions. I've known system admins that took the same exact approach. It's entirely possible to be a self-taught software engineer, but you have to be predisposed to the way software and hardware systems operate. And read a LOT voluntarily. If I went back to get a degree now, it wouldn't be in CS.
I'm having a hard time understanding how a compile-time error could not be a [syntax](http://en.wikipedia.org/wiki/Java_syntax) error. Either way, it's irrelevant.
Yeah, I've been checking but haven't found anything yet. I wasn't really paying attention - just noticed a second FF window with two tabs - the Java page and the Firebug install page. No idea when it opened, but presumably it was opened by some site I visited. I'm surprised not to find any mention of that domain on google though. 
Especially popular at cafe babe. (edit: I honestly don't expect people to get this, I only know because freak trivia. 0xCAFEBABE is the java class file magic number).
I make a good living as a drop out, in the computer sciences. I am a really good developer, but a lot of my success was a self-learning attitude and self-improvement, because that's what learning is about. Really it's about a day to day improvement of yourself.
Persistence was arguably a factor in all three's success. And I have access to more material than they did. If there's something I don't know, I google it. If there's a Wikipedia article, I'll read through that to get a basic idea. If I want or need more, I'll go back to the search and sift through original sources. I'm sure I don't know everything that a CS degree consists of, but I do know a lot already, and I'm always learning more. For free. There are some people who need directed education in order to learn. I am not one of them, and I am proud of that fact.
did you see the link? there is a category of errors, not syntax errors, not run-time errors: they call them **semantic errors**.
Java is under a lot of "attack" these days... security issues, Oracle ownership, and it has lost it's 'cool'. But the compiler is amazing, in that it rivals native C++ for performance. That's quite an achievement! Long live Java!
While [Paul's](http://www.reddit.com/r/java/comments/1noc7u/friendly_reminder_about_integer_int_nulls_and/cckwtn4) gotcha is the worst caveat I have seen so far in Java, I still think that it is worth mentioning that: // this prints: if (smallNumber == 42) System.out.println("42"); // this prints: if (largeNumber == 500) System.out.println("500"); // this prints: if (smallNumber == (Object) 42) System.out.println("42"); // this doesn't print: if (largeNumber == (Object) 500) System.out.println("500"); This is because of `Integer.valueOf(int)`'s internal cache that caches values only in the range of`-128 .. 127` public static Integer valueOf(int i) { if(i &gt;= -128 &amp;&amp; i &lt;= IntegerCache.high) return IntegerCache.cache[i + 128]; else return new Integer(i); } In fact, the upper bound can be overridden through `java.lang.Integer.IntegerCache.high`. Relying on such an override is obviously only rarely a good idea! :-)
When `wasNull()` was added, using boxed types was really expensive in terms of memory consumption and GC work. You might argue, however, that it would've been better to support both: int ResultSet.getint() Integer ResultSet.getInteger()
My favourite thing about the Java compiler- the fact I don't have to think about it at all. In almost all cases it just works^tm, and works quickly enough that you're never waiting for it.
Yeah it might be a fun project, but we're going to install this for a customer and we don't want this to increase the value of the project too much. I'll stick to discourse and learn a bit of Ruby.
Yeah :/ I'm curious what he has to say about number 2. Compared to other languages (Scala, Goovy, and Ruby come to mind) the Java Core API just makes me sad. So much bloat, so little functionality in comparison.
No doubt. It's completely possible. I've heard lots of "youngins" make grandiose claims many times over the years (hell, I was one of those "youngins" not too long ago). The thing is, back in 1997 you didn't "know everything you needed to from {{ insert thing here }}. It took you a career to learn stuff you needed to learn. I'm not advocating that a degree would have taught you everything up front that you needed to know, but of the many degrees out there to get, CS is one that has a fair amount of practical application to the real world. As is the truth with ANY degree / field, learning does not end with the lambskin, but starts in-earnest day one of the job.
He also confuses javac (the front end source to bytecode translater) with the JVM which also has a compiler. The first paragraph talks about javac but then he moves onto the JIT.
Could you elaborate on the bloat and lack of functionality you are referring to? 
Except that the JIT paragraph is introduced by saying that compiling to bytecode allows for the JIT to exist, which is in stark contrast with native compilers where all compilation steps (including optimization) have to be ahead of time.
Java is neither bloated nor lacking in functionality, but it is verbose and the semantics can be cluttered. I think people get these traits confused. 
Websites can block theirselves from being indexed by Google.
Groovy and Scala rely a lot for the Java Core API, thanks to this they're actually able to co-exist without having to implement all that themselves. In many cases they just wrap around it in different ways (language, succinct API, ...).
because your output is always a hole number, I guess you have somewhere in your calculation an integer division.
Nope, u didnt look my program, but its ok. I detected a problem: public Point intersecaoB (Recta r){ Point b; if (((r.getm() * w) + r.getb()) &gt; 0){ double y = r.getm() * w + r.getb(); b = new Point (w, y); return b; } else{ double x =(-r.getb() / r.getm()); b = new Point (x, 0); return b; } The point returned will be allways = b (w, getb()). He doesn't look ate the if condition. :\
isn't J2ME unofficially dead? does anybody actually use it? these are the first questions that popped into my mind when i saw this title...
Ah yes. Verbosity, not bloat. Mixed that up.
Trust me, the if condition is evaluated correctly. It’s probably simply wrong.
No you are right. Just the need of having to include third party libraries or writing extra functionality for things that could very well be in the core API is repetitive and becomes annoying. I am not saying that everything should be in the core API, that is not where most things belong. But the current available classes could very well have more functionality, making their use more convenient. Take a look at the Guava project. I have become accustomed to include it in a lot of projects. It provides a lot of basic functionality that I use on a nearly daily basis and I often ask myself: Why do I need a library for this. In the end it comes back to the verbosity of the API that those libraries solve. 
so where is the error? what should i change to get this correct?
I find this conversation to be way off topic....but. String s = new Integer(10); is valid "syntactically", but invalid "semantically".
Try cross-posting to /r/javahelp or asking on Stack Overflow - your chances of getting an answer there is much greater.
You can't execute things from inside a jar.. You'll have to copy the resource out to somewhere first... Also, don't forget to assign it execute permissions... EDIT: try /r/javaHelp
{{File}} objects are used to create pointers to files on the disc, not necessarily ones bundled up inside a JAR. As far as an actual workable solution, you could try extracting and copying the bundled .exe to a location somewhere on the disk (perhaps a temporary directory) and execute it from there. I've not had much experience with executing .exes from within a Java program, so there may be a better solution.
&gt;You'll have to copy the resource out to somewhere first... How do i do that ? &gt;Also, don't forget to assign it execute permissions... Eclipse is starting the program and i dont know to to tell eclipse
I have no idea where the error is. The variables and functions are all named randomly, I can not infer their meaning at first glance, and I’m not prepared to invest any more of *my* time in *your* problem.
Any idea how I could copy the file from the jar without using Class.class.getClassLoader().getResource() as this returns null if i execute it outside eclipse?
1) simple, open the resources as a stream, and then copy the bytes to a FileOutputStream going to the file. ClassLoader.class.getResourceAsStream("/path/file.ext"); will return an input stream. 2) do some googling, java 7 has ways to assign permissions to files... You'll want to assign the file execute permissions after you copy it out if the jar.
&gt; So much bloat: Much like human lives, the longer you live the more baggage you carry with you. Java core may be bloated but part of that is from being around so long. There is a lot in core that is questionable (did they need to add an HTTP server?). There's a lot of duplication too (how many ways can I work with files now?) as better APIs were added and old ones were deprecated, but not removed. We'll see this again with Java 8 and the Joda-influenced new Date/Time library. &gt; So little functionality I think you're confusing terseness in expression with "what can be done". Groovy, for example, doesn't allow you to get more done but it does allow you to express a lot of common scenarios more tersely. This doesn't come without a cost though. You lose static typing, which can make refactoring a large codebase a lot tougher and you lose performance. Same goes with Scala and Ruby/jRuby. Plain Java will out-perform Scala, Groovy, jRuby and Ruby. Maybe Java 8 will improve JVM scripting language speed since they can take advantage of new lambda bytcode support.
I like verbose. It's sorta documentation.
Are you 100 percent sure that when you export your jar, that the executable is in the jar, and in the exact place you think it is.
That's what I don't understand is when you get the C++ junkies bagging on Java's performance. The only way you can really loose performance is from sloppy code which is just as prominent on C++ and C (malloc). Although I'd like to see their core libraries cleaned up a little bit to make Java 8 the best Java yet. Get rid of Factories and their broken classes. In Java 7 they finally cleaned up their File IO with the Files class, which actually has a readAllBytes function.
Yes as I just exported my project. For example my gcc compiler is in MyJar.jar/linux/gcc/gcc.
Exactly. This is what Java needs to do more of in the future, hopefully more of this will come with Java 8. This was one of the things that bugged me so much coming from C# to Java and they finally fixed it in Java 7. There are so many aspects of Java that need to be fixed in the future. I'd like to see them just completely redo a lot of their core libraries at some point. 
I only skimmed the article. But it seems like in the dynamic linking section, he's mostly just spreading FUD. In Java, all you got is static linking. It's just done at runtime. But if you're running two separate java applications, even if they share JARs, if they don't share JVM instances, you don't get the memory savings that you would with dynamic libraries. 
http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/io/Resources.html Resources.toString(new URL("http://www.google.com/"), Charsets.UTF_8); 
Use Guava. No more problem.
I doubt they'll redo their libraries as most of them aren't broken and are backed by 10+ years, millions of person hours, and countless machine hours. I think that most of the people who knock Java do so because of "fashion" not "function". It's more fashionable to be script-like than it was in the 1990s, but that doesn't mean Java's core API has less functionality or value. I'll take reliability over reduction in line-noise any day. Luckily I don't often have to make that choice as JVM-languages allow me to have my cake and eat it too. I use pure Java for APIs and where I need speed or structured growth - code that I know will be around for a long time at my company. I use Groovy or Clojure for glue code, small projects, and stuff I know will be rewritten before it's refactored.
Thanks for the answer. I succeeded in copying the files and just like you suspected do they not have read or write access (without admin rights). The only solution i found to that was starting the security manager with a custom policy file, but do you maybe know of a method to do this with code instead of this ? Or is this the only possible solution ? Edit: It seems like only ProcessBuilder/Runtime.getRuntime().exec() has a problem with the access to files. BufferedWriter can freely write into /tmp/number/ while ProcessBuilder/Runtime.exec() cant start /tmp/number/gcc but i can start /tmp/number/gcc with the terminal
I'm not sure why you provided this example. I certainly wouldn't claim that you couldn't find 3rd party libraries that wrap core API functionality for common cases. Indeed, they are legion. My claim was that using "reading a file" as an example of Java's verbosity is not the best choice anymore since the core API does now provide one-liners for many common cases.
Link to said source?
Devoxx conference 2012. During the closing discussion panel, if I remember correctly.
I see the questions you're meant to be answering, but I don't see a specific question from you. Post this - along with the code you've already created and what exactly you're stuck on - to /r/javahelp, as that's a better home for it.
Put your code on [Pastebin](http://pastebin.com/), it'll save people downloading a zip file from an unknown source. Also /r/javahelp's a better place for this type of question. As /u/DannyNullZwo says though, the symptoms point to there being integer division taking place somewhere. Fire up your IDE's debugger and step through the code to figure out where your code's not doing what you want it to.
Since I can't really figure out your exact problem, I try to break down the assignment: It boils down to this: + You have to create 1 (one) abstract parent class: **Item** Basically a class that prepares all the fields and methods for the children and that allows to store all the children in some form of List (the term list is generally used here, could be an array, could be an arraylist, linkedlist, etc.) without implementing anything except possibly the toString method to print the title and type. + You should have 2 (two) child classes (so far) which implement the details (one of which is the cost) + You should sort CDs based on composer last name + You should sort Books based on author last name + Books should be sorted before CDs So it seems that you need to implement the sorting by creating a compareTo method which compares the Author last name (Interpret last name respectively) in the child classes. Plus a way of sorting by item type - books before CDs Basically, in your abstract base class, you have to define all the necessary fields and basic methods and implement them in the child classes. The main question now is: *What exactly is your problem/question?* Do you have some code already? If so, post it on pastebin, github (gist) or something similar. Are there any examples, related to this assignment, that you could (should) have gone through before this assignment?
I don't think that assessment is fair though. Yes, C++ can get long in the tooth for compiler params, but that problem is largely solved by the tools around the compiler (Autotools, CMAKE, even the visual studios project file). After your setup, things go pretty smoothly (Though, I will admit that it is easier to setup java than C++)
Heres what i have so far http://pastebin.com/kqahTNe8 I just have no idea on how to go about coding for the compareTo method..
Okay, a few remarks: + The Item Type needs checking or it needs to be converted to an enum. Right now, it is possible to put anything into the item type. + The toString method in the **Item** class is too specific since it prints **CD-Title...** + Possibly store the Author/Interpret already split by LastName/FirstName in separate fields for easier sorting (implementation of the compareTo method) The compareTo method should generate something like this: Book vs. CD --&gt; -1 CD vs. Book --&gt; +1 Book vs. Book --&gt; lastname alphabetically --&gt; -1/0/1 CD vs. CD --&gt; lastname alphabetically --&gt; -1/0/1 It means: A book is always less (earlier in the list) than a CD A CD is always more (later in the list) than a book If two Items of the same type are compared, compare the last names and set the output accordingly.
I find it funny that the author has the complete g++ invocation with a lot of unnecessary options and fails to show the equivalent javac and java invocations. * Fun fact 1: most of these options are not required, some of them are only used for overly optimized code and others just smell of bugs (disabling warnings globally, really? Class level @SuppressWarnings comes to mind) * Fun fact 2: that complain about those options being different for each compiler? The more or less equivalent options for javac/java can be found as -X non standard options if they exist in your implementation.
What happens if you open up the JAR file in some kind of archive explorer (like you would a ZIP file)? Is the file where you'd expect it to be? 
Well, damn. I already turned it in and I found a bug. Oh well, I fixed it in the reddit code. Hopefully my TA doesn't run it and find it... especially since its rather annoying. 
Few points: * Your lines are a tad too long, try to restrict yourself to using ~~&lt;80 characters~~ a reasonable print margin. * Comments for Methods/Classes can easily be done (and often generated, depending on your IDE) with [Javadoc](https://en.wikipedia.org/wiki/Javadoc). Netbeans, for instance, will automatically generate a Javadoc comment block when typing /** [enter key] above a method. This is easy, since it allows you to quickly explain, in comments, what certain parameters are for, what a method returns, etcetera. * Why do you define a final char[] ALPHABET in the alphabet method? The allcaps naming convention should be for constant values only, which shouldn't be declared there in the first place. It also makes more sense to make this a constant value by declaring it in the class itself. public class HW 3 { static final char[] ALPHABET = new char[]{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'}; Also, String string; Not faulty per se, but not very good either. 
I think a lot of the perception surrounding Java performance within the non-Java community is entirely related to Java GUI applications. Swing, AWT, etc are complex windowing managers that must work on top of native windowing managers (Windows, OSX, etc). They also introduced layout managers which absolutely rock, but do noticeably slow things down. Even Applet's are seemingly slow as they must instantiate the JVM. No one in their right mind would add an Applet to their webpage and still expect sub-second response pages. GUI's aren't Java's core strengths, and haven't really done a good job of spreading the 'good news'. Of course, core Java on the server-side is awesome!
Thank you for the tip about netbeans. I will use that next time. I was misinterpreting what a constant was/where it should be declared. Thank you for correcting me. For some reason I thought anything that was 'final' was a constant, not just 'static final' things. And oops, I did that on accident. Thanks for pointing that out.
&gt; Your lines are a tad too long, try to restrict yourself to using &lt;80 characters. While I do agree that it is a good idea to have a reasonable print margin, I disagree with the value of 80. 80 was a reasonable value 15 years ago when everyone was on smaller CRT monitors and people were likely to print their code. Nowadays most programmers use monitors that have a much greater pixel density and people print their code less and less. I feel like code written to fit into 80 character print margins is much more difficult to read in code which has descriptive (read long) naming conventions. We use 120 at our work, and we find it to me much more readable and we do not then have to waste so much of our monitor real estate. YMMV
&gt; Plain Java will out-perform Scala Do you mean high-level functional Scala code? Because plain Java-style code in Scala will perform the same as in Java.
Were you supposed to come up with your own way to do this stuff or did they not care what libraries you used? Probably worth thinking about how you might reverse a string if the former. Otherwise, might as well just call the StringBuilder method directly. 
Yeah, that's very true. To be fair, I picked 80 as that's the default value for Checkstyle and I never bothered to change that.
&gt; The only way you can really loose performance is from sloppy code which is just as prominent on C++ and C (malloc). JVM has limitations: no user value-types (aka structs), no proper support for generics. And if you really care about performance in Java you have to do something like [this](http://java-performance.info/use-case-optimizing-memory-footprint-of-read-only-csv-file-trove-unsafe-bytebuffer-data-compression/).
Hm, we could use any built in java library, but we couldn't use the substring method from the string library. And yeah, I figured if I couldn't use the stringbuilder method I would do oe of the following: 1. Collections.reverse() on the character array 2. a for loop, of which there are multiple ways to do it. I have a few in mind already, but I'm not sure which would be best. 
You sound totally unbiased and reasonable about this subject.
http://lmgtfy.com/?q=Java+output+to+file
Java program &gt; out.txt Not sure if this is what you want
What you're looking for is Java streams (among other things). http://docs.oracle.com/javase/tutorial/essential/io/streams.html would be a good place to start. Problem is that a conceptually simple thing like reading/writing isn't really all that simple. Java wraps up the concept of I/O into streams which can be interpreted in different ways, like buffered streams for performance. On top of that, Java wraps these concepts in a design pattern called Decorators. java.io package = Java 6 and previous versions, java.nio package = newer methods. Obviously this is a high level overview that skips over many concepts and isn't exact. To be honest, I usually have to look up how to do it with the Java classes every time I need it (maybe 2-3 times a year) unless I'm using easier abstractions like Apache Commons / Guava.
This helps. Although when I compile, it says "Identifier Expected' on line 2.
I like you liberal use of comments. It's a good habit to get into. One comment on them (and this is pretty picky): the line above the method should just discuss the interface ("returns a reversed string") the rest of the comment ("uses string builder because strings are immutable") is an implementation detail and would seem more appropriate in the method body. Again, that's very picky, but it will help when you get to multiple classes with the same method but different implementations.
This might come off as nit-picky, but code that's easy to read/understand/maintain is a big pet peeve of mine. Opinions are my own, and I'm open to counterpoints :) * I would avoid using statics anywhere. It doesn't matter in this case, but it's generally not good practice in Java. * alphabet - The attempt at efficiency in this case is probably overkill, to be honest, but if you're going to do it, substring ("ABCDEF...Z") and rather than subtracting "65" subtract 'A'. * Extra lines between prints seem unnecessary. * One line functions that are only ever called once are just code bloat. If you want to split the code up into functions, wrap the entire sections of each case into individual functions. * Define the variables closer to where they are first used. Defining variables at the top of a block is fine in languages that require it, but in Java, it makes it more readable if they're closer to the usage. 
And Groovy code marked as StaticCompile will also perform similar to Java, at the cost of losing most of the Grooviness of Groovy. I think Clojure also provides hints so that some code will be more Java-like when compiled. I'm talking general usage here. I'm not a Scala guru so you'd have to tell me how often Scala devs eschew Scala's functional features. 
I agree withyou about easy to read/understand/maintain code! 1. Why are statics bad practice? I guess because it foregoes the usage of objects, and the language is... object-oriented? 2. I kinda forgot about using substring for some reason, but that'd be another great method. The 'efficiency' really doesn't matter at that point and it looks a lot neater. I also agree with subtracting A, or at least putting a comment/constant. 3. Just did as the instructions for my assignment said, but I will keep that in mind for future programming. I think my instructor uses a test class, to make grading quicker, hence why he wanted individual functions. 4. Okay, thank you. I will do that in the future. I didn't know which was better, since sometimes I hear "put all your variables at the top of the method".
Thank you for the advice! I will start modifying how I do comments. They're not the best in this program because, to be honest, I kinda procrastinated and had to rush on it. I want to take more time on my next program and try to make it perfect. (:
 try(PrintWriter pw = new PrintWriter(new File("yourFile.bro")) { pw.println("There's a new line after me"); pw.printf("%s","and printf"); } [try-with-resources](http://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html) is smart.
I had to add JAX-RS to my requirements list, whoops. Relying on the framework isn't going to cut it I'd guess, but worse, it's not going to be portable liberating knowledge. Every single use case, every library, will have it's own means of overriding tailored to some specific subsystem. I'm convinced that I need a tool that can help me effectively author wrapper classes
1) Essentially yes. Static methods make things harder to test, complicate inheritance, etc. 2) I hear ya... just a general mantra I try to go by - the most bug-free line of code is the one you don't have to write. This *can* be taken too far (see: crazy regular expressions) but... here's a simple example: String foo(boolean b) { String str; if (b) { str = "True"; } else { str = "Not true"; } return str; } vs. String foo(boolean b) { return b ? "True" : "Not true"; } 3) Gotcha. Sometimes school code has weird rules ;). 4) I'd argue that's bad advice, to be honest, especially with variables that are only used inside blocks. An extension of that, don't define variables unnecessarily. e.g. - in above example, the String "str" is pointless.
well, golly gee! neato!
That source file you linked is an MJPEG Client. [Here's an implementation in C#][1] for a project that streams MJPEG from a webcam. It looks like an MJPEG server is just an HTTP server extended to serve each frame as a separate HTTP response over a stream. The MJPEG Client.java, however, looks like it uses Real-time Transport Protocol. It simply gets each frame's binary data from the payload portion of an RTP packet, loads it as a JPEG, and renders it to an image viewer. The actual RTP implementation seems to be in another part of the project, as none of the imported packages have anything that deals with RTP. The C# implementation may actually be using RTP. I don't know enough about the protocol to say for sure. I hope this helps. If not, Google is your best friend. And either /r/javahelp or /r/learnprogramming would be a more appropriate subreddit for questions in the future. [1]: http://ipcamemu.codeplex.com/SourceControl/latest#src/IpCamEmu.Core/MJpeg/MJpegServer.cs
Thanks for the help/advice. Regarding asking questions on this forum, I looked through what identifying info I could find ("Post anything related to java!") and saw that the first 5 pages were solid questions, so I thought It would be okay to ask my question (although I completely get it if you meant that the experts/people who would know reside on the javahelp or learnprogramming forums) :P It's all good :) I feel I may upset the programming community by asking more-or-less the same question on a bunch of different forums... Anyways, Thanks! I appreciate the response :D [edit] and about linking a client... sorry, I don't know why that was in the clipboard / I don't 100% know what I'm doing / excuses... I want to learn!
I agree with you totally on point 4. I love being concise, and I think being concise is usually even more clear, but I always see things like: String s = input; return s; or even Int result = int1 + int2; return result; Usually people tell me its for the sake of clarity, but I think if return int1 + int2; isn't clear to whoever is reading it then there is a problem with their abilities as a programmer.
Thanks :) I know quite a bit of java (I'm currently enrolled in computer science 4 [which is admittedly a little weak regarding teaching]), just nothing about networking. I'm going to have to cut my teeth somewhere :) Thanks again
I'm shuddering looking at this.
Just-On Time
Also this.
I would be very interested to see the problem description posted in its entirety. What can you tell us of the class you are taking that had this problem? 
&gt; FUD TIL : [FUD](http://en.wikipedia.org/wiki/Fear,_uncertainty_and_doubt)
no J2ME isn't dead. many companies are still working on it
This guy is brilliant, seriously.
aren't all compilers just translators... semantics 
On statics, I'm just glad I don't have to new up a Math class every time I use min or max. 
Create an abstract Item class (Item.java) to store and access the object type (String), title and price of a generic item. The Item class should also print the title and type (toString()). The Item class needs to implement the compareTo() method from the Comparable interface. Item class also needs to define an abstract method cost(), which must be defined by each subclass (cost of a book is simply its price, the cost of a CD is its price plus 13% tax. Create separate classes to handle books and CD’s that will extend the Item class: Book.java and CD.java. The Book class needs to store the string for the author, while the CD class needs to store the string for each of the artist and composer. All data should be private so each class needs to provide accessor methods for their additional data (get methods). They both need to define the toString() method so that they print out the generic Item result followed by the additional information (author/artist, composer, price) labeled. The compareTo() method must sort Items so that books are before CDs, books are alphabetically by author last name (with author ties broken by the title), and CDs are alphabetically by composer last name (with composer ties broken by the title). Submit in a single pdf file: * java source code * output from a sample test run of your code that demonstrates it well (use examples of objects with same authors/composers) Also submit the java code (.java) files. Submit your assignment on Desire2Learn in the Assignment 3 Folder in the Dropbox. that's the entire question and its a university course called intro to computer programming java 2 .. also im already finished with the question so no further help is needed
[SO thread](http://stackoverflow.com/questions/5574241/interesting-uses-of-sun-misc-unsafe) for folks like me who have no idea what this means. 
The relevance of application server is about 4.7.
4.7 / 5 OR 4.7/10 ?
Oh I have, and my in talking to my teacher he sent me something that works on it's own, but I can't call in my main. I've tried several suggestions, and one actually worked, but only for Strings. Problem solving is my favorite part, and usually I'm quite resourceful. This time, however, I can't figure it out, and it's driving me crazy!
That's Windows Vista if I'm not mistaken. The start bubble extends beyond the taskbar.
Is the executor returned by `Executors.newSingleThreadExecutor` thread safe? I remember having trouble with thread safety issues using executors before. As well, an explicit goal of mine is to not allocate the over head of a thread for each semaphore. This code is a performance hack to have a semaphore that works with a passed in `ForkJoinPool` instead of against it (by not blocking etc..).
Yes `isNotAcquired` is a bad name. That was actually a start towards optimizing the code for method size so hot spot could jit it better.
Okay, so I got it working. I now have it set up for a String, boolean and int. It outputs it to a text file, but there is no spacing / formatting. Thanks a lot for everyone's help. Any quick suggestions to formatting the text file properly? 
Win 7 does this too, I'm not so familiar with vista so I can't say if its the same there
While your comment has good points, I somewhat disagree with this one: &gt; * One line functions that are only ever called once are just code bloat. If you want to split the code up into functions, wrap the entire sections of each case into individual functions. I don't think method being called just one is a reason to not have such method. Code re-use is a good reason to create methods, but there are others reasons too, namely making code more readable and abstracting away low level operations. For example, call to ourSubString (perhaps a bit silly name?) is easier to read and see what it does than doing the somewhat non-obvious substring creation operation. Also the abstraction level better matches the level of abstraction in the call site. In this specific case the point is lost, because String class already has identical substring operation, which should be used instead. General idea still stands, i.e. it's better to think in high-level operations (e.g. substring) than low-level operations (e.g. character array manipulation by indices). You can of course still divide the long code chunk in run method to smaller more cohesive pieces, but I'd say one-line string reverse and substring methods is not bad (apart from duplicating standard library functionality). If something, we should get rid of *run*, as the name in no way more descriptive than *main* and all the main can do here is pass the call forward (no abstracting away low-level operations or making code more readable).
I can tell you that is not vista i'm using it right now* Difference is the room between you pictograms at the bottom, how your open aplications is presented and your hidden pictograms on the left. All diferent, this is Windows 7.
It won't be the whole Unsafe API, just the "safe" parts. Direct memory writes won't ever be part of a directly accessible Java API.
Thats irrelevant
we can call this "the semantic web"
Application servers are not necessary for these things. I worked for one telecom company where all applications run in Jetty. Currently i work in small consultation company where we develop an application for a bank and we use Play Framework. Of course we have transactions and web services and dependency injection etc. In my opinion application servers just make life harder. Development is much faster and more enjoyable without these monsters.
My projects do. The idea is to give Windows-bound developers equal access to properly and automatically configured local services. Also, some projects have used it to automatically provision new development environments for new developers, inside a virtual machine. We have achieved quite a bit of synergy through combining the Vagrant Puppet configuration and actual server environment Puppet automatic configuration.
Thank you. Your reply came just as I [found my answer](http://www.horstmann.com/sjsu/spring2012/cs46b/lab3/): Logger.getGlobal().setLevel(Level.ALL); So with that said, should I continue to use System.out.println() when debugging then remove them after, or should I switch to using the logger? They seem to make a very bold statement with saying that I should use the logger class but then fail to really describe its usage.
That wasn't the case in our school. It was taught as a secondary tier course.
&gt; In my opinion application servers just make life harder. Development is much faster and more enjoyable without these monsters. Agreed. I had the displeasure of working on an app that was deeply entrenched in JBoss (now WildFly). I wanted to shoot myself in the face every single second. Not even $70k/yr was enough to keep me there. I wrapped up everything I could, solved the difficult problems I'd been hired to solve, and bowed out. Never again. There isn't enough money in the world.
judge? I just took two courses and read that book cover to cover. He is a dick. I'm not saying he isn't a great person. I feel the Late Objects approach is unnecessarily slow.
Its generally better practice to use a logger and then put all your debug outputs to the fine or finer log level. Then have a place where you can switch what the logger actually logs. ( via setLevel) If you do it right, debugging becomes as easy as changing the logging level and poring through the more verbose logs.
Well if you're really in love with Tomcat and would like some of the extra features you listed in your message then take a look at TomEE which is Tomcat with those extra features added on...
Avoid System.out like the plague. Logging is much better. Of course there's plenty of people who will tell you that `java.util.logging` is bad also, but it's a good start and all the other APIs (e.g. Log4J) are of a similar feel.
The thing with logging is that you can configure it: you can tell the logger how the output should look, where it should go - a file? the screen? - what level you want certain parts of your code to log - INFO? FINEST? That configuration can (should) be separate from your code. There is a configuration file for java.util.logging in your JRE, /lib/logging.properties. Read it, it's really informative. It tells you how to tell Logger to use your own config file at startup and gives you examples of configuration. Also informative is the [Javadoc on Logger](http://docs.oracle.com/javase/7/docs/api/java/util/logging/Logger.html). Even just the first paragraph will give you a better idea of what Logger.getLogger("InfoLogging") is actually doing. (What does using the name "InfoLogging" do? for example.) I would never set a log level in code. If that's your assignment, that's fine, but otherwise no. In code you just get a logger using some logger [factory method](http://en.wikipedia.org/wiki/Factory_method_pattern) and then use it. Maybe you need a debug statement. You would have code like: package com.norsk.cs463; public class DebugTest { Logger logger = Logger.getLogger(getClass()); //getClass is in Object ... then later you want to output some debug information. logger.fine("Here's some debug info: we got to this point in the code."); When you're testing you'll set the logging level to FINE in your configuration file so you can see that line. com.norsk.cs463.DebugTest.level = FINE But you probably don't want that line showing up in production, so you'll set the level to SEVERE. Then logger.fine(...) information won't show up in the log. com.norsk.cs463.DebugTest.level = SEVERE Where that logged information shows up, like the console or a file, is all set up in your config file (but you know that if you've read about handlers in the default config in your JRE).
Is this what you mean? public Class DebugTest { private static Logger LOGGER = Logger.getGlobal(); public static void main(String[] args) { . . . } } And do that for each class? Then can call DebugTest.LOGGER.info()? Or if not, can you expand?
Basically i want don't want to develop such heavy server, what i am looking at is lean software development. I want to develop a application that's just a .war file which can be deployed in any sever, with changes only in your configuration file and no code change.I don't want applications to be dependent on particular platform.
even i have the same opinion.
Do you think all the reliability , security and TX management are all hyped up in App server? Can the same level of all promised features in app server be achieved in web-servers?
No, like this: private static Logger LOGGER = Logger.getLogger(DebugTest.class); That creates a logger specific to the class. You can tweak global log settings, or just the log settings for specific classes or packages. log4j.rootCategory=INFO, ConsoleAppender log4j.logger.DebugTest=DEBUG With this configuration, the entire application is logged at INFO level, except for DebugTest, which which is logged at DEBUG level..
Which logging framework are you using? Log4J? Which version? Log4J does define a [method](http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/Logger.html#getLogger\(java.lang.Class\)) accepting a class:
I don't know about Log4J, I'm just in an intro to Java class and the book mentioned the Logger class so I tried to get it to work. Here's the code I'm messing with: package Debug; import java.util.logging.*; public class DebugTest { /* This doesn't work */ private static Logger LOGGER = Logger.getLogger(DebugTest.class); /* This works*/ //private static Logger LOGGER = Logger.getGlobal(); public static void main(String[] args) { String helloWorldLog = "Hello World! We are Logging!"; LOGGER.setLevel(Level.INFO); LOGGER.info(helloWorldLog); } //End main method } //End Debug class
Ah, I see. Then in that case, do this: private static Logger LOGGER = Logger.getLogger("DebugTest"); or private static Logger LOGGER = Logger.getLogger(DebugTest.class.getName()); The second form holds up better to refactoring.
Great thank you, that make sense now. With regards to refactoring, what is the difference between "ClassName" and ClassName.Class.getName()? Either way I would have to change ClassName to the class correct?
We pay for jrebel and it's worth every single penny. Will have to look into this too. Ah, doesn't seem ready yet.
Usually when refactoring in an IDE, it can search through the source files of a project and change every occurrence of what is being refactored (class names, method names, field names, etc). For example, in the case above, you should reference DebugTest.class, and use its method getName() to give the Logger's method a String parameter. If you happen to refactor the class DebugTest to be called something else, for example "PeanutButter," the IDE would replaced the reference "DebugTest.class" with "PeanutButter.class," and the code would continue to work. If you had given the Logger a String parameter "DebugTest," you can essentially think of that as a local variable since you just created it to give the method a String. If you refactor DebugTest.class to be called PeanutButter.class, the String you explicitly gave to the Logger will still be "DebugTest" until you go and change it yourself.
I can see how proper architecture makes it not *required*, but I don't see how architecture would negate the benefits from hot deployment, particularly for developers.
You make a fair point wrt development. When I made the comment I was thinking more from a production deployment perspective. 
Great thank you. I haven't messed around with IDE's much and have been forcing myself to use Notepad++ and the command line, so this is good to know. So one thing I noticed is that when I used the **getGlobal()** method the logger level would be set to OFF by default, but when I use the **getLogger()** method the level is set to at least show **INFO**. Do I need to invoke **LOGGER.setLevel(Level.OFF)** at the beginning of the main method?
There are exceptions to every rule, certainly... but honestly in modern Java with dependency injection (using Guice for example) you'd never have to worry about creating new ones.
When should the getGlobal() method be used instead of the getLogger() method? Or is that a much more advanced area of the language?
But sometimes you'll have no choice but to work with a poorly architected monstrosity and hot deployment solutions are always welcome. 
With Sun no longer at the helm that could change. Oracle might want to expose "Unsafe" behavior similar to C# in order to better interface with lower level code. I have no idea if thats their plan, but it wouldn't be unreasonable. 
$70K/yr is not very impressive for Java development.
Unlikely. For lower level code interfacing the OpenJDK project is looking at JNA etc. There's a project being started by Charlie Nutter of JRuby to provide FFI capabilities [JVM FFI](https://groups.google.com/forum/#!forum/jvm-ffi). This likely will appear in Java 9.
JNA has been around before Oracle came into play, and I've not seen anything that would indicate OpenJDK was going to add it. Do you have a link? JNA also has a lot of limitations that dont solve the performance issues that allowing unsafe code could (indeed, JNA performance is often worse - as it can require even more object copying than JNI). You also cant use any C++ code wit JNA (unless thats changed recently), which would make moving over to JNA a very weird choice. &gt; Charlie Nutter of JRuby to provide FFI capabilities JVM FFI[1] . This likely will appear in Java 9. Thats a pretty big stretch &gt; [I want a JSR for Java 9. - Charlie](https://groups.google.com/forum/#!topic/adopt-openjdk/-b1uNbXsbFY) Again, I'm not aware of any real traction. The fact is there isn't any real official word on changes to native code access. If Oracle does decide to do it, adding behavior similar to C#'s unsafe code is one way it could be done. Everything to date has mostly been Oracle (attempting) to deliver on things already promised. Once we get to a new phase where Oracle is announcing their longer term vision, well see if they keep the old Sun way or try to expand / contract Java's focus and reach. 
The strongest linkable endorsement of the direction would be [John Rose's comments](https://groups.google.com/d/msg/jvm-ffi/8drjHY7yX0I/5YwesavzRTQJ) in the jvm-ffi google group. Mark Reinhold's comments at the JavaOne "Meet the Java Architects" BOF were supportive of Charlie leading the JEP and Oracle contributing (or at least not standing in the way) to getting it in to Java ASAP. Now is the right time to be vocal on this issue. However, don't be too hopeful about Java going with the C#/CLR approach or extensive C++ support (maybe C++'s interfacing issues are C++'s problem to solve not Java's).
I had only been on the job a few months.
These are for development :) 
No, having multiple versions of the application most definitely doesn't simplify deployment. It just results in much more complicated deployment procedures.
Sounds like a more relevant answer would be "Legacy skills, no organizational training, no interest in private learning." We had this discussion about a week ago already: http://www.reddit.com/r/java/comments/1n8xb9/discussion_java_ee_servers/ If you want to know where fairly conservative enterprises are at the moment, take a look at this: http://www.youtube.com/watch?v=D6nJSyWB-xA
The classic mistake is thinking the AS is all about "*Transaction Management *Load Balancing *Security *Threading *Reliability" and about "EJB,MDB and other enterprise bean[s]". The first batch is mainly associated with added value by individual products, and not necessarily with the concept of an application server. The second batch "EJB, MDB, ..." is old style thinking when the difference between a Java EE AS and Tomcat was 90% about EJB. This got so far that people even thought EJB was just another name for Java EE. Things can't be more different today. There are tons of interesting things in Java EE, with EJB being important but maybe 10% or less of it. The main thing that IMO *does* characterize an AS is that it's a full stack framework readily available in a server. Compare it to downloading one of the available Linux distributions like Ubuntu vs building your own Linux distribution from scratch.
A full AS like JBoss starts up in 1.5 seconds. You can deploy just a .war. Especially with Java EE 7 you almost never have to resort to vendor specific configuration. E.g. a datasource, JMS queue etc can be configured with standard Java EE syntax. In bare Tomcat you would need Tomcat specific configuration for that, but in Java EE it's standardized. Vendor specific code is very rare. Occasionally people will use some Hibernate specific annotation, and there's the odd vendor specific security annotation (e.g. to combine with @RunAs), but this can often be avoided. It's also not something specific to an AS, as people using JPA with Tomcat typically do the exact same thing.
&gt; these monsters Why are they monsters? TomEE for example starts up in 2 seconds, and is 25MB to download. It contains stuff that you would otherwise manually bold on top of Jetty. Yes, surprise, Jetty doesn't come with transactions, you had to add some amount of jars to realize that! Your grand total of Jetty + Play + whatever transaction manager you are using (JoTM, Atomica?) + whatever DI solution you are using is probably larger than TomEE itself and most likely starts up slower too. You accuse TomEE of being a monster, but what you have created is a monster as well, a Frankenstein monster to be precise. 
&gt; Can the same level of all promised features in app server be achieved in web-servers? At the end of the day you can realize all features in Ubuntu by starting with the Linux kernel and compiling tons of packages. Most people however just download Ubuntu and be done with it in one download. At the end of the day it's all just a collection of jars in Java EE. Well known application servers are basically pre-packaged collections of those, with some integration code and tested that the grand total works well together. With a few small exceptions (JASPIC comes to mind), everything in Java EE can be added individually to Tomcat. This includes but is not limited to JSF, JPA, CDI, Bean Validation, EJB, JMS, etc. The question is, why? Why would you want to add those jars separately when you can just download TomEE, JBoss etc and be done with it in one go? 
Im trying to use output and input stream at the moment, but I don't know how to take the input from the GUI and put it into the class, and then write it into another file which is then copied to the original file, if you know what I mean?
Yes. reliability: I am not sure what is meant by that, if it is durable JMS then you can have it everywhere. Few weeks ago we needed something like that, but setting the thing as we want it would be too hard, so we just save the data and process it... security: no idea what is meant, you can secure everything everywhere. TX: Spring has TX. 
State your requirements less dumber.
I think it depends, multiple smaller wars are easier and faster to build and test. Could still be brought together in a single large war of the actual code was in separate maven modules.
4.7 of 4.7...
This is wrong... Java EE and application servers are about much more than just WebLogic/WebSphere. TomEE, Resin and GlassFish are very viable application servers too. And an application server doesn't "built on Tomcat", not even essentially. Application servers have different containers, and one of them is the web container, for which a certain server may reuse Tomcat, or build something itself. I think WebSphere doesn't use Tomcat, but has its own implementation of a web container and the Servlet spec. JBoss used to use Tomcat, but has switched to Undertow (their own web container) for the next version. The only application server that directly builds on Tomcat is TomEE.
People actually still use JUL? Please switch over to slf4j!
From the definition in your code, both, inputStream and outputStream are Writers. You need to read the data first from the file, then erase the unwanted one, and then write the file back. At present, you are not reading anything from the files. Your deleteEmployee method should have some parameter which employee to delete (an ID, Name, etc.) otherwise you don't know which employee to delete. 
Ye, I tried using the BufferedReader I think, but whenever I tried to compare the two, it would say that one was a file and the other was a different type of variable, so I tried it this way. Can you help me, how I go about reading the file, copying it into the temp file, and then copying the temp file back to the original file? 
I'm having some experience with a similar situation where I work. We have one central application which offers different kinds of services to be accessed by other war modules which composes the complete solution for the client. Having multiple war files in this case made it easier enough to send only what each client needs and also coding the client specific code in an easier place to maintain. In our case, I believe having multiple wars was the best way to go.
Even though I am a bloody beginner in Java, I found something when googling, so I'll try my best: The code is taken from a [Stackoverflow post](http://stackoverflow.com/questions/5343689/java-reading-a-file-into-an-arraylist) BufferedReader in = null; List&lt;String&gt; myList = new ArrayList&lt;String&gt;(); try { in = new BufferedReader(new FileReader("myfile.txt")); String str; while ((str = in.readLine()) != null) { myList.add(str); } } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } finally { if (in != null) { in.close(); } } This, adapted to your classes should read the information into the arraylist Employees. Then, in the *Employees* ArrayList you can use **ArrayList.remove(index: int)** or if you have the Employee object you can use **ArrayList.remove(object: o)** And finally, use a BufferedWriter to write the arraylist back to the file.
Okay. I've been working on this for like 4 hours and never actually found this! :D Thanks a lot.
I just googled "how to read a file into an arraylist in java" and the Stackoverflow post was one of the first results. When searching for anything with google, just try natural language as you would ask any coworker or friend, for me, this way mostly works and yields useful results. 
Thanks! Never thought of it this way before!
Ye, I was looking for stuff more specific to my case though, and I guess this one was filtered out.
&gt; Spring has TX. But what has that to do with "web-servers"? A web-server will not have transactions, and if you add Spring to it you'll be building the same thing you wanted to avoid??? Tomcat + Spring = App server!!!
Always try with generic questions first. If there are no specific or adaptable results, refine.
Java has the ability to output an entire object to a file. However when you do this it is not readable as plain text. And can only be read back into the same type of object. This is one possibility for what they could do, but it is up to the dev.
How do you try to run your project ? (right click on your project, run as, java application) Try recreating your project (Java Project), make sure you have a suitable runtime environement and you should be good to go with your code.
It's a snippet in the textbook, I think I need to ask if it's ok if I use something else.
If you are going to develop an Android app, check this link: http://developer.android.com/guide/topics/data/data-storage.html And if you choose store in SQLite, check this too https://guardianproject.info/code/sqlcipher/ http://rtner.de/software/PBKDF2.html It will be usefull if you want to encrypt the data.
You can also use SharedPreferences to store primitive data in key-value pairs. However I think they're readable in an XML file, but you can always encrypt the data before saving it. SQLite is a popular option. Check out the the dev guide at http://developer.android.com/guide/topics/data/data-storage.html
We do fat jar apps at my work. Recently discovered that there's a 64k number of files limit in jars. &gt;_&lt;. Before you ask why: HBase.
I stand corrected. So what's your take on the question from OP?
I think they are very relevant, but as was stated in the similar discussion here on reddit last week the very term "application server" is unclear sometimes. Maybe "full-stack framework" is a better name.
Fine, then Tomcat + Spring =full-blown App server. Same thing... But what's the definition of application server exactly? Where is it defined? The problem is the implication that you're making. (Full-blown) Application server = Java EE = WebLogic/WebSphere = Heavyweight. Tomcat = not Java EE = lightweight = no overhead. But this is not true. NOBODY, uses a bare Tomcat. You WILL be adding things, and those things will make your solution heavy. Meanwhile Java EE servers like JBoss dynamically load what's needed by the application. They always win... forgot that dependency in your pom with your own Tomcat solution? Pay the overhead! With the Java EE functionality in JBoss, if you don't use JSF, you pay zero overhead for initializing or whatever. 
Application server = server that delivers applications in a client/server model. Tomcat implements the servlet container, which means it is an application server which delivers web applications. Java EE isn't an application server, it is a specification for a particular set of services. Weblogic/WebSphere/JBoss/Glassfish are application servers which deliver the full set of features promised by *all of* Java EE. Modern Java EE is modular, so individual parts of the spec can be implemented and consumed by bare containers like Tomcat. In practice, the difference between a full-blown application server and light-weight application servers is that the full-blown application servers centralizes dependency management on the application server and light-weight application servers leave it to the type of application served by the light-weight application server. The *argument* for light-weight servers is that application dependencies are easier to maintain in *large organizations* because application server maintenance and the application maintenance are usually done by different teams. Some teams have found it easier to fight with tools like Maven than to fight with organizational hierarchies. YMMV.
That is correct, the scope of variable *a* ends at line 5, the assignment at line 6 will throw an error. Not only that, the if statement could evaluate to a false and *a* wouldn't even be declared. However, do not get into the habit of using **=** for comparisons, it is only used for assignments. The proper way to compare is **==** for primitive types like integers and booleans and .equals() for the rest.
An oval of what? Are you talking about a custom "Oval" class, or some Swing/SWT/AWT widget? Something else altogether?
These kind of questions belong into /r/javahelp
&gt; Apache implements the http specification, which means it is an &gt; application server Yes. For delivering CGI-based web-applications or whatever Apache module you have installed in these modern times. &gt; javascript based web applications Javascript has nothing to do with the server (it implements the client-side of the application), unless you're getting into AJAX, which can be implemented by Apache over HTTP using the basic application server capabilities. &gt; In other words, application server == server? Or we could just drop &gt; application? You also have FTP servers, SSH servers, etc., etc. But none of those servers are designed to deliver applications, only to provide minimal services like FTP or SSH. Application servers can deliver actual applications in the client/server model. Apache became an application server instead of a fancy file server once it implemented CGI. CORBA is another very good example. Even SMTP servers are becoming more "application-server like", with the Lamson framework allowing the development of actual email applications (instead of sendmail macro monstrosities which barely deserve the name "application"). &gt; where people don't know or trust each other or where everyone &gt; wants to defend their own island. These islands are defended for very good reasons. Change control procedures are in place in different environments to isolate responsibilities and to reduce the amount of ways people can fuck up the environment. I have greater access to dev environments than I do to higher environments. I can trash the Weblogic domain in dev, but I have to go through change control procedures to get anything to the Weblogic domain in higher environments, precisely to prevent me from trashing higher environments where the exposure is much higher. In higher environments, there are change control procedures which are carefully vetted for risk, published in run-books and executed by authorized personnel. By controlling who has access to what and implementing change control procedures to allow only authorized personnel to make authorized changes to environments, the number of failure modes are greatly reduced, which increases predictability facilitating risk control. This is the whole point of Sarbanes-Oxley. You could call this "lack of trust", while others could call it "common sense" for implementing operations control in large environments. YMMV.
It looks like it does a Caesar shift, with N=1 for the first word, and N increases by one every subsequent word. For the second sentence, N = 21 and still increases by one for every other word. So I'm guessing that it does a N = random int from 1-26, for every word, then if whitespace, N++.
&gt; By controlling who has access to what and implementing change control procedures to allow only authorized personnel to make authorized changes to environments, the number of failure modes are greatly reduced, which increases predictability facilitating risk control. It's a fallacy though it you allow Tomcat + Spring as an alternative. Think about it. Operations forbid updating TomEE in production, since it comes with a newer version of JSF. So they have all these rules in place, since god forbid should JSF be updated without the approval of operations (who know NOTHING about JSF!). But if you use Tomcat, it's still forbidden to update Servlet, but now JSF can suddenly be updated at will? Eventually the exact same jar comes into production in both situations. &gt;In higher environments, there are change control procedures which are carefully vetted for risk, published in run-books and executed by authorized personnel. IF those procedures are there, they should ALSO be true for changing any dependency in the pom or in web-inf/lib, otherwise you are protecting exactly nothing. In lean and agile organizations, which can be huge too with very high stakes, it's much better understood by devops that there's no difference between a jar in web-inf/lib and one in [server dir]/lib.
Oval as a figure in the paincomponent. like g.drawOval etc
This is probably THE WORST algorithm you can use. It's like the Hello World of encryption that can be guessed just by looking at it. http://en.wikipedia.org/wiki/Caesar_cipher
The out of memory condition occurs when the program exceeds the heap space that is granted to the JVM, presumably by a command-line parameter. The space available to the JVM may or may not have any relation to the size of the physical or virtual memory available on the not-virtual machine.
Doing the exact same as you :) Picked up Java as my LOC as well around a month ago and am currently looking at making a few simple apps for learning for my phone
You can use properties, preferences, serialization, database, or plain files with you own format for for data storage.
 Weird little gotcha. In all my years of java I don't think I've ever assigned a type conditionally with the ternary operator, though.
Haha I agree I'm glad someone else is speaking sense. This isn't a gotcha. This is poor coding practice biting someone in the ass.
The complaints are made by ignorant people. They are invariably talking about 1 of 2 things: Java 1.0, which was abysmally slow; or applets, which compete in a space with better alternatives and have a very shaky history of security (and people don't like the JVM load time). That's all.
This came... from this same sub...
Don't forget verbosity, a complaint levelled by people who have never had to maintain a 10 year old app that they didn't write.
Java serialized objects are generally a horrible idea. Use something like [protobuf](https://code.google.com/p/protobuf/) if you want to serialize the objects out to a file.
I think there is a big change in direction between Java before the Spring Framework and after the Framework. If you've maintained code designed before the paradigms of Spring, Java is quite painful. Older frameworks have large amount of boilerplate and obtuse configuration. Spring pushed Sun and other Java backers into more developer friendly practices. The growth of languages on the JVM have furthered that growth by allowing them to pick languages a different levels of abstraction.
Im not sure about that, i think the JVM was made to be similar to other languages, and to also allow people who had some knowledge to transfer it over to Java. My opinion anyway! :)
To broadly answer your question, it's more a question of architecture/application than it is specific to Java. Mobile applications, in general, will use either small files or a lightweight databases (both the iOS and Android platforms have them readily available) to store data if it's local. Remote storage could basically be... anywhere (cloud, application provider site, etc.). With regards to... encryption/scrambling, if *I* were writing a mobile game that's not mulitplayer and no connectivity, I don't think I'd even bother. If you want to hack your phone to cheat your high score... or get to the ending... there's no incentive for me to stop you. If I cared enough, I might put in some sort of one-way hash that let me quickly validate save information to make sure it hadn't been changed. Onto Skyrim... fundamentally, assuming all of the data is saved locally, you need to save every data point to be able to exit the game completely and start it again and have a predictable experience. In other words, if your interaction with an NPC has some sort of effect on the game, then it needs to be noted somewhere. If you talk to an NPC 5 times and there's no outside effect and the NPC treats you the same each time, then there's nothing that needs to be saved. If I had to guess, NPC interactions work like state machines, and each NPC has their own state machine, and as you talk to them, your character is at a specific state for that NPC. If you think of them as numbers... that means for every NPC you interact with, the save game only needs to save a value that notes what state your character is in. Even with a million NPC's, that's not a lot of data in today's world. It's probably not plaintext though, no... not because they're hiding it, but because it's faster to read millions of numbers in binary than it is to read them as text ;).
By actually trying to do your damn homework.
Not unlike C++ written before and after STL, then. 
I maintain a 10 year old app I didn't write. I'm not sure why that's a factor for pro verbosity. Verbose try catch blocks and anon inner classes make understanding and maintaining the code more difficult than it should be.
Or inheritance hell, which is only used by bad programmers or in extremely specific use cases but which seem to represent Java in every non-Java programmer's mind. (ex. the AbstractProxyFactory or what was it, in the Spring Framework)
I've used TPTP (thought it sucked; even tried a few different versions), jconsole (not bad, but I thought it was limited), HPROF (is that really a profiler? better than the other two at least), and JProfiler (which I talked my boss into buying because I really liked it). Haven't used the others. 
Hahah yeahhh i did i got it almost immediately after positing this
Most of the problems people outline, such as method and class names being too long, can be remedied by Eclipse's code-completion and code-suggestion. And would someone like to explain to me how the language that supports the most popular mobile operating system in the world could possibly be "dying"?
I use YourKit in development, and various CLI tools in production. The only developer license investments I have my clients/employers make are generally YourKit, JRebel and IntelliJ IDEA. Well worth the money when you look at how much you pay your people compared to how long it takes to get the results you want.
Yeah, yeah. C is dying. C++ is dying; and Java is dying. People who say these things equate "new" with "alive". These languages are good, solid, work horses. They will not die for a long time, if ever. Next year: Python is dying. 
The design parameters would probably allow for caching JIT statistics between program runs, for faster startup speed of small programs. Hopefully a lot of stuff in ``jdk/src/{solaris,windows}/native/java/lang/java_props_md.c`` could be get rid of, and various sensible defaults, such as UTF-8 encoding, would be chosen. JVMTI (and its predecessors) would hopefully provide useful instrumentation runnable in production with well known and very stable overhead. Instead of coming up with their own protocols for interoperability, I'd hope that JVM designers would just leverage contemporary communications standards such as MQ/AMQP and REST/JSON. JVM GC and concurrency designers would provide prole-level documentation of the interaction of the processor silicon, system bus, on-die cache, system main memory, operating system scheduling and memory management, JVM memory and concurrency primitives, and the user level. Two hundred hours of nerd talk on YouTube would suffice. Jon Masamitsu started on that, but I'm guessing, drowned under bureucracy. Hey, how quickly did the last decade slip by. The designers would probably give the Java bytecode instruction language a somewhat higher profile.
There might be a good reason to use Logger.getGlobal(), but I can't think of it. With Logger.getLogger(getClass()) you can then set the logging level for that particular class, which is extremely useful and one of the main benefits of logging vs. something like System.out. I found [this article - javacodegeeks](http://www.javacodegeeks.com/2011/01/10-tips-proper-application-logging.html) informative. And good for you trying to figure out logging. You'll use it the rest of your software development career.
byte type would be unsigned (0..255)
If you had a machine with three different applications, would you want one application to affect the SLA of the two others by swapping?
In just about any language if you write good and unit tested code it will in turn perform good and have few bugs. The real important factor is how long does it take to debug, read, and add to that code. How productive is the programmer? I could write really good C code but it will take longer to make it work on all platforms than it would with Java. In turn I can write really good Java code but it will take me longer than it would in Scala.
Java has a PR problem. Applets are terrible almost universally. Applications people see and notice they are java tend to be the bad ones. Also, it updates like nightly, which wouldn't be a problem if it could do it silently. It's so much easier to pick up a Java app and see what it's supposed to do and how it works than with other languages (especially perl). People never see the massive EE infrastructure applications they use every day. They're just "websites".
&gt; AbstractProxyFactory How you're thinking of PHP's Drupal: https://api.drupal.org/api/drupal/core%21vendor%21doctrine%21common%21lib%21Doctrine%21Common%21Proxy%21AbstractProxyFactory.php/class/AbstractProxyFactory/8
Huh, I thought I was in /r/shittyprogramming for a moment there. Creating a solid encryption algorithm is hard - as in, advanced mathematics level hard. In short, don't roll your own. If you're actually interested in encryption strength etc there's an Applied Cryptography course at Udacity: https://www.udacity.com/course/cs387
Never liked Python. I always found it's tab-oriented organization to be ugly and messy. I do admire how powerful it can be though, some amazing things have been done in Python.
- byte would be unsigned - better integration with native code similar to P/Invoke, JNA, instead of JNI - proper support for generics, instead of type erasure - ability to perform AOT compilation as a means to ease distribution, instead of relying on third parties for that 
Well, my employer was getting requests early this year for Java 1.4 based projects. The corporate world is wonderful! :)
This shouldn't be too difficult to write. You can take a look at [JavaRanch](http://www.javaranch.com/java-college.jsp). They have tutorials for beginners. Honestly, many of us could write the program for you in a couple minutes, but then you wouldn't learn anything :) With programming you go through the pain and frustration at the beginning, but trust me, it really pays off in the end.
/r/javahelp's a better place for this, and post any code you have so far. Your uni probably has tutor groups or study classes, that's the place to raise this type of question; chances are you're paying a small fortune for your eduction, get your money's worth.
Can you explain your Map#get complaint? Not familiar with key template.
Listen. You might have a real problem, which we can't help you with. Some idiot might write you such a program and help you run away from the real issue for a day, but this would make the eventual reckoning that much more difficult, when you finally use the avenues provided for getting learning support, and have to admit that you didn't actually produce the results you submitted as your own. You're not the only one with this problem. You're not the first student your local academic support structure will help with this stuff, but you might be one of the few students in their careers who actually honestly faced the issue, and took corrective action at the first possible time.
In what horrible world does python code look ugly and messy?
I, for one, find the whitespace delimited thing weird as hell AND illegible.
Certainly, Basically the issue is that this is legal Map&lt;Integer, String&gt; bob = new HashMap&lt;&gt;(); bob.get("tim"); That will return null. But really, it shouldn't even compile. After all, we just said that the map was of Integer to String, so why should we allow someone to do get("tim")? Basically, the entire reason those methods have the signatures they have is because Map predates templates. *edit: scratch templates, I've been dealing with C++ lately, I really mean generics. Sort of the same thing, right?
Java code is usually whitespace delimited the exact same way just adds curly braces
&gt; Upgrading the domain is a much different beast. &gt; EAR deployment and upgrading the domain are different and have different risk profiles. Not necessarily. It may be different with Weblogic since it's closed source and subject to licensing, but with JBoss we self build it and have its code checked in and its build dependencies in a local Nexus. Our build and deployment process is then such that there is very little difference between an ear deployment and a "jboss deployment". We can if necessary deploy either of them separately or deploy both as a single unit. For all intends and purposes, JBoss is not "the server", but a framework. The technical differences between deploying a war with a framework inside it, or a framework with an ear inside it, is rather small really. If you lay it out on your file system it's a shift of a directory level. Of course a single JBoss instance is not shared by multiple applications. Every JBoss instance runs exactly one application, and every JBoss instance runs inside its own dedicated virtual server (Xen). Our current team exists of very experienced engineers, who all had very bad experiences with the policies you describe. Operations taking control of "the server", which in case of a Java EE server is a thing they rarely understand, is one of the worst things that can happen. I have the uttermost respect for operations teams, who typically have in-depth knowledge about Linux, networking, monitoring systems and such. But it's utterly and completely over the top silly to let them have any say over the version of say EJB that is used in production. Yet, if you let operations have the say over "the server" and you consider the Java EE product to be that server, then this is exactly what is happening. It is wrong on so many levels. Spring sidesteps this political problem with a technical solution; hiding what is essentially an AS inside a war. But if you don't have that political problem then there's nothing to solve or to sidestep. &gt;Just like with Unix, how you manage the home directory is different than how you manage the root directory. This analogy would only make sense if you share a single Java EE product instance between multiple applications and potentially multiple users. I think this is a **completely flawed** setup. A Java EE product is not even a replacement for a multi user operating system, which uses processes to provide a very high level of shielding between applications, let alone for virtual servers which provide an even higher level of shielding. At most you can deploy multiple cooperating application modules belonging to a single logical application to a Java EE AS, creating a kind of extra level of layering on top of an ear. If you indeed do that, then a single AS is always for a single application and I don't think you analogy makes any sense then.
Swing and AWT seem pretty redundant. I'd assume they'd be combined into one package -- and possibly moved into a package separate from the JVM (like SWT)
Ah you see I started with Python, so i like the whole tab-oriented thing. It's carried over into my Java programming. I like it because it makes stuff look a bit more organized.
Not really. The curly braces define the code block in Java. In python, it is the number of spaces the block has been indented. Accidentally use tab or not the right number of spaces..bad things happen.
So do you just not indent? One line it all? 
16-bit char type. Hellooooooo multi-char code points.
"Okay, we're looping through that until we get here and *sighhhh*"
At one time java was for hipsters. Programmers started coding in bytecode, then assembly, and now we continue moving higher level. Each iteration of languages improved how fast we could accomplish a task. If new languages can accomplish our tasks faster they will eventually replace Java. Why? Because they will outpace the people making products in Java. It has nothing to do with being cool and everything to do with being practical.
I accidentally my code. The whole thing.
Yeah, I mean the issue is that it was set on Monday (and I wasn't in) and it's due on Monday. I only get 1 programming lecture/lab a week so the first time I get to see the lecturer is too late and if I turn it in late then I automatically get a 0.
what's the complaint with AICs ? genuine question (i'm using them extensively in my examples - maybe i should avoid them if people in general don't like them) i like them for one-off classes because they keep the usage and definition in the same place, and gives you access to final local variables
Thanks, I will take a look at that sub. They have lab sessions which is directly after the lecture but I've missed it for this week and it's due on Monday. I am paying a lot; £9000 a year ($14300 a year).
This is something that every young person moving away from home goes through. You have to take responsibility.
it's amazing the performance gain of using unsafe. for library writers it's really a boon - would love to see this enter the public api. seems to be way better than jni, i assume because you don't have the context switch issue
I didn't think it was difficult but I've had 2 lectures/labs on Java so everything is difficult! :D 
I didn't move away from home ;) But I see what you mean. I'm more concerned about getting a 0 rather than anything else - I just don't know where to start, even what to google.
It is 16-bit
I've run into a few cases where inner classes don't work like you'd expect. Mostly working with frameworks that proxy your code like JSF. I, for one, like them a lot. They're great to use for simple anonymous callback routines. I find it funny that a lot of people that don't like anonymous classes are really looking forward to lambdas in Java 8... which are basically syntactic sugar for anonymous classes.
If this helps you learn well and truly for your whole life that it's completely up to you to do you work ahead of time, so that you don't fuck up, it's completely worth the 10 grand tuition for the whole year, in my opinion. Depending on their financial situation, it's likely that your parents would agree. It's up to you to plan your work so that this doesn't happen again. http://docs.oracle.com/javase/tutorial/getStarted/index.html
Slower Than Light?
Only one I've used is Yourkit. Seems to do the job fine... haven't really had a need to try another.
The complaint isn't usually the functionality anon classes provide but usually all the syntax around them. Lambdas lessen that burden
ok - that makes sense
&gt; Tic Tac Toe is a fun game to play. I call shenanigans. 
JVM != Java (the language)! :)
Definitely. I do want to do well I just sometimes need a little direction. My parents aren't supporting me (and in the UK loans don't work how they do in the US - we get a Government loan for tuition, a Government maintenance loan and a Government grant depending on how low your parent's income is - it isn't secured against a house as it isn't a traditional bank loan. You pay back 9% over £21k of what you earn and if you drop below that you pay nothing, and after 30 years it's wiped.). Either way I'll be $80k in debt in 4 years so I do want to do well.
I definitely agree with that viewpoint about the usefulness of lambdas. (In fact, I'm really looking forward to Java 8.) Some other arguments I've heard from co-workers about non top-level classes are: - Anonymous classes don't have names and are harder to debug. - Inner classes can often be converted to top-level classes. I'm of the opinion that you should use the right tool for the right problem. Sometimes anonymous and inner classes make the most sense.
I have to agree. There are a lot of places where you need what is essentially a function pointer. My complaint isn't so much about function pointers existing as a concept, but about how unreadable they make the code declaring them.
It hardly needs to be done given the existence of Android. Granted, that's not WORA, but I think J2ME proved that WORA on mobile wasn't going to work anyway.
So? You're assuming it will never happen. It's not a big deal. I can't use all the features of C++ just anywhere I feel like either. So?
Maybe it's just me, but I think especially in examples it's not a good idea unless you're also explaining or naming the syntax. I'm a researcher in an area where regular C is everybody's first language and people never even know what to Google the first time they see an anonymous inner class in one of our framework's API explanations. 
No, I was thinking of the [AbstractSingletonProxyFactoryBean](http://docs.spring.io/spring/docs/2.5.x/api/org/springframework/aop/framework/AbstractSingletonProxyFactoryBean.html), but I forgot the name.
 print ''.join('%(pre)s%(num)s %(bot)s on the wall, %(nul)s %(bot)s,\n%(tak)s\n' % (lambda c,b:{'pre':['','%s %s on the wall.\n\n' % (c,b)][abs(cmp(c,'Ninety-nine'))],'num':c, 'nul':c.lower(), 'bot':b,'tak':['Go to the store and buy some more... Ninety-nine %s.' % b,'Take one down, pass it around,'][abs(cmp(x,0))]})((lambda x,o: [(['Twenty','Thirty','Forty','Fifty','Sixty','Seventy','Eighty','Ninety'][x/10-2]+'-'+o.lower()).replace('-no more',''), o][int(x&lt;20)])(x, ['No more','One','Two','Three','Four','Five','Six','Seven','Eight','Nine','Ten','Eleven','Twelve','Thirteen','Fourteen','Fifteen','Sixteen','Seventeen','Eighteen','Nineteen'][[x,x%10][int(x&gt;=20)]]),'bottle%s of beer' % ['','s'][abs(cmp(x,1))]) for x in xrange(99,-1,-1))
https://github.com/spring-projects/spring-framework/blob/master/spring-aop/src/main/java/org/springframework/aop/framework/AbstractSingletonProxyFactoryBean.java
To answer your question I don't know what the next level is, that's what all these new languages are looking for. 
Uh, assuming you mean compiler + runtime: * No primitives and no autoboxing / unboxing. Everything's an object. * Runtime aware of generics / no type erasure * no anonymous classes - just lambdas.
Your lecture notes should contain this information. You can also go through the Java concurrency tutorial lesson: http://docs.oracle.com/javase/tutorial/essential/concurrency/
Most sane text editors and IDEs use 4 spaces by default for indents when editing python files.
No primitives would force quite a few from JVM to C, just saying. That is a significant difference in speed
Three syntax changes I wish Java had: 1) multiline strings (like triple quotes in python) 2) map literals (something like Map&lt;String,String&gt; = {"abc":"123"} using HashMap as the default implementation would be very nice 3) more type inference (something like var map = new HashMap&lt;String,String&gt;(). Typing Map&lt;String,String&gt; feels so redundant, why can't the compiler figure it out for me?) Java 8 is a big step forward with lambdas and I hope future versions include more syntax changes like this. 
By bytecode I meant flipping bits, I apologize if I used the wrong term. By finish the task faster I in no way meant just write code faster. I meant all pieces of development, can they code faster, can they refactor, add new features, and do they find and fix bugs faster.
smd much?
SWT mah nigga SWT
Why no primitives? And anonymous classes can't be replaced by lambdas if they have more than just a method, no?
Visual VM is quite nice. Plus, it's free. I highly recommend it.
Start with a "hello world" tutorial online, that will show you how to very easily output text. Next look at how to accept input from the user, to get the 3 numbers and put them in variables. Next look up how to do basic math to variables. Next look up how to concatenate strings. Solve each of these problems individually testing as you go. Once you can do each thing separately start putting them together. For me the easiest way to code is to break everything down in to subproblems, figure them out, then put it all together. Also, go to office hours, or email the prof/ta to ask for more office hours if you missed the scheduled ones. Good luck, I hope that helps a little without saying too much, its a fine line. Programming is fun problem solving. Get used to enjoying the puzzle and figuring it out on your own(with google of course). You will never feel like you know how to do it already just because you went to lecture.
I get your point, and I don't think either is especially easy to read.
For your number three, in Java 7 you can type: Map&lt;String, String&gt; var = new HashMap&lt;&gt;(); Saves a few characters, I guess.
You've just started and this is your second stumble in a very long and bumpy path. The first stumble was missing that lab class - it'll have a lecturer or postgrads who are used to writing and explaining code day in day out. If programming doesn't come naturally to you, it's no doubt the best way to learn - not only can you learn and ask questions of people who are really experienced, you can hear from people who have only a slightly better idea than you explain themselves in language you're familiar with - it's often overlooked but experienced people often forget what it's like to not understand concepts and terminology. Programming doesn't come naturally for a lot of people, but neither does any skill, and yet there's millions of people who dance, play instruments or ride bikes. So much of programming, especially java as a beginner, you can see as magic words that do things for you - it doesn't matter how exactly some things work, just that they do. Looking briefly at your assignment, you need to know: - what variables are and how to define them. - how to add, multiply, subtract and divide numbers stored in variables. - what strings are, and how to concatenate strings - how to use input - how to output to a terminal The chances are, your lecture notes will cover all these. Does your university have BlackBoard or similar? There might be notes on there. If you email the lecturer, they might explain where to get them. People are more generous than you think and as long as you never ask someone to actually do the work for you, people don't mind answering questions. Programming is really glueing smaller working pieces to make a larger piece. (It's the whole discipline of software engineering in a nutshell.) Start with how to output to the terminal, and you can experiment from there on.
Inner classes, anonymous or not, maintain a reference to the instantiating instance of the outer class. If you just want to keep related structures together, make your inner classes static (please!). If your goal is lambda like behavior, AICs are your only current solution. Personally I find them to be a vile thing that begs for refactoring. When java 8 is released, I will actually take a much harder line since lambdas will be a language feature and there won't be any excuses left for AICs.
As an aside, very few people entering university for a computing-related degree have worthwhile programming experience, in the UK at least. You're in your first year. It's essentially the foundation to the rest of your degree with regards to knowledge and skills that academically isn't as challenging as what's to come, but a lack of effort now will make the subsequent years even more painful.
You should avoid using all of java's crazy alphabet soup when talking to beginners. I've been programming Java for five years and can't tell you what JSR-250 is without googling it.
If I could have 1 and 2 I would be a happy programmer.
The (end) user facing side of Java is dying, largely because of issues with applets. So to the general public, it looks like "Java" is dying when really just the part that an end user could easily identify as java is what's dying. It *does* have a problem with being excessively verbose, but there are ways around that without abandoning the platform altogether (JVM).
Awesome thanks, reading it now.
Back when I was an SA, everyone (myself included) thought Java sucked ass because we'd look in the logs and it would look like a zillion errors were occurring all the time and Java was constantly barfing all kinds of nonsensical garbage, whereas apps written in C++ had much cleaner logs and were obviously far superior. I felt pretty stupid when I realized all the "barfing" was actually stack traces and it's a hell of a lot easier to debug Java than C++ for that very reason.
Don't get me wrong, code style, including indenting, is very important to code being readable. My annoyance with python is that the code style becomes part of the application logic. 
Ha! Yes actually. Cisco apps. But actually, they weren't the sole ones to put out crappy programs. Alcatel did as well.
java.util.Map.Entry :( makes me a sad panda. 
You like them for exactly the reasons I don't. ..... I don't think we can be friends :(
Yet that's the whole benefit! In order for your code to even *work* it has to look right
Same, coming from Python. I still think fondly of Python but not having static types when working with 3rd party libs or a large codebase can really be a killer. You're *supposed* to use documentation instead, but many things *cough hack Django cough cough* do a poor or incomplete job, imo
They have pretty good code formatters these days
Upgrade our application middlewear? Are you *mad*?
Why are people bothered by this?
could zip the text maybe; but why obfuscate a single player game on a local machine? they want to cheat whoopie? I guess if you haaaddd to you could encrypt it, hide the key by generating it with a determinate function, so it doesn't pop up when you open the .class in a text editor. eg this +this * that / thingy there's your key. There's fancier ways they fail too; locks only stop the honest. I'd also probably use json or something. It's less of a pain to jaxb annotate a few getter/setter beans than write a bajillion read the file this line goes into that object methods for each field. 
this is why, when i have control, i force java devs to [use braces for every control statement](http://pmd.sourceforge.net/pmd-5.0.5/rules/ecmascript/braces.html). it's part of the build tool, you will fail the build if you try to get around it. yes, yes, it's occasionally nicer to not do it, but the rigid consistency removes all debate and lets you focus on more important things. 
My favorite code it the one that pays me the most. GET PAID BITCHES
Yes we added jars to Jetty for additional functionality. Why this is problem? Grand total was certainly not bigger than full application server because we added just what we needed. Full application server contains things we don't need or do not want to use (use some alternative jar anyway).
A new syntax isn't a higher level of abstraction, it's just another abstraction, which probably could have been implemented in java.
If by 'implemented on Java' you mean 'possible to do the same thing in Java with a lot more code', then yes, but that's the same with byte code and assembly. It is possible to implement many of those things with the JVM, but that's not the same as saying they can be done in Java.
Signed bytes are easier to deal with when underflow/overflow occurs.
Signed bytes are easier to deal with when underflow/overflow occurs. However it complicates code when you don't care about it, because you always need to check the sign bit for values above 127.
I use YourKit at work, but we do some primitive profiling with jstack as well. Periodically jstacking our internal app servers every minute lets us analyze behavior over long periods.
I'm not sure we've used the same Gradle. With the Java plugin, running the tests is gradle test, just like in maven. No magic unless someone breaks conventions to the point of rewriting the Java plugin. I've found the same is true for most other language plugins as well. This the standard behavior, not some special maven mode. Task ordering can be handled many different ways. Best case through defining the outputs of one task as the inputs of another, but even in the worst case you can just declare one to depend on the other. In all cases, it's declarative. For standard Java life cycle steps, the Java plugin already lays these dependencies out correctly for you out of the box, just like Maven. You can break conventions in Maven too, it's just harder. People breaking conventions for no good reason is a people problem, and you still have to go out of your way to break them in Gradle. Ant as a first class citizen is useful for transitioning legacy builds. I rarely see it used for anything else, which is as it should be.
If you look at how some Smalltalk implementations does it, the primitives would look like objects but be primitive types internally.
Or objects could be serializable by default and the important ones that you don't want to be serialized could be marked as such.
It makes the assumption on what looks right to you. I'd prefer brackets and indent however the fuck I want. I don't want to have to worry about whitespace.
That's actually a wrong assumption. As /u/SomeguySomeway suggested, there is no reason why primitives can't be exposed as objects in the language, but implemented as primitive in the runtime. Then you get rid of ugly stuff like Integer(2).equals(new Integer(3)) and implicit conversions like Object o = true ? new Integer(1) : new Double(2.0) being actually 1.0 and you don't sacrifice speed. It's a win-win really, surprised it is so controversial.
I have to say I concur, demanding certain whitespace standards seems very strange. I don't particularly like the way the code looks in Python from what I have seen, in part because of the indentation and in part because of the tendency to take a 'less lines over readability' approach. Thst being said, I have had limited exposure and am open to changing my views.
Naturally Java 7 can produce bytecode compatible with the requirements of the Android platform. The Java 7 features (diamond operator, string switch, multiple catch, underscore in number literals, binary literals) that does not depend on the library thus supported. The try-with-resources statement and the @SafeVarargs annotation are supported. java.lang.AutoCloseable https://android.googlesource.com/platform/libcore/+/9902f3494c6d983879d8b9cfe6b1f771cfefe703 java.lang.SafeVarargs https://android.googlesource.com/platform/libcore/+/bce3d7cfe03fcb70bd374ad2e8b16ba64a45e993 Other previously hidden Java 7 libraries are also available. https://android.googlesource.com/platform/libcore/+/8ffa0b68c9fd3f722bee2bcd94b1d38151a0791d
It is all nice to point to Android source code, now with which SDK/Android version can you use them? Last time I checked, it was not possible with any. http://www.informit.com/articles/article.aspx?p=1966024 Usually I tend to use C++ anyway, as I only care about games and portability across mobile platforms.
&gt; It's carried over into my Java programming. Wait, so without python you would not ident your code in Java?
It must be certainly bad that there are recently updated applications targeted for .NET 2.0 which still run on Win98.
1. Groovy. 2. Groovy. 3. Groovy.
I frequently enjoy the blog posts coming out of Atlassian – as with this one, there is a real-world motivation, followed up by a good amount of investigation, explanation and detail. Looking forward to more of these.
Proper handling of tail calls, of course. I am pretty sure this will be added soon as people adapt a more functional programming style with Java 8 and realize that they get lots of stack overflows for no real reason. Or memory overflows, just because some reference is held in some frame that is not really needed anymore.
Seriously. Wow, I've been learning Python for almost two years just so I can get ahead and benefit later. Well, at least it was sort of my first programming language so I can treat it as good practice.
We build software almost exclusively for integration with Cisco's UC platforms, though we're US based and primarily focus on the contact center side. There's some pretty cool stuff when you really get in to it :)
I'm not sure. I suppose I would, but I wouldn't know because I started Python before I started Java.
Ok your TomEE is perhaps not a monster. I have never used this particular application server before. But i know for sure that full AS is not necessary for transactions, security etc.
My LinkedIn message box says that Java is not dying.
&gt; At one time java was for hipsters. There were no hipsters when Java was created.
While I agree it's easier to debug, and it simplifies the data types (they're all signed except for char), it disagree that it is any more useful in practice. It seems silly to use 16 bits in order to represent typically byte-length values (like the values in 24-bit RGB).
Sure, I agree with you, hence my first bullet point.
Shit, didn't even notice.
You should investigate Kotlin, it compiles to bytecode, interproperates seamlessly with Java, and has great IDE support.
&gt; map literals (something like Map&lt;String,String&gt; = {"abc":"123"} using HashMap as the default implementation would be very nice This was on the road map for a long time, I think even for Java 7. Rather serious and it seemed like it would actually make it. Wonder what happened there.
Disagree on removing anonymous classes. They *can* be replaced by lambdas, but so can everything\* - that's the whole point of Lambda The Ultimate. Anonymous classes are good for mocks, tests, constants, and special cases. ^(*notwithstanding fexprs)
Exceptions
http://martinfowler.com/bliki/BlueGreenDeployment.html
For fuck sake, can the Java world produce anything other than articles about Why Java Is Not Dead, or Why Java is Still Cool, Why Java is Greater than Ever!! Hey guys! We're still relevant! Who are these articles for? Seriously. Are they for people sitting on the fence trying to decide which language to use, people who already program professionally with Java, but want to be validated that their technology is still OK to use, or maybe just for the stray MBAs so they don't pivot an entire organization to a "cooler" language? This is the only sub which has posts like this. It honestly seems 100% unique to Java. If you check out the Python, Javascript, Scala, or even C++ subs you don't see anything like this. You'll occasionally see posts addressing the problems that the languages need to overcome to *stay* relevant in the future, but no simple posts about the general "Look how great we still are!!!!" Hell, there even seems to be 2-3 sessions at *every* conference with the sole purpose of comforting Java users. I just don't understand the *constant* barrage of these posts. Java is still the most widely used, still the highest paying, still powering stuff all over the world -- and even if it fucking wasn't, what happened to just being passionate about a language? Can we talk about some of the cool stuff in Java, not just its perceived relevance? Man. /Rant. 
No. The difficulty is that even with the ability to add default methods there's no way to write a default that would be able to provide a reasonable implementation for all possible implementations of InputStream (or even a small fraction of them). Sorry, it's a problem that can't be fixed in the existing InputStream interface.
No primitives, no explicit casting. Objects that know their own class names. Not having to say `Class.class` to reference a class. [jEnv](http://www.jenv.be/) included by default. CLASSPATH would always implicitly include `.`, the current directory of the program that called `java`. Because compiling HelloWorld.java/HelloWorld.clj shouldn't require a degree in nuclear fission. Lambdas. Java 8, bitch!
No, InputStream is an abstract class.
Thank you. To be fair however, that isnt why /u/shinyquagsire23 thinks python is ugly. 
You can run up against scalability concerns pretty quick, especially if the native code has global state or otherwise doesn't multithread well. I believe that only one classloader can load a native lib at a time, so you have to deal with that as well. It's real easy to get something out that works today, to find yourself painted into a corner where you aren't really utilizing a node completely, but just can't add any more apps to a running server. Especially a pain if you are using a commercial application server and can't just throw more instances out there without additional licensing.
If you work in any team setting, you should across the group pick a standard for code format. Python has some of those choices built in. Plus you save a lot of keystrokes in the long run, and get more compact code. Which can be very readable if you dont try to get overly cute with lineing shit. 
Legibility is really a factor of consistency and familiarity. If the code is consistent in its formatting and style, given time for familiarity, it will be readable. If anything, Python forces a level of consistency, then it is a matter of you becoming familiar with it. 
Right: Python is opinionated. I disagree with it's opinion.
*sigh* and that was a choice that seemed correct at the time and turned out to be wrong, hence we have code points that take multiple characters.
The MT issues I am well aware off - forgot about the classloader. The classloaders are really hamstrung on the appservers. My thought was to wrap much of the JNI things into an EJB. At least the code would be somewhat isolated and distributable. Obviously this can only really work if you can add instances at will.
bw.write(Boolean.toString(content));
&gt; Boolean.toString(content)) You're awesome! Is there an INT one I should know about? 
Excellent Keep it up! If it wasn't for Java, those other popular languages wouldn't exist. Also Unlike some other languages that have a slow update/progress time to fix or add any new features. Java at least more recently has been taking a very active approach to making the language better. 
It's exactly what you would expect. Integer.toString(someInt))
 Integer.toString(content) 
My post was semi-sarcastic. I meant that if you did not and did not want to change that - you would probably never get a Java job. It is one of the main principles to indent your code, you learn that before you learn the 'hello world' application.
The [read()](http://docs.oracle.com/javase/7/docs/api/java/io/InputStream.html#read\(\)) method on InputStream returns -1 when there is no more data left in the stream.
Do you mean "indent" or "ident"?
It's in your original one too
These are the same: &gt;`(!A &amp;&amp; !B)` &gt;`!(A || B)` A|B|Result -|-|- false|false|true false|true|false true|false|false true|true|false [`(!A &amp;&amp; !B)` is what you originally had.] These next two are the same as each other, but different to the two above: &gt;`!(A &amp;&amp; B)` &gt;`(!A || !B)` A|B|Result -|-|- false|false|true false|true|true true|false|true true|true|false See [De Morgan's laws](https://en.wikipedia.org/wiki/De_Morgan%27s_laws). Putting the `!` on the outside is more readable anyway.
Haha, love the Bilbo quote.
Oh it's cool. I figured that's what you meant anyway. But yeah... I dunno, I guess since I started with Python it really encouraged a particular practice so it just became a habit. Plus, programming in Python was really easy to get something quick up and running, so I guess doing that really made me enjoy it, which obviously helps with the whole thing.
Are you on IRC a lot? Bevin?
And that stuff hasn't really changed in the last 10 years. Now we are just finding out that Python, Ruby didn't take over the industry like we thought.
&gt; It has nothing to do with being cool and everything to do with being **easy enough for beginners**. FTFY - Seriously, this is my belief, and I'm not really disagreeing with you as much as I'm building on your statement: That a programming language community will, apart from current market force considerations, grow in proportion to the number of developers that can understand it well enough to be immediately productive.; i.e. it meets the demands for the current path of least resistance to productivity. At one point, Java was that tool relative to the other options. But then, MS effectively forked it with C#, and Python and PHP emerged from obscurity and, worst of all, J2EE became the de-facto standard. All of the sudden, Java looked like the last thing you'd ever want to use, what with all the jibber-jabber about proxies, SOAP, remoting, and blah blah blah. That's not stuff that helps programmers get real work done AND it was damn hard to get started with it. I mean, blech.. I'd probably never touch Java again if I had to go that route all the time. To some extent, Java still isn't the preferred tool of the new generation. But if you want to do Android development, you have to be on it, but that's not saying much. If you want to be super-productive with it, you can nearly get to a RoR-like level now with frameworks like Play. Anyway, I'm getting away from my original premise: Future programming community health directly relates to how easily we can bring beginners into the fold relative to other current options in the industry. Full stop. If you want proof, then look at the overall history of the Lisp community, including the recent surge in popularity they experience around PCL and other books. All of the sudden, they have new awesomeness going on in the form of quicklisp and other projects. Java gets new stuff like that all the time too. **We just need to make sure beginners are getting the best of it from day 1**. 
Some of the things I'm noticing: 1. I don't see the list declared or initialized. It should be declared as static btw. 2. The getZombie method should be returning a Zombie object from the list with list.get(i) 3. For the for loop in your main method the functions you are calling are static methods so you need to reference the Zombie class when calling them. So Zombie.getZombie(i).printZombie() should work. 
You're missing the arraylist to hold your created zombies. public class Zombie { ... static List&lt;Zombie&gt; list = new ArrayList&lt;Zombie&gt;(); public Zombie(String name) { ... list.add(this); 
Man, this sub is full of people in denial. Java may be alive, but it's the old gross naked dude in the locker room. Yeah technically you can always count on him being there, but damn...
Zeroturnaround has a vested interest in keeping Java around. Their very awesome solutions to Java's shortcomings nets them a lot of money.
what about the other issues, e.g needing to test with different optimization settings to see which one works best, or some optimization settings not working with some processors, etc?
So Servlets, SOAP, and REST and you think you aren't using Java EE??? You might not be using a Java EE Full Profile certified application server but you are most certainly using Java EE.
I'm sure someone more knowledgeable than me will give a better answer, but .class files are the result of your compiled code. I don't get what you mean "run by themselves", do you mean run the program by itself, without using an IDE or through the command line? You can do this by creating a .jar file, which is basically a Java executable file, that uses .class files. If you want to show someone something you made, you either show them the .java file (source code), or create a .jar file (which takes more work). If you're just starting out with Java, you shouldn't have to worry about .class files.
you sound butthurt, like the guy whose been regularly getting buttfucked by the big dude in the locker.
I didn't mention SWT because it's really a special case. Whilst not as fast as pure native GUI's provided by C++ (or even .NET), they do a lot to overcome the java performance perception through the use of JNI.
Yeah my butt hurts pretty bad from having Java shoved up there so often. Thank the lord Jesus Christ I enjoy anal sex so much, otherwise it would be quite an inconvenience.
Ternary (input &gt;= 1 &amp;&amp; input &lt;= 10)?"Apples":""; It's short hand for (if)?then:else;
Ternary and the if block are effectively the exact same construct just that ternary lacks the same degree of readability and is harder to add to later. Depending on range sizes and goals, tediously complete switch cases may get you the best performance. It's unlikely to matter, though. Personally, if this was something I had to deal with as part of a serious project I'd create or use a RangeMap. Guava has a suitable implementation. The idea is you'd create entries in a special map where you'd specify the ranges like 1-10 as the key (using a Range type) and the value would be "Apples". Then if a .get() call is passed any value within the range, it will pull the "Apples" value. http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/RangeMap.html
Not sure what the hell you are doing but regular expressions are the answer
http://stackoverflow.com/questions/7813412/java-ide-on-iphone
As far as I can remember Apple strictly prohibit anything that can run code on its iOS devices. You can get editors that will pretty print your code and you can get SSH clients which will allow you to code on a Linux box remotely though, assuming you have an internet connection.
Yea it's pretty horrible. All I want to do is convert a string like: `String(byte[] ascii, int hibyte, int offset, int count)` to: `String(byte ascii[], int hibyte, int offset, int count)` Basically move the brackets. I don't know how to do that with regular expressions though. Would they even work for something like this? 
it looks you are trying to reformat source code. Regex is probably the most straight forward way to go about it, regardles of the "now you have two problems" train of thought.
Obviously not an iOS app, but are you working with anything that can't be done on http://ideone.com? That's pretty much my goto web IDE/compiler these days, plus it supports a bunch of languages.
they took over the brogrammers, which really helped java become a true professional's language. 
Maybe not necessary in that only a full AS can provide that, but they surely make it easy.
It sounds like you inherited a nightmare. Anyway, surely the variables suggested by auto-completion by the editor are implicitly the variables that are in scope?
MVC is nothing to do with building runnable Java applications. It's also a fairly advanced subject for someone who's only just built and run Hello World.
A class file will not run on itself. It contains bytecode that can only be run by a JVM. Without a JVM you have only random bytes. Where to go now depends on what exactly you want to do. Do you have a command line application? Do you have a graphical interface? Do you have a web application? For command line applications you will still use the java command line tool. This tool can run a Java class that has a static public main method that accepts an array of strings as parameter. For this to work the class and all of the other classes it depends upon (by declaring import statements) must be accessible on the class path. By default this is the directory from which you invoke the java tool. You can put multiple classes in a JAR (Java ARchive) and add the JAR to the classpath (-classpath parameter of the java tool). If you organize your classes in packages don't forget that the full name of your class is the name of the package plus the name of the class (e.g. com.example.MyClass). The class file needs to have this path com/example/MyClass.class. Whether in the filesystem or a JAR doesn't matter. Either has to be added to the classpath. Example: &gt; java -classpath my-first.jar com.example.MyClass Hope that gets you started.
Don't use regular expressions. Just loop over each character once using an inner loop to skip like this: private static String rearrangeBrackets(String str) { StringBuilder sb = new StringBuilder(str.length()); for (int i = 0; i &lt; str.length() - 1; i++) { // check for "[]" if (str.charAt(i) == '[' &amp;&amp; str.charAt(i + 1) == ']') { // append the forward characters, skipping the "[]" for (i += 2; i &lt; str.length() - 2 &amp;&amp; str.charAt(i) != ','; i++) { sb.append(str.charAt(i)); } // add back the "[]" (don't forget the current char =) sb.append("[]").append(str.charAt(i)); } else { // didn't find "[]", so just append the char sb.append(str.charAt(i)); } } // append the last char since we broke the loop early to prevent extra bounds checking sb.append(str.charAt(str.length() - 1)); return sb.toString(); } 
 return str.replaceAll("\[\]( .*?)(?=[,\)])", "$1[]"); 
iPad has a remote desktop tool you could setup to remote to your computer where you could type in code directly there and compile/execute it on desktop through eclipse or whatever 
Nicely done. I still wouldn't use it because it would fail on perfectly valid (though unusual) syntax like: String str = "String(byte[]\\n ascii, int hibyte, int offset, int count)"; The looping solution would pass that as expected. The inner loop bounds are wrong on my example above though, so my code fails if the final arg is an array which your regex handles perfectly.
Just curious, why would you want to rearrange the brackets to the "wrong but supported due to wooing old neckbeard C developers" form?
I'm writing a Java documentation reader for a project while I learn Java. It's got a source code viewer and I wanted to parse out the method and constructor declarations so I can implement an auto complete search bar to jump to method declarations in the code. It seems that while the online documentation has the normal array definitions the actual source code uses the other one for some reason. I thought it was weird too. 
I like this solution. It's a lot easier to read and follow than my mutated attempt :)
Any chance you could explain how this works? I don't know much about regular expressions and it looks a bit like magic to me...
Maybe it makes more sense like this? // escaped since square brackets have special meaning in regular expressions String brackets= "\[\]"; // The surrounding parentheses mark this as a group // .* -&gt; 0 or more of some wildcard (greedy) // .*? -&gt; 0 or more of some wildcard (non-greedy) // The point of non-greedy is to make sure the next part matches the first "," or ")" and not the last. // Regular expressions attempt to match as much as possible by default. String identifier = "( .*?)"; // (?=x) -&gt; Look ahead for some x, but don't consume those characters // [,\)] -&gt; either comma or right parentheses String endOfIdentifier = "(?=[,\)])"; // $1 inserts first matched group. // No need to escape square brackets here since this is the replace String bracketsAfterMatchedIdentifier = "$1[]"; return str.replaceAll(braces + identifier + endOfIdentifier, bracketsAfterMatchedIdentifier); 
Thanks heaps! When you break it down like that it does make sense. I really need to get a book on regular expressions because they really are handy. Thanks again for the clear explanation.
Hmm... 'Java console' you say? Guys I'm not entirely sure the OP isn't asking about JavaScript. I'll prepare the trap-door.
typical day in the enterprise
http://stackoverflow.com/questions/632204/java-string-replace-using-regular-expressions I think this is a similar problem
For map initialization you can also do something like Map&lt;String,String&gt; var = new HashMap&lt;String,String&gt;() {{ put("abc","123"); put("xyz","753"); }}; but if you do this, you actually have to provide the types in the HashMap&lt;String,String&gt; (even in Java 7) because what this does is construct an anonymous inner class that performs the initialization of the data, and that inner class can't be created without knowing the types. Would be nice if the two options could be combined like the #2 that AOE was asking for. 
There's the transient keyword in Java already.
So does scala
If the numbers are in a consecutive range you don't need to store them, just use them as array index values; static String[] values = {"Apples", "Oranges", "Pears"}; statc String UsingArray(int input) { int offsetCorrection = -1; return values[input + offsetCorrection]; }
Thanks for the help guys
Most operating systems support the idea of executable JAR files if you want something you can double-click on. A JAR is basically just a zip file containing your class and a mainfest text file that lets java know which class inside of the JAR file has the main method. This works best for GUI apps but can still be of some use for command-line apps. If your app is a command-line app (like HelloWorld) you can still package everything up and run it from the command-line by running **java -jar MyApp.jar** You would then normally create an OS specific file like a .bat on Windows or a .sh file on Linux that runs **java -jar /path/to/MyApp.jar**. You can then put the .bat or .sh file in one of the directories included in your PATH (or modify the PATH env var). At that point you can execute your Java program on the command-line by typing just the name of the .bat or .sh file. 