&gt; it's not the case most of the time in real world. That really depends on the project. If you take the time to properly model your data you don't typically have this problem. If you just stuff 'data' into 'tables' you have to refactor a lot. Boils down to the maturity of the engineering culture IMHO. 
There's always a schema. Either in your your code or in the database. Since the database is the only place where a schema can actually be enforced I much rather have it in the database. 
For the first, something like this. I just woke up and am on mobile, please excuse any silly mistakes! public interface ThrowingFunction&lt;T, U, E extends Throwable&gt; { U apply(T t) throws E; } This works because iirc in the absence of any other useful bounds on `E` the inference algorithm slips in a magic upper bound on `RuntimeException`. For the second, instead of declaring your functional interfaces to throw a type parameter they can just throw `Throwable` so they can be caught and retained by the stream implementation. There are a few ways to approach it other than wrapping in `Eithers`. For example instead you could have something more akin to `Optional`, except primed to rethrow the last caught exception rather than just an NPE. That way you could say ...map(i -&gt; i.get().something())... and the get would rethrow any earlier exceptions, thus passing them forward through the chain. It's still a bit awkward to have to do a `.get()` for every map though, and it precludes any useful application of method references. Better I think is to overload map to have the original signature (with our throwing function) alongside `&lt;U&gt; Stream&lt;U&gt; map(Function&lt;? super T, ? extends U&gt; mapping, Function&lt;? super Throwable, ? extends U&gt; errorMapping)`. Unfortunately a lot of the nicer user-models make dealing with them the exceptions optional and people can just ignore them, but a reasonable fallback is just to have Throwables which are not dealt with wrapped and rethrown on a terminal operation.
There are quite a few types of programs which support user scriptability of some kind. Also, server-side rendering of javascript, or embedded simple babel transpilation are things I've used it for. With graal.js there will probably be more uses since it also implements node, so people will probably want to use it to more easily access that ecosystem as e.g. part of their build process without any external dependencies.
Idea works best for me. Dark theme, Plugins (SonarLint), Maven and SQL/CSS/HTML integration are the most valuable things in an IDE.
The fact that the server stack traces are leaking into the front end suggests you're right.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Oh! The memories. I used this library years ago.
I don't think *all* generic exceptions are runtime. IIRC the inference algorithm only adds the magic upper bound of RuntimeException in the absence of any other useful bounds. Can't check the spec tho, on mobile.
Well, if you write something like the code below then it will indeed infer an IOException but I meant Exception as in the actual Exception class so I should have left out "all" from the sentence to better convey my meaning. // Does not work private static &lt;T, E extends IOException throwUnchecked(Exception e) throws E { throw (E) e; }
I delivered a lot of working code... Using JSF 😜
Yes, it’s the same sillyness as with thinking JDBC is outdated.
Websphere is still commercial, but you might be mistaken with Ibm’s latest server / runtime called Open Libery, which is free (as in beer and speech) and fully open source (source on github). Open Liberty is a superb server!
Sure but not just that, bounds inferred at the call-site too will affect it. For example: &lt;T extends Exception&gt; throw(T t) throws T; ...then invoked as: throw(new IOException); ...will throw a properly checked IOException. Or a more complex example with the interface: interface ThrowingRunnable&lt;T extends Exception&gt; { void run() throws T; } ...and some method: &lt;T extends Exception&gt; run(ThrowingRunnable&lt;T&gt; runnable); ...the following invocation will infer an upper bound of `RuntimeException` on `T` so need no catch block: run(() -&gt; {}); ...but this one will need the caller to catch the IOException: run(() -&gt; { throw new IOException(); });
Looks quite good! Would be nice to see performance comparisons with other serialization libraries.
Man I totally agree. I only use m2e to import the project. I never build it from eclipse, only the command line. Same with git.
Thanks! Doing that is hard for a number of reasons. The various libraries have very different features. How forward and backward compatibility is handled, handwritten schema or serialization code versus automatic serialization, and other configuration likely shows big differences on charts but says nothing about ease of use, the ability for classes to evolve without invalidating previously serialized bytes, and more. Even without those issues, serialization benchmarks are highly dependent on the classes being serialized. Unless you are using your actual classes and configuration in the benchmark, it's unlikely the differences the charts show will be the differences you see in your setup. That said, you can find a project that attempts to compare Java serialization libraries here: https://github.com/eishay/jvm-serializers/wiki Besides the issues described above, it uses a homegrown benchmark framework which is a lot less trustworthy than using JMH. Still, the project can be useful if instead of just looking at the charts, you also look at what code is being run for the libraries you are interested in.
In the first approach you are making an assumption that the function will only throw one type of checked exception. And you also did not explain what will the return type of `map` function look like? `Stream&lt;Result, CheckedExceptionType&gt;`? In the second approach, you are making an assumption that every time you get an exception, you can map it and the rest of mapped data into the same common structure. This means, that the `U` in your example will need to be something that resembles an `Either&lt;T, Throwable&gt;`. I do not mean an actual Either, but something like `class CalcResult { List&lt;DomainErrors&gt; list; List&lt;Integer&gt; results; }`. So now, try imagining how will a big chain of `.map` operations look like. What if my mapping functions do `String -&gt; Integer -&gt; HibernateEntity` and each step can throw a different checked exception. Do I now need `CalcResult&lt;T, Throwable&gt;`? Oh, and I'm not even mentioning the facts that: 1. Exceptions are not meant to be held. *Especially* not `Throwable` ones. Think about OOM for instance. 2. You are loosing all of the exception types. The whole point of having checked exceptions - is to know *exactly* what kind of exceptions to expect in the end. With your approach, if I have a stream with 20 mapping functions I will have a `Throwable`, and I will need to try and remember all the checked types I have ate along the way.
I have worked on and optimized a custom object serialization library, and it's tricky work; I agree with your points. It's still possible to make valid comparisons -- but it's important to run a variety of scenarios. Tiny objects and large ones. Simple classes and complex class hierarchies. And as you said, performance benchmarks say nothing about ease of use, etc. They can be a valuable tool but certainly you should have multiple criteria when evaluating a library. This reminds me of when I used to work on display drivers, and benchmark cheating was a terrible problem for a while in the video card industry. Magazines would publish Winbench results, and it was crucial to do 'well' on the benchmark. Fortunately people (especially reviewers) got wise to this practice. Well you got me reminiscing, lol. Kudos again on your efforts and latest release. 
How does this compare with FST. 
I'm not familiar with FST, sorry.
No problem. If anyone is wondering, it’s this https://github.com/RuedigerMoeller/fast-serialization
hey it's nate! (for those that don't know, he does a lot of really cool java stuff... he co developed libgdx). 
Thanks!! :)
I learned a lot about being a better programmer from you. :) 
Just because you see it a lot doesn't make it great error handling, though. I think both types of exceptions have their merits depending on the situation and I see no reason to "side" with anything here like there's only one or the other. Java supports both for a reason. Poeple get way too hung up in their flame wars for my taste
Show me the Maven/Gradle dependency string for X.
That‘s a cool idea, thanks for the feedback!
- what boot starter has this dependency - show me spring guides on &lt;topic&gt; - show me spring example of &lt;topic&gt;
&gt; why would you build a distroless docker image that has nothing but your application and not just compile the application directly for the target platform I don't understand the dichotomy. I do "just compile the application for the target platform" and embed it into it accompanied with ca-certificates (if needed). 
I second that. We are using it in production for the last 5 years to serialize application state to the db and it has proven to be rock solid, has excellent performance, and is a joy to use. 
Could you please give me an example for the first one?
&gt; Is with client framework and rest where you meet with problems, as validation need to be done twice! If you use standard bean validation, you can use tools like [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to generate client side validation. Validation has to be done twice, client side and server side, regardless of technology. JSF component tags generate client side validation, but *only* for web browser clients. With REST, you can generate client side validation for any supported language.
Any time people get alternatives they start a holy war. Some could start a new one about giving alternatives or not.
You’re completely right, I should’ve been more clear, when I said tomcat I meant it more as in using a standalone (non embedded) one and deploying your war-file
Yes But you have to create cells filled with not values , but with UI elements like private final ObjectProperty&lt;Spinner&lt;Double&gt;&gt; buy = new SimpleObjectProperty&lt;&gt;(new Spinner&lt;Double&gt;(-1000,1000,0,0.01)); What ? 
Is KryoNet going to get an overhaul?
What did it matter? Why can't I use it standalone??
More info here: https://www.japantimes.co.jp/news/2018/05/17/national/japan-likely-announce-name-next-imperial-era-around-april-1-2019-suga/ &gt; The government will begin preparations for the change of gengō (era name) on the assumption that the new one will be announced about a month ahead of Naruhito’s ascension to the Chrysanthemum Throne on May 1, according to Suga. &gt; “It takes roughly one month to adjust information systems to the new name in the public and private sectors,” Suga said, adding that they are working under an assumed timeline, and that the government has not decided the date when the name will be released. 
Please seek help with Java programming in **/r/javahelp!** This is in so many places on the subreddit that it is near impossible to miss.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Sorry! It was easier to miss on mobile.
Spring
I think they mean like what spring boot starter is the one with hibernate?
All of the deprecated methods and the date/calendar split. Here are some more specific problems: **Inability to have a date without time**. People use the date "at midnight" but this causes problems when you switch time zones. We had a production bug where some in Poland had all of the dates messed up. **January is month zero**. One of the gotchas that pops up in conversion every once in a while. **Formatters are not thread safe**. I've never had a bug related to this happen in production but it's one of those things everyone forgets. **No good ways of representing or calculating periods or durations**. **Switching timezones is always a pai**n. "Print this time at that timezone" is always a headache
This is some great info. Thanks for that 
You don't need XML with spring.
Could you point me to the correct package in Maven central? I can't seem to find OpenJFX / JavaFX artifact on Maven...
May I ask why you chose Kryo? Did you consider XML or JSON? What do they lack?
Maybe I'm not understanding. I read 'distroless' as meaning the container doesn't have an operating system installed outside of the basic libs needed to support the binaries. So you have a layer of the basic libs in the container that the binary is in, sitting on another machine. What does that additional layer of indirection provide for a simple Go binary that makes it a better model than simply installing the Go binary directly on the host machine? I understand the draw of containers when you have multiple components that all need to be configured to work together so building an image preconfigured makes sense. But for a single binary, that's what I'm curious about.
If you use it embedded then anyone can just clone your repo and run your main method and they will run the right version of tomcat right away, if you use standalone then they need to download it, and then you run the risk of them using the wrong version. Embedding it enables you to delivery a stand-alone executable jar which makes it much easier to in your application in Docker and to spin it up for integration or service tests And to be honest, I don’t see any benefits of running it standalone, only drawbacks, please correct me if I’m wrong 
These weren't meant as concrete suggestions for improvements for *your* talk, just ideas I had in mind for something I might do myself. I'm pretty sure, your talk adds tons of value right how it is.
JavaFX and JDBC are fine.
Recently, I'm addicted to it
It is one of the apps, for which I use BlueStack☺
How do I configure XYZ? For example Spring security, hibernate etc.
Sounds good, thanks!
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I can point you to an issue tracking this, with links to other issues: https://github.com/javafxports/openjdk-jfx/issues/52 The aim is just to get it done in time for 11 when it's actually getting decoupled. At a glance, looks like the blocking issues are mostly resolved already.
Thanks! So does this mean we'll have to add an external repository (github? openjdk? oracle?), or will it actually make it into Maven Central? (who even decides what goes into Maven Central?)
I think you will find the level of effort needed for an industrial grade solution vs a toy example to be pretty big. Something like https://jsoup.org could be used to extract text features from “real world” (I.e. malformed) HTML. Going from that to topic extraction is a huge area. Doing bag of words on jsoup output would be so easy you wouldn’t need a library. To do actual topic extraction (synthesis), ranking, and having a meaningful taxonomy behind those would require more statistical based approaches
Try Jsoup
It's really awesome for beginners
Yeah you hit the nail on the head - I need to infer a taxonomy from the content of the page. There’s no 3rd party library or service that does that right now ?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
"What the fuck is a supplemental classifier?" "How can I use external property sources?" 
I think your going to find https://en.wikipedia.org/wiki/Zipf%27s_law . untested code follows;) //you already attained your document somehow Map&lt;String, Integer&gt; wordOccurance = new HashMap&lt;&gt;(); Elements elements = document.body().select("*"); for (Element element : elements) { if (wordOccurance.contains( element.ownText() ) wordOccurance.get(element.ownText())++; else wordOccurance.add(element.ownText(), 0); } ///do something with your data
**Zipf's law** Zipf's law () is an empirical law formulated using mathematical statistics that refers to the fact that many types of data studied in the physical and social sciences can be approximated with a Zipfian distribution, one of a family of related discrete power law probability distributions. Zipf distribution is related to the zeta distribution, but is not identical. For example, Zipf's law states that given some corpus of natural language utterances, the frequency of any word is inversely proportional to its rank in the frequency table. Thus the most frequent word will occur approximately twice as often as the second most frequent word, three times as often as the third most frequent word, etc.: the rank-frequency distribution is an inverse relation. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
The tf-idf statistic could maybe be interesting for you
Yeah I like to wrap interfaces to third-party libs that throw checked exceptions in a "Facade" service that handles the checked exceptions and does whatever's appropriate (usually throwing a new unchecked exception with the checked one as the cause).
I just wanted to note that we shouldn't think of these as exceptions that are being thrown from running systems in production. The vast majority of these samebug errors are likely issues that only show up during local development as that's when devs are likely to be hitting google with traces (or at least I hope!). If your production app is throwing NoClassDefFoundException errors in production you've got some big issues! Or some shitty deployment strategies, not sure haha.
Hey, I wrote my thesis on something like this a few years ago. I don’t know if there exists a library for it but you should google “aspect based sentiment analysis.”
One of the products my firm sells does something quite similar to this. The theory vs. the practical considerations is a huge gap. A toy implementation will require that you use NLP as a part-of-speech parser as a starting point. A "real" implementation is going to require stuff that dances through a minefield of patented algorithms.
Based on how far you can/want to go, there are quite a few quality machine learning libraries. E.g. Mallet: http://mallet.cs.umass.edu
What is Spring and what can it be used for?
I confirm, Jsoup is what you're looking for
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Do you really need an external library for this? That sounds a bit drastic
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
They should have hired a graphic designer for this covers
&gt; `wordOccurance.get(element.ownText())++;` This results in `cannot perform arithmetic on lvalue` To increment a map by key see the following: https://stackoverflow.com/questions/81346/most-efficient-way-to-increment-a-map-value-in-java
&gt; In the first approach What are you referring to by "first approach"? The one that just throws on each map? Why would the return type be parameterized with the exception type, the map invocation just rethrows whatever it encounters. Or are you referring the `Optional`-esque example? I'm throwing away the exception type there. And there needs to be no common structure exposed as API, though internally perhaps it'd exist. Maybe a better approach than carrying exceptions for each element would be just to short-circuit the stream evaluation the first time one is encountered, as would be the case if we rethrew. I'm just saying there are options. So yeah I acknowledge you lose the exception type info, but that's the case for all unchecked exceptions anyway and people manage. To carry the type forward in a chain where we encounter multiple exceptions we'd need union types, which are denotable in a multi-catch but nowhere else. So yeah that's one new language feature we'd need. And I don't think it matters too much that the exceptions are held, since they will only be created if a terminal operation is used, and so we can guarantee that they are wrapped and rethrown if the user doesn't deal with them manually.
If this is for work, probably the key thing to communicate back to your PM is "this feature is a very large effort".
Diffbot is really good at this type of stuff: https://www.diffbot.com/
&gt; However I am happy to be educated otherwise. They put checked exceptions in java because of this same kind of thinking. That you would want to know the specifics of what happened, what kind of error it was, etc. But with experience people realized 99% of the time you follow the same steps: - The operation failed - Log the exception - Display an error message to the user Let's take several kinds of exceptions: - Someone removed a column from the database and now your sql query throws an exception - Some other code used to return an empty string and now it returns null and you get a NullPointerException accessing it - The user permissions service is down and your code can't know which user has the approval to do what. You as the dev solve those problems in different way. But for your code it handles them all the same way - log the error and display an error to the user. 
It seems like there is definitely interest in the community for learning more best practices. There is certainly a lot of value in diving into these topics!
I a container environment, a container is smallest unit of orchestration. Containers not only contain file system objects and an execution entrypoint, but also define port, volume and uid/gid mappings, resource limitations and scheduling constraints. Outside of Kubernetes clusters I prefer to run Go binaries natively, e.g. as a systemd unit. 
You can use [javapackager ](https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javapackager.html)from the *JDK/bin* directory (Java 8+). It can be run on a set of JARs to create either an MSI or EXE Windows Installer package. Example syntax: `javapackager -deploy -native msi -srcdir &lt;Directory containing JARs&gt; -appclass &lt;Main class&gt; -BmainJar=&lt;Jar containing main class&gt; -Bclasspath=&lt;Colon separated list of JARs&gt;` For an MSI, [WiX 3.11.1](http://wixtoolset.org/releases/) needs to be installed as a prerequisite, whereas for an EXE, [Inno Setup 5.6.1](http://www.jrsoftware.org/isdl.php) is required. 
To piggyback off this thread, sorry op, how hard would it be for me, someone who's dropped out of college but is pursuing learning everything needed for the Java 8 cert, to get a job in the field? I understand they would most likely require proof of the skill level required for the job but would not having a degree immediately disqualify me from most opportunities. 
Both diffbot and semantria offer a service to do this. I think google does as well
Check out the Mallet library from Massachusetts amhurst University for a nice topic modeling library. Free open source.
I second Mallet.
I always have a default exception catch somewhere. I'd rather the program keeps running and I get some info than a complete crash, unless data integrity is relevant.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
SceneBuilder looks nice and all, but I stopped using it in favor of coding the UI myself. I am more in control and can easily create (reusable) subclasses with specific UI functionality. Am I missing something about the SceneBuilder?
You are right, we got the errors from sites like GitHub, StackOverflow, Bugzilla, Google Groups, JIRA etc. These are basically what developers ask about but we don't know if it came from production or development environment.
The name Cursor is already taken by immutable tree cursors (zippers).
Thanks for the details. I'll look into some of what you've listed. Just curiosity question, since you mention Go binaries, what type of application is it you're creating in this environment and why did you choose Go? I've been doing some personal projects using a C++ compiler but using mostly C style (c with classes) and haven't looked much at Go. Been deep in Java for many years, but C then C++ were my first languages, got spoiled by the cross platform and memory management Java provides (even though memory leaks are very possible anyway). What are you using Go for and how'd you choose it? Thinking about what you've listed here it seems the light container with a Go or C or C++ native binary could provide a good cross-platform solution model itself while keeping the code free of too many platform specific switches.
I think a yarn like CLI for maven would be great. I don't see the point of creating yet another full blown java package manager.
How does Java define you?
It would be `var _ = foo();` so
YUNO StreamSupport.stream(document.body().select("\*").spliterator(), false) .collect(Collectors.groupingBy(Element::ownText, Collectors.counting())); 
"unwilling to marry the Microsoft tech stack so I use 'c# but a bit worse' to code my programs."
Java is language that changes slowly and it's mostly backwards compatible .
Should be good for the basics. Learning the language and getting a good foundation. Some ways of doing things might be outdated and often more verbose than newer versions. The new versions have some neat tools (streams, try-with-resource and lambdas to mention some) that you will not learn. Learning these later or alongside the book should be no problem. 
Agreed. Changes tend to be additive. The biggest difference, from a language perspective between java 5 and java 8 is the addition of streams.
Head First Java is a solid book and while it only covers Java 5 it will give you a solid foundation from which you can pick up the new features in later versions. 
Hey, love Kryo and have used it in production for the past 3 years. Happy to see a new release. Is the 5.0.0 release out yet though? The link to the release in the readme goes to a page that doesn't exist yet (probably marked as a draft release) and maven doesn't have 5.0.0 on it yet. I'd love to play with it in our development environment. Thanks again for all the hard work!
Learning Java 5 and using Java 8 is fine. If you don't have experience in programming even better since you focus on the fundamental stuff before learning about Streams (Java 8) and Modules (Java 9). In my opinion it's important to get a deep grasp of the OO paradigm first when learning Java. By the way: an IDE might help you to learn how to improve code and gives you an insight in syntactic sugar of newer Java versions; get a good one such as Intellij, Netbeans or Eclipse.
I broadly agree that you'll be fine, but do get comfortable with lambdas when you can (your IDE might suggest them if it sees simple opportunities to use them). I would say that Java 5 is the earliest I'd recommend learning, because I wouldn't recommend using a version without generics. If you're planning on writing code with other people, I'd recommend *Effective Java* since you like books. It's great for showing you how to write better and more typical code.
As all others have said, it will be fine to learn from. Once you are through that, one book you absolutely have to have in your library is Effective Java (3rd edition I believe is out now). Josh Bloch is the author. Lot of good info in there.
Not really, I guess I am used to html and I prefer to decouple Java code from presentation/structuring code, and scenebuilder is great to quickly create fxml. But I am no JavaFX expert ti be honest
Keep in mind Java is a lot different than JS, JS’s name is pretty misleading. You will likely have a better opinion of Java, it’s more concrete. Start working with variables and make a console application that does some math and arrays, it’s a great way to get started
I found Eclipse to be clunky and hard to navigate, I’m currently cutting and pasting with Sublime because I don’t want to give up the ux. I think the preference has to do with Mac vs PC, any suggestions for a more user-orientated IDE?
I do agree. I am using Intellij for Java and Atom.io for the web related stuff. Just wanted to give a selection of IDEs that's why Eclipse is included ;) and there are ppl who really love that IDE.
I do agree. I am using Intellij for Java and Atom.io for the web related stuff. Just wanted to give a selection of IDEs that's why Eclipse is included ;) and there are ppl who really love that IDE.
Then try Intellij Community Edition
Cool. I will check out IntelliJ, thanks!
It will be fine to learn from but I would highly recommend finding a more recent source of information. The language has improved pretty significantly with regards to syntactic sugar and reducing verbosity since version 5. If you can, I would start with Java 8.
i Work as a JAva Developer. I know guys that work below java 8, but they have 0 chanse on getting a job in our company. Java 5 is allmoust dead ! (thanks good !) Learn java 8 + as minimum (Streams and Lambdas !) if you want to work in something more modern thatn Bank and Insurances. For them you can simply learn Cobold. I personaly would say go with the moust modern version. Java has now new Version every 6 Months, the changes are small and easy to learn. It is realy not that much difference between 10 and 11. But it is a world between 5 and today.
8 -&gt; 9 was an actual breaking change for building, packaging, and distribution. Not a language change, but compiling certainly changed
\- ~~Swing~~ No way. It is not outdated, Swing is one of the few GUI toolkits that works everywhere and any program written using Java Swing can run on any desktop operating system without recompilation. For me it is the jewel of the crown. Written GUIs in Java may be annoying, but it is easy to write them in Groovy or Scala. \- Java Web Start - OK I have heard in this sub reddit and in mail list that it will deprecated. \- Applets - Yes, no sane person will install a plugin for Java Applets and all browsers have removed support for it. \- JDBC - Definitely no, All Java high level database libraries are built on top of JDBC. \&gt; Except I mentioned that above. Are there any other technologies that I should avoid? \- I guess that Java bean. It is component technology that worked in a similar way to Delphi or Visual Basic where the user could assembly the parts visually by dragging and dropping components. Sadly, it seems that it is no longer used. 
There are also lots of cases where Desktop Apps are the best choice such as applications that needs fast response and feedback, access to file system, desktop notification, support multiple monitors, work offline and process heavy load of data on client side.
\&gt; I am working still use Swing for the purpose of old projects maintenance. Majority of existing GUI java code bases are Swing and likely will stay that way until the code base rots and nobody maintains it anymore. JetBrains IDEs, which are highly popular, are written in Java Swing. Writing Java Swing in Java really may suck, but it plays nice with Groovy, Scala or Clojure. I've written for myself lots of small apps in Java Swing using Scala.
Couldn't agree more. 
The version you use for learning is mostly a moot point since Java *tends* to be backwards compatible in the sense that old stuff just works for at least a couple versions later (if not forever). Newer version of the language/VM usually just mean new and sometimes better ways of doing things. Java 7 or 8 is a reasonably good place to start and as long as it's been out for a bit (6 months to a year) there's likely little reason not to go straight to the newest version in use.
BigDecimal =&gt; Better for bookkeeping, accounting, representing precise monetary amount that will be stored in the database or the price of some product. Double =&gt; Better for Black-Scholes calculations, VAR - Value-at-Risk and Mote Carlo simulations and any processor intensive computation ... Although, I believe that only domain experts deal with those kinds of calculations. \&gt; Also, BigDecimal is a pain to use and code written with it look much uglier than plain doubles. It is not if you use something like Scala, Kotlin or Groovy.
Eclipse really isn't that bad, it's very complex and UI slickness isn't high on the priority list AFAIK. Ultimately you'll have to get used to any IDE because they all have their quirks. Personally I don't like Netbeana, but given that Pycharm was pretty comfortable to use IntelliJ is probably a good choice too.
It has support for Java? (Kotlin is JVM language, I know. But some Frameworks are made with full compatibility with Java and kotlin in mind. I want to know if it's the case)
It broke some things, but not all — mostly those that used internal APIs.
It will be moving forward faster in the future, though! See [here](https://www.infoq.com/news/2017/09/Java6Month).
Exception messages and I'd expect potential reasons and solutions. Only the non-obvious ones are interesting.
I'm not much of a Maven person, so someone else handles the Maven releases. I expect it will be up soon!
I'll likely update it with the latest Kryo, but probably won't do much else. NIO is a major pain of an API. It would be better to rewrite KryoNet using Netty and Kryo. I started that a long time ago: https://github.com/EsotericSoftware/kryonetty I believe it works, but it doesn't have the same feature set as KryoNet. I would need a networking project to be interested in working on it further, and it's unlikely I'll have time for that.
Didn't get a chance to reply sooner, but I'm flattered!
I have the exact opposite experience. In my company if you try a bunch of funky java 8 stuff most likely in the code review they will have you refactor it down for readability purposes. We mostly use Spring so as long as your spring stuff is good nobody cares if you use 8 or 5 as long as it’s readable. 
Java 9+ introduced the jshell, which is definitely useful to learn Java if you want to try out a couple of things. JDK 11 will ship with [JEP 330](http://openjdk.java.net/jeps/330), which allows for running `.java` files without manually compiling them first, which also helps getting started quickly. So, I guess, using the latest versions will help you. OTOH, if you plan to learn Java from within an IDE, perhaps stick with Java 8, because the module system (introduced in Java 9) still causes quite a few bugs in all IDEs.
Java 8 plus brings new Interface elements that’s worth learning. 
System.out.println("Hello world.");
"How many of your answers are up to date with the current version of Spring?"
My life is incomplete without Eclipse.
Nice video, looks awesome.
Seriously? I mean yeah, sometimes stream/lambas suck for readability. Other times it's perfectly awesome. Honestly, this sometimes comes down to how much the "reader" knows of the more modern syntax. If you know know lambdas, then yeah, they're hard to read. Try to write this in a "readable" way in java 5: https://gist.githubusercontent.com/chrisseaton/669c85e7254da47220c62e1c4074f92e/raw/484671802b864c47130c4bde6c023bb1fdc4f09e/TopTen.java
It looks like in your [submission](https://www.reddit.com/r/java/comments/8s29uh/has_my_interviewer_given_me_a_task_designed_to/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You‘ll be asked to define the actual spring project along with its version and the answer for your question will be looked up within that context.
I'm sorry to hear that :( It is complete Opposite by us, everything that can be used as stream and lambdas, have to be refactored to it, to pass pull request. We are the second biggest drugstore in Germany and are trying to set the code Quality standarts for long readability. I visit a Java Conferences each year and java 8 is simply the industry standart in 2018. It is vissible when the Speakers simply ask audience for their Used Java Versions. 80% were using java8 productive, and 1 poor soul in entire auditory still had java 5. Ofcoursethere will be JAva5 somwhere ... but he is a young Student, let him see the Light :) ! 
Well in the corporate world you would have not accept that. That’s pretty rough readability and maintain ability. I would make that as refactor on a code review. Too much going on. What does IntelliJ and sonar say about that gobbilty gook?
Anyone else just getting an embedded 500? https://i.imgur.com/AoluBgV.png
It’s almost as if this is an ad written by a marketing person.
https://www.youtube.com/watch?v=pWdd6_ZxX8c Let's do a real code to real code comparison. Please write a more readable version in non-stream/lambda form. 
At minimum you have a dependency on Kotlin lib in your project. The configuration relies heavily on Kotlin DSL. The beans you could do in either Java/Kotlin.
That’s actually from disqus
We do java 8 all the time. We just don’t do a dozen streams in a single line with no logging. That sort of thing. Debugging that stuff is rough. 
Well you can’t say it won’t be more readable since we use Splunk logging so you would be able to debug every step on a log line level. I have nothing against streams and lambdas. I just disagree when people play golf with it. 
Thanks for understanding my question. I never worked with kotlin, it seems awesome.
I like netbeans a lot. But intellij is supposed to be nice. I haven't used it because netbeans meets my needs and is significantly easier to use (for me) than eclipse. But try both. 
Kotlin is fantastic all around. Its 2 parts: the core language and the standard lib. I'd recommend trying kotlin koans. Its tiny micro exercises that walk you through the language/lib. Koans really helped me appreciate it. I use Kotlin/Java in a large project. The interop is first class and generally seamless. My project we support both language. People contribute new code in both languages.
&gt;I know guys that work below java 8, but they have 0 chanse on getting a job in our company That is the dumbest reason to reject a candidate I've heard. 
People go overboard. I suspect someone at the company set idiotic standards that now everyone has to follow because they got over-excited about functional primitives in Java.
I disagree the standards are idiotic. It’s nothing against java 8. It’s against golf with no logging. No mockito/junit testing. It’s stream salad thatis presented as working but unvalidateable on a unit test level. Dozen streams in a single statement is overboard. The exception handling in that example is also lacking. 
Well, if you cant read and write Streams and Lambdas, then you can't work with our Codebase. Why would we need a programmer like that :) ? You have to be atleast open to learn that, combined with all the Frameworks you have to learn in new company. Never stop to develop yourself. (Or Learn Cobol :)
In a nutshell, it just an indirect method call stored in some data structure, object or variable and invoked later. The command can be replaced by just a lambda function. 
it is way more then that but i see no way or need to convince you :) Live in your World, there are enaugh old systems for all the Developers that just love that one older Version :) But please, don't tell others, that the old, slower and insecurer Java is the way to live :) 
New Version every 6 Months :) Well, the changes arent that big tough :D
What are you 6 years old? You think nothing of substance was done in Java prior to lambdas and streams? By the way, gimmicky single-use functions are a non-factor in typical code-base. This is not what makes good software. Your particular gimmicky function is a total disaster. It is needlessly convoluted because the author is bending over backwards to avoid using anything other than streams and lambdas when a simple and clear iterative approach exists. Yeah, I could make it more readable: Tokenize the contents of the file and use a sorted map to keep your counts as you go through them, and then write them out. 
 .sorted((a, b) -&gt; -a.getValue().compareTo(b.getValue())) why is there a "-" before a :) ? And i do not think it is possible to write that more effizient. The Readability is okay for me, but i work every day with Java ..
&gt; I disagree the standards are idiotic. I didn't say standards are idiotic. Idiotic standards are idiotic. There are cases where iterative options are simply a better fit and creating a standard where *EVERYTHING* has to be refactored to streams is completely ignorant. 
&gt;You have to be atleast open to learn that, combined with all the Frameworks you have to learn in new company. Show me where I argued you shouldn't learn new things &gt; Well, if you cant read and write Streams and Lambdas, then you can't work with our Codebase. The industry we work in changes all the time. A great developer (Java or otherwise) is going to continue being a great developer even when they pick-up a new language or a new version of a language they are already proficient in. That's why it's insane to reject a candidate because they haven't worked with lambda's and streams (as if that's some magic bullet for good code). 
Thumbs up. Readable documented code with proper logging and good exception handling should be good to go no matter what. We even started using groovy for stuff because sometimes java is not the right answer but you need to work with the tools they already have on the servers. 
inverse order sorting.
It's used for offering an embedded scripting option to users of your app. It fills a similar role that Lua does for C programs. 
** monocle falls out **
logging != debugging. Yes, you CAN debug inside streams and lambdas: https://plugins.jetbrains.com/plugin/9696-java-stream-debugger
Seems like YouTube's 500 page to me, try refreshing, dunno?
yeah, i think lambda are the biggest new thing
Sexy.
Youtube 500.
The point is running production systems not bench testing. 
I do agree! Effective Java is a must read!
Far as I can tell there's a few reasons jsp became unpopular: 1\. A stupid "it's not new and shiny so I have to hate it!" mob mentality, which has unfortunately been a staple of everything for the last 3 years. 2\. A legitimate thing where you're writing both a web app and a cell phone app, and want to hit the same endpoints for both. 3\. The only way to fight the "full stack developer" mentality from management. Give them something new and shiny that splits stuff back into more reasonable layers. I've seen lots of empty hype, but haven't found any reasonable reason why there was a sudden wave of insanity in javascript page rendering for most apps that never do anything complex with it.
&gt; Ant Ant is great. Put the jars in source control, ise Ant, and your build is as reliable as possible. Within the last month I've had to help a coworker get their project running, which involved cloneing it from git, shutting down eclipse, deleting the maven cache, starting eclipse back up again, and then manually running maven update to get things to conmpile without errors. And that's not counting having to manuallly edit maven files to deal the corporate firewall... 
Yeah when I was looking for a job a few months ago a recruiter contacted me about a job with JSF. I told her that just from a career perspective I'd pass - I wanted to either move to newer tech (angular etc) or stick with what I knew (jsp/struts/spring mvc). I saw no reason to pick up an older and not widely used framework. She said "yeah, we've been hearing that a lot".
Right, I know. I've used spunk, ELK, logstash, loggly, rsyslog, journalctl and various homegrown systems for logging. Using log4j, slf3j, etc as an API. I'm a fan of logging. Super important to support both production and development. logging and debuggers complement each other. 
Don't wanna put thoughts in your mind, so take this with a grant of salt. First thing that pops into my mind is, how are you gonna like java if you did not like JS. I find Java much deeper, harder, hardcore, then JavaScript.
That question doesn't really fit here. Anyway, you probably can't. It looks like you're trying to start from https://imageqube.mmcpacs.com/ and Java Webstart doesn't allow you to ignore certicate issues (at least not without some major "hacking").
Does it support content negotiation per method?
Oh boy, where do I start? * The question was about "outdated technologies". Independently of whether ant is better or worse, it is on the way out. People will look at you weirdly if you use it for a new project. * I didn't say Maven is the best replacement, though it is the most likely one. It certainly has some problems, but what you mention is really not relevant. * If you want, nothing prevents you from using Maven with a local repository that's in source control. * Using ant with jars in a lib folder may seem fine if you only have a few dependencies and those in turn don't have dependencies. But with any halfway complex project, which has transitive dependencies that will at some point change, it would be an absolute nightmare to manage them manually. [More details here](https://softwareengineering.stackexchange.com/questions/372444/why-prefer-a-package-manager-over-a-library-folder) * I don't know what happened to your coworker's build, but someone really fucked up there. But you can just as easily, if not more easily, create an unrealiable Ant build, it will just be unreliable for different reasons.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
In spite of the article's title, the main topic is actually the Java/Groovy template, which can be used for both open-source and proprietary projects. I posted the link with a changed name in order to reflect this.
This is god damn good. 
Awesome! This subreddit is amazingly responsive! Thank you for all the replies!
I just pushed 5.0.0-RC1 to maven central. Now the release is also listed on github releases [here](https://github.com/EsotericSoftware/kryo/releases/tag/kryo-parent-5.0.0-RC1).
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/8s7sr8/interacting_with_c_using_graalvm/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
i am not looking for code help
I expected a list of *java* projects and the majority are *Android* projects. When will people start to realize that Java (desktop) != Java (Android)? Just plain trash.
It would be nice to have a "Java" list without all Android projects. I'm a Java developer but know nothing of, and don't care about Android.
it has both though? I don't really understand what your issue is, the article never claimed it'd non-android
Your github search query is too easy. For example it would be nice also to understand what has been starred more recently and what is evolving rapidly...
try asking on stackoverflow good luck
so good! really looking forward to your benchmarks
I'm not sure how this missed Jackson. It has enough stars to be on the list.
Correct, however at least for me, switching between Android and desktop Java development takes more time than Android and iOS
If I wanted to see a list containing majorly Android projects, I'd go in an Android forum, not in a Java one.
How comprehensive is it, can somebody weigh in?
It covers 50%. You also need a mocking framework http://semaphoreci.com/community/tutorials/stubbing-and-mocking-with-mockito-2-and-junit
Thank you!
Bad bot
Java and Android share syntax, but they run on different JVMs. Sure, you can compile any JVM bytecode to dex, but these are 2 distinct ecosystems, right? If we can put Android there, why not Clojure, Scala, Groovy, Eta... they are also in the JVM family, in a way, closer than Android.
Wow this is absolutely amazing! :D Would you need a buffered wrapper for a file output stream when writing a large object? Specifically, when I'm loading large models in to vulkan I record the raw binary data about the model that is uploaded to GPU and store it in a file so next time I don't have to slowly parse the model but just read file.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
`Files.write(Files.createTempFile(null, null), "1 million data".getBytes(StandardCharsets.UTF_8), StandardOpenOption.WRITE);`
this article doesn't add any value. no explanation of methodology, no attempt to separate java from android, and no commentary about the projects
Kryo's output classes already buffer bytes before flushing them to a stream. Buffered output just batches up bytes so they can be written many at a time instead of one at a time. It sounds like you are just writing and reading bytes, in which case you don't need Kryo at all. Kryo is for going from an object graph, to bytes, and back to an object graph. This can be useful to send objects over the network and get objects on the other side, without having to write code to convert to/from bytes yourself. It's also good for save files and many other situations.
One million bytes is one megabyte, which is less than a typical MP3 and much less then a typical photo from your phone. That's not "large data" at all. Please come with concrete examples if you want concrete data. Also: /r/javahelp is more suitable for beginner's questions. 
Well the internet came to life because of HTML and hyperlink was the main reason HTML got its quick adaptation. And I don't understand is why the fuck you won't give an hyperlink to the project link, instead of giving the link as plane text in 20 fucking 18?
The developers have to bring the technical innovation. They have to force the Framework, Server and Version updates because it matters. You will not get that power of innovation from someone who is using Java5. We have weekly meetings and are allways trying to use modern Spring-boot, Tomcat and JAva versions. If we don't take care of that, nobody will, because nobody has clue about that :) So it is more of a mindset, then technical skills.
 public class Main { public **static** int addNumbers(int x, int y) {` ... @Test public void shouldReturnTwenty() { Main testMain = new Main(); 
It is 1 million records. 
How large is a record? 2 bytes? 2000?
I wonder how large it would be.. if a table is having 1 million/billion records🤔 Bt what what would be your random guess ? 
42
How do you have an article about GitHub projects, and put all of the links as plain text, not clickable links?
I think a better way of saying this is: In computer science "Cursor" can also refer to the concept of immutable tree cursors (zippers). It sounded like there is a registry with words that are already taken, and no one has any rights to use it for something else.
dont worry, this bot is really bad and stupid.
Java and Android share a common language (the Java language) with vast differences in terms of their standard library. Clojure and Scala are not the Java language. Look at it this way, Android is Java source code compiled to run in the Android executable environment. Those others are not Java source code.
Well, existing tree cursor and proposed cursor occupy the same domain – you can easily have both in any given collections library (and they could even be implemented using the same code for some collections). So if that terminology would be adopted it would be very inconvenient to qualify whether you mean "the java cursor" or "the FP cursor".
Android != Java Half that crap on there will be re-written in Kotlin soon
Not comprehensive at all. Testing as such is a complex problem which you can't fit into maybe three screens of narrow text interleaved with code.
How in the name of everything that is holy should we be able to guess the size of one record? You don't tell us what data you will be storing. You don't tell us what fields your record will have, what types the fields will be, etc. With the nothing that you give us, a record could be anything between a single byte and a couple terabytes. You will need to be way more detailed and elaborate in telling us what you actually want to do in order to get some sensible replies.
The blog that you actually see when the link finish redirecting it's a total different from the url shared. This blog started following me today on twitter and publish just spam articles like this. 
Ya sure.. bt in an interview i was asked how can i "load data which is much large like 1 million records" and as i asked for more clarification.. they said what if i want to add all that data in a single file like a text or pdf kind of... some of my friends told be my caching.. and I thought of using threads but it would be an issue if the thread is not synchronized.. i was not much clear about threads.. so i haven't said. I also thought of using parallel stream but it would also be an issue as we cannot know order in which we want to fetch/display. Hope you got what i m trying to ask.
Still needs to be removed. 
For something that doesn’t have a lot of explanation on how to use it just yet. I’d get where you’re coming from if I was posting something that’s been answered on StackExchange a bunch, but even the reference docs don’t show a direct example of how to invoke C code from the JVM.
From the sidebar: &gt; News, Technical discussions, research papers and assorted things of interest related to the Java programming language &gt; NO programming help, NO learning Java related questions! &gt; Do not post tutorials here! These should go in /r/learnjava. It's good information, but it's simply not what this subreddit is for.
Why "**java**-dotenv"?
&gt; Oh boy, where do I start? Oh, boy. &gt; The question was about "outdated technologies".Independently of whether ant is better or worse, it is on the way out. People will look at you weirdly if you use it for a new project. No doubt for the last 3 years corporate life has been at a kindergarden level popularity contest. But if I followed every bit of trendy bullshit I also wouldn't have a career. If you're going to follow a "someone might make fun of me philosophy", you must not be using any of these things: - Can't use Java, because Java is dead, it will be replaced by .NET and no one will use Java any more. - Can't use Java, because Java is dead, it will be replaced Ruby On Rails. - Can't use Java, because Java is dead, it will be replaced by Rust. - Can't use an IDE because only losers use IDE's. Vim or Emacs is so much cooler. - Can't use Eclipse because only Intellij is cool. - Can't use Intellij because only VSCode is cool. - Etc Etc Etc... &gt; I didn't say Maven is the best replacement, though it is the most likely one. It certainly has some problems, but what you mention is really not relevant. I'm not aware of any specific tool that's better. &gt; If you want, nothing prevents you from using Maven with a local repository that's in source control. Which is fine, but now you're basically running Ant. &gt; Using ant with jars in a lib folder may seem fine if you only have a few dependencies and those in turn don't have dependencies. But with any halfway complex project, which has transitive dependencies that will at some point change, it would be an absolute nightmare to manage them manually. More details here It follows this line of reasoning: 1\. Realize there are some people who want to get laid but can't 2\. Tell them if they buy a ferrari they'll get laid 3\. They buy a Ferrari 4\. When they realize it doesn't get them laid, well they've paid so it's to late, and who wants to go around telling everyone they got scammed on such a huge investment? Some people will stay quite, othets will loudly proclaim it totally worked and now they're getting laid all the time to cover up their mistake. Half the claims about what what maven does, it doesn't actually do at all, like it doesn't fix the issie of 2 libraries needing 2 different versions of a 3rd library. The other half of the stuff it does is it just trades one problem for another, for example you don't have to manually manage additional jar files, but now you have to manage your local maven config, changing your password in the maven config when your corporate password changes, setting up another service to encrypt your password so it's not plain text, and the occassional time when maven just messes up. The only way to really handle dependencies is if library authors put time into it - they need to rename packages in 3rd party tools they use so there's no chance of conflict (this is what spring does), they need to name their jar files so it's obvious which vetsion they are and what livrary they belong to. That's the only thing that really solves the dependency management issues. &gt; I don't know what happened to your coworker's build, but someone really fucked up there. But you can just as easily, if not more easily, create an unrealiable Ant build, it will just be unreliable for different reasons. Once you have it working the first time, I've never seen the jar-files-in-source-control approach fail because of the jar files. Once they're sorted out and working they just continue working for everyone. In contrast to maven, where for some reason it always seem to screw itself up a few times periodically for no apparent reason. A lot pf times I have to use maven because the popularity contest got it installed, but I don't use it because it's better, as it's not.
You only need a mocking framework if you are following the London School of TDD. The Chicago School of TDD advocates against mocks. See [Chicago vs. London](http://codemanship.co.uk/parlezuml/blog/?postid=987). The London School of TDD is also called interaction testing, and mocks allow you to specify how dependencies interact with the system under test. The Chicago School of TDD is also called state-based testing. You would create test doubles of dependencies (like a dummy DAO backed by a `HashMap` for testing), and then query the state of the test double after the test.
If you know how to write unit tests, the article does a good job of going over JUnit features for unit testing. If you don't know how to write unit tests, this isn't the article for you.
&gt; none of these menu items are available in my Eclipse installations: &gt; &gt; select the project and choose Export &gt; Deployable plug-ins and fragments &gt; &gt; create New &gt; Other... &gt; Feature Patch If those menu items are not present in your eclipse installation, then it means that you're missing the plugin development environment. A stock eclipse install does not include it and you need to install that feature.
it's totally [4](https://xkcd.com/221/).
My thinking for java-. The lib can be used with any jvm language. It has first class support for Java and Kotlin. Given Java'spopularity, I went with java-dotenv, instead of kotlin-dotenv with the hope of better reach. I'd appreciate your thoughts on name, improvements, etc
Append it piece by piece. Try java.nio. E.g. public void writeToFile(String text, String filename) { Path path = Paths.get(filename); try(BufferedWriter writer = Files.newBufferedWriter(path, Charset.forName(StandardCharsets.UTF_8))) { writer.write(text); } catch(IOException ex) { ex.printStackTrace(); } If it's still slow, stream it via classic BufferedOutputStream. Try different buffer sizes.
&gt; The lib can be used with any jvm language. No sane developer is going to have a mixed codebase if it can be avoided, he'd rather search alternatives or rewrites it anyway. Language interop is only there to sell managers a language switch. So you might aswell call it what it is.
According the article you linked you need both. To quote "Our goal here is reliable code and good internal design, which means that both schools of TDD are at times necessary." It is not a Chicago vs London but each are used in different places. Mocking frameworks are key for unit testing any large-scale project (just like state based testing).
It looks like in your [submission](https://www.reddit.com/r/java/comments/8sbvyr/how_does_java_handle_so_much_gc_pressure/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; Hope you got what i m trying to ask. No, nobody really did, because you didn't understand the question yourself. The interviewer probably just wanted to see how you'd go on to solve a problem like this. It's not a very practical problem, as that's basically the thing databases are for (some of which can operate on a single file, although it doesn't make any sense in actual projects).
[removed]
&gt;You would create test doubles of dependencies (like a dummy DAO implementation backed by a HashMap), and then query the state of the test double after the test. How is this something you won't use a mocking framework? (Mocks describe exactly that, if you go with Roy Osherove and others: Fakes that you use to observe if something has happened. The more often you need just *stubs* and observe the result directly by the sut) Why would you want to *manually* write lots of boilerplate code? This is what mocking toolkits are all about after all... 
Good point. That's the bad part of making any "vs." comparison :-)
Nah that just seem silly and a bad choice by that software. Most companies I know plan to switch from 8 to 11. 9 is hard with modularization, and upgrading once a year like that is not trivial either for most shops. 
it will be very interesting to see the results! If you have any questions or feature requests based on your findings, please reach out to us! You can ping me here, or @graalvm on Twitter, or Github issues, or graalvm-users@oss.oracle.com mailing list! I'll be personally really happy to provide any help I can.
I see it at https://adoptopenjdk.net/ and https://zulu.org/. I suggest getting JREs from there unless you need the Oracle support (at which point this question should go to them). The real reason is there is a "current" and an LTS version, and 8 is LTS. Once 11 is out for a bit, it'll be LTS and current and all others will probably be removed from Oracle's stupid site.
It's very infrequently updated (due to the creator being busy and relatively uninterested with the project) and at the time the last version was released, I think Java 9 was the latest. 
[removed]
It's new Java release model. They will release more offen, but long term support will be available for only some versions. Right now 8 is the latest long term supported version, next one will be 11. If you want support use the LTS versions, if you want new features more offen use non LTS versions but be prepared to update. 
[removed]
Java 8 is LTS Java 10 is the latest version Java 11 is the next LTS version, once released, Java 8 won't be available anymore That's it, simple to understand, nobody needs Java 9, download the latest version wich is Java 10
You can download it from [OpenJDK](http://jdk.java.net/java-se-ri/9). Better just switch to Java 10 and then to Java 11 in September. Java 11 will be the next long term support version.
Have you tried running it with 10? Might just work. If it doesn't, maybe it's just a few hours of tinkering to get it to work. That'd be a great practical contribution. :) I dislike the rather obvious alternatives, so I'll just ignore those.
[removed]
Nope, doesn't work with 10. I just download 9 from a second-hand site and called it a day. My Java is a little rusty, but I guess I could consider contributing to it since it's a public repo. Still, that software is way more advanced than anything I've messed with before.
Thanks for the info, that's pretty much what everyone is saying. However; &gt;nobody needs Java 9 Unless you have software that only runs on Java 9 because it hasn't been updated, and likely never will be.
But I hardcoded my critical Enterprise app to use Java 9 and now Oracle just took it away with no warning?! THOSE BASTARDS!!!!!!!
And that's why java 6 is still productive in places, and why my place is still running java 7, sadly. 
Can you share why it only works on Java 9 and not 10?
I'm not the one who made it, so I don't have the details. When it runs, it detects if Java 9 is installed. If not, it attempts to toss you to a download page for it. (That since only leads to a Java 8 download) No way to bypass it. Again, not a huge deal, I just found a download of my own elsewhere and got it. 
Great, looking forward to it! I've already did some basic benching just using the scala console (not very rigorous I know), and reported some issues on @graalvm/graal-core if you care to take a look.
Be advised, you are potentially opening yourself up to security issues by using software that requires an unsupported version.
I hear you, but I really doubt it'll be an issue. I'm only using it to get a single piece of software working, and it's purely offline and I know it to be safe. (Used it for years)
Mocks test interactions. For example, Mockito gives you `when` to indicate how a mock should respond for a certain interaction, and `verify` to confirm that an interaction occurred. This is fine when you are establishing a protocols between a system under test and its dependencies and expect certain patterns of communication. But, if the pattern deviates in any way, your tests will break, and fixing the tests to make them pass again now makes the test case dependent on implementation details, which makes the test brittle. With state based testing, the calling pattern doesn't matter, only the final state does.
There are apps in the wild that totally freeze on Java 10 due to regression (known bug)
Sorry I didn't see this post earlier. I don't know of any official efforts aimed at solving this, so I've produced a solution of my own: [trylambda.](https://github.com/nullterminated/trylambda) It solves the problem the same way some other functional languages do. That is, by returning an Either type to functions which might throw checked exceptions. 
You mentioned that the Maven Surefire plugin includes any class whose name ends with "Test". Another interesting detail is that Maven Failsafe plugin will also automatically include classes with "IT" in the name (integration test). The main difference is that test failures during Failsafe testing won't fail the Maven build, whereas Surefire test failures will.
Is the project open source? Easy to fork and fix
A model requires some metadata such as vertex count, vertex components and any extra metadata that the engine would need to know how to use the raw data. (such as materials or armature) I decided that I'll already be using this amazing library for networking sooo I thought why not take full advantage of it. ;) Just one thing that I noticed was that in java &gt;8 your library is producing the illegal reflective access message. Here is the code and log in queue in question. I'm not sure if this should be reported as an issue to github because it technically still works but you might wanna look in to that in the future. Note: I am using java 10 mixed with the latest kotlin environment.
Sorry missed jackson
dont listen to him. this is one of the best posts I have ever seen on /r/java tbh
&gt; upgrading once a year Twice a year...
Thanks for the feedback. In principle I do agree with you. However, Kotlin (the language the library is written in) has incredible Java interop! This library is written such that there are zero Kotlin dependencies, hence the library can be used seamlessly in any Java (or JVM) project without requiring any dependency on Kotlin. The library provides interfaces for both Java and Kotlin idioms. The README includes examples. All Kotlin examples use the Kotlin DSL, while the Java examples do not. All in all, I think the name (java-dotenv) provides a fair description with respect to what it is. It 100&amp;#37; Java compatible. The name states this. It also provides an idiomatic Kotlin DSL. 
I have an example project that shows usage with Java. You'll notice that there is no trace of Kotlin, not in the code, and not in the build deps [https://github.com/cdimascio/java-dotenv-example](https://github.com/cdimascio/java-dotenv-example)
Looks nice. Is the bit code (yourTestProgram.bc) generated by clang cross-platform ie, if I generate the bit code on mac, can I run that scala code on Linux? 
in theory it could be, but it depends: https://stackoverflow.com/questions/14258194/llvm-bitcode-cross-platform i think the best answer is to try it yourself if you have access to a mac. graalvm EE can currently run on mac, so you should be able to test it.
Thanks! I'll try to get some benchmarks out this weekend. Unfortunately, some of my preliminary benchmarks haven't been super encouraging, but that might just be in the context of me comparing running the bitcode via the JVM vs running it natively. in any case, I'm reporting any performance issues I discover to the graal team so they can improve it!
Gotcha, makes sense. The messages are only warnings. Until a JVM actually blocks reflection, it will work fine. At some point we'll update Kryo to (optionally) use the kind of reflection they are pushing, with the limitations that come with that.
Thank you,
Thanks. This is something i expected.. instead of arguing with me.. i wanted their vague idea.. thanks.. a lot.. Yeah i gave a thought of it. Using nio. 
flaw in the matrix 
Why, was it supposedly an EE-only feature or something?
Awesome thanks so much!
Could you please explain how there are zero Kotlin dependencies, given that it's written in Kotlin?
I have. It insists on XML, and is a forward-only tool. And also in active development for just 1 IDE, which happens to differ from my IDE of choice.
Our use cases will differ extensively.
Yeah non LTS releases probably shouldn’t be used in production in my view in 99% of cases.
So nice of you. Thank you so much.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Please exaplain! What is the minimum karma?
Thanks
Their own benchmarks put C execution at about 90% of native execution iirc, which is pretty great. What we do know more exactly is that the interop cost is 0. So the benchmarks will likely slide in favour of one or the other depending on the complexity of what you're calling out to. Will be interesting to see, but maybe a little difficult to tabulate the results in a way which communicates this relationship usefully.
No, but I have both system volume and video volume maxed and I still can barely hear anything the video says :(
Is there anything wrong with the recorded sound? I have both system volume and YouTube's volume maxed out and I still can barely hear anything the video says :(
Thanks. I was accidentally looking for these items in my standard Eclipse installation (the article wasn't very clear about this). In the "Eclipse Committers" edition, the menu item was obviously present...
Thank you very much. The book is simple and concise to the point.
You still want to be able to control the amount that is written, so you definitely need a logging-system/library. There's no way around it, unless you don't care about performance at all. And if you got a logging system, it depends on your systems architecture if writing to stdout or to files (with rotation/etc.) is preferable.
Yes, I assumed OP shouldn't go below Java 8, but wanted to show pros and cons of using 9+ at this point.
That's quite a weird livelock condition. Just broken enough to not work right, but not broken enough to actually halt when it should.
&gt; Java 11 is the next LTS version, once released, Java 8 won't be available anymore Hold your horses. According to [this page](http://www.oracle.com/technetwork/java/javase/eol-135779.html), Java 11 should be released in Sep 2018 while Java 8 goes EOL in Jan 2019. 4 months are plenty of time :)
Thanks
&gt; Just broken enough to not work right, but not broken enough to actually halt when it should. Doesn't that describe every program, and most programmers/human beings? ;) 
Doesn't appear to be free on UK amazon, sadly.
Yeah exactly. Not exactly a problem as java 8 is still the industry standard. :P
Why OOP code is easier to maintain? From book - “Procedural code is easier to use in small projects or in multithreaded environments due to its stateless nature, but object-oriented code is far more flexible and easier to maintain.”
It looks like in your [submission](https://www.reddit.com/r/java/comments/8sh194/want_to_contribute_for_new_upcoming_java/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Did you try the UK link? https://www.amazon.co.uk/Java-Interview-Guide-Confidence-Understanding-ebook/dp/B015HF9SJQ
Writing logs to stdout is a reasonable default for the reasons you mentioned. Writing to files (or a syslog server, or logstash, or send stacktraces per mail) should always be an option, though. Sure, you can simply redirect stdout to logstash or other systems, but you are loosing information on the way (e.g. parameterized log messages). Using a logging framework and allowing the user to override the configuration is always a good idea.
It all depends on the size of your project. With procedural code you don't have to worry about state, thread synchronization, or object relationships. But once a project starts to grow in size, it becomes much easier to control the complexity of your code with the use of Objects because an object can manage its own state and logic. Modern applications use OOP for the main code structure mixed in with small amounts of procedural code (which is why Java 8's lambdas were well received).
Yeah - you need to subscribe to Kindle Unlimited.
I will definitely send this to our junior dev, he's constantly trying to improve himself and I think he deserves a better job than what he's got here. This will definitely help him get a better position once his contract here is done.
&gt;When using stdout in the middle, you introduce another layer with a little performance hit *very* little. $ time dd if=/dev/zero of=/dev/null bs=1M count=10240 10737418240 bytes (11 GB, 10 GiB) copied, 0.607264 s, 17.7 GB/s $time dd if=/dev/zero bs=1M count=10240 &gt; /dev/null 10737418240 bytes (11 GB, 10 GiB) copied, 0.607168 s, 17.7 GB/s
Under Linux, sure. Try that with windows. 
Yes, absolutely. Write to stdout on localhost when developing. (If you want to 'persist' logs for some reason, just redirect stdout to a file.) For modern deployments, log to stdout or syslog and use a log drain to aggregate logs across services. (Make sure you're use a trace id.) See http://callistaenterprise.se/blogg/teknik/2017/09/13/building-microservices-part-8-logging-with-ELK/ for an example (and Google "microservices logging" for more). 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
But why would you deploy on W-- Oh yeah, .NET.
Thanks 
Yea, sometimes customers can't (or won't) deal with Linux, so they choose Windows Server. And if your software is in Java, and they pay the hazardous duty extra ¯\\\_(ツ)_/¯.
It suggests that it's available in kindle unlimited. But if you go to the kindle shop and just purchase it for 0.00 it's all good
Thanks, I understood your view on this. I agree that inner object state and logic is good thing, it allow you easily understand object purposes. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/8shir8/an_interface_for_each_bean/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
lol
a disc spins
I assume you mean disk rather than disc
Programming to an interface is a good idea and good practice if you actually do have multiple implementations that could be used in place of the interface. But, I find it requires having multiple implementations in the first place to understand the correct abstraction to write as an interface to those implementations. Day-to-day, I don't find the need that often to have more than one implementation, and at that point interfaces become noise that change too frequently with implementation details because they do not have the correct abstraction on the implementation due to a lack of information on what commonalities exist between multiple implementations. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I disagree for a couple of reasons: - Programming against interfaces enables you to hide implementations from other modules and packages, ensuring strong encapsulation. Especially with the advent of Java modularity. - Test driven development (or at least unit testing of your code in any way) will be much easier if you can mock implementations not under test. With interfaces, this is easy and ensures you can always change implementation details, as long as the contract is still correct. - Programming with interfaces forces you to really think about your application flow, contracts and overall architecture / design, however small the project.
I buy your arguments. Also aside from 'custom configurations + mounting + assuming write permissions' I always found that logging libraries have really ugly API. log4j being one of them. For small programs, definitely !!! System.out (for info) and System.err (for errors) do a beautiful job.
Agreed. Ironically, working with Spring helped me move AWAY from wrapping everything with interfaces. Back in the day this was considered best practice, even if you expected only one implementation, because it would help with mocks and stubs in unit testing. But Spring Boot and Mockito makes it so easy to do this without interfaces, having them just to have them now seems like an outdated anti-pattern. I can count on my fingers the number of occasions over the past decade where I really did need to go back and write additional implentations for an interface later. And on all of those occasions, a modern IDE would have made it near-trivial. At the same time, I've had countless occasions of frustration in reverse-engineering someone else's code through numerous layers if needless interfaces.
Ok, that worries me a little less then, cause I was getting around 70-90% of -O1 speed execution in some tests. We'll see how it fares once I've done some more benchmarking. Also, I'm going to create special versions of the language shootout benchmarks that has small, hot parts of the bench in C being called and java doing the rest, to have some comparison of call latency between JNR and graal.
Those are good points. Maybe I do not have enough experience to pick out an interface while developing. I'm not as rigerous with TDD as I probably should be and that likely has an effect. But I also find it hard to TDD in environments where you're asked to build a thing that does some kind of thing to enable other things that haven't been built yet so we don't know what thing 1 is supposed to do, but you should build it anyway. From the employers I've had so far, and no they are not great employers, this situation seems to be more common than not ☹️
Just worked on a project where we used Kotlin and Kubernetes. Some guy with a 12 factor background eagerly ripped out slf4j, replaces it with println, logging to stdout as JSON. Well meaning... The problem is when you try and read the logs! Where’s the stack trace for this exception? Oh, better put that bit in. I can’t see which thread created the log statement? Oh better put that bit in now! Where’s the time stamp? Where’s the class name when inside an anonymous class? Why can’t I conditionally log debug statements and configure the log level?! It _does_ make a lot of sense to log to stdout but *please* use a ConsoleAppender with a mature logging framework.
You still can't properly debug it or read the code when adding such a library. Also even with a "Java"-interface it will remain awkward to use. See Apache Spark or Play-Framework.
&gt; Programming to an interface is a good idea and good practice if you actually do have multiple implementations that could be used in place of the interface. That's not really the context of *how* Spring uses interfaces. In particular, Spring makes heavy use of the [Open/Closed Principle](https://en.m.wikipedia.org/wiki/Open–closed_principle). A better example than the article is `RestTemplate`. It comes with a bunch of interfaces for connection management, input and output encoding, while the concrete class implements the business of managing RESTful interactions. This lets `RestTemplate` be used with either JDK HTTP connections or Apache HttpUtils, for example. Another cool example is Spring Data. Spring Data automates the creation of CRUD style repositories and finders, but the machinery to implement this is oblivious to the actual persistence mechanism, whether that is JPA, Gemfire, Elasticsearch, etc., etc. This is possible diue to OCP. In fact, OCP is the secret to Spring's incredible flexibility.
**Open–closed principle** In object-oriented programming, the open/closed principle states "software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification"; that is, such an entity can allow its behaviour to be extended without modifying its source code. The name open/closed principle has been used in two ways. Both ways use generalizations (for instance, inheritance or delegate functions) to resolve the apparent dilemma, but the goals, techniques, and results are different. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
I don’t know if puuut is new or lucky enough to work with tech enthusiasts, my experience so far is very similar to yours. Just be pragmatic so that I can go home earlier.
The flexibility of spring is really astonishing. I’ve been working with spring for a few years now and then I had to do a GoLang project...I needed a one line change in behavior to the net package and had to copy entire files to my own package 
Since the code example for coding to interfaces isn't really that good, here's a much better example, the old stand by [Dependency Inversion is NOT the same as Dependency Injection](https://lostechies.com/derickbailey/2011/09/22/dependency-injection-is-not-the-same-as-the-dependency-inversion-principle/).
Compared to Kryo, they are extremely slow.
Yes libGDX can be used crossplatform! Also it is easy to set up for to use this lib within AndroidStudio if you require advanced rendering. So i also second everyone here; Android Studio is the way to go.
I agree with /u/gandaroth, consider these counterpoints to your claims: * It's true that interfaces can abstract over implementation details, however there is no *contractual* difference between an interface and a class's public methods; both provide a public API. Programming against *contracts* is good. An interface is a form of contract; so are the public methods of a class. *Starting with an interface is an example of YAGNI. It provides room for future flexibility that isn't yet needed -- and even if you are sure you'll need it, you definitely don't know the exact shape that interface should take until you have two implementations. (And when you do need that second implementation, look for an interface that has the minimal required surface area (API) and abstracts across both implementations.) * Unit tests should be written to a test object's public API, treating the internal implementation details (both data and behavior) as a black box. Provide only the necessary inputs; assert only what the test object produces as a response. It should be possible to change implementation details without changing the test. * Mocks have their place, but unit testing with mocks is generally dangerous and lazy. Use test doubles instead. They will drive a better design and more maintainable/refactorable code. (This is an unpopular opinion.) * Having seen far too many interfaces with methods like `getX()`, `setX()`, direct coupling to low-level implementation classes, and other evils, I disagree that interfaces 'force' you to think more or better about design. Especially when there is only one implementation. 
That must have been painful -- thanks for providing a supporting anecdote. At least you got to use Kotlin! 
There is a huge variance between the quality of those 10 books. My 2cents: For beginners, this book helped me alot: ### 4. Head First Design Patterns And for experienced programmers who apply most design patterns regular (where needed) that need to work in large groups the folling book is rather valuable: ### 2. Clean Code Even if the last one is -very- rigorous, since many coders are sloppy and they end result will be somewhere inbetween it is all fine.
I don't know exactly the details of how Kotlin does this, but it partly comes down to the code being compiled to byte code. Kotlin also provides a number of annotations that can be used to map Kotlin only functionality to Java. For example, companion objects don't exist in Java, however you can annotate your Kotlin code to inform the compiles to treat it as a static method. Kotlin's compiler somehow ensure the byte code is Java friendly. I'll see if i can dig up some documentation and post it here Feel free to try that java-dotenv-example above. You'll see that it is indeed seamless and doens't pull in the kotlin world
Hey! A long-awaited Java Binding (JB) for Exonum is LIVE and open source at GitHub! It aims to become an essential development tool for the Java community who wants to build blockchain applications. JB provides interfaces to extend Exonum with services with custom business logic. Using an SDK, you can integrate third-party Java applications with Exonum blockchain. This is an an Alpha version to help you to learn the basics of blockchain development and build your services on Exonum. Start with User Guide at GitHub and explore Java Binding today! https://github.com/exonum/exonum-java-binding For any questions feel free to contact our constant tech support at Gitter https://gitter.im/exonum/exonum-java-binding or send us an email at exonum@bitfury.com
Play Framework and Spark are written in Scala. Scala has decent interop with Java, but it is nowhere close to Kotlin's. For example, Kotlin's collection implement Java's, Scala has it own. In the Scala world you claim is correct, debugging much more challenging, not so much with Kotlin.
No
&gt;\*Starting with an interface is an example of YAGNI. It provides room for future flexibility that isn't yet needed This may just be my bias, but coming from a (long ago) C and Pascal background, I've never been all that offended by the fact that interfaces require restatement of a module's public contract. Viewed from that perspective, the interface isn't providing flexibility as much as it's just providing a clear statement of the current contract of a component. So, even if you don't need the flexibility, you might well appreciate the improvements to the clarity of the code. There's also the benefit that interfaces can be used to narrow the relationship between a component and a client of that component. (ie: If a client doesn't need the whole set of public methods on a given class, an interface can make that fact explicit.) In that sense, the YAGNI argument can be made in the opposite direction: if you aren't going to need all the public methods, why make them all available to a classes' consumer. \&gt; you definitely don't know the exact shape that interface should take until you have two implementations. Getting the exact shape of the interface right doesn't really matter until you have interface clients that you can't easily change. For a purely internal abstraction, there isn't that much overhead, and modern IDE's reduce it to essentially zero. The point where the interface becomes more set in stone (and a source of overhead) isn't as much the declaration of the \`interface\` as it is the point where it's more public. 
&gt;I'm not as rigerous with TDD as I probably should be TDD isn't like eating your vegetables or doing your chores. It's a tool that offers benefits and imposes costs. Sometimes it's appropriate and sometimes it's not.
Fowler agrees that the interface/implementation pair when you don't have multiple implementations is just noise: https://martinfowler.com/bliki/InterfaceImplementationPair.html 
u/desrtfx any updates? It’s been awhile.
Interfaces are for boundaries. If you have no boundary you should think twice to use interfaces. It might be easier for developers to just do one thing, but for the caller, it does not matter if it is an implementation or interface or abstract class etc. If you, for example, use Spring you could call `SpringMyService` for `MyService` interface, but if you do not intend to implement another version an interface is not required. You might want to rethink that in terms of testing. But that indicates you have a boundary. 
AFAIK (and according to docs) the 1st argument is only true when you are using AOP (because AOP uses proxies). If you have singleton beans, no proxy is created. Also I would ask the question if you really have that significant hit on performance (or run into serious problems when using AOP) that you'll need to be optimize this away? So is this (supposedly) positive effect overwrites - in terms of business value addition - the value that more readable and maintainable code represents? Also, thoughts on the other points: * 2: see point 1, do we really need to optimize this away? In that case I'd ask the question if it would make sense to drop spring entirely (spring is pretty heavy in terms of performance hit) * 3: the last time I've seen this as a best practice was when EJBs were the style of the day ... * 4: I think descriptive naming of the class and the outline view of any IDE can mitigate this * 5: not even sure why this is a reason. Personally I think it is bad practice to put interfaces everywhere, when there will be exactly **one** implementation. There is no reason for that interface to exist there. Some bulletpoints as thoughts: * changing anything is just more work (not more complicated, not less complicated, just simply more work) * makes the code much harder to navigate - every time when I navigate a codebase like this, I always get first to the interface, from where I'll have to navigate to the implementation * doesn't improve readability (would be the same if there would be only the class)
Yep. People are ignoring the fact that interfaces are the only way to get multiple inheritance in Java.
couple links: [Calling Kotlin from Java](https://kotlinlang.org/docs/reference/java-to-kotlin-interop.html) [Call Java from Kotlin](https://kotlinlang.org/docs/reference/java-interop.html)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I have the strong feeling lots of commenters here interpret the principle *"programming to an interface"* in a *technical* way, instead of the meaning of *interface* from a conceptual pov as a *contract* - which is the correct interpretation of that advice imho! A concrete class could of course be an interface - it simply depends on the use case. The same is true for things like abstract classes. In languages that support duck typing at runtime the *interface* hasn't even a real language component to *expose* it. But of course the basic principle stays the same! So one should be careful not to mix up *syntactic* elements of a language with common, language agnostic principles.
Good one, thanks for that. 
&gt; But, I find it requires having multiple implementations in the first place to understand the correct abstraction to write as an interface to those implementations. This is often true. Furthermore I find that many developers don't understand *what* belongs in an interface even when one is available. Every problem they want to solve they solve by trying to add a method to the interface when it's not appropriate for that interface.
Maybe stop writing to files but keep using proven logging solutions such as slf4j + logback (or equivalent). Have the application log straight to something like Graylog/ELK with the logstash-gelf library and have rules triggering notifications for maximum profit.
Good lord, no Logs go to stderr, not stdout Ideally, they go to syslog/windows eventlog
Helps with testing. Can swap in test data source if same impl as real data source
I have never done web based programming with Java or .NET however, I'm curious as to why you are decided to stop using .NET?
Sorry, real life and my job got in my way and still are. No updates yet.
Example in the article doesn't help at all
I'm mainly a .NET developer. My advice would be to check what tech the company is suing. It seems it is they use mainly Spring so stick with the tutorials/guides/documentation about Spring. Also ignoring the "little" differences that will annoy you (I still can't understand why it seems in the Java world field injection is preferred to constructor injection) it will be fine, specially if it is Spring Boot because the "development model" is similar to ASP.NET Core and you won't have to deal with application servers and other stuff that are actually Java/Java EE specific.
Can any of the other mods do anything? You guys seem pretty absent.
My 2 cents (as an advocate for interfaces): \- interfaces makes it easier to reason about how classes interact with each other. You can write the specs of some class before thinking about how to implement them - and if you stick to your definition, the implementation almost doesn't matter \- its easier to write tests for interfaces first. IMO, its hard to write a bunch of tests that just fails to compile. Its really kind of the same point as 1. They also make it easier on mocking libraries to write tests. \- interfaces that have only 1 implementation (or 2 at most) incur a minimal performance hit under most modern jdks, so performance is a non issue (barring some extreme cases) \- as a con, interfaces can also add another layer of indirection to reason about the code, if you don't completely trust the implementation All in all, I heavily favor of overusing interfaces and I 'contaminated' a lot of my colleagues 
My 2 cents: Impl classes for interfaces is IMHO a huge code smell. The reason we used to create these interfaces is we had to; for example to write mocks we needed interfaces before we had neat libraries to write mocks for us. Nowadays it's simply not needed anymore, and it's a dogma people follow blindly because it's just what they saw others doing. 
&gt; But, I find it requires having multiple implementations in the first place to understand the correct abstraction to write as an interface to those implementations. This can sometimes be true, but it only takes a little forethought to factor out a minimal, general API, and more often than not I've found that time proves their design. I think it's an important skill to have. The value of factoring out an implementation-independent interface is not just that it enables us to support multiple *side by side* implementations. Sometimes even if we only want a single implementation, that implementation is forced to change over time due to e.g. deprecated or outdated dependencies. I've found evolving old API without breaking consumers of that API can be challenging. Anything which keeps that task clean and focused is a good thing. Separate interfaces force people to think very carefully about what is actually exposed as API. Sure, the public members of a class can perform the same duties as an interface in specifying a contract, but I prefer for the dependencies and limitations of that contract be enforced by the compiler. That is to say, if possible API modules should not even have any of the implementation dependencies on the build-path, to make absolutely sure nothing can leak into them that shouldn't be there. Some people say that factoring out API interfaces creates unnecessary noise in the codebase, but I argue the opposite is frequently true. Cramming implementation into the same place that our minimal contract is specified creates noise when trying to navigate and understand the structure and architecture of the codebase. It's so much easier to reason about a set of designs when they're all neatly isolated with only the absolute minimal inter-dependencies.
I posted this in response to a similar question awhile ago: So I'm a Java developer who went the other way to C# for a time. Here are some notable differences: 1. No properties. Getters and setters have to be coded yourself or generated by an IDE (or hacked in via some black magic called [Project Lombok](https://projectlombok.org/)). 2. No reference types. Everything in Java is passed by value. However, even though object references are passed by value, the passed in references will still point at the correct object so things work pretty transparently. You can't swap references in a method and see that reflected back in the calling method but that's a very niche use case anyway. 3. No out parameters. I never understood the use for them anyway. 4. Huge ecosystem. Coming from Java to C# it felt like there was a dearth of high quality C# libraries and frameworks. The amount of really good stuff in Java can feel overwhelming, but that's complaining about being spoiled. You will definitely want to bookmark the [standard library javadocs](https://docs.oracle.com/javase/8/docs/api/). Find out what frameworks and libraries the team you're moving to and bookmark the reference documentation for all of them. Common equivalents for C# frameworks/libraries/tools: 1. Entity framework -&gt; JPA. Hibernate is the most common JPA implementation but there's also EclipseLink, OpenJPA, DataNucleus. Raw DB access is done through JDBC. 2. Visual Studio -&gt; Eclipse, IntelliJ, NetBeans. There's a lot of love for IntelliJ. Eclipse is really entrenched and has a lot of plugins for common frameworks. I personally prefer Eclipse but IntelliJ is very cool. 3. MSBuild/NuGet -&gt; Maven or Gradle. Both handle dependency resolution and pull dependencies from [Maven Central](http://search.maven.org/). Maven builds are written in XML and are very declarative; if you find yourself struggling with a complex Maven build then you're not thinking declaratively enough. Gradle has declarative elements but allows you to script parts of your build. Gradle has been adopted by Android as its build system so if you're working with Android, learn Gradle. 4. IIS -&gt; Apache Tomcat, Wildfly, many others. Java application servers package lots of enterprise components like messaging, transactions, and dependency injection with a web container. Note that Apache Tomcat is just a servlet container which means it handles the web part but doesn't provide any of the rest. Tomcat is often paired with another framework called Spring which can provide those enterprise features, albeit in a slightly different way than JavaEE. 
I made the switch from Enterprise Java to C#. You need to understand that C# is very opinionated. Want to query something? Linq. What to use an ORM? Entity Framework. Want to serialize objects into Json? Newtonsoft. Want to do web? Asp.net. C# has an answer for just about everything. Java can do all of those things, but it's up to you to choose which implementation you want. For this reason, Java offers far more flexibility in dealing with your edge cases, but it can also be very overwhelming with all the choice, and ceremony you have to do. Again, Java assumes nothing about how you want to write your app. 
I went from Vb.net to c# to java then python with flask and back to java and now wear kotlin underpants. Just skip java all together and go straight to kotlin. I introduced it to the company I work for and we handle millions of requests using spring framework. There are multiple java libraries and frameworks you can choose from because it interops perfectly. I’ll take kotlin over any of the other languages for enterprise or anything else honestly. Maybe python for infrastructure work. 
C# as a pure language is generally better than Java. Java has tried to keep up, when it implements things that C# already has, years of baggage make it very difficult to do them 'right'. Depending on the kind of work you do, stuff like generics' type erasure might drive you crazy. And the streams API is powerful but clunky to use. On the other hand, some Java stuff like enums are amazing and far superior to any other language. Spring is an essential piece and brings so much to enterprise Java that to work without it would be foolish. Also, make friends with Maven (if you use it). Give it due respect or you'll be frustrated for far too long.
To the downvoter(s): you're dumb. You know nothing of Unix. You know, the system that brought us stdout and stder https://unix.stackexchange.com/questions/331611/do-progress-reports-logging-information-belong-on-stderr-or-stdout 
You're looking for /r/learnjava or /r/javahelp.
Why would I lose 'parameterized log messages'? can't I pipe from the stdout the entire json (for example)?
Yes. Meant that
In a dockerized/containerized env, like k8s, should the app write to syslog the data won't arrive at the host/node. Same for serverless/lambda. In most of the modern new frameworks, component=process, therefore, the process output is the ultimate representation of the software. In my humble opinion.
Thank you. Downloaded and have already read through a few chapters. Your work is much appreciated. 
Try FetchType.LAZY.
The greater differences in relation to concepts of language From 5 to 8 is the lambda expression, (it's a big thing but i think you can ignore in the begining) and the Date and Time API (old Date was garbage). To Java 10 only programming change is local variable type inference, you can use 'var' instead a type of your object when you declare it. the 'var' usage only works on local scope and the compiler need to know the type of the var in compilation time, you cannot declare thinks like: var v; v = new Bar(); or: var v = new Bar(); v = new Foo(); Probably the last example works only if Foo inherits Bar;
I would say both eco-systems have good parts and bad parts. Java has more libraries, runs in more platforms that lack .NET support that embedded devices, SIM, mainframes, phones (even if it isn't proper Java), enjoys GUI frameworks across multiple OS as part of the SDK. As downsides, up to Graal all good AOT compilers were commercial, prefers to adopt only proven practices, values backward compatibility above all, lacks value types and support for low level coding, prefers conventions over syntactic sugar. .NET rules on Windows, not so much outside of it, specially regarding available libraries. The GUI story for .NET Core still is a kind of WIP. There are Xamarin.Forms, Avalonia, Eto, but they all lack the maturity and third party components that Swing and JavaFX have available. Of course on Windows, .NET GUIs rule vs the Java ones. C# has lots of nice syntic sugar features, proper value types and generics, the always supported AOT/JIT since the beginning and much better features for low level programming, specially since 7.x. Also we cannot look at Java and .NET in isolation, we also need to take into consideration the alternative languages on each platform. Koltin, Scala, Clojure on one side and F# on the .NET side. Personally, I cannot decide between both, hence why always tend continuous alternate between both, some times even on the same project (GUI in WPF, backend in Spring). Which is ultimately my advice, embrace Java but keep your .NET skills up to date, and wyou will get a broader CV.
Has anyone used Spring cloud as their db driver/connector? I've been thinking of looking into a cloud based db solution for sharding.
Alot of Kotlin people really love it.. is it really worth it?
I was (still am) confused by the "zero dependency" aspect -- there's a dependency on the Kotlin standard library at least ... (unless I'm missing something -- am I?) 
Personally I love every aspect of Spring, and for some stuff like REST APIs I love Spring Data. However Spring JPA + Hibernate has always felt like...why am I not just using hibernate? Specifically I have 3 problems with Spring Data. First I really don't like the way Spring handles caching or async. I use a class with a SessionFactory and Configuration object. I have a low ish level class for generic sync+async query methods encapsulating that stuff. The next level up from that class has a LoadingCache with a CompletableFuture wrapped POJO object. If the object isn't present in the database the LoadingCache hits the db. No matter the result it's returned as a CompletableFuture. Thanks to how LoadingCache works all of this logic can be handled generically, and my queries are a single line of code. public U getObject(T e) works for most situations, and I can use the Criterion API for others. Anyways on to the rest of the story for me: The second reason I don't use Spring Data is also included in this situation. So I wanted to place a cache between me and Spring Data (because annotating every cached object in my entities is fucking awful!) What I wanted to do is have the LoadingCache initialize the object exactly the way the object's interface describes. So I made an interface called Defaultable which initializes based on the generified key type. Spring Data though was not okay with this. I can't recall exactly the error, but having my DAO implement my Defaultable interface was a no-no. This made caching outside of the inbuilt spring caching infeasible. The third reason is pretty simple: I don't like having to make a repository for every single entity in my model. I'd much rather have a generic interface with qualifiers I can define in the configuration and autowire into wherever. The last project I used Spring JPA in I think I had something stupid like 15 repository classes? Just a bit of food for thought on Spring data. I understand such a need isn't very common, but in my case things like PrePersist just weren't flexible enough or required a lot of by-hand work I didn't want to do. 
&gt; out of the box
Perhaps I misunderstood something, but I thought the main reason you use interfaces with Spring was so that Spring could create JDK proxies, instead of having to use cglib. Did this change in Spring Boot?
Good point. You're right. The stdlib is needed by the dotenv lib. The stdlib is pretty small. I also had in mind the Scala case where often times the build system, sbt is thrust upon you. 
Java will be getting value types and generics over primitives/values in a future version. See JEPs [169](http://openjdk.java.net/jeps/169) and [218](http://openjdk.java.net/jeps/218).
In a real system, all your hosts forward their logs to a central syslog server, or cloudwatch. It doesn't matter if it's running in docker or not
Once you’ve got a semi-mature containerization and CI/CD process what are the benefits for running your container locally for development? I guess if you’re using an enterprise application server like jboss maybe it’s make sense, but I’ve been doing nothing but spring boot on the server side lately and with devtools + embedded tomcat + ide integration I don’t see the benefit of using docker locally.
\#1 should be: Don't overuse frameworks and keep them away from your designs.
I come from a C (and then C++) background myself, and appreciate where you're coming from. But I think you can get similar benefits through API documentation. Regarding narrowing the relationship, that's absolutely a good reason to have an interface. (The 'interface segregation' bit of SOLID.) I'd like to think about this more, but my initial reaction is that the same forces that would drive me to create an interface in the first place would need to exist for interface segregation to matter. Thanks for bringing this up. I agree that the point where an interface gets more 'set in stone' (difficult to change) is where you have more clients. That's an additional factor to consider, and another good point. 
I'd augment this with some other recommendations. http://immutables.github.io: Immutables allow you to create immutable value objects with nice builders, equals, and hashCode by just specifying an interface. The code gets generated at compile time and isn't the black magic that is Lombok. Immutability can also help enforce a certain cleanliness and stomp out bugs. Java's lack of properties is annoying, but Immutables makes up for a lot of it. http://jdbi.org: Jdbi is a good, simple way of interacting with your database. You write out the query and it'll serialize and deserialize from your object. It doesn't handle relations (it's not an ORM), but it's dead simple to use. I recommend looking at the SQL Objects (http://jdbi.org/#_sql_objects). Yes, it can be annoying to write SQL, but Jdbi means writing a little extra easy code rather than trying to figure out and debug weird ORM stuff. I think that a lot of projects can get away without using an external server and just use embedded Jetty. I don't know much about Spring, but https://jooby.org is a lot of fun and https://www.dropwizard.io/ is really nice as well. When I look at C#, I wish Java had properties and LINQ to SQL, but Java 8+ is pretty good. 
&gt;For this reason, Java offers far more flexibility in dealing with your edge cases, but it can also be very overwhelming with all the choice, and ceremony you have to do. Again, Java assumes nothing about how you want to write your app. I have to disagree with this. The Java Ecosystem is huge and does have many different implementations for a particular technology. However, if you align yourself with a particular vendor, the argument of many choices becomes much smaller. If you stick with Red Hat Wildfly, then you are guided to Java 8 Streams for querying collections, JPA (Hibernate) for ORM, JSON-B for Serialization, and JSF for Web. In my opinion, Wildfly has much more bundled in functionality than .NET which makes the need to evaluate external libraries often less for typical Enterprise development
True, it might still take a while though. And lets hope Oracle keeps being interested in sponsoring the work.
I guess sometimes people want to run all sorts of tests locally before pushing changes. Still, using docker directly will be an impediment when trying to run the tests on newer CI systems. Most of them by default use docker and will require additional configuration and forfeiting some security to be able to run the tests In any case some CI systems allow the scripts to be run locally pretty easily: `gitlab-runner exec docker test:unit` This makes having to spin up containers outside of CI not useful anymore (In most cases)
What’s the equivalent of Spring in C#?
If you are only running a spring-boot application then you already have the containerization (the runnable jar is your container) so no need to run docker. However, let's say that you want to put things on a queue, or connect to a database or something similar. Having a docker-compose for your project setup will be awesome for development and onboarding new members to your team aswell :)
Forward logs to Splunk/ELK. Don’t write to file system if it’s production critical system has been my experience. 
Yes, but unless you're writing a library that needs to be extensible like Spring, when in your day to day work are you definitely using interfaces? Only when you actually have 2 implementations you need to choose between. We generally do this with services that would cost if we queried them and use a dummy implementation in development.
asp.net is probably the closest.
One thing I think that is missing from this interface discussion is inversion of control. &gt;The [Dependency Inversion Principle](https://en.wikipedia.org/wiki/Dependency_inversion_principle) &gt; &gt;*A. High-level modules should not depend on low-level modules. Both should depend on* [*abstractions*](https://en.wikipedia.org/wiki/Abstraction_(computer_science))*.* &gt; &gt;*B. Abstractions should not depend on details. Details should depend on abstractions.* This is one good use case for interfaces even where there are not necessarily multiple implementations.
Maybe people use composition before trying to use multiple inheritance ;)
Forward how? through syslog or direct write?
I wish Java had Scala or Kotlins properties. C#'s are abhorrent. I'd sooner auto-generate getters / setters.
Hard coding an app to use a particular version of the JDK is never good practice, as you are now finding. It's not fair to say Oracle didn't give you any warning. Since the release of JDK 9 last year they've been saying that feature releases will only have support for six months. They haven't taken it away, either, they've just moved it to somewhere you need a free account login to access.
Remember, that as of JDK 11, the Oracle binaries (which are the LTS ones) will no longer be free for use in production.
T'was a joke 🙂
Definitely agree with you, but It will be very hard to change from a implementation being scattered all over the program to an interface later (gotta update all the references).
asp mvc
Hey, if you're "*only*" working on springboot , yeah a container infrastructure may be a bit overkill yes, but at a point where you have a lot of surrounding systems like database, messages queues, mail-servers, etc you want to test these in the integration-test phase before commiting them into the development branch OR directly onto your origin integration branch(imho). I understand these feature-options as safty-net in front of your *real* ci-safty-net. 
why is that Thinking in Java (4th) is absent from the list? it's the best book to learn all aspects of Java language without going too deep.
Practically, you can not write to syslog in Lambda or Kubernetes. The data won't be shown in the cluster logs. They both expects stdout
You mentioned the word 'joke'. Chuck Norris dosen't joke. Here is a fact about Chuck Norris: &gt;When in a bar, you can order a drink called a &amp;quot;Chuck Norris&amp;quot;. It is also known as a &amp;quot;Bloody Mary&amp;quot;, if your name happens to be Mary.
This. Also if you are actively trying to debug an issue that comes up only during integration tests, then being able to run these tests locally makes debugging a lot easier. 
There's are a [few more details](https://www.infoq.com/news/2018/06/new-details-jmc) emerging on this now from ex-Oracle people. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The fucked up thing about this is that the guy who committed this atrocity created one of the top Kotlin frameworks and was otherwise a reasonably safe pair of hands.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; when in your day to day work are you definitely using interfaces? All the time, when I apply the strategy pattern, when I want to use composition instead of inheritance. &gt; We generally do this with services that would cost if we queried them and use a dummy implementation in development. That's dependency inversion, a different use for interfaces. 
They made it default in Spring 5.
Bad Bot
that's still the case
I guess the summary I am getting from this is that java mission control has been, "off-shored". But, the product group continues to have similar employee numbers.
I've seen this mentioned a few places, and have tried to verify it independently, but failed. Do you have a source for the change in production licensing?
&gt; I come from a C (and then C++) background myself, and appreciate where you're coming from. But I think you can get similar benefits through API documentation. Very good point. Just off the cuff, I guess the reason I don't think quite as much in terms of documentation is that it's harder to get to documentation than it is to a source file. (Any given source file is a couple keystrokes away in either IntelliJ or Emacs, and the Javadocs, etc. are slightly harder to reach.) It's also easier to navigate around a source file than a documentation page, etc. That said, all of that is potentially something that can be addressed with tooling. &gt; Regarding narrowing the relationship, that's absolutely a good reason to have an interface. One thing I should mention is that I'm viewing this very much from the point of view of classes that play the role of what you might think of as modules in other languages. It was early on that I started thinking of DI as something like a dynamic linker in a 'traditional' language, and the DI components as being modules with explicitly defined interfaces. The idea of separately declared interfaces sort of fell out naturally from that. (I'm also a big fan of XML configuration, in that it makes it easier to 1) explicitly document how everything fits together and 2) specify configuration parameters that make it easier to reuse components in a context without writing more code for each instance.) The reason I make this distinction is that for classes that serve the role of value objects, etc., I'm a **lot** less inclined to make an interface. 
Java 9 is old new now 😂 11 will already be here in September!
With the new release cadence, I’m sure they will be.
Well, we never know. With the revenue stolen by Google, now that OEMs are jumping into Android and Android Things instead of Embedded Java, maybe they will change their minds. https://www.infoq.com/news/2018/06/new-details-jmc
It looks like in your [submission](https://www.reddit.com/r/java/comments/8ss4ry/question_is_the_speed_of_development_being/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
FFS I hate that this is true
I don't completely agree with that narrative. If you look at some of the commits in the JDK, there have been some "off-shore" involved for a long time. Calling them less qualified just because they cost less is unfortunate. JDK development occurs across many continents. Oracle has abandoned JMS, and may be the job of the "off-shore" employees is just to keep the transitioned repo is clean with no licensing issues.
I don't know if the new team is less qualified, I'm saying it's something I've seen commonly that a company will hire a cheaper team while ignoring that they are less qualified.
&gt; There seems to be a lack of understanding at upper management layers on why Java platform development within the product org actually is important and linked to future revenue. Who cares, the [quarterly report](http://investor.oracle.com/financial-reporting/quarterly-reports/default.aspx) was great /s
In 10 years :/
Less than that! The mailing lists give you some clues. I would guess around 2020.
I am just contemplating here, but I don't they are new team, they will probably continue JMS development until it gets more traction from the open-source community and probably be transitioned away in a year or two. *I don't work in India, nor for oracle.*
That might be true - but that doesn't mean one should assume *interface* == *Java interface*. That is my message :-)
previously posted related thread. https://old.reddit.com/r/java/comments/8jvjnk/value_type_hygiene/ 
Ah okay. Well, I hope that's accurate, because if so this all sounds like reasonable decisions by Oracle.
I don't know if I like this because it's funny, or if it's actually a really good idea.
Upvote for old.reddit.com!
Oh, fuck off and die in a tar-pit dumpster fire, Oracle.
JMC I think you mean? Jms is the messaging product 
Corrected, thanks.
&gt; Calling them less qualified just because they cost less is unfortunate. That's literally how it works, in general if people can make more money they do. Way back in the day henry ford doubled the wages he paid because higher wages brought him more qualified workers. Also, unless the existing team is particularly horrible, just firing the current team and replaceing them with people of similar quality will get you people much less qualified because they know nothing about the product and they have to learn it all new again.
From this post: &gt; Going forward, we expect most developers and organizations to be using our builds as we complete the effort of making Oracle JDK and our OpenJDK builds equivalent." From the [intro post](https://www.oracle.com/corporate/pressrelease/java-se-subscription-offering-062118.html) &gt; Java SE Subscription provides commercial licensing, including commercial features and tools such as the Java Advanced Management Console to identify So, w/ flight recorder, mission control, etc tools, you move those to OpenJDK to make them compatible w/ Oracle versions. Then you brag how you're doing thing. Then you create new Oracle-only tools just like you did previously? Not saying you shouldn't provide commercial tooling around Java, just don't brag about bringing Java distributions to be the same when you still have a commercial version with something else (whether it's outside the technical boundaries of the "JDK" distribution or not).
Is it still available? I dont see it free unfortunately.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
So paying Sun, IBM or Red-Hat for support is ok, but for Oracle, those greedy guys.
That is not literally how it works. It is just one of the ways. Why is it that so many people immigrate to the US? because salaries of software developers are highest in the world here. Talented developers across the world the world make less money when compared to the US, see the difference in salaries in Europe vs US &amp; Britain vs US. Stop correlating oracle abandoning JMC to outsourcing. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It's weird that you say it doesn't work that way then point out that it does work that way: &gt; Why is it that so many people immigrate to the US? because salaries of software developers are highest in the world here. &gt; Stop correlating oracle abandoning JMC to outsourcing. Why? Are yiu hired by outsourcing companies or something?
&gt; It's weird that you say it doesn't work that way then point out that it does work that way: I am saying software development for many companies is spread out across different geographical regions of the world. Development which doesn't take place in US, doesn't mean it is outsourced. &gt; Why? Are you hired by outsourcing companies or something? No. Are you one of those employees who was replaced by outsourcing?
Interesting, thanks! 
Try part 2 of the MOOC [Object Oriented Programming with Java](http://mooc.fi/english.html)
[Submitted 21 hours ago](https://www.reddit.com/r/java/comments/8sm5zy/using_docker_from_maven_and_maven_from_docker/) by the author.
If you are a "c with classes" and are spoiled by cross platform and memory management type of gut, then Go might be an interesting language for you. To me it is the sweet spot of low level programming versus convenient and safe language features. The inventors themselves see the language as a successor to C. There are some eastereggs in the git history, look for the first few commits on top the root, if you know your way around weird git commands. Before Go I was primarily doing Java. When I switched to Go I had programmed some CLI utilities in Java that heaviliy uses concurrency (ETL). Go is way more efficient when you write small tools like that and has super nice concurrency primitives. That's what got me to learning Go. While doing that I learned about many projects like Docker, Kubernetes and Prometheus that are done in Go. That's how I go into the field am working in right now. Most applications in Kubernetes that I run in Go are helper applications. Like prometheus exporters, little sidecar programs that connect to their main program and survey metrics and provide a scrape target for the prometheus server. Or controller applications that connect to the kubernetes API and control aspect of the cluster for which there is no native functionality in stock kubernetes. But I'd go as far as to say that Go is the perfect language for most cloud or micro-service applications because of its simplicity, full network stack std lib and performance. Go is very opinionated, but I happen to agree with most of the opinions (like tabs over spaces). 
As a backend dev this is a very biased take on things buuut: I recommend picking up Spring. First without spring-boot included. Then pick up spring boot. Then pick up gson and hibernate, and you have a nice little enterprise application framework. If you want web stuff on top of that pick up Vaadin, and you've got a super legit enterprise webstack.
Thanks! However, can these be used in the context of QA automation? Or is this mostly for someone pursuing development?
Yeah those libraries are more for actual development. However in QA I'd imagine you'll encounter applications written using these frameworks. They have inbuilt testing systems designed to integrate with shit like mockito that make tests a lot more robust. Gson isn't in that category, but Hibernate, Spring, and Vaadin certainly are. If you're doing QC for webapps I'd highly recommend learning the Selenium framework with the FirefoxDriver (the chrome driver and html drivers are broken af atm.) This doesn't just simulate a browser it controls a browser using the marrionette system. The selenium API basically wraps the marrionette web requests in a very easy-to-use Java API. I've used it for bots a few times, but it's really meant for QA/QC.
Here's a Tweet from Donald Smith, Java SE PM at Oracle. https://twitter.com/DonaldOJDK/status/977971082706612224 In the context of the rest of the Tweet thread, this is confirmation.
&gt; Java SE Subscription provides commercial licensing, including commercial features and tools such as the Java Advanced Management Console &gt; &gt; Oracle employs many (hundreds?) of engineers making Java. Its OSS freely available but they need to pay the engineers somehow.
Thanks for the verified source; it puts the last piece of the puzzle in place for the rationale behind the changes over the last year. 
Now all that remains is to google for a C example of how to launch a JVM and execute a specific Java code, and I will be able to build my Frankensoft Monster! 
Why can I not down mod that bot?
iirc, avian vm is pretty compatible with C/C++ and can be embedded within a C program.
I enjoyed this specialization [https://www.coursera.org/specializations/pcdp](https://www.coursera.org/specializations/pcdp). 
No, nobody said that. I even specifically said "Not saying you shouldn't provide commercial tooling around Java". They just shouldn't brag about making their editions of Java and OpenJDK similar while doing the opposite.
Sure. My comment has nothing to do with the righteousness of these pay-for editions. It's about feature differences while claiming you are reducing it.
In what way is ChromeDriver broken right now? In addition to Selenium/WebDriver I would recommended studying up on some testing framework (TestNG or Junit) and assertions (I'm liking AssertJ) for a QA role. Unfortunately it seems that a lot of the resources that cover these topics are not native English speakers.
Keep crying. 
Not sure but you ask the devs at usb4java http://usb4java.org/team-list.html
Yep don't want to be running time consuming integration tests every build. Have them run on a Jenkins job.
You will kindly observe that when paying Red Hat for support, your right to use the open source software doesn't terminate when you stop paying.
I don't think you can capture the keyboard and redirect it to your app, as Windows support for HIDs is hardcoded into the OS itself. You probably need a special device - read https://stackoverflow.com/questions/13923436/redirect-keyboard-input-from-second-keypad 
Look forward to seeing it
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I love the old Reddit too, but people shouldn't post links like this. Someone using the new Reddit (now the default), clicking that link will throw them back to the old Reddit. 
Honestly I'm more excited about getting rid of generic type erasure than the actual value types
I wonder how hard it would be to make a small hardware device that remaps all keyboard input into alternate codes.
Oracle is pulling a Microsoft.
Erasure isn't go away any time soon. Sadly.
Yeah, I figured. It's a limitation of the JVM, right? And I would guess that the JVM is less likely to change than Java, since so many other languages run on it now. 
Yeah - my understanding is that the JVM would have to change. If Java added a proper TypeToken or something similar to what Scala has (type tags or manifests) it would make Erasure a non-issue.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I totally agree -- I always start by writing an interface, because it leads me to think more thoughtfully about what I want the API of my service to look like without getting caught up in wanting to iterate on implementation. This tends to lead me to write better + higher level contracts that are better at encapsulating behavior. Also, I like putting Javadocs on the interface because, again, it helps me write documentation from the perspective of the consumer, rather than relying on assumptions gained from being able to see the actual implementation right below.
Not really a case of fault IMO. Copying a permalink from the wide majority of places on the old desktop site copies the subdomain (which is extremely stupid considering most subdomains redirect to subreddits or are language subdomains, which means all subname.reddit.com links have to be manually written-- other than that the number of view altering subdomains is minimal).
Brian Goetz has mentioned that generics over reference types will continue to be erased, while primitive/value types will be reified.
new Cell&lt;String&gt;(null).contains("boom!"); 
You are free to use OpenJDK or any of the other alternative Java vendors.
Read effective Java 3rd edition. Then re-read it Then carry it with you at all times 
I don't see any technical difference there beyond paying for support. Red-Hat's support page doesn't even list prices contrary to Oracle's one, using the "schedule a meeting" approach. https://www.redhat.com/en/services/support 
Is this new on the [Oracle Java SE Support Roadmap](http://www.oracle.com/technetwork/java/javase/eol-135779.html) and I just missed it before? &gt;Beginning with Oracle Java SE 11 (18.9 LTS), the Oracle JDK will continue to be available royalty-free for development, testing, prototyping or demonstrating purposes. Oracles OpenJDK builds can be used for those who do not want commercial support or enterprise management tools. Commercial or **production** of the Oracle JDK after Java SE 11 use will require the purchase of a Java SE license from Oracle. I had thought that production use would be ok for the 6-month period until the next JDK release (e.g., JDK 12).
I' ve updated Apache Harmony' s pack200 implementation to use ASM6. 2 and i' ve made progress towards updating it to the current spec as well as adding support for Java 9 and 11 constant pools 
Yes, it does looks new according to the last snapshot of the page (taken on Jun 18th): [https://web.archive.org/web/20180618224310/http://www.oracle.com/technetwork/java/eol-135779.html](https://web.archive.org/web/20180618224310/http://www.oracle.com/technetwork/java/eol-135779.html)
The article is about the Java/Groovy template. The original title may be misleading, so I posted the link with a slightly changed name. 
?
The difference is RedHat is not saying one thing and doing another (i.e. saying it's trying to bring its version and the general version the same while building differences). It's not technical, it's about stated motivations vs actual ones. Oracle donates some tools to OpenJDK (or "dumps" if you believe they are reducing maintenance by laying off or repurposing the devs) and claims it's because they want OpenJDK and Oracle version to be the same. Then while turning down effort on that side, they ramp up efforts on Graal (will start shipping w/ OpenJDK, but Oracle owns it and has a premium version) and Java Advanced Management Console (disallowed for production usage without payment) for their new blessed Java version/subscription. All I'm saying is they should be clear. Their goal is not to have OpenJDK and Oracle Java the same as they say. Their goal is to continue to maintain differences, just with different premium tools this time.
Are we talking about Java here or Java Advanced Management Console, which is a completely different product? Don't want to pay for Java Advanced Management Console in production? There are other alternatives. With all the hate that Oracle gets, maybe they should have let Sun just die or IBM get the deal, I bet how much happy everyone in the Java community would be now.
1. Use JHipster 2. Use JenkinsX
&gt; Are we talking about Java here or Java Advanced Management Console? That's where it gets muddied with naming. Java is an overloaded, ambiguous term anyways. Now we have a "Java subscription" and we already see this ambiguity pop up even on this subreddit where people are asking where to download Java. I believe the ambiguity with naming is done intentionally by Oracle to drive sales. They'll probably push it in their java.com download at some point too. &gt; With all the hate that Oracle gets, maybe they should have let Sun just die or IBM get the deal, I bet how much happy everyone in the Java community would be now with Java 6. You don't always have to take the bad with the good silently. We can all see how different languages/runtimes are handled by their stewards. You can praise and criticize different aspects of this management at the same time.
My comments history is full of positive and negative remarks around the technologies that I like, including Java. What I don't find so positive is bashing Oracle (which they many times do deserve) for Java related practices that were actually already common during Sun golden days, like branding everything Java something, requiring support for legacy versions or having to pay for any edition for production use besides the regular SE. 
That would throw an NPE, because this.value is null, so this.value::equals has no object. 
Sure, but what are you trying to tell me?
You wrote some code. It has a bug. I pointed out the bug. I don't see why this is hard to understand. 
I asked how the implementation and the semantics look like under specialization. Adding a null check is completely irrelevant to those questions.
Why gson? We usually perfer Jackson as a more complete json lib.
The important information: &gt; What is the cost of a Java SE Subscription? Desktop pricing is $2.50 per user per month, or lower with tiered volume discounts. Processor pricing for use on Servers and/or Cloud deployments is $25.00 per month or lower. More information is provided in a separate section below. http://www.oracle.com/technetwork/java/javaseproducts/overview/javasesubscriptionfaq-4891443.html
Yep, they're replaced "TBA" with "lol, no". So it's 25 USD/month/processor or OpenJDK. I think I'll be going OpenJDK.
FirefoxDriver is broken beyond usable atm. ChromeDriver on the other hand works perfectly and has, in its embedded version, replaced PhantomJS because it works that much better (also because it's less work for the PhantomJS guy).
In my experience, very few of the people who moan about Type Erasure understand what it actually is, or can articulate \*why\* they think TE is bad. It's far more common that what people actually mean is: "I want List&lt;int&gt;", but that is \*not\* type erasure - that's a consequence of a lack of a top type. Note: I'd appreciate if anyone who wants to argue this point with me would first do the following: * Compile a small "public class MyCallable implements Callable&lt;Double&gt;" * Run javap -c over the compiled class * Look at the output before replying. TL;DR Type erasure doesn't do what you probably think it does 
It's not a technical limitation of the JVM as such; the main blocker is remaining backwards compatible with pre-generics bytecode.
Thank you for your thoughts. I'll take a deeper look into Go.
Why java?
someone told me that you can do something like this with ava. i am not an expert :)
I'm a 25-year IT veteran, with a decade of both PHP and Rails experience, each, but I'm new to Java web development, and this "problem space" has been simply bewildering to me. I've come to conclude that this is because Java tries to be all things to all people, for all time and every situation. Eclipse, Netbeans, and IDEA all generate slightly different starting project structures. Then this gets complicated by how they implement various libraries. And then there's the continual push-pull of Maven vs. Gradle. After several weeks of trying to use Grails, and hitting when I'm going to conclude is an insurmountable bug with SAML and GORM, I'm going to try bootstrapping a new site. I'm going to be using [start.spring.io](http://start.spring.io/). Since someone brought up jHipster, I'll also point out [dropwizard.io](http://dropwizard.io/), which, if I understand correctly, was the first bootstrapper to pave the way for the others. Really missing the highly-opinionated approach of Rails these days...
I just recently subscribed to this sub again after 1 year but you are already giving me enough reason to unsubscribe again.
Yes type erasure is good enough for 98% of cases other 2% have workarounds.
This will get better solutions in /r/sysadmin or /r/techsupport as it is not Java related.
Effective Java + Clean Code + any book about Design Patterns in Java: if you covered and can use everything in those books you're at least on par with 90&amp;#37; of Java developers out there.
[Ceylon](https://ceylon-lang.org/) has reified types on the JVM, so I think if there is any limitation, there are workarounds. I think it is more like "the JVM does not help with reified types". P.S.: I so wish Java steals the improvements on type system that Ceylon has...
Effective java, is this the one by Joshua Bloch?
No, other JVM languages like Kotlin have reified types.
thank you for your advice.
No probs. Best of luck finding a solution.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
According to their docs, they still do erasure at the JVM level. They must create manifests or something in the compiler.
OpenJDK it is then. They never learn do they..
&gt; I've come to conclude that this is because Java tries to be all things to all people, for all time and every situation. Well, yeah, Java is a generic programming language and platform... &gt; Eclipse, Netbeans, and IDEA all generate slightly different starting project structures. These are different products... &gt; Then this gets complicated by how they implement various libraries. Who is they? &gt; And then there's the continual push-pull of Maven vs. Gradle. Java doesn't define dependency management, so there are different products available for it. &gt; I'm going to conclude is an insurmountable bug with SAML and GORM What do SAML and GORM have do with each other? GORM is for persistence and SAML is for communicating security assertions. Are you talking about a dependency conflict? &gt; I'm going to be using start.spring.io. Spring Intializr is an interesting service provided by Spring, never found the need to use it. &gt; was the first bootstrapper to pave the way for the others. There have been a number of bootstrappers. The first one I used was AppFUSE, which came out long before dropwizard. However, many people don't like bootstrappers, preferring the approach of adding libraries on their own instead of having stuff generated for them in ways that are really hard to control. I thought bootstrappers were cool at one time too, especially when I first saw what Rails could do. Now, I avoid bootstrappers altogether. Well, except for Spring Boot... &gt; Really missing the highly-opinionated approach of Rails these days... Rails is a web framework for Ruby. It doesn't make sense to compare Rails to Java. The more sensible comparison is Java to Ruby. And many people avoid Rails because it's opinions come with a heavy price, and why there has been so much pushback against it, leading to the popularity of Sinatra.
Uh using the latest geckodriver with an older selenium is working fine for me. ChromeDriver kept crashing, and had no proxy support IIRC. Which version of selenium? Maybe newer selenium versions are just broken? Also firefox works really well in headless mode.
As far as I know, Firefox headless still needs X11. Chrome does not. Latest Chrome Driver with Chrome 67 works fine for me. Whatever selenium version is pulled transitively through Selenide (latest). That being said, I'm sure it has proxy support through the argument builder, though no API that wraps the arguments like for headless mode. 
Jackson is faster, but I find gson way more convenient. For stuff that's not getting parsed constantly it's way better imo. First I can turn shit into POJOs out of the box in 3 lines. Unless I'm mapping something string to something else it requires no configuration. Jackson on the other hand I have to do a lot of manual crap with the ObjectMapper
"As far as I know, Firefox headless still needs X11. Chrome does not." It requires a couple lib deps from X11 not all of X11, and ofc doesn't need it running. "That being said, I'm sure it has proxy support through the argument builder, though no API that wraps the arguments like for headless mode." This was my primary sticking point with Chrome. I never could find a way to get proxies working. It just ignored DesiredCapabilities which made it feel to me well...broken. Weird that we'd have dissimilar experiences. FirefoxDrover isn't perfect, but ChromeDriver seemed very erratic last I used it. It kept giving up on page loads with no Exception etc
Yes it is. Make sure to geht The 3rd Version with Java 8 and 9 features.
Yes
Thanks!
You die not specify a Lot. Something like deepstream.io or rabbitmq could bei a solution you are looking for.
Author here. I'm open for discussion. The source is in the text, but conveniently accessible here: https://github.com/uncomplicate/neanderthal/blob/master/examples/benchmarks/src/benchmarks/neanderthal_vs_nd4j.clj
Ok, they just updated the doc again today and now that paragraph reads: &gt;Beginning with Oracle Java SE 11 (18.9 LTS), the Oracle JDK will continue to be available royalty-free for development, testing, prototyping or demonstrating purposes. As [announced in September 2017](https://blogs.oracle.com/java-platform-group/faster-and-easier-use-and-redistribution-of-java-se), with the OracleJDK and builds of Oracle OpenJDK being interchangeable for releases of Java SE 11 and later, the Oracle JDK will primarily be for commercial and support customers and OpenJDK builds from Oracle are for those who do not want commercial support or enterprise management tools. which removed the requirement for having a subscription on production servers. I think.
So basically, "We're not going to stop you from running Oracle JDK on production, but you won't be getting support from us. If you won't want to pay, run OpenJDK". I suspect this means it will be hard to get hold of the Oracle JDK without paying after 6 months. 
Well it's just syntactical sugar, at least in Kotlins case.
The main reason is that people just haven't transitioned yet. JUnit 5 is great and adds a lot of useful new features (I'm especially fond of `assertThrows()`). And [JUnit 5 does support parameterized tests](https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests). It's a complete rewrite of JUnit 4's implementation, but it's much better now. Heck, you can even use enums as your source or CSV files.
Do you think the addition of SIMD intrinsics (project panama) and value types will obviate the need for these libraries some time after Java 11 is released?
I've done a project with Junit 5. As far as the API goes, it supports doing both the old and the new AFAIK. So transition shouldn't be TOO bad. The one rub that I've hit is that it is TIGHTLY coupled to the version of surefire you use (if you use surefire). I wasn't able to transition to the latest version because it was incompatible with the latest version of Junit 5. When I last played with it, it was something like surefire 2.19 that it was able to work with. The problem here is that 2.21 added java 9/10 support (or something along those lines, my memory is a little fuzzy here). As far as the benefits go... meh... I can't say that I've used a ton of the features. The multi assert thing can be nice to get all the problems out in one go, but other than that I haven't seen a hugely compelling reason to switch up.
Java has the same feature with the TypeToken pattern. Scala, Kotlin, Ceylon all use the same technique, but it's better integrated and supported.
Unless you really accept and embrace the new features of JUnit 5 it is going to be just another version of JUnit with different annotations except it is going to be more cumbersome to use because all the rest of the testing frameworks and extensions are built around JUnit 4. There is a growing ecosystem of JUnit 5 extensions but that pales today compared to the maturity and breath of extensions built around JUnit 4. Some of the biggest game changers with JUnit 5 include: * _Parametrized tests_ - a huge improvement over predecessor and truly indispensable tool for data driven testing. * _Nested tests_ - excellent tool for grouping tests together by topic or setup fixtures. * _Dynamic tests_ - really, a Swiss Army knife of testing. I’ve used them to describe a testing scenario (a ordered sequence of tests where every following test needs the preceding test to succeed) or for more complex cases of data driven tests where the parametrized tests did not quite cut it. I’ve even emulated Cucumber style BDD tests just with dynamic testing. * _Extension ABI_ - miles ahead of version 4 in terms of capabilities and flexibility it offers to test extension writers. 
I am pretty sure Panama won't help there. 
Those needs just strike me rarely. I've only had a reason to write a handful of Parameterized tests. Nested tests are nice, but not really necessary. The ABI getting better is great and all, but doesn't really affect me right now when there aren't a whole lot of things using it. Dynamic tests are the only thing in your list that I think I need to look into because they would come in handy, especially doing "things that implement this interface should do this" sorts of tests.
Why not? What am I missing? It should supply full access to explicit cpu vectorization, if I'm not mistaken. Won't help with GPU acceleration, though. The SIMD intrinsics in conjunction with value numeric types should in theory obviate the need for native machine code to achieve fast matrix operations. Sorry if it's a dumb question.
Try writing a quick prototype in (portable) C, and you'll see why.
We don't want to mix it. JUnit 5 all the way would be great, but we don't have the budget / time to migrate. :(
Junit 5 is great. It’s a mature library with great features and has big improvements over the previous version. People aren’t going to migrate test code though as it’s not going to bring any benefit to the users. 
Let's hope they'll announce some new stuff about the project Valhalla! can't wait!
Not me. Have you tried C++ template? Honestly that's quite powerful but also absolutely awful. 
I've used SIMD intrinsics in C++. It's not that hard. Usually a much better idea to lean on OpenMP pragmas or library that does it for you, though.
Then it will be easy for fast Java libraries to appear and beat MKL, I guess :)
Might also want to try /r/devops
Just give-’em a chance. Really, until I started writing JUnit 5 tests I rarely had to use either of the features. Mostly I think because they were cumbersome to use in JUnit 4, I found I just used workarounds. Like with parametrized tests - mostly I wrote few tests with almost identical content except the input would have been different for each test case. Those are all parametrized tests in disguise. Also - one of my favorite extension mechanisms is parameter providers. No more need to initialize a field in the test class so that you can use it in one or two of the tests. Just have it provided as an argument to tests that need it. 
Yeah! If you’re interested, the valhalla-spec-observers mailing list will give you frequent updates over the course of the project. It’s some really interesting stuff! You can sign up [here](http://mail.openjdk.java.net/mailman/listinfo/valhalla-spec-observers). And I’m not sure if there will be a live stream, but replays will likely appear on YouTube.
I haven't switched over because every time I look at the maven repo, there are tons of different artifacts, all with names that mean nothing to me, and I have no idea which ones I need. So I just shrug and go back to JUnit 4.
pssh parallel ssh 
But aren't the Dynamic tests experimental? If I look here at section 8.2 https://junit.org/junit5/docs/5.0.2/user-guide/index.pdf it says that several of the annotations are still in experimental state. Is this outdated?
it's a little outdated, in so far as there is a newer version of the doc with fewer experimental APIs (only by like 1 or 2, don't get your hopes up!) https://junit.org/junit5/docs/5.2.0/user-guide/index.pdf
Thank you, but that list is highly discouraging, it's pretty much the reason why I made this question and started to google for alternatives. It just has strong features in it for quite some time: ParameterizedTest, DynamicTest.
It was very confusing, especially before Surefire supported it natively. https://maven.apache.org/surefire/maven-surefire-plugin/examples/junit-platform.html is a good start. We just migrated, and don't use any new features, but neither do we use any legacy bridges, so we can hopefully expand in the future.
&gt; Well, yeah, Java is a generic programming language and platform... Yeah, well, so are a lot of other languages, like Python, some of which have really tight web application stacks, like Django, so it doesn't preclude that. &gt; These are different products... Exactly the point I'm trying to make. Start a new project on IntelliJ IDEA. There are literally scores of different types of Java projects, a dozen of which seem to be web-related. It's overwhelming. Netbeans and Eclipse are almost as bad, and choosing the same types of projects in each IDE produces different file structures. There's no consensus on how to get started, or any indications about which of the files are the important ones. &gt; Who is they? Uh... the IDE's? &gt; Java doesn't define dependency management, so there are different products available for it. And different projects are going to have different priorities. Technically, Ruby doesn't have any dependency management either, but there's an established consensus on the best tool for it. Right now, the Java "world" seems split right down the middle on Maven vs. Gradle. Most projects seem to support both. Doesn't help someone new to this world decide which one to use, does it? Sure, pick one, but on what basis? &gt; What do SAML and GORM have do with each other? GORM is for persistence and SAML is for communicating security assertions. Are you talking about a dependency conflict? I'm extraordinarily clear on what roles SAML and GORM play in the stack. (I would have thought that expressing the fact that I've been doing development for 25 years would have led people to give me the benefit of the doubt on a point like this, no?) There's apparently a bug when using PostgreSQL for the database in that GORM can't figure out how to call Hibernate correctly to check user permissions when logging in with SAML. I've been working with some people on the grails-saml plugin to try to sort it out, but I've been hassling with it for weeks. &gt; There have been a number of bootstrappers. The first one I used was AppFUSE, which came out long before Dropwizard. You seem to be saying that there's a place for bootstrappers for Java web app noobs, like me. Great! So, given a fresh start, which would you use? One of the web sites? Or one of the IDE's generators? Something else? &gt; And many people avoid Rails because it's opinions come with a heavy price, and why there has been so much pushback against it, leading to the popularity of Sinatra. Yikes. Guess I should have known not to mention any other languages to try to provide context for my points in a sub devoted to something else. Sorry.
Do you simply mean Spring Data or do you have something else in mind?
Good stuff! always loved the talks by JVM architects &amp; developers. 
&gt; Yeah, well, so are a lot of other languages, like Python, some of which have really tight web application stacks, like Django, so it doesn't preclude that. Java has plenty of tight web application stacks. The only standard one is JSF, which leads to flamewars here. The problem is that Java doesn't have a "benevolent dictator" as such, outside the core VM and language, with standards outside that scope either driven by committee (JavaEE) or left to the community at large to figure out. &gt; Exactly the point I'm trying to make I thought you were talking about the IDEs themselves. Yes, IDEs try to provide wizards for the most popular web frameworks. But, there is a lot of diversity in the Java world, which I understand would make things difficult for beginners. I mostly ignore the wizards, as I find them useless anyways. &gt; Right now, the Java "world" seems split right down the middle on Maven vs. Gradle There is a reason for this, which would not be apparent to someone new to Java. It used to be just Ant, but Ant doesn't have any opinions about how to design a build system, which lead to every project being built completely differently. Then came Maven, which is highly opinionated and declarative. Now you had Ant vs. Maven. Eventually, Maven won, and basically no one uses Ant anymore. But, there were people who still wanted imperative features in a build, as well as improve on things that Maven didn't get quite right, such as incremental builds and the verbose POM model. Thus Gradle was born, taking what Maven got right, and building on it. Yes, this is confusing to newbies, but as a long time Java developer, I prefer the new ideas and improvements that come from diversity. Just pick one and go with it. If there is a split, then both tools must be widely used, so you wouldn't go wrong either way. &gt; I'm extraordinarily clear on what roles SAML and GORM play in the stack. No, I meant what does SAML *the technology* have to do with GORM *the technology*? Any stack where SAML, which is at the service security level, causes a bug at the persistence level, is way too tightly coupled. The fact that these two things are related that way in the *stack* does not inspire my confidence in Grails. The mass assignment bug of Rails was caused by Active Record being directly exposed to the request parameters, because Rails made it super easy to mix concerns. This is why I would avoid any Rails based/inspired stack. &gt; So, given a fresh start, which would you use? I was a Java noob once too, long before things like Github existed or fancy IDEs. I read the documentation. Thats how I learned Struts. I asked questions bon the mailing list. Perhaps that perspective makes me skeptical of bootstrappers. At least for me, I learn better when I have to figure it out for myself. I apply the same techniques everywhere else. I tried the Visual Studio wizard for ASP.NET MVC, and I thought the result was garbage. So I learned the stack from first principles and put together my first app, piece by piece. &gt; Guess I should have known not to mention any other languages to try to provide context for my points in a sub devoted to something else. Why yikes? What I was saying had nothing to with Ruby or Rails in particular. I like Ruby, and prefer Sinatra because I think Rails is too big and encourages bad design. I would say the same thing about JSF, which is purely Java.
Preferably raw hibernate, but spring data works too.
Yesssss! Finally having value types in the JVM would be huuuuuuge. It would help JVM Game Engines and Kotlin native out immensely! 
That was very informative, and helpful. Thanks for that. Just the discussion around all of these things provides some sorely needed context for me.
I've only ever used JUnit5 but by god is it good, `assertThrows()` alone does it for me, in JUnit4 there was a way uglier trick to doing that, among many other niceties it provides. I think the reason people haven't moved is there's no point in changing your test library once your tests are already written, the other point that others mentioned that I forgot is that JUnit5 requires JDK8, which is what helps it bring a lot of its niceties, but yeah some people can't make that move. But yeah if it's a new project use JUnit5 :)
Converted my project to Junit5 pretty quickly, mostly imports that changed. Things like BeforeClass, AfterClass are now called BeforeAll, AfterAll. @ParametrizedTest is pretty nice for creating a single test with multiple input values.
Don’t get hung up over existence of those experimental APIs. It only means that the api is evolving and they are actively managing that evolution. You might want to ask the development team for more details about reasoning behind keeping some of the APIs experimental, but it has been my impression that it means mostly one of the two things: * The feature is brand new and may have not settled down yet to a stable enough state. * The api is mostly settled but they need more feedback from users to promote it to stable status. My experience with JUnit 5 has been that in terms of reliability it is a rock solid framework. And I’ve been playing with it since M2. Even when they changed the api for few features along the way to first stable release, the migration was mostly just a matter of simple find-and-replace. 
Are there performance impact (cpu or memory) of using streams, map, filter, collect, foreach, etc compared to using a traditional loop?
streams are slower than for loops by a pretty significant % IIRC sadly. For to foreach is negligible 
JUnit 5 can run JUnit 4 tests IIRC, so you could use it and then incrementally update specific tests to use the new APIs
Oh, project Loom is there too! Hoping for some news.
Will this be recorded?
Which is mad because the whole point of introducing declarative instructions is that the JVM can convert the stream into a for-loop unless it has a better solution.
Exteremely impressive, well done! I am working on integrating computer vision models for the JVM in different ways (e.g via Tensorflow Java API, via ND4J/DL4J, via remote calls to python models - link [here](https://github.com/vision4j/vision4j-collection)) and Neanderthal sounds awesome. Will definitely check it out.
[Last year’s](https://www.youtube.com/playlist?list=PLX8CzqL3ArzXJ2EGftrmz4SzS6NRr6p2n) was, so I would assume so.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Looking forward to the "Pressler/Bateman: Project Loom" one, and all the Valhalla stuff! Imagine AWS Lambdas the size of a few Java stack frames, manipulating data densified to the maximum. The JVM's future is truly bright. I'm sure the other talks will be amazing as well.
are people nowadays using these things over traditional loops, arrays etc? I am asking because I only know java 7 and currently on job hunt.
I know, but we don't want to mix.
&gt; JUnit4 there was a way uglier trick You mean @Test(expected = IllegalArgumentException.class) Or ExpectedException.none().expect(IllegalArgumentException.class); Not quite as good as `assertThrows()`but passable. 
Thanks! If anyone knows where to get epub or mobi version of this book, please don't hesitate to share.
You shouldn’t not be offered a job because you don’t know streams. In my opinion you’re never wrong if you use the existing language features to implement a for loop, but you will frequently be wrong if you always try to use streams. All that said, you should definitely learn Java 8!
Yep. 
i am planning on learning it ! thanks
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The Java compiler unfortunately doesn't optimize as much as you'd wish. Maybe something like Proguard optimizes streams into loops? 
I've seen them used like any fad, but it's always in the shittiest code possible. Like 8 convoluted unreadable lines that it turns out simply test if a collection is empty and return null if it is.
I was looking for the same thing
Just make sure to configure your java apps and the JVM right for running on docker or you may run into problems.
That's by design; it's the hotspot compiler that will apply extensive optimizations. The amount of optimization hotspot can currently apply to streams is somewhat disappointing but with new java releases, I'm pretty sure optimizations will be improved. Using tools that modify your class file into 'more optimal' code is a losing proposition: It gives you a constant % performance improvement on your code, which is generally irrelevant (non-algorithmic improvements rarely matter, and &lt;1% of your code is responsible for &gt;99% of CPU load, so all improvements done to all code not in that &lt;1% is basically irrelevant). In the mean time, you're likely making it _harder_ for your code to be optimized by future versions of the VM, and you're probably going to introduce exotic situations where your code is harder to debug and/or straight up does the wrong thing. If you're going to apply tools to improve performance, use profilers to figure out which lines of code account for that &lt;1% that is responsible for &gt;99% CPU, and spend some more time improving just that, by hand. 
Well, keep in mind that JVM does not necessarily equal "the compiler". I agree that the stock Java compiler is just slightly smarter than my left shoe, but that's what it was designed to be. Instead, the smarts are all concentrated in the runtime engine.
&gt;are people nowadays using these things over traditional loops, arrays etc? The idea is to enable parallel computations. If you have a loop that needs to "know" about (for example) the results of the previous iteration, then the new streams will not help you. But if you have some "for each of these things" loop where the inner steps are independent of each other, then doing it in parallel on multiple cores is a pain in the ass using the traditional loops. Streams just automate all that. 
Honestly the declarative streams are easier to read and cleaner code wise, my opinion. I usually start with them then profile code if I see performance improvements are needed.
Optionals and yuuge
They're doing it wrong then.
Happen to have any guidance on this? 
It might’ve been possible to download it in that format. I’ll check.
pardon my ignorance but since its a pdf could you use that on the device of your choice? I really dont know much about how that works. Thanks you! my guess - file types for better viewing on mobile devices? 
Native ebook reader formats look better on ebook readers. PDFs work as well, but don't look as good, IMO.
Yes, mobis and epubs tend to be more readable on a variety of devices. 
I migrated our test code at work, and while it's true that our customers doesn't get any benefit from it, I get to go to work and be a bit happier about our code base. The migration was very straight forward, it took about a day to do and we have 4k tests.
Don’t use double negatives. Made that harder to read than it should have pls 
“It is unlikely you will not be offered a job”? At some point it is necessary to use a double negative since I wasn’t trying to say that a lack of knowledge of Java 8 would result in them getting the job.
The only thing we've done is removing junit 3 still there (it was optional, as it would still work regardless) and requiring junit 5 for new functionalities (on code review level). For some of the tests (like acceptance) we are using TestNG since it was a better fit than junit 4 at the time, and that is not getting migrated any time soon, possibly ever.
There's fairly little reason to migrate old code, the project I work on currently has junit 3, 4 and 5, we only require you migrate the test to higher versions when modifying them. It works really well regardless. There was a bit of a pain with junit 5 and Gradle earlier, but the newer versions (4.6+ I think?) work very well with the new junit.
It says Ebook but I'm not sure what format it's in. Here's the link. https://www.oreilly.com/programming/free/kubernetes-for-java-developers.csp
Oh, whoa -- good to see that Arun Gupta is still around.
I replaced the "pdf" in the link to be "epub", and it downloaded.
https://developers.redhat.com/blog/2017/03/14/java-inside-docker/
Amazing! Mobi worked as well :) https://www.oreilly.com/programming/free/files/kubernetes-for-java-developers.epub https://www.oreilly.com/programming/free/files/kubernetes-for-java-developers.mobi
What about the lazy evaluation factor?
Ok. So this actually makes some things more clear for me, but just to sum it up. Starting with JDK 11, the Oracle jdk will no longer be licensed for production. It will only be available for development and testing. In production it can only be used as part of a paid support license. However, the open jdk will be identical in code and therefore can be used in production for free. Am I right about that?
There's a lot of factors involved I was simply speculating. I don't know alot about the implications of the lazy evaluations issue. All I know is there is something about it copying mini-stream views for processing. I don't really understand why it does this in synchronous streams, but it makes sense in the context of a parallel stream. You'd likely have to run some of your own tests to isolate that one factor and run your own test.
Well, no, not really because parallel streams are usually less efficient if your collection is fairly small. It's only when you get to 10,000 or 100,000 items that parallel streams start becoming faster than their single threaded brethren.
I also think this is the right answer. Beside that we have adoptopenjdk and azul providing openjdk builds for free use.
Well for loops and direct memory iteration has like 20 years of optimization behind it. I have faith that future releases will speed streams up a fuckton. 
I recommend "[Java In-Depth: Become a Complete Java Engineer!](https://honest-recommendations.com/recommends/java-in-depth/)". It's excellent course where the creator explain the best practices in Java programming in 54 hours of video. 
i'm most interested in project panama! revamped interaction with native code please! 
&gt; It's only when you get to 10,000 or 100,000 items that performance matters at all? Nobody cares what method is being used for two dozen doohickeys. You and I seem to be in violent agreement.
So what’s wrong with Maven and XML?
But opinion is that this one of those things that is pointless to obsess over. So many tools that already get the job done. Spend time adding real value to your projects. 
Ok, so their officially supported platform needs a production license. I can get behind that especially as the openJDK route is free.
Nothing. I recently switched to Gradle for a bunch of new projects at work and it was fairly anti-climactic. Gradle works, so does Maven. I really like the way Gradle integrates with IntelliJ, but ultimately they all get the job done. I spend like 1 second dinking with build scripts for every 8 hours spent coding, so I try not to get too caught up in it.
Reducing the build - compile - test cycle time can help the whole team add lots of value to the project. We also have some very complicated projects with varying levels of multi-module builds, inter-dependencies, yaddah yaddah... we've come up with Maven patterns that work, and we've socialized the training as much as possible, but for large-scale projects it's easy for developers to fall into traps that cause problems. TBH we are not obsessing about it, like I alluded, we are using Maven and Gradle. I am just personally doing some research to see if there have been developments that make it worth revisiting.
XML, nothing, but it's a personal preference WRT verbosity and signal to noise ratios. Maven, we have a lot of the issues managed by coming up with some comprehensive training. For small projects there are no issues whatsoever, but for some of the larger projects, like on our 30+ engineer teams, it's easy for people to go off the rails and create problems. The biggest areas where people get tripped up is managing remote repositories, and Maven's odd inheritance model and various scopes. Again, no issue for simple projects, but with lots of multi-module projects with varying release cadences, it can become problematic. Another area that can create issues is dealing with running your own builds of other peoples' Maven builds that were constructed haphazardly. In large builds, you need to be pretty scrupulous with your construction to avoid unneeded slowdowns. For example, on one project we inherited, the previous company had used dependencyManagement and inherited dependencyManagement extensively. This is something that makes Maven VERY slow. We switched that to SonaType's recommended best practice of using dependency modules and improved the build speed by about 66% - 12 minutes to 4 minutes. Little things like that really help team productivity. 
I agree. We trialed Gradle on one project. It was mostly a resounding success. The place where things weren't so great was in the tooling. At first, the IDE integration was fine. Then at some point, the IDE integration started failing to resolve dependencies correctly and you'd have to do a dance to get the IDE to correctly build the classpath. Most recent updates have fixed that - but I mean recent, that was the status quo for about a year or so until just a month or two ago. Then that team updated the build server to the latest 4.x. The build still works for now, but it looks like the upcoming changes for 5.0 are going to require re-engineering pieces of the build script. As /u/btbam06 suggested, we'd rather spend time adding value to our project than migrating build scripts between versions. We're contemplating never upgrading, but we're not sure what the risks of that are.
What will happen to the JVM as a platform? I'm really afraid Oracle's pursuit of monetization will cause a chilling effect that kills off some of the newer and more nontraditional JVM languages like Clojure and Scala.
Forget the java build tool du jour. They come. They go. There is a reason for maven being the goto tool for building.
Per CPU pricing is retarded.
I think we are getting more work on the JVM
IMO, the bigger concern is whether the platform will end up locked down by licensing and whether non-paying users will end up as second-class citizens of the ecosystem.
I agree, but if you start thinking about it, all models of licensing quickly are shown retarded. Per machine, per core, per CPU, per virtual machine, per container, per app...
Gradle has actually gotten better at stability recently. A couple years ago we had to switch plugins all the time because of internal API changes. 5.0 admittedly has been scheduled a long time ago to be THE breaking release. As to writing code for different versions of tools - have you been using gradle wrapper (or maven wrapper)? If someone in my team has a different local version of Gradle, he can fuck off. We also share the intellij config in repo (you can move a lot of stuff from the IDE-specific settings to project-specific ones, so they can be version controlled). In gradle itself also have a decent enough abstraction over plugins so that when we replace something our CI scripts don't have to change at all.
I work at a very large company and we still use Ant. Works great
Sigh. Wise words.
Love Ant, but I like tools that do convention-over-configuration. Makes running a gaggle of large teams easier, especially when you have interns and co-ops you're mentoring.
Your last paragraph describes exactly my problem with the gotchas inherent in these tools. As others have commented, the build scripts are things that get touched at 1/100th the rate of the code. When you do have a serious problem, you need "the Gradle guy" or "the Maven guru" to help diagnose why it's resolving version X even though you specified version Y. Or suddenly all the tests are throwing NPE when they all passed for everyone else just seconds ago. But then comes the lack of having "the XYZ guy" on the team: as small tweaks get made, they do it badly, and the gotchas and problems aggregate up until you have that moment when the problems with your build scripts create delays in getting out your RC or deploying to your pre-prod, or something. I'm probably lost in despair here, hoping that maybe some whiz-bang tool has come out and somehow solved these problems... but building, testing, deploying, packaging are complex tasks so build tools and infrastructure need the requisite complexity to handle it. I'm probably barking up the wrong tree, when in reality I'm just getting frustrated at the people problem, not the technical problem, that you alluded to.
openjdk is still free
If you're worried about that you've not been paying attention. Java is more open now than it's ever been, and the platform is stronger and has a more solid future than ever. Other languages are going to thrive with Valhalla/GraalVM/Panama/Condy
Yeah because we use Ant across the company it's pretty standardized. But I do miss using maven
Thanks for the info! 
Yeah. Based on prior dealings with Oracle and their db, where they wanted to charge us per core for every cpu in our VMWare environment, it does make me nervous to try and use anything other than OpenJDK. With a database I can make an argument to management that I need a physical server or 2, but not for every microservice we deploy. Surely I am missing something there right?
What build tools don’t use xml (besides gradle)
OpenJDK is identical in behavior, but not in implementation.
The bottom of the article claims: &gt;all updates to their long-term support (LTS) releases will continue to flow into an open, GPL-licensed repository for the entire period that the LTS release is maintained Does anyone have an official source for this? Smith very clearly does not answer either of the very direct questions about Oracle submitting patches back to the OpenJDK repos (which seems a bit fishy).
It looks like in your [submission](https://www.reddit.com/r/java/comments/8tezz0/maven_build_issue_with_spring_boot/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Per user is another popular-yet-terrible unit for this. 
Oops, missed one.
They do that to bait lawsuits when you don't comply.
Ant + Ivy. Simple and straightforward.
More people should check out [bazel](https://bazel.build)
I just listened to a preview of this course. The dude has a pretty strong accent man. any other suggestions?
You will end up using at least maven and Gradle if u program Java enough (less ant these days), and will be exposed to both from reading dependencies. I prefer Gradle for small projects as it has a bit more flexibility and has some truly good plugins for docker, node, etc so you can make some real monsters. If you publish stuff, Gradle is still a little inferior to maven. Parent poms still do great work in lots of situations and are the correct solution to some problems in both Gradle and maven. 
I used to think that ivy worked the same way as maven. Then I looked at some really slow builds to realize that ivy checked every version until it found a match. That day I started hating ivy.
I like maven's KISS. There's not much to screw up with Maven. I like the fact that if you need to deviate from "The Maven Way", YOU are likely wrong and doing something stupid. Gradle is too customizable. I've seen people go completely nuts with Gradle, and customize and tweak and modify their build system until it's a fragile mess that has 100s lines of codes, and is incompatible with any other Gradle version, and difficult to understand or modify. It's the C++ problem all over again. It's a nice tool but only a handful of people are competent enough to use it correctly, and others tend to shoot themselves in the foot.
Meanwhile .NET core is fully open source and free. 
So is the OpenJDK? 
This pricing decision has literally nothing to do with the JVM
True. 
There is a difference here. Microsoft has one single code base where they put their effort in to. Oracle has two and they make money on one of them. Which is top priority?
Actually, Microsoft also has two code bases: [.NET Core, and the .NET Framework](https://docs.microsoft.com/en-us/dotnet/standard/frameworks).
" For Microsoft, .NET Core is its future development platform. " - https://suyati.com/blog/whats-future-dotnet-framework/ .NET Framework is the legacy platform
There is one difference still unanswered by Oracle: OpenJDK does not have a scheduled update like Oracle JDK (there is no LTS version of OpenJDK) meaning you do indeed get every new features and updates but at the cost of updating OpenJDK every 6 months. This may not be suitable for your business.
Maven 3 supports formats other than Xml. See Maven Polyglot (on mobile atm so will link later) 
You will have this problem with every build tool, there's no whiz-bang tool. Atleast when using Maven chances are high you will find a couple of "Maven gurus" and if they are all in vacation there probably is an answer on stackoverflow.
YAY! I can make console apps!
We solved the last one by having a CI solution that builds everything in a docker container, and we have shared and per-project images to keep build times low (have you ever tried to purge your local repository cache and do a full build?).
I’ve used cradle for years for projects with dozens of deps. Never seen any unexplained behavior with dependencies not have I heard anyone on our teams complain about it. Odd. 
Backend systems, webappps, web apis, desktop UI apps with Avalon, webassemmbly UI apps with Blazor, and you can make console apps. 
It’s verbose and clunky. It’s much harder to extend than gradle. And it somewhat harder to get started with maven in cases where an existing archetype doesn’t fit what you’re trying to do. Gradle literally can do simple java projects with one or two short lines of code. Otherwise maven does work. 
They all do so it’s irrelevant, but why is that important if they can pull deps from online repos? I don’t give a shit how they store them locally. And if you are digging in the directory itself your build setup is probably a mess anyway. That’s an implementation detail they should not expect you to worry about. 
nix, make, stack, cabal, cargo, yarn, npm and sbt to name a few. Actually most don't
We are developers. Managing complexity is our job and code is how we accomplish it. Maven doing it just means someone else wrote the code for you as a plug-in. And that’s fine if you can absorb their design decisions. But to eschew custom scripting because you end up being responsible for what you wrote seems like job avoidance to me. Build files are code that needs to be maintained period. 
This is my experience as well. If one has plugins that automate your process use it. But to assume you will never need to customize your build is folly. That’s why I choose gradle. 
Have to type those annoying \`&lt;\` and \`&gt;\`. there are to many files involved to simply sign something. Figuring out the url of a maven repo is a pain. Setting up my own maven repo is hard. Maven depends on specific user config in certain cases to build anything which makes reproducible builds hard. Xml is unnecessarily verbose (it's verboser than java somehow). Why can't I make my Java build config in Java? Why do we need to grab random technologies from a tree just because we're doing building. 
+ .NET Core Desktop packs only available for windows [this](https://msdnshared.blob.core.windows.net/media/2018/05/netcore3.png), they said it will only be cross platform but they start pushing things that are onltyavailable for windows. 
Remember Maven was built in response to a growing number of problems with previous build tools. If you toss out Maven you have to make sure your new tool is going to address *all* of the difficulties that Maven address, *and* also improve on Maven. If you don't address the old problems you're going backwards.
Truth. I don't know why you're being for answering a simple question with factual information. Plenty of non-XML tools exist and work just fine. Oh, wait, I know why: any mention of the word "maven" in this sub must be followed by glowing praise, or you get dogpiled and brigaded.
Just a tip, but don't run builds with global gradle. Just use a `gradlew`, this is known as a gradle wrapper, and is easily searchable. It ensures that all engineers and your CI server use the same gradle of they always run `./gradlew &lt;tasks&gt;`
Mark Reinhold was very clear about this at Devoxx UK a few weeks ago. Here's the link to the right time in the video: https://youtu.be/HqxZFoY_snQ?t=759 Oracle will only contribute to each OpenJDK project for six months (until the next release). After that, it's up to the 'community' to backport code to earlier releases.
Well, [according to the .NET documentation](https://docs.microsoft.com/en-us/dotnet/standard/components#net-runtimes): &gt; Versions 4.5 and later implement the .NET Standard, so code that targets the .NET Standard can run on those versions of the .NET Framework. It contains additional Windows-specific APIs, such as APIs for Windows desktop development with Windows Forms and WPF. The .NET Framework is optimized for building Windows desktop applications.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like in your [submission](https://www.reddit.com/r/java/comments/8tiogr/github_deeplearning_projects_from_scratch_using/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yes .NET framework is built for Windows only, this is nothing new. The future however is .NET core with Windows specific apis. .NET Framework will be a thing of the past. See my previous post.
&gt; previous company had used dependencyManagement and inherited dependencyManagement extensively. This is something that makes Maven VERY slow. We switched that to SonaType's recommended best practice of using dependency modules and improved the build speed by about 66% - 12 minutes to 4 minutes. Do you have a reference for that?
I'm confused by this and forgive my ignorance but will my company now need to pay a subscription to run their vendor applications that require the jdk? Will they need to pay for their developers creating java web apps for Tom cat? Should they have already been paying?
Another opportunity to plug my blog post https://rule1.quora.com/Use-Maven-Not-Gradle (a bit dated now but still applicable). 
Well, with Gradle the current support pretty much is a custom script. You add module path, and modules by hand to compiler args. But yeah, at least it doesn't explode when ran using Java 10 (although they need to change some Unsafes to method lookups before 11 arrives).
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
There's an FAQ link in the article: http://www.oracle.com/technetwork/java/javaseproducts/overview/javasesubscriptionfaq-4891443.html
I tried using AssertThrows and it was dead weird wanted me to start using executor frameworks for unit tests or some shit. So i noped out.
What has this to do with **Java**? You could ask this in a general programming related subreddit. **removed**
TreeSet
Thank you. 
That didn't really clarify... We use Oracle jdk 8, but at the very end it says what should I do if I already use open jdk or Oracle jdk? And the answer was "do nothing"
Nice just what I was looking for my little application. Thanks
Ivy version matching can be configured: http://ant.apache.org/ivy/history/2.1.0/settings/version-matchers.html
I'm not sure if it's that much different with Maven. There are [examples](https://blog.codefx.org/tools/maven-on-java-9/) showing how it's meant to be done. Unfortunately, no build tool can go further because of the insufficient, crude way the [JPMS](https://twitter.com/mreinhold/status/994669659029999616) does dependency management. E.g. [Why Maven Cannot Generate Your Module Declaration](https://www.sitepoint.com/maven-cannot-generate-module-declaration/). Good news is that the [IDEs](https://dzone.com/articles/java-9-modules-part-2-intellij-and-maven) have implemented the support connecting module-info.java and pom.xml.
It's not JavaScript it's borrowing ideas from but rather Scala.
I believe you're talking about the interface exposed to the user. I'm referring to the implementation that takes the user's version spec and resolves it to a specific artifact. Maven uses `maven-metadata.xml` to allow the client to quickly determine which version to download. Ivy looks at each version's `-ivy.xml` to make that determination. For an open source project that only publishes releases to central, that is a small number of releases until you find a match. For a library in an internal repository with too many candidate and snapshot publications, that can mean a long time to download `latest.release`.
All languages borrow from each other. Java has had type inference for quite some time now (generics and lambdas), just not local variable type inference. The architects’ primary reason for introducing it was to eliminate boilerplate, not to “compete” with JavaScript. You can read the JEP [here](http://openjdk.java.net/jeps/286).
Pretty sure from scratch cant be used if you needed a library 
Lol, Scratch is capitalized so I thought of this https://vignette.wikia.nocookie.net/scratchu8/images/9/92/Scratch_Cat.jpg/revision/latest?cb=20131008202423
My understanding has been that moving forward (JDK 11 and newer), Oracle JDK builds will be built with OpenJDK sources and the binaries will be provided under the new licensing. Is that not correct?
Javascript is not really inspiration for recent changes or future proposals in Java. You can actually read the JEPs of any features and see where it's inspiration comes from. Scala/Clojure, sometimes C# was mentioned, but I don't remember reading javascript. A lot of these features actually have origins in from functional languages like Haskell and ML, which were inspirations for scala. We really have to thank Scala and Clojure for popularizing functional programming. I understand that Kotlin is a neat language, I am sure I'll enjoy programming in it, but scala contains all the features of kotlin and much more but didn't really "disrupt" the industry. The reason some people think it is because, google adopting it as the alternative programming language for android. And as for reason why Google took this decision is probably because Apple introduced Swift programming language for iOS in 2014, and google wanted to do something similar, or they probably scared of the lawsuit from oracle and want to move away from java. But, quoting @lbkulinski "time will only tell".
From my understanding, the codebase has been shared for a long time already, although Oracle JDK has also included some extra, commercial features. That gap should be (more or less) closing with JDK 11. http://www.oracle.com/technetwork/java/javase/eol-135779.html "Oracle is working to make the Oracle JDK and OpenJDK builds from Oracle interchangeable - targeting developers and organizations that do not want commercial support or enterprise management tools." 
Thank you for the clarification! I've only used Ivy on one project (jEdit), so haven't had to deal with any internal repositories.
The only library I would allow us lwjgl, as it's has bindings for opencl
\&gt;When we consume this APIClient, all the investigation we had to do to understand how it manages errors will &gt;not be required, nor any assumptions will need to be made. The API could easily at a later date add a new enum and split an error that would have previously fallen under what are fairly generic enum errors to a new specific one. Sure, the code will compile still and it may just be a trivial one line change, but it's still not a "set it and forget it" type situation. 
Looks great! Does this project dynamically load libs from the classpath using ModuleLayer? Can you point out where that code is?
Very true, if there is a required change in the external behaviour of the contract then we will need to also update the consumer implementation. The way I see this approach as an improvement is that: * As a consumer, I know easily what has changed, since its documented in the code. * This is deliberately introduced, and it's not a change in the underlying dependencies surfacing by surprise * Some languages provide warnings when your switch statements don't cover all enum cases 
If you mean opencl for example, it doesn't mean opencl library is a standard for everything. My projects are built in DL4J which actually have everything we need to achieve plus support for cluster implementation.
&gt; Now Java 10 is even said to be introducing the Var keyword. This in particular is too hard to ignore and almost makes me feel like it is a desperate move to combat the market share the nodejs and npm movement has gained over the last few years. It has nothing to do with JavaScript. Both Scala and Kotlin prove that local type inference works great. Since it's in high demand Java is also adapting it. 
Wow I didn’t even know about JEPs thanks to everyone who has pointed this out. I didn’t overuse the word disrupt I only used it once but I guess the better terminology is “emerging”
Which is similar to how .NET does it.
From my understanding, C# does not use type erasure. Type checks are performed at runtime.
Check out https://adoptopenjdk.net/. You can find binaries for Windows.
Their archives don't appear to have anything older than jdk8u172?
If it's for development use then: [https://developers.redhat.com/products/openjdk/download/](https://developers.redhat.com/products/openjdk/download/) is another option. Click "View Older Downloads" to find 8u121 (the specific build isn't listed).
http://jdk.java.net/10/
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
lolz :D 
Reference types share the implementation while value types get their own implementation. Runtime checking would be a big performance hit. 
On phone apologies for brief response. We will be building older releases in due course. Any particular reason you can’t use the _172?
I think they have issue with archives. They used to have older version :(
As you've already had your question answered, I should point out that you should avoid `Stack` and use one of the `Deque` implementations, like `ArrayDeque`, and unless you know for certain that you need the properties of `LinkedList`, `ArrayList` should be your go-to `List` implementation. `Stack` is from the pre-Collections framework data structures, and is always synchronised, making it slower than the new alternatives. `LinkedList` has terrible performance for random access. However, it can provide better performance for insertions into the middle of the list compared to `ArrayList` 
.NET Core will only be the future to many of us, when we don't need to rewrite working WPF/UWP applications just to run them on other platforms. Xamarin.Forms is not yet there.
Very good job! Looks very interesting.
Nice man :) really like it. Will definitely use something in vision4j
We're trying to debug something, our CI is using that specific version so we're trying to match it in our local dev environments.
Don't plagiarise https://stackoverflow.com/q/35531369/521799
Really wish this was around last year. Had to figure out Jolt instead. similar, but the rule-set was far less powerful.
Very cool thanks!
Oh, wow, not even minimal editing. The "article" even still cites and refers to some unknown question (unknown if you only read the "article"). 
Fair enough - apologies for not being able to help directly this time around!
I looked at that, but having to transform the values with code basically meant we couldn't use it.
A friendly warning: We do not take **plagiarism** easy. Another such attempt will earn you a permanent ban from here. **Removed** for plagiarism
Been using it for years. Started with Ant as a replacement for batch scripts and makefiles (yes this was Java code). Later added Ivy for dependency management and have been happy ever since. People complain so much about the XML syntax but it isn't that big of a deal. Ant is more of a declarative style build tool than a scripted tool like Gradle, and that fits my mental model of a build tool more cleanly.
&gt;At runtime JSLT depends on Jackson, and nothing else. So it's jackson running 9 billion transforms a day.
No, it's the CPU
JSLT adds some code of its own, and that code is what's doing the transforms. Jackson on its own isn't going to run a really complicated transform like solving [the n-queens problem](https://github.com/schibsted/jslt/blob/master/examples/queens.jstl) for you.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yes, we are developers. I don't know about you but I am payed to write code that solves business problems (of my clients). Which means less time I spend on infrastructure (like build) the more time I can spend on business code. So a de facto standard like Maven (with it's convention over configuration) is a huge benefit. It just works and all maven projects look very similar (which makes easy for new joiners to set up and run). On the other hand "custom scripting" needs to be written and then maintained. Which just takes time away from working on the actual task (that the client cares about).
Please, no. I had my fill of XSLT and was glad to be rid of XML in general. Let's not start doing this crap to JSON. If you need to transform JSON, do it in code so anyone can understand it.
You're awesome! Annoying that I had to create the maven deps, but I got GraalJS running on plain Java 10.
This is actually part of the motivation: we did write some transforms in Scala, but they were pretty difficult to read. Another part is that some transforms have to be written by people who don't know Java or Scala.
If Maven and it's plugins don't do what you need them to do, you need to write code to do it anyways, either scripts external to your build or a plugin of your own. Gradle just makes it easier to do, as it's a scripting language, and the custom steps can be coded inline and in a much terser fashion. Or you can make a compiled plugin of you own, in Java if you like, just like Maven. Also Gradle can do nearly anything Maven can do out of the box or via an existing plugin. It likely has plugin behavior that Maven does not, and vice versa, in some instances, but that is to be expected. I'm not sure why you believe that writing an XML file somehow saves you time over write a few lines of Groovy, especially given that it is more verbose and has more ceremony.
That was the same argument for XSLT. There really isn't a market for this. It will be used primarily by programmers as just another level of complexity for people who don't understand the syntax. The examples are already cryptic. I am just waiting for the first real-world uses for this, when people start using it to do object mapping of entire domains.
&gt; do it in code so anyone can understand it How is XSLT not code
You just mixed json path with xslt concepts into 1 library... i'm sure this will end well
We had a very real need for it. Our data pipeline would have been very painful to do without this. And I think there is a wider set of usecases for this. But, sure, it can be abused. Just like anything else.
The XSLT concepts are good, the language is bad. And the language has been "replaced" by XQuery, which has a very cool syntax. 
Hi guys! Sourcerer is a visual profile for software engineers. It's a useful tool to show your developing experience and to learn more about fields you're interested in. Find out more at our GitHub page. I hope you'll like it and will be happy to hear your feedback :)
Why would you not just have the application generate the JSON the way you need instead of this overly complicated path? This seems a little nutso..
There are a couple of older versions on Zulu: https://zulu.org/download/
Thank you. Can you recommend any recent ebook that covers data structures and algorithms? The one I have was published in 2001, others are hard to follow. 
JSLT - is it pronounced "J-slut"? Please say it is.
&gt; we did write some transforms in Scala, but they were pretty difficult to read. Isn't Scala perfect for DSLs? (Like Clojure / LISPs too for example) Besides that, I can write DSLs in every language - yes, you have to know the *domain*, but if you know the language allready, it saves you lots of learning and reduces the tech stack! Some languages might be more fitting in order to make the DSL more pleasent, but imho it's almost always better than a new language. I would agree that *designing* the DSL can be challeging though...
In german I would say it's *Kot* 💩 😈
Uh it's actually the electrons moving *inside* the CPU
damn, i knew I was wrong when I saw the downvotes.
At least I can confirm that this wasn't promoted by Microsoft. 
I like it! That's how GitHub's profile page should look like.
omg
Super clean code!
Thank you so much for sharing this.
Hi siordache! Thank you a lot! We are putting all our efforts for a profile page to be as awesome as possible.
&gt; Isn't Scala perfect for DSLs? We had a few examples of transforms in Scala in the pipeline, and each time the developer had come up with some utilities to make life easier for themselves. But working out exactly what was going on was surprisingly difficult. Of course, part of the issue here is that they hadn't developed a full-fledged DSL because they were doing just 2-3 transforms each, and it didn't seem worth it. Which gave us 3-4 different mini-DSLs. There were team members who wanted to do a DSL for this, but they never managed to develop anything. And I wanted something that would be usable in config files, and for people who didn't know Scala. So this approach won out in the end.
It's code all right. It's Turing-complete, after all.
The Saxon processor actually implements both, and the implementor says they're effectively the same language.
Hi branda22! Wow! Good to hear it, thank you!
How does this differ from [jq](https://stedolan.github.io/jq/)?
Let's take one use case. We want the end-users to be able to easily pick out a very specific subset of frontend tracking events, and then turn those into Amplitude Analytics format. And they don't know Scala, which is what we use. With this they can write: fallback(.deployStage, "pro") == "pro" and ((.provider.component == "schibsted-account" and .object.relatedTo."@type" == "BusinessTransaction") or (.provider.component == "payments")) Doing the same in Scala is non-trivial. Then they can set up a detailed mapping from the tracking data that also caters to the very specific extra tracking properties they include (which we don't really know the details of), and turn that into exactly the shape they want inside Amplitude. All of it by writing basically JSON with some simple queries in it. When they change this stuff they make a PR, and after merge it's live on 20 different AWS EC2 nodes within 5 minutes. If they had to write normal application code I'm not sure we could do this at all. The biggest hurdle would be how to translate their knowledge of their specific data into Java/Scala code.
It's much more than that, as long the file is anywhere on the computer -- even not on classpath -- it can be dynamically loaded to either the classpath or the modulepath. (according to how every individual library was configured). Please note: Most real-world applications cannot currently live in the modulepath alone, as most libraries we depend on are not ready for modulization yet (think split packages). You can see how it works [here](https://github.com/update4j/update4j/blob/master/src/main/java/org/update4j/Configuration.java#L430).
Very good question. It's better at transforms. See the examples. It handles missing data better. With jq you usually get errors when you try to operate on missing data. That means you have to be very careful when doing more complicated operations. Here operating on null just gives you null. Saner handling of lists and such. To check if ".foo.bar" produces one of four different values you have to stuff like .foo.bar | select(. == "a" or . == "b" or ...) in jq, whereas here it's contains(.foo.bar, ["a", "b", "c", "d"]) A lot of the more advanced operations become much less cryptic. Once you get deeper in select/map and stuff like |= jq isn't very friendly any more. Also, the Java implementation of jq (jackson-jq) is pretty slow. The first JSLT version was basically the JSON syntax with embedded jackson-jq queries. When we replaced that with JSLT the new version performed 5-10 times faster.
Your website sucks on mobile, unfortunately. Also: what are the advantages of this over jq?
Sorry about that. The communication team's in charge of the actual site. I'll link to [my first reply to that](https://www.reddit.com/r/java/comments/8torwq/i_developed_a_language_for_json_that_runs_9/e19mf4f/)
It's actually the electromagnetic waves and potentials that cause the electrons to move.
I disagree there isnt a market for this. Most data today at least in modern web apps/services are using json. Integrating between services use json. There is a very real need to be able to not have to hire developers all the time to cook up new code to support new/changes to data. Being able to write a transform that converts/fixes json from one vendor into another vendors format/needs is huge.. and oddly enough is a very real problem that a majority of companies world wide face, especially those trying to offer APIs and/or work with other APIs and figure out how to integrate. 
We are using both, but I still believe XSLT is an abomination compared to XQuery :) What's your opinion about XQuery? It's a major part of the Data pipeline on the project I'm working on, but most developers don't like it for some reason. I'm having a blast with it, as long as my main focus is in Java development. The problem is I don't think there is anything to replace it. It's extremely powerful, fast, and flexible, as long as you don't abuse it.
Couple questions. As I replied elsewhere I can see a use for this library. First.. 9 billion a day? Can you elaborate in terms of how many servers you have deployed to handle this many? I recall years ago working on a similar product that was lucky to do 10 to 15 transactions a minute which was more than just a transform, but similar. I assume you must have this in the cloud and auto scaling and stateless servers, etc.. but even so.. at 9 billion a day, that is 104,000 per second.. and I would assume you are not running consistently at that speed so at some point it is potentially a lot more in a second. I would be very curious as to the server/hardware setup to make this possible? Second.. just curious on this.. but Scala which is a not often sought after language (yes I know it has a following, but latest polls indicate it is less than 1% of languages/deployments.. which points to it being more a niche choice than one sought after by most jobs/organizations). Why not look at writing this in Go, that builds binaries for every platform and supposedly (though not sure on this) is quite a bit faster runtime? I am a big Java guy myself, but as I dig in to Go more, things like this.. e.g. clis, services that do things like transform json (which go is built around btw..e.g. has insanely good json support), seem like it would be a better choice.. as it would run native on platforms and be easier to avoid JVMs and such. I may be wrong on this.. and not saying its a bad choice, but just curious the reasoning behind using Scala vs something like Go or even C? Overall very impressed with what this does. 
Aside from being "JPMS-native", so to speak, what are some pros and cons of this framework relative to getdown?
&gt; First.. 9 billion a day? Last 24 hours it was actually 10 billion, but usually it's closer to 9. &gt; Can you elaborate in terms of how many servers you have deployed to handle this many? The transforms happen in two separate places. One is in our Spark batch job, and there it's not so easy to say how many servers are involved. The other place is in our Kafka streaming pipeline, which over the last 24 hours has run on 6-15 AWS EC2 nodes (I think m4.large). Right now we're running 11. &gt; I would be very curious as to the server/hardware setup to make this possible? It's just bog standard AWS EC2 nodes. Scala applications running with the Kafka Streams library. Inside there is the JSLT library performing the actual transforms. I checked now, it's m5.large. We actually do more than just the transformations, because we're also doing JSLT queries on the data to determine where in the pipeline it should go. But the individual events are not very big. Typically 2500 bytes. &gt; Why not look at writing this in Go, that builds binaries for every platform and supposedly (though not sure on this) is quite a bit faster runtime? The team is familiar with the JVM environment and prefers that, basically. Personally, I see Go as a better for more low-level stuff. It might be that it would perform better, but I'm pretty sure the cost would be lower developer productivity. &gt; services that do things like transform json (which go is built around btw..e.g. has insanely good json support), seem like it would be a better choice I'm pretty sure we'd end up with the same DSL no matter what the implementation language was. Also, our entire stack is JVM-based, which is good for dealing with the AWS APIs. Go libraries for AWS are not nearly as good as the Java ones. And performance on JSON is good enough for our purposes, even before we've started really optimizing this interpreter. I stunt-built a compiler to JVM bytecode, for example, and found that that gave a 15-20% speedup. But that was the naive version. I see ways to do better. So overall this seems more than good enough. Note that JSLT interpreter is Java, not Scala.
&gt; I still believe XSLT is an abomination compared to XQuery :) There's no question that it requires more typing. :) &gt; What's your opinion on XQuery? To be honest, I've never used it. I know a good bit of the syntax and underlying concepts, but I always used XSLT myself. And I haven't used either for many years.
Forgive my naivety. So is the purpose of this to avoid serialization? Instead you query the payload and extract the information you need in that way?
No, the JSON has to be deserialized anyway. But with this method we can avoid cumbersome Java/Scala code.
How about the [previous one](https://www.reddit.com/r/java/comments/8t8t5m/why_is_ab_0_faster_than_a_0_b_0_in_java/)?
The previous one was removed by our Automoderator because OP had insufficient karma. I only saw it after this one. Still, OP is on the watch list and will face consequences should they repeat the offence.
Why are native functions' execution times compared to Go? Isn't C the typical standard comparison for native performance.
It's actually an exchange of virtual photons resulting in an applied electromagnetic force.
If you have reason to work with lots of XML I am quite happy with XSL 2 and 3. XSL 1 is not pleasurable to work with. Xquerry can be a a refreshing change of pace, but XSL grew on me.
How are you validating everything? Missing fields, new fields, ranges, limits, etc? What sort of pipeline did you have that naturally works with JSON?
Not OP, but I work with both Xquery and XSL. I initially found Xquery a nice change of pace, but seem to be enjoying XSL more lately. I will say working with 3.0 of each language to be greatly refreshing. Every so often I will find myself in an environment limited to xsl 1.0 and Its just terrible. 
TreeSet is a Set. It may be implemented internally using a Tree structure, but the functionality it provides is that of a Set - a collection of unique values. Java does not provide a built-in data structure that provides Tree-like functionality.
I think you're overestimating how much can be done with simple transforms. Most APIs are called because something needs to be done with the data. Merely transforming the data is good for which use cases, exactly?
This project is superior in many ways, here's a partial list: * Full flexibility of every single process. * Instead of the framework having full control of the update flow and your application only kicking in after launch, you can create your own lifecycle. you start your (bootstrap) application like any other application, do what ever you want here, call `Configuration::update` if you want to preform an update, or call `Configuration::launch` if you want to launch. * Update the code (you wrote, as above) that does the update logic itself, via delegate mode. * Launch without checking for any update up front, if an update is available you can notify user and call `Configuration::updateTemp` which updates required files to a temp location any finalize them upon next restart. * Follow update progress with special callback services. * Create new version configuration file with a nice builder API, using Java type safety to the maximum. everything ends up in a single file. * New versions are determined via checksum instead of a version file. Fail-safe if files are accidentally deleted. * Pull libraries from anywhere on the web, not only from your base URL. Save libraries anywhere locally, not only appbase location. * Library signature and validation out-of-the-box support. * Operating system specificity support. Only download files required for that operating system. * Refer to system properties in the config file, useful to download files to, say, `user.home`. Or create your own properties and refer to them somewhere else in the same config file. you can also make properties operating system specific; give a certain value to a property based on the operating system. * Side feature: Run your application in single instance mode, passing any newly created instance command line args to the existing running instance.
Neat Charts! They're providing some cool "Fun facts" based on the content and the regularity of your commits.
Thanks. Please pass on to the comm team that code blocks are broken on mobile and the share menu is blocking the article's text and can't be hidden. Makes the article unreadable, which is sad since it looks interesting
Hi gwenaelp! Thank you! :) Let's make more fun!
All good stuff. You may not be wrong about java/jvm, scala, etc. I have just been experiencing a developer productivity increase using Go over Java.. though it is not nearly as robust in terms of 3rd party libraries to use for solving some things. It is growing fast though. I am just impressed with its more simplistic yet powerful language, though a few things are still slow to grok coming from Java. I do like their networking, threading and json capabilities though. Still, that is some seriously impressive amount of data you guys handle. I have never heard of your company, but you must have a vast clientele to deal with that many transactions each day! Good problem to have! And..thank you for sharing/open sourcing it. I have no doubt others will find use of it. 
Wow- XSLT is (and was) extremely useful. I was able to query and generate very useful reports, HTML documents, etc. with it.
The graphic design is really cool. And I'm surprised to find out about more of myself.
Read documentation and practice 
/r/javahelp 
In a nutshell: Obsolete data structures (do not use these) - Hashtree (use HashMap instead, or ConcurrentHashMap if you need thread safety) - Stack (use Deque instead, or a BlockingQueue implementation if you need thread safety) - Vector (use ArrayList instead, or ConcurrentHashMap if you need thread safety) List - stores elements in the order you add them - duplicates can be stored - nulls can be stored ArrayList (popular) - slow write, fast read LinkedList - fast write, slow read Set - stores unique elements (duplicates discarded) - order of elements not preserved - nulls cannot be stored HashSet (popular) - fast TreeSet - used when elements need to be sorted Map - store entries by key-value pairs HashMap - fast TreeMap - used when entries need to be sorted (by key)
Hi wanghuaili! Thanks! :) 
Would you mind posting one of your transforms here so we could all see it's usefulness? I worked a lot with XSLT and XSL. I know the nightmare. I just want people to be able to compare your description with the actual XSLT you're describing.
GraalVM could be a better alternative for reaching Go speeds with JVM code, that using Go. It might not be production ready, though. 
Thank you so so much! This narrows it down perfectly. I’ll save this for later on
It really depends on what you are doing though. If you are analyzing megabytes or gigabytes of XML data, XQuery is the obvious choice. The indexing the XQuery processors are offering is pretty good, XPath is fast and fun to work with most of the times, and they offer extensions like CSV/JSON modules, HTTP modules, Crypto modules, etc. For transformations like XML -&gt; HTML or XML to SQL or whatever, XSLT is more suitable. Every time someone tells me he hates XQuery I ask him what is the alternative, and I never got a decent answer so far. And it looks like it can also be [scalable](https://asterix.ics.uci.edu/pub/ScalableXQueryProcessor.pdf) 
why would an ArrayList be slow to write? Aren't they using proper Array extension like in C++'s std::vector?
What tools were you using for profiling, metrics, and debugging? I rewrote a rather large golang app last year to java because of a massive lack of tools. A Microsoft IDE was the best tool in that area I could find. It was rather frustrating too as the go app had been quite optimized and I had to go through the pain of optimizing the java app in production. But I couldn't easily debug in real-time the go app, couldn't get heap/thread dumps or similar, step through debugging was hard/impossible.
Well... no. I'm a consultant and the last time I think I had to use it was 2010. I'm not sure what you're fishing for though. If you're working with large XML Data sets then Xpath syntax provides an elegant way to drill down to the data you want, while using XSLT to render it into HTML reports, for example worked really well for me. Were there headaches involved? Sure! But there would have been similar frustrations trying to do the same thing with, say, a Java or C# client.
We're not validating enough, to be honest. We wrote a plug-in function called "validate()" that you can use to validate an object against a JSON Schema, but people don't really use it. Missing fields turn into null, and the language handles that naturally. New fields are easy: use the `* : .` matcher to just pass them on if that's what you want. Ranges and limits are easy: you can do .x.y &gt; 25 and (.x.y - .z) &lt; 2 etc etc. The pipeline receives JSON objects from web trackers and backend systems, so the whole pipeline is one massive stream of JSON objects. Which means this language is a very natural fit. There's a [talk with more detail](https://vimeo.com/181805765) if you're interested.
In our experience so far: * cleanups that improve data quality, * anonymization transforms for GDPR compliance, * converting between formats (internal tracker to Amplitude Analytics) for example. The language may look simple, but it's Turing-complete, so you can do surprisingly powerful stuff with it.
&gt; I have just been experiencing a developer productivity increase using Go over Java That might mean that we're not developing the same kinds of software. I'm sure Go has its uses, but I'm not really tempted to use it for our stuff. &gt; I have never heard of your company, but you must have a vast clientele to deal with that many transactions each day! It's kind of a strange company. They started as a media house, then turned the classified ads sections of their newspapers into online markets (a la ebay) and that kind of took off. I think we/they (I feel schizophrenic now) have operations in at least 30 countries now. But it's the individual national brands people know, not the company behind it. Thanks! :)
Yeah, I see that. I'll take it up with them tomorrow. Thanks for letting us know!
I've tried graal with java 10 for parsing json, it was slower up to 2 times on some test
9kkk is not that much, I wrote a monitoring service for my previous company that handles 1.5kkk requests per day on one aws c4.large instance
&gt; we did write some transforms in Scala, but they were pretty difficult to read. If only there were some language which used JSON as its native object notation.
Never hurts to read a comprehensive book, even if there's stuff in there you already understand from other languages. I used the [Core Java](https://www.amazon.com/Core-Java-I-Fundamentals-10th/dp/0134177304) book to jump from Python to Java a couple years back. Was a perfect and super-thorough introduction!
There was actually another team internally that did that. They used one of the JavaScript interpreters and wrote the transforms in that, and wrapped the whole thing with some YAML format that I didn't quite understand the point of. But you get some of the same problems as with jq: the handling of missing/malformed data is impractical for this use case. And things like matching objects, transforming arrays, rewriting objects etc aren't as easy to do. But, yes, it might have worked.
Go and NodeJS are commonly used in serverless because of startup time and container size. The author is saying graalvm makes Java competive
ArrayList structure maintains an internal Java array of elements, it resizes the array on inserts if the capacity is exceeded. If inserting in the middle it utilizes the **System.arraycopy** function to move the data, so the writes shouldn't be too slow. Fetching by index is fast, it is a standard **elementData[i]** request, however the **contains** function and **indexOf** function for a given instance of an object are linear traversals of the array in a for loop.
An alternative to `ConcurrentHashMap` is wrapping a non-thread-safe collection in `Collections.synchronized*()`. This is particular true because there's no `ConcurrentList` implementation (because that would basically be `Vector`). There is a `CopyOnWriteArrayList` which is thread-safe, but not ideal if there's a lot of write operations.
Definitely. I also would not say I hate xquery. I think it is fair to say that each have their place. I am really pleased with the developments of both languages in the last 5 years. XSL 3 and Xquery 3.1 have really brought a lot of features that have left me excited and more productive. 
Can you post an example of one of these? My argument is not that it can't be done, but that for such use cases, it would be easier to implement and maintain as plain code. Arguments about this being code aside, because of course it is.
Do you already know core java? If so jump into spring boot with 2 feet. https://spring.io/guides/tutorials/react-and-spring-data-rest/ Spring is one of those things you can have explained 100 times and not "get" until you use it. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/8tuhfj/whats_your_favorite_json_object_mapper/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Uhm...mods pls? Definitely not what I'd call "code help" so much as "code discussion"
I’ve only ever done Java in my introduction to computer science exactly 10 years ago. So I need to relearn java. All the cool new stuff, streams, lambdas. 
Wait what the fuck &gt; "If inserting in the middle it utilizes the System.arraycopy function " So if you're writing to the middle of the list it's effectively doing exactly what CopyOnWriteArrayList does? 
I'd probably just read up on tutorials for interfaces/abstracts/etc as a refresher first then. Then I'd grab a java 8 specific book and go to town. The new stuff is really, really useful. That being said streams aren't as fast as most Collection implementations, so I only use it for processing-logic-heavy tasks. Lambdas and functional interfaces though...they basically change the language a shitload. They are amazing. I'd start with learning and using Consumer, Supplier, Function, and Predicate (a specialized Function extension). Then the rest of the lambda stuff makes sense. Personally I had used them very little in C# and found them extremely confusing. Once I wrapped my head around those classes I was like "oh okay got it" 
No, it shifts all elements from the insert index until the end of the list one index towards the end. It does this on top of the same array which makes it unsafe to access concurrently. CopyOnWriteArrayList always creates a new backing array for each modification so that concurrent accesses won't observe the backing array halfway through shifting element positions.
It doesn’t have to be cumbersome
File extension for the example is jstl. Typo?
Yeah, i understand that contains and indexOf are slow, but if one needs them often, one can sort the array and have o(log n) access to it. Also, my main question was/is, how much Java increases the internal array? Does Java guarantee an amortized Cost of o(1) for inserting at the end like C++ does? 
I was really intrigued by an inspection called \[Suspicious Name Combination\]([http://breandan.net/2014/04/20/intellij-inspections/](http://breandan.net/2014/04/20/intellij-inspections/)) a while ago. It's pretty neat.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Like code, xslt can be a nightmare, I've seen a wide array of well put together transformations meant to work in layers, and sloppy do it all. However, I'm not aware of a better alternative that doesn't impose serialization or piece mealed xpath matching, just as prone to messs. 
&gt; transforms every day at Schibsted. Hey now, no need for cursing... oh, sorry, that's the companies name. /s 
I don't know of this is that, but I repeatedly use "iter" after typing a variable (which is a collection) me having idea create the iteration code for me. 
How would you rewrite jq's pipe expressions, i.e. transform1 | transform2. After reading the GitHub tutorial this wasn't clear to me
Well, not really an inspection per se but makes it a lot easier to read ([R](https://plugins.jetbrains.com/plugin/10080-rainbow-brackets)ainbow Brackets)\[[https://plugins.jetbrains.com/plugin/10080-rainbow-brackets](https://plugins.jetbrains.com/plugin/10080-rainbow-brackets)\]
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://plugins.jetbrains.com/plugin/10080-rainbow-brackets) - Previous text "R" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
Ok, here's the one that cleans up the tracking data to even out differences between versions of the tracker (three platforms, many old versions, plus some sites have custom trackers). In my mind one of the major benefits of writing it this way is that you can look at the file and see the structure of the output immediately. { "actor" : { // first find the user ID value let userid = if ( test(.actor."@id", "^(sd|u)rn:[^:]+:(user|person):.*") ) .actor."@id" else .actor."spt:userId" let good_user_id = if ( test($userid, "^(u|sd)rn:[^:]+:user:null") ) null // user modeling complains about these fake IDs else if ( test($userid, "(u|sd)rn:[^:]+:(person|user|account):.*") ) // :person: -&gt; :user: (and urn: -&gt; sdrn:) let parts = capture($userid, "(u|sd)rn:(?&lt;site&gt;[^:]+):(person|user|account):(?&lt;id&gt;.*)") let site = if ($parts.site == "spid.se") "schibsted.com" else if ($parts.site == "fr.leboncoin") "leboncoin.fr" else if ($parts.site == "leboncoin") "leboncoin.fr" else $parts.site if ( $parts.id ) // If we have an id, split the ID by : and pick the last element ("sdrn:" + $site + ":user:" + split($parts.id, ":")[-1]) "@id" : $good_user_id, "spt:userId" : $good_user_id, * - "@type", "spt:acceptLanguage", "spt:screenSize", "spt:environmentId", "spt:userAgent", "spt:viewportSize", "spt:userId" : . }, "location" : { "latitude" : number( fallback(.location.latitude, .latitude), null), "longitude" : number( fallback(.location.longitude, .longitude), null), "accuracy" : number(.location.accuracy, null), * : . }, // Application used by old old trackers, blowing up the schema "application": null, "device" : { // find the environment ID let envid = if ( .device.environmentId ) .device.environmentId else if ( .actor."spt:environmentId" ) ( .actor."spt:environmentId" ) else if ( .device."@id" ) ( .device."@id" ) else if ( test(.actor."@id", "^sdrn:[^:]+:environment:") ) .actor."@id" // transform it into correct syntax "environmentId" : if ( test($envid, "^(sd|u)rn:[^:]+:environment:") ) ( if ( not(test($envid, "^(sd|u)rn:[^:]+:environment:null")) ) // normalize the prefix let parts = capture($envid, "(u|sd)rn:[^:]+:environment:(?&lt;id&gt;.*)") "sdrn:schibsted:environment:" + $parts.id ) else if ($envid) // add prefix if environmentid doesn't have it "sdrn:schibsted:environment:" + $envid, "acceptLanguage" : fallback(.device.acceptLanguage, .actor."spt:acceptLanguage" ), "screenSize" : fallback( .device.screenSize, .actor."spt:screenSize" ), "userAgent" : fallback( .device.userAgent , .actor."spt:userAgent" ), "viewportSize" : fallback( .device.viewportSize, .actor."spt:viewportSize"), "networkConnectivity" : if (.device.networkConnectivity) { // there are two cases here. one is where 'networkConnectivity' // is just an array. the other is where the array is inside the // 'networks' field inside 'networkConnectivity'. let networks = if ( is-array( .device.networkConnectivity ) ) .device.networkConnectivity else .device.networkConnectivity.networks "networks" : [for ( $networks ) { "networkType" : lowercase( .networkType ), "networkState" : lowercase( .networkState ), * - "@type" : . }], "@type" : if (is-object(.device.networkConnectivity)) .device.networkConnectivity."@type" else "NetworkConnectivity" // we can't use the * matcher here, because networkConnectivity // can be an array. so if we need that we'll have to split on // the if higher up, and try to reuse the 'networks' logic // somehow }, "additionalEnvironmentIds" : [for ( .device.additionalEnvironmentIds ) if ( starts-with(., "sdrn:") ) . else "sdrn:schibsted:environment:" + . ], * - "@id", platformType : . }, "object" : if ( is-object(.object) ) { let objId = .object."@id" "@id" : if ( test($objId, "^urn:.*:.*:.*")) // Standardize the URN format let urn = if ( test($objId, "^urn.spt:app:urn:schibsted:client:.*")) "urn:schibsted:application:" + (capture($objId, "^urn.spt:app:urn:schibsted:client:(?&lt;id&gt;.*)") .id) else $objId // store the namespace part in a temporary variable let tmpNs = split($urn, ":")[1] // get namespace let namespace = if ( test($tmpNs, "^.*\\.letsdeal\\..*")) // special treatment for letsdeal "letsdeal" + capture($tmpNs, "^.*\\.letsdeal\\.(?&lt;lang&gt;.*)") .lang else if ( test($tmpNs, "^.*\\..*\\..*")) // if namespace is three parts(A.B.C), pick the middle one (B) capture($tmpNs, "^.*\\.(?&lt;ns&gt;.*)\\..*") .ns else if ( test($tmpNs, "^.*\\..*")) // if namespace is two parts(A.B), pick the first one (A) capture($tmpNs, "^(?&lt;ns&gt;.*)\\..*") .ns else // if it's one part, keep that part $tmpNs // get resourceType let tmpResourceType = fallback(.object."@type", split($urn, ":")[2]) // convert classifiedAd to classified let resourceType = if ( lowercase($tmpResourceType) == "classifiedad" ) "classified" else $tmpResourceType // resource id is what's left of the URN let resourceId = join(split($urn, ":")[3 : ], ":") // finally combine the parts "sdrn:" + $namespace + ":" + $resourceType + ":" + $resourceId else $objId, "name" : fallback(.object.name, .object.displayName ), * - "@id", displayName : . } else .object, // ===== MISC ================================================== // must be an integer, is sometimes float "scrollPosition" : round(number(.scrollPosition, null)), // Custom fields has nothing to do here "spt:custom": null, * - "latitude", "longitude" : . }
Yes. It used to be jstl, but we changed it to not clash with Oracle's trademark on the JSP tag library.
At the moment that's not supported, but on the other hand I don't think you normally need that. Instead of doing `.foo.bar | function()` you would do `function(.foo.bar)`, which to my mind is much more readable. I'm still on the fence on whether to support the `|` operator. It would be dead easy to do, but I worry about it making things less readable.
I think that's fair. Many people in Schibsted say we're not doing Big Data, but really Medium Data.
Documentation is a bit dry for some people. Especially if you are talking about starting to learn something. Tutorials are worth looking into, though.
No you werent wrong. It was your parents who gave birth to you (shit this sounded really mean)
Bots getting more and more useless by the day.
Good bot
There is Java 9 for Programmers by Paul/Harvey Deitel and Core Java SE 9 for the Impatient by Cay S. Horstmann.
The only user-defined template I have is `log`: private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger($CLASS$.class); So very useful, because I'm too lazy/efficient/stupid to remember the right combination. Remember to use "Shorten FQ names" so it adds the imports too.
oh yes. sorry, but can I submit these kinds of posts by also showing the original page source. of stack over flow or any other.
No, because you cannot just take an article from somewhere and publish it on your site. This is still plagiarism. Just copying an article from somewhere is not your intellectual work and thus not your intellectual property so you don't have the right to even publish it on your site. You can, however link directly to the original source in the post here without your site.
That's a built in live template. They have a lot of them, which you can explore in the Settings -&gt; Editor -&gt; Live Templates.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The way IJ throws up parameter labels on variables that aren't named the same as the parameters is great too.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Also semantic highlighting [https://blog.jetbrains.com/pycharm/2017/01/make-sense-of-your-variables-at-a-glance-with-semantic-highlighting/](https://blog.jetbrains.com/pycharm/2017/01/make-sense-of-your-variables-at-a-glance-with-semantic-highlighting/) is a must 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
JaveSE: [https://docs.oracle.com/javase/8/docs/](https://docs.oracle.com/javase/8/docs/) Effective Java (3rd Edition): [https://www.amazon.com/Effective-Java-3rd-Joshua-Bloch/dp/0134685997/ref=sr\_1\_1?s=books&amp;ie=UTF8&amp;qid=1530008798&amp;sr=1-1&amp;keywords=java+effective](https://www.amazon.com/Effective-Java-3rd-Joshua-Bloch/dp/0134685997/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1530008798&amp;sr=1-1&amp;keywords=java+effective) Spring Guides: [https://spring.io/guides](https://spring.io/guides) Spring in Action: [https://www.manning.com/books/spring-in-action-fifth-edition](https://www.manning.com/books/spring-in-action-fifth-edition) Spring Boot in Action: [https://www.manning.com/books/spring-boot-in-action](https://www.manning.com/books/spring-boot-in-action) Spring Framework Reference : [https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/](https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/) Spring Boot Reference: [https://docs.spring.io/spring-boot/docs/2.0.3.RELEASE/reference/htmlsingle/](https://docs.spring.io/spring-boot/docs/2.0.3.RELEASE/reference/htmlsingle/)
The source itself is available, so I'm looking directly at the 1.8 code. Under the most common scenario of add a single element, if the array is out of slots it increases the array size by 1.5. int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1); If a request is made for a minimum capacity and that minimum capacity value is larger than the above calculated new capacity, the new size is set to the minimum capacity. if( newCapacity - minCapacity &lt; 0) newCapacity = minCapacity. Then it does elementData = Arrays.copyOf(elementData, newCapacity) which internally uses **Array.newInstance** function to create the new array then **System.arraycopy** to copy the elements. So inserting at the end is a simple elementData[size++] = element; but the growth of the array results in creating a new array, copying the contents of the old to the new. Java doesn't have the concept of realloc for its arrays.
&gt; Do you have a reference for that? Not the OP but maybe they are referencing this: https://books.sonatype.com/mvnref-book/reference/pom-relationships-sect-pom-best-practice.html
I highly rate udemy.com if you don't mind spending a small fee (usually about 10$ or 10€) - choose a course length, check it has a high rating, and watch the first couple of free lectures to ensure you understand the presenter. Definitely worth the money in my opinion.
Everything old is new again. Waiting for GraphQLLT here.
Thank you. so it is similiar to C++ as in the array grows exponential, and thus overall one can assume constant time for inserting at the end.
Uhh I'd use a scheduler and a queue and just not do so many inserts so fast
Interesting. How can the queue/subscriber slow down it self?
You put tasks in the queue, and then have a scheduler run and remove tasks on the top of the queue. Instead of running them all at once or running 10000 inserts a second you run x amount per interval. If the input is so much that you go out of memory from that and your db can't handle it... time to upgrade. Also if you're not using batching that would help a lot. Without seeing code or more specifics it's hard to say 
Message Queue will help you. Start with a listener in one thread. Send an object to the queue and listener will save it eventually.
@slf4j in Lombok 
The only thing I do not like about this is the boastful language in the docs. "Newest and most powerful", "this framework is by far superior to legacy frameworks" and so on. Nothing bad about having confidence in your work, but some of the phrases sound unprofessional and overconfident to me. Perhaps it's just me, I don't know. 
How does the message queue deal with that issue? Wont it run into the same limit?
Java 7 😒
The message queue will, well, queue the messages. So, main system doesn’t have to slow down its own processing, and DB layer can acquire messages as much as it can handle.
Yeah and still a ton of Java 8 out there. 
Neat but I'm not sure what I'd use it for. 
If the system has even max load, and the database cannot keep up, then the queue will just get larger and larger. If your writes are bursty in format, then a queue can help even out the load to use capacity that is unused in a down period. A queue can also help by grouping inserts into batch requests, which are usually more effective. 
Cool. Every SQL command line tool should integrate this to plot results
Java 8 isn't too bad. I've migrated a lot of projects from java 6 to 8 and ant to maven. Ant to maven is a nightmare.
I just discovered the Structural Search and Replace (Inspection) feature and it is amazing. Both more powerful and easier to use than regex and I love that it's an inspection so I can clean up as I go if I don't want do a single massive change. The two I've set up wouldn't be interesting to the general public, but it's just awesome that what's normally a monotonous bit of text manipulation becomes a single key combo.
Depends on the technology you're using and your requirements. If your database can't handle the flow of events *and you need to handle every event*, then you need a better database that can. If that's your requirement, there's no way around this. Otherwise your queue will continuously grow and get further behind "real time". If you can lose some events, then (assuming no special libraries) you could establish a thread pool of subscribers, each of which would take the top item from the queue and process it. If X inserts take longer than Y milliseconds, reduce the thread pool size by one to a minimum size. Meanwhile, producers only insert to the queue if its current size is below a certain maximum. There are, of course, libraries and programming models that can do all of this for you, but it's possible without them, too.
Ant to Gradle makes more sense
Without context that seems short sighted. Gradle seems to have a steeper learning curve than maven. Being at a small to mid sized company the quality of software folks is not there. It was easier to get them on maven. That's another rant, there are a lot of java engineers that lack basic skills.
I work at a very large company. Due to all of the red tape and InfoSec requirements and whatnot, the only force powerful enough to cut through it all is when something we're using finally loses support. So we end up being forced to develop with older technologies like Java 7 for a really long time.
Damn, this brings back the flashback of the nightmare I had in a job in 2004. I worked for a web framework in Java and the templating engine was XSLT. I had no idea why JSP wasn't even considered as it was a standard. The XSLT template engine was basically served in a servlet container (tomcat) so it was even weird why JSP was not chosen. My speculation could be that there was a rockstar UI SDE there. He developed this stuff and the only go-to person to solve any issue related to the XSLT framework. Needless to say, it was difficult to hire and bring new SDEs up to speed in the company. No more XSLT!
Actually having a rough time with java and gradle. I'm sort of on a time budget and had to throw out a small desktop tool. Havent done desktop in a while so went with fx2 (had done lots of swing in the past) and getting the project up was a PITA. I also wasn't able to get it to debug honestly. I keep spending an hour or two here or there trying to do it but realized I had to get back to writing the app. My crash stack traces come out after the app terminates if I run it through the ide. Tried to add the debug daemon listener but couldn't get it going. Was sort of pissed off I'm using an IDE (intellij) and it doesn't debug gradle right out of the box but eh. Overall though I've found maven super confusing to use in the past. It might have been the documentation but when I swapped to maven any stuff I found on using it was written like it was made for the people that love giving confusing progress reports to sound awesome at their job. Having moved on to gradle I found all the docs the way it was set up just easier to understand, not sure why. But again shame it feels kind of awkward to do an FX app with gradle.
Why would anyone not be on java8? Without an LTS it’s just extra work for no reason
If nothing else, the new "deprecate Java versions not from this decade" policy should reduce that sort of nonsense.
Considering jdk 9 is out of support already, it's no surprise that companies will skip it along with 10. Jdk 11 will be the next LTS version and I imagine it will have a much bigger uptake
I had forgot about this, thank you so much!
VS Code had a higher share of reported users than Netbeans. Huh. I mean, I've coded in Java in VS Code and it's not that bad if you want to trade functionality for minimalism and speed, but wow
That's a wishful thinking policy. My company's priorities are to satisfy the requirements of regulations and other giant companies that use us. They don't care to get rid of tech just because it's old. Now, if it had a security vulnerability that was only fixed by moving to a new tech then it would happen instantly. But otherwise, if it's still supported, it's a "nice to have" to upgrade.
In simple cases I see that but what if I want to perform two successive for loops that can't be intertwined or are more readable as separate loops? How to handle that? In jq the pipe is also needed when you define a variable (AFAICS). How's that with JSLT?
Bulk Copy. Assemble your inserts into batches of at least 1,000 records. (And as high as a million records). Then use your database's bulk copy capability to insert the batch as one big block instead of single records. For something like SQL Server, I can insert 10,000 rows using bulk copy faster than I can insert 100 rows one at a time using INSERT statements.
https://www.reddit.com/r/java/comments/8tzasg/db_is_exhausted_patterns_to_mitigate_backpreassure/e1btt7k/ The message queue is an excellent way to assemble the batches for bulk insert.
Have a look at Reactive Streams, now part of Java 9 Flow. https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.html http://www.reactive-streams.org https://projectreactor.io 
Yeah but my understanding was that (outside of LTS) everything below Java 10 will no longer get updates in a year or two?
In theory my company likes to stay current on technologies, but we're still on Java 8 and aren't looking to move any time soon. We've done some quick smoke tests; Java 9+ breaks too much stuff, at least in our environment, and doesn't have any improvements that make it worth the cost of fixing the problems. Example: We have Spring Boot 1.x services. Java 9+ requires Spring Boot 2.x. Spring Boot 2.x's Gradle plugin requires a newer Gradle version than we're using. But the newer Gradle version isn't compatible with another Gradle plugin we're also using. We could untangle all of that, but at the end of the day, we would have spent a bunch of developer time on it rather than on customer features, and our services wouldn't work any better than they do now. We plan to revisit this each time there's a new Java release, though. Once there's one that has improvements that matter to us, it may be worth the cost to get everything in shape.
Use a queue and batch inserts (if you're using Hibernate or equiv). Save a batch every n records or m milliseconds.
You shouldn't have taught me this.
Wow! Cool.
Great idea, definitely stealing this. But LOGGER would be better imo
My work uses openjdk on the servers and it has support until 2020 I think. So, late 2019 I'll probably be assigned a bunch of migration work to move older apps from 7 to a newer one.
This has nothing to do with Java.
8% don’t know if they’re using embedded containers or not. Yeah, I know a few of those guys.
It looks like in your [submission](https://www.reddit.com/r/java/comments/8u2ii1/how_to_eliminate_extraneous_output_from_gradle/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Not to be _that guy_, but you're doing something wrong. JavaFX is just as easy as any other Java application - just use the `application` plugin, set the main class name, and you're done. It's weird that the stack traces only get printed after the app closes; are you doing any logging or intercepting exceptions?
It's not horrible. Definitely not at all like XSLT. It's so close to being code, why not just use plain code? I'm still not seeing an advantage to this approach to transforming, which looks more like a DSL, really (not a bad thing, but often when I use DSLs I ask myself why this code isn't just a language library). Some things I do find a bit confusing. For example, why are you setting spt:userId explicitly and then implicitly through *? "spt:userId" : $good_user_id, * - "@type", "spt:acceptLanguage", "spt:screenSize", "spt:environmentId", "spt:userAgent", "spt:viewportSize", "spt:userId" : . 
I don't think you are being that guy at all. I probably am doing something wrong. It took me a while to find that javaFX plugin to begin with. Have been writing android the past few years so googled what to use. Swing out, fx2 in. "Dont even write java desktop write electron" says the web. Figure I will use gradle since we use gradle on our android stuff. Didn't realize I needed the fx plugin, so it took me a little bit to find that and use the sample starter file to get am empty app compiling. There were a few stackoverflow posts that had similar issues, they all seemed to solve it by adding a command line args in gradle for java to set a port for remote debugging, but I couldn't get it to work, haven't used the remote debugger before. It's a smaller program so Im fine to just debug with prints and code reading so I had trouble justifying to myself spending more than a few hours on it. But I didn't really go crazy, just have intellij, gradle plugin based on the sample .gradle file and running the gradletask out of the ide to build. 
Well, I've always just used the `application` plugin to be able to run the app from the command line or IDE, and use shadow to build a fatjar for distribution. No need for a special JavaFX plugin unless you want to do JNLP or native installers/bundled JREs. You should be able to debug it just by creating a "run" configuration in IntelliJ to call the `run` task, then run that configuration in debug.
If you're doing XML-&gt;XML or XML-&gt;HTML then XSLT makes a lot of sense, but if you're going Java objects-&gt;HTML then I'd agree it makes no sense. JSP would be vastly better for that.
Also the underlying ecosystem has had (and still has) a lot of problems migrating to Java 9, so in many cases it's not worth the risk of running into problems with a 3rd party library or build tool.
I guess the question is why they are two successive loops. You mean you want to loop first to do one transform, then again to do another? You could always do let x = [for (.find.array) transform-it(.)] [for ($x) make-other-change(.)] or even [for ( [for (.find.array) transform-it(.)] ) make-other-change(.)] but it's not really obvious why you wouldn't just go [[for (.find.array) make-other-change(transform-it(.))] in the first place. But maybe there's something I'm not seeing. It could be there is a set of use-cases where the `|` would actually be superior. I want to see those before I do anything about it, though. 
&gt; It's so close to being code, why not just use plain code? The closeness is deceptive, though. There's a lot of "magic" hidden in each `.foo` and `[ : -1]`. And having it be a language like this means you can embed it in config in a way that doesn't really work with code. &gt; For example, why are you setting spt:userId explicitly and then implicitly through *? I don't know. Someone writing the transform did something weird there. Lots of people maintain these, so sometimes one part gets out of sync with another part. I think a real strength of this approach is that it's hard to turn this into an unreadable mess. You don't really have much rope to hang yourself with.
Minimalism is for my wardrobe and furniture, not my development environment. And if my IDE was that slow it's probably just time to get a new laptop.
The link is just to a straight PDF of what appears to be a published book. Did the author of the book actually release it for free? Or is this illegally hosted content?
I wonder how those 10&amp;#37; build their apps? 
PacktPub offers some of their selected ebooks for free from time to time. This guy whose GitHub I found collected these books and shared them. I guess he wouldn’t have shared them under his own GitHub account, had these books been illegally captured. Nevertheless, you cannot get free ebooks from PackPub in PDF format any more, you can only read online. 
Direct link to a PDF of dubious origins.
Yeah. Running my build.
No binaries allowed in SCM.
They don't, really. I found out after I wrote this post that both Buck and Bazel have problems dealing with recursive dependencies, generating poms with dependencies, and a variety of other issues. Some people use Ivy as a pre-build to Buck to handle dependencies. The Gerrit project just hardcoded their POMs when they publish, so now they have to track their dependencies in 2 places.
The gradle wrapper *is* only a few KB.
Basically... all of them other than Ivy and Ant.
Oh yeah. I missed that it just does a netinstall. Our CI servers are isolated so I'd have to host the gradle versions somewhere, but that could help a lot.
hopes and dreams (or make)
How many transforms/second are you getting on a single core?
**tl;dr:** Advertisement article for security firm with a trivial SQL injection example straight from a textbook. Core message: Wrapping crappy code in a microservice exposes the crappy code to the web. Danger! Hire us!
I've never heard of Buck or Gerrit, so i defer to you in context to them. I know of Bazel but never figured out a good reason to try it. Gradle, Ant/Ivy, Maven, SBT, Lien, Buildr, and various others ive run into all deal(t) with dependencies adequately. Some don't use the m2 directory structure at all, others will if you ask them to. Though im not sure why it matters other than if you are using a tool that requires it downstream, like I think Eclipse used to -- but who uses Eclipse anymore.. 
I got lost. Can anyone help me understand what this is about?
I am a .NET developer who worked with Java / eclipselink during 2015/2016. I had a fairly challenging time building a library stack. With .NET, Microsoft provides the default stack and it just kind of works. You add stuff to it. A java stack is more complex and if you want to use certain libraries, you may have to downgrade. And that is where the challenges start. The stack can be brittle and send you down the rabbit hole researching for a day. Eclipse and Eclipselink were extremely buggy. I had to click through every tree of my database in Eclipse in order to see objects created when refreshing models from the db! Haha. I missed having partial classes in .NET which are extremely handy for working with scaffolded stuff (which Eclipse can do). In .NET, you can regenerate your model classes from the DB and still have your additional annotations unimpeded in separate files. Not so with java. I can't remember how I got around that - maybe using a layer of inheritance. I'm planning to do a new project using java / spring and I am dreading the stack building. Maven was very buggy at the time as well and Nuget just works. I am using java for server licensing reasons this time and because it is a popular tech with a solid community, performs well and provides an eerily similar experience to c#. Annotations, lambdas - it is familiar for a .NET developer. Eclipse has some nice features but in no way competes with Visual Studio. At least not a couple years ago. I am hoping everything has been beaten into shape a little more since the last time I worked in java. Good luck!
OK, I understand your point. My point was more related to complex ant scripts that need to be ported over. You could run into pom.xml hell. With Gradle this is easier. 
I was super surprised to see that also. I just started learning Java, and got used to VS Code using other languages, and figured I would eventually have to switch to Eclipse or something with Java, but so far, as a beginner it works just fine.
in my experience the issue is introducing change moreso than regulations. I've been in your shoes many times, trust me.... (still am)
VS Code has got a lot of really good reviews. Netbeans is ... okay but still kinda like Eclipse (in the bad way). Eclipse is probably more powerful than both, but the UX isn't always the greatest...
He is discussing probable future improvements to the constant pool of a Java classfile, mainly the inclusion of a immutable, zero copy byte sequence that can be loaded as a constant For example, at some point you could have an image or json embedded into a class at compile time, without needing to load resources at runtime
JetBrains is the company behind IntelliJ IDEA, which makes this particular statistics a bit weird. Its a bit as if microsoft would ask their users whether they are using windows or linux. 
It's got enough plugins to be real nice. Eventually you'll want to do something a tad more complicated than 'Find Usages' and using the terminal to deploy new builds to a server, but so far it's been really impressive
[removed]
Not related to the comment but intellij has an inspection to convert anonymous classes to lambdas which is very useful. Only problem I notice is that it automatically adds a type cast before the lambda making it look very ugly. I always end up removing it manually. Do you know if there's a way to edit that quick fix template so that it doesn't add the cast?
Spring Framework is one of the most popular Java frameworks and makes it really easy to create real-world. Below are three best practices every java programmer should learn and apply while writing the code - 1. Use of Template Design Patterns 2. Coding for Interfaces 3. Favor Unchecked Exceptions Over Checked Exceptions If you know more practices apart from this, please do share and spread the knowledge. Thank you
struts, wow.
It doesn't really matter how you implement it, A message queue, a scheduler, etc. You need higher write performance at your DB. a) are all these writes part of transactions ? I'm going to guess the answer here is no since you say it can handle latency. b) does the table you are updating/insert have indices ? must it have them ? ( there is a read/write tradeoff here ). c) how critical is the data? if the writing process dies and some data is lost, how painful is this to the overall system ? But basically you need to move to bulk inserts. most likely what is killing your write performance is not writing a row, but updating the index(es). If you insert multiple rows at once, the index updates are amortized over more inserts, and so the next cost is lower.
LOL we're working on "upgrading" to Java 7. FML.
Obviously, that depends massively on the transform. The n-queens solution takes about 1.5 seconds with an 8x8 board. The cleanup transform runs about 150,000 times per second on one core on my laptop. I've done some optimizations in the language to make things fast, and there's also an optimizer that walks through the expression tree and does some simple optimizations on the code. I'm planning to add a lot more of those, and also to compile to Java bytecode. So better performance will be coming.
I'm a bit surprised I'm not the only one using undertow...
VS codeis used a lot with ng, so it's no surprise when java+ng projects decide to use a single IDE. 
Worked at a bank where security was tight as hell, they started java 8 migration just before I left about 3 years ago. Someone is bullshitting in your company. 
"37% of Java developers use JavaEE 8" yeah, sure
*Of the survey respondents, which might not be representative of the entire Java community. Also I wonder whether someone who just uses one aspect such as CDI or JPA would include themselves.
Struts 1 checking in... At least we have Java 8
&gt; Thanks for your time, and oh, if we get over 2,000 responses we'll donate $1000 Devoxx4Kids! When we pass 3,000 responses we'll top that up to $2,000! So now there really isn't an excuse whatsoever :o)
Nope, they'll just pay the 25 USD/m/cpu to keep using Java 11 until 2025. 
We are still on Grails 2.53, you don’t want o know why. Needless to say I’ve moved to Node, Express, and Typescript at work.
The main pain points are trying to bend Maven to your ant build rather than just accepting the Maven way, and finding plugins to do anything funky that your ant build was doing, but worst case is using the exec or ant plugins.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I got about 8 questions in and needed to type a custom "other" response and the shitty form moves around and hides behind my phone keyboard. I try to scroll up so I can see the input and it closes the input form. Nice. Stop making websites that use scrolling as an action trigger. It's awful. 
I am with you, man, but I didn't create this website, just post the link
Bad developers pose security risks. Hold the press!!! Lucky this apparently only happens if you use micro services.
Scala has nothing to do with this directly. These are just common functional programming principles and techniques. Borrowing ideas from scala is a horrible idea and I hope java never borrow any scala unique features.
Hey all - thought this might of interest to folks here. I created a generator based on (using the specs?) of the Twitch TV Twirp RPC framework - gave me a chance to play with protobuf and undertow. Hopefully it will be use to folks - been using it myself for some internal projects. 
I wonder how much the given answers distort the results. I consider JAX-RS (e. g. Jersey) a much better REST framework than Spring MVC and wouldn't be surprised if others think the same and use it. However it is not included in the list of frameworks so you have to go the extra mile (or extra centimeters on the screen) to add this framework.
An interface should abstract over something. If the interface just repeats the _interface_ of the class, than nothing is won. It could be even worse: you create an uninspired interface because you have to that gets reused later for another implementation, but doesn't really fit because you didn't take the time to design it properly in the first place. Interfaces that are no abstractions with just a single implementation are a big code smell. They make it harder to navigate in the code, they mess your code up with unnecessary artifacts, and they simply add no value. I would avoid interfaces to circumvent technical limitations. And never forget: Every class already _has_ an interface!
Where does Spring use a two step initialization with mutable objects?
It looks like in your [submission](https://www.reddit.com/r/java/comments/8u8yo2/would_you_refuse_a_job_over_the_ide_idea_they_use/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; If you were applying for a new job and the company restricted you to using Eclipse vs InteillJ, would you turn the job down over this? No. Don't be ridiculous. IDEs are tools. A good developer learns to work with what the company uses. Good companies, on the other hand listen to the developers and choose the tools accordingly.
No, besides you can use whatever IDE you like really. 
I have switched to intelij from eclipse... It does some things a little better... Some much worse... You get used to the change in the end I don't think it is worth passing on an otherwise perfect offer. I would refuse a position if I was forced to use a mac over Linux though.... 
Thanks, want give it a try in my project. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I wouldn't turn it down, but it would be a red flag for me. I would probably try to dig deeper and understand why I wouldn't be allowed to use the tools that I'm most productive in. * Would they also restrict other software that I use for debugging/development? * Do they often micromanage how their employees work?
Might as well add https://plugins.jetbrains.com/plugin/8575-nyan-progress-bar and go full rainbow mode!
I agree with /u/capitol_: it's not so much the IDE itself (Although I favour IntelliJ I've used Eclipse for ages) but the huge red flag of not just being able to use whatever IDE you want. If they already force that upon me I'm sure they're going to force a ton of other stuff on me as well. 
I'd try to figure out where the bottle neck is first and foremost by doing some tests / investigation. It's all nice to go all out and install a Kafka cluster and build a consuming service to do bulk inserts but if after a couple of sprints implementing all this you find out there's simply a misconfiguration in the database somewhere you're going to look bad. 
I agree. It may turn out that they don't use maven/gradle which make projects mostly IDE agnostic.
&gt; IDEs are tools and as such they are interchangeable. A good developer learns to work with what the company uses. Not all IDEs are created the same. The choice affects not just quality of life while working, but also how productive a developer is. It’s a nice idea that IDEs should be interchangeable, but, for the time being, developers are human with their own needs and wants.