http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/
This sir, is an A1 response to this question. I applaud you.
whats the advantage of using the array. Changing one value, breaks all the tests. Something like: testParent("/home/user/readme/", "/home/user"); testParent("readme/", ""); ... is both easier to read for the next guy, and easier to maintain. Scrolling up to see that paths[3] is equal to "..." is not exactly handy.
"Java Precisely" is actually concise, if possibly a bit outdated. But it would probably be a nice reference to start, as long as you followed up with the 1.{6,7,8} changes.
you might want to convert your readme.html to markdown (readme.md)
Sounds like the vendors don't want to spend time/money testing newer versions or unknown versions, so they restrict you to certain versions. Pretty common with "enterprise" software.
You should post this to /r/gamedev. Also there is a much more complete alternative called [libGDX](http://libgdx.badlogicgames.com/).
That is a very specific example within a Swing application. For web frameworks you do not have that choice as all HTTP parameters are passed using String - unless you want to write your own POST handler implementation using getInputStream()
You should make the examples a little more simple. Java files in entities and level directories are just too big. How come the state management example has only one state? I making a 2D game engine too and for me the example to be followed is Phaser, which is a really popular HTML5 2D game engine, which focus on simplicity. I think it's a great resource for game engine developers.
I dread the day I run into this already.
If you have: int amount = 63; int quarters = amount / 25; int remainder = amount % 25; "remainder" will be 13 and "quarters" will be 2. You can then proceed likewise with dimes, nickels, and pennies. This isn't exactly how I would do it, but this also appears to be a learning exercise for yourself so giving you the code I'd use exactly isn't helpful to you. But hopefully this is what you were looking for to give you a start?
Wouldn't I be left with quarters equal to 2.52? Obviously you can't have 2.52 quarters?
If you want to write a mod for Minecraft, your best bet would be to go with [Bukkit](http://bukkit.org/). That's the server most people use for Minecraft and it allows you to create server side plugins that react to player and world events. You then connect to the server with your Minecraft client to test the plugin. Another option would be something like [Robocode](http://robocode.sourceforge.net/). There are also things set up to allow you to create a rock/paper/scissors AI and pit each others rock/paper/scissors code against each other. Your AI can be as simple as picking one at random or super complex. For the life of me I can't find a link to get started on that but your teacher can likely get the shell going to pit the two classes against each other.
You would not. 'quarters' is of type int which can only store whole numbers. So it will discard the decimal part and only store 2.
I haven't asked yet because it hadn't occurred to me, but is there any chance Swift will have a compiler/IDE for Windows or Linux? That was one of my issues with Object-C was that I didn't have a Mac and it wasn't enough for me to want to developer for iPhone to go out and buy a Mac solely for the purpose of development. 
http://www.reddit.com/r/ProgrammingPrompts/ And check the sidebar of http://www.reddit.com/r/programmingchallenges/
Currently I'm writing a plugin for Bukkit for Minecraft. I had never really done Java before, but thanks to general programming knowledge and an excellent tutorial, I could get started making whatever I want right away. It's absolutely fun, especially when friends can just join the server and play with your mod too. Contrary to SP modding though, you can't modify block behaviour without workarounds or add new blocks/items with new textures (there's also a workaround with resource packs but it's not the same thing). What I do is make an existing item like an ender pearl, give it a name and a lore for the ID and a lore for the description. Then I use the ID in the code for the behaviour of it on player interaction. The tutorial I used was this one: [Bukkit Plugin Tutorial](https://www.google.be/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CCwQFjAA&amp;url=http%3A%2F%2Fwiki.bukkit.org%2FPlugin_Tutorial&amp;ei=SryOU9LsCcj_ObK8gdgM&amp;usg=AFQjCNFZcDJ7qlHSy85or8YAbCFXHff8Rg&amp;bvm=bv.68235269,d.ZWU), I also recommend the javadocs for bukkit.
That guy is either completely brainwashed or has no idea what hes talking about. Maybe both...
You should try /r/javahelp or /r/homeworkhelp
Thanks for the feedback! The paths are shared between the test cases, because that way every test breaks if I change or remove a path. The test cases are supposed to use the same data. If the data is not shared, but duplicated they might won't use the same data in the future. Spock has a great mechanism for shared data (the @Shared annotation), and data pipes (&lt;&lt;) makes it convenient to rely on shared data. path &lt;&lt; paths This feeds a certain test case with the shared data when you use it in the `where:` block.
Double posted to http://www.reddit.com/r/learnprogramming/comments/279ztw/help_finishing_a_java_program/ That's not a problem, but you should say that in your text, so people can cross-check comments etc.
Does the Drawing Tool have a drawCircle method? 
Using IntelliJ, when I rename a class it will automatically rename the unit tests for me. If I move a class then the unit test gets moved too (Manually though). If I delete a class then the unit test gets deleted too.(Manually here too). This level of refactoring is rare enough that you can easily manage it.
I kind of see what you mean here, I'll give it a shot :)
Make time. Seriously. It takes a minute or too to do this stuff, and it costs so much more down the line when you don't do it.
Perhaps I will, and I've heard of LibGDX. In a way it was my main 'inspiration', I've tried it and I sort of liked it. I just found it a bit too bulky for me, so I suppose I'm trying to make a more lightweight framework for making games :)
 int value = 63; int quarters = value / 25; value %= 25; int dimes = value / 10; value %= 10; int nickels = value / 5; value %= 5; int pennies = value; int amount = quarters + dimes + nickels + pennies; Note that `/` here is an integer division and `%=` reassigns the remainder. The variables `quarters, dimes, nickels, pennies` hold the amount of each respective coins. But dont forget you need to pseudo code it. Using stuff like `MOD` or `DIV` might be useful.
If you're doing 2D games is there a reason you really need the extra dependency on LWJGL? You could just use the basic Graphics API in Java which is really fast anyway. I would like to see something similar based on JavaFX 8 since it now includes the OpenGL/DirectX parts out of the box. That way you wouldn't have to worry about any extra dependencies. 
Root Framework originally used Java's Graphics API, and I felt it was really slow so I ported it to OpenGL, which also means I can add a lighting system and some other fancy stuff in the future which Java's Graphics API wouldn't handle. I don't really have enough experience with JavaFX to work with it, plus the whole extra LWJGL dependencies thing doesn't bother me anyway since all of the libraries are handled by the framework.
1) Yes you use Java for Android apps (And XML) 2) ... Not sure what you mean here, if you mean apps as in mobile apps, then 99% of Android apps, and lots and lots of web applications use Java in the backend, twitter for example ( from what I've heard) 3) Java is AWESOME for web development on the server side. 4) Java gets used in a whole array of things, read this: http://programmers.stackexchange.com/questions/17053/what-is-java-used-for-these-days You need to clearly know what the client side and server side entails. Client side is Html, Css, and Javascript. Server side (in the case of Java) is, well Java, and a database where you'd use SQL. So say you're sitting infront of your computer, what you're seeing now is HTML styled with CSS, then most likely your web app will use Javascript to do a http request to the server, that's where Java comes in, Java reads the http request and see what the client (that's you) has requested. It then does some calls to the database and other resources and constructs a 'response'. When that's all done it sends that response back to you over http, this response would nomally be XML, JSON, or even HTML. Then we're back in your Javascript, Javascript then reads that nice little response your server sent back to you and extracts all the data out of the response and then injects it into your HTML for you to see on your screen.. And that's pretty much it... Ofcourse you could argue and complicate this but that's the basics. And where you asked if your clients all need Java installed to use your apps, that's only needed when you created an applet (you can go read up on what exactly this is, but basically it's Java that runs on the client side), but that's out dated and... I don't think Java is made to run on the client side... Java lives on the server. So, no, your clients would not need Java installed.
1. Yes, but Androids apps are not written in pure Java. There is a whole Android SDK that sits on top of Java which takes some learning. 2. Almost anything. Minecraft, banking software, websites, really almost anything. 3. It depends what you mean by effective. Java is a little slow getting off the ground for a website compared to Ruby or Python. However, Java sometimes scales better. Consider that Twitter was rewritten in Java for performance and scalability. 4. Really just about anything you can think of. To answer your question about Java websites, all of the Java code is ran on the server. The end user only needs a browser. (Note that there is a thing called a Java Applet which is basically an embedded Java program in a website. These were common on the early web but have largely died out because they are a huge security risk and they do require Java to be installed by the user.)
1. Java is the default language to develop Android apps in. You can also use C# with Xamarin or C++ with NDK and even some scripting languages, but Java is the most common and simple way. 2. If you mean concrete examples of desktop apps, the examples are something like the most popular Java IDEs (Eclipse, Netbeans, IDEA - all built in Java), OpenOffice/LibreOffice, Minecraft, I2P Project etc. 3. (and 4) Java is mostly used for web/enterprise development (most enterprise apps are basically web apps running in intranet now, so the principles are similar). Java is more performant than trendy "web" languages like Python or Ruby, but requires more time to develop your projects. So it's for you to decide, what do you need more: application speed or development speed.
I am not sure that there is really a best but I would go with JPA. Is is a standard way of doing things that will be more flexible if you ever choose to go with something other than Hibernate. I would really advise against using the XML mappings. It is easier to develop and easier for others to read if you use annotations in your code.
If one of the methods was "widely accepted as the best" - all the other methods would be deprecated and removed from hibernate.
For a circle you'd store the radius (or diameter) of the circle, it's centre point and often the amount of vertices to render (although there are ways of working out a good value [mathematically](https://stackoverflow.com/questions/2243668/when-drawing-an-ellipse-or-circle-with-opengl-how-many-vertices-should-we-use)). Rendering one can be achieved by doing something like this: double diameter = 100; // if you are storing the radius this would be radius*2 double stepSize = 1.0; // A lower number will add more points and make for a more circle like render for(double i = 0; i &lt; 359; i += stepSize) { // i is in degrees so you might need to convert to radians Pos first = new Pos(diameter * sin(i) + centre.x, diameter * cos(i) + centre.y); Pos second = new Pos(diameter * sin(i + stepSize) + centre.x, diameter * cos(i + stepSize) + centre.y); // This is the drawing part // Basically you are drawing a line between the two points you have worked out pen.move(first.x, first.y); pen.down(); pen.move(second.x, second.y); pen.up(); } (I haven't tested that as Java code, but the example I give below uses the same logic). I made a quick example of what changing the step size can do [here](http://lyndonarmitage.com/html/points_and_lines/circle.html).
JPA using the Hibernate Metamodel Generator and Annotations?
Just a minor nitpick: OpenOffice/LibreOffice *use* Java for a small set of functions (a remnant of the days when Star Division, the original creators of Star Office, which became OpenOffice later, was bought by Sun Microsystems, the creator of Java - of course they had to add it), but are built mainly in C++. Java has a well-understood execution model, a world-class VM on the desktop (and the most-deployed mobile VM with J2ME - far more than Android and iOS combined), best-of-breed tooling and a very active community (from enterprise suits to info-hippies) going for it. Plus, Java devs are among the most sought on the job market.
Native webapps are the future anyway. This is just going to fragment Apple's developer community.
Yes, you can do the JPA way with Annotations. I believe you still need some very minimal XML. I learned a while ago so I do not know what tutorials are good. I used the same book as hyperboleboy linked below (Hibernate Made Easy: Simplified Data Persistence with Hibernate and JPA (Java Persistence API). It is great but uses Hibernate 3.2. 
In your entity classes and service implementations, stick to the javax.persistence.* package and you'll be fine. The actual provisioning of the EntityManagerFactory will be dependent on the implementation of JPA that you're using, but that should really be the only bit of code or configuration that depends on Hibernate. This article has some decent, simple examples of writing code that depends on JPA and not Hibernate's implementations: http://www.informit.com/articles/article.aspx?p=1671224&amp;seqNum=2
Thanks for the replies the applet thing had me confused. So basically you can do anything with java? If you had a site using java would the user even know it was java? Do you have any site examples? Now I've had this cleared up it's very interesting, the issue with java is the presumption of applets and that no one uses it as I know a few misinformed tech guys that thought the same haha.. What's it like for penetration testing, malware and that kind of thing? There's not much info as everything seems to relate to java being hacked. As java developers how versatile do you find the language for projects you may want to do? I get the impression it's quite universal from web to desktop on any platform. I also have an interest in automated bots what's it like for this? Note that my main interest though is using it for web apps but there's limited info that makes it easy for a noob to understand. Thanks!
Thanks for the reply. After a while I did find a solution that works and I take comfort in knowing that it's not as elementary as I first thought. Sometimes I wonder if I'm cut out for programming, but knowing that this is actually more complex than I anticipated and I was able to solve it is reassuring. That, plus, I love the rush that comes from finally reaching a solution. Thanks for the insight. I'm going to subscribe to r/algorithms.
Fair enough... Why the different methods though? In what environment would a developer choose one over the other?
There really isn't a "best", as all of them have significant downsides. It's all a matter of which problem you want to struggle with. JPA will always lag behind Hibernate as far as feature set, and as time goes on you'll be continually disappointed to read how to accomplish something with Hibernate that you very much need to get done, and then find out that it's not in the JPA so you can't use it. That problem is magnified by the fact that in a professional context you usually not only have to wait for the JPA to catch up, but then you also have to wait for the current application server life cycle to end, and hope that the upgrade at end of life is to a version that will support the new JPA version. You also have the problem that if you want to leverage the unique feature set of your RDBMS provider, say for example Oracle's XML Type, you just can't do that with the very generic JPA annotations, you'll need to implement custom Hibernate types, but if you wanted to take a Hibernate dependency into your domain layer you'd just use Hibernate annotations anyway. Mapping via XML seems to be the best of both worlds as long as you don't need custom types, as you can avoid a domain dependency on Hibernate while leveraging the full power of the Hibernate implementation. But then you've got to maintain a metric crap ton of XML mappings instead of just sparse XML setting up your annotated package / class definitions and that's also an extremely painful thing. Choose your poison. In my experience the most common preference for those who decide to go with Hibernate is JPA &gt; XML Mapping &gt; Hibernate Annotations.
&gt; I've messed around with numerous languages and peristantly fail to find one that is a good fit for me. Can I offer you a suggestion? You mention that you want to write automated bots. That's quite vague and I can't really tell you whether Java is a simple fit for that. What I can tell you is that instead of spending time worrying about the language you're selecting to use, you should just start some rapid prototyping. Language and library selection are critical when you're working in a team for a business where once these choices are made, they can be slow to change. You mention you've tried using other languages but they haven't been a good fit. I'm not sure what that means but based on that limited information, I think you should just pick a language and get something working. Languages and technologies aren't the hill to die on. Just get some code up and running. If you want to make some bot, make one. sincerely, ~~Richard Nixon~~
That makes sense. By much more complete, I meant it had a lot more stuff in it. You are right though. It is very bulky. I hope root framework is successful. I will try it at some point.
If you are interested in Java web application you should be having a look at the [Play framework](http://www.playframework.com/).
The industry finally saw the light with RoR in that it doesn't scale. Hopefully people will see the same with Node.js
I really dislike Eclipse, it is not a very good IDE. I highly recommend Netbeans or IntelliJ You will thank me later. The amount of time people waste on debugging Eclipse problems is staggering.
Netbeans IntelliJ VIM Emacs Eclipse In that order
**JPA** You'd use JPA if for some reason you'd ever consider swapping out the implementation of your persistence context, ie, if you decide to use a database not supported by hibernate(like some NoSQL databases have JPA adapters). **Hibernate API** You'd use the Hibernate API for any case that lies outside the context of JPA, ie, you want to respond to persistence events.
Show us some code where you're creating these complex numbers and complex matricies. This will help us understand your problem better.
This is a research project so it is difficult to actually just post my code. I'l see if I can give a better description in the question.
Not sure if you're taking the right approach here. When you use a programming language it should be a good fit for the problem you need to solve. If you're only trying to learn about programming though than Java should be fine as it is versatile and used in a lot of academic settings so there is loads of good material out there. For the future I highly advise you not to limit you knowledge to one certain language. Here is a good book to get you started https://www.google.co.uk/search?q=head+first+java
Then don't post your actual code. Post code that's like your actual code. Use different numbers. Use differently-sized matrices. Also, I guess I didn't catch it at first, but /r/javahelp is more suited to "Help! My code doesn't work!" type questions.
We're not using Hibernate, but for our Eclipselink (another JPA implementation) we've gone the route of as much JPA annotations as possible, then Eclipselink specific annotations, and leave the xml behind, for now at least.
IDEA community edition is incredibly powerful and also free. I only program as a hobby (I'm planning on majoring in computer science in college), but I consider myself pretty proficient in Java, and I've been using IDEA community edition for about 6 months now. Everything I've wanted to do has been a part of the community edition, with the exception of Google app engine integration. Idea community edition is really full featured and powerful. 
This problem is known as the change-making problem: http://en.wikipedia.org/wiki/Change-making_problem While the *generalized version* (meaning your algorithm would be given the valid coin denominations it can use) of this problem is non-trivial, in your problem you were told that you can use pennies, nickels, dimes, and quarters. When limited to the US coin denominations a greedy algorithm is sufficient to produce optimal results and very likely all the instructor was going for.
Check out [Files.createSymbolicLink()](http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#createSymbolicLink(java.nio.file.Path,%20java.nio.file.Path,%20java.nio.file.attribute.FileAttribute...\)) "Symbolic Link" is the universal name for shortcuts, so googling that term will help find more information.
Java is Turing Complete, which by definition means that you can use Java for *anything*. It may or may not be a very good option for your particular project, but it can do it.
A quick and dirty way is to create a batch file such as C:\Users\Public\Desktop\MyApp.bat. A better way is discussed here: https://groups.google.com/forum/#!topic/jna-users/Zgkx7XQAJYc
Personally, I prefer VIM over Emacs.
I can only tell you how we hire. We don't care about certs. We care if you can write code and, to a lesser extent, your experience. In an interview we give coding tests like the ones at http://codingbat.com/. If you can code well, we'll hire you, regardless of your certifications or education.
It really depends on the company. Corporate environments are probably more likely to value it than startups. I don't think a certification *alone* can (or should) get you a job. But it can certainly be a good asset on your resume. If you're looking for anecdotes I know that my certification helped secure a raise, definitely paying for itself. But there's obviously lots of successful programmer without certs!
Sure. So how do you create one of those?
I think this is a probably accurate. Most actual interviewers are probably going to care the most about how you interview and what kind of experience you actually have and what you can demonstrate you know. The cert will help you get past HR at a larger company though so you can get that interview in the first place. I have a SCJP cert from before they were rebranded to Oracle. It's fine. Gives me something to put on my resume, demonstrates I'm willing to put in a little extra effort on my own time and it taught me a couple of obscure things I might have never learned otherwise.
Thanks for the reply. This is exactly what I was expecting the opinion to be
It will give you more chance of getting an interview in coportate enviroments. Usually HR people downt know what java is so a certification will get you in top of the pile. 
wow, I never saw that site before .. that is a lot of fun! Thanks!
Certifications have their place. * for a developer who has been developing in other languages and wants to start working with Java, the Certification shows that they have been using Java and have met the expectations of getting certified. * for experienced Java developers - getting a recent cert, shows that you're interested in staying current with recent changes in the language * for anyone who wants to be discovered by a recruiter. Recruiters search for candidates by using search engines with keywords. To secure an interview, you need to pass the recruiter 
Have you tried checking out openJDK SVN? I know Oracle adds their own sauce, but it's the nearest we get to 7u/HEAD. Otherwise if your company is affiliated w/ Oracle you can ask for a preview. I have worked at such a company in the past, and when you have at least one customer that Oracle deems of strategic value, they'll usually help you out.
;-) I'm using both IntelliJ (for websites) and Eclipse (for Java). I'm well aware of the merits of IntelliJ. But I don't just jump ship because of minor annoyances (major ones, in this case, agreed). Eclipse has many many great features like in this case, a very sophisticated, partial / incremental compiler. None of the others have that, and it's a huge help if it doesn't happen to be slow as indicated above. And there's a big ecosystem of plugins that I wouldn't want to miss just now by switching to another IDE. So, I try to help out with contributions, patches, etc (like the linked bug report). making Eclipse better. That's Open Source. I try not just to be in for the free beer. And most importantly. What's the point of these flame wars? Are they in any way contributing to any of the IDEs to become better?
Treat certifications as more for personal growth than for professional growth. That said, it certainly won't hurt you from obtaining a job. For me personally, it helped me to clearly understand why code does what it does. It helped me to do better code reviews. YMMV. This is coming from a person who has taken quite a few certifications (Java 1.5, 1.6, 1.7) and even being an editor for a book on Java certification.
Not a flame war, but your statements are dated. Netbeans has had incremental compilation since 2008 (version 6.5). When was the last time you used it? Netbeans is open-source based off of the GNU license. Agreed that Eclipse has a large ecosystem of plugins. It is it's greatest strength and also it's greatest weakness. Not all plugins are great. As an engineer, my time is precious, and the last thing I need are my tools getting in my way. It is practically a daily occurrence, where one of my co-workers are cursing at Eclipse because it's gone "wonky" (won't compile, won't update, won't check-in, ...etc). Resulting them in hours of lost time. I don't have to deal with that. Netbeans just works and that's all I ask a tool to do for me. 
Great comment, thanks so much
IIRC Symbolic links require admin permissions or a non administrator user with the correct security flags on Windows. 
you should check out /r/dailyprogrammer if you haven't already. Programming challenges ranging from easy to expert level.
&gt; Netbeans has had incremental compilation since 2008 (version 6.5). When was the last time you used it? Good to know. I wasn't aware of this.
Well, what is the exception? 
java.lang.NumberFormatException: For input string: "" at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) at java.lang.Integer.parseInt(Integer.java:504) at java.lang.Integer.parseInt(Integer.java:527) at Test.main(Test.java:16) 
I agree. It may help you land your first job. After that, it's your work experience that counts. There is one exception, that is not as much of an edge case as it may seem. If you're working for a consultancy firm, if you have a string of certifications, this can help them place you more easily and for a higher rate than your colleague who doesn't have the certifications. 
What is the name of your company and where is it located? XD No, but seriously.
So you just want the bearing of one lat/long point from another? [Here's](http://www.movable-type.co.uk/scripts/latlong.html) an algorithm I found to do that with a quick Google search. 
It's a [binary file format](http://msdn.microsoft.com/en-us/library/dd871305.aspx) you can write yourself.
Helped me get past hr and talk to the technical guys. 
look into NASA's WorldWind source code, [LatLon class](http://builds.worldwind.arc.nasa.gov/worldwind-releases/1.3/docs/api/gov/nasa/worldwind/geom/LatLon.html#greatCircleAzimuth(gov.nasa.worldwind.geom.LatLon, gov.nasa.worldwind.geom.LatLon%29)
Is there a specific reason why you use **BufferedReader** instead of [**Scanner**](http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html)? IMHO Scanner is much better suited for keyboard input and is also easier to handle.
If I come across an interview that used questions from codingbat, I will probably do pretty well. I completed and optimised all of the questions to the best I could for fun practice. 
what am I looking at here?:D
Yes i got that but why is it getting empty string from STDIN in spite of giving proper input that I am not able to understand
&gt; Yes i got that but why is it getting empty string from STDIN in spite of giving proper input that I am not able to understand 
if i uncomment my println lines then it does work but why does it requires those println lines?
If that's your style, try [4clojure](http://4clojure.com).
7u60 is only good until July 14 (when the unacceptable warning dialog starts popping up when applet is loaded). We have to do regression testing and make sure they didn't break yet another aspect of security. Oh let me restate - improve the security so as to make it even less usable as they've done in the last 5 updates.
I like 4clojure. I even got the Gf to do the first ten or so questions. 
Really? The Oracle Java EE tutorials have a [quite extensive chapter](http://docs.oracle.com/javaee/7/tutorial/doc/partpersist.htm#BNBPY) about JPA, including annotations. Granted, it's densely written and doesn't explain everything, but it was enough to get me started on my first JPA project.
Personally I have never known anyone to get the job because of certs. If you do not have a formal cs background and you do not have any experience yet in the industry they might help to kickstart you into a position with some responsibility but I bet that would be more on the enterprise side than the startup side. The number one thing I've seen make a difference is experience.
I can't say for sure, given that I can't reproduce your issue on Linux, both directly in Eclipse or from the command line. My assumption is that you're on Windows, and when you hit enter, it appends \r\n to the console. BufferedReader#readline() by default will read to the \r and trim that off, so the next readline() would then hit the \n and return an empty string. I'm then guessing it works properly using System.out.println() because it's causing the remaining \n to be lost due to your write given that stdin and stdout are going to the same terminal. Try using BufferedReader#readline(true). Which should skip the remaining \n. Or, as /u/desrtfx said, use Scanner. I'm not familiar with it, but it seems to be all the rage these days based on these kind of questions. [edit] Rereading your last line, it sounds like /u/desrtfx's answer is what you want based on what I've seen others using. Also: Thanks for providing well-formatted code when asking for help.
Having started to use Gradle extensively, I'd probably recommend using maven if you're new to dependency management. Yeh it's XML (boo) but it's much better supported and has a lot more stuff to it. It also won't drive you insane when trying to debug it. But long term aim for gradle :).
Spring Data Solr (https://github.com/spring-projects/spring-data-solr ) looks like an obvious candidate to use it. If you are doing a new project, you can use it together with Spring Boot to make things simpler. I was able to get started with Spring Boot and Solr pretty quickly. See the full autocomplete example implemented with 3 Java classes: https://github.com/arafalov/Solr-Javadoc/tree/master/SearchServer/src/main/java/com/solrstart/javadoc/server
The future of awesome :)
The new Java Money API already available for experimentation and hopefully some day part of JDK 9. &gt; JSR 354 provides a portable and extendible framework for handling of Money &amp; Currency. The API models monetary amounts and currencies in a platform independent and portable way, including well defined extension points. It's API defines a simple yet flexible contract that enables users to choose the implementation matching their target requirements best and having full control about the numeric state at all stages during monetary processing. The JSR is lead by Anatole Tresch (Credit Suisse) (@atsticks). 
preface: I don't know anything about raycasting. The comment here does not match the code: while (currentAngle &gt; Math.PI/2 || currentAngle &lt; 0) { // adding 2PI to get a positive, equivalent angle // negative ones fuck shit up if(currentAngle &gt; Math.PI/2) currentAngle -= (Math.PI/2); else if(currentAngle &lt; 0) currentAngle += Math.PI/2; } 
Well this seems like schoolwork so maybe your professor has particular preferences, but I would say this code is a bit over-commented. Here's an example of something that does not need to be commented: //Get input from the user Scanner consoleInput = new Scanner(System.in); The code is obvious enough. You intend to read something from `System.in`. Also even with all the comments the overall purpose is still unclear. It separates an input stream into words by splitting around newlines and spaces, so how are there two dimensions? Splitting into words will give you a collection of words, right? I don't see how this becomes two dimensional. Obviously `Project4` is not a very semantic name for this class, but I presume your teacher demands that you name it `Project4`. I'd move the variable declaration from line 21 and just inline it in line 35. There's no reason it should be outside the `while` loop, and declared so far away from where it's used. I've heard some teachers claim that putting variables inside a `while` will cause Java to allocate memory every time, but this isn't true at all. Bit of a stylistic issue but I'd change your `notDone` variable to `done`, flipping the `true`/`false` usage around to match the new name. Simply because a line like 38, `notDone = false;` is more confusing than `done = true;` and saying `while(!done)` reads about the same as saying `while(notDone)` It seems your second dimension, judging from the nested `for` on line 40, is actually more just a set of data where each index corresponds to a different specific piece of information. This is a pretty bad usage of a collection and the code would be much more clear if you just used a second class that stored data. A class with methods like `getWholeWord()`, `getFirstChar()`, `getOriginalIndex()`, etc. This will make your code a bit more readable. Having to remember indexes in a nested array is too much to ask for someone to keep in their head, and has no advantage over using a more readable class instead. //foreach of the "words" in the line, loop for(int x = 0; x &lt;brokenLine.length;x++){ could be rewritten equally readably, and even allow you to trash the comment, by writing: for(String word : brokenLine) { That's all I've got for now. EDIT: Also I should mention on the whole this is quite good. So don't let my negativity discourage you xD. I'm focused on criticizing right now but it seems very clean, particularly for student work.
There's an amazing amount of tutorials and articles about web programming here: https://jsf.zeef.com Be sure to check out the tutorials section first. The top two ones are really good. If you've worked through those tutorials take a look at the articles for some extra background. Good luck!
 * In printMultDimArrayList() use StringBuilder. * `String.valueOf(brokenLine[x].toLowerCase().trim().charAt(0))` can be rewritten as `Character.toLowerCase(brokenLine[x].charAt(0))` (you've already trimmed it) * Remove this line: `if(!input.equals("") `. The for loop will run zero times in that case. * Remove obvious comments. Unnecessary comments just makes code harder to read. * Define `inputData` as `ArrayList&lt;String[]&gt;`. `split()` returns an array, so it should be easy. * Change this: String input = consoleInput.nextLine(); if(input.toLowerCase().matches("done")){ notDone = false; break; } input = input.trim(); To this: String input = consoleInput.nextLine().trim(); if(input.equalsIgnoreCase("done")){ notDone = false; break; } * Use `Collections.sort()` or `Arrays.sort()` (but that's probably not what the teacher wants)
&gt; the code would be much more clear if you just used a second class that stored data. A class with methods like getWholeWord(), getFirstChar(), getOriginalIndex(), etc. FWIW, that was my initial reaction as well.
I just finished [http://www.apress.com/978143024626]( Beginning Java EE 7). Greate for getting started, just watch out because were some spelling/technical errors in my hard copy that made the examples not work quite as expected.
When I interview someone, I'll take note of their certifications, but it won't play that much into my final decision. The Oracle cert is mostly about memorizing minutia about the language / VM / bytecode that you won't see in 90% of code bases, so it isn't really that applicable. Being able to point to code you've written successfully, knowing the basics of the language, and acting like a human being I'd actually want to sit next to for eight hours a day, is far, far, far more important.
Have you heard of http://www.broadleafcommerce.com? Sounds like it's right up your alley. [Here's a Solr search implementation that we are using](https://github.com/BroadleafCommerce/BroadleafCommerce/blob/master/core/broadleaf-framework/src/main/java/org/broadleafcommerce/core/search/service/solr/SolrSearchServiceImpl.java). The index is built via this [SolrIndexService](https://github.com/BroadleafCommerce/BroadleafCommerce/blob/master/core/broadleaf-framework/src/main/java/org/broadleafcommerce/core/search/service/solr/SolrIndexServiceImpl.java)
With the scanner, did you try using Scanner#nextInt() instead of Integer#parseInt(Scanner#nextLine()) ?
Thanks I took some of your suggestions. I even implemented Collections.sort() to show how fucking bad bubblesort and selectionsort really are. I'm using alice in wonderland as my test, and bubblesort clocks in at 32 seconds, selectionsort better at 13 seconds and quicksort at a tenth of a second. I don't know why project4 wasn't "Learn how to use a custom comparator." the gains are absurd.
I implemented this. It does look much cleaner, thank you.
glad to help
I'm on windows. I just copy-pasted your code into eclipse, and it runs perfectly. Add a more precise problem description. What exception is thrown, where, when, etc...?
Use another stack (stack2). Pop things from stack1 and push them on stack2, once you hit the position, do w.e you need (pop another or insert), then pop from stack2 and push those pops back to stack1.
Well, start with the data structure you want to push onto the stack. It'll be an object with three or four fields and a constructor. Can you create that object? If you can't, you won't be able to complete this assignment. You have a textbook with a stack class in it. You copied it into your gist. The data structure to go on the stack will be 100x simpler. There must be information in your book to cover that. Let's see how it comes out, and then we can move onto the next part.
Thank you, this isnt exaclty what I am looking for though
Thank you, I will look into this class further. 
Because you can buy hundreds of Indians to write java apps at $15 / hr.
Can you give us a quick rundown of what sequence of events leads to the lock? Is there any chance you're not completely destructing the connection to sqlite on exit/strategy switch? 
http://www.reddit.com/r/java/comments/1yyctp/what_makes_java_enterprisey/
God I hate people from Indiana.
Server-side enterprise Java are typically deployed to an application server that provides several services common to all enterprise applications such as security, scalability, transaction management etc. Application developers only need to worry about business logic, all of these requirements common to enterprise applications are taken care of out of the box when using server side Java do develop them.
This is perfect. Thank you so much.
Yea, this isn't the right way to do things and is pretty much a hack...
I'm not sure how relevant this really is, considering how narrow Swift's application domain is, especially when compared to Java.
Well, I think I may have sorted out the issue, though I can't be completely sure what was causing it now. I imagine it was something to do with exactly that. I tried scanning to see if I had missed a statement.close() or a resultSet.close() but didn't find anything. In the end, I simplified my design and mashed all of the SQLite methods into one class and the FlatFile methods in another to only have one access point to worry about. In hindsight, I probably should have done this from the beginning to keep the code DRY.
When we started this project I looked into broadleaf and suggested we use that instead of building one totally from scratch but my bosses wanted to do it the hard way.
Those projects look like they will be helpful, thanks. 
Java is a lot faster in certain contexts. In some cases close to 100x faster. That matters for enterprise. http://benchmarksgame.alioth.debian.org/u64q/python.php
Thankyou for your suggestion, I will try to make my way of writing better
Ajax request should be an HTTP GET instead of a POST.
Yea, why are we comparing COBOL with C anyway?
Thanks for pointing my mistake. Modified the source.
Why not just: public class R { public static class string { public static final String message1 = "Message 1"; } } which you can later change, if you have any sort of multi-language system, to something like: public class R { public static class string { public static final String message1 = getLocalizedMessage("message1"); } }
Why not? How did that algorithm not help? What exactly are you looking for then? Help us to help you by giving more detail.
* First, get rid of the notDone variable, you already break out of the while loop, so you can simple change it to `while (true)`. * As has been said before, your commenting style is debatable. Focus on the big picture and on explaining the "why" wherever you came up with a non-obvious solution * You do a lot of work in constructors, which muddles what they do. For your *sorts, consider static methods. Or have a Sorter enum with an abstract sort method and single enum values to implement it. * If you have Java 1.7, you may want to use try-with blocks and rid your code of explicit calls to "close()". * Use an iterator loop: Instead of `for(int x = 0; x &lt;brokenLine.length;x++)`you could simply say `for (String word : input.split("\\s+")) { … }`. * Whenever you declare a variable, make the type as abstract as possible while still keeping the type useful. E.g. `List&lt;String&gt;` strings = new ArrayList&lt;&gt;()` (note the `&lt;&gt;`? it's called diamond operator - infers the type since Java 1.7). * Speaking of lists, you convert your values into Strings. Do you really want to compare word sizes lexicographically (e.g. 1, 10, 11, 12, 2, 3, …)? You may want to create a data object that holds the string, the first character and the length. Even better, get rid of all of that and implement Comparator classes that compare your strings on the lowercase first char and on the string length and change your sorters to use the Comparator interface.
Speed, ease of unit testing, stability (type safety and compilation means you can catch a lot more bugs before they even get to the testing stage). 
I'm working with both with Java and Python in a corporate setting (and have done so as a consultant for big enterprise for several years), I can confirm that python, like other dynamic languages, are seen as more risky. This actually has some truth to it: A class of errors that Java's type system catches before the code is even executed can happen with python's dynamic typing. Plus, the "openness" of the python object means you can never be sure what piece of code has accessed your object, which precludes real encapsulation. Last but not least, the developer base for java is bigger than for python, which means you can easier mitigate personnel bottlenecks.
Java is used more often everywhere, small organisations also use Java more often.
Cost computation goes beyond just how much you pay developers to write the code..
The two most useful key combos are CTRL+Shift+R for quickly opening files and CTRL+O (not sure if this is the default one) which is the same but for members of the currently opened class. What I'm really missing in Eclipse are shortcuts for easier navigation between splits. Ignoring all other issues with Eclipse's split views, CTRL+F6 "Next Tab/Editor" is simply not enough when you have more than two editors side-by-side. Split navigation like in Vim would be great. Recently I have been having problems with Eclipse not honoring my shortcut settings. For example, I set Ctrl+P to open the Preferences and not to print. But when I press it, Eclipse displays a pop-up menu asking whether I want to open the preferences or print the file. It might be the shitty Eclipse distro from work, though.
I agree. imho, dynamic languages like python require significantly more reading to recover the purpose of the code. This makes it harder to maintain, and slower to edit. The act of forcing variables to have types in code makes it much easier to gain all the context you need from a single read. Not to mention the fact that static analysis and IDEs seems to work better on Java over python, making it easier to cross-link definitions in a navigable way. All that leads to a faster recovery of "what does this function do" and "what does this variable store" which results in quicker edits and less time re-understanding the code.
The best keyboard short cut for eclipse is alt-f4, then use idea instead.
This article is disappointing. At least you should have written why is plugin of your choice subclipse. What are its benefits comparing to other svn plugins (subversive). But keep up your work, you have some interesting articles on your blog.
I think the most important reason that people are forgetting is that Java was _designed for the enterprise_. Every decision about Java's feature set was made to maximize productivity while minimizing the amount of damage that could be done by a rogue idiot. This is why Java chose not to include features like multiple inheritance, operator overloading and default arguments. At the end of the day, Java was made for very large companies, with several very large teams, to be productive. On the other hand, Python was designed to be a fun new scripting language that would make some every days tasks more enjoyable to accomplish. When your business depends on the longevity of your codebase, you're likely not going to be picking the latter.
In Java the retro compatibility is zero-class feature. They simple don't drop off or break things between major releases. In corporate world this is a must have.
Yes, but small organisations are more likely to also use Python in some settings where large corporations will have someone who insists on using Java (possibly because the corporation has/is already heavily invested in it).
In small organizations developers often choose what's being used, and more developers choose Java than Python. /r/programming might thing differently, but programmers in general like Java better. Python has horrible mandatory white space significance, has this stupid thing called a GIL, runs 100x slower than Java and has far less cool libraries and far less supporting tools.
Java has always had strong commercial backing: from Sun/Oracle, IBM, and many, many ISV's. This immediately gives it a great deal of street cred among large enterprises. The other benefit that Java has gotten from all that commercial support is a great deal of investment in infrastructure. In the last 20 years, the JVM has gone from a bytecode interpreter and green threads (on Linux) to a highly optimized JIT with native threads and a good GC. This gives it performance that is oftentimes very useful in the real world. Java also runs almost literally everywhere, and has a huge base of developers. However we might want to disparage Java, these are all compelling reasons to choose the platform. 
Python has good support and popularity. Where did your assumptions come from?
Apple hasn't claimed that the Swift Playground is a new concept, with Chris Lattner (the chief designer) openly saying that it was influenced by Bret Victor's concepts, Light Table and other interactive systems. These in turn were inspired by other software playback debuggers and visualisers, like Chronon for Java and the Elm debugger. What's new and impressive is that Apple is the first company to do it on this scale and to build it into their language and IDE as a first-class concept. That'll make a big difference to adoption. Good luck with Simz, simulatedreality.
Your confusing Bash and Python. Python is a general purpose language. Bash was designed for tiny 10 line scripts.
Troll much? Python has plenty of awesome libraries that are better than Javas in some areas. Especially in the machine learning and data analysis areas.
I notice that in /r/java, some users really hate Spring (maybe because of past experience with XML configuration ... or some Oracle PR team roaming reddit...). They downvote every single comment related to Spring like craazy (not only in this post) ... 
Thanks for this. I enjoyed reading and didn't mind that you had JDBC stuff in there as well. A nice complete example.
Wow, thanks a lot I didn't know a lot of these.
Maybe I'm just inexperienced, but I've never seen the "p.new" before in BubbleSortInner bs = p.new BubbleSortInner(p.inputData); Is this correct? If so, why would you do that? I didn't know what to Google, so I'm asking you instead.
More programmers in general choose Java because that's what they know. Also at least for now Java devs are paid better. The python standard library mostly matches and sometimes surpasses the Java SE APIs. IDE support is good enough for daily use, and I'd much rather write Python code using e.g. vi than Java. The interpreter tax, the GIL and other downsides of python are irrelevant unless you actually *need* the performance. And let's be honest here: Most tasks don't fall under that category.
C'mon, now. Just think of the advantages this offers over any implementation of JPA for cataloging your collection of cat videos.
I would also expect the Python 2/Python 3 schism to play into it. Most developers are using a language that for all intents is not under active development.
Wow, I wonder if there was a more dickish way to ask this question? I think not. I never even came close to implying that Python didn't have support or popularity. I said that Java's was better. Such is the case when your programming language is older and more broadly used.
Java is not older, Python first appeared about 4 years earlier than Java but grew slower. Your phrasing made it sound as if Python had no support or popularity.
Well, I apologize for getting my facts on the age wrong. That's actually quite surprising to me. The phrasing was maybe ambiguous, but I still wonder why you'd infer the implications about those two things you listed, and not the speed. If the sentence reads to you as though the speed is better, then the other two should be viewed in that context as better, as well, no? Either way, cheers.
I didn't mention speed because Java bests Python in that category, not gonna try to defend something I know Python isn't as good at. Not that Python is dirt slow but Java is really fast.
Another way to put that is that Python is a language where Java is a platform. The JVM is why Java beats Python for enterprise development more than language differences. It is fast, extremely stable, and easy to monitor, which makes it ideal for the enterprise. Strongly typed languages also tend to have much better tooling support and arguably make it easier for groups to build large applications. Really, the one main advantage Python has is that it is more terse than Java, which means very little beyond programmer enjoyment. 
Correct, you can't compare Python against Java without considering that Java is an entire platform. Comparing Python against the JVM, Python becomes less attractive to the point that Jython would be a better choice than Python in the enterprise
I can echo this. I think I'm going to really like Gradle in the long run, but right now Maven is a lot more "ready." Gradle will be there soon enough, and it will be better.
At least my copy of Spring Toolsuite doesn't do it for Ctrl-Shift-R and Ctrl-E. Would be great if it's just stupidity on my part, because that would mean it's easily fixed...
I use Struts2 on a daily basis, and my recommendation is to skip Struts2 and aim for Spring MVC. I too hate it when replies to my posts are met with "don't do what you want to do and do something else" but in this case, I'm guilty of being "that guy." As for a tutorial: http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#getting-started There's sample projects here: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples
Hm, could it be an option hidden somewhere in Eclipse's preferences? There's so much pages there, who knows...
A couple of good tips there (#1, #4 and #7), but also a couple I'd not call "tools java develepers *should* know". ElasticSearch, Cloud monitoring, Mico Web Framework? What if I'm developing a line of business desktop application application for local deployment? I'd say they are more services and applications, than *tools*.
I would definitely use takipi if it was not cloud based - my company will not let me use even a trial of takipi because the app can send all debug data to the takipi's creators, which is a big concern.
Oh, I didn't read that far into the program. I've never seen that type of syntax in Java and don't think that it's correct. If it is valid it's something I've never seen and something I don't know about.
I realize this is recognized as trolling, but honestly my productivity increased about four fold by switching to IDEA.
Downright hating on Java is okay, but some critical remarks about Python is immediately trolling?
Warning, somewhat of an ad for Takipi.
If Java would have been slower you'd probably didn't stop mentioning that fact. But now that Python is so much slower performance suddenly doesn't matter? Strange...
Is this similar like ICU4J? They also have currency, but their documentation is really lacking.
Static typing is really useful for catching bugs, as are junit/spock tests. Good tools (intellij) allow you to do refactoring on massive codebases. Speed on Java is good enough for most things, where occasionally Python hits some blocks. I can still run java 1.3 code on java 8 jre. Legacy code is surprisingly frequent when you get to the less used parts. Also, there are like a billion libraries for java, everything you need for corporate life, that you can get and used by just adding them to maven/gradle. That way you don't need to worry about installing dependencies on all your servers. That's not to say we don't use python at all. Ubuntu uses it for upgrade scripts, occasionally it make a good scripting language.
Just another FYI the Eclipse compiler is not the same as the JDK one. What this means is that the bytecode generated by Eclipse can and will differ from the JDK. Subtle issues can arise from that when debugging issues. Netbeans uses the standard JDK compiler
Thanks for your feedback.
This blog gets spammed by the OP on this sub, I honestly think it should be banned.
I'm afraid you're not expressing your problem clearly enough for me (and if you can't explain it clearly to me, its no wonder you cant express it in the form of a computer program...) So you have a set of points, P(1) ... P(n). Do those points represent the path of the moving object, or is the moving object's path another set of points? You want to find the azimuth from each point in P to ... where? The next point in P? From every point in P to the current location of the moving object? Something else? 
Ye, quite a mess that in FLOSS version you can't hot reload configuration...
&gt; CTRL + Shift + R: Open a dialog box where one could write initials of Java classes/interfaces and the list would appear showing all the matches. Regular expressions work pretty well and helps to find resources faster. Not exactly. It doesn't really do regular expressions (it uses * (for any string and ? for any char). Also it's used for opening any resource (file) in the workspace (xmls, property files etc) not just java types. Because of this it cannot be used to open a type inside a library. For that the preffered way should be CTRL+SHIFT+T (Open type). My personal favourites are: ALT+SHIFT+R (rename) ALT+SHIFT+S then R (generate getters/setters) ALT+SHIFT+S then H (generate equals/hashCode) ALT+SHIFT+S then O (generate constructor from members) ALT+SHIFT+S then C (override superclass constructors) (actually, pretty much the complete ALT+SHIFT+S menu is very useful) CTRL+SHIFT+F (format) CTRL+7 (comment selected line(s), works only in java) CTRL+SHIFT+C (comment selected line(s), works in a lot of file types e.g. java, xml, jsp, html, property files) CTRL+D (delete selected line(s)) F3 - jump to the declaration of the element Not exactly a keyboard shortcut but ridiculously useful: hold CTRL while clicking on a method call it will take you to the method declaration (pretty standard). However, if you hold CTRL and position the mouse cursor over the method call a small dialog will appear that will offer "Open declaration" (same as control click), "Open implementation" (it will open the implementing method directly, if only one such exists in the workspace, otherwise it will open a dialog offering a choice) and "Open return type".
I see how i am not expressing this clearly. Basically I have an excel spreadsheet for instance, first row is time, next is x, next is y, last is z. Time is in seconds that the object is moving. X and y is latitude and longitude and then z is elevation. There are lets say from 0 seconds to 8.6 seconds for the time interval and the corresponding coordinates for each of these. The object that is moving is a plane for instance traveling from point a to point b from the start of 0 seconds up to 8.6 seconds. I am trying to figure out how to calculate the azimuth with the given times and x,y,z coordinates at each time interval that is in the excel sheet for instance. Does this help out a little more? 
When its an unfounded remark like Python has far less cool libraries, yes. Both Java and Python have a slew of great libraries.
Yes, you can. 
Can you shed any more light on this? Yes you can while being helpful isn't very clear on what exactly you can do.
I just mean as in I get bored, I've learned enough of each language to do basic things and understand it but never made it past that hump as another language caught my eye and I moved to something else. I've got basic experience with numerous languages.
&gt; I just mean as in I get bored, I've learned enough of each language to do basic things and understand it but never made it past that hump as another language caught my eye and I moved to something else. I've got basic experience with numerous languages. I said the same to nixon but: I just mean as in I get bored, I've learned enough of each language to do basic things and understand it but never made it past that hump as another language caught my eye and I moved to something else. I've got basic experience with numerous languages. 
I made a bot to beat humans in candy crush. Does that count?
Sorry for all the hate you're getting in this sub, maybe try /r/learnjava or /r/learnprogramming. Good luck.
Last time I looked all the auth stuff was not allowed either. 
What does this even mean?
[Spring Boot](http://projects.spring.io/spring-boot/) creates fully functional restful web apps very quickly (by default tomcat is embedded, but it can also generate a war) [Spring Roo](http://projects.spring.io/spring-roo/) is another option You may also want to consider [Grails](https://grails.org) (although it uses groovy) is another great option to quickly produce web apps in. 
Whatever tool set you're most familiar with. If none, @stickybit1 is right — Spring Boot or Spring Roo. I'm very familiar with Spring MVC, so that's the way I go for mini web apps.
How would it know that you're trying to make a constructor? It could be a field or method.
Jaden Smith, is that you?
Spring Boot works for me.
Alternatively if you dislike Spring there is dropwizard.io
I'm assuming that you're looking for runtime usage statistics from within a given application? If that is the case, then check out the EMMA project. http://emma.sourceforge.net/index.html There's also the JaCoCo tool - a replacement for EMMA...
Reading your post felt like looking in the mirror. I'm doing the EXACT SAME thing. I burned through all of the new Boston videos and along with slowly working through head first, started with the Java class on udemy... My ultimate goal is to get into Android development but for the time being, need a project idea as well to start putting my "Java skills" to the test... I keep trying to come up with ways to create a poker game but it just seems so incredibly difficult... Would you be interested in challenging each other and working together to learn? 
If you're looking for something simple, Spark is a new framework similar to ruby's sinatra.
The mirrors reflecting back the same image on my end. My two sources are The New Boston and Head First Java. I'm sure you're at least a bit ahead of me but I guess I wouldn't mind if you or someone else were to lead the way.
I encourage you to check out RestExpress for the RESTful api portion of your web app, especially if you're interested in decoupling it from the other main parts. https://github.com/restexpress
With java? Maybe with groovy but not with java.
We did some internal benchmarking and they were quite similar in our scenario. Hazelcast won because it is on JVM (lib, tool, mocking). Also, the clustering support is native in hazelcast while with Redis you need some infrastructure (i.e. load balance with Twmemproxy) or wait for the native cluster now in development to be done. That said, on the long run Redis will win because Hazelcast is sadly frucking expansive (i.e. only paid version has hot reload configuration and off-the-heap storage). edit: spelling.
I won't say you can't start with a game right out of the gate, but they can be fairly complex beasts especially if you design it poorly. You might try to do some one-off projects that either serve no real purpose but might be fun or a one-off that just does some basic computer chores for you. Maybe write a program to find the largest file on your computer, the longest filename, the longest path and filename, the average file size on your computer. Write a program to organize that dreadful folder you've just been stuffing random files into all these years. Write a program that reads in all the pixels of an image and outputs a new image sorting the colors by frequency or lightest to darkest... make it threaded so you can run it on multiple files at once. Apps that you'll likely get working and once they work you won't need them again. You'll learn a lot just by making mistakes and trying to figure out what the IDE is telling you. Learn to write unit tests for these small applications so you can see how unit tests work. Learn how to use source control. These apps sound easy and ultimately they are, but you can learn a lot by doing these little concentrated things.
&gt; The learning curve could be steep if you are not used to it. There's a learning curve for sure, but I don't think CDI is particularly harder to learn than Springs DI and neither is JSF harder to learn than Spring MVC. They all have some very easy to follow tutorials in which you can set up a basic page very quickly, and with all of them if you're a total beginner you'll probably get stuck for a short while on something that later on seems totally trivial ;) A somewhat older but thorough tutorial for JSF: http://balusc.blogspot.com/2011/01/jsf-20-tutorial-with-eclipse-and.html A very quick setup for JSF: http://jdevelopment.nl/minimal-3tier-java-ee-app-xml-config For much more about JSF see: https://jsf.zeef.com For spring see: https://springframework.zeef.com (check out the Tutorials and Spring Video Tutorials) 
Take a look at this Sample crud application: http://jdevelopment.nl/sample-crud-app-with-jsf-and-richfaces Just check out the code and modify where needed. I've written a small tutorial about how to setup a crud app as well, see https://henk53.wordpress.com/2012/04/15/jsf2-primefaces3-ejb3-jpa2-integration-project (its main purpose was comparing Spring/JSF to Java EE/JSF, but it's useful as a standalone tutorial as well) 
Why's that? I've not used Grails, but I'm interested to know if it's any good.
I highly recommend the Play Framework to you.
Practice with small projects like on + /r/programmingprompts + /r/dailyprogrammer + [Project Euler](https://projecteuler.net/) Then gradually begin to work on larger scale projects - try to find something that interests you and build an application. The only thing that you can do to improve is to practice.
You'll get help faster if you post the actual exception (along with the initalization of your counter and stuArrayOrig).
I don't know how they're handled in real life applications, but I recently had to implement role-based access control in a pet/test project. Perhaps it can give you some ideas. What we did was create 4 tables in a relational database: 1. Role table (contains the roles such as "admin") 2. Permission Operation table (specifies the operations that may be performed on objects, such as "read" or "write") 2. Permission Object table (specifies abstract objects that represent whatever you want them to represent in your application (e.g. "user administration")) 3. Access Right (List of tuples of the form (role, object, operation), specifies the operations a role may perform on the specified object) The source code part looked as follows: 1. A separate authorization service had access to the role of the currently logged in user and used the aforementioned tables to check permissions 2. All other parts of the systems simply used an ENUM-like structure to call the authorization service. Because the role of the currently logged in user was localized to the authorization service, the other parts of the application simply had to call the authorization service as follows (pseudo-code): service.authorize([{ object: "user administration", operation: "read"}]) The square brackets represent an array. In other words, to ask if a user was allowed to perform an operation, one would simply give the authorization service a list of permissions one requires. The authorization service in turn would respond with the allowed permissions (i.e. a subset of the requested permissions). It's not perfect by any means, but I found it useful because of the following reasons: 1. Role/User knowledge is localized. No one else in the application had to specify the actual role required for a permission. 2. Implementation of the role/permission tables was also localized to the authorization service. 3. Simple interface. You only had to send a set of permissions and you'd get the permissions that were allowed in return. Hopefully this helps and as I said, it's not something that was used in a real life application so it probably has some design flaws.
The first program I wrote was a hangman game that was pretty basic at first. As I learned more Java tools, I improved my hangman program. Eg: * When I learned about FileIO, instead of a list of a few predefined words for guesses, I parsed a txt file containing a paragraph into an ArrayList and used those words for guesses instead. * When I learned about TreeSets, I put the player's guesses into the TreeSet so they can't guess letters they have already guessed. * When I learned about Regular Expressions (Character matching), I made it so that non-supported characters like &amp;, #, 2, etc could not be guessed. 
You might want to look at [Spark](https://github.com/perwendel/spark)
I think he's more interested in reports on buttons clicked, menu's opened and that sort of stuff. Right, OP? 
There's actually a project named precisely that: [jgoogleanalytics](https://github.com/siddii/jgoogleanalytics). Also [this SO-question](http://stackoverflow.com/questions/5489718/what-are-java-libraries-for-collecting-storing-presenting-application-metrics-st) might help.
I would not recommend rolling your own access management application unless you want to do it for the challenge of learning something new. Rather integrate a tried-and-tested solution instead of introducing potential security risks in your home-grown code. See [these](http://www.manageability.org/blog/stuff/single-sign-on-in-java/view) Java security solutions to get you going. We have had a lot of success with Shibboleth.
Please update me if you happen to find it.
I agree there may be some use cases where the java APIs abstract better over platform behavior. One thing I really like is python's help function, which lets you read the docs without leaving the REPL. It makes for awesome discoverability, as you can directly try out stuff as you read.
Could you help me understand why we need JOOQ framework?
Are there any good beginner's guides for javaFX?
I'm not sure I understand you.
Look at Java EE 7 with JSF, PrimeFaces and OmniFaces. It's about the easiest thing to get started with and in case you do run into issues you have be biggest chance to get your question as answered at stackoverflow or other places. Look at the "Java EE tutorial" from Oracle. It's a very throughout book completely freely available! For JSF google BalusC. He has a blog with a lot of info and pointers about JSF.
Creating a program to organize a folder or file truly sounds beneficial. I have an unorganized folder that contains a bunch of unnecessary .txt files .
The only one of your points I could follow was the ArrayList , I cried a bit...
Perhaps you're right if the numbers you provide were correct. Unfortunately it's not (always) the case. What if Java code takes 10 minutes to write thanks to the goodies in the standard library like @Transactional, @Asynchronous and many other things, where Python maybe takes an hour or even much longer since these things aren't provided by Python? Then what if we aren't talking about 2 minutes vs 10 minutes (let alone 5 vs 10), but 1 second vs 2 minutes? With 1 second computation time things are pretty much instant. Enter 2 minutes and you're going into batch computation mode. It's a HUGE difference!
If that's the case then we need to make something happen. I should get back to this book right now.
Nobody would care about such numbers, but with Python it's more like 1 second for Java and 2 minutes for Python. Remember that for pure computational stuff Python can be anything from 100x to 200x slower. 
JSF with PrimeFaces is a really easy way to go. If you use Netbeans you can generate a CRUD application to get you started. Netbeans tutorials are great and they cover all the major frameworks. Even if you use a different IDE it is work it for the tutorials. The install is just an .exe and it will install an configure Tomcat and Glassfish for you if you like. Do not let anyone tell you that you can not run JSF or Java EE on Tomcat. All you have to do is include the .jar file in your application. PrimeFaces Component library with code http://www.primefaces.org/showcase/index.xhtml Video Overview https://netbeans.org/kb/docs/javaee/maven-primefaces-screencast.html Other tutorials https://netbeans.org/kb/index.html
You acknowledge that everyone is tired of seeing this exact same post, then you post the exact same question. You can easily search for one of the hundreds of other times this has been asked or use Google. 
You do not need a Java EE server to run CDI or JSF. You can run it on Tomcat. I know this because I have a production application that runs on Tomcat that has been deployed for 5 years. All you have to do is include the JSF and CDI jar files in your project. There is nothing heavy about it. In fact it is a much simpler set up with a lot less configuration and dependencies compared to Spring. There is also Open EJB and TOMEE as other options.
Create a project around something you are interested in. Maybe make a program that loads files from your favorite game. How about a program that accesses the Steam api, and then does stuff with it. http://steamcommunity.com/dev
I'm not sure how to use Google or search.
Hazelcast support Spring &gt;=3.1 *cache* bean: http://www.hazelcast.org/docs/2.5/manual/html/ch14s03.html
I haven't written a pure Java web app since I found Grails 2+ years ago (and hardly any pure Java since getting into Groovy). Grails "just works" and is easy to understand. Everything is done by convention over configuration and the magic behind the scenes just makes it work. The auto-injection of services, domain objects, etc. means very little traditional configuration. You can write plain Java if you want, all Java is valid in Groovy. Some of your classes will technically be Groovy classes (controllers, services), but the actual code in them can be pure Java. I do use Intellij as I find it vastly superior to any other Java IDE. Add to it that it has tremendous Groovy/Grails support and it's wonderful to work with. Anyway...Grails is definitely something to look at. Also, once you start using Groovy you may find yourself poking yourself in the eye when you have to do a lot of pure Java.
A create-your-own-adventure game is a simple thing to do, good for a beginner: Story, and then a few choices of what is to happen next, which leads to the next story-and-choices-node. It involves a simple-text data file, a file loader, a file parser and hence ram database (HashMap, for example), several types (story element, choice), and it's easy enough to practically guarantee success. Also, you can re-use it all the time: Just have your siblings or friends write a new story file, use the same program to enjoy. You can later extend the program: The player can have character stats, and you can switch into admin mode and write the story while inside the game, then the file is saved again. If you like the idea and do this project, then you could also approach more complex text-based adventures. There could also be some graphical representations, e.g. you could have a procedural graphic generator that turns a mood-variable into a simple face image. Useful for interactions with NPCs. You could even program a procedural weapons/item generator, and even have those drawn procedurally.
I struggled with this for quite some time as well, what finally got me over the hurdle was to take a step back, because I kept over-estimating myself. Make simple things that you can finish first. Anything works. Make a simple address book that just keeps thing in memory. Then make a tic-tac-toe game. The best part about it is that every thing you learn while doing, sparks new ideas and at some point you just become self-driven
Storing security permissions is the easy bit. How you store them depends on what kind of granularity you're looking at. Do you want a single user to have a single role with a fixed number of permissions? Or can users have a different role in different contexts. For instance, if you have some kind of international corporation, a user might be an administrator in his branch, but a guest user in another branch. There's an infinite number of variations on this. The most complex setup I've had to do featured several dimensions: time, location and type of building (bridge, office block, ..) on top of the usual user/role setup. You just decide on your granularity and then find the easiest way to store it. The tricky part is when and how you check a user's permissions :-)
Yes that is the statement I was referring to http://hg.python.org/peps/rev/76d43e52d978 : &gt; This declaration **does not guarantee** that bugfix releases will be made on a regular basis, but it **should enable volunteers** who want to contribute bugfixes for Python 2.7 and it **should satisfy vendors** who still have to support Python 2 for years to come. It is basically a non guarantee to keep people from jumping of completely.
Go to Spring.io/guides. You can be up and running in under an hour. 
The official oracle docs are pretty good to start with. Just google for them. There is a "Hello world!"-tutorial and examples for each element you can use in javaFX. You have two possibilities when using FX. You can work with plain java code or with the scene-builder, a WYSIWYG-Editor that produces xml-code. If you really want to learn java, I recommend using the plain java. It's not as intuitive, but you learn a lot about how java works
Sure! Some reasons why: - Because JDBC is a pain - Specifically when using stored procedures - Specifically when using user-defined types - Specifically when using table-valued functions - Because string-based SQL doesn't compose (i.e. it's hard to write correct dynamic SQL) - Because jOOQ-based SQL operates on an in-memory AST that can be transformed by you using "plugins". Some use-cases: - Row-level security (adding additional predicates to INSERT, UPDATE, DELETE, SELECT, MERGE statements) - Soft-deleting (replacing DELETE by UPDATE .. SET deleted = true) - Multi-tenancy (on a schema or table level) - Active records are very convenient, and cover 90% of all CRUD use-cases - Because the 16 supported databases are completely (or worse: subtly) different. As soon as you want to support 2-3 databases, good luck with string-based SQL - Because SQL is type safe, and the Java compiler can help you compile jOOQ-SQL (not in the case of Nashorn, agreed) - Because you probably don't get these SQL things right, right away: - [SQL Server's peculiar insisting on ORDER BY correctness](http://blog.jooq.org/2014/05/13/sql-server-trick-circumvent-missing-order-by-clause/) - [Standardisation of sort indirection](http://blog.jooq.org/2014/05/07/how-to-implement-sort-indirection-in-sql/) - [Various JDBC quirks that you shouldn't need to worry about](http://blog.jooq.org/2014/04/14/were-hacking-jdbc-so-you-dont-have-to/) - [Boolean data type compatibility](http://blog.jooq.org/2014/02/25/the-jdbc-boolean-compatibility-list/) - [SQL transformation for row value expression emulation](http://blog.jooq.org/2013/05/03/sql-query-transformation-fun-predicates-with-row-value-expressions/) - ... In short, you should consider jOOQ whenever you plan to write a SQL-centric application (as opposed to a domain-model-centric one, where JPA is the optimal fit)
Adding to the link, Acegi is now [Spring security](http://projects.spring.io/spring-security/). If you are already using Spring framework, this is excellent choice. Easy to plug any authentication provider. Frameworks like spring oauth, built on top of it, are bonus. Also look at [Apache Shiro](http://shiro.apache.org/) Take UnlikelyExplanations advice, don't build a new solution unless you have a strong reason to do it. 
sorry, still not clear. So you have an object, such as your plane, moving between your sets of points, taking a certain time to move from each point to the next. I get that bit. But you keep saying you need to "calculate the azimuth" without specifying what you want to calculate the azimuth of. An azimuth, as you presumably know, is a bearing (angle) from one point to another. You want to calculate the azimuth of what from what? Let's make up some data, to help me understand. Say you have these initial points: | lat (deg) | lon (deg) | time (sec) | |--|--|--| | 0 | 0| 0 | | 1 | 2 | 100 | | 2 | 5 | 200 | | 3 | 10 | 300 | Using that data explain (as if I'm 5!) what you need to calculate. I'm happy to help out, I just don't (still) understand what you need to work out. 
I haven't played with Apache Shiro yet, but we did a desktop review of it and it looks awesome.
This. Do not reinvent security. 
One other project I did a long while back was I took a black and white image (it was a scanned text document I think) and converted every pixel to a single hex value 0-F based on how dark/light it was. I then output these values into a text file in the same manner as the pixels. It was neat since you could 'see' the image in the text file. It was crude ascii art. I also read that particular image in as a byte stream and read that image types specification document and parsed it that way instead of using any existing library.
First off, remember that there is a reason you don't just graduate after first year ;) You will be guided in applying the fundamental concepts to real world applications in your future classes. In fact, one good way to move forward would be to look at your upcoming class schedule and start working on those topics now. Also, don't be in too much of a rush to go forward. I know the code you write in 100 level CS courses isn't very interesting, but a super firm grasp on those concepts will pay off time and time again (and any misunderstood items will kick you in the ass over and over). If you have plenty of free time, you might want to try some Android programming. Its a bit of a jump off the deep end but once you get the hang of it you can whip up little apps pretty quickly. 
Now I feel like a `horse's ass` for giving you the answer unknowingly. Here I was just trying to give you suggestions thinking, oh the error has got to be further down the road.
Unfortunately it takes many middle managers a long time to figure this out. 
This is not a "fix", but a work around. As /u/soapheader pointed me to, I used saxon9 as my XSLT processor rather than the one built into the JVM. The static method that I needed most was base64, which it so happens is implemented in saxon9 so I do not need to use an extension but call saxon9's implementation of the base64 function built into XSL.
the chart you made is pretty much all the information that i will receive and possibly the elevation of the object, so you can add another column for elevation which would be how high up it is from the earth. From that my understanding of azimuth was from this wikipedia article http://en.wikipedia.org/wiki/Azimuth I guess I am not grasping the concept of the equation or how the azimuth is being calculated for this moving object. It seems like they are using it from a point on earth and looking up at a satellite and calculating the azimuth in that manner, but in my situation all that i have is an object that is moving with the information similar to what your spreadsheet looks like and we are just trying to figure out where this plane is looking at or the azimuth as it is moving at each point. I am sorry that this is becoming confusing, I am new to this project and haven't worked with azimuth before, it has always just been latitude longitude time and elevation, now I am trying to make it seem like as this object is moving we are also trying to figure out where the actual plane for instance is moving with respect to the current position that it is at each given time. I appreciate the help and I hope that this might clear some stuff up a little. I am also trying to look into whether or not this is possible with Matlab.
now i feel like a complete cunt for not posting that i found my solution
Of course, the choice of programming language should vary with the workload. That's why I will sometimes use python scripts to generate Java code for cases where I cannot otherwise deduplicate code paths.
Now I feel like a `dickhead`, for making you feel like a `complete cunt`.
I'm surprised that nobody has mentioned [vaadin](https://vaadin.com/home) yet. You should take a look at their samples and give it a try building a very simple app, and you will be surprised at how easy it is to get a webapp up and running.
You might want to look into using a Map. If you used a map of name -&gt; state, the updated code would look something like this. Map&lt;String,State&gt; lookup = new HashMap&lt;String,State&gt;(); State AL = new State(); AL.name = "Alabama"; AL.surroundingStates = 3; AL.population = 4822023; lookup.put(AL.name, AL); Scanner input = new Scanner(System.in); System.out.println("What state are you starting in? "); startingState = lookup.get(input.nextLine());
&gt;Map&lt;String,State&gt; lookup = new HashMap&lt;String,State&gt;(); In Java 1.7+ you can just do: Map&lt;String,State&gt; lookup = new HashMap&lt;&gt;();
 Yeah, not arguing, I was just giving my experience as a comparison to yours. By using IoC, @Autowired, etc. you're doing some "magic". Grails just abstracts it out a bit more. You do have total control over it if you want and it's well documented on how to do it. I am very familiar with Eclipse (used it for years). I have nothing against it, but I still think Idea is better. Again, that's a preference thing. Idea's Grails support, however, is superb. Groovy is awesome. Like most things in Groovy, if you don't want to use the optional typing, don't. You can just as easily define the type ahead of time and still make use of the other features. Nothing in Groovy is an "either or" proposition. I love writing quick scripts that can leverage my Java libs (internal and external). 
I really don't see how this is any different than someone who has an app running on Java 1.5. Eventually support will end. Try keeping a Java jnlp app running with all the breaking changes oracle has made the past few months.
Usually when I pick up a new programming language I start by writing a Mandelbrot set explorer. It's pretty simple but covers a lot of stuff from basic syntax to more complex stuff like display, input and threads, and I just love the Mandelbrot set so it keeps me motivated. In the end a programming language is a tool, not an ends to itself so pick something you're interested in.
It really bugs me when people ask these question. It instantly tells me whoever is asking it is over their head.
Additionally you might consider changing int surroundingStates to List&lt;State&gt; surroundingStates This will make it easier to find that quickest path.
Anything you can do in Python you can do in Java. Here are some differences (though some of these are controversial): 1. Python is more expressive. A Java bot will likely be 2-3x more lines of code than an equivalent Python one. 2. Java requires a longer learning curve. (You have to learn not just the language, but the tools and libraries) 3. If using an IDE, Java is easier to maintain (refactoring, code completion, etc.) 4. There are more QA tools for Java (more compile checks, static analysis, etc.) 5. Java performance is better. In a nutshell, you'll initially develop faster with Python, but a Java bot will be easier to maintain long term and will perform better. If you go with Java use an IDE (like Eclipse) and use Maven (or Gradle). Another option is to use Groovy. It is dynamic like python and more expressive than Java. It is meant to be easier and more convenient than Java. It is very similar to Java and it runs on the Java Virtual Machine.
God I hate hibernate.
The original video is called "Javapocalypse" https://www.youtube.com/watch?v=E3418SeWZfQ
Thank you! i wasn't able to find the original! :D
I have had changes in 1.6 -&gt; 1.7 that broke an app. Specifically oracle changing the sort algorithm to TimSort. If your app had a bad compare method it would still work fine in 1.6 but break in 1.7. And the kicker is that timsort was changed specifically so that oracle could sue Google over code copying. The code had been around since before 1.7 but sun decided not to make the change for backwards compatibility. Things changed when Oracle saw a chance for.money, backwards compatibility be damned. For jnlp I'm referring to them forcing new requirements on the Manifest.mf and signing. When you have a gargantuan app they made things really hard and essentially made jnlp all but useless if you don't disable Java security stuff which most people aren't willing to do. TLDR: Javas support isn't flawless.
he said roles, that ain't too hard. He didn't say he's trying to write his own cryptography library.
If you have a solid grasp of the fundamentals, then take this Algorithms course: https://www.coursera.org/course/algs4partI It'll give you some neat stuff to learn, and you'll end up taking a class on this exact info in the future, so you'll have a leg up.
Well I probably should've clarified, I have only been studying Java ~ 2 weeks, this application is just going to check distances between capitals, not really anything too real-world applicable. But if I did decide to make this a nice function complete app couldn't I just use Google Maps API? Sorry if that is a really dumb question!
It entirely depends on how fast you want it to compile and what you are actually creating. If you are creating console programs then an old laptop will do. If you are doing a lot of gui applications with a lot of parts and processing then something better. Games? Jump it up a notch again. 
I do mostly console apps and the like, and I'm still working on my Intel Atom, SSD and 2GB of ram acer I picked up a few years ago. I would recommend something a little faster that that, but you'd be surprised at what little it takes. There's a lot of decent ultra portables out on the market now, I'm sure you'll be fine with most of them. SSD is definitely worth it.
Thanks for your reply. Would give it a try and post a blog on the experience.
Your classes aren't marked "public". If you add that (to at least the HelloWorld class), then you should be able to run your test.
Unless it's a requirement, I suggest not taking an OOD class. Took one at MCLA and learned nothing. Continued my CS education and the concepts of OOD eventually came to me through practice and projects.
Great, looking forward to that!
Darnit, this plot is horrible. Let me make a WAY better one: The year is 2016, and Obama has been reelected after some major rule-bending. His first order of business is to make the country secure after the 2014 Empire State Building bombing, which used a breach in the security system to fill the whole building with natural gas, and detonate it. Obama calls on the world to eliminate all that is not secure, as the empire state bombing was the last straw. Immedietely, the hipsters of the world unite in a new force called the **neo-hate-java-bandwagon**, which is fully supported by the government. They sweep across the country from the center of hipsterism, Portland, Oregon. Millions of innocent java users are wiped out. Many are sent to prison camps in which they must use C# exclusively for the rest of their short lives. Chaos ensues throughout America. The government, in seeing that this new push for security has gone too far, reacts with violent force. They use atomic weapons, and throw all of the midwest-west of America into a radioactive wasteland that will take centuries to cure. But, unbenownst to the US, the **neo-hate-java-bandwagon** is still very much alive, and ready to kill. Fast forward 15 years, the entirety of the world has dwindled into chaos without Java. C# is growing in popularity, and is being used for security, but it is too late to change; all the code written in java would take centuries to port. Mankind watches grimly as hackers around the world take advantage of the broken Java/C# code. Extremist **neo-hate-java-bandwagon** members exploit the atomic warhead launch codes, and destroy the entire world, while advertising a safe haven on the C# installer. Millions flee into the safe haven, but the new **Java-rebellion-force** is only beginning. Throughout the 15 years of chaos, the once crushed **Java-rebellion-force** has strengthened, and spread, slowly gathering all information on the flaws of the world's now most popular coding language, C#. It is approximately 5 hours to ultimate doomsday, and the **neo-hate-java-bandwagon** is celebrating their victory, their clensing of the world. Many a C# hello world programs were made, but unbenownst to the villains, the **Java-rebellion-force** is ready. They all gather around the haven, and easily hack into the C#-made security system. The C#-made drinking/celebration system is hacked, so that the drinks are now tinted with cyanide. It is 1 hour until ultimate doomsday, and all of the sudden, 1 by 1, the **neo-hate-java-bandwagon** members begin to die, drowning in their own C# tinted blood. The entire force is killed off, and all that remains is the launch codes. But the launch codes are not using the easily succeptable C#. They are using a corrupted, evil version of Java. In order to hack into this, they must take all of Java with it. With reluctance the **Java-rebellion-force** destroys the corrupted Java, and also Java. 10 years later, the world is utterly exausted, but there is hope yet. There is a rise of a variation of Java. This variation survived the great purge. This is called the **Open-JDK**. With its help, the world slowly rebuilds, and forms a new **JEarth-Empire**. It becomes the height of mankind in the 2100s-4400s. The moral of this story, is don't be a **neo-hate-java-bandwagon** member, and use Java! Also, **Java is awesome!**
You should know these, they are the swiss knife of every Java programmer: Maps (They map from a key to a value, so they have two fields per entry): * HashMap (unsorted members) * TreeMap (members sorted by natural order of keys - think "implements Comparable") * LinkedHashMap (members sorted by insertion order) Lists (They have one field per entry - just like an array): * ArrayList (Adding to / removing from the end of the list is fast, other places are much slower.) * LinkedList (Inserting and removing entries at any point does not have overhead.) * TreeList (Entries are auto-sorted according to their natural sort order - think "implements Comparable") And I guess you know the simple array. e.g. "int[] numbers = new int[10];" - Its size can not be changed. The Arrays class has a lot of helpful functions for arrays.
can dropwizard create normal dynamic website like Spring boot does? (not REST oriented)
*List* implies order, so you'd rather want a *Set*. Of course, you should then implement the relevant methods (hashCode and equals for *HashSet* or *Comparable* for *TreeSet*).
From what I can see: * the variable response on line 8 GameGui.java is not declared; * The string [command] on line 11 of Parser.java is split; which means it is expecting to be returned to a string[] but is actually never assigned to any variable; which is probably why the compiler hasn't kicked off any warnings. Not only this; but the string [command] is split by itself; which will always result in the same output as the input(string[0]). * Some possible unintended functionality with the split command; not that it matters too much with the logic in this code: I believe that the string [command] will be compared between one instance of possible uppercases; and another instance which is always lowercase; however i am unsure as i have not tested/compiled this code. * Finally your readCommand function should ideally be declared as a string and return the value from your toLower/split; for whatever this purpose is. Hope this helps. Someone correct me if I'm wrong. 
you are passing in response, but response doesn't exist, you are approaching this incorrectly. If you want user input to come from the console, than you don't need to pass in a response to the method, just do parser.readCommand(); then in the readCommand() say String command = console.next() or something
You wrote: public void readCommand(String command){ command = console.next(); command.toLowerCase().split(command); } This is a prime example for my mantra to make all variables final, as far as possible, *especially* method parameters. Because here, you're giving the method an argument - but you're immediately overwriting that variable with the console input, so you could as well remove the parameter from the method. Well, and in your GameGUI class, you're calling that method with the argument "response" (for no reason, as I pointed out), but I don't see that variable declared anywhere. Since we're not seeing all code (e.g. "public class GameGUI {"), we can only guess in this regard. Side-note: Since you're creating a new instance of the class the main method is in (GameGUI), that insinuates that you're working with a window. Remember to run all Swing commands (e.g. creation/configuration of a JFrame) on the AWT Event Dispatcher thread. If the application is simple enough, you can just run the whole thing on the AWT thread right away, e.g. by doing this: public static void main(String args[]){ // Java 8 syntax (If you're independent e.g. because you're coding this in private, I suggest that you switch to Java 8. Lambdas and method references are just awesome.) SwingUtilities.invokeLater(GameGUI::game); // Java &lt;=7 syntax SwingUtilities.invokeLater(new Runnable(){ @Override public void run() { game(); } }); } private static void game() { // Start coding the whole game here. } 
in addition to that, i'd recommend using maven for this and future projects, so you don't have to deal with clunky things like assembling classpath by hand.
when it comes to hardware, i'd recommend getting something with lots of memory - modern operating systems can cache disk files in memory, and that speeds up compilation/execution considerably. an ssd is worth the trouble too.
Dear /u/robertp1984, check this out: http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F
I maintain an app that broke the contract I had nothing to do with how any of the code was written to start with. My understanding is that this was not a major speed increase, again Sun knew about it and didn't use the code because they felt breaking other people's apps wasn't worth the speed increase. It was written by Joshua Bloch who left for Google before the Oracle got it. And it definitely came up in the lawsuit.
This [thread](/r/gadgets/comments/27krif/what_are_some_pros_and_cons_for_a_samsung/) shows a lot of options for a chromebook. You can VNC into a better machine or even install Linux alongside ChromeOS. Maybe even an [AWS workspace](http://aws.amazon.com/workspaces/).
The linked article is better, Git or similar, is pretty essential to the workflow described, this may be more painful with SVN, where branches are a bit more of a pain and there are no local commits.
Alternatively, you can use [spring-loaded](https://github.com/spring-projects/spring-loaded) with [spring boot](http://projects.spring.io/spring-boot/). Apply spring-loaded's java agent when you want to run spring boot's main class from IDE in order to enjoy hot reloading similar to Grails.
What do you mean it being "expensive"?
I'd have gone for method 3 inside of a single VM. You can get some fairly lightweight vms running lightweight Linux distros. The difference in perofmrance would be nearly neglidgable. This way, you don't expose anything about your true stack and it is virtually impossible for code to escape that sandbox. Their problem was instantiating a VM per client.
Amen brother. As someone who has had to implement an access control system due to existing solutions not meeting our needs: Don't. The product I worked on had a very complex access control setup and even though we started from a good solid base (Spring Security) we ended up rolling a *lot* of our own. It sucks. It's exceptionally hard to get it right, and for every hole/bug you think you avoided introducing you probably added one for a harder-to-hit edge case. There's a reason why doing it well requires that you audit the crap out of it... (As an aside, our system is now relatively mature after three years of development, testing, audits, etc... but I wouldn't recommend suffering through that process if you can at all avoid it. Plus we probably still have some bizarro edge cases that we don't know about...)
Great video tutorial, thanks. Would I be mistaken in thinking that JSF is incompatible with tools like AngularJS and bootstrap?
He is probably talking about their charts component, which is is not free. But I wouldn't say it is expensive. But vaading itself with its core components is free.
Forgot to mention, Oracle replaced mankind with robots.
I think this is because Intellij IDEA launches gradle tasks in separate background process (daemon in Linux). So there is no stdin from which you can read input data.
Yes. Might have to switch to an updater process to update the primary JAR in case the JVM locks the file, but I don't believe that it does.
try read effective java, great book.
I do plan on reading that eventually but I feel like that book is more about good practices than a tutorial/guide/applications which is what I'm looking for. 
When I make a program which can ipdate I already have a second program which downloads the update deletes the previous version then runs the new update. Just less hassle than replacing class files. I always keep the current version in any type of configuration file.
Would that not be a prime use case for a pluggable type system (introduced in 1.8, but available for 1.7)? Also for 'real' value objects, I'd expect the possibility of having flat arrays og objects with multiple attributes being laid out in consecutive memory (like C arrays of structs).
&gt;Hi all, I am relatively new to both programming and java. Implement the simplest thing that will work and then stop and learn from any mistakes.
Java concurrency in practice. Fantastic book. Also try the o Reilly book on NIO, that was an interesting read
No. Really. Stop everything and read this book. Then learn bout concurrency - the enterprise patterns books are very good.
consider where row is initialized, and what it's value will be at the end of the inner while loop
I've tried moving both of the row statements all over the place and it usually just breaks, ending the output at my previous method. 
I think I see what you are saying, after the while statement the row will be at the max, so I need to re-initialize it in the for statement. but, if I add it to the beginning, before the int x=0, it doens't work as I'm intending.
I got it. I renamed the internal row count to countrow, and it works. Good enough for me.
Don't just move things around, that way lies madness. You won't know why something works even if it does, which means next time you need to do this you're no better off than this time. Add print statements that output the values of row and col inside your innermost loop. This way you will see exactly what is happening. Add more print statements at additional points until it all makes perfect sense. It is much better to watch what the program is doing than to guess st what it might do.
What are your actual goals? None of your questions have answers without context. My initial response was going to be to tell you that none of your questions matter much and that you should focus on learning the fundamentals of programming which will apply to any language you learn.
Go read the source for good open source projects or do tutorials. Last I checked Spring's pet shop is a good place to start for "enterprise" style code. Go read the source for Apache Lucene if you want more real world examples of algorithms and data structures done right in Java. Elasticsearch is trip but it is a good example of a multi-threaded multi-machine cluster. Read the code of the open source projects, read the issue tracker, pick a bug, and think about it. Write some code if you can. It doesn't have to be perfect. Just a start. Folks will help you work through it.
Actually, the JVM does lock the file on Windows unfortunately. 
Currently my application has a weird way of updating (When I get the time, I'll probably just move to an 'updater' app or such)... First, the app recognizes that theres an update, downloads the new jar file as "AppName-Updated.jar" then closes itself (Thus unlocking the file), and then a shell/batch script (Depending on the platform you're running, one of them gets executed) which removes the old jar, moves the new one back into place, and then starts back up the app (with a special flag that causes it to tell the user that it was updated.)... It's a very convoluted way of doing it, my personal recommendation though is to just make a small updater app that gets distributed (or automatically downloaded), and does everything for you.
I do not know much about those frameworks but I do not think they would be incompatible. Most people who use JSF prefer to use a JSF component library instead. There is something called AngularFaces but at a quick glance it does not seem to provide much. I do not understand the author's author's issue with writing AJAX for a JSF application. I have a fairly large application with a lot of AJAX and have written almost no JavaScript. That is an area where JSF really shines and is simple to work with. http://www.beyondjava.net/blog/angularfaces-jsf-beyond-ajax/
Even if you want to restrict yourself to an older language level (and I don't think that's necessary), you should still install the newest 1.7 (7) or 1.8 (8) jdk because anything older is no longer supported for security updates. You can pass in your desired language level to the compiler, but if you're not maintaining some legacy app that needs that, I would recommend you go with the current language level. 
Absolutely nothing happens? Is there any compiler output? 
Are you talking about the compiler or are you actually executing the compiled code? 
Java 5, 6 and 7 are quite similar. However Java 8, which came out a couple of months ago, has new and different concepts. You should not try to learn Java 8 at the moment if you are learning Java to get a job: most companies are very conservatives and switch to newer Java versions very many years after their introduction. You should however install Java 8. Your Java 5 programs will run without a hitch. If you want to make sure that you do not use Java 6+ features by accident, you can tell your IDE (eclipse, netbeans, etc) that you want to stick to the Java 5 features.
I assume you created a class "Main". That is not sufficient. You need a "main" method: for example, "public static void main(String[] args) { ... int i = utensilNumber(); System.out.println(i); ... }". By the way, the class that contains the main method can be called anything. It's actually somewhat weird to call the class with the main method "Main".
In general, people are willing to help, but make your code presentable. I suggest using "www.pastebin.com" and make sure you select the correct syntax. Feel free to attach your URL to my comment and I'll have a look!
You'd definitely need a second app or batch script etc. to change the original application (and that change should be an *exchange*, not an editing / swapping of classes, you should go for such a high-tech diff approach only after you're comfortable with that whole updating problem). To make it more elegant, you could store the updater.jar in you original .jar and put it on harddisk just when needed. Same for a potential batch script.
Part of the question is how much do you want to spend? Then do you mind used? For me (2 months ago) that was 1) as little as I can get away with. 2) No What I ended up doing is grabing a ThinkPad x201 with a i5 560M processer for around $160 on ebay. Dropped 8gigs of ram in it and a 240Gb SSD (crucial M500). The memory I had laying around which help with the cost so Now I have a really nice little throw around machine that I spent around $300 on total that really does the job quite well. And I really don't have to worry about it because it is not new and shinny so no one wants it. But if they did no big deal I don't have a lot in it and for what I saved verses new I can buy another one. And another thing this little laptop while not an ultra thin machine is still very light and has a great keyboard oh and I get about 4hrs with the small battery or 7 hours with the larger battery while running netbeans and tomcat. But then again I'm running ArchLinux on it so I'm not sure what you would get under windows. I do know that I actually get better battery life on a T410 (thinkpad) using linux than I do on windows. 
For convenience, and because I was curious, I edited your code slightly, and it's more readable as follows: static int utensilNumber() { System.out.println("How many knives and forks would you like?"); return new Scanner(System.in).nextInt(); } (Works nicely. If called, I mean.)
Ya, i think I might try something similar to this. I just wish that I had put more thought into this whole side of things from the start of the project but at least I'll know for the future.. Do you find that 3 batch scripts covers the three main operating systems or do you find yourself writing more for different distros etc?
Actually, it's just two scripts! [One for Windows](http://pastebin.com/re9xb1Cb) (Batch), [and a shell script which works for both Linux and OS X](http://pastebin.com/3zaDPDwd). As for needing multiple scripts for other distributions of Linux, I haven't had any cases of that being reported. Seems to work as long as the distro is using Bash as the main environment and of course has java on the $PATH variable. You're also free to take a look (and use whatever parts of it you want!) [at my updater class](http://pastebin.com/LWFEYajB) (Warning, like I said, things are done a little more extreme than they need to...)
I could not disagree more. I would argue that mutability is the heart and soul of object oriented languages because mutability fully uses inheritance and polymorphism. Java is not an imperative language, if you try to write java with an imperative taste you lose the flexibility we love. 
I think programmers should have the choice. Hence classes should be *lockable* so that all mutation methods / accesses are ignored. This could be implemented by programmers into their classes. But if this would be a language feature (myObject = new locked MyObject();), it would even be clear at compile time and in the editor. Methods would have to have a "mutates" keyword to allow Java and the IDE to restrict access to / hide those methods.
Isn't the immutable String class the reason we have StringBuilder? Because the fact that it's immutable makes it run much slower and take more memory to modify it than if it was mutable? Don't get me wrong I can understand why they made Strings immutable... because in the long run it mostly saves memory (Because so many strings are one shots) But... to make all classes mutable would be a disaster.... 
To quote the zen of python (another OO language): &gt; [...] practicality beats purity In many cases immutability allows cleaner design, *but* precludes object reuse. A second best solution I sometimes employ is to present a public interface without the mutation methods and keep the mutable implementation within the (non-public, maybe even nested) class.
It's just because String is made such way. Another approach is to share common substrings (but it is not so easy to implement). Also, benefits of immutable strings outweigh all drawbacks. 
My. God. Amazing. Who are you? Tarantino?
What technical limitation in the JVM would prevent you from having immutable objects? Clojure is all about immutable data (including objects, that map down to real Java Objects) and runs in a JVM. Also Clojure has immutable types without excessive copying.
I disagree that super classes cannot expose a contract to their subclasses. Such contracts can still exist perfectly fine (in fact there is a keyword[protected] specifically to perform an exclusive contract with the subclass.
&gt; It's not really something that can be solved at the language level, although you can provide some syntactic sugar for it. Are you sure? Do you have an example? Because I think it might be solvable at the language level. For example: If we have a getter and a setter, and the setter is marked with "mutates" (or what the keyword could be, could also be an annotation), a "locked" instance would make access to the setter illegal, it would even result in a compile error. If we have a "", "protected", or "public" String field, any access from outside a "locked" instance could only be read access. Also compiler level already. Some classes probably can't be defined "locked" at all, because their very purpose implies that they change "over time", but those are then not the topic of the discussion. I see, though, that having a field with a mutable object within the locked instance would be a problem. However, that would *implicitly* be locked, too. Implementation of the "locked" feature is, like in the class itself (See "mutates" methods.), a task for the developer.
Funny this is getting down voted, what I am describing is the direction modern web development is going.. like it or not. Google is also the entity behind AngularJs. Google is giving up GWT in favor of AngularJs, they didn't add javascript evaluation to its search engine crawler for nothing. 
Java EE being a nasty kludgy mess is J2EE thinking and you probably haven't touched it since. Spring was created out of peoples dislikes over the complicated mess that was J2EE. This is no longer the case and the spec has been drastically improved since those days. You should move on too.
In this comment, I explain the concept of object oriented programming: http://www.reddit.com/r/learnjava/comments/265zgq/can_somebody_give_or_find_me_a_glossary_of_java/chxxc1t It shows how objects are kind of just like simple variables (like e.g. numbers), and also how they are better. It also shows an example of an object with a constuctor - with a parameter, so it kinda explains all of what you asked. But anyway: If you create an instance of an object, the instance is "constructed" by Java (or whatever object oriented programming language). Afterwards, it exists. If you want to do something special during the construction, you write your own constructor, which will be executed *in addition* to Java's own construction activities. You could, for example, initialize some variables, load a file, etc. Constructors, like methods, can have parameters. The difference between a constructor/method without parameters and one with parameters is like the difference between you saying "Explain to me." and you saying "Explain to me the difference between etc.": You can hand information to the constructor/method. You'll understand what this is good for the moment you need it, which is - almost all the time. In other words: public class Response { /** * This is - for ALL Java applications - the entry point, this is where the program begins to run. * &lt;p&gt; * The method has only one parameter: It's an array of String. Every entry of the array will hold one element of the * command arguments, IF the application had been started with arguments at all. Often, a Java application just * ignores this argument. But it has to be here regardless. * &lt;p&gt; * If the program had been started with "java.exe -jar myApplication.jar argument1 argument2", then the String array * would not have 0 entries like it usually has, it would have two entries: The texts "argument1" and "argument2". */ final public static void main(final String[] args) { for (String arg : args) { System.out.println("ONE OF THE ARGUMENTS WAS: " + arg); } int someNumber = 10; someNumber++; // This increments the number by one. final PurposeOfConstructorsAndMethodParametersExplanator explanator = new PurposeOfConstructorsAndMethodParametersExplanator(true); explanator.explain(); } /** * This is a class. Sometimes it's also called a "type". If you look at the main method, you see why it's sometimes * called a "type": In the main method, I created the simple integer number variable "someNumber", something that is * probably entirely known to you. But below that, I created a variable of a type that Java didn't know until I * defined that type right here, below this text. I used the "final" keyword because the variable shall not be * changed. (It's NOT related to the difference between "int" and my own type.) */ private static class PurposeOfConstructorsAndMethodParametersExplanator { final private String preparedExplanation; // This is the constructor. This one has a parameter, but you could also define a constructor that has no parameters, yet it does stuff. private PurposeOfConstructorsAndMethodParametersExplanator(final boolean useSimpleTerms) { if (useSimpleTerms) { preparedExplanation = "See what I did there?"; } else { preparedExplanation = "(NOT YET IMPLEMENTED)"; } } final void explain() { System.out.println(preparedExplanation); } } } 
looks like a re-implementation of the "try with resources" statement, which is already a language level feature. public class Toybox implements AutoCloseable{ public Toybox(){ // do the open() business here } public void close(){ // do cleanup &amp; close here // there's no need to make this a 2 step process // if you always call both of them in the same order // anyways. } // lego and meccano methods as before. } // use like this try( Toybox box = new Toybox() ){ box.lego().meccano(); } in my eyes this is vastly superior for 3 reasons: - it doesn't require java8 - it's a built in feature and already mentioned in many books, no need to reinvent the wheel - it handles exceptions nicely (eg assume that open() or lego() or close could throw a some kind of exception. your builder-style pattern would become a lot more complicated)
println() will print out whatever the object that o.getParameter() returns for toString(). If get/setParameter are just a simple getter/setter for a String field, your expectation is correct, but what those get/set methods do under the covers may change that result. toString() by default will just be the object classname and hashcode, but arbitrarily can be whatever the implementation wants it to be, the details of what privateFunction() do here sound important
Which does not prevent programmers to write the code without the try statement? The loan pattern is handy to create a fluent api and still ensure that programmers are using your api correctly. - Try with resource requires java 7 or 6? - If people stopped inventing after the first wooden wheel, your car would be a bit less fun to drive. - (Checked) exceptions should be avoided, but if you want you can still throw them and add them to the signature of the play method. Java 8 gives us a lot of new ways to program in a more natural functional style. Why not try out new things? :-) 
Your explanation would work for primitives, as Java passes **everything** by value, the thing is, in your example "o" is a reference and this reference is passed by value too (which is an entirely different thing to passing "o" by value). So, your call to privateFunction(o) will modify the object referenced by "o" and not a copy of it. Also, the fact that the method is private doesn't have any influence at all on the outcome of your test. So... yes, after 2/3 years you **should** already know this. In any case, I think it's very good for you to recognize this and wanting to improve. There's a resource that I think every Java developer should read at least once, and it is the JLS (Java Language Specification). It explains all this stuff (and other very useful stuff too). It's **not** a document to read in one long run, but a very good straight-to-the-point reference on the language's low-level rules and behavior. I learned most of the low level stuff from the JLS when I was preparing for the SCJP more than 10 years ago (I'm really glad I never went for them, anyway!), and I've seen a massive improvement on my understanding of the language since that. You can learn a lot by doing mock exams, reviewing your results and filling any gaps: http://www.coderanch.com/how-to/java/ScjpMockTests Edit: I've corrected the line about "passing by reference/value" to give the correct technical explanation.
One key difference is that there is no way for his to be opened without close - autoclosable only works if someone makes proper use of it. (So I guess the choice between the two might be: are your consumers kids who tend to leave the toys out, or adults who know better?)
Cay Horstmann's Core Java series is exactly what you want. All the Java basics at a level that only someone writing java for a year or two can understand and covering everything from variables to multi threading. 
TL;DR: concurrency is hard. Consumers of APIs don't read documentation. To be honest, the author's strategy works fine for apps that don't hold their own authoritative data, but if you let users write stuff, you need to synchronize that shared state *somewhere*... even if you just push the problem into your DB vendor's code.
&gt; mutability fully uses inheritance and polymorphism Not quite sure what you mean here. What about immutable classes doesn't "fully" use inheritance or polymorphism? Immutable objects are great. There's so many things you don't have to worry about with immutable objects, there's just no good reason to *not* make an object immutable unless you really need to change its state. As Bloch himself puts it: "Classes should be immutable unless there's a very good reason to make them mutable....If a class cannot be made immutable, limit its mutability as much as possible."
You should not waste your time on online tutorials or books, I don't think you can get enough practical knowledge from these resources. you should try http://www.programsji.com/Learnspring/Learnspringmvcandsecurity, They provide software development training for (Core Java + Spring MVC + Spring Security)
JSF in EE7 is still a nasty kludgy mess.
you can try http://www.programsji.com/Learnspring/Learnspringmvcandsecurity, They provide software development training for (Core Java + Spring MVC + Spring Security) and totally free of cost.
Interesting to see my initial comment downvoted... why? Regarding your concerns: 1. I'm not familiar with JAX-RS/RESTEasy, but for form binding there are built-in validation annotations that you can use. [Here](https://github.com/pk11/play-jaxrs/)'s even a play plugin for JAX-RS annotations. 2. I actually don't see why you can't do this with Play's default template engine. In fact you are calling Scala functions in the templates and checking for a condition shouldn't be a problem. If Play is still in the race for you then I recommend that you check out these [templates](https://typesafe.com/activator/templates#filter:java). They are a great starting point.
No, the reason we have StringBuilder is basically to get around the iteration/concatenation issue explained [here](http://stackoverflow.com/questions/65668/why-to-use-stringbuffer-in-java-instead-of-the-string-concatenation-operator). Immutable objects aren't "slower". They're just objects. We don't make objects immutable to save memory - we do it mainly because it makes objects thread-safe automatically, prevents bugs caused by corrupt or incorrect state (seen this so often), and makes for cleaner code in my experience.
&gt; However, it turns out that mutability does not play well at all with concurrency. That depends on the level at which you apply concurrency. Sure if you push every method call onto a worker thread you will only see pain and deadlocks. However producer-consumer and other patterns allow you to modify the same structure in two threads - since it is guaranteed that only one thread will see the structure at a time. 
It depends on who you are distributing to. If your distributing to someone who knows java, then a jar can be an easy way. If your distributing to the common folk, something like avian could be a good option: https://github.com/ReadyTalk/avian Avian would let you have a compiled binary with your java byte code contained within it. That way they don't have to have java installed, but obviously must have the binary compiled for their system/archtecture.
What a shitty linkbait title.
Strings are immutable in java as well, so you should do something like String response = parse.readCommand(); where readCommand is public String readCommand(){ final String command = console.next(); return command.toLowerCase(); }
I would actually recommend the Head Start Java book. Then I would jump right into Practical Java. Head Start gives a brief overview of how to Java while Practical Java is super intense in how to write good Java code. It talks about code design and lots of best practices. I know you asked for websites but I find it very hard to learn anything good out of short little Web blurbs, official documentation aside. If you already have programming experience, these books should take no more than a few weekends to skim. 
I didn't know you could name a constructor after the superclass.
It doesnt. It's a typo.
Not quite. o.getParameter returns a String, which is printed. The toString method has nothing to do with that print statement. A System.out.println(o) would print the String that the toString method returns.
The o.setParameter("Main function"); statement is unnecessary, as the privateFunction method executes o.setParameter("privateFunction"); The main function setParameter was probably left in accidentally. as testing would provide the correct result, "privateFunction".
If you need to deliver on multiple platforms, to non technical people, then the best approach is to use platform-specific approaches on each platform. This way, the users of each platform see the program just as any other program and do not need to know anything a about Java. To start, you might consider packaging your entire program into a single big Jar with tools like, for example, OneJar. On Windows, you could build an EXE using a tool like JSmooth, or jPortalbe / Launch4J, WinRun4J, etc. Some installers like Advanced Installer can also provide both a single EXE launcher as well as a nice Windows installer as an MSI or EXE based installer -- including finding or installing a Java runtime. 
Okay, I may have recommended the wrong book. It's either titled Practical Java or Efficient Java. It's the one recommend in the side bar :-) 
The functional point of view looks at the problem a different way. See [here](http://clojure.org/state) for Clojure's opinion. To summarize, there is a difference between identity and state that is treated as the same thing in traditional OOP. The object has a memory location (or a business key) that represents the identity and the mutable data represents the state. All state changes are encapsulated within the physical memory in which the object resides. In functional languages, identity and state are separated. An identity *has* a state, and the state is immutable. An identity is a separate thing which relates a bunch of separate state values over time. Thus, you aren't ever creating a new Customer, you are creating a new state value associated with a Customer identity. At time t, this is what a specific customer looks like and will always look like that at time t. Inherent immutability. You wouldn't look up the reference through a pointer to a mutable object. You would look up the reference through a function (over time, via key, etc.), that returns an immutable value. A Haskell ORM wouldn't really make a whole lot of sense.
An alternative is to not distribute it at all, instead create a war file and deploy it to a container (something like tomcat/JBoss) and let people connect through the web. You can start doing that for free on OpenShift and I think it even integrates to eclipse for direct deployments to the cloud. The free version does have its limitations. https://www.openshift.com/ 
Not exactly from what I can tell. [Type annotations](http://docs.oracle.com/javase/tutorial/java/annotations/type_annotations.html) (JSR305) and pluggable type systems (see [checkers framework](http://types.cs.washington.edu/checker-framework/)) seem to be geared towards enforcing state/mutability (`@Nonnull`, `@GuardedBy`, `@ReadOnly` and [others](http://types.cs.washington.edu/checker-framework/current/checker-framework-manual.pdf)) with some annotations to describe units of numeric values (meters, seconds, meters per second etc.). I didn't notice anything in linked sites that would give me domain specific information - for example, "this `String` while being non null is really somebody's first name" or "this `long` value is somebody's account id". Another thing is that checkers framework seems to require enhanced compiler to enable type checking, while my project can be used with plain java with its plain type system (each value object class is a plain old java class in my project). I don't think that my pet project should be used instead of the pluggable type system, but rather to complement it. Great question though! :)
I had a small success last night by bribing my two year old with a trip to the fair if she picked up all her toys. Proud parenting moment
First you approach to manipulate states are wrong. It is static you should go object from beginning, if you want to go far with java (its only my opinion). Second important point, storing amount of surrounding states it is pointless for counting distances. You should store array or list of state names + add longitude and latitude for counting distances, its quite advanced stuff for you level, without stack overflow i don't think you can make it. And algorithms for counting fastest way is quite another story, for reference the easiest which i know is A++. So maybe first just try to add comparing for the states. I wrote some code which might get you on the track. [paste bin link](http://pastebin.com/LRCzq6gv). Good luck, hope it helps! 
Look at the /r/javahelp wiki. There are plenty tutorials linked and also many books recommended.
From what I know you could create an annotation @Firstname, that as of Java 8 would appear anywhere (attributes, parameters etc.) you have a first name. Then you'd build a checker that ensures only things marked as @Firstname appear where you expect them. Voilà, checked arguments without boxed representation.
Stop spamming your site on Reddit, please. Read the [rules](http://www.reddit.com/rules/), especially the first one.
Yeah, that seems like one way of doing it. I guess the problem now comes down to availability of the enhanced compiler, annotated libraries/codebase and personal preferences. Still, I'd use a mix of both, even if it was just for easier code completion in vanilla IDEs :)
Thanks!
if you start at basically zero, I'd recommend going through the free [Java for Complete Beginners](https://www.udemy.com/java-tutorial) course by John Purcell at Udemy.com - nothing to lose there and it's really a nice course.
That is kinda a different topic all together though. If the choice was made to create a desktop application instead of a web application, this is moot. There are places for both.
Here or http://www.javaranch.com/ are good places. 
If your garbage collector isn't kicking in until the floor is already 100% covered, you need to tune your collector to start at around 60%; You should also have an eden/young gen collection to do most of the work stuff, where the old gen collector should be invoked significantly less often, but it can stop the world to finish. 
Question from somebody without much experience dealing with immutable objects. How do you go about persisting changes of a record or document if the object is immutable? Simplest example being if a user object is immutable, how do you go about allowing that user to change their password?
Of course we limit the mutability with mutators and private variables. Sometimes you want your object to change it's state based on new conditions. With polymorphism you can create new objects and then set portions of their state. I know for sure that this new object has at least these requirements, and then may have some additional information. 
I pretty much already have a dummy client object. Although I did look into javaFx and I think it would look much better than my swing layout. I will check out the books you recommend. Thanks for the thorough response.
&gt;I got some information from here: http://mindprod.com/jgloss/validate.html http://mindprod.com/jgloss/pack.html That's about plain AWT, not Swing (which is built on AWT). Swing calls `validate` automatically when needed, whereas you have to do so yourself in plain AWT. &gt;If you remove line 4 (frame.setSize) from my code above, the window is essentially zero size, certainly less than 100x100. Indeed. Some useless default size. You need to call either `pack` or `setSize`. &gt;I'm pretty sure that you have to call pack. You are mistaken. Sample code to prove it: import java.awt.*; import javax.swing.*; public class NoPackDemo extends JFrame { { getContentPane().setLayout(new BorderLayout()); add(new JLabel("Hello, world!"), BorderLayout.CENTER); setSize(400, 400); setDefaultCloseOperation(DISPOSE_ON_CLOSE); } public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { NoPackDemo window = new NoPackDemo(); window.setVisible(true); } }); } } &gt;In my program above, there is a big difference in what happens if you call pack or validate. Indeed. Specifically, `pack` will resize your window to fit its components, and `validate` will do essentially nothing (since it will be called automatically anyway). &gt;I didn't have time to see what happens when you do neither of them. Same as what happens when you call `validate` and not `pack`.
I am just starting on angular. Would surely give a shot to the tutorial.
install4j is pretty good, it can make installers for all the major platforms. https://www.ej-technologies.com/products/install4j/overview.html
http://docs.oracle.com/javase/tutorial/deployment/webstart/index.html
Just switched to using jnlp to deliver our client app... Very straightforward to get running, and now instead of needing to upgrade 50 clients any time we make a change they just run the app and updates are handled automatically by jnlp.
To save a few keystrokes, mostly. :) Those also have the nice property of working the same way regardless of what constructors you have.
Can we keep JS out of our HTML and in a separate file please? And what are the two breaks for? CSS should be used for appearance.
UriBuilder is part of Jaxrs so you could always try another implementation such as resteasy
Just out of curiosity, what's hard about constructing URLs that makes it necessary to have: http://www.mydomain.com/users/{userid} vs String.format( "http://www.mydomain.com/users/%s", userId) or "http://www.mydomain.com/users/" + userId Don't get me wrong, that's a nice fancy thing, but I wouldn't change my HTTP Client because of it.
The OP uses too strong words. Immutability is great but very often hard to implement. I would like to see MEDIUM or LARGE project composed of only or mostly immutable objects. 
Take a look at rultor: https://github.com/rultor/rultor There are 72K lines of code, 525 Java classes, all of them are immutable. Its persistence layer contains DynamoDB, PostgreSQL and FTP. It also works with AWS SQS, SNS, EC2, and S3.
Fixed, thanks!
Thanks for quick response. I will take a look at the code.
Take a look at @Immutable annotation from jcabi-aspects: http://aspects.jcabi.com/annotation-immutable.html
Thanks! I'll keep the book near my workspace. I'll see if I can fill some gaps with it. In my defense I'll say that, for some reason, I *knew* that (Back in the uni I had a really fun ride thanks to that having to use serialization to make clones of different objects), but for some reason this got mixed with other concepts. Keep in mind that this "two-three years" have been in personal projects "on my own" and with my "coding standards" (And it happens that I'm not friend of passing arguments to modify them inside a function, iirc for something I was taught in the uni). I'll have to recheck lot of stuff about Java I've been assuming truth...
I'll take a look at them, although I'm not exactly a good friend of this kind of books (I have a 2003-2004 edition of Thinking In Java. Completely obsolete for Modern-day java). Still, something in paper could be more useful for quick access/anotations. 
(Clarification for less knowledgeable readers: &gt; &gt; Try with resource requires java 7 or 6? &gt; Try-with-resource was introduced in Java 1.7. Java 1.x is usually called Java x, so Java 1.7 is Java 7. )
There are many ways to skin a cat :) One way would be to have mutators which return copies of the original object but with a new state. If you look a BigDecimal, the mutator methods (add/multiply etc) return a new object, they don't change the original object's state. Simple example below: public class Obj { private int val; public Obj(int val_) { this.val = val_; } private Obj(Obj obj) { this.val = obj.val; } public Obj add(int val) { Obj copy = new Obj(this); copy.val += val; return copy; } public Obj subtract(int val) { Obj copy = new Obj(this); copy.val -= val; return copy; } } Users and passwords are not the simplest example due to security concerns, password hashing, transaction management etc! But fundamentally beneath the covers I'd probably use something similar to the above to persist the actual change. So once I've handled the security, hashing, web-request parsing and so on, it'd come down to: user = user.setPassword(newPasswordHashed); userDao.save(user); 
Yeah, the whole point of the thread is that I, for some reason, didn't knew that and assumed that the parameters were passed as a reference, not as a copy. Its on the first post, just below the (example) code. Did you read it?
Properly encoding them can be a pain. if the parameter has a space, or in one of my real world examples we had. /documents/{documentPath}/download Having slashes in the path can completely change the url if you do not encode them. JAX-RS properly encodes these for you. The second problem is the encoding for a path is slightly different than the encoding for a query parameter so you can't reuse some of the libraries that expose that.
Good point. Most of my rest stuff is post slash so I don't end up in that situation often. IIRC I've just encoded the parameter separately, but I can see how that would be useful to not worry about.
Use an enum. That way you can bake all of the information directly into the compiled code. Very fast access. I have posted other answers in this redit on how to use enums to build hardcoded tree structures as well, such as the menu structure of an application, or table references and referenced by in a database. In these tree examples, my enums have methods to get the parent, the children, the list of ancestors, etc. public enum State { // 1st argument to each enum is the SimpleState it is based on. Kansas( SimpleState.Kansas, SimpleState.Nebraska, SimpleState.Missouri, SimpleState.Oklahoma, SimpleState.Colorado ), // . . . . omitted . . . . Nevada( SimpleState.Nevada, SimpleState.California, SimpleState.Oregon, SimpleState.Idaho, SimpleState.Utah, SimpleState.Arizona ), ; // semicolon ends list of enums. // Note that enum, even the final, ends with a comma, for convenience generating or re-arranging. // ===== // This enum is within the State enum. // This enum conveniently has additional state information about each state. // This enum has convenient methods to find a state enum by it's name or postal code, for instance. public enum SimpleState { // ... some omitted to save space ... Arizona ("AZ", "Arizona", "USA"), California ("CA", "California", "USA"), Colorado ("CO", "Colorado", "USA"), Idaho ("ID", "Idaho", "USA"), Kansas ("KS", "Kansas", "USA"), Missouri ("MO", "Missouri", "USA"), Nebraska ("NE", "Nebraska", "USA"), Nevada ("NV", "Nevada", "USA"), Oklahoma ("OK", "Oklahoma", "USA"), Oregon ("OR", "Oregon", "USA"), Utah ("UT", "Utah", "USA"), Wyoming ("WY", "Wyoming", "USA"), ; // semicolon ends list of enums. // ===== // fields - since they are immutable, they are made public. public final String postalCode; public final String stateName; public final String country; /** upper case state name -- for fast comparison ignoring case */ public final String stateNameUC; /** Constructor */ private SimpleState( String postalCode, String stateName, String country ) { this.postalCode = postalCode; this.stateName = stateName; this.country = country; this.stateNameUC = stateName.toUpperCase(); } // getters public String getPostalCode() { return this.postalCode; } public String getStateName() { return this.stateName; } public String getCountry() { return this.country; } /** @return the State for this postal code, case insensitive, or null if no such. */ public static SimpleState findStateByPostalCode( String postalCode ) { if( postalCode != null ) { final String postalCodeUC = postalCode.toUpperCase(); for( final SimpleState state : SimpleState.valuesList() ) { if( state.postalCode.equals( postalCodeUC ) ) { return state; } } } return null; } /** @return the State for this name, case insensitive, or null if no such. */ public static SimpleState findStateByName( String name ) { if( name != null ) { final String nameUC = name.toUpperCase(); for( final SimpleState state : SimpleState.valuesList() ) { if( state.stateNameUC.equals( nameUC ) ) { return state; } } } return null; } /** * @return the State that matches the postal code, case insensitive, or null if no. */ public static SimpleState findStateByNameOrPostalCode( String stateNameOrCode ) { if( stateNameOrCode != null ) { final String stateNameOrCodeUC = stateNameOrCode.toUpperCase(); for( final SimpleState state : SimpleState.valuesList() ) { if( state.postalCode.equals( stateNameOrCodeUC ) ) { return state; } if( state.stateNameUC.equals( stateNameOrCodeUC ) ) { return state; } } } return null; } public static List&lt;SimpleState&gt; valuesList() { return valuesList; } private static final List&lt;SimpleState&gt; valuesList = Collections.unmodifiableList( Arrays.asList( values() ) ); } // enum State State( SimpleState theSimpleState, SimpleState... surroundingStates ) { this.theSimpleState = theSimpleState; this.surroundingStates = surroundingStates; } public final SimpleState theSimpleState; public final SimpleState[] surroundingStates; public static State findStateByPostalCode( String postalCode ) { final SimpleState simpleState = SimpleState.findStateByPostalCode( postalCode ); final State state = findStateBySimpleState( simpleState ); return state; } // clone method findStateByPostalCode to create the following: //public static State findStateByName( String postalCode ) { //public static State findStateByNameOrPostalCode( String postalCode ) { public static State findStateBySimpleState( SimpleState simpleState ) { if( simpleState != null ) { for( final State state : State.valuesList() ) { if( state.theSimpleState.equals( simpleState ) ) { return state; } } } return null; } public static List&lt;State&gt; valuesList() { return valuesList; } private static final List&lt;State&gt; valuesList = Collections.unmodifiableList( Arrays.asList( values() ) ); } 
Apparently Batik (see https://en.wikipedia.org/wiki/Batik_%28software%29) can convert SVG to PNG, but I don't think (although I haven't tried) it supports Inkscape flowed text, which is an unofficial extension.
Have you got it up on a maven repo? I'd be very interested in playing around with this.
You're welcome. If that doesn't give you satisfactory results – if the machine you want to run it on has Inkscape installed, you can always run it like any other command-line program (inkscape -e OUTFILE.png INFILE.svg). That will give you the same results as exporting from Inkscape's GUI.
I highly recommend Launch4J to create your .exe. I may be stating the obvious here, but keep in mind that this type of program is merely "wrapping" your jar file. The .exe will still require the JRE to run.
Best solution would be to use ImageMagick if you can, though it's not a pure java solution. There is a wrapper available : http://www.jmagick.org/
Well I want to use it for my android game I'm creating. 
Absolutely, we are in maven central: http://search.maven.org/#artifactdetails|org.threadly|threadly|2.1.0|jar edit...if you want snapshot artifacts you can use sonatype, as described in the wiki: https://github.com/threadly/threadly/wiki/Getting-the-latest-snapshot-artifacts
blogspam
Nice article but I miss one thing: for which database are the mentioned SQL types and commands (e.g. CREATE TABLE)? Definitelly not Oracle and not PostgreSQL because they use sequences for generating identifiers.
For Word Doc support you may want to checkout [Apache POI](http://poi.apache.org/) but that has no PDF support that I'm aware of (although you could probably do an automated print-to-pdf if you had to.) [Apache FOP](http://xmlgraphics.apache.org/fop/) can render to PDF and has some support for rendering to RTF. They list RTF support as 'limited' though, so I'd be a bit wary of that one (also might be a dead project?) 
Get any freebie pdf printer driver and you're good to go. This video is a complete waste of time.
[CheckStyle](http://checkstyle.sourceforge.net/config_javadoc.html) can warn you of missing JavaDoc on packages, types and methods. Eclipse has a [CheckStyle plugin](http://eclipse-cs.sourceforge.net ), which is perhaps the easiest way for you to get results. Don't be overwhelmed by the amount of warnings it'll probably throw at you though.
Note to readers: This is an update after all of my posts below which agreed with the idea that you don't need `pack` or `validate`. When subclassing a JPanel you have to use `pack` to get the correct size. ----------- Actually, no. I've tested it with a JPanel and you do have to have **pack()** It only makes a frame 400x400 as requested by the JPanel if you run `pack()` on the JFrame. Without the `pack` it only makes a 100x100 window. Code is below (it's rather long - sorry). import java.awt.Color; import java.awt.Container; import java.awt.Dimension; import java.awt.Graphics; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.SwingUtilities; public class SizeTest { public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { public void run() { new SizeTest (); } }); } GrPanel panel = new GrPanel(); SizeTest() { JFrame frame = new JFrame("Validate or Pack ??"); frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE ); frame.setSize(100, 100); frame.setResizable(false); frame.setLocationRelativeTo( null ); Container content = frame.getContentPane(); content.add(panel); /**** Choose one or none of the following two statements *****/ //frame.validate(); //frame.pack(); /************************************************************/ frame.setVisible(true); } class GrPanel extends JPanel { int numLines = 10; GrPanel() { this.setPreferredSize(new Dimension(400,400)); } public void paintComponent(Graphics g) { super.paintComponent(g); int SCALE = (int)(this.getSize().width / numLines); //draw grid lines g.setColor(Color.RED); for(int i=0; i &lt;= numLines ; i++) { g.drawLine (i * SCALE, 0, i * SCALE, numLines*SCALE); g.drawLine (0, i * SCALE, numLines*SCALE, i * SCALE); } } } } 
That still doesn't really explain anything--does the game require that you export SVG to PNG as part of gameplay? It really sounds like you could do all this beforehand, maybe as part of the build process.
Wow, I was convinced lambdas were just syntactic sugar hiding single-method interfaces when I first heard about them in Java. Cool to know how much extensive work was put into making them something much more powerful than that!
Would give it a try
Thanks, If you have any suggestions please feel free to open an issue on github.
&amp;#3232;_&amp;#3232; We've been over this. Do not call `validate` on a Swing component. It will be called automatically when needed.
Oh, sub pools would have been useful on my last project. 
Seriously, this code does not make a 400x400 JFrame unless you call pack(). Sorry, but that's what happens. I'm not making it up. I'm using Java 1.7.0_60
I think LinkedQueue is supposed to implement QueueADT&lt;T&gt;. Once you do that, split() should make a new instance of LinkedQueue&lt;T&gt;, then iterate over itself ("this"). Remember your original size before starting. Then do this "originalSize" times: pull something off yourself with dequeue, then enqueue that value either to the new queue or back onto yourself, switching back and forth each time. Return the new queue after you've done that "originalSize" times. Other than the "split()" method that does the above, you shouldn't need to write anything other than implementing the methods defined in the QueueADT interface. And you've got a trainwreck of syntax errors which is causing the problem you're having now, but you're headed in the wrong direction anyway. Aaaaand, QueueADT is incorrect, which is gonna suck for you if the teacher gave it to you. The last two methods reference LinkedQueue&lt;T&gt; when they should actually be using QueueADT&lt;T&gt;. That QueueADT won't compile as it is currently written. I don't see any reason why you'd need a stack. 
Very informative. Let me just add some tricky things I had to deal with recently: 1 - If you ever find your JVM hanging at 100% CPU and not coming back check if there are multiple threads reading from/writing to a HashMap (sometimes that is not apparent and you only realize there's another thread there when problems occur) 2 - StringBuilder will crash your VM with an OutOfMemoryError it its contents expand over Integer.MAX_VALUE (this is covered in the article, but I think it deserves to be highlighted) 3 - Don't put a big collection in a Map. Collections in java.util.* implement hashCode and equals based on EACH element in the collection. They will loop over thousands or millions of elements EVERY time hashCode/equals is invoked. If you need a big collection then override the default hashCode/equals methods and use something else (e.g. System.identityHashCode)
Why not just create 2 new queues, pop through the entire original queues and keep a count of how many items you've popped, and put odd/even into each of the new queues. eg. Queue&lt;T&gt; a,b = new Queue&lt;T&gt;(), new Queue&lt;T&gt;(); int i =0; while(!originalQueue.isEmpty()) { if(++i%2 == 0) a.push(originalQueue.pop(); else b.push(originalQueue.pop(); }
As long as your method names are descriptive and consistent, i completely agree, though I generally try to javadoc all public methods of of habit.
Why are you trying to use it as a generic then? Just drop `&lt;String&gt;`
&gt;Immutable data structures often promote object re-use. I was talking about mutable vs. immutable objects (or structs, depending on language). &gt; For instance immutable implementations of maps, lists and stacks can share parts of data structure across difference instances. This is object sharing, not object re-use. Sharing occurs between concurrent threads or multiple structures during the normal lifetime of an object (e.g. your list head). Re-use on the other hand occurs after the normal lifetime of the object (in which the object, were it immutable, would be reclaimed by GC) and often involves changing the object, e.g. I want to get the top N of something, ordered by some changing measure. Now I could be throwing away N objects, if they were immutable, or re-use them in the next round.
You can also have eclipse warn you on missing and erroneous javadocs. Open the preferences dialog, go to Java → Compiler → Javadoc and make "missing Javadoc" a warning. You can also use this to validate all tags.
Your PriorityScheduledExecutor sounds interesting. How did you resolve the problem of low priority tasks being endlessly delayed by higher-priority tasks ?
That has nothing to do with what I said. I said not to call `validate`. I did not say anything about whether you should call `pack`. You seem to have somehow gotten it into your head that you have to either call `validate` or `pack`, and that is just not true. They are not alternatives to one another. They are not even related. Please dispel this false notion before you continue.
you could use a virtual machine to test your games in different environments/operating systems - like vmware, virtualbox .. (and if someone downloads your code and executes it he will probably run it in a vm too)
I just want to make the size of the png image depending on the dimensions on the device screen. I could do it once when it first runs, save the pngs, and use them until another device is used with the save file. 
For docx, xlsx i've used: http://poi.apache.org/, i'd rather prefer converting docx to pdf from command line (many different solutions on google).
Very similar ambitions here. Most open source projects backed by commercial interests have a social channel, so I started following a lot of Twitter accounts, including those of conference speakers that gave interesting talks. Which is another thing I started doing: looking at videos of tech talks. It's easier and less time-consuming than going to JUG meetings, hehe. However, I do feel like I'm not learning from colleagues. That interview questions link is very nice. Thanks for that.
First thing to do: start wring Java EE instead of JEE. People in the field will take you a bit more serious then ;)
That doesn't answer what it does when it's done waiting. From the docs it sounds like it spawns a new thread if necessary, which high-priority tasks will do immediately if the pool is exhausted.
Yes my answer was not going into the details, but that wasn't asked for.
Okay, I just thought you were saying that neither was necessary. So is this conclusion correct? 1. validate() is from AWT and is no longer necessary 2. pack() is sometimes needed and sometimes not. It depends on what you are doing and what you want to have happen.
It's just that pedantic jerks like me will get hung up on that stuff.
Yes, I would highly recommend looking at the JasperReports *library*. It's a jar. It requires a bunch of other open source jars. But it does not require every jar it comes with -- it only requires the ones needed by features you will actually use. If your source of data consists of 'rows' where each row has columns, and your output pages can be generated like a report from a database, then JasperReports is perfect. Note that the data does not need to come from a database, it just needs to be rows of columns. A simple JRData interface provides this. The interface is easy to implement. But there are plenty of pre-written implementations that adapt sources of data for JasperReports, including ResultSets, XML and other sources of data. Then there is the report design. The reports are saved in XML, which means you could programmatically generate the report design layout, or you could use one of several GUI tools to visually design and save the report. The XML file is compiled. The compiled report can be saved in a file, or with a few lines of code you can take the report design XML and produce the compiled result in memory and feed it directly into the report engine. Or the report engine can read the report design from a saved compiled report design. Within the report design you can have snippets of scripts including JavaScript, Groovy, etc. The report writer generates output that can be fed into exporters that turn the report output into some readable form. Exporters exist for PDF, Html, RTF, Word, and other outputs. I've used JasperReports for years. It has a learning curve. But it is extremely powerful. Extremely flexible as I've tried to describe. Here is an example of a really weird chain of plumbing into which I used JasperReports. In a project I did in 2008, I needed to build a web based report viewer that showed reports from data that came from Microsoft Visual FoxPro. Wow. So I first used Visual FoxPro (henceforth VFP) to write and compile a simple DLL instead of an EXE. The DLL had one main method which would accept a big string of SQL, run it against the VFP database (this is NOT a SQL server and cannot use JDBC), and then return the resulting rows as XML in a giant string. In Java using Tomcat I wrote the web application. It used Jacob on Windows to call the DLL written in VFP. It would pass it a big SQL string, get back a big XML string, and parse it. On top of the parsed XML I built a very thin wrapping that looked like rows of columns of data. This was wrapped into another thin implementation of the JRData interface for Jasper Reports. Since then I have used JasperReports in real web projects with real databases. :-) The code would then grab the precompiled report design selected by the user, run the report enging on the report design and the data source to generate the report output. I would export the report as html back to the user's browser. The user could then pick to export as Word, RTF, PDF, etc. This is just to illustrate what I was able to do using JasperReports and a very weird rube goldberg plumbing to get old data from an old database for a web based project that might be used for a few more years to get web based reports from old data.
Does Windows have a nice package installer like homebrew? On OSX: brew install tomcat 
Well, the logic goes like this: The first thing to consider is that there is possibly less low priority tasks than high priority tasks. So the first thing we have to guard against is actually low priority tasks cutting in line from the high priority tasks (this is in part because they are maintained in two different queues). We do this by tracking the actual execution time of the high priority tasks, and if they are held back (likely because there is not enough available threads), we make note of that. Once we have a low priority task ready to execute, if the pool is still under contention, we will initially hold it back the same amount of time that high priority tasks are being delayed. Once that condition is satisfied, we get closer to what your original question was asking. What we do is that the low priority tasks will initially only attempt to take an available worker/thread. It will not create any. It is configurable (either at construction time, or by calling setMaxWaitForLowPriority) how long a low priority task will remain in this state, by default it is 500 milliseconds. After that time has elapsed, if it was not able to get a worker, it will fall into the same logic as the other high priority tasks (competing for threads equally, and if none are available and the pool has not reached it's max size it will then create a new thread/worker). Let me know if you have any more questions! I love to talk about this stuff, and am very open to suggestions if you have any.
Maybe have a look at [JAutoDoc](http://jautodoc.sourceforge.net/) (Sourceforge Link). This Plugin can generate Boilerplate JavaDoc comments with TODO items that point out where changes need be done.
He has not done much benchmarking of his networking library yet, but has done some, and initial results are promising. His library is still sort of in it's early stages, and is not open sourced yet. With that said, I think I can answer your question by talking about this from just a threadly perspective, and not the networking specific example. We have done TONS of benchmarking on threadly's TaskExecutorDistributor. Depending on your use pattern the TaskExecutorDistributor may have a minor performance impact, or it may have a substantial performance improvement. If you have lots of task keys, and for each key they do not have many tasks associated with them, you end up having a minor overhead in synchronization. From our benchmarks we have done a fair amount of work to keep this overhead to a minimum. If you are submitting a lot of tasks for the same key, then we have the opportunity for a notable performance improvement (compared to just submitting the task directly into an executor). The reason being is that the TaskExecutorDistibutor takes batches of tasks/runnables that it can execute. And will only have to synchronize when it switches threads, or gets another batch of work (so we try to run as much within the same thread as we possibly can). The end result is we may be able to run hundreds of tasks without needing to synchronize at all, and possibly even larger quantities of tasks without needing to switch threads. So depending on your use case, this can be better performing than just sending all the tasks into an executor (which requires some sort of thread safety as it switches between each individual task, and not just when it can get a large batch of tasks to run). What do we loose in this? The ability to remove tasks which have been executed, as we don't have an easy or thread safe way to be able to remove tasks which have already been taken as a batch to be executed. You would have to rely on the returned Futures .cancel() function if you wanted to prevent a task given to the TaskExecutorDistributor from running. Let me know if I did not answer your question, or if you have any further questions. I love the feedback!
I set up CheckStyle in Eclipse, it seems great. I had to remove a few of the checks. Seems like a bit of it is personal preference - it doesn't like this.variable = variable, for example. Thanks! Edit: I also installed AnyEdit Tools, which helped me clean up a *lot* of whitespace and such. Something nice it does is remove any erroneous whitespace every time you save a file, so you don't have to go back and reformat the source every now and then.
high priority tasks will only span a thread immediately if the pool is exhausted, and we have not reached our max pool size. The short answer is that eventually low priority tasks will become on the same level and logic as high priority tasks.
Many hiring managers don't know the difference; they still call it J2EE. It isn't until you are in an interview with a working developer that somebody will take notice. Even then, some of the older developers still refer to it as J2EE.
I want my game to support different sprite sizes depending on the game. So depending on the screen size it could use the sprites that have the width: 32, 48, 64, 96, 128, 192, 256. So this would take a lot of time to export each group. I must be planning this game out completely wrong.
&gt; So this would take a lot of time to export each group. Better to export these at build time when you're just wasting your own time than to waste the time of every single user of your app. And just how often are you going to be regenerating, say, 256x256 sprite? Won't this always be the same on every device large enough to require such a sprite? Like, if you and I both have devices with large screens and need 256x256 icons, why are you making both of our devices do exactly the same work? You should just generate these ahead of time. You computer is much faster than anyone's Android device. And you only need to generate these assets whenever the SVG changes, not all the time. I think you'll want to read this: http://developer.android.com/guide/practices/screens_support.html So the problem you really want to solve isn't "convert SVG to PNG in Java". It's "convert SVG to PNG as part of some automated build process", and the command-line solutions provided to you by others here should work. As I suspected, classic case of X-Y problem :P
Post quite old, but still the best structuring I found so far
I finished it:http://hub.jmonkeyengine.org/forum/topic/my-first-game-landofamaral3d/ A good starting point for me
I do that. Though on an interview I might self-correct myself with "Enterprise Java". But it is only because I would refer to that as something "we do not do here". Just before asking about Scala :)
Thanks!
Pointless. The article says how to run an application with the Yourkit agent - but doesn't actually explain how to do the remote profiling (Open yourkit, click "attach to remote process", enter IP &amp; port, connect). Also Yourkit is $500 - and thus might not be the best general solution for "remote profiling" (we use it at work though, and I very much like it - but I don't have to pay the licence fee either :)).
It's really not that bad - the author did click the "detailed list" and the consumer features are listed above on the actual page. At some point there has to be an acknowledgement that Eclipse is a platform as well - shocker.
&gt; Many hiring managers don't know the difference But the guy is trying to gather to the community right, not to clueless hiring managers for whom j2ee or ror are just buzzwords without any inherent meaning?
Makes a good point. Every time I'm downloading the new version they seem really intent on telling me about the PDE stuff, but I just want a java IDE. It's kind of annoying.
Yep, I have actually spent quite a bit of time researching this topic, and posts like these are few and far between. It would be great if oracle would give some insight regarding this topic, instead of just providing simple examples of how to populate a TableView etc etc
How about just run a [console-based profiler](https://code.google.com/p/jvmtop/)?
Please write a better "article" if you are going to insist on linking to an external site. This could have easily been done in a self post. I say to write it since your username matches the site and it is obviously yours.
Yet another reason to use IntelliJ IDEA... Even the website of eclipse is a mess, why would I trust them with my IDE? 
Stop spamming your own blog. Reddiquette limits submissions of personal content to 10% of total submissions, and it looks like your blog makes up over half of your submissions. 
http://jetty.4.x6.nabble.com/jetty-announce-Jetty-Release-9-2-0-td4962644.html
You could also install the JavaME extension package. 
Platform ?? You must be out of your mind. 
It's because Apple provides their own Java 7 runtime which is not compatible with Chrome. Most likely due to 64-bit Java and 32-bit Chrome. If/when Chrome is available in 64-bit for Mac it should be able to use Java 7 and later.
Didn't Apple hand over Java to Oracle after Java 6? I am unfamiliar with an Apple version of Java 7. I'll be waiting for that glorious day when Chrome becomes compatible with Java 7.
agreed. This is self-promotion, and isn't that frowned upon here
[The correct short name is "Java EE"](https://java.net/projects/javaee-spec/pages/JEE) 
I don't understand the conflict here. Do you run Minecraft in your browser or something? There should be no problem running them at the same time otherwise. Minecraft runs on Java and does not require a browser to do so.
Maybe pushing their other tools is a good idea if their Java tools are the best. Thing is, even their Java is considered by many to suck (compared to Intellji IDEA). If they cant get their stuff together for their core, the Java IDE, perhaps they shouldn't be pushing their other stuff.
I dont see how the new design is any more functional. Maybe shiny and new, but I dont see any improvements to the content.
This is true, but quite often, I run both Minecraft and a browser at the same time. Even though Minecraft is a standalone app, it needs Java 7 to run the latest version, and Chrome will not function properly if Java 7 is installed.
2 versions of Java will happily co-exist with each other. Not sure how Chrome will behave with that setup though. 
That doesn't make any sense at all.
I agree, and if you are going to add javadoc to a "getFirstName" method then at least add some context to it such as: /** * The first name is stored in table.column and should never * contain whitespaces, blah blah * @return the first name of the client, in uppercase */ String getFirstName(); 
To all the Eclipse bashers and IDEA fanboys here: If your IDE is sooo much better than Eclipse, why would you want to leave it to troll /r/java?
Days of megalomanian J2EE projects and huge frameworks on top of it are over. Instead of learning EJB, JSF, Quartz, Spring, it's better to invest time in hardcore Java. Pure &amp; effective JDBC, HTTP APIs, threading, sockets, pure Servlets etc. Restful web services, generic data access, schedulers can be written from scratch in few days, without 50 MB of extra libraries. 
Interesting!
very interesting!
Interesting pattern, thanks for sharing.
 ╱╱┏╮ ╱╱┃┃ ▉━╯┗━╮ ▉┈┈┈┈┃ ▉╮┈┈┈┃ ╱╰━━━╯
 ╱╱┏╮ ╱╱┃┃ ▉━╯┗━╮ ▉┈┈┈┈┃ ▉╮┈┈┈┃ ╱╰━━━╯
 ╱╱┏╮ ╱╱┃┃ ▉━╯┗━╮ ▉┈┈┈┈┃ ▉╮┈┈┈┃ ╱╰━━━╯
Features REST, scheduling, etc is part of Java EE 8. With a little micro framework same features can be easily developed for Java EE 3 or 4 web profile certified application server. I think the main concerns in Java EE today are portability, scalability, performance. Using this industrial level frameworks and features (JPA, EJB, JSF) will require a application server with 2GB or RAM in the start. With 10.000 users ( 100 concurrent), this requirement grows to 10 GB ram. Is this an option for you ? 
After the Java 6, Apple handed over Java for Mac OS X development to Oracle. As it happens, Oracle Java 7 is only available as 64-bit version under Mac OS X. That's why, Google Chrome, which is 32-bit application (the only 32-bit browser on OSX afaik) does not manage to run Java 7 plugin. More info at: https://productforums.google.com/forum/#!topic/chrome/gJHswEpuYjc
I run OSX Mavericks, Chrome, Minecraft, and have three versions of Java installed (1.6, 1.7, 1.8). It all works.
I think it would be much easier if you just use an ArrayList&lt;Integer&gt; (or &lt;String&gt; since that's what you're already using) to represent your queues. If you use the add(element) method without specifying the index, it will append the element at the end of the list, similar to queues.If you need to dequeue, just use remove(0) to delete the first element. Now, to solve the given problem, traverse your current ArrayList and check each element. If it's even, use the remove(index) method, then add the removed element to the other ArrayList for even numbers. No need to remove the remaining elements in the current ArrayList since it will be automatically adjusted for every method performed (e.g. removing an element will shift all the other elements with a higher index to the right)
&gt;JSF, EJB are hevyweight container services. They're not. JSF is a web framework while EJB is a container service, but not heavyweight. At least, not any heaver than practically every other managed bean system out there. &gt;JSF is a server component framework, where HTML is side product. That sounds weird. Theoretically JSF can generate multiple types of output via render kits, but in practice it's nearly always about HTML. &gt; EJBs uses RMI for communication, meaning all communication must be over same subnet. No, EJBs can optionally use RMI for remote communication. The fast majority of EJB beans are used locally (same JVM, no remote calls, no RMI). Other options for remote communication are SOAP (using @WebService) or REST (using @Path). Of these, REST via JAX-RS is probably the most popular option, especially for external communication. @Remote using RMI can be used for more tightly coupled machines on the same network, and still has advantages where it concerns distributed transactions and sending objects over the wire. So remote EJBs are thus but a small part of EJB usage and RMI is a but a small part of remote EJB usage. 
JEE!? JEEEEHHHH!!! :|
Assuming these two conditions: 1) The shared memory is only accessible via tasks submitted through the TaskExecutorDistributor (more specifically a single instance of the TaskExecutorDistributor, since lock consistency is not maintained across multiple instances) 2) The shared memory is only accessed via a consistent key submitted to the distributor Then yes, threadly's TaskExecutorDistributor will handle the happens-before relationship for you. Thus there should be no need for synchronization, volatile, or concurrent structures. I will update the javadocs to make this language a bit more clear. The TaskExecutorDistributor helps in trying to alleviate the need to consider a lot of the concurrency issues with shared memory, if you can structure your program in the right way. The key word there is help however, for example consider the following condition: You have a HashMap, this structure is accessed possibly by multiple keys submitted to the distributor, but the key used for this hash map is consistent to the key used in the distributor. It might seem like since we would not be concurrently modifying the same entry that a HashMap it would be safe. That is FALSE, this would not be safe (for example consider if the HashMap needed to grow). But something like this could be easily solved by just changing the HashMap into a ConcurrentHashMap. So I just caution, this does make a lot of the concurrency risk simpler, but it does not completely alleviate the need to consider thread safety. Getting into the implementation details (if your curious). We achive this by having a consistent lock we synchronize on for a given key. That is why when you are constructing the TaskExecutorDistributor you can optionally specify the expected parallism, this will determine how many locks will be created and used internally. The default is 16, which should be okay for most use cases. If lock contention does start to occur, it's important to realize that it does NOT prevent tasks from running in parallel which have the same lock (but different keys). Locks are only necessary when it may be possible that we are switching threads, or adding tasks. So these locks should not be held very long, and thus minor lock contention likely will not be a noticeable issue. Thanks for continuing to ask questions, I hope I am making things clearer. If you have any more, or want any more details, feel free to ask. As I stated earlier, this will help me as I will attempt to make the javadocs better explain this behavior. p.s. I have been saying TaskExecutorDistributor consistently just to keep things simple, but the same principles apply to the TaskSchedulerDistributor as well
At least the first dozen or so problems on [Project Euler](https://projecteuler.net/problems) can be done with Java 8. Take a look at what my local JUG did to get started: https://github.com/njug/euler-java-8 Good luck!
I just started learning Spring Data JPA, I liked how easy it was to just extend CrudRepository. But, those dynamic queries are amazing. You can pretty much write any query you want and Spring figures it out for you. I've seen it before in Rails, but never with this much functionality. 
It infuriates me when sites have tiny screenshots everywhere and don't allow me to click them to see better what the fuck it is that is being presented. [Like](http://i.imgur.com/yBg1woP.png) [these](http://i.imgur.com/um3I38T.png) [here](http://i.imgur.com/3haaFix.png). EDIT: This. This I can get behind. http://i.imgur.com/P8weoa6.png Maybe that's why I chose IntelliJ IDEA.
I really don't know why Chrome hasn't been updated to 64-bit already. It's almost enough to get me to switch back to Firefox, who seems to have fixed their JS performance. 
&gt; Pure &amp; effective JDBC, HTTP APIs, threading, sockets, pure Servlets etc. Before long you'll have created your own "simplifications" on top of that. And then your own "utility library". Until finally it has grown into your "own framework". Now you not only have to program the business code of your application, but has to maintain its framework as well. And you'll be the only one who know's how it works. And new coworkers have to ask you all the time about stuff. You can't direct them to Google or StackOverflow, since only you know how it all works. Then fed up with the complaints by coworkers you'll be tasked to write documentation. You'll hate it. I will always be out of date. Your coworkers will hate you for writing all that crap that only you know, and that will have zero value for their career elsewhere. If it couldn't all get worse, managers will bombard you with feature request that nobody in his right mind would ask for an existing framework. But hey, since the code is all yours, you can do it! Never mind that homegrown framework of you needs to bend both left and right at the same time. Just do it! Trust me, I've been there and it wasn't pretty! 
You should use the Cipher included with the JDK. Here's a sketch that will support AES, DES, etc. https://gist.github.com/anonymous/c6108e48b3c620a3aaed 
You should read ["Schneier's Law"](http://en.wikipedia.org/wiki/Schneier_law#Cryptography). I basically states: *Any person can invent a security system so clever that he or she can't imagine a way of breaking it.* Refering to Schneier's book *'applied cryptography'* where he says: *Few false ideas have more firmly gripped the minds of so many intelligent men than the one that, if they just tried, they could invent a cipher that no one could break.* In layman's terms. ***Never grow your own crypto***. Anyone can grow good weed but growing your own cryptography almost always ends in catastrophic security flaws. --- Security aside. Making cryptosystems for others to break is satisfying. Even when you loose.
Yes, thank you! I feel the same exact way!
Is it possible that I can have both Java 6 and Java 7 so that they both work when needed? Will Chrome know to use Java 6 and Minecraft know to use Java 7?
You miss the point. OP's library is not used for crypto encryption. 
You are correct. At first, it was an idea I had about shifting characters (not original, but I was oblivious to the Caesar Cipher) and thus I wrote a script that added 2 to every character. This is the "ClassicShift" used in my application. I added more and it now supports True Caesar and Morse code in version 1.2.0. Then, after learning more about the Caesar Cipher and other ciphers used in history, I thought I might try to make an encoder/decoder for the most interesting ones. I am **not** trying to make my own super-secure cryptography algorithm, but merely something for the hell of it. Something you can use to send little puzzles to friends. :)
Thank you for your suggestion, and I'll implement something like that when I know how to better create interfaces! :)
Generally, people don't check *.class or *.jar files into version control. 
count++ means evaluate then add one. ++count means add one then evaluate. In your example count ups as as 10 due to failing on 9++ &lt; 10. 9 is not less than 10 so its the last time it checks while condition, and then adds 1 to 9.
So count++ is the post increment operator. It will increment the variable but the expression will return the value of the variable before it was incremented. So in the first example, the loop will terminate when count has a value of 9, so count++ will return 9, but afterwards count will have the value of 10. Again with the second example, while the count++ operator is performed first, the value it evaluates to is the previous value. So for the first check you will compare 0 and 10, while after that count will have a value of 1. Hope this explains it well enough. Basically for post increment, think of the increment only occurring after the line. 
Thanks, that makes sense. So in my examples, if i actually swapped the count++ for ++count, then my answers would be correct? Considering count is added and then calculated against the condition.
Well, iirc, there are certain reasons for that. One of them is them needing to Port V8 engine to 64-bit architecture under Mac, and all the plugins that rely on 32-bit, if there are still any. In addition to that, each Chrome tabs runs in separate process, it's unlikely your one page will go out of RAM available for 32-bit process.
Exactly. To be sure, I actually ran the code. Current version: Both outputs 10x. With pre-increment: Both outputs 9x.
I have some resources for you; should you wish to try to take your understanding of ciphers further: https://en.wikipedia.org/wiki/Stream_cipher https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher https://en.wikipedia.org/wiki/Block_cipher https://en.wikipedia.org/wiki/Feistel_cipher https://en.wikipedia.org/wiki/Hash_function https://en.wikipedia.org/wiki/Symmetric-key_algorithm https://en.wikipedia.org/wiki/Data_Encryption_Standard https://en.wikipedia.org/wiki/Triple_DES https://en.wikipedia.org/wiki/Advanced_Encryption_Standard https://en.wikipedia.org/wiki/Public-key_cryptography https://en.wikipedia.org/wiki/Public_key_infrastructure https://en.wikipedia.org/wiki/RSA_%28cryptosystem%29 https://en.wikipedia.org/wiki/Pretty_Good_Privacy I am sorry I am only able to provide wikipedia on this vast range of topics; however you should try to look for other sources if you are at all confused by the terminology. Learn these one by one; and they will start to become more and more complex. I advise not to read greatly into the topic of hash functions; as they can be hard to understand. The Block Ciphers can be confusing to understand from wikipedia in particular; and I would strongly advise searching on MIT's public resources for the appropriate topics. I do however find that wikipedia has a relatively good page on RSA/PKI. Revisit the harder topics once you have a greater understanding of java; and you will be able to implement your own version of RSA encryption/decryption in &lt; 100 lines of code. I wish I could provide my course notes to you; however I'm pretty sure my Uni would not be happy. I hope this serves as a teaser for what the world of crypto has to offer. P.S. if you like "magic math"; pay particular attention to https://en.wikipedia.org/wiki/Semiprime / https://en.wikipedia.org/wiki/Euler%27s_totient_function in refrence to RSA. This is where the magic happens :D
I think OP might simply be attempting to learn some of the underlying principles; rather than to implement practical security.
Stop spamming your website, please. http://www.reddit.com/rules/ http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F
Just add *.class *.jar to your .gitignore file. Keeping them in your revision control system makes it more confusing each time you make a change to the source as those files will very likely differ ever so slightly, without it being clear what actually changed with them. As they can be generated by the build scripts from the source, there's also no benefit to storing them each time and increasing the size of your source code repository.
Didn't you get the memo?
TIL. I always understood count++, but had never encountered ++count. Cheers.
For future reference, if you ever happen to find yourself working on C/C++ (and I'm sure other languages) code , using ++count is more efficient than count++.
java HelloWorld Instead of java HelloWorld.java
Ty m so dumb. Deleting post now.
I wouldn't sweat it, everyone who's ever compiled and run java on the command line has done it :)
No exaggeration, that looks incredible. EDIT: Just downloaded it and tried it out. First impression, getting it running was dead simple. Download a zip, add a JVM arg. Next impression, the video listed 100% of the features. It counts DB queries, session size and exceptions. Nothing more. Calling this a "profiler" is a gross exaggeration. It's nifty, but the 1.0 is of very limited value. Hopefully this is step 1 and the future will include actual CPU/memory analysis. Even adding network calls would be something.
Curious why that is. Do you have a link for me?
I will rewrite my bash commands and organize everything. Thank you!
It's a micro-optimization that will likely never make a noticeable impact in your code. But you don't need a link, just think about what (internally) the pre-increment versus the post-increment do. ---- // Using C++ pass-by-reference semantics to illustrate a // functionized comparison of pre/post incrementers // since Java doesn't support this // ++value int preIncrement(int&amp; value) { value = value + 1; return value; } // value++ int postIncrement(int&amp; value) { int temp = value; value = value + 1; return temp; } ---- Obviously post-increment will be slower by extremely small margins without any modifications by the compiler. However, a good optimizing compiler can remove the additional overhead if the returned value isn't ever used (such as in the increment clause of a for loop) meaning they would cost the same.
If you want to learn some server management including the whole setup thang [ Amazon Web Services](http://aws.amazon.com/) is really cool to play with, a micro server instance is free, so you can play around with it before making a decision. They also have community boxes (Server Images) that have software stacks preinstalled, I guess there are also some for Java in there.
VPS hosts these days are cheap. Get a VPS host with Linux, install tomcat, install SQL server (PostgreSQL is nice), run app.
You can see that the ball goes a little over the edge on the top but not at the bottom. So the code isn't perfect to begin with. "boardT" is probably a little lower than the real top of the window. That's why he accounts there for the ball height. If the code would have been "correct", he wouldn't have to do that. You can test that by drawing an unfilled rectangle spanning the whole screen and you will see if the boardT/B/L/R Values are correct.
Well, then you should learn some things about deployment. It will help with your career- I would be very reluctant to hire a Java developer without unix or deployment or networking skills. Domains- you buy a domain and configure a DNS server to point to your VPS host. You can have multiple domains pointing to same host. It's a bit trickier if you need HTTPS and multiple domains with 1 host. Urls- if you deploy a xxx.war to tomcat, then your url will be http://host/xxx/. You can have redirects or forwards or deploy things on root (http://host/) as well if needed. I can go in more depth on each of these points, ask me more if you get stuck.
I have tried both Amazon Web Services and Heroku and I'm very pleased with both of them.
The top border is accounted for because the board is set in a "peculiar" way. Your window is 300 * 300 so in your case you would expect: int boardL = 0; //Left border int boardR = 300; //Right border int boardT = 0; //Top border int boardB = 300; //Left border In this instance however you have int boardT = 20; //Top border so that's the point that the program uses for the top border calculation. I think you either go with the first example, or, probably more correctly, reduce all other borders accordingly and adjust the formulas. I think what is shown in the video is not particularly consistent. Also, have a look at [Graphics](http://docs.oracle.com/javase/8/docs/api/java/awt/Graphics.html): &gt;If you draw a figure that covers a given rectangle, that figure occupies one extra row of pixels on the right and bottom edges as compared to filling a figure that is bounded by that same rectangle. This is something that should be accounted for as well :) EDIT: If you reduce your borders you'll also have to change the declaration for setSize(width, height)
&gt; Why exactly did this YT user need the method "keyReleased" if ActionListener extends keyadapter? Are methods not transferred when extending a class like contructors and instance variables are? Why was variable e (event) not used in the keyReleased method like in keyPressed? How exactly does the keyreleased method work? Why was the method there ? I dont understand why we needed this method if nothing was added, utilized, overridden, etc.. I understand that the keypressed method is used so we can match user input to some criteria for the game, but what was the significance of the keyreleased method? I'm a beginner myself, but I'll try to give an answer. I think it's one of two things: - He plans on using the method later on - A keyReleased event is always generated after a keyPressed event terminates, so it's good practice to override it with an empty method. &gt; Lastly, how does repaint() work? Do you need to paint an image each type you make an adjustment to it or something? How is this different or similar to double buffering? [See here](http://stackoverflow.com/questions/10768619/paint-and-repaint-in-java)
What makes you enjoy iOS development more than Android? I think this is a common perspective, though sometimes driven more by economics than by technical reasons.
Agreed, why not PaaS? Heroku will be like $9 a month and will give so many additional add-on options for free.
I use Digital ocean for $5 for simple apps.
Window -&gt; Show View -&gt; Console (Or whatever you're looking for)
Now I get "No consoles to display at this time." Buy input console I mean, the screen where you input the code and such. Sorry for my poor wording.
Now I get "No consoles to display at this time." Buy input console I mean, the screen where you input the code and such. Sorry for my poor wording.
pls rspnd bby
Expand the 'src' folder by clicking on the arrow to the left of it. Then expand the package folders with their arrows until you find the code you want. Then double-click that file to open the editor. Or just try clicking around a bunch -- you should be able to pick up on how to work your IDE without reading too many tutorials (at least for the basics).
https://github.com/google/j2objc from google (for sharing the non-ui code written in java).
Ok ive been trying wto mKAE it work for like a fucking long time now why THE FUCK is it not working ive tried literally everything ive reinstalled 4 times and it STILL DOESNT HAVE AN EDITOR I DO NOT UNDERSTAND HOW THIS IS FUCKING HAPPENING IM SO TIRED OF THIS SHIT WHAT TEH FUCK 
Epic. Presumably it's not a fully automated process, but definitely a lot to work with here.
You don't have to redirect anything - you just have to name your application `ROOT.war` or have your application deployed as unpacked folder inside of `/webapps` (as an exploded .WAR). ...and to be honest it's still better to have tomcat bind only to loopback interface and have Apache/nginx act as a gateway/reverse proxy.
Do you have a larger code snippet for context? From what I see, in main you need to instantiate a new copy of your class first to access the nonstatic variables inside. Otherwise, you can declare your labels as public static instead.
Assign your variables and then add then in either a constructor or method...
The easy way to understand this is: * count++ means "use the value of count first, THEN increment it by one". * ++count means "increment the value of count by one, THEN use the resulting value". So, there are two operations going on, and everytime you see the expression, you can always split them and it will make it easier to see what's happening. &gt; x = count++; is the same as &gt; x = count; &gt; count = count+1; . On the other hand &gt; x = ++count; is the same as &gt; count = count + 1; &gt; x = count; 
I've tried AWS, OpenShift and Heroku for hosting a simple Grails app (Groovy, Spring, Hibernate on JBoss AS7). Heroku is the only option that worked out to be powerful enough, free and not time-limited. I was very impressed with it.
holy shit you fixed it
I did get the memo, but -&amp;#8734; + -&amp;#8734; is still undefined.
Agreed, I hate those "google it" or "ugh.. we discussed this like 5 years ago, read the original thread" answers. If you tell someone to google it, at least tell them a few keywords.
Goldman uses a [proprietary language](https://stackoverflow.com/questions/3392636/slang-goldman-sachs-proprietary-programming-language). Some other banks use proprietary languages and / or Python. I've never heard of a bank that uses Scala but but that is hardly definitive.
Thanks. These are the things were never really taught in school. That being said having 0 knowledge about deployment, What are the resources I can read to learn more about deployment. (like configuring DNS to point to your VPS host, creating a Server IP and other general information to get me going) 
Loved this article, but that's a bit scary. Maintaining systems with millions of lines of code where such subtle bugs can happen will be a painful exercise. Fortunately guys like you are finding the pitfalls and letting everyone know about them, so all this is going to be more palatable over time. In name of every poor Java 8 newbie out there like me, I would really like to thank you for your effort.
It's simple. ++count increments count and returns count. count++ calls count and then increments it and then returns count before the increment. 
All those poor fresh graduates that work for Goldman(and Epic systems as well which uses the language mumps). We had one guy who had two years experience in mumps. Absolutely useless. We started him at slightly above entry level.
Nope pure technical reasons. It's just way easier. XCode has matured to a level where it's super fast to code just about anything. You typically do it the apple way and not have to worry about 3rd party libraries. I've dev'd in both for 4 years now, and still prefer iOS. I'm on a hardcore Android project now and constantly joke I wish I was back in iOS.
Ok. I used boardT = 20 to try and account for the ball size. I wanted to keep formulas in the If statements consistent I guess. But when I switched it to zero for boardT the ball disappeared completely rather than a slight edge. . I tried making numerous adjustments but nothing seems to live up correctly. . My main confusion is why I had to make adjustments for three borders though. .. if the top left is starting origin of (0,0) for (x,y) then shouldn't I only have to adjust the bottom and right hand sides???? I really dont get why adjustments were made for a 3rd side . Very confused about that still. Thx!
Thanks for the the link too. Would you happen to know how to convert/code or the differences for coding in java mobile edition versus standard? If my goal is mobile programs and im just starting, is there anything specific I should be aware of?
You had to because borderT is not the actual top border of your window. That's why the formula for borderT is different: if(y &lt;= boardT + (ballY) ) This is basically saying: If the y position of the ball is lower or equal to the sum of the top border and ball height or: y &lt;= 280 + 15 y &lt;= 295 Otherwise if you had int borderT = 300 then the formula would have been if (y &lt;= borderT - borderX) or: y &lt;= 300 - 15 y &lt;= 285 
I would say that the easiest way to become familiar with eclipse is to mess around with things and learn what things do. The mode you use it the more familiar it will get.
To make it clearer, an approach consistent to your example would be: package basiccollision; import java.awt.Graphics; import java.awt.Image; import java.awt.event.KeyAdapter; import java.awt.event.KeyEvent; import javax.swing.JFrame; public class BasicCollision extends JFrame { int x, y, ballX = 15,ballY = 15; int boardL = 0, boardR = 300, boardT = 0,boardB = 300; private Image dbi; private Graphics dbg; public class actionListener extends KeyAdapter{ public void keyPressed(KeyEvent event){ int keyCode = event.getKeyCode(); if(keyCode == event.VK_LEFT){ if(x &lt;= boardL) x = boardL; else x -= 5; } if(keyCode == event.VK_RIGHT){ if(x &gt;= boardR - ballX) x = boardR - ballX; else x += 5; } if(keyCode == event.VK_UP){ if(y &lt;= boardT) y = boardT; else y -= 5; } if(keyCode == event.VK_DOWN){ if(y &gt;= boardB - ballY) y = boardB - ballY; else y+=5; } } public void keyReleased (KeyEvent event){ } } Or using the 'second' approach: package basiccollision; import java.awt.Graphics; import java.awt.Image; import java.awt.event.KeyAdapter; import java.awt.event.KeyEvent; import javax.swing.JFrame; public class BasicCollision extends JFrame { int x, y, ballX = 15,ballY = 15; int boardL = 20, boardR = 280, boardT = 20, boardB = 280; private Image dbi; private Graphics dbg; public class actionListener extends KeyAdapter{ public void keyPressed(KeyEvent event){ int keyCode = event.getKeyCode(); if(keyCode == event.VK_LEFT){ if(x &lt;= boardL - ballY) x = boardL - ballY; else x -= 5; } if(keyCode == event.VK_RIGHT){ if(x &gt;= boardR + ballX) x = boardR + ballX; else x += 5; } if(keyCode == event.VK_UP){ if(y &lt;= boardT - ballY) y = boardT - ballY; else y -= 5; } if(keyCode == event.VK_DOWN){ if(y &gt;= boardB + ballY) y = boardB + ballY; else y+=5; } } public void keyReleased (KeyEvent event){ } } EDIT: Writing this I realized that the formula for event.VK_UP was wrong to start with. It should have been if(y &lt;= boardT - ballY) instead of if(y &lt;= boardT + ballY)
Java, C# to a lesser extent, and matlab (for the quants). Oh and legacy mainframes if you get really lucky. Excluding Goldman, banks seem to value a large hiring pool therefor value the big languages. Source: 16 years of financial software engineering, including a lot of sell side consulting. 
I know someone who did mumps in healthcare. What a nightmare. 
While I love to experiment with programming, I just want to first know a bunch of things I can do with something before I experiment with them. I tend to go out of the box and test stuff out that I've learned, but only if i know what i'm doing. If i start to see errors, I will just go back into the box and it will be much more boring. So in short, how can I learn the basic things so then I can mess around with everything altogether?
I've worked at a LOT of banks, here is what I see - Trading /Risk/Analytics systems built in Java, C++ and to a lesser extent C#. For "Duct Tape" I see a huge amount of Perl, and recently some Python. Banks had been using Perl for a long time before Python became popular, so I find that it's become very ingrained. Sysadmins use it for automating tasks, and Application Support specialists use it for data transfers and building reports. A running joke at Morgan Stanley is that even the cleaning crew knows Perl. 
Finance has lots of Java, but otherwise it is all over the place. Scala, Haskell and F# all see serious use in financial institutions over the world.
It has been so long since I've messed with Java, but I believe your answer is BufferedReader br =new BufferedReader(new InputStreamReader(theCurrentClass.class.getResourceAsStream("/mapsFolder/map.txt")); Sorry If its bunk advice. Like I said, its been a while. But look up the Class.getResourceAsStream() method. It seems to be what you're looking for. 
I'm afraid I can't help you there :) But once you feel more confident with Java you could start looking at Android development.
Did you import ArrayList? import java.util.ArrayList;
 import java.awt.*; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.JFrame;
Don't start with a Minecraft plugin. Minecraft is coded poorly at best (though the Forge and Bukkit teams do their best). Learn Java, then come back to Minecraft after learning and practicing the basics. 
They were cool at the time (what, 10 years ago?) but are not widely used for new projects anymore.
Just like NuclearFej said, learning Java first is undoubtedly the best way to go. If you can figure out the errors you are having and fix them then you will be able to continue learning on your own.
I came in here to say this, and saw someone beat me to the punch. At the time tiles first came out, it was awesome, it solved a lot of problems that jsp includes just made clumsy causing a lot of copy pasted jsp code for every template in the site. Now pretty much every templating engine out there has layouts built in, usually in a much more elegant fashion. Struts was probably the first MVC framework to be popular in Java, before it was the norm to just use plain servlets and/or jsps. Now there are hundreds of frameworks out there, quite a few of them better than struts.
Btw, LibGDX uses the RoboVM to compile to iOS. I'm not sure about the other two though.
Yeah, that seemed to be the consensus as I looked into a little bit. Just seems like such a hassle, but I only really know what we have now (as developers). 
So I have experience with just plain servlets and jsps and I do the web (view) stuff with CSS, AJAX, JavaScript, etc. Should I look into using a framework, such as Spring? Basically I'm asking what best practice is.
I was under the impression that our entire economy was at the mercy of several clever, but complex Excel Macros 
And then you can change the access modifiers, form the Swing design navigator. Select all the components you want to change -&gt; Right Click -&gt; Properties -&gt; Code -&gt; Variable modifiers
That's very easy, just Google ip address regex and use it to match input. 
Since Scala applications are still compiling, nobody can tell. ;P
Great. Thank you for the help.
You an do anything, given enough time and money. Keep coding!
Use http://ipaddr.es/automate.php to obtain it. No regex needed
Slang is not used widely at Goldman. It is used in some systems, but it's predominantly Java. 
You're welcome! Every new tech has its pros and cons. We'll get used to them eventually, but it does take practice. In general, upgrading to Java 8 is a pleasure and quite a productivity boost, so you don't need to be scared!
The Quantitative Strategy group within GS used Slang widely - most of their risk and P&amp;L infrastructure was written in it. In IT Slang was much less widely used - it seemed to be mostly Java.
Can we not discuss eclipse here without being bombarded with these intelliJ ads? For fucks sake. Everywhere in this subreddit someone is advertising intelliJ.
IJ is better. OP clearly gives the impression to be a beginner who is copying how to do things from videos. OP should be informed that there is a better way. For fucks sake.
That's a completely nonsensical statement.
It being above your head doesn't mean that it's nonsensical.
You're an idiot.
No, the idiot is clearly you. That this is not clear to you is implied.
Banks, and financial institutions in general, use LOTS of software. Some of it is COBOL running on ancient mainframes, some of it is Java, C, C#, Python, Scala and god knows what else. If it exists, it's likely being used in some bank somewhere. In my experience, which is mostly with banks (large and small), as opposed to clearing houses and the like, is that they are completely and utterly incompetent on a technical level. They offer relatively cushy 9-5 jobs, so they end up with mediocre software developers (when they are in house) or mediocre acquirers (if they use consultants/external vendors). 
Why don't you use any of the XML libraries available instead of trying to parse it yourself?
IntelliJ is not objectively better. I love it, but Eclipse never wigged out and claimed I couldn't make a list of strings, nor did it ever fail to pick up compile errors created in other files. Though the main editor window did vanish mysteriously that one time...
Prefer to keep libraries to a minimal, really.
Nothing is objectively better than anything else. But I will not repeat all the good arguments, for I don't see why I should waste my time. Apparently, giving good-willed advice was a mistake, so I shouldn't have started this whole thing in the first place. Why help people when we can just as well not help them. I get it.
When I worked for one of the "big four" commercial banks, most of their in-house stuff was Java 1.4-1.6 with some remaining Cobol being phased out. 
 final byte rawAddressBytes[] = java.net.InetAddress.getLocalHost().getAddress();
why?
Seconded. I would also recommend his book [Java Puzzlers](http://www.javapuzzlers.com/). There's a [free sample chapter](http://www.javapuzzlers.com/java-puzzlers-sampler.pdf) available: &gt; This sampler contains one puzzle from each chapter of Java Puzzlers by Joshua &gt; Bloch and Neal Gafter (Addison Wesley, 2005). The book is filled with brainteasers &gt; about the Java programming language and its core libraries. Anyone with a &gt; working knowledge of Java can understand these puzzles, but many of them are &gt; tough enough to challenge even the most experienced programmer.
While I want to say that I agree with this, I have to disagree to a point. I'm a Bukkit Plugin Developer and I can write the stupidest shit in Java now, I learned Java entirely from Bukkit and honestly it's a great sandbox to experiment the language is.
Rule number 1 with xml: use a standard parser. 
http://tburette.github.io/blog/2014/05/25/so-you-want-to-write-your-own-CSV-code/ ..but i guess everyone has to got through 'reinventing wheel' phase to see for themselves(I was guilty of this too ;)).
&gt; android studio I'm using Eclipse.
Had a quick Google, you're supposed to use the Log.i method.
Nobody taught me how to do any of this in school either. Nor in university. I had to learn everything the hard way. I'll try to be very brief. 1. You pay for VPS host, you get one with Linux (I prefer Debian, but Ubuntu might be easier), you boot it up and it already has an IP address. Login as root, run ifconfig- it will show you your IP addresses. Don't use 127.0.0.1- that's your loopback. 2. You pay for a domain name. Use whatever your domain name registrar provides to configure DNS to point to that IP address. Gandi.net is a decent registrar, but they aren't very cheap. If you need advanced domain name setup, you might need to learn bind-style configuration. Bind is one of the most used DNS servers. You'll need an 'A' type record pointing to your VPS host. Google for "DNS configuration" or something. 3. Install java on your linux server. If it's ubuntu or Debian based, it will be as easy as apt-get install openjdk-7-jdk. 4. Install tomcat. I prefer the vanilla tomcat install- so download tomcat*.tar.gz file from apache, unpack it somewhere. 5. Deploy your app to tomcat. Build a .war file, copy it to webapps directory. 6. Run tomcat 7. Test your app. In general, get some unix skills, and learn how internet works- TCP/IP, DNS, HTTP. There are books to help you with them. If you get stuck- ask, but I won't respond immediately.
I think its better for the learning process.
http://mojo.codehaus.org/appassembler/index.html http://izpack.org/ http://izpack.codehaus.org/izpack-maven-plugin/ https://github.com/bmuschko/gradle-izpack-plugin http://launch4j.sourceforge.net/ 
http://stackoverflow.com/questions/7998669/redeploy-alternatives-to-jrebel
Java is very prevalent atm. Lots of legacy old stuff. High performance apps written by highly paid wizards are written in whatever they want be it Haskell, OCaml or F#.
he he. My company works primarily with banks and other financial custodians. We see these sorts of issues daily where a custodian puts out pretty shoddy data which we later have to munge into something that the client likes to see.
Just have, this sorted it, thanks!
Yeah, I did, thanks though! (Sorted it now)
Yeah, I got all of them, I'm using netbeans so it does it automatically (I know, lazy)
Welp. Thanks for that link. That is definitely a simple but very effective way of showing that youre not supposed to write an own parser for any format.
In short Scala can do whatever Java can do. Its just a layer of extra features and libraries on top of Java. So it would do at least as good as Java does for that use case.
Our junior programmers don't do that shit. 
Lol, what? Are you kidding? That's like asking a girl to stop offering to have sex with you, preferring to sit in a room full of dudes jacking each other off... like complaining about a voucher for a free Corvette being stuck under the windshield wiper of your '98 Honda Civic... like declining a job offer for video game testing when you work at McDonalds... like dumping a top-shelf margarita on the waitress's head because you ordered a Bud Lite... like... you get the picture. If you're under the impression these IntelliJ 'ads' are sponsored, you are sorely mistaken. I [shill for IntelliJ](http://www.reddit.com/r/learnprogramming/comments/2847b5/looking_for_a_free_java_programming_software/ci7b5jd) every [single opportunity](http://www.reddit.com/r/learnprogramming/comments/266ddx/probably_a_really_stupid_question_but/cho3zfg) I [get](http://www.reddit.com/r/learnprogramming/comments/22ff9z/intellij_wont_show_compile_errors/cgm9vx1). Not because I'm paid (and I'm certain /u/king_of_the_universe isn't either)... but because it's software of rare quality and polish, isn't *nearly* as popular as it should be, and is better than Eclipse or Netbeans in *every* way that matters, as far as I'm concerned. That's what we call 'word of mouth'. On the other hand, if you've tried IntelliJ, still prefer Eclipse, and are merely sick of hearing people praise an IDE you've deemed unworthy... then you can kindly fuck off and join everyone who said ["who needs *this* when we already have carbon paper?" when Chester Carlson invented the photocopier in 1939](http://en.wikipedia.org/wiki/Chester_Carlson#Electrophotography).
&gt; Currently it runs on all the major desktop operating systems such as Windows, MacOS &amp; Linux sudo apt-get install openjdk-8-jdk package could not be found. sudo apt-get install openjfx-8 package could not be found. sudo apt-get install openjfx-7 package could not be found. Not going to replace the auto updated default JVM with the Oracle JVM just to get JavaFX support. At least someone noticed one or two weeks ago that there still is no way to get JavaFX support using the package manager on Debian so it might get there till the end of the year (with "there" I mean Debian Sid, it will take years until its available in stable) . 
Spring become as easy as PHP by using Spring Boot.
I believe everyone can benefit from using a framework. While they do have a learning curve, using them definitely pays off in the long run. I've used spring professionally for years, I think it's great platform for large teams, and it's DI container is pretty awesome. But their web framework is meeeeh. The good thing about spring though is you can mix their DI container and most of their components into pretty much any other framework. Personally I am currently enjoying Play Framework. (though I'm using scala version, it supports java as well). However, if you are stuck in servlet container infastructure, it might not be for you. There's quite a few webframeworks worth mentioning. http://zeroturnaround.com/rebellabs/the-curious-coders-java-web-frameworks-comparison-spring-mvc-grails-vaadin-gwt-wicket-play-struts-and-jsf/ Which one you choose is going to depend on your style. Personally, for example, I write API first applications where the majority of the front end is done in javascript frameworks like angular. So the most important features for *me* are the configuration of the Router/Front Controller and how it maps to restful endpoints, as well as JSON support.
You're such a fucking ignorant jackass. IntelliJ doesn't come anywhere near being the ide eclipse is. It is significantly more focused on a handful of languages and environments that i literally cannot use it. Let alone the fact that I cannot in good faith, support a pesudo open source product over a true open source project.
Thank you very much for all of the information! The company that I work for, and more specifically the team that I am a part of, doesn't really use frameworks all that much but I want to grow as a developer by learning this stuff on my own. I really appreciate your input, and I will be sure to check out the information that you provided.
It depends on what your purpose is. Spring mvc is good choice. I don't know ur project for what so I can't have any suggestion for you. 
The best way is to just use it, as you're writing stuff and think 'it would be nice if...' You will stumble on some great features that are hard to find. The issue as a new person is more the language than the IDE, so focus for now on how to write stuff. Then worry about how an IDE can help you be more productive to get there. Eclipse is a fine IDE and has almost anything you could ever want. That may come at a cost of some clunkiness - but I hear you can up the resources for it to make it feel smoother. That said, I personally prefer the other one that people get in rage wars about (ex is in this posts comments). I'm not claiming it's better, but it does suite how I personally work better, for what it's worth.
&gt; I honestly like going to reddit for questions rather then just browsing the web. Meaning you better like others do the searching for you, got it. &gt; So if any of you have some links I'd be more then happy to get my hands on em! Try /r/learnjava or /r/learnprogramming: check their sidebars, FAQs and Wikis, there's tons of resources linked in them.
Nooo, I like the interaction with people that have experience in whatever subject it may be about. I browse learnprogramming a lot and just saw the java subreddit for the first time so I figured I'd post in there too. Thanks tho.
None of the Linux package managers provide it, as far as I can tell JavaFX is currently an Oracle JDK only feature unless you build the OpenJDK yourself. The result is that nearly no Linux installation has it. A state that I find both annoying and a wtf. Oracle really managed to screw up the roll-out of the last few Java versions. Although in their defence the OpenJDK integration of Rhino was also missing for a few months, so it might be a pre-existing problem.
I would say it completely depends of what you want to do. Maybe Java have better library support for your task or C# does. What are you most comfortable with?
Depending on what you have in mind, there isn't much of a difference between them. Herb Sutter said (I don't remember where or when to be honest) that if you think C# and Java are different from each other, then you should look at lisp, haskell or prolog and compare them to Java and C#, and then you'll see what is different. I somewhat agree with him. Obviously the languages are different, but they somewhat follow the same ideas and ways of doing things. A lot of what you learn that is applicable to C# programming can be easily transferable to Java programming. As I heard, C# came later and made better decisions by looking at Java's mistakes. So, I think C# has more potential. Regardless, Java is __everywhere__. What seems to be the case today is that it's easier to get support on the Internet if you're doing Java than if you're doing C#. Honestly, I think you'll only know which to pick after you've learned the two and make your own comparisons.
Both are rapidly evolving and popular technologies. C# was made in Javas image and IMO adds some things java is missing. Events, delegates, proper &amp; consistent operator overloading are just a couple. That said, java models KISS perfectly, all of these things can be done in java relatively simply and they can all only be done in pretty much one way. Introducing this goes against the KISS principal. I have a mild preference towards java, but found that working in C# was fairly natural as a java programmer. 
There are three things that Java does that .NET can't match: JVM languages, Linux servers, and library choice. In .NET you do everything the MS way. In the jvm land there are dozens of open source and proprietary choices for anything you want. 
Some reasons that spring to mind: * Multiple platforms as equal first-class citizens, as both development and production platforms. (e.g. you can run the official JDK and IntelliJ IDEA on Windows, Linux, Solaris, OS X, etc.). * A much more diverse, open, community. E.g. Java reaches from JEE to more interesting frameworks like Play. * Similar to above - freedom from the mono-culture (no-pun intended) of .net. "Develop Microsoft C#, using Microsoft Visual Studio, connecting to Microsoft SQL Server using Microsoft ASP.NET MVC; running on Microsoft IIS, deployed to Microsoft Azure." 
It's all about the libraries. Whichever language has better ones for your project, use that one. PS it will probably be Java.
Or for that matter, people attacking others for their IDE choices. At the end of the day, no one cares if you wrote your code in IntelliJ, Eclipse, or Notepad so long as it works.
Yeah, that's some ugly code.
I came across the C# thread too, and I'll post my reasons for choosing one over the other **Java**: * Cross-platform * Choices of tools to work with Java * Much more resources for Java online when you need help * Android app dev, if you ever want to go that route **C#** * Better GUIs through VS * Events, delegates, and LINQ * WP8 app dev, if you ever want to go that route In the end, I say choose what language you're most comfortable with. I personally choose Java as my default language as it's the language I'm strongest in, but I switch over to C# if I ever want/need a pretty GUI. I like Java but damn does its GUI suck.
I'd say work with what you are most comfortable. Depending on your project, either may have an edge. For example, I do a lot of number crunching in java, where c# would just be slower (and I do care if my code runs on a weekend or takes a week to complete). The JVM has a complex, yet fairly well understood performance model (for a JIT compiled, garbage collected language). Look at [Alexej Shipilev](http://shipilev.net/)'s site for more information, he's *the* java performance geek. On the other hand, C# has all these nice toys to play with, like real generics, closures, properties, LINQ, you name it. So what is this final project about?
Assuming you've added "Cross-platform" to java because of the availability of a JVM for various platforms, then consider adding that to C# too because of Mono. Looking at wikipedia, it seems Mono runs on many platforms.
Without looking at the source XML format, I suspect you'll have an easier time using a regexp to grab the image URLs from the file. "(http[^"]*\.jpe?g)" Iterate over matches with that pattern, don't try to split away the XML. 
.NET runs on linux just fine. Ever heard of Mono? And the open-source space for .NET is big, vibrant, and growing. Library choice? If you're talking about the monolithic nature of the .NET of yester-year, that's all changing, especially with the upcoming release of ASP.NET vNext.
For OpenJDK it seems the only way is to build OpenJFX, but only OpenJDK 8 is supported. It seems OpenJFX only going to be included in the distant future with OpenJDK 9. The only solution is to use Oracle JDK, and include the runtime environment for your Linux users.
To the downvote: Seriously do your research. Microsoft and .NET used to be full of legit close-minded people, but as someone who's done a significant amount in both worlds, I'm very glad I'm in the .NET world now.
Calm down there. I didn't downvote you even once and I don't work for MSFT. I follow the .NET scene extremely closely. I know people that work there and I happen to follow the official .NET GitHub repos closely. Yes, .NET is now on GitHub, with proven open-source success with a modularized system. I'm simply suggesting you to look into .NET again. It used to suck, be super closed-source with close-minded people. Look again. To be clear: you still have valid points! I'm not saying you don't. Mono has a long way to go, but if you look at the trends, it's worth putting your money on .NET imo.
.NET runs fine on Linux... except for all the bits that don't. It's C# compiler lags behind the current standard, and often releases versions that only half-implement a new version of C#. There's no WPF. Mono's performance is worse than Microsoft's .NET, which in turn is worse than the JVM. There's none of the wider .NET ecosystem (e.g. Visual Studio or SQL Server) which, considering how entrenched they are in .NET projects means that the .NET ecosystem lacks the same level of support that Java/Ruby/Python for non-Microsoft servers/databases/platforms/etc.
I copy my post on the other thread: Problem is I never ever saw a company using .net on linux. Not even a startup. I saw people using xamarin for cross dev on mobile devices, but only that and also far less used that phonegap for example. Basically if you want to use .net you usually prefer to run it on windows server and develop it using visual studio on a windows os. No one wants to feel like the bastard son. So, long story short, for cross platform server side Mono is really one of the last choices
That's true but the adoption as server-side language is almost not existent on linux and osx. In exchange is enough used on cross-mobile dev (also if, for me, is very very hard to find a job offer based on it)
First you said: &gt; To the downvote: Seriously do your research. Then you said: &gt; I didn't downvote you even once
Ah; this was confusion. I was saying "To the one whom has downvoted me"
If I was only developing for Windows, I'd probably pick C#. But I don't and am happy to live in *nix, so I tend to use java. C# can execute on Linux with mono, but the milage seems to vary as to what you're doing (I've never researched how the performance compares between mono and CSC). For me, it seemed to lose most of the benefit of what c# is, which works very well with Microsoft stuff (tapping into some system level APIs). It also has some nice-to-haves that java currently doesn't (looks like others covered that). Frankly, if you learn one - you can very easily jump to the other and feel pretty comfortable and wouldn't be handcuffed by choosing one over the other. Since there is no "golden hammer", choose what's right for the job. If you're exclusively in Windows - I'd probably stick with c#. 
With what I've worked on in both, they're both about the same as far as how useful they can be. Java and C# can both pieced together using whatever you want to use. IDE, database systems, frameworks, libraries, whatever. You don't need Visual Studio to build C# applications and you're not forced into using other Microsoft products (aside from Windows if you want full compatibility). Why Java over C#, though? I don't know, they're both equal in my eyes.
I love how this got +14 in csharp. Delicious FUD.
I still just don't "*get*" JavaFX. What is it? I read that whole article, and I just don't get the point. From Oracle's page &gt; "JavaFX is the next step in the evolution of Java as a rich client platform. It is designed to provide a lightweight, hardware-accelerated Java UI platform for enterprise business applications." So it's ... wait. Is it a replacement for swing? Because I don't have any problems with swing: the GUI builders for it are nice to work with, and it has platform-specific look and feels on all platforms. Or is it a replacement for GWT? Everyone says it runs in the browser, but so do applets. It mostly just seems like a new and improved way to violate HIGs on any and all platforms, and make UIs that don't look or feel native, anywhere. I'm sure there's some real purpose for it, but so far I just haven't been able to figure out what that purpose is. [I did use JavaFX in one application, just to get the embedded webkit widget. I ended up using [JFXPanel](http://docs.oracle.com/javafx/2/swing/swing-fx-interoperability.htm#CHDIEEJE) to get it done. The API didn't seem particularly better or worse than swing, just different] EDIT: I just watched [this video](http://medianetwork.oracle.com/video/player/1191127359001), so now I get that it's all animated/graphics/sound/video/all-singing and basically all of things I wish people would stop fucking doing in most thick client applications.
&gt; I'm simply suggesting you to look into .NET again. It used to suck, be super closed-source with close-minded people. Look again. For what it's worth, the same point about taking a second look goes for Java if someone's been away from its scene for a couple of years - there's been some big steps in the right direction, especially with Java 8 and EE 6 &amp; 7.
i don't mind at all to bundle applications with java runtimes; java needs no install
Saying you can run C# on Linux is like saying you can do functional programming in Java. Yeah you could, but would you?
yay, jet another spam account! Please read the [reddit rules](http://www.reddit.com/rules/), in particular the first one "[don't spam](http://www.reddit.com/wiki/faq#wiki_what_constitutes_spam.3F)". 
&gt; It's C# compiler lags behind the current standard, and often releases versions that only half-implement a new version of C#. This should change with the open-sourcing of the Roslyn compiler. Given it runs on .Net, as long as Mono (or any other implementation) is compliant with the relevant parts of the framework, every platform will get the same compiler. Well, when it's finished. I also hope to see the base class library and runtime open-sourced.
JavaFX is the most modern UI toolkit available today and it solves one of the biggest issues found in other UI toolkits. Namely threading. Other UI toolkits use a single event dispatcher thread while JavaFX uses 3 threads for event dispatching, drawing and media. Additionally, JavaFX uses a scene graph which means you code more "what do you want to do" rather than "how do you want to do it" - and this hides the need to worry about threads. This solves a huge class of problems building modern UIs. Now what's really nice as you mentioned is that JavaFX has a modern HTML5 compliant web rendering engine built right in. Sweet. And what's really - really nice is we have full 3D support out of the box with pipelines for DirectX/OpenGL - in a totally cross-platform way. If you have spent any time in C++ or .NET land working on advanced UIs you'll realize how friking awesome JavaFX is. 
Using .Net on Linux for anything serious, just feels wrong. Just because you can do something, doesn't mean you should. 
As a Java developer I'd recommend you go learn c#. Their forum is very welcoming to new comers and they love questions like these
This is incorrect usage of "whom". The fact that you used whom at all suggests to me that you are interested in being correct. I hope you find my comment helpful and not obnoxious. Here's how I remember it. You rephrase the question as a statement, replacing the who/whom in question with he or him. If you replaced it we he, use who. If you replaced it with him, use whom. For example: "Who(m) ate the last cookie?" "He ate the last cookie." Use who. "Who(m) do you blame?" "You blame him." Use whom. Your sentence is harder to apply the rule for, but I would consider "Who(m) has downvoted me?" to be equivalent for our purposes. The answer to the question would be "He has downvoted me." so you should use who.
So Im trying JavaFX instead of Swing on my last project. It feels like a smpler and more idiot proof Swing , but less powerful. 1 thing I really liked about JavaFX is TableView in comparisson , if you need to build a table that has editable cells and can be altered outside of User input. 
Xamarin allows C# to be used for Windows Phone, Android and iOS. http://blog.xamarin.com/
I used it on a project because we had a .NET/Windows project and marketing wanted to say we supported Linux. But, honestly, it wasn't great. I *was* surprised at how much of c# just worked in Mono. But it wasn't 100%. And the parts that didn't work required a fair bit of work to implement. By the time we were done we all wanted to throw it away and re-implement it in Java or Python.
And it's not very stable...
Seriously, I upvoted this for LINQ. If you guys don't know what that is you should do some research. It's a game changer and that is coming from someone who writes code in both languages. 
You had a problem with parsing something, you decided to use regex, you now have two problems. Also [this](http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags) is relevant In all honesty, you're best off using [jsoup](http://jsoup.org/) or the [reddit api](http://www.reddit.com/dev/api) 
Thanks mate. Good idea :)
["junk"](http://i.imgur.com/REHCa6U.png)
AKA, "Why ‘package by feature’ is better than ‘package by layer’"
I was shocked to not find my most telling reason... Resource usage. An empty C# object is almost 2x more memory than the same object in Java! Allocating objects in C# is far more expensive, and if you multiply that by the number of objects in a typical app, you are taking about lots of waste. 
Re: GUIs. Dude, the 1990's called and they want your opinion back. Seriously compare JavaFX to WPF for a weekend and you'll realize that Java &gt; .NET for desktop UIs.
Nah C# made some better decisions - actually one: making methods final by default but the language made so many other bad choices that it overrides (If I can use that word) any benefits the language may have promised. Examples: Adding Structs Adding Operator Overloading Adding Properties at the language level Throwing the baby out with the bathwater with checked exceptions : instead of implements and extends keywords Partial classes? WTF. etc... 
I thought with Java 8 and lambdas Java would start to maybe see something similar.
All of the lawsuits around Java relate to either JVM patents or implementing the core Java API. None of them, to my knowledge, relate to actually just using Java the language and the JVM.
Java 8 Streams API is Java's version of LINQ
You don't have to use visual studio, sql server or iis to develop with c#
Reading OP, I wish BASIC would include not just "IF ... THEN ... ELSE" but also some construct with "THAN". This could fix people.
But in most jobs you will. Which is fine, it's a great stack and I do it for a living. 
The JavaFX team is looking to create a JSR to put JavaFX into OpenJDK. They are aiming for that to happen in OpenJDK 9.
So besides Visual Studio, what IDE would someone write C# in?
Don't think in languages, think in platforms. Languages don't matter (controversy alert!) platforms do. If it's a choice between JVM and .NET the JVM wins for flexibility, choice, probably job futures. That's not to say .NET doesn't do a lot, of course it does. My advice is to write down the types of programs you want to develop and then pick the platform that will best fit. You may find that neither is optimal for what you want to ultimately do. For example if you want to write graphically intense video games or real time medical device software. 
http://lmgtfy.com/?q=c%23+ide Or just a text editor like SublimeText, Notepad++, whatever.
What's there to comment on? You've just spammed out your decree that adding structs and operator overloading and language level properties are bad (and you don't seem to understand what partial classes are). You haven't made any argument as to *why* you think those choices were bad. What else should those "typical M$ [lulz] trolls" do but downvote you? You've left no hooks for actual discussion or debate on the matter.
I'm sure others have mentioned this, but what you intend to do with the language will determine which is better.
Except that in C# you tend to allocate fewer objects, thanks to the existence of value-typed structs.
Well, Oracle keep saying it's deprecated and not getting any more development, and they'd love to pull the plug on it. And as I said in my top comment, I have actually used it with swing in one project for the embedded webkit browser. But then I ended up with scrollbars that don't match the rest of the look and feel, it's actually pretty jarring.
I love java, I hate dotNET. 
And there are still incompatibilities.
The success of Xamarin is an interesting case-study. It's achieved many times more success than Mono ever did. According to .NET developers it succeeds because of the inherent awesomeness of C#. But I think a larger part of it is due to the poor platform specific tools (Objective-C - no thanks, but Swift on the other hand...), and the fact that they were platform specific. Xamarin were very quick to provide a vaguely unified, quite high-level, alternative development stack.
I'll be given a bunch of projects to choose from by the company I'm gonna do it under. They do both Java as well as .NET programming. While I don't intend to be a developer for ever, I always like to learn new things in technology. So my decision won't be based on specific needs but general scenario of the platforms and future prospects.
Actually the JVM effectively optimises classes to structs where appropriate in an optimisation known as [escape analysis](http://en.wikipedia.org/wiki/Escape_analysis). Though this doesn't cover every case for structs it means you don't have to worry too much. 
The value of C# is not that it's on the cutting edge, it's bringing the expressive power of functional programming to a mainstream language that's used in many corporate environments. You can program C# like it's Java or you can use functional/declarative aspects like LINQ. I don't think that being cutting edge is a good thing in and of itself. I'd rather that a language is pragmatic than always trying the newest fad. C# is constantly evolving (unlike Java) but it's also stable and readable (unlike Scala).
Are you referring to the general ugliness of type safe functional code in java, or something specific to this library?
&gt; In addition to what Vorzard said, if you grab the Oracle version it comes with JavaFX and includes a native packager allowing you to build installers for your applications. At that point I can just provide a VirtualBox image with Windows 7 and my programs preinstalled. Your solution is pretty much useless for free and open source software.
Because 99% of the time, resource consumption will not be a concern to the customer. Iron is cheap. Heads are not. edit: Just to clarify, I'm not saying memory usage is irrelevant. But a 2x factor is *in most cases*. So even if it was true that C# code use twice as much memory as Java, that factor alone would never be a reason for a customer to demand a Java application instead of C#. So for you as a developer, if you're developing for a customer or not, that should not be a decisive factor either. Let's say hypothetically that you develop 3% more efficiently in C# than in Java. In a 500-man-hour-project where you charge $150 an hour, C# would save the customer $2250 (not counting maintanance cost). Installing 8 GB more RAM on the server because of increased memory usage would cost him $150. What does the customer choose? What do *you* choose on your private hobby project? There are many good reasons to choose Java over C#, but an (alledged) 50% memory saving is rarely one of them.
Dude, did you even try to check what's going on in .NET? ASP.NET is open source, MVC is open source, Roslyn is open source and you can find a thousands libraries on NuGET with most of them open source. 
Both Java en C# have strong points. When developing in Java i loved the JPA, but now Microsoft has the Entity Framework. In C# i really like the lamba expressions, but now Java also have the same implementation. Downside of Java is for me, as earlier mentioned, the GUI's. I get depressed by just opening Netbeans or IntelliJ. And also the slow release cycle from Oracle. Microsoft is more innovating with new things, adept new technologies quickly. I mean, SignalR &lt;3
&gt; Most architectures are designed such that layers are cohesive, minimally coupled, reusable packages of code. I don't understand what you are talking about. How can a layer be reusable? Any layer contains domain-specific code. I do package by feature for the time being and I find it easy to reuse code. Some packages are named *com.zarlon.user*. That package is domain-specific and can't be reused. *com.zarlon.javalanguage* and *com.zarlon.android.errorhandling* can though. 
It is a logical OR, [more info about operators here](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/operators.html)
You might also get to see return alpha | bravo; This is not the *boolean* or that "||" is, it is *binary* or. E.g. %10101010 %11110000 will become %11111010 
I know it means or. I was asking about using or with a return method. 
none. Visual Studio Express is free. There are zero better free (gratis) options. If you're not on Windows, I can't help you though.
I'll give myself a few more years before I can think of a method that needs that. But thank you. 
Pull the plug or no, I doubt oracle is going to rip swing out of the standard lib any time soon. As for the scrollbars, you can theme them with CSS to look like your l&amp;f. As far as I've seen, it's much easier to do than creating a new l&amp;f. There are a couple of people working on native l&amp;f clones for javafx, so you might look into that too.
return does not "take" values. it returns a specific, type safe value (i'm making it simple just for the sake of this sentence) also, conditions will always return one boolean, so (alpha || bravo), if (x &gt; 0), (i &lt;5), (string.equals(otherString)), (a == b), all of those will return boolean. [More info here](http://docs.oracle.com/javase/tutorial/java/javaOO/returnvalue.html)
Essentially the return is only returning one value. It just evaluates the expression before doing so. It could also be done like below. boolean alphaOrBravo = alpha || bravo; return alphaOrBravo;
In my experience, NetBeans' GUI editor completely screws up the layout if you move anything. Horrible experience. Never again. I'm looking forward to the chance to use JavaFX. So far, it looks like just the sort of clean-up Swing needs.
You'll think of this when you have to work with colors. Having to separate a color integer into r g b and getting them back together to an int happens to everbody eventually.
&gt; WP8 app dev, if you ever want to go that route Works only on Windows 8.1 and needs Pro if you want to run the simulator. I tried getting to work last month, was a real pain.
&gt; I don't think that being cutting edge is a good thing in and of itself. I'd rather that a language is pragmatic than always trying the newest fad. C# is constantly evolving (unlike Java) but it's also stable and readable (unlike Scala). True, but the likes of Haskell and Clojure aren't faddish either. Both take a refined approach to implementing concepts that are as old as the hills.
Open sourcing of .NET components is a relatively recent change. But even then there's still huge differences. ASP.NET might be open source, but it's not exactly open development; this is still better than entirely closed source but it's not a community driven process. Secondly there's a dearth of any other frameworks. It's ASP.NET or nothing. This is in sharp contrast to the Java world where there are quite literally hundreds.
JavaFX is a replacement for Swing, yes. A few highlights: - CSS for styling: you can apply a style to every matching component with a single directive, apply multiple stylesheets at once (like Swing's `MultiLookAndFeel`, only it actually works), etc - Proper support for animation: JavaFX schedules animation frames explicitly, rather than you having to have an independent, choppy timer for each one - Much saner API - Unified, deferred-mode scene graph: both controls (buttons, labels, check boxes, etc) and graphics primitives (lines, polygons, text, etc) coexist in a single tree, and each node can have transforms (scaling, rotation, etc) applied to it that affect its descendants - Lots of useful controls, including a web browser that actually supports modern HTML/CSS - FXML, a single, standard format that all GUI design tools are expected to understand, so you can switch to a different one without having to reconstruct your GUI from scratch - Oracle's GUI design tool, "JavaFX Scene Builder", actually works, unlike NetBeans' GUI designer for Swing And yes, UIs won't feel native. A small price to pay, in my opinion, for freeing yourself from the brain damage of Swing.
In that case (since it's in a corporate setting), I'd choose Java. The jobs usually pay better, perhaps because there's more enterprise marketing behind it.
It's actually good practise to return the comparison instead of storing it in a variable in a case like this.
&gt; Also this is relevant This is certainly a funny post, but it's not relevant here. There's a difference between parsing a text and simply extracting URLs. Parsing is the analysis of the text's underlying syntactic structure and usually involves constructing a syntax tree. (With HTML/XML that tree is the document object model.) You cannot *parse* HTML using regular expressions because HTML is a context-free language, while regular expressions are equivalent to regular languages. Using regular expressions to *match a simple pattern* in XML/HTML code is completely fine.
Your terminology's wrong; binary operators have two arguments, so both || and | (and &lt;, ==, and so on) are binary operators - what I suspect you meant is that [| is a bitwise operator](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/op3.html).
Being able to develop for all three platforms (or even just Android/iOS) with the same stack and sharing most of the code between the projects is the big reason Xamarin is successful. There are a lot of .Net devs out there with Android phones in their pockets who would like to mess around with apps using visual studio
&gt;Same thing with Async/Await. C# had to wait for Microsoft to change the language, then .NET developers all shout about how cutting-edge they are. Meanwhile Clojure adds core.async as a library, which does the same thing but much, much more. The functionality was there before. The language change was mostly about making it easier to work work with.
Its split of concern for me. Usage of M-V-VM pattern (IoC version of MVC/MVP) where you can swap out easily each layer and even have more control with CSS and not being force to use FXML at all. You can swap it out any given time. Properties are also a great deal, its probably not nothing ground breaking, but it reduces boiler plate by a high amount. this.nodeTableColumnDate.setCellValueFactory(cellData -&gt; cellData.getValue().dateProperty()); feels very clean.
 There is no point on Java vs C# without JVM vs .NET. * Multiplatformity: You can use C# on almost every platform but it isn't the same as on .net. I used c# on win and linux. On mono, you are very restricted and gtk# isn't even close to java's swing or c#'s wpf. With java you can run your application on any supported os wherever you compiled(if you don't use platform-specific libraries) and you can run your java code on .net with IKVM. Supported oses: Windows, Linux, OS X, Solaris, Android, iOS(with RoboVM). * Frameworks: There is more framework for java than c#. Java is much older therefore a lot of libraries will serve you. Did you hear about Spring? Spring is a very mature aspect-oriented framework. You can use spring with enterprise applications and web-applications too. There are other very useful frameworks for java that you have to try like jOOQ(sql-like database-mapping framework), Hadoop(storage and large-scale processing of data-sets on clusters of commodity hardware), Hibernate(ORM), Maven(build automation tool, very useful for big projects) etc. Good webframeworks: Grails(with Groovy), Vaadin(rich web apps), GWT(by Google), Playframework(from Typesafe, supports Scala), Spark(for prototyping). * Languages: There are 31 languages on .net and almost 50 on jvm. You can find everything from old school to modern languages. The best language on .net(in public opinion) is c#. The best language on jvm(in my opinion with some others) is Scala. Can c# compete with Scala? No. The popularity and the faith that ms provides all your needs for you are with c#: [Scalaist's experience with C#](https://groups.google.com/forum/#!topic/scala-debate/aD2hEe-FN3I). Most of the .net languages is like visual basic(and everything is sharp). Most used JVM languages: Java, Scala, Clojure, Groovy, Jython, JRuby, Ceylon, Kotlin, ColdFusion. * Java vs C#: syntax: A lot of programmers states that C# has better syntax and you can write shorter code with it. Maybe these are true. Maybe not. For example the syntax of c# just burns my eyes. The shortness of code is closer to the truth but if it counts, why they don't use scala, clojure or groovy? Those are all well developed, mature languages. Here is a list of benefits from the view of a .net developer: Automatic properties, Good generics (woven into the libs too), Lambda, Extension methods LINQ, Type inference in locals, Dynamic, Optional parameters, Yield, Async &amp; Await, Collection intialisers, Microsoft and the whole of the .net stack... Good generics, Lambda? We have too. LINQ? We have streams with java8. Collection inialisers? We have something similar. "Microsoft and the whole of the .net stack" - A bunch of companies and the whole of the jvm stack. * Money: The salary of java and c# developers are different but not too much. Both can give you a job easily. It isn't a big deal to get hired by these. And what is with the working environment? If you choose java you will find old, expirienced programmers who develops slowly but surely(with a lot of boilerplate code). If you choose c# you will meet with a lot of vendor hype people and maybe if you are lucky, you can find developers who's aspects are not just the money and the trend. It think these are enough for first ;) 
Oh, that's very much possible. Thanks for the correction.
You really don't need anything fancy. Just consider enough Ram and a big enough screen. Also, why not Linux. I personally just switched 2 years ago and especially developing on Linux is so much easier then on Windows in my opinion.
I would get 16 g of ram. I have to ruin my oracle and jboss locally to test while running the ide
Oracle needs to stop recommending the use of OpenJDK until it is comparable to the commercial JDK, it's not just FX, other parts of the OpenJDK have issues.
Are you going to be running testing VMs on there? Are you going to be running multiple web containers on there? Will you be running databases? Will you be on the road a lot? Is battery life important to you? Do you need a lot of screen real estate? Do you need multi-monitor support? I dev Java web apps on a Macbook Pro, but coworkers have had some decent luck with Lenovo.
Agreed. Try out Linux even if its just a dual boot with windows.
This is interesting, I keep thinking "how will I refactor my applications if I switch to package-by-feature" when reading the article. While I agree with the idea behind package-by-feature, in some cases you will refer to classes in another package. Let say I have a small user management system which let user register an account and manage friendships, and the system has public web API that can be accessed over HTTP. When I apply package-by-feature, I may have the following layout: com.company.application | | + com.company.application.user | | | | | + com.company.application.user.UserAPI | + com.company.application.user.UserDAO | + com.company.application.user.User | + com.company.application.friendship | | + com.company.application.friendship.FriendshipAPI + com.company.application.friendship.FriendshipDAO + com.company.application.friendship.Friendship In the `FriendshipAPI` implementation, I may expose a method which accepts friendship ID and return Friendship object, which contain `User` objects involved in the friendship. In this case, the system will refer from a class in Friendship-feature package (`Friendship`) to another class in User-feature package (`User`). On the other hand, in the `UserAPI` implementation, I may expose a method which accept user ID and return user profile, which the user profile contains list of friendships belong to the user. In this case, the system will refer from a class in user-feature package (`UserAPI`) to another class in friendship-feature package (`Friendship`). I think package-by-feature is suitable for systems that the features are independent from each other... Am I right?
&gt;Record recordWithAge = Record.of(age.of(23)); That almost physically hurts.
The key here is that while return accepts a single value in Java, an expression can always be used where a value is expected. This may look unexpected at first, but note it's no different than an int function returning, say, "a + b" (where a and b are ints ) or "a + 1". All of these are single values. But they're described by an expression. || is an operator in boolean expressions just like + is on numeric or string expressions.
There's an open source project called JINQ that's trying to bring a native SQL API to Java via lambdas.
AFAIK escape analysis just allows the runtime to replace some heap allocations with stack allocations. How does it remove the overhead of ``Object``?
In the process of replacing heap with stack you remove the need to reference the class for the object, remove the need for a memory cell and simply have a tight structure of members like in C. (This makes sense since, if you know you don't need to allocate an object on the stack, you know basically everything about how the object could conceivably be used anyway due to the scope.)
True, although having hundreds of different libraries for everything has its downsides too. As someone working full time in ASP.Net, I find that integration of multiple libraries is quick and painless. I used to be a Java developer, and believe that Java projects bring on board a lot more ceremony and configuration than you average .Net project. My general impression is that .Net is slightly more productive and streamlined, but slightly less flexible than Java. 
I guess my response would be how is a feature reusable? It contains domain-specific code. Consider my example of the data layer. Often times it is used by various other layers (e.g. User interface, APIs, etc.). The entire layer is cohesive and packaged together. By making the data layer packaged together, you allow it to be exposed in a variety of different ways. This includes ways that you never originally planned for, but can support. That's VERY powerful. In large applications, you often have entire portions of your application separated from each other (Entire subsystems are on different machines/environments). Consider the notion of Service Oriented Architecture. Each "service" is a layer in your architecture. By keeping it separate via exposed interfaces, you can independently scale and change the system without affecting other areas of your system. I know this article is about packages, not entire systems, but often times you should build projects that are cohesive and solve one problem. If you want to package-by-feature in a small project, that's fine, but the notion that you should package all of your "user" or "doctor" specific code in one package will likely cause pain when growing the system. BTW, if it's working for you, great! In my experience with large applications, it's caused a lot of scaling/reuse pain. Do you have any examples in the open source world where you think this works? I'm genuinely interested to see it in more detail than basic examples.
&gt; I think package-by-feature is suitable for systems that the features are independent from each other... Am I right? I think this is exactly right, but unlikely in nearly every system. Most domain-models are coupled to each other. How many systems have you defined where each model is independent of all other models? I'd love to see what problem it solves. :) I'd actually love to see a real application's code that has used this structure and analyze the resulting design. I bet it would expose some more interesting thoughts on this.
&gt; For example, I do a lot of number crunching in java, where c# would just be slower (and I do care if my code runs on a weekend or takes a week to complete). Could you expand on this? I had the understanding that .Net and Java are much the same in terms of performance.
Does anyone know how to get reddit to recognize the whole block as code rather than segments as above?
My experiences with the 4.0.1 promoted builds have been pretty good so far. Fixes some glaring 4.0 bugs, no stability issues that I've seen. Few minor bugs here and there but way better than 4.0 release. http://dlc.sun.com.edgesuite.net/glassfish/4.0.1/promoted/ 
&gt; ASP.NET might be open source, but it's not exactly open development Well, it remains to be seen what direction MS takes with this new OS direction. They are certainly late to the game.
Personally I think JavaFX isn't all that great. It has a lot of the right ideas, but every time I've touch it it feels incomplete. A great example is the CSS+FXML. Many of the common CSS style tags simply aren't supported. For example, "width". That isn't to say that C# is better than JavaFx, just that I'm not convinced of JavaFx's greatness. It feels like it is going in the right direction, just that it is incomplete.
I'm with some of the other people in this thread, working on rather large pieces of software I just don't see how package by feature would be feasible, but I do like the concept. I keep thinking about trying out package by feature on a small project just to get an idea of it and see how well it works for me, however unlike PBL I don't know where to even start with creating packages. Where do things that aren't unique to a feature go, like infrastructure, utility, base classes, etc? Also is there any sane way, other than "don't do that", to enforce layering violations? No matter how you package it, your data model should probably not be calling methods on your views/guis. I'm not saying one is better than the other but coming from a PBL mindset it can be difficult to fully realize how to organize things in PBF. None of these articles advocating PBF ever tell you more than "package private by default, group things by feature". I'd love to see someone take a relatively small project that is PBL and then reorganize it to be PBF. (EDIT: not just an made up example but an existing project)
Darn, I tried it both ways but it's still not working. The first allowed the ball to go past the top border and the second allow the ball to go past the top, right, and bottom borders. I believe I may have figured it out though. Someone please clarify because I only figured it out with trial and error but would like a clear explanation for what I actually just did... lol SO when accounting for the borders, the top border seems "higher" or farther from the middle than the other borders. From my understanding, the origin (x,y) = (0,0) is located at the top left of the JFrame/Frame/Window and images/objects start positioning from top left as well. Meaning, when accounting for borders i need to use height or width of ball for the bottom and right borders respectively. However, I assumed that the top and left did not need accounting for since it's at zero. However, the top border seems to farther, maybe due to the Title or larger area at top compared to nothing around other edges? I hope this makes sense.. When I change the section for colliding with the top border, for some reason I need check for position x to be greater than 0. Since the starting position is 0,0 I would expect when the ball's y position to be 0 or less; Instead, I have to check if it's 30 or less but I don't know why other than I tested and it worked. I tried the following: public class BasicCollision extends JFrame { int x, y, ballX = 15,ballY = 15; int boardL = 0, boardR = 300, boardT = 0,boardB = 300; private Image dbi; private Graphics dbg; public class actionListener extends KeyAdapter{ public void keyPressed(KeyEvent event){ int keyCode = event.getKeyCode(); if(keyCode == event.VK_LEFT){ if(x &lt;= boardL) x = boardL; else x -= 5; } if(keyCode == event.VK_RIGHT){ if(x &gt;= boardR - ballX) x = boardR - ballX; else x += 5; } if(keyCode == event.VK_UP){ // if(y &lt;= boardT + ballY) // y = boardT + ballY ; // if(y &lt;= boardT + 20) // y = boardT + 20; if(y &lt;= boardT + 30) y = boardT + 30; else y -= 5; } if(keyCode == event.VK_DOWN){ if(y &gt;= boardB - ballY) y = boardB - ballY; else y+=5; } } So just to clarify, When the up key is pressed, checking if the ball's position is 0 or less doesn't accurately find the border. I have tested the following three situations but only the last one worked., The first didn't stop ball at all, the second fell short, and the third was just right.: ------------------------Example 1-------------------------------- if(keyCode == event.VK_UP){ if(y &lt;= boardT + ballY) y = boardT + ballY ; else y -= 5; } ------------------------Example 2--------------------------------- if(keyCode == event.VK_UP){ if(y &lt;= boardT + 20) y = boardT + 20; else y -= 5; } -----------------------Example 3------------------------------------- if(keyCode == event.VK_UP){ if(y &lt;= boardT + 30) y = boardT + 30; else y -= 5; } Can someone please explain why I had to account for a larger area or whatever for the top border and not the others? Thank you. I hope the information I provided is organized and easy to understand. Any help is appreciated.
You could look into another JavaEE app server, like TomEE or WildFly
ok cool. Thanks. I went back and reformatted my post. Completely overlooked the formatting help link lol.
success!!!I'm back in business! Thanks soo much for the help. 
&gt; but coworkers have had some decent luck with Lenovo. Lenovo what? Lenovo makes quite a few products.
I don't believe Oracle ever recommended OpenJDK. They have always recommended OracleJDK. The only companies that I have seen ever recommend OpenJDK is Red Hat and Azul.
What was it? The extension? The slashes?
It's better than: Map&lt;String, Object&gt; properties = new HashMap&lt;&gt;(); properties.put("age", 23); Record recordWithAge = new Record(properties);
I'm new to the team, so I'm aiming at what platform they are using, which is windows. Linux is a possibility down the road. Thanks!
Thanks for the info!
Or even: Record recordWithAge = new Record(ImmutableMap.&lt;String, Object&gt;builder() .put("age", 23).build());
&gt; However, the top border seems to farther, maybe due to the Title or larger area at top compared to nothing around other edges? I think that's what the issue is. [This](http://stackoverflow.com/questions/5097301/jframe-get-size-without-borders) might be of help
In Eclipse - I don't know. But IntelliJ would make typing that a lot shorter, e.g. it would automatically suggest the rest of "mailer" once you have typed "m". Its typing assistance is marvellous.
I code in C# for a living, so I'll try to address your points, though I'm not actually sure that you're not just trolling. &gt; Adding Structs * This is a positive change. You do not have to create your own structs, though you will likely wind up using some of the ones created in .NET's System namespaces. There is a time and place for structs, and it is much less common than classes. Unless you're going to give a specific reason they're bad then you have nothing. For more information: http://msdn.microsoft.com/en-us/library/saxz13w4.aspx &gt; Adding Operator Overloading * Well used operator overloading can be a benefit for readability. I don't use it very often at all, but when it is the right answer any other answer feels contrived. &gt; Adding Properties at the language level * Properties, and automatic properties, are wonderful for representing what you would normally do with getter and setter methods. They reduce a large amount of boilerplate. &gt; Throwing the baby out with the bathwater with checked exceptions * I don't understand what your specific complaint is. &gt;: instead of implements and extends keywords * ":" as an operator is the same as C++, and it has very well-defined usage rules around how you can derive. Up to one class, abstract or no, and then N number of interfaces. This one is petty. &gt;Partial classes? WTF. * Partial classes have a time and place as well. They're mostly used to store boilerplate code that is auto-generated by a tool. This allows a tool to wipe and recreate a file as often as it is told to while allowing the class generated to be extended with user code in another file. And in the end the compiler will combine the user code with the auto-generated code to create a class. They are a good thing when used right.
Eclipse does that as well if you press ctrl+space, but I was hoping it would be possible to do the full declaration in one key combo, rather than 3.
I am all for lightweight containers. Tomcat and Jetty are pretty good choices. They are easier to install, maintain &amp; configure than GlassFish etc. If you need specific JEE features, you can just bundle them with your web app. This leaves you in control of which versions and which libraries, and not the application server.
You should use JSON instead of XML, it's much easier to parse especially considering Android already has the org.json library built in. Just use this URL: http://www.reddit.com/r/EarthPorn/.json instead of: http://www.reddit.com/r/EarthPorn/.xml
* often the specific type is of no concern, and if it is, the implementor of the class should choose them. * the class as it is leaks unmodifiableCollection instances on every get. Rather wrap the collection in the constructor. If you require internal access, keep a reference to the original collection handy.
That is quite a difference. It would be interesting to see how Microsoft's implementation compares.
Java 8 means a minimum of 2-3 years before we can use the new features in the corporate world.
https://blogs.oracle.com/henrik/entry/moving_to_openjdk_as_the
Dang. That's a good example of bad management not understanding what tools a developer needs to be productive. I'm very fortunate, I got a retina mbp loaded and a 27" Mac display. More then I need, but it very much makes the day to day a bit more enjoyable. (Not an apple fanboy, but they do make great Dev machines in my experience).
If you don't use Java in your browser, what do you need 6 for? Just use Java 7, don't worry that it won't work in Chrome (but Chrome will still work) and enjoy your Minecrafts. 
It is the reference implementation not the recommended choice. Glassfish is also the Reference Implementation for Java EE but Weblogic (their expensive product) is the recommended choice.
Nice choices
shhh, stop ruining my jokes for fake internet points with your logic D: 
http://mail-archives.apache.org/mod_mbox/www-announce/201406.mbox/%3CA348DAE4-9556-4BF4-A455-9C2766846C9A%40apache.org%3E
Think of what the expression without the || would yield. It's an expression that is evaluated to a boolean and *then* it is returned.
Unfortunately the NVidia Optimus setup on the ZBooks means that you have to fiddle with the kernel boot parameters (``nouveau.modeset=0``) a bit during the installation, but otherwise it's been smooth sailing so far.
Really, I want to know as well. :S I think it would almost definitely be the extension though.
Create a Java code template, generic or class specific, and access it with ctrl + space 
Good idea, but currently there is no way to camelCase the type of the object. The best I can get is something like...: ${type} ${new_name} = new ${type}(); when I really want: ${type} camelCase(${type}) = new ${type}();
8GB of RAM and an SSD sounds right for Java dev, but an i7 sounds a bit overpowered to me. I personally use a desktop and a Macbook running W8.1 for my work. My desktop is an i7 2600k @ 4.5GHz/16GB RAM/256GB SSD, and my rMBP is a Haswell i5/8GB RAM/256GB SSD. For dev purposes, I rarely see a performance difference between the two of them. As far as specific laptop recommendations, you should give more information. What's your budget? What would you like to emphasize (battery life, weight, power, GPU, etc). Will you be using your laptop for anything other than Java dev?
I don't have Linux set up on anything other than a Raspberry Pi, and to be honest I'm not interested enough to spend the time setting one up just to speed test the two. However, I did install Mono on Windows and tested Pidgits on both .Net and Mono and both were within a couple milliseconds of eachother with 10,000 digits. I did make a couple changes to the source code: the first was to reroute the console output to a file, the second was to use a System.Diagnostics.Stopwatch to time the instantiation and running time of the class, then output that to the console. I did try to get the Java version, but I'm not familiar enough with neither Java nor Eclipse to figure out why I'm getting a ClassNotFound exception. As far as I can tell, it's complaining about GmpInteger being missing, but it's compiled it. [Edit] Scratch that last bit, I forgot to put the GMP library in the bin directory like a dumbass. Now to fix what I think is the same issue as I had with the C# version: calling convention. [Edit 2] Ok, I don't think I can use this version of the GMP library I downloaded with Java, as it wasn't compiled for Java, nor does it have a Java compatible wrapper.
Looks nice. I definitely relate on doing better with 1 big display.
* /r/javahelp is better suited. Read its posting guidelines. * You're not telling us what error you get. What happens if the user wants celcius? Exception, error, wrong answer, black holes created? * The first thing I see is that your conversion formula is exactly the same in both cases. Doesn't seem right to me.
Tomcat is my favorite target. I see no need for Glassfish unless you have been given a specific JEE technical requirement. In that's the case TomEE might be a good alternative. It's basically Tomcat with several libraries built-in, basically making it JEE compliant.
Optimizing code is going to be highly specific to the code being optimized, but if you're looking for good advice on Java programming practices conducive to well-written code that often preempts any need to optimize code after the fact, look no further than "Effective Java": http://www.amazon.com/gp/aw/d/0321356683?pc_redir=1402778669&amp;robot_redir=1
1. As /u/TheHorribleTruth said, your conversion is incorrect going from Celcius to Fahrenheit. 2. The issue you're getting is because the parseFloat method is expecting either a clean number, or a number with "f". When you pass it a number with "c" at the end, it throws an exception because it doesn't know how to handle "c". My suggestion is to strip off any alpha characters in the string, leaving only numeric characters. Internally the parseFloat function uses Float.valueOf. You can see the formats it's able to handle here: http://docs.oracle.com/javase/7/docs/api/java/lang/Float.html#valueOf%28java.lang.String%29
WTF are you talking about? Bundling a windows 7? Paying for a license for that? You are just an ignorant troll. Go read or something.
By no means am I any good at Java and I'm on my tablet right now so I can't test your code but the first thing that pops into my eyes is that you're using a awt canvas on swing jframe. You should try using BufferStrategy(). It's documented on Oracle's page.
I'm new to Java and curious: Is there a reason app servers even exist when you can re-create their features using Tomcat/Jetty and some JARs? Are there app servers where bundling everything yields higher performance somehow, or app servers with fancy commercial-only bonus features or something?
* Structs - not useful in a modern object oriented language. They complicate the type system for no good reason. Then the language designers doubled down on that bad idea by using the same operators they use for objects. Then the language designers tripled down by having structs that implement interfaces, methods and properties. WTF. * Operator overloading - Yeah the feature that killed SmallTalk. Yeah let's take a bad idea and reintroduce it since in the future bad ideas become good ideas right? I mean, why learn from our mistakes? The problem with operator overloading is that it hides the intent of the code. It's not easy to look at a piece of code and know what it's doing what does. What does: Customer += Date do? Who knows? Same problem with : Does this class implement or extend? Whatever, that's on a need to know basis right? * Properties at the language level - Hides performance deficits. Setters and Getters are more costly than simple assignments and hiding this fact only produces less efficient code. * Partial Classes - Yeah I understand partial classes. They were introduced because the VS team were too incompetent to build 2 way GUI design tools that could write to the same class file (even though C# was copied from Delphi where they had already solved that problem but again - why learn shit right?). Why couldn't they have just used 2 classes like Java does. One for the GUI and one as a controller? What, they never heard of composition? Partial classes are the reason why in the 21st century 2 developers can't work on the same project at the same time. Yes folks it's true - try it yourselves. You can only do that if you pay more to 3rd party jetbrains for Team City and Resharper. The reason for this is that the VS project file has to reference every single file - sorry no wildcards since the compiler needs to know extra meta information in order to compile code with partial classes. Yup and M$ uses a big ugly XML format for their project files which inevitably conflicts if more than on dev adds code. So forget automated builds and continuous integration since builds **by default** fail. 
I use Tomcat with the Java EE jar files include in my application. It has worked well for me. It is nice to be able to have the control to update just one module. as others have said Tom EE is also a good option if you prefer to have everything bundled on the server.
Is there a way to convert that into a string? 
If you are going to use a lot o the jee features, it is often nice just to get the package all at once instead of putting it together yourself(like a linux distro that already has the programs you like). It also can occasionally be a concern when you are building an application server a la carte, that the combination of jars you come up with was not tested together as a unit in the same way as a server that is packaged and distributed together. 
Am I missing something? The site does nothing at all.
Hmmm what browser are you using? Scroll down and click on the Java Basics link. The Github and Linked in stuff isn't up yet http://coffeehouseprogrammers.com/javabasics.html
lmao im an idiot. I didn't even both scrolling down. To me it looked like a landing page and I didn't bother to look at the scroll bar.
No worries man! Thanks for checking out the site! I will be updating this site everyday so keep checking back in. I will soon have a sign up for our newsletter that will allow access to premium content and ebooks by providing your email address. 
&gt;Structs - not useful in a modern object oriented language. They complicate the type system for no good reason. Structs - I've used them very recently to wrap a C library. Maybe some kind of custom marshaling scheme could make that work with a normal class, but it was nice to be able to replicate the data structures as they existed exactly. Does that not count? &gt;Then the language designers doubled down on that bad idea by using the same operators they use for objects What's wrong with that? &gt;Then the language designers tripled down by having structs that implement interfaces, methods and properties. WTF. You know that under the hood objects are just structs with functors, right? I don't understand the vitriol here. If you saw a struct with a dot operator call to some member function would you really not know what was going on? How often would that even come up? &gt;Operator overloading - Yeah the feature that killed SmallTalk. Yeah let's take a bad idea and reintroduce it since in the future bad ideas become good ideas right? I mean, why learn from our mistakes? The problem with operator overloading is that it hides the intent of the code. It's not easy to look at a piece of code and know what it's doing what does. What does: Customer += Date do? Who knows? The fact that you can do something stupid with a feature doesn't make it not useful. There are a million good ways to overload operators that are extremely clear. &gt;Same problem with : Does this class implement or extend? Whatever, that's on a need to know basis right? I literally have no idea what you're talking about. It's trivial to see both things for any given class definition in C#. &gt;Properties at the language level - Hides performance deficits. Setters and Getters are more costly than simple assignments and hiding this fact only produces less efficient code. Every time I have to look at .getPropertyName() I want to blow my brains out (and not even just because of the new trend of dumping pascal case for method names). Whatever minor performance impact you think this has, I guarantee you the alternative is not preferable (and if you want to eschew encapsulation to gain that back, you still have the option). &gt;Partial Classes - Yeah I understand partial classes. Then I don't understand why you brought up implements/extends. That has nothing to do with anything. &gt;Partial classes are the reason why in the 21st century 2 developers can't work on the same project at the same time. lol Well this is just demonstrably false.
 final byte addressString = java.net.InetAddress.getLocalHost().getHostAddress();
(and btw, the "f" is for "float", not for "Fahrenheit")
Anecdote: I have used BufferStrategy on a JFrame, but I wanted to add Swing components for mouse interactions, too, so I made a JFrame with Swing components and a large JPanel. Then I used a Window (AWT) that is kept just in front of the JPanel. (Window can do BufferStrategy.) It was very tricky, but now it runs very smoothly.
Bingo. I was about to reply on a similar vein but you took the words right out of my mouth. I would also like to add that I like both languages. They both have their positives and negatives. I view them as similar but different tools in my toolbelt. There really doesn't have to be a "winner" between the two languages. 
[Um... something is broken](http://i.imgur.com/BeZj1Sw.png)
Google Chrome Version 35.0.1916.153 m I also have adblock, adblock plus, and DoNotTrackMe extensions.
First off, thank you for your feedback! My goal is to teach people who have little to no programming experience how to code. I will get into the more advanced stuff later on. Keep in mind the site is still a work in progress. I will be adding more to the first lesson still. I want to make this a site where you can learn java, it/network principles, php, mysql without the clutter. Keep me updated, your support is very much appreciated. 
Thanks for your feedback Nowin, I know this sounds silly but I experienced the same thing when I wasn't in full screen mode. I will look into this more and get it fixed for you. In the mean time try resizing your web browser and it should look better. EDIT: It should look better now! Thank you!
I appreciate the idea of doing a start-from-scratch tutorial, but you still have some flaws. The "Java Basics 2" link just goes to the page it's on. Are you just not done with part 2? If you're assuming 0 programming experience, you need to explain what's going on more. Throwing them into that little program is going to be a bit much. People who've never used java are not going to have any clue on what *any* of those things mean, so it isn't teaching them anything. You might want to start with a basic overview of OO programming and practices. How long have you been programming?
I really like having an SSD in my machine, as it speeds up pretty much everything. As other have mentioned, more RAM and multiple monitors are both good to have. Another important note if you are looking at laptops is that screen resolution on many models tends to be lower than I like. Another important thing to consider is that if the machine breaks you are paying for a dev you aren't using, so spending a little extra for a top-end service plan is worth the money. This is doubly true on laptops, which are more prone to failure and damage. I paid about $400 for for the service plan on my lenovo - a steep initial investment, but if anything ever needs to be fixed they will overnight me a part and have me back up and running in less than 24 hours (which has happened twice now).
Keep using glassfish
I have been programming for over 7 years. I understand your concerns, and I will be addressing them. I see what you are saying and I am working hard to think of ways to make this as friendly as possible. And you are correct, I am still working on tutorial 2. It will be up in the next day! Thanks again Nowin, I am taking all your advice to heart. 
Head First Java is also a wonderful resource! I can certainly attest to that. 
Thanks to everyone who has supported us! It means a lot! I will be updating this site and I will be showing you all how to create a 2d sidescrolling game from scratch as well as many other interesting and useful tutorials. We are also considering building a simple meet up page for people to use to organize programming sessions at local coffee houses across the world. Thanks guys and gals it is very much appreciated!
Thanks for not mentioning the [crosspost](http://www.reddit.com/r/learnprogramming/comments/2888iz/java_im_learning_can_anyone_help_me_understand_my/).. *sigh*.
* [java-performance.info](http://java-performance.info) has good writeups about the performance of different computations * [psy-lob-saw.blogspot.de](http://psy-lob-saw.blogspot.de) has some good information about optimizing concurrent programs * [shipilev.net](http://shipilev.net) is Alexej Shipilev's blog - he is the creator of JMH, the java microbenchmark harness. A true performance geek if there ever was one. Apart from that, here are a few hints from my personal experience: * profile, profile, and don't forget to profile. Of course, a java VM running today is a seriously non-linear beast. * know your data structures. If you have four integer values, create an int[4] or an object with 4 integer attributes, don't stuff them into a TreeMap&lt;String, Integer&gt;. Also know the not-so-standard data structures like BitSet and EnumSet, etc. Arrays may be inflexible, but give us a lot of mileage for their simplicity. * Avoid creating unnecessary garbage. This obviously applies to autoboxing. Use [trove](https://bitbucket.org/robeden/trove) collections or plain arrays for collections of primitive values. If it is easy enough to do, reuse objects (if you need to make them mutable, add an immutable public interface and keep the mutators to the enclosing class). Or if you only need a count of the union of two sorted sets, writing a method to iterate them in lockstep and keep tally instead of building the union set and calling size() (Note: Only do this if your system is memory-bound, the code in question is in a tight loop *and* you have unit tests in place) * Use concurrency only if a) your system is ridiculously parallelizable, i.e. only immutable data needs to be shared among threads, b) your system fits a tried-and-tested pattern (e.g. map-reduce) for which you can get good library support, c) all other options are exhausted. Be aware that going parallel may well make your program go slower. Be careful about IO - e.g. before I joined my current company, they would issue writes from multiple threads, thrashing the hard disks so badly that they had to swap in a new one every 4 weeks. I usually have one designated IO thread and use a work queue or a [disruptor](https://github.com/LMAX-Exchange/disruptor) to distribute the work. * CPUs are fast nowadays, as long as they can work straight through the code. They slow down considerably on branch misprediction and cache miss. This means if pessimizing part of your code to use less cache may well be a net win. I have an application that now runs a whopping 50× faster due to one fairly simple optimization that god rid of unnecessary writing to memory and thus kept the cache lines clean. * last but not least, tuning the VM (especially garbage collection) to your workload may shave off a few percent in runtime without much cost.
Be open. Be curious. Prepare to have your mind blown every few weeks. Learn fearlessly and teach patiently. Fail fast and learn from mistakes. Enjoy yourself. Be active in the community, join or create a few open source projects along the way. Once you actually enter the industry, take care not to invest too much in our job. Take pride in your work and beware undue pressure from management. If you want, you can freelance for some time or join a body shop, uh, sorry, a consulting company to learn to know some big clients. Know that the industry is nothing like college - both in good and bad ways. Listen to your body. If you are too stressed out, look for another job *before* you burn out. It's a serious problem with IT folks, because we suffer a lot from impostor syndrome and do work that is not easy to measure. Also read [The pragmatic programmer](http://pragprog.com/book/tpp/the-pragmatic-programmer). Seriously, this is the best book about working in the software field that I've ever read. On a more theoretical bend, [Structure and Interpretation of Computer Programs](http://mitpress.mit.edu/sicp/full-text/book/book.html) is a very good introduction on the sclence side of CS, freely available online. And while we're at book recommendations, [Gödel, Escher Bach](https://en.wikipedia.org/wiki/G%C3%B6del,_Escher,_Bach) is also a delightfully mind-blowing read. (No affiliate links, I don't need or want to make money with this).
Try ``org.apache.poi.ss.usermodel.WorkbookFactory.create(file)``. This will give you a ``Workbook`` instance, which you can then use to get just about everything in your excel file.
That's right. I didn't want to go into format strings as it's a bit out of scope for someone struggling with basic Java. I didn't downvote you, BTW.
The #1 thing a tutorial site/whatever should have: dedication Pls show us that, I'll be following this for a while
http://stackoverflow.com/questions/15760724/read-excel-file-using-apache-poi
Why would you choose to pay for windows (or mac) when you can get a good linux for free?
To give you the TL;DR, the 9 points in the article are: 1. Java is slow *(It is usually quite fast)* 2. A single line of Java means anything in isolation *(It doesn't e.g., because of what the compiler might do)* 3. A microbenchmark means what you think it does *(Microbenchmarks are error-prone)* 4. Algorithmic slowness is the most common cause of performance problems *(Usually algorithm choice isn't a huge problem)* 5. Caching solves everything *(Adding caching increases complexity, and doesn't fix the underlying problem)* 6. All apps need to be concerned about Stop-The-World *(Profile before worrying about GC overhead)* 7. Hand-rolled Object Pooling is appropriate for a wide range of apps *(Object pools are very error-prone)* 8. CMS is always a better choice of GC than Parallel Old *(Make your choice of GC based on profiling and testing)* 9. Increasing the heap size will solve your memory problem *(Heap size may not always help)*
Really thanks for the explanation. Have to go further on this :)
&gt; They are easier to install, maintain &amp; configure than GlassFish etc. Why is Tomcat easier to install? Both Tomcat and GF are installed by doing an unzip!
I find it unfortunate that the [performance comparison](http://bytebuddy.net/#/tutorial) omits [ASM](http://asm.ow2.org), which admittedly has a rather complex API (because it very thinly wraps java byte code's complexity), but is actively maintained and should be a lot faster than the old cglib or the internally complex javaassist (At least in my benchmarks, it was an order of magnitude faster than a java proxy). This may be due to the fact that Byte Buddy actually uses ASM to create the byte code.
To quote the article: &gt;**Java is slow** &gt; &gt;Of all the most outdated Java Performance fallacies, this is probably the most glaringly obvious. &gt; &gt;Sure, back in the 90s and very early 2000s, Java could be slow at times. &gt; However we have had over 10 years of improvements in virtual machine and JIT technology since thenand Java's overall performance is now screamingly fast. &gt; &gt;In six separate web performance benchmarks, Java frameworks took 22 out of the 24 top-four positions. &gt; &gt;The JVM's use of profiling to only optimize the commonly-used codepaths, but to optimize those heavily has paid off. JIT-compiled Java code is now as fast as C++ in a large (and growing) number of cases. 
Great. Thank you for the help. 
(I just fixed an error: The String variable can't be an array, of course.)
Happy free-tier member here. 
It depends upon your use-case, but a very quick comparison would be to check the length of the files first. Compare the two File.length()'s, if they differ you have a very quick comparison. If they are the same, then you should fall back to scanning of the files.
The front-page demo of the API looks pretty nice. I'll definitely be checking this out.
This is literally the first thing addressed in the article. Did you not even click it?
Pop quiz: class Person : Something { } Does Person extend or implement Something? Answer: **unknown** What is the output of the following code: Account account = new Account(); account.AcccountNumber = "1234"; account.Name = "Savings"; account.Balance = 10; adjustAccountBalance(account, 10); Console.WriteLine("AFTER: " + account); void adjustAccountBalance(Account account, float balance) { account.Balance += balance; } Answer: **unknown** &gt; Well this is just demonstrably false. Then demonstrate it then. No cheating now. Visual Studio and VSTS only now....
JavaFX doesn't have the single event dispatching problem that other GUIs (including WPF) have. JavaFX comes with cross-platform 3D out of the box. Try doing any 3D with WPF - oh yeah sorry - you can't. 
How about file checksum comparison? 
Hey yowmamasita, thank you for your feedback and support. I will not disappoint. Your support is very much appreciated!
&gt; JIT-compiled Java code is now as fast as C++ in a large (and growing) number of cases. And this is probably not exactly true, but it's an irrelevant case anyway for the same reason they given in #3. Microbenchmarks are useless. (Java is not as fast as C++, but it's easily quick enough)
&gt; Consequently for applications that have a human as their primary user, a useful rule of thumb is that Stop-The-World (STW) pause of 200ms or under is usually of no concern. Is there a citation for this sort of claim? 200ms seems long.
&gt; Is there a reason app servers even exist when you can re-create their features using Tomcat/Jetty and some JARs? Is there a reason linux distributions exist when you can re-create their features using the kernel and some tar balls?
I wouldn't consider this a TL;DR since these headings have completely useless meanings when read alone versus reading the full article. 
I agree, but since the first thing I usually do after reading the initial opening is to skim the headings, I thought it might be useful to copy them over. I've expanded them with the author's opinion now though, as I agree this is more useful.
&gt; big ass app server in a large enterprise than a couple of smaller tomcats. TomEE is some 30MB download size. Tomcat + all the jars people pipe on top of it is easily 100MB to 200MB.
It's a new site, of course, it's nothing there. 
Why you don't change to Wildfly or Jboss. I don't like Tomcat because it's not an application managed server. Also, It lacks a lot of jar library. 
First: Please stop spamming your blog on reddit. Next: You don't understand what abstract classes are for. The big win with abstract classes is when the class mixes abstract methods with final methods using them. That way, your abstract class can set up a contract for concrete implementations to follow, i.e. validating input and output to the concrete methods that are called, and the concrete heirs will be bound by the contract - or face the consequence of their caller getting an exception. Also: Your Point 3) to remember is wrong: Keeping a class abstract even without abstract methods clearly conveys the intent of only using sub-classes. Also on a different note I have seen people making utility classes abstract (they never need to be instantiated, so there's no penalty), but that's bad style IMO.
Oh no, [&lt; 100ms is perceived as nearly instantaneous](http://blog.teamtreehouse.com/perceived-performance), and this is only for UI interactions for a dumb data entry app. I can tell you that on many frequently used applications (web browsers) the bar is even higher. Java is perfectly capable of producing applications that respond in &lt; 100ms on a regular basis. GC is generally scheduled wisely enough that it won't outright kill the user experience. The above really isn't so important because GC doesn't frequently block my user apps (client or browser), I'm just surprised that the overall GC takes that so long, so I was hoping for a citation.
Thanks for the feedback! hmm, quite weird. I'm using a galaxy s4, stock internet app and chrome, both seem to be working fine. Are you using the stock app? Nothing is appearing except for the code right? 
&gt; pidigits benchmark is about number crunching No. Those C# and Java programs are both using an external arbitrary precision arithmetic library -- GMP. [n-body](http://benchmarksgame.alioth.debian.org/u64q/csharp.php#faster-programs-measurements) is about number crunching. spectral-norm is about number crunching.
&gt;Does Person extend or implement Something? I mouse over it and instantly know whether it's a class or an interface (given that we're not taking it for granted that you've followed the convention of starting all your interfaces with an "I" like everyone else*). &gt;void adjustAccountBalance(Account account, float balance) { account.Balance += balance; } lol This is just terrible. Why would you call the variable used for the adjustment "balance?" It's garbage code but not at all for the reason you're implying. Seriously dude, this was your example to contrive. Anyway that Console.WriteLine isn't going to produce anything related to Account.Balance because you haven't provided any ToString() override. Now, yes it COULD be the case that the balance property is doing something crazy with its getter, but that would YOUR fault as a programmer, not a fundamental problem with properties. There is an obvious answer as to what Account.Balance will be after that code runs and it's not any more obfuscated than the equivalent example presented without showing what the Account.getBalance() function actually does. &gt;Then demonstrate it then. No cheating now. Visual Studio and VSTS only now.... wat. I use Visual Studio and TFS to work on the same projects as other people every day. There are no problems working with partial classes. I don't know what you're blathering about. *EDIT: forgot the other part about interfaces
&gt; System.Diagnostics.Stopwatch The benchmarksgame Python [measurement script](http://benchmarksgame.alioth.debian.org/play.html#languagex) has been used on MS Vista "[On win32](http://benchmarksgame.alioth.debian.org/play.html#time) - CPU secs: QueryInformationJobObject(hJob,JobObjectBasicAccountingInformation) TotalKernelTime+TotalUserTime Elapsed secs: The time is taken before forking the child-process and after the child-process exits, using QueryPerformanceCounter" 
Depends on the application. 200ms is pretty bad for a video game, and utterly unacceptable for a control system, but a complete non-issue for a text editor. It also depends on how often the pauses happen. 200ms can be acceptable even in a video game—plenty of non-Java games have occasional pauses that long, and they're tolerable—but only if it happens rarely. A 200ms pause every 15 minutes is probably okay; a 200ms pause every 15 *seconds* is terrible.
Err you are using a compiler. Just not the Oracle Java Compiler. Kind of an interesting project. Not sure anything I would dare use it for though.
Thank you, this is helpful!