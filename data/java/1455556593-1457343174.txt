Scala tried to be the alternative to Java and is barely struggling. I had one job where we were told to rewrite scala code to java because they didn't want to maintain scala code. LinkedIn used scala for some of their code base and rewrote it in Java because they couldn't find scala devs. So please tell me, how do you sell Kotlin to managers? 
A dozen of fat jars up and running and a couple deployed in containers, all proxied by nginx-like services or content switches (like big-ip and so on).
so Kotlin accepts java syntax? I had a manager turn down groovy even though you can pretty much write java syntax
Single-JAR distribution listening on an unprivileged port with either an apache or nginx in front of.
Um, train them? Developers are people, not tools.
Yeah, I don't understand which one is the returning value. It is a function which accept another function that accept a HTML type and then returns a nothing or returns HTML type?
I am glad I am not the only one confused by this. 
All this problem can be mitigate by using projects like Xtext or MPS and encode this specification in various eDSLs yourself. 
These problems are general to any Java server. Use a reverse proxy (Apache HTTP; Nginx) or use iptables redirects if you're confident in the JVM application's security. Sysadmins like reverse proxies because it allows them to prevent access to insecure endpoints without application changes. It also enables them to rewrite an application developer's carefully designed caching strategy into a bunch of arbitrary nonsense. It's a mixed bag but using a reverse proxy is the safer approach. Example iptables rules for port 80 redirects: iptables --insert INPUT --protocol tcp --dport 80 --jump ACCEPT iptables --insert INPUT --protocol tcp --dport 8080 --jump ACCEPT iptables --table nat --append PREROUTING --in-interface eth0 --protocol tcp --dport 80 --jump REDIRECT --to-port 8080 # run next line to have changes survive reboot service iptables save Running Java servers as root is really risky; you should not do this. It is possible to escalate only low port priviliges for any executable but I wouldn't.
That's what I'm saying. Many managers don't want to train them. They want someone that will step in and make an impact asap. 
Kotlin does not have structural typing like Scala. It was an explicit design decision not to support it. When and match are very very different beyond appearance.
Kotlin lacks some features that Scala has (mostly the things that make Scala complicated), and Scala lacks some features Kotlin has (such as null safety baked into the type system, and smart casts). In Kotlin, you can do something like: val t = ...unknown type... if (t is String) { println(t.substring(0, 5)) } Within the if statement you can treat t as a String, because it must be.
You can specify the port the web server will use in the application.properties file, or via a command line switch --server.port=80 We generally run in HTTPS behind a reverse proxy that handles our SSL termination though... I build the jar with embedded tomcat, and then deploy to a linux VM. The linux VM basically has a system/app user created, but with external logins disabled. Our apps run as this user (or even a different user per app, just depends), as we don't want to be running the application as root. I create an application specific directory under this user's home with the .jar file, resources directory containing logback.xml and application.properties, as well as a logs folder. /home/springapps/myspecificapp/my-spring-boot-app.jar /home/springapps/myspecificapp/resources/application.properties /home/springapps/myspecificapp/resources/logback.xml /home/springapps/myspecificapp/logs Then I create an init script that will automatically execute java -jar my-spring-boot-app.jar on server startup, and ensure that the external config files in the resources directory are on the classpath.
This is how our farm runs as well (built in Jetty). 
How are they different?
It won't accept java code verbatim, but it's a very simple translation. If you're familiar with java it should be *very* easy to learn to write Kotlin (I learned in less than a day), and even easier to read it.
Most of my methods are private or package private. Next largest number are public, and smallest number are protected. I would have liked private as default, but package private was a decent choice, I think.
Your question doesn't really make sense. Keywords don't clutter code, bad design clutters code. You should determine the appropriateness of making methods public by weighing their purpose, not by frequency.
Well the question isn't about program design choices or anything. Just the semantic design of the language. I'm obviously aware of how to responsibly choose access modifiers. The question is entirely just about the semantic difference of which access modifier should have been the default. In my experience, I happen to produce more public methods than anything else, so it would have been nice if "public" had been the default. I'm not asking about when I should be using public. I know when. Just looking for statistics on how often it *gets* used.
I think progressive android managers will embrace kotlin. The android community is very excited about kotlin so I don't see having to either learn or know kotlin to be a big problem for new hires in the android world.
It is a source file, .class files are compiled byte code for the JVM to interpret. I would link to a more thorough explosion but on mobile at the moment
when you get a chance to send it, would appreciate it. But to be clear, they remain as source files until you compile? Then they become .class files, overwritting the previous source file?
Create a new two dimensional array, with the exact same dimensions, and copy the original chars onto to the new array. Edit: By the way, this isn't the right subreddit for these questions. Try /r/javahelp
Do you want to copy the array or do you want to return the array? Copying and returning are two different operations (and you could do both!)
You can get the JDK from the Oracle website.
DAE MICROSERVICE??? /CIRCLEJERK
Most of my methods are (or should be) public. * The majority of this is forced by the compiler or framework. The compiler forces it for implementations of interface methods. Frameworks that rely on annotations often require the annotated methods to be public, like JAX-RS requires that `@GET`-annotated resource methods are public. * Usually if I'm making a class, it's going to have at least one public method. (Someone's supposed to be able to use the class, right?) * Sometimes the more complex classes will have a few private methods. The further I go down that road, the more likely I am to refactor. Refactoring often involves moving those methods into utility classes. * Many of my non-public methods are on non-public classes, and I make those methods non-public out of laziness. The intent is "if you can import this class, you can use these methods", but package-private (being the default) is more terse than public. * I tend to avoid writing classes that can be extended, so I almost never write protected methods. My classes are also mostly public, but I use package-private (not out of laziness) here more often than with methods. Most of my public classes would be module-private if that was possible. My fields are almost all private. I think private would be a better default access level. I'm not sure why package-private is the default. Maybe this is because a top-level private class doesn't make sense, and the language designers wanted the same default access for classes, methods, and fields for simplicity? Interface methods have public-by-default though...
I might cry.
Pretty sure this belongs in /r/NoStupidQuestions, but you can download it from [Oracles](http://www.oracle.com/technetwork/java/javase/downloads/index.html) website. Make sure you have the JRE as well, and also an [IDE](http://www.eclipse.org/downloads/) as well if you don't already.
They require a username/password to access the repo. So every user has to create an Oracle login and configure their maven settings with them? How is CI supposed to work? Guess we have to continue mirroring the jars on our internal repo...
Typical fucking Oracle. You need to register and sign in to access the files. And there's no directory listing and / or some simple way how to find out what's inside (so far I found only a blog post where's info that currently there are these versions: 11.2.0.4, 12.1.0.1 and 12.1.0.2. So one obscure mechanism of including Oracle JDBC is replaced with another even more obscure mechanism. Thanks for nothing, Oracle.
Wrong subreddit, please read the sidebar &amp; go to /r/javahelp.
Head over to /r/javahelp or to /r/learnjava both of which are more geared towards programming and learning Java. Both subreddits have lots of resources in their sidebars where you can find download links for Java and also many good, free tutorials.
&gt; In my experience, I happen to produce more public methods than anything else, This is possibly code smell. If you have to write too many public methods (except getters and setters) than most likely something is wrong with your approach to OOP and you should revise. In general, public methods should be the exception, not the rule because they affect *encapsulation*, one of the basic principles of OOD.
Indeed, Slick2D is better to make a game but for simple tutorial like that, Swing is sufficient.
By adding the login information to your maven configuration on your CI server?
Don't be shy and contribute to the discussion ;-)
To write modular code, where pieces could be removed or added at any time, you usually start by writing the interface class (where are methods are always public without needing to define so). The implementation classes follow the method signatures and all the rest of the methods are usually protected or private, because they are accessed through the interface class anyway (at least usually, unless some special handling and casting is needed). There should be minimal amount of public methods to keep the API of your classes clean.
thank you! and sorry, it's just those subreddits appear pretty dead. But you pretty much answered my question. So I'd assum src files I located within the src folder and .class files are located within the bin folder (I'm using eclipse)
I bet they still haven't fixed the classloader / permgen leak that prevents tomcat from unloading previous classes on hotdeploy. GRRRRR. - its like a fucking conspirisy. All I here is "Tomcat hot deploy doesn't work....Blah...Servlets dont undeploy...Blah blah blah shite" Except It does work really well. However, If you happen to: 1) Use Spring.... and included all your dependencies in your War. 2) Use Oracle JDBC with once of those dependencies then Oracle will grab hold of the app's classloader, and never let go until you restart the server. The use of Spring and Oracle probably covers at least 50% of all java deploys. So the problem is Huge. There is nothing that Tomcat can do to prevent this. However, tomcat gets the blame for permgen errors, and everyone runs to Spring Boot. Maybe Pivotal and Oracle are in collusion? 
&gt; Maybe Pivotal and Oracle are in collusion? 🤔
☆
Yes - this fixes it.
Pretty much my experience as well. In my experience, the most common causes of memory leaks are usually something innocuous like a map that is part of an object that is made static somewhere. I've come to view static variables with suspicion as a result. If you can mutate your static variable you need to be extremely careful with it, thread safety, memory safety, etc.
Yeah it's sad, but they have some instructions on setting it up [here](http://docs.oracle.com/middleware/1213/core/MAVEN/config_maven_repo.htm#MAVEN9017)
Kotlin is not a functional programming language. It's a procedural language with some functional features. If you want a jvm language for pure functional programming, then use Scala.
That's no reason for a language to not exist. Plenty of better places to work will use it and are. 
p.s. previous version discussed here: http://www.theserverside.com/news/thread.tss?thread_id=48899
I am not arguing that Kotlin is a FP or not I arguing that such notation in that specific function confuse me. 
you said, &gt; So this what the whole "pure code is easier to reason about" which people in FP talk about. Because this code seems not to be pure at all. i said &gt;Kotlin is not a functional programming language.
And what have to do what I said with what you said, exactly? I just arguing that the function notation is confusing (to me) since its appear to be making a side effect and on behalf returning something as well, which in FP languages which I encountered never saw such notation and that was what confused me. In my comment which you quoted above I'm not even talking about Kotlin anymore.
Yeah. I love having my settings.xml all shitted up with oracle garbage. 
What location of the world and what type of applications are using it? I saw android mentioned but is it used in the enterprise?
I've personally seen it used in android and microservices at established, but not enterprise, companies. Its null safety alone is worth the switch. 
good article, but this article is one of those which comes out to be an advertisement later on. Here plumbr is a tool for monitoring java performance
oracle has just destroyed the java.
Personally, for me, I'm a software enginner; I don't work in management. I want the solution that makes my job the easiest. It doesn't affect me directly how much a solution costs, but an affordable price makes it easier to get approval. An affordable price is usually any price that is cheaper than doing it in-house. If your software saves the cost of a full-time engineer or contractor, then an affordable price might be $80,000 or more if there's not a suitable competitor selling for cheaper. What I want out of software, paid or free: - I want software with an active community and self-serve troubleshooting options. - I want to be able to look up my problem on stack overflow because someone else has had and solved it before me. - I want tested, reliable software. - I want good documentation. The API documentation in particular should be excellent if it's not free. - I want to be able to understand it on a high-level so that when a process fails, I can quickly determine if your software is the issue or not. - If I'm paying for something, I want a technical demo that can assure me that the software works for ***my*** corner cases, not a bolier plate demo that fails to take into account the things I've talked to the sales rep about. The cost of free software is testing it yourself, this should be part of the sales process for paid software. - For me, picking up the phone is a last resort. If I do so, I need someone to answer quickly and be knowledgeable. What I don't want out of software, paid or free: - I don't want to have to wait on an e-mail reply from support. Previous problems and solutions should be searchable. - I don't want to be a beta tester or be the user that finds the bugs. - I don't want to get a call or text in the middle of the night or on the weekend because the software failed. - I don't want promises about future features; I want to buy the software you're selling now, not what you're going to be selling in a year. - I don't want the sales rep to treat me like a door to the rest of my company. - I don't want to be lied to by the sales rep; if he or she doesn't know, I don't mind waiting for an answer, but if we invest time and resources in a solution to find out that something it's possible because the salesperson is a dipshit, then your company gets crossed off my potential vendor list forever. - I don't want to be signed up for spam e-mail by enquiring about software. Your reps are of course welcome to follow up, but I don't want to start getting new feature or version alerts in a year.
I want those value types...
What does your software do? Any opinion will largely depend on that (i.e. is this about a library? server software? tool software? SaaS?)
Artifactory can mirror authenticated repos.
I see thanks. I work in an enterprise company and have always wondered what it is like outside of my area and this type of work. 
this is a great comment, not just applicable to this thread
good info on your priorities. for me, the license was up there - i wanted the assurance that the software was going to be supported long term and felt that allowing 3rd parties to make derivatives helped in that regard in the case of my software, support and training are going to be available. but my design goal has been to make the software simple enough that support isn't going to be essential. if it was, then a FOSS license would make more sense whether i've actually met that design goal is yet to be determined 
I'll let it slide this time
My rule of thumb is that as long as its educational, it doesn't matter if it's also an advertisement. 
Ahh ok, thanks for the information, that really helps. Transmitting the JNLP file will be done over https, I hope this is enough.
&gt; runs in the cloud on tons of small machines the license does a few things to help in this case: * gives the user the choice of any one physical core or "the computational equivalent of a single core of a 2015 intel core i5 6600" * if it's difficult to measure actual usage then you're allowed to estimate * if you end up using more cores than you planned, just buy more when you realize it - there's no penalty * core usage is based on peak demand, not peak usage, so if a bunch of things run at the same moment, but didn't need to, you can average them out over time i'm hoping these assurances help to alleviate the risk that you describe, though certainly for someone that's running 1000s of servers flat out, their costs could be high and it would probably make sense to use something that's zero cost instead 
Mmm...T is not reified. Can Java find the smallest common super type? I dont get it. 
The compiler can infer `T` to be `Number &amp; Comparable&lt;?&gt;`
Does anyone have a short example of a java program that causes a memory leak?
A memory leak in Java almost always just means a reference held unnecessarily, usually in a static variable or singleton. private static List list = new ArrayList(); public static void main(String[] args) { while(true) list.add(new Object()); }
Why?😳
imagine you're writing a web application. you have a static variable in a class that stores information about each request. every web request you handle, you add some info to that data structure in your global variable, but you never remove data from that data structure (array, map, set, list, etc). as time goes by and more people make web requests, you add more data to the data structure, and the JVM allocates more memory to store the data. at some point you will hit an upper limit (since you never remove data from the data structure, thus it never becomes eligible for Garbage Collection), and your application will die because there is not enough space to add more data. that is a memory leak. it's using more and more memory and will eventually exhaust system resources. if you want to have a long running process that won't die, you can fix this "leak": you don't store that data in a global immortal datastructure that will always grow, you use data in ways that will allow it to detected as "no longer in use" so the JVM can reclaim the memory 
Honestly, I haven't really caught the lambda bug yet. I've used it in a few places, but my code formatter (which I prize very highly) makes the code onerous to read. Maybe if I could set special rules for formatting streams in Eclipse I could find the happy place lambdas promise.
&gt; 😳 wonder which of us is intended to be embarrassed ... * microservices are "small, highly decoupled and focus on doing a small task" * the heart of EE is the integration of best-of-breed tools for a wide range of technologies, all running in the same app server they're opposite ends of the spectrum, bare bones vs the kitchen sink. you could implement the same functionality in EE as a microservice, but it's inherently coupled and heavyweight you can drive a nail into a board by crashing a car into a wall, but that doesn't mean the car's a hammer there are also practical differences, eg in how you spin up new instances, migrate between machines, handle crashes, etc, but those are secondary to the philosophic ones 
I use Gradle and Eclipse, my problem with Streams/Lambdas from Eclipse (which is what I use for formatting) is that it wraps things based on my line wrap length, not one method per line. I don't really want to make everything else wrap one method call per line though. Shucks.
Oh, I get it. I was thinking about C-style memory leaks where you mess up memory references. This is java storing data that you've told it to, ie doing what it's supposed to do. :-) 
yeah, since memory management &amp; allocation handled automatically by the JVM, you have to free references for any objects instantiated for space to be reclaimed (to be eligible for garbage collection) when you use global references (e.g. public static List&lt;T&gt; myList), they never fall out of scope, so they are never eligible for collection - that's why static fields (global references) are often the cause of memory leaks 
For me it's this: domain submitted from|count|% :-|-:|-: [javachannel.org](/search?q=%28and+site%3A%27javachannel.org%27+author%3A%27josephottinger%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|26|67% ...|5|13% ...|2|5%
It's passing a lambda, but the neat thing is the lambda has access to a 'this' of type HTML. 
Me as well. When Java came out, we had already Eiffel, Oberon-2, Component Pascal and Modula-3 to play with, but sadly the industry didn't want them. 
&gt; Static variables == global state No, constants aren't state. If you create an object that is composed entirely by final attributes (all the way down to the primitives) ie its immutable than it doesn't contain state. The scope of a constant is irrelevant, although name space is a concern. Its perfectly fine to share read only objects across threads, and it is even fine to have them writeable as long as one thread can write at a time to it (although I would start scratching my head when you need to do this, besides Rust has some nice compiler checks for this).
Just wanted to chime in on the 'per core' pricing - running that in the cloud when I create / throw away instances every deploy, and use larger instances on-demand, makes my head spin. I would much rather have a per-server or per-company license model that I can run for free on developer and QA instances (who wants to pay again for what imo is a required part of the SDLC), and I dont want to have to be constrained or over-provisioned on licensing to handle 2-3 days per month of 32 core, and 28 days a month of 4 core production instances.
What lukas wants is not only sum types but anonymous sum types. Sum type in Java exists via the visitor pattern encoding. And if you find that it is too much boilerplate then https://github.com/derive4j/derive4j is for you.
&gt; No, constants aren't state. I never said that global constants are global state. I said that static variables are global state. That's a big difference because constants aren't variables.
It beats me. I find it very useful in situations where you are doing type conversions.
If you really want a jvm language for "pure" functional programming then you may want to use Clojure instead of Scala.
Okay yeah that makes sense, I've really only seen Hungarian notation in android projects anyhow.
Interesting read, but frankly, are memory leaks really that big of an issue? Memory waste (and thus GC pressure) is somewhat of an issue, but that's usually easy to fix.
Direct link to user's manual: http://docs.jboss.org/hibernate/orm/5.1/userguide/html_single/Hibernate_User_Guide.html
You're right, thanks, I'll delete &amp; repost
you don't "deploy ... to Java EE". you deploy to an app server that's compliant what's the lightest weight app server these days ? 
It's worse than verbose and unnecessary. In addition to those things, it requires extra work to create and maintain and still often ends up _wrong_. Just let the bloody type system and IDE do their jobs.
I like how the actual content was completely fine until the page finished loading and the menu just pushed the content out of the way like that one kid who's always in front of every picture 
Does prefixing "I" to the Interfaces makes it a bad practice? Because I don't like the idea, but most of the people are doing it. e.g. public interface IConnection{ ... }
People seem to be divided over this, I think this convention was borrowed from the [.NET world] (https://msdn.microsoft.com/en-us/library/8bc1fexb\(v=vs.71\).aspx). I usually don't do this, just because I work with an IDE that shows me if it is an interface or a class.
Yup it's bad, the name of the class shouldn't contain anything about it's type. What if we called all Enum's ESomething, it's terrible for the same reason.
It is a programmer enforced type safety which is not enforced by the compiler. In C the only real way to enforce type safety is to store everything in structs. So if you want to prevent assignment from a uint64_t to a uint32_t accidently then you would basically have to do: typedef struct safe_uint32_t { uint32_t v; } safe_uint32_t; typedef struct safe_uint64_t { uint64_t v; } safe_uint64_t; And then you would need to have a `cast_safe_uint64_t_to_safe_uint32_t_masked(safe_uint64_t fv)`. 
Yeah, obj-c style. It is annoying. 
The deploy story doesn't matter conceptually does it? But depending on the customer we either first deploy an AS, then the microservice (automated, so if the AS hasn't changed its skipped and only the microservice is deployed), or we bundle the two together (essentially fat jar) and deploy that as a unit. In the fat/uber jar case the line between putting the Java EE jars in WEB-INF/lib vs putting the war in /deploy and having those jars in /modules or so is rather thin. JBoss WildFly 10/EAP 7 is rather lightweight, starts up in a second or less. Liberty is kinda lightweight as well and can be easily statically tuned and repackaged to only include features (jars) you need at runtime. Payara and TomEE are lightweight too. All of them are unzip == installed. JBoss and Payara even have special builds for the microservice use case (called Swarm and Micro respectively). 
Java is statically typed so everything grand parent says also applies here but in reply to /u/fikske_en_rikske &gt; In a statically typed language hungarian notation has no value at all. It just makes refactoring more cumbersome (need to rename all your variables when you change the type). Your IDE will tell you the type of the object you are looking at. To play the devil's advocate, the IDE can also make it easy to do renaming in statically typed languages. &gt; Like all naming in programming, the name of variables, functions etc should express the purpose, not the implementation. I think this is the real reason why `lAccountNum` and `arru8NumberList` (lifted from https://en.wikipedia.org/wiki/Hungarian_notation ) are bad. To steal more from the wikipedia page: &gt; In Systems Hungarian notation, the prefix encodes the actual data type of the variable. &gt; Apps Hungarian notation strives to encode the logical data type rather than the physical data type; in this way, it gives a hint as to what the variable's purpose is, or what it represents. so maybe there might be a reason why we can tolerate conventions like `usName` Unsafe String Name in local scope. Disclaimer: I am not a software engineer so don't take my word for anything. 
Actually, I find using: IConnectService (interface)/ConnectService (class) preferable to the Java commonplace: ConnectService (interface)/ConnectServiceImpl (class). I feel in my soul of souls that this is correct: ConnectService (interface) / DefaultConnectService (class) but that happens rarely in practice so I've fallen into liking IInterfaceName for interfaces. For other hungarian notation, as others have pointed out, I don't care for it because the IDE takes care of those differences for me. My IDE doesn't tell me that ConnectService is an interface vs an implementation (partially because it's not supposed to matter I think).
Because most people do it wrong. Real hungarian notation int rSource, cSource int rDestination, cDestination spreadSheet2[rDestination, cDestination] = spreadSheet1[cSource, rSource] See the bug? Of course you do, the **r**ow and **c**olumn variables are backwards. Fake hungarian notation int iSource int iDestination Would you have known source was an integer without the `i`?
I don't do iOS development, but I hear that they don't have namespaces so this is the only way they can avoid really screwing themselves over. 
Works OK for me http://imgur.com/APpFVgx the menu is a bit annoying I guess but overall it works OK. 
It is from C++ if I'm not mistaken. In C++ abstract interfaces and abstract class are declared exactly the same way, so you need the `I` prefix to indicate your intentions. COM follows C++ conventions, and .NET followed COM.
I didn't see it at all for like 5 minutes. How hard is it to just type out sourceRow, sourceColumn. 
You're right, public by default would have been great. Kotlin learned from this.
Sometimes the right name for the interface is: Connection implements SpringRequiredMeToMakeThisInterface which is why we get: ConnectionImpl implements Connection so very often I think...
&gt; What tools make use of that Immutable annotation? I believe FingBugs and CheckerFramework.
Basically you take on liability. If anybody tries to mess with me about my use of your software, then you will be paying for my lawyers and any damages, especially if you leak my PII.
The opposite of the [Anemic Domain Model](http://www.martinfowler.com/bliki/AnemicDomainModel.html). Martin Fowler considers this to an anti-pattern. A Fat Entity would contain behavior relevant to the domain, instead of just a collection of getters and setters.
You do realize this is all more or less personal preference, right? Also, read the full post next time, I actually agree with you in principle, the problem is you end up with: Whatever &amp; WhateverImpl if you don't watch out. ***Impl is the bane of all things holy. I'd simply rather have the IWhatever if given a choice between the two.
The reflection rule is too extreme, there are plenty of scenarios where reflection is cleaner. Its too powerful to dismiss as never use it.
Nice start, but gets too dogmatic towards the mid point. For example, it talks about one of the possible meaning of KISS - simple meaning with less 3rd party dependencies. And yet most of the book is smeared with Guava references. Also, the book has conflicting principles. For example, it is well known that YAGNI conflicts with O from SOLID (you should change the old code if you are not going to need old behaviour). And yet the book suggests both on the adjusted pages. I am not saying it is bad. It is just it should be taken with a fare grain of salt. Which is already there on the very first page: &gt; Some of the suggestions may be valid in other contexts, others might constitute terrible advice for those contexts. I just feel it could be re-emphasised a bit more throughout the book.
I assume you are speaking of serialization cases? I can't really think of another reason. Also I'd make a distinction between introspection, which. You probably never need to use and dynamic instantiation which is pretty much necessary in the de-serialization case.
Is Fat entity similar to active record in Rails? 
&gt; You do realize this is all more or less personal preference, right? You do realize that I had three bullets that show why it's not personal preference right? &gt;Whatever &amp; WhateverImpl if you don't watch out. ***Impl is the bane of all things holy. Perhaps you're just projecting "personal preference" because you substantiate that statement with nothing.
A slim entity can still contain a tiny bit of behaviour, but it should definitely not have any dependencies that call out to external systems. Like if you have User entity with an instance field holding the year this user was born, then a getAge() method which on the fly calculates the age from the date of birth field would IMHO still be acceptable.
That does not sound as a memmory leak. Leak is when you cannot access the object from your code yet it cannot be garbage collected. If you have a list or map with requests and do not remove them you can still access them via the interface of the data structure (list, map, etc). It is not leak, it is just storing information on heap instead of database (log file or whatever). Or am i missing something in your example?
I think it's fine, mainly because the only people who actually know of reasonable uses will know not to treat this guide as gospel anyway. Assuming that it's never ok will be the best rule for 99% of developers. 
I think you mean `System.err` instead of `System.in`. The latter is a normal `InputStream`.
Yeah, you are right.
Frankly I think that if you need these you might have to consider redesigning your tests instead. 
A markov chain would come up with a better article. Utter shit. 
Dude, really? Wow, reading comprehension ftw man.... I specifically stated that I agree with your points with a caveat and you seem to REALLY need me to agree with you across the board. Well, guess what? We're all different people with different opinions. Get used to it.
Please try your best to write your content (assuming it is yours) in English rather than writing it in your native language and using a translation service. I have appreciated articles which made me learn something new despite their grammatical problems. Even if your English isn't perfect, people understand. You can try using simplified English, without any words you don't really understand. I might be just speaking for myself here, but when I write I try to convey thoughts in a way that I can understand. If you can understand this comment, and understand the words of this comment, you are more than ready to write great articles in English! Hope you consider.
And why should I use Capsule when I can use Docker and package _anything_?
Like splitting the tests into different files... Edit: Oh god, I just looked at the readme a bit closer and this is a lot worse than I originally thought. &gt; However, sometimes you need some test method not to run between the two first ones. No! These are not separate tests now. Stop! You don't have any guarantee on ordering of these tests! If you really think you need to make sure that two methods run in sequence without an interleaving clean up, it's one method! http://junit.sourceforge.net/doc/faq/faq.htm#tests_2 says this: &gt; The ordering of test-method invocations is not guaranteed, so testOneItemCollection() might be executed before testEmptyCollection(). But it doesn't matter, because each method gets its own instance of the collection. 
Wow - absolutely unreadable, just like the other two posts from the same author on the linked website. **Please, before writing any tutorials, or any content in general that a sane person should read, brush up your English.** The articles all read as if a machine translator translated a machine translated Klingon version of an ancient Elvish original text. Posting in such a completely unreadable language **will make** the best article, with brilliant points and content worthless because nobody will be able to follow through.
Just create a separate test? The problem you're creating is that someone else sees a @Before and expects it to be called before every test. That's the usual pattern obviously. If you want to create an exception just creating a separate test class. Another option is that the pattern of doing the verify in the @After simply might not be the right thing to do: I typically verify calls to mocks in the test case because typically test cases are different enough. It's hard to answer this specific question because without seeing all the code it's hard to design a smarter test but messing with the patterns everyone expects should really be the last thing you do. Future you is going to thank you for it.
die. /thread
Hmm, yeah you're right, separate test files are more appropriate :-) I just find this a good pretext to get hands on custom test rules and annotations in Java. I got your point and I acknoledge separate test files are good idea. However, just for my information, how would you deal with custom test rule (objects with annotations @Rule in a test file) to make sure everyone understands how the rules instantiated are going to impact the tests methods?
Fuck XML!
Spring proxies in both cases, it's just a matter of what it decides to proxy. I'd imagine adding a proxy that implements an interface is more performant than subclassing a class and then proxying around calls to super.WHATEVER(); I don't know for sure though. ... but it's still an annoying side effect
Go ahead you dufus. We'll watch from JavaFX land and just laugh at you. 
*exist Of course they do. Stop looking for Web Dev jobs and start looking for Java and Android remote jobs.
2.8 seems like a great point but I wish he provided an example implementation.
Apache configured HC to run slowly
The Java jobs are not usually marketed as Web Development, even if you are working on a web back end in Java.
With Android N adopting OpenJDK, more people just might... 
Yes they do. But since anyone can write a bit of Java code and make an web app, the job postings are for Senior Developers to get the app out of the ditch that the Junior ones (hired because they're CEO's relatives) got it into. 
Backend, Java Developer, JavaEE Dev, Glassfish/Apache/etc. Or just standard Software Engineer.
Nice to know. Thanks
&gt; Ha ha, yes I know test methods can be run in any orders :-) Not just any order; also on separate threads.
&gt; Does prefixing "I" to the Interfaces makes it a bad practice? It is. It's something some people coming from the .Net framework bring over and I think it's one of the bigger mistakes they made when designing the .Net API. The whole idea of interfaces is that you program against the interface: you past around Lists and not ArrayLists for example. In most cases you create an instance of a concrete type once and then never ever care about the concrete type again. So all those I's in front of your interfaces are just clutter and give you type information any IDE will give you anyway as well. 
&gt; To play the devil's advocate, the IDE can also make it easy to do renaming in statically typed languages. In java you indeed need to go in every affected method to change the type declarations, but languages that have implicit typing don't require that. 
It sounds like you certainly could. However, I'd rather not download something else to use for just one thing. Does IntelliJ IDEA have integration with VCS as well?
I actually laughed out loud when I read that. You are showing your age, my friend. I would venture to guess most Java developers never used AWT in their careers.
Yes, Android Studio is pretty much IntelliJ IDEA but with android plugins instead of web development plugins.
Sorry to hear that. So you move from Java 8 Web Stack to a different Web stack?
Faking a benchmark? I guess Ignite have hired some engineers from Volkswagen.
Maybe it's just me, but I think people mainly run docker for all the other components, load balancer, proxy, database cache etc. So if you already need everything anyway it's just normal not to treat the backend code differently. 
That's actually a very good point. Currently, we do not containerize our other services and we probably should. Once we do that, it makes a lot more sense to keep the same deployment infrastructure for services (both third-party and internal). Thanks!
That was the point of the post :) 3 out of 4 memory related issues, which may look like (or a feared to be) a memory leak, are in fact not leaks at all.
I do not consider any of those technologies hot or new. There is very high demand for good Java Developers where I live.
Because people who give that advice have nothing better to do with their time. No wonder you see all the hipster talk around. Other people are busy actually doing stuff.
Both are schema compliant and will be parsed correctly by any compliant parser. As long as your customers are using a compliant parser there shouldn't be any issue writing it one way or the other.
You can bundle everything together, more so with upcoming Java 9's linker.
It is the new hype. Our customers are just doing business as usual in their deployments. Some of them just bundle everything together in a directory, jre and jars, and that is about it. 
I find that docker really helps with the whole idea of 12 factor apps. Especially from a setup perspective. Not having to set up each developers class path, environment variables etc is a huge boon to getting up and running quickly and even keeping velocity. Just my two cents
&gt; Dude, really? Wow, reading comprehension ftw man.... I specifically stated that I agree with your points with a caveat and you seem to REALLY need me to agree with you across the board. Well, guess what? We're all different people with different opinions. Get used to it. LOL, communication Dude! In principle means you don't agree with me actually, implying that I'm speaking from some Ivory Tower.... &gt; ***Impl is the bane of all things holy. I am used to people having different opinions, but at least they don't make inane general statements and try to pass it off as some enlightened perspective with actually backing any of it up.
JVM is the original container.
I have an interest in this area too, though my interest is more about how to facilitate discussions that maximize meaningful conversation and consensus building, as opposed to meaningless posturing and acrimony :-) Building that tool is necessary for any voting tool to be truly useful, IMO. I see your site is also about that too with the range voting for comments.
where I live only for Seniors
Cool! Threaded discussions were actually pretty difficult to get working, just because of the typical problems of hierarchical data in SQL. let me know if you need any help there.
Look at things like Kubernetes and you will realize how little JARs offer compared to Docker
For what it's worth, asking about Node and Rails in /r/java isn't productive. We're here because we *like* Java, because it helps us work better (or so we think). We dislike Node (on average) and suspect the proponents of Node are generally bad coders / script kids who care more about how fast they can make a website that serves a single page request than a large at scale application (generalization, but there's some truth). Node is hot. It will also be dead in a few years (been dying decently well on its own in the past couple). Java is what the plurality of programming jobs are, and will be for the next decade (at least). Java developers get paid well, so if job security is what you're after, being good at Java won't hurt a thing.
I do backend java dev. This is my 2nd job in a row that's been 100% remote for a startup. I've been 100% remote for over 2 yrs. In one case I applied online, in the second case they found my profile on dice or indeed. They were looking for a more senior dev who knew about their niche, in this case analytics. The place i'm currently looking for is on the west coast USA, i'm on east coast.
thanks.
Exactly. It's just about standardizing. Why treat jars differently if the other components are also containerized?
Is your database also in that jar? How about your LDAP server? Or redis? With docker, I type "docker-compose up -d" and everything is running. Quickly. How on earth would you do that with a jar?
Yes. I started on-site and moved remote full time after a few years. I assume English isn't your first language, you should probably work on that - at least for resumes and official type communication. If I were hiring and you asked questions like this - I would not consider you for the job. 
Will they make updating not require an uninstall of the prior version? 
For anyone who hasn't tried Kotlin, please do yourself a favor and check it out. It's legit.
Is this part of spring cloud
I run both side by side. What OS are you running?
Win 10 at home, 7 at work 
Both are iso8601 compliant, so no issue using either. Now... iso8601 doesn't require time zone be specified. Making 2016-02-17T16:01:16.000 valid. Do not allow this. Per the spec, should time zone be omitted, it will be interpreted as local time zone. This could cause mismatch between sender and receiver. Also if this is Java 6 or 7, check out Joda Time. Far superior to java.util.Date or java.util.Calendar. With JAX-WS, you'll need to provide a type converter in bindings.xml. If using JAX-RS, you'll need to provide a converter there, too. I've never done JAX-RS + JAXB with dates, but bindings file probably still works. I use JAX-RS + Jackson for JSON and provide a converter for the ObjectMapper. 
i cringe every time someone say Java EE and microservices in the same sentence
That's true, I should remove some of those js libraries.
??????????????????????????????????????????????????????????? If I were hiring and you asked questions like this - I would not consider you for the job. ???????????????????????????????????????????????????????????
If you use H2 it could be.
Maybe we're all old?
Nonsense, the original use case for Java EE was microservices, called distributed objects back then. Sun was too much ahead at the time if anything. We have many systems based on Java EE which are largely architected around microservice principles. E.g. one service takes care of orchectrating jobs, other service handles notifications, yet another one handles incoming transactions (we have 3 types, there's one service for each), then there's a service for downloads, and one for parsing and pre-processing incoming data. There's a few more, but those are the important ones. Each service runs in its own virtual machine (we use XEN) and its own application server (we use JBoss/WildFly). Most services are duplicated, so we have e.g. a number of the transaction processing ones for each transaction type that are loadbalanced using HAProxy. We have a deploy pipeline were we can pretty much instantly spin up new instances of each service type. Communication is mostly via REST (JAX-RS based). Where it makes sense we use JMS. Updates for each service are very easy as well. It's nearly 100% automated. If only the code for the service has changed it's only a very small .war that is deployed to all virtual servers running that service. And if something more had changed, it's still as easy, just a slightly bigger update that goes out over the wire. Microservices only recently became a hype, but we've been working like this since about a decade. Java EE is perfect for this. Technically any of our services could be implemented using any other language or technology, but everything runs totally smooth now and the Java EE APIs are great, so there's simply no need (on of earlier devs was a Python fan and tried that, but it simply wasn't better and certainly not faster).
The language looks awesome, but I'll need to let it mature a bit before I recommend it to any clients. It really does feel natural, solving many of the gripes I have with java/groovy/scala.
Yep. Distributed in-memory data cache.
Does it address the build system problems? I don't mind Java as a language, I just find its build systems are more complex than I require.
came here to say this after scowering their pages for the answer... you'd think the front page would have some paragraph about it.
Agreed. I'll be waiting for their 1.8 support to be sorted out.
No, just make conversation about your username. It just seemed like there was definitely a backstory. Thanks for clearing that up.
TIL: when a zealot doesn't like a technology, the zealot just calls it a hammer. No further explanation needed. The fact that you aren't explaining *why* Java EE would be cringeworthy when it comes to microservices speak volumes.
the term microservices was introduced, and the general approach popularized, specifically as a reaction against java EE. go back and listen to the original talk that defined the term your "argument" is nothing but doublespeak 
The book is worth a read. &gt; Java Puzzlers: Traps, Pitfalls, and Corner Cases – 24 Jun 2005 by Joshua Bloch (Author), Neal Gafter (Author)
We do it to ensure a reproducible environment. We also deploy with fat jars, but different boxes have different jvms, different config files, all sorts of other randomness. With docker we can test an exact environment in test, and promote that EXACT environment to prod. If there is a problem we can debug and repo on our local boxes. When we deploy we don't have to worry about old configs or any leftover artifacts. On top of that we can build our entire cicd pipeline in a common way, regardless of language or application, since everything is just "docker"
Came here to ask that.
What is prohibiting the jvm from optimizing MessageDigest.isEqual to something similar to the Arrays.equals?
Cool, thanks!
As I understand it, they already have the 1.8 work lined up in their issue tracker so hopefully it won't end up waiting on Android, but I can see your point from the perspective of why they chose to focus on 1.6. Having said that, the main reason I'm waiting is because as much as they want to keep the language very stable after this 1.0, the 1.8 work already smells like it might need to make some breaking (or perhaps just awkward) changes in and around things like collections and streams. I'm happy to let that get sorted out before I start porting much code. ;)
It's kind of an anti-pattern to use randomness in your unit tests, however this is mostly just for stubbing POJOs so I can see how it could be useful.
This looks like a pretty clean implementation. It looks just like how you use mockito, which is really nice. Currently I have a personal library that generates random values for me, but doesn't do the injection, so I'm curious how this will improve my code. What are your plans for additional features?
There are lots of improvements i can make, someone else has suggested constructor injection which is something I have forgotten about. Plus I still need to handle if fields are final. There will be lots of dataTypes I haven't considered supporting as well. They will need to be supported. 
DateFactory.populateFields(..) should avoid the new X() in the else-if block
And another one. domain submitted from|count|% :-|-:|-: [blog.frankel.ch](/search?q=%28and+site%3A%27blog.frankel.ch%27+author%3A%27nfrankel%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|86|83% [morevaadin.com](/search?q=%28and+site%3A%27morevaadin.com%27+author%3A%27nfrankel%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|5|5% [spring.io](/search?q=%28and+site%3A%27spring.io%27+author%3A%27nfrankel%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|2|2% [java.dzone.com](/search?q=%28and+site%3A%27java.dzone.com%27+author%3A%27nfrankel%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|2|2% [docs.spring.io](/search?q=%28and+site%3A%27docs.spring.io%27+author%3A%27nfrankel%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|1% [cloud.google.com](/search?q=%28and+site%3A%27cloud.google.com%27+author%3A%27nfrankel%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|1% [github.com](/search?q=%28and+site%3A%27github.com%27+author%3A%27nfrankel%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|1% [wahlnetwork.com](/search?q=%28and+site%3A%27wahlnetwork.com%27+author%3A%27nfrankel%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|1% [java-allandsundry.com](/search?q=%28and+site%3A%27java-allandsundry.com%27+author%3A%27nfrankel%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|1% [voxxed.com](/search?q=%28and+site%3A%27voxxed.com%27+author%3A%27nfrankel%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|1% [amazon.com](/search?q=%28and+site%3A%27amazon.com%27+author%3A%27nfrankel%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|1% [infoq.com](/search?q=%28and+site%3A%27infoq.com%27+author%3A%27nfrankel%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|1% [jaxenter.com](/search?q=%28and+site%3A%27jaxenter.com%27+author%3A%27nfrankel%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|1% subreddit submitted to|count|% :-|-:|-: [java](/r/java/search?q=author%3A%27nfrankel%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|52|50% [programming](/r/programming/search?q=author%3A%27nfrankel%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|36|35% [springsource](/r/springsource/search?q=author%3A%27nfrankel%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|4|4% [security](/r/security/search?q=author%3A%27nfrankel%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|3|3% [androiddev](/r/androiddev/search?q=author%3A%27nfrankel%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|2% [scala](/r/scala/search?q=author%3A%27nfrankel%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|2% [Kotlin](/r/Kotlin/search?q=author%3A%27nfrankel%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|1% [docker](/r/docker/search?q=author%3A%27nfrankel%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|1% [vaadin](/r/vaadin/search?q=author%3A%27nfrankel%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|1% [Android](/r/Android/search?q=author%3A%27nfrankel%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|1% [angularjs](/r/angularjs/search?q=author%3A%27nfrankel%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|1%
For a small installation this kinda works. But usually people have a single DB server and multiple app/web servers. And if you are doing a single server, then you will likely get better performance using an in-memory DB like H2 or Derby.
You can always apply XSLT if your customers care about about the XML structure and namespace. I am assuming you are in control of your own system and you are working with a customer that wants the representation to be structured in a specific way. This approach gives you what you both want.
Play is a good framework if you want to make a large application, but for something simple I'd highly recommend http://sparkjava.com/, its much, much simpler and a good way to get started.
I'm probably going to get down voted for this but if you are new to Java web applications, why not build it without any frameworks? 
Or maybe airline booking systems?
There's even a tutorial on implementing a file upload: https://spring.io/guides/gs/uploading-files/ 
I'd like to know this too. In the Java world, what's as good as, and as straightforward as Rails? 
That's one of hundreds of features that our customers love about [jOOQ](http://www.jooq.org). Granted, it's a nice idea to generate code that doesn't depend on any library. Would like to hear your own opinion on how we compare. Cheers, Lukas from the jOOQ team.
&gt;it is easy to write an **un**maintainable mess without guidance.
If this is purely a learning exercise then building an HTTP server isn't a bad idea. I built a toy server for a university course at one point and it wasn't particularly hard. I would never use it in production (I'm sure it's full of security holes), but I have a much better insight into the HTTP protocol and how to read an RFC. 
I find that the bigger problem is that many of these frameworks simply don't have enough working examples to learn from. 
404 Not Found!
Both of these are great. Spark scratches that itch when I need a really simple HTTP API bolted onto something and Vert.x is great for building services in general.
Have a look at ninjaframework. It's pretty simple to start with. http://www.ninjaframework.org/
http://www.pragmatach.com/ 
I'm with the people saying no framework at all. I've actually built what you describe and especially given that you're a beginner-intermediate, you might find more value in getting the experience of, in a sense, building your own framework. That's essentially what you'll wind up doing, so long as you think about architecture as you're going. If you want to make it just a little easier on yourself you might consider using DWR for your client-&gt;server communication needs. Beyond that, just some Apache Commons libraries on the back-end to supplement core servlets and you should be golden.
Coming from Laravel to Grails....everything just seem so messy and ugly.
Having worked with Grails, Play, SpringMVC and Spring Boot, I'd choose play because of Scala. If you want to stay with Java, I highly suggest Spring Boot, since it seems to be sailing around a lot of spring ugliness. There are lots of tutorials on how to get running with it + Angular. I'd suggest you go the Angular 2 + Typescript Route. If you know Java and JS, TS is easy, but provides you with a solid type system, which will help you in the long run
I've worked on several Spring projects. It has everything and more--and it's getting even more than the last more than before.
Just my 2 cents.... why not owncloud?
I'm really surprised at the amount of Spring fans in this thread. It's always felt way to heavy and config-oriented for my taste. Op said as much that it seemed overly complicated to them, which means they've probably at least done a little homework and are looking for something lighter/simpler. Op should decide what kind of java that want to write. If you are a fan of async/event loopy code, then vert.x could be a nice fit. If you like the idea of actor-based programming, then take a look at Play. If the complexity of Spring sounds ok, then sure take a look at Spring-Boot. Maybe op wants to go lower level? Starting at the "server" like Jetty or Netty is a good recommendation then. Either way, we shouldn't jump immediately to "you need to use X" especially on a personal project.
Of course, as ever, there are no real shortcuts nor silver bullets, so you'll need to find your own answer through experiences but my suggestion is to get rid of hype influences and think in terms of architecture more than technologies of the day. I suggest to start with something as straightforward as possible, as close as possible to the core web technologies (HTTP, HTML, JS, CSS) and with a decent maturity. Also consider that many modern web apps are a JS-based rich-clients calling into an high-level, UI-oriented layer of web services of some sort, often built on top of other more basic and lower-level services. If you start like that already you're going to learn much more and you'll have a good start should you decide to evolve your project (which you will if you're passionate), so if you have the time I recommend it. Maybe for the server side you can go with something very easy to build services with, like f.e. [Dropwizard](http://www.dropwizard.io/0.9.2/docs/) which will give you easy access to JAXRS, i.e. the Java ecosystem standard for restful web services (which is the type most often used in a web context b/c of much lower "impedance mismatch" among other reasons). Then on the client side, still if you have time, my suggestion is to start with something like [jQuery](https://jquery.com/) on plain HTML/CSS (you might want to make your CSS life easier very soon with [Compass/SASS](http://compass-style.org/)) and work your way by choosing a few [Microframeworks](http://microjs.com/#) as you see fit. As your application grows you'll feel the usefulness of a [module system](http://requirejs.org/) as well of a few [functional-oriented utilities](https://lodash.com/) for data processing. You can then evaluate bigger and more comprehensive frameworks like [AngularJS](https://angularjs.org/) or [ReactJS](https://facebook.github.io/react/) as you see the need. Yes, there's a lot to study, as always if you want to learn to build quality stuff you have to get familiar with the core technologies and the are many in the web arena (and not always they work consistently across browsers, BTW, which makes web development in general even more expensive). Of course if you want the comfort of a single technology designed (hopefully) coherently there are also "forget about this mess, I'll hide it for you" frameworks like (server-side) [ZK](https://www.zkoss.org/) or [ExtJS](https://www.sencha.com/products/extjs/#overview). I think at some point you'll fight with the limits of these highly opinionated technologies though, which is mostly the lack of flexibility, both feature-wise and performance-wise, that working directly with core technologies can give you instead.
Example? Just curious.. 
Your response is a slide deck about microservices, with a bunch of technologies based off of Java EE as a possible implementations? What is wrong with you.
Also, 1) why is there a specific version of update 71 for 64bit OS, but there isn't a 6bit version for update 73? and 2) where is update 72? Edit: downvoted because....... ??? 
Because he wants to learn stuff.
Hi, Thanks for sharing, looks promising. You can also take a look at random beans: https://github.com/benas/random-beans It allows you to populate any arbitrary POJO with random data. Hope this helps Regards
There's a lot of nice frameworks, but whatever you do, don't use ever, EVER, Java Server Faces. Your body will thank you forever!
Just wanna add that you might want to add Hibernate to your Spring if you wanna try adding database to it. Or just try out Google App Engine (or similar PaaS services on Azure or Amazon). They are simpler than running servers on your own computer and free for normal usage. Everything's going to the cloud anyway. 
There's a lot of nice frameworks, but whatever you do, **try Java Server Faces first**. Your body will thank you forever!
&gt; Here are the popular frameworks that have proven themselves: I think you're missing JSF, which is most surveys ranks at either number 1 or 2.
&gt; Spring MVC is the most popular Java Web Framework. Really? According to this survey it's JSF: https://dzone.com/articles/survey-confirms-jsf-remains-leading-web-framework-2
Weird, Google cache still has it: https://webcache.googleusercontent.com/search?q=cache:rMA9Qm5si_4J:https://blogs.oracle.com/reza/entry/java_ee_7_in_production
You can do all that with [Capsule](http://www.capsule.io/) and still just have a single JAR. (I'm a Capsule developer)
I think the guy is just a troll. In another post he did the same thing. Just keeps rambling about "complexity" and "concepts being fundamentally incompatible", without ever giving any specifics. When pushed into a corner where he has to reply with specifics he either doesn't reply anymore, or tries to change the subject. Like he does here again: hoping that the discussion will switch to what microservices are and away from what things specifically in the Java EE API would not be suitable for microservices (which he can't answer, obviously) 
Maybe on this forum it's the most popular but it does not seem so out in the world. While it was the most popular 5 years ago, JSF is more popular today.
You are just going to get more confused asking here for the most part. People are going to just recommend their pet framework. I can tell you for professional development the most popular framework is Java EE followed closely by Spring. The others barely register. For a simple project like you want you may not even need those. I would look at the Netbeans tutorials. They have quick and easy examples of the major frameworks so you can try them out. Netbeans is an IDE that you can install with a simple .exe and it includes two application servers already configured. It's a Great way to get up and running. If you choose JSF take a look at PrimeFaces.org . they have a demo with a file upload that includes the code. 
Why?
Great list. * Dropwizard: A lightweight REST framework. It's been gaining popularity lately. Having used it on several projects, I find some of the documentation lacking, but otherwise haven't had many problems. edit: downvotes? I'd prefer actual comments saying why to use or not use it. I'm not exactly the worlds biggest fan or detractor for it.
Dropwizard is great despite its website looking like it is straight from 1990. I view Dropwizard filling the role of a pure REST server without any views. If you don't mind serving up a static HTML page from nginx/S3 and potentially dealing with CORs, then Dropwizard is worth considering.
[Home Page](http://geode.incubator.apache.org/) at the bottom is an "About the project" section. The link in the OP takes you to the release announcement.
If you're looking for something like Rails, then look to Grails. Check here for a comparison: http://www.redwindsw.com/blog/2014-01-15-moving-from-rails-to-grails-differences-and-similarities
CORS has consumed several weeks of my life, but mostly due most of my current job revolves around integration(s) with many 3rd party software(s). Separation of views from the backend is a good thing IMO. Theoretically, the BE should serve data and respond to requests, but not be concerned with how it is rendered. This separation is also good for integration. Integrating with a JSP webapp is a fucking nightmare.
Interesting, I wasn't aware of this project. A lot overlap but different implementations. I need to investigate this more. Thanks 
In form of a slide deck. Of course it is.
I have used spring mvc in all my projects and think it's enough. wu, but i am curiouse why to use jsf? it is the view of mvc, but why don;t use angular or react? i don't think tags in jsf work well?
Well, you can download it as a PDF.
http://www.oraclejavamagazine-digital.com/javamagazine/ Click on "Back Issues"
As usual, people trying to downplay a technology do so using wrong statistics. This is *1* jsf-impl, which would only be used by Tomcat users. You're not only forgetting the other implementation (MyFaces), you're also forgetting here (or likely, are completely oblivious of) the fact that JSF is often used via the libs provided by the application server, and therefor it would not include jsf-impl. And now YOU compare &amp; weep: * http://stackoverflow.com/questions/tagged/jsf-2+or+jsf+or+jsf-2.2+or+primefaces * http://stackoverflow.com/questions/tagged/spring-mvc And if you want to say that the JSF query contains duplicates, no it doesn't. SO filters them correctly.
Would love to hear feedback or if someone wants help setting up their project/service with it, I'd love to help. I would like a few more real world scenarios.
True. I just had another look at TypeScript and looks like they do support some ES6 / ES2015 features now. :)
yea was just wondering, this thread is helpful cause I wasn't sure what frameworks to use for web also :)
As far as UI goes, Vaadin is a great framework to ease into WebApps. The serverside code is basically the same as working with Swing. Vaadin is wrapped around GWT and generates the webpage for you so you can generate your UI in a declarative manner. You can use Vaadin with Spring to create a nice fully-featured server app.
Hi, author of [PySwfAws](https://github.com/bstempi/pyswf) here. I'm interested in discussing your internals. 1. Are you using a replay method similar to the official AWS lib? 2. How does `CompletionStage` work? I have about 10 years of Java dev experience, but I switched over to Python soon after Java 8 came out. I'm curious to hear how your deciders leverage this since deciders are, arguably, the most painful thing to handle. 3. How did you handle your annotation processing? Even though Python has first-class functions, I still struggled with modifying the behavior of an annotation at runtime (eg, we're not in distributed mode, so don't modify the behavior of the function). I was really turned off by Amazon's use of AspectJ. I'd like to know how you got around it.
Thymeleaf is nice, but resource intensive! Facelets is much better, but for ultimate performance stay with JSP
I didn't really say Java was the *best* way (although I acknowledge saying "Java EE is perfect for this" may have given that impression). Frankly, I wouldn't even know what language/stack is *best*. Is there even a best language stack? About your points, I don't agree with them. &gt;Most HTTP-based solutions in Java are heavy-weight and require a good deal of expertise in areas that are otherwise largely unnecessary for general HTTP programming. What is heavy-weight? The performance? The resources required? The API footprint? As for performance, Java Servlets are at the top of about every general framework benchmark. Highly optimised C/C++ running a tight loop will outperform it, but Java Servlets generally perform much better than Python, Ruby and PHP (okay, those are easy), but also V8/js, Go, Scala, Clojure, C#, etc. Whatever heavyweightness you were referring to, this does not translate in performance overhead. When using Java you can handle (much) more requests per box than with most other languages and stacks. If you have many high performance services this ultimately means you need far less hardware. In extreme cases, a solution we provided in a tech bid using Java executed its entire benchmark in ~17 minutes. The competing teams used plain PHP and some unholy Perl/PHP/JS combination, and it took them between 7 and 12 hours to run that test set. Translating in number of physical hardware boxes with the given response times demanded by the client, it meant our solution could pretty much run on a single box, while the others needed literally dozens of servers. And if you were referring to API footprint I'm even more puzzled. Servlets are pretty basic and simple to use, and JAX-RS resources are perhaps even simpler. A Servlet for instance is just this: @WebServlet("/path") public class Servlet extends HttpServlet { public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { response.getWriter().write("Hello, world!"); } } You can deploy this class, and *only* this class and if you request "/path" it will print "Hello, world!". &gt;Testing HTTP-based services in Java is difficult Why? With Arquillian and HttpUnit this is really simple. You start a test, say which class you want to test, and in a one liner you do a request (like "/path" here) and you inspect the response (as a plain String or something more structured, whatever you need). &gt;The VM-based nature of Java means that its not very compatible with other VM technologies (ex Vagrant/Docker). Not that it can't work, but its a poor fit. ? Uhm, almost every other language and stack out there these days is VM based. There are ready to use docker images for most Java environments, and rolling your own is not that difficult either. Every other language, even C++ needs some runtime support so I'm really at a loss why Java is any different here. &gt;Start up times in Java are abysmal. They really aren't. A full Java EE server like JBoss WildFly starts up in about a second on my few years old i7 based desktop and a hello world in plain Java SE takes just a couple of ms to start, print the text and exit. That's even fast enough for interactive commandline usage, and is absolutely fast enough for any kind of long running service. 
Pretty much this. Jars are pretty portable, but what if you want to have a newer version of the JVM? Tomcat? Glassfish? The nice thing about docker is that the environment can be checked in, not just the library. I live in a containerless world and it has some issues. It took us way longer than it should have to adopt Java 8 mainly because the entire system needs to move in order to get there (no small task). It takes a LOT of pressure to update our tech stack and that is no fun. What is worse, I know that we aren't the worst company at this. There are still yahoos out there that are forcing their devs to use Java 1.4.
&gt; i don't think tags in jsf work well? How can we know if that's what you think? It's a question only you can answer. That said, tags work really well in JSF ;)
I would recommend one of these two options: 1. **Spring Boot:** First keep in mind that Spring != Spring Boot. Spring boot is a superset and almost a re-write of the Spring framework. Spring Boot is enterprisy framework but for simple web applications isn't too hard to get off the ground. Spring Boot is widely used in the industry and has a lot of bells and whistles, and is great for larger and more complicated applications. Like others have mentioned it's a little hard to get started with in the beginning but it's gotten a lot better on that front and the hard work will pay dividends in the long run just because it's such a great and industry standard framework 2. **Play:** Play is wonderful, easy, simple, slick but can bite you in the @$$ if you want to do something that doesn't quite fit in with it's view of the world. It's great for a simple web app with minimal effort.
Not true! Spring MVC is [used by 40%](http://zeroturnaround.com/rebellabs/top-4-java-web-frameworks-revealed-real-life-usage-data-of-spring-mvc-vaadin-gwt-and-jsf/) of Java web projects versus 21% for JSF. 
CVE-2015-5351 Apache Tomcat CSRF token leak http://mail-archives.apache.org/mod_mbox/www-announce/201602.mbox/browser
Ssshhh, don't give anyone any ideas! ;) 
Sounds like you need a hammer factory factory http://discuss.joelonsoftware.com/?joel.3.219431.12
1. I "sorta" am replaying. I re-run through the whole decider every decision (which is the part similar to the replay) however the Futures/Promises are filled in according to whats in the history. ( I believe Flow may be more fine grained and replay the history partitioned by Decisions) 2. CompletionStage is simply an interface that the JDK people standardized on for Promises/Futures. CompletionStages are the 'read-only' part of a Future (i.e. the Promise). This gives them the functional programming to perform high level operations like map/flatMap (i.e. decider logic) Internally, the CompletionStage is backed by a Future that is fulfilled based on the events. So that when the event (i.e. an activity task) finally completes, that part of the decider now gets triggered. 3. The annotation processing in my version of the library is very minimal and just for creating a mapping of: Name+Version -&gt; ActivityTask Name+Version -&gt; Workflow The rest is just POJOs Here are some additional points: 1. The 'DataConverter' interface is quite handy. Its very easy to create an implementation that serializes/deserializes to S3 (JSON) to pass essentially huge data between ActivityTasks easily. 2. Having each 'Action' return a CompletionStage (i.e. Promise) lets you have arbitrary Workflow topologies such as: fork &amp; join, parallel etc.. Its all just how you write the decider. The CompletionStage is written to support all those paradigms. (let me know what might need clarification)
Hi Lukas! I heard before about jOOQ, but I didn't know, it has code generation capabilities for SPs. I tired the trial version on OBridge's test database. I think, the generated "end user interface" is nearly the same. Your generated code looks better :) , and is more "Effective Java". I like, that jOOQ is working with other DBs. (But that was not a requirement for me). If something changes in the database, after code generating, the java compilation must fail. This is true for both. I tried jOOQ on OBridge's test cases. It cannot handle Oralce Boolean datatype as procedure parameter, for example: createParameter("P_BOOL", org.jooq.impl.DefaultDataType.getDefaultDataType("PL/SQL BOOLEAN"), false); OBridge uses for this case a trick: converts Boolean to 0,1,null, then uses sys.diutil.bool_to_int and int_to_bool to convert the number to boolean. *karsany*
OBridge uses Oracle metadata tables for extracting PL/SQL metadata.
I started to develop maven plugin for it, but there is some licencing problems with Oracle JDBC driver. It is not so easy to attach the driver, and there is no legal maven repo+dependency. But I'm working on a solution. update: there is, but you need to configure your maven, and you need to have oracle login https://blogs.oracle.com/dev2dev/entry/oracle_maven_repository_instructions_for
&gt; Not really... Useless post that could could have been expressed by a downvote gets upvoted, go figure.... Arguably, Spring Boot bringing in strong and static typing, java natvie libraries (instead of C libraries wrapped in Ruby) is better.
Fantastic, thank you!
Thanks!
92 comments so far and not one caution about securing this personalized cloud storage service or what that will require? With beginner-intermediate knowledge of the Java language and never having built a Java web application I suggest you think again. Hint: put a plain old web server on line for few weeks (your ISP doesn't have any problem with you running a server, right?) and watch the logs as the bad guys of the world poke at it. Personally if I were you I'd take on a smaller, less potentially vulnerable web application (many frameworks have example blogs or todo lists) and simply run CrashPlan's application to back up files to other computers and external drives you control for free.
I don't think that word means what you think it means.
Thanks for the help. If you could suggest a free or affordable tool that I can install internally, that would be great. I googled but everything I saw looked like external "cloud based" tools. My internal web apps are not accessible to the open internet, so that won't work for me.
Did you google open source app monitoring?
I agree, first , you need to define your application health metrics. Then you can use tools like [dropwizard metrics](https://dropwizard.github.io/metrics/3.1.0/manual/healthchecks/) to monitor them. Once you have your metrics, you can access them through http (like [health servlets](https://dropwizard.github.io/metrics/3.1.0/manual/servlets/) provided by the metrics library or spring boot's [metrics actuators](https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-metrics.html) which is based on it I guess) or store them in a time series database (like [OpenTSDB](http://opentsdb.net/), [InfluxDB](https://influxdata.com/) or others) and show them in a monitoring dashboard (like [grafana](http://grafana.org/) or [kibana](https://www.elastic.co/products/kibana)) All these tools are free and open source. You can install and use them on your own servers. Hope this helps
I suggest you to take a look at www.stagemonitor.org it is an open source performance monitoring solution and is build on top of dropwizard metrics.
Huh, I always liked the name Typesafe. It made sense. But "Lightbend"? This sounds like "just another startup". Pretty uncool.
From the announcement: &gt;Over the past five years, the market has changed dramatically, and so has our company, with more than half of our customers representing traditional Java enterprises. We continue to evolve, becoming more language agnostic [...] and &gt; Today, we also announced our latest innovation designed to speed the adoption of Reactive systems: Lagom. It’s a complete dev-to-production experience for Java enterprises. In other words the company behind Scala is no longer betting on Scala. Sad to hear that.
You're welcome mate ;)
Isn't that what Spring is about? Seriously, Spring in effect wraps and manages other frameworks.
Not true! JSF is [is used by 35%](https://dzone.com/articles/survey-confirms-jsf-remains-leading-web-framework-2) of Java web projects versus 34% for Spring MVC.
Ruxit, DynaTrace, NewRelic.... Ruxit is the better option here; it is a DynaTrace product but provides the ease of use provided by NewRelic, without a huge price tag and lack of supported technologies. DynaTrace are currently the leaders in Application monitoring, with the gap between competitors only growing.
Web framework du jour was more of a problem in Java between 2000 and 2003/2004-ish. Then every new one was an instant hype. These days and in practice? Not so much. This sub is barely a realistic representation of reality. There's the vocal few here who just like to drop the name of their pet framework. In reality it's in most cases either Java EE or Spring. Nearly every shop, customer or tech partner I've seen uses that. Then there's 2 or 3 smaller ones that you occasionally encounter, depending on the age of the company. Eg a company that was founded in the month that the GWT hype peaked has a significantly higher chance of using GWT. But all together, the market is divided between Java EE and Spring, with the crumbs left to a small number of alternatives.
No, they won't become a cloud infrastructure company. Lightbend delivers frameworks and tools and consulting. The tl;dr is: they are no longer focusing on Scala.
I don't think they were ever 'betting' on Scala: awesome (IMHO) as it is it won't every get the adoption rate of Java, Just the paradigm shift to FP is 'too much' for many developers. A lot of my enterprisy colleagues are of the "lambda's? who needs lambda's?"-type. 
It was abandoned, see: https://github.com/netty/netty/issues/4466
why should i use netty instead of node ? 
My experience (from discussions at the Java User Group Switzerland, 1100 individual members) is that the Java web framework discussion is stale because most people have moved the UI into the browser, e.g. via Angular. Of course, the remaining vendors try to paint a bright picture, but it kind of feels like someone advocating Delphi for MFC applications... I don't deny they're still in use (and still make sense) but I do wonder what kind of market leftover we're really talking about.
There are many reasons, you can see in other comments here, but the main reason for me is you can't make clean tests, there are static methods everywhere (you have to use powermock and similar libraries), and testing become in a nightmare. And also, with some components, like fileUpload, is IMPOSSIBLE to create functional tests with Selenium (and similar tools), in other word it doesn't work!
They must have said the same thing about object orientation 20 years ago. Besides, if VB.NET devs could be convinced to use LINQ (and pass 1-2 lambdas to queries), then Java EE people will certainly be capable as well.
Moving from OO to FP is quite a bit more involved than just using lambda's. I fully agree that they should keep an open mind on this though, don't get me wrong. I'm quite a big fan of Scala (trying to move into a position where I use it professionally) but many devs don't work like that unfortunately. 
The bigger point is--never get pigeonholed as only a UI developer. Everybody starts off as a UI developer and nearly everybody wises up and claws their way to the back end, where you are not subject to the vagaries of persnickety users. If you go looking for "JSF" jobs, you're looking for a front-end developer. Knock yourself out. As they used to say about IBM, nobody ever got fired for choosing Spring. I spent the last year working on a huge application used in the medical informatics field--and I chose Spring MVC for the framework and of course that raised no eyebrows. YMMV.
Thank you for your feedback and comparison between the two APIs. That's very useful. Yes, I imagine that the "end user interface" is somewhat similar for standalone procedure calls. Do note, however, that with jOOQ, you can also embed stored functions in SQL calls, leveraging [scalar subquery caching](http://blog.jooq.org/2011/09/02/oracle-scalar-subquery-caching/) automatically. Indeed, PL/SQL booleans are not yet supported in jOOQ 3.7. We're going to emulate support (which is lacking in JDBC prior to Oracle 12c) as of jOOQ 3.8, hopefully: https://github.com/jOOQ/jOOQ/issues/4155 Thanks for the heads up on `sys.diutil` heads-up. That does make things a bit easier, indeed!
You're underestimating your dear enterprisy colleagues. And you're overestimating Scala. A couple of lambdas and a bit of FP-ish programming might just do the trick for starters. We don't know yet where the FP journey will take us. Clearly, category theory et al will not make it into mainstream directly. More pragmatism is required. For instance, Java 8 might just be good enough.
&gt; There are many reasons, you can see in other comments here Excuse me, but I haven't seen any valid one really. &gt; there are static methods everywhere (you have to use powermock and similar libraries), and testing become in a nightmare. Testing ANY framework code in that way is largely nonsense. Just use Arquillian or Cargo. Look up the tests in the Mojarra project, there are hundreds (maybe even thousands) of them, and many of them are as simple as can be. 
Given that Typesafe helped create the Reactive Manifesto, I think they are allowed to say "reactive platform" given they're a primary driver for it. That being said, I agree that when "reactive platform" or anything "reactive" is said by middle managers, they have no clue wtf they're talking about and are simply trying to be buzzwordy :) I also agree that they're definitely using this as a way to feel more comfortable branching out from Scala. 
A pet peeve of mine.... if the version number bump is significant enough to announce it on reddit, then surely there are some significant new features, performance improvements or major bugs fixed, that would be worth including in the title? Otherwise subreddits like these will end up as a list of version numbers for various apis and plugins. The fact that this post has (had) no comments is not really surprising to me.
Their full name is Lightbend Bending Rodríguez.
&gt; I would choose JSP over anything else every time I know you would, but you're special ;) The masses are not likely just like you.
Monitoring? I'd say try Nagios.
What are you looking for? are you worried about performance? any input should work. str.split("abc").
I'm assuming you are being serious and reply accordingly. Netty can be somewhat more involved than Node, but it has a very sane design and it exposes a whole lot more knobs. For example, in Node you essentially have one event loop per interpreter, so to properly utilise multiple cores you will need a load balancer, supervisor, etc. With Netty *you* control how many event loops there will be, how they will be mapped on threads, etc. Add rich concurrent library of Java to the mix and you got a first-class solution for very stable, performant, predictable and flexible solution. So yeah, all in all, you don't need Netty most of the time, except when you do. 
Can you not use Pattern.quote to find the correct regex?....for example, splitting a string by *, which is a regex command: String pets="cat*dog*fish"; for (String p:pets.split(Pattern.quote("*"))) System.out.println(p); Java (at least in the early days) took the unix philosophy of making lots of independent functions that can be chained together to create the functionality required. Personally I prefer it this way, and I hope they don't ever add a method to split by string, and not regex. 
Frameworks frameworks frameworks..... Have we the Java community forgotten the art of writing stuff without frameworks? Finding the regex for any string Delimeter, is as easy as calling Pattern.quote(""). Do we really need a framework to do this for us... 
* Tracing execution in **my** part of the webapp, and not some third-party tool. Especially reflection is giving a hard time debugging. * being able to hide unwanted noise; see only the parts I want to see
Fact: String.split is [error prone](http://findbugs.sourceforge.net/bugDescriptions.html#RE_POSSIBLE_UNINTENDED_PATTERN) and slower. &gt; without interpreting its argument as regex In JDK, String.split actually splits w/o regex if your separator is a one non-regexp char, but it's an implementation detail... IMHO, all String methods that take regexp String should be deprecated and replaced with a new version that takes explicit `java.util.regex.Pattern` param, e.g.: `String.replaceAll(String, String)` -&gt; `String.replaceAll(Pattern, String)` (or even better: `String.replaceAllSecondParamIsNOTWhatYouThink(Pattern, String)` - not a joke - replaceAll is often used incorrectly)
I don't see what's not portable about views in SQL. Pretty much every RDBMS supports views.
[removed]
Brian Kernighan "The most effective debugging tool is still careful thought, coupled with judiciously placed print statements. " 
No, they're competing with Java EE and Spring: https://www.lightbend.com/lagom
&gt; not a scala user, and I'm glad now since this would make me nervous You should see the kind folks over at /r/scala I criticized something slightly and they stoned me alive. They're nervous.
[StringTokenizer](https://docs.oracle.com/javase/7/docs/api/java/util/StringTokenizer.html) still exists.
I'm partial to Conductr, but I do work for the company that makes it: https://www.lightbend.com/blog/reactive-for-devops-part-3-using-docker-with-conductr-on-the-jvm But I understand if that's too much gun for what you want. More practically, it depends on your automation framework and where you are with your deployment. Are you using Puppet, Ansible, Chef, etc? Then deploy with that. If not, then are you asking for how to put together a base Java image and docker file on top of that? Or Docker Compose?
Web Application developer. Thanks
&gt; stoned me alive Wat?
Oracle is not very active with that anymore :( So soon, what are they competing with again?
Would you consider this tool to be third party? It's enabled by adding one line of code to your app, and currently only shows user code (spark/jetty code is not displayed). 
Yes, we do need a framework! Just because we can write our own sort or random number generator or linked list implementation doesn't mean we should. If you can solve a problem with an import of a library and be done with it, that *is* a better solution than rolling your own for a problem that's been solved dozens of times.
I really like to know how long my queries are taking. Oh wait, this isn't about Apache Spark?
On a more serious note, I still think that the most important log info is database queries per HTTP request. Everything that's in between (2-3 lines of business logic) is usually negligible. So if you can pull this off via a built-in JDBC adapter or something like that, this would be very useful out of the box.
You're missing the whole point of the article. They will.
I love love love jetbrains. This article summed up exactly how I feel about their IDEs. I pay for it because it simply is better. My work wants us using eclipse but I purchased intellij on my own dime because I like it that much. I can't go back to eclipse. No way. Jetbrains does well by listening to us and I hope they always will.
Don't know about light, but [Spring Security](http://projects.spring.io/spring-security/) and [Spring Data Repositories](http://docs.spring.io/spring-data/data-commons/docs/1.6.1.RELEASE/reference/html/repositories.html). Would fit nicely with Spring MVC .
Scaffolding is not a very popular topic in the Java world. Maybe LightAdmin? It integrates with Spring Security and Spring Boot http://lightadmin.org/
Pivotal has reduced the size of the Spring team. Maybe providing OSS application frameworks is not the best business model ...
A few years back I struggled with a Gradle project due to implicit connections in the code. I tried Eclipse base Spring Source Tool Suite and NetBeans, which both had Grails support. But the support was so lousy, that I wasn't able to manage the Grails magic with it. Then I tried IntelliJ IDEA and it saved the day! It was pure magic how IntelliJ handled the Grails magic. JetBrains walked the last mile and built something actually useful.
I don't appreciate that Jetbrains builds custom parsers for their tools. Their Scala plugin leaves a lot to be desired.
Right. Probably what people are looking for is a drag-n-drop visual UI builder. I'm not too hip on JavaFX development, but if fxml is anything like mxml was for Flex I almost never used Flex Builder's UI builder. I always wrote the markup and tested because any semi-dynamic view isn't going to benefit from the static nature of a visual builder.
&gt; Of course, there's the other problem, where people get all worked up about the next big thing, but then there's the next big thing a month later.. Ha, welcome to Spring Boot. Its been around for about a year but according to users on this forum it is used by nearly 100% of all Java projects. Don't ask about Spring Roo though apparently everyone used that last year but now it never existed.
Worse that this. The language has no specification, and the compiler itself is not very clean. I don't think we will ever see good support for Scala anywhere ; if we do, that'll be a great feat if engineering.
So Typesafe gave up on Scala.. I wonder if Kotlin will eventually share the same sad faith?
I should have included Java EE. I wouldn't say Grails/Play barely register, they're both sought after in my area - just as much as Java EE in my opinion. I think it is fair to say the popularity of each is locale specific.
I'm in the same boat, work strongly suggests using Eclipse. Bought IntelliJ personal license a few years back and honestly at this point couldn't consider going back to Eclipse, much to the envy of a few co-workers. The time and headaches it's saved me have been well worth the investment for me.
I see. My method is since, each Activity is represented by a `CompletionStage`, I simply need to wait for all them to be ready (ability provided by `CompletableFuture`) Let me know if you ever release it. would love to take a look too.
This article is plain bad - no offense. I'm not taking sides here, in my opinion both IDEs have their ups and downs. This is where I stopped reading: &gt; Its 'feature list' on the download page shows the internal ids of its various plugins. This so called feature list is not a list of IDE features, but of the actual Eclipse features - with Eclipse being the Framework, not the IDE here. The author - again no offense - does not know how Eclipse works / how to work with Eclipse, and is extremly biased in favor of IntelliJ.
I use IntelliJ every day. It's a good IDE. I prefer Eclipse, but I do like what IntelliJ does well and I am productive with it. I certainly don't mind using it if it's what works best for the team I'm operating in. The worst thing about IntelliJ, IMHO, is its fans. I get it. You like it. Darcula makes you weak in the knees. Android Studio moved to it and its faster - awesome. But just because I don't like it doesn't mean I'm challenging your intelligence. I get really tired of it being Eclipse vs. IntelliJ. Why not Eclipse *or* IntelliJ (or NetBeans, or ...)?
They are different and most of the stuff the article says about Idea does not apply to them anyway. For example, MS Office is an inferior product to LibreOffice, and the reason it is still on the market is their corporate sales team. At least people claim Idea is superior to Eclipse (nobody ever backs this claim, but I grew accustomed to it by now). 3DS MAX and Maya do not really have open source competitor - Blender still struggles and it is the closes thing. At least I can understand why people use them, since there is no choice. But I do not understand it when there is an alternative. (For the record, I do not claim Eclipse is better, I think it is on the same level, except for the look-and-feel - Idea is terrible, but that is just a matter of personal taste).
&gt; To develop IntelliJ IDEA, you can use either IntelliJ IDEA Community Edition or IntelliJ IDEA Ultimate not older than 15.0. Does not really work for someone who has no IDEA installed :) Edit: and if you think it is not an issue, you should read https://en.wikipedia.org/wiki/Backdoor_%28computing%29#Compiler_backdoors
Would you write your own base encoder, immutable collection, and json parser then? Whether something has been included in the JRE is a bad metric for whether you should rewrite it.
Splitting strings by regex pattern is by far the least useful (as in rarely, if ever used) of the delimiter options. Vast majority of strings are split by fixed delimiters and booting up the entire machinery of regex parsing and matching is just huge waste of time. 
Usually you are right. But sometimes the stuff in SDK just does not cut it...
True. Atlassian actually did something doomsday-like to their project. Remember when they removed wiki markup from Confluence? There was a huge community outcry, Atlassian even resorted to deleting pages of negative feeback from their sites. And yet nobody could do anything about it. Jetbrains did not do anything like this (yet?). But there is no guarantee they will not. Maybe they drop Java support and offer everyone to switch to Kotlin? They can...
&gt; For example, MS Office is an inferior product to LibreOffice Gonna have to disagree with you there as MS Office kicks the shit out of LibreOffice for collaboration, SharePoint, etc. yes they are separate programs to just Office but Office is pretty much a client for SharePoint in that respect and it all fits together under the same umbrella for me at least. There is simply nothing like it available for LibreOffice.
It says: &gt; StringTokenizer is a legacy class that is retained for compatibility reasons although its use is discouraged in new code. It is recommended that anyone seeking this functionality use the split method of String or the java.util.regex package instead.
It will change. That's all we know. All we want is a vibrant community so people will be motivated to create cool new versions and that the user community is smart enough to answer questions so we can code like the wind. Here's another unscientific test: Dice.com: NYC-JSF: 25 positions NYC-Spring MVC: 684 positions SF-JSF: 13 positions SF-Spring MVC: 262 positions What matters is what they use where you are. 
http://stackoverflow.com/questions/14901569/java-string-split-pass-in-precompiled-regex-for-performance-reasons
&gt; Pivotal has reduced the size of the Spring team. No, it hasn't. Unless your "reduced" actually means increased. Then it has.
[removed]
There are OpenJDK and GCJ. And a couple of more obscure open source JVM implementations. And in any case there are published specifications of the language and its VM. Do you see the difference?
You obviously don't know [what](https://www.quora.com/What-does-the-phrase-Nobody-ever-got-fired-for-choosing-IBM-mean) I'm talking about--but let it go. If you want to build your UIs out of tinkertoys, be my guest. Having used both, I prefer Spring MVC instead of JSF. It's an entirely different philosophy of coding--request versus component. With JSF, you soon look generic. Proponents of the JSF/Component approach always like to exaggerate the amount of work Spring MVC request/action-based coders need to do--as if JQuery did not exist and do much of the same things for the request/action world that it does under the covers for all the tinkertoy components used to build the lookalike UIs common in the JSF world. The only difference is--away from JSF--we have tremendous freedom and ease--assuming of course we've mastered CSS3, JS and HTML5. 
It is also premature optimisation to immediately go looking for something else, installing additional frameworks etc in order to avoid the performance overhead that might not actually be too bad. If performance becomes an issue, then by all means look elsewhere...., and replace it with some better code. Testing the above on my i5 laptop, it takes 1.2 seconds to split the string a million times. This is quick enough for most applications. 
[removed]
&gt; Jetbrains: (is)'The unicorn (that the folks in) Silicon Valley doesn't like to talk about Maybe? Didn't rtfa so it is just a guess. Why would they dislike Jetbrains? 
Agreed - it's sort of like the old Apple fanboy vibe. And I do like IntelliJ, but I like Eclipse, too. I can be productive with either one.
tl;dr; Properties have existed since long before Java, but the language designers were stubborn and we've got this weird solution. P.S. Don't put public setters on everything. 
You are talking out of your ass. Martin Odersky is a freaking genius. Scala has a publicly available specification. And Scala has an open source compiler. It is an impressive piece of software, since it has to deal with Scala's very complicated type system and less restrictive syntax. 
Indeed, but you can still implement vendor-specific views that expose the same row type to the caller. In any case, once you run into these problems, JPA will be a poor fit anyway.
Link or it didn't happen.
&gt; I'm agree with you, but I'm talking about Unit Testing, by definition every dependency must be mocked. Mocks are wrong. https://henk53.wordpress.com/2012/09/11/is-there-such-a-thing-as-the-nomock-movement &gt;Arquillian or Cargo have no sense, because they mock an entire container They don't mock. The say Mock YOU! to Mocks ;) Arquillian and Cargo help you to test against the Real Thing.
Unfortunately there's still plenty of stupid apps out there that use classes internal to the oracle JDK that don't run on OpenJDK. The number is decreasing, and hopefully it will go away completely in the next decade as Oracle hides all the internal with JDK9's module system. 
In general, they are eerily close and partially follow the same trend line: http://www.indeed.com/jobtrends/java+jsf%2C+java+%22spring+mvc%22.html Notice how they both go down till Nov '14 with the exact same velocity, then go up again and immediately down again with almost identical curves. Only in the last few months has Spring MVC taken a small lead here. For JSF its weakness is such statistics is that many names are being used for it. "PrimeFaces" is sometimes used when just JSF is actually meant, or JavaServerFaces, or JavaServer Faces, or even more difficult to distinguish "Java EE" (but to be honest, Spring MVC has that same issue with just "Spring"). 
Why would you say that? If they've made changes to the code, they have to release them. Also, folks from Azul have begun to be somewhat active in the JCP (e.g., their proposal for ObjectLayout / Structured Arrays).
Heh :-)
setFoo() methods on builders aren't really setters, though -- they don't directly set the value for an object's field, they simply *specify* what the value will be. That's why I typically just name them after the field (i.e., "foo()", rather than "setFoo()"). 
Spring MVC benefits from its association with the eponymous Spring Framework. People--rightly--trust Spring MVC because it's from the same folks, more or less, than gave us Spring. Also, the raw number count tells us nothing about the experience level of the voters. My experience has been that newbies love JSF because of its components and that seasoned developers prefer Spring MVC because you can easily customize it.
I wasn't trying to say they were. I was instead calling out a common theme among JSF developers--when they mention the convenience of those components, they're acting like we on the Spring MVC lack those things--when both of us are using JQuery under the covers.
I don't I use lombok
Yes, you're mutating the *builder*, which then builds the actual object. That's exactly my point.
&gt; What this title means? It isn't mentioned in article, but JetBrains HQ is in Prague, Czech. They do have office in Boston, but also two major offices in Russia (Moscow and Sankt-Peterburg), which is surprising. If you rtfa (wink) it mentioned that Jetbrains shies away from using 'non-sexy tech' and they move pretty slowly with their core technologies.
Java 8 does offer a new syntax, but its still a pattern. http://winterbe.com/posts/2015/03/25/java8-examples-string-number-math-files/ or if you already use the guava library: https://github.com/google/guava/wiki/StringsExplained#splitter
Nauseating is the craftsman who worships his tools.
I'm going to say 'no' because Java is by its nature server side, so you never see the code. Sometimes Java applets are displayed as a 'webstart' so you may have luck downloading these. If you're looking for a generic website, you can sometimes find these packaged as WAR files. You'll need to set up a TomCat server to run the contents though.
As /u/keyser1884 mentioned, no you can not. If it was possible to do so, you would be able to download the server side code and then, the entire web will be open source (though read only. 
Of course scala is a means and not an end. Its an interesting experiment melding oo and fp. Its actually done a great job of encouraging Java devs to use more fp principals (java8 interfaces), and will continue to be a testing ground for features which might be incorporated in future Java releases. Here's hoping Java gets some type inference and pattern matching. By not learning these radically different languages, you can easily get stuck in your ways. Programming is a relatively new field and we still have no idea what we are doing. Look at topics like property based testing, which is a testing strategy common in the fp world, it is incomparably better than unit testing, yet you would never have heard of it if you just use Java all the time.
Two basic patterns in fp langs are pattern matching, and list comprehension. Java 8 doesn't have either. There's a laundry list of things other items missing, however just missing those two basic patterns is enough to say that it's not good enough just yet.
It doesn't matter the language they use to do a website, the browser will always give you HTML + Javascript, that is what the server produces for you to use the website. 
Eiffel, Delphi, Dylan just come to mind as examples of prior use of properties, surely there are others.
seems to me more like, why does eclipse still not telling me to stop doing that. JBoss Tools seems not offering even unused property access e.g. in a read-only case.
Everything is syntax sugar for something else. The stream interfaces are just sugar, but they are getting people to write fewer monolithic loops. The sugar encourages behaviours.
Doesn't a unicorn have to be hugely over-valued financially?
Nice ;) Though the paradigm and mindset between action oriented and component based MVC is different, in practice code implementing common business requirements doesn't always looks -that- different. See http://arjan-tijms.omnifaces.org/2014/11/jsf-and-mvc-10-comparison-in-code.html (which incidentally uses some code based on an earlier reddit discussion I participated in)
VB is a major one, as many early Java programmers knew that language. COM is another, though its a cross-language protocol rather than a language itself.
No. Pattern-matching in FP languages can match on values as well as types.
&gt; Scala leaves a lot to be desired. FTFA
My new job has licences for both phpStorm and intelliJ. I would have never tried them otherwise, I don't think I could go back to eclipse now.
I bet the fastest way of doing this is to use Java EE and PrimeFaces in particular &gt; I want to have a website where I can log in See for instance https://docs.oracle.com/javaee/7/tutorial/security-intro004.htm. Since you do not need registration capability just use simple flat file to handle your credentials and Basic auth. The same you can find in WildFly, etc. &gt; see the files on the filesystem and upload/download. http://primefaces.org/showcase/ui/data/treetable/basic.xhtml http://primefaces.org/showcase/ui/file/upload/basic.xhtml http://primefaces.org/showcase/ui/file/download.xhtml Of course any other mature framework can do this for you because your task is common, so just pick one
I don't agree, it's a pipeline. Your enterprise customers are likely upgrading at the same pace as new EE releases come out, just phase shifted by 10 to 7 years. If the pipeline stalls now, then eventually it will hit your enterprise customers, just 7 to 10 years later.
Funny how nobody asked for a link to prove Oracle is not very active with Java EE anymore. Is it that well known already?
I think you can judge from the traffic on the EG mailing lists, and changes in the spec repos.
AOL still exists?
I'm to lazy to change default IDE code generation, so I leave it as setFoo().
`Pattern`s can also be reused, so if your regex is rather complex and used in many places you can share it between all of them.
I do. I am not much of a fan of any of these big companies but Oracle has been a much better steward of Java than Sun ever was. They are releasing new versions and keeping the language moving forward. There was a bunch of FUD when Oracle bought Java and none of it has come true. It even looks like thier defense of Java from Google forking it is going to get Android moving over to be compliant which is huge for Java developer.
&gt; The only problem I see with spring and/or Java EE in a desktop app is that it can be quite memory hungry. Many of them use less memory than a single tab of a browser like Chrome :O
I don't use chrome so I have no idea about that. While firefox is testing my patience with every release, Chrome went full retard with their UI from day one so yea. One thing that chrome did better is essentially a better rendering engine and better js engine. The junk they put around that webkit control is just abysmal. 
Based on my enterprise experience, either when the current versions reach EOL or have reached EOL and a critical situation pops up. Or when some new guy brings in a consulting company to re-write their stack in technology X that will solve all the current problems. 
Oh yeah, that last one is a well known tactic ;)
You need to think outside of the Java box. Perhaps [this page](https://www.schoolofhaskell.com/school/starting-with-haskell/introduction-to-haskell/2-algebraic-data-types) explains it better (my emphasis): &gt; Fundamentally, pattern matching is about taking apart a value by finding out which constructor it was built with. This information can be used as the basis for deciding what to do—*indeed, in Haskell, this is the only way to make a decision.* I.e PM is the counterpart to type constructors, and in languages like Haskell and ML, a necessary language feature. Obviously, were it to be added to Java then it would be a syntactic sugar, but a very useful feature nonetheless. 
I use spring in almost JVM app i use. Dependency injection and the spring APIs make development far more pleasant. Here's a [very simple swing app](https://github.com/domurtag/iou) i wrote almost 10 years ago that uses spring.
JetBrains is a nice company, IntelliJ is a great product. But none of that makes up for this article. Terrible, terrible article, with nonsense comparisons.
Well, you can always use names of neighbourhoods in Rio de Janeiro :-D https://pt.wikipedia.org/wiki/Lista_de_bairros_do_Rio_de_Janeiro_(cidade) PS: my favorite is "Gamboa", but that one has already been taken by... me: https://github.com/brunoborges/gamboa-project :P
You have to simply wait on multiple CompletionStages like any other distributed workflow https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#allOf-java.util.concurrent.CompletableFuture...- I started to write some docs - http://fzakaria.github.io/WaterFlow/user-guide/getting-started/ Let me know what you think
I managed to get it working with NetBeans deploying a Vaadin app to Wildfly. It took a lot of trial and error, and it's better than nothing, but still leaves a lot to be desired. My main gripe was that we had a 3-4 minute build process, and when working on UI stuff in Vaadin I kept having to rebuild/redeploy to check the UI. It was miserable to develop on. DCEVM certainly alleviated most of that, so now I'm just redeploying a couple times a day instead of several times an hour.
"Don't follow well established and oft expected standards because of this thing I read once!"
Eclipse, NetBeans, and IntelliJ all still generate test methods with a `test` prefix based on a practice that became obsolete when Java was *half as old as it is today*. Go ahead and justify that.
Cool, I'll check it out. I suppose I was hoping I could use this as a Spring / Java EE refresher. But if it's not worth the effort then it's not worth the effort. :-)
OK, thanks, I'll have a look at that.
I'm writing a stand alone Java application to run tests via an electronics test bed. The test bed will probably look something like [this](http://sine.ni.com/cms/images/casestudies/cpeb.jpg?size) . I've no idea what the actual requirements are, it has been pitched to me as a stand alone application to test our product before assembly. But what exactly those tests are I don't know yet, could be firmware tests, component tests or both. I really don't know right now, just trying to get a feel for my options. Since this won't be running at our offices, I think I'd like to get it to report results to one of our servers, in which case I can build an API in Spring for it to save the results to. But it needs to function 100% with or without an internet connection. Up to now I've been working with Java SE and NIO, at the time we needed stuff done yesterday, so getting up to speed with Spring, and learning NIO wasn't an option. So if possible I'd like to take this opportunity to catch up with Spring. Also, I'm studying Java EE myself at home and from what I've done that seems to have better features for client side applications, but as I said, I don't really know. Might not need either. 
Thanks, I'll check out Guice
Why the fuck would you reinvent the wheel. That's anti pattern #1
&gt; I didn't read the entire blog entry, but is not fair to use your own blog as source of authority ;) Not intended to be a source of authority of course, just a longer explanation of my views ;)
Is N+1 still a thing, these days?
Unfortunately, yes.
We shall see indeed ;)
You will see earlier than others, I suspect :)
Cool stuff. It would be nice to have some degree of benchmarks (with/without) added to the README to quantify just how important this can be.
&gt; The performance cost in evaluating a regex in every call to String.split() is just silly. An obvious optimization would be a `Map&lt;String, Pattern&gt; cache` for the last 10 regexes or so. Maybe that's already implemented? Anyone care to research? :)
Is the application going to be running on a SBC? If it is then memory may be a constraint, or maybe not. I have used JavaFX + Spring on the BeagleBone Black with no issues. What I am trying to say is. If you are going to be running on a SBC then be sure to check the memory before committing to a framework.
You can try the solution presented in this article and see if it helps you.
As you appear to be learning Java and it's for a simple pet project I would say use the framework that seems the easiet to learn for you. Each framework has pros and cons and really for what you're doing just about any framework will work and be helpful. Plus it's only after trying one or two that you start to see what you really need and why one is better than other. There is no perfect framework ;)
I was more hinting at: "Don't people write SQL again, these days?" :)
If you manually generate all your queries, the problem is fixed. But then, you're back to using tabular data sets. So, choose the data access framework that suits you best.
In the world of my dreams, I'm generating nested collections with SQL using `MULTISET()` operators, but you already know that :)
Oracle has many interesting features that are worth using. But, judging from StackOverflow questions, most users seem to use MySQL.
That's not really a good optimization unless you're only using those 10 split patterns over and over and over. And if you do more than 10, your performance will suddenly tank. For any medium/large system you won't be able to manage that overflow. Plus it will pin an extra 32 objects in the heap, and on Android/Dalvik that means every GC is permanently penalized (Dalvik does not have a generational collector!). 1 for the LinkedHashMap, 1 for its array of Entry, and then 3*10 for Entry + String + Pattern.
It's definitely true that number and quality of tests needs to be increased and there are plans to integrate quick-check recently released for Java 8. Also if you look at the coverage currently it's around 95%.
What is the benefit of this project compared to other, constantly maintained, and up-to-date projects and products? (example: Mission Control)?
Java Melody (maybe a bit old, now?) https://github.com/javamelody/javamelody/wiki
Which quick-check implementation are you planning to use?
We were thinking maybe https://github.com/NCR-CoDE/QuickTheories
Yeah. You can. But only the version 2.0 which is not even supported by Oracle any more. It does not work/integrate with the newest half-official version of Scene Builder. 
Thanks!
I suppose it depends on how do you define *lightweight*? I think when most people say lightweight, what they actually mean "simple","easy to understand", and/or "easy to implement". In the OP's case he talks about a "lean" tomcat server... What does that mean? They went into $catalina_home/lib and removed some libraries? Tomcat certainly doesn't support everything a full EE server does, so in that perspective it's lighter weight. How many of those things that they left out are going to be needed? Transactional support (most definitely), so you'll need to include that. Security? Same thing. So you cobble together the things you think you will need, and you end up with.... something exactly like Spring Boot, but without any of the integration testing of your variously chosen libraries that you see with spring boot. Does that sound like lightweight? It certainly doesn't to me. In the case of Spring boot, you create a project off a maven archetype (for example), and 15 seconds later you've got a running application with no configuration necessary. Sure it's lots of libraries so from a jar sense it's "heavy", but there is almost no configuration required. I think that would fall better under the umbrella of "lightweight" than anything else.
Try Pippo.
Yo OP, define "lightweight"? Or better yet, what do you want/hope to gain from the solution being "lightweight"? 
Check out JSF [http://www.oracle.com/technetwork/java/javaee/javaserverfaces-139869.html](http://www.oracle.com/technetwork/java/javaee/javaserverfaces-139869.html)
It's funny this is the second time I've had to ask this question in the past two hours. When you say "lightweight", what, *exactly* do you mean? More directly what are trying to achieve when you use that term? Writing less code? Having few JARs in your distributable? Having to write more/less boilerplate code? Taking less time to start up? For *me*, lightweight would be minimal configuration and minimal custom coding for the maximum return. That would largely (I think) translate to as much convention over configuration as possible, regardless of how many external libraries your dependency management system had to pull in. What are your thought?
I guess I really meant only needed a servlet container or less, did CRUD, had ok web rendering.
Can someone explain what you might use spring websocket for? I've seen chat, games, and dashboard. Have yet to see many enterprise examples. (I don't mean full on enterprise but rather how to use this in my software company) 
Don't forget the ANT + IVY! Also you must use Apache Camel and RabbitMQ! Can't be any other way!
Love the changes but unfortunately **[this](https://youtrack.jetbrains.com/issue/IDEA-150685)** issue causes it to be a complete deal-breaker for me.
[Kitteh2](https://bitbucket.org/msx80/kitteh2) is also cool :) 
I work with automated tests and use Selenium with HtmlUnit. I think Selenium offers a better interaction with explicit waits for example and other neat stuff. You can also switch to Firefox, Chrome or PhantomJS pretty easily. Javascript support is pretty good with HtmlUnit. But it can't handle Javascript alerts (there is a workaround for this). I've also run HtmlUnit on React pages (Facebook would probably work as well). 
mail is fine, but I'm not a big fan of spamming my inbox with tons of additional emails.
Go for JSF and Java EE, light and easy to setup. See http://jdevelopment.nl/minimal-3tier-java-ee-app-xml-config
I'll continue the recommendation on Spring Boot. You're rusty? Couldn't be easier. But.. security still plays an issue.
You can use https://pushover.net/ which makes it easy to send a notification to your phone with just a http call !
Thanks, that seems very promising. And they even have Apple watch application. 
id love to find any excuse to use this tech tho, its so cool. thanks for the response
Pushbullet is another similar app, different features but they do the same thing, so tale your pick.
Fair enough, fluent APIs aren't for everyone or every situation.
*sigh*: no mention of rebase
it does mention rebase and git pull --rebase near the end. Overall its rather basic though
&gt;&gt; I have to develop a simple app to maintain data in a few tables with child-parent relationships. Remove "simple" and you will have more luck.
What they said. The JVM's HotSpot compiler/runtime has two decades' worth of development behind it to optimize bytecode execution. Try running these with the -Xint flag (forcing them to be interpreted) and you will see a difference. Then Google java microbenchmark. The only advice of real value here is the "make code more readable and maintainable" - that's the kind of code that HotSpot is designed to optimize to the best advantage.
And to help get oneself out of a sticky situation: http://justinhileman.info/article/git-pretty/ :)
What a pointless, meaningless and wrong article.
Even in C++ these are going to be the same, because the compiler will optimize them to be the same.
And if you're going to start effing around with rebase without knowing what you're doing, be sure to learn about reflog, too. :)
Orchestrating transactions can be somewhat tricky over a web service 
This isn't the place to ask for help, try /r/javahelp instead https://www.reddit.com/r/Javahelp
whats the gradle equivelent of this command? is there a spring-boot plugin for Intelij IDE?
woosh
Nope. We like Java, but I don't think I've ever met a Java "fankid" who would actually go that far.
My default initial list of dependencies are: * slf4j - including the JCL binding, jul binding and logback * commons-lang * junit * easymock * junitparams Depending on the project, I'll sometimes add jsr-303 into that as well. 
I work as a consultant so I generally am not the first to create a root POM. For my own projects it's just the usual stuff: logging, mocking, unit testing.
&gt; Is there any specific reason for having to use a javase client instead of a simple webapp that you can easely maintain and update? Agree here. Makes much more sense since it appears to be a relatively simple querying / reporting app.
I've tried AssertJ, Hamcrest and another library for fluent assertions - I forget which one - before and have always ended up just using JUnits Assert in the end. I've actually never used mockito though. How is it better than easymock, out of interest?
It's a bit hard to explain because I don't have access to the code but I found (coming from Mockito) the way EasyMock sets up and verifies mocks rather cumbersome. Might want to give it a shot. Aside from that they're pretty similar though.
Easymock 3 made that a lot better, with easymocksupport, the junit rule/runner and the @mock annotation. It will automatically create mocks for you, can automatically inject them and your teardown becomes a single call to verifyAll. I'll have to look into mockito for my next project though and see what I think.
* [lombok](https://projectlombok.org/features/index.html) * guava
- commons-lang3 - mockito - mockito-java8 - assertj - slf4j
None. Nothing. I just use straight java. My aims are primarily geometric. Ok, maybe my 2D geometry library (org.fleen.geom_2D). It's weird how much basic 2D functions you gotta go scrounging around for. I would probably use a package for making better graphics if there was one. Is there a juiced up java graphics package out there that I should know about?
use jetty with the servlet interface. only hard part is database access. if you're using user input for queries or inserts in the db layer then security is very much a concern my gut is that myBatis and jOOQ are the simplest solutions (but i'm not up on this) 
Open source! Open source! 😏
Well , I don't think spring is a good candidate to be included in package's innermost core module. **javax.inject** maybe more appropriate. 
I believe /u/derper-man meant that it's a self-rolled regex wrapper.
I probably would not be happy as a Java developer without Lombok.
I just got them from Amazon. I have skimmed bot (I have to do other stuff for classes, but they seemed really nice). Again, thank you so much! 
2 definitions as an adjective, from (http://www.oxforddictionaries.com/definition/english/lightweight) * Of thin material or build and weighing less than average * Lacking seriousness, depth, or influence the OP was clearly referring to the first (as the 2nd is mildly pejorative). there's no ambiguity here 
Your implementations are singly linked lists and both `std::list` and `LinkedList` are doubly linked lists. There's one source of inconsistency. Also, I'll comment that `std::function` could have overhead attached when invoked and is unnecessarily heavyweight for this use case. For your C++ one, I wouldn't be surprised if the `shared_ptr` uses make it slower than without. Really, there's no need for reference-counted pointers to store nodes that have only one owner.
The question is configuration. When switching from dev to testing or production, it's much easier to change a single line in an xml. And our DAO beans were "children" of the abstract beans tied to X or Y data source.
Core module? Depends on what's needed. Root/Top pom.xml which would add these dependencies to every module- NOTHING!!!. Otherwise you have an interface project with 3 POJOs and a Facade interface, and it pulls in 10 jars that are neither needed nor wanted... I HATE when people do things like that.
you're using the word incorrectly. from the oxford dictionary: *lightweight: (adj) of thin material or build and weighing less than average what you're describing is a thick layer that obscures the underlying structure. maybe you want "the lightest weight framework that does X". but even that's an abuse of the word 
If you're using Lombok you're not writing Java anyway -- that's the whole point of it. I would not be happy to have to put up with it.
For a singly linked list, I would say there is one owner - the previous node. However, you could offer an iterator guarantee that iterators will either always point to valid data (removing the node from the list, but not destroying it until the iterators are gone, edit: by making iterators store `shared_ptr`) or that iterators know whether they're dangling (through `weak_ptr`). That said, such guarantees do affect performance and don't belong in a speed comparison with something that doesn't offer that, unless that's actually the purpose of the comparison.
*sigh:* no mention of java 
Your approach doesn't lead to useful performance measures. Take a look at http://tutorials.jenkov.com/java-performance/jmh.html to get an idea of the issues as well as how to implement meaningful benchmarks. 
Anybody know if I'm just rediscovering the wheel here, or are there very few people using CLI for java development?
Plus one for /r/gradle.
slf4j + logback Guava Spock [Better Java Monads](https://github.com/jasongoodwin/better-java-monads) (Try monad for Java 8)
You're rediscovering the wheel. I take it your a student based on the beginning comment in your script referencing a lab assignment as the example so you probably just don't know because my guess is your professor or TA has only taught you how to compile and run Java programs using an IDE rather than say using tools like Maven or Gradle. To answer your question about the CLI. I use it all the time, but I also spend a lot of time in my IDE too.
Isn't HTML5 still more limited than RDA (full-fledged desktop application)? I really don't know a lot about HTML5 development, but I have developed RDA's in both Java and .Net, so my first approach is to go with a desktop application, rather than a web application.
One of these is how you run unit tests: mvn test ant test ./gradlew unitTest An additional argument for maven or gradle can be used to run a single unit test, but I don't use it (for unit tests). All our unit tests run in &lt;5s, as they should.
&gt; yup. I may eventually put enough effort in to make this library robust enough to publish open source, but right now there are some methods with weird bugs, and also some inconsistencies in whats implemented. All you have to do is put it up on Github with a license file. You can ignore the bug reports if you like and then just look at the pull requests that meet your expectations. almost all the licenses are no guarentees, and the bug reports will be information to others.
Bootcamps work for "hip" and "cool" languages, because there are startups that will hire people, regardless of the fact the quality of programmers out of bootcamps is basically shit. For a mature language like Java, that almost every programmer knows, just learn it. Take university courses if you need to. Since you are looking for a bootcamp I assume you do not have a CS degree, if you do then bootcamps are pointless. If you don't have a CS degree you would be better off taking a few courses and learning on your own.
Oracle's [Java Magazine](http://www.javamagazine.mozaicreader.com/JanFeb2016#&amp;pageSet=15&amp;page=0&amp;contentItem=0) has an intro to using Spring Boot (which is what you want to use to get your app up and running quickly). The whole issue in on writing Web apps, so there might be other articles for you. As a separate point, if you're doing Java development, you should subscribe. It's free and has solid tech content.
Instead of wasting your time and money on a bootcamp, you would get a lot more out of your time just learning Java. Go through the Oracle Java tutorials, install Netbeans or Intellij and just start coding. Java is the language with the best tooling and the best documentation of any language, and probably any product to ever exist. You also will want to learn something about algorithms, software engineering and data structures. Learn how to program in an Object Oriented Paradigm, which is crucial for Java. Build some decent size projects that do *something* that you want to build. Or go through something like Coursera that is free much much much before a bootcamp.
Just got it via the weekly update check. Looks good so far.
For a GUI application, I would expect at least one screenshot in the README. Also I'm curious why the author chose LGPL.
I don't think that failing to register a defeat device constitutes qualification to build wrong benchmarks. In addition, the article fails to show bad faith as far as I can see.
I usually use the least visibility needed to make the program work. Opening up classes later is easier than reducing visibility.
White kind of coverage do you look for? And what kind of IDE do you use? It may well have integrated tools.
Okey, it wasn't obvious that I was joking. When your company hires about a hundred of programmers in an area where there is a high labor shortages then you can really dream about creating „good software”. If you can do „common software” in such an environment then your company is doing good. I would totally agree with you if you just wrote that I shouldn't be lazy (apart from the fact that it was only a joke of a bad taste) but you just throw your private opinion like it was a common standard (which is exactly the opposite – using set/get is the standard even if we don't like it). In my company we got much bigger troubles than arguing about IDE-s your way. I'm using Eclipse. It has many flaws but, to be honest, I like it. And auto generation of code with get/set is much better than none. Apart from that I really think that having setters and getters should be replaced with immutable objects with clean creational methods. 
A memory profiler is your best friend here - jprofiler is very useful if you have access to a licence. The behaviour you're seeing is consistent with soft caching of something, probably the strings you aren't using. That it runs quickly with random inputs suggests the problem is during parsing, which suggests your parser is using a symbol table with a soft cache. That would make sense if, for instance, the input data is XML.
I have a rule. Whenever I do something i think "is the next person that has to maintain this code going to hate me for this?". A store procedures normally is the last place a dev would look for functionality so personally I used them sparingly. Other issues I would have is the syntax for store procedures tends to differ slightly for each system. So if you migrate db platfrom you have more refactoring to do. If I was you, I would personally use dbunit with test-ng. I have used this in the past for some integration tests. Otherall it is a good thing you have integration test. I am sure other devs have used stored procedures in the past to solve the same issue.
I don't think you are being helpful. It's a direct link to a specific page. Would you be less upset if it were hosted in separate blog posts, rather than one Github repo? That doesn't seem like a meaningful distinction.
Yes, the author is right ;) Almost every other language supports them, including PHP, PL/SQL, and what not.
I would recommend [Mastering Spring MVC 4](http://geowarin.github.io/mastering-spring-mvc4.html) in combination with the book you have mentioned. While your book focuses alot on configuration and databases and access layers the other one gets straight to the point on how to develop applications. You will create an app which fetches Tweets, you will create REST api's etc... I think that those two books should be in fact just one book. Where one author left something out the other one explained that topic in detail. In my opinion, the combination of those two books cover 90% what you have to know to get started. What about the other 10% ? Get a good book on Jpa/Hibernate, which covers relations between Entities. 
if your code is not too complicated do a quick test in C/++. manual memory management could give you quite an edge. 
That's a very good way to introduce Scala (or Kotlin, Groovy, ..) in a project by the way, if you want a sneaky attempt at convincing your coworkers :)
No. It makes zero sense. Extract strings into property files, or templates. Walls of text have no business hanging out in the code.
While you're at it, deprecate comments and Javadoc. In fact, deprecate single-line string literals as well, and numeric constants. They can easily be extracted into property files. Heck, let's extract all Java code into property files and compile stuff on the fly at runtime.
While I'm at it, I will require every developer to pass a retard test as a prerequisite to writing java code, or talking about java. Reductio ad absurdum? No java for you. Stupid smiley faces? No java for you. Meaningless analogies? No java for you. 
Quite frankly, it's incredible that it hasn't been here for at least a decade already. It's the single biggest missing feature in Java, imho.
What GC are you using? When you use JDK 8u40 or greater I would try G1 gc. Also when you only have 4GB available but actually need 85gb the gc will run more often. It wouldnt surprise me if the long runtime comes from the gc doing nothing but collecting strings. 
Isn't "No. It makes zero sense" also an overly reductive statement? You've considered all the potential benefits (readability seems like a pretty big one) and every single one has absolutely no merit?
I personally don't have a big need for them but I probably would've given them higher priority over, say, including underscores in number literals.
I don't follow your logic. Say, you want to have help information. So, in prototyping you put a &lt;here be dragons&gt; stub in there, and it's fine. Then you want to transition to production, so you give a task to a proper person to write these (or do it yourself). At which point you migrate your stubs to .properties, and then copy paste texts there. At which point do you actually need multiline literals?
Thanks for this, I've come across various mentions of Rust but didn't get a clear view of what type of language/system it was. As a long time Java developer (and older C developer) this was very useful.
My pleasure.
I'm sorry for appearing agressive. I by no means meant to be agressive. I sometimes apply a hyperbolic tone to make a point, and because I personally find hyperboles and sarcasm fun. [For instance, this](http://dilbert.com/strip/2010-10-20). But I appreciate that not everybody shares my enthusiasm for this approach. OK, here's an imaginary reason: String sql = " SELECT * FROM table WHERE x = ? "; Here's another imaginary reason: String regex = " a* # first, match several a's b+ # then, match at least one b c? # c's are optional # commenting in regexes is quite neat! "; In both imaginary situations, I'd like to copy paste some external DSL code just right into my Java code. Then modify it, then perhaps copy paste it from my Java code back into my SQL Developer and run it right away. I work with external DSLs like the above all the time, and I'd like to embed them in Java. So, that's real for me. So, what would qualify as a *"real"* reason according to you?
Then, don't use the feature (if it's added). Like me, I don't use the `strictfp` feature, for instance.
Thanks! I never heard of Rust. 
&gt; A lot of good things are wrong if you take them to the extreme I'm not an expert on political correctness, indeed. But you know what? If I were, someone might come and criticise me for that. It's how people work. Anyway. I can live with it. :) &gt; I don't need an argument in favor of multiline strings, however. I see. Misunderstanding, there...
I try to avoid stored procedures like the plague, if I can. The second time I spent 3&lt; hours chasing a bug, only to find out someone had stored some business logic in a stored procedure, I knew I was done with those. If you already have the work done to shove data in, have you considered using an in-memory option like H2 (http://www.h2database.com/html/main.html)? I use it for exactly that purpose. Then, you can run all of your tests in isolation. Once the test is done, H2 goes away with your dummy data. There are options for NoSql db's too, such as https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo 
Glad you like it. Yeah, regarding tooling and ecosystem, Java certainly is the language to beat.
must be your first time opening Reddit
I love how the top flow control statements in the comparison are `break` and `continue`. Sure, alphabetic ordering, but it does put some weight on underused statements :)
I tend not to pay attention to technologies that you can't find in advertisements for jobs.
Ask /r/java and everyone goes NOOOOOO Ask /r/SQL and everyone goes "where else would you put that"? Ask /r/programming twice: once with Oracle stored procedures and once with PostgreSQL stored procedures and the same folks will first hate, then love you. TL;DR: If it works for you, do it (I'd love to learn more about your idea, though. Would you mind elaborating?)
In all my projects : * **log4j2** : definitively the best logger around there at this time. * **guava** : so many stuff * **commons-lang3** : because i'm used to so many methods in StringUtils * **junit** : you know, for tests * **a few personnal utility classes** On a side note, i usually have in most of my projects but not every single one : * **guice** : if the project is not a very tiny one * **jcommander** : to deal with command line parameters * **simplexml** : as soon as i have to write some configuration in XML (yes most ppl would rather use JAX) * **reflections** : also because i'm so used to it (https://github.com/ronmamo/reflections)
hm, I know some purists that would agree with you unironically. ... besides the last one.
I love how Rust has a never-ending `loop { .. }`, but no `do { ..} while (_)` loop.
BTW, literally every feature you mention is available in Kotlin.
It seems as if the java devs accepted that there are better languages than java on the jvm and focus on improving on the jvm instead of bringing java up to snuff.
You don't really need `while` loops. Of course, you don't really need loops, as `goto` is sufficient. I wish that this were possible in Java: label: { ... something(); continue label; }
I really don't care; it'd be nice, but the impact it would have on my day to day work is minimal. Value types, GC improvements, project jigsaw will all have really significant tangible benefits. A syntax improvement for string literals? Meh
What version of the JVM? I believe the way substrings are handled has changed between versions, so perhaps with the way you are feeding the random data, you aren't substring from a huge string, but with the real data you actually are, thus it never gets thrown away.
Well I just guessing here, but I think String.split uses substring under the hood, so if you are testing locally with a newer JVM, but then pushing it to a server with an older JVM, that could explain the difference.. The Target level shouldn't matter, but the actual JVM version See http://java-performance.info/changes-to-string-java-1-7-0_06/
Judging by the abundance of universal logging and ORM libraries that allow switching backends, this is something Java world would gladly accept. I do not write any image manipulation software and do not know how useful will be this particular library.
Let's let the majority decide. After all, others might be interested in the StackOverflow and forum answers that were curated and included in this article too. 
&gt; Guava for me : ImmutableBuilders , BiMap , MultiMaps ...
I'd be surprised if something like this didn't exist. Good luck none the less.
Do this, man! Even if it already exists, this is a cool project. Good luck! :)
Java has a standard database access API called JDBC. To use it with an Oracle database you need the Oracle JDBC driver, which you can get from Oracle's [website](http://www.oracle.com/technetwork/database/features/jdbc/index-091264.html). 
these would be great so long as it doesn't break the incremental parsers - those parsers are what makes java such a joy to work with from an IDE don't throw the baby out with the bath water 
Because ... how is a stub SQL going to run at all? You have to put real things and prototype is expected to work.
This can be used for something like utility classes that are not meant to be instantiated. You make an abstract class with a private constructor. public abstract class Utils { public static int get42() { return 42; } private Utils() { /* I am just a utility class */ } } This way nobody can create an instance of the class nor can anybody subclass it an create an instance this way. 
See the AWT/Swing adapter classes
Here: https://github.com/codenameone/CodenameOne/blob/master/CodenameOne/src/com/codename1/ui/Component.java The class is abstract since it makes no sense to create a new Component as it has no meaning of its own. But it has default implementations for everything. So you can do something like new Component() {} But that would be silly so the assumption is that you would understand that you need to override something to give value to the subclass.
[removed]
The only reason I see to do that would be if you want abstract state. Considering the whole field is moving away from excess state, I'd be wary of such a construction.
A class wirh only private constructors makes it essentially final, as no subclass can invoke a super constructor.
Yes. Unfortunately.
Probably cause you reposted jt with a different account? 
It depends on what you mean by *with no abstract method*. No abstract methods declared? Or no abstract methods inherited? e.g., I do this all the time: interface Something { void a(); void b(); } abstract class AbstractSomething implements Something { @Override public final void a() { ... } } Everyone has the same implementation for `a()`, but subtypes may differ in terms of implementations for `b()`. `AbstractSomething` doesn't *declare* any abstract methods (but technically still has them, as it doesn't fully implement `Something`) **NOTE**: I'm still working with Java 6. In Java 8, the above could be (but doesn't have to be) done with default methods, in case of which the `AbstractSomething` class is no longer needed.
As someone with very little knowledge of Eclipse/Java, what's potentially the biggest shortcoming? 
Thanks!
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/php] [The Java community is so amazingly supportive compared to PHP. Just wow.](https://np.reddit.com/r/PHP/comments/48f8d1/the_java_community_is_so_amazingly_supportive/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Anyone using reflection outside of tooling should be tarred, feathered, drawn, and quartered.
I only have this one account, and my parent comment was directed at the reposter.
Thanks for the tips, that thought honestly hadn't occurred to me, I'll check out dbunit.
OK, great, but this raises more issues for how I'm using stored procedures outside my test code. :-/
&gt; Stored procedures don't allow you to scale very effectively. Shit. I'll need to research this more, most of my db queries are stored procedures.
This would be ideal, and as things are we have a server that replicates the production server, I've tested eveything there. But I have some tests I'd like to run on the live system to verify everything, since some people in here insist on doing their tests on the live server and sometimes that can break my stuff. - I know, it's fucking insane! Anyway, you are correct. I shouldn't do it on the production server, I can rely on detailed bug reports from my colleagues, right? I wish :-( Decision made! I'm not putting them on the live database.
It's not really any grand idea. My test cases push data into the database, tests are run, then they remove the data afterward. I was just thinking to keep all those SQL queries for testing in the database instead of in the test cases themselves. But after reading the comments on here I'm starting to change my mind. If I keep them in the database then my tests become reliant on those procedures, that's enough to make me reconsider. I'm still keeping my TestDAO for testing, just keeping the SQL in there instead of on the database. I'll take a look at some of the other suggestions here too. 
Just a quick look: 1. You got a lot of those findPath("string") in your code, that's a lot of boilerplate, you could use something like this: JsonNode json = Json.parse("{\"firstName\":\"Foo\", \"lastName\":\"Bar\", \"age\":13}"); // read the JsonNode as a Person Person person = Json.fromJson(json, Person.class); To parse an object to json.
I actually just got accepted into the swguild and am starting in April. The reasons I am joining is because I think I will learn more from the bootcamp in 3 months then I would ever learn on my own, and I would be learning from people who have been in the industry for years. That sounds way better then learning from an online tutorial. I also feel like a bootcamp is th best way for me to get my foot in the door to be able to even get interviews from companies. I think reddit is anti-bootcamp but imo it's a better option then being completely self taught or going to college for 4 years unless you are very well connected to people in the tech industry.
Probably the Spring Framework. AFAIK it is currently the most used framework Java-wise. 
It depends. You might still be able to shard your database and then run the procedure on the relevant shard in order to manipulate that shard's data...
Frameworks are always a good extension to the resume. However for an entry level job a good understanding of Java SE, OO and some basic patterns should be at the top of your list.
Nothing. It is available free of charge. If you don't like it, you don't use it and you try something else.
Are serialisation frameworks considered tooling?
Why not just use PostgreSQL? I doubt you've got hundreds of millions of jobs so elasticsearch is a bit overkill for that. I would have a component that just grabs job names from the SQL DB. The component could leverage [Spring's cache abstraction](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html) so you're not hitting the DB all the time. Whenever a new job is added invalidate the cache.
Don't try to jump on the latest technology, but invest in solid foundations. There are soooo many developers that don't understand the idea behind OOP – don't become one of them. The books "Clean Code" and "Effective Java" are good reads.
&gt; Why not just use PostgreSQL? I doubt you've got hundreds of millions of jobs so elasticsearch is a bit overkill for that. I don't think that elasticsearch is just made for sites with millions of entries. I would say it doesn't even matter how many entries there are in.
While that's true it's kind of like saying a hammer will put a screw in a board. Elasticsearch is really, *really* good at sifting through big data to generate statistics. Using it to search through hundreds of records when you've already got something that can do that no problem (SQL) is adding complexity with little benefit. Every data store you use is one more piece you have to maintain and troubleshoot for your client.
I'll add: Don't invest too much into a specific technology/framework. With good fundamentals, it's easy to learn a new technology. With knowledge about nothing but that technology, it's hard to learn any other technology. This field is about skill, not about knowledge. I don't know a lot about Spring, because we've never used it, but I know I'll be able to pick it up in a couple of weeks if the need arises.
This pattern makes a lot of sense to me.
What do you know? Do you know about Big O notation? Do you have solid algorithms and data structures? Do you know how to use Maven? Do you know Spring? Do you understand the Java language features and core libraries? If you answered no to one and only one thing above, learn that and you can be almost guaranteed a job. If you have more gaps you'll need to learn more or settle for probably or maybe.
That autocrlf thing was really needed! We've had issues where a build on a different platform yielded a different migration checksum! I realize that's the way to say "only deploy CI builds" but sometimes you just have a particular test, etc.
I'm pretty okay with serialization code using private no-args constructors or directly reading/setting private fields. But yeah, if you're using this kind of code to actually execute logical code, that's horrifying.
Yes there is a better way to handle it, and that is in an active active configuration if that is possible for you, make sure the load is 50% on both boxes so that when one falls over you can still manage all traffic on the 2nd instance. Just hit them in a round robin fashion. You can allow a backup of messages on the queue but this is limited and will eventually fall over. The other option is a master/slave configuration in which you do replication from master to slave, treat them as a single instance and let ActiveMQ handle the switch to the slave if things fail. If active MQ is critical to the running of the application like anything else you will have to have some resilience in the system. It might even be worth thinking about segregating the critical services, and having multiple ActiveMQ instances servicing different parts of the application. 
/u/DeliveryNinja - thanks so much for the response. Are there any tutorials on how to possibly set up an active configuration where load is 50% on each one?
I'm sorry. We're here for you.
no worries - I appreciate the help and suggestion. I'll start looking around on what we can do. 
Damn, it must have changed over time. I think it used to be abstract.
This is used to create better Exception Hierarchies.
If anyone ever watches this I would love to get some feedback :)
What are the objectives of your testing? Are you doing load, functional or what?
Functional testing first... Can we access each section of the site. Can we open a document that we expect to find the clicks deep in the system. Can we take a document the click a menu that moved the doc to a new queue. Then navigate to that new queue and find the doc where wet expected it. Eventually it would be nice to sewer it the system can handle 20 people doing this all at once, but because the app is normally accessed behind citrix, we cannot expect any non citrix automation times to match real world loads (citrix has massive overhead) I've been reading about selenium. Is my use more targeted towards selenium?? Thanks for your time.
for straight-up functional testing an api I tend to use [rest-assured](https://github.com/jayway/rest-assured). It really takes the pain out of java URL access/json parsing/etc. Web UX/UI testing is [selenium](http://www.seleniumhq.org/). for load/perf I use [gatling](http://gatling.io/).
surprisingly that made me laugh, good job
This would probably be better off in a Javascript related subreddit since this pertains only to Javascript and not to Java. On the other hand, does this Javascript extension library contain functionality which is not in Java SE and JavaFX? 
Do you have the source code ????
How can you tell it's Java?
this. SQL is fucking great. Superfast used properly as well. SQL and the JVM hot new trends for 2016. I'm so out of touch, things have come full circle and I'll be cool again.
Thanks for the video! Wanted to attend the event to watch this session but other plans got in the way. Working with Java EE 7 and react right now so maybe I can pick up something useful :)
Or type hierarchies in general right? Like if you implement an event-driven system where the types are imortant?
so why do we care about the screen shot then ???? Im lost
Use Geb if it is a webapp for functional testing. http://www.gebish.org/. Use Gatling if you want load testing: http://gatling.io/#/ I'd recommend you do most of your testing at the unit and integration level though. An inverted testing pyramid is a bad thing. Check out this video if you have know idea what I'm talking about. https://www.youtube.com/watch?v=Z0sD53c7VSE
I envy you :-)
It's not, lol - it looks more like Python IMO
Working with people is a great way to learn...
AFAIK it stands for As Far As I Know
For some reason I googled "AFAIK Java framework". Not surprising, didn't find anything relevant. Thanks for clarifying!
Selenium has libs for most languages I'd imagine
I've been in qa for over 10 years. But I'm not in charge of setting the scheduled or budgets, so we get to deal with heavy testing efforts at the end of the process.
That's true, selenium is mainly the underlying web driver and api design. Like how AWS is really similar between languages.
What's funny is that the 5,6,7,8 is a correct answer to the question.
See the [**rules**](https://www.reddit.com/r/java/about/rules/) &gt; Jokes / Memes &gt; Not that I don't have humor, or that I can't have a good laugh, but most of the "jokes" that had been posted here were extremely stale and absolutely unfunny.
See the [**rules**](https://www.reddit.com/r/java/about/rules/) &gt; Jokes / Memes &gt; Not that I don't have humor, or that I can't have a good laugh, but most of the "jokes" that had been posted here were extremely stale and absolutely unfunny.
The functionality of the class
and the github -&gt; https://github.com/StefanLiebenberg/throwable-interfaces
It does show Oracle's focus which is important fro Java.
This problem has been solved by around 50 github libraries now :)
General rule of thumb: Never trust any commenter that suggests one IDE over another. &gt; glasses for java programming would be... interesting. I had the same thought ;)
meh. was fun making. 
These specs are fine for Java development. You only need faster hardware if you run some computationally intense stuff or a server, or if you do huge builds with millions of lines of code. EDIT- Keep that SSD and don't let anyone take it away from you. SSDs make a huge difference.
You’ve already bought it so why don’t you simply try it out? It’s too late now to change, anyway.
Seems like eclipse, with some lines, don't you think?
Wow, so did that really save you anything compared to hand writing? :)
Most Definitely, writing it all out by hand would've killed me. Especially since I wasn't sure on the exact code I wanted when I started this. Now I just have to make a small change a template to affect a very consistent change over my entire code base. And as a bonus, I learned a lot trying to reflect the generics of those interfaces. 
Maven is the reason I switched to Netbeans- it's significantly better. But M2E on Eclipse has been getting progressively better as well. But 3 years ago Netbeans was pretty decent- what kind of machine did you have? Everyone else in my team is on IntelliJ though and one guy is using Eclipse. I still use Eclipse for its SVN synchronized view- as a glorified SVN client... I can't stand having to work without an SSD though. Some tasks I measured several years ago on Eclipse take 4x less time on SSD compared to HDD. On top of that stupid Mcaffee antivirus seems to grind everything to a crawl on my work machine. I installed Linux in a VM, and everything in the VM is much faster compare to running it directly on Windows as Mcaffee isn't interfering with it... For example mvn clean takes 1:18 on Windows with Mcaffe vs 7 seconds on the VM...
I'm not sure how I feel about generating the implementation and the tests. In theory you would have to test the generator and that should give you confidence that the generated classes are correct. I don't know if that's feasible in your case though.
[TypeToken](http://google-gson.googlecode.com/svn/tags/1.1.1/docs/javadocs/com/google/gson/reflect/TypeToken.html).
Because I'm waiting for it to arrive
I probably won't be doing huge builds... if I ever do, I have a pretty decent machine at home (i7, 24Gb RAM...) This laptop is just so I can take it with me to work to do my school stuff.
I think that 8Gb of ram should be enough then, for chrome tabs... Thanks
awesome, thanks
Or [customized versions of functional interfaces](http://slieb.org/blog/throwable-interfaces).
Most Java apps use sun.misc explicitly or via popular libraries. If that means that most Java apps are broken, then Oracle is doing something wrong.
Which is the best or most popular one?
mine of course.
http://blog.dripstat.com/removal-of-sun-misc-unsafe-a-disaster-in-the-making/ Netty, mockito, powermock, spring, akka There's 5 to start. 
* [Mockito](https://github.com/mockito/mockito/search?utf8=%E2%9C%93&amp;q=sun.misc.Unsafe) - nope * [Spring Framework](https://github.com/spring-projects/spring-framework/search?utf8=%E2%9C%93&amp;q=sun.misc.Unsafe) - nope * [Netty](https://github.com/netty/netty/issues/4044) - has a plan to replace Unsafe if need be. Furthermore, there's already been a lot of [work ](http://openjdk.java.net/jeps/260) to accommodate anybody who is using things in `sun.misc.*`. There's no need for doom and gloom when people are working to fix the problem.
This is true, but the problem is that oracle had some really useful stuff buried in sun.misc with no alternative available. Things like ParameterizedType, for example, which make most serialization libraries work (GSON, Jackson, etc). Once these packages became popular, it would have been nice if oracle/sun would have started to expose them in a safe way rather than waiting till v9 to just take them all away and force everyone to switch.
That's really neat! You should try a library like Square's Javapoet it makes generating java code a lot easier.
It had to happen sometime. Complaining that it's going to happen in 9 instead of 10 isn't much different than complaining that it's going to happen in 10 instead of 11.
I want lambdas to rethrow checked exceptions, not wrap them in a RuntimeException [subclass]. Is this even possible in JOOL? Seems like JOOL would catch and wrap *any* Throwable. Thus, one may end up with a wrapped RuntimeException, Error, etc: Stream&lt;URL&gt; urlStream(Stream&lt;String&gt; pStrs) throws MalformedURLException { // unhandled exception return pStrs.map(URL::new); // JOOL try { return pStrs.map(Unchecked.function(URL::new)); } catch (UncheckedException ex) { if (ex.getCause() instanceof RuntimeException) { throw (RuntimeException) ex.getCause(); } if (ex.getCause() instanceof Error) { throw (Error) ex.getCause(); } throw (MalformedURLException) ex.getCause(); } // throwable-interfaces try { return pStrs.map(FunctionWithThrowable.castFunctionWithThrowable(URL::new)); } catch (SuppressedException ex) { throw (MalformedURLException) ex.getCause(); } }
Either way, nothing we say can change anything about the machine once it arrives. :)
[Dilbert on certification](http://i.stack.imgur.com/TS9om.gif)
Do you want to work in a place were people dont know that?
Only all-tech companies will have the majority of people already know what any of that means. Also, I live on the East Coast of the US. not many All-tech companies here. There are a few, and I am reaching out to them. One of the biggest one is essentially a slave driver that only pays people hourly with no benefits. It's almost like being an engineering airline stewardess. When I say Computer Science around here, people almost always come back with, 'You mean IT?'
A certificate probably won't change much of that. 
move to new york city. plenty of startups here that can let you do what you love and pay you a decent wage.
the majority of places are those places.
Java 7 is probably also still fine, many companies won't have upgraded to java 8 yet. And it's very unlikely they will actually care which version OCA you have.
Often you'll have to get your CV through some HR and management layers, and if your CV doesn't have the things they have on their checklist your chances go down.
I would rather see GitHub contributions.
&gt;Well, when I tell them I designed a custom database system that created dozens of private individual reports as well as automated reports running calculations on millions of pieces of data and ran in a fraction of a second, they look at me like I'm insane. I'm wondering if the places your looking at want to make sure they are actually getting Java folks that know about data as opposed to Python "Data Scientists" that don't actually build production systems (like answer business questions as one offs) 
It is, but as OP said, there's less study material for it and more stuff in the exam, for little to no benefit.
As luka said, there's a bunch of github projects addressing this now. But I'll go ahead and plug an alternative, Durian's [Errors](https://github.com/diffplug/durian/blob/master/test/com/diffplug/common/base/ErrorsExample.java?ts=4) class. I think the advantages of Durian's approach are: - Only two files - you don't have to add the whole library if you don't want to. - Built around the idea of error policies. - `Errors.log().wrap(function/consumer/supplier/runnable)` - `Errors.rethrow().wrap()`, `Errors.dialog().wrap()`, etc. - Easy to add your own error policies. 
Seriously? You have met people in HR who know everything about your skill set? I find they communicate like they are reading off a chinese menu. They have no idea how programming actually happens. They ask me to eplain buzz words that they don't really even know what they mean. I get questions like this, "I see you have down here that you know C++ and Java. How strong are your object oriented programming skills?"
A lot of these guys are recruiters. So they are looking to fill several positions. I am far from a Java guru. I would say I'm ok at it. But I'm ok at Java, JSP, JML. So I haven't been doing it for years. They teach it at school like 1 week is 2 chapters, and 4 homework projects, hand it in, and onto the next 2 chapters next week. So no time to get ultrafamiliar with anything. But I have read and done the homework for 4 different 600 page Java books of varying skill levels. I think they felt like my skills lacked focus. But that's because I just got my Masters degree. I wanted to up a lot of skills and gain a lot of knowledge at once. And you are right on. That entire custom big database system I built was entirely in Perl. But programming is programming. We all have to keep up with developments in languages whether we stay with one like Java, or have to jump around to different variations like Perl to PHP to Python.
No one answered your question. If you're committed to the idea of certification, then Java 8 is the way to go. 
Cool, thank you!
Yeah, I feel like they are working off a Chinese menu when I walk into these places. They have no idea how to evaluate problem solving skills. Thank you for your feedback. 
Haha! That is exactly what I'm going to do with that certification! :D That certification will not help me program at all. Those tests are such BS. But I know I'm a good programmer. I need to start getting payed for it. And I'm not sure what to do. I might start with an easier certification first.
There are some great study materials for Java7. Maybe I will get the Oracle book for 8 and use the Java 7 study books. Thank you!
So you have a masters degree which you know that doesn't work for getting a job, but you want more education? Go for experience, like other people suggest. Work in some open source project, or create a couple of projects of your own.
I strongly disagree. Only after certification I got the feeling that I fully understand Java. Yes, those are sometimes technical details that you can google if you need them .. but if you master them, "thinking in Java" starts to be natural for you. It's like saying "I don't need to study english, I've got google translate". Bullshit. Try to have some serious conversation with that attitude. Last but not least - lots of companies value the certification. I've done dozens of interviews for our company and always if there was a cadidate with certification, I at least knew he's serious about Java. Sure, participation on projects is usualy better but certification is great start. If I have 10 juniors on interviews with almost 0 working experience (they always have 0) and one has certification, who do you think I choose?
Have you tried talking to any of the other students also taking the course, or your professor? If other students have been given the same task, I'm sure some of them have encountered the problem, and may have also solved it themselves. My university also had a forum for students to post on, which would be a perfect place for a question like this. It may be the case you have chosen this robotics task personally though to do your assignment on, in which case other students may not be able to help you. Also, this subreddit is more for Java news, research, etc, not for personal problems with individual projects. There is /r/Javahelp for that though. If you do not get much attention here, try that subreddit. Good luck!
I would go for 8. If nothing else it's new and it won't be outdated that soon. Study materials and books I have read and used for Java 7: This book is waste of time. It won't prepare you for test at all. Also it has lots of mistakes http://www.amazon.com/Oracle-Certified-Associate-Programmer-Study/dp/1849687323 Books from Mala Gupta I recomend a lot. She knows how to write a book + very good examples http://www.amazon.com/OCP-Java-Programmer-Certification-Guide/dp/161729148X I really recomend buying mocking tests from Enthuware. I think I wouldn't make it without it. The website looks a bit suspicious but it's legit http://enthuware.com/ 
The right answer.
I'm pretty sure that if you are determined enough, you could create enum instances dynamically. And if that means using Unsafe, so be it. */me hides on another galaxy*
/r/javahelp
OCA Java 8 contains some Java 8 specific topics, such as lambda expressions and the java.time API. It might also include default and static methods on interfaces, though this isn't mentioned explicitly on the topic list. For instance, consider the (hypothetical) question, "All method declarations in an interface are abstract." The answer differs between Java 7 and 8! OCA Java 7 exam topics: https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-803 OCA Java 8 exam topics: https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-808
I would strongly recommend Java 8 instead of Java 7 certification. Note that Java 8 was released **two years ago** this month. At a recent conference I attended, a show of hands indicated that perhaps 50% of installations had Java 8 in production and 50% had Java 7 in production (with only a few running earlier releases). I'd bet that a chunk of those Java 7 installations were looking to migrate to Java 8 as well. If you're competing against other candidates with a certification (hard to say whether this is likely, though) then a Java 8 certification would certainly seem more attractive than a Java 7 cert. At least, that's what I'd think if I were evaluating candidates with those certs.
Damn, you're right. But even so, those are very simple topics. The hard stuff comes in OCP
A recruiter forwarded me a test question from a potential employer. I emailed him back the answer. He wanted to know what the attachment on the email was, some sort of ".java" file. And he was a *really good* recruiter.
Boston also an option. Tons of pure software companies up here.
I don't know who you're talking about with the biggest one, but a contract company is a good springboard to get your name out there and get some experience that someone else can back you up on. Work for them for a year and then move on, either to the company that you're actually doing the work for, or someone else. That's what I'm doing right now. I started working with one contractor, and after about 13 months another contractor picked me up at a higher wage for the exact same job (the client company was afraid of losing me) Now about a year later, another larger contracting company wants to hire me on for even more money to do consulting within their network while still developing for the client company.
Yeah, the oracle book is on normal technical details. Test is on obscure features and errata.
That's understandable, but it also isn't easy getting paid poorly for your skills, is it? Look into remote work, too. Lots of opportunity there. Or partial-remote. We have someone at my workplace who works remote on Mondays and Fridays from Cambridge. I also work remote on those days from Washington DC, and our office is in NYC. A lot of companies will also help you out with relocation. There really isn't a lot of opportunity outside of big cities for programming work.
It's what I've been studying. However without any experience or connections I'll have a tough time getting hired.
i'm gonna assume you're serious. i realize that it's bad out there. but naive questions from HR are an opportunity - give an answer and try to make them happy. "you can't fight city hall" if they seem open to it, tell a story about a time you used that technology to impact the bottom line heart to heart, your attitude is as bad as the system. instead of fighting it, embrace it (trust me, i have terrible attitude too)
none 
I haven't started yet but yeah ill answer the best I can.
Like always people over exaggerate, I got my Java cert about a year after I started Java programming as a full-time job. It got me a much better and deeper understanding that not even 5 years of intensive Java would've gotten me. In the end though it's all about theory AND practice, you'll never get by with only of them.
Java in a Nutshell is pretty good. 
1. I live in akron about 15 minutes from the location on the bootcamp here so I won't be paying any rent. So my cost is 10k which i have to take a loan out for because I don't have that at the moment. 2. I had a phone interview about 5-10 mins, as long as you show your interested in programming and will work good with others you will be okay. Then you have to take a test on pattern recognition and some other stuff. I didn't find it too challenging, you do only get an hour and I used the whole entire time and finished with only about 2-3 minutes left. You have to get 16/26 correct to pass i think, somewhere around that. I got 21/26. If you've done any programming before it should be easy. There was some questions I couldn't figure out. The questions were like" if BIG = CJH then what does MLS =". You just have to figure out the patterns pretty much. They don't check your work history. I am only 21 though and I think most of the people who do the program are older but I'm not positive. 3. I think their employer network is obviously stronger in the locations they are in but they say they do have some employers in cities other then the ones they are located in. They give you an intro video when you join and they tell you that they canthink guarantee you a job but they have people who will always be working with you too find jobs. They also want you to be actively seeking on your own too. My plan at the moment is too find a job where I am located and work there for 6-12 months then move out west. 4. Right now I've just been doing the pre-work which is really easy for me because I have some experience with programming. I'm almost done with it already and it's not due for like a month or 2 lol but the syllabus is 1. Git- it's frustrating at first if you've never used it but once you learn the commands it's pretty easy. You learn how to get files on bit bucket. This was the hardest for me because I don't have any experience in git but I finished the section in about 2/3 days. 2. HTML-I know html already so I breezed through this. 3- Tools- pretty much just how computers work. You learn the command line, parts of a PC and other simple stuff . I thought they would have css and Javascript but they don't at the moment. I'm not sure if it becomes available later or not. Also you will be using Linux for the java cohort. I actually just found launchschool today that only cost 200 month to learn ruby and there is a possibility that I might do that because I really don't have 10k but if you have the $$ I would definitely go for it. To prep I would just start learning as much java as you can. 
&gt; I have a freaking masters degree In what?
&gt; I understand the concept, but I've never had a need for it. Under what sort of circumstances has anyone had the need for such a construct? Abstract methods simple force subclasses to implement them. If there is no use for forcing this but you do have state shared between implementing classes you'd end up with an abstract class with no abstract method. If you have Student and Teacher classes for example both could extend a Person class that has stuff like DoB and first/last name. If you can't have persons that aren't either a student or teacher it makes sense to have that person class abstract. 
You don't need books, just try to convert an existing project to Java and you'll find out a lot of interesting stuff. Java has no async-await, but it finally has lambdas, so you can do LINQ-like stuff, which is great. Also I found that with Java I rarely use events, but with C# I used them all the time. That may have something to do with the kind of project, but I'm not sure...
[removed]
Thanks for the detailed reply. I don't have 10k (I don't live in Akron so for me I'd need more like 15k). So I'm self-studying at the moment and saving money. I feel like I would learn better in a structured environment. Plus when I look up Java developer jobs, every one of them wants at least a few years experience. It's disheartening and I think I will have a better chance if I knew people in the industry. Can I send you a PM in a few months to see how the program is going for you? I'm assuming you'll be very busy so answer when/if you can.
I've heard from some people that they view these certificates as a bad thing and are actually less likely to hire someone with them because they make it look like you have little actual experience and spend your time learning useless things instead. 
Yeah I definitely think I would do better in a classroom setting then on my own but I just really can't afford it so I'm not sure if I'll be going through with it. Honestly if I weren't able to get a job after I'd kinda be fucked because my loan is about 550/month because my credit jus to got raped but yeah you can message me in a couple months forsure bro.
May I ask why you are switching ? 
After 5years of c#, I have made this transition 7 months ago. Hardest thing for me, was getting used to the new code style. Lowercase method names look awkward at first, eventually you'll get used. Checkstyle can help you catch silly mistakes. Apart from that, just keep the javadoc page open in a browser tab alongside your IDE and keep searching StackOverflow for things like: "Equivalent of X in java".
If you want to switch primarily to the JVM and not to the Java language itself, I would recommend [Kotlin](https://kotlinlang.org/). It's a much nicer and more productive language. And the transition from C# should be a bit smoother compared to Java.
10k is a large amount, most people don't have it lying around. But if it leads to a stable job (which I'm not sure it does), it's a better investment than a college degree for those who don't have the money or time for the traditional route. Good luck with the program if you do decide to go. I'll check up on you to see how things went. 
Effective Java.
Go on Amazon and buy a later edition of the book "Java: How to Program" by the Deitels. That is the standard textbook for Java and if you read it and--most importantly--do the problems at the end of every chapter, do every single one, you will emerge as a great Java programmer in no time. The newest edition of that book costs $110 but if you simply go back one or two editions, you can get nearly the same thing for pennies.
Bad advice. This leads to developers with Swiss Cheese knowledge and they make all kinds of newbie mistakes. Read a textbook on Java and you will be on your way to being a professional-class Java engineer.
The Upper-Case initial capital of C# always looked strange to me, frankly. 
Spring Boot in Action is what I'm reading right now. The language itself is of course easy to pick up after C#, but to be useful you need to know the ecosystem - frameworks, libraries, servers, tools. Spring is probably the most used java framework and spring boot makes it easy to transition into it by having a lot of conventions and less xml configurations. Maven and Gradle are the standard java package managers/ build tools. IntelliJ Idea is a modern and easy to use IDE. Android Studio which you use to code for Android is based on it as well. 
Ideone shows you the contents of stderr, what else were you looking for? Exception in thread "main" java.lang.NullPointerException at Ideone.main(Main.java:13) http://i.imgur.com/O3ge5rg.png 
its almost like there are two conventions, and whichever you use is the norm.
I would think this opinion is held by a small minority.
Probably depends on how good their general understanding of programming languages is. Can you give some examples of common pitfalls that someone might encounter?
*Core Java for the Impatient,* by Cay S. Horstmann, and *Effective Java* by Joshua Block. The latest O'Reilly cookbook gets an honorable mention as a supplement. If you need a book on some particular aspect, see if Elliot Rusty Harold has written one on the subject. You cannot go wrong with him. 
Should block remain if you kill a programmer?
I'm not sure how new to programming you are, but when I was learning java (my first programming language) I used the "Sams Teach Yourself" series. It's intended to introduce beginners, so the first couple of chapters explain data types, classes, methods, etc... It's an easy read with sample activities at the end of each chapter that I found to be very useful. Hope this helps!
I think they just did it that way because the guy that designed Delphi (Pascal) was in charge of designing C# - and so they could prove it definitely wasn't a java clone :)
Get ready for piles of confusing annotations and even more verbose code than C#. source: Started in Java, went to C#, so don't want to go back.
And you don't have the ability to disable it? Android has had that built in for years now. If you insist on removing Chrome completely, the best way is to root your device and look up how to delete apps from `/system/`. That should get you where you want.
[Oh great Oracle...](http://lmgtfy.com/?q=How+to+root+my+Android+phone)
One pitfall being that you only learned how to program in LAUGUAGE_A as if it was LANGUAGE_B. For example, I have a colleague that knows Fortran very well and learned how to program C by porting his code. Unfortunately after five years, his current programs still look like Fortran code written in C and doesn't take advantage of language specifics. One of the bad habits that persist is his use of a large number of parameters in function calls when it would be better to use a struct. 
There's the Microsoft coding convention and the coding convention used by everyone else. ;)
He was attracted by Java the hutt
You get your programs to run without errors but they maybe don't close connections or have multi-threading issues or other problems that don't become apparent until your app gets in production.
exactly... its free, just download the JDK.
Are his Java books are better than his C books? One of his C books was so bad, that it was responsible for the creation of the word "bullschildt" (google it!).
Concurrently even
[removed]
I'm the only one doing this project, and my teacher is too busy to help me right now. He wants me to put the simulator to work no matter what. That-s why I came here for help
Maybe we're both right, but what I notice in the field is that being able to rehash a textbook is less useful than plain programming skills. I encourage everyone to be a full stack programmer, it's fun and challenging and keeps you sharp. If you stay with a certain language/framework for too long, you will have problems when it eventually fades.
Yeah, but I really don't understand why I'm not wishing I had them more often... Maybe the whole paradigm has changed? I don't know...
The [reference documentation](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/) is very detailed and well worth reading on its own.
Better be thread safe, or else you might end up reading Effective Concurrency Java in Java Practice.
Why is it verbose? Hoe does c# do it? 
Awesome! I love reading books! Thank you!
Additionally, there is lots of [sample code on github](https://github.com/spring-projects). 
I agree 100% about the value of a full-stack developer. But that was not the question here: he is starting Java, not rounding out his Java knowledge.
https://www.manning.com/books/spring-in-action-fourth-edition
spring in action is very good. definitely recommend!
Nah because there's folders inside of the folders containing the java files.
That's because you have learned java first. Coming from Clipper, Delphi and then C# background, I learned the other way around. But in the end of the day, that really do not matter that much. I do miss System.Linq, and some other syntatic sugars from C#, but now I'm just used to java and I reckon C# would look strange for me as well.
I did it! Now, is there a way to make sure chrome can not be installed back?
I see your problem In this case, T extends Spaceship. Guessing HeroShip extends Spaceship. And that first code block is forcing you to cast `new HeroShip()` because T is unknown until instantiate the class and define T. But you lost me with: public static void printHeroShip(Spaceship &amp; Player ship) { System.out.println(ship); } Is that a real thing?
No, it's not a real thing. I'm saying I want this. It would be useful to say that you expect an Object with multiple types, but that you don't care what the specific type is.
Did he really post his cell and home # on the Internet?
My undergrad is in Electrical Engineering, my Masters is in Computer Science. It is also an Engineering degree. That means I had to make something every week. Usually I had to make 3 somethings per week.
Please reply with an alternative.
I think it is time to finally fork Java EE.
It's ugly on the north east coast. Tell me a number I should be looking for! Thank you!
Haha! So funny! That is definitely how I feel.
That is awesome information! Thank you! 
How do you interpret the verse from Job then?
Could you ELI5 java EE compared to Java? Is it conceptually similar to the fact that python is an API specification, which has various implementations? 
 You probably shouldn't take a job for less the 50k, Google Java developer salary in your area Otherwise strongly considering relocating, you could be in an under demand area As a new england man, fresh out of college 0 experience, I got 50+ Reccomend cybercoders and execu-search
Also check out coderanch.com. that forum really helped me a lot as well. They have a topic about certification with all the questions and answers. God bless.
Poorly, because he chose a shitty paraphrased translation of the Bible.
This may help: http://stackoverflow.com/questions/106820/what-is-java-ee
Thank you for your input. Very appreciated.
I am vanilla pudding level hacker. :D But my cyber forensic skills are a bit stronger.
Thank you! Great information! 
Only a few places (2/20) cared, most were more interested git hub (7/20) 3/6 technical interviews had whiteboarding, the others were some triva questions, job explainations, and traditional interviews (so basically communication tests)
Thanks! Yeah, I wasn't comparing the languages, just asking whether the SE / EE distinction was analagous to the python language spec vs python language implementations. I generally do use python for scientific computing although it's pretty nice for hacking together web backends as well. I was a software engineer using Java for a year but I feel my understanding of the workings of python is much better when it comes to this sort of question. 
He was always a jerk and I think he hurts whatever brand he's evangelizing. 
I misread this as oracle farewelling the world and became excited
To answer you question: If you want to look at it that way, I guess you can. Published specs are referred to as JSRs (Java Specification Requests). JSR 337 defines the Java SE Platform. JSR 366 defines the Java EE platform. If you want to make your own Java EE JDK for example, you have to implement everything described in JSR 366. If you want to make you own Java SE JDK, you have to implement everything in JSR 337. 
Yeah, don't know. Sometimes you need them, sometimes you don't. Sometimes you can achieve the same without having to implement any event. It could be a matter of style, nevertheless, it's nice to see that you can save boilerplate code at a language level. My personal opinion only, obviously. :)
Don't you mean 'forget'?
Something like AppBlock? https://play.google.com/store/apps/details?id=cz.mobilesoft.appblock&amp;hl=en Maybe if you need more functionality just contact the developer ...
You're right, EE is a set of api specifications related to web development (orm, web framework, dependency injection, transactions etc)
I compared it to NIV before posting :)
I hope he will still be at JavaOne
I plan on doing a co-Ed/internships to put my foot in the door in a few companies. 
Agreed. Reza Rahman and Adam Bien are the loudest Java EE zealots/extreamists that ever existed.
[EventListenerList](https://docs.oracle.com/javase/8/docs/api/javax/swing/event/EventListenerList.html) may help (unfortunately it's in _wrong_ package ;). PS. ignore the obsolete "protected void fireFooXXX" example.
I've found the jobs on those sites pay well under what they're worth, just my 2 cents. Any reason why you don't just go for a wage/contract job?
It's a bit uncommon lately, but back in the days (local) business owners and basically everyone was always listed. You could look up almost everyone in the white pages, and call them up or pay them a visit. There's a few famous anecdotes from the 70-ties where someone would look up the owner of say Intel, rang their door bell and arranged a deal of some kind. Such different world we live in today.
Adam Bien at least isn't a jerk. 
But why? How would it help with anything?
What? No Devoxx?
One of my favourites: [image](http://imgur.com/Gzah6is)
He didn't say that you don't need any of those things. He just said that you don't need a common API for those things. You don't. In theory, you can write your application to the JPA API, and then easily swap out implementations from Hibernate to EclipseLink (or vice-versa). In practice, almost no one ever does this with a mature codebase. There is still a huge migration pain when they do, because you've inevitably used some "extensions" particular to one implementation. If you properly design an application with layers, so that dependencies from one layer don't bleed into the others, then that buys you more future-proofing than any adherence to a "standard" API. If you accept that migration is painful, and take responsibility for isolating your dependencies in order to deal with that, then you become free to use whatever is best-of-breed in each library area. JEE implementations tend to be clunky and suffer from "design-by-committee", and most of those API's lag years behind contemporary industry practice. Community support (e.g. StackOverflow) is also virtually non-existent compared to other options like Spring. So much of the industry is moving toward microservices, or at least more finely-grained modular applications, and JEE doesn't really have a story around that at all. Reading the tea leaves with Oracle here, it looks like it simply never will. I spent over a decade from 2000-2010 working on J(2)EE projects. It was innovative in its day. However, it's pretty much legacy technology now, and feeling like you must adhere to all of its API's simply because they exist is misguided.
It sounds suspiciously vague, I'm really interested in the details though. We use a lot of Angular on top of Java, via REST right now, and I know a lot of other Java shops are doing the same.
So do you resubmit this over and over until the votes turn out to your liking?
Google code conventions for many languages are 80 characters still, but for Java it's 100. For personal projects, I usually use 120, but even as high as 160 wouldn't seem unreasonable.
I guess that's one way to A/B test.
The original title was completely incorrect: "IntelliJ IDEA is the most intelligent, yet user friendly Java IDE. Find out why". I realized that too late. A lot of people use other IDEs and offending them wasn't my goal. Especially considering I wrote my article mostly for them.
Most places I have worked, or projects I have worked on, allow a limit of up to 100 characters. For my personal projects I try to stay under 100 characters, but sometimes will go up to 120 characters (which is my absolute do not exceed mark).
I wonder when eclipse will get some of these features
Someone is butthurt :( 
I use IntelliJ IDEA at work and can confirm that writing code in it is amazing. The amount of helpful features is unreal.
A 80 characters limit is probably a bit too strict, but there should be a limit even if the whole team has 30 " screens. I see files with lines longer than 200 character almost every day and such code is a pain to read. And even on big screens you need to view two or three open files side by side (e. g. when merging), so it would be good to have a line limit around 100 to 120 characters.
Its the first time I heard that anywhere too, but this comes from the project manager of Angular at Google. I think they write Angular 2 in Dart and then transform it to javascript or its the other way around. Anyway they are already maintaining Angular 2 for 2 languages, I think they plan on expanding Angular to more languages other than these two. Angular is very popular in Java shops, probably because some of the patterns sound familiar, like dependency injection.
We had this extremely anal architect who demanded we get a line length limit as he edited only in vim. We settled for 100 characters, with exceptions for package names, imports, urls, and some strings in test code. We got the maven checkstyle plugin so it won't even build with a 101 character line. He got fired months ago, we should take that thing out, or at least roll it out to 120. 100 is doable, not supremely annoying. It's not all bad, i can split the window in the IDE and view two files side by side a lot easier. As for 80 characters, not since school.
I tried it and it just felt like it was slowing me down .
There are two rules that stem from the terminal times: 1) lines must not be longer than 80 characters, because most (if not all) terminals only have 80 character lines 2) Every file must end in a new line, that way if you cat the contents, your prompt will appear on a new line by itself rather than on the same line as the last line of code. Are they still relevant these days? I dunno, I have my suspicions that they're not. Especially with what you said - if I'm using a 4k monitor I don't want to suffer. Although having a max chars per line limit is nice because then you can easily open multiple files in an ide
I've set wrapping at 120 chars in all my coworkers' IDEs (I'm the lead dev, so this is accepted ;-)), but I'm not anal about it.
Liking IntelliJ doesn't mean the constant marketing post aren't annoying. Check out the user's posting history &amp; comments. It's one of the marketing people of IntelliJ.
Try to use G1 gc with String optimization. Helps a lot when I have more than one instance open. 
When they start selling their product 500 dollar/year, damn even Adobe didn't charge that amount of money on their most prestigious products.
can you explain that a bit more? or point me to a useful url? EDIT: In my Info.plist file on OSX for IntelliJ, I modified VMOptions to read &lt;string&gt;-Dfile.encoding=UTF-8 -XX:+UseStringDeduplication -XX:+UseConcMarkSweepGC -XX:SoftRefLRUPolicyMSPerMB=50 -ea -Dsun.io.useCanonCaches=false -Djava.net.preferIPv4Stack=true -XX The -XX:+G1GC didn't work - app wouldn't load up at all. Trying with string dedupe to see if this helps. The slowdown /u/decisivevictory pointed out is something I hit sometimes in IntelliJ (15), but far less so in PHPStorm. 
That $500 price tag is the price for commercial organizations. They also offer a personal subscription for all of their products for $250 per year. What I am not clear on is what the personal subscription allows you to do. If I get a personal subscription but I want to sell an application I develop with their tools am I breaking a license agreement? Do I need a commercial license in that case?
In the world where we have large, wide screens with high pixel density, no one at my company follows this. It's general consensus that if it looks too long, as in it wont fit on a 13" screen in one line, make it a few lines. My guess would be somewhere between 120-140 characters.
He is most definitely the IntelliJ marketing manager: *&lt;twitter link removed&gt;* Edit: removed twitter link, as mods have handled the issue.
As a individual developer you don't need a commercial license. You can use your personal license without any restrictions. Commercial license is needed when you are a company want to allocate licenses among your developers.
The advantage of sticking to the print margin in modern times: - I can have several open terminals and introspect code easily with `vi` - Even on a 24 inch monitor, running a diff between two (or more) versions is a pain if people don't stick to the print margin - I can look at code on GitHub without scrolling down pages to find the horizontal scroll bar - I can even play minesweeper in parallel to writing code *on the same screen*! - I can copy paste code into my blog without reformatting - I can copy paste code into Stack Overflow without reformatting - I can send code per E-Mail without Outlook breaking things terribly - I can even copy paste code into MS Word for those customers that appreciate some additional documentation (yeah, I know) - Heck, for the last stand up meeting, I could actually *print* the code, thanks to obedience to the *print* margin - I can *EVEN* copy paste code into Powerpoint for my awesome presentations at conferences Oh, and: - It forces me to structure code in a neater way But yeah, every now and then, 81 characters are OK as well. We're not the print margin police, here.
Guys, are you kidding? Yes, I'm working with JetBrains. I wrote an article about what we are doing. I shared it. People like it. You don't. Can you please explain your point?
Well, for one, reddit is not a marketing platform. Your submissions are already borderline spam. The reddit rules allow **one** advertisement post in **ten** other posts and you are far from that quota. You cannot mostly post advertisements for whatever company you are working for and not have participation or other posts. This is the reason people are complaining; it's not about the product; it's about your *conduct* in reddit.
OK, you're right. I didn't know about this rule. &gt;You should submit from a variety of sources (a general rule of thumb is that 10% or less of your posting and conversation should link to your own content), talk to people in the comments (and not just on your own links), and generally be a good member of the community. Good to know. I will consider this when next time posting anything here.
Please do so, otherwise I will be forced to report you as a spammer which would lead to a reddit-wide ban. Your current statistics would get you an instant-ban, BTW.
I guess it's mostly for server-side rendering capability in order to improve page load, page performance on mobile, and SEO stuff. I believe this might be related to the angular universal project, the current possible implementation is to render the whole angular in Nashorn, with all of the data being passed in from the corresponding Java object. In summary, you're back to JSP era where the server return fully usable HTML document, event without any javascript enabled. 
A lot of people don't know how to freelance or appreciate the benefits it can provide. In my field, freelancing is the norm and I quite enjoy it, even though I work for a company at the moment to take advantage of some short-term benefits. There is value to being your own boss, working when you want to work, not working when you don't want to work etc. This kind of freedom is worth a lot to me personally. I have no clue of software development/IT freelancing works similarly, but if it can't afford me a similar type of freedom, then I'll prolly stay where I am. There isn't much point in making a ton of money and not having any time to enjoy it. To me anyway. 
I try to keep the line length under 120 chars and the length of the non-whitespace chars under 80 chars. Even the OpenJDK has relaxed the line limits. I haven't seen a patch rejected because of line length in a long while.
everyone bitches at eclipse but I'm really happy with it. It works. No it's not slow. The auto-completion may not be as smart, but it's not that bad. You can very quickly navigate around your code if you know how to. It has refactoring capabilities too. I think most people that complain about just don't know how to use it, then someone that knows IntelliJ shows them around and they're like its fantastic! If some one had shown them how to use Eclipse... it wouldn't be half as impressive...
same as most; 80 is too small but having a limit is a good idea. I usually do 120. It helps too when comparing two versions side by side and that type of thing.
In most EU countries the invoice must be with VAT numbers (your's and seller's) to be eligible for tax deduction. The payment method means nothing.
Eeh. What is exactly your level of experience with Java? Maven and Gradle are actually very good tools for compiling your Java projects. Gradle can actually generate the bat file for you (called gradlew.bat) that does exactly what you need and then some more - it can download all extra dependencies, run tests and package up the compiled Java classes into an executable application package. 
Personally I believe that well designed code will lay flat, so I do my best to keep line width under control. It's usually not a problem unless you have deeply embedded logic or inner classes which can Usually be cleaned up.
80 is too small. That line limit was imposed because back when Java first hit the market some editors would do a hard truncate at 80 characters and it would make the code almost impossible to read (is this a real new line or is it the editor doing it?). However such editors aren't common anymore and screen sizes have increase substantially again. Personally I think a length of around 160 is good. We have 200 on the team I'm currently on and I think that is a bit too long. 
Not sure why someone is downvoting all these, but I will say: why have a limit at all if lines are (possibly) reaching _200 characters_. That's crazy. XD
I had also the idea that server side rendering was mostly a SEO concern, but it also enables other things. Because the compilation of the template is done server side, all the code that does that does not need to be sent to the browser, which is an advantage - it makes the page more lightweight. The code can be rendered on the server, but then the idea is that once the page is rendered then angular takes over on the frontend as a SPA after initial load, thats what the angular universal project does, its integrated with the router. The router on the backend node server will trigger the rendering of the right initial page based on the url, serve the html and then on the frontend the angular router takes over and handles everything as a single page app, so no more full pages reloads on front/back browser button, until the user clicks refresh or if he clicks in a link someone sent him.
Until recently I did abide by the 80 col limit, but have relaxed it to 100 non-comment chars per line for Java and C++. In C I stick with 80 non-comment chars per line. In my experience, wide lines of text (whether prose or source code) are harder to work with than reasonably short ones, both reading code, and interacting with it in other ways, such as source control &amp; diffs. Obviously there's a lower bound, where over-wrapping obfuscates the code, but 80-100 chars seems to be the sweet spot, both for people and tools. It does take some experience to develop a sense of taste as to how to wrap longer statements and expressions, of course.
Two files, or parts of the same file, side-by-side.
250 characters ftw! That's not reasonable anymore with the prevalence of high resolution widescreen monitors. Especially now that 16:9 has become more common than 16:10.
If you insist, use `vim`, you hipster
Wow - til. Thanks.
I follow this except that I limit it at 79 characters (since some editors such might snip off column 80 in the terminal for a scrollbar). There is a strict requirement that every character can be typed on a standard US keyboard (so files contain only 7-bit ASCII). It also makes the code much easier to print out. With a tab size of 4, there are no readability problems. Looking at my code in a 80x24 terminal looks well formatted and very neat. It really helps out when you have to use a 3" screen on a PDA to edit code, especially when the font is 4x8 pixels. I should note that my class names and function names are still concise and I do not have stuff such as `AbstractFactoryConsumerFactoryBuilderProviderFactoryBuilderConsumerFactory`. The strict limit helps to prevent cases such as this. 
I, personally, think everything over 120 is too much, even with 16:9 monitors, because I like to have git annotations and structure pane opened.
nvim.
Why is 80 still the "print margin"? Why not 100? If less is more, why not 70?
[removed]
I still do, but it's more out of habit than any real reason. The only real reason I still have I suppose is ease of being able to put more code side-by-side on a wide monitor. Oh, and it does help look at code on mobile devices a bit. Neither of these are what I'd consider real solid reasons at this point though. As a result, I've fairly recently started going to 120 in my own personal projects and I may update the static analysis scripts at work to that as well and update the style guide to match. That will probably happen at some point. 
Gotcha. Two separate windows/panes/whatever
I still do a lot of coding in a command-line terminal, so I abide by the 80 character limit when I'm on the command line. When I'm actually using Eclipse, I let it stretch out a bit, but I never full-screen the editor (i.e. I leave the project navbar and outline views available), so I still don't go beyond 150 or so. As a former coworker of mine once pointed out, there's a reason that newspapers and magazines print in relatively narrow columns - it's just easier to read when you don't have to move your eyes quite so far to go from one end of the line to the next.
finally :) why exactly would you have methods with more than 4 params?
What is a git annotation
Why don't you start your own corporation? Businesses are more likely to trust you, and if you start making enough money you can hire people and expand. After all, you'll get to do more of what you love. Look in to your state's (I'm assuming you're from the US sorry) procedure on creating an LLC.
It's git blame in IDEA. It shows you commit sha and name of commiter for every line in editor. I like to have it visible, as I can click to see commit msg, and commit. It's also color newer commits with brighter color, which is nice.
Can't see the pint f having it open all the time, but each to their own.
*looks up* Hell no.
I find long lines much easier to read logically as distinct units rather than forcing my mind to play compiler and editor, putting multiple lines together just so I can think, OK now I know what that logical line does.
100-120 is good, depends on where I'm working an how they do it there. For my own code, I love longer lines.
I stick to the convention but mostly because I am kind of lazy and I really dislike scrolling right when a line of code gets too long. Edit: Typo
I tend to go with 120 characters.
I reaaaaally hope this is true, can't wait to ditch javascript/typescript and go back to pure java programming.
Because just pick a number and get to work. Personally I find 80 too low for java where the convention is to have very long variable names, but I love 80 for python.
&gt; you're left with a lot of white space Good. Whitespace is the only code without bugs. &gt; You have to scroll vertically Not if you flip your screen 90 degrees &gt; You often have to break lines in unnatural places, hampering readability Stop using Spring with all their funky class names. &gt; Less code fit on the screen, reducing overview There was this invention called subroutines. Use it.
I've heard good things about these two: - http://www.amazon.com/Java-Program-Early-Objects-10th/dp/0133807800/ - http://www.amazon.com/Head-First-Java-Kathy-Sierra/dp/0596009208/ My first Java book was: - http://www.amazon.com/Java-Programming-Language-4th/dp/0321349806/ Although I enjoyed it a lot it's extremely weak on exercises (besides teaching java 1.5 (iirc)). The java tutorials are quite good, but lack on the exercises area, which is sort of crucial to learning how to program. - https://docs.oracle.com/javase/tutorial/ It's good too keep those tutorials in mind though because they're great as a first read on a particular piece of the java language and/or library. I think the best mix of learning java and learning how to program among these books is in the one by Paul and Harvey Deitel. Another good one on Java is the "Core Java" two volumes pack: - http://www.amazon.com/Core-Java-I--Fundamentals-10th/dp/0134177304/ - http://www.amazon.com/Core-Java-II--Advanced-Features-10th/dp/0134177290/ Although they're also weak on exercises, I remember the second volume being filled with examples. By the way, don't get discouraged by the sizes of those books. They're big not because they're difficult, but because there are lots of things to talk about. Generally speaking, all these books are mostly easy.
I don't know what you mean.
Agreed.
This also makes debugging easier.
&gt; It's far more readable and every programmer on my team has at least a 24" monitor. And you waste that screen real estate by maximizing your _text editor_? Humans can read narrow columns of text far better than super wide ones.
You can start with one of the good free resources: * **University of Helsinki MOOC** [**Object Oriented Programming with Java**](http://mooc.fi/english.html) - text based with exercises that need be completed and submitted before being able to proceed. (Uses Netbeans as IDE) * **Java for Complete Beginners** by John Purcell - video based (Uses Eclipse as IDE) - the three links below lead to the same course hosted on different servers. I would use the Udemy link because it has an active community where you can ask questions and get answers. * [CaveOfProgramming link](http://courses.caveofprogramming.com/course/java-for-complete-beginners/) - John Purcell's site * [Udemy Link](https://www.udemy.com/java-tutorial) * [YouTube Series](https://www.youtube.com/playlist?list=PL9DF6E4B45C36D411) * **Derek Banas'** [**Java Youtube playlist**](https://www.youtube.com/playlist?list=PLE7E8B7F4856C9B19) with the accompanying site [Newthinktank](http://newthinktank.com)
Wow. Is it spring break already?
Our line length limit is 999 characters. Sometimes I feel like people think it's a target.
Indeed, and people who object to it, I invite them to fire me. And they never call me on it.
&gt; I don't see any point in imposing an out-dated concept like an 80 character width on coders. If you produce tons of write-only code (prototypes maybe?), then yeah, it wouldn't make much sense to restrict line length. However, many long-running projects that see regular fixes/updates benefit from putting effort into readability. Companies hire new people, and those new people have read a lot of existing code. Having a good coding standard impacts those processes. If you have some time, [check this out](https://vimeo.com/97329157). It brings up a lot of good points. Be careful throwing around the word "outdated". Just because something is old doesn't mean it automatically lost relevance. TCP is archaic, but it powers almost everything we do online.
Yeah, I don't think the number 80 is necessarily sacred. I think a larger number is fine. I just don't buy into this idea that "bigger displays == unrestricted line length". I love being able to see multiple files open at once and still never need to scroll horizontally.
Hell, Nano in the terminal has a way of handling lines longer than 80 characters. You know what I hate about having to end lines at 80 characters manually? If you want to make edits later your lines are very inconsistent lengths unless you do the tedious work of fixing them.
I go with 100 characters as the limit, and that let's me open two editors side by side in eclipse without the lines getting cut off. I also use 2 space indentation.
No. Wrapping is your editor's job, not mine.
Ah the annual java is dead.
I'm pretty decent. The person I'm working for is slow.
Using 120. Which is what fits in most screens. 80 leaves a lot of unused space.
Maybe its my understanding of Java EE, but the servlet packages, websocket, JPA, JTA, JMS are all part of Java EE. So what is exactly dead about it. Maybe people don't use JSP and JSTL as much anymore but its still handy and fast. 
He's not claiming Java is dead but rather JavaEE. On that front he's right. JavaEE development has slowed and focus has shifted away from monoliths to microservices. The days of a large app running in JBoss or Glassfish have faded.
Nope.. JBoss EAP does microservices. http://wildfly-swarm.io/
Please be joking.
JEE is the new COBOL? and will never die for better or worse. I can't wait for the Ruby is dead articles.... or is it already.
who the fuck is that guy anyway ?
I would start with some online tutorials and buy "Effective Java" from Joshua Bloch: https://books.google.de/books?id=ka2VUBqHiWkC&amp;redir_esc=y In my opinion that's the best general Java book ever written. It might be a bad choice to start programming with this book, but together witch some online tutorials it will give you a better understanding of what you are doing and how good Java-code looks like. The oracle tutorials are always a reliable source of information, but they might be a little too fast forward if you have no experience in any other programming language: https://docs.oracle.com/javase/tutorial/ 
If you're comfortable with OSGi, you might want to look at p2. [Here's a presentation](https://www.eclipsecon.org/na2014/session/building-full-product-installer-using-p2) by Mentor Graphics about how they build an installer with p2, and [here](https://github.com/MentorEmbedded/p2-installer) is their GitHub repository.
everything old is new again.
Java is dead! Long Live Turbo Pascal!
I limit my lines to 120 because I work on an OpenVMS system and the terminal screen has a 120 limit.
Spring boot is still Spring, but a lot easier to use. No more XML configs (kinda), good new Java DSL for most old Spring products like spring integration, MVC, jpa, security. All wrapped up with top notch dependency management care of maven and gradle boms. The main difference between something like spring and something like Java EE is that Pivotal is betting hard that spring will be the cornerstone of their cloud foundry system. They invest highly; and the Java ecosystem is rewarded. Especially if you like TDD.
I can show you some JSP pages that will make you want to kill yourself instantly 
You can try this one. https://github.com/dimaki/refuel
Got a better way to describe the position?
This really hurts the java ecosystem. Its like one person says "DON'T USE JAVAEE, USE SPRING".......and the next says "DON'T USE SPRING, USE JAVA EE" and it goes on and on. Personally I put it down to the Spring mindset...who wrap every single API even if it doesn't need to be wrapped. Thats how they fell out with Hibernate after all. With Spring boot, they have effectively wrapped the Tomcat API. So now you just use Spring......no use for anything else. GOOD! Spring spring spring spring..... The worst thing about it is that it damages the java ecosystem - there is a reason these smaller lightweight frameworks are popping up everywhere, because people are fed up with 50mb installs for a hello world app... and all of them are competing to attain critical mass.... which they wont. The only thing left is JavaEE. The standard which is far more lightweight and easy to get going. So DONT USE it. because..... well just use Spring and be happy.
Poor Ruby :(
s/"Evangelist"/"Advocate" 
https://stackoverflow.com/ is a much better place to ask
Who's Cameron Purdy? Why do we have an article about some guy quitting his job?
Technical Sales
Cameron Purdy was the CEO of Cohorence, one of the first datagrids available, which was bought by Oracle, where Purdy was then made a (S)VP of Development. He was a very well known name in the open source Java community 10 years ago. It's hard to describe Purdy if you've never met him in person: he's an incredibly talented engineer, very business-savvy, witty, and humble. Frankly, I've always found it very strange that a guy like him ended up working at Oracle for such a long time. I can definitely believe that 'Cameron leaving', would be the canary in the coal mine for quite a few people. I've only met him twice in 10 years, and in both cases, he left a lasting impression on me, so I can only imagine what it would be like to work with him on a daily basis. Here's a few of his talks: [The Future Of Java](https://www.youtube.com/watch?v=Cj7odzEYNLI) &amp; @[Parleys](https://www.parleys.com/author/cameron-purdy)
Pivotal employee. 
Ceylon isn't really setting the dev community on fire. Scala/Play have been stagnant for a while. Lightbend is now diversifying and not just focusing on Scala/Play any more. 
[removed]
Marketing Engineer Traveling Salesman Conference-Speaker-and-Blog-Writer Overhead Dead Weight etc 
Yeah, how dare he ask for help here! What an idiot!
&gt; I live on the East Coast of the US. not many All-tech companies here. That is just bullshit. There are many tech companies in the North East that are not in NYC/Boston.
How about a pinned and locked self post by a moderator that says that if you need help, go to /r/javahelp?
Apologies for fucking up, didn't mean to come across as making excuses, I've bookmarked the help sub now, I'll remember to read the rules next time rather than assume something is alright. I'm pretty Jr with java programming yet so thought I'd subscribe to the sub to help learn and expand.
Nobody mentioned asking for help, only about the lame excuse not knowing about the help sub with the countless hints on the sub and submission page.
&gt; HR people, and management that don't know the difference between a database and an excel spreadsheet. Based on this comment alone I figure you're arrogant and don't believe that the people whose job it is to hire for their company are smart enough to do so, or you are applying to companies who do not put value into the people they hire. In either case, you have a problem to figure out. 
What a dumbass is rohit kelapure. Of course the beast that is Java EE is a laggard--you wouldn't want it any other way. As has happened time and time again, great ideas originate in outliers, the Hibernates, the Springs, etc. After these ideas have been given a road test in the real world--if they are worth it, they become part of the canon. Case in point: JPA. Because of the success of Hibernate and Spring, fixing the awful standards that were EJB, the mainline Java caught on and brought us the gorgeous JPA. Notice that IBatis is on the trash heap? Not a part of the canon? That's another example of the process working right. Would you have these ideas come down from the top--as they did with EJB--and force all of us to live with it? No, we want to test them and have the cream of the crop added to the Java Canon that is JEE. You, Rohit, are a dipshit and a moron. Full stop. 
It's funny that this has gotten so much positive attention. This time last year everyone in this sub was hating on Spring and loving JavaEE
My point is that you use Reddit as an advertising platform to promote your blog posts, hosted on Github or elsewhere. domain submitted from|count|% :-|-:|-: [openshift.com](/search?q=%28and+site%3A%27openshift.com%27+author%3A%27shekhargulati%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|41|32% [github.com](/search?q=%28and+site%3A%27github.com%27+author%3A%27shekhargulati%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|31|24% [shekhargulati.com](/search?q=%28and+site%3A%27shekhargulati.com%27+author%3A%27shekhargulati%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|20|16% [medium.com](/search?q=%28and+site%3A%27medium.com%27+author%3A%27shekhargulati%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|11|9% [whyjava.wordpress.com](/search?q=%28and+site%3A%27whyjava.wordpress.com%27+author%3A%27shekhargulati%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|11|9% [blog.xebia.in](/search?q=%28and+site%3A%27blog.xebia.in%27+author%3A%27shekhargulati%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|8|6% [feelings.io](/search?q=%28and+site%3A%27feelings.io%27+author%3A%27shekhargulati%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|1% [java2scala.in](/search?q=%28and+site%3A%27java2scala.in%27+author%3A%27shekhargulati%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|1% [tryjava8.com](/search?q=%28and+site%3A%27tryjava8.com%27+author%3A%27shekhargulati%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|1% [tryjava8-t20.rhcloud.com](/search?q=%28and+site%3A%27tryjava8-t20.rhcloud.com%27+author%3A%27shekhargulati%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|1% [wp.me](/search?q=%28and+site%3A%27wp.me%27+author%3A%27shekhargulati%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;feature=legacy_search)|1|1% subreddit submitted to|count|% :-|-:|-: [programming](/r/programming/search?q=author%3A%27shekhargulati%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|36|28% [java](/r/java/search?q=author%3A%27shekhargulati%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|25|20% [javascript](/r/javascript/search?q=author%3A%27shekhargulati%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|20|16% [webdev](/r/webdev/search?q=author%3A%27shekhargulati%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|13|10% [technology](/r/technology/search?q=author%3A%27shekhargulati%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|8|6% [scala](/r/scala/search?q=author%3A%27shekhargulati%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|5|4% [Python](/r/Python/search?q=author%3A%27shekhargulati%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|4|3% [travel](/r/travel/search?q=author%3A%27shekhargulati%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|3|2% [writing](/r/writing/search?q=author%3A%27shekhargulati%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|3|2% [books](/r/books/search?q=author%3A%27shekhargulati%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|2|2% [linux](/r/linux/search?q=author%3A%27shekhargulati%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|1% [productivity](/r/productivity/search?q=author%3A%27shekhargulati%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|1% [GetMotivated](/r/GetMotivated/search?q=author%3A%27shekhargulati%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|1% [love](/r/love/search?q=author%3A%27shekhargulati%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|1% [learnjava](/r/learnjava/search?q=author%3A%27shekhargulati%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|1% [india](/r/india/search?q=author%3A%27shekhargulati%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|1% [Frontend](/r/Frontend/search?q=author%3A%27shekhargulati%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|1% [MachineLearning](/r/MachineLearning/search?q=author%3A%27shekhargulati%27&amp;restrict_sr=on&amp;sort=new&amp;feature=legacy_search)|1|1% ***Most*** if not all of the links you submit are of your own posts, the openshift links, the github ones, those on medium (except one) and "whyjava" now redirects to shekhargulati.com. Please read [Reddit's rules about self-promotion](https://www.reddit.com/wiki/selfpromotion) and its [definition of spam](https://reddit.zendesk.com/hc/en-us/articles/204536499). You're not on Reddit to participate in the community, all you do is submit links to stuff written by you. If I counted correctly, that's at least 113 out of 127 submissions. And just 19 comments in over five years on this site.
I watched 40 minutes of that talk just now and he didn't actually say anything. He was just joking around and talking about random stuff. Is the point happening after the 40th minute?
I've never built a jlnp before, but I've used them and it isn't the experience I want my users to have. I want a native looking application that can prompt the user to update. I also don't want to have to deal with having the user setup the security to allow the application to talk to the correct URL. But my concerns may be misplaced. I'll look into this.
Hype Man
 Spring is not a fad.
They mean more than you think. Although few like to admit it, the majority of the projects are chosen based on whatever the developer responsible for that choice has read about lately. I.e. what he or she thinks is "hot", or depending on the personality of the dev "stable/mature". But forgetting the evangelist role for a moment, it's the signal this sends out that we should care about. Reza is not the first one (see my links below). If Oracle would be dropping Java EE and Java SE altogether then that's something a lot of people will care about.
Reza wrote a great book, great articles and developed the EJB container of Resin. He also contributed a lot of good views to the ongoing pubic Java EE discussion and filed a number of really good issues. Maybe in general, but Reza specifically is absolutely not a person who doesn't know shit.
The OP is asking for help. Although it may be frustrating that he did not read the sidebar, the guy was looking for guidance and a mod took the opportunity to make fun of him. For fuck sake, this sub doesn't have a lot of activity anyway and here we are making a poster feel unwelcome. Do you understand now what's wrong with this?
But that is impractical if you start using third party APIs.
Who the hell downvotes this?
He just seems like the world's greatest rambler to me.
Wow. what a prick.
Well, maybe I'll be the first. I'll report back to r/java in the coming months of how it all goes.
people complained that the everything-but-the-kitchen-sink framework was too heavyweight, so they went and **added** com.jboss.lightweight.MicroServiceFactoryImpl ... that should fix everything, right ? 
you're conflating ease-of-use with lightweight. they're unrelated. spring is without a doubt a heavyweight framework 
heaviest I know.
[good, good](http://i.imgur.com/gHnXw57.png)
Guess he deleted the article. [Google still has it in their cache, for who wants to read it](http://webcache.googleusercontent.com/search?q=cache:qPmokhIJbRMJ:cloud.rohitkelapure.com/2016/03/java-ee-is-dead-stop-using-it.html).
Did they break the API again? /s
Lol. What in the world are you talking about?! &gt; There are java hooks into some GPU softwares, but we shouldnt have to include C++ libraries just to do common matrix ops. Huh?! &gt; Java's NIO may be a good place to start What?! How is that related to matrix operations and C++ libraries? &gt; Alternatively, we could define a new standard for which bits mean which matrix actions, and try to get many languages to include it in their spec. Seriously what? Bits, matrix actions, language specs?! &gt; I dont know about you, but I've had enough of different frameworks choosing different arbitrary constants and symbols to do the same things, and having to relearn it again with each new framework. I'm tired of never knowing if a C++ program will work on end user computers of various types. C++ is the assembly language of the future, something that only compilers should have to deal with. Ok what? You obviously have experienced something quite traumatic, I just can't parse enough of your post to determine what it is. I've always found matrix math(and general linear algebra) to be one of the most straightforward things to find a library for and then actually do in any language I have used. Be it lua, python, fortran, c++ or java...
A much more reasonable target than GPUs would be AVX units, there is already [some support](http://bugs.java.com/view_bug.do?bug_id=6340864) for auto-vectorization in the OpenJDK.
this was strictly enforced in my gov job, but in my startup job we go WELL over 80, to the point where its ridiculous
But then you can't fit as much code vertically on the screen.
This is a complete non-issue for me. For one thing, scrolling isn't hard; I have a nifty little wheel on my mouse. Secondly, I see little to no benefit being able to see a large chunk of code like that all at once. I had several coworkers at a previous job who rotated their monitors to be vertical. That let them have an obscene number of lines visible on the screen at once, but I could never get into it. Again, I derive way more value from being able to compare two files side by side over seeing a ton of one file.
JAXRS specifically is alive and well.
No. JVM should be kept as simple as possible. What you're proposing is complex, not many people need it and most importantly it can easily be achieved with a native library.
Most of Java IDEs already have this functionality built-in, what does this bring to the table?
So you are saying I should not use Reddit to share my content(even if that is good content) because I don't post comments on it. I post my blogs because I think that they will help someone. Commenting is just one way to contribute. If people will not write content what you will comment on. If you really want to analyse, please analyse comments or votes posted on my submissions and tell me if people like my blogs. I will continue posting on Reddit because I don't think I am doing anything wrong. If you have issue please down vote and share your feedback.
I'm saying you're violating the site wide rules as set by the admins.
Stop spamming your projects all over Reddit. You've submitted this very same link to 20 Subreddits now. 
And this, kids, is why machine learning algorithms beat (self-appointed) social media spam prevention police any time.
You can check: http://hc.apache.org/httpcomponents-client-4.5.x/examples.html
We used "Java Foundations" at the university that I study at. It's pretty good and goes through the fundamentals in a fairly simple way.
Good point. [I had to look it up](http://stackoverflow.com/q/3127429/521799), and I'm still not 100% certain.
Looks nice. Why did you chose parsing jstat output over parsing gc logs?
I prefer `jstat` output because you can safely and very easily get it on demand on a running JVM, e.g. on production servers.
The fastest part of most hardware is not usable by Java, so it has to call out to other systems. Are you telling us "not many people" play games (or any kind of simulation)?
The bare minimum which gets the job done. When you MUST call out to another system to use hardware that almost every computer has some variation of, you're doing less than providing minimum access to computers.
This is an interesting idea. Just make sure that your bundled JRE contains the javaws executable. Then make a simple launcher that will launch "javaws http://example.com/myApp.jnlp". However wouldn't solve the problem of updating the JRE itself.
&gt; Not many people write games using Java because it doesnt efficiently compute matrix &gt; most hardware used by Java applications doesn't have a GPU at all! Chips that merge some features of CPU and GPU (like APU) can still run games. Whatever they're doing at the lowest level, JVM should have opcodes for. &gt; The big money is in server-side enterprise applications. AI is about to improve almost every kind of electronic product and software. This is not going to stay in servers.
IBM:s jvm already does that automatically. It moves the calculations to the GPU. No changes needed to you code...
I'll use a smaller neuralnet if I have to. Its valuable to be able to give people one file that works right away without installing (and contains its own source code if rename jar to zip). That makes it possible for a program to spread like a meme really fast.
&gt;If when class A is initialized and it is referencing a class B, the class B will also get initialized. But what will happen if class B is referencing class A as well? This is called recursive class initialization. Will there be a deadlock if this case happens? No, JVM will take care of this situation for you. It's still possible to get a deadlock if one thread initializes A at the same time another thread initializes B. Here's a real example: https://issues.apache.org/jira/browse/LUCENE-5573
Mirror link: [http://stackoverflow.com/questions/tagged/java?sort=votes](http://stackoverflow.com/questions/tagged/java?sort=votes)
Since you will be using the AppServer eventually, you can participate in the APIs and influence the process
Wait did this site really just use the stack overflow api and presented the questions as their own? 
The entire site is just link spam.
Embedded tomcat/jetty/undertow etc is totally fine in production. Personally I prefer dealing with applications which run embedded application servers than those deployed into tomcat etc
The embedded tomcat is not really comparable to an embedded database - they aren't designed to solve the same problem. Embedding Tomcat rather than deploying war to a Tomcat server is really an operational choice. It's still a production grade HTTP server but with a different approach to maintenance and resource management.
[removed]
I agree EJB &lt; 3 was terrible. How can anyone disagree with that? We thank Rod on our bare kneed every knight for telling those guys back then how wrong they were. But don't forget, Spring copied many things from Java EE as well. The XML garbage is a famous example. Java EE had long started the no-XML path while Spring was still trying to convince you to move 70% of your code to XML. And CDI is lightyears ahead of Spring beans, and no, CDI had its inspiration from SEAM and Guice, not from Spring. &gt;"JPA is the same as Hibernate", then I rest my case. Who ever said that? JPA was designed as the next generation, improved if you will, API largely designed by the Hibernate creator himself. That's all. &gt;What is the point of Java EE Having a full stack framework that addresses many aspects that a typical application needs. It's not that different from RoR, Play or .NET. &gt;like the containers, wars or CORBA Uhm, you do realise that Spring is a container too, don't you? It's one of the first things mentioned in the Spring core documentation. And you also realise that wars are used by Spring applications and many other ones as well, don't you? And that's it's just a simple zip archive. And if you don't want to use it, don't use it and package things up as a jar, which ironically is a similar type of zip format anyway. And you also realise that CORBA is not a Java or Java EE invented technology as well, do you? Java EE provided support for it when it was the industry standard for many languages (C++ mostly, but also Pascal, and many other), and now that CORBA usage has completely faded Java EE is about to deprecate it. (it's in practice rarely used anyway) But it's typical for uninformed people to see Java EE as being about EJB, CORBA and at most JPA vs Hibernate, while in practice modern Java EE is mostly about CDI, Bean validation, JAX-RS, Interceptors, JSON and JSF. 
"full stack framework" J2EE is nowhere near that. Just a bunch of technologies cobbled together. "Spring is a container" Ever heard of Spring Boot? Or is that too advanced for you? "JSF" Enough said. 
&gt;J2EE is nowhere near that. Just a bunch of technologies cobbled together. Why talk about J2EE today? Who cares what J2EE was in 2004? What matters is that *today* Java EE is a full stack framework of technologies that work really great together in a consistent way. The core bean model is the CDI managed bean and most every spec has refactored on that. CDI beans by default enable interceptors from the Interceptor spec, which makes Bean Validation possible. Things like @Transactional from JTA and @FlowScoped from JSF all build on that. Then there's Expression Language (nicely copied by Spring), that runs parallel to a lot of EE services. CDI beans can be @Named, which integrates directly with EL names via EL resolvers. Facelets can use these EL expressions to bind to CDI beans. EL is also usable completely standalone and can be used in annotations from other specs. &gt;Ever heard of Spring Boot? Or is that too advanced for you? There too, Spring still has a container. The very thing that manages Spring beans is called the bean container, or the IoC container sometimes. See e.g. http://stackoverflow.com/questions/8708529/what-is-container-in-spring-framework But really understanding the concepts behind the hype is probably beyond your comprehension. &gt;"JSF" &gt;Enough said. Because you don't have any rationale arguments against JSF? You just heard that Spring fans must hate JSF, but you don't really know why you must hate it? Like 1984's GoldStein?
&gt; people are fed up with 50mb installs for a hello world app Developers writing hello world apps are not the target audience for Spring. 
We use it in production, lots of services.
Yes. It's the same tomcat, but in library form. So you are responsible for configuration and other things that the standalone tomcat provides. Also you don't have to use tomcat. You can use jetty or undertow.
Yeah Boot is confusing... And yes it requires you to know about spring frameworks various modules. But once u get the hang of it... It really speeds up development process. People now a days are using JHipster which is like boot on steroids.. It will confuse you even more...
Would a ["circular reference"](https://en.wikipedia.org/wiki/Circular_reference) not be a more correct term than "recursive class initialization"? 
I hope I never see that again.
The situation described inside the comic ?