I am on desktop windows and the survey wanted me to click OK after each of my answers. I went back and did a bunch of them but then it just locked up so thats it for me.
Building your release artefact using Eclipse is a "WUT?" moment for me. 
TIL Dropwizard is a frontend framework.
Almost to look like typed Javascript (no pun intended)
TLDR: dynamic is the enemy of refactor. 
Why do you thing JAX-RS is better? (I'm just curios) I remember that I worked for a company and they were using Spring MVC and JAX-RS Controllers in their project.
Unless you're stuck in .net land where you'll be forced on to Visual Shitio. 
Large companies with teams that need a lot of homogeneous collaboration might want to have one supported IDE. Perhaps the company you're thinking of actually has a reason?
If you start to be this picky, expect to leave at the first thing you do not like or agree with. Other topic ideas along these lines: - Would you refuse a job over the OS they use - Would you refuse a job over the version control software they use - ...
No no no. Like other ppl have said, if you really dislike the IDE then you can try to influence a change after you get hired. 
In a sense Scala is sort of a precursor to see what feature works and which doesn't. Also it's not just functional programming principles.
Bullshitting how so? No one is saying we *can't* upgrade. It quite simply doesn't get prioritized over other projects until something makes it more important, such as when support is running out.
Good observation - unsafe concurrent access, it seems logical now but while coding i would have probably skipped this edge case (concurrency bug)
If the job is appealing otherwise, the only plausible reason to turn the job down would be another job offer that is even better. 
Building your release artefact using ANY IDE is a "WUT?" moment for me. 
For those interested, a standalone plugin (i.e., no electron) has been released and can now be installed directly via IntelliJ and AS: https://www.codota.com/plugins/download IMO, more reliable and easier to use
https://www.codota.com/plugins/download You can get the plugin without electron now
I personally like them both. I think the annotations for JAX-RS are a bit more easier to read, but that said Spring isn't hard to read. Both easily deploy to the main app servers, that said, I think Spring makes wiring up resource controllers a bit easier - I just use one annotation and it's registered. With JAX-RS, or at least the last time I used it, you had to do the same thing as Spring but then you had to make a second call to register it - not a big deal, but just feels clumsy. Either way, you can't really go wrong. Unfortunately, a lot of shops use Spring, so it's a main buzzword they search for on resumes. I like to think of all of them just as tools and always get annoyed in interviews when they try and break down what specifically you've used and what versions with the implication being that learning a few additional things for a different framework would make you unproductive and not worth considering...
It almost certainly fails one of the Joel Tests https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Currently at a job where they have really nailed their development process - I assume they did that in the 90s and haven't really changed that though. It's a really large company. Our build system is completely custom, written in Ruby. Same thing for the 'project management tool', which is pretty much a bunch of Ruby scripts build around an old version of Subversion. When you check out a project you automatically get a setup Eclipse with some really odd formatter and checkstyle settings. They do have an Eclipse plugin for their build system. And the weird thing is that, even though all the building blocks of this system are outdated and there are a lot of stupid design choices and the UI is pretty much garbage and it only works on windows it works.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; all the building blocks of this system are outdated and there are a lot of stupid design choices and the UI is pretty much garbage and it only works on windows Now *that* sounds like a basis for turning down an otherwise decent opportunity.
No it doesnt really make much difference ( i do prefer eclipse). The only exception would be a job with a really old tool set which was supporting some legacy application and that would depend on the system in question.
Probably only to make it easier for the C guys (or anyone else who are used to calling printf) to learn Java.
To add on to this answer: they are exactly the same thing. The "printf" function just forwards its call to the "format" function. [Here](https://github.com/dmlloyd/openjdk/blob/jdk/jdk10/src/java.base/share/classes/java/io/PrintStream.java#L948) is the source code for "PrintStream.printf" ("System.out" is a "PrintStream"): public PrintStream printf(String format, Object ... args) { return format(format, args); } 
Or they maintain an EclipseRPC application...
Interestingly both methods were added in Java 5 and the javadoc for printf says: &gt; An invocation of this method of the form &gt;out.printf(l, format, args) &gt;behaves in exactly the same way as the invocation &gt;out.format(l, format, args) 
Not for me. It's just the a program you use to check out and update projects. I use that once or twice a week because I can just use subversion directly in most cases. The thing I should have turned it down for was the project itself. But I'm working on it. 
üëç I will check it out!
Please, in the future, ask such questions in /r/javahelp as they are *programming related* (as the plenty hints on the page indicate).
Why do you have the fully qualified names? IntelliJ will import them. I have had this template for years and it works just fine (I have it triggered get "getl"): private final static Logger logger = LoggerFactory.getLogger($CLASSNAME$.class);
Not everyone uses lombok. 
Looking forward to getting the dark theme improvements!
I think they should spend more energy on the Eclipse interface instead of the website
Ah, I understood that they block upgrade due to security reasons, my bad.
Visual Studio is an amazing IDE. 
I've been using the M builds and dark mode is nice. Overall its a nice improvement over previous version. Gradle integration is significantly better. 
Really hope they fix all the shit Oxygen broke... Namely the suggestions being broken for any reasonably-large project...using defaults not even adding more. 
It's usable with Resharper. That's the most I'd give it. 
Haha yeah I think this proves Sipkabs point. Its the only reason I can think of why they would ad this.
Personally, yes. What IDE I use shouldn't affect anybody else. Any relevant code style configuration options can be done in any IDE-- or run manually after using vim/nano. Restricting this is a major red flag of micromanagement and I've learned that the second you start letting people micromanage you they won't stop and it will end up being a horrible experience.
Just downloaded and when sending the usual error reports I get "Server workload limit reached". That about sums up Eclipse, yet I can't stop using it.
Thanx guys
Thanx Guys
Have you tried our Lord and savior intellij idea? J/k use whatever you are comfortable with.
Because it works and it's unambiguous. IntelliJ will remove the fully qualified names and add imports. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/8uccbg/programmers_health_and_wellbeing_subreddit/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
heh, yeah I even pay for the full version. I've just never been happy with Intellij's multi monitor support.
I hate upgrading Eclipse Versions, i usually have to use different workspaces for the different versions and having to reconfigure and redownload the plugins suck. This is a major reason im still stuck with Neon (which is huge for me, because i've been on Kepler for way to long.
Yes I would not work iOS, I would refuse a job that required it. Version control is not such a big deal, I won't be using it in the same fashion I will my IDE.
I've been thinking this, I did this in my current job, but what if they resist, or like other people have pointed out, maybe the have tools built around eclipse.
They possibly do, I will be getting more information before making any decisions.
This is a big worry for me, I use other tools to optimise my productivity, autohotkey, cmder to name two. I can probably replicate most of what I do with autohotkey using my pok3r, but I shouldn't have to, should I?
Cool idea imo
Good advice.
Yikes! Tell me you are at least using Java 5!
Amazon AWS uses Java 8 heavily and I do not see any plans for them to upgrade anything anytime soon, so Java 8 will probably be very popular for awhile.
No, but it would be a red flag where they might be super strict to a given set of procedures with no breathing room.
Gosh, just the idea of potentially having a byte array that can be initialized without needing to set each individual member would be a nice thing!
Can you change the color of the scrollbars yet?
Yup, codebase is Java 5.
"A quantum leap for coding", says their webpage. Which, according to webster, is consistent with my experience with Eclipse. https://www.merriam-webster.com/dictionary/quantum Definitions include: * "any of the very small increments [...]" * "any of the small subdivisions [...]" 
Creating one DAO per table is pretty much standard procedure, so that might be a good starting point. There really is a lot going on in that code. The most important thing to start with is that you should be very aware of the fact that you are an intern: your instinct will probably be to apply all the best practices you know to the code and transform that giant pile of garbage into the well structured clean code it deserves to be. The problem is that for one the rest of the team will have to work with your code when you are gone. You might also piss people off, especially the person who wrote the code. Team members that use the code may also be pissed, just because people tend to dislike change. A good indicator for people disliking change is a huge part of the code being a historically grown zoo of bad practices. So to summarize: you mean well, your code may be objectively better, but you might still suffer negative repercussions. I don't want to deter you, but you should keep that in mind. Other than that, - the logging-helper looks over the top complicated - the method names are confusing (storeXToDelete instead of deleteX or XDAO.delete(x)) - all the classes you describe seem way too big (god classes), which is quite interesting because a god class usually does too many distinct things at the same time. Your classes actually only do one thing, but for many different domains - the SQL-query file is a weird design choice. Where is the advantage? Why is it a single file? - I obviously have no idea of your database structure, performance requirements and existing queries, but there are tools that use code generation or reflection so that you don't have to write all the SQL statements yourself. If you want to, you can also automate the creation of objects from DB-entries - if you have a DB-heavy application, you will probably have to touch like half the classes in the project. That's quite the *shotgun surgery*. So try to do that change exactly once - implement once DAO and test it thoroughly. Make sure that it works in the real system, that your coworkers are okay with that change and then apply it to all the other tables - check if you want to use ORM 
When I started at my job everyone used Eclipse and all the tooling and environment was setup for it. Over time people wanted to use Intellij and although there wasn't any kind of "no we use Eclipse here" attitude, they had to put in the effort to make Intellij usable with our tools and workflows. Now probably the majority of developers at the company use Intellij (although most of them do not work on the project that was built around Eclipse anymore).
/r/javahelp 
I'm hesitant to ask for fear that I'll discover something I never knew I was missing... Can you explain what you mean by multi monitor support?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
If they had tooling in place and a lot of stuff properly setup to utilize the IDE I probably wouldn't mind. If it was just some stupid rule to keep things standard for standards sake I'd be a bit concerned.
I didn't realize that "clod" was considered a swearword.
Absolutely. This a a sure sign of wtf 'idness in a organisation.
It has a special gift for popping up windows and menus (even code completion) on the wrong monitor that doesn't even have an intellij window open.
&gt;I still can't understand why it seems in the Java world field injection is preferred to constructor injection It isn't? Pretty much "everyone" agrees that constructor or setter injection is the only sane way to do things (for testing, and for making stuff final). The current Sping documentation doesn't even mention the existance of field injection anymore! It says: &gt; DI exists in two major variants, [Constructor-based dependency injection](https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-constructor-injection) and [Setter-based dependency injection](https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-setter-injection). 
Hey, Kaathan, just a quick heads-up: **existance** is actually spelled **existence**. You can remember it by **ends with -ence**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
I still see field injection, specially in Java EE projects using @Inject in every private field. That's different from the C# world where constructor injection is god. In fact I've never seen anyone using property injection (the equivalent for setter injection).
I wasn't sure if it is the IDE or some side project. Really, why is the version name way bigger than the product name?
So a Photoshop expert could work just fine in Paint? Don't be ridiculous. Tools matter.
Depends on how desperate I am. I would not work in anything but IntelliJ, if I can't then the job is probably shit anyway.
Thinking about going back to Neon. Never had a IDE related problem with it, and I have with oxygen, and I don‚Äôt really think you can top the splash screen for neon which is about the only change I‚Äôve noticed 
And what is the reason behind requiring a certain IDE? In my experience those reasons were obsolete.
In Eclipse I have 1 monitor for code, 1 monitor for what Eclipse calls views (tools like file browser, console, debug tools, other info), and another monitor for browser/terminal. The most important part is dedicating one monitor to only code, since I can't afford a 32" 8k monitor. I can get Intellij to do this but it's painful and takes a lot of window management. Just today I found a bug where a floating mode window moves left when I try and drag it right. I really like the Intellij layout when using a laptop with 1 screen. It's clearly designed with 1 screen in mind.
Thanks
Okay. Well maybe the projects were written by beginners, or under major time constraints, or the code is very old or something. Can't remember it being the preferred way though at any time. Anybody who has to write unit tests for his services will switch to constructor or setter injection naturally.
subscribed immediately
I‚Äôm glad hope you find it helpful :)
&gt; Okay. Well maybe the projects were written by beginners, or under major time constraints, or the code is very old or something. My personal opinion is that the problem is that there are a lot of tutorials out there for Java EE using field injection. &gt;Anybody who has to write unit tests for his services will switch to constructor or setter injection naturally. Mockito lets you mock those kind of dependencies with no issue at all because of the way reflection works in Java. It's different in C# where there's no way you can do that. I believe that's why constructor injection was used from the very beginning.
&gt; if you really dislike the IDE then you can try to influence a change after you get hired Oh god, please just turn down the job if you're going to do this. Please don't screw everyone else over just to keep yourself entertained.
&gt; If you were applying for a new job and the company restricted you to using Eclipse vs InteillJ, would you turn the job down over this? I would tell someone they have to use Eclipse, just to avoid the people who make projects I've worked on an absolute nightmare by trying to insert the flavor-of-the-month into the project. I've used both eclipse and intellij and they're fairly equivalent. I can actually think of more specific bugs with Intellij than Eclipse that I've run into over the years. 
For shills maybe. 
Are programmers different to everyone else? 
there are certainly unique challenges they face in the workplace, than say another profession such as teaching. With such unique challenges I imagine unique solutions would be needed, or maybe I should say a unique \*mixture\* of solutions. 
That's pretty good. I think some of the features of this transform dsl could have been made as a library to regular code to avoid the need for it's own special language. To each his own, I guess. It performs well enough and is readable enough that I wouldn't have strong objections to it, should it be suggested. I would highlight the decrease in resources able to code in it. I would also suggest simply writing convenience methods, if the need to reduce plain code verbosity were a real need. I guess, for me, it comes down to: is it worth depending on a whole new framework and learning a new dsl. For some, it may be worth it.
I was waking out of the gym the other day, and there was a sports doctor doing free injury evaluations. I asked him about my hurting collar bone;. It felt sprained. He said that was really weird and hadn't seen it before. He walked around me in a circle and stopped beside me. " You work in IT don't you?" ________________ His theory is that sitting at a desk all day, at 35y/o, coupled with my great strength has made my pecs overly tight. This means that I regularly sprain my sternum-collarbone connection, due to the bad posture and strong muscles. So, we definitely have different concerns than many others. This is completely disregarding the difference in mental health and social skills.
I just saw this posted on The Daily WTF https://thedailywtf.com/articles/external-sql
Time to row, bro. Hit those bent over rows and seated cable rows. Hit those barbell shrugs. Gotta make that upper back huge to compensate for your overly manly chesticles. 
You can use IntelliJ for a complete IDE, but if you want a lightweight and powerful editor you can try visual studio code
IntelliJ and Eclipse can be good free options - those are what I have used at work. Eclipse tends to be a bit overloaded, it has a ton of features even I have never used, and it eats a lot of memory, but it's a good tool for almost anything you want to do. IntelliJ is more lightweight, but adding plugins to it hasn't been a good experience if you want to do more.
This is purely my opinion, but my vote is for IntelliJ Ultimate Edition. As mentioned by others, there is a free variant of IntelliJ but the Ultimate Edition should be no cost to you since you‚Äôre a student. Eclipse is a solid alternative, but it feels a bit dated IMO. There‚Äôs also NetBeans, which I don‚Äôt have much experience with and can‚Äôt speak about. 
You're comparing apples and oranges. IntelliJ and Eclipse are not all that different. I find myself constantly switching between the two without problems.
As others have indicated, IntelliJ is a fine choice for an IDE, I use it professionally. However, I agree with your professor. Using a text editor strips away many of the extraneous utilities that creep into a professional programmers life; source control, database utilities, build utilities, support for multiple languages, etc.... This is all important stuff, but for your first class in programming, you should probably just focus on the programming language. There is plenty there to keep you occupied: syntax, data structures, fundamental logic patterns, the compiler, and much more. There are lot's of great, free text editors, but why choose one of those when you have emacs?
and that has been my every day work, really. main exercises, and 2 back exercises every day
The key is to sit supported by your lower back muscles.
Definitely do not use Notepad++. Even for the basics, a modern IDE is almost instrumental. I'd look into the most recent version of Eclipse or possibly IntelliJ. Learn the basics of programming and then come back and learn the IDE. Really learning the tools around programming can be almost as important on-the-job as programming skills in general. 
Eclipse is what is used in a pretty vast amount of commercial environments, and is totally free. It is in my opinion the best option I have found. Intellij is good too but my vote is for eclipse the whole way
Netbeans its a pretty solid IDE to start, Ecplise is good tho. 
IntelliJ is hands down the best java IDE. 
My school was heavy on C and C++ programming and I found CLion to be helpful. As a student I was given an educational license for all IDEs that JetBrains makes and had discovered IntelliJ. Starting off with Java, I taught myself the traditional way with a text editor and command line to get basic understanding of the process but then quickly moved to an IDE for more extensive projects. As a professional I am one of a few people at my company that uses IntelliJ, mostly everyone uses STS or Eclipse. The company even offers an in house IDE built on Eclipse. For me to switch to another IDE would have a learning curve to learn how functionality I am used to in IntelliJ compared to the others. Tbh, as others have already mentioned, focus more on learning the language. Try a few IDEs out and see which one you are most comfortable with. Like me, you may find the one you learn with first as your preferred IDE. Once you find your preferred you can check Udemy or YouTube for a course that can show you how to use the specific IDE and their features. 
There is value in a programmers text editor... for your first programming class there is some value in using a text editor to get. The basics down. Once you start really writing code lean on a good IDE. They are invaluable! But also learn a good programmers text editor. I have used NetBeans and liked it. I currently use eclipse. Tried intellij was not a fan. I use sublime at home and work. Notepad++ is bleh...
Take a look at jdbi since you have a text file with raw sql queries
If you support free open source software then is eclipse your choice. Otherwise Intellij is a good (in my case at business much more productivity) IDE but the Ultimate version is proprietary. 
Don't overdo it, if you're lifting heavy on your back every day that's too much. You can lift heavy one day, and do muscle retraining exercises with bands. Also just hanging from a pull up bar and retracting your scapula does wonders for your shoulders. I used to have chronic pain in my collarbone and sternum from tight pecs and a weak back, I was in my mid twenties at the time. Also, I had really badly rounded shoulders which also compounds pec tightness. If your shoulders are rounded I highly recommend band exercises and doing facepulls. Good lifts for rounded should are rows(already doing them), and overhead press or a z press.
Yeah! It's also about the sense of community. 
Lmao
But they are different enough so that it matters. My whole point. 
Nice advice here, could you share it in the sub?
I think it's a peculiar situation, that's why I posted it (I'm not the OP). What I find weird is that basically all their app depends on the DB module and they don't see any problem in assign the refactoring to an intern. I'm sure the app is devoid of any test. It's gonna be a fun ride for Sean.
No one else works desk jobs?
I didn't say that, and that is 100&amp;#37; why I worded my reply as I did. "Many others" for instance. "IT worker" is itself a nod to a related field. Nuance of text is something I try to pay a lot of attention to. But we DO spend more time sedentary than most desk workers, I believe. a tendency to nerd out on some code for 45 min-2 hours is more common on something this cerebral than say, excel sheet data entry. That tends to \[Cartman-ize\]([https://i.ytimg.com/vi/WgvTgV5EoGY/maxresdefault.jpg](https://i.ytimg.com/vi/WgvTgV5EoGY/maxresdefault.jpg)) your physique worse.
why?
face pulls at a mid weight and high rep are a daily for me, with another accessory, which one depending on if I'm doing a big pull that day or not. The scapula hang is a GREAT idea. I'll add that into rotation. 3 months in, I can see a noticeable improvement in my posture. Thanks man.
Not sure why you are downvoted. I used both Eclipse and IntelliJ professionally, and I prefer Eclipse. I mean, both are very good IDEs, and will get the job done once you learn how to use them. Preference is just a matter of taste.
At least in my own experiences I have found it easier to use and more intuitive. Perhaps I haven't used intellij enough to see the appeal but eclipse seems to have a lot better autocompletion, better interface, and support. Realistically it's just personal preference though
I've always like the text editor atom, up to date open source and lightweight. But I would recommend using an IDE like Intellij IDEA or Netbeans because it's like an all in one package.
By "sports doctor," do you mean "chiropractor?"
Frankly, I don't think so. He did in fact introduce himself as a doctor. Either he is a snake oil salesman, or genuinely a doctor. The observation seems correct though. Chiropractors I don't really trust. 
&gt; This is all important stuff, but for your first class in programming, you should probably just focus on the programming language. &gt; emacs Uhhhh...
It's your first class. When learning anything new you start with the basics and build up. Writing with just a text editor isn't something you'll typically do in industry, but learning all the little stuff is important. You'll break out the ide down the line, but learn how the imports work, how a class is structured, how to compile and build using the command line tools, it will pay off down the line
Why are they restricting ? There is no need, if you do things right.
It looks like in your [submission](https://www.reddit.com/r/java/comments/8ugwpl/distribution_and_licensing/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
**Good advice from your teacher! follow it.** It's really important to know what IDE and other advance tools are doing for you, and how to fix things if it it went wrong (this called abstraction leaking). Using Text editor will give you such knowledge. you will be able to know what is IDE is doing for you and how to customize it if you want to. For simple projects (few classes) using text editor will be just fine. For IDE, eclipse and Netbean IDE are very good, i would recommend eclipse. 
/r/learnjava or /r/javahelp are the subreddits for such questions. The three commonly used IDEs are: + Eclipse (free) + IntelliJ (Community Edition is free, students can get Ultimate for free) + Netbeans (free) Currently, there is kind of a holy war between Eclipse and IntelliJ (where IntelliJ seems to win). Try all three and see what you like best.
First, I find the annotations of JAX-RS much more readable. @RequestMapping("/persons") // Spring MVC @Path("/persons) // JAX-RS // Spring MVC @PostMapping(path = "/pets", consumes = "application/json") // JAX-RS @POST @Path("/pets") @Consumes("application/json") The latter requires more lines, but you can better grasp what's going on. Some other random thoughts: * If you use `@RequestMapping` instead of something like `@GetMapping` the annotated method will accept all http verbs by default, what is a bit odd. * The `@ResponseBody` annotation is somewhat strange. There is no need for something like that in JAX-RS. * It's probably a matter of taste, but I like the [JAX-RS Response](https://jersey.github.io/documentation/latest/representations.html#d0e6315) builder better than the [ResponsesEntity](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/ResponseEntity.html) class from Spring. * Spring's [UriBuilder](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/util/UriBuilder.html) is not much more than a special StringBuilder, whereas the [JAX-RS UriBuilder](https://docs.oracle.com/javaee/7/api/javax/ws/rs/core/UriBuilder.html#fromMethod-java.lang.Class-java.lang.String-) is able to get the URI from the class and method name. * JAX-RS has better content negotiation capabilities. * JAX-RS has support for sub-resources at the class level. * JAX-RS doesn't carray all the non-REST heritage, what makes the API cleaner.
Cough*JDeveloper*Cough! Not only does a demo application fail to run in a different IDE, it fails to run in a different JDeveloper version ... &gt; Required: JDeveloper 11.1.2.1 Production, aka R2 (the application will not run in previous versions of JDeveloper). Previous versions of the demo are not compatible with the 11.1.2.1 version of JDeveloper - see the bottom of the page for links to older versions of the demo. http://www.oracle.com/technetwork/developer-tools/jdev/index-095536.html
Very cool! Just recently, [I tweeted about the intellij UI theme](https://twitter.com/lukaseder/status/1009773969665417216) and a really interesting discussion about which theme is really more straining for the eyes evolved. There are a lot of ways we can subtly improve our interaction with the computer. Looking forward to some great content
Oh yeah definitely! Dark themes and good contrast is great, it‚Äôs almost necessary in CS. 
Start with notepad++ if your teacher asks you to. You will understand how to manage your project, what is a classpath, what does a compilation step do, etc. Many of those things are automatically handled by advanced IDE, and if you skip the Notepad step, you might just assume that stuff somehow works under the hood, but not really understand how any of that works.
Do you have any data on that?
IntelliJ or eclipse Honestly either is waaay better than notepad. Though for me personally IntelliJ is very laggy on a reasonably high end PC.
vi. Don't listen to the emacs people.
IntelliJ idea and eclipse. Idea has 2 versions - ultimate edition (premium) and community edition (free). Community edition lacks a lot of features like spring integration, JEE tools, language support. There‚Äôs a free version for students, supports a lot of languages. Eclipse is decent too. You have plethora of plugins that makes it highly extendable. If you want to work as a java programmer get familiar with it as quite good number of companies use this. As a student any decent IDE is a ‚Äúplus‚Äù over notepad ++
Netbeans is good for new users but IntelliJ is the best atm imo
Nope no data on it sadly. The article you sent seems pretty nice though, I‚Äôll have to do more research. 
Definitely IntelliJ, Community (free) and Ultimate (subscription) 
Intellij for me is the best. By far. If you're a student you can even get the ultimate version without paying or with a discount, I don't remember. Even the community edition is better than the other options imho üòÖ
Agreed, especially for the first assignments. However, given the pain of using a plain text editor I would then ask the teacher if they mind people using a language-aware IDE. If they say Notepad++ just because it's simple, they might be fine with people using something else. If they intentionally want you doing it without assistance, follow their guidance. 
We used Jenkins and the various plugins. If we were building the master branch it would get deployed to the stage namespace in k8s. I think we had a script to do modify the yaml and update the service, but everything else like pushing the docker image was Groovy code in the Jenkinsfile calling various plugin actions.
The increase in memory sizes has made the joke about eight/eighty megs and constantly swapping hard to make. ^^Vim ^^for ^^life
In the middle of the evil is vi!
I would suggest starting using notepad++ and learn how to compile your .java to .class via the cmd .As you get better , you can start using a complete IDE so you understand part of the magic that's happening when you press that compile button Personally I use Intellij Community/Ultimate. 
Netbean and IntelliJ come to mind. Try both as they are free. Some prefer one over another.
definatly start *without* intelliguess(tm) so you actually learn how to use the javadocs....
Yes, but it is also in civilized, divine, visionary, loving, and enviable
I used to use eclipse but all my compsci friends made fun of me so now I use Intellij
If you have to use a text editor, go for something with a bit more bells and whistles than notepad++, for example Sublime, or Microsoft Visual Studio Code (not Visual Studio!), Sublime is not free, but cheap, the other is completely free. Other than that, get an IDE...
Yes, there is a holy wear between Eclipse and IntelliJ. And clearly Eclipse is winning.
don't you want to have a compiler maybe?
Netbeans is trailing behind, Eclipse is a humongous resource hog and a slow starter. IntelliJ is nimble, fast and supports a lot of extra stuff in the form of plugins. So, it's not that weird that they seem to win. IntelliJ is actively developed and most of the time adds support for new products or versions of tools and languages.
And what is your opinion of that after having used Eclipse?
I think if someone wants to steal your software, they will eventually. No matter what kind of protection you use. (Of course you could use online verification, but that would just discourage everyone of using it, unless it is an online service from the beginning) The companies will probably won't risk using a software they are not licensed to do so, as litigation could take much more money out of their picket. I don't know what your software does, but I would try to make licensing as easy as possible.
javac HelloWorld.java
Absolutely don't use Notepad++ and other text editors, since that's such a waste of time. It won't teach you anything, it'll only make you struggle. Any IDE, but IntelliJ seems like no brainer, will let you focus on code, instead of looking for .java files you need to, refactor easily and everything else you would otherwise do manually which is time consuming and simply don't worth it.
oh wow i didn't know that.
That's probably why the teacher asked them to use Notepad++.
You mentioned the word 'joke'. Chuck Norris doesn't joke. Here is a fact about Chuck Norris: &gt;'Icy-Hot' is too weak for Chuck Norris. After a workout, Chuck Norris rubs his muscles down with liquid-hot MAGMA.
In retrospect, I should have. Especially since they also heavily bought into the GUI framework that comes with it.
Pico ;)
Here is my suggestion, you can stop using Notepad++ after you know how to: \- Write a HelloWorld program \- Compile a HelloWorld program to class file using cmd \- Setting the classpath \- Use jar tool \- Run a Java program, jar package using cmd After all of this, you seriously need to use an IDE or you will hate Java forever, trust me.
In my opinion, there is no one perfect software you will stay and write all your code. Notepad++ is a software you should have installed regardless without a question in my opinion. For learning Java, a new language or editing some file notepad++ is my favourite choice. For little or mid-size project Eclipse is my choice. And for a huge project where I use maven and synchronizing with git I'm like to choose IntelliJ IDEA. 
That's a broad question. But assuming you are applying to an entry level position there since you are asking this, here are some things you should know and will probably be asked. The most obvious are the basics of the language (eg OOP and its principles like encapsulation, polymorphism; behaviour of the language etc). After that, basic ADTs (stack, queue, linked list) and basic algorithms (binary search, quicksort and such).
I recommend [License4j](https://www.license4j.com/buy/). It is easy to use and gives you a lot of options. Also it is really cheap with 55$ for the "simple" version. Auto generation of licenses cost extra though (375$ I guess)
This is exactly what the top level comment is referring to :)
Exactly this. You put build slaves in k8s (for maven/npm/go/ruby/etc..) and in the root of each project you add a Jenkinsfile with the build steps (which can even be parallelized). The Jenkins Kubernetes plugin can put images, trigger deployments, etc... 
If you have some Java knowledge and time, you can create a custom license system starting from an existing one or from a small library. Or you can use an out of the box solution that already exist. In the past, I wrote [Licensius](https://github.com/decebals/licensius) a tiny (14 KB, no dependencies) license framework for Java that can be useful for you. If your goal is to sell your library/application to large enterprises then your problem is somehow artificially. Big shops want stability and a good support and they are ready to pay you for them. Don't forget that nothing is unbreakable. It's mandatory to have a good relation with your (possible) clients.
I just released the first public build of my HTML parser. It's a commercial product I've been building over the years for various private projects of my company. It can handle all sorts of non-trivial pages with very little effort. I hope you guys find it useful. All examples of the tutorial are here: https://github.com/uniVocity/univocity-html-parser-tutorial Only trial licenses are available at the moment. It's going to be available for purchase on the 7th of July. 
In TeamCity, you can assign a cloud profile to a project and choose between any cloud provider that hosts Kubernetes or just your own k8s cluster. The TeamCity is able to launch cloud agents (using the docker image) on demand if the build queue is not empty. It will also shut down the agent once the job is done. Here's the description of the k8s plugin in TeamCity https://blog.jetbrains.com/teamcity/2017/10/teamcity-kubernetes-support-plugin/
I'm so used to it now, I wouldn't really switch back Eclipse is fine (I think dealing with MySQL databases is actually easier with it) but I'm really used to IntelliJ
I had to use the default windows Editor for my first couple of projects but that is not viable to code using that. I would recommand you IntelliJ. I use it sice I study Computer science and people at my uni are kinda java crazy.
If you try both Eclipse and IntelliJ, I have a very strong feeling you'll cling to IntelliJ and never look back. I started off using Eclipse, but never once looked back after I tried IntelliJ. Many don't care about aesthetics, but if you do, IntelliJ beats the pants off of Eclipse, especially its dark mode, which Eclipse has been trying (and failing hard) to emulate for years. Luckily, you don't have to choose between form or function in this situation. IntelliJ is superior in both cases, in my opinion. 
Tutorialspoint offers a very good tutorial and it has interview questions and answers. I've used that to prepare for mine.
So they used 6 kotlin repositories with a total of 21kStars and compared that to 410 java repositories with 3.7kStars. Doesn't seem like these are comparable repositories.
I agree with your teacher. IDEs like Intellij and Eclipse introduce more things outside of basic programming concepts. Notepad++ is great because how lightweight it is. Nothing fancy, yet has great text colors. Visual Studio Code is also another option (which is what I currently use). Has more complicated stuff though. If you're just learning programming for the first time now I think it's a great idea to stick with Notepad++ now. Get the concepts of Java down.
I'm not if it's a good thing that the synchronicity property depends on the source and is not obvious from the code. In my experience, handling asynchronous operations is totally different from handling synchronous operations, in particular once you spit out the results. 
Running build slaves in k8s is orthogonal to doing deployments. You don't need to run Jenkins there. Google do everything without plugins in their examples, and just call shell commands, but most can be replaced. https://github.com/GoogleCloudPlatform/continuous-deployment-on-kubernetes/blob/master/sample-app/Jenkinsfile
*mic drop*
That's running build agents in Kubernetes, not deploying your application to K8S.
Worthless marketing BS.
Try Netbeans
Staging tables with no constraints. Either use the DBs table partitioning feature or "partition" the tables manually and drop them after a while. Move the data over to the "real" table "offline", in a batch process
vim. vi is the devil incarnate (especially when you're expecting vi to alias to vim)
Wrong subreddit. /r/learnjava /r/javahelp
Really? I'm using 3 monitors and I have never had this happen to me.
You can choose to deploy the server as a docker image as well.
that's \*exactly the opposite\* of my experience. Eclipse takes seconds on each and every middle-click for any context menu or completion, while intellij is just instantaneous, both on windows and linux ( dont have a mac to try it ). And i take my time, tuning the VM on both [eclipse.in](https://eclipse.in)i and idea64.vmoptions to the limit of my abilities.
That's still not that OP is asking.
well said, i've had an intern used to work with netbeans having a lot of trouble handling his ressource folder under eclipse, as those 2 IDE do things differently. It's a common problem with people who skip the basics. 
I use [hackerrank](www.hackerrank.com) and [dailyprogrammer](www.reddit.com/r/dailyprogrammer) to practice well-defined problems. Keep doing what you're doing - just find fun projects to work on and you'll soon find yourself saying 'when I faced this problem in my last project, I solved it this way.. what about that way instead?'
I highly recommend Concourse
Atomist's software delivery machine's look really interesting - they have some modules for kubernetes that look really cool
hm maybe youre right, thanks
That's what a lot of the beginning Java books start with: a plain text editor and javac. I'm not sure if Head First Java ever has you use an IDE.
I guess the main problem I have with initiatives such as this is that I am not convinced they do more good than harm. If we break down health into a psychological and physical category, I think it can generally be agreed on that desk jobs are not unique, and as such there are good resources available out there. Creating a discord server to that end would be akin to reinventing the wheel. In terms of psychological health, I think a little bit of knowledge is a dangerous thing. If your formal training is in the field of informatics, that doesn't make you qualified to diagnose and/or endorse any forms of treatments to your colleagues. In fact, creating an unsupervised forum which encourages people to talk about anxiety, isolation, ideation of suicide etc. might be exacerbating/normalizing the problems, not improving them. How could anyone who is not formally trained in the field of psychological health make claims about the efficacy of treatments with any degree of certainty? This trend of non-professionals coming up with the solutions to mental health has the potential to be very dangerous. Maybe it genuinely does good, but why take the risk in the first place? Redefining the channels for mental health problems is a risky endeavor. If you acknowledge the risk and don't purport to make any claims to genuinely improve wellbeing, that is fine. Just make it explicitly clear to anyone who joins your channel that you aren't in a position to deal with health issues and that there are other channels out there for precisely that. 
Yeah, but none of [these fine words](https://www.reddit.com/r/java/comments/8ufsry/best_java_programming_software_my_teacher_told_me/e1fhrjp/) can be spelled with "vim"
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The correct alias for vim is, of course, a single *v*. Brevity, please!
Try GitLab.com. It has built in CI/CD and Kubernetes integration. Plus the free tier has private repositories so you can remain private until your ready (or never). GitLab is the smaller, smarter cousin of GitHub. ;-) -MpH See: https://docs.gitlab.com/ee/user/project/clusters/#what-you-can-get-with-the-kubernetes-integration
My java course started with IntelliJ right away.
If you are looking for a source code editor rather than an IDE you may want to give jEdit a try. 
Having used most of the editors and IDEs mentioned in the comments, I can say that I vastly prefer IntelliJ over the others. The Community Edition is free, fast, has damn good auto-completion, and is consistent across the various platforms (Linux, Mac, and Windows). FWIW my employer (multi billion dollar company with ~20k employees) has pretty much standardized on IntelliJ Enterprise Edition for Java development and Visual Studio Code for frontend (Angular) development.
I‚Äôve been using Visual Studio Code with Java plugins recently. Most of my friends who are in development of java applications have been using IntelliJ.
http://snowdream.github.io/115-Java-Interview-Questions-and-Answers/115-Java-Interview-Questions-and-Answers/en/index.html
Try looking at Sublime. And spend time going through the tutorials on how to use the editor. It has a lot of powerful features that could save your time.
It won‚Äôt bother me. I have used eclipse most of my professional career. Lately I have started using IntelliJ idea (community ed. )There was a company who made us work using netbeans. Some of my colleagues didn‚Äôt like and rest of us admired the little features that came with netbeans. One of my early companies used eclipse but we weren‚Äôt using it for compilation or much to run the program but like a text editor with code completion. They had their own framework for building applications outside eclipse. So oft times we would open source in gedit, modify and build using their framework. Organisations have their own weird policies. Heck I can‚Äôt even change my screen wallpaper here. 
There are a variety of textbooks you could buy on Amazon that are used and in good condition for $20 or less. I just finished my 3rd year of college as a CS major and I learned way more from my book than I did in class. A good book will have fairly simple projects to teach you new concepts (100-200 lines of code or so per project) with multiple suggestions on how to make the project more complicated or potentially more useful. If it's a really good book it will even have some form of solution for each project. **Think Java** is a free PDF book that I used to learn Java in highschool. It might offer new insights about the language for you. It's an easy read and has lots of little projects you can do to practice. 
second this. The VS Code search is so much intuitive, that alone is worth it.
I am an unpaid shill for JetBrains-- and in this case that is IntelliJ. I just like their products and I continue to pay them because they continue to make their products that have become familiar and intuitive to me-- they continue to make those tools better and easier to use. (I can easily make PHPStorm use a different PHP interpreter than what is installed on my machine specified by which project I have open.) (They reused the Eclipse strategy of tweaking a base IDE to fit each use case: general web - WebStorm, PHP - PHPStorm, Java - IntelliJ, Android - Android Studio, Python - PyCharm, Ruby - RubyMine...) Eclipse is kind of the king of free. Even IBM started with Eclipse and made changes to get their proprietary Rapid Application Developer (RAD) IDE. The IDE IBM recommends and distributes started out as the Eclipse IDE source code. For what that is worth. The first IDE Google recommended and published steps to set up for mobile development was called Android Developer Tools (ADT), and you guessed it. Android Developer Tools started out as the Eclipse IDE source code. I hear good things about NetBeans-- I have never used NetBeans.
You're writing games with Java and OpenGL and haven't even started university yet: it sounds like you're doing fine. Despite the many 'Learn X in 21 Days' books, programming well requires experience. Things that frustrate you as you try to make changes to your own code (e.g. magic numbers; copy/pasting code and then having to copy/paste changes later; saying the same thing again and again but with subtle differences) will form lessons for the next thing you work on. Someone somewhere is going to recommend the books 'Effective Java', 'Clean Code', etc., so I may as well get that out of the way (they are worth it). You mention writing efficient code. You \*can\* write efficient code in Java, but 99&amp;#37; of the time you're going to want to focus on \*readable\* code instead. Brian Kernighan (co-author of the C programming language and all-round Really Smart Guy) once said: *‚ÄúDebugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.‚Äù* Those are wise words worth bearing in mind. Algorithmic efficiency is in general more effective than language-level optimisations, so you may want to read up on data structures, algorithms, and 'Big-O' notation. "Introduction to Algorithms" and "Algorithms in Java" are probably the canonical texts here.
^^ this I see loads of kids out of college that can paste together a simple app in an IDE but have no idea what's actually happening. If anything goes wrong, they don't even know where to start looking. The more you understand what's going on behind the scenes, the happier you will be in the long run.
Wrong subreddit. You‚Äôre looking for /r/javahelp and /r/learnjava. 
NP. I think I just must have misunderstood something then.
Awesome thanks!! I'll definitely check out the pdf and go from there!
Desk jobs, yes. But what is this 'works' you speak of?
I'll second gitlab, but the cicd yml can get pretty intense over time.
Dark themes might be good in a poorly lit work area. Sort of like the dark hacker spaces on TV / movies. Or the mythical hacker in mom's dark basement. In a brightly lit office (geez, mine seems as bright as daylight outside) a light theme is very easy to read. Like printed paper with black ink on white paper. 
wow what a quote. Thanks :)
welp i wont repost now
Cannot disagree more. I would get used to an IDE as soon as possible. If you go the notepad++ route don't use it for more than the first few projects. I've interviewed plenty of developers out of college and if they don't have a basic grasp of an IDE and why it is important for refactoring, code-style and formatting, and rapid development it is a huge red flag. 
There are many well written tutorials here https://docs.oracle.com/javase/tutorial/
I'm a huge fan of eclipse. I have nothing against CLI stuff, it's perfectly adequate, but there is a reason IDEs exist. I'd hate to do without syntax highlighting or the ability to change a variable name everywhere it occurs automatically, let alone all the other features. Still even BlueJ is probably better than conmand line in some ways.
for the 'Big-O', read https://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/ and look at http://bigocheatsheet.com/
Thanks!
I'll be frank, I don't know what pok3r is and in my opinion it isn't a productivity issue-- I'll be able to adapt reasonably well no matter what I use. In college they made me use nano instead of vim (and actually ever since then I can't go back but that's another story). This is a micromanagement issue. Whenever I've recieved or been in a job when the lead suddenly says "you will now use tool / framework X", it's been bad. Especially so if the software is agnostic to the tool (which in the case of IDEs, unless it's a plugin for the IDE, yes it is always agnostic), or there's a better framework and discussion shutdown ("errr...we will use a the MySQL", "But for our needs a solution like Postgres is better and more cost efficient", "no we will use a the mysql because everyone knows how to use the mysql" (read: it will be easier to replace you, even though it won't be and the manager is just being a bumbling idiot)). I do not like being micromanaged. Other people are okay with it for the right price. But I'm not because I value how I feel during the day and how I will feel when I get home on a day to day basis more than any amount that I will be paid. You can't always find a job that makes you happy, that old addage "If your work is something you like you will never work a day in your life" is unrealistic. Possible, but unrealistic. However you should *never* take a job or continue one where you know you will be *miserable*. And personally, micromanaging me turns me into a miserable, insufferrable person.
At the risk of sounding like a shill, you might want to take a look at the build pipelines in OpenShift. I'm not saying you have to buy into OpenShift, but there is a lot of work that has been done there. (OpenShift starting with 3.0 is based on Kubernetes.) You can look at the open source community project OpenShift Origin. All the code is on github. There are a number of demos that show canary/blue-green deployments on OpenShift as part of the build process/pipeline. (Probably the most well known is Burr Sutter's demo from 2016 as part of Red Hat Summit.) When you look at it it is mostly done with kubernetes objects and Jenkins. You can play with this online using a free OpenShift Online or OpenShift.io account. Or you can try it in a VM on your laptop with minishift (minishift was inspired by minikube.) Google Openshift pipelines or deployment strategies. 
Yeah I‚Äôve noticed this as well. It‚Äôs difficult to read dark theme in a well-lit setting. But for all my text editors, I use dark theme or a dark grey. 
Don't poison the lad's decision some of us prefer Eclipse. Especially now that photon is out
*vomits* If you start with a straight text editor use subli.e. Notepad++ is kind of a relic
[https://www.jetbrains.com/research/devecosystem-2018/java/](https://www.jetbrains.com/research/devecosystem-2018/java/) As you can see the most popular framework right now is Spring Boot. I would grab a copy of IntelliJ Ultimate for free with your .edu e-mail address. Go to the initial Spring Boot tutorial: https://spring.io/guides/gs/spring-boot/ and go through it. Once you are done with that one pick another from this list https://spring.io/guides and keep on going until you have enough knowledge to have an entry level Java programmer job :)
Both sonarcube and Fortify will consider that external file of queries as a source of SQL injection. Go watch Uncle Bob's talk about Clean Architecture https://www.youtube.com/watch?v=o_TH-Y78tt4 , the talk starts at 10:35. You will find that you want one interface DAO per table/view. The Connection should be passed as an argument to the constructor of the class implementing the interface. A factory class that returns implementations of the DAO interfaces could hide the Connection entirely from the upper levels. A DAOException class would prevent any leaking of the abstraction to the upper levels. 
https://www.jetbrains.com/research/devecosystem-2018/java/ As you can see the most popular framework right now is Spring Boot. I would grab a copy of IntelliJ Ultimate for free with your .edu e-mail address. Go to the initial Spring Boot tutorial: https://spring.io/guides/gs/spring-boot/ and go through it. Once you are done with that one pick another from this list https://spring.io/guides and keep on going until you have enough knowledge to have an entry level Java programmer job :)
In a sense, it all makes perfect sense. The programming model of reactive streams is fully asynchronous - meaning that whether the actual processing ends up being synchronous or asynchronous, the way you structure your code does not have to change. And whether you get asynchronous behavior depends fully on whether you actually need it or or not. 
if you want a really memory-efficient development environment you can go with regular notepad on one monitor and command prompt routed to your workspace directory on the other. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The thing is that IntelliJ is pretty much objectively better than Eclipse. Their are some niches in which Eclipse has it's advantages, but that's it. I worked on an Eclipse-based IDE for years. You shouldn't ditch Eclipse for that though because it is still very similar to IntelliJ and very popular in the academic sector and with many employers (because it's free and old). NetBeans isn't really competitive. I started with it, haven't touched it in like five years and I don't miss it. Though I have to say that it was much easier to get started. Very overseeable and less cluttered menues. Probably the best full fledged IDE for beginners. 
I prefer eclipse, I have tried using IJ several times but I just can't stand it.
Great! Now help make ND4J better or rewrite it in Java. Clojure is unusable.
This so much. I hope my teachers would have realized this. Would have saved me so much time in working life if I knew the foundational stuff properly already in the beginning. 
&gt; Currently, there is kind of a holy war between Eclipse and IntelliJ (where IntelliJ seems to win). War implies Eclipse ever had a chance in the first place. 
What do you talk about? I *am* making ND4J better. 
Dragan is making ND4J better, it's true. @Dragan - one thing that doesn't make sense to me: 5 chained gemm calls can't take 25 seconds... Wondering why that's happening. 
If you're just starting out and don't want to involve yourself with git integration, Gradle etc. Just go with BlueJ. It's a bare-bones and actually remarkably simple IDE that is lightning fast if you have never coded before.
The code is in the repository. You can clone it and try it yourself, or re-code in in Java (it's straightforfward) and see.
OP asked for the best Java IDE. I simply gave my opinion between Eclipse and IntelliJ since I have experience with both and both were listed in a stickied thread for OP's consideration. My full opinion is that OP take /u/deadlock_jones' advice and start off with a decent text editor until they understand the basics and then take /u/desrtfx's advice and try out all the major IDE options to determine what fits them best. However, if you feel that I've wrongly tipped the scales in IntelliJ's favor, perhaps it would help balance them again if you explain why you prefer Eclipse to IntelliJ. Does Photon fix the horrible dark theme UI? I did a quick search for screenshots, but didn't see any of the dark mode in fullscreen. The items shown in the [dark theme section](http://www.eclipse.org/photon/noteworthy/index.php#dark-theme) of the "noteworthy" post don't inspire much hope, though. I had to look very closely to at the before and after pictures to see what had changed. If it hasn't been greatly improved, it would have to offer some significant functional benefits over IntelliJ to warrant me looking at that hideous UI for hours every day. Although, to be totally fair, I do appreciate all the work that the Eclipse Foundation has done in the cloud IDE space over the last few years.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thought this might be helpful to some, contrasting functionality in application servers vs. Kubernetes.
Great thank you so much! Lots of good stuff it looks like
Indirectly indeed and they already fixed a bug. But couldn't you help identify some more points where they loose performance?
Such questions belong either in **/r/javahelp** or in **/r/learnjava** as is clearly outlined in the *sidebar*.
&gt; pretty much objectively better Thanks alot, now I have to cleanse my eyes.
Hey, hugthemachines, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
I think you are asking too much. He could not directly "help identify some more points where they loose performance" in ND4J, because he likes Clojure and his own library more? 
&gt; Does Photon fix the horrible dark theme UI? Idk I'm not a big fan of dark themes, but there are like a million third party themes IIRC. If I wanted a dark theme I'd probably use the sublime text theme I used to use though it may be out of date now. 
udemy.com has a number of courses on Java (and many other development technologies) https://www.udemy.com/courses/search/?q=Java&amp;src=ukw Also tutorialspoint.com has many tutorials available as well. https://www.tutorialspoint.com/index.htm 
Well he did suggest to avoid good (great) editors and use emacs instead so he does not seem overly positive :-)
delete
I find the way to license the library by executing a jar quite odd. Btw. the license server is down. 
Intellij is a standard now. I would suggest learn how to use it.
Idea 1: A library which can read and parse a plain text language (not Java code) and generate the same results. Idea 2: A front end command line utility can be created using the library in Idea 1 so that anyone can generate ascii renders without writing Java. Idea 3: The same library in Idea 1 offers a function that takes your data structure generated by Java code and renders it into the plain language parseable by Idea 1 and Idea 2. 
Whoops my bad I apologize 
Whoops
Why is this stickied? All comments should have a fair chance at rising to the top. If people agree with your ideas, the comment will be upvoted.
Because it is a *moderator* comment.
interesting post
The comment has nothing to do with moderation, it‚Äôs just answering the question like every other comment. Why does it get to have an advantage over every other comment?
The comment outlines that such questions should be asked in /r/javahelp or in /r/learnjava. As such, it is a moderation comment. It also lists the three major IDEs without any assessment or judgement. It even encourages OP to try all of them.
Then you should separate the parts where you outline where the question should be posted and the part where you answer the question directly. It seems like you‚Äôre using the first bit as an excuse to sticky your comment. &gt;without any assessment or judgment You said that IntelliJ seems to win the ‚Äúholy war.‚Äù
I'm not sure if you're talking about syntax themes or UI themes. I could never find a solution that gave the entire UI a consistent and clean look like IntelliJ's darcula theme. Sadly, light themes give me terrible headaches after just a few minutes, so dark themes are an absolute must for me.
VSCode is actually amazing java ide. It is faster than most ides and has loads of amazing extensions, mainly spring and redhat. You can also get Lombok set up super easy. I use clang extension for formatting because I can‚Äôt find a better one. Also if you are coming from notepad++ it will be very intuitive. YOU ONLY NEED 2 shortcuts ctrl + p to find files and ctrl + shift + p where you can type any command. IntelliJ needs 1GB ram to be anywhere near as fast (you can configure this in config). Eclipse is a horrible experience. Netbeans puts everything in the wrong place. Atom and sublime have pretty much same feature set as vscode but sublime is no longer supported and atom is slow in comparison. Only use Emacs and vim if your a real programmer.
np, if you run into any issues feel free to PM me. I do Spring Boot on IntelliJ for a living. 
Ah, the billion dollar mistake - null pointer. :D
Gaah, having my precious code throwing NullPointers makes me cringe so hard. I sent you a PM about it, thanks for letting me know. In regards to executing the jar to get a license - I'm open to suggestions. I tried to make the license part less intrusive as possible while keeping it sort of convenient. The other options were: - having it display some "activate your license" dialog on the first run: it might be annoying and really bad if for some reason something regarding the license fails on your production server - it will take a while for you to notice, as it may be "hanging there" waiting for some user input. - sending a "custom" jar for every user that wants a license: too much overhead and makes you wait to get it delivered to you. - force you to put a license file somewhere: I find this extra annoying Thanks a lot for trying to use it. I'm going to get that error sorted ASAP.
When you least expect it, of course. It's coming an outdated version of apache SystemUtils, method `.isJavaVersionAtLeast()`.
&gt;Currently, there is kind of a holy war between Eclipse and IntelliJ (where IntelliJ seems to win). Probably because it's better
Thanks for this, I have a very similar template at work but didn't realize you can just use fully qualified names and it'll sort out the import for you.
But there's so much fat there... feels comfy. On a serious note: a decent chair goes a long way. I was forced to get one of those Hermann Miller chairs and boy what a difference they make. I can work 16 hours a day and feel OK whereas on my old IKEA chair my lower back was sore after 1 hour.
I just find it funny that we're talking about programming (and we understand binary logic) and op said 'free and paid'. Sorry for the irrelevant comment lol.
Java community, 2017: Var is turning Java into JavaScript, what is this shit, Java is going downhill, abandon ship! Java community, 2018: Var is surprisingly versatile and useful, here are 10 amazing ways to use it.
That blog is pretty neat, thanks for the share!
There are lots of themes for both. Way more syntax themes ofc, but still quite a few UI themes
In terms of updates, [this talk](https://youtu.be/H48QEcjP1PU) may clear some things up.
Not really. 
Only morons compared the weak, dynamic typing in JS with the strong static, typing with some type inference in Java
Here's a list of the included JEPs: http://openjdk.java.net/projects/jdk/11/#Schedule Most exciting thing seems to be ZGC
Morons are allowed to code in Java. 
http://www.java-countdown.xyz/
That makes sense so JSE 8 was a LTS release that developers could use as a frame work. Once they switch to say JSE 11(the next LTS version) as a business we will be ok and do not need a subscription to update to 12, 13, 14 etc? 
That is correct. You will still be able to update to non-LTS releases if you want to.
so are those non-LTS version features only or security fixes as well?
An LTS release is the same as a non-LTS release, except that its support period will be longer.
So 11 is an LTS, in the old format JSE12 would be called SE 11 v121 as an example. the next LTS is 3 years away and should be SE 18 if my maths is right. Why as a business would I need a subscription to update SE11 when SE12 is a non-LTS update to SE11?
Java 12 won‚Äôt be just a minor update to 11. It will be like Java 10 is to Java 9.
Based on your video and this link from oracle: https://blogs.oracle.com/java-platform-group/update-and-faq-on-the-java-se-release-cadence Going from Java 9-&gt;10-&gt;11 is closer to going from 8-&gt;8u20-&gt;8u40 than from 7-&gt;8-&gt;9. 
Can you explain how ZGC is possible, or give me some more information? That benchmark sure looks impressive, but how is that gained? It must suffer on other aspects, like much more cpu drained while using this garbage collector? Sorry if I overlooked the obvious.
Time wise, yes, but a current release will still receive updates when a new release is made available. If you want updates past the ‚ÄúEnd of Public Updates‚Äù date for a release, you will need to pay for them. More information can be found [here](http://www.oracle.com/technetwork/java/javase/eol-135779.html).
Can anyone explain how GraalVM will fit in with the official JDK release cycle? Or is GraalVM just going to exist as this totally unrelated side project for years? There was a link on here some time ago about how Oracle was going to rip out the existing JS interpreter and recommend you use GraalVM, which makes it sound like there is going to be some level of transition/integration with Graal.
Now I get it and hate it even more
Sorry for the confusion, haha.
You can already use Graal's polyglot engine on stock jdks. As for how much of graal is going to be integrated into openjdk, that's still kinda unclear.
Netbeans is pretty good when you need free and very little nonsense. It's easy to setup and easy to use, unlike some of the other free options...
It is really fucking annoying that they are going to deprecate Nashorn without providing a suitable alternative. How can somebody even register a protest?
&gt; An alternative is for a set of credible developers to express a clear desire to maintain Nashorn going forward. If that happens before this JEP is integrated then this JEP can be withdrawn. If that happens after this JEP is integrated, but before Nashorn is removed, then a follow-on JEP can revert the deprecation.
Very sad that there isn't more from Amber here. This is an LTS release right?
Here's my take on the topic: https://blog.jooq.org/2016/06/30/with-commercial-licensing-invest-in-innovation-not-protection/ TL;DR: Invest in innovation, not protection
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Graal.js is already better than Nashorn.
Constant dynamic is a big component of a lot of the amber stuff, so at least groundwork is being laid.
I still don't see how GraalVM is replacement for Nashorn. It's not like we can just add GraalVM dependancies &amp; change scripting engine name and stuff will work. Users will still have to install GraalVM SDK. Or is there a plan to add 'embeddable' version of it?
it may be an uninteresting feature, but for me the most exciting thing would be TLS 1.3 support with its 1-RTT handshakes. i would like to say it's the HTTP Client, but [currently it is pretty useless](https://bugs.java.com/bugdatabase/view_bug.do?bug_id=JDK-8203771).
Oh, you're the author of pf4j! I know this topic is about something else and that reddit is not a feedback medium, but THANK YOU. Keep rocking!
Hey, this is pretty cool. At first I was thinking, why would I need this? However the examples on Github are actually really interesting. I may consider to use this one day.
GraalVM is a separate project with a separate vision, separate main team working on it, separate release cadence. GraalVM uses the OpenJDK JDK as the base platform for running in the JVM mode. OpenJDK includes a snapshot of the Graal compiler from the GraalVM project. These are two separate projects which peacefully and nicely coexist but are not tightly coupled. For example, GraalVM among other things also includes a version of Node.js to run Node.js apps (with the V8 JavaScript engine replaced for its own). GraalVM is an open source project, so you can build it yourself. GraalVM team provides pre-built binaries of GraalVM for download. These are based on JDK 8. When JDK 11 will get closer to being final, we'll have the built binaries for GraalVM built on JDK 11 available. Even now one can run GraalVM's JavaScript implementation on OpenJDK by just adding jar files to classpath, it's not the recommended way (it will be slow), but it can be done. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I was really hoping to see [JEP 326](http://openjdk.java.net/jeps/326) make it in... Anyone know what the odds of it are in the near future?
Java garbage collector has lot of room for improvement. Even G1GC sucks balls compared to other garbage collectors. https://making.pusher.com/golangs-real-time-gc-in-theory-and-practice/ Even Haskell has a better garbage collector it seems.
Does anyone know what the state of the alpine builds are? It seems there's been a few releases (9, 10 and now 11) with an alpine/linux build but never seems to get out of the EA stage: http://jdk.java.net/11/ -&gt; Alpine Linux / x64 tar.gz (sha256) 186416349
&gt; Going from Java 9-&gt;10-&gt;11 is closer to going from 8-&gt;8u20-&gt;8u40 than from 7-&gt;8-&gt;9. The features going into new releases going forward will be much larger than went into point releases. In particular they'll change the syntax. Java 10 got local type inference for example. That never would have slipped into 8u40 for example.
Deprecate doesn't mean remove. You'll be able to use Graal
It doesn't surprise me that they're playing it safe with an LTS release.
GraalVM's JavaScript implementation works on OpenJDK, so you can add a bunch of jar files and change scripting engine name, maybe [some other things](https://github.com/graalvm/graaljs/blob/master/docs/user/NashornMigrationGuide.md), and it will work. 
How? Where are the tutorials on how to embed a shell and evaluate scripts using Graal? Logically it would make sense to provide an alternative and deprecate at the same time. Deprecation first without some kind of alternative just puts people in a bad spot of having to code against a deprecated API or create some wacky proprietary API.
No there are no breaking changes between lts releases. An lts feature will stay till the next lts minimum. 
It will almost certainly be in 12, judging by mailing list discussion.
The big item currently missing is partial evaluation. I think the graal devs are hoping to get *everything* integrated, but who knows when.
The information I quoted was direct off Oracles site
nice can't wait! I wished for raw literal strings, but it seems that all new language features will be put in non-LTS releases. it's just me or JavaFX is still there?
What if they remove a feature? 
&gt; Is multi-threading largely involved in your day to day work? Yes. We use Executor or just plain Threads whenever we need to do some backend processing. We also use Quartz Scheduler for some jobs so it's good to know about Thread.interrupt() etc. etc. &gt; synchronized methods/ blocks Jesus Christ no. We just try to code thread-related stuff in the most stateless way possible and use AtomicWhatever objects if need be.
Thread.interrupt() for interrupting sleeping/waiting threads? Or is there anything else interrupt does? 
No, I can't remember a lot of situations in the last years where I needed this (backround: mostly Spring backend applications). I'd also try to avoid it as it always makes things complicated (testing, readability, ...). If possible I'd use Futures.
First rule of multi threaded programming. DON'T DO IT Second rule of multi-threaded programming (for advanced users). DON'T DO IT.... unless you really need to then, and only then, proceed with extreme care. Honestly... a single CPU thread is plenty quick enough for 99.999&amp;#37; of business tasks needed to be carried out today - and the multithreadding can be handled by the app server / container your application is running within. You really do not want to touch multi-threading. It will bite you.
That is also why you have a CI/CD always building against the next early release as a test. Also features get deprecated first and the removal has to wait one release. You can see this with corba for example. It was deprecated in java10 and will be removed with Java 11. 
Hey, I work as a developer in a company that builds a small meter gateway running android and I can tell you: yes! it is important. As Douglas Schmidt explains in his lecture: [https://www.youtube.com/watch?v=8cRVA0ND\_N0&amp;list=PLZ9NgFYEMxp4UHEwQCltQciArqXDyn6Ms](https://www.youtube.com/watch?v=8cRVA0ND_N0&amp;list=PLZ9NgFYEMxp4UHEwQCltQciArqXDyn6Ms) multi-threading is evolving because of every factor which is relevant for this issue. For instance if you are watching this site right now and another user is posting some answer my post, the server must be able to run this thing in different threads. My advice to you: dont underestimate this topic. In my day-to-day work it is, that our SMGW recognizes many small devices like heat-allocators or such. For each of these devices a seperate thread is started. We work hard to keep all of this in sync and optimize it. hope I helped you cheers Jan
Thread interrupt is a signal for the thread to stop what it is doing and return. (Actual stopping and returning logic is written by the user)
Generally the trade-off of low pause time is throughput, or total CPU used by the GC. One of the listed goals for ZGC is "No more than 15&amp;#37; application throughput reduction compared to using G1" so presumably it could use 14&amp;#37; more total CPU than G1. For user interactive applications minimum pause time is way more important, but for background number crunching high throughput with large pauses could mean the task finishes sooner.
I was able to get GraalJS working on a normal JDK and use it to replace Nashorn, but it's not officially supported. Vote for this issue if you want it: [https://github.com/graalvm/graaljs/issues/17](https://github.com/graalvm/graaljs/issues/17)
Have you ever touched swing? There's a UI thread and if you do any processing in it, the UI will freeze until the process has completed. If you don't use threads there your app will keep freezing at places, especially where IO is involved. And since UI is not responding, there's no way to stop a process before its done.
Or just to signal that we want to stop some background thread. Have a look at this: https://docs.oracle.com/javase/tutorial/essential/concurrency/interrupt.html
How much experience do you have? UI threads are not a good argument. That's clearly not what OP meant and I hardly doubt you're doing Threadmanagement of the UI threads.
Also with modern paradigmas like Reactive you can write non-blocking code and the container will take care of the rest.
It's not clear what the OP meant. Clearly in some cases splitting the task between machine cores gives an advantage. And in another case you just need to free up the initial thread from the processing responsibility, so it could respond to next command. In both cases you need threads. If he just meant passing a task to other thread within application server, which is already a multithreaded environment, then it usually doesn't result in speedup, true, but there are other programs out there in Java than applications running in app servers, which makes his 'rules' very limited to certain environments only.
Yes, it's very important as soon as you identify stuff that can happen simultaneously. I program a data collector for a startup. We collect data from several APIs using different API methods. The is absolutely no reason to make this linear when requesting from different APIs so you make it multi-threaded. You want to collect as much data as possible at the same time from different sources. Therefor you use multiple threads. Since the API requests require different classes that can each create their own objects there is no issue with concurrency problems - no synchronization necessary. One thing I use snychronized code blocks for is the session factory for persisting to the database. Multi-threading can lead to inconsistent states or even two or more factories created. This would be bad since it is designed as a Singleton Factory - one single access to save to DB. Sou you synchronize the Factory creation and no problem! It is only used once at startup so there is negligible performance loss!
Hey, EmboldenedEagle, just a quick heads-up: **therefor** is actually spelled **therefore**. You can remember it by **ends with -fore**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
I didn't know about amber-dev. It does look promising!
Main thing I've done with multi-threading is run a report in the background while the user does other things. I haven't really had to worry much about synchronization outside of the threadpool dispatcher itself.
Sorry I should have linked! But yeah there's some interesting stuff, worth subscribing I think.
Constantly, but with a special CompletableFuture substitute and an ExecutorService. We had to make a CF who's callbacks actually guarantee they'll be on the main thread
You know Futures run in different Threads, right?
Bad bot. https://www.merriam-webster.com/dictionary/therefor Also, what kind of rule for remebering something is that? "Therefore ends in -fore, you can remember it by ends with -fore". Duh...
I wouldn't say 'largely'. Nevertheless, knowledge of how threads work comes up from time to time. #The problem The problem with threads is this: You introduce an explosion of execution paths. Instead of a simple 'first java executes the first line of this method, then, it executes the second line of this method, all the way to the end', it becomes: "An arbitrarily chosen thread chooses an arbitrary number of instructions to execute, then, the VM will make an arbitrary choice as to whether or not to make any changes to fields this thread performed visible to other threads unless you've done a good job on reading the java memory model to ensure propagation of these changes". The former is easily understood. The latter is (largely) untestable and unfollowable, and therefore, fine strategy to write code that looks good, passes all tests, runs great on your machine... and bombs in production 5 days later, in a way that is utterly mystifying; no exception pointing at the problem. The problem won't be reproducible (do the same thing, click the same buttons, feed in the same data... and now it works fine. And then tomorrow when that important customer logs in, it'll fail again on you). Finding a bug like this is _literally_ on the order of 100 to 1000 times harder to find, so avoiding even one such bug is 'worth' having 100 others. Nevertheless, using all the cores in your CPU is [A] practical, in that just running it all on one can be unacceptably wasteful for performance, but more importantly [B] inevitable, because you don't write every line of code in your app yourself (you use libraries; the core java.* libraries at the very least), and THOSE will sometimes use threads. So, what is a programmer to do? My advice: Anytime you get to threading, try to push towards going big or going small; in both cases, you NEVER call ANY method on Thread (possibly you do some Thread.sleep in the 'going big' style), you have no need whatsoever of 'synchronized', no state is shared between threads, and you don't create new threads (some framework / library does this for you). # Going big Write or use a framework which is the execution framework for your own actual business code. For example, a web framework is such a thing: You start it, it does things, and then it runs your code. Generally in these cases you do not write public static void main, or you do, but all that your main does is fire up the framework whilst you configure it or pass to it a bunch of 'handlers', and then the voodoo black box does its work. Such frameworks are really good at setting up threading. This way each handler can be in its own little world; if a thread shares no data with any other, reasoning about threads is much, much simpler. Take webservers: Any given web handler simply does not get to interact with other handlers. It's not like you can ask the web framework for a list of WebHandler objects that you can then call methods on. There will still be a need to interact, of course. However, in such environments the interaction is very tightly controlled via specialized calls. For web frameworks, the interaction is usually 'I use an appropriate transaction level and interact (with transactions) with a database; my communications with other handlers works via this database, as they will end up reading what I write, and this database intermediate makes reasoning about the flow of data much simpler'. Other options are things like rabbitMQ. # Going small Reduce the code that needs to run multithreaded to the smallest possible thing it can be, and then write a single stream/collection based operation that uses threading to apply this operation to a great many inputs concurrently. The fork/join framework is the usual go-to here. Imagine you are writing a bitcoin miner. This operation can be described as follows: GIVEN: A list of a few million randomly generated codes to try, and exactly 1 input block. TASK: Write the hash into that 1 input block, hash it, and see if the hash ends up having the appropriate amount of 0s at the very end. You can do this by going small: Write a trivial method (it won't be larger than half a screen's worth, that's common in this 'go small' model) which injects the code into the block, hashes it, and returns an empty string if the hash is not suitable, and if you hit the jackpot, returns the block. Add to this a 'reducer' which takes in all results and returns only those that aren't empty. # Libraries In practice, especially for the 'going big' route, you may need to have a cache or some such that should be shared between whatever threads your webframework is making for you, but try to find libraries for this too. There are some tricks to interacting with such libraries. Generally, you have to go 'atomic'. For example, you can use the various collections in the `java.util.concurrent` package, but, the only guarantees it can make is that a single method call does the right thing. It cannot guarantee that a series of calls does the right thing. So, don't do this: if (concurrentMap.containsKey(myKey)) { String v = concurrentMap.get(myKey); operateOn(v); } because you have no guarantee that `containsKey` will be consistent with your later `get` call. Instead, find a way to do it in one call. Here, it's simple. Do this: String v = concurrentMap.get(myKey); if (v != null) { operateOn(v); } another example: Don't do: String v = myCache.get(myKey); if (v == null) { v = doExpensiveCalculationOfValue(myKey); myCache.put(myKey, v); } instead, do: String v = myCache.computeIfAbsent(myKey, k -&gt; doExpensiveCalculationOfValue(k)); it's even shorter to boot ;) # Lessons * Use frameworks, either large: Web frameworks, or small: fork/join, hadoop, or other map-reduce-style stuff. * thread-to-thread communication uses abstractions like message busses (rabbitMQ and such) or databases. * if you MUST have direct thread-to-thread interop, use libraries with collections types that are designed for this, such as `java.util.concurrent` and guava's `CacheBuilder` stuff. When interacting with these collections, know that consecutive method calls to them have no guarantees of internal consistency, so reduce it to 1 call. Be aware of methods like map's `computeIfAbsent` to enable this. 
it will depend on what your job is. enterprise web app - no, the servlet container handles it for you. ANy software of more technical software, yeah. We use synchronized blocks, async callbacks, scheduled executors.
They don‚Äôt have to - threads and futures are orthogonal concepts.
Vote for this bad boy: [https://github.com/graalvm/graaljs/issues/17](https://github.com/graalvm/graaljs/issues/17)
Agree, I try to use the highest level abstractions available and immutable state. So always Executor instead of threads, synchronized collections, Atomic\*, and other lib stuff.
Never. But then again, I maintain a library that has no business being multi-threaded.
&gt; Megacorp, IsSuccessful, and IsEvil. Whatever happened to good old cute animal and dog and kitten examples?
ZGC uses an algorithm which is very similar to C4 in Zing from Azul (whom I work for). Essentially, it intercepts every object access to ensure that the object is marked correctly (during marking) or the application gets the right address (during relocation). By doing this, GC can occur completely concurrently with application threads, thus no stop-the-world pauses. Since GC does happen concurrently you need a modern multi-core/CPU machine for it to work effectively.
I have to disagree on most exciting. From a personal standpoint it's definitely: "Enhance the java launcher to run a program supplied as a single file of Java source code, including usage from within a script by means of "shebang" files and related techniques."
How often I use Threads directly? Not really that often. However I'm frequently fixing production problems caused by people who didn't understand how to write Thread-safe code in the context of a multi-Threaded environment. I do a lot of Java web application work where I'm writing webapp code that runs in Tomcat or some other naturally multi-threaded JEE based web container. A perfect example happened just last week. A developer had written some code that did lazy-initialization of some expensive system resources that were meant to be "singleton" types of things (resource initialized one time then reused). But because he failed to understand the nature of how threading works inside a web container (basically each user request is a separate Thread) and failing to properly synchronize the initialization of the resources, his code brought the production server crashing down shortly after startup. How did it happen? Well a server restart was issued during business hours to address some issues with hung Threads due to DB lock contention (another common problem caused by failure to understand how to properly design applications that run in multi-threaded contexts). Users were actively using the system at the time the restart was issued but lots of help desk calls were coming in so the restart was deemed necessary to get the system responsive again while the DEV and DBA teams were investigating the possible cause. Well, when the server was restarting, user requests were queuing up in Tomcat waiting for the HTTP port to become open for business. As soon as it did, about 30 requests came flooding into the application all at the same time. This lazily initialized expensive resource that was supposed to be a singleton (was meant to be initialized by the first request that needed it and then never again) ended up actually getting initialized about one time for each request because it was not properly guarded. Needless to say within a couple minutes the system came down again due to resource exhaustion. If the restart had happened during off hours where there were few user requests going on, this bug would likely not have manifest itself and remained hidden indefinitely. But the stars aligned just right in this situation and it reared its ugly head. 
Wrong subreddit. You‚Äôre looking for /r/learnjava and /r/javahelp. 
Yes. Constantly (Android). RXJava
&gt; what developers can do with this. I use it every day. My primary project is a desktop GUI that does file manipulation, including encryption. There's a lot of stuff to juggle, and a bunch of it needs to happen in parallel. Involving third-party libraries is a pain because of the customer's particular deployment environment, so unless it's absolutely necessary (and not just "really convenient"), the smaller stuff just gets coded by hand rather than dragging in yet another dependency. &gt;Is multi-threading largely involved in your day to day work like synchronized methods/ blocks and what do you use it for? For most of the code, we don't need to use sync blocks, because proper data flow is already handled. In some places -- low level routines, and the start-up routines where there are few guarantees, and some utilities that really do get called at unpredictable times -- then we use sync blocks/routines. But those are always as small and contained as possible.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
That is not necessarily the case. If a feature is ready, it will make it in. Otherwise it has to wait for the next train. And JavaFX will be decoupled from the JDK in 11.
Just to share my experience. In last 5 years only once, and even then I used Futures. Needed to make couple of calls to database to retrieve all data for data migration, and it was quite a small service. Other than that, been working mostly with Spring and haven't had a need for any manual threading. Only need to understand the concept, like to not store any state in singleton beans, etc when you work with such frameworks. Tbh, if you are aiming to work for some company which develops enterprise web applications or something similar then I wouldn't sweat about it. I will be easier for you to understand it in future then cramping all knowledge now which you most likely won't be using anyways.
Not entirely grep --include \*.java -R "java.util.concurrent\|synchronized\|volatile" jOOQ/|wc -l 91
Thanks for explaining it so well. I'm still a student and I almost understood everything you said. I haven't really developed anything and going forward, as companies are coming in, I expect I have to be adept in these things to not mess things up. I'm very particular about doing things 100% right even if they're small. So I always want to learn as much as possible. Did you refer any books or any other resources for such concepts, like resource initialization and good programming practices? 
Most of the work I do at the moment tends to be within the context of http based api's. Concurrent requests are processed on different threads, but there tends to be little to no shared mutable state(state tends to be stored in a transactional database), so no real need to think about concurrency implications. That doesn't mean it's not worth learning how to write low level concurrent code, the experience will improve your understanding and help you reason around and avoid some pitfalls.
&gt; We also use Quartz Scheduler for some jobs so it's good to know about Thread.interrupt() etc. etc. Try having your jobs/backend routines separated from your clustered applications as well so you don't have to deal with those kind of stuff
I've done a lot of tools / desktop + android apps and well lots of random stuff over the years and you are right that you basically have to thread almost 100% of your applications if you want them to work 'right'. I sadly didn't start up knowing about GUI thread and background worker threads and used to get a lot of hard pausing on my gui stuff. While it varies on the style of job you are doing whether you're going to care about long running worker threads and syncing, at the minimum you are guaranteed to have to be using some form or task/asynctask style of backgrounding on any program you do, then further think about what is running on which thread. Further a lot of higher level frameworks are taking care of this for you or doing stuff under the hood in a threaded manner and you're going to want to understand at least conceptually what is going on at some point in time too. It's a topic you can't and shouldn't ever avoid learning as much as you can at any opportunity. And you are learning about it to make YOUR life easier, trust me. 
Neither Go nor Haskell's GC is "better" than G1 for any meaningful use of the word. A shitty blog post with a poorly constructed benchmark running heterogeneous programs in uncontrolled conditions against untuned garbage collectors is not evidence to the contrary. And there is no GC anywhere that I've ever seen that outperforms C4.
Implicitly - literally in everything i do (backend request handling). Explicitly - more often than seldom. Mostly due to fact that i have to work with multiple remote api/sites/running software, and also do the "maintenance" tasks inside the service itself. But that's somewhat unique project i'm working on atm. On most my previous projects even if i had to use threads - they were fairly isolated to the point of barely counting as concurrent programming (and more like a couple of independent subroutines running in the same VM)
I make sure everything I write is as deeply threaded as possible. \#JobSecurity
Yes, all the time. My company's application is responsible for a lot of concurrent processing, so threads and thread safety requirements are everywhere. As for doing things in a thread-safe way, ideally you would be doing what other commenters have said, which is have everything be stateless. Remember, mutable state is the only risk for a multi-threaded environment. And if you don't know what mutable state is, research that before doing anything else with threads. Threading is a hugely important part of Java, and one you should definitely have an understanding of if you want to pursue this professionally.
@Vertex... _sigh_
Nah, it's not that we are forced to deal with it -- we do it on purpose. We have an admin panel where we can manually launch scheduled jobs, pause / reschedule them... and also stop the ones that are already running: that's where interrupt() comes in handy.
Mutable and immutable? Basically you can't update the things/resources in an immutable object. So mutable state could mean any thread can update/remove the resource. Am I right? 
Never as a Java EE dev. The application container takes care of all the multi threading stuff. All I have to do is make sure I'm stateless. 
Could you elaborate on what does it mean to be stateless, if you don't mind? 
Are you serious ? Oracle recommends to use CPU and not PSU versions of JDK. It so recommends to use odd-numbered. That's why the odd (1, 3, 5, 7, 9) version is proposed first on their download page. Why do you JourneymanGM summarize something with a wrong information ? If you need the PSU (even) version, it's because CPU is not sufficient for your use. You would then probably not be on this forum only to understand the fundamental difference between the 2 versions. You beginner (at least not professionnal testing the limits of java), download the odd verion. (odd = 1, 3, 5, 7, 9)
They don't have to, but they almost always are. They exist just so you can asynchronously run something, carry on with your logic and then query the results. Of course you can run them in the same thread, but that's kind of missing the point.
Basically, you have to carefully choose the objects that have a persistent state between requests. The state of an object being it's properties values. That's because if you have request A that alter a variable, and request B is running in parallel, you're in trouble. 
For an alternative perspective on this, here is a talk I gave at Devoxx France a few months back. This talks about the current and future of Java but I've linked to the bit where I discuss changes to support etc. https://youtu.be/e-rk25Ji5Rw Obviously, this was before Oracle announced their new subscription pricing scheme but that's just a change in the way they charge for updates and support, not the fundamentals of how they deliver it.
Yes, for the most part. Mutable state is always instance/static fields that can be mutated. So non-final fields, or fields that are objects that can be mutated. Local variables are not considered state, so it doesn't matter if they are mutable. The number one thing to know about thread-safety is this: if you have mutable state being handled by multiple threads, it must be synchronized. And not just synchronized, but consistently synchronized on the same lock. If you can avoid mutable state altogether in concurrent code, that is ideal. Also, the mutable state you care about is not EVERY object. You don't need to worry about thread safety in every line of code just because you're having some multi-threaded behavior. Only if you have a single instance of an object that will be shared between multiple threads does it become an issue.
Yes. A problem with shared state is race conditions : where the order of execution amongst threads isn't chronologically garunteed so you might have a thread read before another writes, and when that happens the read is incorrect because the data is now stale.
Being able to do a clean shutdown is always a good idea.
True but very much overkill in a lot of cases.
This is a great summary, kudos! I'm saving it for the next time I need to explain concurrency to newcomers :)
Mostly a C# developer here. Use threads a LOT especially for REST endpoints. I haven‚Äôt written much Java since Java 7 and C#‚Äôs async/await programming makes it very trivial to write multithreaded code and pass data across multiple threads. In the real world though we rarely use shared data because of race conditions and the stuff you learn in CS. The most natural use is ‚Äúhere thread, take this data and run all the way to the end with it‚Äù. Final state is either rendered to screen or in a database. 
It‚Äôs not missing the point to use them without threads - they are also useful for things like non-blocking IO where there is no second thread but still an asynchronous action.
I use Swing. Hell, even IntelliJ is made with it! The stock Look and Feels aren‚Äôt the only ones available.
I work for a Big 4 and yea, it absolutely does. However, in some cases and languages (like Java ca C++) I am lucky enough to be using APIs and Frameworks that hide some of the low level detail for me so that I don‚Äôt have to manually create and manage locks, synchronize multiple consuners and producers and so on
Turns out to be the just the same 2x difference. https://www.dubs.tech/blog/benchmarking-nd4j-and-neanderthal-2/
He also does very good presentations at conferences. E.g. https://www.youtube.com/watch?v=pfXsQyToipM
You can keep using JavaFX, just bundle it "like" any third-party library / framework. Oracle wasn't really updating it for years anyway, now at last the development was picked up again.
Not quite: https://www.reddit.com/r/Clojure/comments/8uujlp/neanderthal_vs_nd4j_vol_3_clojure_beyond_the_fast/ Turns out to be more however you shuffle those numbers around. And, frankly, even 2x is good, since we started from Skymind boss claiming that ND4J si considerably faster than Neanderthal, to now "only 2x slower" is something that's considered a success for ND4J.
This was very helpful (especially the mnemonic), **therefour** I upvoted you, bot!
Most of the time a multithreaded solution is not the right approach, particularly for performance reasons. Multithreaded code is often very difficult to debug and is done as a micro-optimization. You'll usually just have a problem that's to just dispatch independent jobs without any shared mutable data where you generally don't have to worry about synchronizing data. Or, you'll be able to transform a problem so that you don't need to worry about synchronization. With Spring, all the threading stuff is handled through an annotation or the usual thread per request. If you want to do IO operations, the job on the current thread probably depends on it, so it's fine to just block until it's done. As far as sharing state between calls -- just let the database handle the synchronization. All in all, it's good to know the basics for the rare task that might require multithreading, but it's more useful to learn the higher level constructs like the tools your library gives you, `Future`s, and using Java 8's parallel streams.
The question was about "using threads" as in "starting them" or "managing them". Preventing race conditions is still a topic for libraries, of course.
Exectors are definitely the way to go. As a backend web developer, most of the time the servlet container manages threads. However, I've had a somewhat slow, uninterruptable stored procedure that I used a single-threaded Executor to control; there was a web API to check if it was finished for a particular task yet.
async/await is asynchronous code and not so much multi-threaded.
We‚Äôre going into language specifics than OPs general multithreaded question, but it‚Äôs absolutely multithreaded. Threads are the building blocks for async/await. How else did you think asynchronous programming worked? 
You only undermine your own credibility by putting out hasty benchmarks. 
i just started a new project on JavaFX. The separation of concerns between css, fxml and controller code is much nicer than awt/swing; and the OpenJFX project seems better suited to take on the evolution of the framework than Oracle ever was ( and, in your case, TornadoFX seems fun ).
We use RxJava, this way you can use threads without the headaches.
And the GUI builder kicks the snot out of Eclipe's WindowBuilder.
async/await is built off of the concept of event loops. An action that would block, is then suspended in memory (usually copying the registers and stack memory to the heap) and then the execution path continues elsewhere. Multi-threaded programs generally use blocking I/O, this waits until the action is completed then looks in the shared "work queue" and goes to the next work item. Thread pool event driven system. This is usually the optimal solution for many situations, but you have to care about thread synchronization in a different way to prevent deadlocks. This really isn't language specific the async/await concept is just a wrapper around the bookkeeping you have to do in event driven systems. I'm merely providing additional information to provide clarity to both OP and any onlookers. 
am java dev, can confirm, am also moron
Let's say that 11 (LTS), 12 and 13 are out. A security fix will be applied to 13 and 11, but not to 12. But a new non compatible feature will only be added in 13 and not backported to 11.
It looks like in your [submission](https://www.reddit.com/r/java/comments/8uvk9o/do_i_need_to_worry_about_finished_threads/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Why not just say you never really have to do so yourself instead of beating around the bush? 
&gt;How else did you think asynchronous programming worked? Could work like javascript.
I literally said that i do have to do it myself for the current project. Did you even read what i said?
Not in the generalized case. `async/await` is built upon on Tasks (and many other thing). Task are in turn are built upon Threads. Here is a very obvious demo of dispatching work to all processor cores regardless of IO latencies (i.e. CPU bound). ``` using System; using System.Threading; using System.Threading.Tasks; namespace HelloThreads { class Program { static void Main(string[] args) { for (int i = 0; i &lt;= Environment.ProcessorCount; i++) { Task.Run(() =&gt; { Console.WriteLine($"Thread {Thread.CurrentThread.ManagedThreadId} here."); }); } Console.WriteLine("Done"); Console.ReadLine(); } } } ``` Output ``` Thread 9 here. Thread 9 here. Thread 10 here. Thread 3 here. Thread 5 here. Done Thread 8 here. Thread 7 here. Thread 4 here. Thread 6 here. ```
It's kind of a loaded question as a lot of us use them even when we don't actively code them. Lots of server based libraries, like Spring, use threads quite a bit (particularly ThreadLocal), same with many of the popular clients for data retrieval. Even more obviously, your servlets are using giant thread pools to service incoming requests. Somehow I doubt that's what OP was asking explicitly, but none-the-less, I suspect that many people answering "almost never" here, are actually using threads without knowing it. Personally, I use threadpools a lot, but I'm sort of a one-off case as I'm the sole developer for my own company, with all of my own tech. Using threads willy-nilly on a server, particularly one in which multiple developers share, can wreak havoc on performance and lead to very inconsistent performance issues. Most of my services are very under-utilized, so it's a cost I can afford. I have one very core service that used to use threading that ended up blowing up the service (this is admittedly, really bad design). It's since been refactored and chunked out to the service level. Meaning, instead of this service partitioning the job and using multiple threads to get through it faster, everything is paginated, and clients throw smaller chunks at the service behind rate limited calls (Hystrix). Although, once again, this is not great design, and could benefit greatly from a queue. Truth be told, the service is running fine currently, so choosing the absolute perfect architecture is not a high priority, but may come when things slow down.
Java?
What you are saying is exactly what my post said: Oracle only recommends using the PSU (even) if you are being impacted by the bugs fixed by them. Otherwise, they recommend using the CPU (odd) versions. There is no need for personal attacks, especially when we are saying the same thing.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I remember how I had some serious weird behavior while using some using the default stuff from jdk. Things can get out of hand when you process communicating by socket, sending messages with a decent amount of data, etc... Actually, usually you would use a specific library to do something in particular. But at least messing with this help you better understand what going on under the hood.
Just in case it isn't obvious, immutable is not the same as not being able to perform operations on objects. The main difference is that mutators return a new instance with the updated value rather than modifying the original object. Check out `BigDecimal` or `java.time.*` for examples.
Depends on your type of applications but understanding threading is extremely important
I recently ended up using some multithreading to make a very trivial program less painful to write. # The Problem I needed to simulate a lot of dice rolls. Like on the order of billions of dice rolls, and I needed to do it a bunch of times for a bunch of similar but slightly variant conditions (and my knowledge of statistics wasn't good enough to just calculate the expected result). It kind of looked like this: public static class Calculator { private int attackerBonus, defenderBonus; public Calculator(int atk, int def) {attackerBonus = atk; defenderBonus = def;} public Results calculate() { int numOfTrials = 100_000_000; int successes = 0, failures = 0, draws = 0; Random rand = new Random(); for(int i = 0; i &lt; numOfTrials; i++) { int atkRoll = rollD20(rand) + attackerBonus; int defRoll = rollD20(rand) + defenderBonus; if(atkRoll == defRoll) draws++; if(atkRoll &lt; defRoll) failures++; if(atkRoll &gt; defRoll) successes++; } return new Results(successes, failures, draws, numOfTrials); } private static int rollD20(Random rand) { return rand.nextInt(20) + 1; } } public static void main(String[] args) { for(int i = 0; i &lt; 20; i++) { Calculator calculator = new Calculator(i, 0); Results results = calculator.calculate(); System.out.println(results); } } Now, no matter what, that's going to take some time, but you know what takes even longer? Starting each set of dice rolls only after the previous set has finished. That's a bit ridiculous. Fortunately, Java offers a very elegant solution to this particular problem domain: Executors. Instead of running all these calculations sequentially, I can run them in parallel, and save a lot of time: public static class Calculator implements Callable&lt;Results&gt;{ private int attackerBonus, defenderBonus; public Calculator(int atk, int def) {attackerBonus = atk; defenderBonus = def;} public Results calculate() { int numOfTrials = 100_000_000; int successes = 0, failures = 0, draws = 0; Random rand = new Random(); for(int i = 0; i &lt; numOfTrials; i++) { int atkRoll = rollD20(rand) + attackerBonus; int defRoll = rollD20(rand) + defenderBonus; if(atkRoll == defRoll) draws++; if(atkRoll &lt; defRoll) failures++; if(atkRoll &gt; defRoll) successes++; } return new Results(successes, failures, draws, numOfTrials); } @Override public Results call() throws Exception { return calculate(); } private static int rollD20(Random rand) { return rand.nextInt(20) + 1; } } public static void main(String[] args) throws Exception { ExecutorService executor = Executors.newCachedThreadPool(); List&lt;Future&lt;Results&gt;&gt; resultFutures = new ArrayList&lt;&gt;(); for(int i = 0; i &lt; 20; i++) { resultFutures.add(executor.submit(new Calculator(i, 0))); } for(Future&lt;Results&gt; resultFuture : resultFutures) { Results results = resultFuture.get(); System.out.println(results); } } Note how this required very little boilerplate to be added to the code, and it represents a tremendous speed-up in terms of the code's overall execution time. And this is just one example of a very trivial program which could have multithreading added for very little effort, and significant gains. Now, Java (and most other programming languages, like C++, python, etc.) also offer more low-level constructs, like directly creating Thread objects yourself and using constructs like `join()` or `synchronized` to get the exactly control you need. And if that's what you need, then that's what you need. But my example should show how easy it can be to improve an application's performance, given particular kinds of workloads.
It's important to understand and experiment, but to you'll find that most production apps use some kind of framework to deal with threading because it's one of hardest things to get right, and when it fails it is very hard to debug. Not just Java, but all languages
Too lazy to go into details, just count my reply as "a lot"
Took a look at TornadoFX, can't use it bc I'm using JDK10 and it's not compatible with it yet (although I wouldn't loose much by downgrading). I've seen it before I think while I was looking for Kotlin GUI libs. I guess I'll stick with JavaFX then, thanks.
&gt; The parent commenter can reply with 'delete' to delete this comment. There is a bug in your code mr bot.
Take your feud elsewhere.
I love CompletableFutures!
Or just use IntelliJ ...
The alpine port is being tracked on portola http://openjdk.java.net/projects/portola/ Here is a recent response from the project lead. https://twitter.com/MikaelVidstedt/status/984920426655526912
Have a look at Griffon, it's a Spring like framework for desktop development which should help you decouple Swing, Java FX or AWT. Also if you end up using Swing try MigLayout, it is the Layout Manager that everyone should use.
Hugoeustaquio wrote another article about eclipse features he wish to have in intellij. And hugoeustaquio wrote that on the second paragraph. 
Directly - I do, but not significantly. Indirectly - all the time. By this I mean the fact that Tomcat runs a threadpool and every concurrent request is in a different thread. This means you've got to be aware of threading details to avoid problems with anything that's shared across the entire app...
&gt; ‚Ä¶ you manually go and import the methods you need, then organize imports and suddenly you need another one, and the .* you naively added has been changed to particular imports ‚Ä¶ Java¬ªCode Style¬ªOrganize Imports¬ªNumber of static imports needed for .* lets you control that under Eclipse, if you prefer the .* style. Use whatever IDE you prefer, of course, but sometimes these options lurk somewhere unnoticed. 
Any enterprise application worth its salt is multi-threaded. I do in fact love the java 8 executor makes my life easy.
In web dev you pretty much never write threading directly, but you're constantly writing stuff that runs on threads - each request is on it's own thread. 
We use threads for lightweight background control stuff. We don't have a sophisticated scheduler or framework built, so threads end up causing to whole program to abort if a connection/loop is running too long, or to do stuff like refresh log files. Most of our thread like behavior is in multiprocessing (yay Unix), main programs are single monolithic programs spawned by OS, but threaded elements of the programs kind of work like a subconscious and tell program when to go to sleep or vomit without IPC doing it. A lightweight thread is watching timers/semaphores/admin output while a single main thread is doing the real work.
the only thing I miss is eclipse can smartly place ; 
TIL REI has a software developer
It‚Äôs been a while since I used Eclipse but you used to be able to TAB out of auto generated quotes, parens, or brackets. It was so nice. Just tab, semicolon, next line. I miss that so much. 
It takes a surprising number of software engineers to run a good size e-commerce site. 
*IDEA autocomplete triggers automatically when you start typing* God I hate that. *parameter labels* I guess he means the little grey parameter names beside the values. Obnoxious and unnecessary, given that all IDEs will show the parameters above the method. The *one* feature that Eclipse genuinely needs to copy is the ability to go back through multiple edits. This is dead simple and incredibly useful. Someone requested this 2 minute change back in 2004: https://bugs.eclipse.org/bugs/show_bug.cgi?id=72773 ...and they still haven't bothered.
Agreed. Just didn‚Äôt occur overtly to me prior to this. #SoftwareIsEatingTheWorld
AWT is a full blown nightmare. JavaFX is 10x better. 
Try ctrl+enter?
5 Features Visual Studio Should Copy From IntelliJ IDEA - But Microsoft is too incompetent. FTFA
Super cool. Have you guys looked at Jenkins' official [configuration as code plugin](https://github.com/jenkinsci/configuration-as-code-plugin)? 
That didn't exist when we first created this, we're just open sourcing it right now. However I've been watching this and I don't like the limitation of yaml. Having the programmability of groovy has really come in handy for us and also made things like integration with aws apis to configure things easy which would be impossible with yaml. 
That's 2 keys stroke compare to just 'tab' in eclipse
I agree!
I think it's just so that you don't have to mix-and-match instantiation styles. For example, let's you have 3 dependencies, of which 2 are straightforward, and one needs a qualifier. You can autowire/inject all three, rather than doing something complicated. Also, qualifiers don't have to be different classes. You can make two beans of the same class/interface. For example, let's say your application interacts with 2 different databases. You might represent them as two datasources with different names, and thus it becomes important as to which datasource you want.
Or String itself. 
This is coming in the next release of Intellij :) https://blog.jetbrains.com/idea/2018/05/intellij-idea-2018-2-eap3-advanced-contract-annotations-and-more/ However, in your particular cited situation Intellij has a better shortcut "complete statement", default ctrl+shift+enter.
It can be useful when you need to mock something locally that you have a real implementation for in production. So you declare two beans with the same qualifier, but one of them is marked as @Primary and activated only with a specific Spring profile ‚Äúproduction‚Äù: @Profile(‚Äúproduction‚Äù). In that way it gets automatically picked up in production. I‚Äôve found that activating different implementations based on the profile is, for me at least, the most common scenario.
lol. he wanted to be serious and now you're coming with the joke answer.
I rarely use it and it always feels wrongvwhen I use it. You use it when you have more than one instance of a class and each time depend on that specific instance.
I've replaced Eclipse with Intellij and it's better but it's not that big of a difference. Also I wish that Jetbrains copied select block between "" () {}[ ] with mouse from Eclipse. I know you can use keyboard shortcuts but this is very practical and it's behaviour is consistent compared to Intellij.
5 is now in eclipse photon with this plugin. https://github.com/angelozerr/jdt-codemining/blob/master/README.md
Try kotlin :)
Check out Javafx since Swing is depreciated
Why is that everytime someone only just mentions a semicolon, there is a Kotlin fan suggesting to switch to it? Nobodys going to switch to Kotlin only because it has no semicolons. duh.
Injection does more than just hiding classes behind interfaces, for example it handles injections your bean might use too which means you don't have to build the object before you use it. Qualifiers gives you the ability to choose for example what cache to inject behind the same interface but you don't have to know what dependencies it needs, which might differ between implementations. 
If you think it is the calling class's resposibility to know the resource name which the container will provide, it is tightly coupled because the calling class now need to know the existence of the container. In this way, you program your class to work arcording to the container. =&gt; I see the container have a resource with the name xxx, i want to use it in my class /(the wrong way) But if you think in the reverse way, it is the container's resposibility to provide the resource with that name for the calling class to use, it is not tightly coupled because the calling class dont need to know about the container. =&gt; I need a resource with the name xxx, can you provide me ? (the right way)
&gt; Injection does more than just hiding classes behind interfaces Using interfaces when there's only one implementation is IMHO a dogma anyway. It stems from back when we didn't have tools to mock concrete classes. SomeInterface and SomeInterfaceImp is IMHO a code smell. 
Look at the status bar, is IntelliJ "collecting VCS information" or updating it? I think during that time, it's not available.
Look at the status bar, is IntelliJ "collecting VCS information" or updating it? I think during that time, it's not available.
Note, you specify bean name, not a class name. So actual impl is still provided by DI framework. And it could be simply replaced in integration tests or other profiles. 
Well sometimes its hard to decide if the class is going to have more implementations or not but generally I fully agree with you.
yeah, actually you can
Spring, not Swing :)
I have write a lot of Python which don't have semicolon either. But I never had the wish that Java should drop semicolon, this thought just not occur to me ( the most feature i wanted from Python is multiline string). I think I don't mind to enter a semicolon as long as it's one stroke. But I'm learning kotlin :p
I love the parameter labels :) Helped me more than once when someone‚Äôs mixed up the order of arguments 
Any benchmark for Epsilon GC? (i.e. NoGC?)
Take your hand off the mouse and unleash your potential!
JetBrains make a .NET IDE called Rider. Down with visual studio!
Thanks, very interesting. Any tips for marketing? Also, if you don't mind me asking, how much revenue are you generating and how long did it take? My product has a similar niche, nothing to do with databases or SQL, more a management tool for dev teams.
shhhh. The shills will hear you.
btw, where can I download a stable build of OpenJFX for windows/mac/linux?
I rule of thumb that I'm following in order to avoid needless and confusing abstractions is that I don't generalize a solution before there is three concrete usages of the generalized solution.
Is there a name for the logical fallacy / rhetorical maneuver where one mistakes opposing opinions by different individuals for a group's shared opinion and uses that to discredit the group's credibility? Anyways, author here, and I never said Java would turn into JavaScript, [quite the opposite](https://blog.codefx.org/java/java-10-var-type-inference/#No-This-Is-Not-JavaScript).
You can move to OpenJDK. [AdoptOpenJDK](https://twitter.com/stevewallin/status/964515481003667456) will backport changes to its LTS.
I'm not using this to discredit anyone's credibility. I'm just noting a phenomenon that not *everyone exhibits*, but groups do, as an emergent phenomenon in response to change.
I use kotlin last 9 months after 7 years with Java. And everytime I need to write something in Java, one of the pains I feel is this semicolon thing. 
Yeah, but they have them at the top. You can see all the overloaded methods together.
I only hate them when they make it seem that my line is too long.
You don't understand Kotlin fans. We are *rabid*. Dogmatic in our passionate vision of a world where Java has been replaced by Kotlin. Because we realize there is, literally, nothing Java does that Kotlin doesn't do a thousand times better. Whether it's data classes, escaping from the dreaded 'null', or semi-colons -- Kotlin is literally a thousand times better. Don't be upset about it, /u/divers1 is just preaching the gospel: Java drools, Kotlin rules. (Or, maybe, that smiley most likely means /u/divers1 was just poking fun.) (P.S. Maybe I am too.)
Checked exceptions are indeed an arguable design decision, and this is why Groovy, Scala, Kotlin... don't. A lot of modern languages encourage the use of a Result type instead, like the Either monad in functional ones. I'd suggest you to have a look a Kotlin. While not perfect, it was designed by people who know Java inside out, and beyond the syntactic sugar, it does attempt to fix some poor design decisions. (Note, I have no horse in the modern Java vs Kotlin race, I'm a Scala developer myself).
This is completely besides the point, But your method signature should only ever have a single exception. Catch whatever may get thrown in your method and throw your app specific exception. Sorry, just bugged me when I read that. üëç
I freaking love checked exceptions, especially when you go to write some Java 8 lambdas and have to pollute the syntactic sugar with try...catch blocks if you have code that throws checked exceptions. /s, emphasis on /s. Of course, I work with a code base that loves spewing exceptions instead of meaningful handling (or add exceptions to method signatures even for something that never throws exceptions, but those are easy to fix). Most of my ailments are for things other languages have or do better, especially C#. Gimme properties, extension methods, and vars!
Come on, really? This comment from someone who clearly didn't read the article is gonna get all these upvotes, from other people who probably also didn't read it? Did people come to this post just to do that? The intellij fanboyism/tribalism is just annoying. Feels like marketing.
I was actually looking for something like this a long time ago. Glad someone done that.
Somehow I find Kotlin fans similar to Apple fanboys. It's like a religion for them. I don't know why Kotlin fans think they should convert everyone to using Kotlin. Yeah, we get it, it exists. However, they do fail to point out a lot of drawbacks for Kotlin, that Java excels in, which one of them is readability. (I'm not going to get into that as it is very opinion based, and I don't have all day) The official support for it on Android by Google was just oil to the fire. I hope for a world where everyone can coexist without trying to push your programming language agenda on them. They are just a tool goddammit
Java is highly outdated and a big reason why it‚Äôs dying faster than ever is because of what you described. It‚Äôs clunky. Verbose. Fix one compiler error, 100 more surface. Exception handling. You name it. Lol: https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition Intended to be a joke but coincidentally is how Java really is. 
This is a java subreddit so I'm not going further into it. I did more research and found this to be basicly correct.
I usually throw a RuntimeException when catching an Exception, because it's an unexpected condition that shouldn't happen.
I don't really understand the fanboyism -- but I do like Kotlin. Java is a mediocre language. It's tedious, pedestrian, and clunky. Switching to Kotlin is like swapping a 1998 Camry for a 2012 model. It's not going to radically transform your driving experience, but it's more comfortable and has conveniences and features the old one didn't. 
I don't like the BigDecimal syntax. I want to write something like BigDecimal a,b,c; a = b+ c; Those function calls make even easy algorithms very unreadable.
Depending on what you it, it may be that you won't use threads directly, but you are still running in a multi threaded environment and you need to be mindful about that (for example a web app). No, don't use synchronized blocks if you can help it. And you can usually help it as there are lock-free structures/collections out there for you to use. If you see the synchronized keyword in a java program, odds are high something is terribly broken there.
Does anyone actually get compiler errors in 2018 rather than just getting rid of the red squigglies?
Thanks, this really helped it click; I see what you mean. Sorry for the late reply but the help is very much appreciated.
I use threads all the time. I develop and maintain a suite of applications that aggregate data from numerous external scheduled and real-time data sources with varied delivery methods. These data sources exhibit a wide range of dependability and responsiveness. The business tasks me with keeping things as responsive for our users, both desktop and mobile. Over time this has taught me a lot about fault tolerance, networks, concurrency, race conditions, etc. The major downside has been there are areas of our core code base that only I can work in with any semblance of efficiency. Unintentional job security :-(
Interesting, this is the first time I‚Äôm hearing this, curious what others thoughts are. I would think even with a single implementation the use of an interface would be desirable to protect the calling class from a potentially volatile implementation.
I do the exact same thing and it works great. 
That‚Äôs true but operator overloading done poorly is even worse. Circle a; Square b; var c = a + b; Wat?
no problem, I found working with json in java without multiline support was too cumbersome.
Just some friendly feedback (I don't use GSON) since I clicked through, the .end() part of the API is a little clunky. Could you rework it to be more functional, something like this? [https://medium.com/beingprofessional/think-functional-advanced-builder-pattern-using-lambda-284714b85ed5](https://medium.com/beingprofessional/think-functional-advanced-builder-pattern-using-lambda-284714b85ed5)
Hi guys! I posted this on /r/programming initially, but I thought it may be better suited here as Eclipse is most used for Java. I made a simple bash script that allows us to use a working terminal from the eclipse console. It launches in the directory selected in the navigator! It works really smooth, but there may be some bugs. It should also work fine on linux but I can't test right now. Part of my motivation for putting it on github is so that you guys can improve on it. It's hecka simple so anyone interested with minimal bash knowledge should be able to improve it. Hope some of you guys find use for this!
How well this lambda pattern work with multiple values? There, the pattern is used with setting fields that are static, but here you can have any number of properties defined at runtime? 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Thanks for the tip, very much appreciated !
Thank you, I'll give it a try. However, sometimes the decision to use this or that language is beyond me.
Java is not dying. It is bigger now than ever. But the whole IT world has grown massively in the 20+ years since java was born. It has more competitors than ever, but it still makes sense as the default language for many companies It's not perfect. It's very middle of the road in many ways. But that has made it mainstream, and mainstream languages have abroad spectrum of developers. Hence some questionable coding practices. But that does make it a dying language. 
It's complicated. First, the public method signatures of a concrete class are just like an interface. They're a contract to the outside world. The class may change radically, but the public method signatures won't. Or if they do, the interface will probably change as well. Second, there is a software principle called YAGNI (You Ain't Gonna Need It) which basically says that it's a mistake to make things over-complex at the start. Making an interface that only ever has one implementation is a clear violation of YAGNI, and does over-complicate your code. It also makes day-to-day work in your app a bit annoying. For example, if you use your IDE to "jump" to a function declaration from its use, you'll end up in the interface, not the actual code. So navigating your code becomes more tedious than it should be. However, if you use interfaces, Spring can use JDK Proxies when constructing your beans. This is the recommended method, and tends to work smoother and cleaner than the other methods of creating proxies like cglib. You can run into trouble with concrete classes if you use annotations like @Transactional or Spring Security, or have circular dependencies. In the end, I use interfaces so Spring proxies work cleanly with minimal surprises. But in a perfect world, I would prefer to inject concrete classes and not have the duplication of interfaces.
[I‚Äôm an outdated Java developer.](https://media.giphy.com/media/94EQmVHkveNck/200w.gif)
Well... I didn't start this thread to go flamewar on a forum that must have many many fans of the language. While I can't say I like Java, it seems to be a language used in interesting projects I use (like Elastic Search, but possibly many more), so it must do some things right... But yes, I struggle (and fail) in writing Java code that is not clunky or verbose, so I understand what you mean.
I agree that checked exceptions can be annoying. API designers tend to use them so that their method signatures must declare them, in that way they are forced to appear along with the method's parameters, name, and return type. I don't necessarily think that is a good reason to throw a checked exception though. Use the following guidelines: - only attempt to catch an exception if you can actually recover from the error or retry the request - if you cannot provide meaningful recovery, as others have suggested catch checked exceptions, and rethrow them as runtime exceptions. This will will not force callers of your method to add a catch or declare throws. You can still choose to add a throws clause to your method signature to make it clear that your method can throw exceptions, but since they are runtime exceptions, it won't force the caller to deal with them. Many popular Java frameworks design their APIs to only use runtime exceptions so that they do not force user's of their classes to handle exceptions. 
Thank you for the guidelines, very much appreciated, especially since I have to write a lib that will be used y other apps.
Any plans on reading utlities? A few ideas: * Smart/inferrable mapping _(as opposed to having to specify a type token)_ * Visitor pattern reader
not a bad ideas, I will explore them! I need this for work, but no reason to not improve on the library!
2 things I wish they'd never add to java: operator overloading and var.
I have trust issues regarding red squigglies so I occasionally get compiler errors \^\^
You could do something like this: JsonThing.create(obj -&gt; { obj.put("texts", array( "Welcome to the hotel", "User %s!"; ); obj.put("singleton", true); obj.put("configuration", obj -&gt; { obj.put("ip", "127.0.0.1"); obj.put("port", 1234); obj.put("user", "johnWick"); obj.put("password", "doggo"); obj.put("isAdmin", true); obj.put("maxResponseTimeSeconds", 1.5); } } 
Woops read title wrong Friday nights right... lol
If you don't mind, could you expand upon your usecase? I can't think of a scenario where I wouldn't just use pojos because eventually I'm going to be having to read not back as well. Maybe I'm missing something.
personally I implemented it because there was a need to pass created jsons to elasticsearch (such as generated mappings) which could be done with pojo (which would have a problem that every change would have to be done in pojo and in the code using the pojo just to generate json, also to fill pojo you would have to create either huge constructors or use methods or build your own builder which is here included) or with string constants (that's what we had in the project, constants with patterns that were replaced with actual data). Java builder pattern seemed much better than both these options so I implemented it. This builder is specifically made just for generating json data (either string or JsonElement) for such times.
I will consider it as an alternative but it would make project java 8+ (right now it should be compilable at lower java versions), which isn't inherently bad.
What‚Äôs wrong with `var`? It can only be used in implementation contexts, and the same static typing still applies. Also, the architects said they would consider adding operator overloading if they could restrict its context. A class like `ComplexNumber` would be a perfect fit for operator overload, but not `Shoe`.
&gt; The biggest gripe is that you need to name lambda parameter differently each time you nest, which is kinda pain. Yeah, but it kind of makes sense since you name the property anyway. &gt; it would make project java 8+ Lambdas are just interfaces, so they would still work with java7- (although with a terrible syntax). You could offer both versions?
I don‚Äôt know how you think the language is dying, as there is a lot going on in the community. [Project Amber](http://openjdk.java.net/projects/amber/) will add productivity features, [Project Valhalla](http://openjdk.java.net/projects/valhalla/) will add value types and generic specialization, [Project Loom](http://openjdk.java.net/projects/loom/) will add continuations and fibers, etc. The language is not just standing still. And with this new release cadence, these innovations will be delivered to us even faster than before.
We already have [`var`](http://openjdk.java.net/jeps/286). The language architects said they tried to add properties in the past, but no one could agree what ‚Äúproperties‚Äù meant.
&gt;What‚Äôs wrong with var? It can only be used in implementation contexts, and the same static typing still applies. Yeah, but it has potential to greatly harm readability. The C# community is packed to the gills with code that basically has no formal types in concrete methods. Couple that with certain devs who put 80 lines in a single method...disaster
Like any feature, it can be misused. I like this quote from the JEP: &gt; Like any other language feature, local variable type inference can be used to write both clear and unclear code; ultimately the responsibility for writing clear code lies with the user.
I mean I accept that argument it's just it tends to happen a LOT with this particular feature. Your point on operator overloading is interesting. 
That's a weird dogma I never heard of before and I hate instantly.
It‚Äôs pretty standard and should be found in any of your static code analyzers. https://softwareengineering.stackexchange.com/questions/263874/why-shouldnt-a-method-throw-multiple-types-of-checked-exceptions
The only thing I really really wish Java had is multiple return values from methods. It is quite handy in Groovy and Kotlin. 
Time will tell I guess with Java code. And they haven‚Äôt really talked about it much. Someone asked about it during a Q&amp;A session. I just know that operator overloading has been an unmitigated disaster in other languages, and they want to do it right.
Both Swing and JavaFX are perfectly viable GUI toolkits. Swing is mature and well documented. JavaFX is the replacement for Swing but the one drawback to JavaFX is it isn't nearly as well documented as Swing (it isn't even in the same ball park). As far as JavaFX no longer being bundled that is just so JavaFX releases aren't tied to JDK releases. They can evolve separately an releases of one aren't held up by the releases of the other. Using JavaFX as a separate dependency isn't a concern in the slightest. Since JavaFX is the replacement for Swing you should probably use JavaFx, but Swing is perfectly fine to use if you like a mature and well documented toolkit.
No one has used AWT directly for at least 18+ years. Swing depends on some AWT stuff behind the scenes but you don't have to concern yourself with it. Comparing AWT to JavaFX is non-sensical.
&gt; But if you end up using Swing try MigLayout, it is the Layout Manager that everyone should use The built-in layout managers work great. No reason to use a 3rd party layout manager. 
MigLayout is just super convenient for laying out many elements
You could always box them, but that comes with a cost. Value types will likely be great for this.
&gt;Java is highly outdated and a big reason why it‚Äôs dying faster than ever is because of what you described. And what exactly do you have to back this claim? People have been claiming Java is dying for so long I don't know how anyone takes it seriously. Every programming language has it flaws and tradeoffs. 
That's hardly overkill when you're working with microservices
Fram a Java language perspective: [Concurrency in Java](https://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601) [Effective Java](https://www.amazon.com/Effective-Java-3rd-Joshua-Bloch/dp/0134685997/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1530391493&amp;sr=1-1&amp;keywords=effective+java) 
He's a JavaScript developer, he probably got here because he can't tall difference between JS and Java.
Why to make Eclipse as good as IDEA if there's a JetBrains masterpiece right under your nose? :)
Implemented it in development branch for version 1.1.0: https://github.com/Enerccio/gson-utilities/tree/v.1.1.0
It's bundled in the JDK until 11.
Exactly this. &gt; the one drawback to JavaFX is it isn't nearly as well documented as Swing (it isn't even in the same ball park). Iv'e done work on documentation for OpenJFX. Would like to hear what you would like to see improved. A long/detailed list is fine (since you seem to have a large gap to fill :) ). You can reply either here or submit an enhancement request directly to Oracle.
&gt; However, they do fail to point out a lot of drawbacks for Kotlin, that Java excels in, which one of them is readability. [Unlocking Traits With 'var' In Java 10 - blog@CodeFX](https://blog.codefx.org/java/traits-var/) Anyone can write unreadable code in any language. Java's verbosity usually forces your code to be more readable, but it's not a guarantee. Well designed code is readable no matter the language, and well designed Kotlin code just happens to express the same ideas and concepts in less code than Java. oh, and please tell me which one is more readable: package com.example; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder; public class Example { private String name; private long age; public Example(String name, long age) { this.name = name; this.age = age; } public String getName() { return name; } public void setName(String name) { this.name = name; } public long getAge() { return age; } public void setAge(long age) { this.age = age; } @Override public String toString() { return new ToStringBuilder(this).append("name", name).append("age", age).toString(); } @Override public int hashCode() { return new HashCodeBuilder().append(age).append(name).toHashCode(); } @Override public boolean equals(Object other) { if (other == this) { return true; } if ((other instanceof Example) == false) { return false; } Example rhs = ((Example) other); return new EqualsBuilder().append(age, rhs.age).append(name, rhs.name).isEquals(); } } vs ```data class Example(var name: String, var age: Long)```
&gt;is this "checked exception" thing still annoying for experienced Java programmers? In most functional languages, you have an Either&lt;A,B&gt; type. Java's standard library doesn't have one, but that doesn't mean it can't support one. I wrote an Either&lt;A,B&gt; type in Java, specifically for handling checked exceptions. It's in a library called [trylambda.](https://github.com/nullterminated/trylambda) It requires Java8+, but it turns try { URLConnection conn = url.openConnection(); } catch (IOException e) { //handle e } into Either&lt;URLConnection, Exception&gt; result = Try.either(() -&gt; url.openConnection()); This is particularly useful in lambda streams where rethrowing the IOException as a RuntimeException would terminate stream processing. With an Either&lt;A,B&gt; type, you can continue passing results down to the end of processing As, where you can then handle all exceptional Bs in one place.
At least with a well-behaved implementation. Reactive streams project has a specification: https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.2/README.md#specification There's also a technology compatibility kit to verify them: https://github.com/reactive-streams/reactive-streams-jvm/tree/master/tck
&gt;https://github.com/Enerccio/gson-utilities/tree/v.1.1.0 That was fast
Nice! I don't agree with the `putObject` and `putArray` methods, just having `put` is cleaner and more in line with JSON. Why do you want special methods for them?
couldn't you just use a hashmap ?
If they told me we could only use Vim. 
Not OP, but I'm working \*a lot\* with JSON passthrough with enhancements - think API gateway that enriches payloads with extra properties. There are 30+ upstream services, and if we were using POJOs, it would be a full-time job for an engineer to track down changes in payloads and adapt to them (not to mention that stuff would break). 
Hum, that wouldn't autoformat well. How about this? String value = object() .property("texts", array( "Welcome to the hotel", "User %s!")) .property("singleton",true) .toJsonString(); Where `object` and `array` are static imports from `JsonBuilder`. Overload `property` to accept the specific types that you want, including `JsonObjectBuilder`/`JsonArrayBuilder`. The only thing that you lose is compile-time type checking on the `array` constructor, but you could go to a clunkier version with `array().value(...)`.
because it does not work well with java 8, ie both IArrayBuilder and IObjectBuilder have similar signature so you would have to specify which one you want each time you use it...
it's incredibly cumbersome to use them for any larger manually created JSON. 
Debatable
You can use something similar in new version 1.1.0, but personally I like the builder because you can format it to resemble the actual json structurally and it all looks like single builder. The only annoyance is `end()` which is necessary because you have to end the array/object to differentiate between objects. 
Don't trick me into discussing this here, as I've already said I'm not going to. And personally (personally!) I don't like the data class declarations. I think that explicit is always better than implicit, and this means that I'd like to see the declarations that a class contains. **Even if they could be deduced from the class declaration header.** But that's just me. Everyone has their preferences. (And I think for newcomers to the langugage, its easier to just see the class members instead of having to google what they contain based on the declaration.)
well consider this: ``` Gson gson = new GsonBuilder().setPrettyPrinting().create(); String value1, value2; // @formatter:off value1 = new JsonBuilder() .setGson(gson) .object() .property("configuration").object() .property("allowedIP").array() .string("127.0.0.1") .string("::1") .string("mydomain.com") .end() .property("login").string("root") .property("password").string("password") .property("settings").array() .object() .property("name").string("idle") .property("max_download_window").number(10000) .property("max_connection_timeout").number(30000) .end() .object() .property("name").string("low") .property("max_download_window").number(5000) .property("max_connection_timeout").number(15000) .end() .object() .property("name").string("high") .property("max_download_window").number(2500) .property("max_connection_timeout").number(10000) .end() .end() .end() .end() .toJson(); // @formatter:on JsonObject root = new JsonObject(); JsonObject configuration = new JsonObject(); root.add("configuration", configuration); JsonArray allowedIp = new JsonArray(); configuration.add("allowedIP", allowedIp); allowedIp.add(new JsonPrimitive("127.0.0.1")); allowedIp.add(new JsonPrimitive("::1")); allowedIp.add(new JsonPrimitive("mydomain.com")); root.add("login", new JsonPrimitive("root")); root.add("password", new JsonPrimitive("password")); JsonArray settings = new JsonArray(); root.add("settings", settings); JsonObject idle = new JsonObject(); settings.add(idle); idle.add("name", new JsonPrimitive("idle")); idle.add("max_download_window", new JsonPrimitive(10000)); idle.add("max_connection_timeout", new JsonPrimitive(30000)); JsonObject low = new JsonObject(); settings.add(low); low.add("name", new JsonPrimitive("low")); low.add("max_download_window", new JsonPrimitive(5000)); low.add("max_connection_timeout", new JsonPrimitive(15000)); JsonObject high = new JsonObject(); settings.add(high); high.add("name", new JsonPrimitive("high")); high.add("max_download_window", new JsonPrimitive(2500)); high.add("max_connection_timeout", new JsonPrimitive(10000)); value2 = gson.toJson(root); ``` Both `value1` and `value2` is the same but consider the benefits of the first approach: a) much more readable: you can clearly see the structure of final json unlike in the second where you have no idea how will final json look like until you analyze it line by line b) much more editable: you can simply add more data or do transformation by copy paste. With second you can do as well but then you have to rename everything. c) less wordy: you don't have to name your intermediate inner objects/arrays. But I mean it's only my opinion and why I made this utility. :) 
But what about open jdk?
&gt;That's also why InterruptedExceptions thrown by methods shouldn't be just ignored, but actually handle the command by returning and canceling the process properly. Better check if you really need to shutdown. Spurious wakeups are a thing.
&gt;The separation of concerns between css, fxml and controller code *Cries in SWT*
Based from /u/tipsypants Maybe something like JsArray.create( JsArray.create(), JsEntry.create(42), JsEntry.create(42.0), JsObject.create( JsObject.entry("", true), JsObject.entry("", "Hello Humans Beep Boop"), JsObject.entry("", JsArray.create()) ), JsObject.create( JsObject.entry("", ""), JsObject.entry("", ""), JsObject.entry("", "") ) )
But spurious wakeups don't throw interruptedException, do they? They just wake the thread up from sleep, that's why you usually check condition in a while loop, not if loop.
I'd use a custom `RuntimeException` rather than the base class itself, but that's generally what I do too.
As an example of bad operator overloading, C++ lets you overload the comma operator. 
&gt; have to pollute the syntactic sugar with try...catch blocks The simple solution to that is to move the try-catch block into a separate function and then use a method reference in the lambda.
Don't worry; there's always one Java hater that spends their time browsing /r/java. 
Awesome - thanks for the info /u/theflavor 
&gt; Don't trick me into discussing this here, as I've already said I'm not going to. "I don't like something lalalala I can't hear you" :/ other than that I have no issues with your comment, if you really believe that every getter, setter, toString, hashCode and equals being written out helps understand what the class actually does, then that is indeed your opinion. and you make a great point for newcomers. I agree that Kotlin only shines in the light of previous Java experience, not as a newcomer language.
IllegalStateException is fine for "this should not happen" kind of stuff.
Operator overloading would work well with value classes. Date + Duration = new Date.
Is that commutative? Should Duration + Date be legal?
There's one for every language I guess \^\^
&gt;"I don't like something lalalala I can't hear you" :/ You're probably not going to believe me, but I do have arguments against the readibility of Kotlin. However, it would require significantly more time to write them down, than I have motivation to convince strangers on the internet. I actually planned to write up a little article/essay about the readability problems of kotlin on r/java, but I haven't managed allocate the time to it. I hope to be able to do it in the future.
please let me know when you write that article, I'm definitely interested if you really have some arguments for the *language itself* having readability problems. I agree that some syntax possibilities are very confusing (```?.{ return xxx() }``` can be confusing to newcomers) but if you have some good points against the language (and not the programmers writing the code), I'd love to hear.
Will do.
Why not // All constructors are static methods import static com.example.JSON.*; And then object( property("a", "b") property("b", array( object("x", "y"), object(), object( property("test", true), property("abc", false) ) ) ) Seems more readable and writable to me.
OpenJDK includes OpenJFX and you can build them yourself from the source. If you want a stable build ready for you then download the Oracle's JDK (which is 99% the same as OpenJDK) which includes JavaFX (which is 99.9% the same as OpenJFX).
They don't care about LTS or not. There weren't any features ready, the closest one was RSL, but there were few issues that were still being discussed on mailing list so it couldn't be ready before the deadline. 
&gt; Any tips for marketing? Tons. Where to start? :) For me, content marketing worked best. PR through conferences did, as well, but probably less than content marketing. Great for networking, though. Advertising (Google, FB, reddit) didn't work at all for me, but it might be different for you. Twitter worked really really well, Facebook and Mailchimp not at all. Find yourself some really good marketing blogs and read them all. They're gold, and much more thorough than what I could tell you - I only know what worked / didn't work *for me*. &gt; Also, if you don't mind me asking, how much revenue are you generating and how long did it take Roughly 300k$ / y after 5 years in business, growing steadily thanks to yearly revenue and still increasing market share. The first year sucked, because there was only little incentive for existing users to upgrade from the previously all open source jOOQ 3.1 to the newly dual-licensed jOOQ 3.2, so I had to innovate heavily and fix tons of bugs first. You won't have that problem because you're starting commercially licensing your product from the beginning. The commercial distribution really started gaining momentum after maybe 2 years. I could've grown this much more if: - I had hired earlier (wasn't really necessary) - I had spent more time working, but I preferred spending time with my wife and 2 small kids Also, there would have probably been better ways to split the dual licensed distributions. But it would have also meant much more work early on when going dual-licensed. Flyway is a good example for a better split. &gt; My product has a similar niche and price tag, nothing to do with databases or SQL, more a management tool for dev teams. Quite a different market, though: Libraries vs tools.
Thanks, thats encouraging. Congrats by the way, did you quit your day job before it was making money ? Or waited until you had significant revenue.
A recent [poll](https://twitter.com/lukaseder/status/979788483429568517) about checked exception (mostly from JOOQ users I guess)
&gt; Congrats by the way, did you quit your day job before it was making money ? Or waited until you had significant revenue. Well, that depends on the definition. jOOQ existed for 5 years as pure OSS, since 2008. 3 out of which I worked only 80% to have enough time for it, and for legal (IP) reasons. Then I quit my "day job", created Data Geekery, invested about 3-4 months in legal, marketing, website, distribution / infrastructure stuff before dual licensing. Then waited for revenue, which was a bit frightening at first, especially when used to Swiss salaries (and paying Swiss rents). Then landed a really nice contract at one of the largest Swiss banks, doing some PL/SQL programming and SQL tuning at a decent rate and at only 20%. This then financed the company in the early stages. Still consulting with that bank mainly because of the great insight into a mid-sized Oracle production environment (~1k transactions/s, 20k queries/s), which still helps my business from a technical perspective. If you want to stay independent / bootstrapped (which I highly recommend, personally), then being pragmatic about income sources is very reasonable, even if it slows down product development a bit. And in that case, do meet peer entrepreneurs and go to conferences like https://www.microconf.com, which are really great sources of ideas on how to run a business.
You'd need to indent the map example to make it a fair comparison, though I do prefer the method chaining. Your builder is very similar to my [JsonWriter](https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/utils/JsonWriter.java) in libgdx (and in [jsonbeans](https://github.com/EsotericSoftware/jsonbeans/) for use without libgdx). FWIW, some differences I see are mine isn't related to GSON, is contained in one class, has multiple output types (JSON, JavaScript, or "minimal" where quotes and commas are optional, likely only parseable by my accompanying JsonReader), throws exceptions with context about *why* the state is illegal, has convenience methods like `set(name, value)` (less verbose than `name(name).value(value)`, would make your example above a little cleaner), uses less memory since it writes JSON as it goes versus building up the whole JsonElement object graph and then converting to JSON (no builder instances or GSON JsonPrimitive, just a stack for arrays/objects), and uses overloading (`value(String)`, `value(int)`, etc) instead of methods per type. I don't have any unit tests though! :p
Repeating `config.` makes it more clumsy than the original chained API. I don't see any problem with `end()`.
Ctrl + shift + enter does this. It effectively completes the rest of the line and starts you on the next line. I couldn't live without it!
I have played around with those two items a bit. First I used [Ragel](http://www.colm.net/open-source/ragel/) to make a JSON parser. The core of it is [12 lines](https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/utils/JsonReader.rl#L291-L302) of Ragel, plus the ~150 lines of Java code above that. I did it mostly because I just wanted to play Ragel, which is super neat! The Java generated from the Ragel looks [like this](https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/utils/JsonReader.java). JsonReader has methods that can be overridden for visitor style reading. The default implementations build up an object graph. I've never benchmarked it against similar libs, since if I'm doing something performance sensitive, I'm not using JSON (thankfully I have control over my gigs!). I would expect libs who make JSON parsing their focus to do it more efficiently. However, one of the neat things that happened by using Ragel, rather than writing the parser by hand, is that I found I could easily support JSON variants, like JavaScript notation. That lead to defining a JSON-like format I call JSON "minimal". It's like JSON, but: - Newlines are treated as commas, making commas optional in many cases. - C style comments may be used: `//...` or `/*...*`. - Names only require double quotes if they start with `space` or any of `":,}/` or they contain `//` or `/*` or `:`. - Values only require double quotes if they start with `space` or any of `":,{[]/` or they contain `//` or `/*` or any of `}],` or they are equal to `true`, `false`, or `null`. Those are the official rules, so probably sounds hard to remember when quotes are needed. In practice it isn't too bad and I enjoy writing "JSON" without quotes or commas. It will probably not catch on, as JSON's simplicity without being overly verbose is part of its charm, but I like it for my personal stuff. JsonReader doesn't enforce JSON, JavaScript, or minimal. Since minimal is a superset of JavaScript notation which is a superset of JSON, it always parses for minimal. This means if your JSON is missing quotes or a comma, it will likely still parse fine. During my JSON adventures, I also wrote automatic objects -&gt; JSON serialization and JSON -&gt; objects deserialization, found in my [Json class](https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/utils/Json.java). It is reflection based (accesses fields directly) and can handle most classes automatically. It works similar to parts of Kryo, though less powerful (customization isn't as good, generics support is limited). The above stuff was ripped out of libgdx and made available in [jsonbeans](https://github.com/EsotericSoftware/jsonbeans/) for those sad, sorry projects who don't get to use libgdx. I have a similar project called [yamlbeans](https://github.com/EsotericSoftware/yamlbeans/) which does the same for YAML, but eventually I decided I don't like YAML.
Wasn't EE deprecated? 
Don't mind him. He's our resident troll. Every village needs it's village idiot. Keep in mind that this is a guy very much "anti" anything Java that spends a lot of time trolling on Java forums. I'm pretty sure you and I have a better life than he does. 
&gt; If you were applying for a new job and the company restricted you to using Eclipse vs InteillJ, would you turn the job down over this? No competent programmer would do that. I'm a die-hard Eclipse user, but if a company uses IntelliJ and pays for the license, then that's fine.
Me too! This was on the very top of my list!
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
little nitpick: normally you don't prefix the interfaces with "I" (as in https://github.com/Enerccio/gson-utilities/blob/v.1.1.0/src/main/java/com/github/enerccio/gson/visitors/IJsonVisitor.java ). 
Can you elaborate on this ? Do you mean optional method parameters ? I've heard many views on this: "just use method overloading", "just test if null", etc...
Thanks OP...
Yes, Optional as parameters, Optional fields, wrapping a variable in Optional.ofNullable just to map it to something,... Even Optional returns are very annoying sometimes. I don't want to be forced to unwrap a variable that I know is never null.
Do you have experience using something like this in production? Maybe you got feedback?
Isnt this a microservice example using spring cloud?
Past 10 months I'm working on Spring cloud and Netflix OSS. Not in production yet... But posts like this help me to get a better grip on the microservices ecosystem.
I guess it depends on how you define a micro service. I would say it is a service and it needs to be orchestrated, micro or not that still applies. What do you think?
Interesting! How do you plan om securing the applications? I am thinking that many of the services would never be exposed publicly. Probably only aggregate APIs acting as gateways to everything else.
Yes, aggregated services are exposed via gateway server using Zuul. I have Spring security with Keycloak on the gateway server. So only gateway server is exposed to the public.
Zuul and keycloak are new for me, but I will check it out as I'm thinking next step is to learn how to secure such a solution. Do you also secure the applications that are not exposed publicly? E.g. one internal service talking to another internal service.
No I don't secure them...but you could use JWT tokens to secure them as an extra layer of security. I find JWT a bit complicated to implement. Spring security has a plugin/connector for Keycloak, so it's pretty easy to configure oauth. Btw there's spring cloud gateway too. I haven't got time to look into it. If you are going for zuul, use Zuul 2. It has a lot of options for configuring routes.
Zuul 2 is not part of Spring Cloud, FYI. What does keycloak do for you? I‚Äôm currently marching to prod with Spring-Boot services behind Zuul. Zuul routes requests, none of the services are available publicly. Not even the Zuul actuator is accessible from outside, What do I need to be securing?
IF it were known to be never null, either the contract of the method was bad, or you are making a bad assumption. Just because it's 100% of the time not-null today, someone returning an optional is saying it might change tomorrow without a ABI break. Or they made a design error.
What do you mean by "RN"?
Right now. 
Is there a comperison of models and datasets available for keras vs the ones available for dl4j?
I used same dataset for both. The only difference is that I used single valued output model in Keras and used two outputs in dl4j.
What about performance?
Dataset size is 10000, so I observe its more or less the same :) However note that, while checking benchmarking, people normally compare 'python code execution time' to 'ETL + java code execution time'. We really have to consider ETL(extract, transform &amp; load) especially for large datasets.
&gt; Is it fun? Or is a bit teedious? Very subjective and depends on the libraries and tools you're allowed to use. &gt; Is it a wide field Relatively yes. It's a general purpose language. &gt; is it a field that will have work for years Probably. &gt; perhaps even a lifetime to come? No one can tell you that. &gt; Or is it a good starting point if you want to get into programming and development? It's about as good as any other popular language. All object oriented languages are similar at the basic level. &gt; From what I could see, there seems to be a lot of Jobs within this field in my hometown and many other european countries. Is this a trend that will keep on going or? It's one of the most if not the most popular languages [1](https://www.tiobe.com/tiobe-index/) [2](https://insights.stackoverflow.com/survey/2018/#technology) [3](https://stackify.com/popular-programming-languages-2018/) [4](http://pypl.github.io/PYPL.html). You can find trend numbers too.
Java is since decades an asked programming language in the enterprise field. And it will still be there for years. Java is a good Language for beginners since it‚Äòs quite simple and teaches you to work with obejcts. ( it‚Äòs an object oriented programming language) So yes it‚Äòs worth to learn Java but after you feeling well in a language you should keep going on and learn more to improve your skills and maybe find you language of love. 
Well I figure since this is a college program about Java, ill be getting a degree for Java as well as some internships during that time. Is internships needed? Lets say I learn more languages on my own - would my experience with Java on paper be enough on the market if I say learnt C, or Javascript or whatever on my own? 
I took three Computer Science courses in high school -- Visual Basic, C/C++, and APCS (Java). While I still have to use other languages in my college classes, I continue to use Java the most in work, school, and play. While I'm sure others will disagree, I think it is very fun to develop with Java. The language lets you focus more on the abstractions you are trying to create, and less on low level details such as memory management. The language is also not standing still. The architects are continuously looking at ways to evolve and steward the language. Some current projects are [Project Amber](http://openjdk.java.net/projects/amber/), [Project Valhalla](http://openjdk.java.net/projects/valhalla/), and [Project Loom](http://openjdk.java.net/projects/loom/). I think you will find that Java is a great language, and has a great community built around it!
What is this copy select block feature exactly?
You can disable the hints for specific methods if you feel they're unnecessary. I think there are also some settings to configure when exactly they should show up, so you can make them less "show happy" overall. I really like them when functions are called with "true, true" for instance.
I will never understand issue prioritization. IntelliJ, too, has many long standing issues for simple features / fixes with many votes but there has been no activity on them for years except users asking/complaining about them. Maybe the architecture is such that these things aren't easy to fix but still... Some issues make you wonder.
Because competition is great and IntelliJ costs money for some features?
Every time I use Jenkins (I. E. Try to improve our build setup at work) it makes me think "why does this have to be so complicated", "why does this feel so unfinished"... Especially since according to polls, Jenkins the most used build server for Java projects by far. Yes, I know, I could spend time to improve it myself but we don't have the resources unfortunately. I'm now running some unholy mix of jenkins DSL and declarative pipelines, but it still feels brittle and convoluted. Is there any way to not have Jenkins choke on a couple hundred build history items? The official solution seems to be: "just discard old builds" rather than load the build info on demand :/
Newbie here, but why would the framework/language used have an impact on the accuracy of the neural network, if it is built with the same training data set?
This sounds really cool. Do you plan to write some articles on how you structure your deployment pipelines? Also, how do you cope with having 2300 jobs on one instance? Do you keep only the most recent build or how do you not have jenkins choke on that build history?
True, I do that as well. But when wrapping exceptions, I like to convey intent, if I just want to wrap something to make it unchecked, I use an exception which is reserved for only that purpose.
Just caught my eye that this seemed an unconventional order for the Either type params. Not that it matters though, but trylambda according to the snippet in their Readme also uses the params the other way around, I. E. I "exception, url connection". The parameters are usually called "Left" and "Right" in the signature. I'm guessing the result goes into "Right" because that also stands for "correct", at least that's how I remember it.
That's an interesting question to dive in. Probable reason would be related to algorithmic implementation of error functions in both cases. 
At least there's no comma operator in Java. Not that I didn't already want to use it in some situations in Java :)
Or what about overloading the = operator? I know that it's really useful in C++, but still...
True, but in the context of return types, it makes me want destructuring as well.
What does that mean? :)
If you can show that you worked on some projects with this languages you are fine and it‚Äòs enough to find a good job on the market
so I added visitor support in 1.1.0 (now master), both stream and non-stream version along with some helper methods (getFirst, getN, getAll)
In eclipse if you double click after first or last ", ' , (, [, { ( you will select everything between but not that character. With intellij this works with strings but selects " or ' characters also. With parentheses and brackets you can use Select Word keyboard shortcut (ctrl+w) but you have to press it way to much for large code blocks and it's erratic depending on starting cursor position. Another alternative is Move Caret to Code Block End with Selection keyboard shortcut (ctrl+shift+]) which works good with braces but not with parentheses and brackets.
Oh, that's cool, thanks!
&gt; I did it mostly because I just wanted to play Ragel, which is super neat! The Java generated from the Ragel looks like this Kinda reminds me of _Kaitai Struct_ where you specify the layout/design in a text-form and it generates the java _(or other language)_ library for transformations off of it. Neat stuff! &gt; It's like JSON but I wish JSON's official specs included comments, that ways more libs would support / not hard-crash on them _(You can comment in dummy values, but thats ugly)_ &gt; Reflection (de)serialization + extracted into jsonbeans Never had to serialize data throughout an entire class hierarchy but now if I ever do what to use. Good job on this Json work!
randomness of initial weights could have tipped it, couldn't it?
More importantly, you should ask the question in a way that can actually be answered. What did you try already? What did you expect to happen? What happened instead? If there is an error message, what does it say?
Having to use annotations for aught to be a keyword (**override**).
Random seed was provided in both cases, but the actual key was changing it to two valued, softmax activation output layer, along with lossmcxent error function. 
Thanks for your help! :) very helpful
Thanks! I think I can start off with this program, and most likely it will spin me into a direction with even more languages for my portfolio. Best part is that this has internships with it, so I get to apply my knowledge into my work quickly. 
Thanks for your response! Very helpful. I was reading through the links earlier and I forgot to respond. Seems like Java is a strong starting point then and from there on out I can always learn more. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
What people have said about Java being used as an Enterprise language (mostly larger, corporate companies use it) is true. Java itself can be very heavy, but I was able to write it very quickly due to the tooling. If you know how to use the auto-complete, code template, and refactor tools, you can write a lot of code with very few keystrokes, and because Java is a statically-typed compiled language, these tools are very reliable. If you want to get better at Java, after you start feeling comfortable with the language, get a handle on what your tools can do for you. I swear by IntelliJ, but plenty of people still love Eclipse.
It's often based on input. Garbage in garbage out so to say. So when we are sure that we don't pass null values, Optionals are an annoyance. The only application I find it useful is when the method logic revolves around filtering a collection.
All work is sometimes fun, sometimes tedious. As for variety, Java is a very good choice, there will be work varying from very simple entry level single page websites to mobile clients to enormously complex distributed systems. The language itself isn‚Äôt hugely exciting any more (though this is subjective) but there is no other programming language with such a rich ecosystem of libraries, tools, documentation, frameworks and conferences. The people you‚Äôll meet in Java related work are of all ages and cultures, not just young guys like with newer technologies. There is no reason to think this will go away in the coming years. 
There are plenty of Java jobs, so it's a useful language to know. It's also a fine starting point for learning about object oriented programming, which is a widely used paradigm. I would not call Java a particularly fun or interesting language, but there are people who like it a lot. Maybe you'll turn out to be one of them.
What do you prefer about IntelliJ, if you don't mind me asking?
You will learn how to solve problems using algorithms and datastructures. The language comes second or is even less important. Once you know the basics from approaching to finishing a task, you can rather easily switch languages. Application forms that require language x and framework y are often more like guidelines, because it's hard to recruit the right people. Companies know that and if you can prove you have above skills, they'll probably hire you anyway (plus the extreme and increasing shortage of experts). Now what is important is the very first language you choose to get into the profession. Imo languages like Python or Java are fine: There's enough learning resources and the languages can teach the concepts. On the other hand languages like JavaScript or PHP will teach you bad habbits.
just my 2cents here: my above mentioned application needs systray integration and, guess what, support for this \*only\* exists on AWT. Neither Sun nor Oracle bothered themselves to implement on swing or JavaFX... (sigh) many AWT-Eventqueue-0 crashes lurking around... pure fun.
Im a bit scared of the algorithms. I had a teacher for Javascript who tried to teach it to me, but she didnt get through to me and I eventually gave up. But my friends who are coders say that its easy to get into and that its all about implementation. What do you think? Can anyone do an algoritm as long as they think logically or does it require some advanced mathematical skills? 
I started with Eclipse, then moved to IDEA, now I pay for a personal license. At the time, Intellijs autocomplete just seemed to work better, and give me what I wanted quicker. It was less of a memory hog, it was snappier and more responsive. They have a whole suite of tools for different languages and once you know one you know them all. I'm sure eclipse has as many competent shortcuts that are just as functional, at least by now. Also I was at IBM at the time and had to use Lotus Notes which is based on the same engine as Eclipse and sometimes one would crash and take the other with it, or they would conspire to leak all of the memory possible.
For me I was wondering if you also secure internal communications. E.g. when an application communicates with Eureka server, config server or another application.
It's awesome.
Don't worry. Your friends are right, it will come naturally. No advanced math is needed. It's all about logic. In practice in most cases the very hard stuff is already done for you anyway (which is a pity actually, because there lies the fun).
Ah, yes we do. We use Spring-Security with basic http auth, credentials stored in environment vars. Externally we authenticate with a custom JWT implementation.
This just tells me you've never used MigLayout. It has its flaws, but it allows for creating layouts much, much easier than with the default LayoutManagers. The main advantage is that MigLayout can easily adapt the layout to whatever style you need, rather than have to rely on the "panels in panels in panels" approach that is otherwise necessary for Swing.
Interesting, thanks. I've only ever used Eclipse, and from what I've heard, other environments offer a smoother Java experience.
I've been coding Java professionally for 19 years after coding 7 years in C/C++. The improvements in coder productivity were huge. Felt like 10X although I'm sure it couldn't have been that much. Perhaps there are other languages that have since emerged that are more elegant (subjective) but I doubt anything matches what can be done on the Java platform in terms of available patterns, systems to leverage, reuse, etc.
&gt; The main advantage is that MigLayout can easily adapt the layout to whatever style you need, rather than have to rely on the "panels in panels in panels" Why is avoiding nested panels an advantage? 
Swing is well documented here: https://docs.oracle.com/javase/tutorial/uiswing/components/componentlist.html I could never find equivalent documentation for JavaFX; however, it does appear JavaFX now has this: https://docs.oracle.com/javase/8/javafx/user-interface-tutorial/ui_controls.htm This must be somewhat new (within the last year) though because it wasn't that well documented before.
Java EE dev here. A lot or big industries use Java because it's one of the most enterprise friendly "environments". And as such it has a lot of enterprise tools for CI, deployments, dependency management. As of day to day it's pretty chill, because if you're working on a decent project everything is industrialized already, with clean processes. You just have to blend in with whatever web service you're providing. My opinion. Being on the lookout for the next thing. I don't think Java EE will make it 10-15 years from now. Many new projects are using NodeJS. Some companies are even making the switch with great succes (Paypal ...). Big fat Netflix is powered by NodeJS for example, so it's here to stay. Big successful companies embracing the technology is very promising for the future of NodeJS. It just needs some time to make it's way inside big corporations that have a lot of inertia.
What can someone who is using Nashorn do if it's being removed? Is there a maven package that has it?
I'd split it to two parts. one is clean compile. then supervisorctrl restart youapp
Is it easy to learn? NodeJS that is? 
Okay. Well thats a safety net atleast :) 
&gt;because there lies the fun Meh. Some of us just want to make real world applications or games that just work. I'm glad I don't have to implement sort or shading algorithms. 
Ill come back at the end of my life and I will then give you an up or a down depending on weither or not i experience what you say it is. 
Of course fun is subjective. Sometimes you have to implement an algorithm _to make it just work_. For instance I had to implement a [fuzzy search](https://gist.github.com/shathor/8ad04d8923d6c07fd2f4a06e9543bebf) that actually returns the resulting substring in a _real world application_.
That's cool. I guess the point I wanted to make was that building on other people's work can be fun as well, even if you don't do academic level algorithm implementation. 
I agree, I'm also more the practial application type. I wouldn't want to do theoretical algorithm stuff all day.
Yeah, sorry. I got those backwards in my comment. I should compile before posting :D I'll fix my earlier comment.
Because it simplifies the code for the layout. I have been able to build much more complex layouts with far less code using MigLayout. For example, having items be lined up with each other in highly complex layouts, with Swing's standard LayoutManagers the only option is GridBagLayout (GridLayout can standardize the cell sizes too much). GridBagLayout is almost painful to deal with in its complexity, but MigLayout handles it elegantly. That's just one example. I've used Swing a LOT. My company's application still relies on it, so I use it every day at my day job. I've spent tons of time with the default LayoutManagers, and also with MigLayout, and I will choose MigLayout any day over the defaults in Swing.
If you've used javascript before, it's easy.
Whats the point of the `with` method when all the fields are public? Also the resulting structure looks aweful.
We actually don't do anything particularly special for Jenkins to support that many jobs. The reason there's so many is because we generate 15+ for every application (depends on the number of environments) and we have a large number of microservices so when you multiply it out it's a lot jobs but most of them don't run very often. We do trim the history, I think we only keep the last 20 runs and only the most recent artifacts. The pipelines are structured like: commit -&gt; stage to test -&gt; smoke tests -&gt; activate (we do blue/green) -&gt; more tests -&gt; stage to prod -&gt; smoke tests -&gt; activate Each step in the pipeline is it's own job rather than using the pipeline plugin (we experimented with it but it has a lot of annoying limitations) and we use downstream parameterized triggers. Then we also generate a bunch of utility jobs per app that run on a schedule like static analysis, etc. So most of the jobs aren't polling or scheduled which is where you often run into Jenkins scaling issues in our experience.
The programming side of it is just javascript, but the amount of boilerplate you need to get going is pretty awful. Try setting up a node module sometime to see what I mean. Java has maven and maven has archetypes. I can set up boilerplate once, then never again with maven. With node, I set up a boilerplate, make a git repo, then I can clone the repo, modify the remote, change a bunch of project specific naming things inside it, end up breaking something important, spend another day or two trying to figure out how... it's just bad. I don't see NodeJS stealing the show from Java, especially when things like Vert.x exist. Vert.x is polygot. It can run java/javascript/python/ruby/etc on the JVM. You can still use good tools that exist for Java like Maven, and still use Javascript on the backend if you're unable to learn better languages. It's also a lot faster than NodeJS. If you look at the techempower benchmarks, vertx demolishes NodeJS (and JEE/Spring too). If I were in your shoes, I'd stick with Java. Learn Vert.x. Learn about GraalVM and Truffle. JVM is the new hotness in 2018, again.
&gt; GridBagLayout is almost painful to deal with in its complexity, but MigLayout handles it elegantly. Agreed, GridBagLayout should be avoided like the plague. However, I have always found BorderLayout and BoxLayout with appropriate nesting has always met my needs. 
How is the data class declaration not explicit?? The members are visible right there in the declaration.
my main grievance with eclipse is the performance ( running Photon on work, now ). I don't know why it takes seconds to open any context menu on any middle click... no matter which machine, no matter which OS. My main machine is a linux i7 with 16Gb RAM and a SSD. My work machine is a windows10 i5 with 8Gb and HDD; both takes an eternity to open any menu on eclipse. It made me became obsessed with tinkering with vm tuning on the eclipse.ini and idea64.vmoptions. and the debugger... oh, the wonderful intellij debugger !!! it fly circles around anything eclipse has.... clean, interactive, scriptable, fast...
just be aware, the Java language you learn on school ( usually ) is very different from modern java. If you don't see extensively generics, lambdas, streams, collections, concurrency and ORM; go study those by yourself. i said it before, and will repeat myself here: this is not your grandfather's java anymore.
I made a Jackson based version of this library, I hope you don't mind? Great work! https://github.com/alturkovic/jackson-object-builder
Why can't you type that out like how you did for other words?
With MigLayout, you get everything BorderLayout and BoxLayout offers but without any nesting. Plus you have the ability to properly line items up across the whole UI, lining up UI items is a pain in the ass with panels-in-panels. Give it a try, seriously. I will never use any other LayoutManager again.
Generally I catch all exceptions at the point they are thrown, and then re-throw with an exception class I created for my application. That way the method signatures stay clean, I'm only ever throwing one type of exception, and I can properly propagate exceptions.
Notepad++ is a great opportunity to learn some really, REALLY basic stuff. The core syntax, how the compiler works, etc. But for building any actual projects, use an IDE. The stickied post in this thread lists the best ones, I will put my personal vote in for IntelliJ as well.
no problem, the power of java is that there are so many library options!
ctrl + shift + enter is definitely a lifesaver, but that isn't what they are talking about. They are talking about a feature Eclipse had that IntelliJ is adding in 2018.2 "Jump outside closing bracket/quote with Tab"
&gt; Nobodys going to switch to Kotlin only because it has no semicolons that is what you think! 
/r/javahelp Any development tool beyond a basic text editor you have to *learn* how to use. Eclipse has an excellent and fairly brief basic tutorial under the "Help" menu. I would wait until after having read the basic tutorials ( for any development tool ) before deciding you can't use it.
&gt; IDEA autocomplete triggers automatically when you start typing &gt; God I hate that. then simply turn it off &gt; parameter labels &gt; I guess he means the little grey parameter names beside the values. Obnoxious and unnecessary, given that all IDEs will show the parameters above the method. then simply turn it off 
[removed]
\&gt; Based on the key, your password is converted into a random String of characters and symbols. This is not what random means.
&gt;that is what you think! Exactly. I wish I was so smart that my biggest problem during development is the semicolons I have to type.
As opposed to what output and loss in Keras?
&gt; I‚Äôm struggling to understand what the benefit of autowiring with qualifiers is though, at that point how is autowiring any better than just instantiating the concrete implementation class or using a factory to provide one. The moment you insert a qualifier aren‚Äôt the calling class and interface implementation tightly coupled again? One point that I haven't seen raised yet is that what if your dependency itself has dependencies? Maybe it doesn't now, but might in the future. Now you're manually instantiating all of those, too. Or having your manually instantiated dependency manually instantiate its dependencies as well. There is also the @Primary annotation you can use too. If you have multiple implementations, and know that one of them should be selected for autowiring unless a qualifying annotation also exists.
Netflix still use a lot of Java though. It's a mix of Java, Node and Python from what I could read. But almost all of their open-sourced tools are written in Java
Thanks for the insight. Didn't know that.
java...script. what a world :D
One variable output using logistic regression.
&gt; groups do overall behave this way in response to change perhaps this notional group-ness isn't always informative in the context of different perspectives.
and vivisection has it twice
That doesn‚Äôt indicate what loss you used. Anywho. Binary cross entropy / logistic regression and softmax with cross entropy and two output units should be functionally equivalent.
Interfaces are a shield that implementations can hide behind.
Operator overloading can be done very well if only the experienced do it. Code, like BigDecimal, becomes even more readable. It is helpful. My fear is that everyone would start operator overloading everything with some strange meanings for their specific data structures. Now code becomes very unreadable. It's like opioid pain killers. If you take one, once in a while, as a tool, when needed, it can improve your quality of life. But most people can't stop there and we have a crisis.
Date = Date + Duration Date = Duration + Date Date += Duration Duration = Date - Date For dates, Duration could be a duration class, or an integer number of days. For timestamps, all of the same could be true, but durations woulld be either a duration class, or an integer number of milliseconds. (Or some other unit? Thus begins a problem.) 
...and [pay for a license](https://www.v3.co.uk/v3-uk/news/3030652/oracle-java-se-8-business-users-must-buy-a-licence-from-january-next-year) for security updates.
You are comparing the sites of three compile-time-only tools for developers with a site for a runtime tool for users. Put another way, you are comparing language+compiler sites with a software site (that includes a language). Also, different companies have different approaches towards community, learning, openness, etc. I have my opinions, but suffice to say that the three sites you compared being highly informational and the Oracle one being product-centric akin to a sales page should surprise no one.
If the return types were compatible with a constructor of the left-var class. Foo f = SomeFunc(); Where Foo contructor needs three parameters, and SomeFunc() returns three values compatible with the Foo constructor.
&gt;My fear is that everyone would start operator overloading everything with some strange meanings for their specific data structures. Now code becomes very unreadable. Precisely my fear with var except with operator overloading it's like 100x worse tbh
No worries, it doesn't really matter.
If you are a *business* user AND you are still *on Java 8*, which is 4 years old. What's your point?
I understand what you are saying, but there really is no good reason for the off-putting state of https://www.java.com People in charge probable just forgot or didn't bother to update it after create https://go.java. Perception is important, and for java to be attractive for more younger developers a 90s looking website is not helping.
The [JavaFX tutorial](https://docs.oracle.com/javase/8/javase-clienttechnologies.htm) is there for at least a couple of years now and the UI controls page exists since 2014 if not before :) Anything else?
What are you talking about? 90s websites and stock photos of people using computers gets me hyped as hell to use java. 
wow, I had no idea that https://go.java even existed.
\&gt; 90s websites that don‚Äôt render I said 90s looking website, well maybe 2004-2006 ish looking website. I only meant that it looks old. \&gt; stock photos of people using computers gets me hyped as hell to use java. made me chuckle, thanks!
Why would you need a modern website when you have amazing marketing videos like [this one](https://www.youtube.com/watch?v=1JZnj4eNHXE)?
You know about java? Yes? Can you download what you need from the site? Yes? Then that‚Äôs all that‚Äôs necessary. The site doesn‚Äôt need anything further. What‚Äôs to gain from updating the marketing site to look more modern? It‚Äôs a top language of the world and it‚Äôs tools are used world over. Don‚Äôt forget people download their programming stuff from github pages these days, which can and have looked just like white pages with a small bit of black text and a blue link to the zip file lol
on wayback machine it seems like the newest version of the website was released maybe in 2012 / 13, so it's not old but just looks like it's from 2005.
They need a big ‚Äúdownload here‚Äù button, though. 
Well, there's the fact that the java.com site looks like a malware downloader. This is for end users, remember, not for programmers.
The end users are java people. They don‚Äôt need anything fancy to appeal to anybody anymore, the language and it‚Äôs use cases speaks entirely for itself Go? Rust? D? on the other hand, need slick marketing still to crack their respective glass ceilings and gain market share and notoriety 
You're one of the dinosaurs aren't you?
Uhh... What about users (read: not developers) who need to download the JRE to run your app? Are those all developers? Do you work on MongoDB or something?
I am not actually, I just understand why things like this are the way they are 
Hmm you know it‚Äôs interesting I can‚Äôt remember the last time I had to physically download the jre or even go to java.com, lots of software just come with an appropriate versioned redist for user convenience sake. And when they don‚Äôt there‚Äôs usually some link that points right to the download page, negating the need to go to the base site itself And I speak as a user btw, I‚Äôve dabbled in java in the past but I‚Äôm by no means a seasoned developer 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Hey great post, I'm actually thinking of doing the same to learn the latest from boot2, will use yours as guide if I get lost :)
Around the end of my Java life people were saying eclipse was getting more performant, so I'm willing to give it the benefit of the doubt on that. And how did I forget about the debugger. There are so many reasons I pay for it
Spend a weekend with InteliJ with the "common shortcuts" cheat sheet and see how it treats you, you might actually be faster with it by the end. 
&gt;Some people don't care for it Yeah, like Oracle.
Someone undid your wiki edit. Maybe try older URL instead: http://javasoft.com ;)
&gt;That would be YAGNI code. I disagree, but yes there's a sane limit between "There's a high chance of this returning null next update due to circumstances/changes outside our control" and "Make everything Optional just in case" "So when we are sure that we don't pass null values" Pass null values where? Optionals should never be used for parameters. Just annotate the parameters using @NotNull.
I don't even recall that homepage since I've always just gotten to the Java pages I needed through search engine results, but even those pages look very poor and uninspired. It's pointless to use their site for information, because it's too difficult to navigate. They should make it more accessible and interesting like go.java--except also include a wikia dedicated to Java usages, keywords, and so on. People could actually frequent the site for more than the downloads.
Please standup. Please standup.
yes, you are right. :(
Well what do you expect? Thats the standard enterprise look brought to you by jsps.
That's like 20 internet years..
&gt; Anything else? The JavaFX tutorial should really be in the Java Tutorial with the rest of the documentation. Although I guess since JavaFX is being split out that probably won't happen. The SceneBuilder documentation is really outdated since Oracle doesn't provide binaries anymore: https://docs.oracle.com/javase/8/scene-builder-2/get-started-tutorial/overview.htm The scene builder installation page appears to have no current information on it, all of it is outdated: https://docs.oracle.com/javase/8/scene-builder-2/installation-guide/jfxsb-installation_2_0.htm#sthref6
Oracle has the shittiest design I‚Äôve ever seen when it comes to anything they make
That's where it's getting interested as someone else commented out earlier.
I haven't heard of go.java. Thank you for bringing up. It struck the tune of Power Rangers. https://youtu.be/K-nt-YiK3Tk
Of course, Java needs that, a fresh image indicating the language is still being updated, Oracle has left Java a bit, as it does not seem very important to them, if that were the case Java would be better seen among the new programmers and not like the classic fossil one. Long live Java
It's got really bad design. They could make it much easier to navigate and consume the information they built the website to provide. To say that they shouldn't care about the state of a website they put time and effort into is kinda redic
Bootstrap is getting to be standard enterprise too. Better, but still pretty generic. 
Their github (https://github.com/Netflix) has a lot of useful info about infrastructure they have. Its worth going trough it.
I agree that the Java site definitely could use an update. But the rust and go websites look horrible IMO. Not sure why you listed them here. Kotlin looks like every standard, modern business website. And so is go.java.
They need a big "don't download here, go and get OpenJDK instead which is free" button, though ;)
Yes, it's like they forgot to hire a design team, and it's impossible to get a hold of someone who could do that, because no one is unable to find the contacts from the webpage, so they just sit in a deadlock, somewhere in 1999.
No? Where did you get that idea from?
It looks like in your [submission](https://www.reddit.com/r/java/comments/8vqnbl/an_open_source_ecommerce_toolkit/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
If you are going to use EB don‚Äôt use embedded. I‚Äôve found EB works better using their tomcat. 
It should be easier to manage than normal tomcat, just build a jar with all dependencies and run it. (also /r/javahelp) 
In short: yes, it could. You could use a spring boot application that can automatically handle this kind of situation, or allow both, e.g. have a WAR archive that you can both deploy in a servlet container, but also run from the command line with embedded server.
How did you publish your dependency for Maven and Gradle?
I use the [com.jfrog.bintray plugin](https://plugins.gradle.org/plugin/com.jfrog.bintray) to publish the artifacts to Bintray. From Bintray, the artifacts can be pushed to JCenter and Maven Central with just one click. Have a look at the [build.gradle](https://github.com/beryx/awt-color-factory/blob/897dce122bf3d841f7c5431eddb0ec499b646201/build.gradle#L338-#L359) for more details. 
What went wrong? Pretty much every Java framework is switching to embedded these days so I don't think there would be any issues.
So what disadvantages are you pointing out other than it can't run in a container?
Nice, thank you.
I just didn't find it as powerful and straight forward as the EB Tomcat. You can do it though [https://aws.amazon.com/blogs/devops/deploying-a-spring-boot-application-on-aws-using-aws-elastic-beanstalk/](https://aws.amazon.com/blogs/devops/deploying-a-spring-boot-application-on-aws-using-aws-elastic-beanstalk/)
Oracle lawyers design those pages in their spare time. Hence all those `Accept our shitty License Agreement` radio buttons.
Main Java website makes Java look it it's not even supported anymore.
This sub needs to do away with the automatic javahelp response. No one uses that sub
It can though
They need a new logo. That logo is so dated! 
Are confusing it with some other sub? It has 90 online users right now and a lot more new posts than this sub. Allmost all That being said I would also prefer if /r/java would relax their rules to allow for different kinds of content. 
This sub is an ambassador to our labguage and 3 times the size of javahelp. Just makes us look bad imo. Javahelp should be for "homework type questions"
ASM was a bridge to far for me, for now. The LamdbaMetaFactory approach is slightly slower, but still a great speedup. I am stilling hoping that they 'll make non-static MethodHandles faster.
I don't disagree with that. 
Tbf I thought javahelp was way more inactive. Also we're waaay more welcoming than the CPP sub
I also was someone who had no use whatsoever for var. I would rather have a concrete class or interface type as the variable type. Until the other day when I did come across an article (sorry, no link) that pointed out one possible use. But again, not one that should be over-used. Use var as the variable type when the right hand side is instantiating an anonymous class! The anonymous class has no named type, but the compiler still knows the type even though it has no name. Then you can access your anonymous class's members using the var. var x = new Object() { public static int foo = 5; public static int bar = 6; } x.foo = 21; x.bar = 42; 
I notice the license is GPL. That means I cannot, and many other developers cannot touch it with a ten foot pole. 
I could have sworn there was already some way to do that with object...like without reflection. I spent a few min trying in my IDE though...no clue how to access anonymous members without reflection. Interesting.
No. The big Download button is bundled with ancient stuff like Ask Jeves and other crapware.
There are no downloads for EE 9 or 10.
By tight coupling to Spring, I'm assuming you mean tight coupling to Java server side technologies? So basically, you want to transparently route JS AJAX calls to Java server side handlers? While I personally don't see this as a desireable goal, but if you *really* want to do this, the two most popular examples that I can think of are JSF and Wicket. You can use JSF with [Primefaces](https://www.primefaces.org/showcase/), but I'm not really sure about how well this integrates with Spring. The simpler integration is with the JavaEE stack. Apache Wicket is pure Java, but integrates easily with Spring. However, I'll leave it to you to judge how cool [its features](http://examples8x.wicket.apache.org/index.html) are. Personally, I would suggest learning reactJS on the front end and implementing REST APIs on the back end. You'd be better able to leverage the wider front-end ecosystem, in the way that everyone else uses it (regardless of back end technology).
You could also use something like [GWTReact](https://github.com/GWTReact/gwt-react), which is a blend between the two things you seem to want, though most people who previously used and loved GWT seem to be migrating away from it.
Are you on mobile or a computer? Go and rusts websites look nice on my phone.
Interesting I'll check it out I just find making html templates and using js excruciatingly painful.
There README already contains a paragraph about the Classpath exception. I will put it in bold and probably move it at the beginning of the README, because it represents an important information.
This is why most successful projects have separate front-end and back-end developers. And even separate front-end designers to make your templates look pretty / colorblind friendly / etc.
Yeah I mean I wish that was an option here. I can make a beautiful high performance, easy-to-use data model, but frontend I am suck at. I'd like to be at least competent at it though &gt;&lt;
Please tell me this a joke
Lest not forget GraalVM, because it can run node.. Outright.
&gt; The JavaFX tutorial should really be in the Java Tutorial with the rest of the documentation. It's in the [Java Tutorial](https://docs.oracle.com/javase/tutorial/) next to Swing. It's also in the [new documentation pages](https://docs.oracle.com/javase/10/) under Client Technologies together with Swing. &gt; The SceneBuilder documentation is really outdated SceneBuilder is [not maintained by Oracle](https://bugs.openjdk.java.net/browse/JDK-8198961) anymore, it's maintained by GluonHQ at https://gluonhq.com/products/scene-builder/. Perhaps the docs should redirect as well.
While not always the most popular choice, all the java developers I have worked with find Angular (not 1!) with TypeScript to be a model that is closer to java developement than ReactJs, and thus simpler to work with... 
Lots of business users want a Java platform which doesn't require a 6-month upgrade cadence.
Is there any web language where my IDE would actually be able to help out? I think of how shit I'd be at Java if I coded in sublime like I do webdev
Not the easiest route by far, but the best advice is to forget it and go the harder path, learn react. I know exactly what you mean, but at the end of the day even if it won't be your cup of tea, it will do you wonders expanding your tech knowledge and help your career progression.
Ach I just hate that all the pure Java solutions kinda suck
A support release is still every 3 years. No one is required to upgrade every 6 months. See also https://www.youtube.com/watch?v=HqxZFoY_snQ for information on the new release model.
TypeScript has decent functionality with all supported editors, IntelliJ included. Microsoft provides the plugin as part of TypeScript. I mean, it is not Java-level, but it is pretty good.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
.net has an experimental framework called [Blazor](https://blazor.net/)
I‚Äôll drop my two cents. I used Vaadin in two projects at work. As long as you need to display really simple tabular data and do some editing, it is fine. Anything more complex is not worth it: it is slow, doesn‚Äôt scale well and expensive. Vaadin Designer is buggy, Spring integration is messy, especially when considering security. Can‚Äôt say it was wonderful experience to work with it, but at least it was good enough to meet project deadlines. Things could change after Vaadin 10 release though. I would recommend learning ‚Äúnative‚Äù web technologies, depending on your needs. 
You could try JHipster(https://jhipster.tech). I am using currently and quite like it. Is basically Angular plus SpringBoot.
&gt; "So when we are sure that we don't pass null values" Often an Optional is returned to safeguard against invalid input such as null.
I quickly (well, not really..) tried it with eclipse (uses osgi class loader) because I was quite qurious, but doesn't work. Maybe the problem is there are a lot of older classfiles.
You mentioned the word 'joke'. Chuck Norris doesn't joke. Here is a fact about Chuck Norris: &gt;When you're Chuck Norris, anything + anything is equal to 1. One roundhouse kick to the face.
Why would they want to push people towards their own stripped-down version of Java?
&gt; stripped-down It's a reference implementation, you know.
ORACLE AMERICA, INC. ("ORACLE"), FOR AND ON BEHALF OF ITSELF AND ITS SUBSIDIARIES AND AFFILIATES UNDER COMMON CONTROL, IS WILLING TO TELL YOU THIS IS A JOKE ONLY UPON THE CONDITION THAT YOU ACCEPT ALL OF THE TERMS CONTAINED IN THIS LICENSE AGREEMENT AND SUPPLEMENTAL LICENSE TERMS (COLLECTIVELY "AGREEMENT").
I used Vaadin 7 once in an academic project. It seems easy to start but after a while the front-end code starts mixing up with business logic and everything becomes a mess... Today I would go with Angular/React/Vue without a doubt.
Java EE versioning doesn‚Äôt closely follow Java SE versioning
The trade off you have here is that while GC happens, everything runs slightly slower. They are basically triggering a "check for relocation" flag which slows every memory access down. General runtime is also slightly impacted because of the additional check. The other GC algorithms rely on each thread hitting a stopping point before moving forward with the GC (even G1GC).
There is also a memory trade off going on. G1 and C4 use more memory than the parallel collector does because they have more to keep track of.
What you measure matters a lot as well. Go has targeted latency over throughput, which means while they have low pause times their GC uses more CPU resources. Java has traditionally targeted throughput over latency. Java's parallel collector uses very few CPU or memory resources over the lifetime of an application. Haskell is a special case. I'm not sure if they have abandoned it, but they used to use the fact that objects are guaranteed by the language to be immutable to do really fast collections. Basically, any object newer than a root is guaranteed to be garbage (an object can't reference things created after it was made).
It's tedious. As a note: JAVA 8 &gt; JAVA 7 &gt; JAVA 6 and so on. Java 8 is more powerful, stable, easy to program and with lots of features than 7.. However, you can find a LOT of projects that still use and are freeze-in-the-time in Java 1.4 or Java 5. So it is frustrating. Also, if you know java, then the next terms are important: SPECIFICATION and IMPLEMENTATIONS. The specification is how "x" library must work while Implementations is the code to do the specification. Sometimes, the same specification has different implementations and it is a PITA and frustrating. Also, the Application Server (web server) gives us a new kind of troubles.
Check [joinfaces](https://github.com/joinfaces/joinfaces), it's a spring boot project with allow you to use spring with JSF and various component frameworks like primefaces.
Exactly. It's a bare minimum implementation of the Java specification. It's not in Oracle's best interests to push people towards the bare minimum.
Those lawyers just got stuck with the corporate design from the 2000-2003.
Do you work for Oracle? 
I think that is useful to have the Classpath Exception be the first thing that stand out, rather than the GPL is the first big thing that splashes in front of your eyes.
Not quite like Vaadin, but I have written a web app in Kotlin and it was a pretty good experience.
An even worse thought: maybe Oracle DID remember to hire a design team.
Reading the code, the implementation is poor. The agent appears to transform method bytecodes and essentially makes one call for every method arg to a another static method, but it does a try/catch around each one. It also creates two local variables to track ms (and appears it's not a finally block that the end happens, so I suppose it'd not capture method times when they throw). They don't need a second local var for capturing the end time when they can just subtract from the result of current ms and the start on the stack. It's using javassist (even though making altering the bytecodes with asm is pretty easy) and using that to insert string-based Java code for every single method. Javassist of course has to convert this code to bytecode every single time. That's amateur ridiculous instrumentation. So it'll increase your class size by several insns per arg, and slow your class loading down quite a bit. A Java agent impl is fine and putting some simple insns at the top for statically relaying the method args is easy to do w/ lightweight asm invoke calls. But be careful storing the reference to these args, it becomes a large set of references quite fast. Then a local var for start ms and simple try/finally style handler is not too hard either to capture duration. The finally call would of course have the other method invoking currentMillis instead of burying that invocation at the end of every method. You could use JVMTI C API directly instead if you wanted (I've done this from both Rust and Kotlin Native before), but it doesn't give you much more than a Java instrumenter (unless you wanted to go the MethodEntry and MethodExit event callback route, but that's slower and not good for profiling).
Vaadin 10 has been released. https://vaadin.com/blog/vaadin-10-is-out-
Vaadins component based architecture is not very in right now. Same with other component based Java frameworks like JSF or GWT. Have a look at the action based stuff like Thymeleaf, which is less complex and does translate better to modern web concepts. 
Really would like to not have to write HTML like...at all. I like OOP/DI so I sorta gravitated towards vaadin. I forgot about JSF I'll check for some good implementations.
The new version has react support as well!
It sounds like you could contribute ;)
I don't really need a JVM profiler atm, sorry. I did have a project where I recently wrote an agent to capture code branches taken though: https://github.com/cretz/javan-warty-pig.
Maybe I am not experienced enough, but had a hard time setting it up and quit after importing entities and everything was not working again. Also it felt like it came with a lot of stuff I don't need.
That's easy to tell. Just wait two or three days. If he didn't sue you for license fees, he doesn't work for for Oracle.
Ha no apology needed, not like I care -- I have no affiliation to this profiler, I just thought it was interesting
&gt; Please compare this with website of other languages Yeah but this is not comparing apples to apples. Java.com is the consumer-facing site for regular people to look at when they want to know why they have to install a plugin in their browser called "Java" that they never heard about. The Rust, Go, and Kotlin web sites are home pages for programmers to go look at when they want to learn more about using the language.
Upvote for being the only sensible post in this thread
Look into Visual Studio Code. Solid IDE.
Exactly. It's amazing for simple (business) applications that just need to work, even when you have some complicated front-end stuff (like google maps integration). However when you want any kind of control about the looks of your site you're better off just building something with Spring REST and some front-end framework.
Don't buy the kitchen sink! Vaadin &amp; especially Spring bring with them too much dead weight and anti-patterns of design. Build your own glue so you can pick and mix the pieces of your application. Don't buy the kitchen sink, build your own environment instead. 
You are right, it's probably not an equivalent comparison. Maybe https://www.microsoft.com/net/ iris better ? Still, we need an updated version of the website.
This sounds exactly like Wiley/CA Introscope/APM. Except APM has control files that let you instrument specific methods only to stop death by instrumentation. 
I'd say learning react is also a journey to learn about separating domains.
Did you use any framework, or just go against the raw DOM?
Pardon my ignorance, what do you mean by native web technologies? 
Please don't give out security advice like this, someone might trust you and listen to it.
Raw DOM, I wrote a simple MVC system.
What I'd do is create a new basic netbeans project and get that to work. Then copy your source files into the location, with the proper package setup. 
Thanks for developing optaplanner, geoffrey. It's a great piece of software and your dedication to it through all these years is remarkable. The new multithreading feature is awesome!
Net beans can use the maven build as a project. So if you can make a pom.xml file that can successfully build and run your project, you can open it in Netbeans and try it out. Don‚Äôt need the Intellij specific project directories to port. 
Use maven standards and it should be trivial to go between any IDE. 
I‚Äôd take this to r/JavaHelp
I think JSF with Primefaces is what you are looking for. Check out the demo at primefaces.org. 
Same here
&gt; Or is it a good starting point if you want to get into programming and development? No. Java was designed to for maintainability for very large software projects. If you make your first `hello world` program, you'll be introduced to a ton of concepts that were made for very large software. Imagine learning piano for the first time. But you are forced to learn all the music notations first. All the structures of music. etc etc. You'll get bogged down immediately. So I'm pretty sure Java is not a good starting programming language. Maybe Go (if not C). I personally would choose C, for reasons that I wanna understand everything that is going on. I don't want `garbage collection`, I wanna learn why we need GC first.
I've read a good post about the spectrum of error handling. - On one end, you don't care much about errors like in one-time bash scripts, so you don't want to be force to handle errors. - On the other end, you have software that controls Airplanes. Any error could cost lives. In this case, you want to be forced to handle all errors. --- As for annoyances. It's when working with old code and you see Exceptions that don't get thrown. And the dev who wrote it, simply do ``` catch(Exception e) { log.error("Error in processing price"); } ``` I wish Java made it so that in catch blocks, non-experienced (or even experienced) developers don't do this annoying code.
Any particular JSF implementatio s?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; devs who put 80 lines in a single method Come work here, and see 800 lines in a single loop, and inside - nested loops, triple if blocks.
Thanks for the kind words :)
Wait till you see experience abuse of Scala's `implicit`. I think programming languages should help programmers write clear code.
I was trying to say that classic stack (HTML, CSS, JS) or more complex frameworks (Angular, React, Vue) will do much better. Even though Vaadin is based on classic stack, it brings a lot of overhead. Java is great for backend, but doesn't excel in web development. Pick the right tool for the job!
I'm on PC. And the Go website looks like this: [https://imgur.com/a/55MMEeK](https://imgur.com/a/55MMEeK)
You should be able to just install yarn and node. After that install the generator-jhipster, then generate your project (start with monolith first) and finally run the app with maven or gradle, whatever you have chosen. You really do not need to fiddle with entitities if you do not want to. I do not use it because I rather write the code instead of using a code generator for my entities.
This is a question for **/r/javahelp** as is indicated in many places on this subreddit. **Removed**: Programming help
So what would be the main home page of Java for programmers? Sadly, Oracle has FOUR main Java pages, and none is set to be the "official" one, the one to rule them all. - java.com - go.java - oracle.com/java - java.oracle.com Plus, one would think that the #3 and #4 websites would be the same with just different URLs and redirects... But they are not. It is a mess.
Build projects and google or ask for help from someone else when stuck. 
HackerRank. Then build prototypes using technologies you see online.
Actually use it instead of reading and learning about it. Building things, getting the experience and locking what you have learnt is now what I would think is the best next step. Doesn't have to be innovative amazing ideas, just start making things so when you do have the good idea you're ready.
Practice practice and more practice. It‚Äôs a skill and you only develop skills by getting your hands dirty and (in the case of coding) building things. Reading and watching videos will help to a certain point but you just need to open up you ide and start writing code. Codingbat.com is a good site to practice. Or just think of some software that will help you in your life and go and build it! You‚Äôll get better at java and the software will improve your life. 
Start by doing - write some projects, experiment with them and get your hands dirty so you are "technically-fluent". Next do some hacking, as in - find an existing project and look into its code - understand it, try modifying it and adding things or fixing bugs. Hopefully, the first step has lead you to use some open-source tool or library - those may be good places to start, as you'll have some familiarity with them. Finally - seek mentorship. This is difficult, but can be partially achieved as a direct continuation of the previous step - if you've gotten into some open source project you can start looking at their bug tracker for bugs or feature requests, or maybe come up with your own features. Most OS projects happily receive patches from new contributors, and you benefit from experienced developers looking over your code and pointing out problems. It is crucially important to be patient at this stage - you will be making many mistakes, and at first some of the remarks you get may not make sense - it is easy to become frustrated and ignore the advice or lash out, so understand any criticism you may receive is meant solely to improve the code and improve your abilities. TL;DR - 1. Write stuff and get your hands dirty. 2. Read other people's code and learn from it. 3. Find experienced developers that can criticize your work (possibly by contributing to open source projects). 
Yeah i agree, as a newbie developer its wayy harder to just start writing code on your own. Classes and lectures and videos, its fun and easy to get the concepts but when it comes to "putting it in your own words" so to speak, its a lot harder. Theres a bigger roadblock there than just comprehension because now you have conceptualizing and that is way scarier. So its best to start trying to write your own code that actually works as soon as possible. 
It all depends on how "YOU" learn. I work together with some talented Java developers - some need to learn by implementing something (so they often lookup examples on the web first, then adapt to their own needs), others learn by reading the java sources, the next by reading books about it. There really is no "one way" for any of it. Just work with it a lot and find an environment that let's you keep focus on it for a long long time.
Nobody uses Vaadin or the likes anymore. I would recommend using React.JS, Vue.JS or Angular - they are all modern Javascript based frameworks who work similar in terms of environment to how Vaadin used to work. Here is a good article about them, too: [https://medium.com/@TechMagic/reactjs-vs-angular5-vs-vue-js-what-to-choose-in-2018-b91e028fa91d](https://medium.com/@TechMagic/reactjs-vs-angular5-vs-vue-js-what-to-choose-in-2018-b91e028fa91d) Though in all honesty, I am also a huge fan of just using the HTML frameworks directly in your applications. Just get your hands on a pretty theme for Bootstrap 4 and start working with it.
There must be a middle ground between these two extreme cases. The guidance provided on this thread has been extremely useful. As for appreciating Java... well, in this case it's not my call to use it or not, so I won't argue about this. I sure appreciate the friendly community here though, and it's probably as important as the language itself.
It really depends on the type of company. "Financial Solutions" can be anything from a payment provider to an implementor in the banking sector. That being said, if it is diversity you are looking for, i would recommend hiring up at a more generic developing company, like a digital agency. Those can offer you a larger range of projects to work on, which may also imply a bigger set of technologies. But it really comes down to the agency itself - so have a look around. Java is probably the best choice for this kind of business tech atm (though .net is also quite often used). Companies like Google are pushing it with their own technologies, so you see plenty of modern libraries based on it. Not a bad skill to have... 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The big fork in the road isn‚Äôt to much between Java and, say, Python. It‚Äôs between full stack and not. Although it‚Äôs called full stack, in practice those positions are weighted towards the front end. If you take a first job without exposure to html, css, javascript, and some current framework it is going to be tough to present yourself to future employers as full stack. If you want, or at least are content, to be a backend developer starting at a Java shop is fine. You have plenty to learn that doesn‚Äôt have to do with the details of any one particular language and the odds are you will pick up another one or two even without making that a goal. 
I'm gonna add to the echo chamber by using an analogy. Your basic question here is a common refrain in music. A lot of jokes have been made, "How do I get to Carnegie Hall?" You practice, kid. You've established a goal. No goal ever got achieved through research, unless research was the goal, of course. At some point you have to say to hell with theory, and put in the practice. My recommendation, pick something you're sure you can do, but it's challenging. Then, read a chapter or two of those advanced concepts textbooks, and look back at the code and figure out how to replace some piece with one of the new theories. Rinse and repeat. Keep writing new code, keep improving.
&gt; There must be a middle ground between these two extreme cases. I think Java has at least improved over C/C++ where you are allowed to handle exceptions/errors in a really really really bad way - like not showing any clues at all and crash the program without any clue. Btw. I've added another paragraph to my comment above. 
Open source software. If you're familiar enough with java to begin deconstructing how people managed to do things, then this is the best approach. Also read all of the this: [https://docs.oracle.com/javase/10/](https://docs.oracle.com/javase/10/) and just generally find whatever utilities java has to offer, begin piecing it together into software. Set yourself projects you think you can already do, and see them through to completion. You'll be surprised just how much can go wrong along the way, even if you thought you knew how to do it.
Understand what happen when you do stuff, like the memory itself, why static why new and so on. I think every programmer should use c or c++ and create or better say rebuild data structures like arrays or trees.if you have to work with pointers you will understand a lot. the rest is code as much as you can. learn patterns and anti patterns.
Mojarra is the standard. This is what I use with Tomcat. An implementation would also be included with any Java EE server like Tomee, or glassfish. https://mvnrepository.com/artifact/com.sun.faces/jsf-api I work with a small Dev team and we would have to hire 2 to 3 extra people to build out own frontend with a JavaScript library. Primefaces handles most of the work for us.
We use sencha gxt. It's pretty good. 
**/r/javahelp** or **/r/learnjava**
&gt; Second, I do not plan on limiting my career to Java if I ever came to choosing it as a head start, simply because there is no insurance that it will still have the same popularity in the future. Welcome to software development. No current language, no technology stack, no framework, and no library have any such insurance. So, what you are saying is only partly correct. The correct part is that one shouldn't fully limit themselves, but on the other hand, spreading out too far is probably even worse. Yet, there are languages that simply persist because of their specific use cases. COBOL and Java are exactly such examples because they are mainly used in enterprise applications and these tend to move comparatively slowly because they consist of several millions of code lines and interwoven classes.
I‚Äôll speak as someone who is has been doing this for only 5 years. You‚Äôre fine starting at a java shop. Java Iis not going anywhere soon, and being in the financial sector will not limit you. There will still be lots to learn (I‚Äôm still learning a ton). During my short time writing software, I‚Äôve already learned and written a ton of python, JavaScript, and Scala (this one is much tougher to introduce at most shops). With kotlin becoming so popular, some teams at my current company are already mixing it into their current projects or starting new projects entirely in he language. Languages, Frameworks and libraries will change over time. You‚Äôll want to spend some time familiarizing yourself with different programming paradigms, but after that it‚Äôll be easy to adapt to a new thing.
Thank you for your answer! This is actually one of the aspects I was also thinking about, do I let this job for a fullstack offer or not. I do like the "complete" aspect of a fullstack developper and for sure that is more valuable than a backend developper. But in the same time, I feel like the backend part is very complex (more than frontend), that is why I feel like it's fine to go for a full backend job at first to capture the essence of it, then I can expand to a fullstack developper. Though all this is speculation since I am new. Please corect me if my thoughts don't go in hand with what the market's situation.
Thank you for your answer!! This is actually very reassuring. Sharing your experience is very helpful.
Learn how to implement design patterns within the Java language: https://en.wikipedia.org/wiki/Software_design_pattern
As a side note to what people already said, Java has a large ready to use library with tons of things built in. Take some time to learn some of them. A big part of software development is understanding libraries and being able to cope with them. The "Core Java" book (https://www.amazon.com/Core-Java-I-Fundamentals-10th/dp/0134177304/ and https://www.amazon.com/Core-Java-II-Advanced-Features-10th/dp/0134177290/) has a significant portion of the book devoted to the standard java library. If you can get your hands onto it, it may be a good thing. You also have the java official tutorials (https://docs.oracle.com/javase/tutorial/).
By coding stuff. You will learn much faster if you have at least one mentor/tutor 
Thank you for your answer!! The product I would be working on is more of a data management tool for financial uses. I don't know if that changes anything but just to be more precise. As for the digital agencies, I feel there's a lot of luck involved, some might associate you to a project with almost obsolete/old technologies while others might have very interesting projects to work on. And soletimes you can't really choose. I might be wrong though because the thoughts that I'm sharing come from a friend's experience where he was proposed a php/html project and had either that or nothing.
Thank you for your answer!! Actually comparing COBOL to Java scared me a bit there. I doubt I would want to touch any COBOL in my carreer and that makes me more hesitant about Java. Although I get it that they are comparable in that they are both kind of old and used mostly for entreprise applications.
&gt; Actually comparing COBOL to Java scared me a bit there. I doubt I would want to touch any COBOL Experienced COBOL programmers are extremely sought. They get offers beyond good or evil. Probably, in a couple years (decades) Java programmers will be in the same situation. 
first and foremost, focus on your computer science fundamentals. Tools will change (fast) over time, concepts are perennial, go with java, apply the concepts and good practices, but -- if you have the chance on your daily job -- write your tests (unit, functional, integration) in the next jvm language you want to learn ( i am doing this with kotlin, but the options are many ). Java is much, much more than a (somewhat verbose) language, it's a \*huge\* ecosystem of languages, tools, libraries, etc... the jvm is an extremely reliable, battle-tested environment to deploy and run any sort of system in production, with tons of options for instrumentation.
Ah I'd just assumed Vaadin was another backend framework - didn't realise it could do rendering too
Yeah the Java ecosystem for programmers really doesn‚Äôt have much to do with Oracle at all. 
[@formatter's latest tweet](https://i.imgur.com/0eU10Sh.jpg) [@formatter on Twitter](https://twitter.com/formatter) - ^I ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
Well, yes. It really comes down to the agency you choose. Personal experience: keep an eye out for smaller to mid-sized agencies (10-60 people). The chances are bigger that you get to proof yourself and/or that they are more creative in their approach. Also: always check the websites. If you feel they are outdated, that is actually a good sign. Smaller and midsized agencies have a tendency to work on their websites when they are not on projects atm. So the newer the website, the lesser the chance of you hitting a creative jackpot. You also want to check their references - the more diverse they are, the more open they are for new tech. But again: it is just an indicator - I worked &amp; work with agencies who had well updated websites and also don't talk about projects too much... so always ask for reference projects of a potential employer so you get an idea of what technologies they are working with. Lastly: it is an entry position - don't overthink it ;)
There are challenges as well as tedious work in every part of the industry (including devops and embedded, not yet mentioned.) The key is to constantly improve your skills‚Äînot just in particular languages or technologies but in tooling, in communication, and problem decomposition. When you start your job don‚Äôt just be content to do whatever work you are given (though do complete it!) make your voice heard as someone that proactively seems to be involved in the big picture. If this job pays well (yes, that‚Äôs important), is for a financially stable employer, and it seems to have a working environment where you can learn and thrive, I wouldn‚Äôt worry about being typecast. 
Thank you for your help :) These tips will help me a lot for sure (and it is actually clever to look for signs such as the website status). Your last advice is really reassuring and that is what I should be going with :) at the end of the day I won't be able to go with the right choice without experiencing a little bit. And nothing is irreversible.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yes ! Fortunatly this job pays well and the company is actually thriving (it has actually began expanding these last months), so the job should be stable. I also did talk with two of the employees there that are one/two years ahead of me in experience, and they confirmed that the environment is good and encourages learning. I will try to apply your advices to the best that I can :) Thank you again :)
Thank you for the advice !!! It sure helps a lot. I will for sure write my future tests in the language I want to learn. I get the job done and I get to practice what I want. Win-win for everyone :D
That's the spirit :)
you can't download the PDF without login in ? # FAIL
Don't you think you have already **flooded** enough for some time? Please, see reddit's policies regarding [spam and self-promotion](https://www.reddit.com/wiki/selfpromotion). Should you continue, you will face consequences.
that's \*exactly\* the idea ! little tricks like this can take you a long way, and make some boring "again-another-CRUD" project into something borderline fun and educational to work with... 
Maybe you haven't seen [this comment](https://www.reddit.com/r/java/comments/8w1wn3/getting_started_with_spring_cloud_data_flow/e1s17hk/), so I am giving you a **final warning**. Next post will result in consequences in form of a permanent ban for spamming/flooding.
Never needed systray icons, but can't you combine the AWT code with JFX?
... for the record: Your questions motivated me to finally start this business related blog I've wanted to do for a while: https://medium.com/@lukaseder/the-business-behind-5-years-of-data-geekery-and-10-years-of-jooq-4ddb402d90a0 Cheers :)
... I should mention: I really meant it when I said that I would love to hear your thoughts about all this. This is a new spin on business application frameworks and your ideas are really much appreciated :)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Dzone truly is trash
I just hope that by the time JDK11 comes out OpenJFX will be on a publicly accessible maven repository so we can download it with Gradle. I've read more about it and it seems there's no point in using it now with JDK10 (cannot be used actually bc of conflicts).
Vaadin has been completely rewritten for Vaadin 10 to make it based on web components standard and utilizing modern web platform while keeping it easy for Java teams. Here is overview of it https://youtu.be/XwdPkXePtgI
Kotlin is a very good choice for the language to use with Vaadin 10. This makes the app very simple as well as allows you to use one language throughout the whole stack. 
Wow, shebang will work... #!/usr/bin/java
GXT has been the best alternative to Vaadin, but If I am not mistaken the development has ended over one year ago. 
a.ka. don't buy the kitchen sink, instead reinvent the wheel
Looks like all web frameworks have been revolving towards becoming increasingly component oriented now that web components are a standard and implemented natively in all major browsers. 
Will this still be as useful when you have to wait for dependencies to be loaded?
Alright thanks I'll check it out...sooo many technologies to choose from
That sounds just horrible as hell
Really neat information, thank you
Wow. That's nice.
The performance hit (at least with Zing) is negligible. Each object access requires an additional test-and-jump, which, at the processor level, equates to a single micro-op. Since we only have to mark or update a pointer once the effect would be hard to observe. The testing we've done shows that once you need to go beyond the L1 cache (i.e. any normal application) the effect is swamped by other system activities.
Dependencies are just imports, what scripting language doesn't have imports? This could be a JavaScript killer finally. Great news.
who uses Javascript for scripting?
While this is absolutely a useful feature, I worry about what the reaction from the security types is going to be. Now that Java source is (almost) directly executable, are we going to see it blocked as a matter of course by corporate security gateways? What prevents some crafty bugger from using instrumentation agents or some other trickery to load large remote apps using this technique?
In the end it pays off... You have to use JS on the frontend anyway and with VueJS or React your frontend is a lot more structured and powerful. On the other hand the backend code can become really lean and simple, as you are only producing and consuming json. No server side templating, sessions and state. It is also much more micro service friendly, you can distribute the application on multiple servers without it becoming noticeable on the frontend. I know it's more work upfront, but separating the backend and the frontend development makes a project a lot easier to maintain in long term (you can switch backend or frontend techs without it affecting the other side). Removing server side complexity also improves security, availability, testing and maintainability of your software.
It looks like in your [submission](https://www.reddit.com/r/java/comments/8w3bq9/wrote_a_fuzzy_matching_library_for_java_and_scala/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
npm.
Yeah that's gonna be a Node for me dog
With Vaadin 10 you can still write the complete application in Java, but there is no GWT anymore so no more widgetset compiling. In addition, if you need to do the occasional client-side modification, you get access to the HTML elements themselves from the server side, so you can do thing such as `getElement().setAttribute("foo", "bar")` or `getElement().callFunction("focus()")`. If you ever choose to use client-side languages for the client side, Vaadin 10 uses web components which are native to the browser. 
The web.
yes, it's exactly what i had to do. Everything on the application is JavaFX ( running on the JavaFX-Application thread ) and just the code to manipulate the systray isolated in AWT ( AWT-Eventqueue-0 ) but still, it's not pretty... StackOverflow was the best reference for that.
Corporations are going to circumvent it by only allowing java 6 to be installed.
congrats, you have been promoted
I'm hearing that the new hotness is to use #!/usr/bin/env interpreter In the event that the user has a different Java that they want to use or it's installed somewhere different. So this would be #!/usr/bin/env java But, like any approach, there are drawbacks.
It looks like in your [submission](https://www.reddit.com/r/java/comments/8w3x7w/i_usually_end_up_creating_a_loop_in_between/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
But what if the user wants to use a different "env"?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Compare this to ammonite in scala and you can clearly see that this has so many limitations that I would call it useless. They should have made it possible to write code without a main method. Should also have support for maven dependencies and include local script file. If this is a step in a direction then it's fine but it has a long way to go.
Can we change directories in a JvM yet?
Kidding aside, I'm waiting for the collective freakout when the download links for desktop JREs disappear from Oracle's site. "Why did nobody *tell* us?", they'll cry.
Laughed out loud gj
Java *script*
There's only one `env`. Like `/bin/sh`, `/usr/bin/env` is its standardised location. Set the `PATH` to change which java is actually used.
Jesus. That's so ugly and unprofessional. You're right, that needs a serious uplift.
Oh, I see you too are a Java developer... Abstractions all the way down.
Really should be using an EnvFactory, anyways.
I'm no ecommerce expert, but I worked on some shops before, but php based. Altough those shops are not the best with the best design and code you've seen (quite opposite) I think they're successful projects because of their model. The businesses can save a lot of money by buying modules and themes and pay just for small customizations. And if you're tech savvy you can in fact setup it by yourself, buy a theme and you can sell. So my impressions? In general, I think we need a nice versatile ecommerce for java, something you can install, do some country specific setup, email, invoices etc, implement a theme and profit.. With all the functions you'd expect from a modern eshop, but not targeted at specific businesses (think about linux kernel, Linus wasn't thinking about large guys when developing it..). I'm looking at this from the perspective of a small retailer. What I'd realy like to have is a lightweight modular solution (that also means you don't need a cluster to run it) that will grow with the business. Framework side - I'd be able to judge only after implementation, but is it an application of ofbiz and a nicer admin? I like I can see the entities in one place, I like vocabulary based systems in general I mean if you can modify the data model without restarting or recompiling. Is this the case? Processes and services - I saw there a list, but I'm dreaming about nice visual workflows with editor like on demo.bpmn.io (not sure it's possible to do without reimplementing bpm in the end).. I like it supports multistore, but what it can do? Is it just for pricing? If I want to hide a category or products in some stores, is it possible? For example in presta, you can just select a store and overwrite a value for that store (but the db is quite messy because of that) The admin UI is quite old fashioned, definitelly better than ofbiz, but I'd like more ajax instead of click and reload. A better design would help. Also the language translations aren't very intuitive. Just take some ideas from magento or prestashop. Frontend - if it wants to be toolkit, 'basic' raw theme one can start with would be good. Also with javascripts that use events and aren't spagheti bound to pages.. (don't know how the themes you mention look like). The templating is hm, how it actually differs from custom jsp tags? So just some opinions..
RemindMe! 40 years
I will be messaging you on [**2058-07-04 21:14:14 UTC**](http://www.wolframalpha.com/input/?i=2058-07-04 21:14:14 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/java/comments/8vgffp/whats_it_like_working_with_java/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/java/comments/8vgffp/whats_it_like_working_with_java/]%0A%0ARemindMe! 40 years) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Time to write my Super Monolithic God class to compete with you Microservice hipsters.
I think you are mistaken
&gt;dzone.com/refcar... Direct link here: [https://dzone.com/storage/assets/7862400-dzone-rc061-corejavaconcurrency.pdf](https://dzone.com/storage/assets/7862400-dzone-rc061-corejavaconcurrency.pdf) ;)
It looks like in your [submission](https://www.reddit.com/r/java/comments/8w5e8c/how_can_i_stop_mockmvc_from_creating_a_new_object/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You still need to log in
Ah, yep, you‚Äôre complete right... I didn‚Äôt check it...
It depends on the project's needs. My team uses Vaadin 8 and Spring Boot because our project is to produce relatively simple UI's that interface with a finance API. If you're making a public-facing web application, I wouldn't go with Vaadin. 
I am curious on how common this is on non-startup projects. I guess it depends on how the "design expert group" feels about enforcing code maintainability. On the bright side, the design of the project is like how REST is used nowadays, with front-end clearly separated. In our case, it's SOAP (codebase is probably 20 yrs old now). But I'm super happy the clear separation with the UI (an old java MVC framework) was maintained. This is very important piece to achieve a usable test automation for this project.
‚ÄúSpartans! WHAT is your profession?‚Äù
&gt; Java is a good Language for beginners since it‚Äòs quite simple and teaches you to work with obejcts. ( it‚Äòs an object oriented programming language) And so you start showing Hello World. And the beginner now sees: `class`, `public`, `static`, `void`, `args[]`, `System.out` Whether you opt to say "ignore those for now", or give a brief explanation - Imo, to a beginner, this is a hit or miss.
I suggest getting advice here: https://softskills.audio/ Specifically about Internship: https://softskills.audio/2016/08/08/episode-21-interns-and-dead-weight/
EnvFactoryImpl
Anyone using Nashorn
Makes sense since they were supposed to release a REPL at some point in the near future? (it may already be out)
I mean, couldn't that already be done with jars? I don't see why this presents a larger risk
It looks like in your [submission](https://www.reddit.com/r/java/comments/8w6uj2/in_the_context_of_spring_boot_or_other_similar/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The REPL is called JShell, it's been available starting with JDK 9.
It could, but compiling and packing up a jar takes a little bit of effort. Jars are also parsable zips, and the presence of .class files in a zip is a nice warning sign. Straight source, however, is prone to all sorts of obfuscation. It's also possible the filter out all class files, and even all zips containing classes. Up until this change, a user had to *choose* to compile Java source before it could do real harm. Now it's possible to execute arbitrary Java in userspace without that compilation gesture. I agree that it's a very grey area. The line between object code and source has a zillion shades in between, but in this case, I worry that this feature will worsen the perception of Java as an exploitable attack surface.
Hmm, I see, although I still think that jars present just as much of a risk: typically, a malicious actor will distribute compiled (or otherwise directly executable, and likely obfuscated) code, in which case it doesn't matter whether it's source or a jar file. Both cases rely on the code being executed to begin with, and a Java environment being present.
right so Java‚Äôs gonna replace javascript on the web now because you can execute source files from the command line
^((Disclaimer: I work for Vaadin)) React is actually fun and easy framework to learn, IMO easier than Angular at least with almost the same results. But I can not promise you that's easy to migrate from Vaadin 8- to a JS frontend framework, you probably will have to rewrite everything (but that's different with Vaadin 10+ and Vaadin platform in general). Few years ago, I was working in a company to build a medical software. With all security and high level of compliance taken into consideration, and also the skills of the team (strong Java experience), we ended up comparing between Sencha, GWT, Vaadin. We chose Vaadin. Luckily nowadays, the choices are much more and there are a lot of quality frontend frameworks to pick from. Or not luckily? (the paradox of choice). I love the competition and I believe it's the biggest motivation for better results to the end user. Think Android vs iOS, Chrome vs FF, and also all those frontend frameworks. And that's the reason why there is a Vaadin 10 (or Vaadin platform) today. In my opinion, the choice of a specific framework, programming language, database ..etc has a lot of factors. Skills of the team, type of application, backend, ..etc. Things like scalability, structure, coupling, theming, and much more of the points discussed in the replies here are dead answered in several blog posts, tutorials, webinars ..etc. But let's not go there, and back to the points mentioned by the OP: * **Something similar that works good with spring?** More important question, do you want to stay with Java? Your team has capacity to have a separate JS developers to work on the "frontend"? Follow up question, what is the thing you liked about Vaadin that you want similarity to? if it's mainly something that works best with Spring then I would say most if not all of the top frontend frameworks works good with spring. It probably feels more integrated when using a Java framework though. * **A bit more up to date?** Why not VueJS, AmberJS, Dojo ..etc? If you believe that Reactjs (your choice) is the most up to date and modern framework then definitely take it without too much thinking. But if you are stroke with the paradox of choice, you can maybe try to check the community activity, response to bugs/feature requests, the pace of development and alignment with modern web technologies ..etc. Hopefully this can reduce the choices a bit. * **All cool features are for "paid" users?** Correct me if I'm wrong, is it Vaadin Designer? I personally find it one of the coolest things that is only available for pro users.. but other stuff like getting instant chat with an expert or code on demand are, well, not free for obvious reasons. But they do exist! according to the pricing page on Vaadin website, all the non-free stuff do not exist at all in other top frameworks like Angular and React. You can not get things like support from Google or ask a React expert some questions .. or even more ask them to fix a bug for you as a priority. And no, they don't have a visual designer either. **Web native** mentioned somewhere below as well. There is a very nice article and video about this topic, and I promise it has no single mention about Vaadin Framework :-) Exploring the state of modern web development and the near future of the frontend: [https://vaadin.com/blog/going-web-native](https://vaadin.com/blog/going-web-native) \-- A\^2
&gt;More important question, do you want to stay with Java? Basically I die a little inside every time I use HTML, and I utterly despise JS. So as a developer who's used vaadin quite a bit for basic stuff some issues I have: First Grid data doesn't update without disabling/enabling the editor. That is \*extremely\* hackish feeling, and is a \*very\* longstanding issue. Second TextArea/TextField etc do not have events/listeners for typing a character. I have to rely on focus, and it's...really bad. An exceedingly common thing is a search box with dynamically updated results in another component using the text in the search box. Again I can work around this, but I have to do a bunch of hackish crap using ComboBox. That's just...an extremely basic feature that I need on I mean...every project I work on damn near. Even if it's not targeting the public, and is only an employee backend..really big problem. These are only 2 examples, but so much in Vaadin seems..well hackish. This hackish stuff makes it not seem like an enterprise framework frankly. Next compiling themes is really annoying and frustrating. Not being able to add CSS to components is completely insane imo. If I want to change a few colors I shouldn't need to go through all that crap. Last the pricing is...ridiculous given the last few points. Making the designer paid-only is a really bad idea imo. It may not cost that much if I'm getting it for work, but there's a really big problem with that. Before I suggest we use a specific technology I use it and play with it extensively at home. This is just how dev in general works. There should be a price point between "free" and "business prices" for non-commercial use/etc. When I referred to "the cool stuff" I was referring to charts and the designer by the way. There should be a lite version of the designer or something. It's probably cool, but I'm not paying $90 on the off chance I like it. It could be completely useless, and I may hate the UI for all I know. In this day and age a product without a lite version absolutely screams "we don't have confidence in this system." Oh and an aside...the only demo you guys have that actually looks good is the bakery. It looks really good, but a massive portion of it isn't using your component system. So that might be a little incoherent, but those are basically my gripes.
I can dream.
Check out JavaFX. It's like the modern version of Java Swing
**/r/javahelp**
.You should try to avoid coupling your in-game data directly with the kind of UI you want to use. 
&gt; First Grid data doesn't update without disabling/enabling the editor. That is *extremely* hackish feeling, and is a *very* longstanding issue. In Vaadin 8, `grid.getDataProvider().refreshAll()` should do this, depending on your data provider. This seems to also have been added to Vaadin 7.7.7. &gt; Second TextArea/TextField etc do not have events/listeners for typing a character. I have to rely on focus, and it's...really bad. Have you tried `setTextChangeEventMode(TextChangeEventMode.EAGER)` in Vaadin 7 or `setValueChangeMode(ValueChangeMode.EAGER)` in Vaadin 8? &gt; Next compiling themes is really annoying and frustrating. Not being able to add CSS to components is completely insane imo. If I want to change a few colors I shouldn't need to go through all that crap. Fortunately, this is much simpler in Vaadin 10. If you wish, you can edit the style of the element directly, for example `button.getStyle().set("background-color", "blue")` 
You want Maven support to be built in to the standard libs? That's an awful idea. Writing code without main iirc was mentioned on the mailing lists, but would be considered largely unrelated and require far greater justification as it's a language level change. This addition didn't touch any specs, its just a JVM feature.
What‚Äôre the advantages of JavaFX over Swing? Is it easier to code with?
Hey cynicalh, and wow - loads of good points. So lemme try to address all of them: PHP shops Funny that you brought those up, I actually did a fair share of PHP based shop implementations myself. I worked with Woocommerce, Magento, Shopify and Shopware. You are right about the resources that are involved in setting up a shop like that. With websites like themeforest around, it has become really really easy to buy a modern theme and get it installed and customized in one of them. The shops themselves have a tendency to be a lot simpler - not only in UI but also feature-wise. So as long as you have a basic set of feature requirements (nothing too fancy like subscription based models, complex configurable products or a demand for multiple warehouses etc), then you can go a long way with a shop like that. Our project differs from it in terms of size (here: features) and what we are aiming for in general: we give you a long list of examples and want you to modify them to your own needs. We may not have as many themes, but we do make it a lot easier to customize ours and generally simplify the process of adding new screens through our "[templating toolkit](https://www.scipioerp.com/community/developer/freemarker-macros/)". So where in a shop like Magento you would either restyle existing html or end up replacing the inbuilt php files, our system allows you to modify the html entirely from within a theme and then work with macros for your screens. In a way this method is a lot closer to the "living styleguide" idea then most others. Modularity and Workflow editor Scipio ERP is quite modular. All our functionality is clustered across multiple components (modules), which you can extend from or modify. Additional addons are available that you can simply plugin to your system (for example: different accounting standards, new Payment integrations, an Apache Camel integration, new themes etc.). So in terms of modularity this may be a good choice. A visual Workflow editor would be great. We actually discussed implementing one at some point, but so far this idea hasn't really come to fruition. The problem isn't so much that it isn't doable, but rather that the underlying event engine is not a one-way thing, but happens on multiple levels (we have events for requests, entities and services). They operate in a similar way, but are effectively different things, so UI wise we would have to come up with a system to separate all three and still make it easy to design the functional flow. Project History The project started out as a fork from OFBiz, so we do share functionality to a large extend and also remain largely compatible with OFBiz projects. Our goal is different from theirs, however, we aim for ease-of-use and support. For the first version alone, we had updated all applications, replaced all HTML with our templating toolkit, added a modern theme, added new functions and overall modernized the UI. Four years in and we have added new components (setup and cms), new themes (Bootstrap v3, v4, Foundation CSS - each capable of replacing the underlying html), new features, bugfixes, security fixes and more. We also offer SLAs for our enterprise users. Ecommerce functionality There is a lot you can do with the Ecommerce component. It supports multiple checkout mechanisms, diverse product, price &amp; tax configurations, a complete order &amp; return lifecycle. It also allows for drop-shipping and split returns. Everything can be customized and rolled out across a server cluster, which makes this a great toolset for larger retailers. There is also promotions (you can be really creative with them), voucher codes, customer lifetime tracking and so on. Each catalog, promotions and prices and shipping parameters can be specific to regions. So with a single store you could essentially handle multiple regions (and adjust prices and products for them). Since you brought up mutlistore capabilities: you can run multiple webstores from inside a single installation. Each can have its own theme, domain, catalogs, tax rules and companies assigned. You can also have them work with different functions if you wanted to. UI &amp; modern Themes I am not sure which theme you took a look at, but we do support most modern HTML frameworks. In fact you can switch themes on our demo server and try one of the Bootstrap v3 ("BOOTSTRAP" theme") or Bootrstrap v4 ("IGNITE ADMIN" theme) there. The Ignite admin theme is more Ajax driven and there is a switch available, through which you can turn it even more Ajax heavy. Here's a video of that: [https://twitter.com/scipioerp/status/877552760014729217](https://twitter.com/scipioerp/status/877552760014729217). There is also an Angular.JS Shop prototype available on github: [https://github.com/ilscipio/addons-angular-shop](https://github.com/ilscipio/addons-angular-shop) It isn't feature complete, but it is a good starting point and works according to how Angular.JS are used to work.
Yes that would probably be a good idea. Maven packaging is basically standard. Especially useful for scripts. 
&gt; No one uses that sub ??? It get's posts every day and posts get several answers. People get helped by that sub everyday. (usually beginner type questions, lot's of students). 
Using embedded tomcat is pretty common these days. An app using embedded tomcat runs just like any other java application (it just happens to have a web container running in it). It works quite well for cloud deployments.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
JavaFX have many improvements in event handling, view management and many more
I want to use /opt/SoftwareCo/better-env-2.6.3/bin/env