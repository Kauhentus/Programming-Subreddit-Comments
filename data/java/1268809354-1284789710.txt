In that case you might as well just use composition.
To check at regular intervals have a look at java.util.Timer.
[ScheduledExecutorService](http://java.sun.com/javase/6/docs/api/java/util/concurrent/ScheduledExecutorService.html) is what I use to periodically run a task. It has "run at fixed delay" or "run at fixed interval" options.
Thanks! Where would I put the code to make it run in the background? I am fairly new to programming so it may be really basic like a while loop or something like that. I just don't know how it will be run without the user manually starting it. Thanks again.
Quick example: http://pastebin.com/jqD9yzb5 If you run the example it will start and exit right away because after you schedule the task execution continues in the current thread. What happens is it will run the code in the run method of BackgroundWorker, then every 5 minutes after it completes, it will run it again until the program exits or the taskRunner is shutdown. If your background task takes 1 min to complete "scheduleAtFixedRate" will run it again in 4 minutes (it just tries to run it EVERY TimeUnit) whereas "scheduleWithFixedDelay" will wait TimeUnit in between executions.
The GUI should not be periodically checking if the message has arrived. That's really poor design. Instead GUI should be notified that message has arrived. This is a common "producer/consumer" pattern and it's a solved problem. Look into task queue implementation or make one yourself. Basically the producer (in your case the Logic class) will be putting "tasks" or "messages" on a queue, and (possibly multiple) consumers, in your case only one GUI will be reading tasks from the queue as they come and process (display) them. Because your consumer is GUI, the model part of the GUI should really be a consumer so that you don't block the EDT. The message queue data structure can be something like ConcurrentLinkedQueue where the producer inserts messages at the tail end of the queue and the consumer takes them from the head of the queue. 
Either that or just a listener pattern. The GUI adds itself as a listener on the Logic class and gets notified of events.
That really depends on the complexity of the application and its purpose. In the simpler case one could create a custom event class to hold the message payload, and use the listener infrastructure to notify interested parties with events. However, there was a mention of sockets in the title of this post, which makes me believe these messages are coming over the wire in which case I would go with the producer/consumer. But it's hard to tell without knowing more details :D.
Wow, GET requests. That is moving up.
No. It should take less stack space (less memory) since it does not pass in the _this_ object.
O! I thought too many static final constants are bad and we should use properties file instead.
Many of the answers here are good. For a very complete coverage of the topic, Josh Bloch's book *Effective Java* has a chapter on Classes and Interfaces that covers a whole lot of these from an API design perspective. I'm a new Java programmer myself (coming from C), and it's a great book for realigning yourself to "think in Java."
Still no multi monitor support. I love eclipse. I work with it every day. But the fact that I have to open an external editor to view more than one file at a time pisses me off. Maybe one day we will get detachable editors...
By "view more than one file at a time", I assume you don't mean the side-by-side or one-over-the-other views that you can actually make Eclipse do relatively easily, but instead detaching (an instance of the) editor window), right? I've found that opening two files side-by-side is often very helpful.
Window -&gt; New Window does not work for you? 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=8886 - Bug 8886 - [DetachedViews] [EditorMgmt] Floating editor windows http://wiki.eclipse.org/Improve_multi-monitor_support - Dev status http://stackoverflow.com/questions/318940/any-tips-on-how-to-organize-eclipse-environment-on-multiple-monitors - Discussion http://www.realtimesoft.com/ultramon/ &lt; a $ solution
I drag eclipse across all my monitors - works great and I can use all the room quite easily.
No, that makes a new everything. What he wants is just a new editor pane that detaches.
Wow, that was ... underwhelming.
use "the go faster flag"
I usually explain it like this... Think of private vs public class methods (or variables). You need an instance variable to hold information, but you don't want other developers directly setting values to it because it could mess up the intended operations. They could possibly set values to the variable that are considered "illegal" and cause the program to sputter out. Using final is like using private on a variable/method. That class needs to be there, but the class is important to the internal workings of the program, and it needs to be shielded from outside influence. It typically only makes sense to do this to classes that really are CORE components of the program. Because extendability is an important role in OOP. However this really is a programming style decision.
only a commercial combination because SpringSource is a division of VMWare now.
if you subclass without upholding the Liskov substitution principle See this [article](http://okmij.org/ftp/Computation/Subtyping/Preventing-Trouble.html)
Hi, If you like the video, check out my monitoring service over on http://java-monitor.com. It will warn you via e-mail in case your Tomcat, JBoss, Glassfish or Openfire server goes off-line. It will also give you the memory, file descriptor and thread pool graphs that I used in the presentation. What's more, that service is free of charge. Check out the live demo on http://java-monitor.com/livedemo.html Check out http://java-monitor.com/install.html if you want to try it for yourself. Installing Java-monitor should take no more than 5 minutes. Even if you don't want Java-monitor to monitor your app servers, you are welcome to join in the discussion on the forum http://java-monitor.com/forum/ Full disclosure: that is me doing the presentation. :) Kees Jan
Reading the JVMs referred to as "application servers" really threw me off... the writer is clearly not a developer
Fashionable != standard; those are two different concerns. If you want fashionable or "cool", then try GWT, ZK, or the like. If you want standard, then stick with JSF. That said, we're only talking about the UI layer so far. You'll still need to consider the middle-tiers, backend storage, etc. At some point, being scalable and reliable is what's going to be interesting to you; regardless of how "fashionable" a new technology is considered.
I've recently discovered for myslef [Click](http://click.apache.org) and just using it now for a small project, and ... like it. Good tool support, Eclipse/Netbean plugin, a direct way of doing things, and for the shiny stuff I use jQuery. Also you may have a look at [Vaadin](http://vaadin.org) which I have not actually tried, but which looks promising and mature enough. Or and shiny, too ;)
Spring is well sought after by employers, and does the job well. Struts 2 is also widely used. 
There is a framework called [Tapestry5](http://tapestry.apache.org/tapestry5.1/): * [Howtos](http://wiki.apache.org/tapestry/Tapestry5HowTos) * [Support](http://old.nabble.com/Tapestry---User-f340.html) * *[Spring Integration](http://tapestry.apache.org/tapestry5/tapestry-spring/)* * *[Hibernate Integration](http://tapestry.apache.org/tapestry5/tapestry-hibernate/)* * *[GWT Integration](http://wiki.apache.org/tapestry/Tapestry5GWTIntegration)* * *[Open source applications on Tapestry5](http://wiki.apache.org/tapestry/Tapestry5OpensourceApps)*
I just completed a project with GWT which was a pleasure. It's all very easy to work with especially for ajax and dhtml. I have also heard good things about DWR if you want ajax but it doesn't offer any fancy client side layout stuff like GWT to my knowledge.
I think it comes down to personal taste and your level of familiarity with various technologies. I prefer a stack with Velocity or Freemarker and jQuery for the UI, Hibernate for persistence, and Spring 3 MVC connecting it together.
Uses Groovy, but is really good: http://www.grails.org/
I'd agree with this. I work at a large-ish web development business (1000+ employees with web applications as our primary focus) and we use Spring / JEE almost exclusively.
I would go with JSF 2 with a nice component library. Prime Faces (http://www.primefaces.org) has very good JSF 2 support and is a very nice component library.
Play! Framework ftw
GWT is fundamentally different from all other frameworks as it's essentially a Java-to-JavaScript compiler. It is an impressive technology, but its domain is somewhat limited in comparison to more generic frameworks. I'd say go JSF2 or Wicket. JSF2 is more standard and will be the technology for many commercial projects, but Wicket is pretty widespread too and is probably easier to get into (I know only JSF and I like it, but there is a complexity issue).
Yep, and it, like all versions of Tapestry is not backward compatible. HLS refuses to put the effort into regression testing and would rather reinvent the wheel when it suits him.
It is taken into account, check: "Backwards Compatibility Tapestry has been plagued by backwards compatibility problems with every major release. Tapestry 5 does not even attempt to be backwards compatible to Tapestry 4. Instead, it lays the ground work for true backwards compatibility going forwards. Tapestry 5's API is based almost entirely on naming conventions and annotations. You components are just ordinary Java classes; you will annotate fields to allow Tapestry to maintain their state or to allow Tapestry to inject resources, and you will name (or annotate) methods to tell Tapestry under what circumstances a method should be invoked. Tapestry will adapt to your classes. It will call your methods, passing in values via method parameters. Instead of the rigidness of a fixed interface to implement, Tapestry will simply adapt to your classes, using the hints provided by annotations and simple naming conventions. Because of this, Tapestry will be able to change internally to a great degree without it affecting any of the application code you write. This should finally crack the backwards compatibility nut, allowing you to have great assurance that you can upgrade to future releases of Tapestry without breaking your existing applications. This is already evident in Tapestry 5.1, where many new features and improvements have occurred, but is still 100% backwards compatible to Tapestry 5.0, as long as you've avoided the temptation to make use of internal APIs." &gt; 5.0/5.1/5.2 : '100% backwards compatible' On track: * https://issues.apache.org/jira/browse/TAP5-577 * https://issues.apache.org/jira/browse/TAP5-1068 References: * http://old.nabble.com/Will-back-compatibility-hurt-further-T5-development--ts24126170.html#a24126170 * http://old.nabble.com/-5.2--unexpected-TransformationException-ts27761480.html#a27771834 
The thing about Java web frameworks, is they all can pretty much produce the same result if you know how to use them. Find something you are comfortable with and like and stick with it. Personally I haven't found any framework I like enough to stick with for my personal projects. There are features in JSF+Seam, Wicket, Tapestry, Struts, etc that I like but plenty I don't like in all of them.
All of this was said last time. Sorry, after the change from 3 to 4 I will never use Tapestry again
Not Java (though it most certainly does run on the JVM). I do like it though (especially under grails).
+1 for Spring. The support for annotation based configuration and XML namespaces added in Spring 2.5/3.0 makes creating an MVC based app a straightforward process.
stripes
While fairly new to the table, I also would recommend looking at Roo. http://www.springsource.org/roo 
Upvoted... Why don't more people know about or use Stripes? It's awesome!
I was also burned by this. Listen to heartsjava! Avoid anything by HLS.
J2EE folks hate simplicity
Being scalable might be important if you have enough concurrent users.
Thirded. Fool me once, shame on you. Fool me 5 times, and I must be an idiot. Compatibility from 5 to 5.1 isn't enough to counter the fact that every major release has been a compatibility nightmare. If Tapestry was the only show in town, it'd be one thing, but Wicket is similarly component based, and the developers have shown alot more maturity and forethought in the entire release process, and I like the framework itself better anyway. 
That's not totally true. It also has the RPC functionality that makes writing the server side much easier than vanilla servlets.
I use java struts v1+hibernate and django. Is there any java framework that approaches the ease of use of django? I'm genuinely interested.
And struts wasn't backwards compatible with v2, sucks I know.
I've been using Spring MVC + JPA (Eclipselink) with great success. Hardly an XML, lean and mean.
But c'mon. For some applications it's pretty apparent the user base will never be large enough such that scalability is a concern. Take the web application I'm currently working on...
Did I say struts was a good model ?
Additionally, minor version releases should be 100% compatible, that is nothing to pat yourself on the back about.
Fair enough. However, remember that applications are much easier to write for the desktop and you get a much richer experience to boot. If your target audience is that small, then if I were in your shoes, I would consider a desktop app instead. Feature for feature, it's much easier to implement and you can serve your niche that much better because you'll turn around new features faster and be able to have a more feature rich experience in a short period of time. There are other trade-offs of course, but the bottom line is that not every app needs to run in a browser. Certainly, the majority of apps the average person uses do not.
I like Play! a lot, too
Unfortunately, people never seem to want desktop apps.
Struts 2, Spring 3, Hibernate etc..
I recently used Wicket to recreate a web-app I had horribly hand-coded using JSP in the past (And by JSP I mean plain Java written in between JSP tags). I'm pretty much a J2SE developer and know the basics of HTML and Wicket was definitely easier to jump into than anything more J2EE related. Bonus: there's a Netbeans plugin for wicket. Running a webapp in the debugger is pretty cool. Wicket itself also has pretty good error messages that tell you when you've included something in a template but not created the Java component or vice-versa. Wicket itself is on the lightweight side and doesn't come with an ORM but there a bunch of howto's and such for adding JPA/Hibernate or Spring into the mix if you want to.
Create a new window. Drag editor to other window. If you want two editors, just drag a single tab to new window.
I'm going to put in a vote for [Stripes](http://stripesframework.org/display/stripes/Home)--hands the the smallest, fastest, funnest, coolest framework I've played with. I manage a Struts 2 team at work and once some of them started playing around with Stripes, they started falling in love.
So, Path is the new File? To be honest, the Attributes bit looks overly complicated (perhaps just because I've never really needed to go beyond the File API). The WatchService class looks like it could be very useful.
One Caveat about JSF, it holds a lot of client state so you probably want to use it for more interactive web apps where one is logged in and working with more complex data. For that, it's great. It's a bit heavyweight though for a high traffic not-logged-in public website.
I am so done with Java
How come?
blahhh 
If you are using JBoss, take a good look at Seam and Richfaces. It creates a powerful JSF UI.
Happy April Fools???? (oh please, oh please, oh please)
While using enums like this is a good idea, you can do even better than the last example. Each enum instance is actually a subclass and can have its own methods, so you don't need the StateInterface at all: enum State { OPEN { public void doSomething() { System.out.println("open"); } }, CLOSE { public void doSomething() { System.out.println("close"); } }; public abstract void doSomething(); } 
it is for real!
Nothing is real on april fools day
Is *that* for real?
Nothing is real on april fools day. Not this. Not that. Not even you.
So: **Scay**-lah, or **Scah**-lah? Yeah, I'm late to this party. :|
I believe it is ska-lah
I think from Java6 almost all String concatenation is done in StringBuilder and you don't really need to make your code look ugly.
Or just use StringUtils.join(Collection, "delimiter") from apache commons
Is that all they're going to add? I thought the first set of NIO stuff was done fairly well.
Is it Java 1.5-compilant yet?
Just as all String concatenation was done with StringBuffer, it is now done with the StringBuilder, which has the advantage of not being synchronized. It will create a new StringBuilder for every use of string concatenation, which means you might want to use the StringBuilder "by-hand" if you're doing lots of string concatenations in a loop. 
That's nice if you already have a collection that contains all elements -- otherwise it's not so nice to have a create and alloc a whole new collection to give it into this method.
The only one of these I really see myself using is deepEquals. Otherwise, most programmers don't even bat an eye at ternary statements, which are available in most popular languages, for example.
 &amp;amp;&amp;amp; For a very brief moment I was worried.
I would think it would make more sense for Objects.nonNull() to throw IllegalArgumentException, not a NPE.
Java 7 seems like it's going to solve a lot of problems most people don't have, but everyone has at least one problem that Java 7 *is* going to solve, if that makes any sense.
&gt; but everyone has at least one problem that Java 7 is going to solve Are you referring to lambdas ?
I think he's saying that Java 7 solves a dozen problems, and of those, one of those problems is something I have to deal with, and another is one that you have to deal with, but they're not the same problem.
I'm not too fond of this (the nonNull crap), hopefully it'll be something that won't catch on.
Looks pretty cool, thanks!
http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Integer.html
Might be useful to look at the code for Integer: http://www.java2s.com/Open-Source/Java-Document/6.0-JDK-Core/lang/java/lang/Integer.java.htm
Thanks for this, One question, though. For example, in an earlier class (c++), we had to implement a binary tree, which looked something like this below. And I'm looking for something similar. Basically, how to format the skeleton. ` class Binary\_Tree\_Kernel\_1 : procedure_body Compose ( parameters,parameters,parameters ) { blah blah blah } procedure_body Decompose ( parameters,parameters,parameters ) { blah blah blah } function_body Integer Height () { return blah blah blah } }; ` 
Oh yes, this is exactly what I'm looking for! Thank you.
public class BinaryTree{ private classVariable; public BinaryTree(){ //constructor } public int whatever(param1, param2){ blah; blahblah; return 5; } } etc
I'm assuming that "value" is the sole parameter of your "increment" method. Can you post the method signature of the method you have written and provide some sample input and expected results? It is not abundantly clear as to what you are trying to accomplish. thanks
Yes, sorry about that. I'm trying to treat the String value as if it were a number, and this operation is meant to increase it by by one, making the appropriate substitutions of "9"s to "0" according to moving from one's place to ten's place, etc. Value is a string, and is the sole parameter of Increment. Here are examples of value before and after: in: "0" out: "1" --- in: "4" out: "5" --- in: "9" out: "10" --- in: "999" out: "1000" 
String in ="9" in=""+(Integer.parseInt(in)+1); edit; I just reread the question, my example doesn't fit the requirements :( , I'll think about it a little more
The thing is I need the only length restriction to be the computers memory i.e. bigger than any int/long/etc can contain.
I suggest that you look into the BigInteger class. Would save you lots of time! import java.math.BigInteger; public class Test { public static void main(String[] args) { BigInteger myBigInt = new BigInteger("0"); myBigInt.add(new BigInteger("1")); } } 
I think you want java.math.BigInteger
Oh, sorry, I should have mentioned, I was asked not to use this.
Is this a homework assignment?
Ah yeah, I remember this assignment from college. :P
Instead of using a String (unless your assignment specifically says to use a string), I'd think about using a bit array and just bit fiddle. :D
I had to do this in C though. Woulda been more comfortable with Java.
So, as this seems to be a homework assignment, I'm not going to provide an alternative implementation, but just some comments. You'd do well to clean the code you have. I know these things seem unimportant, but they're not: * you misspelled "string" as "spring" in the comment "remove it from spring" * your variable names are uninformative, misleading even. "trash" and "counter" are not descriptive. I would have taken trash to be an unimportant variable, and count to be important only within the scope of a loop. * If your variable names were more descriptive, you wouldn't need so many comments. They're more distracting than informative here. * The indentation is inconsistent. You leave a comment above the if statement, at the same indentation level as the if, but below the else statement, indented by one tab. I'd also consider using for loops in both places you used while loops. If you made just those changes, the code would be much more readable. EDIT: Adding to my list, use variable and function names to your advantage. If you make a function String lastChar(String value) {return value.substring(0, (value.length()-1)); } Then, you can change the code: int trash = Integer.parseInt(value.substring( value.length()-1 )); to int lastDigit = Integer.parseInt( lastChar( value ) ); Then the comment "//turn last char to integer" becomes superfluous. The flow of the code itself tells you that that's what you're doing. Similarly, while (value.substring(value.length()-1).equals("9")) becomes while( "9".equals( lastChar( value ) ) ) { The algorithm itself starts to be documented just from the code. EDIT 2: fixing up names.
What about the "Integer" Class? //takes a string parameter that contains an integer, increments the integer and returns it as a string. public static String increment(String p) throws NumberFormatException{ int parsed = Integer.parseInt(p); return Integer.toString(++parsed); }
Yes, otherwise, I would never ever do it this way. The assignment has no requirement on efficiency, so in that sense, it's already completed. I'm not asking for handouts, or anything, I just want to make it more compact as a learning experience.
Thanks for the advice. :) As I said before, I'm not looking for handouts. Our professor doesn't grade on efficiency, so it's already completed. I just want to make it faster so it's less ugly to look at.
That won't work since the purpose of the exercise is to get around the limitations of native integers. 
 in_num = "33109449" def plus_one(the_num): if not the_num: the_num = "0" begin = the_num[:-1] last_digit = int(the_num[-1])+1 if last_digit &lt; 10: return begin+str(last_digit) else: return plus_one(begin)+"0" print "result = ",plus_one(in_num) 
Sorry to say but I used your code and got errors. Anyway since I'm an enabler, here's what I made: public static String increment(String number) { number = increment(number, number.length()-1, 0); return number; } private static String increment(String number, int pos, int carry) { if(pos &lt; 0) { return (carry==1?"1":(number.equals("")? "1": "")); } int tempi = Integer.parseInt(""+number.charAt(pos))+carry; carry = 0; if(pos == number.length()-1) { tempi++; } if(tempi &gt; 9) { carry = 1; tempi = 0; } return increment(number, pos-1, carry)+tempi; }
Really? Could you tell me what didn't work? I'm trying it now, and it's working fine. Thank you for the example, though. I appreciate it a lot.
The only practical way is to cast it into some kind of int (or double etc) and use variable=variable+1; In the real world this is what you would do When I remember doing this assignment in school I wasn't allowed to do that, I made a recursive function to do this, you'd pass in the string number and an index (defaults to the last index of the string), and I'd run a lot of if statements on that last character private void recursiveIncrement(String numberstring,int index){ String current_char = numberstring.substring(index,0) //or whatever the paramaters are to take a specific character at an index if( current_char = "1"{ current_char="2" }else if(current_char="2"){ current_char="3" }else if(..){ ... } ... else if(current_char="9"){ current_char = "0"; recusriveIncrement(numberstring,index-1); } } not exact code, but you get the idea. There are probably other ways to do this, but that should get you going 
I think the exercise is supposed to be about string parsing. There aren't really any limitations to native integers that are solved by using strings instead.
static String add(String in){ String num=""; String digits[]=in.split(""); for(int i= digits.length-1;i&gt;=0;i--){ if(digits[i].compareTo("9")==0){ digits[i]="0"; }else{ try{ digits[i]=""+(Integer.parseInt(digits[i])+1); }catch(NumberFormatException e){ num+=1; } break; } } for(int i=0;i&lt;digits.length;i++){ num+=digits[i]; } System.out.println(in); System.out.println(num); return num; }
First sentence of the post, &gt; I'm attempting to treat a string as a number **(to avoid any length limits)** The OP is implementing a naive bigint class. By using a string for storage an integer is only limited by the available memory, rather than 32 bits. Converting to an integer to do the work subverts the bigint property of the string. 
BigIntegers do not store the data as strings....... And it makes no sense to use a string instead of a BigInteger
That's why I called it naive. Strings are just one way to achieve bigints. He said he's not using the BigInteger class because it's a homework assignment on implementing bigints (hint: this information is all at the beginning of the thread we're in). 
aka string parsing exercise.
Sorry I don't remember what didn't work. Since I didn't have your whole code I just copied and pasted, and filled in whatever variables weren't there. Probably missing something. I think I did get an error when passing in an empty string.
Yes this is the new File :) But you can of course always use File. And i agree for the attributes, it's a little complicated, but this the price for more flexibility (attributes not on all operating systems by example). 
No, this is only the Path part of the NIO2 API ;) I didn't covered all the new stuff. 
1. Buy the book, "Refactoring" by Martin Fowler. Read it, study it, know it. 2. Buy the book, "Design Patterns" by Erich Gamma et al. Read it, study it, know it. 3. Don't ever write a two-thousand line base class again.
How to create a page peel effect in Java to be used in filthy rich clients. Includes downloadable code and a Java Web Start demo.
Hopefully he'll still be an active part of the evolution the Java language, now that it's open source.
Doesn't bode well. Strong hints that he doesn't like the direction that Oracle is taking Java. Maybe he'll join the Scala project and help make it a worthy successor. :) 
Are you implying that Scala is not, currently, a worthy successor? :)
Actually, by no means. I like it a lot. I see two basic roadblocks at the moment to wider adoption (both associated with learning curve for junior engineers): 1) I haven't tried the 2.8 betas yet, so I haven't seen the purported IDE improvements. It used to be pretty inconsistent (at least in Eclipse). Code complete and syntax highlighting need to be solid. 2) The type system is great, but makes for confusing scaladocs. Odersky has proposed a simplified presentation of type signatures for auto-generated docs, with the ability to click through to see the more correct version. I think this would be a big win.
Here you can find a large list of reasons why IDEA is better than Eclipse: http://stackoverflow.com/questions/239732/things-possible-in-intellij-that-arent-possible-in-eclipse
Do you write code like this for a living?
no, that method is a combination of the algorithm I would use to solve the problem , impersonate a first semester programming student and laziness. Why don't you post your code, I enjoy learning from others. 
Just giving you shit. My code isn't the greatest either.
Holy crap, I just looked up java.net.URL . NICE!
Ugh, the continued legacy of Sun's attempt at extreme openness. The JCP is such an odd mistake. Sun formalized everything into this corporate standards body, and then they acted surprised when it all turned into a strategic deadlock.
Use [JNA](http://en.wikipedia.org/wiki/Java_Native_Access) instead. Seriously.
Using [commons-exec](http://commons.apache.org/exec/) can help with some of these.
It seems like a useful way to assert (without the assert keyword) that something isn't null without having it happen inside some sort of critical piece of code. So your method would still throw a NullPointerException, but it would happen when you wanted it to instead of in some critical transaction.
But it's not like youre NOT going to check for null. (or the object which represents null).
swing? no thnx.
How does it compare with JIDE?
Oh dear, I like that the API docs are on the website, but the utter lack of actual javadoc comments is terrifying. 
I don't think I'd use it myself, but I can see cases where it would be useful as an alternative to assert(x != null); * It's not quite an "assert", because you don't want it to be able to be turned off. * It's not quite an IllegalArgumentException, because it may indicate some deeper programmer error rather than a bad argument. * It's not quite a normal NullPointerException, because you chose to check for it on your own terms before entering a critical piece of code. 
"Documentation: Work in progress..." Famous last words. Nothing injures the usability of a library more than missing or inadequate documentation. I'm a member of the Better Swing Application Framework project at Kenai (we're carrying on development of JSR-296's AppFramework while it's inactive), and the biggest issue we have to tackle with SAF 1.03 is its sketchy documentation. Bug fixes aren't doing folks much good when they can't even understand how to use the framework in the first place.
It's hard to write the javadoc when you are writing the code. After all, you just wrote the code, what it does is obvious. public void updateView(). What does that do? Well, duh, it "updates the view", and so you write that. It's only later, with distance, that you realize a user of that method might have other questions in need of answers. Documenting your own code runs into the same problems that testing your own code does.
What? Why in the world would anyone built a Swing app vs an RCP one?
Very true. I find myself at a loss when trying to write javadoc comments for my methods all the time. Setters, getters, and constructors can be the worst, but they're everywhere. For such reasons, when people neglect to write java doc comments, it pains me to judge them. But I do. As you mentioned, developers that use your code will inevitably have questions. It can be tough writing helpful javadoc, and it's usually a dull job, but that doesn't make it any less necessary. With BSAF, we got a head start from developers at Sun, and it's an open process, so we're fortunate to get a good deal of input on such things. I'm sure things aren't quite as easy over at CodeRight, but I still don't think such sparse documentation is acceptable.
For a large or enterprise scale application, I think you have a very valid point. But if I wanted to just add a GUI to a little pet project, your comment seems to imply that using something like the Eclipse RCP wouldn't be complete overkill.
Yeah you're right. I've actually developed enterprise eclipse RCP apps, though don't currently and even for a small project I'd probably still use rcp/swt, but that's just because I know how to do it. For the laymen it may be overkill.
What's better about eclipse RCP than netbeans RCP?
I have the dlls in the right spot. I know it works, because it worked perfectly a few hours ago. I literally did *nothing* to change anything. EDIT - It tells me there's no jogl. Since, when I actually took away jogl.jar, it squawked something else at me, it must mean jogl.dll. But I never moved it.
When you run your application outside the ide, make sure you include -Djava.library.path argument like so: java -Djava.library.path=C:/path/to/jogl/dlls -cp .;./classes; ...
Are you using ANT? If so you need to put the following in your &lt;java&gt; tag to have it see the libraries assuming that they are in your lib folder: &lt;sysproperty key="java.library.path" path="${basedir}/lib" /&gt; I'm having my own issues with JOGL if you get it working.
Man, I shoulda had an ERLANG!
Point for you cus that was helpful. I don't understand why when I did this in the editor and compiled the jar it didn't work, but when I tacked it onto the command line call to the jar it did. Anyway not it tells me I can't load a 32bit dll on a 64bit system. Apparently that was just fine yesterday.
Out of curiosity, what sort of requirements would force you to ensure that threads don't share random number generators, that wouldn't better be solved by just making the RNG private/local to some specific set of methods/classes/packages?
If you want a simulation to be repeatable, but to use random numbers to invent different scenarios, then it's important that you select random numbers in the same sequence each time, so that you can use the seed of a past simulation to repeat that exact same scenario. This comes up frequently in training programs, like one might develop for the military, for crisis centres (such as the 911 call centre) and so forth. However, the inability to set the seed of these random number generators completely wipes out that use, so...I really don't know.
Seems they fixed it already. Still a bit of a headache that you have to upgrade the entire jvm to fix a browser plugin bug. http://threatpost.com/en_us/blogs/sun-about-face-out-cycle-java-update-patches-critical-flaw-041510
it will never stop to suck. it is not possible to fix it without tearing it down and starting over. then it wouldn't be JSF
Why would anyone PAY for this crap?
Maybe your IDE was pointing to 64bit dlls... Check your jogl install and see if it includes 64bit versions of the dlls.
I made it point to the 64bit dlls. Really... I don't know how what I did fixed the problem. The problem's not even really fixed. It's a real mess. I'm just carrying on with the in-IDE production, since it's not affected by the end result.
There was some interesting stuff in [JSR-296](https://appframework.dev.java.net/) which was partially folded into Netbeans' GUI builder support along with the beans-binding bits... Then it stopped getting regular updates. Anybody know if this is related?
Javadoc-style documentation sounds like a great way to do "parallel pair programming"... When it comes to getters and setters, my philosophy is that unless you find yourself writing more than "Gets the X" you should leave it blank. It also makes it so that documentation-readers don't have to wade through a lot of stuff looking for a needle in a haystack. They can quickly identify the functions which actually have documentation worthy of reading.
Scala covers all of these cases better. I think they should just rebrand Scala as Java 8, and be done with it. :)
Nice to see some of the great features from Python making their way into Java.
wonder how long it will take the kojillion of installs out there to move to this fixed version..
like that will last long with oracle at the wheel
This is actually very handy, just ran it and was able to identify some jars in out main library's lib folder that are no longer in use.
What made you decide to spam hundreds of people with an unsolicited job ad, even though you knew r/jobs existed for this specific reason? It's not surprising that you don't include your company's name.
Actually, it's just Java that is the source of many of my problems....
Type 5? Fuck that. **Type 6!**
JDBC is dead. Why isn't the world moving to database drivers provided through OSGi? We shouldn't have to worry about "having the right JARs", when OSGi provides an existing and elegant solution to JAR hell. Otherwise "Type 5" looks like it will have exactly the same problems as "Type 4".
&gt;"Deployment headaches such as having to deploy multiple JARs to support different JVMs or database versions, or DLLs to support certain driver or database functionality." Isn't JDBC4 pure Java and thus does not rely on any DLLs? Other than that this is an interesting article.
The content in that article was 'thin'
To OP: This is the most common use case I've seen in daily practice. Unless you're writing APIs, it's likely to be the most common use case for you too.
Does anyone know how this compares with SQLite? 
It's is slower than compiled SQLite, but pure-Java. The pure-Java version of SQLite (SQLiteJDBC) is slower than JavaDB though. The fastest pure-Java DB I've seen is H2 if that's what you need.
Actually, those are pretty obvious, and I've been using them for many years, and have yet to work with a Java developer who doesn't do just that. Of course, it may have helped that the Java developers I've worked with, were all forced to learn Java by reading the SCJP Exam books.
Collections would trump arrays if collections supported primitives. Sometimes you can't afford 16 bytes of object header + 4 bytes to store the int + 4 bytes of padding + an 8 byte reference to store an Integer in an ArrayList when you could store an int in an array with 4 bytes. This is why people always trash java for being a memory hog.
That's funny!
I'm not sure why you're being downvoted for this, because you're correct. The overheads involved in creating an object, be it in Java or C++, make them far slower than contiguous-memory arrays. I once did a head-to-head comparison of merge sort of every word in *War and Peace* (about 500k strings). I coded in Java 6, so no old-timey cruft involved. With ArrayLists, the sort took five minutes. With plain arrays, it took 1.7 seconds. So the article is dead wrong, for that use case anyway. That said, the immutability of Java's string class make it very memory-efficient under the hood. I prefer Java strings to the options available in either C or C++. 
That seems strange. I'm sure the ArrayList implementation needed a bit more memory, but you were already dealing with objects (ie strings), and, in any case, as long as it had the memory to work with that it wanted, why would it take that much longer?
At this point, you are saying "I am smarter now than I will be in the future, and smarter than the consumers of my API so I have to stop them from breaking anything." 1. You will get smarter. 2. If someone else fucks up their system, its not your problem, unless you explicitly don't trust your teammates.
OP: They're smoking crack. They are all edge cases and what-ifs and maybes. I have a coworker who *loves* final for all of the reasons listed here, and I've had to point out "hey, I want to do X" here, and I remove it and he's agreed. If you're worried about the sanity and well being of the system, you should remove the ability to delete files (you could kill the OS), remove for loops (they could be infinite), and for love of God and all that is holy what is System.exit() doing in there?!?! Someone could kill the ENTIRE process from anywhere!! 
I hate all of you people. You make me cry. You are what is wrong with the world today.
Math class is final. Imagine if someone overrides the behavior of square root method. World as we know would collapse..
Yeah this seems to be the general response. However just make the square root method final, why the whole class? Surely the world won't collapse if I add an additional method.
Because of the way merge sort works. When you run merge sort, it recursively splits the arrays until it gets down to two arrays of one item each. Then it unwinds the stack, putting the arrays back together in order. When you're creating a standard array, that's a very efficient process for the JVM: it simply grabs enough memory from the stack to hold references to each string. If you're creating an ArrayList, it's a much heavier process. You have to instantiate every list, every parent class, every table of methods, run every static block, and every one of these actions involves a lot of housekeeping that you're not even aware of as a user. This inefficiency doesn't affect the creation of your strings, because Java will only ever create one instance of a unique string. Every reference to "the" in *War and Peace* is a reference (essentially a pointer under the hood) to the same location in memory. This is an application of the flyweight pattern that makes strings in Java very zippy, much more so than in other languages I've worked with. But with the exception of strings, when you're creating a huge number of objects in a loop or a recursive process, it bogs down your performance much more than most Java programmers suspect.
That makes sense. Maybe you should also try with a java built-in sorting call or use a sort that does so in place, like quicksort or something.
I did implement both quicksort and heap sort, but with arrays only, not with collections. You're right, though, that would be an interesting experiment. The lesson I took for my merge sort experience was *not* to prefer arrays over collections -- there are many cases when I'm more than willing to trade the memory overhead for ease of use and clarity. But if I'm trying to optimize an inefficient method, I will always look for repeated object creation within loops.
I'm sorry, but I am simply not understanding why I would convert the args to main() into a linked list. 
You have a point there. But if all methods of a class are ought be final, why add final to each method?
Not sure I understand. It seems like you're suggesting that saying final class ...{ } is a good shortcut for class ...{ final .. final ... final ... } But the former means I cannot extend the class and hence cannot add additional fields and methods, whereas the latter I can. If that were the actual semantics of 'final class ...' then I sort of think that would be more useful. note: still speaking as a bit of a java newbie
You are asking the right questions. It seems that for some classes, it should be absolutely not allowed to add any new behavior to a class, as the existing one is complete in all respects. So if one needs a specialized task for String/Math, one needs to create his own classes. Java doesn't take any responsibility of those...
&gt; Dumping array contents into a string, for example, requires iterating through the array and concatenating the contents together into a String; Arrays.toString(array). No need to create an extra intermediary object. There are advantages and disadvantages to using both collections and arrays, and I don't think it's a good idea to have a blindly formulated rule like "convert all arrays to collections." It just seems lazy to me. &gt; It would be inefficient to resize the collection with each add or remove. This is not necessarily true, and is indicative of the problem the author mentions in the first paragraph: that many programmers associate Collections primarily with ArrayList. Iterating through a LinkedList using the ListIterator interface to add and remove elements should be fine as far as efficiency is concerned. 
JBoss 5 was a major rewrite and it should take some time to improve in the areas of startup time and memory usage as well as performance, etc. However it would be more useful if you had given some real numbers comparing JBoss 5.1 to 4.2.2.
4.2.x is really fast on today's hardware. At least with JBoss 4, and I assume the same is true for JBoss 5, you could improve startup time a lot by cleaning up the deploy folder (or using the minimal server layout) that contains quite a few services you probably don't need (in a developer environment).
Really depends what you are doing. As has been mentioned, I would run the minimal server env and add in what you need from there. I haven't had any mem issues in production, the only hting I wish they were a bit better about is blowing cache by default, but this is also configurable. Aspects are *way* improved, like the web services stack. JBossWS is great to work with compared to axis/axis2 - quick, good wsdl generation, easier deployments, better monitoring and excellent response times. Same with the JSF stack improvements. We don't use their messaging, and have replaced it with an ESB I wrote on top of ActiveMQ a couple of years ago, but this is the only aspect that I normally pull for memory saving out of the default config.
Show me the numbers. Otherwise, this is a troll from a competing vendor.
Have a look at this discussion here: http://stackoverflow.com/questions/1927071/improving-jboss-5-slow-startup
I don't totally buy the whole "OMG oracle bought sun now the atmosphere is too different to continue working here so everyone must quit their jobs" deal.
I will take a look at that. I use StackOverflow occasionally but didn't consider it for this - sometimes it's better to use something like Reddit to point in the right direction (StackOverflow vs. various forums, etc) :). I'm going to try to put together some numbers tonight for the other curious commenters, but my observations were similar to those given in the S.O. issue - 4x startup time, basically.
Strange choice of name, [Jazz](http://www.cs.umd.edu/hcil/jazz/) has already been used
The reason is mostly for security purposes, not to make a claim about future uses of the system. I'm not talking about guys who will work on your code in the future, I'm talking about strangers who will try to abuse your API in unexpected ways.
I do the same. It *is* an illegal argument. You're avoiding an NPE by checking. And my String message for the IllegalArgumentException tells callers what the argument was. 
Did setting the java.rmi.server.hostname and jboss.bind.address properties alleviated the problem?
Didn't seem to. I am invoking it with: "run -b 0.0.0.0" and not setting the jboss.bind.address property directly. Should that have the same effect? Can I just disable RMI? (Since that seems to be taking a while to start)
The `hashCode()` one is a little odd. You should never change the key in a Map directly. Nor should you ever write your own `hashCode()` method unless you are _sure_ you know what you are doing.
Writing your own hashcode is not that hard. Hell, eclipse will blast one out for you without any difficulty.
I know those things! Why do you say I don't.
Is it possible to ignore those things if you're a java coder ? Those are the most basic facts !
A java coder MUST know how (and when) to write hashcode and equals methodes.
How about: `java.util.List` *isa* `java.util.Collection`, but `java.util.Map` is not.
If you are not sure how to write you shouldn't be programming in the first place.
Gemstone ? Ugh, I think I just threw up a little in my mouth.
How about PriorityQueue? Have you ever needed to collate the top M elements of a structure that's N long? PriorityQueue's your collection.
Not many people know that `equals()` and `hashCode()` are contractually together, let alone know how to write a `hashCode` method that isn't incorrect, let alone a `hashCode()` method which properly hashes to within the range of `int`, let alone a `hashCode()` method that isn't dog slow. Generally you should rely on the IDE to generate the method for you.
That's what I was saying. Use your IDE, don't write one yourself!
&gt; Not many people know that equals() and hashCode() are contractually together I agree that most people don't know that equals() and hashCode() are contractually linked. But I posit that most people shouldn't be Java programmers. &gt; Generally you should rely on the IDE to generate the method for you. Strongly disagree. Here's my argument why: * I take as an axiom that you agree that an IDE cannot possibly generate the whole program for you automatically, because the IDE cannot guess what it is you want your program to do. * From this axiom, I argue that an IDE cannot reliably generate an equals() method for you, because it does not know what you want such a method to do. E.g. if your class is concrete and non-final, how do you handle equality for instances of a subclasses? * Given that hashCode() and equals() are linked, if the IDE cannot reliably guess what you want equals() to do, it cannot reliably guess what oyu want hashCode() to do.
If you didn't know that Lists aren't the same as arrays, then I don't want to hire you as a Java programmer.
You would be surprised at how complete the Eclipse `equals()` generator is, but I assume you already know that :). Granted, it only considers a specific type of equality, and it is oriented around the Java Beans approach, but _generally_ (the term I used) it is sufficient. To be honest, I have very rarely ever needed to override `equals()` or `hashCode()` myself; and when I have, I have only overridden them for simple container classes that wrap a few fields.
&gt; To be honest, I have very rarely ever needed to override equals() or hashCode() myself I'm one of those people who believes that we can't rely on processors clockspeed increasing exponentially like it used to for the last couple of decades, and that from now on, performance improvements will be in terms of more cores. We (as in, the human race) are still trying to figure out the best methodologies for designing and writing parallel programs. It's an open research question in computer science. So far, our best bet seems to be functional programming (FP). In FP, you want as much of your data structures to be immutable as possible. For reasons that are too complicated to get into, that means you really want to make sure the equals() method does EXACTLY what you want it to do, given the problem domain you're trying to solve. So my personal experience is that I have to override equals() pretty frequently. And, like you said, since equals() and hashCode() are contractually linked, I therefore also have to override hashCode() pretty frequently. I don't trust my IDE (which incidentally, is Eclipse) to get it right in my case. =/
Yup I agree, though I don't think Java is the best language to do functional programming :) Will be interesting to see the new concurrency support in Java 7.
We (as in the company I'm working for, not the human race) are also experimenting with Clojure and Scala. =)
Are you taking resumes?
Yes, but we're don't really hire telecommuters, so unless you live in Quebec, Canada...
Is this the result of a babelfish translation?
That's DailyWTF material if I've ever seen it.
I've been following this project since a few weeks when it was [mentioned](http://groups.google.com/group/guava-discuss/browse_thread/thread/23bc8fa5ae479698) in the Guava mailing list. While still quite new, I think it is interesting and could prove to be very useful when writing microbenchmarks. Benchmarking Java code is notoriously hard (hotspot's dynamic compilation being one reason...), and this framework helps with that. It's being developed by the lead developers behind Google-Guava (the Google common libraries), for whom I have a lot of respect (look at the Guava code if you need proof). Brian Goetz (author of the great "Java Concurrency in Practice" book) wrote some insightful articles about Java microbenchmarks: * [Java theory and practice: Dynamic compilation and performance measurement](http://www.ibm.com/developerworks/library/j-jtp12214/) * [Java theory and practice: Anatomy of a flawed microbenchmark](http://www.ibm.com/developerworks/java/library/j-jtp02225.html) *Note: I posted this a few days ago, but it didn't seem to work since I was a new user with no karma... Hope it will work this time :)*
While this blog post is a few months old, I thought I had to share it, because I find it quite interesting. I definitely learnt about Garbage Collection / Memory Management when reading it. As a side note: Dhanji is a Google Developer who worked on Google Guice (you may see him in presenting [the Guice Session](http://www.youtube.com/watch?v=hBVJbzAagfs) at Google I/O 2009). He is the author of the "Dependency Injection" book, which is an interesting read if you want to learn about Dependency Injection with or without Guice (disclaimer: I only read the first half, I still need to finish it! but it's well-written, clear, and sometimes "funny").
WTF or FAQ? It comes up way to often in my mind!
Or you could just use [Ivy](http://ant.apache.org/ivy/) for the dependency management stuff, and continue to use ant for the build configuration.
porn? ohhh...
I'm in a similar boat -- it seems like I should move on, but I really don't want to cause, well, things just work how they are. Why go and change them?
Yeah, but if you're going to do that you might as well do yourself a favor and use [Gant.](http://gant.codehaus.org/) 
Personally, I don't see the point of Maven, but then, I'm kind of a luddite when it comes to things that fundamentally don't interest me - like build configuration. 
maven rules, yes, ant is dead and should definitely not be used for a new project
I feel like one of those old guys that stopped learning new stuff back in the 80's. But DAMN IT, i love ant. there is nothing wrong with it, and I'm keeping it.
Depends on the technologies you're using. If you're making Eclipse plugins, Maven is impossible and you'll be using Ant (usually internally). Personally I don't like Maven. It's awkward for the sake of being awkward. And then it's proud about it!
Exactly - why DO you need to change them? If Ant satisfies all of your needs, then don't change. Spend your time fixing bugs or adding features.
What? Adding features? That's WORK! I think maybe we need to update our build system instead. Or the code repository, yeah, that's the ticket...
There must be _some_ new repository statistics we can start playing around with to show to the managers. What?! They only work on Maven? Well, I guess we have to change to Maven! *stretches*
REVOLUTION!!!! It seems that a lot in Maven is getting the dependencies. Yea, but once you have your dependencies, it doesn't seem all that special. Shrug.
But then you're stuck using groovy. :) If other languages are in the mix, then I'd use [lancet](http://github.com/stuarthalloway/lancet) or [leiningen](http://github.com/technomancy/leiningen).
If you subscribe to the Maven way of life - that is, put everything into its prescribed folder, and nuts to making it accessible to non-Maven-ites - then Maven is quite good, because it can make a website with code metrics and everything. But if you actually have to work in the real world, it gets painful.
The more I use Groovy the more I like it. And I love the fact that I hear more and more people complaining about Groovy. I can only hope that one day I hear as many people complaining about Groovy as I hear today complaining about Java. _"There are only two kinds of languages: the ones people complain about and the ones nobody uses"._ -Bjarne Stroustrup
Oh, I was just being "that guy". I've never actually used groovy. Too busy basking in the warm glow of clojure. 
I wonder how this bodes for Java in general in the future. Don't get me wrong, Java 6 is a great platform and will stand on its own for many years to come. I just worry that what was a great head of steam for new development and improvements on the language, is now going to falter and stall out.
If it turns out they are out that will be a shame. There's a lot of turmoil that's been going on at Ora-Sun since that scheduled was proposed so hopefully it's more of a matter of delay than cancellation.
Time to fork Java too! Also hooray for Scala!
I was under the impression that Sun had given up on resolving the differences between different closure proposals long before the Oracle purchase. In fact what surprises me was that the author thought they would be in Java 7.
fork java? silliest thing i've ever heard. The JVM is the new java, which is exactly why you're hooray'ing for Scala! :P Clojure ftw :D
Java 7: Not Likely
This is an outrage! hehe. Give it up, use Scala.
If one cares enough about them, there are plenty languages on the JVM that provide closures (e.g., clojure). Tail call optimization would be nice though.
Have you ever worked on a project/part of a project that didn't go as planned. Why? What did you learn?
- Does Java support multiple inheritance? - What does transient mean? What does the volatile keyword mean? - Describe dependency injection. Describe how you to build Java classes without using a DI framework. - Have you worked with Java templating systems (e.g. Jsp), what are the pros and cons between the different systems. These questions were off the cuff. I probably could have come up with better stuff if I thought about it.
&gt;dependency injection Shit, I have some studying to do..
Yes, I was part of a team that built an enterprise web app that didn't go too well...(Java, Spring, Hibernate). We focussed too much on useless features that we had know way of knowing would even pay off. Lots of time was wasted on features that never got used. We should have had a much narrower focus, getting to the finished product and marketing sooner.
If you used Spring, Spring is a dependency injection framework.
Is it possible to crash a Java application? If so, how would you avoid this scenario?
It sort of supports multiple inheritance through the use of interfaces. You can implement multiple interfaces. Transient means that field or property is not persisted to the database. A variable is volatile when multiple threads have access to it. It is essentially in it's own synchronized block. Dependency Injection is configuring which classes are used at run time. One way to accomplish this is through the use of abstract classes and/or interfaces. For example: Class A has a Person property. At run time, the user could select "Bob" (a class that implements Person interface) on the front end, and Java would set the Person property to the implementation of Person "Bob". I've worked a bit with JSP and a lot more with Free Marker. Off the bat, the nice thing about FreeMarker is it's easier to separate things into MVC. JSP allows code that might belong in a controller, service, or dao to be put into the view. 
Similar to Hivemind?
There are many ways to answer this question. It is pretty open ended. Although if you practice proper programming, use try/catch blocks to avoid exceptions, you should be okay.
I haven't used Hivemind, but you can talk about dependency injection without discussing a particular framework.
On transient. Transient is a java keyword used with serialization. If you don't want a field to be serialized then you can declare it transient. I kind of through that question out there, it probably won't be asked.
Let me retry. I should said "bring down" a working Java application. With C applications, you can access unallocated blocks of memory and the application will normally crash or segfault. Does Java suffer from this problem? Is it possible for a Java to terminate unexpectedly? 
Have you ever written a multithreaded application? A distributed one? Have you had concurrency issues (dead/livelocks, synchronization/corruption)? How did you debug them? How would you test-first the concurrent parts of a concurrent application?
Good luck on your interview! Looking at some of your other answers on here, sounds like you'll do wonderfully.
Is there ever a valid reason to catch OutOfMemoryError? If so, what reason and how/why would you do so? How would you crash a JVM using only pure Java code (as in, cause it to segfault or forcibly abort)? Why is it bad to use large numbers of threads, if you care about scalability? What happens when a static initializer throws an exception? Does double-checked locking work in Java? (this is sort of a trick question, as it depends on the version of Java in question) 
There's a zillion-and-a-half of them. I think PicoContainer is great one to start at to get the basics.
&gt;Does double-checked locking work in Java? Yeah, all depends on whether you can use the keyword *volatile*
Describe the differences between the following generic types and why you would use each: * List&lt;MyClass&gt; * List&lt;? extends MyClass&gt; * List&lt;? super MyClass&gt; haha, sorry for that. Now I have a headache too ;-)
Sounds like fun, alas, I'm nowhere nearby...
Why couldn't this have happened when I was still at Duke?
When where you there? We were actually doing this quite regularly a while back, then it kind of petered out due to people getting distracted by various competing interests. We're just now trying to revive it... hoping for more interest now, since Scala and Clojure and some of the other JVM languages seem to be gaining some stream. 
Well, if you're ever in the area visiting, look us up! 
2005-2009. I would have really loved to get on the Jython bandwagon. Ya'll should advertise to the Duke Compsci mailing list - just send something to Camelia on [this page](http://www.cs.duke.edu/people/staff/). Duke is pretty much a Java-and-Python shop now, I bet you could get some takers.
Awesome, will do. 
1. You have a List containing objects of type MyClass. 2. You have a List containing objects that extend (should this be implements and actually be MyInterface?) from MyClass. 3. You have a List containing objects who's parent (super) object is of type MyClass.
...except not retired. Spring is the most used Java IoC container.
* what is Automated Continuous Integration and why is it awesome? * write an example of JSON... * what is a JDBC template, and why is it a good thing? * what are JSP and Freemarker (and similar MVC) technologies being replaced with? * what is auto-wiring? * some dick with a tie and clipboard comes to you and asks "is it done yet?" what do you say?
"How would you crash a JVM using only pure Java code (as in, cause it to segfault or forcibly abort)?" I will answer, I think it is an important topic. In most cases, the JVM provides support for memory management so that the developer can avoid C like issues with malloc and free, referencing memory that is unavailable and easily causing segfaults within a running application. But, the JVM can crash due to out of memory errors. You can easily crash the JVM with stack overflow errors. Where you may recursively invoke a method and never end the recursion. The JVM and application will endlessly loop and eventually exit. There is a more subtle way to crash the JVM because you have run out of heap memory. Basically, the garbage collector cannot free up any more memory and there is no more accessible. This can especially happen in complex web applications where there is not enough heap memory available. The default max heap size on the Sun JRE version 1.5-1.6 is (32MB ...or 64MB ,hehe). You can increase the max heap with the jvm argument , -Xmx128m flag for example. "Is there ever a valid reason to catch OutOfMemoryError? If so, what reason and how/why would you do so?" I guess you could. I have seen Eclipse throw out of memory errors and try to recover. I think it would difficult. You could possibly try to do manual garbage collection in the even of outofmemory errors.
Are generics implemented at compile time or run time or both? Describe why or why not.
I didn't really understand DI until I got rid of the frameworks...that and using Guice.
you've been owned: http://www.reddit.com/r/java/comments/c48sj/want_to_help_a_fellow_programmer_out_i_have_an/
I might argue against trying to catch OutOfMemoryErrors. I've tried doing this before and weirdness results. Like I might catch one error, but another would be throw just after even though I tried to force garbage collection.
I'm not extremely familiar with this, but in my experience Java can crash. What causes this I'm not sure of though. There are ways of recovering from this such as creating a script that monitors processes and kills / restarts them as needed.
Yeah, but why would you define these types and how would you use them?
The first form (and in a way the other two, too) is to ensure there aren't any class cast exceptions. You can count on every object being of that type. The second and third, I think, are used for inversion of control (dependency injection).
Not really. Thanks for the extra attention, though! :)
They are implemented at compile time, and not present in the compiled code. Is that correct?
List&lt;? extends MyClass&gt; is useful when you are writing a method that will take the list as a parameter, and wants to be able to use the items in the list as though they are a MyClass. But, you recognize that someone might want to call the method with a List&lt;MySubClass&gt; parameter. List&lt;? super MyClass&gt; is useful when you are writing a method that will take the list as a parameter, and *it wants to add* items to the list of type MyClass. Again, someone might want to pass a List&lt;MySuperClass&gt; to your method, and so it should be able to take MyClass objects. How did your interview go, btw?
The language is what it is. However, the JVM is a fantastic tool, and clearly is usable in functional ways, as with Clojure and Scala. If you were to write a new language, targeting java bytecode as your output gives you instant portability, performance, and access to an enormous number of third party libraries. Quite honestly, I couldn't care less about improvements to Java the language, but I care a great deal about improvements to java bytecode. Reification needs to happen, and probably tail-call recursion needs to be worked out, and full backwards/forwards compatability be damned.
Awesome dude. Thanks for the challenge. Let me know how I did: 1. It's a system that runs all unit tests and any other tests as soon as code is committed. It then generates and e-mails (or updates a web page) with the results. It's awesome because you know your code works right away. It makes QA's job much easier, too. 2. {"person": { "id": "1234", "firstname": "Bob", "clients": { "goodclients": [ {"id": "1", "name": "Jane"}, {"id": "2", "name": "Jeremy"}, {"id": "3", "name": "Jon"} ], "badclients": [ {"id: "4", "name": "Hairy"}, {"id: "5", "name": "Moe"} ] } }} 3. Great question. I actually no clue about this as I've only used Hibernate, which, correct me if I'm wrong, handles this. Anyway, I looked it up and here's what I learned: "The JdbcTemplate class is the central class in the JDBC core package. It simplifies the use of JDBC since it handles the creation and release of resources." (from [here](http://static.springsource.org/spring/docs/2.0.x/reference/jdbc.html) ) Basically, it makes it easy to build your own Data Retrieval system that you DAOs would access (through IoC). You could roll your own ORM if you wanted. Super cool stuff. 4. I didn't know these technologies (JSP, Freemarker, Velocity, XSLT) were being replaced. Englighten me, please! 5. To be fair, I had to look this one up. Auto-wiring is when beans are configured to have particular values for fields. These particular values are specified in a bean configuration file, which Spring reads. 6. "As per process, we'll discuss scheduling in our meeting. If you need an answer sooner, you'll have to speak to XYZ." EDIT: For some reason Reddit is re-numbering my lists. I can count. :)
The extends bit I was aware of - although you answered it a helluva lot better than myself. The super bit I had no clue about. Could you also do List&lt;? extends MySuperClass&gt; and accomplish the same thing? The phone interview went great, thank you. They've schedule an in-person interview for which all this great information you guys have given me will definitely come in handy.
1. I didn't write it from scratch, but I worked on a multi-threaded B2B application. It had 1 node per machine (4 total machines / nodes) for redundancy (is that distributed?). Never had any concurrency issues since the threads never spoke to one another. They would get their work from the database, which handled race conditions. The B2B nodes had heavy logging. The logs were separate but then were combined into a master log. This made it easy to debug problems that were both contained to a particular node and node-wide. 2. I'm not sure what you mean. As in test-driven design? 
Facepalm-worthy. If the server already knows the password (because it has to "check it") then MD5 is the right route and... argh. For that matter, why not use SSL?
I'm not sure why you would think that... That said, ArrayList would be better, since the size and contents are unlikely to change in a sane program.
remember PECS: producer extends, consumer super
&gt;Could you also do List&lt;? extends MySuperClass&gt; and accomplish the same thing? That would just back it up one step up the hierarchy tree, but you'd still be pointing downward, meaning your method could not accept a List&lt;MySuperSuperClass&gt;. Since you're *putting* into the collection, you just need it to have a generic type that is some super class of MyClass. If you were to *get* something from the List&lt;? super MyClass&gt;, you'd have no guarantee that is was anything but an Object. Example: public void addToCollection(List&lt;? super MyClass&gt; list) { list.add(new MyClass()); } .... addToCollection(new List&lt;Object&gt;()); Now, that compiles. You're passing a list that can hold any object, so it satisfies the condition for adding a MyClass object to it. And that's all your method cares about. If you wrote the method: public void addToCollection(List&lt;? extends MySuperClass&gt; list) ... Then it wouldn't compile, because List&lt;Object&gt; doesn't match. Hope you get the job and hope it's a good job to get (you can never tell from interview either way - whether the person is any good, or whether the job is any good - at least in my experience).
&gt; even though I tried to force garbage collection. This won't work. The Java specification explicitly states that the JVM will always try a garbage collection before throwing an OOME. If you get an OOME, it's too late for a GC.
&gt;&gt; cause it to segfault or forcibly abort &gt; the JVM can crash due to out of memory errors In theory, no. You'll get an OOME, not a segfault. &gt; You can easily crash the JVM with stack overflow errors. Never seen this happen. The JVM will throw a StackOverflowError, but it won't crash. &gt; There is a more subtle way to crash the JVM because you have run out of heap memory. Isn't this the same as the OOME situation mentioned earlier? I think the "correct" answer is: In theory, it is impossible to crash the JVM using only pure Java code, because the Java Language Specification do not give you any commands for doing so. In practice, JVM implementations may be buggy, and so you may crash the JVM, but any such crashes are likely to be fixed in future versions of the JVM.
I'm pretty sure the Java memory model specification from Sun explicitly states that double checked locking does not work (in general). It may have worked in one particular test on one particular JVM implementation, but according to the specs, you cannot rely on it working.
I can't believe nobody gave the correct answer to these. =P I'll give them a shot. &gt; Is there ever a valid reason to catch OutOfMemoryError? It basically boils down to "If your requirements are that OOMEs must be caught, then you'll have to catch OOMEs". Eclispse does it, for example, so that it can warn you to "save your work and quit ASAP to avoid losing data". &gt; If so, what reason and how/why would you do so? Eclipse's trick is to initialize a big array at startup. When an OOME is caught, release the array, and now you have a bit of memory to work with. Do whatever shit needs to be done, and GTFO. &gt; How would you crash a JVM using only pure Java code (as in, cause it to segfault or forcibly abort)? As I mentioned elsewhere in the thread, I don't think this is possible in theory, because the JLS doesn't give you any tools to cause this to happen. In practice, there are ways (I've encountered JVM crashes firsthand), made reproducible test cases and submitted bug reports to Sun. These will presumably be fixed in future versions of JVMs, so it's very implementation dependent. &gt; Why is it bad to use large numbers of threads, if you care about scalability? Not sure what you're getting at in this question. There's no performance gain to creating more threads than there are CPU/cores, and more threads means more overhead (the extra stacks, extra Thread objects, extra context switching, etc.) Is that the answer you were looking for? &gt; What happens when a static initializer throws an exception? The class doesn't get loaded, and you'll get weird looking Class Not Found exceptions later on. &gt; Does double-checked locking work in Java? (this is sort of a trick question, as it depends on the version of Java in question) As I said elsewhere in this thread, AFAIK, Java's memory model specifically says double checked locking won't work. There may be specific JVM implementations where it works (or where it "sometimes" works), but you can't rely on it always working. **edit** I was wrong about double check locking not working. See this [thread](http://www.reddit.com/r/java/comments/c45pw/want_to_help_a_fellow_developer_out_i_have_an/c0q2ps2).
&gt; It sort of supports multiple inheritance through the use of interfaces. You can implement multiple interfaces. More pedantically, Java supports multiple interface inheritance, but not multiple implementation inheritance, thus avoiding the infamous "Diamond Problem". &gt; Transient means that field or property is not persisted to the database. Actually, it's that Java's built-in Serialization system won't try to persist the field. It doesn't directly have anything to do with databases. Perhaps you were thinking of the @Transient annotation, rather than the transient keyword. &gt; A variable is volatile when multiple threads have access to it. It is essentially in it's own synchronized block. You have the right intuition, but the way you phrased your answer is wrong. A field is volatile when you add the "volatile" keyword in front of it. Multiple threads could be accessing a field without that field being volatile.
That's correct, though it may change in Java 7. If you want to do further reading via Google, the term is "Type erasure".
With volatile, there is a [double check lock idiom that works](http://en.wikipedia.org/wiki/Double-checked_locking).
So in this case, though, I tried to catch the OOME. After catching it, I should be able to release a bunch of memory from whatever I tried and failed to do. So the OOME occured trying to allocate memory in some scope, and then outside of that scope, the memory that was successfully allocated should be GCed. However, with threading, in this case, just the EDT thread and a worker thread, the allocated memory seemed to still be referenced somewhere in the worker thread, so that as soon as anything needs to be allocated on the EDT thread, you get another OOME because even though you don't need all the memory allocated in the worker thread that crashed, there's still some references to it in the thread. An alternative possible scenario is you allocated big memory in one thread, but you get OOME in other threads because just as you were allocating LargeObject you were also doing something on the other thread(s) that led to an OOME. EDIT: To be honest, this is all speculation, since this wasn't important enough for me to really spend a lot of time on. I just noticed that some of the OOME were happening on the EDT and not the worker thread even though the EDT wasn't doing the large allocations. Then I gave up.
"Never seen this happen. The JVM will throw a StackOverflowError, but it won't crash." When I mean crash, I mean the JVM will stop running. The JVM can stop running with a stackoverflow error. If invoke a recursive call that won't end, then the JVM will eventually run out of memory and quit running. "In practice, JVM implementations may be buggy, and so you may crash the JVM, but any such crashes are likely to be fixed in future versions of the JVM." Like I said, if you run out of JVM heap memory, you out of memory and there isn't anything a JVM fix will do.
"As I mentioned elsewhere in the thread, I don't think this is possible in theory, because the JLS doesn't give you any tools to cause this to happen" I may not use the same terminology, but you can easily make a JVM stop from running. Endless recursive calls will make it quit. Also, just purely running out of memory will make the JVM stop from running. Especially with the default JRE set at only 32MB.
"Eclispse does it, for example, so that it can warn you to "save your work and quit ASAP to avoid losing data". You can run Eclipse even though there is an out of memory errors.
**Edit**: Oh, they've updated the Java memory mode since last time I looked. So I guess it does work now. Thanks for the info. Here's my original message: ---- I'm not so sure about this. Lots of very intelligent people have mistakenly believed that double check locking works in Java. I'm worried that the person who edited the Wikipedia article to say that it works in Java may be one of these mistaken people. Here's the paragraph I'm assuming you're referring to: &gt; As of J2SE 5.0, this problem has been fixed. The volatile keyword now ensures that multiple threads handle the singleton instance correctly. This new idiom is described in [5]: But if you follow the citation [5], it leads to: http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html which says: &gt; Lots of very smart people have spent lots of time looking at this. There is *no way* to make it work without requiring each thread that accesses the helper object to perform synchronization. So basically, the very article Wikipedia is using as citation for its claim to says that it works actually says that it doesn't work.
Yes, and if you read the error message the Eclipse shows you when this happens, it basically tells you to save all your work and quick ASAP to avoid losing data. Basically, Eclipse has an array that it uses as a "one shot", and when you see that error message, that one shot is used up, so you'd better save and restart so that it can rebuild it's one shot.
Yeah, but because of the way the question was phrased ("as in, cause it to segfault or forcibly abort"), I assumed that the OP really wanted the JVM to crash, and not to merely stop running. If you just want it to stop running, the simplest is to do System.exit(). Even endless recursive calls and out of memory are not guaranteed ways to make the JVM stop, because a parent method might have a try catch block which catches all throwables.
&gt;There's no performance gain to creating more threads than there are CPU/cores If your app does any IO, then that's not true as threads involved in IO will suspend and wait. In such cases (which are very common), more threads will mean better performance. To a point, of course. More threads vs thread-downtime is a tough balancing act and is one reason for the existence of the Java NIO library and [SEDA architecture](http://www.eecs.harvard.edu/~mdw/proj/seda/).
Yea, you are right. Not a crash. And I was using the term crash in the wrong way as well. 
You are, of course, perfectly correct. Thank you.
&gt; It basically boils down to "If your requirements are that OOMEs must be caught, then you'll have to catch OOMEs". Eclispse does it, for example, so that it can warn you to "save your work and quit ASAP to avoid losing data". &gt; Eclipse's trick is to initialize a big array at startup. When an OOME is caught, release the array, and now you have a bit of memory to work with. Do whatever shit needs to be done, and GTFO. Yeah, that would be what I'd want an interviewee to say about that. I'd word it as: "Usually not a good idea, but can be done as a way to give a program a 'last gasp' opportunity to send a message to the user, or send a programmatic reboot/restart request or notification to a monitoring system, etc." &gt; As I mentioned elsewhere in the thread, I don't think this is possible in theory, because the JLS doesn't give you any tools to cause this to happen. In practice, there are ways (I've encountered JVM crashes firsthand), made reproducible test cases and submitted bug reports to Sun. These will presumably be fixed in future versions of JVMs, so it's very implementation dependent. When I ask somebody this question, I am looking for their ability to "think like a tester" so to speak. That is, saying that it's theoretically impossible is quite true... if you can do it, there is a bug in the VM. But I'd like to hear somebody talk about how they'd try to show the existence of such a bug, and maybe touch on how bugs usually happen around boundary values, or infrequently exercised parts of the code base. &gt; Not sure what you're getting at in this question. There's no performance gain to creating more threads than there are CPU/cores, and more threads means more overhead (the extra stacks, extra Thread objects, extra context switching, etc.) Is that the answer you were looking for? Multicore boxes becoming more prevalent does change that a bit... but historically what I've been probing for when asking that, is whether or not the person understands context-switching and the other overhead of using lots of threads. &gt; The class doesn't get loaded, and you'll get weird looking Class Not Found exceptions later on. Bingo. That is SO annoying when it happens too! &gt; As I said elsewhere in this thread, AFAIK, Java's memory model specifically says double checked locking won't work. There may be specific JVM implementations where it works (or where it "sometimes" works), but you can't rely on it always working. edit I was wrong about double check locking not working. See this thread. Yeah, the part that I read that - if I'm understanding it correctly - means you *can* use DCL in Java, is this bit: *JDK5 and later extends the semantics for volatile so that the system will not allow a write of a volatile to be reordered with respect to any previous read or write, and a read of a volatile cannot be reordered with respect to any following read or write. See this entry in Jeremy Manson's blog for more details.* *With this change, the Double-Checked Locking idiom can be made to work by declaring the helper field to be volatile. This does not work under JDK4 and earlier. * 
Very good explanation. Thanks for the good info. It will come in handy. Is using super in List&lt;? super MyClass&gt; not very common? I have not heard or seen it until here. I agree. The best interview I went to they had me write code for them and then asked me about the code I wrote.
Thanks for cleaning up my answers. That both clarifies the concepts for me and will make me sound a lot more professional in the interview. Thanks again!
Oh, and it's done that way to be backwards compatible. 
No, you don't see it very often, because you don't often make methods to do such things (accept a list add stuff to it). And even when you do, it's typical that you know exactly how it will be used and the extra flexibility of using **super** is unneeded. Also, sometimes I feel like, as a prospective employee, I should be able to demand to see the current codebase to see if I really want to work there. Of course, what would I do otherwise? Nearly all existing codebases are horrible.
You could use Jetty console maven plugin(http://simplericity.com/2009/11/10/1257880778509.html) to embed jetty in the war file. 
Personally, I like spring's XML because it's like a high-level overview over my app. But if you make extensive use of spring's auto discovery, auto injection features you can get along with very little XML.
auto-injection is only one part.. the other is the @Component / @Controller / etc based autodiscovery of system components. auto-discovery creates beans automatically, auto-injection makes beans known to each other automatically.
Sorry.. haven't used Wicket at all. Maybe [this](http://forum.springsource.org/showthread.php?t=19123) can help?
&gt;But wanted to go ahead and do a Service and Data layer and was thinking of how to not end up in XML hell. isn't this unrelated to which embedded servlet container to use?
Jetty is not a JEE app server. It's only a JSP/Servlet container/server.
&gt; using a password hashing mechanism wherein using some liabrary written in javascript. It basically encrypts the password and sends it to the server. ...aaaaaaand back button!
You might find better luck asking on [stackoverflow](http://stackoverflow.com).
Oh a monkey! Cute.. &lt;click&gt; &lt;click&gt; &lt;click&gt; &lt;back button&gt; &lt;click&gt; &lt;back button&gt; .... 10 minutes later... Oh It's a game engine. Geez you think they could just put that somewhere obvious like the home page. For a second I almost thought [zombo.com](http://zombo.com) had decided to start a java open source project.
Huh, that wasn't the home page. Have to click on "home", or dare I suggest the "about", menu items if the "engine" part of the name wasn't clear enough.
Cool. [Ardor3d](http://ardor3d.com/) looks more promising as well, imho. I know it's not really related but a3d apparently started as a fork of jME. Java 3d gaming ftw. ^^ 
Thanks for that link. I hadn't heard of that project. In terms of documentation, features, community and even web site usability I'd say a3d has a lot of catching up to do. But it's something to keep an eye on.
3) Yes. It takes care of all the low-level details, which helps you avoid writing a lot of boilerplate code, closing connections, and so on... I think it uses a command pattern under the hood to execute your code at the right point. [This introduction](http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html) explains it even better. 4) IMO, JSP/Freemarker and similar view technologies are being replaced by RIA frameworks such as GWT / Flex. The view is constructed on the browser side, while the server only returns the necessary "data" to populate it, using web-services (REST, GWT-RPC...). Or... Maybe the correct answer was, that these "template" view technologies are replaced by component frameworks such as Wicket / JSF? I'm interested in your take on this.
[Crash the jvm in one statement](http://www.reddit.com/r/programming/comments/apfr8/crash_the_jvm_in_one_statement/) for(Object o=null;;o=new Object[]{o}); I need to try that on GAE :)
I've never really used RIA frameworks or component frameworks. All of my experience is with template frameworks. However, in my experience, I've seen a lot of companies moving away from Flex and Flash. I'm not sure about GWT, JSF, or Wicket though. To answer your question, personally, I haven't really seen a particular component framework that people like (-maybe- GWT). There is a move to that direction, though. I think it'll pickup speed as the component frameworks mature and there is a further separation between the view and control.
Very cool! Thanks for sharing. A colleague of mine did something similar in a Spring Project last year, but this seems more interesting. Plus I love Guice.
Sounds good. Have other Redditors tried it? What's your opinion?
It just looks like a CLI interface, I don't think it actually improves the performance of anything... it just saves you from typing 'mvn' or clicking a button? Am I missing something?
At the very least, it saves you from the initialization phase of Maven (starting the JVM), also probably from most of the dependency analysis, which can take a few seconds. For someone who runs it repeatedly from the command line, it can be nice to have.
I attended a Maven 3 presentation the other day (by the authors of the french book "Apache Maven"), and they talked a little about the incoming [Maven Shell](http://wiki.github.com/sonatype/mvnsh/) (mvnsh). I thought it was a brand new project for Maven 3, but it seems to be based on the maven-cli-plugin presented in this article, with a lot of enhancements: http://ericmiles.wordpress.com/2010/03/23/intro-to-maven-shell/ http://ericmiles.wordpress.com/2010/03/26/maven-shell-features/ I think performance is crucial for build tools, and gaining even a few seconds might help you get in "the flow".
Anyone want to explain the syntax?
So this is why they bought Sun. So they could add closures to Java. It ... is important.
Crappy article. Adds nothing. Just links to the example files directory on the open jdk effort.
They call them closures, but really they're anonymous functions that can be closures. I infer from the examples: int i1 = #(){ return 3; }.(); assertTrue(3 == i1); int i3 = #(int x)( x + 1 ).(3); assertTrue(4 == i3); \#(*formal-params*)(*body*) gives you an anonymous function which when invoked returns the result of body. Invocation doesn't need a method name. Return type seems to be an implicit result of the body, as opposed to an explicit declaration. ---- int i1 = #(){ return 3; }.(); assertTrue(3 == i1); int i3 = #(int x){ return x + 1; }.(3); assertTrue(4 == i3); \#(*formal-params*){*body*} like above, but the body is structured like regular methods, requires a `return`, and allows for a more complicated body. ---- VoidToInt { public int foo(); } static { VoidToInt f1 = #()(3); assertTrue(3 == f1.foo()); } The anonymous function seems to satisfy any interface type with the right method signature, e.g., the no-arg method of the closure implements the no-arg `foo` method of interface `VoidToInt`. ---- Again, I'm just inferring. I think this is all a nightmare of syntax and confusion. If you're sophisticated enough to use closures (not a high bar), then you might as well use a JVM language that supports such FP concepts more cleanly.
The lambda-dev mailing list is a better resource of information for closures: http://mail.openjdk.java.net/pipermail/lambda-dev/2010-May/thread.html
I agree that the syntax looks scary, but if they can get closures right I think it will be a huge improvement for Java. After all, closures are one of the bigger selling points for "Java refugees" in alternative JVM languages like Groovy and Scala. Just having maps, filters, etc. for the collection classes would remove *a lot* of boilerplate code (while using anonymous inner classes like the Predicate classes of some collection libraries works in theory, the code gets so ugly that it's even worse than writing explicit for loops IMHO). 
&gt;I think this is all a nightmare of syntax and confusion. If you're sophisticated enough to use closures (not a high bar), then you might as well use a JVM language that supports such FP concepts more cleanly. I agree with this. We already have anonymous inner classes that have lexical scoping and can provide strongly typed visitor-type behavior, the need to create syntax for special cases where the inner class has only one method is weak, from my point of view - especially since a good IDE will generate all the anonymous inner class boilerplate for you. If you want to use a functional *style* of programming that would make using the above existing methods really ugly, then use scala or clojure for it. They compile to bytecode anyway so it all plays nice with the rest of your jvm project.
I think closures ruin a clean and simple syntax and are designed for lazy people who want to avoid a little extra typing. What I love about Java is in its simplicity. Closures takes Java one step closer to the obfuscating nature of C++ or Perl. I mean what affect will closures have on the refactoring tools that are built into things like Eclipse? 
How to tie a JVM to a particular CPU on Windows and Linux
It was like this way before Oracle acquired Sun and I don't know what you are talking about...
What is the difference? Except for the color and style of the webpage it looks the same to me. Even the disposition of the downloads is fairly identical than before.
hehe. The jdk and jre have both been one download. If people have trouble installing java, then something is wrong with that person. I do hate that they try to install a yahoo toolbar and open office?
Is that irony ? Or are there some news somewhere ?
Last time I visited that page there was a plethora of options to choose, all different flavours and versions, it was a horrible experience. I just needed a JRE for my XP virtual machine, I loaded the page and got a simple no-thought single click download.
I wonder when they'll offer 64 bit applet and webstart support.
Click, click, click, install?
Yep. java.com doesn't offer a download for the java jdk
I think you meant the java.sun.com site? http://java.sun.com/ The java.com site has remained about how it looks like now. http://web.archive.org/web/20080507024654/www.java.com/en/
I see. I guess it's been a while since I needed to download the JRE! I guess Oracle doesn't deserve the credit, so well done whoever finally made it easy to download Java.
Scala's mixins are a better implementation of this same idea.
Defendor!
I really think what you download from java.com was always strictly jre only. Oh yes yahoo toolbar and open office bundling is just low...
hmm, not sure what your talking about, both applets and webstart have had 64bit support for a while now.
Under Linux, I mean. Sorry for the confusion.
A long overdue addition.
Seems very unjava.
Most popular and widely used open source Java connection pool libraries. They provide connection pool, Statement pool, JMX support. They could be integrated easily with Hibernate.
How official is this? 
I have been using SL4J and Joda Time for a while and love both. [Quartz](http://www.quartz-scheduler.org/) is also a fantastic library that made my life much easier.
So far I've mostly used libraries in the Apache Commons but I'm definitely going to check out the other mentioned libraries.
[Mockito](http://www.mockito.org) Really nice syntax compared to other mocking libs. I'm currently using it in a major project, and it has been great. Our high UT coverage has a lot to do with this library's simplicity and flexibility. 
Wow! I don't have a clue how this could be useful.
Note that Google Collection is now part of Google Guava, which is awesome! Google is open-sourcing more and more of their common java libraries. They even have a [Maven artifact](http://stackoverflow.com/questions/2550441/is-guava-libraries-available-in-maven-repo) now, so you do not need to build from source anymore. Some links: * http://code.google.com/p/guava-libraries/ * http://jnb.ociweb.com/jnb/jnbApr2010.html * http://codemunchies.com/tag/guava/ 
+1 Mockito + Hamcrest play very nicely together!
[Preconditions.checkNotNull()](http://code.google.com/p/guava-libraries/source/browse/trunk/src/com/google/common/base/Preconditions.java#177) is especially cool when checking constructor arguments. Here is an example using a static import: private final String separator; private Joiner(String separator) { this.separator = checkNotNull(separator); } http://code.google.com/p/guava-libraries/source/browse/trunk/src/com/google/common/base/Joiner.java#80 
Well, given it's coming from Oracle, I'd say it's pretty official, but really just a first step. Brian Goetz from Oracle remarked that the current syntax is just a place holder and will be changed: http://mail.openjdk.java.net/pipermail/lambda-dev/2010-June/001463.html
I thought there were still multiple syntax proposals and they hadn't chosen yet.
Heh, Java has finally caught up to Windows 98 :-)
Ahh, BlueJ! The memories. I cut my first Java code on BlueJ... and now I'm working within Eclipse internals :)
This would have made my first course in Java much easier!
If you don't know what the assignment is, I would go ask for clarification. The hardest part of programming is always understanding the actual problem. You can't solve it until you understand it.
This makes absolutely no sense. Reading what you wrote, I have no idea what it is you want to do, and I've been programming Java for 14 years. To me it sounds like the problem is that you don't understand the assignment. I agree with ModernRonin that perhaps you should talk to your teacher about this.
Regardless I'd still like to know how to siphon an int value out of one object and into another, instead of just copying it, and yeah I'm gonna contact the instructor.
Congratulations on programming java for 14 years! I would give you a medal, but I don't know where you live. Instead [here is an internet high five!](http://www.ihighfive.com/)
In Java simple types are passed as a copy and object types are passed as a copy of the reference, so what you are trying to do sounds impossible.
Don't see anything special about the 14 years. My point was simply that the reason I don't understand your explanation is not that I'm not familiar with Java or programming.
From your vague description I think you need an object as follows: class Foo { protected List&lt;Integer&gt; mContainer; void add(Integer i) { mContainer.add(i); } void siphon(Foo target) { if (mContainer.size() &gt; 0) target.add(mContainer.remove(0)); } int sum() { int s = 0; for (Integer i : mContainer) s += i.intValue(); return s; } } Something like that.... you can implement the main(). 
This comment actually helped a little. First: ints are not objects in Java. They're just two-byte locations in memory that are interpreted as numbers. So if I were to do int a = 25; int b = 50; then there's no way to move 10 from a to b. a and b are just bit patterns in memory, not collections of stones or other countable items. If you do a = a - 10; b = b + 10; then a will be 15 and b will be 60. If a and b were variables holding, say, the amount deposited in two different accounts you could in a sense say you'd moved 10 dollars (or yen or whatever) from the one account to the other, but physically there's no relation between the two operations. I hope this has at least some relevance to what you're trying to do. :)
Do people accuse you of that often?
Ok, this is the answer I was looking for, thank you.
It's rather hard to understand what you want to achieve, but here's a possible solution which I'm sure you'll find interesting: byte a = 10; byte b = 0; byte c = 0; System.out.println("a=" + a + " b=" + b + " c=" + c); a ^= b; b ^= a; a ^= b; System.out.println("a=" + a + " b=" + b + " c=" + c); b ^= c; c ^= b; b ^= c; System.out.println("a=" + a + " b=" + b + " c=" + c); It is [derived from a tip](http://graphics.stanford.edu/~seander/bithacks.html?repost=4years)
well it produces the result i'm looking for, so yeah this is the concept behind what i'm trying to do. By the by what's the "^=" thing mean?
Of what?
tl;dr: In the Eclipse debugger, place a break point, and evaluate the expression: com.test.ClassYouWantToFindTheLocationOf.class.getProtectionDomain().getCodeSource().getLocation(); ***** BTW, evaluating expressions is a nice trick when debugging: http://help.eclipse.org/galileo/topic/org.eclipse.jdt.doc.user/gettingStarted/qs-14.htm
Do you often get into arguments with management at your work, or at the very least want to explain to them what they've missed, but are frustrated by the fact that you can't for political reasons?
It seems that you're trying to do some weird pass-by-reference thing here. That's not quite how it works. For instance, in nameInput(), when you reassign inputName, all you're doing is changing the the object that the variable "inputName" is referring to, specifically within the scope of that method. Meanwhile, the original nameInput in your main method goes unchanged. Try removing the parameters in your methods and assigning the return values to your variables, like this: String inputName = nameInput(); Object monthSelection = monthInput(); ...
You want to adhere to the way your main method is written? I don't think there's a way you can do that with inputName since String objects are immutable. You could create a new class with a String variable, and have your methods alter that variable.
Thanks a heap man. That seemed to work. I think I may be mixing C++ with JAVA syntax....
Your methods all return the input from the user, but you are ignoring return values in your main method. As someawesomeguy points out, passing the String/Object references to the methods doesn't have the effect you think it does. A more sensible path would be: String inputName = nameInput(); Object monthSelection = monthInput(); Object daySelection = dayInput(); Object yearSelection = yearInput(); There is no need to pass a reference to a method if you are just goin to overwrite it in that method. Remove the parameters to these methods.
Very good. I did not know about this class. On the command line I simply let java --verbose tell me. It prints out lines like this: [Loaded java.lang.String from /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Classes/classes.jar] This is printed out to stderr, so we need to redirect it to stdout before grepping for it: java --verbose foo.Bar 2&gt;&amp;1 | egrep 'Loaded foo.Bar' 
Thanks man. That seemed to work well for me. All is well for now. Just got to get the validation part going.
[XOR](http://en.wikipedia.org/wiki/Xor) a ^= b is obviously equivalent to a = a ^ b which means a = a XOR b so... (for a ^= b or a = a XOR b) 1001 // 10 (ten) -- a's value XOR 0000 // 0 (zero) -- b's value a = 1001 // 10 then (for b ^= a or b = b XOR a) 0000 // 0 -- b's value XOR 1001 // 10 -- a's value b = 1001 // 10 &lt;-- now both a and b are 10 finally (again for a ^= b or a = a XOR b) 1001 // 10 -- a's value XOR 1001 // 10 -- b's value a = 0000 // 0 --ta-da! values swapped without using placeholder variable! 
Or use String[] as parameters, instead of String. That way you can modify String[0] as much as you want inside your methods, and still access it through the original String[] point--- I mean object. But the next step would be using C directly so, not desirable if he's learning Java and OOP.
inputName == "" won't work in Java - the == operator is not overloaded for Strings (as they are Objects). Try "".equals(inputName) instead...
I assume this is for the validation part of the name operator, which I currently have commented out. Thanks for the tip
Nice. I love GWT.
str.equals("") has the danger of str being null, in which case a NullPointerException will be thrown. "".equals(str) cannot throw a NPE. Check out StringUtils lib in Apache Commons though, I usually use them instead of the built in ones. http://commons.apache.org/lang/api-2.3/org/apache/commons/lang/StringUtils.html
Yes, NullPointerException is the only reason I use one instead of another. When I compare strings, I always remember that d'oh moment when I compile and run massive application, and go through several steps in the process, only to be deflated by NullPointerException I don't even care about because I forgot that the value I'm comparing can be null in some valid but inevitable borderline case.
"".equals(str) is the best option, but if you use the form str.equals("") for some reason (such as knowing the reference cannot be null), it's better to check for zero length than the value of the string.
http://www.zeroturnaround.com/jrebel/
Others have commented on the null-safe-ness of "".equals(str). And it's the best way to do such a check. But, there is no reason to to str.equals("") because it would be better written: str.isEmpty() Another null safe test that uses a short-circuit boolean operation: (str==null || str.isEmpty())
&gt;"".equals(str) cannot throw a NPE. Wow! Thanks for that! I never knew. I always started w/ if(str!=null){do stuff w/string)} to prevent NPE :P
Well, in my answer I didn't perceive the "" as necessarily just an empty string but any arbitrary string constant. eg. "String".equals(str);
Why is it better to check for zero length than the value of the string?
&gt; isEmpty &gt; &gt; public boolean isEmpty() &gt; &gt; Returns true if, and only if, length() is 0. &gt; &gt; Returns: &gt; true if length() is 0, otherwise false &gt; Since: &gt; 1.6 Using isEmpty() and length() have both been suggested. Either seem reasonable, but why would it be better? I think using isEmpty() is not yet common because it is new to 1.6.
Actually, technically this is not necessarily correct, in that many JVMs perform [String interning](http://en.wikipedia.org/wiki/String_interning) which means this code works. Would I do it? No. However, it's something to be aware about.
Checking the length is not as obvious to the reader as simply asking if the object is empty which is a more accurate description of what we are trying to do. I like to think that readable code contributes to fewer bugs.
There are a few reasons to use curses or some other console output for your game. Among them: many roguelike players prefer it, you can play on a public server with SSH, there is already server software for setting that up, pretty much any piece of hardware can handle that side of the program (your game logic might be demanding, but not displaying the ASCII graphics), and you can record the games without taking up much space using ttyrec.
(str==null || str.isEmpty()) is the best option but less common. Things change to allow programmers to be better and then people change.
Nobody believes you.
str.equals("") is better. If str is null, I'd rather throw the exception right there instead of hiding it. If null is a valid value for str (which should almost never be the case) then an explicit check for null is clearer. "".equals(str) is a beginner being cute. I hate cute code.
Oldie but a goodie (str != null) &amp;&amp; (str.length != 0) (str == null) || (str.length == 0) null check is quick, so is the length check
I think you will still need that condition, since "".equals(str) doesn't tell you if it's null
Am am shocked at all the upvotes for the other option. I would ALWAYS go with str.equals("") version so I know that I am getting valid data. Just like .toString() throws a nullpointer while using (String) cast does not. I would much rather know about and handle the null than pass around some junk. 
Yep, it's a great piece of software, though unfortunately JRebel doesn't always work.
You might be best served by just issuing commands to the (assuming you have it installed) svn command-line program. It's not 100% recommended, since it requires that you have svn installed, but...it's probably way easier than muddling through SVNKit.
If you can't execute the svn command you're gonna have to bite the bullet and learn SVNKit. https://wiki.svnkit.com/Committing_To_A_Repository
Is this part of a build script? Ant has support for SVN built-in. Another option is to just use the command line to commit it: `svn add -R` and `svn commit --message 'X'`.
Maven to the rescue! http://maven.apache.org/scm/subversion.html
This is probably the best solution, and would be good to learn, if only to practice implementing a 3rd party library (something a professional Java developer does daily).
What's new in Helios?
I mean the easiest way is obviously to execute a shell command, but I was told not to do that in case the computer on which the application is deployed does not have command-line SVN installed (it's possible that it will use Tortoise-SVN, which is a Windows Explorer client). I already have it working with SVNKit, but thanks for the suggestion.
Yea, I bit that bullet today and learned SVNKit. I went home yesterday thinking it was going to be difficult, but I was able to set up parsing the Repo-url and authentication information from a text-file, then creating the SVN-client and committing a file to the repository. It only took 30 minutes in the end, I'm not sure what I thought was going to take so long.
Ha, yea I'm using [SVNKit](http://svnkit.com/) and [JFree](http://www.jfree.org/) in my application. I wrote a fairly nice script to parse a text file and process SQL queries over a defined number of days, then I plot a chart of the queries and commit it to an SVN repo. I then have a wiki page that is linking to the repo, and it automatically updates a chart on the page. I am then using [Autosys](http://www.ca.com/us/workload-management.aspx) to invoke the script daily.
That's what I thought, but it turns out SVNKit was a lot easier than expected.
Hrm... now if I can figure out a way to get Java 7 on my Debian servers. (Help welcomed, I may just be daft.)
Well, what is your current level? Do you have experience with anything else?
In the first paper I took for Java, we learnt BlueJ. BlueJ makes it very easy to visualise Java class structures and just "write code" before maturing to the Eclipse IDE. Agreed: What is your current level of experience? Do you know how to program anything? Have you tried C, Javascript, PHP, C#?
 public static void main(String[] args){...}
This maybe? http://www.mindview.net/Books/TIJ/
Caribou is better.
If you have ever programmed before, then you can program in Java. 
I am assuming you have no previous programming experience and that this class is programming 101. if you can do these things before you start class you will be significantly ahead of your peers. 1) write/compile/run hello world from cmd line 2) know the 3 parts of the definition of a class (inheritance, polymorphism, encapsulation) 3) understand public, private, protected at the class, function, and variable level 4) understand static at the class, function, and variable levels 5) know the difference between "==" and "somestring.equals("") 6) be familiar with the control structures (if, else, for, while...) 7) lastly, write some actual code. learning to code is like learning math, it's impossible to learn from a book alone, you have to go through the trial and error. start out simple with some text based game like tic-tac-toe or a command line calculator. 
Buy a good book. Then start coding. Kathy Sierra's Books are good. Bruce Eckel is another good author. 
Thanks for the list. I will get right on these. I wrote a simple 4-function calculator in Python, but that's about it.
Ultra-beginner. No experience. I will get right on this BlueJ. Thanks!
I'm confused. That is a coffee shop, and an animal species.
Not really. I have a Python book I've done some work in, but that's totally it.
I have a feeling this is a joke I will understand later.
I will head right over to the bookstore. I really appreciate it!
I'm not even sure how to begin. Does Java have anything like Python's IDLE?
[it's not ...](http://java.sun.com/docs/books/tutorial/getStarted/application/index.html)
np, good luck.
Regardless of this fact, I still find it humourous. Thank you! I will see if I can understand these tutorials better.
Since you talked about using IDLE, I'm going to assume you're using windows. [Eclipse](http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/galileo/SR2/eclipse-java-galileo-SR2-win32.zip) is a fairly nice IDE (Integrated Design Environment) for Java, so you should download that and mess around with it. I think Eclipse has built-in functionality to generate a "Hello World" application. I've never been very good at learning from a book, but if you're that kind of person then that may be the best route. Otherwise, I would start out with the tutorial "[Eclipse and Java for Total Beginners](http://eclipsetutorial.sourceforge.net/totalbeginner.html)".
Wonderful! I'll begin right away. Totally random however, is there any particular reason the lessons include Hungarian captions?
Download jGrasp (its free) and use it to compile and run your code - its easier than working from the command line, but it won't do any of the heavy lifting for you. Once you're comfortable with putting classes together, you can graduate to a full IDE (Netbeans is my current favorite). Kathy Sierra's book Head First Java is an excellent place to start. The most important thing is to write tons of code. Learn from your mistakes.
Doesn't happen for me, weird. EDIT: Oh I see, I'm not sure whey they are doing that.
 System.out.println("Hello World !!!");
my first book was "building java programs" by marty stepp. 
This is just the "Hello World" line? That doesn't seem too tough :)
How far does a typical first-year programming class get?
I believe Kathy Sierra and Bruce Eckel both had a hand in Head First Java. I'm too lazy to google it to verify it. Either way - it's a great beginner Java book.
That is an example of a single statement. You'll need a full class to compile. search for java hello world for an abundance of examples.
As someone who is learning the linux environment while learning to program I generally find things like eclipse to be incredibly bloated that get in the way of my ability to learn code. At the same time I feel like gedit isn't quite enough...
A typical first year Java course will cover most of the content in the Head First java book. I've had a first year Java course and read the book.
public class HelloWorld{ public static void main(String[] args){ System.out.println("Hello World!"); } } Save this file as HelloWorld.java
I dunno, I like Eclipse for learning a language because it helps you to learn the different libraries, and it also makes it easy to code some more complex programs when you are learning. In my opinion Eclipse lessens the learning curve a little. What it sounds like is that the OP wants to get a little bit ahead. That doesn't necessarily mean understanding everything about the language, he'll be taught the nitty gritty in whatever class he takes.
Best of luck! :) Java programming is fun... eventually!
&gt; is there any particular reason the lessons include Hungarian captions? Wow. You really **are** a beginner, aren't you?
[Thinking In Java](http://mindview.net/Books/TIJ/DownloadSites) by Bruce Eckel is an excellent place to start. It starts at the beginning and goes relatively deep as well. Additionally, you can buy his buy or just download it for free if you like. 
If you could make a 4 function calculator in Python Java will be pretty easy. They are similar in syntax. The list above is good but not necessarily in order. Start with hello world. Get a handle on operators and data types. Understand order of operations, this is really important. Become familiar with the data types and how they interact. Be familiar with control structures after you learn how to do the hello world, get a handle on the various data types, type conversions and promotions. When you get flow of control then move on to understanding how to use and write methods. When writing methods becomes easy, then start looking at the class libraries to see how classes are structured and get used to reading the API. Then move on to creating classes, here you can get into the fun stuff like inheritance, polymorphism, encapsulation. I don't think that the above concepts will make much sense until you start to write some classes of your own. Now you are ready to write larger programs made up of multiple classes. From here it is all practice and exploration. First and foremost, write lots of code. Do it from the start, understand the big concepts through the coding. Don't try to grasp the big concepts and then start coding afterward. This is how I teach Java to my AP CSci students, it seems to work well. 
I found BlueJ a bit confusing until I had written some code in an IDE. But maybe I am just weird.
Try [Geany](http://www.geany.org/)?
Not sure what book to recommend based on your level of experience, but whichever one you get do NOT just read the code examples. Type them out as you get to them, run them, experiment with them, etc. This is crucial to learning how to program from a book!
pick up a c# book
There's also a free book called, "How to Think Like a Computer Scientist" available from http://www.greenteapress.com/thinkapjava/ A Python version and a C++ version also exist.
Install Eclipse, then be sure to use ctrl+space if you forget the exact name for something. remember, install Eclipse.
Everything that the others have written here, will be a good contribution. My contribution: learn to think in terms of classes, and in terms of objects of different classes doing their jobs by asking other different objects to do specific subtasks. If you don't, any Java program of some complexity will be a mess.
Instead of pre-learning the class. I would instead look at digging your teeth into a different language so you can appreciate java more. My very first language was QBasic. then in highschool I wanted to take computer science classes,and the first one was using pascal, then c++ (never got heavy into OOP though), and THEN java. In Java, everything is an object (something you might have heard before if you read up a bit on it), in many other languages you either can't use objects, or objects aren't really the core of the language. As soon as I got into java and learned about objects, pointers, and refrences, I was momentarily immobilized by how friggin awesome it was. For so long I've tried making my own "objects" using multidimensional arrays, and I always got very fustrated with how complex my programs would end up being. I think I would have had a much harder time jumping straight into java. Once you understand the concepts it all makes great sense. But I think if I dove straight in to it I would have been so confused by situations like when 2 "different" variables are actually the same thing.. but if I run the same exact code but using a different type of variable the 2 "different" variables are actually 2 seperate pieces of data. Not to mention having to understand that 3==3 but "somestring" != "somestring" (you'll learn why a little bit later). Additionally, java has the most complex "hello world" application compared to most other languages. The most basic application you can make in java uses things you may not even learn what they are until your 2nd java class, you'll just have to be told "hey just ignore that and pretend it's not there.. but dont' forget it always needs to be there... you'll learn about it... later.... you know... later"
Yes Bruce Eckel is good. 
Install Netbeans or Eclipse. Then, start at the source. Go to official [newbie Java tutorials](http://java.sun.com/new2java/) by Sun/Oracle until you start finding your way around. Afterwards, I recommend [JavaBlackBelt](http://www.blackbeltfactory.com/).
http://java.sun.com/j2se/1.5.0/docs/api/ will be your friend. Read it. Learn it. Love it. Eclipse and netbeans have an autocomplete feature that will assist you in learning the API. ALSO, there is the whole "Learn CS, not just a language" thing.
While Eclipse does help someone to be aware of the libraries, a beginning Java student is probably not going to be allowed to touch a lot of them for their assignments. They'll be asked to do things, specifically without utilizing the libraries that will make things so much easier (like array sorting/searching, or whatever other "CS 101" exercises come to mind).
I don't know if he has changed it. But, one thing to be aware of is that his book uses (or used) a GUI wrapper to hide the complexities of Swing from new users.
No. Stop. [Eckel has the 1st and 2nd Editions of his book on his website.](http://mindview.net/Books/TIJ/DownloadSites)
He also has the 3rd edition for Java since 4th is current.
I have heard that it is true. However, with the new version (1.6) and maybe oracle having some say, there might be different trending.
You have to get the book: http://www.amazon.com/SCJP-Certified-Programmer-Java-310-065/dp/0071591060 And understand EVERYTHING in it. Then you have to get some practice tests, and take them until you pass, every time. Without that, you won't pass the exam, I promise, no matter how much of a Java Professional you already consider yourself. This information is from personal experience. I took the exam and passed on the first try using these methods.
+1 for the Head First books. They do a good job of getting the reader up to speed on the techy details. http://oreilly.com/catalog/9780596004651
I am a teaching assistant on java-based programming 101 course, and it looks like our experience has lead us to exactly the same conclusion. I would only emphasise that learning single dispatch, single inheritance OO is important. The book OOSC by Meyer will teach this (after you have a little more experience than "none").
Eclipse is free and the industry standard. Sun will try to push you to NetBeans, but I teach Java courses for a living, and our teaching engagements are 80% Eclipse, 15% IBM Rational Application Developer (Non-Free), and 5% Other (NetBeans, JDeveloper, etc.).
Free online coach assisted course &amp; workshop : http://www.blackbeltfactory.com/ui#Topic/JavaOOFundamentals
Here's a nice summary: http://rajakannappan.blogspot.com/2010/05/new-features-in-eclipse-36-helios.html Edit: and also here: http://aniruddhchitre.wordpress.com/2010/06/15/eclipse-3-6-helios-a-quick-look/
I would stay away from BlueJ. Stick with eclipse.
In case you are wondering about IBM Rational Application Developer it is based on Eclipse, but is meant for use in creating web (JEE) applications. You can create web applications with just Eclipse, but some people like the ease of having a test JEE server for deployment. There are other improvements, but if you learn Eclipse you will be able to get into RAD (IBM Rational Application Developer) easily. Step #1, before even getting a book is to get Eclipse from eclipse.org.
Good point, though I will add that a full JEE server for free can be found in JBoss. I also echo the assertion that learning Eclipse gets you most of the way to learning RAD.
Jesus Christ, look at all of these comments that don't included the Java tutorials. Damn it, just go to the Java tutorials at http://java.sun.com/docs/books/tutorial/. I think you need to learn how to learn. Seems like you want the easy way out of things. Just read, man. Read and do.
&gt; Better numerical literals to make long numbers more readable. Cool. long cc= 123_5678_567; Huh?
Well honestly java really is this way. But we can try.. &gt; char[] copyTo = new char[7]; &gt; System.arraycopy("decaffeinated".toCharArray(), 2, copyTo, 7); or &gt; System.out.println("decaffeinated".substring(2, 7)) Basically while it's not as fast, substring and toCharArray() are your friends in this case. *edit I'm idiot and forgot that copyTo is a char[] not a String The javadocs are your friend: http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html 
Very nice. I would assume that is correct, but what are the logical reasons? If I were printing a huge array of characters, would this cause some funky word-wrapping issues that can be solved by converting to a string prior to output? is this "new String" just a quick nameless variable that is dumped as soon as the function resolves?
Awesome. Thanks for this. I've been reading over the docs as I look at code and tutorials. I'm still in a trial and error stage where I'm determining if Java is what we need, or perhaps something else.
&gt; If I were printing a huge array of characters, would this cause some funky word-wrapping issues that can be solved by converting to a string prior to output? No, the two are basically equivalent. &gt; is this "new String" just a quick nameless variable that is dumped as soon as the function resolves? yes
Again, thanks! I had to do a little experimentation to see what happens to nulls in this case and you are exactly correct-- char[] = String Weird. I would not have expected a null in a char[] to equal ' '
The String constructor doesn't throw NullPointers, it just turns them into empty strings.
The idea being if you've got a really long number, you can add logical breaks. I would think 123_456_789 is more readable than the example they gave because it goes where the commas would (in the US)
+1
What does Hudson give that [Bamboo](http://www.atlassian.com/software/bamboo/) cannot?
A rich set of plugins / integrations. Easy configuration. No Atlassian brain-deadedness. 
Hudson is officially supported by Big Visible Cruise Web Shameless Self Promotion: http://code.google.com/p/big-visible-cuise-web/
Interesting.
What does this do that Hudson does not provide natively?
It provides integration into an environment where there may be several build environments, not all Hudson or more than one Hudson server. It also provides filtering by regular expression (if you are only concerned with builds for a specific branch for example), a re-sizable re-flowing interface, and support for the colorblind. It also has its own cache to drastically reduce load on the hudson server if there are a lot of clients.
Awesome. I love me some wicket. (I have been a wicketstuff Contributor for about a year now). Seriously though, why isn't this in wicketstuff?
It's free, and open-source.
Basically, it's just I develop these components to support my other projects, so I'd rather maintain them as a separate entity. I think the Wicket eco-system could also use some separately maintained projects. I may be wrong but my impression is the projects in wicketstuff aren't always maintained very actively or well documented/published.
Poor documentation is endemic to the project right now. The thing with wicketstuff is the good components usually get promoted to wicket-extensions and then a few end up in the wicket core. The other problem throughout wicket is a tendency to want to wrap every js library out there which leads to competing components each drawing a small number of maintainers who are just working to support their personal projects.
We recently started using this at work, hooking it up to [gerrit](http://code.google.com/p/gerrit/) as a reviewer. It's been really nice. 
As long as IntelliJ is still going strong, that is probably a good idea. I'd hate to see java development go down to a single UI though. 
One IDE to rule them all.
Agreed. I've been developing on Eclipse for quite some time, and when I tried NetBeans out, I couldn't stand it. If they do merge, I hope they only add some of the functionality from NetBeans that is missing in Eclipse, to Eclipse.
Totally agree. As a mouse based guy I'm addicted to the save on the right click menu. I think Netbeans is more focused at the keyboard shortcut folks.
I think that's a bad idea. Netbeans and Eclipse are extremely different from one another under the covers, so "merging" them is not really an option. Netbeans currently has way better GUI designer (good for quickly prototyping but useless for production code at least in my case), and amazingly good VIM (not vi, but full VIM) plug-in that I would love to see in Eclipse, and it also supports development in other languages a lot better (C++, ruby etc). But Eclipse feels more native and it's better in other regards (perspectives, type hierarchies, inline views, call hierarchies and faster navigation etc). Besides, competition is probably good for both of them. I'm not sure what they really mean by "bring the two communities together". Perhaps they had something else in mind altogether. 
More info: http://blog.o0o.nu/2010/06/cve-2010-1622.html While I'm currently a "standard" java enterprise developer, I find this stuff fascinating. I need to find the time to learn more about the security scene someday (but there is so much stuff to learn already...)
That was genius!
In case you haven't already guessed, they're speaking Norwegian. Also, that was funny.
The YouTube link seems to have more success, if you are interested in the comments: http://www.reddit.com/r/programming/comments/cixik/dad_why_do_we_always_use_net_im_not_a_big_fan_of/
And what if we have no friends?
Make some, using your java skills!
Yes it is... it's a joke in the fact that it's literal but not exactly what the OP meant
import org.club.cool.*;
NullPointerException on a Friend.
I teach an intro Java class at a community college. Perhaps I should tell my students about it?
I believe the correct one is `return ((Friend) friend.clone());`
Yay!
Sure! :D
Nah, it's `return ((Friend) PersonFactory.getPersonFactory("FRIEND").getFriend().clone())`; (I kid, I kid)
I would suggest r/learnprogramming, which is the proper place for this question.
So, maybe, rather than a pointless self post, actually contributing some interesting Java-related links would be a more appropriate way to give it that love? Just sayin'.
Ha Ha Only Serious.
Wouldn't you ant some friends, rather than make?
I just recently added /r/java to my front page. I am moving into Java development at work (absolutely NO prior Java experience whatsoever) and I need all the help I can get.
A non-normalised string constant! Gasp! I think you mean to say, `PersonFactoryConstants.FRIEND` :P
As long as you keep catching it you won't feel bad.
Only sloppy programmers catch NPEs. Real programmers prevent them.
Yeah catching NPEs is a sure way to failure in production. It's a joke.
I'm with you. I started doing heavy java dev about 6 months ago after no exposure to the language before. r/java has been a boon to me coming up that learning curve quickly
Did you move into Java from another language/platform? If so, why the switch?
im here for the chicks
Why do you say that NetBeans supports C++ better than Eclipse? I wasn't even aware that one could use NetBeans for C++. I have used the Eclipse C++ environment, and found it to be pretty good. I don't really have to deal with C++ anymore (happy about that), but I'm just curious, since NetBeans is so obviously Java-centric, while Eclipse is a little more agnostic.
We don't have friends. The closest you can get is package-private
No, no, no. FriendFactory implements PersonFactory, and Friend realizes Person. Friend friend = FriendFactory.newInstance(); 
Those are actually 5 things I *did* know about jars. 
Yeah, I did mean to say that actually, but was too lazy to actually do it.
i'd been doing modeling work for years in matlab &amp; &lt;shudder&gt; stella and stats work in sas and R. I switched jobs to work with a startup who, for performance reasons, was using java to do large-but-simple linear modeling. 
I'm a senior java developer, and develop on x64 Windows 7 at home and at work -- no issues. What you say doesn't seem logical. As far as the applets go, maybe you are using a 64-bit browser and 32-bit java, or the other way around? Whenever I install I install the 32-bit JDK and JRE, then I install the 64-bit JDK and JRE, then I set JAVA_HOME to my 64-bit JDK. You redownloaded Java as opposed to reusing the same installer, right?
I have seen this before, i was able to fix the issue by creating a JAVA_HOME environmental variable and pointing it to a 32 bit version of the JRE. I am not sure if this will work for you, but good luck.
I've tried everything, but i did install the correct versions for the respective browsers. (IE has two different types, 32 and 64, neither worked). "java for chrome" didn't work either. I did redownload java every time, btw, including on the fresh installs. 
How would you go about doing that exactly? I've never really fiddled with Java that in-depth before, just some basic developing with netbeans. Thanks!
The IDE you are looking for is Eclipse, by the way.
I am starting to use R. Is there a reddit for that, if not, what is a good way to learn?
This gave me false expectations :( I want to login with OAuth 2.0 with a **desktop** app.
Seems an awful lot like Spring's [Roo](http://s3.springsource.com/MRKT/roo/2010-01-Five_Minutes_Roo.mov). Can you identify any important differences to contrast the two?
Roo is a code generation tool. Its defaut plugin set lets you generate Spring MVC front ends backed by JPA/JDO stores, but you can extend it to basically generate anything you want, as shown by the recent preview of a GWT plugin. Play on the other hand is a web framework that happens to offer code generation (scaffolding) tools.
Big difference for me is that Play looks to be designed for a PHP/RoR style audience.
DontCriticizeMyEnglish has said everything :)
I think removing this feature is rather drastic, but I understand that having initialization code in multiple places can become a maintenance hassle. On the other hand, if you only allow initialization in constructors, you may still need to duplicate code in multiple constructors when it is not possible to chain constructors using _this(...)_ calls. Whether you initialize objects outside of a constructor should be a matter of coding practice within your project or group. In my opinion, using instance variable initializers may often be much more convenient and actually keep things more organized.
The initialization block follows the "initialize it where you declare it" philosophy. I always follow the mental rule of thumb that if I want to provide customized construction of an object, I initialize in the constructor otherwise I initialize in the initialization block I like the initialization block because it provides a menu of variables and I have some idea of what those variable are initially set to. It's a nice standard way to make sure there's guaranteed a thoughtful initial value rather than whatever the runtime offers (which is usually some variation on 0 or null)
It gets even weirder: class InitializationBlock { int[] arrVal = new int[10]; // Initialization block { System.out.println("In initialization block\n"); for(int i=0; i&lt;arrVal.length; i++) { arrVal[i] = (int)(100.0*Math.random()); } } void someMethod { return; } }
Off topic, but you'll be surprised to know that we (you and me) already know each other :)
You say "where code doesn't get initialized properly, sometimes due to code being called in the initialization block." and then you posted an example. From your example, I'm unable to see what code was not initialized properly.
Eclipse and NetBeans are two totally different architectures - you can't just stick them together and expect the result to be better than the sum of its parts.
I love Eclipse, and can tolerate NetBeans, but as long as they don't involve anything related to JDeveloper I'll be happy. I once had a new boss who joked, "I heard that you would quit before you would use JDeveloper again?" I let him know that he heard correctly, and left it at that.
Extracting parts from Eclipse is actually pretty easy, although I can't speak to the "plugging them into NetBeans" part. Eclipse is built on an application framework (RCP). Everything that a user thinks of as "the application" is actually a suite of plugins that are pretty darned modular. To pull features either partially, or wholesale, shouldn't be that big of a deal, just creating an adapter layer for things like the AST, user preferences, etc. I am concerned that they might just try what you suggested, though I really hope they won't. I'm a little OCD about user experience, and I just can't see a good melding of the two UIs.
I would recommend just taking the things that netbeans does better than eclipse, and then making eclipse do it that way. 
I really hope they leave the products distinct. I love Netbeans. I can see why some prefer Eclipse, but I just don't care for it. I know that the unfortunate truth is that if they combine the 2 IDE's, Netbeans features will be the ones that get the axe.
Yes be careful, "".equals(str) will still return false if str is null.
Why would you want an Exception thrown instead of the -- cheaper -- nullability check?
From Oracle's perspective it does not make a lot of sense to fund the development of two competing products. If I was Oracle, I would do one of the following: 1. Pick one, either Eclipse or NetBeans and cut the other one loose, making it an unfunded open source project. This would annoy a lot of people. 2. Merge them. Technically difficult, and runs the risk of creating a splinter project, e.g. OpenNetBeans, which would be run by people who felt Oracle had thrashed their favourite product. Not a great option either. 3. Specialisation. Drive Eclipse and Oracle into separate niches, thus preserving both products while increasing market coverage. This is the best option from Oracle's point of view, but developers will be forced to choose one or the other or run two IDEs to get a full set of features. 
Really ? From where ? Developpez.com ? 
Not sure how feasible it is, but all I ever wanted is for Netbeans to adopt Eclipse's plugin model so they are byte-code compatible. Maybe come up with a common plugin interface that they both share. Then we wouldn't have so much duplication of efforts. 
As a NetBeans user, I can tell you this is impossible. The big thing that NetBeans does better than Eclipse is being a fully-integrated environment. I don't have to figure out which "collaboration" plugin and plugin-plugin to install to get Subversion to work, it just works. I don't have to figure out what the meta plugin for build systems is called and get the right plugin for Maven either. It just works. I gave Eclipse a chance six months ago and I gave it another chance yesterday, but the simple fact is that Netbeans just works out of the box with my environment and Eclipse required a boatload of customization. Well, this is exactly why Emacs has proponents and opponents. Either you have time and patience to customize it, or you don't. Eclipse can't take over NetBeans market segment unless they make it require less customization out of the box, and if they do that, they're going to offend their existing user base.
This is exactly why I prefer NetBeans. It's an application, not a meta-suite built on a framework of meta-plugins of plugins. You download it, run it and it works. I find it kind of amazing that you are OCD about user experience and yet you prefer Eclipse. Have you tried NetBeans?
I am an Eclipse advocate, but appreciate what NetBeans is as an IDE and platform. I hope Oracle doesn't unconsciously favor one over the other.
You mean three. They have their own JDeveloper IDE to worry about as well.
Yes, I've tried NetBeans periodically. I'm not saying Eclipse has a superior UI, but that habituation is a very core part of user experience. I've been using Eclipse since its inception, and there's a lot of "muscle memory" due to that. Are there UI features that I don't like in Eclipse? Yes. Would either product be made less usable by shoehorning features from the other in? Most likely.
This is going to be very useful for me :D
Finally, a library *meant* to be used the way that HTTPUnit usually ends up being used! I'll definitely be using it.
Can't tell you here in public: there are all sorts of weird and even dangerous people (and 4channers) prowling here in reddit :P Rather, have an orange red.
Why not just use ANT? /ducks and runs
Maybe this is arrogant or ignorant, but it sounds like his biggest problem is not using maven the way it was intended to be used?
&gt;the way it was intended It was intended to cause pain. If maven causes pain, you are using it right.
I love Maven, but I also am into S&amp;M so I guess that might have something to do with it...
ant all the way!!
The problem with maven is that the way that it's intended to be used is very restrictive. There are certain ways you are supposed to do certain things, but if you have a scenario where what they've planned doesn't quite work, leaving the maven box can be quite painful.
Personally I have found maven to be quite flexible, but again, I understand where you're coming from.
Coming to Java from other systems, I have often wondered this myself. It seems like in the Java community, standard practice is to create a tool, throw it away, write a toolkit/abstraction layer over it, write three more layers on top of that, and then provide a "flexible" XML interface around the whole thing. When they explained why we use Maven at the current job, I couldn't really understand why we went with it instead of ant + ivy. Especially because we now have a pile of shell scripts that drive Maven and do extra work to produce our builds. On top of all that, it's vastly slower and more fragile. I don't get the popularity. Then again, we also use Hibernate, which I've come to accept as a worst-of-breed tool in a niche which itself represents a very bad idea.
I don't understand maven's popularity either. I might be because it was the first or one of the first build tools in the Java world support managing and fetching dependencies from the internet. Ivy came after maven. I've also got a bunch of little shell scripts for building smaller parts of our multi-project product at work since maven's multiproject support is horrid. Otherwise I have to build the lot starting from the root pom which just takes for-bloody-ever. Maven seems to work ok in the most trivial of cases where you just want to compile some java code into a single jar. That is the only good thing I can say about maven. 
Maven is evil.
There are a lot of bad ideas in CS just ask this [guy](http://lemonodor.com/images/dijkstra-quick-n-dirty-s.jpg)
Haha. My hero.
[This link](http://ant.apache.org/ivy/m2comparison.html) explains why ivy is a better fit for the Hibernate project. Basically Hibernate allows for a multitude of configurations/dependencies and with maven it seems you must get all dependencies whereas ivy allows finer grained dependencies. After Hibernate went to maven I no longer worried about trying to get it to build anymore, before maven it was easy to build. So I welcome dropping maven for ivy. And I'm curious what your thoughts are on an alternative to Hibernate. I've used sqlalchemy, django and ror, and I found that Hibernate does a number of things better.
Better than SQLAlchemy? Like what? I am a major database partisan. I use Hibernate at work and I'm not really in charge of the mapping, but we've had a lot of trouble with orphans and the interaction with the XML generator. I am under the impression TopLink and EclipseLink do a much better job and handle threading and caching better, but I haven't had an opportunity to really pit them head to head.
Hibernate was created because TopLink was a pain in the ass for many people although I haven't used them. Specifically Hibernate caches better than sql alchemy.. mainly because sql alchemy doesn't do caching. Hibernate on the other hand supports 1st level and 2nd level caching, both of which are configurable. And you can plug in different cache providers for 2nd level caching. Then you can set objects/queries into configurable cache regions with each region being configurable.
Everything in Hibernate is configurable, which strikes me as a convenient dodge for when things go awry. We have had the caching bite us in the ass more than once. Honestly, some of the blame belongs on JSF's shoulders though. I think a lot of life would be easier if we were using JPA or an object database. Our model is really heavy.
I use struts v1 + velocity, JSF is light years away from my world and I have had nothing but success with hibernate. The trick with caching is to keep it simple(read-only) and know the difference between 2nd level and first level. And don't mix objects between sessions. I think I recreate the wheel a lot but it works out because I can re-use quite a bit. All the new stuff scares me. And when you use django enough, you will find queries it simply cannot do whereas with hibernate I have rarely ran into that problem. But I do have 1 humongous 20/30-line SQL query that I admit is in jdbc, but it's rather hairy and relies on custom postgres data types. 
&gt;I think a lot of life would be easier if we were using JPA do you mean using a different JPA provider other than Hibernate? JPA is just an interface
I mean using JPA w/ annotations instead of using Hibernate's XML format. We're not using Hibernate behind JPA, we're using raw Hibernate.
Well, if nothing else, we can agree about PostgreSQL. :) Where I work, we use JSF. JSF tries very hard to give you the illusion that there's no such thing as an HTTP request cycle and that you're just publishing some POJOs on the web. The project I work on was originally set up by non-web developers who picked ICEfaces as the JSF implementation, so take the usual JSF problem and compound it with the user's whole interaction with the app is through what is to the browser a single page being updated with a lot of Ajax. Everything the user deals with has to get loaded and then sticks around until they log out. Add to that the model is very heavy and then add to that some aspects of the model are intended to be shared (public data) versus private user data. Our whole setup is really a clusterf*ck and it's hard to even know where to begin to start fixing it. I suppose I pick on Hibernate because I dislike ORM to begin with and it has a lot of complexity I'd rather not learn. By the way, if you have the choice, definitely avoid JSF.
I think that's about right. Initially, I liked it for small projects because of its "convention over configuration" approach. But as time passed and I tried it on bigger projects, I kept feeling that I was bending the project to fit Maven, not the other way around. After a while, I migrated back to Ant, which has the benefit of near infinite flexibility and, hence, it fits the project, rather than forcing the project to fit it. 
I read about JSF from reading what Gavin of Hibernate fame wrote about it, he's a big fan(and a big jerk). I wasn't impressed in the slightest. Django and ROR do things way more intuitively. What a lot of these java frameworks do is try to do too much in a crappy way, leaving a mess. They don't learn from django/ROR. Some day I will have my django/ROR goodness with static typing. I think in your case, with lots of ajax, hibernate would be a pain in the ass with all those small requests. I hope you don't have one long hibernate session. Ouch. Either way, it's gonna hurt.
Steve Ebersole has some strong opinions about how his projects should relate to each and the parent -&gt; multi-module structure didn't fit his needs. He also didn't understand how the Release plugin worked (or he did, but it wasn't for him). I say good for him, if Maven doesn't fit your assumptions, don't use it. 
Well, that's exactly what we have. :) By the way, have you seen [the Play Framework](http://www.playframework.org/)? Sounds more up your alley. I think we're too far gone to use it. I am evaluating alternatives though, in case we have time later this year or next year to port. Currently in the running are Tapestry, Spring MVC, Wicket, Echo 2/3 and GWT. Any opinions?
Of those I have used GWT and loved it and it is suited to your app. I'd go for GWT. The only real downside is it looks at the user agent vs sniffing objects, purists get annoyed at that. Otherwise, it's pretty cool to be able to write statically typed code for the js front end, makes huge ajax apps very manageable. Lots of javascript can get quite hairy. Of those, for non-ajax apps, play looks awesome, similar to ROR/django. Missing django's awesome form capabilities though.
From my background, I am pretty fond of jQuery, but I guess you can do similar things with GWT from Java, right? Thanks for the advice and hearing my rants.
I love jquery too, looks like you can use it with gwt: http://code.google.com/p/gwtquery/wiki/GettingStarted
It looks like Gradle supports Ant scripts directly, whereas Maven ignores Ant and treats it as a third-class citizen.
_Absolutely_ this. The whole design of Maven seems to assume it operates within its own world.
if you have issues with raw Hibernate than you likely won't find things any different when using a different metadata format
Ugh. Here's my beef with portlets, from TFA: "It is not possible for a portlet to generate URLs referring to other portlets in the portal." How can you claim that portlets are a viable webapp technology when you can't write a fucking link? To be fair, you CAN get one portlet to link to another portlet, despite the statement I quoted, but it's not something that they want you to do frequently. I understand that there are contexts where portlets make sense (google ig, jira), but let's not pretend that every webapp in the world should be a portlet app.
Portlets have a very specific usage pattern where they make sense, this article focuses on the benefits of portlets for that specific pattern. Making a blanket statement that portlets are better at request processing is like saying AppServers are better than a simple Servlet containers. They serve different roles, and there are plenty of cases where a J2EE AppServer would be overkill when Tomcat would do. There are too many of these quick hit programming articles which just say x is better than y as if it were clear cut for every use case. We recently just spent a lot of time and energy getting all of our portlets moved into servlets so we could dump our expensive, overly complex, memory hog of a portlet server and simplify our deployment model. No technology is ever the best choice for every situation no matter what.
source: http://java.dzone.com/articles/java-se-6-update-21-released?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+javalobby%2Ffrontpage+%28Javalobby+%2F+Java+Zone%29 
Link?
Where?
He *did* say really simple...
I submitted this late yesterday, tired, and left out the link. It's a really practical introduction to Java 2D games, I found it really useful. In fact, I tinkered with it for hours, changing stuff, testing, nice learning experience.
Nice!
This is a very old tutorial. It does, however, get you started with programming 2D games in Java. If you're going to make a 2D game in Java, I recommend taking a look at [Pulpcore](http://www.interactivepulp.com/pulpcore). Rolling your own 2D game library is a lot of work and it'll probably suck.
Wait, somethin's wrong here...
Are you unaware that Oracle acquired Sun like a year ago?
And...
Err. Vid does not work.
Certification programs make me baulk.
http://wiki.github.com/mrdon/maven-yamlpom-plugin/
due to music credential
Seconded, it's a matter of preference and practicality. As a developer you should really be looking in both places anyway when writing a class, as the set of fields tells you a lot about the nature of a class and the constructor often tells you useful information about how the class should be used. 
Head First Java is a good book.
I've heard they have a shot that will clear it up.
I still feel like [j]ruby/rails and grails are both an order of magnitude improvement over this. With either framework you can be up, deployed, and writing new code within a minute or two, and you don't have to worry about setting up spring like they do in the article.
Hahaha, the article is awesome - just look at all the work you are encouraged to do in order to serve `index.html`. (As soon as I saw Maven mentioned...)
I tried to do some simple projects with Maven but it was always giving me problems because it didn't integrate nicely with my IDE, and it doesn't seem like it would save any time with configuration for a one person project.
If you're using java for a one person project, yer doin it wrong :) Python is awesome, and easily learned. Django is great for small web projects. Ruby and rails is nicer, but the learning curve on ruby is steeper. Groovy and grails are very friendly to anyone who knows java, and are almost as cool as ruby/rails/python/django. (All of the above assumes web development, if you're doing something else, there are usually other options. But you will at least have other JVM languages available to you).
Spring is so much more powerful than rails or grails though.
Or if you want a job you can learn Spring.
Grails uses spring, ruby has enough baked into the language that it doesn't need it.
The HttpClient library supports doing that easily out-of-the-box. Here's their programmer's guide about authentication: http://hc.apache.org/httpclient-3.x/authentication.html
It's true, we in the Java world are not blessed with productivity in this sense. Python, Ruby or PHP would be much quicker of course. That said with those languages you might not get the reliability and experience of the JVM. It's been around a while now!
Yup. PHP still isn't even threadsafe or supports unicode :D :( \- A longtime PHP developer
I only went through your requirements quickly, but it does sound like Apache Hadoop+MapReduce is a good fit for you. I've worked with the framework and I'm certainly not an Apache Hadoop+MapReduce evangelist (it does have its issues) but it sounds like the problems you're trying to resolve are taken care of by the framework, leaving you free to focus on the more important stuff.
Using any library, even RMI, would surely be faster than writing your own transport protocol over raw sockets plus hugely easier. I suspect binary protocols rather than, say, SOAP would be more suitable for you. Other more modern options might be better than RMI though I have never compared. Check out: - Avro - Thrift - Protocol buffers - Spring remoting (based on hessian I think) I'd love to see a comparison of these tools if you do it. Would be great to know how they compare against a baseline of plain old RMI. 
I came to recommend Java Posse, but you've already got that. It's about the only Java podcast I actually know of so interested in what you find :)
I suggest Apache MINA
For me, the link for Java Posse didn't work. I had to remove the www. The weird thing is this http://downforeveryoneorjustme.com/www.javaposse.com told me that the www worked... Personally, I never use the dubyas.
So far, this looks really good. I may have to do a prototype to fully understand it.
The Chariot TechCast (http://techcast.chariotsolutions.com/) has useful developer news and interesting interviews, focusing on the Java ecosystem with a bias towards web/enterprise development. Sound and production quality is pretty professional. 
Tweaked the link and added the itoons comment.
I deleted and re-imported my projects and that seemed to fix this issue (plus fiddling with eclipse.ini).
what's your eclipse.ini look like? you can try adding: --launcher.XXMaxPermSize 256m 
That is the solution given in the article...
Wow. I never thought I'd lose hours of productive time because Sun got bought by Oracle. Something went wonky with my jdk today, so I replaced it with the latest, and ever since Eclipse has been unstable. Now I know why, and hopefully, it should be fixed.
Grails is a superset of Spring. 
For some reason, though I changed this a month ago, Eclipse *still* "runs out of memory" occasionally, and I still sometimes get the "Permgen" error. Before I made this change, it was happening every hour, and now it only happens maybe once a week.
If I'm not mistaken, the elementary steps are as follows: * Operation is a modulo * Left-hand side evaluation: * fetch c (value 2) * Right-hand side evaluation: * Left-hand side of addition: increment c (now 3), then use the result in the expression (value 3) * Right-hand side of addition: fetch c (value 3), then increment c (now 4) * Perform addition (value 3 + value 3) (value 6) * Perform modulo (value 2 % value 6) (value 2) * Store result in c (now 2) Maybe you thought the increments occur "before the line is executed"?
Here's the [relevant section](http://java.sun.com/docs/books/jls/third_edition/html/expressions.html#15.7.1) of the Java Language Specification for reference.
From Section 15.26.2, Java Language Spec. A compound assignment expression of the form E1 op = E2 is equivalent to E1 = (T )((E1 ) op (E2 )), where T is the type of E1, except that E1 is evaluated only once The last part is crucial; E1 is evaluated as you "see it" going left to right. It doesn't matter if E2 pre-increments a variable seen in E1, because by the time E2 sees it, E1's value has already been decided. Try n = 13; y = n % ++n; You should get y = 13. 
What I was saying was that n = n % m does not compute the same way as n %= m even though you'd assume they do. for c = 2, c %= ++c + c++ equates to 2 for c = 2, c = c % ++c + c++ equates to 5 
order of operations I think. Try for c = 2, c = c % (++c + c++)
Your second expression evaluates as: c = (c % ++c) + c++ which is quite different from the first.
Or you can pull your head out of your ass and use a tool specifically designed for this like cobbler and puppet.
facepalm! Thank you.
Firefox User Script (the *.user.js is also linked from the project page) : http://userscripts.org/scripts/show/23200
Friggen awesome. This has always been a petpeeve of mine.
In the 90s when most OSes had O(n) scheduling then NIO was faster since it used fewer threads, but all modern OSes use O(1) scheduling, so they handle lots of threads fine, so the myth that NIO=faster is merely a relic of the past. 
Spring/MVC &amp; GWT can be a working combination. GWT is nice because it allows the dynamic portion of the view to be done mostly in Java (there are times where you will see CSS/Javascript in the Java code) In my case the GWT-View was fit to an existing set of services/beans already Spring-wired. Spring manages my beans and Spring-Controllers answer my HTTP-Requests while GWT is handling the front. Hibernate is working at the data-layer. If you are interested in knowing more, let me know.
Definitely would like to know more.
I thought the other advantage of NIO was supposed to be that it gives you memory mapped I/O, which is not possible with old-style I/O.
Andy VanAbs' experiences with moving over to Tomcat 7. He discusses how new features could be helpful and why you should wait to move some apps over. 
I wish more blog articles were of this quality, and so-called experts were at least at the level of maturity shown here. I especially liked how the author was explicit about how much (actually, "how little") experience he had with Tomcat 7 (one production migration, two test migrations). At this point, most other authors would probably have written vague, non-disparaging sentences such as "according to all the migrations I've done", etc. Overall, this is an expert I'd tend to trust.
For a REALLY developer friendly type-safe query language for Hibernate / JPA 2.0 see Querydsl : http://blog.mysema.com/2010/07/querying-hibernate-with-querydsl.html
It would probably be helpful if you posted the source of your HashMap implementation.
It's here: http://code.google.com/p/ontopia/source/browse/trunk/ontopia/src/java/net/ontopia/utils/CompactHashMap.java
Sorry about that, I'll see if I can find a working one. Edit: Sorry you had to wait to weeks for this, hope at least you will enjoy it as much as I. http://www.dailymotion.com/video/xdwk35_dylin-prestly-microsoft-net-vs-java_tech Edit2: 2:40 to 2:45 might be slightly NSFW.
Sorry you had to wait to weeks for this, hope at least you will enjoy it as much as I. http://www.dailymotion.com/video/xdwk35_dylin-prestly-microsoft-net-vs-java_tech Edit2: 2:40 to 2:45 might be slightly NSFW.
The post has been updated with more informations and results. A method invoking the cp executable of the Linux Platform is now included in the results and more tests have been made (between two disks copy and on the same disk copy results and comparison). I've also included more informations about the disk and the benchmark. The statistics informations about the results are also included in the post. So you can found the standard deviation of the results and the confidence intervals of the results stats.
tl;dr - Waste of an hour. Rehashed things that are already widely known about Java 7. JavaFX part was devoid of any substance (mainly a 8 min, non-technical demo of the Olympics site).
So, a Java presentation on an all-Java site in a Flash container. Yay. :|
Hm, I only really started beeing productive with Eclipse when I learned to use just with the keyboard.
Avast reports this link as hosting a trojan attack. 
Thanks for the heads up. We will look into it
Yes, seems to be a set of three files from the Analyticator plugin. More info at http://blog.avast.com/tag/google-analytics/ Edit: More info is actually at http://blog.avast.com/2010/02/18/ads-poisoning-%E2%80%93-jsprontexi/ . Some form of ad poisoning according to Avast.
&gt; the java compiler is smarter than you and can optimize your code better than you can This is still the best default position to take, though. Sins of premature optimization, and all that. A bigger influence on how you order things should be the logical arrangement that makes sense depending on the data represented... and generally that coincides with the fast way. When it doesn't, that's a profiling issue.
Uma boa oportunidade, mas é difícil achar alguém com essa qualificação! Boa Sorte a todos...
Wow.. you could have won some money from me on this. Nice find. 
Hmm.. It's pretty obvious in fact, as T[][] is simply an array of arrays. Then it's trivial that the compiler can't optimize the layout. And they arrays may have different lengths.
And this is the reason that most Java matrix libraries use 1D arrays for 2D matrices and access elements using T[row * size + column] 
Hibernate is the EJB 1.0 of 2010. I hate my life when I have to interact with it.
A useful way to get around encapsulation problems in Java, but it carries a risk, too.
How to create a class with multiple constructor methods, without repeated code in different code blocks.
What is Oracle doing? Maybe I don't understand it completely, but Java has become a kind of lingua franca of open development. Suing Google for this just seems like they want everyone to be afraid to use Java. Just doing this is obviously sending a shiver down the whole industry. What's next? Are they going to start hammering people for extending MySQL?
Thanks, that was a very informative and honest writeup about the current state of affairs. 
James's blog seems to be down (Slashdot effect?), so here is Google's cache of the post: http://webcache.googleusercontent.com/search?q=cache:http://nighthacks.com/roller/jag/entry/quite_the_firestorm&amp;strip=1
Sounds good. I am posted this to programming.
There are so many cool resources from Greenfoot! Now I know about them, thanks to Cats On Keyboards. n_n
Cool addition to the previously posted video game kernel.
Why are you sharing this? This is not a cool hack.
I did know this, actually.
That's pretty old news actually.
I didn't know about the static function, knew about the rest :/
Well at least Oracle does their evil in public.
If you're able to get China, CIA, Net Neutrality and any company name all in the same sentence, you'll know if they're doing evil or not. Just sayin.
Preventing collision detection failures with fast-moving objects using collision prediction. Stop the "flythrough" effect.
Man, strong accent + bad audio = bad combination. It's very hard to listen to this file.
I am so bummed, its not an actual movie :(
The compiler may find it difficult to optimize that code because swapping the loop order will result in different values being stored in the array. However, since the arrays are local and the output is never used, I suppose a really smart optimizer could actually optimize the loops completely away.
Google may just say the hell with Oracle and ditch the Java syntax in favor of another language - mostly likely Python or [Go](http://en.wikipedia.org/wiki/Go_%28programming_language%29). So those languages could end up being the sixth winner. For sure the loser in all this are Java developers.
Fantastic article.. best one yet on scoracle. Oracle will get nothing and like it. 
Didn't realise this wasn't commonly known information.
I just use google
I give up. hehe. Yea, I usually don't do object initialization there, but that has to be a maintenance nightmare. 
Google and IBM should just start their own conference, and on the long run Google will either drop Java altogether, or seek support from other major industry players and do their own separate thing as they did with WebM. Oracle has already lost regardless of how the patent suit goes, a lot of people are feeling the Java community altogether threatened and Oracle will bear the hate for it.
not going to happen
I thought everything was finally released as GPL just before Oracle acquired Sun, making OpenJDK pretty much complete. Is there something missing still? 
m$ oracle deal: oracle kills java in exchange m$ kills sqlserver. 
It's true that the actual source code for Java is open and available for people to view (it is, however, not easy to find on Oracle's website) and that most of it is under the GPL (there are a few exceptions). Due to its corporate ownership and the looming threat of patent litigation, like what Oracle is currently doing to Google, many do not consider Java to be truly free. Truly open/free programming languages, such as Python, are often governed by a nonprofit organization, such as the Python Software Foundation, which drive the advancement of the language as opposed to having a corporation call all the shots. What is being advocated here is a Java Foundation which Oracle (and Google, and anybody who wants to participate) is welcome to sponsor, but not directly control. In this way it will be "freed" from its corporate owners and be delivered fully to the open source community.
It makes me hate Oracle (more).
Ehhh, I still prefer using [commons-exec](http://commons.apache.org/exec/) instead. You can set up watchdog timers and such.
Note that this method isn't very scalable, especially when you start getting more entities on the screen. You may eventually want some sort of broad-phase collision detection, such as only checking for intersections between pairs of objects in the same "zones", or maintaining an ordered list of points and eliminating impossible intersections based on X and Y values, etc.
[Java Sound](http://download.oracle.com/javase/tutorial/sound/index.html)? &gt; Suppose you're writing a sound-editing application that allows the user to load sound data from a file, display a corresponding waveform or spectrogram, edit the sound, play back the edited data, and save the result in a new file. Or perhaps your program will read the data stored in a file, apply some kind of signal processing (such as an algorithm that slows the sound down without changing its pitch), and then play the processed audio. In either case, you need to get access to the data contained in the audio file. Assuming that your program provides some means for the user to select or specify an input sound file, reading that file's audio data involves three steps[...] Pitch is tricky, particularly when you don't want to alter tempo. I mean, you could take the sound and just speed it up, but then the sound is also shorter.
install windows
Actually I have a VirtualBox VM on this machine But honestly that's really stupid to do that. 
You are using BusinessObjects within a OSX Server ???, have you tried make a report to SAP about the applet ? 
If it works the same as Linux :S, you should change or add environment variable PATH (JAVA_ HOME/bin) and JAVA_ HOME to the JDK of your choice .... in this case u14 ..... , 
the internet needs a sarcasm button
No, OSX client. The Server is Linux and the JRE is fine. It's just the applet that's fucking my life. I actually had to rip out the JRE and reinstall it from the DVD for Snow Leopard. I wish Java on OSX were as versatile as on Linux where you can install 10 different JVM's - it's really handy for testing. 
Yeah, except sadly it doesn't... OSX rolls its own JRE, and they upgrade. So what I ended up doing was removing JRE from OSX and reinstalling the oldest version I could from the Snow Leopard DVD. Still crappy though - JRE on Windows and Linux lets you have as many installed versions as you like and you decide which one to use. It's fantastic for testing. 
Run java with initials.Initials, not initials.Main. It's also possible NetBeans wants you to define a class named Main. java -cp . will set the current directory to your classpath. It will then search for classes containing the main function. That's why it worked.
I'm not familiar with NetBeans but there's probably a property somewhere that you have to set which defines what the main class is. If you didn't set it, NetBeans may be defaulting to Main. Alternatively, rename the class Initials to Main and it should run fine.
&gt; It only works if I use java -cp . classname but it should work just by typing java classname. You still have to set your class path for Java to run it. It's the same error because the VM can't find the class file it's being told to run.
Happy to help! Glad you got it sorted out.
In Netbeans right click on the project and go to Properties --&gt; Run and define the Main Class. Then you will be able to run with F6.
Getting keyboard input in graphics and video game programs.
i thought the patents in question are based on VM technology. which may also apply to many more areas than just the JVM.
Java: it's not dead; it just smells that way. 
Using the builder pattern as described gets messy(er) when inheritance is involved. So if for the sake of argument you had a class that inherits from the Address class in the article that you also want to be immutable, how do you handle that? 
The number of articles about java not being dead makes me really suspicious.
http://developer.android.com/guide/index.html Straight from the horses mouth.
Need to define what you mean by "Java" Java the VM / 3rd party library and server support are still awesome. Java the language is a bit stagnant though. Luckily there are many languages to choose from targeting the VM. 
Ironically, I never suspected java might be dead until the whole oracle vs google fiasco. It reminded me that what I like is google app engine, and android. Not the pseudo-java used within them. 
Microsoft is dead. Google is dead. Java is dead. ...oh wait, they aren't dead but in fact the most popular in their genres.
That's a guide for people who know java to program on the android. Thanks for the effort though :)
Paul is dead.
Alternatively, you can use [Java Web Start](http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136112.html).
Just change JFrame to JApplet and you should then be able embed it into a webpage as a Java Applet.
Also, be sure to utilize init(), start() &amp; stop(); especially if you're doing animation.
You can also check the documentation around Java 6 for the new support for having a kind of WebStart/Applet all in one. I haven't tried it. But it would means that the user can access the app as an applet in the browser, and drag it as an application. http://java.sun.com/developer/technicalArticles/javase/6u10_applets/
Are you using an IDE Like Netbeans or Eclipse? They *REALLY* help getting things like this done.
A full featured clojure dev environment, there's a bunch of people that want it [original blog post](http://cemerick.com/ideal-clojure-development-environment/) [spreadsheet data for people who sign to this petition](http://spreadsheets.google.com/ccc?key=0AqULylOQcEq1dHVEYUg3V3dMZjc0VDdNUFhWMGJ2bmc&amp;hl=en&amp;authkey=CMuDrZIN) some money to be made, and it can (should?) be built upon an existing IDE lke eclipse or netbeans for the heavy lifting and java support
A really great JSTL/JSP editor plugin for eclipse.
Gosh, that seems like a crowded market. There's no good J2EE tools for eclipse?
have you tried MyEclipse? its not bad.. but its not great. 
inn-teh-resting...
Tools yes, but at this point I doubt I'll ever use non-open-source libraries again.
There are plenty of tools, but as to whether or not they are "good", is another matter. With the multiple tools I end up using, for the handful of frameworks, etc, it all gives the impression of something held together by duct tape. Yet it somehow works...after a while :P
Right. But to go back on topic, I just think it is a crowded area (j2ee plugins) if you want to make some cash. I'd think you'd have to provide something unique. 
fix the maven plugin for eclipse.
I would really like better syntax highlighting in gedit. But I doubt I'd pay money for it. And I have the feeling most people use a proper IDE instead of an editor... And also, that wouldn't really be a tool _in_ Java, it'd be a tool _for_ Java.
A tool that transforms all XML to JSON. And I mean all!
What's broken? And which Maven plugin are talking about? I use m2eclipse with no issues.
I think the market for building/monitoring/profiling/debugging single processes is overcrowded, esp. with very good open source and other inexpensive tools. Do not expect to make any money on that count. OTOH, the market for building, monitoring, profiling **distributed systems** on the cloud is huge; the market is underserved, and the money is there. Considering that a lot of such systems are Java-based (Hadoop, Cassandra, Infinispan, Voldemort, JEE systems etc), there's much scope. 
A *good* java compiler (that compiles to native code, not byte code).
Show me a good one....
I just get rid of maven.
you are in the wrong forum. Talk to the GNU GCJ guys.
Wow that's a vague challenge. Good at what? I have no idea what you'd consider "good". Maybe you're new and want a lot of bells and whistles. Maybe you're experienced and want the basics without bloat. Is it really that controversial that I suggested that the J2ee plugin market is crowded? Sheesh. 
...show me a good jsp/jstl editor is a vague challenge? I'm not the only one clamoring for one: http://stackoverflow.com/questions/54868/what-is-the-best-html-editor-for-eclipse The vanilla one that comes with WTP is awful it does things like slowing down to interpret everything after an open quote as an attribute, has no quick WYSIWYG preview. 
It is vague. The thread is about someone wanting to make a commercial tool and you're complaining some of the features of a free tool (WTP). It's been many years since I did traditional J2EE development but even five years ago MyEclipse seemed to provide a pretty rich stack for dev for not much cash (I think we paid $25). Now, again, I'm sure you may find limitations there too but that hardly goes against my original point: that there seems to be many choices in this arena free and paid so trying to make a buck with a new product seems like a bad decision. In short I wouldn't spend my time trying to develop a better JSP editing mousetrap if I was @46inchLCD because there is too much competition.
You shouldn't need to alter tempo to change pitch, just change the frequency of the sound. Follow the noise: http://www.jsresources.org/
Myeclipse is pretty good, but be advised that the WYSIWIG JSP editor is non-functional on Linux. 
Hmm ... I can actually build that. How much do you think you would pay for such a product?
If you don't want "all of that crap" perhaps you should try a different language; although I am not sure that will help you. Programming is a very conceptual thing were you need to learn "all of that crap" in order to do much of anything properly.
Trying to learn Java without understanding OOP might not be such a great idea. Java and OO go hand in hand. But if you're trying to just learn how to do "stuff" in Java, I would recommend you look for some Basic Binary Tree examples/tutorials. Learning to write your own binary tree teaches: * Recursion * Searching * How an object can hold other objects A quick google showed some examples that not exactly newbie friendly. I'll see if I can write up a basic Template with messy and misspelled comments. In the mean time, read [this](http://download.oracle.com/javase/tutorial/java/nutsandbolts/variables.html "Get to know your data types"). But I do recommend at least checking out a book at a library.
Hi there, thanks, I actually checked out the Oracle tutorials yesterday. They are informative, but I'm still just looking for simple tutorials.
[Rosetta code](http://rosettacode.org/wiki/Java) has a list of how to do just about every simple task in Java (and almost every other language out there, for that matter). 
Hi, Its not that I don't want to learn "all that crap". Its that I don't want to learn it right now. I can't learn it right now because its overwhelming. Its simply too frustrating to spend all that time reading and trying to understand, and not be able to produce anything by the end of it. I do not learn and cannot enjoy programming through that style of education. Perhaps others can, but not me. I want to have fun learning, and to me, thats following simple tutorials and making simple things. Small victories that encourage me to do and learn more, bit by bit. I hope you understand. Thanks
This may take a few hours. In the mean time, do some homework. Google the Scanner class and learn how to use it. It will be your friend for receiving basic input text from the console. Then make a basic program that says "Hello, *your name*"
I have always found the tutorials on the main Java website to be very well done. I pointed you to the "new to java" link: http://www.oracle.com/technetwork/topics/newtojava/new2java-141543.html
If you want to quickly make a program with a GUI you could try using Netbeans, it has a nice drag &amp; drop system. Just explore and search for tutorials on how to make a Netbeans program. When you are eventually able to read java code easily, you should have an easier time with the tutorials. All that stuff is pretty useful and important so don't ignore it.
Do you like games? Probably your best bet is to find a simple open-source game written in Java and start messing around with it. First, add some extra lives. Then change the colors and sound effects. Pretty soon you'll be learning all sorts of stuff just to add a cool new feature. Here's a few that passed through reddit/java, also [Freshmeat.net](http://freshmeat.net) is a good place to start: [Space Invaders](http://www.cokeandcode.com/info/tut2d.html) [Simple Collisions](http://beginwithjava.blogspot.com/2010/08/stopping-jonathan-livingston-seagull.html) [More Collisions](http://beginwithjava.blogspot.com/2010/08/more-collision-detection-bouncing-right.html) 
Maybe try VisualBasic, RealBasic, Filemaker or something else visual where you can just drag and drop buttons etc. But if you want my opinion just tough it out and maybe you will find this _boring stuff_ interesting once you know it.
Visual learner? I would recommend "Head First Java". Might look silly at first, but it's a good way to learn "all that crap" in a not too complicated way. Does IMHO not work without actually programming stuff, thats how you'll learn the most. 
Java is not a good language to just get things done in.
My advice is to try another language besides Java. I'm trying to learn Java right now in my computer science class and I just cannot wrap my head around some things. Too many things just don't make sense, and the explanations seem to be targeted towards people who already know the terminology, not beginners like me. I've tried python before and everything makes much more sense in that language. After getting one language under your belt, tackling Java will be much easier.
If you are new to programming, Java is probably not the right language. It takes too much work to see any results and that will demotivate you. Learn programming from something like REAL Studio (REALbasic). You'll be more motivated and you will learn object-oriented programming. Then once you are comfortable with OOP, you can go back to learn Java and you'll probably find it very straight forward.
[Main.java](http://pastebin.com/Za9xWTsk) [Node.java](http://pastebin.com/8GJEWdhe) [BinaryTree.java](http://pastebin.com/jV3C9Qpn) There's a lot of reading there and you're going to have a crash course on recursion. Sorry for the many grammatical and fractured sentences you'll encounter. Feel free to PM if you have questions. 
Can't learn it? Just read it and practice it until you understand it. If you aren't willing to learn some very basics such as classes than how do you expect to do anything? All of java is based upon the concept of classes. If you don't master the basics concepts, you'll never "build" anything. However, to get started, I would recommend http://www.brackeen.com/javagamebook/ It's teaches you how to program a game in java. Every step of the game from drawing and transforming sprites, tilemaps, etc.
There are a lot of great "recipe" books out there. Just look for that. 
pretty much what everyone else is saying - if you want something quick and dirty java is probably not the language for you. there are a lot of languages out there with a quick start up time, large communities, and tons of samples - my recommendation is go to php
javablackbelt.com , no videos , but a good site... Always find a reference or a book, videos doesn't work for that kind of stuff... 
I've read a million books. I'm tired of reading books. I've found that I absorb much better through a combination of listening/"participating". I get OO-programming (at least mostly. Java sure forces this shit down your throat though) but there are a lot of generic things about the language that are much better suited to video than a reference book. If I look at a reference book right now I don't know how to piece together what goes where. Once I'm more familiar with java, that changes, but I'm coming from python where all the abstractions are done for me; it's a harsh jump. Thank you for the site though; it does look promising. I just have a lot of broken-up time and reading is practically off the table when you have a 2 year old running around. =(
I wouldn't call it extremely functional in windows either. :)
Second this. The "Head First" books are great for visual/active learners.
Java's GUI stuff sucks on my laptop because it's slow. It's not so slow on my desktop (due to my desktop being far faster, I suppose), and the command-line stuff rarely sucks.
What is the speed of your desktop? I run two instances of RAD (IBM Eclipse), Eclipse. VMWare with Eclipse running and other software tools and never see any slow down. At the same time. 2cpu 1.86gighz intel/hp machine with 4gigs of ram. Are you talking about startup time? Which GUI? There are startup hits with Java because there are so many libraries to load. But yea, your case is valid. Java has a niche in the server application world, but I bet a lot of developers wouldn't consider Java for desktop apps. Even though I run a couple of Java IDEs. I could run an infinite number of Emacs instances without a problem.
Java sucks, apple is evil.
Reddit relies on Java. See Apache Cassandra. You can't bash the system that allows you to make your comment.
Thanks for this post.I agree with you Java is a great language . my only gripe is that when your learning programming, Java hide all the details from the programmer. Which is OK at the beginning but at certain point a well rounded programmer should learn c/c++.
About 9? years ago, there was this mapping library that only worked with Java, so I reluctantly did way more coding in Java for a job. All of the complex components (E.g. Do I need J2EE? JMS? JRE?) were an issue and raw/computer power speed was an issue for me. I wanted to write games professionally but that never panned out. gcc was and is pretty common. "gcc file.c" worked on most systems and code ran fast. But, the world moved towards the server environment. Running Java apps with a 100-200 ms request time was that bad I guess.
Cassandra is awesome. Isn't that whats been freakin them fellows out over at the Digg office?
What I can tell you is that I went from Smalltalk to Java, and it has never been possible (for me) to achieve the same coding speed or expressiveness, or the same feeling of flow, in any Java IDE. I think there are other languages that could give you that feeling - mainly expressive languages with one clear idea at the bottom. Lisp. Forth, Haskell, Smalltalk. For some of these, the text editor is the only IDE you need. But Java: too big, too bloated, too much notation, too little expression power per screenful. Always some little nagging voice saying that this is Boolean and not boolean, boolean is not an Object, you can't compare these two things, you can't cast between these generics, remember your public static void xxx, make a GeneratorFactoryFactoryFactory because you can't reuse the GeneratorFactoryFactory the way you intended... But, I know, Java has the libraries.
Look into Bistro (abandoned I think). YMMV. DigiTalk SmallTalk was the shizznit in the day. I just don't dig pink and yellow IDE windows nowadays. If you know a bit of Scala, look up the GenericFactoryTemplate objects associated with the collections in 2.8. Source code links from the API pages. Scala has also turfed int for Int boolean for Boolean, etc. Generics in Scala are now real fuzzy things from Alpha Centauri due to to GFTs.
&gt; too much notation ((((you prefer ((lisp) over java)) because of ((too) much) notation)))?
"But, I know, Java has the libraries" Yea, but those libraries...were written in Java. For whatever reason, that environment gave them the ability to create those systems. E.g. gmail or walmart.com I have yet to use a smalltalk application or library. Actually, I did launch squeak once. I see your point. So, some people won't sacrifice on the expressiveness or performance. Interesting. General question: with squeak and other small talks, why is the interface so integrated into the language. Is that a good thing?
I never got to the (supposed) stage where the parentheses fade away, leaving the pure mathematical beauty behind...
I don't think I mentioned performance - but I do love expressiveness. Smalltalk doesn't have strong typing, or notation to force methods to stay close to class declarations (like within packages). The whole IDE is also written in Smalltalk, so you can extend to create your own browsers etc. All the code definitions are objects too, and the classes are objects.... This means that usually the whole code base is loaded in the form of an image - a live snapshot of all the objects. Building an application is (was?) more often performed by stripping down an image rather than building up packages.
The whole point of the OP's post is that Java isn't an especially great language - it's a great environment. Methods should be objects, primitives should be objects, mutability was a bad default, etc etc there are many more fundamental problems. This is what makes the JVM so rescueable - it's possible to switch language and keep most of the benefits.
Or as it would appear in Java when you are 25 % done: public static Person you = PersonFactory.getPersonFromCurrentContext(); private Preference&lt;ProgrammingLanguage&gt; prefer= new Preference&lt;ProgrammingLanguage&gt; (); private ProgrammingLanguage lisp; PreferenceComparator over; private ProgrammingLanguage java; shared CausativeIntro because; shared CausativeOutro of; public static Comparative&lt;Amount&gt; too; public staticAmount&lt;Concept&gt; much; private AbstractConcept notation; you.prefer(lisp.over(java)).because().of().(too(much(notation)))); Note that the JavaDoc, the getters, setters, calls to Runnable, generics, generics extends/implements and the casts are still missing.
Spot on!
 Read The Perils of JavaSchools by Joel Spolsky http://www.joelonsoftware.com/articles/ThePerilsofJavaSchools.html 
&gt; The whole IDE is also written in Smalltalk Most Java IDE:s ar written in Java. 
Java definitely feels slow, because big Java apps (like Eclipse) can take over a minute to launch. That is what people don't like about Java. I like to program in Java, it's a nice language, especially since version 1.5 which improved the for loops with collections, but I only use it for small apps where start up time will be fast enough. And it's definitely awful on embedded systems, my digital recorder uses Java and is really slow at times. I don't think I'll learn J2ME. Not all the libraries are that great, e.g. some String methods have case insensitive versions while others don't forcing me to write them myself, FTP with a UrlConnection often doesn't work because they chose to implement a different standard (and not a word about that in the docs)... These things hit me shortly after I picked up Java, so I don't feel too confident about the libraries. 
Eclipse does not take a minute to launch. You can download it now it tell me how long it takes. Eclipse can take a minute to launch on even the fastest machines if you have dozens of million line projects. That will happen with Visual Studio or any other IDE (non Java)
Ironically, Eclipse IDE is based on the Smalltalk version. Visual Age Smalltalk?
"FTP with a UrlConnection" Different standard of what? TCP/IP? UrlConnection is for HTTP communication.
Not even a little. I love me some Java, but it is not the fastest evolving language in the world. IIRC Thinking in Java 4th ed is based on Java 5, so you can go look at the new stuff in java 6, but there probably wont be many differences you'll be interested in unless you're doing enterprise-y stuff with XML and annotations and all that junk. Its a good book, a couple years won't change that ;)
Effective Java is a good read.
Sorry, but not learning the basics makes sloppy programmers; and the world has enough of them already. Java really makes it really easy to start using OOP without much fuss, which makes it ideal for learning the concepts. Without the basics, you might as well use something like basic for hacking together programs that just do stuff. Just thank your lucky stars you are not learning something like C++ where you actually have to clean up after yourself. 
All the reasons you mention are important from the standpoint of using Java professionally. If you're expecting Java to light your passions though, like perhaps Smalltalk once did, then I think you should look elsewhere. But what else is there to say here? Your list above seems geared towards justifying using Java. Why? It pays the bills, isn't that enough for you? Is there something missing in the Java platform that you're secretly pining for? Java's not the hot new cool thing and hasn't been for some time, and probably won't ever again without some seriously fresh design direction from the likes of Oracle, Google, or IBM.
I like Java overall, and you've hit a lot of the points I would think of. Eclipse can be slow to start up, but so are Visual Studio and SQL Server Management Studio on the same hardware. For my uses (web app hosted on Tomcat), Java is plenty fast; my bottlenecks are bandwidth, database contention (from other apps using the same DB), and client speed (the app is JavaScript-heavy and we're locked into IE6 for about 8 more months). When I run my app hosted locally, with a fast browser, it's faster than I would expect it to be, and that's on lower-spec hardware than the actual server it's running on and more other stuff running in the background. On the negative side (for me): * Java seems to invite people to (or invite people who have a tendency to) over-engineer. Layers upon layers of frameworks, design patterns, abstractions, etc. Back in '01 or so I took a class through work on building Java web apps with EJBs. The amount of scaffolding you have to put up and the number of classes that get created just to pull up a simple address book entry from a database &amp; put it on a web page was ridiculous. Sometimes I just want to **get stuff done** - don't make me jump through hoops. * Working with dates using the standard Java API (I've only used them in 1.4/1.5) is a pain in the ass. Unless there's another date-related area of the API I haven't discovered. Yes, I probably should be looking at what Apache Commons has available to make my life easier. * Not all libraries are easy to get up &amp; running with. I recently had to update a Java web app from a ridiculously old version of Microsoft's JDBC drivers to the current release. The instructions for installing them didn't match how we had the JARs deployed in our environment, and had no instructions on performing an upgrade/ Did we have it set up "wrong" before? I don't know. The documentation on how to update your code (if any was needed) was also lacking. Ultimately I discovered, through trial and error, that it was pretty much a drop-in replacement and all I had to do was change a classname in my config files &amp; tweak the connectionstrings, but all the documentation was written as though I was building a whole database access layer from the ground up. * And piggybacking on that, MS ships different versions of the JDBC libraries, one for Java 1.5 &amp; one for 1.6, in the same distribution. You then have to choose which of the 2 JAR files to copy into your environment, and the names don't make it abundantly obvious - you *have* to read the whole INSTALL file to know for sure what to use.
Just want to add that the pay is good. Here is an example email that I get quite often: &gt;Referred to you for Java &amp; Hibernate work. I tried to reach you by phone but the number wasn't working. We're looking for a Hibernate expert and was wondering if you know a top notch Hibernate person who has migrated from Hibernate 2.x to 3.x? We need someone who has strong Domain Driven design skills and can educate our client's existing resources on the advanced capabilities of 3.1 and 3.1.1. We can keep this person busy for at least 12 months and the rate is around $100-110/hr Corp-to-Corp. &gt;I'm also looking for strong Java Architects for 9-12 months consulting assignments. &gt;Both positions are located in metro New York . Do you know anyone? &gt;Please let me know. Thanks.
I personally dislike the "over-patternization" that a lot of Java libraries seem to have. You first have to create a factory, instantiate it and do all sorts of mumbo jumbo to do something simple. I get that this is supposed to help people fine-tune aspects of their code, but I think the interfaces that Python, Ruby or Perl libraries provide are way better suited to my taste. Another thing that annoys me is the lack of a proper package management for Java. You always have to copy a shitload of jar files somewhere and without Eclipse, launching that project is a nightmare. Ruby has "gem", Python has "pip" and installing new libraries is a delight. My last problem is, that it's hard to actually do a "small" java project without using a large IDE (classpath hell). I know that using an IDE is cool, but I'm perfectly happy using a enhanced text-editor like textmate...
&gt; Internalization This is why people usually just write i18n.
I write i2n, because there are 2 letters between i and n in i18n.
You mean i0n, right?
So exactly what features would be included in this "reduced Java 7" if plan b was followed?
I mentioned several hot new technologies that operate on the Java platform. JRuby, Scala, Clojure, Hadoop, Lucene, Solr, Terracotta, GWT, Google AppEngine, Android.
Sorry, I w3e i2n b5e t3e a1e 2 l5s b5n i a1d n i0n i18n.
Well, Java has maven. That solves a lot of the problems you mentioned.
This might be a bad example, but I've been using Maven for a while now. It's a steep learning curve, but the benefits are worth it.
No, you see, there are zero *letters* between i and n in i18n, but there are two *digits*. Not the same thing at all...
O0h, m0y b1d.
Great example. Maybe the better word is 'boilerplate'. It requires a metric ton of boilerplate to get anything simple done with Java. It seems like static typing and a lack of syntactic sugar around repetitive code patterns seem to be worth of blame here IMO.
Just use a color theme that turns the parens gray. It's stupid simple, but it makes focusing on the code much simpler.
Maven can be a big help, but we found it to be a nightmare to configure for repeatable builds. There's just a little too much magic going on in there for that purpose. It's a nice way to bootstrap a project though.
Good to know that I'm not missing much. It's non-functional in the sense that it isn't even there.
True. But I was talked about Java itself, not things that are built with Java. I personally would like to see folks get excited about the language itself again, and that will require some bold strides.
http://openjdk.java.net/projects/jdk7/features/ minus lambda,jigsaw, coins
Wow if that's all that's wrong with Java you can think of, I think it's doing pretty well. * I've seen over engineering in many languages * It's not that hard to write your own date classes. * In contrast, is every library easy to get up and running with in every programming language? * Yeah it sucks reading installation documentation.
Do the practice problems at [Codingbat](http://codingbat.com/) online. That should jog your memory a bit. Afterwards, work on a few large-fun projects that fit your interest. Programming is like math or learning how to drive. Hands-On practice works better that reading any manual. 
&gt;Wow if that's all that's wrong with Java you can think of, I think it's doing pretty well. No, it's just the things that have annoyed me enough that I remembered quickly and have been timesinks. &gt;I've seen over engineering in many languages Didn't say that I haven't either. It just seems that it's accepted, encouraged and admired in the Java world. &gt;It's not that hard to write your own date classes. But I shouldn't have to. Dates aren't exactly esoteric data types - why are they difficult to work with in plain Java? Last 2 - my point was that MS seemed to make it confusing intentionally. There was no upgrade documentation for people who just needed to drop in the new version &amp; tweak what needed to be tweaked.
Actually 3 of your examples use generics. Generic inheritance is awesome when you know how to use it. "you.prefer(lisp.over(java)).because().of().(too(much(notation))));" is just bad programming. You shouldn't nest so many method calls onto one statement, it makes things unreadable. Your overuse of statics is bad programming. There is no such keyword as "shared". You fail.
Eclipse starts in less than 5 seconds on my Mac Pro (8 core, 2.8 GHz, 32 GB of RAM). Even on my little 13'' macbook with only 4 GB of RAM and 2.0 core 2 duo CPU it starts in comparable time. Photoshop CS4 starts in 3 seconds. So Eclipse is not really much worse. Eclipse does open my workspace and restore a dozen of files in editors (with VI plugin) and at least 4 views etc.
Actually, writing your own date and time classes with same functionality that Java's date and time have (with timezone support etc) is a major project on its own and you are very likely to get it wrong. Letting users enter date in their native format in say Japan while your server sits in North America and is connected to SQL database with different collation and time zone is a something that is routinely done in Java, but doing that yourself correctly would take quite a bit of time.
Apparently, in the heat of the debate, somebody asked for an example of a whole application written in Smalltalk. The answer given was Visual Age for Java. (apparently that was the case at that time)
But you do not see the code in the repository, you don't get to raise an inspector over the instances that make up you browser, you don't get to add methods/instance vars to their classes and have your change running in the live image within a second.
I suppose I meant protected rather than shared. My nesting of parentheses is no worse than yours (in supposed lisp). And I suppose generics, with inheritance, covariance etc is awesome, but it brings a lot of notation with it. Actually, Java could look a lot nicer if you could have (separate) type annotations and type inference, like in Haskell.
&gt; Sometimes I just want to *get stuff done* We here in enterprise land prefer the stuff not only to be done, but to keep on doing in the future. We need to be able to change and/or refactor things without breaking them. I'm not even sure boiler-plate and bad code are the main reasons of Java or J2EE bashing -- often it seems just to be people who have no idea what it is like to create and work with software that is not throw-away code, who never worked on a real project before. (I keep hearing good things about [joda time](http://joda-time.sourceforge.net/) )
Interfaces help nothing when you just invoke a constructor of some implementation deep in your code. If later you require that constructing said object needs to change and you now need two more dependencies, you have a problem, you suddenly need to carry those dependencies through all layers or you create some stupid static factory -- or you just use a factory in the first place, when it only costs you a dozen key strokes. 
That's what I mean. Java related software always seems to go into an enterprise-rage of a gazillion features behind complicated interfaces... If I want to install an xml parser in Ruby, I just look for one, find out that it's called "hpricot" or "nokogiri" and then do: "gem install hpricot" That's all there is to it. No maven learning, no xml files or copying jar files.
From [this comment](http://blogs.sun.com/mr/entry/rethinking_jdk7#comment-1283966434000): - invokedynamic and method handles for other language support - nio.2 (asynchronous I/O and much better file/directory support) - parallel classloading - from Project Coin: - 6860965: Support for binary literals (e.g. 2 can be written 0b10) - 6860965: Support for underscored literals (e.g. 123456 can be written 123_456) - 6827009: Support for strings in switch statements (e.g. case "a") - 6840638: Improved inferencing with generics, e.g. Map&lt;String,Integer&gt; map = new HashMap&lt;&gt;(); - jsr166y from http://gee.cs.oswego.edu/dl/concurrency-interest/ - 6865571: Add a lightweight task framework known as ForkJoin - 6445158: Phaser - an improved CyclicBarrier - 6865579: Add TransferQueue/LinkedTransferQueue
Heloo, You make many good points about Java and I would just like to suggest some corollarries to your points. Because of Java's ubiquity, Java programmers are a commodity, easy to replace. This is a market incentive driving down wages and making it difficult for employers to discern the talented from the not so talented. Any language is subject to this scenario, but only a few have realized it. I've seen it time and time again if you post for a position with Java and a certain library, you get a slew of resumes that are indistinguishable. With the plethora of libraries out there, it is often difficult to discern which one matches your usecase, or if it does at all. Though not Java's fault per se, it does mean people will spend an inordinate amount of time trying to figure out a tool set rather than solving a problem. In a smaller market language there are usually fewer choices and a smaller community that can help make force a decision quicker and solve problems quicker. Some of the tools are quite complex and are often way overboard for the business requirements (a simple web app in a Spring environment). It's not that you can't use established tool sets to do the job, its that they are a lot of overhead for basic functionality. If a tool has been generalized to handle a wide swath of use cases, there is a god deal of overhead to that flexibility (some combination of programmatic, configuration, or cognitive). I think the sentiment behind your post is an important one, in that the Java infrastructure is more than the Java Language and that is why the flourishing of Clojure, Scala, Jruby and Jython are all great enterprises. The fact that these projects can utilize the great features of their base languages and integrate with the Java infrastructure makes them hugely appealing. If they allow programmers to work more efficiently while not having to reinvent the wheel in certain areas, they really can offer a Pareto Optimum
That's funny.
That's funny too.
The best core Java book out there. A must-read book.
There is no best book for the basics--only good books. It all depends on your style of learning. I learned with the on-line Java tutorials ("trails") at http://download.oracle.com/javase/tutorial/. If books are your bag, then just pick a highly-rated one (Amazon.com rating) and roll with it. Code a lot! I did a lot of coding. I coded everything I could: examples, tutorials, programs already written just to see if I could do it, etc. Code while reading your books, blog articles, etc. I referred to a lot of on-line resources: tutorials, blog articles, etc. Those people are experienced, expert-level, and/or professional. Learn from them. Code while reading. &lt;-- I cannot emphasize this enough. After eight years of professional Java experience (I am a Java contractor/consultant), there are **awesome books** when you get past the basics level: * "Effective Java" by Joshua Bloch * "Refactoring" by Martin Fowler * "Design Patterns" by Erich Gamma et al. * "Code Complete" by Steve McConnell * "The Pragmatic Programmer: From Journeyman to Master" by Andrew Hunt Read the above list after you are comfortable with the basics of Java, and you can write code without referring to docs. (Also learn how to write code without an IDE.) Check out http://www.blackbeltfactory.com/ to test your current knowledge of Java. Keep taking exams until you get a black belt. The exams are free. Remember: read and code. 
And provides a whole new set right out of the box.
I prefer Ivy for that stuff, myself. Can't stand Maven.
See, back in the 90's, Java had this thing called the System Classpath. It was sort of like that. You needed something, you put the jar in the right directory, voila, it was available. There could have been an app called "gem" or "jar-get" or whatever to do that for you, but it never got that far because it was quickly realized this was a bad idea. Instead, apps define their own classpath and location of jars they use, so as to avoid versioning hell. Yes, it means there's multiple copies of jars on your hard-drive - turns out to be less of a problem than versioning hell. I'm surprised Ruby hasn't yet discovered this.
I only care about one thing: IDE support. I've done a fair amount of javascript programming, and all I can say is - typo hell. I have to run my app to discover I mistyped something? Fuck that. Also, when I'm studying someone else's Java code in Eclipse, I have these two little tools - F3, which jumps me to where the thing I'm currently looking at is defined, and CTRL-SHIFT-G, which tells me all the code that uses the thing I'm looking at. Also useful is F4, which will show me the inheritance tree of any class, and CTRL-T, which will show me all the classes that override the method I'm looking at. These and numerous other tools make understanding Java code I've never seen before relatively easy, whether it's a project of 100 lines, or 1 million lines. You could have this in other statically typed languages, like Haskell and OCaml and Scala, but we don't, because they are not popular enough to get the kind of open-source support Java does. You could *maybe* get this in dynamic languages, but you don't, probably because it isn't practical. I would so learn and use Haskell if it had a great IDE.
My employer would probably pay for that, if it could build Windows, Linux, and Mac installer from the same codebase. Probably would pay several $100.
Ah yeah there is something like that in the Ruby world which has taken hold in the past year. It's called Bundler ( http://github.com/carlhuda/bundler ) and basically does the same thing as maven for managing dependencies. Can specify specific versions for an app, and it'll bundler them in a place specific to each app without using whatever is installed by default on the system.
Cool, good to know!
Thanks. Curious, what kind of app is it? A desktop app (Swing/SWT) or a web app with a bundled server (Tomcat/Jetty)?
Desktop Swing, scientific computational research app, so also has a bunch of native C++ code too that comes along as static libraries called via JNI.
If you want a specific version of your gem you can either: - require it like this: gem 'rspec', '=1.1.12' - unpack the gem (gem unpack) to a folder in your project and require it directly
Thanks. I have a lot of experience with Swing-based desktop applications for Windows, Linux, and Mac, so your product idea is right up my alley. The problem I have is desktop application development in general, and in Java specifically, appears to be a dying art. Even if I had the product ready to ship, the market is probably small and getting smaller. Unless I could sell it for $1000 a pop, it probably wouldn't be worth my investment. But I will consider it, because it's a good idea. Just maybe not a profitable one.
Yes, but now we're getting more complicated, which was the original complaint. We do the same things in javaland.
It's not an empty field either. Looks we're going to try BitRock's InstallBuilder. The problem with developing tools for money is that it's a time-limited thing. As soon as you build an awesome IDE environment for Scala or Haskell (things I would like personally), you get maybe 1-2 years and then open-source catches up. It really seems like you have to go after the enterprise folks, mostly because they seem willing to spend gobs of money on silly things, such as issue tracking, UI automated testing software (which, if you could do it well, is worth every penny. Problem is, the standard approaches of A) scripting and B) screen grabbing are just rife with problems), static code analysis, etc. These are things I personally wouldn't pay a penny for, but managers love them, probably because it makes them feel like they have input into code production.
Check out the Head First Java book, as others have mentioned. What I didn't see mentioned is that you can get the 2nd Edition free. Since the basics don't change much, even the earlier edition will still be very useful. http://books.sharedaa.com/2008/01/head-first-java-full-book-free-download.html Also good is one called "Thinking In Java". The 3rd Edition is also a free book. http://www.mindviewinc.com/downloads/TIJ-3rd-edition4.0.zip I didn't care for HFJ as much as TIJ. HFJ is trying to put the matter in entertainment tones. TIJ takes a direct, practical and thorough examination of it. I came to OO from Procedural, so I tended towards TIJ... EDIT: BTW - Kudos to you for wanting to start with simple, straight-forward (ie, useful) apps. By now, when I have to learn a new language for a new project (or employer) I hate looking for guidance and seeing endless lists of "Hello World" programs. I don't want my first prog to be a Hello World! My first java project was a scanner that directly manipulated individual pages from multi-page TIFF images, searching for barcodes in the image, extracting the code, and splitting the pages into individual documents, converting them into a single PDF document and routing them into a document storage system. Your best resource is not really going to be books, or even full tutorials. Take a very step-by-step google approach. So, instead of googling for "java tutorial", google for "java get substring", "java list files", "java gui form", "java open file exlusive", etc etc. As long as you know what you want to do **next**, you simply need to solve **that** step. Google will get you there, step by step. I started with (as I bet a LOT of beginners begin) with **"dynamic x cannot be accessed from static context".** That one gave me fits, but it is a GOOD reason why you DO need to understand "theory". OO is a fundamentally different way of thinking about programming. Eventually, my steps led to "*java Graphics2d Affine Transformations"*. Have fun. 
I still can install basically anything with 1 command :)
I use java as the central topic on my internet famewar. www.reddit.com
I see two commands - a download command and then an unpack command. 
the one with "install" actually installs it...
If you have ever used a maven project with another IDE (Netbeans, Idea) and compared, you will know exactly what I mean.
Wish I had the luxury. It is what we are migrating to at work.
So nothing is broken? Thanks.
If you like webapplications you should give a try to [playframework!](http://www.playframework.org/) It's a nice standalone framework + server that gave me quick results when i started learning Java.
I find that most of the time when people are bashing Java, they're bashing the language. However, Java the platform is hard to beat. The JVM is a work of art and has been production tested with probably millions of man/machine hours. Java the language is a beast though. I only use it for routines where performance is key: classes that are used in long calculating loops. It's to the point where it should almost be entirely deprecated in favor of something more modern. I hope Java 7 (or 8, depending on how the Oracle release schedule goes) gets it right when it comes to allowing alternative JVM languages (Groovy, scala, jruby, etc.) to get better performance. Like .NET, the particular language kind of is a wash: use what you want and mix and match. I've found a mix of Groovy/Java can be extremely powerful for the server-side work I do. The UI stuff is a wash. The best Java UI apps are IDEs. Almost nobody uses Java for the UI. I blame Sun for dropping the ball time and time again on promoting Java as a UI (and Web 2.0) - capable language. Java had all the opportunity to be the "Flash" of the web but they just let it go.
That's the way Amazon's AWS library does it. Reasonably sophisticated way of constructing an object. Other ideas: - Create an interface with only getters to be used in front of a POJO. - Constructor that takes a map of values (not very Java-y but works) - Constructor takes a helper object that is a POGO new Address(AddressProps props) 
They tried "again" with JavaFX. It isn't bad, it just didn't get the traction that Flash did. And I see some contradictions in your comments. You say the JVM is a work of art. but the language is a beast. The JVM and language are pretty meshed together. Even JVM languages like Scala have to generate Java bytecode. Some of the primitive elements and native calls from the Java language tie into the JVM. There are certainly aspects of the language that are questionable and many people find issue with but I wouldn't' call it a complete beast.
Last time I tried m2eclipse was not setting war projects as WTP projects. 
why do you need to learn c or c++ to be well rounded. you really just have to understand how memory works
I disagree (politely) that Java, the language, and bytecode/JVM are as meshed as your comment suggests. The bytecode language isn't, I believe, all that complex, which is why there are so many non-Java languages available for the JVM. Either a language helps its compiler (by being versbose) or helps the programmer (by being terse). For example, the atrocities of Generics and auto-boxing are entirely a compiler trick, not a change to the bytecode. You mentioned Scala. Where scala gets it right is that new features are added by libraries, not extending the language spec itself. I'm not trying to bash Java the language too harshly. It's highly usable but it is also ugly and verbose and only getting more bloated. They want to add closures to Java 7? Great, then deprecate some crap like the for/while/do while/and, Iterator, even newer for each loops. Closures make all of them obsolete, especially if they decided to make arrays a first-class function instead of a primitive. In fact, how about we get rid of primitives altogether in the language? Changing the main Java language to be more modern and concise would make it much more competitive and easier to learn/use. It would still be entirely compatible with existing libraries/code bases. Anyway, obviously I like and care enough about Java to be having this conversation :-). It's fun.
The java bytecode is simple. The language is simple. The compiler does a translation from the Java concepts, arrays, objects and so on into the Java bytecode format. The JVM was designed for the Java language. The whole concept of object creation, method invocation, arrays, interfaces, fields, methods are all embedded in the bytecode and must be handled accordingly. You don't have the same concept of "objects" in Haskell or Erlang. But you do have these concepts in the Java language and in the bytecode. You have these concepts in the JVM that interprets the bytecode. I am not a compiler/language design expert but I can say that there is a close mapping between the java language, the java bytecode, and the JVM. 
I'll agree there is a mapping. I just don't think it is so close that it impedes other languages to be targeted to the JVM. I'm not an expert in bytecode either but for proof I offer all the exceptional JVM languages. Besides even if the JVM favors OO languages over functional (I don't know) that takes nothing away from the argument that Java the language is showing it's age and should be cleaned up (or replaced).
Have you looked into [this](http://weblogs.java.net/blog/2006/11/15/sending-large-files-over-jms)?
thanks!!!!
JavaRanch.com is a good beginner's place. 
Thanks, that site is great and will be useful in the future
Some, more richfaces usage and have been pretty happy with richfaces where I had a need to just grab a component or abstract some ajax. ice, prime and richfaces are all pretty similar, but i am already rolling out on top of jboss 5 so the richfaces route made sense. you can certainly also use both richfaces and primefaces if one does something better than the other, and both work nicely with seam if you are looking for a fuller spring alternative. I tend to go the full pojo route for backing beans, as well as middleware and server side code, and avoid full frameworks unless they will actually make the job easier, frequently they just add extra weight.
I've not used PrimeFaces but we use Spring Webflow with Richfaces at work. The good thing about this is that webflow (kind of extended spring MVC with flow logic for maintaining state) does all the JSF integration for you. It works pretty well one the whole although personally I don't really like rich component libraries.
Not a troll, is there any reason to use JSF over a classic mvc framework? 
Thoughts: use some of the statistical software already out there, like matlab, R, etc.
I would personally hire a co-op student or something like that.
Post an ad in your local university's newspaper. Good CS students will jump at a chance like this.
Your post has been up on /r/java for an hour, so you probably have a thousand resumes already! ;]
I have a brand new one that I'm starting to work on. It's a Active Directory and database synchronization system which pulls data from databases or AD and provisions accounts in various other systems (school databases, Exchange, Google, etc.). I have a general layout, but it needs more refinement. The plan is for it to have a scripting-style environment that's completely customizable via edits to the actions. Each "action" (such as Create AD User) is a Java function that will be contained in a plugin directory. The actions can be created or modified by the end user. The whole system will be open source. [A placeholder is on SourceForge](http://sourceforge.net/p/issync/home/). I haven't uploaded the code yet, but I could get that up if people are interested. As for the perceived need, school districts, corporations, and government bodies all use some sort of provisioning system. Quest has something called Active Roles, Tools4Ever has another version. These companies make millions per year in developing provisioning scripts alone, not to mention the sales (which I'm not concerned about). Feel free to message me if you're interested.
(keanu) Whoah... (/keanu)
I can't speak for all of the other books mentioned so far, but I personally recommend the Head First series. They have books on multiple programming languages, including Java. The books cover a lot of basic material, but mix it up with various exercises and quizzes. It's not all just boring text, either; there's plenty of pictures and illustrated diagrams. The idea is to help shake things up and appeal to all sorts of different learning methods.
Have you looked at octave? Its semi-compatible with Matlab and free as in speech.
Post more detailed specs. This sounds easy enough that I'd do it for free (or, well, for reddit karma, anyway).
Your project sounds boring.
Maybe something like ANT would be a good one. Learn about build scripts for Java projects, will help you as a programmer, and it's probably a relatively simple project. http://ant.apache.org/
Pretty much any CS student should be able to do that, although they'll probably take a little longer than an actual day-to-day developer. 
Why java? 
Maybe you should put more specs up? How many hours are you wanting for the position? What's the pay like? Local or is telecommuting ok? Etc, etc...
I think another reason to use Java is that it is statically typed and lacking in language features that cause bizarre, difficult to debug behavior (e.g monkey-patching in Ruby, template meta-programming in C++, just about everything in Perl). What this does is it makes Java code very maintainable. I've worked on Java systems with 10 year old code bases that have been continually worked on by multiple people and these systems are still fairly easy to maintain and add features to. Java is annoyingly rigid for small systems but when you get past 100,000 lines of code and more than a few developers, that rigidity really starts to pay off in making maintenance and refactoring far less of a chore.
It doesn't sound too hard. Why not just do it yourself?
I looked at it years ago. The app is already built in Java however. If we rewrite it in a new language, I guarantee it will not be Octave or Matlab. It might be Qt/C++ or python or ... ? But this project is just to add new features to the existing Java app. Rewriting in a new language might come later.
I posted more detailed specs now. Thanks for the suggestion. If I don't find someone to do the project for me, another option would be to get someone to help me and tutor me and do it with me. I can write a lot of the code but I do not have any familiarity with the Java tables or Java charting components. In fact, I don't even know any of the Java libraries. (My experience is in C#.)
Thanks. I didn't know there was an existing app, and so when I said I'd do it for free, I thought I could just throw together some code, post it on a Reddit comment, and then be on my way. If I need to actually, you know, *spend time* working with you, then I'd want to get paid. In terms of free advice, I can tell you there's no built in charting components in Java, so you'd have to use a 3rd party library. For tables, there is some built in stuff (see http://download.oracle.com/javase/tutorial/uiswing/components/table.html). I can do it for you, but I probably won't be as cheap as a student you might hire. PM me if you're still interested. I can send you my resume, or we can just get "straight to business" with price/wage negotiation and SVN access.
I could do it for you. PM me if you are interested.
There are several open-source charting APIs... like [JFreeChart](http://www.jfree.org/jfreechart/). Any idea or range of your budget?
Yea, exactly. Or you may get people that will say, "Use Emacs or use VIM, those are perfect IDEs". No, no they are not full modern IDEs. Sure, they are nice but I am more productive in a standard IDE.
You've described 99% of software development brilliantly.
If you can be assured of a 'net connection and don't care too much about the data being private, then you could just use charts.google.com
Thanks. Didn't know about that. But it won't do for this project. 
How much are you willing to pay? 
I don't think you can do GUI programming in Octave. I mean, it's hard enough to program GUIs in MATLAB.
Bah, I have no knowledge of GUI programming in Java (in fact, I just dislike it in general: command line interface FTW!) or I'd consider doing this.
While I'm not so sure about GUI builders for GWT (but might try it anyway), I'm going to test CodePro AnalytiX: http://code.google.com/intl/fr/webtoolkit/tools/download-codepro.html
It's awfully similar to a part of the app I currently work on - it runs differential equation models and produces simulation results that can be graphed or displayed in a table. The user can turn on/off variables and macros individually, plot them on log scale or linear (again, individually), plot them all in one graph, or separately, or with various groupings. We use JFreeChart and it works pretty well. Probably would take a month of fiddling to learn how to use JFreeChart effectively if you're unfamiliar. Your project sounds like a pretty solid 2-3 weeks of work and testing, which, for someone like myself, would run you about $6000 total ($50/hr).
I do not disagree with anything you said. Unfortunately, I don't have that kind of budget for this small project.
I didn't think you did. Just laying it out there as a point of reference and some info about JFreeChart. 
Wow, cool. Thanks for the link!
Here are the best links I found: * http://prefuse.org/ Prefuse is a set of software tools for creating rich interactive data visualizations. The original prefuse toolkit provides a visualization framework for the Java programming language. The visualization gallery and demonstration video provide numerous examples of the types of applications that can be built with the prefuse toolkit. * http://ubietylab.net/ubigraph/index.html - UbiGraph is a tool for visualizing dynamic graphs. The basic version is free, and talks to Python, Ruby, PHP, Java, C, C++, C#, Haskell, and OCaml. * http://plplot.sourceforge.net/ - PLplot is a cross-platform software package for creating scientific plots. (Java and Python) * http://java-source.net/open-source/charting-and-reporting - Open Source Charting &amp; Reporting Tools in Java. The most interesting from the last link above seem to be: * http://jchart2d.sourceforge.net/ * http://www.jfree.org/jfreechart/
You are right about GUIs in Matlab being a real pain!
If it is not carried forward in Java, the only other choice is probably Python. :)
Prefuse is one I didn't know about AND that looks pretty neat.
PrimeFaces is in fact the component library that reconciled me with JSF :-) I currently use it on few JEE 6 projects.
I write code in nearly the same languages as you, although primarily java with a bit of python and a really little bit of everything else (javascript, shell, c/c++, ruby, fortran, perl, etc). I think java is fantastic as a language ... going back to c/c++ is often painful. However, it does have its problems: * Because you need a jre it is a pain to publish platform applications in any widespread manner. Luckily, 99% of what I do is web based, so I don't have to worry about it. * Java is really verbose, especially coming from python. It's just not very expressive, but I can see how some would like that. * As has been mentioned, so-called "java developers" seem to make things much harder than they need to be, by developing layers and layers of frameworks and factories and other complications. There's a fine line between abstraction and complication. 
I think native code compiling is way too hard ... that's why it isn't readily available. I think there are just too many core java components that rely on the jre (not to mention the entire reflection framework). tl;dr: Wishful thinking.
I wouldn't know any reason why not. Unless there's something nasty about your container, that should work just fine.
I'm actually asking for lookup purposes. For example, if I know a server is running on 'localhost', and I know the context name to be 'xyz', it is *always* guaranteed that a valid URL for the web app would be?: http://localhost/xyz Or could it be something else? (Of course, this excludes protocol, ports, and any dns or proxy redirects.)
Absolutely it can. I recommend looking up the details for the context descriptor (context.xml). This can be set at many places, but that's the application level, and probably what you're most interested in. Something like this ought to do it: &lt;context path="[some path]"&gt; .... &lt;/context&gt; 
Yeah, Swing makes me want to shoot myself. The other stuff, though, I wanna try it.
Thanks for the info. Looking into it here: http://tomcat.apache.org/tomcat-6.0-doc/config/context.html It mostly says it shouldn't be set: "The value of this field must not be set except when statically defining a Context in server.xml, as it will be inferred from the filenames used for either the .xml context file or the docBase." But yeah, it looks like it could be done if you wanted to screw with things. I think I'm comfortable with the way I went ... thanks for the help.