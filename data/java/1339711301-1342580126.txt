Obviously it'll create a new string, but surely first it would check for the existence of "Hello", in order to provide the parameter. There would be two 'new' strings in this situation.
Or if you want to make your life easier you will use JSF instead of Spring. If you really love Spring you can use it with JSF and Hibernate as well but it most cases it is not needed.
Two ways: 1) Make &lt;type&gt; fully mutable, and mutate the existing instance instead of allocating a new instance each time. For example, instead of using String (immutable), use an array of char (mutable except when the array is resized). 2) If &lt;type&gt; can be a primitive instead of an object (e.g. an int instead of a Integer, etc...), the same memory location will be used every time, since primitives are not generally allocated on the heap.
Many of these frameworks are a big shift if coding that is different from the type of development you've been doing. It's a risk to bring someone like you on, because you may not be able to grasp the concept. For me, the big one is Spring. Many people just don't get concepts like dependency injection and AOP. Not only that, each of these frameworks has a certain convention that they will have to train you on. If people don't have direct experience in these things, I look for two things: being a quick learner or interest in technology. It would blow me away if you said "I haven't had a chance to work with Spring MVC directly, but I like the way it does x". You down played looking into new technologies as "cute", but I find the people that stay abreast of the current technologies, especially if they aren't even able to use them in their current position, have the drive, desire, and interest to be a great coder.
This whole thread makes me wonder what you're trying to accomplish, as it's a very odd question to ask in the context of Java. Anyway, a very concise way to think of **static** is that is simply makes a field or method declaration global. It doesn't have any effect on how the data is stored, just on how you can access it. For example, this will do exactly the same thing regardless of whether *foo* is declared **static** or not: foo = new Bar(); // later... foo = new Bar(); 
A JEditorPane supports HTML. It would be easy to add buttons that inserted html tags at the start and end of the highlighted text. You can use a JEditorPane to format text without HTML, but it's a reasonable format for sending text to the other client. http://docs.oracle.com/javase/1.5.0/docs/api/javax/swing/JEditorPane.html 
1) look for some java html viewer. then the input box becomes a kind of wysiwyg 2) Not to my knowledge.
This was my original and it seems to be the same as yours, except mine fires a method, which is (2). But the problem with mine, and I assume yours too; is that is keeps repeating the task because it is a thread. **Edit:** Formatting not working uploading picture. **Edit:** [My code.](http://i.imgur.com/qoW2f.png) **Third Edit!** I missed the fact that yours does it differently. I will try this in my program.
You have sent me on a voyage of String discovery, making my day more confusing and far more interesting. Thank you :)
 public static void main(String[] args) { char c = '\n'; String s = Character.toString(c); System.out.println("Hello this is a " + s + " test"); } Works. 
Is it important that it is human readable, or just that you can copy/paste the result into source code, knowing it will compile?
Needs to be human readable, as it is going in a notification to a user.
Ah bum, there goes my idea of iterating through a string and converting every character into a unicode \u0043 style character then.
That is a good idea though (albeit for a different problem).
Instead of concatenating "\n" could you not just do something like "text " + '\' + 'n' 
Python probably would be a better option if you're just starting out. Its easy to pick up and really powerful. 
&gt; True Java skills seem to be undervalued in today's job market "True Java" from an enterprise point of view is much more than the skills you have - it includes the tooling, the frameworks, the application servers and so on. When I've run interviews I generally focus on these topics, far more than pure development - the business logic in most business apps (that I've seen) is relatively simple from a technological point of view, if you can code loops, if statements, and know how to call a PL/SQL procedure you're good to go. 
/r/forhire is the local job pool 
Totally forgot about singletons! I'll give this a shot!
Of course I thought of this first :p, however I need a fresh instance of the variable. The true application is this: it's an ASN1 envelope and there is no clear method for this. Thus I would need a clean copy of the object. 
See below comment regarding ASN1
No problem, I'll try again in the proper spot. Thanks! 
The second. There is an anonymous parameter "Hello" that must be instantiated before String's constructor can be called.
Cool, I'll take a look. I'll probably stick to making my own method, seeming as apache commons is not part of the JRE. Thanks!
That map lookup must result in dreadful efficiency.
Sounds like you want the Java Media Framework. http://en.wikipedia.org/wiki/Java_Media_Framework 
Here is the implementation I would recommend, covering all eight of the escaped character literals: public static String charToString( final char c ) { switch( c ) { case '\b': return "\\b"; case '\t': return "\\t"; case '\n': return "\\n"; case '\f': return "\\f"; case '\r': return "\\r"; case '\"': return "\\\""; case '\'': return "\\'"; case '\\': return "\\\\"; } return String.valueOf( c ).intern(); } Depending on what you are using this for, you may or may not want to use `intern()` (in the last line). `String.valueOf()` creates a new, unique `String` object, so if you ran `String.valueOf( 'a' )` 10,000 times, you would get 10,000 references to 10,000 different objects. `intern()` makes this method a bit slower, but it ensures that `charToString( 'a' ) == charToString( 'a' )`
Oh please don't sick that hideous creation on anyone. JMF is pure garbage. I have had significantly better luck with [ffmpeg](http://fmj-sf.net/ffmpeg-java/getting_started.php) and [libav](http://code.google.com/p/jlibav/)
This code I'm writing is part of a skeleton code for an assignment for my (introduction to programming) students. I want to give them lots of helpful error messages and things, without having to get them to link in extra libraries.
Thanks guys, I will take your words on head first and begin with that :) Really appreciate it &lt;3
Haha, noted =)
Aww that is very sweet of you, but I really don't like taking other people's time. Instead, can I ask you questions whenever I have them?
Absolutely, if you have skype or so I can give you my info
I would love to take you up on that offer!
My Skypename is: Ismaya0 By all means come and learn :)
Great! The world needs more excited and motivated programmers like you! Now to be clear, I don't want to dissuade you from learning Java, and I didn't come to /r/java to shit on Java :) It has been around a good long time, has a great platform, lots of industry support, lots of solid libraries and if you want to get a job writing code, it's (imo) one of the best languages to know. I use it for work every day. HOWEVER, it's demonstrably not the friendliest language for beginners (it's not the worst either). You can't just get off to the races writing code in a console like you can with Python or Ruby... you have to set up a lot of infrastructure just to write a simple one-liner like Hello World, and you have to be able to suspend your disbelief for a little while and just accept that classes are things that you have to make and "public static void main(String args[])" is a thing that you write, without knowing what all of those words mean. And just FYI I don't think that it's true that most universities use it for intro to programming. MIT (which I believe is #1 or #2 for Computer Science) and lots of others (including my alma mater) use Python these days. Also if your buddy who recommended Java to you wants to mess around with it with you, then by all means do that, there's no substitute :)
I can't decide if I like the video or hate it. On the one hand it is well done and a bit funny. On the other it reinforces the up and coming 'brogrammer' garbage and definitely portrays the women poorly. There is enough lack of interest by women in software development that we shouldn't be reinforcing this type of culture. So I won't up or down vote but comment.
[Fabric](http://docs.fabfile.org/en/1.4.2/index.html) to automate talking to all of the boxes. You could also check out [Chef](http://www.opscode.com/chef/) or better [Puppet](http://puppetlabs.com/)
Unless you're saying they ought to get individual offices a la Fog Creek.
Hahaha I'd never seen 'Dad Life,' thanks.
There needs to be a travis barker remix of this.
Double Checked Locking - mindblowing, but really nice and wise.
Try using a regular expression matcher
Just take it slow. Get a solid grasp of Java's object-oriented style before you tackle things like concurrency.
Interesting read, but annoying that the code samples aren't included on the page and need javascript to be enabled.
&gt; If you need the code i can pastebin it. Please do, unless you are asking a question about a concept (which you aren't) we need to be able to see at the very least the code in the area of the error in order to figure out what went wrong.
This may seem stupid but will anyone steal my code and use it take over the world?
...maybe if you beg me to.
okay thanks anyway
I'm not so conserded with typos, but I'm pretty sure that that isn't the only reason you didn't like it. Any other examples of why not? I've got it already, should I still go through it and then Head First Java?
I have a lot of love for Java, but the whole oracle, google thing left a bad taste in my mouth. 
Spring follows the following process: * Consider actual code to be configuration * Move "configuration" to Spring's XML files * Tell yourself there's no code and no dependency on Spring
You do Spring wrong.
Not sure if this is a question as in you don't know what it means... But if that is the case, then yes, I want to avoid using any extra library (e.g. Apache Commons).
{Two Days Pass} I still haven't managed to get it to install, even on my modern ubuntu install. I can't imagine it being easier to install on the aging RHEL machines at work :-(
Spring 3.0 was released Jan 2010 and included this functionality. Prior to that it was a separate project (Spring JavaConfig) which came out towards the end of 2008.
http://www.caveofprogramming.com/ Here's his youtube channel: http://www.youtube.com/watch?v=7WiPGP_0AUA&amp;feature=relmfu
Link instances of the program? What do you mean by this?
As in linking 2 chat applications together in a network
http://www.javaworld.com/jw-12-1996/jw-12-sockets.html 
There's no "if" about what he's saying. It's true. Just go read up on springsource. It's over two years old and it's a drop in, easy ass change... Totally backwards compatible. We switched. We're huge (thousands of webapps, hundreds of environments, dozens of development teams). New development uses annotations where it makes sense. Old projects still under maintenance are being updated as needed (no regressions or test cases have failed because of the new spring stuff to my knowledge). This is essentially as easy as going from "not using annotations" to "using annotations." Update maven repo. Update pom.xml. Use annotations. Done.
Or does Spring do me wrong?
I hope you aren't trying to build from source. The condor-users@cs.wisc.edu list is very active. There are RPMs and a repo for RHEL.
For the sake of simplicity, you might want to have a look at [RMI](http://www.cs.swan.ac.uk/~csneal/InternetComputing/RM2.html) (Remote Method Invocation).
My problem with DI, at least in cheap examples like this one, is that the code overhead for doing it compared to the "stupid" example right at the top is big, and the code that actually injects the dependency is always static; what I imagine that most people want to do, most of the time, is inject a dependency depending on a string input either from a web form or from a database -- "if the customer type is 'contract' then use billing system A, if they are 'pay as you go' use billing system B." -- I want to know how to do that in Java *without* using an if-elseif or a switch statement, but my experience is that it usually comes down to c'n'ping a case statement or having a code generator that automatically does the string-to-class mapping.
Hi, I can explain how we can do that with CDI @Producer methods. But I don't want to waste my time on satisfying people who pass cheap comments like this. Atleast I am trying to give back the community something even though it is simple&amp;silly instead of just passing the cheap comments.
Someone doesn't take constructive criticism/discussion very well...
&gt; what I imagine that most people want to do, most of the time, is inject a dependency depending on a string input either from a web form or from a database Err no, I've never wanted to do that, not with DI anyway, I believe there are other patterns for that. In your example, I would use DI to plug interfaces to the two billing systems, and have a test (a if or a switch, or some kind of design pattern) to select which billing system to use depending on the context. I use DI to plug different implementations of the same component (mock implementation and real implementation, file-based implementation and LDAP-based impementation, for example). Spring also uses DI to plug proxies to my code, for example adding transaction management in the proxy so that I do not have to program it myself. &gt; the code that actually injects the dependency is always static The injection itself is most often handled by the framework, backed for example by configuration files, depending on the environment. It is true that it becomes a problem when such simple examples do not show that and mislead beginners.
&gt;For example, there are notification boxes being used in this program, design done, but I am now working out a way for them to pop up, wait a specified amount of time and then be disposed. This is commonly know as a "toast" notification. This is what I found in a quick search. http://sourceforge.net/projects/jtoaster/ Also of note, this is a personal preference of mine, please use the Native theme and not the default java theme. I find the default theme to make programs instantly seem cheap.
On the plus side at least they were open to suggestions...
Good to know. 
...because it's assuming you know what you're doing when you declare the variable's scope. Honestly what you're suggesting would be far, far more annoying - partly because of how irritating that kind of visibility change would be, but mostly because there's absolutely nothing wrong with how it behaves at present.
This is a great example. I use Mockito at work, and I like it very much. I like to explain mocking to people by using the Waiter-Cook Test analogy. Say, for example, you have a Waiter class that you'd like to test. The Waiter class has a field Cook that it uses to get a Food object. In your unit test, you'd create a new instance of Waiter, a mock of Cook that returns a real Food object when its getFood() method is called. Once you've set the field in Waiter to your mock, you can write your unit test for Waiter and verify its behavior.
I have to test some (bad) code at work, and Mockito helps tremendously. One feature I wish I had discovered a long time ago is [Deep stubs](http://docs.mockito.googlecode.com/hg/latest/org/mockito/Mockito.html#RETURNS_DEEP_STUBS).
Wow, you got a harsh answer from the DI guy. DI systems can be either static or dynamic. Static is easier in static languages like Java, and you get the compiler's help, to boot. Dynamic is trickier because it requires more runtime support which makes the DI system more complex. Spring has *direct* support for the kind of thing you're talking about (and has gotten pretty complex), while other systems like CDI and Guice have more *indirect* support. First, you don't need switch statements or if statements. You can use maps, with the key being the type you're looking up and the value being the specific instance. Then, you can use a `MapBinder` in the Guice DI system to provide a map you can select from dynamically based upon the external input: @Inject private Map&lt;String, BillingService&gt; billingServices; public void foo(String customerType) { if(billingServices.containsKey(customerType)) { billingServices.get(customerType).billingAction(); } else { throw new IllegalArgumentException("Unknown customer type: " + customerType); } } Although, this spills the guts of dynamic selection all over the place, so I would rather prefer wrapping the map and doing something like this: @Inject private BillingServiceLocator billingService; public void foo(String customerType) { billingService.for(customerType).billingAction(); } The Guice configuration to achieve the above would look something like this: public class AppModule extends AbstractModule { public void configure() { MapBinder&lt;String, BillingService&gt; serviceBinder = MapBinder.newMapBinder(binder(), String.class, BillingService.class); serviceBinder.addBinding("contract").to(ContractBillingService.class); serviceBinder.addBinding("payAsYouGo").to(PayAsYouGoBillingService.class); } }
I think it's a bitch to use. I'd much prefer some kind of &lt;code&gt; tag...
I don't really have experience with Java graphics so cannot answer your question about the book. However, I can say that Android game programming is significantly different from any more traditional Java graphics programming book. I think it would be better for you to focus on the Android side of things since it seems like that is what you are interested in. In particular, the way you create simple games by manipulating a Canvas object in Android will be different from Java2d or OpenGL. One thing I have recently played with is the [app inventor](http://www.appinventor.mit.edu/) which may be useful if you want to learn some of the concepts before knowing the code behind it.
It is, because you(OP) have "int y = (int) x * 255;", it evaluates like this: "int y = ((int) x) * 255;" writing "int y = (int) (x * 255);" should fix it;
Yes, I suppose a major DI use is for frameworks to allow users to effectively specify their own handlers for things; I hadn't thought of that.
Not bad... the ending was kind of lame... could of been better.
IDEs just take care of compiler errors. It doesn't deal with good/bad programming practices.
Generally I have preferred to include the actual exception as the cause, because it gives a little more information (although you could of course design your custom exception to add this info). Thoughts?
Hilarious :)
This is what I mean: if (x &lt; SIZE - 1) findLakes(x+1,y); if (y &lt; SIZE -1) findLakes(x,y+1); if (y &gt; 0) findLakes(x,y-1); if (x &gt; 0) findLakes(x-1,y); Instead of try-catch for ArrayIndexOutOfBounds. I was telling my students to NEVER use try-catch for ArrayIndexOutOfBounds. Always make sure that the x,y values are correct first.
I still don't know if that was brilliant or awful.
[Mockito](http://code.google.com/p/mockito/) makes this even easier if you only need simple stubs, or if you are doing unit testing: //mock creation List mockedList = mock(List.class); //stubbing when(mockedList.get(0)).thenReturn("first"); when(mockedList.get(1)).thenThrow(new RuntimeException()); //following prints "first" System.out.println(mockedList.get(0)); //following throws runtime exception System.out.println(mockedList.get(1)); *edit; sorry; that was off topic; I was thinking I had run across a similar library that allowed creating interface-based wrappers in this style, but I don't remember what it was...* 
The [Tahrir Project](https://github.com/sanity/tahrir) has a [remote procedure call](https://github.com/sanity/tahrir/wiki/Messaging) system that uses dynamic proxies. Procedure calls are serialized to a very compact format and then sent over UDP (encrypted).
Spring AOP proxies do a good job at this. Your article is from 2003. Kinda getting old for the tech world. http://static.springsource.org/spring/docs/current/spring-framework-reference/htmlsingle/spring-framework-reference.html#aop-introduction-proxies 
I never went to a Java conference... Is the ticket price really €6187,50 ??? cmonnnn
I would be much happier if people just knew how to salt correctly. Each individual user account needs to have its own unique salt.
It's 6000 Norwegian kroner, about 800 euro.. 
thx for clearing that up 
Wow, this was cool!!! :D
Agreed, it is frustrating that salting is not well understood. You can find that and other suggestions in a previous post on general password considerations here: http://exceptionallyexceptionalexceptions.blogspot.co.uk/2010/06/passwords.html
It's a worthy effort to be sure, but I can't help but being relieved that we use weblogic where I work. 
Interesting watching, but it strikes me as being a bit...well, not pointless, but fruitless. The guy's ratings are based on his opinions, he's admitted that people can skew the figures to get their favourite framework to "win", and that he's biased in favour of Struts/Spring etc. Early on in the clip he mentions that the frameworks have their own strengths, and as watchable as the rest of it was that's where the relevant points ended as far as I'm concerned. Edit: second half tails off a lot too, less technical talking, and instead we get some generally dull topics with iffy graphs to try to liven things up.
Why? High cost of ownership? I kid, I kid. Most of that article, however, was talking about mod_cluster and Apache. JGroups are automatic. Clustered web applications are easy on JBoss. That was one annotation (EJB) and one XML tag for HTTP session replication. Sure, the ad-hoc nature of JBoss clustering can be aggravating but... overall I think that the JBoss suite is better than the competition. Significantly. I may be biased but the value is there. And, EAP6 (AS7) is flat out awesome. I'm still learning it but it's light years ahead of EAP5.
he was serious??? if so, i feel sorry for him... JBoss 7 is a complete rewrite by a great lead developer, and many magnitudes better than the old JBoss from what I can see. (And JBoss 3-6 wasn't too bad overall, just, XML and config hell, etc)
it's possible to implement EasyMock/Mockito etc using JDK proxies, in fact, they might be using that underneath...
That's funny. Many of our customers start on JBoss/Glassfish and pay us to host their stuff once it gets too large for them to manage. I think that at a certain point it makes sense to switch to Weblogic. It usually comes down to how many more apps/environments/requests can you manage per human resource. Two guys can manage a LOT with weblogic and still have ample vacation time/reddit time. &gt;You do use a load balancer, right? You could easily replace Apache with a load balancing appliance. Weblogic doesn't need a load balancer. We use one for certain classes of apps/service, but not for everything. &gt;Could you explain this a little better? I'm pretty sure you're right I just want to know more about that feature. Basically, we can set up a policy to migrate an app container to another host. If the host goes unresponsive, it (along with its last known state) migrates to a responsive host. Pinned services such as non-distributed destinations (single topic/queues) just get their jndi targets updated. Nodes that make up part of a service like a distributed queue or topic are backed by persistent store services that migrate with them to their new home. It's seemless. We get an alert and that's it. Sometimes if a network segment goes down (hooray for cross subnet/datacenter clustering) we'll get a lot of migrations and end up with capacity issues, but then the quotas and thresholds kick in and the clients start getting resource exceptions (and should handle them accordingly). &gt;This is the kind of discussion that you wait for months on r/java and never see. And, like I said, I'm biased. Agreed. Also, everyone is biased and I would love it if I could do everything that was asked of me with OSS. I use JBoss for personal projects and think it's great. In the general case I think it wins hands down. 
Hes fixed this. Thanks for the suggestion he said!
Dying works fine for me, maybe I don't understand what you mean by that. Could you explain more for me?
I have been using the tutorials published by BalusC and mkyong. Since you already have the URLs for BalusC, here it's the other one: http://www.mkyong.com/tutorials/jsf-2-0-tutorials/
You should wrap into a common exception type (Although NEVER Exception itself) and rethrow for any public code. Inflating your library with 20 new kinds of exception that are functionally and semantically equivalent to IllegalArgument, IndexOutOfBounds, or any other existing type only make it harder for other projects to use your code. While they may gain from slightly improved context, that context is usually better stored in the exception's message than an entirely new type. If you're going to define new exceptions, at *least* subclass the exception you're copying, instead of just Exception, so that we can handle it with polymorphism. 
Wouldn't it be better to throw an IllegalArgumentException, or if this takes place in an iteration loop to just `continue;`?
Woah. He's hardcore.
&gt; Egyption **Egyption** *Egyption* \^_^
Answer: you don't, you use Joda Time.
How big a data set will the server contain, and what sorts of manipulations will you perform. How much data will off line users need on their machines, and can you mandate a browser?
Or, you could just set the defaultonclose operation to automatically exit (I think the function is window.setDefaultCloseOperation(), but don't hold me to that). But definitely, OP should learn Swing, but should probably start with text games to just get a feel for Java, first.
Java's tutorials to learn the syntax and what you can do.
I would try youtube.com/user/thenewboston. He has a ton of tutorials on Java and is great at explaining them with his analogies
Why would you want to artificially limit the scope of the channel? Reddit and java aren't very related.
Beaner might not be the best name for ...anything.
It's a racial slur when used in the context of Latinos.
&gt;It's a racial slur when used in the context of Latinos. I know, I was originally going to say that "it isn't a good name for anything else", but that kind of implies approval of using the term as a slur.
Xstream is good for XML to object serialization
Check out JAXB. It is very similar to XStream but native to the JDK now. You can use annotations to serialize / parse XML into a configuration object of your choosing.
Just Mexicans, really. I've never heard any other Hispanic group referred to as beaners.
I recommend you don't try it out on a Guatemalan any time soon.
I've always wanted to chat with the Java redditors! Thanks!
Screw Java beans, I never use them nor have had a reason to use them, so you can count me out on your "beaners" count.
Practical applicability, at least at this level, is obviously limited, but, man, it's a cool idea!
looking at their fundamental course... the topics seems pretty basic. http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=609&amp;p_org_id=1001&amp;lang=US&amp;get_params=dc:D67234GC20,p_preview:N I would watch the stanford videos and http://www.youtube.com/user/thenewboston/featured
I have been looking around for certs also and official ones don't seem to come cheaper than what you found. The next best option would be a 'cert' from a college but you are most of the way to a degree then. It really depends on how much time/money/motivation/skill you have. If you can teach yourself well and relatively quickly then try it. Its probably much cheaper that way.
I started playing around with the class and it's pretty nice.
sorry for not answering, I'm travelling. mainly horrible incompatibilities between Glassfish's JARs and my JARs, and running out of memory when redeploying applications (even after allocating a lot of memory to it).
*Everything* in Java is a "bean" these days – even the programmers, it seems.
You *never* wrote a serializable class with some getters and setters and a default constructor? That's a JavaBean®.
Does anybody have an opinion as to how this kind of interceptor will itself impact performance?
I'm not sure you actually have any programming experience. Don't worry about it, pack the bits yourself if you really need to.
I'm looking for the first option, a civic file to bootstrap a single object. Thank you for the recommendations. I've not heard of Castor before. 
Your second example will loop forever.
&gt;(Forgive me if I made any mistakes in my code, I was focusing more on the horrendous act of indenting rather than making sure it was correct) Thanks for telling me, though.
https://github.com/typesafehub/config Supports 3 formats: JSON, human-friendly JSON superset and java properties. No dependencies.
&lt;http://i.imgur.com/2Crkt.png&gt;
I'll try.
Not sure why.. but I don't have the tray icon anymore. Had to go into Control Panel and tell it to always show console. Here you go: This occurred while 'Downloading packages' invalid entry size (expected 237633544 but got 0 bytes) java.util.zip.ZipException: invalid entry size (expected 237633544 but got 0 bytes) at java.util.zip.ZipInputStream.readEnd(Unknown Source) at java.util.zip.ZipInputStream.read(Unknown Source) at com.sun.deploy.net.HttpDownloadHelper.decompressWrite(Unknown Source) at com.sun.deploy.net.HttpDownloadHelper.download(Unknown Source) at com.sun.deploy.cache.Cache$4.run(Unknown Source) at java.security.AccessController.doPrivileged(Native Method) at com.sun.deploy.cache.Cache.downloadResourceToCache(Unknown Source) at com.sun.deploy.cache.DeployFileOutputStream.close(Unknown Source) at java.io.FilterOutputStream.close(Unknown Source) at sun.net.www.protocol.http.HttpURLConnection$HttpInputStream.close(Unknown Source) at org.lwjgl.util.applet.AppletLoader.downloadJars(AppletLoader.java:1501) at org.lwjgl.util.applet.AppletLoader.run(AppletLoader.java:874) at java.lang.Thread.run(Unknown Source)
That is really odd. LWJGL handles downloading jars for temporary use, and shouldn't fail like that. I tested in chrome so that shouldn't be the issue... Have you tried refreshing? 
Yep. Also just tried in FF and IE(9)
Argh, do you have administrator privledges? 
What the heck? I wrote it and debugged it on Windows 7 x64. Are you an administrator? 
3D in Java's something I've always meant to try but never got around to doing...which is my way of saying don't take my word for the following. From what I've read in the past, don't use Java3D if you're interested in performance; it's a high level API sitting over the OpenGL or Direct3D layer, and comes with a noticeable decrease over the lower level/direct access libraries. When I looked into this previously LWJGL seemed to be the best bet, as some of the demos for what can be rendered using that are very impressive indeed, leagues ahead of the demos I saw for Java3D. One thing that caught my eye was JMonkeyEngine, which sits on LWJGL and I think abstracts you away from the nitty gritty of rendering whilst still giving you a decent range of programmatic control - but as mentioned at the start of the post it's not something I've ever found the time to try out, so again take that with a pinch of salt.
Video games make extensive use of the black art of low-level optimization -if you don't know how your CPU, GPU, various levels of caches etc all work then you're going to have a very bad time. How many draw calls are you making each frame? Are you calling lots of complicated trig functions? Are you allocating tons and tons of heap memory with a general-purpose allocator? Is Java3D running in hardware or software mode? Are you doing any sort of *culling* (frustum, back-face, or otherwise)? The problems you're having are not things that the average Java developer has any idea about. You need to head over to one of the game development subreddits. Even better, read some books about 3D/game programming -there's tons more to it than getting triangles to draw on the screen.
I don't get it... A buddy of mine that does Java dev went to the page and got it running just fine.
Can't say I fancy that.. no offence. But what I can see from a packet capture is that it hits a 404 for: &lt;http://kashewgaming.com/projects/particleai/LZMA/LzmaInputStream.class&gt;
Yeah, I *just* fixed it.
\#reddit-java is such a party.
That does help boost confidence. Always wary of not-invented-here things. Cool, well, will keep this project on my radar.
That's really odd... It seems like everyone else is getting it to work. :/
@Those who got it to work, screenshots? It's not much to look at: http://i.imgur.com/LL2XC.png
That is an awesome thing to see. Do they have any programs that need volunteers?
You should look into using trig to getting the particles to follow the mouse perfectly. They orbit because the direction you point them in is inaccurate (8 directions). If you want them to orbit, you can then add physics into the mix with acceleration and velocity.
I must be missing the point. Why even mess with accessing an index of the array that isn't there? int arr[]={1,2,3,4,5}; for ( int i=0; i &lt; arr.length; i++ ){ ... } Is the classic way to do this. Are we just demonstrating what happens if you go off the end of the array? 
How do you do this with a 16x20 array?
Truthfully, if I was really doing this, I might use something like an ArrayList of integer arrays. ArrayList&lt;int[]&gt; list = new ArrayList&lt;int[]&gt;(); for ( int row[] : list ){ (sub loop for array) } Just makes it easier to manage, I think.
I'm intrigued, what else can you do with java besides desktop applications?
What does your main method look like? You need to instantiate FPS and make it visible, which would look something like this: public static main void(String[] args) { FPS fps = new FPS(); fps.setVisible(true); } edit: I should add a link to this excellent Swing tutorial: http://zetcode.com/tutorials/javaswingtutorial/
Except for nextLong, the other methods return a number between 0.0 and 1.0, so it doesn't make sense to provide a maximum value as a parameter. Instead, just multiply the result by your exclusive maximum. float x = new Random().nextFloat() * 3.0f; Here, `x` will be between 0.0 (inclusive) and 3.0 (exclusive). This has the same effect as `nextFloat(3.0f)`, if such a method existed in the same pattern as `nextInt(max)`. The same can't be done for nextInt(); you'd have to use modulus and absolute value.
So, I am reading some articles on Java Threads and found this [link](http://ocw.mit.edu/courses/civil-and-environmental-engineering/1-124j-foundations-of-software-engineering-fall-2000/recitations/recitation_8/#2). Is this a genuine error?
You're on the right track, you just need more supporting code. You need to make a JFrame to stick your FPS JPanel in. You should also consider using the @Override annotation to help guard against mistakes. 
I do JavaEE web applications and more recently I've been doing a lot of work with the [Play! Framework](http://www.playframework.org/), which is just *so very nice* to work with.
I don't know what your program is, but I'd give careful thought to using XML for config files. This will work well with only technically trained users. Consumers will have no idea how to use them, unless you provide some additional tool that generates them. If you can possibly use a K,V format, I strongly suggest Properties, which are a part of standard Java, easy for users to edit, and simple you to process. 
Nay because SWT exists which will give you real native controls. This looks much better especially for more complex controls like a file picker. Whichever you use you should use MigLayout as your layout manager (http://www.miglayout.com/).
SWT has this advantage - OK, on the other side: * it's mainly used with the Eclipse framework and not standalone (may be possible, but not seen) * the SWT API is really terrible - if you hate Swing API you will kill yourself after using SWT Nay because of Java FX 2 may be an answer - in 2 years.
You can absolutely use SWT without any of the Eclipse framework. I even wrote an ant task (http://mchr3k.github.com/swtjar/) to streamline packaging a pure SWT app. What don't you like about the SWT API? I've not encountered any major pain points. 
I say nay. The reason for this is that for Java GUI to work efficiently you will have to work in threads. Swing is not very thread-safe, while its alternative, SWT, is much more thread-safe.
&gt; I have never needed a class that had to have setters Apparently, you're doing it wrong.
I say yay. Simply because the world has enough naysayers already.
Do you have any specific examples in mind of how SWT is more thread safe? I think they both require UI updates to happen from the single UI thread.
There's something called Servlets, but I'm not really sure what they are. They are web based, but they're not applets.
Well the difference here is, that SWT does not allow you to perform certain modifications from any other than the main thread (as in: throws exception), while Swing allows it, but may screw up, right? Swing provides [SwingWorker](http://docs.oracle.com/javase/6/docs/api/javax/swing/SwingWorker.html) as an easy way to pass information from a working thread to the GUI thread. It's really nice to do incremental updates and have the GUI decide, when it has time to change the GUI, avoiding redundant updates. AFAIK, SWT does not have an equivalent for that. SwingWorker and [Timer](http://docs.oracle.com/javase/6/docs/api/javax/swing/Timer.html) really help avoiding all that runA/Sync(Runnable) business, which IMO does not make nice applications. I find that using these tools forces me to create a much clearer Thread model.
This would only be useful if FPS extends JFrame.
&gt; I also have another question: In laymans terms how do pseudo random number generators work in java? From the [javadoc](http://docs.oracle.com/javase/6/docs/api/java/util/Random.html): &gt; The class uses a 48-bit seed, which is modified using a linear congruential formula. [Linear congruential generator](https://en.wikipedia.org/wiki/Linear_congruential_generator) on Wikipedia gives a general description, also mentioning Java's implementation, and talks about advantages and disadvantages. Basically: multiply by some number, add another number and then cut off the first digits so it seems like it's random. This works very fast, but it's important that you don't use this for statistical applications, since the 'randomness' is not particularly 'good'. [apache.commons.math](https://commons.apache.org/math/) provides a couple of random number generators like the [Mersenne Twister](https://commons.apache.org/math/apidocs/org/apache/commons/math3/random/MersenneTwister.html), which is pretty much today's go-to random number generator. Hope this helped :)
Between "no major pain points" - we survived and "fun to develop with" are some worlds. I especially hate this flag stuff (SWT.NONE etc.) that is also known from the old Windows API. Often it's trial and error which flags are needed, supported in components etc. And how you give parents to sub-components...it's also strange. I assumed you can use SWT standalone...but I havn't seen this in any project (doesn't mean there arn't some).
Of course. What stuff would you say is essential for a position like this? As I said Im checking just general stuff but if you think there's something in particular that you think I should look up, please tell me.
&gt; I am afraid I will do nothing without eclipses help. You know, if you can't program without an IDE, you can't program. Is this job really right for you?
Depending on how big the company is, if you Google their name + "Interview Questions", a lot of results might come up for some old questions. It will give you a good idea of what type of interview style they have. From an entry-level position, I would generally expect questions that are not necessarily Java-specific, but just your knowledge of discrete math &amp; algorithms. Sorts, binary trees, hashset operations, etc. are probably the most likely candidates there. From what I've heard, basic questions about garbage collection are pretty common too. 
You actually don't lose much precision either. If you multiply by a power of two, only the exponent bits are modified.
Take a look at Guava, and talk enthusiastically about the benefits.. Using the library saves so many lines of code and eliminates quite a few common bugs regarding IO and concurrency.. 
I disagree. "Every" professional java uses an IDE at work, and not using one would be a big handicap
Yeah, good luck with doing server-relevant stuff. You need to work in less cozy environments, you are too endeared by the college kid startup world. Also note how that was not the point I made.
Oops, somehow I read JFrame and not JPanel. In this case, the OP needs to create a main frame and add an instance of FPS to that frame.
If you need to work in "less cozy environments" you are doing it wrong. I don't see why I can't do server-relevant stuff sitting behind my desk on my favorite OS and favorite IDE listening to my favorite music.
Off the top of my head I know that Azureus(which I think was renamed but I dont really use it) is a pure SWT app.
If they're giving him ssh access they're pretty much letting him in. It wouldn't hurt to ask.
A workplace that didn't allow a modern IDE for Java development would make me question their priorities. Why not let your developers have the best tools, especially since they're free tools in many cases?
[http://en.wikipedia.org/wiki/JNode](http://en.wikipedia.org/wiki/JNode) Microsoft also has a research project called Singularity which was an OS written in C#
I really hate this elitist anti-IDE sentiment. Do some languages not have a good IDE, making the use of low-level development tools (vim, xterm, etc.) neccessary? Sure. Does it make any sense to use a low-level development environment when a robust, effective, and powerful IDE exists (as is as much the case with Java as any other language)? No, at least not for normal day-to-day development, save for a minor emergency edit on a production server. I have experience with TCL, RVT, bash, html, javascript, C++, Java, JSF, and much more. I'd use the right tool for the job regardless of which technology I'm using, and with Java, you'd have a hard time convincing me that a full-featured IDE such as Eclipse is *not* the right tool for the job.
I do "server-relevant" stuff every day and I've never typed a line of Java code in a terminal window, or any window other than Eclipse (and gedit/gvim when I need a clipboard to keep code snippets).
I think you all blow this out of proportion. I made a point that they gave him that setup because they explicitly want to test if he is worthless without his tools. 
Standardization on one set of tools. Network security. There are many reasons IT departments disallow tool selection by developers.
It just seems especially Java people are more than touchy when someone calls into question their dependance on third-level tools. It's like Americans who can't drive their cars if they have manual gear selection.
If you're listening to your customers about which tools to use, you're doing something wrong.
Thanks for that, I was reviewing so much stuff that I still hadn't even checked what ssh client I should use.
SWT is the UI toolkit used by Eclipse to enable Java UIs to be built with true native controls. 
The Java VM is already optimized for low level operations. It uses JIT to dynamically compile Java bytecodes to machine instructions. I think you mean the class library. But where the class library has to interface with the host OS, in most cases, it's already done in C and C++, not in Java. For example, check out the FileInputStream class. You'll see that the read() method is native. To create a Java OS, the native parts of the class library would have to be rewritten to interface with the bare hardware rather than a host OS.
&gt; They also told me that they would give me a connection (ssh) to a linux server and that I would have to do a java task which usually lasts for 2-4 hours. This is totally insane. Maybe it's a trick. I would write and compile and package the code locally in an IDE then SCP the package to the server. Unless they want to watch you code or something? Anyway brush up on recursion - this has been a question in every Java job I have gone for. Also MVC architecture, IO, JDBC and some presentation frameworks. 
Now, I've been called unorthodox, but if I were you, I'd go with building your own config library. The java IO system is not that hard, and you can write a simple syntax, then build code that will read and write to that syntax. It could be as simple as 'this=that' or [group] this=that; It's really all in your hands at that point. Edit: If you want code that reads/writes to a specific text file syntax, check out my [database library](http://www.kashewgaming.com/projects/lwjdbl) source. It is a little out of date from the current source, but the IO stuff is still the same.
&gt;They also told me that they would give me a connection (ssh) to a linux server and that I would have to do a java task which usually lasts for 2-4 hours. What should I prepare? [Learn vim](http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/) [Practice vim](http://portnine.com/vim/game) It's just a competence test. Most likely the stuff you will be programming in Java within vim will be rudimentary Edit: BTW OP, are you still in school? If not let me know. 
Thanks for this link! I've been thinking about the idea of a Java OS as well, and I'll be looking into this. 
This is a pretty simple format which can't trip up users too badly. It's pretty close to an INI format if I'm not mistaken. I do plan on distributing a writer for it, so manually writing the file should not be necessary. I was just puzzling over the various formats I could store the data in and a small flatfile makes the most sense, just a choice over the formatting.
Yeah, call the number on the site. Ask for leshell. If you live in dc and are good with kids or tech stuff, they might want you to help. They have a summer camp going on now I think.
I'm mexican and Java developer. Do I count as 2 beaners towards the total?
So is vim worth learning? just to be able to do stuff in it if the need ever arised?
Wow. I hardly know more than I did before. Is it important to learn about SWT if I don't use Eclipse? Are "true native controls" important or better than AWT or SWING controls? Swing is an annoying kludge that still includes tons of AWT stuff (you almost always have to import java.awt.* and java.awt.event.* -- so it's not actually a replacement).
Understood. Personally, I'd just prefer that we were free to use what we felt made us most efficient, but that's pie-in-the-sky compared with how many real-world scenarios play out. There are plenty of times that I do *not* want a full-featured IDE, and there are times when it makes things easier.
JavaFX should now be used, and yes, it to can be built in Netbeans. 
JavaFX. 
I tried it for a few weeks, and it never worked. I just had autocompletion matches duplicated. Anyone has this working ?
In case you need it here as some tips about using ssh in putty: * depending on the server the delete (backspace) key will not do anything but by typing the command 'bash' your keyboard will behave normally and you have the advantage of using the tab key. * if you do need to program directly in putty or command line see if the program 'nano' is installed this is much simpler to use than vi.
No, I was wondering why it only works with next**Int**() and not the others. R1cket explained that well enough :)
Text for the win.
Truthfully, I try to use the Collections framework as much as possible for anything other than a throw-away simple array. Even if I am writing a main(String[] args), I will take the args and put them into an instance of List or Map. The implementations of List and Map have built-in Iterators, and methods that allow you to work with such structures without having to worry about indexes out of bounds and what not. It lets you focus on working with the data in the structure rather than spending a lot of time figuring out where you are in a raw array. I haven't worked with a multi-dimensional array of that kind since my C++ days in the '90s.
Thanks for the link.
Swing doesn't replace all of AWT, only the UI widgets. Swing is built on top of AWT. That's why you have all of those AWT imports. All the other AWT stuff is still used: events, layout, Java2D. What Swing does to is provide a UI widget library that you use instead of AWT. javax.swing.JButton instead of java.awt.Button. AWT provides native controls while Swing draws the controls itself so that you get a cross-platform UIs that work the same on all platforms. AWT differs from SWT in that AWT takes a least common denominator approach. Which is why AWT doesn't have a tree control - because Motif doesn't. SWT emulates controls that don't exist on other platforms - on Motif, SWT provides its own tree control. Also, in order to distribute an SWT application, you have to package the SWT binaries for the target platform. SWT makes heavy use of native code, and none of that is shipped with the JVM. You can't just provide a JAR file and expect it to run.
Gosh you're right, I couldn't imagine them telling him to program in vim over SSH for an internship interview. Emacs would be a far better choice.
 for (int i = 0 ; i &lt; 5 ; i++){ System.out.println("Java != Javascript"); }
Not going to fix it myself, but the problem is line 1503 of MainFrame.java. Amazon web services now needs a signature calculated from the timestamp and the contents of the request. It's a few more lines of code, but there's a place to start.
I'll take a look at this weekend when I can get back to this project. :)
The lack of a direct link was accidental and has just been remedied. Apologies for that. 
I envy you programmers.
Thanks so much for all of the information!
I like the Head First Java book. I've taken a couple, few, java courses, just got my OCPJP 6 (SCJP) last week, and the text books are okay, but those are mostly non-graphical programs. There are others that delve more into graphical programs like Beginning Java 5 game programming and some others, but I think the Head First book will give you a good enough background to then be able to pick up a book on Android programming. Some of the android programming books might even teach you enough Java that you won't need the other, but I'm afraid I don't know enough about any of them to make an informed recommendation.
You could try [Calibre](http://calibre-ebook.com/). 
Recheck the docs. You can do serialization or read them like you would an XML document. 
I thought Rogers Cadenhead's was informative and hilarious. Java in 24 hours, maybe try 21 days if you know another programming language already.
I also second the Oracle Java tutorials. I am teaching a high schooler programming, using Java as the language, and I assign the Oracle tutorials for the reading, and then assign a coding exercise that is different than from the tutorial pages. I also have live lesson sessions, but you can use r/Java for questions if you don't have anyone to ask questions from what you are learning. For android programming, I'm not sure how much OOP you will need, but it's part of the core Java, and is useful to know anyway. If you want, you can PM me for my teaching materials, such as how I have grouped the topics for lessons and reading, and the exercises that I assign. 
Thank you! I'll have to check these out! 
Oh, quick clarification: I'm not a high school teacher...I have an undergraduate and graduate degree in computer engineering, and I work at a software company. The high schooler whom I teach is the child of my parents' friend who is interested in learning coding, so I'm mentoring him for the summer.
The -----&gt;ENTIRE&lt;----- idea behind the language of Java is the answer to your question.
It's an internship. Relax. They understand you're there to learn, and so don't expect you to know everything. As for relying on Eclipse, if you really can't program without it, you can mount a remote directory over ssh with sshfs or just use Eclipse's builtin sftp browser.
Vim is really, really, really f'ing annoying. Everything about it is stupid, counter-intuitive, and bass ackwards. At first. But after a few weeks you kind of get it. After a few months it becomes more natural. After about a year you start typing :wq at the end of your emails and get annoyed when nothing happens. It is not the right tool for every job, but it is an amazing tool when it is the right tool. I recommend spending some time to learn it. 
Your suspicions are correct. And as your googling mentions, you are getting "&lt;!do" instead of a class header. When you talk about the old computer, is this the server the applet is running on or client?
Java may well have the best training documentation of any language to date. 
Nobody ever learned much by rolling their eyes.
&gt;&gt; they would give me a connection (ssh) to a linux server and that I would have to do a java task which usually lasts for 2-4 hours &gt;If they really expect you to code Java in vim over ssh for an interview, that's just insane. Just tell them, IDEs are part of the language in Java. I don't know about you, but I develop Java code over remote ssh most of the time. On top of that, I do use a text editor (vim/emacs) to code. It is not *that* insane. This may be a test on how adaptable you are. Are you one of those developers who require an IDE to bootstrap code? Can you use maven / ant / javac at the command line? It is an interesting "weed out" test... 
The old computer is the client. The server is hosting the .jar's, .cer's, &amp; a .policy
StackOverflow is your other only hope.
wasn't this the one trying to run operations as root for no reason? [edit] yep, this was it: https://bugs.launchpad.net/calibre/+bug/885027 - http://www.reddit.com/r/programming/comments/lzb5h/
You guys have access to the most important tools. And the creative among you can take this magic language you know and build new tools. I wish I could do that.
Applet always means client. 
if you dominate data structures i don't think that anything will catch you off guard. Search, Sorts, Stacks, Linked Lists and Binary Trees for me are the most important... Good Luck 
I can vouch for this. It's very good and then you can create your own methods and class to read and store this information.
&gt; This may be a test on how adaptable you are. Are you one of those developers who require an IDE to bootstrap code? Can you use maven / ant / javac at the command line? IMHO: If you can't see the benefits of an IDE in Java, that means you never tried to use one other than as a simple file editor. How do you do refactorings in vim or emacs ? As for the build tool, that's another topic, I usually use it in the command line too... &gt; I don't know about you, but I develop Java code over remote ssh most of the time. On top of that, I do use a text editor (vim/emacs) to code. It is not that insane. I totally disagree on this (again, for Java). There are so many basic/quick solutions today for not having to work directly remotely: * Version control systems * Network file system sharing (samba,sshfs,etc) * IDE deployment capabilities * Maven deployment * ... &gt; It is an interesting "weed out" test... I agree using the most simple tool chain is a good test. But come on, a "2-4 hours" test ? This does not make any point. Anyway, I'm always amazed to see the two approaches amongst programmers regarding languages: * The ones that take it as a full ecosystem, including tools, frameworks, librairies, communities and all the stuff around the language. * The ones that focus on the language itself, who often have deeper knowledge about it but don't care about what's around. We need both :)
I didn't realise there were so many, but I'm not sure why you'd use most of the more 'advanced' ones. Seems like it would just complicate your code.
How does the example you give *not* answer the question? There's almost never any ambiguity between lists or maps; you either want a list or you want a map.
Thank you for the response!
So, out of interesting, what alternative do you suggest?
What really bad advice. It is a terrible idea to put ANY business logic like removing special characters in the bean. That's tight coupling an agnostic object to business logic. 
Properties don't help at all with coupling problems. Only remove some boilerplate code.
When did Java get properties? Are you getting confused with C#?
In this case, do you not end up creating very domain-specific objects? Unless of course you use decorators to bring the business logic up to a level higher than the reusable objects.
They move getting and setting out of the interface and into the implementation... Isn't that what altcognito was asking for?
No, I know Java doesn't have properties. I'm saying if it did.
I'm not sure if I fully understand what you're saying. Of course you need to have the attributes, get/set methods or properties in the interface of the object, if you'd like to use them. Regardless of the way you reveal them, the user of your object is now coupled to its internals (i.e. said attributes/properties).
Properties at the language level are a bad idea because: 1) there's no good convention for them and 2) they hide performance deficits in the code. 
The answer is no, because they break basic principles of OO design with encapsulation. The internal field should actually be a date, the date of birth. Immutable, and no setter. The constructor for the object should take the date of birth. You could have a getAge method, but that's not necessary, as all you need is a boolean isAnAdult. Suddenly it's a proper class, and you can still serialize such an object if you needed as well.
This has nothing to do with the "pure functional path". Beans are about extreme late binding within component frameworks like JSF. What you have suggested says nothing about the integration problem of loosely coupled components.
This is very bad teaching. Getters/Setters are a necessity to define beans in Java, and should only be used where they are actually required, such as if when you are writing a JSF web application which needs bean properties to connect data to widgets. Avoid getters/setters if you can. Let your classes reveal as little information about themselves as possible. 
Only 55 million LOC in this release! And who says Eclipse isn't bloated and slow? EDIT: That came across as flippant (partially intended), but their page was advertising that they had 20+ teams working on 70+ projects with 55mil+ LOC. LOC is a BS metric, as are the other two metrics, but they point to a serious issue: Eclipse is slow and bloated, and nobody's bothering to reduce the bloat. 
Prepared statements are actually very important. First, they allow you to provide arguments to the query (via '?' placeholders), which are far more secure than hand concatenating arguments. PreparedStatements are the #1 to prevent SQL injection attacks. Second, they can improve performance because the database has to do less work to figure out that it's seen this query before.
They are mainly for called stored procedures in the database. If you have a complex statement it can be optimized by creating a stored procedure. The underlying database can optimize the stored procedure. If you do not use a stored procedure the database may have to perform a lot of underlying work each time the statement is called, stored procedures are optimized.
Oh good. I thought I was dumb for not knowing what properties were (and I don't know C# that well).
People use them all the time, with or without stored procs.
PreparedStatement is not for stored procedures. That would be CallableStatement.
That's a good idea, I hadn't thought of that.
This was posted before, and my issue then is the same as my issue now. Trying it out is only half of the equation. Without at least some general pricing information, it can't really be seen whether it's good value or not.
Exactly, what happens here is that when you run an SQL command it must be parsed and compiled, before it is run, if this SQL command is going to be run frequently, it is in your best interests to parse and compile once, and run the compiled SQL each time. That's what PreparedStatement offers you. Not every DB will experience the same benefit as others, but generally speaking, your code will run faster with PreparedStatements. And also big plus about preventing injection attacks.
I have professional experience in software-dev since 2003, but I've been coding since 1996. I'm an electrical engineer turned developer, so from '99 to 2003 I did work for e.e. industry. I know £25K is entry level salary, but it's the minimum wage that will allow me to bring my wife and kid. I know I should be asking for 35K~40K at least, but the thing is I want to move there ASAP - before the end of summer.
It pretty much depends on whether all your maven plugins have m2e equivalents. If your pom is very simple and/or uses only common plugins, m2e works today pretty well (I've been using it for a long time). For example, if you use Appfuse, don't even dream of m2e (Appfuse uses many "extra" maven plugins by default) I did a fresh Juno install with m2e today and the whole IDE felt smoother than before. Maybe it's the fresh install or placebo effect but I'm more impressed by Juno than any Eclipse release so far :) So far I've never been able to upgrade without problems on release day...
Running special reports against a production database generating charts using JavaFX. 
Hint: Rewrite it in Java 7. 
I work for a large enterprise company, we use java everywhere.. But with spring, gwt, hibernate xmlbeans , testng etc.. I'm always getting job offers for java, so lots about. Maybe learn objective c too, it very similar.
Web applications. Let me be more clear - for work (for hire company) we use mostly Java because we've built an amazing web framework. Personally I use Python for no reason other than I wanted to learn it. Good to have experience with dynamic and static languages.
In the context of populating boolean fields, from a database. A null value in a database boolean field indicates that the field wasn't populated by the user. You don't know if the flag is true or false, because the user didn't answer the question. 
You might be able to use 7zip to view inside the jar file and locate the class being used. Edit: removed link as already in original post
If you like the MVC frameworks, try Grails. It's Groovy instead of Java, but the syntax is very similar, but you get a bunch more syntatic-sugar. Grails is inspired by Rails and uses Spring at its core. It's basically the best of all worlds. You can then deploy your Grails webapp to a simple servlet container (like Tomcat) instead of needing a full blown JEE app server.
i work for a state gov't IT department doing software development, writing applications for all the rest of the state gov't departments. we have about 80 java developers, and 3 .net developers. since i started 5+ years ago, there's been a constant opening for more java developers - we just can't find enough.
Ah, if only it were that simple. Until the app server is updated to a version that supports Java 7, we're stuck, and convincing management to allow me to install a newer version of the app server just to make my life easier is no easy task. Still, we did upgrade to a version that supports 1.6 last year, so the process has begun, but I'd estimate that 60-70% of the code is still using unparameterized Lists/Maps, Iterators, etc., because we don't have the time or budget to rewrite stuff that *usually* works, even if it's a nightmare to extend. 
generative art experimentation
Yeah. I notice a lot that web apps will be done in Ruby or Python and then when it picks up traction the company will switch to Java.
Fairly small company here, we use it and JNA to create a cross platform server setup that can interface with a lot of different software. Basically has stopped us from watching companies we partner with write the same thing 10 times, and watch as every time it gets written various parts (SFTP, encryption, etc.) get done in completely retarded ways.
And being plug-in based, it really depends on how much you choose to install. 
I made my own little class of "shortcuts" that overrides/alters a few common methods for all my programs. One of those was the wait(long) method in which it looks like this: public void wait(int sec) { Object.wait(sec*1000); } My apologies, I should have mentioned it in the above post.
Can someone point me to the "What's New" document? (Indigo user currently)
You may wish to try Thread.sleep(long milliseconds) as its a better way of handling but what are you actually doing in this loop. simply looping for 2 seconds infinitly with no other reason doesn't seem to have a point.
So I use java at work, and probably because I'm familiar with it, when I'm at home I tend to do my services and business logic in java deployed to glassfish, and then (if i can), make use of the data from those services using a javascript framework. (I'm quite fond of Dojo)
sleep() and wait() have different semantics, and despite what CuriouslyGeorge says below I think wait() is more appropriate here. sleep() doesn't come back until the timeout is done, while wait() allows the current thread to be woken up before the timeout fires. 
yes however as he has nothing that would trigger it there isn't a reason to. Also honestly he shouldn't be waiting in a runloop anyway. He should be doing event response.
If there's something that can't happen until the Submit button is clicked, then attach an event listener to the Submit button, and use the event listener to start whatever the process is. 
Please stay away from struts, no one likes it. You can always look at [matt raible's comparison of java web frameworks](https://spreadsheets.google.com/pub?key=0AtkkDCT2WDMXdC1HOEtnUHpCejJMbUhGeGJWUmh5dVE&amp;hl=en&amp;output=html) I personally like grails for quick stuff, (although play looks pretty good for that too). And Spring MVC for anything at work or client related. Spring and grails both have tremendous documentation
Sadly, not available through p2p yet.
At the moment, I mainly use it for Android app development.
I work for one of the top e-commerce consulting firms in Germany and we use Java extensively for B2C and B2B multi-channel e-commerce sites. I previously worked in the states for a fortune 500 company and we used Java for the internal Portal that reached hundreds of thousands of people daily. There is a reason you are learning Java in school.
* [JavaRanch](http://www.javaranch.com/) * [StackOverflow](http://www.stackoverflow.com/) * and, of course, /r/java :)
It depends what you derive from this metric. For example if the LOC decreases over time I'd say it has a positive touch to it.
We're using it in research at University for Data Analysis and Modelling.
You cant find enough because you dont pay enough. 
Spring is where it's at. JEE has caught up with annotated DI and it does a lot of what Spring does these days. Spring has forged ahead with lots of new things though. As always, Spring MVC is a good "heavy" framework for enterprise apps.
We use it for server-side development of our applications. We're heavily focused on SOA and SaaS implementations and Java works exceptionally well there. At a basic level, SOA and SaaS deal with writing components of code as services - generic services, in our case - where we re-use a service (e.g. contact management) for multiple different, often unrelated, applications. We also use Java to develop our endpoints, the entry points into our applications, such as web services or message handlers. We used to use JSPs for the front end but abandoned it a few years back in favor of pure javascript/jquery/html/css for a cleaner separation. I would suggest sticking with Java, especially if you enjoy it. In the business world, there is a huge demand for Java developers world-wide. If you continue to get good in Java, you will have many opportunities ahead of you. As for Struts, it was surpassed by much better frameworks long ago (e.g. Spring). My own personal experience has shown me that it's used primarily for legacy systems. I suspect that most companies that continue to use it for new development do so because they're familiar with it. The overwhelming majority of job postings that I have seen for the past several years look for Spring, not Struts. You mentioned that you used Java to build a small website. You've figured out that that's not a good use for it, too. Python is your better choice for something small. As for practicing and learning Java, there are a couple of things that you can do that might help. Designing your own application is an excellent way of learning and getting practice. A simple web-based address book might be a good place to start. If there's a different type of application that might be of interest to you, by all means do that. After a small application like that, I often recommend creating a small text-based RPG to make things fun. Again, it depends on your interest. The best teacher is experience so just do it. 
I think you have to be honest and acknowledge what Java's strengths are - Unicode, dynamic loading, packages, portability (shh), security, simple language (thus very maintainable, at least at a non-J2EE level). If you're trying to write a five-page web app using Java, you're gonna have a bad time. The best Java I've ever seen is the entire Eclipse/OSGi infrastructure. Personally I use Java mostly for desktop applications (Eclipse/SWT), build infrastructure (Ant) and game development (JMonkeyEngine). Spring and Surf seem to be pretty good frameworks for Java web development. Alfresco uses Surf + FTL templates + Rhino JS for server-side code but it's still pretty clunky. (For the web I still use PHP/Symfony 1.x but it's definitely showing its age - I probably need to get into Rails soon, I still hate whitespace-meaningful languages though.)
Contrary to most everyone here, i work on a fairly big distributed simulation system. No real web work invovled, its great.
Oh, let's see.... Low level server applications, high level web applications, middleware, business logic processing (aggregating and reporting on data). Pretty much anything that has to run reliably, long term, and be high performance. I use other languages as well, but Java covers most of the bases.
I have never actually used AOP code in production. It all stayed with little helpers do trace/debug difficult code. We use Spring a lot though and the Spring container offers a simple form of container-based AOP that we actually use. Stuff like @Transactional to declare transaction boundaries or , @Cacheable for caching. I guess access control might be another area where you might be tempted to use AOP. AOP is of course a turning-away from fundamental design principles of Java. It violates the isolating nature of classes, it might introduce totally botched code akin to the proverbial #define while if C mishaps. It might be worth it if used sparingly. 
I'm not sure how much time you've spent in the world of "enterprise" web development, but in my experience, writing unit tests is not as straightforward as it is for your average desktop app. A lot of our complex business logic is built into these massive, dynamically-generated SQL statements, and the "views" are a mishmash of HTML and embedded Java code. I'm sure this is not the case for every web app, but like I said, I'm stuck dealing with years of poor design choices on top of a constant stream of new feature requests. 
It looks like you figured what you did wrong by using `wait()` instead of `sleep()`, but there's another lingering issue. Is the `done` boolean declared as `volatile`? This indicates to the JVM that the value may be updated by another thread. Otherwise the JVM may optimize your loop into an infinite loop since `done` is never updated in your loop. A `sleep()` or a `yield()` will probably result a synchronization, but it's not guaranteed. Also, as kreiger said, you're definitely misusing the UI framework here. 
Agreed - I oversimplified it 
If you are using JEE then, sure, you deploy to a JEE app server. However, we are talking about using Spring, which isn't JEE and doesn't need a JEE implementation. Spring only requires a servlet container. Why bother running and maintaining all the JEE stuff that isn't going to be used anyway?
The most common place it's used is probably with 3d graphics libraries like jogl, java3d or jmonkeyengine. If you want to learn more about JNI doing something semi-fun, then you might want to play around with these libs.
I think twitter is a modern example of this ... started with rails I believe, but not sure what they switched to. EDIT: I just looked it up and they indeed switched to java.
You're confusing server platforms with framework implementations. JBoss uses Tomcat as its servlet container. TomEE also uses Tomcat. CDI is and has always been provided by Spring. Also, I'm curious as to how you can recommend a technical implementation without having any foreknowledge of the application's architecture or similar requirements.
You should always use prepared statements over regular statements any time you make a query or do anything that doesn't alter the database structure (e.g., table alters, grants, etc). As banuday17 pointed out, they are safer, faster, and easier to use.
Spring is popular, ergo Spring is bad, I guess. It's cyclical. When Spring came out, everyone was shouting to dump EJB for Spring. Now that JEE is back, it's popular to say dump Spring for JEE. It'll be something else in a couple of years. One small correction, btw. Spring only requires a JVM as it's intended as a general application framework. You only need a servlet container if your app needs http endpoints or components such as SpringMVC.
&gt; Also, you're saying that the JNI executes things in a (even if it's miniscule now) faster way? Hmm ... I'm saying that it was faster to run our code in C than in java, but it was only important for this one (very important) thing, so instead of doing it in java we did it in C and called with JNI. Also, this was probably 8 years ago ... a lot has changed since then (the app is no longer used).
&gt; AOP is of course a turning-away from fundamental design principles of &gt; Java. It violates the isolating nature of classes Not really, because AOP is just sugar for creating proxies, which are just a specialized form of composition, which is a core part of Java. The contained class remains isolated. The problem with the C preprocessor system is that it is just text replacement, and indiscriminately modifies text without any real intelligence for what it is doing. Compare this to a real macro system like you would find in Lisp. Although, I still agree with Alan Perlis: Syntactic sugar causes cancer of the semicolon.
It kind of makes me sad to think someone who's never used Java beyond school is looking at Struts and Spring. You talk about web scraping with python, and then Struts and Spring with Java. Is there nothing in between? I've been a Java developer for 15 years and have never used Struts (ugh), Spring (less ugh, but still), Hibernate (ew), or EJB (kill-me-now). What did I use? GWT, AspectJ, Velocity, and home-made ORM that was probably somewhat similar to iBatis. But still, these are big app things. What about a small app that needs none of this?
Do you use Hadoop? How is it distributed?
Yeah. After reading the other comments, I don't know what I was thinking. I basically had my program set up to wait for input inside the while() loop and when my ButtonListener was fired it would go in and change the boolean from the actionPerformed() method. Looking back, I've made this same mistake countless times inside almost all of my UI code, but my school assignment code was much better (I assume). I'm currently going back through and changing all of my code to match my school code which is organized where: methodCalledFromRunnerClass() { setupGUI(); //all listeners, etc. assigned properly } anotherMethod() { doStuff(); } class ButtonListener { actionPerformed() { anotherMethod(); } } Would this be the "better" way to go about it I'm assuming? Submit button fires off submitMethod(), Options button fires off optionButton(), etc.? EDIT: Also, apologies for the formatting.
Don't forget there's also the more recent, easier to use, [JNA](http://en.wikipedia.org/wiki/Java_Native_Access). Here's a Stack Overflow discussion about the use cases of each of them: http://stackoverflow.com/questions/1556421/use-jni-instead-of-jna-to-call-native-code
&gt; which are just a specialized form of composition, which is a core part of Java. The contained class remains isolated. For the simple proxying case, that is true. You can however easily have around advices that wrap themselves around third-party app A to third-party library B, without having to change them. This is not something you could do with simple composition.
If you want to interact with hardware or device drivers you will often need to drop down to the native code level. A lot of times you will need to pass pointers around as well. Not sure if it has been mentioned but it would probably be worth dropping to native code in any case where you can pass in a granular problem set to solve NP-hard style algorithms. Most of these algorithms (like the traveling salesman) have pretty good extant solutions that are orders of magnitude faster than anything I assume you would have time to develop in-house.
pour*
JNI is probably going to be much slower than Java method execution, considering the overhead of translating between two layers, though I don't have any empirical data to confirm that. Of course the C++ code you invoke may run faster than the equivalent Java code (if its possible to have it implemented in Java). However, it is also possible that the Java code runs faster in certain cases, since it has runtime optimization. Of course this will only happen in rare cases, but it's worth mentioning. Example: http://keithlea.com/javabench/data Short answer: don't use JNI unless you know for sure why you're doing it. :) 
that's for javascript, not java
Thought someone here would appreciate it. You just need to watch to the end. Its a bit of comedy, a cross between Oceans 11 and Lock stock * two smoking barrels and its all about Java. 
&gt; This is not something you could do with simple composition. Sure you can, as long as the third party class is not final. Basically, Spring uses CGLIB to do something like the following: public class ThirdPartyClass { public void foo() { } } public final class ThirdPartyClassProxy extends ThirdPartyClass { private ThirdPartyClass realInstance; public ThirdPartyClassProxy() { realInstance = new ThirdPartyClass(); } public void foo() { adviceBefore(); realInstance.foo(); adviceAfter(); } } Simple composition is all you need to do simple AOP. No code was changed in the third party class. It also explains many of Spring's limitations (you can't apply advice to final methods, for example).
Good for making Java bindings to existing C/C++ libraries. for example OpenGL api has C/C++ interface. Good for embedding JVM in native application (better user experience) There are already some native windows wrappers for windows - I prefer WinRun4J Excelent for performance critical things. (you need to manipulate bitmaps pixel by pixel fast? better write it in C)
One great programmer (Notch, creator of the ever-popular Indie game Minecraft) [wrote an interesting article about coding in general](http://notch.tumblr.com/post/15782716917/coding-skill-and-the-decline-of-stagnation) that mentions that, believe it or not, he does *not* believe in public accessors and modifiers for public variables. In my opinion, using them is just neat -- think about it, that's not the only programming practice that is just done due to convention. Take Java: capitalize your class names, don't capitalize your method names, and always, **always** use accessors and modifiers. So, honestly, it's a topic that's up to the discretion of a programmer. However, if you're making a library or something that will be used by anyone besides yourself, you'd be better off using the gets and the sets. But at the end of the day, it's up to you.
I used both JNA and JNI not too long ago to interact with an existing dll written in C++ (TesseractOCR). In the end I got everything working for both JNA and JNI but I felt JNA was better because it felt like doing things in more the "Java way". It took me an entire day to get everything working, whereas I expected about an hour, but the plurality of that involved having to install Visual Studio multiple times until I hit on the correct version/libraries to get the native dll built from source without showing a compile error on a blank line in some template. Here the Java troubles I had: * If the native code crashed it would crash my whole java program. I never really found a solution to this but instead made sure I was only ever passing in input that *shouldn't* crash it. Debugging the native code was outside of the scope of my project. * 64 bit jvm needed a 64 bit compiled dll, and 32 bit jvm needed a 32 bit dll. * Adding *nix/mac support would have been extra effort. This wasn't a requirement for my particular project so I didn't pursue it. The need for multiple versions of the dll added extra logic to try to determine which version of the jvm it was running on, which there isn't an api call for so I had to guess based on parsing some string info about the runtime, but it may not work in the future. 
&gt; Sure you can, as long as the third party class is not final. And you can control the creation of the non-final class. edit: I'm not talking about the Spring AOP here. Real AspectJ load-time weaving.
I thought were talking about Spring AOP. And you can just as easily control the construction of a non-final class as well. CGLIB automates what you would have been able to do using the method I've demonstrated, within the confines of standard Java. AspectJ is another beast altogether. It is AOP on steroids, and just plain evil IMHO.
Nope, you didn't mention search in your list of methods. If I want to find "mark baker" in my list, the best I could do would be to have a sorted array and then do a binary search giving you a O(log(n)). A hashmap using that name as a key wouldn't have to search - it would do a constant time lookup! Try it with a list of a few hundred million values, the difference is orders of magnitude different.
So, you can iterate over hashmaps using the key set, but a better approach if you need a hashmap to iterate is a linkedhashmap which also maintains an orderly list of elements. The groovy language uses this for the default map implementation, and it's quite useful! A raw loop over an arraylist is probably faster in constant time, but not a huge amount. If you need both quick lookups and huge iterations, linkedhashmap is very nice indeed.
If you're a visual learner, this Youtuber put together a video playlist of various different techniques and game tutorials using Eclipse and the LWJGL library. Check it out. http://www.youtube.com/playlist?list=PL19F2453814E0E315&amp;feature=plcp
I cannot recommend JNA any more vigorously!!! It is SIGNIFICANTLY easier to use than JNI and can work with existing libraries.
It all makes sense now! I wondered the same thing. I'm an entry-level IT guy in a sizeable company that makes extensive use of Java, but kept looking around and seeing others outside the company dabbling in anything but. But I do know there is a demand for Java: one of our guys recently retired but wasn't ready to hang it up yet -- he had several job options for his extensive Java experience, and will be able to work as long as he likes.
You are going to let "peace of software" slide?
I would watch that movie... if they made it a movie.
I'm a new hire at a large company and one of my first assignments was to use JNI to implement a Event Logging feature that used the Windows Event Viewer. Basically, we used the Windows api's to call from c++ and then did everything else in Java. It was pretty useful, but unless there's an extreme circumstance, you'd be better off just keeping with Java or C++ for a full application.
I would recommend using a JDialog and setting the modal flag to true. A modal dialog will block input to all other dialogs, keeping the modal dialog on top. The Java 1.6 ModalityType enum gives you some options regarding which window hierarchies you want to disable input to. The JFileChooser showOpenDialog and showSaveDialog should already create modal dialog boxes.
Yep that worked! thanks a million (the later 1.4). Now I can finally progress. 
The word you're looking for is ["modal"](http://en.wikipedia.org/wiki/Modal_window).
http://i.imgur.com/cSu6S.jpg
This article doesn't the mention Executor Pool, Callables, or Futures. Simple Runnables are deprecated I think. I'd love to see a cogent explanation of these.
I would imagine that it is 2x as groovy as 1.0 was. EDIT: And now I feel bad that your only response was a poorly executed joke.
Yes and no: from all I know, Runnable is *not* deprecated in any way. However, Callables, Futures, and so on *do* deserve more attention; maybe I can do a follow-up for **JavaWorld** on them. Thanks for raising the point.
depends, what's the project? swing should be plenty as you can customise pretty much everything about it. try googling for "swing hacks" by o'reilly for ideas on jazzing your UI up. or you could look for a different look and feel, or write your own.
if you go the Swing way, have a look at the following to improve the slickness of your UI : [JGoodies's Form](http://www.jgoodies.com/freeware/libraries/forms) layout [JTattoo](http://www.jtattoo.net/) look and feel [Jide](http://www.jidesoft.com/products/JIDE_Common_Layer_Developer_Guide.pdf) components in their opensource commons lib [Silk Icons](http://www.famfamfam.com/lab/icons/silk/) (a Creative Commons licenced set of icon that is one of my favorites)
You only use LWJGL to make the 3D graphics part of the game. You need to use or write a game engine to make all the other parts of the game.
I don't even think it would run without an extra escape sequence before the !
I think is nice too ...
Indeed, MD5 is like a hammer in a toolbox. Who the hell doesn't have a hammer?
TIL There are jvms without md5. Holy crap.
Implying that PHP doesn't have [md5](http://php.net/md5)?
Haha this is brilliant :) thanks for the link
&gt; customized things like buttons and text fields. In this area JavaFX is winner http://fxexperience.com/2011/12/styling-fx-buttons-with-css/ My advice: Learn JavaFX 2.x, deploy/target on JavaFX 2.2+ :)
upper midwest (probably no surprise there)
&gt;IDE suggestions You can't go wrong with eclipse, even though it's somewhat bloated. &gt;re-learn i suggest you learn about the new features first. everything else will come back quickly once you start to code again. if you didn't do any java since 5 years you probably want to readup on enums and generics first.
Reminds me of something like the following I once encountered in code: try { ... } catch (BlaException bla) { // Should never ever get here, but log just to be sure // and to please Sonar. logger.info("The impossible has happened"); } Guess what one day appeared in one of the log files... right! 
I'd just look at some code online, and try to replicate some of the most simple stuff. As Tok-A-Mak said, there have been some additions to the language since 2006, such as generics and a couple of other things. You might consider look at [Coding Bat](www.codingbat.com), which can help you understand some of the basic principles again. Hope that helps some! Luckily, I don't think the encryption techniques will be too hard in terms of advanced topics.
That's exactly what I was thinking. Sounded like a good idea to me at first glance :P
http://www.xlsoft.com/en/products/jet/jetmyths.html http://www.excelsior-usa.com/articles/java-to-exe.html
I code all week in Eclipse, and it's basically shit. It's buggy, intellisense is slow, hotkeys are unintuitive, I need 4 gb of ram just for the ide, everything is basically a plugin. (forced to use eclipse at work) I go home and I use Netbeans. I can code a project in 50-70% of the time it'd take to code in Eclipse. 
Java is mostly used in enterprise systems now a days. Due to hosting cost of java most people use PHP/python. IMHO java for smaller web applications is an over kill
It's all about priorities and expertise. I'm still using SpringMVC for my day job, but I'm pushing Play. You absolutely can use facelets, etc, to connect via websocket. The only issue is the server -- Jetty or Glassfish provide support for websockets, but most commercial JEE servers don't.
Rotation matrices are what you're looking for.
What would they do? Edit: figured it out.
Use a [lineartransform matrix](http://en.wikipedia.org/wiki/Rotation_matrix) applied to the image pixel map
Forget applets. Start reading about jsp and servlets if you want to do web stuff within the java stack. On phone so can't link, but get your hands on a copy of the head first jsp and servlet book. Also prepare to be underwhelmed at what you can do with it, its enterprise java, designed for enterprise applications. If you want to make 'cool' looking websites then you need to look into front end stuff like html5, JavaScript, CSS and probably Ajax.
Try Google Web Toolkit. It shields you of most of the other technologies you need for web development.
Take a lookout Grails or Play. Most of your business logic will will be the same, but depending in how you've coded your controllers you may have to move some or most to the model. Hopefully you don't have any business logic in your views. Edit: and learn javascript (jquery makes this easier) and HTML/CSS..
You'll want to use a servet/jsp combo to provide the data. Or forget about Java and do it in php.
Dude, LWJGL is just a thin boilerplate over OpenGL, OpenAL + additional things like input handling, texture loading, windows, etc ... Your question is like asking "how the hell do you use OpenGL to make 3D games? Tutorials make no sense to me!" - What I mean is.. you need to learn how to use OpenGL - that's it.
You don't have to write a serlvet to use GWT, not directly.
The GWT tutorials are pretty good, it really is like writing a swing application.
True, but knowing what's going on in the background instead of just throwing a component in is the difference between science and magic.
Cool thanks, I'll do that.
I don't know, is good, but not necessary, at some point, you need some level of abstraction.
JAVA WEB DEV in 12 hair-pulling steps. :) You'll start with Tomcat. 1. build a simple servlet that returns a hard coded "hello world" HTML result 2. build a simple JSP that produces a hard coded "hello world" HTML result 3. build a JSP that posts a form to a servlet and returns a hard-coded result 4. build a JSP that posts to a servlet that connects to a database and returns something from the database 5. learn about Model 1 versus Model 2 (MVC) JSP architecture; build a "controller" servlet and implement a Model 2 JSP/combo 6. Take a look at Struts and/or Spring MVC for mature "Model 2" architecture frameworks That's the basics. The advanced topics include: 7. install GlassFish instead of Tomcat 8. use JSF instead of JSP 9. PrimeFaces (JSF widgets) for kickass Javascript rich web UIs 10. JPA/Hibernate for Java object-to-database-table mapping 11. EJBs and dependency injection 12. JAX-RS restful web services Take your time, have fun, it might take years before you learn everything to a fully functional level. I hope this helps!
I agree that a working knowledge of the servlet engine is important for a developer starting with GWT. Beyond that, GWT is likely an easier learning curve than the JSP/javascript route, especially for someone coming from a thick client java UI background. 
I have no idea what you're talking about, but you may be looking for Javascript, not Java. The two languages are unrelated.
If the [Lotus Notes 8+ client](http://www.ibm.com/developerworks/lotus/library/notes8-new/) counts then you're a bit late with your prediction.
Look at the various frameworks like Spring and Struts and Grails. I am partial to Spring.
I am sorry, again I am an idiot with programming, I am an amateur designer though lol.
Even if you can perfectly convert java code to objective C using XMLVM (which is unlikely), the iOS APIs will be completely untestable in java. This seems like the most difficult possible way to create an iPhone app. If it was easy to convert java to objective C, there would be a million converters out there to automatically port android apps to the iPhone. There are two paths that seem to me to be much simpler and more useful in actually learning code. The first would be to just learn objective C. Sure, it's a different vocabulary, but like java it's an object oriented language, so you should be able to pick it up relatively quickly. I guarantee you having a basic knowledge of java and objective C is a lot more useful than having knowledge of how to awkwardly port java to iOS. The second possibility would be to create your app on android instead. That'll give you a lot of experience with how basic app programming and APIs work, and if you want to create an objective C app for iOS afterwards that'll give you a huge headstart. Developing for iPhones is expensive... it's $99 per year for a license. For that price you could pick up an old android phone and run android app testing on it for free.
I agree with hottie, go native or go home. I love java and iOS, but the two are not made for each other. If you cannot live without java, go android, but if iOS is a must, then you should be using the native Apis anyway - how else are you gonna get beautiful hardware accelerated quartz effects, nice UI elements, and drop dead simple access to storage and networking?
Thanks for all the answers. I have read what everyone have said and i have concluded that i should learn objective c. I do not have an android phone and i am not willing to buy one since i have no need of two phones, and coding is just a hobby for me. 
I'd go for the IntelliJ Idea Community Edition IDE over eclipse &amp; netbeans. It's free and well worth trying out. I much prefer it over the other available options
I agree with the others, writing an iPhone app in Java is far from ideal. If you don't want/can't afford to write a native app, you could always build it as a webapp using one of the several mobile web frameworks ([jQuery Mobile](http://jquerymobile.com/), [Sencha Touch](https://www.sencha.com/products/touch/), ...), then host it on a server or package it with [PhoneGap](https://phonegap.com/).
Javascript is the language that every web browser runs, so it's the standard for web pages to do anything that requires programming. It's the only language you can put in a web page and expect it to run in a standard web browser. Java is a language used in a lot of corporate programming, mostly on servers or sometimes in standalone desktop apps. Although it's technically possible to run Java in a web browser, it requires a plugin and still ends up being separate from the containing web page. The code on that jafiles.net page is definitely Javascript. If you dug into that code deeply enough you might figure out what's needed to access files without completing the survey. It's probably not a beginner's project, though.
Can one create web apps just using client side technology? accessing databases, displaying data, etc ...
I think the new OS X look is a bit ugly.
Thank you very much. You seem like a smart person on programs, how should i open a .dll file? and what am i expecting to find?
It's just straight amateur, the toolbar icons have a white matte on the dark metal toolbar.
I'm a Tomcat user so that hasn't come up yet.
If you know java why not write some server side, then use html/css for a front end and then use an iOS wrapper?
I've written a transaction manager in aspect j with tapestry-ioc as the DI framework. Turned out better than expected.
Missing a lot of projects. PrimeFaces? RichFaces? JSF (Mojarra/Myfaces), Java EE in general...
well, nice list, but with the top rated framework having only 10 ratings it's significance is about zero. Is this site a startup? Or, in other words: Will there be more ratings coming ? I would support this project, but my experience is rather low (im a student), so take this comment with a grain of salt
Like WebSockets in Grails, Play, Lift, ROR? A well designed framework accommodates extensibility.
Not sure if you know, but you can change to the old look and feel. Windows &gt; Preferences &gt; General &gt; Appearance. Then change the theme. I personally like the new look, but I have seen a few people post that it's not for them.
I think that's just down to the fact that the site has a relatively low number of users- I mean, a number of projects appearing at the top have 1 or 2 votes, which isn't that useful (yet). I'd assume if they manage to increase the user-base, the range of projects include should improve along with the usefulness of their rankings.
Has anybody been able to get m2e running with a svn provider? The only provider I see in the marketplace is the git one. It used to have a bunch. Edit: Until it's resolved in the market place, it's possible to get it working with http://community.polarion.com/projects/subversive/download/integrations/update-site/
Misleading title - not all of these are frameworks.
Try the Netbeans tutorials www.netbeans.org . They have a lot of quick tutorials on various frameworks that can give you a quick overview of what they are all about.
Also, it depends on the definition of "top". Spring isn't very enjoyable to use, but you're going to have trouble finding any non-entry level java position if you don't know Spring. Same with Maven. Guice and Gradle are easier and more enjoyable to use while serving the same respective purposes, but few places use them. 
This is my standard screener question. I even ask the candidate to code hash map .
I don't like it, but we've been living with it... Everybody around here uses eclipse, but even if they didn't, the additional config shouldn't impact anyone using a different IDE.
That's true. "Luckily" I get to know Spring and Maven through my education and as I saw this post I thought "Let's have a look into it - let's see what else is out there". I wanted to expand my broad knowledge of famous / often used frameworks, but the keypoint why it was a bit disappointing was the aforementioned low user-/ratings-count. Nevertheless, to me it looks like a decent list, with enough room for experiments
Perhaps I am not understanding the simplicity of what I am asking... But I already have a JFrame in the project that opens new Jframes on button press... And I want to edit those frames within the same project. Am I retarded? Sorry to ask what seems like a basic question, but I am really new to Java and am only really learning it to make a standalone version of a MATLAB program. 
Were the other frames created in Netbeans? 
Yes, but I can't see them until I run the program and push the button (at least so far that's the only way I have been able to see them). I built those panels from the bottom up by putting their construction code as a result of the action listener for a button in the main JFrame of the project. 
Here's a big red flag: Somehow, GWT gets a better rating than Play. I think they need to get some more ratings.
&gt;Developing for iPhones is expensive... it's $99 per year for a license ? A license for what, exactly?
Why is it so hard for people to understand that people read in straight lines? What a terrible site layout; they need to have a fixed width for their containers so they don't cascade so terribly.
Have a look at doing something like uncle bobs bowling game kata. Just Google it I'm on my phone, helps you learn some tdd which is very useful. Also try the daily programming reddit linked in the side bar. They have some good projects on there all the time! 
It's a neat idea but it could do with more features to show the structure of the classes: Package level (and jar or bundle level). Overview for each class (with ability to show inherited methods/members). Type hierarchy. I'd find it difficult to review something without those.
Here are some of the sites I've used. Enjoy. * [CodingBat](http://codingbat.com/) * [JavaRanch](http://www.javaranch.com/) * [Project Euler](http://projecteuler.net/) * [Dream.In.Code](http://www.dreamincode.net/forums/forum/32-java/) * [Quiz4J](http://www.quiz4j.com/contest.do)
I can understand that. When you do java ee, netbeans kicks ass though. The GUI editor calls forms, so there is q lot less work involved. Also, using the code generation aspects works pretty well.
Write a simple http server that displays "hello world" when a browser connects to it. Then build on that.
Is there are a good place to learn how to use API's. Seemed related to your post
You mean Java SDK APIs? It's usually best to just read the Javadoc directly, as the APIs are well documented. But if you're new to Java (or programming in general) it might be easier to start with one of the O'Reilly books about a particular part of the API or how to solve problems in Java around a specific topic: http://oreilly.com/java/ The nice thing about this is that it creates a better context for learning, so the goal isn't "learn java" but "do ___ in Java". Plus you might end up doing something useful. For instance, from reading "Java 2D Graphics" you could probably write a tool that generates a chart based on data in a text file. Then with "Java Servlet Programming" you can probably put together a little webserver that generates charts based on input from a web-form. Along the way you end up learning other APIs, such as the collection API (because it's used everywhere). "Java Cryptography" is also a good beginner book. It shouldn't be too tricky to write a program to encrypt data (text or binary), and some of the concepts (hashes, salts, private/public key) are really good to know. If books aren't your thing, there are plenty of other resources online. Books are nice to read offline without getting distracted, but to be honest nowadays I prefer to just jump in and start testing things out. I think I've lost patience for books :) Also, if rolling your own http server doesn't sound interesting, but you want to be able to process/serve HTTP, you can always use this: http://wiki.eclipse.org/Jetty/Tutorial/Embedding_Jetty 
especially with introduction of servlets 3.0 I was hoping there will be some cool frameworks out which are based on servlets 3.0 instead of merely "supporting" it
&gt; Could you recommend information that would explain how exactly the JVM works at the low level we're both talking about? There is an Oracle wiki "HotSpot Internals for OpenJDK": https://wikis.oracle.com/display/HotSpotInternals/Home &gt; On the other hand, when the JVM JITs a bunch of bytecode, what would I see if I looked at the corresponding assembly? I am not sure I understand this question. You would see native code that does exactly what the original bytecode prescribed. What else could you expect? &gt; If the JVM HAS to be part of the picture regardless, then what kind of interaction does it have with the native code, and how is that interaction technically achieved? Via calls. That native code would call functions provided by the JVM, such as object allocation, class loading, etc. Just think of the JVM as of a runtime library that is called implicitly. Roughly speaking, when you write "new" in C++, you expect to see a malloc() call in the resulting assembly. When you write "new" in Java, there will be a call of some memory management function provided by the JVM. That said, the compiler may inline or optimize out some calls. For instance, small Java objects local to a method may be safely allocated on the stack (except when stack is scarce, e.g. you run thousands of threads on a 32-bit platform): http://www.ibm.com/developerworks/java/library/j-jtp09275/index.html
Cool, thanks for the clarification. Will check out those docs as well.
You mean the Leapocolypse. That scary enough for you?
Do you mean a Java applet? Ajax doesnt really have anything to do with Java specifically, though you can implement JSON services in Java
i know ajax thats why i mentioned that...
So basically you want to deploy a centralised web server running a RESTful architecture running services returning JSON to AJAX running on a web page to drive your chat. Have a look at http://www.restlet.org/
All that to send a few characters between people over the Internet... When did it all start going so horribly wrong?
To be fair, it can be as small as a few classes
/r/dailyprogrammer should keep you busy.
Apache StringUtils? http://commons.apache.org/lang/api-2.5/org/apache/commons/lang/StringUtils.html
http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Splitter.html
It would only leave blank entries if you had consecutive delimiters, and a non-greedy pattern. If you're splitting on `"\\s"`, you should be splitting on `"\\s+"`.
So as to not get the blank entries in between spaces.
What /u/__konrad said, yes.
Hi Mike, Thanks for link. But didn't I mention that keys.hashCode() will be used to find bucket location and than subsequently keys.equals() will be used to find entry ? let me know if I am missing something, happy to correct myself.
Is there no function that takes a string as the split point? Like ","
I have this. String toSplit = x + "," + y + "," + z + "," + id + "," + bytes x y z id and bytes are all string variables printed into the string named toSplit I want to get a string array of the values using the "," to split the strings. Then later read the strings back. So the value of x value of y ect. Is this possible? 
I've just, as in a last week, started looking at Atmosphere. It's not at 1.0 yet, but is this the kind of cool thing you're looking for? https://github.com/Atmosphere/atmosphere#readme
you accomplish this with a one-character regular expression in split.
Ok, it wasn't clear there. sorry for the pain.
Can you guarantee that `x` `y` `z` `id` don't themselves contain commas? If so, you should escape, and later un-escape, the commas. (I imagine Java has libraries for CSV, if not full-blown String serialization, that already deals with all this.) 
If you're reading from web forms: also beware people who unwittingly paste in things that *look* like spaces but don't match `\s`, like unbreakable space, thin white space, etc. (I'm not sure why Java1.7 didn't include the equivalent of Perl's `\h`.) 
Once the SEO problem is solved for JavaScript-based view solutions, plenty.
http://projectlombok.org/
When you're up for it, implement Tetris, Arkanoid or Asteroids.
Depends on what you want to learn. "Framework" is an awfully generic term and as such applies to pretty much anything. To make matters worse is that Spring does a plethora of things... Do you want to learn about dependency injection? About building web applications? If you're new to Java I recommend you get yourself a copy of effective Java (http://java.sun.com/docs/books/effective/), and Heads First Design Patterns (http://shop.oreilly.com/product/9780596007126.do) and then Dependency Injection (http://manning.com/prasanna/). However if you want to learn Spring, I cannot recommend anything. I've read Spring in Action as well and agree, it's more of a reference, which I attribute to the vast amount of features Spring has. 
Just wondering, where did you heard it was "recommended pretty much everywhere"? This used to be true maybe 4 years ago, but especially the last year there's a pretty strong opposition rising, with many turning away from the complexity and heavyweightness of Spring in favor of the much lighter Java EE 6. Don't get me wrong, there's still a lot of demand for Spring in the marketplace, but being recommended everywhere is a bit of a stretch these days.
I'll be honest, I learned spring by reading the Spring documentation. It's not like I read through it and instantly understood it, but it's amazingly good. http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ It's also nice because I can go "hmm, I need to look in chapter 13 web frameworks (I think it's chapter 15 or 16 in spring 3 docs)" and sort of know where I'm going when I need real reference information.
Don't listen to henk53. He has a very skewed view of the marketplace and continues to espouse his opinions as if they are fact. 
Shouldn't there be more "migrating J2EE apps to Java EE"?
I agree. Learn Spring by reading the documentation, and like anything, learn why it exists, and then start building with it. Best way to learn is to start using it. 
wow, downvotes for "Read the docs" - weird.
&gt; If two objects have the same hashCode, they are technically the same, &gt; or you don't understand object identity. This is not an advanced &gt; concept. Very, very wrong. String str1 = "0-42L"; String str2 = "0-43-"; HashMap&lt;String, String&gt; map = new HashMap&lt;String, String&gt;(); map.put(str1, "abc"); map.put(str2, "xyz"); System.out.println("String equality: " + str1.equals(str2)); System.out.println("HashCode eqauality: " + (str1.hashCode() == str2.hashCode())); System.out.println("map(str1): " + map.get(str1)); System.out.println("map(str2): " + map.get(str2)); This outputs: String equality: false HashCode eqauality: true map(str1): abc map(str2): xyz Two objects which are `equals()` must have the same `hashCode()`. The reverse is not true.
Spring Web MVC does not duplicate the standard JSF. Each follows a completely different paradigm than the other: components vs request driven. Components are easier, but some people would rather write their own client side code (like jQuery) and don't want to use components. To each their own.
Spring duplicates things in JSF and other Java EE components. You are right that JSF offers pre-built components. Many of these use jQuery. You are free to write your own client side code with JSF if you wish but in most cases it is a lot of extra work that is not necessary.
What does Spring Web MVC duplicate in JSF? They are completely different. For example, if you don't want to use PrimeFaces and would rather use standard jQuery components such as DataTable, how would you do that with JSF without horribly abusing it? Spring Web MVC works seamlessly with jQuery: the required URL mapping is straightforward with @RequestMapping and returning JSON is simply a matter of annotating the return value with @RequestBody. Datatable's parameters are easily mapped as controller method parameters using @RequestParam annotations. Spring Web MVC and JSF serve completely different use cases. As far as the Java EE component model is concerned, that's a different story.
[Java2s](http://www.java2s.com/Code/Java/CatalogJava.htm) seems to come up a lot in google searches, but if there is a user-submitted example site I would be glad to hear of it.
You might want to take a look at StringUtils (apache.lang) for the split(String, String) and splitByWholeSeparator(String, String) methods
people tend to want an easier answer than "read the docs, do the hard work". Truth is, it's way more important to learn why it exists and what problem it solves. Once you figure that out, you learn Spring, parts of Java EE, and everything that comes after.
http://stackoverflow.com/a/2166243/354515
By the way, Primefaces is just JSF wrapped JQuery. I like Primefaces and JSF (writing my first JSF application for a side project now), but it's nothing special. I'd have been done by now if I had used Spring MVC and jQuery directly just because I have more experience in that area.
I have enjoyed reading Spring in Action thus far: http://www.amazon.com/Spring-Action-Craig-Walls/dp/1935182358
Use e.getActionCommand().equals(("Piece Colour Black")) instead of ==. Same for the others. When comparing strings, always use .equals().
I was also going to suggest Alfresco, we're using it a lot and it's pretty well-architectured... (I guess. Coming from Symfony/PHP it still feels like a mess, but such is the life of EE it seems, and it's by far the best EE project I've worked with.)
nice! some quite interesting stories in there
Google could have answered your questions. JNLP are just XML files which tell Java Web Start where to find the necessary JARs and how to launch your application. You can open up XML files in any modern browser. http://docs.oracle.com/javase/1.5.0/docs/guide/javaws/developersguide/syntax.html http://www.oracle.com/technetwork/java/javase/jnlp-136707.html
They seem to be doing better now. Number of users is increasing and so are the number of projects. Java EE is a difficult beast to put there, as it's a specification not a product. They do have JBoss AS and Resin there which technically -is- Java EE.
http://stackoverflow.com/questions/533783/why-spawning-threads-in-j2ee-container-is-discouraged http://docs.oracle.com/javaee/6/tutorial/doc/bnboy.html In practise, as long as you don't touch sessions from your own threads, and you're not relying on the app server's clustering, you should be OK in any case.
&gt;rockvilleJD and henk53, you're on notice. And you are Reddit's police?
&gt;Me personally? I'd rather have them in my war so I'm not tightly coupled to my container. If you feel that way, why not also put Servlet, JSP (aka Tomcat) and the entire JDK in your war (which would then of course become a .jar or some .bin)?
try the download again... looks like it was just a bad grab.
Nope, that does not work, I've downloaded it countless times. 
Java and JavaFX are not the same thing. You don't have to install JavaFX to run Java applets on sites like canyourunit.com. The JavaFX installer works fine here though, so iunno what's going on :(.
Now, try that with JSF....
I think any server-side component-based framework does. If people really want to go the HTML5/JSON way, the future relies on CLIENT-side component-based frameworks. And that's for a simple reason: rich server-sided components doesn't scale well.
not sure why you want to break out of the loop when 't' is found if this is a program to count the number of 't's in the string. Answer is 1. Remove the break and answer should be 4.
Looks like you're breaking the case, not the loop. Also, the index only goes to 10. 
Frankly, I have no idea what you are talking about. Did you mean to say you're a Springsource employee in a "developer outreach program" or something like that? :|
Come here asking for help, then bash people when they're upset with you not doing your own homework. Wow.
you are right. should put the baby down before I try and debug code :-)
PrimeFaces started of as a mere jQuery wrapper, but lately they're doing more and more javascript themselves. Obviously there's also a significant part done in Java. 
I think this is the right answer. I'm using Quartz on EAP5 (J2EE5).
I'm only a casual/occasional r/java reader, but the accounts mikaelhg named are ridiculously overzealous advocates for Java EE 6 over Spring. An obvious conclusion is they're sponsored by e.g. Oracle. Although if that's the case, someone really needs to rein them in since their zealousness may have the opposite of its intended effect. I know it does for me.
&gt;An obvious conclusion is they're sponsored by e.g. Oracle. A sad conclusion if you'd ask me. Are you assuming that a Java EE zealot can only be an Oracle employee or someone sponsored by Oracle? That it's simply impossible that anyone likes Java EE so much that it becomes zealotry? I'm not saying they don't come across as zealots, but I personally find your subtle implication that it's simply impossible to be a true fan of Java EE even worse. For years Spring and Wicket fans have tried to blacken the name of Java EE. Look at some of the old posts on TheServerSide, or read some of the material by some guy called Peter Thomas. It's not pretty... Besides that, there is some embarrassing amount of Python and Haskel zealotry going on in /r/programming, and even that pales compared to some of the Mac zealotry I've seen on boards. Are those all Apple employees?
I thought about that, but (a) it means another dependency, and (b) Quartz must either be doing what I want to do, or be causing the same problem. I guess I should look at what Quartz does, and then see if I can just do the same. **Edit**: Okay, I looked at the Quartz source code. As far as I can tell it just starts a bunch of threads (packaged within its own threading abstractions). Whether it sets them to daemon threads depends on config (dunno what the default is). **Edit 2**: Quartz essentially just works around the problem.
Good Luck. Spring was revolutionary when developed and has changed development for the better.
I would not spawn threads directly or even through a third party API, unless you inject the container managed thread pool. Use the work manager provided by your J2EE container to spawn threads. Websphere example- http://pic.dhe.ibm.com/infocenter/wasinfo/v6r1/index.jsp?topic=%2Fcom.ibm.websphere.express.doc%2Finfo%2Fexp%2Fasyncbns%2Fconcepts%2Fcasb_workmgr.html If you spawn threads outside of your container, your container will not manage them and you will see shutdown and perhaps transactional issues.
Quartz is a fantastic api, but you still need to make sure your threads are managed by the container. Otherwise you could registerShutdownHook() on those bad boys.
Oh, so I was basically wasting my breath with henk53 then, eh? Good to know. I don't really keep up with usernames as much as I do the content.
Probably not exactly what you're looking for, but: http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/scheduling/annotation/EnableScheduling.html If you're using spring already, this could be a fancy way to abstract the timer business.
http://www.reddit.com/r/programming/comments/w1isb/unit_testing_views_in_spring_mvc/ 
As far as I can tell, your answer is correct in the sense that an app that does this will not misbehave. However, not using managed threads will make the app harder to monitor in bigger environments. That's an issue in my case (but won't be in many others).
It might. I think the app servers we use implement this service, but not all will. I think I'm not going to do it this way, but it's an interesting possibility.
Create your game first; if that actually happens then worry about locking it down.
Like UnspeakableEvil said, it's too early to worry about that stuff now. As you become a better programmer, you'll learn ways of protecting your code.
Why were Collections a clusterfuck? Do you mean they were retro-actively adjusted to use generics?
This is the wrong attitude, you should feel honored if other people care about your hobbyist game so much that they want to build stuff for it. Make it Open Source, put it on Github, build a community, have some fun. If it really gets going some triple-A company will still find a way to drop money in your lap.
This question would be quicker if it were about C++.
My bad, but... Why did I get more points? 
Once you start using Guava. There's no going back. 
Uhh.. what kind of help?
Less than ideal, but it makes sense, hadn't thought of that. Imo, Set should be a subclass of List, and should provide a method `lastAddSuccess()` instead. It might make thread safety a little tricky though. Really the big problem, to me, with Collections is that sometimes we have parameterized types, and sometimes we have Object, and Map doesn't even fit in at for technical reasons all even though it's basically just a `Set&lt;Entry&lt;K,V&gt;&gt;` with some nice finder methods.
From the sound of it, you want to create a game with those libraries, maybe look into a simple [enum class sampler](http://stackoverflow.com/questions/647252/using-sound-effects-in-a-java-game)
Did you read http://docs.oracle.com/javaee/6/tutorial/doc/bnboy.html
Have you tried looking at the documentation *for* lwjgl? There's a page right there on working with Slick and LWJGL.... http://lwjgl.org/wiki/index.php?title=Slick-Util_Library_-_Part_2_-_Loading_Sounds_for_LWJGL
Got it. Thank you so much!
'Head First' is a polite way of saying for dummies. ;)
Introduction to Java Programming, Comprehensive by Daniel Liang Is what I used for my college java course. After 2 semesters of java, i still use it as a reference
I would advise everyone reading this to **avoid** Deitel textbooks like the plague. In my opinion (and likewise the opinion of everyone I've talking to who's read them) they are of exceedingly low quality. **edit:** i want to bash in that ant's face so hard. ARGH! puncho!
Starting out with Java did the trick for me. From the most basic stuff to advanced stuff. Very good choice for me.
See [here](http://www.jboss.org/jsfunit/gettingstarted_version_2-0-0.html). The JSF approach could be viewed as superior because you are not trawling through rendered HTML but making assertions on the state of the component tree.
Yes, I did. This requires an EJB context, though, which we don't always have. But it's true that this approach won't spawn unmanaged threads.
Why would get(int) be any more meaningless on a Set than a List? As I see them, sets are exactly like lists, except with the restriction of no duplicate elements. That is to say, in a system with duck typing `List&lt;Int&gt;([1, 2, 3, 4, 5])` is a valid list, and `Set&lt;Int&gt;([1, 2, 3, 4, 5])` is a valid set, but also a valid list. List makes no promises about the uniqueness of each element, either affirmative or negative. Therefore the additional rule on Set does neither validate nor make redundant any contracts of List. I also disagree that it violates LSP.
I see the disagreement. I was (ambiguously, so my mistake) referring to the language-agnostic concept of Set as opposed to Java's specific idea of what a Set means. I might still be wrong though, as I hadn't considered the necessity of ordering to a mathematic set.
Uh, if you're constrained by the Java EE 6 contract, wouldn't that imply that you'll have a Java EE 6 app server to deploy your bean? @Singleton public class TimerSessionBean { @Schedule(minute="*/3", hour="*") public void automaticTimeout() { 
Still, you should not subtype set from list for the same reason you should not subtype square from rectangle. Regardless of language. This is a classic demonstration of an LSP violation. 
No, the concept is diving right into Java "Head First".
Definitely the "Head First" book. It's like reading a comic book. You'll learn and you'll be entertained. I learned about design patterns from "Head First Design Patterns" and I refer back to it regularly.
I just finished an intro into sw development course at a local polytechnic and they're using that as the text. It's fantastic. Edit: forgot a word
I'm curious why you are choosing between these two. Just go through the java online tutorial (free) and then get Effective Java and a book on design patterns. ;)
this if you have programmed before.
I'm around 158 pages into Head First Java right now, so far it's been pretty great, explains everything clearly and keeps it interesting. They breakdown all of their examples to show what does what and when they don't cover something used in an example, they tell you exactly when they're going to explain it later. I'm glad I picked it up, hope you learn a lot from it and enjoy it.
The Head First series is excellent. It's not a good reference book, but the best reference is the Java standard library javadocs anyway. I highly recommend it (Design Patterns is awesome as well). 
I have both, was recommended "Head First Java" by a friend and "Java How to Program(9th Edition)" for school. IMO, Head First is better if Java is your first OO language. 
I learned with one of the early editions of this book and I agree it's brilliant.
Why?
I am shocked the Deitel book is getting so much hate, I thought it was excellent. The code was well explained at every stage, had a crazy number of fun and interesting examples to work through... I couldn't say enough good things about it.
&gt;it's an objectively superior programming language. :P Haha, right ;)
JavaFX should have the ability to play wav files. There seems to be a bug with wav files in jar archives, but standalone files should be fine.
Good advice. Writing clean, maintainable code is by far the most important. Optimization should be the least important concern until much much later when you're absolutely sure you need to worry about it. Good code will help the JVM optimize it on its own. 
I knew when I wrote the word "performance" that it wasn't truly all I was asking. But from the answers, it's clear that I should keep the variable declaration within the loop. Thanks!
I'm making a game.
It's a local int. It will never be "created" or garbage-collected.
And compilers can be clever in optimizing it if they so choose. It's better to let a compiler optimize some simple things than doing it yourself.
For true novices I'd recommend [Java for Everyone](http://www.amazon.com/Java-Everyone-Cay-S-Horstmann/dp/0471791911) by Cay Horstmann. For people new to Java but already familiar with programming I'd recommend [Core Java](http://www.amazon.com/Core-Java-I--Fundamentals-8th-Horstmann/dp/0132354764) by Cay Horstmann and Gary Cornell.
That's completely irrelevant to the aspect of playing sound.
Thank you for your answer. Yes, there is a reason why I need Java. I'm working on a project for a local government (small town) website. There will be lots of content, documents, reserved areas, internal communication, events, media. I have already started my work. I have very good experience with Drupal and I'm using it. My problem will arise when I'll have (starting next year) to write Java web based applications using that content and users. I have no experience in consuming a Drupal database in a Java application, thus maybe a good choice would've been starting again with a CMS written in Java.
Thank you, I'm reading on those
Effective Java is indispensable. Depending on your familiarity with programming in general, you may be able to use this one book to introduce you to the language and offer intermediate+ skills as well. Regardless, you'll be glad it's on your bookshelf if you plan on sticking with java for awhile.
It's not an object, it is an int.
I don't know why you're being downvoted, this is exactly right.
Objects are actually not always created on the heap. The JVM can decide to allocate on the stack, or if the object is small enough, skip allocation altogether. Java is not C++.
If you want a lower-level language for the sake of learning a lower-level language, you probably want C. And even C is traditionally considered a high-level language. It's just that nearly all of us program from a very high-level perspective these days because it's practical for what most of us need to program. Java isn't significantly lower-level than PHP or Python, it's just more rigidly structured and typed differently. Which isn't a bad thing, but you're certainly not working at a meaningfully lower level. My aunt says C is for wussies and we should all write in Fortran, but time marches on. Anyhoo, the online Java documentation is some of the best documentation for any programming language I've ever seen. I'd start there before you go spending money on books.
Whatever works best for you. I tend to learn better from books too. I liked Murach's Java SE 6 because it was very detailed. But the official Java online tutorials really are exceptional. They're a guided learning path too, so you're not just flailing about trying to piece things together as you might from reading the PHP docs. Check out http://docs.oracle.com/javase/tutorial/ at least a little.
Who knows how downvotes work? There aren't so many, so it's not a good sample group. I suspect there might be one or two people out there who have a mistaken idea of what the term high and low level programming language actually means. And maybe somebody felt like I was giving the OP the old RTFM treatment. And then there are the bots and algorithms and fat fingers and caprice to calculate. Who can tell with such a small sample group? The important things is programming is fun and everyone should learn as many languages as they can because each of them has something to teach you.
http://rollerweblogger.org/project/
There are a whole lot of questions here I'll write a little. Firstly, having written and finished a game you're already doing really well. Almost all CS graduates are still really raw when leaving uni. This doesn't make you unemployable at all! Entry level jobs don't expect you to be an expert. You will also learn at a massive pace if when writing java 40 hours a week so don't let that worry you. Having doubts is a good sign, those without tend to fall to earth pretty quickly when reaching the working world. Don't let your doubts worry you too much though, it's quite easy to get paralysed by it. Never worry about asking questions or not understanding things. The best book in terms of getting to the next level in Java is http://java.sun.com/docs/books/effective/ - nothing else comes close. At the start of my career I was working as a consultant for a TV company making applications that allowed non-technical content editors to publish content to the web. Basically database driven content publishing stuff. A mix of Java, *SQL, HTML, JS, CSS. That kind of thing. The majority of jobs probably fall into the category of writing something to a database and reading it out again in some different format. Some of these jobs are interesting, some are very dull. Android apps are, generally, nothing like this but there you are.
If you haven't read it then there will likely be bits in there that are useful to you (I had been writing Java for about 7 years when I finally stumbled over it - a lot I knew but it was definitely worth my time). &gt; "I sure wish I had had this book ten years ago. Some might think that I don't need any Java books, but I need this one." That was a quote by James Gosling - hard to think of any better praise than that! Also the author, Joshua Bloch, was the guy who wrote the collections framework in Java so he really does know his stuff! Unfortunately I don't think there is a Java book that goes beyond that. Nothing I know of anyway. Currently I'm reading "clojure programming" and "the elements of computing systems" - both of which I think have improved my programming but not in any particularly obvious way. The best advice I can give is to look through [this](http://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read) list and try to pick something out that interests you. Contributing to open source software is also oft given advice. Failing that you could stick some code on github and ask people here or /r/javahelp for advice.
So try and do that then. I'm not going to code it for you. First you need to detect button clicks - that's easy to find out how to do. Second you need to know how to play sound, that's what my link explains. Couple them together, and Magic!
It's more to do with the person than the language. Certain types of people just enjoy hating things, combine this with the mistaken belief that if you criticise something you must have a greater understanding of it, then you have someone that spends more time complaining that actually doing anything useful. Ignore them. Unless they're actively trying to bring about an improvement they're just useless people that get off on sneering while sitting on the sidelines. Hater's gonna hate.
A lot of the hate comes from non-programmers, who think it is slow and not a "real language". This is because Java was never designed with video games in mind, and as a result, is slower than other languages when it comes to rendering graphics. While it does have its weaknesses, all other languages do. Take Minecraft, for example. It's a game made in Java that runs perfectly well, but people still say it should be written in a "real" language such as C# (C# and Java are VERY similar). Like someone else said, some people criticize just to sound smart, and others criticize because they see other people criticizing. 
Employers are also looking for entry-level Java coders. To give yourself an edge, it may be best to get familiar with SCMs like Git. Also learn what unit testing is (JUnit), perhaps Maven, a JDBC persistence layer like Hibernate. 
I hate java because Groovy is the best. Or was that Clojure? Maybe it was Scala? ... shit. I hate Java because the syntax is poor for a lot of new stuff. The language isn't bad, just not as expressive.
I don't hate Java but I do hate the way it's shoved down our throats in college. After years of being forced to learn ONLY Java and OOP, I had a really hard time not thinking of any programming problem in terms of objects and classes. Took months of constant C and Python programming to get rid of the OOP mindset.
Because it's needlessly verbose, and it lacks some great modern features which other statically-typed languages have (type inference, closures). It also has weaknesses in specific domains: its lack of unsigned integers makes it inappropriate for some networking applications, and its high memory usage makes it inappropriate for embedded systems. Many of these problems are simply bad design decisions, and don't appear in similar languages like C# or Scala. Nevertheless, Java is in many ways a good language, and you are correct that the libraries and documentation are among the best of any language. 
I've always noticed how Java can lag behind on some benchmarks, but the comparison for old PC's was very helpful! Didn't even think of that for some reason...
I'm not sure if this is really the issue a lot of people have. First, it's arguably not even strictly an interpreted language - although I guess nowadays the lines are blurring in most "interpreted" languages in that respect. Having it not correspond 1:1 with the machine code these days is not only expected, but frankly preferred, as this makes it more portable (among other things) and like you've pointed out, machines are fast enough that there is very little overhead involved with not running native code. The main complaint I've heard (and keep in mind I'm not a Java programmer) is something along the lines of how people used to bitch about, for example, MFC stuff for Windows. Tons and tons of boilerplate code. So I think it's more of an issue where people are not happy with a lot of the frameworks that are commonly used with Java. Whether or not this is a valid criticism of the language itself, I don't know. I tend to think not. (I realize I'm probably preaching to the choir here, just wanted to add my two cents and your comment seemed to be the most in-depth.)
Because we use it to do real work. "There are only two kinds of programming languages: those people always bitch about and those nobody uses." -- Bjarne Stroustrup 
I disagree with a number of your points, here's my reasons. * Java is ideal for embedded use, that's why Google chose it for Android, and it can scaled down to simple smart cards. This would be a JVM issue and not a language issue however. * Lack of unsigned integer (or moreover byte) is a little frustrating at times but you can just pop it in a signed integer and that's fine for almost all use cases (it's not like Java isn't widely used for network code) * Type inference is a design decision and actually with a modern IDE isn't really a problem at all. I prefer not having it in Java 99% of the time, the amount of bugs I see in JavaScript because of this feature is high * Agree on closures, there is no defence here * Scala runs on the JVM and so would suffer from the memory and embedded issues you imagine but does have closures and super complex inference... * C# is, I believe, a worse language because of all the cruft it has, regions, goto, optional method parameters, it's a nightmare, I prefer to avoid it 
The jvm does not create bytecode, that's done by the java compiler.
&gt; Type inference is a design decision and actually with a modern IDE isn't really a problem at all. I prefer not having it in Java 99% of the time, the amount of bugs I see in JavaScript because of this feature is high ? I can understand that Javascripts weak typing and lack of the ability to actually define the types of parameters and variable would cause problems, but I don't see how type inference is to blame. Scala has nearly as much type inference as JS, yet I don't have bugs because of it.
We're not really constrained by the EJB contract. It's the admin people who want better administrative control over threads in the container. And I'm trying to make a general solution that will work in different contexts. In this particular instance probably the EJB context is there and *could* use it, but it won't be in all environments.
How many Prolog programmers does it take to change a light bulb? False.
You do know that Python is even older than Java, do you? That Scala is only 7 years younger than Java, that Objective-C is MUCH older and that Ruby is around the same age?
I didn't know that.
There are situations where the JVM is *faster* than AOT-compiled code like C, because the JVM can do profiling and global optimizations that a C compiler cannot. So no. The JVM of today is really, really fast.
That is an issue, but there are other libraries and JVM languages that try to address it.
Incidentally, Scala also has optional method parameters (i.e. parameters with a default value). I assume C# doesn't implement this as well?
I don't hate Java; I just like Scala better. :)
That's hardly a problem though. Such errors either indicate a fault in the logic of your program (which would cause an error anyway), or are simply fixed by explicitly defining the type of that variable.
Indeed, and they replace a common pattern in Java: public int foo(int arg) { //some function } public int foo() { int defaultArg = //something return foo(defaultArg); } I'm also curious as to why barcodez sees them as a problem, although I do agree that C# has its own problems.
Frankly, it wasn't meant as a defensive post at all. Sorry if it came across as such, but I just wanted to provide some extra information.
I don't like the overly verbose syntax, which is reinforced by the community and also dislike the way the community is used to code. there's too much unnecesary things, there's patterns just for the sake of patterning, there's OOP encapsulation that serves no purpose other than getting in your way and the language itself doesn't help you much to avoid this, everything is cumbersome compared to other languages. I respect the performance of the JVM (which is not the language) but it's a bit of a pain the startup time. I also hate Javascript and PHP in varying degrees, I use them all.
"fault in the logic of your program" yes, a bug by any other name.
http://msdn.microsoft.com/en-us/library/dd264739.aspx
have you ever considered the reasons people hate Java? because the "hgh" argument is an easy way to look away from the problem.
that's *really* back in the day, now that argument is used against Python/Ruby and it's true for those but depending on your use case it may not be relevant and that's the whole point.
The Python argument is ridiculous.
&gt;largely oblivious to the fact that J2EE is gone and that Java EE is actually a pretty decent framework Had they selected a better name for the replacement of J2EE that differentiated from it just a bit more, people might be less oblivious. I still remember the confusion when Java 1.2 was labeled "Java 2" and J2EE vs. Java EE does not look like a significant difference based on the names.
The name Java EE vs J2EE to mark such a significant change in direction has been subject to much debate indeed. Especially EJB (which pretty much by itself represented all that was wrong in J2EE), should maybe have gotten a new name. After all, the "new" (since 2006) EJB is a POJO with an annotation that doesn't even look like the EJB of ancient times. Perhaps much to late, but there are some people in Java EE who want to retrofit the services EJB offers into a set of CDI based extensions. For the end user this will be nothing more than a set of CDI annotations then, which means for all practical intends and purposes EJB as a component model will then disappear, leaving only CDI.
Far as I can tell it's because we programmers are inherently lazy (not meant as an insult...it leads to looking for the most concise way of doing things) and don't like typing. In other words...verbosity sucks.
I asked this question quite some time ago, and it seemed to have sparked a much more in-depth discussion than what you're getting now (no offense to commenters) http://www.reddit.com/r/java/comments/rju3a/why_does_it_seem_like_so_many_people_disli
My view is that outside of the enterprise world, Java has very bad hosting solutions. So, if a n00b or even a user who wants to set up a website or a mom and pop store, they go to PHP.
You've left out three points that, while minor, do exist: * Java is overly verbose Every language needs to have overly verbose statements, but Java has too many. A general rule of thumb is that if you need more than 80 characters for a single statement, you should refactor your code; there are times that following good design patterns means you just can't do that. * Java fell behind other languages This is getting resolved finally, but C# had stolen some thunder for a few years in the late 00s by continually evolving while Java was stuck at 1.6. Parity still hasn't been reached (Java still lacks closures, which will probably be in 1.8), but it's moving in the proper direction. There's also the stuff from the 90s that people haven't yet moved past (Swing, aggressive GC, JVM CPU usage, WORA). 
Refactoring and code maintainability are helped by having static/explicitly typed code. For example, is an array of ten digits a string or an int? If its a phone number, you want a string, but a million dollars should be an int, and the compiler and VM don't know the difference. 
GOTOs are OK sometimes, just take a look at the Linux Kernel source code, they are used tons of times. And it's by far one of the best, and well documented Source Code in the world.
http://www.reddit.com/search?q=java+hate
&gt;Java is overly verbose I think I did mention it ;) The argument has several aspects though. One of them is that Java is statically typed and is in the C family. I've seen people hate Java because of e.g. the typical for loops (`for (int i=0; i &lt; 10; i++) { ... }`. There's very little that's really specific to Java here. All languages in the C family have this construct. Lambdas are clear I guess. For lambda and closure use cases, anonymous inner classes are overly verbose. Nobody will disagree with that. Another aspect is that occasionally the argument is exaggerated. Either for small artificial pieces of code Java indeed can be made to look much more verbose, but for larger pieces of code this is less of an issue. E.g. for an Hello world, the `public class` 'wrapper' is needed around a main method, so this looks verbose to languages that don't need this. But in a given class this only has to be typed once, so for Hello world it's maybe 300% overhead, for some complicated business logic it's maybe 10% at most. Also, occasionally people claim Java is more verbose but when actually trying to give an example, that's then countered by an example from a Java programmers, it's shown that Java is actually less verbose (there was a case here on Reddit that I remember, something about declaring a Map with some generic type in Java vs C++). Also don't forget that compared to some dynamic languages a part of the verbosity actually does buy you something; the compiler is able to do more and more aggressive optimizations since the intent is simply more clear. This is not true for all verbosity, but for some it surely is. &gt;Java fell behind other languages Yes and no. Sun focussed a lot of attention on the JVM and the standard library. So "Java" as language + virtual machine + library didn't really fell behind as a whole IMHO. Yes, the language with regard to its syntax was fairly stagnant. There were probably multiple reasons here. One cited reason is the lack of resources Sun had (this explained the less than optimal generic implementation compared to C#; Microsoft simply had more staff en resources). But don't forget the "idiots" who screamed at the Sun bug tracker time and time again that Java should not change. That a language should not adopt every latest language fad. This was a **very** focal group of users. Just look at the some of proposals for collection literals and operators for collection. I can only assume Sun was more than a little sensitive to this.
Care to extrapolate on that?
A compile failing is not a bug since that code is not runnable.
No.. its spot on. Go to /r/python, mention Java and you'll get the exact hate the OP posted, "Java sucks because its to verbose"! print "Hello, World!" vs public class Main { public static void main(String args[]) { System.out.println("Hello world"); } } "1 line in python vs 4 lines in Java, then Java must suck!" It's dumb and stupid
That's almost exactly like Scala optional/named parameters, except that Scala allows the default value of a parameter to be any expression, e.g. a call to some other method to get the default value. What's so horrible about optional method parameters, anyway?
Most of these answers seem to skirt around what I believe is the source of the hate, so because of that fact and the fact that I am in a happy mood, lets do this. A long time ago (around 98 or so), Java was slow. This was Java 1.1 or 1.2 or something like that. It was slow (and bloated) for several reasons. The JVM was not the best at optimizing, the garbage collection was a bit rough around the edges, etc. Computers of the day had limited memory. A great computer had 256MB or even if you were lucky, 512. The JVM really needed more memory. With the slowness, Java takes time to start. It is bad for short lived programs, even now. The JVM takes time to start and to optimize the code. This makes it bad for short lived programs (I am talking seconds here.). Added to the fact that Java was meant to replace C/C++ which is/can be very fast and small due absolute control on memory and optimizing. Comparatively, many people hated on the new slow kid in class. Now, JIT (just in time compiling) and GC is very very good. There is a reason many languages are build to run on the JVM. It is fast. It can be great with memory with the right tuning. It handles threading very well (compared to Python and the GIL and Ruby). There is great support around debugging, inspection (thread dumps, GC logs, JMX, etc). Computers now have on average more than 1GB of RAM which is very beneficial. Those initial problems with Java are no longer true but the bias is still there with some people. Next we have applets. They were suppose to revolutionize dynamic web programming. They did not. Compared to Flash and Shockwave, they sucked. I don't think I need to explain this one. I am glad they are pretty much dead. Now we have IDEs. Java sucks without an IDE. Unlike Python, Ruby, Perl, and other scripting languages and even C and C++, Java really sucks without a proper IDE. Many people hate IDEs. To make things worst, the most common IDE is Eclipse which suffers from design by committee. It is great and it does most everything needed, but it isn't the easiest to use. It can be slow and confusing. Honestly, Intellij is probably the best IDE and it is expensive. Also, 10 years ago people started making frameworks for Java. They were good first steps but painfully difficult to configure and use. It required a lot of XML that was hard to understand and every change required a recompile and restart of Tomcat or other servlet engine. Added to the fact that the world took up Patterns. Patterns everywhere. Factories, delegates, singletons everywhere. Now, don't get me wrong, patterns are very useful, but some programmers use them poorly. You ever hear of FactoryFactories? A factory for your factory. It can get to the point where you don't know where the logic is with indirection and encapsulation everywhere. Finally, the biggest reason Java has a bad rap is there are way too many bad Java programmers. It suffers in this respect in the same way as PHP. In the corporate world, Java is the language to use historically (though C# is now in the same place). From the prospective of middle managers and above, since Java (or C#) is "industry standard", when Java is chosen for a project, they (the decision makers) are not responsible when it fails because they chose the industry standard. With this, the colleges turn out people who can program in Java but suck. So there are a lot of jobs with a lot of bad programmers in companies with bad management which creates a lot of bad code. Then good programmers work in these toxic environments (bad coworks, bad code, bad managers) and blame the language. Less mainstream languages are better off because of the high bar to learn a new language sets the bar to have better programmers coupled with managers that are willing to listen to the programmers about what is best for the project vs what is best for job security leads to better work environments. 
I code in multiple languages. You use the best tool for the job. The problem with Java isn't so much in the language as it is in its PR. It is a "big company" language. As such, there is an ecosystem that has traditionally been "big company" focused. It is similar to the .NET world. Languages such as Python, Ruby, Scala, etc aren't big company focused (at least not to the extent of Java) so they have a different culture. I am currently in the process of moving an existing code base from poorly-written PHP to a JVM-focused codebase (Java and Scala in particular). I have used both Java and PHP for over a decade. The primary issue I have with Java the language is how verbose it is. It gets rather annoying having to write ArrayList&lt;HashMap&lt;String, String&gt;&gt; list = new ArrayList&lt;HashMap&lt;String,String&gt;&gt;(); every time I want an array of HashMap objects to translate into JSON. Other languages don't require nearly as much typing, but to be honest, even this is subjective. TLDR: Java is fine, it's image is hated.
Because stuff like Clojure and Scala exists now.
Why on earth would the so-called "C people" hate Java if it solved their problems? What I meant was that after being forced to do only OOP in Java(or any other OO-only language for that matter) getting back to other non-OO languages like C is pretty goddamn difficult.
You can't tell me that Java's syntax is better with a straight face after giving that example. I think some of the things mentioned against Java do have some merits. However, I do agree that extrapolating to Java's entire ecosystem is ridiculous. There things that Java is much better at. And the argument mentioned here asserts that Python programmers hate Java because it's one of the top language. This is the part that's ridiculous. There are valid reasons to dislike Java, but it being one of the most used language is not one of them.
It also happens to be completely accurate, though, you see? It may not be a relevant method to evaluate a programming language, but it's true as hell.
Nobody writes hello world.
You've just made your own definition up to suit yourself! I think my interpretation matches with common definitions - see wikipedia or most reputable source.
Exactly. I'd like to see someone build a robot to scrape gonewild in Java, and then Python, and then say, with a straight face, Java is better for EVERYTHING.
Not completely black/white bad but usually a sign your method is doing to much, doesn't have a single concern and should probably refactored, often as a class in its own right.
Seriously? So is C#, PHP, C, C++, Python, Ruby, Javascript, Obj-C, and more. 
And thus we can agree the argument that a "hello world" in python involves less typing is irrelevant, which is what I was trying to point out.
The move to use the term JEE instead of J2EE occurred with the release of JEE 5. I think it's confusing to separate the releases named J2EE from the releases named JEE. Just consider all versions other than the current release (JEE 6) to be "legacy". The real question you should be asking is do you have any dependencies that would prevent you from using the current version. If you are starting a new project, stick with the current version.
Yes, J2EE is completely deprecated. Not only should you stop using the term (unless when explicitely mentioning it's about 1.4), but you should also not touch it with a 50 feet pole. Working with j2ee 1.4 is a very bad idea. Plain JSP programming just sucks and EJB 2 that's part of that release is plain evil. It WILL rot your brain and has NO useful relation to the current EJB 3 model. Stay as far away from j2ee 1.4 as is humanly possible!
&gt; People bitten by J2EE and EJB2 This is me. I like the Java language, downright *love* the JVM, but JavaEE makes me run away screaming. &gt; However, the people who left Java at around 2004 are largely oblivious to the fact that J2EE is gone and that Java EE is actually a pretty decent framework. Oh, I entirely disagree. JavaEE 5 may be better than previous versions, but it's still an incredible fucking mess. It really does manage to turn Java into Cobol. And my experience is recent, just a couple months ago.
I would suggest using .OGG files for your Audio. Got the basics OGG playback in my [Ludum Dare #22 Entry](http://www.ludumdare.com/compo/ludum-dare-21/?uid=5609) ludum/OggPlayer.java is the file you want to look. Edit: Shout out to [JOrbis by JCraft](http://www.jcraft.com/jorbis/) 
&gt;JavaEE 5 may be better than previous versions, but it's still an incredible fucking mess. You do realize that Java EE 5 is from 2006 right? That's 6 years old. But I don't agree it's such a mess. EJB and JPA are quite sane, though JPA was still a bit limited back then. The only messy thing in Java EE 5 is JSF 1.2. What particular things are a "fucking mess" according to you then, and why don't you use something that's a bit more modern, like say the 3 years old Java EE 6?
My bad, did this on my phone
&gt;So, if a n00b or even a user who wants to set up a website or a mom and pop store, they go to PHP. That was true in 2004, but these days you create a FREE account on OpenShift or GAE in minutes, and have your Java app online in half an hour or less. For those FREE accounts you get more performance and page views per month than you could reasonably get out of your cheap PHP shared hosting solutions. But it's a fable with a historic truth in which many people still believe (you yourself are the proof of this).
On the other hand, we programmers also need to READ code and it happens to be that we read code more often than we write it. Short code might be fun to write but can be horrible to read.
Surely learning JEE6 is not a huge stretch for someone who has worked with J2EE 1.4?
No, it's problem of perceptions.
http://code.google.com/p/guava-libraries/
Well ok would working on a modern FLOSS JEE (or Spring or Struts) in my own time would overcome that?
So using Spring in my own time would offset working with outdated J2EE day to day? Surely working in J2EE and transitioning to JEE would not be too hard?
If I were you, I would start working with Java EE 6 in your free time. This is a much better investment of your time if you are working with J2EE at work. At some point your company will hopefully make the jump to Java EE, and then you already have that knowledge. Unless you are aiming for a new job before that event is to take place, your Spring knowledge would be fairly useless. And even if you were aiming for an other job, that could also be a Java EE job, making it a win-win for you.
Ok, thanks. I will try to work on a JEE project in my own time, do you know of any good JEE FLOSS projects that you could recommend?
Totally agree, and in JSP it's: Hello, World! That's right, a file with only `Hello, World!` in it is enough. There is no totally verbose `print` command needed, and no totally unnecessary quotes. Python is a cluster f*ck of verbosity compared to JSP. Should we do all development in JSP from now on, since its hello world is so much shorter? (p.s. and JSP is an official part of the Java platform, so it really is Java as well :P)
Why did C people not come up with a String library? They like the primitive nature of the language.
Why OGG?
Have you looked at [Spark](http://www.sparkjava.com/)? BTW, it's off-topic but TIL there were destructors in Java.
Hmmm that's interesting. I guess the part that I'm having a hard time finding is the easy persistence piece. The easiest thing I've seen is Hibernate, but that's still a lot of work compared to something like rails. 
While being pretty new to java myself, I've found Apache Wicket to be the one framework that I was able to understand quickly and included the flexibility I need.
Java has no deconstructors. finalizers != deconstructors.
I started looking at grails. Groovy looked like it would be a bit of an investment to learn. Also doesn't look like it has gained much traction anywhere. It definitely looks like the best bet though. 
I don't think their async stuff is going to work out too well. There's just not enough async libraries out there and there's really no point to an async framework in java when you can just deploy to tomcat and handle 200 req/sec (also because of the way java handles threading an async framework is kind of silly anyway. ) 
Although I should add that I was pretty impressed with it and had high hopes for the scala portion of it. Apparently that part is still bets though?
GOTO is only OK in C because you don't have try/catch.
Seems interesting. A bunch of compiler magic on top of all the spring technologies. That's super interesting. 
Have you looked into the Hibernate JPA 2.0 implementation using an entity manager? Spring Data JPA is an additional layer of abstraction that makes things even easier. It is glorious! I have been working with both flavours for a few months and I freakin love them! So powerful! Enables you to do things in minutes that used to take hours (or days!!).
A few things to consider: 1. PHP and JavaScript serve different purposes - the former executes on the server side, and the latter executes on the client side. PHP is just one of many possible server side languages - you could use Ruby, Python, Java, .NET, whatever. Doesn't matter, as long as your server knows how to render the page and send it to the client. JavaScript is really the only client-side language available. 2. **You cannot trust the client AT ALL**. If all the order and pricing calculation is done on the client side (in JavaScript on the page itself), then you open yourself up to a million kinds of fraudulent ordering attacks. Anything done in JavaScript or sent from a form over the wire can be modified by the person sending it. After the order is all configured, your backend order management system (whatever that is), must validate the order and see if the price makes sense, then forward that price on to payment. 3. From this, we can determine one very important architectural decision - all pricing and item information must be stored on and provided by the server, and not embedded into client-side code like HTML/JavaScript. So, we need a database to store all that information - how you do that is up to you. I would recommend MySQL or PostgreSQL as an easy, free option. PHP can integrate with both of those just fine. When you render the page, have your PHP code fill the options available on each form from your database, and your web server will deliver that final rendering (consisting only of HTML/CSS/JS) to the client. Remember, PHP code happens before your page ever leaves your server. The PHP page that processes form submissions should validate that what it received makes sense - go through each item submitted and check to see if it matches the database. That's your basic flow for a simple PHP-based webapp - Server executes PHP code, PHP code gets data from database, server sends rendered page to client, client submits form back to server, server validates form. 4. Payment processing is a whole other can of worms. If you accept credit cards on your website, you must conform to PCI security standards, and you will be liable for any breach of information. My advice is to not do any of this yourself - there are many off the shelf website payment processing solutions. To start, just integrating PayPal is probably acceptable. You can graduate to card acceptance as you grow. 5. Once you are comfortable with that, and understand how all the pieces fit together, you can start to explore new techniques and technology stacks. Ruby on Rails, Java with Spring/Spring MVC/Hibernate, Python with Django, Groovy on Grails - the list goes on and on. There are a million ways to make a simple web application. Basic programming principles, however, will *always* apply. I would recommend picking up a copy of [The Pragmatic Programmer](http://www.amazon.com/Pragmatic-Programmer-Andrew-Hunt/dp/020161622X) and reading every single page, then hang the tip sheet up by your desk. This book is an amazing resource for general programming practices, which will apply to anything you do. If you have any specific questions, I'd be happy to answer those as well. 
java is not javascript =&gt; http://www.reddit.com/r/javascript 
&gt;Unlike Python, Ruby, Perl, and other scripting languages and even C and C++, Java really sucks without a proper IDE. I wouldn't really want to write C or C++ without an idea either? I mean, do you remember all the methods that are in a class? Do you remember every argument of every method and their order? Don't you miss navigating into a function, method, class via a simple click? How do you set your break-points for debugging in a plain text editor? How do you get an overview of call references for a given method? How do you get an overview of which classes inherit from a certain base class?
I think that it's odd that you don't get much performance increase with that code since it's the exact same sample code they have on the website, the code is highly paralellized so you should have better results. What I'd do is remove the setExecutionMode() and add a System.out.println(kernel.getExecutionMode().equals(Kernel.EXECUTION_MODE.GPU); Just to be safe. Aparapi is known to mess up sometimes and at least when I used it it was a real pain to get working with nvidia cards. 
None of your blame-casting made my job any easier or more pleasant. You can blame over-zealous architects or legacy code if you like, but the fact is, the world is full of both of those. If JavaEE gives them leash they wouldn't otherwise have to make the lives of implementers and maintainers hell, then the fault is partly with JavaEE. Stop defending an ugly bag stuck on the side of a decent language and excellent VM. You only look like a blind zealot when you do. JavaEE is no more worth defending than VBScript is.
How does Scala handle inputs from DB queries?
There aren't many popular commercial desktop GUI apps written in Swing. But Swing used to be the goto technology for desktop GUI apps in the corporate and telecom environment -- internal applications for configuration of big server applications. Things IT guys in the backroom are using, not the sort of thing the end user sees. These days companies tend to write web apps for that sort of stuff but, frankly, the web apps rarely provide as good an interactive user experience for business apps as a good ol' desktop application. But the web apps have the advantage of not needing to be redeployed on every PC in the organization when there's an upgrade. But do some Swing -- like eating your broccoli -- it'll be good for you. ;) UPDATE: See [Swing Sightings](http://java.sun.com/products/jfc/tsc/sightings/) for examples of Swing applications
Yes. Search for "uniform access principle".
*Do not always use getters and setters in Java!* Ignore this advice! Getters and Setters break encapsulation by exposing the data members of a class. You can put all kinds of invariants as you wish on the individual setters, but because setters can be invoked independently, this can wreak havoc on maintaining higher level invariants that operate on groups of fields. The most general principle of class design is to keep your classes as shy as possible. The less they reveal of their internal state, the less chance that you have of propagating dependencies on internal state transitions in external classes. Getters and setters IMHO should only be used in to implement properties on JavaBeans, which are integration components between business logic and component oriented frameworks to communicate data changes or high level validation. For example, between a text field in a JSF view and the backing bean. Use getters and setters very sparingly!
What would be your criteria for 'traction'? I see groovy being used in projects a lot, although I'm a bit biased (I publish groovymag). The biggest issue against seeing more groovy adoption is that you don't typically have to use 'groovy' over any over jvm alternative - it integrates quite nicely with plain old java, so you can use groovy sporadically, but still use plain java for most of your work. If a file is ending in '.groovy', but is 100% plain java in the file, it'll work just like regular java. I know of companies that consider themselves java shops but use a bit of groovy here and there, because they can adopt it without having to rewrite large swathes of existing code. They still will say they're a 'java shop' vs a 'groovy shop', but shops using jruby or scala would consider themselves ruby shops or scala shops (anecdotal evidence only). If you want to start with Grails, but write all your code as plain java - go ahead. It'll work just fine, and you can groovify your code at whatever adoption rate works best for you. 
Yeah I was gonna post the same thing. If you absolutely _have_ to access a variable inside a class from outside the class use get/set so as not to dick with underlying implementation, but otherwise keep it private and don't let other people touch it. Definitely don't just generate gets/sets for everything. Think about what you're doing, why you're doing it and how it impacts implementation. Every time you weaken encapsulation you make it harder to drop in or pull out stuff.
The OP's question has to do with whether or not a piece of information should be exposed as a field or as a getter/setter. I like your rant about maintaining encapsulation and hiding internal state (I always enjoy adherence to SOLID principles), but I don't think it really answer's the OP's question.
&gt;It really does manage to turn Java into Cobol. Keep COBOL out of this.
Schools like to teach Swing despite its low real-world use. I think this is because, API wise, it's a pretty good UI toolkit. It implements the theory of how UIs should work from an academic standpoint pretty directly and without compromise.
You have to put everything inside a class: &gt; public class Deck { &gt; &gt; // Your code &gt; &gt; }
Thanks!
I'll try not to make my code too terrible. I imagine it will be awhile before I build any actual applications, though, so you should be safe for now.
Thanks a bunch for the tips--I'll definitely check out jQuery. Some of the programming language is still a bit over my head, but given that this is day two of my javascript experiment I suppose that' to be expected....
just a side note I'm not sure if you have more code than this but if you're trying to instantiate an object of type "Card" you will need a class named Card; might be part of your problem related to the error. example: Class card{ //code } public class Deck { Card newDeck = new Card(); }
Cool. I think you just convinced me to try Grails. Since you publish a mag about groovy, do you know any handy resources to get started with Grails/groovy?
 for (int i = 0; int &lt; 52; i++) { should be for (int i = 0; i &lt; 52; i++) { You named the variable `i` not `int` (which you can't by the way, as it is a reserved keyword) but refer to it later as int.
&gt; for (int i = 0; int &lt; 52; i++) { Should be i &lt; 52
Sorry, didn't see that.
I generally follow the [Java Coding Style Guide](http://developers.sun.com/sunstudio/products/archive/whitepapers/java-style.pdf). (PDF)
You are in /r/java ... you will not find people who agree with this statement. :)
Sorry, but I don't agree. The truth is much more subtle than that. People can screw up with any platform and with any language. There is nothing wrong with a basic concept like say 'inheritance' in OO. Yet, I've seen people totally raping this concept, by using inheritance for everything it should not be used for. Does this mean everyone who says inheritance has its uses, is a blind OO zealot who defends an ugly bag? I'm defending Java EE 6 since it deserves to be defended. We are very productive with it, all our clients are happy as can be and the developers we have enjoy working with it. I'm especially curious about the `comp/env` usage. We have huge systems and never use it. Out of professional curiosity, I just wondered where you guys were using it for. That's not "defending" anything, just curiosity.
Really?! With eventlisteners? Is this a good way of doing things? What about having to subclass JPanel in order to draw on it (using paintComponent)? That seems kind of clunky to me. I'm not an expert, just program sometimes.
Then they are blind. It should be obvious that Java has a lot of strengths but taciturnity is not one of them. 
Stylistic thing, you might want to turn that magic number (the 52 in your loop) into a private static final int DECK_SIZE class variable. There are a few major advantages of a constant over a magic number. For one thing it's more maintainable. If in the future you want to change the size of the decks, it takes one edit rather than an unknown number of edits. It also cuts down on typos. The IDE won't flag a 53 where you meant 52, but it will flag a DICK_SIZE when you've only got a DECK_SIZE declared. But the most important reason to do so is readability. A magic number provides no information to the reader, while a well named constant or variable pretty much explains itself. A lot of this stuff can seem pointless when you're first starting out as a programmer. That's ok! The best way to understand the importance of readable code is to write a bunch of programs where you ignore readability concerns, and then try to remember what they do six months later. It'll seem really important after that, I guarantee it! 
Google has a 1 time $25 fee to get on the market. Apples $99 is ridiculous.
I think I see the point. Although, I still think it's wrong. Providing public access or getters/setters should be driven by the component concern, not the business concern. Changes to the business rules shouldn't have any effect on the need for getters/setters, only changes to the component model. Just making a field only accessible by getter/setter because *someday* a business rule is not a good way of looking at things. I'm allergic to "future-proofing" without evidence to back it up. Essentially, when I externalize data from my business model, I use `public final` fields in immutable value objects when I can, and add getters and setters and relax immutability if evidence proves that it will be necessary to do so.
Maintain an API. It may easy to retreive a member variable by simply using a reference now, but what if you need to change the way you retreive it later? Perhaps you need to do some computation, or caching. Suddenly, your API has changed. If you had used a accessor methods for using that member variable, then you could just change the body of those methods, but now you need to go and fix every reference. This is even worse if it was exposed to clients that use your library as your API has changed and they have to fix their code.
You totally just repeated what I said in different words. * Ideally lock all internal stuff from external access * If external access is required for a particular element, use get/set * Always consider why you're doing it, don't just generate for everything
&gt; I'm especially curious about the comp/env usage. We have huge systems and never use it. That's great for you. I inherited code that used it, and thus I had to deal with it. I imagine many people are in the same situation. Most people *don't* get the opportunity to re-write their entire system when Sun/Oracle changes the JavaEE spec. We're stuck with whatever horrible shit we've been given.
Wow Spring Data REST sounds fantastic. We have talked about this type of thing for months at my work. Spring rocks!
Yes, but those different words were very important. &gt; Ideally lock all internal stuff from external access Agreed. &gt; If external access is required for a particular element, use get/set This doesn't prevent people from not touching the particular element (which you stated before, and what I was addressing). You've locked the front door but opened the back door. &gt; Always consider why you're doing it, don't just generate for &gt; everything I was saying *don't do it at all* in the class that has the element. You want to break encapsulation because either the class is poorly designed or for integration. If it's for integration, externalize the integration in a separate class from the business logic and put the getters/setters *there*. Don't pollute the business layer with integration stuff. If it's because the class is badly designed, then stop and think about how you can refactor to avoid breaking encapsulation. It may seem that I have superficially repeated what you said, but I think I am actually saying something very different than you are.
The issue with play, imo is that the framework is entirely for web publishing. It doesn't support a SOAP/REST services bit. 
Both seem like stupid models. I could see taking a transaction fee for every purchase, but charging the developer even before he/she knows whether he/she will make any money off it? That seems like a bad idea.
But then you still have to code around an implementation, rather than an interface, because you rely on public final members. If you exposed **just** a getter, you'd achieve the same immutability, but without coupling against a particular implementation.
The first is for JavaBeans. The second case is generally because the designer did not make a proper design and failed to properly encapsulate. It's a glorified public field, while being a bit better doesn't actually make it good. They did it because it was "easy", just like having everything public always seems easier in the beginning.
i think the fee keeps spamers from putting out the same app under thousands of accounts. if done under one account they can all be removed by google at once. if done under thousands of accounts it would be a nightmare to police
And IntelliJ about 6 years earlier.
http://www.weceem.org/ is built on Grails, which is built on Spring.
 Oh I see.
http://thecodelesscode.com/case/3 seems pretty applicable right about now.
I don't mean put the public final member in the class itself, but rather export *projections* over the model as immutable Data Transfer Objects (which has the public final member in the value objects I was alluding to). I don't mind getters so much, only if care is taken not to return mutable references, which can allow indirect modification of the object.
Excuse me if this sound naive, but I come primarily from a .net background. How would you implement POCO data objects without getters / setters? If you are following a repository pattern, for example, where a different class overtakes the persistence responsibilities for another (possibly POCO / POJO) class, how can you manage that without having public mutable members?
Most of the time, public fields are fine. System.out, Point.x are just examples of when it's okay. When data is just data, let it be just data. Don't try to turn every single bit of data into a function. It's not.
I think you are prematurely hung up on talking about good class design over answering the question asked. What to encapsulate in a class is an entirely different conversation than how best to expose data. &gt; Getters and Setters break encapsulation by exposing the data members of a class. They only break encapsulation if you expose all internal fields without reason, which is not what the OP asked. Getters/Setters are just plain old java methods so there is no real difference between: String getValue() and String value() For returning single values that have no side-effect, Java Getters should be preferred. Regardless, The client of the class doesn't care if that data comes from a field or calculation. In all cases a getter is preferred to exposing a non-static final field in Java. Putting it the opposite way, the only fields that should ever be exposed are static final fields where there is no possible need for some future configurability. public static final double PI = 3.14... // OK public static final boolean IS_TEST_MODE = false // Probably should be configurable. &gt; Use getters and setters very sparingly! Sparingly isn't really a helpful word, what does it mean when talking about how to best expose a field? A class that neither takes or exposes data is pretty meaningless beyond enumerations, therefore most classes expose some data. If your class single value data without side-effects then getters are preferred over methods because they follow a standard convention. If a class is mutable, you have two choices for modification, single value setters or methods that take multiple values. public void setX(long value) // Java Setter public void setY(long value) // Java Setter public void setPoint(long x, long y) // Not a Java Setter 
The problem with this is that a complex data type is just that: A data type. Java provides only classes, which are designed to describe the structure and call interface on an object. Sometimes, though, classes are used to simply describe complex data types. Even SOAP has the concept of messages which are nothing more than complex data types sent to and received from handlers. In the case where someone designs a class to describe a complex data type, there's nothing wrong with making all members public. We're not exposing object state, we're simply accessing complex data.
I was staring at that for a solid 20s thinking... "THESE LINES ARE THE SAME!", then I read on...
Does not sound munged liked MP3 since it can have loss-less compression and also open source with no patent issues.
It moves the validation forward. Without requiring access to the db. 
In essence more secure code. 
I'd say more secure and flexible code.
 really?
In line 10 of the Deck class you need to do something like: newDeck[i] = new Card(); When you created the array, all you did was create an array of 52 null card objects, you still need to initialize the object within the array.
Disliking repetitive, redundant code is not a sign of laziness. Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;; is fabulously redundant. It breaks the DRY principle, making it a nuisance to maintain. People switch to dynamic languages over things like this. Type inference allows you to get the brevity of a dynamic language while still having the compile-time checks of a type system.
Ooo, I didn't know about /javahelp, thanks! I've have fought through many problems without any help, and I think that it made me a better programmer. But there are certain times that I just can't get stuff to work so I'll check it out thanks. I'm definitely going to get that text book, thanks for the advice!
Absolutely, I've been in the same boat. But I also know that many places eventually do allow you to change stuff, especially when the engineers fight hard enough for it. I once was in a very flexible, forward thinking start-up, where we really did a lot of things according to best practice. Then we got stabbed in the back by the owner of said start-up who sold us out to some mega enterprise. Yes, their code values were shocking and their management were very resistant to changes that would improve the code itself. But even in that hostile situation we found ways to persuade the existing engineers (where needed, most knew that change was desperately needed). Change begins piece by piece. Every section of code that you touch should be left in a better state than when you found it. If 'they' require feature X, you factor in a little bit of work for code cleaning that you administer as prerequisite for that feature X. But... I'm still curious what on earth it is you're using comp/env so much for though ;)
I was wondering this exact thing today. I conclude that, unless you want to present a nice constant interface, it's just a convention. I'm just exposing all my lists and such now as public fields except in special situations.
 class Deck{ private static final int DECK_SIZE =52; void createNewDeck(){ for(int i=0; i&lt;Deck.DECK_SIZE; i++){ //loop do thing } } }
The easiest thing to get up and running is JSF 2 when you use a Java EE 6 server (JBoss AS, Glassfish, TomEE, Resin, Geronimo). There's nothing to configure and everything works out of the box. See the following example: http://jdevelopment.nl/minimal-3tier-java-ee-app-xml-config/ JSF 2 also works together with Groovy for extra dynamism, but that's a small extra step to setup.
In JSF 2 this is very easy when using OmniFaces. You just bind a list of domain entities to a select component and that's it. When the user makes a selection your backing bean will get a reference to the entity that was selected. See http://showcase-omnifaces.rhcloud.com/showcase/converters/SelectItemsConverter.xhtml
&gt;Tell that to Java which has several "Async" frameworks built in (ForkJoin, Executor). The problem is they are quite a bit over complicated. There's also the `@Asynchronous` annotation in Java, where all you need to do is put that on a method and it will execute asynchronously.
haha, nice job dropping "swing" in there too
TIL Java 1 was called oak
Requiring that JPanel be subclassed is analogous to when you make make a servlet, you need to subclass HttpServlet. As far as eventListeners go, how would you do it otherwise? (in C# for example, they use the events/delegates support that is built in to the language, but it pretty much does the same thing)
Also a Java noob here, but I do have some other programming experience. So, my advice is that you might want to be careful with your offsets (in this case "newDeck[i]", "i" is your offset). It won't trigger an error here because you are creating the deck and not reading it, But if you were to try and access an offset at "i+1" and "i" was 52, you'd soon find out about it :) Incidentally you will also notice, should you print this out, that you will probably have 54 indices rather than the 52 you expect. Because you are starting off at 0, your maximum should actually be 51. 0 is a number too. And because you are accessing "i+1" offset, I believe it is also creating that additional index. Or I might just be reading it wrong :) Either way, good luck
This seems like the culprit to me.
no no no CARDS_PER_DECK DECK_SIZE may have some context, but you're really saying "this is the total number of cards per playing deck we expect." Pedantic, I know.
There is/was the [gcj project](http://gcc.gnu.org/java/), but it had a lot of problems and doesn't appear to have been updated in a long time. So yes it's possible in theory, but I wouldn't count on any comprehensive implementation at this time.
In my opinion that is a bad way of going about validation because if it fails to validate, the calling class has no idea. You cannot throw an exception and it cannot return null.
Upvote for being the only person in this whole thread to mention reflection. This is the original requirement for getters and setters on Javabeans. 
As far as I know there are no current projects that do this well with current JVM's I assume this stems from the desire to not have your end user actually download and install Java just to run your program. This can be done as you do not need to actually "install" Java. You can package the core JVM and libraries you need with your application and have it launch using your bundled JVM. From an end user perspective it's one install and one launcher, no extra work. On the build side you just need to leverage a tool like Maven to automate packaging. 
and point being?
Byte code is interpreted at runtime by definition, so without an interpreter, it's impossible. If you are somehow making it native, then you have cross-compiled and are no longer working with java at all. Byte code is almost 1 to 1 with java in that it can be decompiled back into java (mostly). Cross compiling would literally translate the java code into something else and then compile &amp;amp; assemble it. You would essentially be doing a programmatic port of the original code, which isn't the same as making java jvm-less
i believe you may want to try this: int j = (int) Math.floor(Math.random() * (deckSize - 1)); but if you have a small deck size, there's a good chance intDeck[0] goes unchanged by chance.
I'm not arguing best practices here but an exception surely can be thrown in a setter. I think you're too concerned about my contrived example code when I was only making a point on why getters/setters should be used instead of public fields. 
&gt;shouldn't it end at intDeck[1] though? when it gets to [0], there are no other un-swapped cards with which to swap it. using the code you provided ,when your loop condition reaches 0 , the probability that index [0] hasn't been swapped is (51/52)^51 , or 31.4 % . Continuing the loop one more iteration reduces that probability to 1/52 ,or 1.9% .
The asynchronous argument is a total myth though. In most cases you're going to be doing some sort of operation that will require you to spin a new thread out to do some amount of work so you don't block the main thread. So you might as well use a thread per socket and just stop pretending you're not going to use that thread. 
Yep, it all goes back to the history of the Java bean, pre j2ee even IIRC. [link](http://en.wikipedia.org/wiki/JavaBeans#JavaBean_Example)
I'm not 100% sure but I think this can do the job: www.excelsior-usa.com/jet.html 
There are a lot of posts about this on Stackoverflow e.g. http://stackoverflow.com/questions/2011664/compiling-a-java-program-into-an-exe
I'm mainly a java guy, if I want to write rich client apps, should I write in C# or something other than that? Just because Swing "sucks"? (It has improved I guess)
Indeed, then you'll only swap out one thread (the http acceptor thread) for another one (a worker thread). The net effect in that situation is that you could just as well have added one thread to the http thread pool and be done with it. async would make sense if you can split up your request into a large number of tasks that can be put on a queue and served piecemealy by a thread pool. This is relatively rare in normal interactive web applications. For specialized things like a download server it could perhaps be an option. 
Are you including JRebel in the picture?
This is an interesting post. It never occurred to me that I could use @Named and @ManagedBean together in order to get CDI injection in a JSF bean. JSF has injection but it is verbose. CDI is missing a view scope. Hopefully JSF 2.2 will just start using CDI injection in 2.2 so things are simplified even further.
Don't ever link to a direct download!
What information do you require in addition to the answers provided in the tutorial at http://hc.apache.org/httpcomponents-client-ga/tutorial/html/index.html?
With guava and static imports it's just: List&lt;String&gt; list = newArrayList(); and they have a multimap, and other things to simplify life. 
Yeah! Link some blog that has a link to the Java site so you can then download the file we are all supposed to read and talk about!
It's never good to go full on noob, but, what exactly do you mean by populated?
That file instance is only used inside of that method and never used again. This was a random occurrence, because I had been reading that file from the jar for quite a while now, and it suddenly began throwing that error and I could not pinpoint the change in the code that had caused it. Also, I thought I would test reading the file from the desktop instead of getting it as a resource, so I changed the line to the following and it worked. *And a big point of the program as a whole is portability, and being able to put the jar on a flash drive and still have all of your settings saved inside of the program, so not reading from jar isn't really an option.* File fr = new File("/home/connorelsea/Desktop/fr/");
Redundant yes. Explicit also yes. Not possibility the compiler will CONTORT this into something it wasn't meant to be. 
The word "redundant" implies you can be just as explicit with less effort. Also I fail to see what problems you're implying might be caused by type inference. If the compiler can't figure out what type you're trying to use, you're almost certainly doing something wrong.
Don't you have the source code? You can use http://www.jboss.org/byteman to inject arbitrary changes into your program without touching the source code.
You also never closed reader when you were done using it, but it falls out of scope at the end of the method. The final line of your detRun() should be reader.close(); Not closing files properly is one of the few ways to get a memory leak in java.
How unsurprised will you be when you hear "market rate" or "DOE" which means "If you knew, you wouldn't apply"
Is a ~700KB PDF that much of an issue? If it was a .tar.gz of an implementation then I might agree with you.
Thanks for the heads up!
This might sound rude... but it might help to understand the difference between API *specification* and *implementation*... The problem is that, while the API specification might seem easy to use, the actual implementation of a speech recognition software is **a lot** more complex. Take a look at the [Sphinx-4 FAQ](http://cmusphinx.sourceforge.net/sphinx4/#download_and_install) for a quick guide on what you need to do to use Sphinx-4 (which is an implementation of JSAPI 1.0, partly). Be warned - you will have some hours/days of configuration and trial/error ahead of you. 
Not rude at all :), frankly, I was surprised it seemed this simple. What I was referring to was also that the creation of grammar seemed to make it relatively simple to get various different commands worked out. Going to have a look at Sphinx-4 and see how far that gets me, thanks!
What you are looking for is called linear interpolation: http://en.wikipedia.org/wiki/Linear_interpolation since this is technically an infinite field, I think you should consider it being an addressable space rather than an array etc. Also... who has dialup these days?!
whats this doing here?
I'll look into that line equation, thanks a bunch!
Nice idea, thanks!
I making a program with commands in it, and one of them is that you can set a variable with a name. Got any ideas beisdes the one I have?
I think it would be good for the community as a whole and as such would have a quite a bit of interest. As for paying, I am not entirely sure what the community itself would be willing to do.
NVM, I'll just use a hashtable.
No time like the present to learn! :)
Basically it breaks down like this: Say you want to find a point between p1 and p2 that's 80% along the line starting from p1; you should be able to calculate the points as follows (allowing for some oddity here with negatives and stuff...) f(0.8) = point( (x1 - x2) * 0.8 + x1, (y1 - y2) * 0.8 + y1 ); That is at least the essence of what you are trying to do. I haven't tested this fully mind you, but as I recall that should be correct.
I don't see why you couldn't do that: final String s = "s"; //there you go But what you actually want to use are probably enums. They have a name() method that returns the name of the enum. But according to convention, they are usuall in all caps. If thats a problem you can set it up with your own name. enum Command { TEST("Test"), RUN("Run"); private String myName; Command(final String myName) { this.myName = myName; } public String getMyName() { return myName; } } public static void main(final String[] args) { for (Command c : Command.values()) { System.out.println(c.name()); System.out.println(c.getMyName()); } }
Have you checked out [JSpider](http://j-spider.sourceforge.net/)? It's not the easiest of things to configure from what I remember, but at least it'll be a case of configuration rather than having to roll your own solution. I've used it at work to check for dead links from our internet site before, so it should do what you need it to do.
Because I'm bored, how to find n points evenly across a line: public static Point2D[] pointsAlongLine(Line2D line, int n) { Point2D[] points = new Point2D[n]; if(n == 1) { points[0] = line.getP1(); return points; } double dy = line.getY2() - line.getY1(); double dx = line.getX2() - line.getX1(); double theta = dx &gt; 0.001 ? Math.atan(dy / dx) : dy &lt; 0 ? -Math.PI : Math.PI; double length = Math.abs(line.getP1().distance(line.getP2())); int numSegments = n - 1; double segmentLength = length / numSegments; double x = line.getX1(); double y = line.getY1(); double ddx = segmentLength * Math.cos(theta); double ddy = segmentLength * Math.sin(theta); for(int i = 0; i &lt; n; i++) { points[i] = new Point2D.Double(x, y); x += ddx; y += ddy; } return points; }
Great! Thanks a ton :) I should be able to use that and get an array of points each spaced 20% apart, then loop through them to have my rectangle follow their path. Thanks a ton :D
In addition to the stacktrace comments others have rightly pointed out, learn to use a debugger - most (all?) IDEs provide this feature, and it'll allow you to step through your code to see exactly what's going on.
Technically speaking, if you fail to close the file, it will be closed automatically by the finalizer when the object is garbage collected when it falls out of scope. But it's very bad practice to rely on this because the finalizer is called whenever the garbage collector gets around to it.
Awesome! Thanks :D
Your website's hiring page is of hilariously poor quality and full of spelling errors. 
reasonable price would be free since there is so much more out there that people can get for free.
Thanks for the comment, it's appreciated. Generally I tend to hate video demos / screen casts too because the speaker just takes too long to say anything. They introduce themselves, they talk about what they're going to do, then they ... I don't know ... tell you where the washrooms are ... get to the point! There's nothing like another experienced programmer sitting with you for 5 minutes and zipping through something that's complicated in a fast way so you can learn the gist in a couple minutes instead of a couple hours googling and trial-and-erroring. I'm imagining tutorials in fast programmer-to-programmer speak -- to convey how to do something complex fastly, and cover the gotchas. But it would be a lot of work outlining, recording, editing ... it's not really worth my time unless I can financially gain from it. This is what I do for a living after all, like The Joker said, "When you're good at something, never do it for free".
Yup! You won't get very far trying to sell these kinds of things unless you really went crazy and produced them like actual training videos and marketed your services as training programs. If you pair the marketing with the content you can but it is a lot of work and still very iffy initially. You can make ad-revenue and if you are good and produce quality content you will get offers for work and might even find a dream opportunity. A site like this is also very powerful when job hunting as it makes you stand out much more than your average applicant. Now if after a while you manage to get a following for your content/work you could offer services such as customized training/how-tos or premium content but I highly doubt that would work right out of the gate. 
I agree, anytime I am trying to solve a problem or learn something new if the results include videos I will skip them looking for text. Videos also serve as a very poor reference. If you mention an important concept in your video and I want to come back to it a simple google search may not pull it up. If I manage to find the video again then I am stuck searching through a 20-60min video for the 2.5mins I am looking for. 
Well then, no money for you. You need to make a name before selling something. Personally releasing the content on Youtube for free is the best way to build up a following and couple that with a website and ad revenue and you are laughing.
Yes I am interested, no I would not pay for it, and if you are "good at explaining things" you would do well to donate your time and talent back to the Eclipse project itself. There are *many* holes to fill in their documentation. Starting with the documentation for the Eclipse help system itself. Your pay? Update your resume, adding this experience under "Community Education and Outreach". That's how this is supposed to work. 
I second this, I've had this problem before and used this approach
http://www.minecraftwiki.net/wiki/Minecraft_Coder_Pack Allows you access to the Minecraft source afaik, there is a decompiler.
Will give it a go in a bit, thanks for the snippet!
Thanks for this!
The requested page is currently unavailable because it is pending review by our moderators. This URL will become functional if and when the page is approved. 
Especially worthless when you work somewhere that blocks streaming media...
I am of the opinion that you should try to give things like this away for free if possible. But ALWAYS leave a donate/tip jar within reach.
I appreciate what you're saying, but my motivation here is to be able to quit my day job. :) I'm a 9-to-5 programmer and I do well, but it would be great to have something on the side to generate income. If I could make 20% of my annual income on the side with something (like these tutorials) then I could take summers off or something like that. I have hobbies that I enjoy away from work -- playing guitar, drawing, and so on -- so if I'm going to take time away from those things to work on these tutorials, as much as I appreciate open source and free tutorials, it would have to be worth my while financially to do so.
I would love something like that, if you want consistent source of money, I'm sure Youtube's revenue system is sufficient.
I disagree, see https://www.destroyallsoftware.com/ (specifically check out https://www.destroyallsoftware.com/talks/wat/ if you want a laugh). He used to do 4 to 5 screencasts a month, now he does 2 to 3 ... and he has subscribers. The quality has to be high, and the output regular, but you can get paid. With no backlog and a subscription, maybe $5 a month if you are good. But realize that being "good" means having a flow, great editing, talking at events / tradeshows and having personality and perspective. I am a subscriber, a developer and I don't mind his $9 a month rate. It is expensive per the content, but he also has a backlog and I enjoy the content and want to reward him for doing it. If I ever had money issues, I would just sporadically subscribe picking up the backlog... 
Breaking the encapsulation model does have performance and code benefits under certain conditions. Ultimately Encapsulation is an illusion, it is easy to set your JVM security settings to allow reflection access to private members.
I think the best balance would be to have an advertised version (with a small 10 to 20 seconds ad at the beginning of each video) that is free so that people who can't pay can still access your content and tell their friends about it, and a premium, subscription-based no-ads version for people with more disposable income.
What I mean here by solving is to obtain an optimal or a near optimal solution, depending on the problem size. Tabu search, like other meta-heuristic search algorithms is able to obtain an optimal solution for small problem sizes easily, but if we have for example 200 nodes in TSP, it could take a very large number of iterations. Therefore we could settle for having a high quality solution in a short period of time than to wait a few years to get the "best" solution. And that's what meta-heuristic search is all about. thanks for your comment, I will add the clarification to the article.
Give and ye shall receive. You will learn a lot for yourself by trying to "explain it like I'm five". Edit: Also, you would have to do it better than [thenewboston](http://www.youtube.com/watch?v=Hl-zzrqQoSE&amp;feature=BFa&amp;list=SPFE2CE09D83EE3E28&amp;index=1) because he really does explain things like he's talking to a five year old. 
if the quality is right, you can expect to get paid: https://peepcode.com/
His mother was a hamster and his father smelled of elderberries, too.
I don't know, but I quite like the [Versions Maven Plugin](http://mojo.codehaus.org/versions-maven-plugin/). You can list all available updates to dependencies declared in your POM like this: mvn versions:display-dependency-updates It's not push or email or anything, but it's useful.
No, but when people are doing this all the time it gets annoying. I'd like to decide for myself if the download is worth it before downloading it.
Interested, absolutely.
But if you're interested in the early draft of a spec on concurrency utils for EE.. then the 700KB is worth it. If you're not, then you wouldn't even read a tweet about the spec that linked to the pdf.
Thank you for your instruction! When Java says that various parts of Swing are not Thread-Safe - does that mean that I have to worry about things? For example, lets say that I'm programming a space invader type game. I'd have a thread to move the aliens, a thread to move my laser, and another thread to move the bombs dropped from the aliens. All of this is somehow tied up in the "SwingUtilities.invokeLater (new Runnable() ... " thread. Does not being thread safe just mean don't use this for life threatening applications (like running nuclear power plants)?
Look at http://railscasts.com/. I likes Ryan Bate's approach too. He has some basics free casts and for advanced stuff you need to subscribe i.e. pay. 
Nice article. Thanx!
Thanks for the advice. I won't be doing any of that as none of that interests me. :) I don't want to go selling teaching services to suits in corporations, and I certainly don't want to teach in front of a room full of people. If all else fails, I'm happy to continue sitting in my cube and dealing with compiled bytes instead of corporate suits. I'm just trying to figure out a way to profit from my accumulated knowledge (without having to leave the comfort of my chair). But thanks again for the help, this is exactly the sort of info I need.
What exactly do you need to do? http://commons.apache.org/vfs/filesystems.html
Here you need to have a special condition when dx is ZERO.
`if(dx == 0) return (xT == x1) &amp;&amp; (y1 &lt;= xY) &amp;&amp; (xY &lt;= y2)`
This is great, I'm going to start using it for my projects. Thank you!
Yep, I can confirm that this is a javadoc
Click the "SkipLists" link...
ah *Edit* LOL he is responsible for FindBugs. My boss tried to use that at one point and it thought our repository was garbage (it kinda is...)
These things exist on youtube for free. If the quality of your content surpasses the content on youtube, and you market yourself correctly, there may be a market for it. However I think it might be a slight uphill battle. There's also another possibility that your content may be amazing, worth paying for, and far superior to the 'free' content available online, but simply the mentality of people is that this content should/does exist for free. Perhaps if you had a sample video to go by I might be a better judge of the potential. Under the right circumstances, I might pay for something like that, but I'd have to be impressed. *edit:* Reading this thread, I see a lot of bad *Reddit-style-business-advice.* The kind of advice which mimics the *"Pirates are good for the I.P. industry"* types advice from people who've never run a business, citing marketing blurbs from popular game devs and vague 'studies' as evidence. You might consider posting this in /r/Entrepreneur. *edit2:* You might consider marketing this to businesses, who wish to train their employees.
lol. The only tip i have is that certifications like that are completely meaningless imo.
if a post grad course requires this, then i'd look elsewhere. there was a 3 month period back in the late 90s where certifications meant something. now they are quick ways for monolithic companies to make more money
If I remember correctly, scala generates getters and setters internally (or can be configured to do so) for compliance with libraries that utilize Bean structures.
first off i like java and most of my company's code is written in java. our codebase is probably 80-85% java. from what I've experienced most of the hate for java stems from the "stuff" around java more than the language itself. java development can be a giant complicated mess - especially if you're looking towards doing web development. if you're a young or noob programmer setting up a hello world django, php or rails app is a joke. these languages/frameworks are easy to use and simple. if its your first time setting up a web app in java then i wish you luck. Play is rather new and user friendly but everything else can be headache inducing. also take a look at some of the projects' websites: http://www.eclipse.org/jetty/ http://www.hibernate.org/ http://struts.apache.org/ . they're a pain in the ass to navigate and are flat out uninviting. say what you will about hipsters and django or rails - but at least they care a bit about marketing their projects. j2ee is a nightmare too. WTF is the relationship between versions of EL, Servlet and JSP? why do different containers support different versions of each? which one supports EL 2.2? on tomcat version X you... replace el-api.jar with this and that. WTF is glassfish etc? people face a serious amount of bullshit when they want to hop on in and get their feet wet. Also - Eclipse used to be really bad (plugin version conflicts etc) and IntelliJ used to cost $500. doing java w/o an IDEA is an exercise in masochism. sure, id love it if it would get in modern features - but i'll take the nice concurrency api's over syntactic sugar... especially since IDEA writes the boilerplate code for me. Honestly - i feel that java's pretty great but i see no actual effort at make it it accessible to new folks... specially as a web development environment.
http://stackoverflow.com/questions/30571/how-do-i-tell-maven-to-use-the-latest-version-of-a-dependency
Could you possibly give me a snippet of what you did? I'm trying to wrap my head around how this would work ... this library allows for SFTP'ing in and (I would imagine) issuing FTP-like commands, which is not what I'm thinking. I'm probably just not understanding it completely ...
what's wrong with long endTime = System.currentTimeMillis() + 10*1000; // when you get to the code if (System.currentTimeMillis() &lt; endTime) { // the code } you probably need to be a bit more detailed about what you're doing
I'd love to help you instead of just giving you my code. It'd give me a chance to practice helping someone and allows you to work on your stuff without just 'getting the answer'. PM and tell me where you're at and we can get you up and running. I can tell you now, using the commons library, you're not looking at more than 20 lines of code and a recursive function.
also, many libraries keep an RSS feed that you can watch for changes.
What is your budget?
&gt; run for 10 seconds and that part only stops running, the rest of the programs keeps going I think you should isolate this part of the program into a separate thread first
Why would you ever do this over just using a map?
so it doesn't support multi-threading?
I don't think so... EDIT: Alright I'm actually quite unsure. Leave it to Slick to not tell you anything. I have no idea if it is or not.
Head First Java is a good beginner book that is actually fun to read. Download Netbeans and do some of their tutorials. Even if you are going to use Eclipse I recommend it for learning as it is easier to get started and the tutorials on various frameworks are good. 
I also learned Cold Fusion before java... though this was quite a while back and I understand CF has changed quite a bit. There are plenty of beginning java books out there. That's really where you should start. Buy one and work through the examples. Eventually you will have to learn architectural things like dependency injection and frameworks like Spring but first you need to understand how the language works. Though I'm a big java guy I should ask: what's your goal here? If you want to get into web dev then java may not be the right fit. Ruby on Rails or Python might work just as well. They are also probably a bit easier to learn.
Do your inexperienced Java developers have more experience with a different frontend language? What does "lots of users" mean? Hundreds? Thousands? Hundreds of thousands? "Enterprise" usually means a couple of thousand concurrent users max.
Terrible idea. If a method needs to be unit-tested and it's dangerous to expose publicly, there's probably a design there that needs to be abstracted away into another more generalized class.
Hundreds of thousands, it's a social networking startup. As for experience with different languages, no it's mostly a Java shop.
Thanks very much. I actually do own that book and am reading it. I feel like it's a little beginner-ish but I'm sure I'll catch some good tips here-and-there as I'm a fan of these books overall. Having a good handle on OOP from ActionScript, I'm finding it pretty easy going so far. Using ColdFusion Builder (which is Adobe's way of charging money for Eclipse), I'm pretty familiar with the Eclipse environment but would like to learn both.
I think you're right about CF's future (or lack there of). Java is a fine language if you want to make money but Ruby on Rails or Python will also bring in the cash. Possibly even more since many CS departments require Java but almost none use Ruby. Also of course, this depends on where you live and if you're willing to move. I'm based in SF and just about any of those language can be profitable. It might not be a bad idea to learn a little bit about all those language as once. Doing so allows you to appreciate the differences and similarities better. I know that Hashtables in other languages make a lot more sense once you've reviewed how they work in java.
Thanks. I'd really like to learn Ruby on Rails and Python as well. I'm currently in Houston (where a dollar goes a long way) but would love to live in SF or Colorado. What types of projects do you work on in Java?
I'm strictly web/dev. Working at Google so I can't go into too much detail about current projects. I'm not familiar with the market in Houston but SF has been pretty good, at least for me. I should note that I have about ten years experience so my situation is a bit different from someone looking for an entry-level position. That said, take a look on craigslist and see what kind of things are on offer. That's where I've found pretty much all my jobs. It will give you an idea of what people are looking for.
Horrible advice. Your unit tests should be testing the public interface of the class. If the private methods don't run, or if branches aren't taken, understand why. Once you understand why, you can either improve your test cases or remove dead code. Edit: Fixed typo.
There are two models that we use. The first is using JSF and JAX-RS side-by-side like you mention. Both JSF backing beans and JAX-RS call the same Services that are implemented using EJB beans. The other model is that JSF backing beans call JAX-RS endpoints in approximately the same way as they would otherwise call EJB services. We typically use the JAX-RS implementation specific client API for that. It depends a little on your system's architecture which setup is better. For applications that already have the EJB beans in the same JVM (meaning; either a .war with EJB beans merely in their own package, or an .ear with EJB beans in a separate EJB module), the side-by-side model is both easier and more performant. In the majority of the apps that we write this model is a no-brainer for this setup. If however the services already live on a different server, then the choice is between (binary) remote EJB and text based JAX-RS. For both cases you need to connect to a remote server, provide a URL somewhere and can't do a simple inject and be done with it. So if the JAX-RS Service layer is already there and you still have to create remote EJB interfaces, you could as well go for JAX-RS. Binary communication could be a bit faster (but beware, this isn't necessarily true!), but you have a tighter coupling between versions of your AS (e.g. JBoss AS 7 doesn't want to communicate with JBoss AS 6, let alone GlassFish or anything else). 
&gt;Typically the the sentiment with JSF seems to be that it doesn't really scale. Do you have any concrete benchmarks that provide evidence for this? I've seen Wicket fans claiming this in the past, but recent benchmarks (Google for World Wide Wait) indicate that JSF performs and scaled better than Wicket. In my personal experience, JSF scales approximately similar to many other server side frameworks. Notice that JSF changed rather radically between 1.x and 2.x and scales MUCH better than 1.x, which was pretty much limited by excessive usage of session memory. In 2.x this is not longer the cases. The Toys 'r us and Virgin Megastore sites famously use/used JSF and handles a very large load just fine.
A good "next book" is Head First Design Patterns.
I think the scalability argument against JSF is that it makes heavy use of the session for its component model, and the argument with Wicket is that Wicket makes less heavy use of the session for its component model. I think the common wisdom is that MVC frameworks are better for scalability than component frameworks because MVC frameworks are mostly stateless, so negligible session footprint, and give more control over the request/response cycle which might be necessary for integration and performance. You can do more with less. And if you're going to do extensive stuff with JS frameworks ExtJS, Sencha or jQuery, you won't be leveraging server side components as much anyways, so the case for MVC becomes stronger. If you go the MVC route, probably the most popular choice these days seems to be Spring Web MVC.
No benchmarks, just the general sentiment from research and using JSF in practice. I agree 2.1 is much better, and I also stated that it does scale fine for me. JSF vs any JavaScript framework consuming the API directly will probably lose in a "who scales better" contest. 
&gt;will probably lose in a "who scales better" contest. Something with assumptions being, well you probably know ;) It does remains an interesting question. The world wide wait benchmark did put up JSF against a "pure" Javascript framework (GWT). The difficulty of the question is in determining what it exactly is that's being measured. The server utilization, or the complete system? Many assumptions are based on the theory that a server normally runs a web framework + a business logic tier. With a JavaScript framework running on the client, you can remove the web framework from the equation. The same server then only runs the business logic, so assuming no other bottlenecks (like IO to a DB), the server will be able to execute more business logic calls then before. Or in other words: a single server box is said to scale better (being able to handle more concurrent requests before it saturates). That's the theory at least. In practice, a web framework like JSF does calls to business logic via a local (in-VM) path. By definition, the JavaScript framework cannot make that same kind of call; it's running on the remote client and not in the same server-side VM. So, instead of the web framework (like JSF), something comes in its place. This something is e.g. JAX-RS. Now what does JAX-RS do? It calls business services (like JSF does) and uhm, renders its result into XML or JSON, which in all honesty is what JSF does as well. JAX-RS can also utilize specialized formatters, which are not that distinct from JSF's renderers. There are differences, as JAX-RS does a direct rendering from a list of entities based on JAXB annotations, while JSF goes through a component tree to guide its rendering. JAX-RS, especially when rendering JSON, renders a more terse format than a ready to display HTML document is. But as you can see, the situation is not as simple as "with JavaScript frameworks you have the same server but without the web framework". In a way, JAX-RS is a web framework (a very specialized one, but still). Then the next issue is about measuring server performance vs the performance of the whole system. This has many subtle issues. With a full document (page) rendering as JSF does, the page is mostly ready-to-render when it's received by the client. With streaming rendering it already starts rendering before all data is received. When JavaScript frameworks receive their data, it's by definition not ready-to-render. There's a rendering step that's in its core not that much different from what JSF does that still has to start. So this means, the initial binary response by the business service has been transformed twice: first to JSON or XML by JAX-RS, and then to HTML by the JavaScript framework. Benchmarks often fail to acknowledge this step. They measure the time in which a server responds, or the load the server can sustain. For the customer, all that matters is of course when the page is actually rendered on ready to interact with on his screen. Only measuring the time it takes the server to send out a response in this case is like measuring the time it takes the DB server to respond to the business tier and then claim that is the time a user has to wait for his page. Another issue is that typically with a (JavaScript) client-side framework you make a number of orthogonal calls to get your data: `prices`, `inventory/current/2012`, stuff like that. This means a couple of calls need to be made over a high-latency low-bandwith connection. A web framework typically sends out a ful page in one call from the client. To compose it, the same orthogonal calls have to be made on the server to the business tier, but those are over low-latency high-bandwith connections. Then there are the issues that web frameworks like JSF can handle partial updates (ajax) just as well, and the fact that ready-to-render HTML might be more verbose, but often this is become the same CSS class appears over and over in the response. Now it happens to be that most if not all servers gzip the response and that kind of output compresses incredibly well. So we should not just look at the two formats and say that JAX-RS responses are clearly less verbose and thus smaller and thus utilize network bandwidth better, but we should look at the total sum of requests needed, and their gzipped sizes. Finally, most if not all benchmarks that I saw focus on getting data from the server. There is however also the case that data needs to flow back to the server, which means the data needs to be validated on the server. This is a task a JavaScript framework can only take over for the convenience of the user, not for the protection of the integrity and security of the server. So this takes time to do on the server, just like it takes a web framework like JSF time. It would be interesting what the differences were at this point. One thing that JAX-RS might have a harder time to do, is preventing a specific attack that exploits the lack of a connection between data that was rendered and data that's posted back. In JSF this is automatic, because of the strong connection between a rendering and a postback. I'm not here to downplay JavaScript frameworks and JAX-RS. In fact, I love JAX-RS and use if often. But there's just a lot of things going on, and it's a lot less clearcut than people assume.
whats their # so I can give it a shot ;)
Great! Thanks, I'll give that a shot next. 
In the most generic sense JSF is an MVC framework, just like Swing is an MVC framework. But, I think when people talk about MVC *web* frameworks, they are talking about the Model 2 architecture introduced by Struts. To clarify my meaning, I will refer to Struts-style MVC as Model 2 and JSF as component-based. The key difference, and what may be important in choosing a framework, is how the model and controller work. JSF models the components on the server, and the managed bean receives property changes and component events in the server code. URLs map to navigation rules which bind managed beans to pages which define the components to be used, abstracting away the details of the HTTP response/request cycle, giving a more "natural" style of MVC like Swing. On the other hand, Spring MVC maps URLs directly to methods on a controller object, and request attributes are mapped to a bean, map or method parameters (your call), in direct keeping with the HTTP protocol, and the controller method return value can return a string corresponding to a forwarding rule or can specify the exact content of the response. There is no concept of a "component" on the server, and the serialization of that component state is not necessary either in the request or the session. Component events happen on the client, and requests are made to the server for partial page updates via request parameters as in old-style HTML forms. I'm glad to hear that JSF 2 doesn't actually store the component tree on the server, which does give it an advantage over Wicket, but it does still store the viewstate as a hidden request attribute. That is overhead that must be included in the request to reconstitute the component tree on the server, which is non-zero overhead. On this basis, you can compare JSF to Wicket, but not JSF to Spring MVC. Because Model 2 MVC frameworks do not abstract away the details of HTTP, there is a scalability advantage. Model 2 requires minimal state, reducing footprint either in the session or the request, and the server, as there is no component tree, only simple parameters to a method call. This also means that Model 2 frameworks allow direct and natural use of jQuery, ExtJS or Sencha just as it would be used with Rails, PHP or Django, instead of the narrower JSF/Java EE ecosystem. These are serious considerations for using Model 2 frameworks instead of component frameworks.
I mean, specifically, why Java. I've been doing Java now for 7 years and I would not recommend Java to anyone. There are just much better languages to use if you just want to code. Java is great if you want to create a webapp that is fast (comparatively to dynamic languages) or write easy to use cross-OS applications but for fun? I'd never recommend Java. Esp with the stupidity being introduced with Java 7 and proposed for 8. If you want fun, check out Ruby or Python. IMO
yep, same here. "ehm right or left, which one it the modern look"? 
&gt;In the most generic sense JSF is an MVC framework, just like Swing is an MVC framework. But, I think when people talk about MVC web frameworks, they are talking about the Model 2 architecture introduced by Struts. Who are those people? They are certainly not the people I usually talk to or read work from. For instance, a quote from Core JavaServer Faces by Cay Horstmann et al: &gt;*Here are the most important services that the JSF framework provides:* &gt;**Model-view-controller** *architecture* Wikipedia: &gt;*JSF is a request-driven MVC web framework for constructing user interfaces using components.* See also: http://stackoverflow.com/questions/10111387/understanding-jsf-as-a-mvc-framework &gt;URLs map to navigation rules which bind managed beans to pages Mwhoah, not exactly. URLs map to views, which are (Facelet) pages. On this view, one or more managed beans can be bound to components. Navigation outcomes map to navigation rules (optionally) or directly to a view. &gt;but it does still store the viewstate as a hidden request attribute. It doesn't necessarily store the viewstate itself in a hidden request attribute. If state is stored on server, it stores only an identifier. Only if state is stored on the client, it stores the full view state in the hidden attribute. &gt;On the other hand, Spring MVC maps URLs directly to methods on a controller object It does, just like JAX-RS does, but I'm not sure this is anything the Model 2 design pattern specifically described. Basically, Model 2 said there was just a separation between business code and view code, as opposed to PHP/JSP style Model 1 patterns, where business logic is intertwined with the view logic on a single page. The model 2 examples just showed a Servlet accepting a request, calling out to an EJB, constructing a JavaBean and putting it in the request scope, and then dispatching to a JSP which would pick up this bean and use it for rendering. &gt;This also means that Model 2 frameworks allow direct and natural use of jQuery, ExtJS or Sencha While I do no agree with your "high-jacking" of the term Model 2 for this, there are various ways in which JSF can do this as well. One way is the AJAX functionality that's in JSF and that e.g. PrimeFaces uses intensively in combination with jQuery. The other method is what's used by e.g. OmniFaces. Via a GET parameter you specify the ID of a single component on a page and only that one will be rendered. This allows for fine-grained responses that can be consumed by e.g. jQuery. See http://showcase-omnifaces.rhcloud.com/showcase/components/componentIdParam.xhtml 
Looks quite a lot like one of the [JavaFX 2 examples](http://docs.oracle.com/javafx/2/get_started/css.htm)...
Probably just because it feels familiar with using ColdFusion (which rides on Java) and OOP that I've used from ActionScript. I thought it might be a smooth transition. I'm just looking to learn some new things and want to apply it to move up professionally.
&gt; JavaFX is evolving into a library and has a future as a Java UI, says IDC analyst Al Hilwa. "The unique scripting language is out, and what's in is a vision of a library of UI components that can be leveraged for different platforms, including mobile and desktop platforms. In a sense, JavaFX is evolving to be the strategic future UI technology for Java.... At least that is the vision." Sounds an awful lot like Swing all over again. What's gonna happen when that niche UI starts lagging behind modern practices set by browsers? Developers will be left with less-RIA than they would if embracing HTML5. At least for JavaFX there's some integration with the web ecosystem, but still I wouldn't embrace it. The only place left in the browser for anything non-W3C-standard is specific purpose apps that need client hardware access. Not sure if anything like that is being drafted, or just plain avoided for security reasons.
&gt;This is what I was talking about. Either the viewstate takes up space in the session (as the component tree, itself) Not exactly, the component tree is referenced only by the FacesContext, which is stored in TLS that gets cleared at the end of the request. So, essentially it's request scope. It's the (delta) state associated with components in said tree that ends up in the session or the response. &gt;You can't make the viewstate go away. Actually, you can. The simplest way is not to use forms. View state is to preserve the state after a postback. If there can't be a postback, there won't be view state. A form in JSF is the primary mechanism to mark parts of the tree as being eligible for a postback. It's true, you'll have to give up on some of the components that require forms and postbacks, but you can perfectly well create entire JSF based sites mainly based on `h:link` and `f:viewParam`. For the (really) advanced JSF users; the state mechanism is pluggable, so you can replace it with your own. I agree, this is at the moment not very realistic for the majority of users, but it is possible. All in all JSF should have an answer here. If it wasn't for real use cases, then it would be important enough just to silence people such as you! (no offense, that was an attempt at some humor ;)) More seriously again, many frameworks that claim to be stateless are used for applications that actually do have state somewhere. They typically pull in everything from the DB at each request or cheat at other ways using "converstation ids", "context ids" etc. Occasionally those are even just a kind of view state in disguise. &gt;I'm not "hijacking" the term You seemed to imply that Model 2 is necessarily about connecting a URL (URI) to a specific method in a controller, instead of associating a URL with a page/view/document. Sorry if I misinterpreted that. In the broadest sense, JSF also follows the Model 2 base principles. Your request first goes to a Servlet (the famous FacesServlet), this one selects a base view to be processed. Via meta-data on this view it executes business logic (note that the view doesn't execute this itself, the Servlet, via helper classes reads the meta data from the view, instantiates the class it mentions and call the method on that class that is referenced). Then the Servlet transfers control to the component tree that was read from the view it selected.
This article gives me absolutely no faith at all. Should I use JavaFX because it can be integrated with HTML5..? The only place where it sorta made sense was for Android, but I guess Oracle has burnt that bridge pretty thoroughly. 
Swing is mostly used for desktop apps, not web apps. I'm frankly of the persuasion that web apps in general and RIAs in particular are a horrible abomination that needs to die. The UX is terrible, the platform integration is terrible (can't even save a Goddamn file without jumping through hoops), the speed is terrible, the programming language is terrible (prototypes instead of classes, no static typing, no real support for namespaces/packages/something, no way to bring in external libraries without horrible hacks like require.js), the compatibility is terrible (everybody's implementation of the spec in question is different and usually only half-complete), etc. The browser is for information display, not rich applications. Let it remain so.
Yeah. You should just be using a boolean[1], or an AtomicBoolean, or something else. But yeah, I would never leave a class field public. Ever. Worst-case? Make TestReport a private inner class in the place you need to use it, so you can get at even private fields. At worst, default accessibility; never public. In any event, there's almost certainly a way to design around needing a "mutable boolean."
Rich web apps are fine, as long as you don't have to support anything before IE9. Regarding the programming languages... Douglas Crockford changed how I think about Javascript. I used to believe, as you do, that there was lack of support for namespaces/packages, limitted inheritance options, no classes, no statics etc, then I youtubed all of his yui lectures. Now I use the subset of JS with a handful of enabling patterns (power constructor especially). This has turned it into a powerful, useful, productive language. Regarding speed. That's mostly the DOM. Try Chrome's V8. It doesn't matter how fast your JS executes, the DOM overhead will always slow you down more.
&gt; Swing is mostly used for desktop apps, not web apps. I was just outlining a comparisson because Swing was designed with a similar purpose, it was meant to be a self-sufficient GUI API that didn't relly on native implementation. However the native implementations evolved in time and Swing progressively lagged behind until it became obsolete.
I agree with you 100%, but unfortunately good sense isn't going to win out when it comes to this stuff. People crave web apps even when they're essentially inferior.
No No No.
&gt;What I'm saying is that JSF creates components on the server side, which however you slice it, is not overhead that "Model 2" frameworks have I never said this wasn't the case. Originally I brought some perspective in the idea that with JavaScript frameworks the entire web framework is cut out and client-side code calls the same business logic that the web framework would otherwise call. We probably both agree that at least that picture is a "bit" too optimistic in favor of client-side frameworks, don't we? Then the issue was about JSF making heavy use of the HTTP session for its components. I explained this used to be the case, but now isn't the case anymore. There's delta state in the session, not components. Now you're talking about component overhead that frameworks that you call "Model 2" frameworks for the sake of clarity don't have. Again, I think what you actually refer to is "action based frameworks" aka "request based frameworks", but let's leave the terminology alone for the moment I think I get what you mean. Well, obviously a non-component based framework doesn't have the overhead of components. But likewise, a component based framework does not have the overhead of action mapping, which however you slice it, is also not zero. A flow of control does not magically arrive at your `doAjax` method. I'm not even talking about the fact that your client-side script may have to do many small requests to get all the data it needs. What about the overhead caused by that? Do you ever think about this? And what is this component overhead exactly? After a request, JSF instantiates a bunch of Java classes and links them together in a tree. This then drives the subsequent rendering. Is instantiating a bunch of classes per request really that expensive? &gt;What is the JSF equivalent to the following Spring MVC code? Are we talking about a direct one-to-one equivalent or idiomatic? Since idiomatic JSF would be to put a datatable component of some kind on a Facelet and bind it to a service providing that data. If pure (JSON) data was required, I wouldn't build a JSF Facelet for it but build a JAX-RS resource. Don't forget that JAX-RS and JSF don't bite each other. They are both part of the overall Java EE 6 framework. So, if you'd slightly rephrased your question into what is the Java EE 6 equivalent I would probably give you something like: @Produces("application/json") @RequestScoped public class MyResource { @Inject private MyService myService; @GET @Path("/application/doajax.do") public List&lt;MyData&gt; doAjax() { return myService.getMyData(); } } &gt;which don't try to abstract HTTP as something else. Component based frameworks still respond to HTTP, and at least JSF supports both GET and POST requests to which the server responds with documents (pages). Why isn't that HTTP ? *(assuming for the moment that HTTP is something we want to actually stay close to, e.g. do you also think it's a virtue that assembler stays close to the CPU's ABI, while Java completely abstracts from this?)* Why is JavaScript running inside a browser that does HTTP requests which returns "abstract data (JSON/XML)", which is then processed by that script, more HTTP than a plain link doing an HTTP requests to which the server responds with a ready-to-render HTML document? Wasn't HTTP really about transferring HTML, instead of JSON? Does the HTTP specification even talk about JavaScript, jQuery and JSON? JSF specifically stays fairly close to the structure of an HTML document. It has a `head`, `body`, `form`, `link`, etc. It doesn't totally abstract from HTML like e.g. Vaadin tries to do. And even then, higher-level abstractions are not necessarily morally evil. If the amount of abstraction that Vaadin does works, then good for them. It doesn't make JSF morally superior since it's closer to HTML and it doesn't make assembler morally superior than Java since it's closer to the CPU.
How about now: http://openjdk.java.net/projects/openjfx/ Mecurial repo: http://hg.openjdk.java.net/openjfx/2.2/master
That's a neat plugin, never heard of it before, just tried it out. The one thing I would suggest is to move the configuration section outside of the plugin information, for example the plugin I configured looks like this: &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-enforcer-plugin&lt;/artifactId&gt; &lt;version&gt;${maven-enforcer.version}&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;enforce&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;enforce&lt;/goal&gt; &lt;/goals&gt; &lt;phase&gt;validate&lt;/phase&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;configuration&gt; &lt;rules&gt; &lt;DependencyConvergence /&gt; &lt;/rules&gt; &lt;/configuration&gt; &lt;/plugin&gt; Now binding it to the phase is optional, but because the configuration is outside of the execution, You can now also run it from the command line manualy: #&gt; mvn enforcer:enforce #&gt; mvn enforcer:display-info
According to the page you just linked to, "the Project is currently focused on absorbing the existing code base from Oracle and building a functioning community around it." In other words, not complete.
You call [this GUI](http://www.valuadder.com/res/shots/multiple-of-discretionary-earnings.png) "obsolete"?
Holy shit dude, migrating software from one team to another takes time, especially when it's compounded with having to check licenses for license incompatibilities (which often means re-writing code), etc. etc. What do you want? They're open sourcing it; it's a process they're actively maintaining. Did your mama never teach you to be patient?
I think by this point we can safely say that HTML+CSS+JS is here to stay. Especially with WebGL. I think it's also safe to say that they're here to stay for good reason: Despite their shortcomings, they are massively successful at what they do. The unfortunate thing is *how* you have to build them. They're clumsy, and not really well designed for the task we've shoehorned them into. GWT is a good start at getting around that, but it's still *way* too complicated. TL;DR: You can't stop the signal, Mal.
we have an architect on staff, he recommended Jsf+jaxrs 
You can try to use site like http://www.udemy.com/ to release your courses. Here you can get a general idea about how much others are charging and how many users have currently subscribed to a course. You can release initial parts of your course free and remaining parts as paid. I feel having a blog can help in promoting your courses.
jQuery, D3, SVG and HTML5 all work on IE9. And there are good options available for support of older browsers. &gt;Bizarre language hacks do not impress me. It's still a terrible language, just with an abstraction layer over it to make it slightly less so. Still no static typing or multiple inheritance. Read JavaScript The Good Parts. 
All languages and frameworks are great. ....except .Net ;)
After using Java throughout college and still unable to land an entry level position with it (or Python / C# / C++), I'd wager a month is not enough. Knowing OOP, java containers and IO model, serialization, inheritance, Swing, templates, etc is not enough for an entry level position - you need provable project experience in FOSS or internships. And a good internship takes 3 months.
Depends on where your at. As far as I can tell businesses are kind of desperate here in SF. Still, I admit that its been a long time since I was entry level so my experience may no longer be applicable.
I have been studying and using java in my free time for 4 months now. I don't know how well I would rate my skills. I have been applying to jobs in the Tampa area for 3 months now. 45 job applications completed. 2 in person interviews. No job offers. Maybe I just suck? lol
Well you are restricting yourself to Tampa. Also, everyone wants a 10 year industry veteran of every SQL backend, polyglot model, master of all languages, for $50k a year. Most businesses try to set unreasonably high standards and sit on open positions hoping for some supercoder to fall from the sky into their lap.
If you had a basis from C++, I would say Java would be easy to learn in a month since a lot of concepts are very similar and learning the new libraries will take some time but not that much if you spend 4 hours a day. However C is no Object oriented, so unless you have worked with an object oriented language before I would take more then a month, because it can get confusing if you don't have good reference material. Good luck with it, should be fun. tl;dr; objects can be a bitch
You sure about that? I am living in SF right now and I've been looking for entry level job for 1.5 years and all I get is "your experience is not strong enough". ENTRY LEVEL!!! I asked the VP of Engineering for a junior level job job I was interviewing for if they were really looking for a junior guy and if they were going to train him. He just laughed.
I remain unconvinced.
This is all completely dependent on your definition of having "learned java". If being able to make a simple android app and knowing how to properly use the documentation is all you're going for, then yes, you can absolutely learn it in a month. Obviously, though, you're not going to spend a month learning java and be an expert, but I'm sure you already knew that. I like the criterea that dominosci gave: If you can understand the book *Effective Java*, then you know java.
At least *now* you can tell that welcome is not a misplaced form element's label...
I don't know if it's even supposed to be there though. Something that short is the kind of thing you'd stick into the title bar as a dialog title. If it absolutely must be there for aesthetic reasons though (to match the style of the rest of the program, say), then it's very much an improvement. 
I took an introduction to Java course at University a while back after coming from a strong C background. I'm sure when you lump all the time together, I spent less than 120 hours (30 days * 4 hours) on the course. I feel my understanding is sufficient, but everybody is different. Nobody can determine whether 120 hours is enough for *you* to learn Java except *you*. Give it a try, what do you have to lose??
One month is enough to learn most of the syntax and a fraction of the API. To actually learn it so that you *know* it, see http://norvig.com/21-days.html
I don't actually hate working in vb or c#. they're both great languages to work with and easy for newcomers to programming and .Net (we could say) that is basically a JEE copy-cat. Which is nice! ;) and anyways, I'm kind of "forced by management" to do some .Not :P programming myself where I work. what I actually hate about .Net as a framework is the fact it is so badly, horribly built that most of the time .Net developers spend on debugging or trying to find workarounds to unresolvable issues due to the framework's bad design. another issue is how .Net applications are being distributed. unlike Java, when a .Net developer has very little to none chances of being able to distribute an application that does not have dependencies over the operating system (Windows) so very few apps can work outside the MS ecosystem and most of the time with the requirement of having to install a bunch of third party "junk" run-times or make tedious registry configurations on other (windows) production systems in order to run these apps causing all sorts of issues like IIS server malfunctions, memory leaks, windows hang-ups and many other lovely problems :P With Java on the other hand developers are capable completely distribute applications that are "self dependent", even down to the JVM level... and a great example to that is the various specialized JVMs, the different distributions of the Tomcat app servers or the capability to be fully inter-operable across all platforms... Visual Studio also sucks... both in design but also in the way that is being distributed on development machines... it basically also suffers from the "Bad.Not dependency gene" that all .Net apps are carriers of from their first "hello world" compilation... I see many people having great hesitation towards learning Java. I guess it is because of the fact that Java covers such a vast range of capabilities that most of the time it scares even the "guru" developers. There is also in the air, among (half-witted) developers, the phrase that says "eeemmm... Java is kinda slow.." ...bull****... I totally disagree on that. anyone that claims that should do a goggle search on "GCJ" and get their facts straitened up.. THERE ARE NO SLOW PROGRAMMING LANGUAGES... ONLY SLOW DEVELOPERS... ;)
That's not much to go on, can you give any more detail?
I know simple jdbc. I'll give you an example. try { String query = "UPDATE batches SET batch_txt=('" + txtUpdateBatch.getText() + "') WHERE batch_id=('" + objBatchModel.getId() + "') "; try { conn = Connect.ConnectDB(); pst = conn.prepareStatement(query); } catch (SQLException ex) { JOptionPane.showMessageDialog(null, ex.toString()); } pst.executeUpdate(); JOptionPane.showMessageDialog(null, "Updated"); txtDeleteBatch.setText(txtUpdateBatch.getText()); UpdateJTable(); } catch (SQLException ex) { JOptionPane.showMessageDialog(null, ex.toString()); } 
I agree on that. At the end of the day it all depends on what are the requirements for a project. There is no "Holy Grail" programming language or framework. The true "Holy Grail" in programming is being properly prepared and completely aware of all the requirements of a project.
JPA is pretty good, it allows you to access and modify your data in pure Java. There are loads of tutorials on the web, [the official doc](http://docs.oracle.com/javaee/6/tutorial/doc/bnbpz.html) is good too.
I'm by no means an expert, not even close, but from my small experience: JDBC, JPA, Hibernate, TopLink, ... Usually with JDBC you'll get the best performance (if you know what you are doing at least), but also the most work. JPA and Hibernate are similar, maybe someone else can shed more light into them, but Hibernate is a bit heavy, I've used it in the past and was not pleased with the memory consumption (but maybe I was doing stuff the wrong way). I'm now using JPA for a small project and can't complain, but haven't tested much of it yet.
...everything has it's purpose, even Java's encapsulation... I don't like garlic either but it is good for blood pressure. they encapsulate it in medicine you know... :)
One goal is to make sure that the connections, statements, and so on are always closed, so do that in a `finally` block if at all possible. Sometimes, code from outside the access handler has to do some processing on the result set, which can be awkward if you can't be sure that the programmer working on that code remembers to close everything after he is done. I have found that a good way to deal with this issue is to just expose a routine to the outside code that expects a callback method as input parameter - that way, you can do all data access stuff inside the routine, then when you have the result set you pass that on to the callback, and when the callback is done processing, you can close everything that needs closing. Granted, you still have to rely on the callback to return, but I think you can expect that more reasonably than expecting the programmer to remember closing your result sets.
Okay, so just JDBC. There's three important things to consider: 1. Always close your resources in a `finally` block after the query. Connections, ResultSets, and Statements can all be closed. Closing a Connection should implicitly close any Statement or ResultSet using that Connection, but I usually prefer to be explicit. 2. Parameterize your SQL to avoid injection. 3. Separate your database interaction into Data Access Objects (DAOs), since having database code sprinkled everywhere is poor design. Let me try to give an example: Let's say you need to store a `Cat` in a database. The `Cat` class might look like this: public class Cat { private int catId; private String breed; private int age; private int cuteness; public Cat(breed, age, cuteness) { this.breed = breed; this.age = age; this.cuteness = cuteness; } public void meow() { System.out.println("Meow!"); } //Pretend there are getters and setters here } Now, we want to let the `Cat` focus on being a `Cat` - it shouldn't know anything about databases, because it is a Cat. So, let's make a `CatDAO` that knows how to store and retrieve Cats from a database. public class CatDAO { public void storeCat(Cat cat) { //DB code to store a Cat } public Cat getCatById(int id) { //DB code to get a Cat by id } public List&lt;Cat&gt; getCatsByBreed(String breed) { //DB code to select Cats by breed } public Cat getRandomCat() { //DB code to select a random Cat } //A convenience method to transform DB rows into objects is often useful private List&lt;Cat&gt; convertToCats(ResultSet rs) { //For each row, construct a Cat by pulling the appropriate column data } } So, we've constructed a simple data access layer for our Cats. You can add any kind of database interaction you need, such as updating a Cat, deleting a Cat, whatever. Our concerns are nicely separated - Cats are Cats, and CatDAOs store and retrieve Cats. For larger projects, look into [Hibernate](http://www.hibernate.org/).
&gt; what I actually hate about .Net as a framework is the fact it is so badly, horribly built that most of the time .Net developers spend on debugging or trying to find workarounds to unresolvable issues due to the framework's bad design. I really don't know what you're talking about here. I'm currently doing full time .NET development and this just isn't a problem. &gt; another issue is how .Net applications are being distributed Yeah, it's Windows only. The CLR never gets installed with the app. It really doesn't matter though. That's just the constraints. If we don't want an app tied to Windows, we don't use .NET. No biggie. &gt; Visual Studio also sucks... both in design but also in the way that is being distributed on development machines... it basically also suffers from the "Bad.Not dependency gene" that all .Net apps are carriers of from their first "hello world" compilation... Uh... really? You think dependency issues are unique to .NET apps? Have you ever tried to get a repeatable build out of Maven using external repositories? Ugh... In the end, they both suck on this count, but only because of the fantastically complicated apps we build these days. As for VS, it sucks no more or less than Eclipse or any other Java IDE. Sorry, it's just true. &gt; I see many people having great hesitation towards learning Java. This is a terribly unfair phenomenon in my opinion. The JVM is a great platform on which to create innovative apps. The only thing I caution architects especially on is that Java Enterprise development really requires a LOT of forethought in putting together your stack before getting underway with development. On the other hand, .NET is getting to be more and more like this as well; so in my opinion a good architect is essential to any project to make sure things get off on the right foot and stay on a productive path.
An exception w/out any code is worthless....post src or how you are creating and using said JTextField
Just rolled up my JDK to match that. Code ran fine w/out issues. Seems to be environmental related....sorry, not sure what's going on.
Honestly I powered through and learned Java up to finishing codingbat within 7 days. I did put in a solid 17+ hours a day though. 
I'd like to see a repost. Also might check cscareeradvice (think that's the name). Ah it's cscareerquestions.
the mistake here is to believe that encapsulation is the only way to achieve all that. going back to the Python example, as I've said all methods there are public however the community has agreed on a convention that is to mark "internal" methods by using a name that starts with an underscore. the point is, the author's intentions are expressed as a warning not as a restriction and that's why in Python it is said that you work "among consenting adults" it's not up to you to restrct me on the things I can do with your code so there what you and your IDE have is a warning but it's my choice to follow it and my own problem if I don't. this actually works, and it's better because you cannot possibly forsee all the ways in which I can interact with your code; it happened to me several times in the past that I had to fork and mess with other people's code just to override their silly prohibitions simply because I'm doing something they never imagined someone could or wished for. that's what I mean when I say Java gets in the way, those limitations serve no purpose and I will override them if I have to, you're just making it harder for me without accomplishing anything at all. 
I wrote that code myself. The API is just fine. Needs some libraries to achieve some interesting effects, but guess what? Those libraries exist and work perfectly well.
http://www.springsource.org/spring-data/rest http://ql.io/
http://peichhorn.github.com/lombok-pg/Builder.html
Badly written blogspam!
This is what im not sure of. Is it really best practices to slap a plain old js library ontop of a Rest backend?
http://static.springsource.org/spring/docs/current/spring-framework-reference/html/jdbc.html http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/
If you do do a blog post, then include a couple of simple examples of what is NOT safe and what will cause corruption. I think that you're saying that if I start almost everything in main but then run another thread it will screw up. Example: public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { public void run() { createAndShowGUI(); //MODIFY DATA HERE } }); //START ANOTHER THREAD HERE THAT MODIFIES THE DATA Thread thr1 = new MyThread(); thr1.start(); }
You're comparing a markup language to an *actual* programming language? HTML isn't even Turing Complete.
Why? Do you think all classes must be thread-safe?
Download Java (NetBeans IDE recommended): http://www.oracle.com/technetwork/java/javase/downloads/index.html Java API: http://docs.oracle.com/javase/7/docs/api/ I always found it useful to start reading through my textbook ahead of class. Try the example code and then try to change it and see if it works like you thought it would.
two pro-tips: don't compare strings using == use ( String bob; if (bob.equals("bob")) and Java is pass by value. I'd also recommend starting with netbeans, Eclipse is another IDE (Like visual studio), but the GUI designer that comes with netbeans is pretty nice compared to trying to install GUI tools into eclipse. 
Is there a 64-Bit version for Windows of [This](http://www.oracle.com/technetwork/java/javase/downloads/jdk-7-netbeans-download-432126.html)? Also, that second link, are those all Keywords for Java?
Simple inheritance will do the trick: public class WatchdogThread extends Thread { public WatchdogThread() { //Call Thread class constructor super(); //Register with watchdog thingy } } Another approach would be a Thread factory: public class ThreadFactory { public static Thread getThread() { //Register with watchdog thingy return new Thread(); } } You'll probably want the first approach, as you'll need to wrap all methods that you would normally call on a Thread object if you want to track its lifecycle well. I imagine the watchdog should be notified when the thread starts, ends, etc. 
Using approach #1 would this mean I have to wrap all the existing thread methods? I'm not sure I would need to modify anything besides the start and stop basically.
No, you just override the methods you need to insert the watchdog hook into. The rest will be left to the base Thread class.
I'm about the next level ahead of you, in that I've taken an intro java class, and now I'm in the next one up. I had some previous programming experience (Matlab, Maple, Assembly, C ... all math/microcontroller stuff), but it was really rushed and tagged onto other things I was doing. If you like to work independently and have paper in front of you to read, then get a decent book. I don't think you'd have to buy it, just check a few out of the library and work through them. In the first class, I used "Starting Out w/ Java" by Tony Gaddis. He's a great writer, the format is standard, and the book had some nice entry level assignments. I've also used his book on C++ as a reference to get me through some lab work. In my current class, I'm using "Java How to Program: Late Objects Version" by Deitel. I prefer it over Gaddis, since the assignments are tougher and it talks a lot about the formalism (if that word can apply) of programming. I've also used "Teach Yourself C++ in 24 Hours", and it was crap compared to Gaddis, although I can't speak for their Java book.
I'm sure github agrees with you.
The look and feel has nothing to do with whether it's a language or a data source though. For that matter, the programming language (which argv referred to as well), is absolutely Turing complete. 
Thank you. :)
yes. this is becoming more and more popular. At my company we are routinely developing just an API and letting the front end developers control all access to it. The only thing they use server side rendering for is things like includes in the pages. I haven't used it but I believe a lot of Play framework projects make use of a stack like this. You may want to take a look at some example projects using that.
Not sure if you are still having a problem... also not really sure why no one has mentioned this. But use ajax and grab the prices from your database. JQuery makes it really easy to do that as well. Make sure you provide back end checks as well since the user could easily just modify the data on the page and make the price whatever they want. But yea. Whenever a drop down item is selected call a javascript function which will grab the price from the data base and then on the success callback have the total price for the page update (based on the other current selections). When the user submits it as well. Do not pass the price on. You will want to pass what the user selected on and then recalculate the price on your side and tell the user this is your total price. Javascript is completely client sided and can easily be changed (so is html). PHP is executed on your server (and then the results are sent to the client).
Thanks, I got it figured out. I don't have a database attached to the site right now--don't really need one yet--and as everything ordered is a service to be provided there's no way for a customer to cheat on the price--if they tried, I'd simply refund what they paid and not do the work. I'll definitely be looking into JQuery as things get more complex though--thanks!
Did you even try google? If you even want to attempt to make it as a programmer you'll need to learn.
I remember learning java, and most of all I remember the steep learning curve. Here's what I'd do to get yourself up and running. Use Jcreator - it's clean and simple to use, has a button for compile &amp; run which is all you need. Ignore the class bit at the top (for now), you'll learn about that on your course. Mark all methods you create with public static (for now). Pick something simple to write (like a maths quiz) and start coding.
Makes a lot of sense for enterprise business applications - CRM and inventory software for example, the kind of software you have to train your operators to use, but once done they're highly productive as all the information is there on screen at once. 
I really find it difficult to believe that you are a Python fan and not a Java one... :) After all both of these languages can work wonders if you mix them together. &gt; if you can't trust the people who's on your side then you've got the wrong people, it's not about the language and like I've said I can and will modify your code if I have to, no matter what you do. You got me wrong again there. It is not a matter of trust. I know that is possible for others to override the functionality of a library that is restricted by encapsulation (and quite easily basically). What I'm trying to say is that encapsulation can be used to have a more organized structure on huge APIs and in OO languages, it is a very common thing for APIs or SDKs to get quite messed up if developers are not organized and thus end up doing a lot of mistakes on critical projects. Now.. with any features that languages might have, programmers should know how to use them correctly I guess or they will become a problem not only to others but to themselves as well.. &gt; languages tend to set their cliche markets and that means nothing; &gt; likewise Java has been the "enterprise" thing for a long time (whatever that means, it doesn't really mean anything) so it's only natural that managers who don't know the technical side just use what is already being used. I totally disagree on this. Java is the "enterprise thing" as you say just because it just so happened have "characteristics" and a certain "history" behind it that made it more popular in that sector (just like Python is popular on *nix operating systems). For example Java utilizes its execution in a JVM environment that can allow huge systems (like server-side ERP application servers along with their bundled database for example) to be deployed and start working by just copying the files to your server and running the startup shell script. On the other hand Python (when we are talking about its use in *nix OSes) is more integrated into the system which allows developers to create really powerful apps with just a few .py scripts. (and if you add a bit of pyQT or pyGTK.. voila!! you can create an entire desktop OS from scratch if you want!). Now both of the above scenarios could work in any language.. but wheels would have to be re-invented... ;) correct? ..so it's not about managers (I HATE MANAGERS!!) who don't know the technical side.. I guess it's a good thing that languages tend to get segmented into being more specific to certain development areas... something like the wide variety of *nix distributions all concentrated on different scenarios of use. ....just imagine if everything was like Windows... that would be dull wouldn't it?... ;) 
And like twitter github requires an incredibly complex set of subsystems to perform well on rails. That's a complexity level many companies can't afford
A thousand times this. This becomes much more apparent when/if you ever write a third-party library.
For example: @RunWith(MockitoJUnitRunner.class) @ContextConfiguration(locations = { "classpath:test-context.xml" }) public class MyTestClass { @Mock private Object mocked; private TestContextManager testContextManager; @Autowired private AutowiredObject engine; @Before public void setupSpringContext() throws Exception { this.testContextManager = new TestContextManager(getClass()); this.testContextManager.prepareTestInstance(this); } }
Well, after it's all installed and works and stuff, some might suggest using and IDE (Integrated development environment) that streamlines a lot of things, but unless you're making a huge project, using the command line to compile and run might be easier. I'd suggest starting off by making random small programs like one that lists the prime numbers, maybe a simple game or something. Then once you know instinctively how to make methods and "public static void main..." you should look up Java API's and see if there are any cool things you'd like to use.
The basic steps are: * write a java class that extend Applet and deploy it; * put either an &lt;applet&gt; or an &lt;object&gt; tag in your HTML (mind that the applet tag is deprecated); * within the applet do anything you want including Sockets. You might need to wrap it it AccessController.doPrivileged(new PrivilegedAction() { public Object run() { //code } }); to properly invoke insecure code that the user must agree with (otherwise the browser and/or jvm might scream profanities at you). Also mind that each and every step is a huge pain (good luck using the object tag in a cross-browser away). If you can, I would suggest giving a try at JavaFX as it seems to be favored in terms of executing code in the client these days, though I can't help you much there (and as far I know only java 7 clients will have javaFX by default). If you can afford to be bleeding edge, maybe also try HTML5 WebSockets before you dwell in ancient (applets are circa 90's) APIs.
I don't agree. I see it as a positive that they are choosing to keep the cadence at ~2 years. I'd rather see features like lambda shipping in 2013 than waiting for Jigsaw. Java 8 will also have a lot of other improvements that deserve to be released sooner rather than later. Two years is better than the 5 years between 6 and 7. EOLed versions can get still get support under a commercial support contractincluding even 1.4 if you pay for it. It's only free public updates that are ending for older versions.
Do you mean like a programmer who is functional (i.e. who functions) or like one who uses functional programming languages.
I think OP means the former since he clearly states that he's starting to learn java. Given that, the latter doesn't make much sense. Of course that is just an educated guess on my part...an assumption if you will. And as such it is antithetical to proper programmer-think. But arriving at this assumption required a bit of analytical/critical thinking which is a very important programmer-think trait.
What level of programming are you at? How many languages do you already know? Which language do you want to learn more? Do you prefer video, audio, text, or PowerPoint lessons? Are you looking to get certified or do you just want the basics? You need to give more information if you want help finding a good site.
Can't help you there, I've only learned dysfunctional programming in college.
It's difficult to know exactly what you mean without any examples of what you are having difficulty with. However, one piece of advice I'd give anyone trying to learn programming is to try and break the problem into the smallest steps you can; don't worry about about how to program the problem at first, just try and solve the problem and then try to turn it into code. I hope this helps a bit! I may be able to help a bit more if you give me some more information.
So, my problem before has been that unsigned applets cant connect to my server. Would wrapping the code in "AccessController.doPrivileged(new PrivilegedAction() {" prompt the user to agree with running the applet and thereby connecting to a server?
Java really needs to speed up the release cycle and stop over-prioritizing backwards compatibility. The original spec made mistakes, is the java team going to let that haunt them for the life of the language? I think they should focus on keeping backwards compatibility for 2 versions from the newest. Java 8 would be backwards compatible to java 6, etc. If companies need to run old code built off java 1.4 or something, backport bugfixes and security fixes to legacy versions and charge for it. 
Well, maybe Jigsaw will end up letting you select versions of the core Java API. Then you can start dropping deprecated things, throwing in compatibility shims for the old versions, etc. It'd be a *hell* of a balancing act to make sure that doesn't break any old code, though, and I suspect Oracle has better things to do&amp;hellip;