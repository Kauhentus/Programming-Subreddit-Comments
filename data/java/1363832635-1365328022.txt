Doing this in Java is a little harder than doing it in something like javascript. Javascript has an eval() function built in that allows it to execute strings like they were code. One thought is that Java has a javascript engine in it these days. You can set up most of the program then have small javascript sections for whatever your purpose is. With Java 6 though, they added access to a JavaCompiler which means in theory, you can compile and execute classes on the fly. [ToolProvider](http://docs.oracle.com/javase/7/docs/api/javax/tools/ToolProvider.html).getSystemJavaCompiler() is what you'll be looking at. Found [this](http://www.java2s.com/Code/Java/JDK-6/CompilingfromMemory.htm) example after searching for 'java compile code at runtime'
Oh, I agree with you completely! If I was interviewing someone for a position it wouldn't matter how many Spring apps they made if they couldn't tell me the difference between an array list and a linked list because the interview would end right there. &gt;Read Design Patterns and see if you can figure out why some of the patterns in that book are harmful and/dangerous. The "Gang of Four" Design Patterns or Head First Design Patterns? I think I'll end up reading both but I'll probably start with the latter. &gt;Read Fowler's Refactoring book. Thanks for the book recommendation! &gt;Finally, keep writing code. Strive to make it as compact and concise as possible while still being perfectly clear. It's an obsession of mine.
A git repo in of itself is entirely local. You could install it on your dev machine via a usb loaded with the files and work entirely offline. Every change gets a commit, and if you mess up and break something you need to release, you can simply reload any version of your program from any commit - and you don't lose the data you were working on. Github is simply a way to access that same repo from any computer. You can just store it on your USB though.
Yeah I thought that too, but I have only ever programmed Java in Eclipse and I am pretty confident I could write coherent program in microsoft notepad or whatever. I dont think auto completion is bad at all. You either type code and if you need something from System. you look it up on the internet and learn it that way, or look through the auto-complete list and learn it that way. In the end, if you do it enough times youll learn either way.
At my undergrad C.S. program we were required to take a programming test with no internet and an IDE like jgrasp. It was pretty clear who "grew up" on an IDE like eclipse and those who learned how to actually code and wrote the syntax by hand with no crutches. You could not start upper division classes until passing this test and you did not have access to the internet... just your test and the API. 
I've used an extension to Eclipse called DrJava that will allow you to type and execute code on the fly. It's basically like typing lines into main, and pressing enter to execute. So, it's possible! If you just want to play around you can get DrJava here: http://drjava.sourceforge.net/
Java is two things, a virtual machine on which to run programs, and a language. The Java *language* is statically compiled, it's not interpreted on the fly like you're trying to do. If you want to dynamically execute code, you might want to look into a different JVM language like groovy or scala instead, they should be able to do this with ease. Many apps use something called an "expression language" for executing arbitary strings (OGNL is an example), that's what I've done in situations where I wanted to execute code dynamically. You can come up with a simple DSL (domain specific language) and run expression language within a context that provides the methods and variables which you want your DSL to offer. You can also look into something called 'beanshell'. The best solution really depends on your use case. Based on your description, I'd look into something like scala which is going to be a more powerful and dynamic language. Personally, I've never even used scala - I almost alway can easily accomplish what I need using the Java language 
http://docs.oracle.com/javase/tutorial/collections/interfaces/map.html A map is a type of data structure which "maps" objects by a key. A key is like an alias, just something you can use to look up something by. HashMap is a Map implemented using a hash table. Someone could implement another type of Map which behaves the same way but stores the objects differently, but don't worry about that for now. The semantics of Map are that, you can file away objects by a key. Say you create Employee objects for every employee in the company, and you want to index them by employee ID. You can create a Map which maps the employees objects by ID, then you can get a hold of the full employee object knowing only that employee's ID. Here's some sample data: Employee[] sampleEmployees = { new Employee(1234, "tom", "smith"), new Employee(1563, "jimmy", "thompson"), }; Now you can create maps and index that data based on certain keys, to make it easy to look up later using only those bits of information ( see next part). The types of objects which will go in the map are mentioned, For example &lt;Integer, Employee&gt; means our keys will be integers, and the values we map to them will be Employees. Map&lt;Integer, Employee&gt; employeeIdIndex = new HashMap&lt;&gt;() Map&lt;String , Employee&gt; employeeLastNameIndex = new HashMap&lt;&gt;() Now to fill the empty maps with the sample data. We're creating a "mapping" between two types of objects, for example, I can create a map which lets you store or retrieve Employee records using their ID. for (Employee e : sampleEmployees) { employeeIdIndex.put(e.getId(), e); employeeLastNameIndex.put(e.getLastName(), e); } Say you wanted to create a user interface where you let people look up the employee by ID. They just enter and ID, and you want to display all the user's data. Employee desiredEmployee = employeeIdIndex.get(1234); The above code would find Tom Smith's employee object that you previously filled in the map. Now you have access to all the data. So maps are easy way to create associations. Consider it like creating "buckets" with names (keys). You can put an object in these buckets and then look them up later using that bucket's name (key). A key can be any type of object. So this is a powerful way to create relationships between objects.
Someone will always say this whenever this question comes up. Thank you for saying it, but... "Handholding" is a nonsense term and you don't develop bad habits. It's a very good thing to be able to focus on the actual problem, the business logic, proper code organization and thread safety than the nuances of getting your code to compile on the command line...and Java has a lot of those nuances. Take your condescending crap to a different subreddit.
Yeah, I know. Seemed like the post was misplaced and better suited for the other aubreddits I mentioned.
For experienced devs sure you are correct but I have proctored the above mentioned test (see other comments) and watched hundreds of students fail because of their dependancy on ide's like eclipse. Are there people who this does not affect... Sure but they are the exception not the norm. 
I highly doubt they will give a shit.
Well, it's either the toolbar or you pay for java, I imagine. 
There's libraries that can do this, e.g. [Javassist](http://www.jboss.org/javassist). Keep in mind that this is for really advanced use, as this is potentially dangerous and a security risk.
If you're a developer, just install the Oracle JDK instead of the JRE if you're on Windows. I don't believe it comes with any toolbar prompts of any kind, and it installs a JRE. It is a heftier download and install, though. 
Thanks. I think this is a really interesting approach that you suggest here because basically EVERY book, tutorial, video recommends to start by using Eclipse or similar. Could you explain a little more on what bad habits one could acquire by "handholding"? Actually, I am not new in the programming game, I am just new with Java. I have been programming since the late 80's, with Basic, Pascal, C, Assembly, later in the 90's I switched to Delphi (worked as a professional Delphi programmer for a short period). So, I don't really think that an IDE will do me much harm.
I installed it recently. I (think?) the updater for the JRE that comes with the JDK might contain a toolbar prompt, but I don't think the actual JDK installer does when installing the JRE for the first time. That's still awful, though. 
What kind of problems are you having with OSGi? Maybe I can give you some hints on what you might be doing wrong. I'm currently finishing the first release of a project done with OSGi, with around 200 specialised bundles and another 200 bundles for third party libs/dependencies... We have more than half of the bundles used in both the (Equinox/Jetty) server and the client (Eclipse RCP) client without problems. It actually helped my team think of the system in a modular way... It was hard for them at the beginning, as they had no previous experience with OSGi, but with careful mentoring they were able to make their mind switch into "modular" mode, and then everything started to fit for them.
I agree on that, sorry for the unclear entry. Yet, I would be very interested to see the reason behind your suggestion even if it may not be for me. Some other entry-level programmer might benefit. Also, I am open to any new ideas and approaches. Please, be so kind to elaborate your reason.
I think its all part of a plan to give java the boot in order to make room for another equivalent but not free alternative that they are preparing...
Lets take something as simple as an object. I can make a class and automate generating the toString equals, compareTo, getters, setters, etc. if I have only used the tool to do the work for me I may not understand the "why" these methods are important. Hand coding this class without an IDE that will autogenerate these methods you will start running into issues like newing up your object and then printing it and getting an address printed and not the values in your class. Troubleshooting this problem should lead you to the solution of creating the toString method. This also goes in hand with understanding private vs public visibilities and other things. I feel it is beneficial for a new programmer to go through this growing process so that when they graduate to "big boy" programming nd a better ide like eclipse they have a better understanding of what eclipse is actually doing and it won't seem like "magic". 
Thank you! That is a really good point. Take away the magic and learn from scratch. Basically, this brings it back to the days when I started programming - there was no such thing as an "IDE" - we used a WordPerfect-like editor and a command line compiler/linker. No magic at all. At best, some batch files would help doing some of the compiling/linking magic. EDIT: Pondering over your suggestion I have to agree even more! Instinctively, your approach was exactly the way I learned each new language (Basic, Pascal, C, HTML, CSS, PHP, Logo, Forth). I just didn't think it fully through - now with more time and more explanation, it makes absolutely perfect sense. If I could give more upvotes to your suggestion, I'd definitely do.
One advantage that OS X doesn't have a browser (by default) that supports toolbars is that Oracle doesn't (can't) pack it with the Java installer for OS X.
How the fuck does Oracle still exist as a company then?
I admire your enthusiasm to learn, but in my experience as a dev, employers want people who can do stuff, get stuff to work and create stuff; they don't care if it's not done exactly the right way. As long as it works reasonably well and is robust, that's fine. Self taught people aren't "struggling", they're learning to get stuff done. I didn't mean just code something in Java SE, I meant create stuff using whatever you want to learn. Set up a Tomcat server. Set up a web server. Hell, write your own web server in Java that connects to various kinds of database, churns out dynamic HTML/CSS/JS etc, that produces RSS/XML and build it with Maven/Ant.
Well they certainly don't make any money from browser plugins so I guess its the thousands of other enterprise products and services they provide worldwide.
Do you actually know what Oracle does?
As a side note, you should be aware that Java's approach to concurrency (threads, locks, mutable objects, etc.) is seen by many as a dead end. It leads to hideously difficult problems and it's basically impossible to get right in a non-trivial system. For another approach to concurrency watch/read Rich Hickey and take a look at Clojure. [Related](http://www.youtube.com/watch?v=dGVqrGmwOAw&amp;feature=player_detailpage#t=1460s)
Worse, change.org is a highly political site - and the LAST thing you ever want to do is mix business and politics.
It does not. Only the installer from java.com has it.
After finding the Ask toolbar on my wife's laptop, tracing it back to a Java update, and cleaning it up, I uninstalled Java. Her life has not changed. Like the rest of you, I am a Java developer. Like (I bet) most of you, I use Java to write server or mobile software. It is just plain not necessary for most standard desktop users, and shit like this will only erode their install base further. Of course, distribution deals like this are pretty lucrative, and with Oracle's dwindling earnings, it's not likely to go away any time soon.
I'll definitely look into IntelliJ. Interested to see the differences to Eclipse. What put me off with Eclipse initially is the time that it took to get the configuration that I wanted.
Just disable the browser plugin. Some people use Java for desktop applications.
No toolbar on JDK. installed it few days ago. They may have removed it.
Most of the jdk has been open sourced. Why don't you just install icedtea or whatever?
Change.org... You get pulled in to sign a petition for something you have a strong opinion about, put in your email and then they send you all kinds of other 'sponsored' petitions for things I care nothing of without asking permission, which is spam. And sell your email, also illegal. But, because it's a political emailing it's exempt from any can-spam laws.
You are completely ignoring the Marc Fleury years of jboss. Pot, kettle, black much? I know saying these things will get me downvoted to hell...oh well. Once in a while, people need to tell the emperor about his clothes. 
As far as I remember, and can actually still look up (the Internet has a long memory), JBoss (mainly via Marc and Bill Burke) was one of the few that actually put some effort in defending against the relentless Spring attacks. Realize that Spring was a very small and unknown project back then. They HAD to make some noise to get heard.
Thinking != Knowing
Maybe if President Obama asked them to remove the toolbar.
The truth is that I dont give a shit myself. I'll uncheck and move along and if Java is percieved as a lesser product to that, then be it...
Or on the JRE. Installed an update yesterday.
And living in a cardboard box means not having a high air conditioning bill.
We do. It's a matter of principle. It also devaules Java as a development language when the users of our software are being asked to install bloat and crap ware.
Tell that to its shareholders when they hear about giving the boot to one of the most widely used programing language. If they cannot successfully monetize Java I don't see how they have survived all this years.
My concern is not for myself (because of the JDK install you mentioned) but more the image the platform I develop on. I want Java to be successful and professional. I feel like the inclusion of the toolbar damages the image of Java on the desktop. Installing .NET doesn't do any such thing.
dunno why you got downvotes... Ninite is the shit.
How does that matter to you as a developer? Is Java any less effective of a language? 
No, but as a user (and an IT professional) I'd be put off my tools trying to install junk ware on my PCs and be less likely to trust Java and any applications made with it. Java already has a poor reputation to many (not all); this doesn't help.
Just like history books, people's memory is very biased. http://yro.slashdot.org/story/04/05/18/2043206/jboss-caught-in-anonymous-posting-scheme 
I agree with you, but it would be naïve to think that any company would fully disclose its strategies. Java seems do be "dying" due to many other very serious issues, e.g. security, evolution pace... What I am saying is that this might very well be an attempt to prepare the ground for a next-gen alternative - which would of course need to be much more lucrative than Java.
It is possible to "execute" a String in Java. Which really means compiling a class from the source code in the String and adding it to the classloader: public static Object compile(final String source) throws Exception { final ByteArrayOutputStream classContent = new ByteArrayOutputStream(); final JavaCompiler compiler = ToolProvider.getSystemJavaCompiler(); JavaFileManager mm = new ForwardingJavaFileManager&lt;JavaFileManager&gt;( compiler.getStandardFileManager(null, null, null)) { @Override public JavaFileObject getJavaFileForOutput(Location location, String className, Kind kind, FileObject sibling) throws IOException { return new SimpleJavaFileObject(URI.create("memo:///Generated" + kind.extension), kind) { @Override public OutputStream openOutputStream() throws IOException { return classContent; } }; } }; StringWriter w = new StringWriter(); compiler.getTask(w, mm, null, null, null, Arrays.asList( new SimpleJavaFileObject(URI.create("string:///Generated.java"), Kind.SOURCE) { @Override public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException { return "public class Generated { " + source + " } "; } } )).call(); String msg = w.toString(); if(msg.length() &gt; 0) { throw new Exception(msg.replaceAll("string:.*", "")); } final ClassLoader classLoader = new ClassLoader() { @Override protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException { byte[] data = classContent.toByteArray(); return defineClass(name, data, 0, data.length); } }; return classLoader.loadClass("Generated").newInstance(); } Which lets you do this: Object instance = compile("public boolean isOkay() { return true; }"); System.out.println(instance.getClass().getMethod("isOkay").invoke(instance));
Yes, suicide.
cmon, ellison's next yacht ain't gonna fund itself.
Kids install Java. Reason: Minecraft
I agree. It's just so bizarre that Oracle would adopt these kinds of practices with a tool used by large businesses, hospitals, schools, the government... How would the DoD feel if one day, their secure clients were inexplicably redirecting them to Ask.com?! I understand there are sufficient protections/baselining procedures to prevent this from happening, which is too bad because it would be a huge black eye to Oracle and maybe motivate them to change their policies.
bump
I concur (pun intended). Scala and Clojure have good approaches to concurrency.
I am so confused at everyone's frustration with this. Uncheck the fucking box and click next.
If I remember correctly, MC was built with Java 6, so you might actually have a good point there. MCP (what modders use) was also recommended to be Java6 only, before more recent versions. https://www.youtube.com/watch?v=jf9z0J96iMQ&amp;feature=player_embedded This is what I could find. If you know how to run Terminal without breaking your machine, you can probably try it out.
&gt; Installing .NET doesn't do any such thing. That's at least a touch different isn't it?
I added my comment to the original blog post - completely missing how old the article was and that probably no-one would read my comments. So I copy them below: - Spring's Exception handling is excellent and 99 times out of 100 I will get a clear message when something goes wrong. The same cannot be said of other vendors JEE implementations. - I am not 100% convinced that each JEE6 app server has 100% same behavior with JEE6 e.g. CDI. There are also significant amount of bugs being found in App Server's JEE implementations e.g. look at fix list for WAS 8 - Spring has solved many of the problems the real world throws at it, where JEE hasn't. Yes this means it's bigger, but something probably already exists to solve your issue. JEE6 I feel like I am facing these issues for the first time. For example on WebSphere I wanted to change the Connection's txn isolation level - 30 minutes later my problem was solved by http://static.springsource.org/spring/docs/3.0.x/api/org/springframework/jdbc/datasource/WebSphereDataSourceAdapter.html - Generally I feel if I need to do something complex I can do that with Spring. I am not sure JEE gives me the same flexibility. - The JPA implementations on different app servers is a mess. OpenJPA or Hibernate - the behaviour is not the same, even though the JPA API is For simple to medium complexity apps I think JEE6 is the way forward - but for very large and complex, enterprise apps I would stick with Spring. EDIT: changed link, as it had become truncated when copying from javacodegeeks website
You need to add an ActionListener to the first cbox, then on the actionPerformed method you change the second cbox values, depending on the value selected on the first cbox. See [here](http://www.java2s.com/Code/JavaAPI/javax.swing/JComboBoxaddActionListenerActionListenerlis.htm). Hope this helps you.
See [here](http://docs.oracle.com/javase/tutorial/uiswing/components/combobox.html). In particular, check out the section "Handling Events on a Combo Box". The action listener for the first combo box can make changes to the second combo box.
Thank you soooo much. Finally got this working!
This seems like homework, not 100% sure but I am not in the business of doing other peoples school work. But I can try to guide you in the correct direction. Well here is your problem. String[] != Person. You are trying to store one type of data as another. What is the purpose of the Person class? Is it a data store? What is the purpose of the String[]? Is there a better way to store the data in the String[]? 
can you post the code to [Pastebin](http://pastebin.com) 
I would say, casting is not possible. But, since you have a person class, why not write a setter method (or init) - something in the line of: public Person ToPerson(String[] Info) { Person.Name = Info[0]; ... ... } Then you have a "converter" to a Person Object which you can store in your ArrayList ***EDIT:*** This code should be included in either the Person class, or in the Class that stores the Arraylist.
Are you using some IDE? it's nothing difficult actually. You can have multiple JDKs installed and if you are using an IDE you can have different projects using different JDKs. Go download JDK 1.6, install it, (for Netbeans): right click on a specific project, go to properties-&gt;sources-&gt;Source/Binary-format and set it to JDK 1.6 and you are done.
what are you trying to tell us with these ~250 lines of code without any further comment whatsoever? 
It still is. Oldschool-RS is where it's at, and private servers.
FOR ---&gt; my classmates
In this case: don't use reddit to communicate with your mates, please. 
What would that do?
You need a reference to the object to remove the object from the array list. You shouldn't construct a new object to remove it. Well you could.. if it was such that newObj.equals(objYouWantToRemove) but I doubt you want to do this as it is very sloppy.
Notice the top comment is from [Joshua Bloch](http://en.wikipedia.org/wiki/Joshua_Bloch)
Installing JDK also freezes you at that patch level, which is not good if you were planning to keep the Java browser plugin enabled.
Right, but if I construct the concrete subject in a concrete observer, it creates a new object in memory and and doesn't reference the old one. Could you explain a little further on how to use the newOb.equals, because I thought this compares two objects. Also, I'm pretty sure I have to do it in the main method and nowhere else, but I could be wrong.
It was a play on mixing business and politics.
I dont get whats so wrong with ask toolbar anyway. Anyone enlighten?
import java.awt.BorderLayout; import java.awt.ItemSelectable; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import javax.swing.JComboBox; import javax.swing.JFrame; public class Farming { public static void main(final String args[]) { final String labels[] = { "Allotments", "Flowers", "Herbs", "Trees", "Hops" }; final JFrame frame = new JFrame("Farming Level Calculator"); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); JComboBox comboBox = new JComboBox(labels); frame.add(comboBox, BorderLayout.NORTH); ActionListener actionListener = new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { System.out.print("Command: " + actionEvent.getActionCommand()); ItemSelectable is = (ItemSelectable)actionEvent.getSource(); System.out.print(", Selected: " + selectedString(is)); if(selectedString(is)=="Allotments") { String allotment[] = {"Potatos","Onions","Cabbages","Tomatoes","Sweetcorn","Stawberries","Watermelons"}; JComboBox allotments = new JComboBox(allotment); frame.add(allotments, BorderLayout.SOUTH); } This is my code so far. I can't make the second box appear. Did I do something wrong?
Depends on the situation. Let's say you write code that you would like to catch and report null pointer exceptions to the user instead of exiting. How do you propose to do that? Does every method in your entire app have to check every single reference for null with an if statement?
It depends on the situation. For things like a NullPointerException you would of course want to check for null first to avoid this. However what if you're reading from a file, or downloading something from the internet? You can't do an if statement at the start to check if the download will time out can you. Exceptions are for circumstances where something has gone wrong, and you can't always prevent that. So that is why we throw Exceptions and then catch them wherever it is necessary
You have to create new person instances using the strings you read in from the CSV file.
Steve Yegge writes the best blog posts! And thanks for the book recommendation!
I think of exceptions as the "I didn't anticipate my user doing THIS" as opposed to the if-statements as the "Yeah I bet the user will leave this field blank." Exceptions are good for logging unanticipated actions.
Since Oracle bought Sun, they have done everything they could to destroy Java. First, every bug tracker and every Java forum hosted by Sun was taken down and returned with different URLs (so links are broken everywhere). Then Ask toolbar. Then unfixed security holes. Thank God Sun opensourced the JDK before the merge. Edit: *unfixed* security flaws.
Runescape exploded in popularity recently when they opened up "Runescape 2008" servers. It's basically the game from back when everyone loved it. I imagine the hype will dwindle when the nostalgia wears off, but people are playing it a ton right now.
Okay thanks a lot guys. I just finished the chapter on this. I'm trying to learn Java on my own by reading 'head first' and doing the tutorials by Bucky aka New Boston. I end up reading more than I do the tutorials unfortunately, but if anyone has any suggestions I'd be happy to here them! Thanks again for the replies. 
I took [this example](http://www.kodejava.org/examples/433.html) and modified for you. package javaapplication1; import javax.swing.JComboBox; import javax.swing.JFrame; import javax.swing.SwingUtilities; import java.awt.FlowLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import javax.swing.DefaultComboBoxModel; public class JavaApplication1 extends JFrame { public JavaApplication1() { initialize(); } private void initialize() { setSize(300, 300); setLayout(new FlowLayout(FlowLayout.LEFT)); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); String labels[] = { "Allotments", "Flowers", "Herbs", "Trees", "Hops" }; final JComboBox comboBox = new JComboBox&lt;String&gt;(labels); final JComboBox comboBox2 = new JComboBox&lt;String&gt;(); comboBox.setEditable(false); // // Create an ActionListener for the JComboBox component. // comboBox.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent event) { switch(comboBox.getSelectedItem().toString()){ case "Allotments": comboBox2.removeAllItems();; DefaultComboBoxModel dcm = (DefaultComboBoxModel) comboBox2.getModel(); String allotment[] = {"Potatos","Onions","Cabbages","Tomatoes","Sweetcorn","Stawberries","Watermelons"}; for(int index = 0; index &lt; allotment.length; index++){ comboBox2.addItem(allotment[index].toString()); } break; } System.out.println(comboBox.getSelectedItem()); } }); getContentPane().add(comboBox); getContentPane().add(comboBox2); } public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { public void run() { new JavaApplication1().setVisible(true); } }); } } It may not be the best solution, but hey, it works!
№5 in Forbes billionaires list is laughing somewhere right now.
That sounds great too! Thanks, and notice how similar our users are. 
I use the latest publicly available releases of NetBeans, Apache Maven, Apache Archiva, and Apache Coninuum. Generally, my choice of Servlet Container is Apache Tomcat. My choise of app server is GlassFish. I like using Resin too. Of course then there's testing tools such as JUnit (unit testing), JMeter (load testing), Selenium (page navigation), Arquillian (integration tests within real environments). Then there's memory leak detection tools such as Plumbr and JProfiler.
You must override the toString() method if you want to print anything other than the object reference. This method returns a String object which is printed using System.out.println(...). Also you will see that the contents of all Person objects are the same because you are using static variables. A static variable will result in a 'shared' variable for all instances.
Requiring different definitions for "string" depending on the input makes it slightly more complicated. But it's still doable. Just wrap your logic in a single function: public static void parseData(Scanner s, String delimiter){ s.useDelimiter(delimiter); // your code here } Then you can call it for a file: parseData(new Scanner(new FIle(f)),"\\s+"); or for standard input: parseData(new Scanner(System.in),"[\r\n]"); In this scenario you'd just use s.next(); to pull the next token out of the Scanner. However, all that said, it is a generally a good idea to make your functions as atomic as possible, so since these are two separate tasks, the should maybe be two separate methods. It really just depends on what's going to be the easiest to maintain, read, and troubleshoot.
Minecraft :) Learn Java NOW!!!
I've not noticed anyone point out the fact that Exceptions unroll the stack all the way up until they are handled. So you can throw an exception from one method and handle it much higher up where it actually makes sense to do so. There's also the fact that an Exception is actually a rich object. You can include whatever details make sense on your Exception classes, so that the place that handles them has the most information to do so. For example, with JSR 303 Bean Validation, the Constraint Violation Exception contains details of the bean that failed validation, all of the ways that it failed and what the failures were.
Okay, I see your fundamental design flaw there. First, you can convert the toPerson method into a constructor. Seconds, you either need to override the *toString* method to print the Person data, or you should make a *public printPerson* method that prints the records. I am currently not on my PC, only on my mobile, so I can't post the code. Basically, it should be something in the line of (in the Person class): public void printPerson() { System.out.println(firstName); System.out.println(lastName); ... } The above method should be called in your for(...) loop. Also, you could make the adding of the persons dynamic by reading the buffer in a loop until the end of the file.
Thank you so much! This has worked! I knew it would be something simple. Too much college work going on at once. Thanks again, really appreciate it
There are significant bugs in Spring as well. Just check what's currently open. And ofcourse Java EE solves real world problems. Why would I be able run all my apps on it otherwise? If it didn't solve anything, I could just as well run directly on the bare JDK only.
And you think Springsource didn't do that? Go read some old posts on theserverside, with all the comments screaming stuff like "Spring is much better", "does anyone still use EJB" below articles about EJB and Java EE. Look up the reply history of most of those commenters. A little suppecious, aren't they?
Wow, an interesting-sounding link on /r/java
Thank you a lot! This really helps
Thanks for that spdqbr. I tried using your delimiter method for standard input and it is now capturing the entire line as one string in Debug mode in Eclipse. When I type more than 1 line in Debug Mode, it reads the first string then "", then the next string which is once again followed by "". Ultimately it goes through one final time and reads in "". Thereafter when I try to continue the debugging, the code stops at: while(s.hasNext()) { ... } Do you know what I might do here? Also when I simply run the program, I can type a number of lines but nothing happens when I hit Enter. This made me realize that I didn't really understand the requirement, "where EACH INPUT LINE is a string and an empty line signifies end of input". When does the program know that all the input has been entered by the user? PS: How do I do code tags? Kind Regards, Giri
This is kind of off subject from what you want to do, you should have a reference available to the object in both the location you wish to add it, and remove it. But this is what I meant by the .equals: In order for the item to be removed from the array list, the item has to conform to itemYouWantToRemove.equals(itemYouTryToRemove) So, for example, these are equal: String s1 = "stringg"; String s2 = "stringg"; Because s1.equals(s2) returns true. If you make a custom object, by default, .equals won't return true, even if the field values are the same. So Test t = new Test("test1") Test tt = new Test("test1") doing t.equals(tt) won't return true, because the default implementation of .equals will compare the .hashcode() values of the objects, which is usually calculated by the memory address of the object. When you do new Object(), this is creating a new object in memory, in a separate location, even if they look to be the same as another previously created object. You could, however, override the .equals method in your custom class, and create your own conditions for it to return true. So for example, you could do something like this: //this is within a class called Test, that has a class field called String testString, which is set when it is passed through the constructor @Override public boolean equals(Object o) { if(o instanceof Test) { //casting to Test class Test t =(Test)o; if(this.testString==null &amp;&amp; t.testString == null) return true; else if(this.testString==null || t.testString==null) return false; else if(this.testString.equals(t.testString)) return true; else return false; } else return false; } http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html#equals(java.lang.Object) http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Object.html#hashCode() It is highly recommended to override hashcode() as well so that they return the same value for objects where .equals is true, and different values when it is not true.
Do not use a social linking site. Just link to the article directly.
Maven-based UI-backend integration testing?
But I gave an example related to setting the Connection's isolation level. JEE6 is nice but when the problems get more complex you find yourself solving problems which Spring has already solved a long time ago. Do you seriously think I can list every issue or quantify in terms of numbers!? This is not a call for scientific papers it's a discussion forum. 
I've generally always managed to find root cause when using Spring eg. Dependency issues or database issues. Not so with JEE implementations where it's clear the spec tests have been met, but the code quality and value add to a developer (eg. Sensible exception handling) is not necessarily there. Another important point is that Spring source is available. Different vendors JEE implementations - not the case. Having the source available can be very important. 
Make the two methods getMinimumMass() and isValidMass() **abstract** methods in your SpaceObjects class. Then each of your child classes will have to provide their own implementation.
:) but then why would people visit a java subreddit and read a post about JEE vs. Spring (which itself was written last year) but then not expect comments or discussion on it. This is very strange to me. 
Keep asking questions. It's key to get the fundamentals right before moving on. 
Sorry to hear about your learning disability. Context will tell you that I meant Akanaka. 
A quick look at your posts tells me you work for IBM. No wonder people using Spring scares you so.
Don't call it "SpaceObjects". Call it SpaceObject. Asteroid IS A SpaceObject. Ship IS A SpaceObject. Yes, you can override a base class method in your child class. If you're using modern Java, @Override. The static stuff bugs me, but maybe you're just learning about static in some contrived way.
The empty strings are probably due to some line break issues. I'm guessing you're on windows, in which case your lines are going to have both a carriage return and line break at the end: "hello world[enter]" = "hello world\r\n" So the scanner is tokenizing on \r OR \n, which means you first get "hello world" then "". To fix this you could change your delimiter to "[\r\n]+", but then you would be unable to read a blank line (which is your exit condition, so probably not good). A simpler solution might be to simply employ Scanner's hasNextLine() and nextLine() methods, in which you don't have to muck around with delimiters at all. But then you might consider separating these two methods. Also, the code is stopping at while(s.hasNext()) { ... } because it's waiting for more input. From the [javadoc for Scanner](http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html#hasNext%28%29): &gt;This method may block while waiting for input to scan Which means it's just going to keep waiting for more input until it can match a token. You'll have to explicitly break out of your loop when you see an empty line. As for code tags, just put four (or more) spaces in front of a new line: If this text is not code Then this text would be code And so would this But not this Hopefully my ramblings have been more useful than not! 
But if I make them Abstract, doesn't that force me to make my whole class abstract?
I need them static because I need to check these values before I set them. I use them in my constructor
I won't be needing to make objects of the SpaceObject class. But I will need methods that won't need to be overwritten (like: getVelocity() is used in the 3 subclasses). Do I need to make those methods abstract too?
Nope. public abstract class SpaceObject { public double getVelocity() { return (distance / time); } abstract double getMinimumValue(){}; abstract boolean isValidMass(){}; } public class Asteriod extends SpaceObject { public Asteroid() {} public double getMinimumValue(){ return minValue; } public boolean isValidMass(){ return massIsValid; } }
Thanks!
Here's a small program demonstrating this: /* Demo.java */ public class Demo { public static void main(String[] args) { A aa = new A(); A ba = new B(); // a B of static type A B bb = new B(); aa.yay(); ba.yay(); bb.yay(); // "A:…", "A:…", "B:…" aa.woo(); ba.woo(); bb.woo(); // "A:…", "B:…", "B:…" } } class A { public static void yay() { System.out.println("A: Yay!"); } public void woo() { System.out.println("A: Woo!"); } } class B extends A { //@Override /* Must uncomment the @Override or we get the following error from javac: Demo.java:23: method does not override or implement a method from a supertype @Override ^ 1 error */ public static void yay() { System.out.println("B: Yay!"); } public void woo() { System.out.println("B: Woo!"); } } 
You can call non-static methods in the constructor. The object has been *instantiated*, so that the `this` reference refers to an actual object meaning that instance methods can be called. When in the constructor, the object is being *initialized* and is not ready for use by *outside* classes. See [here](http://docs.oracle.com/javase/tutorial/java/javaOO/objectcreation.html).
SpaceObject should just take a minimumMass value in its constructor. public abstract class SpaceObject { public SpaceObject(double minimumMass) {...} } public final class Asteroid { private static final double MINIMUM_MASS = 250.0; public Asteroid(...) { super(MINIMUM_MASS); .... } }
oh wow i have never done hashmap. i think i did something similar in ruby. i guess i need to research it a bit.
Yes this is fairly easy. Just include the files in your jar, and you get ahold of them by something like ClassName.class.getResourceAsStream("datafile") where ClassName is the name of the current class. Then you can do whatever you want.
But how do I instantiase other variables?
JSON or XML are popular formats for wire protocols. And since you have to do the conversion into an object yourself, it's a lot more transparent. Using a user-level library for JSON or XML serialization, you're doing things in the normal, everyday way. The thing about serialization, like cloning, is that it is doing object voodoo, manipulation of fields at a very primitive level outside the normal way of doing things. If you don't recite the proper incantations, you can get weird situations like you're seeing.
cool story, never heard of Plumbr - downloading a trial now.
One final question: The constructor in my superclass uses the method isValidMass(). I made this abstract in SpaceObject. I have now written this method in Ship, where I also have a variable MINIMUM_MASS. When I make an object of Ship, it will use the constructor of SpaceObject. Does this constructor use the isValidMass() method defined in Ship, and does it use the variable used there?
NB: This is the [template method pattern](http://en.wikipedia.org/wiki/Template_method_pattern) and it's pretty much the only way I ever use abstract classes nowadays.
Lulwat?
Here's a [tutorial](http://www.vogella.com/articles/JAXB/article.html) on JAXB, the Java standard for XML binding. This is built in to Java SE. [GSON](https://sites.google.com/site/gson/gson-user-guide) is a popular choice for JSON binding, but it is an external dependency. The problems you're having are the reason I stay as far away as possible from serialization and cloning. Maybe the Object Serialization Specification can give you some insights.
&gt;Another important point is that Spring source is available. Different vendors JEE implementations - not the case. * JBoss AS - Source available * GlassFish - Source available * TomEE - Source available * Geronimo - Source available * Resin - Source available * JOnAS - Source available In many cases the source is thus there. Only WebSphere and WebLogic don't have the source available, which is a shame and something which should be changed.
Yes. When you call "Ship milleniumFalcon = new Ship( 5000.00 )" you are calling the constructor in the Ship class. The SpaceObject class can have a constuctor as well, and have the constructor in Ship call super(); public class Ship extends SpaceObject { public Ship( double mass) { super( mass ); if ( isValidMass() ) { ... } } }
This is pretty much a textbook case of what not to do and how not to recover from it. Does not instill confidence.
I've heard people say that system security is only as good as application security. It's not always true, but this one is a good example. Keep your applications locked down as tight as you can and beware frameworks with lots of goodies.
Correct, they call `hashCode()`.
The Java serialization mechanism is very peculiar in how it works "magically" behind the scenes -- lots of reflection and such. Because of the intricacies of reference loops and other scenarios, it retains references in a cache. There is a possibility it is thinking different references are from the previous object maybe? I believe you sometimes have to call reset on the OOS to clear those references. I don't fully agree with the comment about "what you did wrong would be using serialization for data transmission" but only because I think he just meant to say "Java serialization" than "serialization". Serialization is the process of taking one or more objects, turning them into a series of bytes in a decodeable, and then transporting them. But Java's built-in version is bloated and slower, which is why external formats (custom protocols or formats that are generic like JSON and XML) are more popular.
Something else that you might be interested in : http://one-jar.sourceforge.net/
I think they are making their lives harder by using Spring at this point. I would have said to definitely use Spring before Java EE6 and JSF 2.0. That could change again in 5 years who knows. I do not really understand why you have to use insults and meaningless arguments about which Frameworks supporters behave badly. Either framework is fine but in my opinion using JSF with a good component library has dramatically increased my ability to produce quality software in a timely manner. Because of this experience I like to let others know so they can give it a try.
I just think it is funny that so many people are threatened by Spring still to this day. Yes, I shouldn't use insults, but "meaningless arguments"? What ones are meaningless? You argue that spring isn't a built on standards, yet in this message, you say you use a "good component library". How is that standard? Spring is built on the exact same standards you use every day. JDBC, JPA (if you want to), JSP (if you want to), JSF (if you want to), servlets etc. What is the difference? I'm assuming your good component library is open source and so is spring. I'll assume your good component library is not implemented by many companies. Same with spring. I know you have your opinion but why do you put down people who have a different one? You can pretend JEE has been mistreated by the bad ole' spring people if you like. I have just been joining your party and pointing out that there are 2 sides to each story. So here's a challenge for you and I'll take you up on it if you can find one. Point me a quick (under 2 hour) tutorial on setting up a JEE server you approve of (unless it costs money) that shows me how to build a simple database app that uses all the stuff I should be using instead of Spring. I can find a bunch of Spring ones that I would be happy to share if you want to try it too. 
&gt;But I gave an example related to setting the Connection's isolation level. I've always been able to set the connection's isolation level if I wanted to. It's right there where you define the data source. Using the standard Java EE 6 syntax, it's the `&lt;data-source&gt;` element that you put in web.xml or application.xml, and when you hover your mouse over it in an IDE you'll see that it has the `&lt;isolation-level&gt;` child element. How hard is that? Java EE servers do have their own proprietary syntax as well to configure the same thing, but at least for JBoss (where I have most experience with) it's absolutely trivial to find the isolation level setting.
"I just think it is funny that so many people are threatened by Spring still to this day." **I am not threatened as I said I think Spring is fine.** "Yes, I shouldn't use insults, but "meaningless arguments"? What ones are meaningless?" **Arguments about whether members of the Spring community or JEE community have behaved badly on message boards in the past is meaningless. It has no bearing on what framework will work better for a project.** "How is that standard? Spring is built on the exact same standards you use every day. JDBC, JPA (if you want to), JSP (if you want to), JSF (if you want to), servlets etc." **JEE is the official standard that may not mean anything to you but it is fact. I use a component library with JSF so I do not have to spend most of my dev time writing Javascript, CSS and HTML to rebuild the same widgets that have been done many times before. Spring does not have an answer for this as it is a request based framework. You can use Spring with JSF but it is mostly redundant and more complex. I should probably clarify that I do use Spring security because I think it is good. I am more referring to Spring data and MVC frameworks when I say Spring.** "I know you have your opinion but why do you put down people who have a different one? You can pretend JEE has been mistreated by the bad ole' spring people if you like. I have just been joining your party and pointing out that there are 2 sides to each story." **Not sure what you are talking about I have not put anyone down or talked about any bad ole' spring people.** Here are a couple. I hope it helps. http://netbeans.org/kb/docs/web/jsf20-crud.html http://netbeans.org/kb/docs/javaee/javaee-gettingstarted.html
Thank you for the insight. I think I'll work on some custom implementation of JSON then. I'm aware of the GSON library, but the thing being a giant exercise in programming, I try not to use anything not in the SE API.
Don't write your code to depend on them being outside the jar. Use them from within the jar as mockindignant described.
I believe that you'll need to set your email's content to be a [multipart object](http://docs.oracle.com/javaee/1.4/api/javax/mail/Multipart.html), using [setContent\(Multipart mp\)](http://docs.oracle.com/javaee/6/api/javax/mail/internet/MimeMessage.html#setContent\(javax.mail.Multipart\)); one of the parts in the multipart object will then need to contain your attachment.
Oh dear. Next time I post some of my experiences on Reddit I best get a lawyer to check them over or/and submit a dissertation alongside my bullet point, which has been academically validated. Much as I can see "Spring the behemoth" is disliked here, I really don't think they are crazy enough to add a class like WebSphereDataSourceAdapter if I could just go into my deployment descriptor and modify it there. That would modify it for the whole Connection. My requirement here was to modify it dynamically i.e. based on some Spring AOP some methods which access the databaseg go read uncommitted and some not so. To do this in WebSphere required the Adapter. I am sorry I didn't expand my approach 100% with code examples, cross references and UML diagrams - but I was just listing items in a bullet point, so didn't think I needed such a burden of proof. This adapter was the first that came to my mind - if I spent some time (which I am unwilling to do) I will be able to cite other examples where I have found JEE6 lacking functionality which already exists in Spring, over the past 18 months or so I've been using it. Apologies for my tone - but I honestly thought this point of this subreddit and this post was to provoke some debate and sharing of experiences - not to turn into some childish exercise where any word of descent against JEE6 is treated with disdain. 
Nice rant ;) p.s. It's Java EE 6, not JEE6. Or would you like we call Spring 3, S3 from now on ;)
Quick answer: using the .hashCode() method
&gt;I couldn't find this in the documentation. Typically, you won't be able to find that sort of specific description the documentation of an API. The whole purpose of the API is to give you methods to provide you with a clear interface with the abstract data type. The actual implementation isn't a concern of someone using the API, because the owners of the data type should be able to change the implementation (in this case, changing the way hashing is done) without the users of API being affected. If you are really curious, you can go into the source code in the /src folder on your local machine and find java.util.HashTable and find the put(K key, V value) method, where you will see: int hash = key.hashCode(); with 'key' being an Object of some type specified by the generics, and the actual .hashCode() value returned depends on the type of the Object. If you were looking for the actual implementation of a hashing function, every Object has a different implementation, which can be found in the Java source code as well. 
We have a failure to communicate I guess: "JEE is the official standard that may not mean anything to you but it is fact." I know it is. Spring uses JEE under the covers so I am using the standards when I use Spring. That is a fact too. I'm just using Spring stuff that is pre-written so I don't have to spend most of my dev time rewriting things that have already been written also. You are extremely focused on the web tier. I'm not. I'm talking about the whole application. Some of us feel that JSF is extremely complex and JSP/JSTL (which are just as much standards as JSF) meet our needs. Does that make it any clearer? So Spring is just as good as alternative as your choices in this respect because we are using the standards. I will look at these. These won't be 2 hour things because I use Eclipse and these are Netbeans. I'm not sure if I want to learn a different IDE just to try out your way of building apps. But I will look at them. 
I was asked this in a job interview once and didn't know the answer and felt quite embarrased since I use maps daily in my job. I also didn't know that very large maps can actually result in hash collisions.
The [Javadoc for Hashtable](http://docs.oracle.com/javase/6/docs/api/java/util/Hashtable.html) says, on the second line: &gt; To successfully store and retrieve objects from a hashtable, the objects used as keys must implement the `hashCode` method and the `equals` method. And then at the end: &gt; See Also: &gt; [Object.hashCode\(\)](http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#hashCode\(\)) 
import javax.swing.*; import java.awt.*; import java.awt.event.*; public class Farming extends JFrame implements ActionListener, ItemListener{ private JComboBox comboBox; private JComboBox lol; public static void main(String args[]) { Farming frame = new Farming(); frame.setVisible(true); } public Farming(){ Container contentPane; JPanel comboPanel, okPanel; JButton okButton; String labels[] = {"Please Make A Selection", "Allotments", "Flowers", "Herbs", "Trees", "Hops"}; setSize(500,500); setTitle("Runescape Farming Level Calculator"); setLocation(550,200); contentPane = getContentPane(); contentPane.setBackground(Color.WHITE); contentPane.setLayout(new BorderLayout()); comboPanel = new JPanel(new FlowLayout()); comboPanel.setBorder(BorderFactory.createTitledBorder("Enter Where You Are Growing, And What You Are Growing")); comboBox = new JComboBox(labels); comboBox.addItemListener(this); comboPanel.add(comboBox); okPanel = new JPanel(new FlowLayout()); okButton = new JButton("Calculate"); okButton.addActionListener(this); okPanel.add(okButton); contentPane.add(comboPanel, BorderLayout.CENTER); contentPane.add(okPanel, BorderLayout.SOUTH); setDefaultCloseOperation(EXIT_ON_CLOSE); } public void actionPerformed(ActionEvent event) { int loc; loc = comboBox.getSelectedIndex(); } public void itemStateChanged(ItemEvent event ) { String selection = (String) comboBox.getSelectedItem(); if(selection=="Allotments") { String allotment[] = {"Potatos","Onions","Cabbages","Tomatoes","Sweetcorn","Stawberries","Watermelons"}; lol = new JComboBox(allotment); add(lol, BorderLayout.CENTER); } else if(selection=="Flowers") { String flower[] = {"Marigold","Rosemary","Nasturtium","Woad","Limpwurt","White Lily"}; lol = new JComboBox(); add(lol, BorderLayout.CENTER); } } } new layout. Second box isn't working. Can't figure out why.
Can you please format the code, I cant understand it, sorry!
That's still a little fuzzy -- all objects will inherit Object.equals() and Object.hashcode(), so... doesn't that statement just say that the objects need to be objects?
That is exactly what I was looking for. Thank you. If you're curious, I need to implement a specific hash function for strings and was wondering if I could do it with a wrapper class that defines hashcode(). And I can! So thanks again.
Javajoe316 knows his java, good advice.
It specifically answers the question in your post. It says that "the objects used as keys must implement the `hashCode` method and the `equals` method", which isn't the same as inheriting from `Object`. If it was the same, it would be a highly redundant statement, since every object inherits from `Object`, right? Also, the linked docs for [Object.hashCode\(\) ](http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#hashCode%28%29) say: &gt; Returns a hash code value for the object. This method is supported for the benefit of hashtables such as those provided by `java.util.Hashtable`. 
Haha, well, you can't know every implementation detail. If you define the hash function yourself you *can* prove you won't have any collisions, but it's difficult to do for anything but very simple objects.
Thanks!
Thanks.
OSGi is indeed confusing, but tooling is slowly getting better, I remember fighting with it a few yeas ago.
I love Play! But that makes me some sort of pariah on reddit. Play! gets little love on reddit.
I guess the Java folks "hate" it because they feel they stabbed them in the back and made Scala the first class citizen, while /r/programming hates it because they think it's Java?
It does say "objects used as keys **must** implement the `hashCode` method", that's not just strongly implying. It's a requirement, which would be pointless if it wasn't used. The misunderstanding is that although `Object` implements `hashCode`, that doesn't mean that classes that inherit from `Object` (all classes) implement `hashCode`, instead they inherit the implementation from `Object`. 
the problem is that i dont know what email domains are being inserted, in theory it could be from any random domain. 
IMHO, isValidMass is hardly needed for this problem. public abstract class SpaceObject { private double _actualMass; protected SpaceObject(double mass) { _actualMass = Math.max(mass, getMinimumMass()); } protected abstract double getMinimumMass(); } public class Asteroid extends SpaceObject { public final static double MINIMUM_ASTEROID_MASS = 123.0d; public Asteroid(final double mass) { super(mass); } protected double getMinimumMass() { return MINIMUM_ASTEROID_MASS; } } What about the other side? An asteroid with a mass four times of that of the Sun would be funny... :) EDIT: why protected? So if the "getMinimumMass" is something which is not needed for any other purpose but limiting the minimum mass in the constructor, then it shouldn't be exposed to the public. Asteroid, as an object in your business domain, may have its own actual mass, but the other part of your program doesn't really interested in the limitation of that mass. They won't use that information. 
You can add other arguments in the constructor for the child classes. For example: public Asteroid(double speed, double heading) { super(MINIMUM_MASS); this.speed = speed; this.heading = heading; }
Use: if(name.equals(theName)) { stuff }. The == operator checks identity of the objects themselves. There could be two discrete String objects with the value "foo"; but == won't be true for them. This can sometimes catch people off guard; because Java interns strings... which means that if you define "foo" multiple places, they will end up being the same underlying string. Thus, ("foo" == "foo") is probably true; but "foo" == ("f" + "oo") won't be.
I wanted to act all indignant because how could you not assume I would try that (I did, by the by. Because I am not that dumb, == just has always worked before so i use that). But I tried it again, and it works this time and I don't know how to feel about life right now. 
Like the author said, it doesn't really need "saving". There's some attitude out there that Java is constantly on the down-slope when in fact the opposite is (nearly) true.
It's an easy mistake; especially when coming from higher-level languages like Python where == checks equality.
When did I say anything about it being expensive, closed source and corporate? rockville was accusing me of being insulting. Looks like I'm not the only one. You are just as insulting. I don't know about the "proven Spring tactic's" but please give me proof of this. You say it is well proven. Any proof will be fine. I know you will have none. I'm done. Go ahead and feel superior with your JEE technology. I'll just continue making tons of money working on Spring projects while you wait for your containers to restart after making a code change. 
Ah, that makes sense. I am often incapable of seeing the most obvious social interactions. Thanks.
Classic. Good for you for trying it again.
Oooh, I like plays. Did it have dancing?
Keep in mind whether you're working for "getting it working" or "making it faster, smaller, etc." -- do what it takes to get it running first, then worry about optimizing later. If you can work through the issues with Java serialization, that's probably easier to get going, then you can switch later if needed (maybe). For smaller projects, the downsides of Java serialization are probably small.
Just remember that Strings are objects like arrays(which is why they have methods). You can't actually add or subtract an index spot in an array though, so not only are every String stored in different locations, each time you change one, it's given a new location. Hence why you have to compare the contents with .equals() or .compareTo().
I watched about 15-20 mins of the video you posted, and while it was interesting it was also kinda above me. While I'm sure Clojure is better for concurrency than Java, how many employers are hiring programmers to code in Clojure? Ultimately it seems I'm going to have to learn how to make concurrent programs in Java regardless.
in my experience doing something "just because it worked" always ends up badly, since you knew .equals() existed and have probably been told to use it since said you're "not that dumb" with regards to trying it, you should have kept using it even after observing == also seemed to work or looked up why == worked despite being told the contrary
that could be the only reason ..use equals
And then, Scala. Which works more as expected, for instance comparing strings with double equals works, but there are still "oddities"
Sure, but it's a waste of resources to bundle a JRE with your application (~200 MB?). My company uses Webstart but it's an internal application so our 'customers' are guaranteed to have Java on their PC.
Yeah, I honestly just figured NetBeans was pushing some Java convention on me. My Java class honestly never mentioned .equals vs ==. And apparently PSU is a top 25 CMPSC school, I feel bad for the ones below us
Much of the information about the behaviour of Java classes can be found on the JavaDoc pages for the interfaces they implement. Case in point: http://docs.oracle.com/javase/7/docs/api/java/util/Collection.html.
The "Tomcat vs. JavaEE debate" has been over in the enterprises I've seen in my role of an architect, for the last five years. Only a few audits have revealed new JavaEE applications being specced, two of them had the "good" reason of third party component licensing price structures strongly encouraging using JavaEE, but the rest were just straight up incompetence and architects not keeping their skills up to date. CTOs were not thrilled.
For the moment, I'm working on getting good habits and reflexes, practicing general software design and not only coding in itself (which I have mostly down). I have a somewhat big project on the horizon, I want to be ready to tackle it when comes the time. That's why I want to do things the right way (scalable, maintainable, reasonnably efficient, extendable) this time around, even if means refactoring 10 times the same portion of code. It will give me a good insight into what's good, and code references. That said, I understand that in a work environment with deadlines, compromises have to be taken, and sometimes you have to hack your way into a working state.
&gt;When did I say anything about it being expensive, closed source and corporate? Note the word *implicit* that I used: "[...] but your ***implicit*** hinting [...]" &gt;while you wait for your containers to restart after making a code change Hahaha... yeah right! You aren't aware that Java EE now starts faster than the average Spring app? JBoss: 11:07:45,575 INFO [org.jboss.modules] JBoss Modules version 1.1.3.GA-redhat-1 11:07:45,747 INFO [org.jboss.msc] JBoss MSC version 1.0.2.GA-redhat-2 11:07:45,812 INFO [org.jboss.as] JBAS015899: JBoss EAP 6.0.1.GA (AS 7.1.3.Final-redhat-4) starting 11:07:46,637 INFO [org.jboss.as.mail.extension] (MSC service thread 1-4) JBAS015400: Bound mail session [java:jboss/mail/Default] 11:07:46,678 INFO [org.jboss.as.connector.subsystems.datasources] (ServerService Thread Pool -- 27) JBAS010403: Deploying JDBC-compliant driver class org.h2.Driver (version 1.3) 11:07:47,140 INFO [org.jboss.as.remoting] (MSC service thread 1-2) JBAS017100: Listening on 127.0.0.1:4447 11:07:47,140 INFO [org.jboss.as.remoting] (MSC service thread 1-10) JBAS017100: Listening on 127.0.0.1:9999 11:07:47,194 INFO [org.jboss.as] (Controller Boot Thread) JBAS015961: Http management interface listening on http://127.0.0.1:9990/management 11:07:47,195 INFO [org.jboss.as] (Controller Boot Thread) JBAS015951: Admin console listening on http://127.0.0.1:9990 11:07:47,195 INFO [org.jboss.as] (Controller Boot Thread) JBAS015874: JBoss EAP 6.0.1.GA (AS 7.1.3.Final-redhat-4) started in 1871ms - Started 136 of 217 services (80 services are passive or on-demand) --&gt; started in 1871ms TomEE is some 2 seconds: Feb 20, 2013 11:11:16 AM org.apache.catalina.core.AprLifecycleListener init INFO: The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path Feb 20, 2013 11:11:16 AM org.apache.coyote.AbstractProtocol init INFO: Initializing ProtocolHandler ["http-bio-8080"] Feb 20, 2013 11:11:16 AM org.apache.coyote.AbstractProtocol init INFO: Initializing ProtocolHandler ["ajp-bio-8009"] Feb 20, 2013 11:11:18 AM org.apache.coyote.AbstractProtocol start INFO: Starting ProtocolHandler ["http-bio-8080"] Feb 20, 2013 11:11:18 AM org.apache.coyote.AbstractProtocol start INFO: Starting ProtocolHandler ["ajp-bio-8009"] Feb 20, 2013 11:11:18 AM org.apache.catalina.startup.Catalina start INFO: Server startup in 656 ms Comparison to Spring app: Java EE Spring Cold Deploy 5,339 ms 11,724 ms Second Deploy 481 ms 6,261 ms Third Deploy 528 ms 5,484 ms Fourth Deploy 484 ms 5,576 ms https://blogs.oracle.com/arungupta/entry/why_java_ee_6_is But this is pretty much the entire point I'm trying to make. Once, (then) J2EE was heavyweight, slow to start, took up huge amount of space on disk, was closed source, corporate, etc. Spring rebelled against it and at first had a point. Then Sun re-invented J2EE as Java EE and made the programming much lighter and saner. Simultaneously many open source and totally free implementations came to the market and overtime became the best of breed solutions; a second of startup time, ~100MB or less install size, etc. But then Spring (fans) had a problem; Java EE addressed every single point they ever rallied against and even beat them at it. So what did the Spring fans do? They just ignored (distorted) reality. Despite Java EE servers starting up in a second or two, they keep hinting at the fact that Java EE servers start up very slowly ***like you just did***. Despite the fact that the best and most used implementations of Java EE are now open source and free as in free beer (JBoss AS, GlassFish, TomEE mainly), Spring fans keep making snarly remarks that Java EE is expensive and/or closed source. Some Spring fans do have discovered that e.g. the total size of a Java EE installation is now far less than Tomcat + Spring libs (either in war or in the Tomcat /lib dir). And guess what? *suddenly* the installed size doesn't matter anymore! *Suddenly* it's supposedly stupid to use installed sizes, while less than a few years back this was one the sticks used to beat Java EE with. I'm not saying Spring itself is a bad framework, but Spring fans are incredibly slow (maybe partially on purpose) to accept the new reality and keep pretending there's only the 2004 version of J2EE around. 
&gt; but "foo" == ("f" + "oo") won't be. Actually the correct response is it may or may not be. Depends on the compiler. 
It's a waste of resources to have it installed but unused. Having it installed as part of your application is resource intensive, but not a waste (since you need it). For internal applications, sure. But telling 300 different IT departments that they all need to use the same version of the JRE isn't always trivial. Telling it to end users is even harder because all you get from them is "but I think I already have Windows 7".
You are correct; I was just trying to get the point across simply. It is in fact true "foo" == "f" + "oo" on my JDK. I'm not at all surprised by it.
On many IDEs -- e.g. Eclipse and IntelliJ -- you can define the source path of your SDK. This allows you to drill into the implementation, and step through it while debugging. I would highly recommend it -- you learn a lot for looking at what gets executed.
Why not AS7.1?
I get that complaint but I haven't had any problems with 7.1 bugs yet. At least none I've noticed. The new alpha EAP releases aren't a much better solution. 
Mass is an *intrinsic* property of an object. This should be defined on the interface of objects with mass. Whether or not the mass of an object is "valid" totally depends upon the context of the object. It is *extrinsic*. This is a bit like weight. The weight of an object depends upon the mass, but it is not intrinsic to the object because it also depends upon the context the object is in. Deep space means weightless. On the moon is 1/6 the weight of on Earth, etc. So the concept of what the mass is should be in the interface of the massive object. Whether or not it is considered valid should be defined elsewhere, intrinsic to the application, but not to the objects. Don't bother with abstract classes. Almost always, if you have a lot of code accumulating in an abstract class, you should evaluate whether your classes should be split into a set of cooperating classes, one of which encapsulate that common code and is aggregated by others somehow. So here's the approach I recommend... interface MassiveObject { double getMass(); } public class Asteroid implements MassiveObject { ... } // other classes with mass implement Massive Object too public class AppSpecificMassValidator { private static final String INVALID_MASS_MESSAGE = "Mass for type '%s' must be at least %s: %s"; private final Map&lt;Class&lt;? extends MassiveObject&gt;, Double&gt; validMinimumsByType; private AppSpecificMassValidator(Map&lt;Class&lt;? extends MassiveObject&gt;, Double&gt; validMinimumsByType) { // recommend guava immutable collections here this.validMinimumsByType = ImmutableMap.copyOf(validMinimumsByType); } public isValid(MassiveObject massiveObject) { return validMinimumsByType.get(massiveObject.getClass()).doubleValue() &lt;= massiveObject.getMass(); } public void validate(MassiveObject massiveObject) { if (!isValid(massiveObject)) { throw new IllegalArgumentException(String.format( INVALID_MASS_MESSAGE, massiveObject.getClass().getSimpleName(), validMinimumsByType.massiveObject.getClass(), massiveObject.getMass())); } public static AppSpecificMassValidator create(Map&lt;Class&lt;? extends MassiveObject&gt;, Double&gt; validMinimumsByType) { return new AppSpecificMassValidator(validMinimumsByType); } } (You might need to noodle around with this to get the generics right, sometimes when you work with type parameters of the `Class` object you have to specify a looser type of class that you might want, but I think this should work.) Now whenever your application starts it can create this mass validator object configured with all of the correct minimum masses. Of course you can make this class more complicated so that you specify valid ranges per type, even discontinuous ranges if you like. You can also make it so that your app can interrogate this class for what valid masses are...say for instance you want the user to enter a valid mass for your app, now your app could display what is valid to prevent the possibly infinite guess'n'check loop. It also allows validation to happen close to the user, since as soon as the user enters you can check the value with the `isValid()` method. There's also a `validate()` method for those instances when the application has reached a point in processing where an already configured massive object shows up somewhere and the app wants to be able to assume that it's valid. Then you can just call validate and if the method returns normally, you're good. (It's worth pointing out that this method should *not* be used to *check* for validity, that's what `isValid()` is for. This should only be used when it would be be a bug for the object to not have correct mass.) Now that you've encapsulated the notion of validity for this specific app, it means that you can reuse this code in other apps with a different concept of validity. For an app that doesn't care at all about validity, you can simply override this object to have `isValid()` always return `true`, for example. You could even define validity differently for different areas of your application. For example, say that you have an area of your app where the user can be in a "builder" state to create all the different objects. At some point, the user has to set up all of these different objects and then commit to them by clicking "save". Up to that point, you can use a no-op mass validator, then once the user clicks save you can validate all the objects against the real one required for the app to function with all of these things, kick back any errors, etc. Notice how this approach separates configuration from implementation as well. If you continue with the approach in OP, you have all of these static constants scattered throughout your codebase for different objects. In different contexts, if the same objects have different validity constraints, then you double the number of constants, and if those values change, then you have to run around through the codebase finding them all and updating them. Here, you can simply create the map of valid minimum masses once and inject it into this mass validator. (I recommend using Guice.) If it ever needs to change, then you can just find that one place and update it with the new values. Or, since it's all created in one place, you can even imagine a much more complex workflow where this thing is configured and created dynamically, perhaps read from a text file or over the network or something. This is also much easier to test, because for a particular test you can just gin up a map where everything's minimum mass is set to `2` and all your tests try to create everything with mass `1` and verify they're treated as invalid, then set everything to `3` and verify they're all valid. Otherwise, your tests have to know the exact values specific to the app and check for it...then if it changes down the road, you have to run through all your tests and update those values.
Someone on my blog stated that the community editions that were branded "GA", where in fact always alpha of beta for their eventual EAP release. There might be some truth to that. I haven't tested it myself, but probably the 6.1 alpha EAP would otherwise have been called 7.2.Final GA.
This is a very lame design decision made early on in Java...one of the first decisions they made, actually. You should become very familiar with the `Object` documentation. Because every class must extend `Object`, every single thing you write has to follow the contract specified there whether you like it or not. So in the case of defining any class at all in Java, you must make sure all methods inherited from `Object` make sense. This includes `hashCode()` and `equals()` and `toString()`. This might seem like a neat thing that any object can be stuck into a map, but really it's a bit of a nightmare that brings all kinds of other restrictions you might not want. For example, any object you use as a key in a map must be immutable...or, at least, if it's mutable, the relevant state of the object must not change as long as any map in the system is using that instance as a key. If you think about this for a moment, you'll realize why this is fraught with danger. This means that any time you change the state of any object in the system, you must understand: * am I changing something that `hashCode()` and/or `equals()` considers? * if so, then is any map anywhere in the universe using this instance as a key? How are you supposed to figure this out for each any every method call that changes state of each and every object in the entire system? It's not practical to do so...which means that, really, you should only use immutable objects as keys in maps. So `Map` just gets this completely wrong. It should enforce this rule by only allowing objects of type `MapKey` or something, and one of the elements of the contract of this type should be that it is immutable. Oops. When I've said this in the past, people point out that you'd have to implement `MapKey` on every object that you might want to use as a key. Nonsense, though, you could have `MapKey` be something that snapshots the relevant state of any object used to compute a hash code and test for equality. Now you can simply remove the `hashCode()` and `equals()` method from `Object` and put it on `MapKey&lt;T&gt;` instead. Now you have a strong guarantee that no one is going to be using objects as keys in a map without having implemented these methods correctly for that type. If you do the same thing with equality, you realize that you would use the already existing `Comparator` in the same way, and then `MapKey&lt;T&gt; extends Comparator&lt;T&gt;`. Also, you can pull the `toString()` method off into a separate `Stringable` interface in the same way. I'm not sure you can do the same thing with the `wait()` and `notify()` methods...I haven't thought much about it, but threading and sync issues in OO languages might require this kind of messy escape valve of sticking things on all classes. But certainly not maps and equality and strings.
C# makes this same "mistake" 6 years later.
I can't really provide a source but that's mostly correct. Community versions of JBoss products are stepping stones, in general, between EAP releases. However, in the past, it has been more common for them to *actually release* those stepping stones. As you pointed out EAP6 was *using* AS7.1.2 which I'm sure the community would want to use.
Indeed, JBoss' ways are puzzling here. My guess is that community releases are first and foremost for letting the community function as alpha/beta testers (like Microsoft releases public betas of Windows as well). Perhaps 7.1.2 was stable enough to them and so they figured they didn't need to involve the public again? I just don't really understand why they not simple release all EAP builds to the public as well. A (serious) company will not go into production without a support contract anyway. Whether the binary bits can be downloaded for free or not is almost completely irrelevant. For developers and testing EAP is already free, and since it's open source it's only a small compile and build cycle and then you can use it in whatever way you want.
Start by checking if command is s or q. If those two checks fail, check if command is a number - if command is a number, check the nummer, if the command is not a number, say that it's an illegal command. Also, it's kind of weird to declare and reset tries, round and randomInt every time the player tries to guess a number.
*Outside* the while-loop; so that tries, round and randomInt would *not* be set to 0 every time you try to guess a number.
I agree. Still, the new start mechanic in the AS7 series is fantastic.
that makes sense, thats probably why it wasnt working right. thanks..
I would say if you have time (which I'm assuming as a college student, you do :)), learn Concurrency in Java, and then learn concurrency in Scala and Clojure. You may not get hired just to code in Clojure, but the "experts" are saying that in the near future, we'll be working on projects with Java+Scala, or Java+Clojure. Even if Clojure hypothetically "dies" in a couple of years, the concepts will still live and be debated (the concept of Software Transactional memory, for example). Clojure is a Lisp dialect, and there are a lot of interesting ideas in Lisp that can make you a better programmer in general.
Does this mean that you need to recompile the application each time you add a new model of faucet?
Not if it is pulling the data from a server, which it sounds like it is going to do
I would hope that I would be able to pull the information from an external file on the server as well, but I'm not sure if that's practical. I'd rather not recompile every time.
"objects used as keys must implement the hashCode method" could imply that it uses the hashCode method as part of an algorithm that makes a hash, but not necessarily that it uses exactly the result of the hashCode method. I know I'm splitting hairs, but things like this have cost me too many hours of debugging in the past. It's good to be sure, you know?
Still, the docs answer the question in your post.
you can try/catch the parseInt call. It'll throw a NumberFormatException.
I've been using RestEasy on Tomcat for some time now: it makes JAX-RS dead easy to do. I'm not sure what else I'd want, what I'd gain from a EE server. I did switch to Jackson's ObjectMapper which seems to be much happier serializing/deserializing whatever I toss at it into JSON without asking any questions.
You get a NumberFormatException, because you're trying to parse text as an integer. First check for the allowed strings (s and q), then check if the string is a number. If both of those checks fail, you send an error message.
&gt;Java is the only real cross-platform language PHP? C? JavaScript? etc.
http://java-0day.com/
Well, it's pretty much GPL. 
Java is only one of many JVM languages.
Rubbish. * Your standard JRE app won't run on JME (mobile), and vice versa. * JRE doesn't come pre-installed on Windows, you still need to download and install it. * Javascript needs an interpreter? If you're browsing Reddit, you're using something that can run Javascript. * Yes, few end users would have PHP installed, there's a slightly higher chance they might have Python or Ruby installed. Really, if you're running Linux or OS X you've already got Python installed, and someone writing a Python app can easily package it for Windows using something like py2exe.
Java is heavily used by almost all the large corporations and therefore isn't considered sexy. Even though it's fast and has the best tools of any development platform out there, it lacks cutting-edge hipster features and therefore can't attract any proggit or hn groupies. Simply put, it's just too convenient and widely used a platform to be cool.
&gt; Java is the only real cross-platform language There are many languages which can run on the JVM: http://en.wikipedia.org/wiki/List_of_JVM_languages &gt; Javascript and PHP both need interpreters, which barely anyone except programmers have installed. Javascript interpreters are embedded into every major web browser (for obvious reasons.) Furthermore, comparing PHP to Java is a null point, since PHP was made for web servers; Java was not. --- This thread seems to be just an attempt at riling people up and then trying to wildly defend a failing argument. Java has its strengths, but you certainly are not selling them to anyone. The only strengths you've raised so far are, actually, thanks to the JVM. The JVM is not Java. The reason people hate on Java (besides Oracle's handling of it) is because it's not the best at anything, but rather provides a little bit of everything. People nowadays opt for smaller, more specific applications, and therefore can afford to use a variety of languages; languages which are better tailored to the requirements of the project.
* Java is a bad user experience in the browser AND the desktop. Applets never took off, probably because they're too cumbersome and don't integrate nicely with the rest of the web page. Desktop apps are perceived as slow to load (unless you use some fancy wrapper to overcome this), and the GUI never feels quite right due to simulating native widgets instead of actually wrapping them. * Security concerns (mostly from the browser plugin, mind you) * The language is missing syntax sugar and niceties that other languages provide, so you have to write more boilerplate to get simple stuff done. E.g. in Python, you can write a map/dictionary using "x = { "key" : "value" }". In Java, you need to create your map (making sure it's put into a variable that uses the Map interface but uses the concrete implentation of, say, HashMap), then do N calls to the "put" method to add N number of key/value pairs to the map. * endless().method().chains().get().annoying().very().quickly(). * Conventions are annoying; getters and setters are required for basic data structures, despite adding nothing (except "it's OO!"), partially to get around issues caused by property overloading, and partially because many libraries out there require the use of getters and setters. * Is now a mature platform, and no longer the cool shiny thing to use. * Is taught as the base language in many University courses, so the pool of developers is very wide but the average language knowledge is fairly shallow, giving a poor impression of the community * Is used a lot in corporate environments, so non-corporate types might avoid it just for that reason. Having said that, Java is fine for writing real applications. It might not seem that fast to write the code, but the huge and mature selection of libraries out there will save you time in the long run. Plus, if you have a problem, someone on the Internet will have already encountered the same problem and posted a solution; not so much with other languages. If you're writing a half-way complex web application (not just CRUD stuff), and performance is a priority, but you still want to retain OO behaviour without being driven mad, you can't get much better than Java. Also, other languages on the JVM like Scala, Clojure, JRuby, Jython, etc, have helped draw people who don't like Java's syntax back in. You get the nice syntax of the other language, cut down on boilerplate, and still have the benefits of running on the JVM, and making use of all of the existing Java libraries out there.
Really? Try implementing your own version of the JRE. Let me know how your licensing deal goes. Hope you don't have to take out too big a loan to pay for it!
A lot of it is emotional. For example, the complaints about it being 'enterprisey', mostly comes off as hipsters wanting to sound cool. Anything that gets popular will be abused and people will choose long names, what is it about java that makes people choose long names? Nothing. People might confuse the horrible applet environment with applications, but applet does not java make. I love java, but I don't like that it uses exceptions, which makes for complicated code, and I don't like how it bloats. But those are nitpicks. IMO, I am not sure why java bloats memory-wise, I don't think it's a function of java per say, it just bloats in real life, and that isn't fun. 
&gt; There are two kinds of languages, those that people complain about and those that nobody uses. * Bjarne Stroustroup
It's because people be all jealous of the cash I be throwing around in my phat Java car. That and people just jealous of my lady. You dig?
&gt;Javascript and PHP both need interpreters, which barely anyone except programmers have installed. Wat. First of all, your browser has a Javascript interpreter bundled with it (unless you're using something intentionally designed without it, like Lynx). Secondly, PHP is a serverside language that serves up requests to the client - you can interact with PHP code without ever having to have a PHP interpreter running. And the very idea of an interpreter is cross platform - yes, you may need to write a different interpreter for different architectures, but once you do, all interpreted scripts will run on your platform regardless of the underlying architecture. 
Also, it's because 25 year olds always have to hate on whatever the 35 year olds used to do. That's just the way it is.
It's fashionable to hate programming languages and software. Don't get me wrong - there are things about Java that are probably capable of being improved, but I don't think it (or any other information technology) is hate-worthy. Java exists to meet a certain market demand, and people who hate it often are not part of that demand, or are just doing it to sound smart. Ask someone who really hates Java why they hate it and see if they offer a reasonable response - I have yet to find one. 
what().would().you().do().instead()?
You gain a lot of things from a container. Datasource management. Transaction control. CDI. Integrated caching (like Infinispan). All sorts of other things. 
Groovy-fy it: this.is.a.method.call.with.one parameter Sweet.
The hate is more of perception and reputation than function, much like what happened to Adobe Flash &amp; RIM/BlackBerry.
LOL, rubbish, no PHP app will run on mobile. Nor C (that is cross platform to Windows, iOS, etc etc). You brought mobile in to this. Nor python. If you're going to slam Java because JME is different than JSE you need to do the same for every other language out there. The performance of JavaScript is still not great at times, and the amount of browsers out there makes supporting each browser relatively paintul. Because the instant you decide you can do without IE8 for some professional app is the instant the CEO of that company is the only one who uses IE8. Python is cool though.
Actually, if you're chaining that many method calls, it's a code smell. At a minimum, it could be split into multiple lines. But if you're delving that deeply into the object graph, you might need some other abstraction class to do the digging for you. Like an "InsteadRetriever", which takes a "What" instance and gives you an "Instead".
Hipsters.
You're dead on. It's worth mentioning that Java is fairly effectively controlled by Oracle now. Compared to the old Sun, they're showing more interest in monetizing it and less creativity in extending it. The exception is Android, where Java is controlled by Google. It doesn't have the weight of history that comes with Java on other platforms.
Haha, I'm not a JS dev, but I work with some good ones. They pretty much continually bitch about IE7, 8 or 9. Maybe it errs more on the CSS side now, but I'm pretty sure I hear a lot of (and have run in to myself) IE issues and a few Safari issues that needed custom solutions because jQuery/Backbone didn't handle it right. Backbone still has some gimpy issues with lack of push state in IE.
We're using Guice for modules, taking over CDI's role, and are really happy with how insanely simple it is to write a Guice Module and have it injected. Inside our DatabaseModule is probably the only even moderately fancy thing in all of the modules, a number of C3P0 connection pools which are how we manage our datasources. We don't have anything in place for caching, and transactions are done manually when needed. I'll have to poke and see what I can dig up for maven archetypes that demonstrate TomEE's/J2EE's range of features in a minimal fashion. I also see there's a [TomEE Maven plugin](http://tomee.apache.org/tomee-maven-plugin.html) but this is by and large a proprietary duplication of the longstanding very good work that's gone into [Cargo](http://cargo.codehaus.org/Maven2+plugin), and we're very reliant upon Cargo, particularly it's [Remote Deployers](http://cargo.codehaus.org/Remote+Deployer) for much of our product lifecycle (dev-signoff-&gt;qa-&gt;demo-&gt;staging)... it does sound like TomEE is Tomcat+ though, so perhaps adopting TomEE would only be a matter of adding [some new jars](http://mvnrepository.com/artifact/org.apache.openejb/apache-tomee)? That'd be groovy to get some experience with, for sure.
What is this new start mechanic? Is there any coverage you might be able to point me to?
Neebat. I think this subreddit is for laying down some crazy Java rhythm. Maybe you don't understand my words, but I know you can feel the just-in-time compilation.
"Arun Gupta is a technology enthusiast, a passionate runner, author, and a community guy who works for Oracle Corp." Can I post speed tests done by the Spring corporation and assume you will take them seriously? We have been using jboss 7 but are switching to tomcat to save on RAM in our servers. In our case it didn't address "every single point". 
With a little chaining that's only going to be used one time, it makes it worse, unless there's a bunch of (casts) in there and then I say go for it. 
A lot of crappy places to work use Java. A lot of good places to work use Ruby, Scala, Python, JavaScript (and others). I ascribe much of it to that. Java is not the best language, but one can be very productive given a good employer. Unfortunately, I'm mostly serious.
I notice that you placed everything inside a main method. It's a really bad practice and can make writing code 100 times harder. Try to get in the habit of making useful abstractions that you can easily reuse. This helps you solve little problems that you can tie together to solve a bigger problem. I refactored your code to show how I might design this game. One thing to keep in mind, I tested none of this and wrote this under 5 minutes so reader beware. Also, another good habit to have, is writing unit test for your programs. Since it sounds like you are taking a programing class, write some unit tests using JUnit, your teacher should love you ^.^. First thing I did was write a class called ConsoleUtils to handle basic I/O operations. I also used apache commons library StringUtils. Java has amazing libraries that can simplify your code, so why not use them. [ConsoleUtils](http://pastebin.com/DHD4j6u5) The next step was to define the game logic. I only saw two things that needed to be address, starting the game and when making a guess. [GameLogic](http://pastebin.com/udRki4gb) The third step I did was to make a menu. I was lazy so didn't spend any time here. Only thing to take note is the RegEx patterns I use later on to validate commands. [Menu](http://pastebin.com/xP4aq6JX) The last code I wrote was the main method to execute the program. Still super hacky, feel free to clean it up. [GameController](http://pastebin.com/BXDqwnY8) 
http://icedtea.classpath.org/wiki/Main_Page
I am on my phone so I can't really look into it right now but the startup on AS5 is around 50s on modern hardware. The AS7 series starts in less than 4s on the same hardware. It has a lot to do with selective module initialization.
I just find the reduced complexity of my code to be a major payoff of full EE6. I don't use TomEE as most of my work is with JBoss. I've used Cargo before with EAP5/AS5 with no problem but I figure it will work with damn near anything on the market at this point. Especially because TomEE is exactly as you describe. 
CSS and events are still pretty spotty. And jQuery can't mask the event problems entirely. Stay clear of the cutting edge and you're usually ok. At this point, WebKit is so much more popular than IE, I'm starting to think we need to keep IE around just so we don't go back to assuming one rendering engine. (And sometimes Firefox.)
This is such a fantastic thing lol
My biggest issues are that there are no unsigned data types and that a byte is not really a byte. 
Dear Google gods please save java
There are even differences between Chrome and Safari. But they are all webkit, right?
http://openjdk.java.net/legal/gplv2+ce.html License: GPL v2 with the Classpath Exception. You're referring to the TCK, which is here: http://openjdk.java.net/groups/conformance/JckAccess/index.html Guess what? There's no financial commitment mentioned anywhere there. Now, do you have actual criticisms of the Java langage to share with us?
I can't wait for meta-hipsters who hate thick-framed glasses and PBR.
It's very verbose.
Well the incompatibility definitely makes a lot more sense now. I did a bit of research into Spring friendly application servers and have some new servers to test! Thanks for the info! I have never even heard of CDI. I should clarify I've never heard of the acronym in association to Java EE. Which is odd. Anyhow, I'm pretty hooked on Spring. So much I love about it. What I love most is how it makes my life as a developer sooooo much easier.
Too cool to be cool.
Wait, isn't that the rest of us?
I was looking over some old code and found this. The worst part was that these are vectors, and it does not use any extra threads. Warning gore: if(network.get(id).ports.get(network.get(id).ports.indexOf(port)+1).equals(program)&amp;&amp;Dns.findNetwork(fromAddress) != -1){ return (network.get(id).server.get(Integer.parseInt(network.get(id).ports.get(network.get(id).ports.indexOf(port)+2))).connect(fromAddress, program, port)); }
This is very one-sided. You put good points, but you misses the fact that writing something in Java involves boring ceremonies in which you build pages of redundant code to satisfy the compiler (in short, Java is very very verbose). And the fact that many traditionally used libraries only add to that verbosity and strong coupling.
Because bashing programming languages is the slightly more evolved version of bashing operating systems. 
I hate it because of one key reason. When JVM was first released, nearly everything that ran on it (including apps written in java) was buggy, slow and crash prone. It's left a bad taste in my mouth sense then. Currently, I use apps written in java every day and am the application server admin where I work. Our java stuff runs well and is fairly resilient. I still dislike the grey square that never goes away when an app crashes though.
thanks for all the work
Some, but they're pretty minor.
The flipside of this is that it's practically impossible to write ambiguous Java. You'll always know exactly what a piece of code is doing.
And this is somehow better?
Programmers are responsible for bad code, not the language.
I'll agree that applets are terrible, but Swing isn't that bad in my opinion. Sure, they don't look native, but that's what you get when you use platform abstractions. You get the same thing when using GTK and Qt since they also draw their own widgets. About the language and so-called syntactic sugar, this has the advantage that the language is very non-ambiguous so you can actually tell what a piece of code is doing and not worry about things like operator overloading.
 network = network.get(id) ports = network.ports portPlus1 = ports.get(ports.indexOf(port) + 1) portPlus2Int = Integer.parseInt(ports.get(ports.indexOf(port) + 2)) if(portPlus1.equals(program) &amp;&amp; Dns.findNetwork(fromAddress) != -1) { return (network.server.get(portPlus2Int).connect(fromAddress, program, port)); } That has nothing to do with Java.
Groovy actually has a better feature in this case: any()?.of()?.these()?.can()?.be()?.null() Will return null instead of throwing NullPointerException at you.
It's not "cutting-edge hipster features" that are lacking, it's modern programming paradigms that give better performance, reliability, and maintainability. I'm not slagging off Java -- I'm a Java programmer by trade -- but taking a broad brush and dismissing all modern features as "hipster" seems kind of dumb to me.
Yeah, this is exactly what he meant with his secodn to last point - too many people that use java but don't know how to use it properly give a bad impression of the community.
Can you explain what you mean by "Java is controlled by Google" in regard to Android? I don't get it. My understanding is that the Android SDK is in Java, but it's just the SDK, not the language.
We need an author to write a novel about an alternate universe where Google acquired Java instead of Oracle.
Except that there is a huge difference between pre-compiled java binaries that run on a JVM and php scripts that are interpreted by the php binaries.
http://pastebin.com/nw2nx2sv Do something like that. I have a Jlist, a text input, and a button. You type in the rss url and hit ok and it will add it to the list. Do the same thing but when you hit the button it loops through the text file and adds it to the model. After the loop through the text file have it assigne the model back to it.
&gt;Setting up a data source is extremely simple in the web ui. You can also use the old method of deploying via "-ds.xml" files but that is strongly discouraged. I wonder why it's discouraged. I've been discussing this with Jesper (the guy from JBoss who says it's discouraged), but after tens of exchanges all I could get really out of him really was that a war or ear with an embedded data source is not Java EE anymore :| Initially JBoss (Jesper) didn't want to support -ds.xml files at all, and after many complaints from the community he just ended the discussion saying something like: "this discussion is over, it's not going to happen". But then (I heard) a few very big customers complained and JBoss grudgingly added support for -ds.xml anyway. Don't forget btw that there's also a Java EE standard way to setup and configure a data source. It's the &lt;data-source&gt; element in web.xml, ejb-jar.xml and application.xml. Of course JBoss hates this with a vengeance, but the hate is not shared universally and some developer implemented it anyway (the TCK doesn't do too many tests for it, unfortunately). Personally I like to build self-contained jars. Something that a Jenkins server can build, send to a generic JBoss instance and be done with it. Fiddling with UIs on a specific JBoss instance is just not my thing. (the UI fiddling thing also sucks for development; instead of just checking out source and running it, you'll have to send out mails with instructions with each commit that depends on a new or changed data source. Of course not everyone reads mails before updating, and starts complaining that a build doesn't work.)
You need to travel back in time to when Java started. Java was horribly slow and being pimped as enhancing the web with Applets. So you had huge applet downloads on slow network (modem), which then was interpreted to run. So every user experience with it was negative. To reinforce that Java had it's own UI (Swing/AWT) which made the application look different to what you were using. So the user would see the difference, then think "ugh, java ... slow". Even if it wasn't slow. It wasn't until around Java1.4 it got a decent speed, and is used in the backend. The JIT compiler allowed it to be compiled on the fly to optimise for speed. In fact it hasn't been slow since then. The end user would be using Java and not even realise it. Applets were also dropped. On the front end a new UI API was created called SWT. This allowed Java to render as an application native to the operating system. So unless you saw the files on the system you would be unaware that Java was running. Even after all this though, it took a good 10 years to dispel the myth that Java was slow. From a programming standpoint the language isn't easy. Or rather it is easy to start off in, but if you want to code properly there is a whole range of stuff you need to learn (tbh, its probably on par with C). For example some people seem to think getters/setters are pointless but the design pattern is there for a reason. Some people think it is verbose, but the IDE's have solved most of that, and if you are really upset about it you can make it less verbose (but you lose maintainability). .. So most of the bad rep is from earlier in Javas history. 
It's messy, sure, but you can still see what happens. Of course, it's always possible to write bad code in any language.
I think that much of the "hate" is mostly just the screaming of a vocal minority. Sometimes it are people who are just [nonconformist](http://bestuff.com/stuff/south-park-goth-kids). Java is the most, or one of the most frequently used programming language, so it's the prime target of their attacks. If Python happened to be the Nr 1. language, Python would be "hated". Sometimes it are people who for some reason of the other really like their minority language. In order to advocate their little language, they have to badmouth the more popular language. Again, Java being the Nr 1. makes it the straightforward target. There are hundreds of languages people would actually *really* hate when forced to use it, but nobody uses these languages or even known about them. It doesn't make sense politically speaking to spread FUD about them, but as said the potential gains of bashing Java are much, much bigger.
&gt; "the grey square that never goes away" Are you sure you aren't smoking anything? ;)
Grey square? What the hell? Are you administering Java applets? You poor bastard.
In its defence at the time applets were released you could do some pretty amazing shit that no other thin client code could do.
Because they think Java is just applets and UI when they are the two least used aspects of it.
Like Wave and Reader? No thanks
You can also compile Java to native code.
Not really. Some interpreters compile and cache the result. Or have JIT.
Cute and totally irrelevant for what 90% of people use java for. 
Examples of them trying to monetize it and not extend it please. This sounds like "generic Oracle hate" unless you give some examples. I'd be happy to give positive examples (like OpenJDK commitment, open-sourcing JavaFX, modularising the JVM to allow it to run on embedded devices, Java for arm is already a thing, adding lambdas). And Google can only control their Java byte code to Dalvik byte code translator, not the Java language or the platform.
That's just Oracle hate. Where is this evidence that Oracle is just trying to monetize Java differently than Sun? If that's the case then why is Oracle opening code on a weekly basis to the OpenJDK? Why is Netbeans still around? Oracle has JDeveloper - a commercial IDE based on *Eclipse*. Strange that Netbeans development has been accelerating over the last couple of years. Have a look at the work being done on JavaFX right now. JavaFX is going to be a killer in Java 8.
Ill give you some: ask toolbar. Slow paced evolution. Serious security vulnerabilities...
It would have been a disaster. We would have had 12 forked incompatible versions of Java by now. Kinda like what we've seen with Android. Google is good at open sourcing new things but they're terrible at maintaining them eg : http://www.makeuseof.com/tag/top-ten-dead-google-projects-floating-cyberspace/
Why? What's the problem?
So, developers hate Java because they need a secure browser plugin? I get that people are upset about this. But it's quickly becoming FUD.
&gt; Since this article was first published, Sun has relicensed most of its Java &gt; platform reference implementation under the GNU General Public License, &gt; and there is now a free development environment for Java. Thus, the &gt; Java language as such is no longer a trap.
Every platform has security vulnerabilities. Java applets are the latest whipping boy, but applets have been neglected because they are considered obsolete. Server-side is Java's bread and butter. Java's evolution is slow because of a commitment to backwards compatibility and that Java's evolution is a community process that requires consensus. Java is not like .NET where Microsoft decides and everyone else must follow.
I don't have java. As you say, it's not a "bad language". Every language has a set of appropriate purposes. Here are some technical things about java that lead to the sociological issues that lead to the "hate": *Java leads to code bloat*. The language isn't very expressive, even in comparison to other statically typed languages like C++ and scala. Lots of time is spent worth on boiler-plate code. This alone makes me avoid it when I have the choice. I'm just so much more productive working in other languages. Another technical reason is that it's annoying to have the end-user install a JVM, so it's not very nice to use java for desktop environments. And these technical issues leads to lots of sociological ones, which others have recounted. It's used a lot in server-side code, by corporations that don't care about code bloat. It's not very fashionable for writing impressive-looking or short code. It's boring to work with. The GUIs it makes are absolutely awful. And so some people choose to hate it. But in the end, it's just a language. There are things it's good for, and lots of things it's not good for. There's no reason to hate a language for that.
I'm still getting around 3 on my i7 dual core. 8gb of ram and SSD too. I think it's probably because of the services and things it starts because I configured them. It takes between 10 and 15 on my m1.small EC2 instance. In any case I was being conservative. 
One of the real, if not discussed, reasons that they went to one XML file (standalone.xml in standalone mode) is that *for years* everyone constantly bitched about how many XML files there were in AS5. The reaction you see in AS7 is to bring it down to one. Sometimes it gets taken to passive-aggressive extremes. Nobody will admit it most likely. Now I have no beef with external data source files though I would prefer them to never be inside another archive. I was in one nightmare situation last year with 10 deployment targets and the war had to be cracked and customized on each one. Yuck. So now I prevent that at all costs. But you are absolutely right in that your automated processes should be able to create data sources. Now, the hardcore AS7 people will tell you to use the CLI but that's just ridiculous. In production I don't want to see them at all. That's something that should be worked out between your different deployment support teams. (Database, SA, what have you.) Overall I can't imagine ever going back to AS5. In fact I dread getting assignments where I would have to do that.
 public class Reason { String reason; public Reason(String r) { this.reason = r; } public void setReason(String r) { this.reason = r; } public String getReason() { return this.reason; } public void print() { System.out.println(reason); } } public class ReasonApp { public static void main(String[] args) { Reason reason = new Reason("That's why"); reason.print(); } } 
But that's not touching on Javascript. You're talking about an abstraction/utility library for Javascript. The fact that something like this is needed is testament to IAmASocketMan's statement: &gt; As JavaScript shows, most of those runtimes get something wrong and you end up having to write custom code for every weird nuance of IE or Safari or Chrome
&gt;The language is missing syntax sugar and niceties that other languages provide, so you have to write more boilerplate to get simple stuff done. E.g. in Python, you can write a map/dictionary using "x = { "key" : "value" }". Lets say you want to swap out the map implementation, or you want the compiler to type check your map elements. What do you do in Python? &gt;endless().method().chains().get().annoying().very().quickly() That isn't in any way Java specific, you can do that in every object oriented language. &gt;getters and setters are required for basic data structures Getters and setters are in no way required or specific to Java. You can write them in Java just like you can in any other object oriented language. These days getters/setters are not used in Java since they are a bad idea in general (let you poke at internal state). 
Because some programmers are bad and write bad Java like above?
Let's be real here. public class Reason { String reason; public void print() { System.out.println(reason); } } public class ReasonApp { public static void main(String[] args) { Reason reason = new Reason("That's why"); reason.print(); } } 1. Then, Source-&gt; generate Getters and Setters.... 2. Source-&gt; generate Constructors from fields....
For me its the lack of first class functions and no type inference. Also a lack of some of the nice syntax sugar a few other languages have.
That's true, but that's what I wanted to show. If you use generators for such simple things, syntax isn't simple enought. Also no type inference is very... sad. 
&gt;These days getters/setters are not used in Java Citation needed.
The byte data type is stored as a word in memory because that is how the JVM has to store it to be able to run on any OS/hardware. If you don't know that, you can run out of memory surprisingly fast. Reading packed files requires setting up Input Streams and probably bit masking to get the values correct in Java. 
What about just catching the NullPointerException then?
It's a problem for low-level programming when you have huge amounts of data and don't want to bloat memory. For example, InputStream.readByte() returns an integer, instead of a byte. That't because the byte datatype is signed and you won't get the correct results if you'd use it. You can work around those caveats, though.
I think you're talking about when a Swing app gets stuck in a loop or in a blocking IO operation. It stops responding to the user but the JVM is still responding to the operating system, so Windows, for example, does not detect that 'the program is not responding' and does not offer to kill it. And you have a nice grey square that never goes away.
Bingo.
Wow, but as I said it was old code and much cleaner and shorter now. Also I was new to java at the time.
"We are terminating Java because we want to focus on our core business. Please consider C# as an alternative"...
I get it, but I don't think that's how it would go down.
You remember how Firefox was still 'lame' after Mozilla hopped on the 6 week release schedule? Then, everyone started complaining about all the versions being released to improve functionality? Yeah, it takes a while for people to catch on to worthwhile changes. Java has a lot of strong libraries / tools going for it, but for a long while the core language was stuck on Java 6. .NET and other languages simply evolved faster and there's a regular stream of bad press from Oracle, security flaws, and blogsters (rightly) pointing out that Java is a very verbose language. It's worth your time to learn Python/Ruby/Haskell and whatever new language out there to improve how you think about stuff, but honestly, after Oracle starts kicking out lots of new Java versions (also assuming they've finally stopped pissing off the OSS community), then I think some of the big concerns will go by the wayside. Or the cool people can just continue to use JVM languages and we can all benefit from having many heads writing libraries for the same ecosystem
Just make reason public...
It's all a bit interrelated, but Java productivity is definitely on the slow side. I think that works in large projects, but it shouldn't be the default for smaller projects.
An appropriate use case for method chaining like that is when one has an object which acts as a "builder" with lots of `set.*()` methods that all return `this` and a `build()` method that constructs a new object. Then one can do things like this: Builder builder = new Builder(); Buildee b = builder.setFoo("foo").setBar("bar").setBaz("baz").build(); This is similar to having an abstract factory class except you can incrementally supply the arguments instead of having a `newBuildee()` method that takes a boatload of arguments. 
Because it's most people's job.
The main reason for it was how to deal with overflows in unsigned data types. Java 8 has support for unsigned data types as objects tough. https://blogs.oracle.com/darcy/entry/unsigned_api 
&gt; Also no type inference is very... sad C also doesn't have it, and yet hipsters don't seem to care.
If you use an exception as flow control or decision making then you need to revisit your design.
OP was complaining about endless method chains, not about null pointer exceptions. But yes, the ?. operator is useful. Groovy has quite a few useful operators like that. And i apparently should never post code in r/java again. Even if it was as a joke. 
Just saying. Although I would think that the huge pile of code checking for null objects for every part of the chain might be way uglier than just checking for the NPE.
* If you trust the input, You want [beanshell](http://www.beanshell.org/). * Never trust user input.
We use Scala for some time now. One advice: don't mix scala and java. Write every new module in scala, but leave old java projects in java.
as a person who's currently learning it right now, it is because of the thought process you need to develop in order to code in java
&gt; Javascript needs an interpreter? If you're browsing Reddit, you're using something that can run Javascript. And how do you think this Javascript on Reddit is being run? By magic ponies? Each browser has its own interpreter, which is why Javascript developers often have to write separate code for each browser.
In my last class all they did was tout getters/setters. What is the new standard, and why shouldn't getters/setters be used?
That's just plainly not true. Different languages encourage different types of errors in coding. You wouldn't see the above problem in scala or closure, for example. You would see other kinds of problems. You won't generally find line noise or global variable hell in java like you do in Perl. Etc, etc. Each language does seem to foster it's own idiosyncratic idiocies. Good programmers avoid them better in any given language than bad programmers, but they still exist.
These are best practices, not "standards". And I have no doubt they still teach getters/setters in various classes. The reason they are bad is that they let you poke directly at the object state. Objects should not be exposing their internal state and presentation. Their job is to implement some useful functionality and should expose an interface through which they can be told to "do something" useful. When you have objects with a ton of getters/setters, it's an indication that your object is really a data container rather than something that performs some useful functions, and it's better to let data just be data instead of burying it in objects.
TIL
Get this much newer one instead : [Java Performance : Charlie Hunt](http://www.amazon.com/Java-Performance-Charlie-Hunt/dp/0137142528)
That's true, but if you have a NullPointerException on that line, good luck figuring out *what*'s null :-D
ActiveX
Then I'm not a hipster. But still, I don't like Java.
Your post only reaffirm my point and also, you left out your explanation regarding the ask toolbar. This will be down voted to hell, but someone needs to say this: java might not be the weapon of choice of a modern programmer. This post was brought to you by a fervent Java developer who believes that Oracle could do much better.
I have the advantage that I'm usually hired to consult on the "right" way to do things with certain projects. If they're using Spring I can usually evangelize CDI pretty effectively.
I have almost no experience with spring but I also only come along with a EAP support contract so there is really no need except in post-mortem or migration. I work the southeast and have done small shops up to Fortune 500 level. I am not specific to any industry. It really is all up to who can afford the rates. I'm not prejudiced against Spring really it's just that I don't see the point anymore. And when I did work with it it seemed like it was a set of arcane incantations. I don't know if I just wasn't experienced enough to understand it or what. I did like Spring Security though.
I left out the Ask toolbar because it is irrelevant. It is a stupid business decision by Oracle, but that has nothing to do with the capabilities of the technology itself. As I stated, you've only addressed miniscule use case for Java. The latest security vulnerabilities have been centered around the applet technology and the cracks in the sandbox. It is well known that Java has failed on the client side (and the lack of attention is showing), but it continues to thrive on the server side. You also haven't proven how Java can't handle the challenges of modern programming. The evidence is against you on that, as software written in Java is on the leading edge on many different fronts. Does that mean the language can't use improvement? Of course not. But does that mean the language isn't capable? Also, of course not. You're getting downvoted because you've made accusations with barely any substance.
&gt; This is similar to having an abstract factory class except you can incrementally supply the arguments instead of having a newBuildee() method that takes a boatload of arguments. While being much more readable. Lacking python style method(exoticArg = 3), methods with lots of options can be real troublesome to use. The builder can also be a state machine internally guarding the correct usage of all option combinations.
Here, you said it yourself... Oracle has done a stupid business decision. I only wish to see some consequences. Sorry for not playing along this circle jerk
Because some people are stupid. They haven't learn that what matters is the end result (resulting app).
&gt; ask toolbar 1. You can run JRE installer with command line args to install automatically without any stupid toolbars 2. Installers (JRE) from [here](http://www.oracle.com/technetwork/java/javase/downloads/index.html) don't *ask* for toolbar. 3. You can bundle private JRE with your application. 4. Java is mostly used on server anyway... so, who cares? Ask toolbar affects only clients... and it didn't exist before, and hopefully will disappear soon. Don't know why Oracle did that... they are really annoying. &gt; Slow paced evolution. This is actually a good thing. Might be a little faster and more aggressive. But, on the other hand, I prefer this, instead of mindlessly throwing hipster stuff into language or platform and converting it into a mess. (like Microsoft does with .NET or c#) &gt; Serious security vulnerabilities... You are saying that like there was never any exploit for: Flash, Silverlight, various other useless browser plugins, or browsers themselves. It's browsers' fault that they let plugins play without interaction (click-to-play)
Use JLabel's setText(String) method.
&gt;Oracle is the best thing to happen to Java. Best than, say, IBM? I mean, if a company had better plans for Java than Oracle, that was IBM.
Java also owes its success to a huge number of libraries built on top. You can't consider the benefits of a language in isolation.
Is [this](http://www.zdnet.com/a-close-look-at-how-oracle-installs-deceptive-software-with-java-updates-7000010038/) just Oracle-hate? That's out-right malware.
&gt;April 12, 2004 The article's date
I'd love to pick up Java again; however I don't trust Oracle with it. 
Android doesn't even have a Java Virtual Machine. It uses a whole different machine architecture (Dalvik) with a different binary distribution format. Swing and AWT are omitted. [This might answer some of your questions.](http://en.wikipedia.org/wiki/Comparison_of_Java_and_Android_API) I'm not a lawyer, but I understand Google can do that because they don't license anything from Oracle for the Android implementation of Java. (And there was a huge lawsuit to confirm they don't need a license.)
&gt; Compared to the old Sun, they're showing more interest in monetizing it and less creativity in extending it. In context please. Sun added that shit, not Oracle.
Fair enough. But Oracle should be removing it, since the toolbar is bad, the way it's installed is bad, and the search engine it uses is bad.
...which is really not that different to the thought process you need to develop in any OO language. Are you sure programming is for you?
I agree with everything you just said.
This can give you a start: http://www.freejavaguide.com/corejava.htm When I first started to learn to write code I did a lot of googling (I still do this), and also made a lot of very basic programs. Things like currency converters and what not. /r/dailyprogrammer usually has some good projects that you can work on, and the answers are posted in the comments. I'm not an expert by any means but this is generally how I started.
Yawn. Same thing everyone does including Sun and including most of the downloads from zdnet itself. You just joined the internet recently right?
Yes, stay motivated! I would say you are lucky being taught how to make (I presume simple) games; in my days it was all about making calculators and popping up a "Your name is [whatyoutypedinthebox]". I would say most Java teaching is quite general; so anything you find would do. There will be loads of rubbish though. Don't be overwhelmed by the Java API, there are loads in there, but half of it you won't need. Now you mention a text editor as an example.. well, that's actually straight in the good old [Java tutorials](http://docs.oracle.com/javase/tutorial/), see for instance [Using Text components](http://docs.oracle.com/javase/tutorial/uiswing/components/text.Bhtml). But I must shoot in that programming is so much more than just games and application windows ; applications are mainly plumbing, the really interesting stuff happens beneath and in-between - for instance on a game server where you have to do collision detection of two characters, or in a web service where you have to use transactions, say to avoid two flight passengers reserving the same seat.
&gt; No, I'm wondering why people hate Java. I will admit that it's not the best language ever invented, but it's not as bad as most people make it out to be, either. If you don't know why people hate it, you can't say "it's not as bad as most people make it out to be". Furthermore, you started a thread asking a question then argue with the answers; that's not 'wondering' anything. &gt; I was responding to Speedzor's comment, which mentioned JavaScript and PHP as cross-platform languages. I don't see how that makes what you say any less incorrect.
I don't quite get this point.. of course you should not sit there and mindlessly expose every field with getters and setters, that could easily put your object in a very funny state (for instance a database connection that don't match up with a precompiled query) - however some frameworks like Spring will almost force you to do getters/setters for injecting services - which when done correctly can be very powerful - you could for instance do a live-upgrade of the authentication module without taking down a running service. The flipside of this is of course that it could also break things horribly ; just like in Python poking at random attributes of an object you received can cause havoc.
Those kind of things are all called HTML5 and so now, and although they look much shinier and fancier, the various Javascript-based frameworks of today are often in effect much slower, insecure and error-prone than say a Java 1.3 applet would have been.
&gt; You can't consider the benefits of a language in isolation. You can certainly debate the core of the language, separate from 3rd party libraries available for the language.
The first step is parsing. The file is not read left to right it is broken down into its composing pieces which prevents a+33 from becoming a+3. Once the composing pieces are determined order of operations is applied. A quick search turned up this: http://bmanolov.free.fr/javaoperators.php 
Netbeans is literally just eclipse with a WYSIWYG built in......
It's quite easy to bundle a JVM with your application so that it's transparent, but sadly there are no magic tools included in the SDK that gives you such nice installers. As no big standard has evolved, some (proper big-name) applications will bundle it (meaning a separate, now easily unpatched, JRE in program files\YourApp); while others will force you to install manually or semi-automatically.
Hmm... are you running a servlet container from the GUI?? Try "java -Djava.awt.headless=true" or just install the Tomcat windows Service.
As you can see from sproket888's answer, that's debatable. What's not debatable, however, is that Oracle is doing a better job than Sun.
Are you somewhere in your code establishing a connection to a database, external IP, local IP, etc? PS: this is probably the wrong place. /r/java is meant to discuss Java, not help you with coding problems. /r/javahelp or /r/learnprogramming will be better suited in the future.
No. I did read somewhere I need to change a binding from "localhost" to "127.0.0.1", but no where did anyone explain HOW that is done. That may be the solution, but I'm not familiar enough with eclipse to figure out how to do this.
Do you happen to use IPv6?
I believe it defaults to using IPv6. I was told to put "-Djava.net.preferIPv4Stack=true" in eclipse.ini to set it to use IPv4 instead. This did not fix the problem. 
Try it again but place that argument in your Run Configuration in eclipse as a VM argument. That's all I can come up with.
Ok then! You make this easy. The DOM and associated events are the equivalent to SWING, which is NOT available across all platforms. (Android) Take those away and all the cross-platform compatibility problems vanish. JavaScript has no problems ranging across a huge array of environments without change. It's incredibly healthy across platforms that Java can't even touch. JS runs without modification on servers, desktop browsers, as the UI language of choice for Gnome and games like SimCity, and on Android. Java's multi-platform class files don't work on Android and they are only supported as a plugin in browsers. (And it's a frequent source of security warnings.) Java comes in a distant second to JS in cross-platform compatibility as soon as you remove the UI libraries.
what is your program supposed to do?
In the method that is called when the button is clicked: labelsName.setText("String");
I agree! That's the point I was trying to make. All the transparent installers are a system-dependent thing: that installer will work for only one target at a time. Either the end-user or the developer has to deal with this, and then there's the pandora of compatibility of JVM versions. I'm not sure why people hate my comment so much :p. I'm actually a CS Ph.D. student at a top 4 university who studies programing languages, so while I'm not an expert on java in particular, my answer is at least somewhat authoritative. This of course doesn't address everyone hates java, but it does cover some important points.
"Quite a bit" is a poor answer to that question. And the math you are doing is irrelevant. If you need help trouble shooting your problem you need to provide some more informative context than what you have thus far. Regardless, if you're mention localhosts and IP binding you are probably running some form of a local webapp. The problem is probably coming this: When you start your app there is some type of setup going on that sets up a connection to a socket, but when you run your junit test case, this setup isn't happening because the junit test case doesn't execute the socket set up portion of your program. So what you need to do is find this socket setup portion of your code and copy it into your test case using the @BeforeClass annotation. 
In the past couple days I've read chapter 26 from "Java The Complete Reference" and it was all about the java.util.concurrent package. I finally know what a Semaphore, CountDownLatch, Exchanger, and ExecutorService are. I find concurrency stuff fascinating, and I think I have enough prerequisite knowledge now to make my way through Concurrency in Java. I'm excited to read it. Also, wouldn't future updates to Java be influenced by other JVM languages like Scala and Clojure? I'm hesitant to learn Clojure because it's very young and obscure and I'm hesitant to learn Scala because of [this email from Yammer engineer to Scala's language designer](http://codahale.com/downloads/email-to-donald.txt). The performance gotchas and lack of documentation and tools is scary. If I'm gonna learn a functional language my top pick right now is Haskell because it seems to be more refined and has a larger online community. It's also suppose to be the most strictly functional of the functional languages, whatever that means.
What does some framework using getters/setters have to do with anything? Dependency injection does not fundamentally require getters/setters, that's just a poor choice the framework developer made.
&gt; Short-lived objects are practically free to allocate and collect I recently implemented an object pool for my matrices (most came from skeletal animation, only used in that frame - fps was around 200). Under stress-testing (32 players on server and no fps limiter) the GC time went from 15ms every few seconds, to 1ms. So it depends.
What errors are you getting? Here's the first thing I see: public static void main (double speed, int time) throws OPException This needs to be public static void main(String[] args) { and then in main parse your parameters and handle your exceptions.
The signature for a main method is: public static void main(String[] args) If you deviate from that, Java won't know how to launch your class. If you want to pass in parameters from the command line, you need to get them out of that array as Strings and convert them to the types you want: double speed = Double.parseDouble(args[0]);
Also, it looks like you've already cross posted this to /r/javahelp. http://www.reddit.com/r/javahelp/comments/1ayt3c/what_have_i_done_wrong/ That's a better place anyway.
Guys I can't tell you how much I appreciate this but I think I've probably fucked this beyond reasonable repair. I need more practice!!! Thanks heaps all!
Hi there, with a few adjustments your program runs just fine. I'll give you some examples of what you should do differently to make it work. First of all, are you using a code editor like Eclipse or NetBeans? Those are free to use and will help you build and run your programs easier and point out any syntax errors you make while coding. Great tools to use instead of common text editors, in my opinion. There's a few syntax errors in your code. First of all, when you want to run your program, you will need an entry point for it. To put it simple, when using Java this entry point will be your main function. From your code one should find a public class Distance{ public static void main(String[] args){ ...insert code here... } } that will be your main function. The "String[] args" parameter is required for a main function. It allows passing parameters in a string array to your program when you first start it. If you already knew this and have your actual main function in another file, then excuse me for my mistake. It was kindly meant. Secondly Java is a case sensitive language, meaning that "While" and "while" are two different things. When creating a while loop, "while" should always be written using lower case characters. Thirdly for example when using the Scanner, you should call for functions that the Scanner has available. A function call always ends with () or (parameter p) or (parameter p, param pa) etc. A code editor would be a great help to remember this. So instead of writing time = keyboard.nextInteger; you should have time = keyboard.nextInt(); There were a few other errors like this in your code that I'm sure you'll find out yourself. And since your assignment seems to be a small one and you probably are not using object oriented parts of Java, you should have everything else of your code inside your main function apart from the public class Distance{} declaration. If you provide more info on your problem and assignment I can try to help you more. 
Erm, ever heard of data objects? This is exactly where you need setters and getters.
Thanks so much mate! you are a lifesaver!! I've just downloaded netbeans and It is SOOOO great!! I've finished it, it runs, I'm very very happy!! thanks so much for clearing up my errors!!! It clarified everything!
It's always a pleasure to help. I'm glad to see you so excited! I hope you have lots of good moments while coding. I most certainly do. :) Just remember to ask for advice and keep on trying. The best way to code is to write a few lines at the time, compile and run the program. This way you'll avoid having lots of errors at once. ^^ 
Great advice! I can't believe I never thought of that before, thanks so much!
The JVM specifications state that the designers of a JVM should choose a *word size* when creating a JVM: &gt;The basic unit of size for data values in the Java virtual machine is the word--a fixed size chosen by the designer of each Java virtual machine implementation. The word size must be large enough to hold a value of type byte, short, int, char, float, returnAddress, or reference. Two words must be large enough to hold a value of type long or double. An implementation designer must therefore choose a word size that is at least 32 bits, but otherwise can pick whatever word size will yield the most efficient implementation. The word size is often chosen to be the size of a native pointer on the host platform. which is probably what you are referring to. But the new **java.nio.ByteBuffer** class will allow you to work with a memory block of true 8 bit bytes if that is what you need to do.
As something that pulls from a server, the data structure that you store your results in doesn't have to be a specific faucet. You can simply load all results into a list, then use search terms to determine which of those results to display to the user. All of the data preexists on the server, so there's no gain in objectfying your data. As for the language, Java is an excellent choice as you can write an applet that can be embedded in the page. Also look at Javascript and HTML5.
Apps need data. They get data and need to use it and likely modify it and save the changes. How would you represent this? Do you have resource link which demonstrates a sample of this with source?
Pwehaps you are just not capable of learning programming or just don't have a good teacher. When I was younger (12) I was trying to learn programming on my own but it didn't really catch on until I was like 15 and I had problems with the "verbiage" and "grammar", now I am 19 and in my second year of programming at college.
Forgive me if I'm missing something but what core changes have Java made that .NET doesn't already have?
In Java 8 mainly the new interface base implementations but I have not read into detail about all the changes (this may or may not port easily to abstract base classes depending on usage throughout an application). Handling of closures is also different but not as much of a roadblock. I will have a much better idea the first time I end up porting between Java 8 and .NET.
I don't hate Java, but I don't find it "easier" to learn than C. C is easier for someone who has no concept of classes/OOP.
I do not work for IBM :|
I do not work for IBM, Redhat or Oracle.
Right. Exactly. You're talking out of your ass.
RTFM
well, I'm an IT major at my University, and it's the introduction class to the whole major, personally he's not that great of a teacher, and also that his projects he assigns me are *waaaaay* too far out of my comfort level to program. I understand the logic, and everything behind it, it's just I can't create it. It's like understanding spanish, but not being able to speak it, that's my case
Java is indeed getting lambdas and you do have access to some of the same libraries, but there are still benefits from using Scala or Clojure. If you read the book [Functional Programming in Java](http://shop.oreilly.com/product/0636920021667.do) you can see how verbose/clunky Java can be when you try to do FP in it. If you look at the Google Guava library, which has functional idioms, they issue a warning: &gt;Excessive use of Guava's functional programming idioms can lead to verbose, confusing, unreadable, and inefficient code. Also, these new features of Java will actually take a long time to get adopted. Just to give an anecdotal example, my company is now considering upgrading to Java 7 which has been around for 1.5 years. The actual process will take a while. The reason Scala and Clojure are increasing in popularity is that they run on the JVM and inter-operate with Java. Therefore they have a higher chance of being used in an actual project in production. Meaning, you might actually get to code in it in your day job (more than Haskell) :) You are right though, they are newer languages and you are more likely to find start-ups and smaller companies using Scala/Clojure. The email you referenced is very interesting, but it's one perspective, and I would love to see other perspectives on the same issues. I do know there are success stories like for [Twitter](http://blog.redfin.com/devblog/2010/05/how_and_why_twitter_uses_scala.html).
Yeah didn't see that. No harm no foul, good luck.
CEP is typically not used to implement matching engines. Are you planning to support extremely esoteric orders?
They already have a matching engine. Actually I'm curious about them too.. If u can point some readings I'd happy to learn about them too. For my need though, it's not gonna be used in the HFT side. This is more for predictions and estimations on market data.. 
Whoever came up with this idea at Oracle should have a crowbar planted in their neck and die a slow agonizing death in a pool of their own blood! Period
Hard but possible on stripped down Linux and off the shelf hardware
[Bitch, please.](http://en.wikipedia.org/wiki/List_of_Java_virtual_machines)
What market data vendor are you using? You may want to look into their compatible offerings ([activ](http://www.activfinancial.com), [one market data](http://www.onetick.com/web1/) are decent). However, if custom *java* is a requirement, you'll likely want to look into libraries such as [cglib](http://cglib.sourceforge.net/).
I don't know which one they are using.. I'll ask them tomorrow, but what I felt from the conversations was custom implementation though.. I couldn't picture the usage of CGLib in this context. Are you referring to bytecode modifications?
I really enjoyed reading that. Thank you.
What precisely would be *stripped* from linux to accomplish *this*?
I love the down votes for answering the question. I also admitted that things now for the most part are fine and my issue is related to bad initial experience and things are good now. That being said, you only get one chance for a first impression.
well using user input was really just a stepping stone.. I was hoping to make the program grow by itself.. I hadn't heard of beanshell before though. Has it been inplemented into the JDK? The last post I saw on their website was from 2005... I'm assuming it's not in development anymore.
link?
We would be more than happy to hear feedback how to improve our licensing, do you mind sending them to support@zeroturnaround.com and link to this thread for context?
Having trouble following exactly how your new configuration affects the existing apps. What kind of environment? Is API compatibility really a concern, wouldn't any log4j 1.x client API be compatible? Came in to say: I'd recommend SLF4J over log4j. You could write a SLF4J bridge for your legacy API, and use a binding for whatever log implementation you like. Logback is an excellent choice, if you're not married to log4j. www.slf4j.org/legacy.html 
Anything not needed. This is what all the HFT guys do. Part art, part science. Programming as you know it won't work at this level. If Linux scheduler touches your app, its game over
Just curious how you know the calcs take 100 ns? 
You want to run two different versions of the same library simultaneously in a single JVM. OSGI can do that, but it's VERY heavy and may require some more plumbing. You could wrap it in some kind of remote interface and run Log4J in a different JVM. Never imagined doing this with log4j. It would be heavy also. Log4j is open source, you could fork it and change the package names. Better idea: Roll it out to one application at a time and adjust the ones that are using old log4j to use the new version.
This is a bit contrived but hopefully explains. Let's say I have a legacy API in a class called LogIt. LogIt has the typical logDebug, logInfo, etc. type methods. Many apps and many lines of code reference this. So changing the API from LogIt to log4j or slf4j directly isn't an option. However, behind LogIt, I want to change some behavior to some things that log4j does out of the box beautifully. Rolling log files is one example. That's easy enough, but the apps that reference LogIt has it on the system classpath. Some of these apps use open source and commercial JARs that depend on log4j, also on the system classpath. There are various versions of log4j required by these apps today. I agree for the most part that API has been pretty static for a long time, so potentially no conflict. But given the sheer quantity of applications in play, just switching to "my" version of log4j isn't valid and me depending on theirs may not be valid either. So, to minimize impact to this large number of apps, I'm looking for a way to load the version of log4j I want while not impacting the existing apps in any way. That's the context of my question. I think I can do this behind LogIt using my own classloader to isolate the log4j stuff. Looking for information for those that have tried this, or potential suggestions for another approach.
Thanks. Good info. I like your summary. OSGi is where I ultimately want to be, so I'd love to hear some details on "VERY heavy" if you have them to share. Heavy in terms of heap usage because of all the isolated classloading? Heavy in terms of performance overhead? I'm not terribly versed in OSGi as I'm coming from an older java/app environment and just now moving to newer. Given the sheer volume of code in question (literally several hundred apps with several million lines of code over 100k+ classes) agility is not a term I can use to describe what I've got to manage. The fork option crossed my mind, and that might be the overall safest way to do this in mass. The one at a time approach would be nicest, but see my previous numbers. I'm talking about hundreds of apps. So that'll take a while. I can do it that way if I need to. It just means a longer road ahead of me.
https://code.google.com/p/jarjar/ Use it to take the version of log4j that you want and give it your own custom package name.
As far as I know, my employer isn't using OSGI yet, though a lot of people are anticipating we need to. It looks like it will be the future, but every time it comes up, we put it off because of the amount of work involved. You can't just point to a jar file and say, "Now you're an OSGI service!" There's some work in wrapping up a package into an OSGI bundle. The platform isn't free (as for as I know,) so there's a purchasing decision. And there is probably going to be some CPU cost with every call. Yes, you can migrate hundreds of apps. It's been done before. It helps a lot if they all have good unit tests, but if they don't, that's a bigger problem than the sort of logging you use.
Thanks. I appreciate the info. We have an OSGi container coming in the next 12-18 months, but I agree we have a major effort to move all of this to it. Luckily, we'll be migrating each of these hundreds of apps from our older container to the new one in sets, so that is my chance to redo this. But you're right, it's still a major undertaking. As for unit tests, I so wish.... Logging is just a place I'm working out the kinks of this approach. All of the jse and j2e infrastructure is largely homegrown as this infrastructure, while sophisticated, is 10-13 years old. It needs some modernization, but I can't wholesale redo the code that consumes it. So I'm looking for an approach to modernize pieces with minimal consumer changes. Again, thanks for the info.
Holy crap! That's exactly what I'm looking for. How did all my googling (irony intended) not yield this? I've been poking around on this problem for a couple of weeks with various searches and nothing like this showed up. I saw some "this is how you could" type blogs out there, but it was very simplistic and high level. I wasn't sure it would hold for a deeper implementation. Many up votes for you kind sir!
&gt; How did all my googling (irony intended) not yield this? It probably did, but when you saw the name "jarjar" your mind blacked it out: "This is not the tool you are looking for" it thought. But seriously, this *is* the tool you are looking for. I've used jarjar on large projects before, and it lets you avoid dependency version mismatches without having to deal with classloader magic.
Okay, sounds like I understood well enough. Using SLF4J for your legacy API seems like the way to go. That way, you're not bound to a single logging implementation. For a full explanation, see: * http://www.slf4j.org/docs.html * http://www.slf4j.org/faq.html#slf4j_compatible Then, for your applications using LogIt and log4j, just use the SLF4j log4j binding and the existing log4j will get your events. For applications only using the legacy framework, where there isn't an existing framework like log4j, I'd recommend logback as your native logging library - it's the spiritual successor to log4j, and overcomes many of the shortcomings of the various java logging frameworks. The beauty of SLF4J, is you can also satisfy the logging dependencies for your various library dependencies by using bridging. For example, say you had libraries with java.util.logging, commons-logging and log4j dependencies. Rather than satisfy and configure them separately, put the SLF4J bridges for each of them on the classpath. Then your chosen binding gets all of those events, logging can be configured in one place, and everything 'just works'.
the linux scheduler *touches* your app every time you make a system call
Ok, so the platform can be free. I wonder how many companies are able to use that. Unfortunately, the architects I'm working with seem to have lost their respect for Open Source and now buy anything labeled "enterprise". I think the chances of us rolling out another open source product to production are somewhere between slim and none.
I know real enterprises are using and contributing to Open Source and I really envy that. But not these guys. I don't think we have a single application that could run without Oracle and PL/SQL before 2015, if we started porting now. Every new proprietary Oracle feature has to be adopted ASAP. Next, replacing all our Linux boxes with Oracle Linux running on VMWare. "Enterprise" vendors make a lot of money off us. I believe you when you say OSGi can be free, but that's just not going to happen for us.
It may not be required, but have you considered using GPUs or spreading the load across multiple machines? Edit: link http://gpgpu.org/tag/pattern-matching
Well, good luck with that. I hope they at least pay you good ;) Maybe you'll end up skipping over OSGi and waiting for Oracle to finally put Jigsaw into a Java release, and use whatever services framework gets built on top of that.
Get a free GitHub account. Learn how to use Git and IntelliJ IDEA 12 Community. Read through modern example projects such as https://github.com/mikaelhg/springmvc-example and follow up on the leads. Thumb through http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/ and go through the parts which interest you in more detail. Acquaint yourself with modern web frontend development using http://angularjs.org/, JSON and REST APIs.
In processFinalGrade you are overwriting each record before reading from it. Also, readRecords will only read one record. Did you mean to put it in a loop?
oh yeah shoot i meant to put while, not if. hahah. also, which part of processFinalGrade overwrites the record?
I've ALMOST got this solved in another thread of the same thing i posted :) http://www.reddit.com/r/javahelp/comments/1b11ex/grade_records_assignment_help/ Thank you so much :D 
&gt; it started out as research as to why Lists does not exist in Java before 1.5, while the answer was because Java supposedly didnt support templates before 1.5 I'm afraid this is not true. First of all, the java.util.List interface and most standard implementations have been in the standard library since Java 1.2. Also, java.util.Vector, which is a data structure similar to an ArrayList, has been in the standard library since 1.0. Generics (should not be called "templates"!!) was indeed added in 1.5, so you had to do a lot of casting. 
Ah yeah that might very well be the case, I come from a C background so I thought templates would apply here as well, thanks for letting me know. So the standard List was based on one type before 1.5? 
&gt; So the standard List was based on one type before 1.5? Yeah, that's essentially the case here, but that actually applies to the current List too. Unlike templates in C++, Java generics are implemented with type erasure. This means that in reality there is only one type, and what you see in the code is just a compile-time trick. In practice this means that this 1.5+ code: List&lt;String&gt; listOfStrings = new ArrayList&lt;String&gt;(); listOfStrings.add("a string"); String firstString = listOfStrings.get(0); is exactly equal to this pre-1.5 code (note the lack of generics and the requirement to cast return values): List listOfStrings = new ArrayList(); listOfStrings.add("a string"); String firstString = (String) listOfStrings.get(0); When you compile the first code with 1.5+ compiler, you get exactly the same bytecode as compiling the second example with any version of Java. The compiler just adds those casts automatically based on the generics information. At runtime there is only one type: List, and there are no guarantees that the type restrictions will hold at runtime. *Disclaimer: What I described is not 100% accurate, because some type information is in some cases accessible using reflection (e.g. when extending a generic superclass). So, the bytecode is not 100% the same in some cases, but the basic idea works exactly how I described.*
Try JDBC
This just sounds like you want to exploit the game.
Try out [Yank](http://xeiam.com/yank.jsp). The [example page](http://xeiam.com/yank_examplecode.jsp) shows examples in MySQL, but you can use any JDBC-compatible database.
Here's some actual feedback about the code. Important things: + Don't use recursion in data structures unless necessary. Your code will blow the stack if the total size gets too large. + I might be wrong, but I see no use for the ID field. You'll get some space savings and a more simple data structure if you drop it. You are tracking listSize in the list, and using counters in the algorithms, so I don't think the IDs are needed at all. + There is no error handling at all. What happens if I call remove(0) or get(0) on an empty List? What happens if I use negative indexes? (= remove(-999), get(-999)) Minor things that are debatable, but important in my opinion: + Since Link seems to be an internal implementation detail (public methods in List never return Link objects), there is absolutely no value in having getters and setters. Don't add them "just because you can". + Consider implementing Iterable&lt;T&gt;. You can then loop through your lists using the enhanced for loop: List&lt;String&gt; myList = // .... for (String s : myList) { } + Nulling local variables is completely useless and has no effect on garbage collection or memory: bindLink = null; // No point in doing this + Modifying method parameters directly is considered bad practice. Make a local variable instead and modify it instead: int c = counter; c--; + recursiveFind has a non-reachable return statement. You are already returning in both if/else branches, so the final return is not reachable and is useless. Very minor things that are also debatable, but would make the code cleaner in my opinion: + No need to add default constructor to a class, because it exists by default + Similar to above, no need to add default values to fields, because all fields are always initialized with default values (you will *never* see random data like with C). All references are null by default, all number types are 0 by default. + Use standard Java code conventions: (opening braces on the same line, don't use _ in variable names, getter/setter parameter names must match the field, indent methods/fields correctly)
If you are looking for a database that does not require an installation (similar to an Access database), look into H2, Apache Derby or SQLite. 
I'll revise the errors I agree with, but mainly thanks for the constructive feedback!
I'll second H2. Last week was the first time I'd used it and it only took about an hour to get it set up and write a simple Java class to talk with it.
I know this is possible cause I did this a couple years ago for my high school project. I ended up asking a couple questions on [stackoverflow](http://stackoverflow.com/users/193772/twodayslate?tab=questions) about it.
 Runtime r = Runtime.getSystemRuntime(); r.exec("HTML FILE OR URL"); On windows this should launch the default browser not sure about other platforms though.
H2 &gt; hsqldb
Download Netbeans. There are sample projects for this kind of thing. Create a sample and study the code.
Isn't AWT part of the standard library? Then it shouldn't matter if you use it. 
Sometimes "good enough" really is.
Derby &gt; H2
http://www.oracle.com/technetwork/products/express-edition/downloads/index.html http://docs.oracle.com/cd/E17781_01/index.htm Oracle XE 11g is a free as in beer version of the oracle database. Setup is a simple exe (or on Linux a RPM). The link above has some '2 day' training classes which go through the basics.
In my experience with something like this and the performance requirements you're citing you invariably end up with a custom coded solution. CEP engines like Esper or Aleri will get you close but when it comes down to it these products have a certain amount of inherent 'generality'. If it was me I'd start by looking at how complex the matching logic is, what messaging bus they're using (29West, RMDS, RV...), create a quick spike with [disruptor](http://lmax-exchange.github.com/disruptor/) and take it from there.
In a previous project we investigated using GPU for a pricing engine. At the time the major gotcha was getting data to/from the GPU. Apparently this is a general bottleneck with any co-processor setup (we investigated FPGA's aswell). In general unless the problem will benefit massively from vector processing in a latency sensitive pipeline it's not a good move. If you're looking to improve throughput now that's a different story.
I was just looking at some of this more low level stuff in Java, it's quite interesting. If you are interested there is a nice white paper by LMAX on Distruptor framework which won a Java Dukes Choice award for in 2011 http://lmax-exchange.github.com/disruptor/
I would recommend using the [JPA (java persistence api)](http://en.wikipedia.org/wiki/Java_Persistence_API) with the [JPQL (java persistence query language)](http://en.wikipedia.org/wiki/Java_Persistence_Query_Language). The JPA is a set of interfaces and there are several providers who implement them, the most popular being [JBOSS Hibernate](http://www.hibernate.org/) (my favorite) and [eclipselink](http://www.eclipse.org/eclipselink/). A database I would recommend as others have suggested is sqlite ([in which you can find a jdbc-sqlite driver here](https://bitbucket.org/xerial/sqlite-jdbc)). Last but not least you will need someway for hibernate to translate the java&lt;-&gt;sql and this is accomplished through a java object called a Dialect ([which a sqlite one can be found here](https://github.com/gwenn/sqlite-dialect)). If need be I can put together a quick example eclipse project later when I have some time. If you really want to use MS Access with java then you will need to find a jdbc to odbc bridge for msaccess. It appears there might be a decent example on [how to do this here](http://www.herongyang.com/JDBC/JDBC-ODBC-MS-Access.html) if you are interested.
Gradle seems powerful. But IDE support is rather lacking.
I think that's still the case, but newer nvidia Tesla systems may have improved that somewhat, if you have the money.
This showed up on my radar. But honestly, I don't know what any of this means. Can anyone help?
HSQL. You can use OpenOffice BASE to set up your database/test outside of your application. http://www.openoffice.org/product/base.html It is extremely lightweight though, so for small usage (eg. 1 user) it should be fine. Pretty much anything you do should be using the JDBC. So if you write code for one database engine in theory it should work for all of them. 
Not really.
I read this as "Java and badasses". I thought, "oh, well, then, this thread's for me!"
* Live on stackoverflow.com * Annotations - EVERYWHERE (added in Java SE 5 but got popular in EE 5) * EJBs aren't evil anymore. * JPA(Hibernate) instead of JDBC or (dead) Entity EJBs. * Haven't worked on Struts in a couple years * Learn REST and JAX-RS * Everything is a runtime exception now (and they like it that way) * Use generics for collections * No more EARs, EJB-JARs, etc. Just WARs. Everything can go in a WAR. * A lot more CSS and JavaScript (and jQuery) now. Sometimes HTML/CSS and JavaScript can replace Servlets and JSPs. JavaScript frontend can talk to JAX-RS backend.
Is this Swing development, or AWT development? What kind of UI are you developing? Oracle provides some great online tutorials for taking your first steps in Swing, and learning basics like layout managers and different types of components.
It sounds like you're learning Swing -- I got started with Sun's Swing tutorials back in ~2003, it looks like these are now available at [oracle.com](http://docs.oracle.com/javase/tutorial/uiswing/start/index.html). It'll help you get a simple "Hello world" program up and running, and gradually introduce you to the various Swing components.
In number of files, yes - yes it is.
Hope you know you are comparing apples to oranges.
Apples &gt; Oranges
love gradle. It does in about 200 lines what we have setup in ant with thousands of lines.
Something being simple doesn't make it useless. If you need the contents of a file, and Scanner gives them to you, no need to write your own 10 line file reader to do the same. Writing your own File reader with the java api methods gives you more power though for when you need it. For the record, I use google's and apache's FileUtils for file reading.
Scanner is built on streams and is not a replacement or training wheels. There's no "vs". Scanner is a utility class for tokenizing the stream. Use it if that's what you want to do. If your needs exceed what Scanner lets you do, you can access the stream directly.
Are you looking in the right place? http://download.java.net/jdk8/docs/api/
CSV &gt; MongoDB
You can't. It would be contrary to the whole concept of an interface, and that is a guarantee of the method being implemented and available. Your assignment is either bad or you're interpreting the instructions incorrectly.
The GUI stuff is mostly there to be a way to display the core concepts that you're working on. That said, no matter what you learn for GUI development (Swing, JavaFX2, AWT) will be deprecated sooner or later. The thing is, you need to start somewhere and apply what you've learned to the latest and greatest technology that you're using at the time. If you learn Swing, you'll be learning Android UI at the same time. Are they the same? Nope. But the concepts learned are very portable.
&gt;EJB-like junk 2004 called, they want their rant back. FYI, EJB is now a very simple and cool technology.
If you're using different layout settings, then yeah, things'll have a habit of looking different under the different OSes, unless you're enforcing the Java-style look-and-feel. I wouldn't get too hung up on doing UIs in Java. Yeah, there are places out there that will use Java to make desktop apps, but tbh, if you're going the Java route, there's a decent chance of ending up in webdev. Yeah, can be useful to know enough about Swing, so you can create a desktop app when needed, and books will no doubt teach you the manual way of creating the forms... which is useful so you know what's going on if you do shortcut and use the tools. The main thing to learn is the basic workings. How forms are put together, what events look like, what attributes you have etc. A lot of learning programming is not remembering the specifics, but learning the specifics of one thing, so you can apply it to another thing. 
Actually, it'll work perfectly fine on a windows box if you've set up MySQL's environment variables up properly ;). Oh, and MySQL. 
Access is probably the most obtuse thing you could use. It's REALLY not designed for what you want to do. MS do have a fully-fledged database product... MS SQL, but really, if you're using an MS database with a Java app, you're kinda doing it wrong (unless there's real good reason to). MySQL is probably going to be the most-documented thing out there, but if you have issues installing MySQL (i.e. you need to install it at school and can't) you might want to look into using Apache Derby or H2 which can be used as embedded databases (no install required).
You are totally correct there. But you'd have a hard time getting Windows to accept that first line without something like Cygwin.
Me &gt; Effetto
Over the years we've improved it but it does't change the fact that it was awful and created by IBM. So stop apologizing. 
/whoosh
It takes care of all the Integer.parseInt stuff for you. Think of Scanner as the baby step before XML. You want to store stuff in a text document with some type of defined structure but don't need XML yet.
long startTime = System.nanoTime(); methodToTime(); long endTime = System.nanoTime(); usually does the trick..
I didn't know disruptor existed.. Seems interesting, I'll take a look at it, thanks!
Not sure if H2 can take the load I'm referring. U have any numbers from ur last try?
Have you tried any of the APIs listed here? http://stackoverflow.com/questions/316612/mp3-encoding-in-java
Does this release include the project lambda stuff or do you still need the separate download? 
I think the main language features you'll miss learning 1.4 instead of 1.5+ are generics and for-each style loops, both intended to make code more readable and bug resistant.
Because that has not been explained by the teacher nor the book. I have been thoroughly disappointed by the class. To clarify further, this class has solely covered JAVA in the context of GUI and since the first example has always listed both import javax.swing and the awt thing, but the book never really talks about why those are even there, I had to ask my teacher. I still don't know how you find out which components come from which, or if they are considered libraries.
Is println("") just a kludge because print("/n") is a thing? Nah, it's just a bit easier. There's a reason we don't write in machine code. THAT SAID, I never learned to use the scanner. I immediately learned how to use JOptionPane.showInputDialog(). Still use it when the function of a program isn't elaborate enough to require a full GUI.
Well I went through the steps of the video several times and it really didnt seem to do a thing. I did all the terminal steps and deleted the applet but it seems I'm still on Java 7...
Are events the right way to handle this? Why not during an update method?
Yeah, it's about as cool as having syphilis.
I would guess you are about halfway through the semester right now and they don't want to overburden you with layoutmanagers, glues, etc. So, coordinate based layouts probably appear to be the easier method of easing you in from the author's perspective. Based on the fact that you mention below you don't know why javax.swing and java.awt are imported I really have to question why you are learning about GUI programming at all. Is this your first Java course? I understand there is a desire to give students something prettier to look at than a terminal when they write a program this just seems asinine. If you have had a half a semester of programming experiences the material of the course in general is the disservice here. You should be learning about OO and recursion at that point. We did do a little bit of this right off the bat in our intro course but it was usually in the setting of the labs and not a major focus by any means. I can't wrap my head around using that book. The Java How to Program book from Deitel (same company) was really good IMO and still gave you a taste of Web and GUI programming in Java. 
JIT screws with timings. Be careful doing that.
I see this on my servers running a PHP website that shares its space with Java services. The memory use will normally sit at 2GB, then slowly creep up to 2.5GB or so and suddenly dump back down to 2GB. I'm not sure what causes it because I'm not overly interested until it affects my product, but it's still an annoyance. We also may have found that when my website is under a load it can bring down services that can't handle the load (but my code handles it like a champ!), and when that happens the Java code on the same box decides to go apeshit on the memory because it suddenly lost a service it depended on. We're still tracking that one down, but we think it has to do with Java losing its marbles for some reason.
Lambda builds: http://jdk8.java.net/lambda/ The compiler is extremely fragile and the API is still unstable. edit: The general build has Lambda API stuff too, but it's outdated vs this one.
&gt;If you need the contents of a file, and Scanner gives them to you, no need to write your own 10 line file reader to do the same. `Files.readAllBytes(Path)` and `Files.readAllLines(Path, Charset)` are much better for that.
You're spot on here. My previous experiments with CUDA have been rather underwhelming because this cost is so, so high.
Didn't see they typed the entire path in. Not quite sure why you'd bother doing that. "mysql -u root -p" usually gets the job done. 
It's a rough estimate, plus u can increase the sample size to get a better estimate and bypass JIT quirks..
It was awful indeed. Did I say it wasn't?
Thank you all!
It was a horrible initial learning curve but I don't mind it that much anymore.
Only if the test data is actually representative of the actual production data. Otherwise the JIT might make different optimizations.
Introduction To Java Programming
This article takes a look at the state-of-the-art advanced GC algorithms and important tuning options and compare them for diverse real-world scenarios.
Instead of the Ask.com toolbar, the installer will now require you to enter your credit card number.
This is exactly what I needed! Thank you! Guava is so powerful I didn't know it existed in there. 
the "JRE" is a subset of the JDK. Thus, if you use JDK 8, you get a version 8 JRE. There are still versions 7 of the JDK and you can download just the JRE part of it as well. 
Still no Elvis or short-circuit operator? Bah.
I actually did a lot of diggin and googling.. with examples on the web.. once you get hang of it, you start realizing it does a lot more than just building your project. The place where I work right now uses it as the official tool for project lifecycle management, so I am surrounded by examples and colleagues that know more than I do. There also these three books that may help a bit http://www.sonatype.com/Support/Books Maven By Example is a nice introduction.
Any link to JRE8?
No problem! If you end up using the Guava code I'd recommend keeping an eye on your garbage creation, it uses several iterators and other GC-unfriendly things inside. I benchmarked it at ~ 500 messages per 10ms (my default event processing budget), but after profiling and rewriting bits of it I've got it up to about 7000 messages in that same time frame (and no garbage produced)
First piece of advice: Start calling the language Java, and not JAVA.
I actually thought it was supposed to be all caps!
How do you "enforce the java-style look-and-feel"? Is there a way to guarantee that fonts will be the same size cross platform? Also the class I am taking ONLY focuses on GUI, so since I am learning the language in that context I would like to try and make the best of it.
If I was interested in Android application development, where would I start? I mean, is there any easy way for me to run my own applications on an Android phone is I won one, and is there a special way you have to compile?
Keep crying.
Huh? Explain.
Well, thought wrong ;)
There's also a java bundle for IPhone and Android so we'll be able to use a common JavaFX for many platforms. :)
Elvis operator is a terrible idea that encourages returning `null`. http://mail.openjdk.java.net/pipermail/coin-dev/2009-March/000047.html
&gt;The Java 8 javadocs are hosted locally for the time being because I don't know of an official, Oracle-hosted location for them. http://download.java.net/jdk8/docs/api/
This gave me several nerdgasms. The *only* thing that bugs me: I don't care whether it's -&gt; or =&gt;, but just the fact that C# and Java differ in this... gah.
How would you return blocks? An array? An Iterable? An Iterator? Or, since I just finished reading about Java 8, a Stream? EDID: I was blind, it's in the text - one String, with the blocks separated by spaces. Here's how I would do it: StringBuilder ret = new StringBuilder(); for(char c : string.toCharArray()) if(Character.isLetter(c)) { ret.append(c); if(ret.length()%5==0) ret.append(' '); } return ret.toString(); (typed by hand, so might contain syntax errors) EDID 2: string**.toCharArray()** EDID 3: And of course, that's also wrong - inserting the spaces into ret makes its length useless. You'll have to either run a separate length counter that doesn't increase with the spaces, or account for the spaces in ret's length
The JVM is a full-featured runtime, which makes it great for servers but makes it very dangerous in the browser. The sandbox execution model was supposed to prevent an applet from doing anything harmful to the user's machine, but as the latest crop of security issues show, any cracks in the sandbox can be exploited to really bad effect and making the user responsible for deciding trust levels given to remote code is a very bad idea. Javascript or even Flash, on the other hand, expose far less capabilities than the Java runtime, which make them far safer for the web. Whether Java and JavaFX can let you do *more* is less than important than the *safety* of the feature set. Less is more.
I'm ready to see `null` just gone altogether... It's like a contagious disease, especially the "crash if you use it" kind Java uses. I'd rather have a "do-nothing-return-itself" null like Objective-C. While we're at it, the ability to implicitly coerce Objects to booleans by their nullity would also be nice. Ooh, and the ability to define constants as "considered-null" for such coercions, such that for an object `o` and a considered-null constant `c`, `o == false` if `o == c`, so I could for example do @FalseConstant static String EMPTY = ""; boolean isValidUsername(String s) { if(s) return s.matches("\\w{4,16}"); else return false; } This example doesn't actually make much sense (the check is only useful if s == null, otherwise the regex would catch an empty string anyway), but it gets the point across. "Magic" enumeration constants are a typesafe, expressive, well-documentable, OO design pattern, and "Falsy" constants are a good application of them to solve the null problem.
Break the string parameter up into a char array, iterate over it, remove the characters you don't want, every five characters add a space and return it when your done.
If you continue reading the OP, the "blocks" are just groups of letters separated by spaces.
Depending on what you mean by "letter": public static void main(String[] args) { System.out.println(blockify("How are you? I'm Örjan, age 42!!!")); } private static String blockify(String input) { Scanner s = new Scanner(new StringReader(input)) .useDelimiter("[^a-zA-Z]*"); StringBuilder builder = new StringBuilder(); for(int i = 1; s.hasNext(); i++) { builder.append(s.next()); if(i % 5 == 0) { builder.append(" "); } } return builder.toString(); } I'm assuming this is not what you had in mind though, since it makes use of Java APIs that a typical homework wouldn't expect. :)
something along the lines of ... Sting s = input; char[] chars = input.toCharArray(); int length = chars.length; String output = ""; char ch; for( int i = 0; i &lt; length; i++ ){ ch = chars[i]; if ((ch &gt;= 'a' &amp;&amp; ch &lt;= 'z') || (ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z')) { if( (i+1) % 5 == 0 ) { output += " "; } output += ch; } } ... typed this in 2 mins so will have errors and logic will need checking but should be along right lines
I concede, this is the most sensible counter-argument I've heard. Thanks. I'm still drawn, though, by the allure of the following advantages of Java over JavaScript: - Modern, compiled, OO language - High performance JIT Virtual Machine - Cross-platform binaries which can be run over-the-web - Excellent existing code libraries - Potential for libraries targeted at browser experience to emerge (perhaps JavaFX based) Isn't there a level at which the JVM could be better sand-boxed?
I wonder whether I could solve it with two regexps, and I guess I could (first, remove anything which is not letter, second, replace five letters with the letters you've found plus a space). Since these regexps tend to be hard to read, I'd just love to see the face of the tutor... :)
What's wrong with returning null? Even your link says the operator proposal would be a boon for systems devs.
thanks everyone i got it done! i appreciate the input
It was pretty small scale for what I did - about 100k records. You can probably find some stats on how much H2 can scale online..
even if you only return null once, you have to check for it everywhere that calls that code or it can blow up later somewhere else completely unrelated, seemingly at random and with no stack trace. null: Not even once.
I realize this may seem like a trivial question, but would changing the stack size using commandline options be a useful means for trying to encourage this behavior in applications where (relatively) large amounts of data live for a relatively short time but consequently also need to die quickly? I've recently spent a significant amount of time trying to troubleshoot tenuring issues in an application I've been working with. I've managed to narrow it down to some legacy code that isn't exactly efficient, but it works and rewriting it isn't an option. The useful lifetime of the memory that those classes consume is very short. Currently the application is run using the default stack size, so reading this makes me wonder if it's a possible explanation for why junk data keeps making its way to the heap.
OPENJDK, MOTHERFUCKER, DO YOU BUILD IT?!
Sure, but the reality is there's a whole lot of Java code and libraries that force us to deal with nulls. And it's not going away anytime soon. Why not provide some shortcuts for the vast majority of Java coders who can't start from scratch?
From a purely technical standpoint, Java did and does have potential in the browser. In theory the browser is a really good distribution system for Java applications. In reality, I'd be reluctant to distribute a serious Java application through the browser. The browser vendors get the final say on what plugins can be used in their browser and they all have web based platforms that compete with Java. Personally I don't want to be in a position where a third party can break my distribution system of choice based on nothing more than a whim, especially when that third party has a vested interest in seeing the technology I'm using fail. That also plays into the potential for improving the Java Plugin. IMHO the entire plugin based runtime system would work a lot better if the browser was responsible for bootstrapping the runtime (ex: Java, Flex, etc.) and keeping it up to date. However, I don't think there's any incentive for the browser vendors to take on that responsibility since all it does is add value to a competing platform. Also, since it's very unlikely we'll ever see a Java plugin for mobile browsers (it'll be a miracle if we even get a JRE on iOS and Android), no one wants to invest in it (the plugin), probably not even Oracle. For all intents and purposes, the Java plugin is a dying technology. I think it's much more practical to use the native packaging features of each OS you're targeting to distribute Java applications. Take Windows as an example. If you could bundle a private JRE + your application in a ClickOnce installer, you get a few guarantees the browser can't provide. Mainly, Microsoft has a vested interest in making sure all ClickOnce installers work on newer versions of Windows and Microsoft can't break your distribution system since they also rely on it. Java in the browser is great in theory, but once you factor in the recent security issues, it's reputation, and the loss of control, it's too risky to rely on it as your only distribution mechanism. Just my 2 cents.
for entry level stuff, I find the Head First series to be pretty good - they generally have good principles in them and try to be interesting reading. Head First Java I haven't read or browsed through - but Head First Design Patterns is a pretty good book. If you don't like that stuff - reading over Code Complete would be another interesting thing. 
A little doubt: why call "capturing" and "non-capturing" lambdas if there is already a common term for that (closure)?
Effective Java (Second Edition) by Joushua Bloch This book taught me a lot, and I already knew Java quite well, might be a little more focused on java than you would like, but I think a lot of the principles apply to all languages.
and also dont exist in SE 6?
Make a simple game that uses data structures. Something like Raiden X (i.e. move something around the screen while dodging bullets and trying to shoot the attackers), or anything that could use interfaces/abstract classes/inheritance, loops of all sorts, sorting, recursion, etc. Basically the topics that you learned in intro and AP. I would also look into /r/learnprogramming, /r/dailyprogrammer, and /r/javahelp instead of this particular subreddit. 
Same as the tools for almost any other kind of project. Integration tools and Project Management tools. Defect/Issue/Feature Tracking: JIRA ($10/mo) CI: Jenkins Version Browser: Fisheye ($10/mo) Code Review: Crucible ($10/mo) Unit Testing: JUnit Java Decompiler: Never needed such a thing. Code analyzer: IntelliJ + commit hooks + build system does this. DB and Application server is app specific, but Tomcat is a perfectly good container for development unless there's a reason to use something else in development. Local Developer tools, pushed (scp) to a locally hosted VM IDE: IntelliJ ($100) Versioning: Git A lot of work, some money. Solid pipeline. (I would also add $99 for Wireframesketcher as a great wireframing tool, to sketch out interactive UIs)
A really good site to improve your algorithmic/data structure knowledge is top coder (http://community.topcoder.com/tc)
There's no absolute guarantee with fonts, best thing to do is leave a bit of room for your labels to expand, if they need to. Doesn't have to be masses of room, just enough for the font to be slightly different. [Here's some stuff about L&amp;F](http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html) Not sure if anyone in industry would bother to fully code a GUI in code, in reality it's a lot easier to use a visual tool, then tweak the code as needed. Knowing the code behind what the tool is doing is useful though, if something doesn't behave. Personally I wouldn't recommend learning Java through UI means - most courses start off with teaching console-only apps, then move onto doing UI. Reading the other comments and things, the course really doesn't sound great to me. Bit of a dead-end, but any coding experience will teach you stuff - just don't take every lesson to heart. 
Try doing this kind of deep analysis with dot net. Not likely. 
If your project is open source you'll get most of this on sourceforge out of the box. Version control, a web site, defect tracking, forums etc..
Yeah I don't know why the guy mentions a decompiler unless your project involves stealing someone elses code. 
 String myString = "teststring"; for (int i = 0; i &lt; myString.length(); i = i + 3) { String myLetter = myString.substring(i,i+1); System.out.print(myLetter + "\n"); } EDIT: Here is a more complete example
What do you mean by a "visual tool"? And I wish it had started off just teaching JAVA through the commandline, or even addressed it at all. That is the most disappointing aspect of the class.
Which is EOLed by Oracle.
 for (set up variables; test to continue running whats in braces; post brace code) { // Code in here } You can do what you like in the post brace code really!
convert string to char array then iterate through it is the simplest way to go
This is nice and should be expanded. The PrimeFaces component library already has a ton of built in themes but basic functional like this would be nice in the JSF framework.
Many IDEs have a drag and drop GUI builder.
Thanks for the link but the proper term is Java EE. J2EE refers to some legacy stuff and this tutorial is more current.
Really?? Which ones do for Java? I use Jgrasp currently.
NetBeans does.
I hear lots of people saying J2EE instead of JEE... it's just an acronym that people are used to. That said, I think this article is a nice tip of the iceberg intro blog, but "Securing J(2)EE Applications" is quite a bit larger than the 1 page blog.
How easy is Net Beans to install on Linux?
Always get mixed up by can you tell me the difference between J2EE, JEE,J2ME, J2SE ? I just know the ME is micro edition (very light for phones), SE is server edition.
Anything with the 2 is just an older version. They changed the naming convention. This is a little dated but I think it is still accurate http://www.differencebetween.com/difference-between-java-and-j2ee/ 
Wow! Thanks!
If it still uses Gridworld, try making a game using the API, like Tetris maybe. The test isn't really anything to stress out about, if you know arrays, ArrayLists, and basic OO design principles you'll be set. 
No CSRF check? No salted password?
Both J2EE and JEE are not the correct names. It's Java EE ;)
This is not really about securing Java EE applications in general, it's about securing using a GlassFish specific method. It also doesn't use any JAAS as the article claims. It uses the GlassFish JDBC login module, which does not need to use any JAAS (it may, but that's an internal implementation detail). Sigh... there's just so much misunderstanding about security in Java EE and people getting the terms and APIs wrong. Granted, they (Sun), didn't make it easy but still...
&gt;which is still used in major tech companies They should probably expend the effort to upgrade unless 'security' isn't a big interest to them. &gt;and schools to teach There's *definitely* no reason for a school to stick to an old version of Java.
Because existing bad code is no reason to complicate a language with poor features.
Couple of words of warning about this. First, event bus architecture is problematic. In such architectures the complexity comes from the interactions between modules (which are the ones creating and consuming events) and it's very hard to reason about those interactions. It can quickly become next to impossible to debug since the ordering of the events can change and the full code path between modules cannot be easily traced or read. Second, games typically use a tight loop for performance and timing reasons. This can be very hard to construct when using an event bus. The typical approach to solving your problem would be to have a game loop that in every iteration would first read input, then update the game state based on the input, and finally draw the next frame. I.e., you test the player's collision box with an environmental object, if there's a collision you check if that object is "interactive", if it is you do something (like set up a new environment for a new room if the object was a door).
The article is really skimpy on the details, but it is showing the standard method (in probably the worst way possible). This is called [form based authentication](http://docs.oracle.com/javaee/6/tutorial/doc/glxce.html). True to Java EE fashion, what is in the web.xml is standard and the JDBC realm details are specific to Glassfish and configured in a separate configuration file (sun-web.xml). The guy did bungle his terms, though. JAAS is an API while j_security_check is a convention. A confusing article altogether.
&gt;True to Java EE fashion, what is in the web.xml is standard and the JDBC realm details are specific to Glassfish and configured in a separate configuration file (sun-web.xml). The web.xml part is standard indeed, and the JDBC realm is not in this case. But, since Java EE 6 this can be done in a standard way as well via the JASPIC SPI. &gt;while j_security_check is a convention. I think j_security_check, just as 4 build in authentication methods (among which FORM) is defined in the Servlet spec. The problem I think in Java EE is that security is spread over so much different specs and that not every part is available everywhere. JACC and JASPIC e.g. are not available in the Web Profile let alone Tomcat. There potentially IS much available in Java EE security, but it should be ONE spec that's available for every profile. Perhaps a -lite version for the Web Profile, but that's about it.
I did it. Took two weeks but I finally fucking did. fuck you
Java EE really needs to just rip off spring security already. 
Not the list I'd go with... but whatever...
No, I was browsing the online HTML. See http://download.java.net/jdk8/docs/technotes/guides/collections/index.html. The heading in browser says Java SE 7. Also check API enhancements section
Indeed, and it looks like this kind of theming is designed to work together with what PrimeFaces does. Using those resource libraries you can package templates mostly and referenced images and CSS. Meaning, you can have a site with menu, header, footer, and then change that into something with the menu left, or the menu on top, no footer, or a footer with less insertion points etc. Those arrangements can be done in combination with giving PrimeFaces components (if the templates target these) a different look using the native PrimeFacing theming. 
It IS a stated goal of Java EE to standardize proven technology. If Spring Security works, then yes, why not?
Puzzling... is there any recorded reason why the artist chose a scared tiger?
That's the human nature. You know, my grandma named a road here in Budapest street "Andrássy", when in fact it was called street "Népköztársaság" for over 20 years then. Later, when the socialist regime collapsed, the name was changed back to "Andrássy". It was 23 years before, and sometimes I still call it "Népköztársaság" by accident. Once one is used to a name, one will hardly learn the new... JEE stands for Java EE - it's an abbreviation. When i18n first appeared, it has no track in the literature - today we use it almost exclusively... Similarly, very few if anybody says "I'm from United States of America". He'll say "I'm from the States" or "I'm from USA" instead (the former is perhaps more likely), while I've never heard that "the States" would be a name to be used officially...
Consider it a useful indicator of when someone entered the Java market. How they refer to it tells you a fair bit about their background. 
I believe NetBeans depends specifically on the Oracle JDK. 
That's what I'm saying. Spring security is excellent and Java EE really needs to do something about their abysmal security.
The javahome parameter should point to the jdk top directory, not the java binary.
Try changing `--javahome` to `$ sudo bash netbeans-7.3-linux.sh --javahome /usr/lib/jvm/java-7-openjdk-amd64` 
So what? First, it is written in the Character class how to handle them, second, there are still a lot of languages remaining within the basic multilingual plane and not covered by that if. Further, one shouldn't try to reinvent something which already has a standard solution, unless one has a very good reason. Character.isLetter is the standard way to check whether the given char (or int) is a letter or not. That if comes from the ancient times, and shouldn't be used ever. Even in the Estados Unidos, one might run into Spanish (or other) names using accented letters.
This looks like it could be useful, but it concerns me that they use the dollar sign as an identifier. Sure it is technically valid, but it is confusing, given the fact that $ is only normally used, by convention, for machine-generated code. Also, this eliminates the readability of code, requiring your reader to have at least an understanding of an outside API, one that is far from being industry standard. That obfuscation of intended purpose is a huge no-no to me. Code should be stupidly obvious. Can you tell me what List&lt;Integer&gt; list = $(5).toList(); means without knowledge of the API? This library would be so much better readability wise if they did something like: List&lt;Integer&gt; list = CreateList.fromRange(0,5); This isn't even clear enough in my opinion. It may sound like I'm being nitpicky, but if code is written plainly, it makes everyone's job so much easier. Code that looks cool is nice to impress someone with, but professional code needs to be comprehensible and less kludge-like.
I agree with you 100%. $ is also used as a function name by GQuery (basically a port of jQuery for GWT/Java), so it means that this code would be incompatible with [GwtQuery](https://code.google.com/p/gwtquery/) as well. (GQuery uses $ to match jQuery, and minimize the impedance mismatch I guess - seems more sensible than this library's use of it!)
I'd like to take credit for the root of the ideas in my post, but I can't do that. [This book](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) is beyond an amazing resource on clean code, and why it is not simply good practice, but utterly critical to the idea of functioning code.
They are not fully updated true, but the packages information is. For example, download.java.net/jdk8/docs/technotes/guides/collections/index.html http://download.java.net/jdk8/docs/api/java/lang/FunctionalInterface.html 
[Scala](http://scala-lang.org/) implicit conversions are a far better way of accomplishing this. In Scala, all arrays are implicitly collections, all strings are implicitly collections, and so on. None of this weird syntax or other such nonsense.
I agree! Nearly every paint point was addressed in the last Java EE releases, except for security. It's almost still at J2EE 1.4 level :( 
$(this).agrees() $(hell).no
Surely it should've set some alarm bells ringing when the first code comment they added on their [wiki page](https://bitbucket.org/adamldavis/dollar/wiki/Home) is "yes, $ is a valid Java identifier!" - doesn't exactly scream that it's going to be an intuitive experience.
There's a lot of really low quality stuff coming to this subreddit.
so.... your solution to the problem of having to learn an API's syntax for a few things is to transition to a language where you have to learn a new syntax for everything? 
I never disagreed with you. He will not get all letters. All I said was that casting a char to an int and ask isLetter will not help you deal with surrogates so he shouldn't loop over chars in the first place. Yes, his if-statement should generally not be used. But that goes for looping over chars too, unless you deal with surrogate pairs. For example, isLetter will return true for all the letters [here](http://www.fileformat.info/info/unicode/category/Lo/list.htm]. If you scroll down enough, you'll start seing letters with codes such as [U+10000](http://www.fileformat.info/info/unicode/char/10000/linear_b_syllable_b008_a.png). These will be encoded with 2 chars in Java. If you get a string with such a character and you loop over the chars in the string, you will at some point ask something along the lines of isLetter(0xD800) and get false (because surrogates aren't letters). However, the character you're checking, *together* with the *next* character may well be an actual letter. That was my only point, don't loop over chars unless you deal with surrogates.
No, the new language is my solution to the deficiencies of the old one. That it unifies collections seamlessly is just one of the benefits of switching.
This can be said about any API. Can you tell me what Normalizer.normalize("ffi", Normalizer.Form.NFC) //java.text does without knowledge of the API (and in this case the domain)? Can you tell me, without looking in the JavaDocs, if the following will throw an NPE new TreeMap().put(null, "a");
Clojure's `seq` model does this in a very elegant way: one of the (many) reasons I like programming in that language. 
That's fine, however your code below considers anything not within a-zA-Z to be a delimiter, including accented latin letters. It won't deal with the surrogates either IMHO. I'm not sure about using the Scanner, for me it seems that any sequence of English letters are returned as one string, and you add the space after five such sequences. But I'm just too lazy to give it a try, and I don't know Scanner that well, I never used it. Regexps are not my favorite pets either, I always have to test them thoroughly. It might be that the asterisk at the end results that one single character will be read by Scanner (zero piece of none English letters is a delimiter, and zero piece of none English letters will be found after each English letter for sure). I don't know how Scanner uses surrogates - will it return them as one single unit or not, I don't know. But even in this case, since Pattern knows the Unicode standard, instead of a-zA-Z I'd use those \p{whatever} notations. So my point is, don't try to use constants to find out the character classes, the Character class has methods or the regexp has notations for that purpose, and one better uses those. Their limitations (including surrogates) are clearly documented, and enough info is added to implement the necessary solutions properly.
I get your point. A counter argument would be that possibly for a library you're going to use everywhere, all the time (and who doesn't with collections) that having to learn one new "keyword" isn't so terrible. I think it's a bigger problem that the author named his class Dollar, which has nothing to do with the concept of collections. It's the name of your framework, sure, but don't name your class Dollar if it has nothing to do with US currency.
&gt; That's fine, however your code below considers anything not within a-zA-Z to be a delimiter, including accented latin letters. Yes? This is exactly why I wrote "depending on what you mean by letter" as my very first sentence in the response? To make it utterly clear that I know perfectly well that most letters will not be captured as such by my program. I even added a main method to display that I will not capture the swedish letter "Ö"! (I call it a swedish letter because I'm from sweden, not because I'm trying to own it. You seem itchy about things like this so I better clarify it.) &gt; It won't deal with the surrogates either IMHO Well, I don't have to because the scanner does that for me. I don't have to care about surrogates because I never loop over the *chars* in the string. If the string contains surrogates, it is up to the Scanner to handle them. &gt; I'm not sure about using the Scanner, for me it seems that any sequence of English letters are returned as one string[...] No, any *single* english letter will be returned as one string though. &gt; It might be that the asterisk at the end[...] Yes. &gt; I don't know how Scanner uses surrogates - will it return them as one single unit or not, I don't know. Scanner will deal with surrogates *internally*. What I get from the scanner when I call next, is the next *String* that matches the delimiter pattern. This is in contrast to getting the next *char*. A string containing the unicode letter 0x10000, will have 2 chars and so looping over the characters in the string will only give you 2 surrogate values, none of which are letters. If you instead let someone else do the looping for you, such as a Scanner, they will recognize that the 2 chars are surrogates and combine them into a letter. If that letter is not a delimiter in your scanner's pattern, it will add the letter to the string returned by next(). In short, the user of the Scanner will not have to deal with surrogates at all. They might have to deal with how to put letters outside the BMP inside the delimiter pattern though. (Such as by calling new StringBuilder().appendCodePoint(0x10000).) &gt; So my point is, don't try to use constants to find out the character classes, the Character class has methods or the regexp has notations for that purpose, and one better uses those. So basically, you don't like when people treat a-zA-Z as the only letters in the world? That's fine, I agree. &gt; Their limitations (including surrogates) are clearly documented, and enough info is added to implement the necessary solutions properly. No. Or rather. Ok! Please build a loop that deals properly with surrogate pairs, using nothing but the JavaDocs. It's a personal challenge so I don't expect you to post it to reddit! :) I just mean to point out that this is a hairy subject and the JavaDocs are anything but clear.
I agree about the learning curve. What made it difficult for me in the beginning was attempting to use it in RAD/m2eclipse from the start. Figuring out how to use it in the terminal/command prompt helped get my foot in the door. Using NetBeans to figure out how to use Maven with war or ear projects is what really helped. Once I knew how Maven SHOULD work with those type of projects, I was able to overcome the shoddiness of m2eclipse &amp; m2e-wtp. While there are still some annoyances with m2e/m2e-wtp and RAD 8.0 and even less with RAD 8.5, Maven development in Eclipse/RAD is getting easier. I still prefer NetBeans hands down for developing Maven projects.
&gt; In your first example the comment "//java.text" I wouldn't put that in actual code, it was a hint to you so that you would be able to locate the API I had in mind. Because, you know, a normalizer of what? I could of course have prefixed my code example with a proper import statement. My point wasn't that the given examples are bad APIs, my point is that if you don't know the API, it is hard to know what specific methods and objects do and don't do. You're original post was overly *general* in the criticism towards $ as a name. I agree that a name in *general* should describe what the named entity does. But when you're creating a broad builder for... stuff, it's hard to give it a proper name. Couple that with the need to type this often and you'll want the name short. Your own solution was a CreateList class with static methods on it. How would that translate for $("abc").repeat(3); Maybe CreateString.from("abc").take(3); or similar. But now you're API quickly becomes a bunch of non-chainable static methods and the way we repeat a pattern of strings and ints are in two separate APIs. (Also, classes called CreateList should probably be methods on some object, or a function in some namespace if the language allows.) Method chaining is a (very) poor mans DSL. It is currently the only way in Java to create something that could resemble a DSL. The starting "$" serves only as a "here starts dsl" marker. It should be noted that, in *general*, I agree with you. In this case though, all you really have to learn is that "$" is the way to start an expression in this new "language". I'd argue that CollectionExpression("abc").repeat(3) better explains what happens, but you would still need to understand the concept of a "CollectionExpression". In short, your answer seemed dogmatic rather than pragmatic.
In particular, in emacs, `M-x untabify` will convert an existing buffer w/ tabs. Also, you can `(setq-default indent-tabs-mode nil)` in your `.emacs` to suppress future inserts of TAB.
I would have liked to watch this..but the sound and quality is horrible...what the hell were they using to record this?
True, I didn't expect it to be fully updated as it is early access. I was just pointing out. Anyway, thanks for the link.
You've made a lot of assumptions about what I meant. I'm gonna see if I can write a library that accomplishes the same thing as Dollar without the problems I addressed. I'll edit on what I was able to do.
Peace is now restored on my computer. Many thanks to both of you.
If I have read things that aren't there, I appologies.
http://www.maxiaids.com/ProdImages/3024561.jpg
Yeah. It sucks for most of the video but still good content.
Is there any kind of reason to use this over Guava's collection APIs?
Short on time here, can anyone explain the advantages in using this instead of LWJGL/JOGL? Is this "3D" performance good enough for a game or just basic models?
I think he was just trying to find a subreddit with programmers where he could self-post. 
Yeah this is pure shit, pardon the phrasing. This is something I would expect out of a junior Java hire that google-bashed an application together.
I've used that java bindings for [OpenAL](http://jogamp.org/joal/www/) and really enjoyed it. My decision was mainly because I needed to do 3d positional audio though.
Why link to the mail archives? Something like this would be more helpful: **Tomcat 7.0.39 Released** The Apache Tomcat Project is proud to announce the release of version 7.0.39 of Apache Tomcat. This release contains a number of bug fixes and improvements compared to version 7.0.37. The notable changes include: * There have been multiple improvements in the bytes to/from characters conversion process. The core conversion process has been refactored to use the NIO APIs. This has resulted in a number of improvements including invalid UTF-8 byte sequences at the end of a series of bytes now trigger a conversion error rather than being silently swallowed. Errors detected in request URIs will be replaced with the replacement character (allowing the application to respond to the invalid URI as it wishes) and errors in request bodies will trigger an IOException. The use of the JVM provided UTF-8 decoder has been replaced by a better UTF-8 decoder derived from Apache Harmony. This improved decoder has earlier detection of error conditions and more closely follows the Unicode specification regarding the use of replacement characters. * The annotation scanning process now provides more information if the scan fails due to broken class dependencies. There is now enough information to identify the class(es) at fault. The JAR scanning process that supports annotation scanning has also seen multiple improvements and fixes including the exclusion by default of the Bootstrap class path from the scan. * Upgraded a number of Tomcat's dependencies including Commons Daemon to 1.0.14, Commons IO to 2.4 and Commons FileUpload to r1458500. A new dependency on Commons Codec was added to replace Tomcat's internal Base64 encoder/decoder. Full details of these changes, and all the other changes, are available in the [Tomcat 7 changelog](http://tomcat.apache.org/tomcat-7.0-doc/changelog.html).
The Java 8 audio API still has some encoding issues apparently.
I'm not seeing huge advantages over WebGL.
Try /r/javahelp for better help. Your problem is pretty simple, I'll point you in the right direction by asking two questions. Where and when is your paint method being called? How do you expect your paint method to be the method used by your JFrame to draw graphics? You may want to look how inheritance works with overriding methods. It's best to understand those ideas first before trying to use them and jump into graphics, so you know what's going on with your code.
I think the majority of 'java' games you see today are running in desktop applications(Minecraft) or mobile(Android). Java applets between security flaws &amp; not comparable to HTML5 capabilities I think applets are out of the question.
Yes the assignment which is not to be handed in because the majority of the class has no idea what they're doing, is to draw the enterprise using an arraylist of arraylists and paint. He just recently taught about objects, constructors and overloading methods but we haven't learned paint or inheritance which is why I don't know what to pass when I call paint. My teacher isn't using a book we are just taking notes from the powerpoints he uses. For the record, I'm in grade 12 and currently getting 98/99% in this course
He has his own company and has said he's a millionaire so he definitely is a programmer. I think he wants the class to figure it out by themselves before he explains it. When he said arraylist of arraylists he said an arraylists of sprites with an an inner arraylist of polygons. I think from that he means an arraylist of polygons with an inner arraylist of points because really the entire thing is just one sprite. Continuing with the program, I put extends JFrame but all that seemed to do was give me errors with public static void paint making me change it to and from static to no end. I don't understand what you mean by creating a MyJFrame and how that would be any different from a new JFrame. As well what do you mean by overriding the paint method? Could you post some code (preferably similar to the code I posted) that could help me? 
Creating a class, and having it extend JFrame (MyJFrame was an example of what you would call your new custom class), allows you to override the functionality of JFrame's predefined paint method, so you can place custom code in the paint method. JFrame's internals (which you don't need to worry about) can take care of calling the paint method when needed. You would then create an object based off of this new type of JFrame, MyJFrame (or whatever you called it), which is still a JFrame, but a JFrame that draws the Enterprise. You don't understand what I'm talking about because you don't understand creating classes and inheritance yet, and that's more than a post full of information I can give to you here. You should really pick up one of those highly rated beginner programming books in Java if you don't have any other resources to learn off of, sounds like what you need to do if he wants the class to learn how to program by themselves. I'd say the way of asking for help online by asking for code that you won't truly understand is more frustrating and time consuming for yourself (and others, people would be more willing to help if you didn't have "give me teh codes" type questions) than learning this the right way, especially if you are already in a class environment that is stepping through Java in a semi-formal way. This isn't meant to bash you, I know you are a beginner in learning programming and in asking for job, it just seems by the information you have given you are learning this pretty inefficiently despite being in a formal position to do so. Perhaps I am wrong though and you are one of the few that can learn best and fastest from tinkering with things slowly and picking up how things work by reverse engineering, but statistics say (from my head) that probably isn't so. Edit: Here's the code changes for your original post that should greatly push you in the right direction, but seriously, don't rely this way. Line 1:change to: public class EnterpriseJFrame extends JFrame { Line 38: change to: EnterpriseJFrame frame = new EnterpriseJFrame("arraylistExercise"); Insert line at beginning of the paint call, to call: super.paint(g) Now, of course, nothing will draw because you didn't construct any Polygon objects and stored them in your ArrayList, or anything like that... still far from a solution.
When changing line 1 to what you said, Eclipse wants me to rename my program to EnterpriseJFrame.java which i did to remove the error Changing line 38 says the constructor EnterpriseJFrame (String) is undefined Adding super.paint(g) didnt give any errors
actually, I'm close to getting it finished, I removed the "arraylist exercise" that was giving the undefined constructor issue. Some lines are being drawn on the frame now and I got an out of bounds exception because I haven't implemented negative integer handling yet (shifting over x and y co-ordinates) Thanks for the help so far
JOAL (OpenAL bindings for java) is the way to go. You get hardware accelerated, cross-platform audio with a really clean interface. LWJGL uses it for its audio engine and it works really good.
Finished it, the image looks very poor because I had to truncate the doubles to integers removing a lot of accuracy from the image. Thanks again
Current AP student here! Check out codingbat.com and watch java tutorials online. I do this and it constantly sparks new ideas to learn more about things I didn't even know existed and in turn help tremendously programming. Wrote programs for things in your life. Casual SSB tourney with friends? Write a program for that shit. Make a virtual grocery store; aisles,products,prices and make it all sortable. Do board games, yahtzee is a good one, and check out other web sites providing similar tests. I'm really glad you made this post. I can't wait to see the other replies(been looking for the same thing.) good luck getting your 5.
Best of luck with your homework question.
You could recap some of the information you've found by Googling that question, and ask us more specifically about the parts which you're having trouble with.
Sure of course. Having many differently libraries options is a good thing. 
Nothing wrong with WebGL but it will probably never be supported by IE. Maybe that's not so important but this is where most of the business users are out there.
First of all, Math functions that are trig related are done with radians not degrees, also if you do it with degrees, note that 720%6 = 0 so the lines would overlap and it would be the same as doing it with 360 instead. Ok, right now 'radius' is the radius of the circle surrounding the explosion that the lines start at, and 'cx' and 'cy' is the distance from the center of the explosion to the outside, where the lines end, if these are equal it's a circle but if you change them you could get an ellipse. Right now you just generate the start and end points of all the lines and then draw them, it's like a vector, just magnitude and direction but without starting location. You have to add the starting location to each point, right now that's implied to be +0 so it will start at the origin. Here's what you do: int shiftX = 100; //this is how far right you want to shift the center of the explosion int shiftY = 50; //and this is how far down g.drawLine((int)centerX+shiftX, (int)centerY+shiftY, (int)x+shiftX, (int)y+shiftY); //This adds the shifts to the appropriate axes. 
I don't know that might have done a better job!
The AudioSystem.getLine() function will give you a handle to a SourceDataLine -- you can use this SourceDataLine to write bytes directly to the output stream. So, if you really want that kind of low-level access, it's available. I started writing a few games which would procedurally generate sound effects, and it's definitely doable -- it's just tons of work to work this way. Assuming you just want to play music, and play some WAV files and stuff, I wouldn't recommend this approach, I just wanted to let you know it's available.
Okay, thanks for the Answer! I had tried something similar but with no results :)
No problem, code on!
JavaFX has a media package ([javafx.scene.media](http://docs.oracle.com/javafx/2/api/javafx/scene/media/package-summary.html)\) that has an AudioClip that I believe should work decently for low latency sound. I've never worked with the APIs though, but those are the "new" sound apis in Java.
&gt; to give visibility for other release
That makes sense, I was still thinking in the browser.
Where? I really, really want JavaFX on mobile, but AFAIK they're not releasing a JRE for either of the two you mentioned.
Mainly it comes down to preference. To do just about anything in dollar you just start with $(whatever). and then if you're using an IDE you can see the list of available methods. Whereas, in guava you first have to decide which class to use (Ints, Lists, Collections2, Iterables, etc.) Also, dollar has some things (random-iterators, date-ranges, etc.) that are not present in guava.
Exactly Java doesn't want to make the same mistakes as C#.
Er you'd get a stack trace. 
Interesting. As a non-java developer, I never want to use XML, easy or not.
Then use it as JSON :P
I've used the MediaPlayer class for the Android and it seems to be sufficient for what I need (i.e. play, loop, pause, resume, stop) and more importantly it takes in MP3s so the app size drops dramatically compared to WAV files. Some might argue about the extra cpu usage that decompressing the MP3 might cause, but theres always a size vs. speed tradeoff.
What's wrong with XML? And what would you use instead, and when?
Depending on your requirements, an XML-serialization lib like [XStream] (http://xstream.codehaus.org/) may also be a viable alternative.
I've done several applications where I have to parse HTML. First, I had to convert it to XHTML. Then I had to transverse the document and find the necessary information. If the document was malformed in any way (extra div or something), my app would just shit itself. There's just so many places it could go wrong and, most of the time, my code was just super bloated. 
You don't ask for explanations for good, acceptable uses for XML. You just bash it. People will tell you you can always replace it with JSON. Because with JSON you can do everything you do with XML, right?
But HTML is not XML. It is a very funny format with funny rules. XHTML, however, is always well-formed and thus well-defined.
*never*? Really? I mean, in the beginning, XML was touted as a silver bullet for everything that was wrong in IT... The hype even escaped the technical world, so even company CEOs were getting talked about XML and started **demanding** it on their systems (with horrible results in 90% of the cases)... But then the hype and misuse disappeared and the good, legit use remained. It is true that for many uses, JSON is a good replacement... But then when you get into the realms of strict document validation, cross references, element identification, document encryption/signing, namespaces, encoding, etc, and you need it standardised and cross-platform, XML is excellent. If you don't need all of that, XML is an overkill and you should go with JSON, but if you are working with data that will be shared across different systems and you need all that candy, you should stick to XML.
Valid point. I have never had an issue with XML. But XHTML the only real experience I have with XML parsing so pardon my mistake. 
I didn't say you bashed it! I actually agree with you.
So maybe if we turned the azimuth screw a little, we might get it to sound OK? Where's the azimuth screw on my iPad? :(
Is there any love for EMF in /r/java ? How many of you guys ever used EMF or at least know what is it for?
Yeah, sorry for that, I'm not a native english speaker ;)
I'm interested in this... Where's the tradeoff? Did you sacrifice something in an ungoogley way? Would you upload it github?
Actually, it's 89euro's + VAT for students. Not free.
2009? Really? Try https://sourceforge.net/projects/persism/
You can tell the 'age' of a person from the terminology they use :)
I just signed up via google and they logged me into someone else's account. It would seem that when using a google apps domain, they only care about the username and not the domain. **WHOOPS**
http://docs.oracle.com/javase/tutorial/i18n/TOC.html http://docs.oracle.com/javase/tutorial/i18n/ EDIT2: http://www.java2s.com/Questions_And_Answers/Swing/Internationalization/Internationalization.htm http://commons.apache.org/sandbox/commons-i18n/ http://code.google.com/p/gettext-commons/ http://stackoverflow.com/questions/579453/java-and-gnu-gettext-for-internationalization EDIT1: http://www.coderanch.com/t/479552/GUI/java/Dynamic-Internationalization-Creating-Multilingual-Application
There are many use-cases that people use XML for. Too many use-cases, actually, to the point where it gets used for things it shouldn't be used for. Some people use XML files for configuration files. This actually isn't too bad, as configuration is often not performance-heavy, and some people find XML easier to read than some alternatives. I even recently made some things that rely on XML configurations, making it a bit easier to handoff to some non-technical folks for making their own configs. However, for many configurations, I find property files, json, or even yaml to be lighter. With that said, I don't think the other use-cases that people use XML for are necessary. For example, object serialization. I've seen XML used for serializing/deserializing objects across the wire, and I've even seen cases where people store the serialized XML in a database as their "binary" format. XML serialization is really under-performant. Not only is it generally slow, but even the payload size is much larger than necessary. I don't have any links for you off the top of my head, but all of my research on this has driven me far away from XML. I can provide you with links if you need some references. Good alternatives to serialization formats (when performance is stressed) would be json, protobuf, thrift, avro, etc. As for the points you listed about XML, those are indeed some nice-to-haves, but even JSON does a fine job with most of those: * I've never had to rely on proprietary tools for any of my data formats. * JSON supports schemas, and there are many open-source libraries for this purpose. * JSON supports the XPath concept. Some libraries exist for this, but even just doing it with plain Javascript notation works fine, such as x['shelf']['books'][0]['author]. Other libraries out there make it similar to this, such as [this](https://code.google.com/p/json-path/) one for Java. * I'm not a fan of XSLT, but I will admit I've never really given it a fair chance, so I won't argue here. * Plenty of json libraries for using reflection just like jaxb. * DOM and SAX has generally given me more headaches than they were worth. * Json/Thrift/etc. have great third-party tools as well. I actually feel like I'm 10-15 years in the past when working with XML. Most of what I work on is high-traffic servers, so I often stress performance, and I will admit that is my main argument against XML. Short of that, XML is nice for configuration purposes, but I would prefer to stick with other formats for serialization (reflection or manual).
Additionally, if you're writing a program with a graphical interface and you're trying to support right-to-left languages (Hebrew, Arabic, &amp;c.) it's common to require that the UI be mirrored for the RTL locales - like so: https://www.ibm.com/developerworks/aix/library/au-internatlgtk/geditar.JPG I'm not sure what support there is for automating this in AWT or Swing, but GTK and Qt have been able to do this for a long time (as can be seen from the screenshot I found - I could dig up some even older ones, but those were from the dark ages where UTF-8 encoding for text wasn't necessarily the default).
Thanks a lot!
&gt;Location location = null; You never assign location or retrieve it from the LocationManager.
Yeah I had a feeling that might have been the problem, But Eclipse wants me to initialize location.
&gt;Yeah I had a feeling that might have been the problem, But Eclipse wants me to initialise location. Yea, it must be initialised in order to be used. But it must be assigned as well before you access it, otherwise you will get a NullPointerException. Either you initialise it via the location managers getLastReceivedLocation ( not 100% sure on the name) or you request a location update from the manager and user the Location object returned in the location listeners callback for your method.
Yes Thanks I initialized it LocationManager locationMana =(LocationManager)getSystemService(Context.LOCATION_SERVICE); Location location = locationMana.getLastKnownLocation(LocationManager.GPS_PROVIDER); but I am getting zero 0.0 on my server. I tested the server with other values (1,2,3...) it received them. But the location is comming up as 0.0 any idead? Thanks 
Sadly, they're not the only ones who do this... It's absolutely, mind boggling ***INSANE***
One advantage this hype had that many organizations and companies started developing XML libs and tooling (the so-called golden age of XML, that raged in the early 00-ties). If you look at the current situation, development on stuff like e.g. XSLT has nearly halted.
Maybe the poster intended sarcasm. SimpleORM presented itself in 2009 as THE Hibernate killer. And then we never heard from it again.
Oops, seem's like someone didn't even debug this before posting.. 
getLastKnownLocation doesn't always return a location, it can return null if the GPS provider isn't active or if it doesn't have, you guessed, a last known location. If you want to get your real location from the GPS provider or the network provider, you need to request location updates and implement onLocationChanged. You should put the code to send the location to your server in onLocationChanged. You should read this http://developer.android.com/training/basics/location/currentlocation.html
Ah, it's 30 minutes into April Fools, and this is what you post?
If you are using the emulator remember to set the location in the emulator control. I haven't done this myself but this link should give show you how: http://www.vogella.com/articles/AndroidLocationAPI/article.html#locationapi_geoposition
Caps for final **constants** (set in declaration line). No caps for final **variables** (set elsewhere. constructor, etc.).
If you're looking into extending it to feature more languages than just one or two, use **switch**, **case**, and **default**.
You started the pedantic shit, not me. Message strings would be good things to be constants so having the names be uppercased is a good thing. Yes, the poster didn't declare them as final which is a problem, but making them uppercase was appropriate. 
Since this has come up, I read an [article](http://hackingdistributed.com/2013/01/29/mongo-ft/) that talks about how MongoDB is broken. There was a reply from 10gen about it and the professor again holed their reply. If MongoDB is this broken, does not guarantee ACID properties but only eventual consistency (people querying at the same time may find different data results), why is it even used?
Just a note: [LWJGL](http://www.lwjgl.org/) is not affiliated with JOAL/JOGL (part of [JogAmp](http://jogamp.org/)). They are two different OpenGL wrappers.
&gt; If you look at the current situation, development on stuff like e.g. XSLT has nearly halted. Yes, that really is a shame. I could imagine lots of interesting features for XSL 3.0
Yes, there *are* tools for JSON. But they're third-party libraries that will fade in a couple of years. XML is standardised by w3c. My XSL files will still work in 10 years... But as you said, XML isn't the right tool for every job. E.g. my data / transformers don't always need to work in 10 years And yes. Performance is a valid argument against XML.
Instead: http://persism.sourceforge.net/main.php
Eventual consistency is a legit tradeoff. I think the argument goes further than that.
Oh yes it does. Tons of API methods discussed as well. Eventual consistency argument was something I read on another topic. If there isnt any consistency, why would somebody even want to use it.
Yes but lots of production systems are eventual consistency. Amazon S3 for example. Something being EC is not really a knock against it. A lot of the arguments against Mongo center around the various ways that data can be lost which are violations of the contracts the API seems to adhere to.
Indeed, at least the standardization of streaming operations would be nice.
The fix is in most cases relatively simple. You just need to look at the account ID that Google sends instead of the user name.
cool thanks :)
Is this a homework question? Didn't think schools would be the far sighted. Either way, I believe the answer boils down to state.
Any input on the "experts" out there on the usefulness of this list?
As far as I'm concerned, Effective Java and Java Concurrency in Practice (not listed) are the only must have Java books. 
Clojure is an amazing hosted language that can sit on the JVM, .Net, or even JavaScript. ClojureScript is worth taking a look at if you want write simple programs and properly use state ^.^ on a JS compiler.
If the site's using strikethough in the usual manner, then the idea's either been ditched or implemented - and seeing as it's not the latter, I assume they've concluded the obvious drawbacks outweigh the benefits. http://openjdk.java.net/jeps/0
I assumed it was because it was created on 4/1/2012 (i.e. last year's april fools)
/whoosh
Ah ok, I only check the last modified date, plus I'm not on the lookout for them any more as I'm now in a safe time - time zones really mess up posts of April Fools day stuff!
Java Performance should be the 3rd. 
Look at Resource Bundles. You want to set up different files, one for each language to act as different "dictionaries" for looking up terms. Load the appropriate bundle for the language during application/process initialization, and then just pull the terms you need from there. You should be able to say like final Locale locale = //determine the locale; get from system; determine from string; something; final ResourceBundle bundle = ResourceBundle.getBundle("myBundleName", locale); final String optionsText = bundle.get("options"); And it will pull the given lookup value for the key "options", each file having a different, appropriate translation. You want a set of files something like 'translations.properties' 'translations_es.properties' 'translations_ru.properties' 'translations_zh_CN.properties' Java will recognize that the files are the same name except for the Locale indicators. When you load the bundle by name, you specify the locale, and it will load the proper one. Additionally, the file without a locale can act as a default or fallback, in the event that you ask for a Locale who's file doesn't exist, or if you ask to look up a key in the russian bundle, and it doesn't exist, it will fall through to the default bundle and look for the key there, and use it if it exists. You could probably still use your GameOptions class (or better yet, class solely dedicated to JUST holding the text values), and then, in the constructor or some kind of "reload" method, pass a locale to then get the ResourceBundle, or a ResourceBundle object itself. Then you go and set all of the GameOptions member variables with the translations pulled from the bundle. Since all of your code is simply calling gameOptions.getTheTextIwant(), then you don't have to worry about figuring out the translation anywhere except for in a central place. Keep in mind that with different language come different lengths of text. To say something in Chinese, for example, takes a different character length than something in, say, french. This might have UI implications as result of text overflowing the box it's supposed to fit in, etc.
You probably have to add permissions to your java.policy file. Check your old %java_home%/jre/lib/security/java.policy file see if there are any extra permissions after the line: permission java.util.PropertyPermission "java.vm.name", "read"; If so copy them and paste them in your new java.policy file.
JEP 155: Remove Brian Goetz
You would need to write a JNI wrapper around the windows native libraries. [here](http://www.dimitrijwulf.de/2012/04/windows-management-instrumentation-wmi-via-java/) is an example usage of the WMI with JNI (don't you love acronyms). [Here](http://msdn.microsoft.com/en-us/library/aa394146.aspx) is an example class for a fan.
If your fans are running full out all the time, your case is probably too hot. Give it a good vacuuming before trying to force the fans to slow down. After that, controlling the fans will be OS specific. There definitely isn't a "standard" Java API for it the way there is for sound or network IO, but you could probably find a way to call into the right hooks for whatever OS you're using. On Linux for instance you could write Java code to modify /etc/fancontrol and then execute /usr/bin/fancontrol.
It depends on how your fans are powered. If they are plugged into a motherboard header, they may be able to be controlled but it depends on the model. I would look at whether or not you can actually control them at all before looking at ways of doing it in java. Try out [speedfan](http://www.almico.com/speedfan.php) and see if you can do anything.
My temps are fine i think, it's just the chassis fans that i want to control. I've set them to silent in the BIOS but they still run at about 1700 rpm (give or take) if connected to the mobo. Awesome! I think i might have to do a bit more research into how the OS's work i guess. I use all 3 platforms (Windows, OSX and Ubuntu) so i'll start with windows since it's what's most common. Thanks heaps! =D
Yeah the motherboard header fans are the ones i'm thinking of. I tried out speedfan and it gave me really weird readings so i uninstalled. However, i think it's more of an excuse to experiment with java a little bit. =D
Just a quick one from my memory: As far as I remember, modbus ASCII uses 8bits (1 byte) per character. So, it should be perfectly fine to send the 52hex via the modbus protocol. Your theory has a flaw: ASCII "R" = 52hex = 01010010bin but you don't actually need to look at that information. Just send the "R" over because "R" is already a byte. You don't need 2 bytes for that. The Modbus link will accept the "R" without any problems. In your example, sending the characters @ 0 R 1 will be perfectly acceptable. The LRC needs only to account for the ASCII value of 52.
The specifications are very good. The C# specifications are also a good read if you want to know more about C#. They are both surprisingly readable.
Show us some code?
It uses 2 bytes per character. "Each byte composing a [character?] is represented using 2 ASCII characters (2 times 8 bits)" translated from french
What particular device are you interfacing with Modbus? I have had numerous implementations of Modbus with various different vendors and actually have never come across such a setting. All we had to do, if there were 2 byte commands was to NULL (00) the first (or second) byte.
&gt; 00 00 00 31 Shouldn't that be `30 30 30 31`? And for the conversion, wouldn't the following suffice (untested)? private static final byte[] HEX_SYMBOLS = { 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46 } byte[] convertAsciiCharToHex(char asciiChar) { bytes = new byte[2]; // Assuming bytes[0] will be sent first bytes[0] = HEX_SYMBOLS[(asciiChar &amp; 0xF0) &gt;&gt; 4]; bytes[1] = HEX_SYMBOLS[ asciiChar &amp; 0x0F]; return bytes; } 
It's an automatic feeder machine for agriculture (cow feeder). And you are right I would need to null the first or second byte but it entirely depends on the command. For example 'R' in ascii is actually 52 in Hex which means there are 2 bytes, '5' and '2'. So there won't always be a null byte and I need to account for the non-null bytes.
Do you have some modbus related documents? Preferrably in english or german. Still, to me it seems strange that it should be necessary to code the ASCII into 2 hex bytes.
Don't ask on Reddit, call the test center - they will give you an authoritative answer.
Check out j-interop which is a pure java WMI implementation.
I don't have any printable documents. Most of what I have is written by hand and is specific to the machine. Here's a concrete example: RECIPE READ Request TO machine @ 0 R XXXX XX CR (10 bytes) 1-9999 LRC Response FROM machine @ 0 R XXXX &lt;---130bytes---&gt; XX CR (140 bytes) 1-9999 Data LRC Also, are you saying that if I send the line as a string "@ 0 R 1 12 [CR]" where CR is the actual char for Carriage Return, the machine should be able to tell that 1 is the data (which should be 4 digits) and 12 is the LRC, etc?
Thank you
From what you sent, I would say that the command to read something should be: [@][0][R] followed by 4 bytes (ranging 0 to 9 each), then the LRC and only a CR (no LF) That would equal to 10 bytes frame. When receiving, the machine will send the same sequence above, just it will put the coded data (whatever that is) in a 130 byte block after the header. I would say that it should be safe to try sending the sequence just as plain, single byte ASCII as @0R&lt;4 digit recipe number&gt;&lt;LRC&gt;&lt;CR&gt; Don't really think that any special encoding should be necessary. Edit: Modbus is a very basic protocol. Usually there is no complicated coding required. It only gets a bit difficult when floating point numbers are involved as the basic Modbus protocol can only handle integers.
Alright I'll try it that way. You are also saying that LRC should be 2 digits still though. or does it not matter if I put it in one byte or two bytes or a nullbyte with one byte?
That's quite a difficult question to answer without knowing the LRC algorithm and the byte-order of your specific modbus implementation. If the LRC is calculated to be somewhere in the range between 0 and 65535 (0..FFFF hex) than it should be safe to null one byte if the LRC is less than 255 (FF hex). The only problem there is whether the byte-order is low-byte -&gt; high-byte (little endian) or high-byte -&gt; low byte (big endian). What I would recommend is to try one way (I would try little endian first) and see if you get a return, if not it's the other way round. Then you have to swap the high-and low bytes.
Found something that could possibly help: [modbus.org](http://www.modbus.org) And a document specifying the modbus link (generic): [Modbus protocol specifications pdf](http://modbus.org/docs/Modbus_Application_Protocol_V1_1b3.pdf) From there, it seems that the LRC is in LOW-byte, HIGH-byte (little Endian) order
After having read that document, I have to admit that I was wrong. You were right with the encoding of each character in two bytes. So, your original assumption was right to code the "R" as hex 5 and hex 2. Sorry for the lengthy discussion.
I know I need to do that but I need help figuring out how to make a loop that does that.
You need a basic for loop here that runs for the length of your wordlist. When you reach a condition you need to handle you can then use break to move on to the next word. 
YMMV, but I only needed to show one when I actually got to the test center. I had a credit card and my passport with me just in case.
You could modify your condition to support a count increase: for(...) { ... int cmp = word.compareTo(str); if(cmp &lt; 0) { wordList.add(i, word); count.add(i, 1); return; } else if(cmp == 0) { count.set(i, count.get(i)+1); return; } // else continue the loop } wordList.add(word); count.add(1); EDIT: Added missing return.
ah... i looked around for a phone number but couldn't find one. i'll try again.
Post your code?
Wait I found where I went wrong, thank you for all your help! :D
You're a life saver, any way I could repay you? haha
Upvotes are all I ever need.
If you haven't yet, look into the details of your motherboard/PC model. Often there is a tool already out there that will do this. For example most Dell laptops have a simple 3rd party app that does this and has been around for years. If your machine or motherboard are popular there is a chance either the vendor or someone else has already written this library. That said, as many have noted. If you can do this at all is a big maybe. There are very few standards to how OEMs setup and provide for case cooling so it is never certain that your particular system can actually control its fans from software. 
&gt; But then when you get into the realms of strict document validation, cross references, element identification, document encryption/signing, namespaces, encoding, etc, and you need it standardised and cross-platform, XML is excellent. No it really isn't. At that point it becomes completely impossible to work with manually, which defeats its whole point and you should be looking into something better suited for the task than XML (which isn't JSON either).
&gt;If your fans are running full out all the time, your case is probably too hot. Or your fan is plugged into the power supply instead of the motherboard.
Wow, look at that. Even the option to buy from Amazon.com! Edit: by the way, I thumbed through and read particular sections of the book you mentioned. I've been itching for an up-to-date text, thanks for reminding us to look in the most obvious place :P
Are you really comparing a specification to a book like *CLR via C#*? I mean, I could compare the C# specification to *CLR via C#* but it doesn't make sense...
awesome, thanks.
thanks for the advice. reddit is blocked at work so I will attempt this fix tomorrow! I'll post a update once I can check. Much appreciated
Ah... That part about serialver reserving numeric ranges seemed to contradict everything I knew about it... Good thing it was an April fools day joke. There is no way java would ever make this move. The crappy mutable date methods have been deprecated for years but they still exist - the serialization mechanisms wouldn't be removed without some serious deprecation warnings. 
The latest round of Java 7 updates have introduced new security features in the Java Control Panel (found inside windows control panel). You need to then go to the Security Tab and lower the "security level" or disable it. Be Aware: The new security features are in place for good reason. Java Applets have been the source of all recent Java exploits/vulnerabilities. Even an existing applet may be modified maliciously. If you are going to reduce or disable the Java security level, I highly suggest only being on your company's intranet (internal network) with that machine. Simply visiting a page that has a malicious applet will trigger it to inject malware onto your machine and worse. I'm not joking around here. Java is a full fledged programming language and it can do very powerful things, both good and bad. It has no place being in a web browser. Be careful.
Also, you can use the Collections import to sort It with one method. If you're comfortable not knowing the other algorithm.
Thank you! Makes so much more sense now! 
What happened to Java SE 7 Update 19?
Sometimes they skip numbers, however u17 is the current update so this is just a warning that starting with u21 this is going to happen.
There are lots of places you can get a personal certificate for less than $100 per year. Start here: http://stackoverflow.com/questions/155241/cheapest-java-code-signing-certificate-not-self-signed?lq=1
Haha, I actually went through the document and was wondering the same thing. I was a bit confused. But, thank you for the insight. Every piece of information I can get is a step in the right direction for me, so no apology needed =)
That's still pretty expensive for someone just wanting to experiment with the language. Is it possible to create "dummy" certificates for testing purposes?
So much for the Java security model&amp;hellip; That's really sad. I miss being able to rely on it. I guess making it rock-solid isn't one of Oracle's priorities, so they're just throwing up their hands and giving up on it, pretty much.
They have had a policy of using odd numbers for security releases, thus skipping even releases when they were forced to do out-of-cycle emergency security updates. This time, they are about to skip two even releases and one odd release, which is more surprising. Perhaps they keep an odd number aside in case they need to do an emergency release in the next two weeks.
It is quite solid, but under the continuous assault of many bright crackers. They also do not say that unsigned applets will not work, but that it is better for the user experience to offer a signed applet. I guess they are going to do like Chrome and Firefox, and make unsigned-applets approval a complicated three-steps process.
&gt; Is it possible to create "dummy" certificates for testing purposes? Yes. It's not too hard to create your own Certificate Authority, and add its root certificate in your browser and/or Java cert store. After that, you can issue whatever you want, it will be accepted on your machine.
Um, some of the recent vulnerabilities are in APIs that applets should not even have access to. I find it difficult to believe that Oracle even gives a shit about the Java security model.
Thx for the heads up
Why don't see why not, as long as you are able to compile a JVM with the available set of APIs. Another possibility would be to use a Java native compiler. Personally coming from a stronger type languages background (Pascal family) I do bash C and C++ a bit due to their weak typing for strings and arrays, although I am aware that with _warnings as errors_ and static analyzers, the code can be made quite safe. On the other hand this means the C and C++ community have to resort to tools for features other languages have as part of their definition. Quite funny when they joke about Java being a tool only language. 
I'm not a fan of this exercise. Using `ArrayList` like this is just *wrong* when a good `Map&lt;String,Integer&gt;` would accomplish the same with much less work. Also: Making the static types of your objects class types rather than interface types? You risk picking up a lot of bad habits if the rest of the text you're learning from is this bad, I'm afraid.
&gt; Um, some of the recent vulnerabilities are in APIs that applets should not even have access to. In those cases, the vulnerabilities *were* that the applets could manage to get access to those unaccessible APIs. And those vulnerabilities were absolutely not trivial to discover, a combination of many small pieces patiently found and assembled. As I said, bright crackers at work. (Have you researched how they worked? Pretty impressive stuff.) &gt; I find it difficult to believe that Oracle even gives a shit about the Java security model. I find it difficult to understand your disbelief. Java security (especially the Java security model) is very important for their corporate customers.
&gt;Java security (especially the Java security model) is very important for their corporate customers. Why? Intranet applications are all on a secure network, signed, and served from a trusted, authenticated host.
Thanks for the answer. I work on Windows, and the only CSDI application I use is Microsoft Office. CSDI has its uses, but it should not be the default for a Java neophyte. 
MDI is (thankfully) not used much any more either. Tabs has conquered that domain, and applications for which tabs aren't a good fit have generally gone to one-window-per-document applications. See for example Adobe Reader and LibreOffice. 
Part of the reason why people hate Gimp so much on Windows is that the OS doesn't come with a good virtual desktops implementation. If one installs something like VirtuaWin and then puts all the Gimp windows on one virtual desktop, it's a lot less painful to use.
By my understanding OS X has a different windowing metaphor (is this the right term?) than Windows. It is my understanding that on Windows a process usually has 1 window and each window (tabbed interfaces not withstanding) is expected to correspond to 1 document. On OS X, there is 1 process for a given program at a time and 1 process can have multiple windows each of which corresponds to 1 document. This is why the menu bar is at the top of the screen instead of the top of each window and closing the last window usually doesn't exit the program.
Those aren't actually that different. In each case, there is a 1:1 relationship between documents and windows. Also, some OS X applications do terminate when the last window closes. Windows applications that have a window per document may still have all of those windows managed by a single process. My employer's flagship product is like this: it *looks* like multiple processes, in that double-clicking a save file in Explorer opens another main window, but it's actually one process.
I'm using LabView at the moment. It uses multible windows.
Title: Name your class: Title.java. The differences from program 5 version of Title.java: •The authors are no longer an ArrayList. Instead, the authors will be a singly linked list. The authors will be put in the list in the order in which they are added; i.e., each new author will go at the end of the linked list. •The Title class will implement the java.lang.Comparable interface. And here is the text given for Title from program 5: Constructors: •A constructor that takes a single argument, a String, that is the title of the book. •A second constructor that takes two arguments: a String that is the title of the book and an ArrayList of String that contains the authors. Methods: •set and get methods for the title. The get method for the title returns a String. •get method for the authors that returns an ArrayList containing String’s. •addAuthor: will take a String and return a void. This author is added to the end of the current list of authors for the book. The method should verify that the author is not already in the list of authors. If the author is already present in the list of authors, then the method simply returns. Each author of a book should appear exactly once. •toString: will return a String that has the title of the book, followed on separate lines by each of the authors. The title is preceded by the phrase “Title: ” — note there is one space after the colon. Each author name is indented three spaces. •equals: Takes an Object. The object will be a String, but is declared as an Object. The method will test whether the argument is, or is not, the same as the title of the book. Note: the authors are not part of this comparison. •compareTo: Takes a Title argument. Returns the result of the compareTo method of String applied to the titles (not the authors). SingleLinkedList: Name your class: SingleLinkedList.java. This class will create a singly-linked list of a generic type. This class will be used to create the linked list of title’s. It will also be used to create the linked list of authors for each title. The linked list is to be of the type described in class, that always has an empty (sometimes called “dummy”) node at the end of the list. The class will implement java.util.Iterator. This will be covered in section this week (3/27 and 3/28). Constructor: The constructor will take no arguments. It will construct an empty list; i.e., one that consists solely of the empty node that will mark the end of the list. find: Will return a reference to the requested element, if the element is present in the linked list. The method returns null if the element is not present in the linked list. insertInOrder: Will put the specified element into the linked list. The element will be placed in the linked list in alphabetical order. The method returns a void. add: Will put the specified element at the end of the list. The method returns a void. remove: Will look for the item in the linked list. If the item is present in the list, remove it. Returns true if the item was found and removed. Returns false if the item was not present in the list. LinkNode: Name your class: LinkNode.java. This class is used in creating the linked list. It will need a data and next field, as described in class (and in the textbook). The data field will be a generic type. This allows the class to be used in creating linked lists for titles and for authors. SingleLinkedListIterator: Name your class: SingleLinkedListIterator.java. This class will implement the java.util.Iterator interface. This will allow the use of enhanced for loops to walk through the elements of a linked list (of titles or authors). Constructor: Takes a LinkNode and uses that to be the first element that the iterator will return. hasNext: Returns a boolean. Will be true if there is another element in the list. Will be false if the last element in the list has already been returned. next: Returns the next element in the list. If the list is empty, the method will throw a NoSuchElementException. remove: We will not need this method for this assignment. The method does need to exist when we implement this interface. Therefore, the method will simply throw an UnsupportedOperationException.
Current code for Title.java import java.lang.Comparable; public class Title implements Comparable&lt;Title&gt; { private String title; private SingleLinkedList&lt;String&gt; authors; public Title(String newTitle) { title = newTitle; authors = new SingleLinkedList&lt;String&gt;(); } public Title(String newTitle, SingleLinkedList&lt;String&gt; newAuthors) { title = newTitle; //code to copy authors over from newAuthors to authors } public void setTitle(String newTitle) { title = newTitle; } public String getTitle() { return this.title; } public void addAuthor(String newAuthor) { //code to add author to the end } public SingleLinkedList&lt;String&gt; getAuthors() { return authors; } public String toString() { String toStringResult = ""; toStringResult += "Title: " + this.title + "\n"; do{ toStringResult += " " + this.authors.next() + "\n"; }while(this.authors.hasNext()); return toStringResult; } public int compareTo(Title compareToThis) { int compareResult = this.compareTo(compareToThis); return compareResult; } } 
Current code for CurrentLinkedListItterator.java public class SingleLinkedListIterator&lt;E&gt; implements Iterator&lt;E&gt; { private LinkNode&lt;E&gt; nextItem; public SingleLinkedListIterator( LinkNode&lt;E&gt; start ); { nextItem = start; } public boolean hasNext() { boolean hasNext = false; if(//something that shows next) hasNext = true; return hasNext; } public E next() { if ( some condition that is bad ) throw new NoSuchElementException(); } // next public void remove() { throw new UnsupportedOperationException(); } // remove method }
 I know this is quite a lot but if you need more then please let me know. Any help or explanation of what I'm doing wrong or where you would suggest I go from where I am would be appreciated.
This can only help to improve cross-team communication in the future.
Ah sarcasm! I could argue that communication solely through valid tests that fail might be easier than dealing with the defensive jackass I'm currently having to deal with. 
On one hand, that's clever. On the other hand, passive aggressive stuff like this is not going to make you popular.
keep us updated. /popcorn
I'll give you a quick tip here: You want those fields to be public, or else your LinkedList class won't be able to access them.
[\*also fetches popcorn\*](http://i.imgur.com/DAAK2VV.gif)
Sorry, not much of a show.
Didn't know that even existed! Thanks!
Commons-DBCP sucks, and c3p0 sucks. The tomcat JDBC pool or BoneCP are both modern options. http://jolbox.com/ 
&gt; It is my understanding that on Windows a process usually has 1 window and each window (tabbed interfaces not withstanding) is expected to correspond to 1 document. Your understanding is generally correct. &gt; On OS X, there is 1 process for a given program at a time and 1 process can have multiple windows each of which corresponds to 1 document. Ok. Maybe all of these Java neophytes run OS X.
absolutely
But this just part 1 of 3,578,432, right?
Or make an accessor, if you'd prefer. 
sounds like OP isn't really welcomed with open arms to begin with, what with the accusations and avoidance of responsibility etc. 
I've found that being a smart ass about things rarely helps. 
Eh? I'm the team lead. I was backing up one of our newer engineers who volunteered to the do the work (on another team's service). She was worried and being accused of breaking their crappy code. Also worried because she was on day 3 of what should have been a few hour change. When I approached them with the facts and suggested they needed to help resolve the failing tests they balked. I wrote the test to demonstrate the problem. 
The standard way of doing this is to [use .properties-files](http://docs.oracle.com/javase/tutorial/i18n/resbundle/propfile.html) ([example](http://www.irt.org/articles/js179/)). One thing to keep in mind (which unfortunately the linked resources fail to mention) is that you (unfortunately) need to escape "special" characters (umlauts, cyrillic, ...) in properties-files via \uXXXX (with XXXX being the unicode sequence for that character). Using the class java.util.Properties to write these files takes care of that. Obviously that's not ideal,, so in newer versions of java properties can be stored in XML-files - check the [JavaDoc for java.util.Properties] (http://docs.oracle.com/javase/6/docs/api/java/util/Properties.html). (...and Android does it yet another way, but that's probably not relevant for you...) 
We ran into the same problem at one point - WAITING for borrowObject() with everything locked up. The problem? Someone was expecting the GC to handle closing their connections and returning them to the pool. You need to call Connection.close() EVERY TIME. (Hint: try { /* stuff */ } finally { conn.close() }) To find this resolution, we added a small patch onto Commons-DBCP where the abandoned connection tracking was updated such that we could view the contents of the array through our admin panel. From there, it was painfully obvious where the bug could be found. That said, I'll certainly look deeper into the alternatives... just in case.
the grass is rarely greener... unless it's made of money and stock options!
&gt; Modern, compiled, OO language Yes, I also see Java being "proper OO" and having less "bad parts" as an advantage, but Java the language also has disadvantages: high(er) barrier to entry, lots of boilerplate code, no closures (yet), etc. &gt; High performance JIT Virtual Machine Not sure if Java really has an edge over modern JavaScript engines in perceived performance. Also, Java has quite some overhead with the whole JVM and standard libraries - starting Java Applets tends to take some time. &gt; Cross-platform binaries which can be run over-the-web Doesn't seem like much of an advantage over JavaScript. &gt; Excellent existing code libraries There are lots of excellent JavaScript libraries, too. (and JavaScript's dynamic nature enables them to do *really* nice things) &gt; Potential for libraries targeted at browser experience to emerge (perhaps JavaFX based) Not sure what you mean... Maybe the most important advantage JavaScript's has is that it's "native" to the browser (DOM access!) - Java has always been an alien element. Java's one possible niche on the client -easily installing/starting desktop applications over the web- has never really taken off. And recently, web applications (AKA JavaScript) have started eating that cake. (e.g. Google Docs)
i'm with you OP, i was referring to the other sides behavior not yours. sorry for the confusion. 
metaphor usually refers to the "theme" of an application (space or something like that).
I'm using your story to show junior developers why I keep saying designing tests which chain on each other is absurd and exactly The Wrong Thing To Do (tm). Thanks for sharing your misery, it's delightful.
But sometimes it does make you feel better, if only for the moment.
People like the folks you are dealing with drive me absolutely batty. If you don't care to be a good dev, get the fuck out of the field. I like your solution, too bad it didn't pan out better. Good luck out there my friend, unfortunately there are too few of us that actually care about what we're doing, and have ability enough to achieve it.
Clever, might be worth the time waste to remind everybody of things to watch out for.
Feels good to work at a company with only 3 developers.
You would have to write a dialog input so user could enter name and password, keep them in a String variables and use these variables instead of hard coded values. You would also need to handle failed log in where user entered wrong values. Because a lot of Java applications are servers - the connection details are often stored in properties files or other configuration stores and looked up when required - because the server's files usually have limited access this secure enough
Dangit IntelliJ, you've just taken away the last reason why I was sticking to Netbeans - its JavaFX2 support. Now I *have* to buy you..
You could also try /r/learnprogramming.
But it looks like the JFX2 support is in the (free) Community edition of IDEA. What I like about NetBeans is the first-rate Maven support. But IDEA has first-rate Scala support and okay Maven support, so IDEA wins.
This question comes up a lot. The application server needs username and passwort in plain text. Otherwise it can't access the database. There is no way around. Is this a security risk? No. If someone has root access to your server he doesn't need the password anymore. Damage already done. In small projects application server and database are even on the same machine. I have seen people encrypt the password and have the key stored as a String constant somewhere in their program. This is obfusication not encrytion in my opinion. Doesn't help much. If I can access the file system I could scan your class files for the key. Makes it harder, but I wouldn't call it secure. It is always a good practice to have a custom database account for the application server. Restrict the rights as much as possible. 
I had the _perfect_ meeting today for updating IDEA. Getting it all up and running kept me productive for a good 15 minutes.
Oh heh, I didn't realise it was in the free edition. Well, off to try it out then :P
Yeah, with the JFX2 support I think I will agree. Maven support in Netbeans is far superior, but IntelliJ also speaks Python and is so much more responsive. And as you said, the Maven support in IntelliJ is _OK_.
 Properties files are external config files. The app only reads from them, rarely (if ever) should it write to them. You don't wipe a properties file, otherwise you can't ever run again. Securing this file from users other than the intended user is the goal, and on Unix-like systems is done via file permissions. You can use things like JNDI to look up database credentials, and if the app is deployed in a container like JBoss these credentials can be stored encrypted, but the app always gts them in plain text.
I worked at a place where if you found crazy shit like this you get a beer prize
They are more often stored in key stores, defined in data sources and accessed by applications using jndi
Tried ehcache?
how is netbeans' maven support better? I havent tried it
See also: http://mail.openjdk.java.net/pipermail/lambda-dev/2013-April/009049.html
What you have doesn't sound unruly; it seems quite organized to me. As TheRealSlartybardfas said, a good IDE should make navigating that easy.
My experience is Netbeans maven support sucks. I can't tell you how many times I've added a new dependency to my pom, have it downloaded and STILL netbeans won't compile my app with it. It usually takes a cache clearing to make it work. IntelliJ auto-updates when you update the pom very quickly (with a status spinner!)
Googling for *java for experienced programmers*: * http://programmers.stackexchange.com/questions/155659/java-language-book-for-an-experienced-programmer * http://programmers.stackexchange.com/questions/51115/is-there-a-canonical-book-for-learning-java-as-an-experienced-developer
It would certainly be worth looking at [Effective Java](http://www.amazon.com/dp/0321356683). Any particular reason you want to learn java? 
I'm interested in all this phone business that has been going on. Be nice to write stuff for myself and just have crap to mess around with on my phone. Thanks
I might try it then. I've used vi or simple text editors forever, but why not try something new.
If you download from Android's website, they have a bundle setup with the Android developer options. Basically it's Eclipse with an addon to easily create Android apps http://developer.android.com/sdk/index.html
Use a flat layout instead of hierarchical to display your packages. You can also use multiple source folders or projects if it makes sense to divide them that way. (If the classes could be reused by other projects.) When I start out I like to make a different project folder in eclipse for different functionalities. This also helps properly layer your API so that it is more loosely coupled. Only put the dependency on the implementation project and not vice versa. Use hotkeys to navigate between classes so you don't have to use the folder structure all the time. Ctrl click on class name in source file in eclipse, for example.
The people complaining that filter is too hard to understand .. just.. what? If you take 20 minutes to read any introduction to almost any functional programming language you will know what `filter` is supposed to do. How can people who are making design decisions about a functional language feature in java not know what `filter` does? I understand the argument that maybe the average java user won't know what filter is, however I don't think that justifies changing things that have been this way and still are this way for other languages. The people who don't know... will learn. edit: some sense: http://mail.openjdk.java.net/pipermail/lambda-dev/2013-April/009098.html
Android is well documented, and it is easiest to use eclipse for making apps. So for IDE I'd go with that. 99% of your problems you have with java or eclipse you can resolve by googling the error or stack trace. If you can't find starting tutorials you are going to have to improve your internet search skills, as they are very important in saving you many headaches.
Advice on getting started with Java for *fun*: Try golf instead!
yea, that's one aspect of Netbeans that I do like -- maven projects are 'first class' projects (aka, no .nbproject/ directory)
I do not like golf!
I can understand forgetting whether filtering removes elements matching the rule or removes elements not matching the rule. Your link is right, of course, but I can sympathize with the confused people.
Unfortunately, my IDE budget can't go much above £0...
Check out the following [packaging principles](http://en.wikipedia.org/wiki/Package_Principles): Effective packaging comes from increasing cohesion of classes within a package and decreasing coupling of packages to each other. Cohesion - keep your packages tight: * REP (Reuse/Release Equivalency Principle): Classes meant to be visible to users (classes making up the public API of a library) belong in the same package. Classes which are implementation details not meant to be visible to users should not be in the same package as the public API. Keep API and implementation separate. * CRP (Common Reuse Principle): Group classes into packages by related API. * CCP (Common Closure Principle): Group classes into packages which are dependent on each other. Classes which are dependent on each other are modified together. Coupling - keep your packages from stomping on each other: * ADP (Acyclic-Dependencies Principle): Don't create circular dependencies between packages. Cyclic dependencies = pain. * SDP (Stable Dependencies Principle): Minimize dependencies on packages that change a lot. A package which depends on another package which changes a lot will have to change a lot itself. * SAP (Stable Abstraction Principle): A way to do SDP: divide packages into API packages (abstract) and implementation packages (concrete part). Depend on the APIs, not the implementations. 
It modifies the POM file, for starters. And when searching for an artifact I don't start with an error in Netbeans, but get a nice list of matching files. IntelliJ just shows a combobox. 
Hi, wolf! Did you try this? which java &gt; /usr/bin/java ls -la /usr/bin | grep java &gt; lrwxr-xr-x root wheel java -&gt; /path/to/java unlink /usr/bin/java # or... rm /path/to/java 
What does it modify? IDEA's maven intentions work fine for me (including the nice dependency template). Maybe Netbeans has some features that IDEA doesn't 
This was a fantastically helpful post. Thank you very much!
I feel this title is very misleading. The tone was not one of disapproval, but rather of constructive criticism. For example "some of these issues are fixable through documentation/improved compiler error changes rather than API changes" and "Thanks to everyone that attended" does not sound like he's "not happy" just that he sees some areas of improvement. Maybe a more accurate title for this post would be along the lines of "Richard Warburton has some feedback after running a java 8 lambda hackday" but that wouldn't be sensationalized enough to get attention.
The IDE is important here. We have consistent class names for our models, REST resources, services, etc and with this, Go To Resource in Eclipse works great because I can guess what I need about 90% of the time and it will exist, but I never know, nor care, what package or module/project it is in. edit: And all good IDEs and text editors have great Go To File/Resource actions to make this easy, not just Eclipse.
[r/nongolfers](http://www.reddit.com/r/nongolfers/)?
It's not really a security rist IMO. The username and password are usually stored in configuration or text files. And with the right security on the system, if one has access to the configuration files, they have already compromised the security of the entire system. 
Maybe not to that degree.
If you like this idea, I would suggest reading [Agile Practices, Principles and Patterns](http://www.amazon.com/Agile-Principles-Patterns-Practices-C/dp/0131857258) by Bob Martin, which goes over this in much greater detail and has lots of other good design tips too.
It sounds like this is a desktop application (not n-tier with the server connecting to the database). If this is the case, are you creating connections via DriverManager or Datasource (there is more than one way)? Also, are you using a Singleton connection or multiple via Connection Pooling (possibly for concurrent threads accessing the database)? You can always pull the username/password off the command line using Scanner or String args. If this is swing app, you can present the user with a dialog with 2 fields to enter them. Just delay creating the connection or defer setting the connection credentials until that information is entered. I have done this many times. Also, there are many examples of Java Swing apps that ask the user to enter their credentials (ie. Oracle SQL Developer). A lot of client side java applications store the database credentials in an encrypted xml file or property file and do not prompt the user. Not secure at all, but you need to evaluate your security needs. Sometimes this is just fine. Is this an intranet application, how many users, etc. Your options also depend on what kind of DB drivers you are using. Definitely look at the JDBC Java tutorial for more tips. 
When I add a dependency in IntelliJ it doesn't add it to the POM file. It's also seemingly impossible to run Maven targets from the UI. In Netbeans I can configure which Maven commands to run on any given build option (clean, clean and build, build, run, ...). In IntelliJ I haven't even found an option to clean the project. I use Maven so heavily in Netbeans that I feel crippled when using IntelliJ.
why would anyone add a dependency for IDEA? I don't do anything for IDEA, it configures itself from my IDE-independent pom.xml. i.e., I add the dependency to my maven pom.xml and IDEA automatically adds it to the IDEA project.
I can understand forgetting whther grep shows lines matching the pattern or lines that don't .... NO, ACTUALLY, I CAN'T. 
&gt;I don't want to use an external product because I need this data to be present as fast as caching it inside the JVM. Well, this will be very hard if not impossible to achieve. To store an object off Java heap you will need to externalize it somehow it to a byte buffer (byte array) You can use simple Java serialization or something with a better performance. In any case this will make it slower that having the object stored on heap. I would look at products such as EHCache, Infinispan or Hazelcast first as you may end-up re-inventing the wheel. 
One solution is to create a data source in JNDI which contains the user name and password. Then in the application you get the data source by name. Check your application server documentation for details.
I really think this misrepresents my opinion. I'll quote one my emails later in this same thread: 'I also repeat my statement that despite this thread having a problem-filled tone, I think in general JSR 335 has done a good job overall. To my mind the hackdays have already established that the "easy problems" are "easy to implement" and I completely think that this is a far greater achievement than it sounds when you write it in an email.'
To be honest, I think its a fair point. For me its obvious what it does because I am so used to the method but based on the name alone, it isn't. The suggestion in that link of "accept" and "reject" isn't a bad one. However, to keep consistency with other languages, I'd say filter still wouldn't be a bad choice either.
go here - this stuff is gold: http://thenewboston.org/list.php?cat=31
&gt;I feel this title is very misleading. [So does he](http://www.reddit.com/r/java/comments/1bnrw8/richard_warburton_not_happy_with_java_8s_lambda/c98onyg)
It would be nice to have an inverse form of filter, simply because: filter(Thing::isDeleted); is an easy way to keep all deleted Things, but to do the opposite I'd either need another line of code or to not use a method reference.
[x-post from r/programming](http://www.reddit.com/r/programming/comments/1bh1fc/infinite_streams_with_java_lambda_expressions_and/) Drove myself mad with the notion that I'd seen it before. 
`accept` and `reject` aren't so terrible, and if they were creating this new concept maybe it would be the better choice. That said - keeping consistency with the huge number of languages that currently use `filter` I think is the almost-too-obvious way to go.
In this example you can really see how far java is from functional programming. In Haskell (or any other functional language) it is as simple as prepending a `not .` in front of the function; while in java this apparently requires some arm twisting. The fact that Java needs (or at least discusses including) two different methods that basically do the same thing (one to keep and one to remove) shows how tiny of a subset of functional programming features it offers.
&gt;while in java this apparently requires some arm twisting. `.negate()` on a Predicate object or writing `t -&gt; !t.isDeleted();` instead. &gt;The fact that Java needs (or at least discusses including) two different methods that basically do the same thing (one to keep and one to remove) The theoretical reject method would pretty much be this: default Stream&lt;T&gt; reject(Predicate&lt;? super T&gt; predicate) { return filter(predicate.negate()); } Not really a tragic example of verbosity.
Try processing.org!
I won't directly give you the answer since this is an assignment, but you should take a look at the methods of the [String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html) class, and in particular, what the [indexOf](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf%28java.lang.String%29) methods do.
This will return true for any 'xx' found in the string. It has to be the first 'x'. Also, won't compile.
Should have bought it during the end of the world for $50.
Just out of curiosity, is it likely that you should have broken this into separate libraries? I mean, once you start to get into this size of project (5000+ classes), the number of unit tests required per build starts to become unwieldy no? There must be *some* part of the code that would be logical to break it up at?
I did indeed mc ritz
Since indexOf gives you the location of the first instance, couldn't you just check if indexOf("x") == indexOf("xx")? 
I don't see a "unit test"...
 import java.util.Scanner; public class Counter { public static void main(String[] args) { int count = 0; boolean running = true; String input; Scanner keyboard = new Scanner(System.in); while (running) { count++; System.out.println("Want to continue?"); input = keyboard.next(); if (input.equalsIgnoreCase("y") running = true; else running = false; } System.out.println(count); } } That should do what you're asking for. I didn't compile it, so there might be typos, but they should be easy enough to fix. I'm assuming that since the count thing is for each instance, so the while condition is true, an iteration will be made. If not it's easy to adjust the positioning of count++. 
http://www.tutorialspoint.com/java/java_loop_control.htm
Why would you do his homework for him?
I almost commented on that too. This is a very basic exercises that OP should understand himself really well.
 while(condition is true) { increment count by 1. Print, want to continue? receives input from keyboard if input from keyboard is y, running remains true else running is false and the while loop ends Put your print statement inside the while loop or it will not print the count } I'm learning as well. Don't simply copy this guys code. Understand what is happening and for the love of god use debug mode. It was a god send to see every step and know exactly what the problem is. Remember coding is a state of mind, gotta practice.
could clean up the code by changing the if statement to something like: if(not y) {running = false} doesn't make sense to rewrite the variable as true every time
don't post this here. try things before you ask, implement evaluate the results
&gt; This loop should run **at least once** Answer: do/while Basically the while and do/while loops are exactly the same, except for one thing. A do/while loop will run at least once, and then check the condition. A while loop will first check the condition before running.
&gt;I know to declare var Count = 0 `var` is not a Java keyword. It sounds like you want [/r/JavaScript](https://pay.reddit.com/r/JavaScript). Completely different language.
OK, so reading the OP's post the first thing that struck me was "var Count". That's not how you declare variables in Java. It is how you declare variables in Javascript though, so it looks like OP doesn't know the difference and posted in here by mistake. Having said that, I find it funny that people replied with Java code and resources.
hahaha. stupid mistake on my part I guess. Still a rookie. thanks guys
 int count = 0; int numberOfTimesToRun = 10; do { count++; }while( count &lt; numberOfTimesToRun); System.out.print("The loop ran: " + count + " times.");
&gt; After the loop is complete print the value of Count to the screen in bold (use the HTML bold tag in your output). Another red flag. And yes, I missed it as well.
Then why not Scanner in = new Scanner(System.in) do { count++; System.out.println("Continue? y/n"); while(in.next().equalsIgnoreCase("y")); System.out.println("&lt;b&gt;Count: "+count+"&lt;/b&gt;");
I would have... I just need another end of the world prophecy...
We're using Flex (ugh) but it looks really polished and I know I couldn't replicated it in Swing. The middleware is all Java with EJB, MDBs, JPA, JMS, etc. I honestly don't know what could produce our polished front end other than C# in a fat client or very complicated HTML5 in a browser.
filter(x -&gt; !x.isDeleted());
Remember, they have job security to think about, and we all know the best kind of job security is job security through code obscurity!
Another good option is NetBeans. Eclipse in my experience tends to have more commercial plugins so if you end up having to use any of those (or do android development) you'll probably be forced into using Eclipse. NetBeans on the other hand has much better out of the box support for the latest 'official' standards (one of the main contributors is Oracle after all...) and especially actually good maven support.
It's amusing how it is always the Scala people who try to save them from the most obvious embarrassments. See the reversed type variables in function types, the compose method, the Optional drama or the standard naming.
Why would I make my life more complicated by splitting it up? We can find what we need whenever we need it. It is all in one project. If we split it up into different projects it makes it much more complicated to build. So to answer your question, we chose not to make life more difficult. If it were someone else's project they might. Nothing is unwieldy about it the way it is. 
In Netbeans you can search for the artifact you need, which is nicer than writing XML. 
Is [https://pay.reddit.com](https://pay.reddit.com) blocked?
Always a fun thing to do.
catch (Exception e) { } //meh, fuck it
Uhm, in the applications I was involved during the last 6 years, we have 50-150 eclipse projects. Each project has a root package (all starts with x.y.z then comes more or less the eclipse project name). Each such eclipse project implements a business feature or process. Mostly we have a view, a controller, and a model subpackage, plus there might be others for specific functionalities. Each eclipse project may have 20..50 classes organized in the subpackages. Sometimes even more, but that's rather exceptional. In short, keep together what should stand together, and separate those that has nothing to do with each other. 
get the hell out of here
Agreed... IDEA writes the XML automatically for me using "dependency template" - kinda like this: http://blogs.jetbrains.com/idea/2010/03/maven-generate-actions-for-pomxml-editor/
--x and y-- are assignments, not just expressions. So the line int z = --x - 1; is the same thing as x = x - 1; int z = x; This line int t = (y--) + 1; is the same as int t = y + 1; y = y - 1; y-- is saying "use y in the overlying expression and THEN decrement it by one" which is why t is 2 instead of 1. --x is saying "decrement x by one and THEN use it in the expression."
It seems surprising to me that Wicket should outperform Spring (Web MVC?). Wicket is a component framework and Spring Web MVC is an action framework. I would have thought all the plumbing that has to be created to transform the HTTP request into actions and the associated server side state to maintain component state would tip the scales in favor of the action framework which is a 1:1 mapping between URL and controller method. Common wisdom defeated or is there something fishy here?
&gt; y-- is saying "use y in the overlying expression and THEN decrement it by one" which is why t is 2 instead of 1. Which is why giving the language C++ its name was such an interesting choice.
https://github.com/TechEmpower/FrameworkBenchmarks
But it's easier to get someone else to do my homework here!
Sadly it seems so. I'm all for asking *good* questions - if one has already put some thought into it. Writing the code out, compiling it and firing up the debugger is the **least** step one can take.
The situation during the test hardly relates to you posting this on reddit, doesn't it? You ***could*** put it into an IDE and debug it before posting the question here, couldn't you?
A quick solution would be to wrap you. code inside of a while loop. Something like bool run = true; while (run) { //do some stuff System.out.println("Run again?"); if (System.in.nextline() != "yes") { run = false; } } Forgive any formatting issues... I'm on my phone using an app
Don't compare strings using the equality or relational operators in Java. All you're doing is comparing memory addresses. Use equals(), compareTo(), or their case-indifferent counterparts. A do-while loop would also be better here. OP: if you aren't familiar with do-while loops (or loops in general), read [this](http://www.tutorialspoint.com/java/java_loop_control.htm). do { //do some stuff System.out.println("Run again?"); } while(System.in.nextline().equalsIgnoreCase("yes"));
It's not like the code is complicated. By debugging and stepping e.g. from line 3 to line 4 you can see that the value of `x` changes to 0 (the value you know is the correct solution). As this is the only place where `x` is used besides the initialization and the output, you know that the mysterious "--x" does something, and you can [look it up](https://www.google.com/search?q=java+what+does+--x+do). If this process of debugging and figuring stuff out is too much, then I'm afraid you're not cut out for programming.
You could continue by creating a minimum reproduction of the problem as a standard Maven project on GitHub.
IntelliJ automatically loads Maven projects as "native" IntelliJ projects, so that you don't actually need Maven for building, running, testing, etc. the program (but you can still invoke any Maven goal manually in the IDE). This is a very powerful feature, since it drastically cuts compile times (incremental compiles across all modules) and integrates well with other features such as (exploded) app server deployments.
Yeah it's easy to laugh at Swing with its uncool looks but for small to medium sized applications, it's a decent framework.
The tutorial tells you how to write a file and how to read from it. You usually ONLY read from it. About if it is a security risk. Well, it's much better than having the username/password in the code itself. You usually have these kind of sensible files in your server, and one must protect the server itself. Take into account that i'm talking about programs that need to run often, it would be a mess to introduce the username/password every time. You could pass them through command line, but it would be a pain. That's why you just leave the file there, you don't modify it or wipe it in any way. If you are talking about a program that will be run once you should use the command line. About what you say about encryption: if you encrypt the configuration, where do you store the password to decode it? egg and chicken problem. 
Yes, this is a more "enterprise" approach to the problem.
I don't understand that system id part. Why it works locally and won't work when in jar? What is that systemId anyways? If you are going to reach a file in the file system, that's "easy": ClassLoader loader = Thread.currentThread().getContextClassLoader(); URL url = loader.getResource("com/package/MyClass.class"); String propertiesFileName = url.toString(); if (propertiesFileName.startsWith("jar:")) { int ndx = propertiesFileName.indexOf("!"); propertiesFileName = propertiesFileName.substring("jar:file:/".length(), ndx); ndx = propertiesFileName.lastIndexOf("/"); baseName = propertiesFileName.substring(0, ndx); propertiesFileName = baseName + "/application.properties"; } This way I have the absolute path name of the "application.properties" file within the file system. That file is located in the same dir where my application.jar resides.
Pure speculation here, but it's possible that this is a class loader issue. Instead of using the classloader from the class, try using the classloader from the thread: Thread.currentThread().getContextClassLoader().getResourceAsStream(...)
Maybe I'll poke at it later tonight...obviously when I run locally it's using files on the filesystem and classes, not a jar file...so maybe I need to mock something up running inside a jar.
If I create a Maven project I don't care about first class IntelliJ projects. But even then it would be fine if the POM would be updated as well.
From what I gather systemId is a way of providing a basepath for relative path resolution. I had done something similar to URL XSLTURL = getClass().getClassLoader().getResource("main.xslt"); StreamSource styleSource = new StreamSource(new File(XSLURL.toURI())); Transformer t = TransformerFactory.newInstance().newTransformer(styleSource); Which worked locally but when I ran it from the jar in the real environment I get an error saying something similar to "Path is not hierarchical" which seemed to be related to the path inside the jar file and the common solution seemed to be to use the URI resolver...except when I did that it wasn't getting called. I'm wondering if there's a way I could adjust your solution to get me a path that would point into the jar file... 
Oh I see. The StreamSource may accept InputStreams, and instead of getResource, you might want to use getResourceAsStream. The class loader apparently sees your xslt files in the jar. And about my code... The jar's URL is something like jar:file://&lt;path in filesystem&gt;&lt;app.jar&gt;!&lt;relative path in jar&gt; and the class loaders understand it. But I'm not sure that you might convert it to a URI or not. At the beginning, it's not just file://, there you have the jar: too. The URL in this case: the absolute path of the jar file is followed by an exclamation mark, and followed by the path within the jar file. That's what your classloader returns. My code strips the "within jar" part, and what remains, is the absolute path of the dir containing the jar file in the file system. If you want it to be a real URL, put back the file:// to the beginning. But again, you better use getResourceAsStream instead of getResource, then it works regardless whether it's packed or not.
1) I can poke around the classpath. Wouldn't maven keep this consistent? 2) I don't really have a location since I'm doing getResourceAsStream...I could try to figure out something workable with getResource...maybe? 3) Yeah, the stylesheet is in its own xsl file and then the EXSLT functions I needed to import are in their own xsl files that are imported from the main xsl. I need to figure out a way to run it the same on my local environment... 4 &amp; 5) It has no problem referencing other resources in the same folder in other bits of code. I also unzipped a copy of the jar that was deployed to the server and saw all the XSLs I needed right there.
If you want help with anything or help getting started with something let me know. To learn the basics of the syntax just write the same programs that you would in C/ C++. Java does not have a getch(). Its I/O is all stream based, not character based. You can get a single character, but it is a bit of a kludge. See this program on JavaHelp: http://www.reddit.com/r/javahelp/comments/1bp3fq/the_statement_if_strcharat0_a_e_i_o_u_a_e_i_o_u/c98ri7b 
Are you sure Jenkins isn't picking up a Jar from its own classpath instead of the ones provided in your app? You should check your classloader isolation settings.
Why? Because people like logically dividing their code because it allows them to share and reuse code easier. Maybe I want to use some portion of your library, but not the entire thing. When I use spring IOC, I may not want the database aspects of Spring. Convenient that they've split it up. What you have is called a [Monolithic Library](http://xp123.com/wwake/fw/ch07-connectA.htm) Some people are just happy with Monolithic libraries. I don't know that it would be a source of pride though.
1. My code is not open source so even if you want to use it, you can't. Sorry. 2. My code is not a library. It is an application. It does have a web service component that allows reusing business logic via rest. 3. I strongly feel you shouldn't spend much time solving problems that may exist in the future. You are trying to solve problems that don't exist for us. When those problems exist, we will resolve them and splitting the app up might be a solution. Since this isn't a problem, I don't know if that is a solution. So I still think we're doing the right thing for our app. Sorry you don't agree. Thanks for the concern. 
Hell, I don't think I should try to solve problems that aren't even mine!
please post it, I'll take a look. I've struggled plenty with XSL, I know the feeling.
When you say locally, do you mean from inside an IDE, or command line? I've seen this in eclipse vs command line, where the relative path for the resources directory is different between eclipse and the command line. My default, ugly, debug technique is to print the current working directory when run from the command line, and use that as a starting point to the resources location.
Agreed.
I second this. Use something like a duplicate class checker plugin in maven 
Maven only controls the jars in the class path. That may stay the same. If you have duplicate classes, you are playing class path roulette.
Yeah, filtering is a pretty unambiguous term. I don't think I've heard of any languages that implement it as "removing elements matching the rule" (false predicate). Are there any out there that do?
I believe that is the line is what yielded the "Path is not hierarchical". I had at one point dropped it in favor of using getResourceAsStream() instead of getResource() and used a custom URIResolver implementation that just did more getResoureceAsStream(), but it wasn't being called. I suppose I could use getResource and toURI to to set the system ID and use getResourceAsStream() to feed the StreamSource.
Why don't you find the sources for this library, attach them and see if you can step through the code? Assuming it's open source, it may work.
Yes, by locally I meant within the IDE which is IntelliJ/IDEA in this case. Running the maven targets clean&amp;test.
Thanks much. I own an android device, so that is my main motivation 
What, already? /s