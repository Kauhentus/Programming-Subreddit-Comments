Haha, right so. Learning SQL is quite valuable anyway, so the OP should probably go that route anyway. The task itself probably isn't that large (it just seems huge at the moment), and so should be well achievable with either solution.
Yeah, I got sucked in by the incorrect indentation. OP will need to add braces if he wants to count.
Example projects are good to learn the basic concepts of any API, like in this context: how to design and open a window, how to load an fxml file, etc.
They target different platforms? JET -&gt; conventional Windows or Linux executable, roboVM -&gt; iOS?
&gt;The RoboVM compiler translates Java bytecode into native ARM or x86 code It seems RoboVM supports the x86 architecture, so that it can be used to compile desktop apps, as long as mobile apps on ARM.
Years of experience in live production code? 
The article is much more entertaining if you read it in the accent of a Chinese math professor.
&gt; it can be used to compile desktop apps That sound interesting, thanks. I had not heard of roboVM before. I don't think it can compile anything that runs under Windows, though. It also seems to be in a very early stage of development. I'm not an expert on this topic, but I'd say JET is more similar to the [JavaNativeCompiler](http://jnc.mtsystems.ch/) or [GCJ](http://gcc.gnu.org/java/)?
Readability has been one of the most important aspects of Java for me, looking at code written a year ago, I can easily figure out what it is trying to do because of verbosity and explicit syntax. Scala on the other hand, after dealing with 6 month old code; I put scala into the same category as groovy, perl and LISP, very difficult to support and pick up quickly if you forgot what the code did or you did not write the code. And I have to deal with such code occasionally and I know I will have to spend a few hours trying to figure out what the code is doing and constantly question why developers have to be clever in the most obfuscated ways. This says nothing of how good it is as a language (although operator overloading did give me C++ flashbacks, there is no need it). Just how hard it is to support once it enters the legacy stage (more than 6 months nowadays). I recently had to rewrite a small part of the codebase that an ex-developer wrote in Scala that no other Java developer wanted to deal with due to Scala's syntax, which is not difficult just seems foreign enough to not justify using it instead of Java. The strongest part of Scala *to me* were functions that were also variables, which lambda functions solved in the latest Java release, and now makes me question what can Scala offer me that is compelling enough to move away from Java.
Abstract classes vs. interfaces, beyond the superficial syntatic difference, when you're talking about when and how to use them, is really the difference between the [Template Method Pattern](http://en.wikipedia.org/wiki/Template_method_pattern) and the [Strategy Pattern](http://en.wikipedia.org/wiki/Strategy_pattern).
Note: I don't work for Excelsior, I just received the announcement by email today. I'm looking for a "download and run" deployment option, and JET can be used for this purpose. However, I'm wondering if "[native packaging for Java FX](https://blogs.oracle.com/talkingjavadeployment/entry/native_packaging_for_javafx)" isn't just as good (and free)? I'd love to hear if anyone has compared these deployment options.
Please ask in /r/javahelp. Also, it's because if the execution falls through all those `if|else-if` blocks, `raiseAmount` will have an undefined value. You need an `else` block or assign a default amount.
Define raiseAmount = 0 at the start. (and the rest of your variables)
Java can be very hard to read old code as well. Sometimes I find I have to write very complex object inheritance hierarchies, proxies, and adapters to reduce code duplication in Java but as a side effect the code can get confusing. In scala I can get away with fewer complex design patterns because really those patterns were workarounds for missing features in Java.
The lack of articles makes the voice in my head take on a Russian accent.
Someone who not only answers the question but directs op to proper subreddit and isn't a dick. I commend you sir. 
The variables already are 0. (note they are primitives!!)
They are primitives, which don't need initialization as they are not objects.
That would be true if they were instance variables rather than local to the method.
Another vote for Typesafe Config. It's a really awesome tool that works really well. I've migrated several projects over to it with great success. 
how can he be teaching java then? I think this is pretty basic stuff to know. in any programming language.
*Local* variables need to be initialized even when they're primitives. 
If I may challenge some assumptions, I would actually recommend *against* getting certifications. They are viewed very dimly in industry (except for certain networking certifications) and will probably not help you get a job (or get a better job). In fact, I know several managers that throw away resumes with certifications listed, they are so bad. If, after hearing that, you still want to proceed, I'm not sure you're going to get good free resources anywhere. I suppose you could read the Java Language Spec itself, but I doubt that would be helpful. If you're going to drop quite a bit of money on the test itself, you might as well drop the extra money on a study guide specifically for that test. 
high school teachers are not required to have a degree in what they teach
Watch out for non ASCII character sets
If you have studied Java previous and have been using it professionally I would think that the OCJA (Programmer I) would be pretty easy for you. I'd recommend just looking at the topic list in the page you linked to. If you feel like you have any gaps in your knowledge of those topics then look at the related http://docs.oracle.com/javase/tutorial/ sections. You might also want to check the various books on amazon.com (just make sure they are for the Java 7 exams) as there are starting to be several to choose from. But don't fear the Programmer I exam that much, Programmer II (OCJP) is where you'll probably need to spend some time studying.
I've seen people throw out resumes with *only* certifications listed when they are hunting for people with experience which is to be expected. If someone is throwing out resumes just because a certification is listed then I wouldn't want to work there.
Also hover your mouse over those red Xs on the left. It will give you a hint as to what the problem is.
You cannot expect general education teachers to know everything. It depends on what the school is in need of. College on the other hand they better know what they are doing as you are trying to study that particular field.
Oracle JDK has a built-in HTTP server - http://docs.oracle.com/javase/7/docs/jre/api/net/httpserver/spec/com/sun/net/httpserver/HttpServer.html
Thank you very much for your reply! I have fixed the String to String[][] students, as well as removed the null statement. The reason I had the null there was it was what Eclipse generated. I am not sure what to do to resolve this issue: http://i.imgur.com/8EkMbBp.jpg
You have to declare the String[][] students array **outside** the **try** **catch** block to make it visible for the following code. So, the code should be: String[][] students=null; // or maybe new String[][] - here I am not sure try { students[][] = (String[][])put.readObject(); } catch (ClassNotFoundException e) { e.printStackTrace(); } //display its data for(String[] kids: students) { System.out.println(kids); }
You can't have a native code compiler for iOS because of Apple. All iOS apps must be primarily authored in an Apple approved language. See http://daringfireball.net/2010/04/iphone_agreement_bans_flash_compiler Stop blaming Sun/Oracle for something that isn't their fault. These are closed platforms that want to have vendor lock-in - write once, run anywhere is not what Apple/Google want. You might be interested in http://www.codenameone.com/
&gt; you just helped an entire high school java class But this was a high school class. 
Certainly getting certification proves nothing and still experience is better then any certification. But certification is not useless. Firstly you will for sure increase your java knowledge and fill some gaps. Other then that certification is important for your employer because it company to apply for jobs that has certification requirements. As far as literature is concerned besides official Java tutorial many people recommend SCJP Sun Certified Programmer for Java by Kathy Sierra and Bert Bates. You can find it for free here https://java.net/downloads/jfjug/SCJP%20Sun%20Certified%20Programmer%20for%20Java%206-0071591060.pdf although I dont know if its legal 
Oh come on! Apple backtracked on that decision on the same year. http://codeclimber.net.nz/archive/2010/09/09/Apple-relaxing-SDK-license-agreement-MonoTouch-and-Flash-officially-allowed.aspx &gt; You might be interested in http://www.codenameone.com/ Those of us doing professional mobile development are well aware of Codename One.
ExcelsiorJet actually passes the Java TCK (from what I understand), so there is a high confidence in the results coming out being correct. 
How so? WIth defender methods I can see, but what functional interfaces have to do with it I do not understand.
One of the people behind Excelsior JET here. Thanks for the kind words, whether you've spoken to me or someone else. To avoid the misunderstanding, the Standard Edition that is included in the Charity Bundles is 32-bit only. See the [Feature Matrix](http://www.excelsior-usa.com/jetfm.html) for details.
You are right, as a default/defender method is an implementation inside an Interface, which makes the Interface behave more like and Abstract Class. When I wrote my comment, the name 'Functional Interface' came up first in my head, and I did confuse it with 'default method'.
Why can't you use java.util.Random? "If two instances of Random are created with the same seed, and the same sequence of method calls is made for each, they will generate and return identical sequences of numbers."
I thought about measuring the milliseconds at a given time (the time of the measure being taken), and maybe using it for selecting a position of a number in a float, or something similar, so you kinda have two seeds, the one you input and the time at the moment of the measure. That would make it a little more "random". Actually you can play around with that and get some more complex formula. edit: the float number can be the result of dividing your seed by another number or something.. I don't know, the process is up to you! edit2: after reading your clarification, then I would suggest you not to use time, but some increment inside your method, you could get some 1,2,3 or x results with seed A, and some different 1,2,3 or x results with seed B and so on. Maybe an integer increment that goes 0 then 5 then 10 then 15, and back to zero after four runs. that would give you the same four results with seed A, but some other four results with seed B. I hope it helped. Cheers.
Because it does not allow me any control over which random number it gives me. I need a function that has a separate determinant than the seed. Something like Random(double x) { Code manipulating seed and x Return pseudo random value } Where if I pass in 2 or something as x, it will continually return the same number unless the seed is different.
Well, the native packaging for JavaFX is just a bundle with a Java runtime, so it's the usual JIT-compiled execution model, and doesn't receive the benefits and drawbacks of an AOT system like Excelsior JET.
Random will do that, otherwise [walk through the sauce](http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/util/Random.java#Random.nextInt%28%29).
What you are looking for is known as a "pseudorandom function." It is a function that given an input gives a unpredictable** output, but given the same input always give the same output. A block cipher like AES should do the job. The encryption key would take the place of your "seed." Here's the first link I found on how to do it in Java: http://www.javamex.com/tutorials/cryptography/symmetric.shtml As an aside, you might want to mention more details about your application. Many times when developers start reaching for crypto libraries they are creating or improperly solving a security problem, so at the least you might want to talk to someone who knows about security if this project is the least bit important. ** Technically, it's computationally indistinguishable from random. It's not /truly/ random, but it's good enough.
What about: double Random (double x) { return new Random((long)(x * 1000000000l)).nextDouble(); } By re-initializing Random each call with your parameter as the seed, you'll consistently get the same answer for the same value. This is an example: import java.util.Random; public class rand { public static double random(double x) { return new Random((long)(x * 1000000000l)).nextDouble(); } public static void main(String... args) { for (String x : args) { System.out.println(x); System.out.println(random(Double.parseDouble(x))); System.out.println(random(Double.parseDouble(x))); } } } Or you could code up your own Mersenne twister.
&gt; any control over which random number it gives me That kinda defeats the purpose of random numbers though... Why would you need to control the random number? What's the application? 
Version 9, scheduled for Jan'14, will support Java 7. If you give $50 or more now, you will receive a free upgrade. 
Procedural content generation.
I'm still not sure why you need control over the randomness. What's the relationship supposed to be between the non-seed parameter and the produced values?
Well, are you asking us or Oracle?
We expect to be on Java 8 a few months after it becomes generally available. As far as to why we fell behind on Java 7, [our road to 64-bit](http://www.excelsior-usa.com/jetroadmap.html#64bit) turned out to be much longer than expected. Had we known that in advance, we would have done Java 7 earlier.
I used "Oracle Certified Associate, Java SE 7 Programmer Study Guide Paperback by M. Reese Richard" from Packt Publishing and I passed with flying colours, yesterday :)
Op's [array declaration syntax](http://docs.oracle.com/javase/specs/jls/se7/html/jls-10.html) is perfectly fine, if uncommon.
Having recently passed that exam, having a degree in computer science, and worked as a Java developer for a while, I can tell you that you will need to revise for the exam. It's not massively difficult, however there are a lot of little bits that you have probably never considered before, or are abstracted away by your IDE so they never actually bother you. I used the revision book from Oracle press, and the practice exam software from Enthuware to revise from. Very helpful
So, you basically want the control over the seed? You can get the seed from Random object using reflection, manipulate it, and then pass it to another Random object to use as a seed. I don't really know what 'x' is supposed to do, looks like a part of the seed to me. long seed = 1L; System.out.println(new Random(seed).nextInt()); System.out.println(new Random(seed).nextInt()); System.out.println(new Random(seed).nextInt()); This will print three integers that are the same value. You can modify the seed, and you will get another value printed three times. 
This was the best database course I've taken so far, helped me learn the basics. I would suggest as far as experience, just keep doing the dailyprogrammer, and do as many as possible. http://class2go.stanford.edu/db/Winter2013
Oracle's official Java Tutorials might help. [http://docs.oracle.com/javase/tutorial/](http://docs.oracle.com/javase/tutorial/)
I had some issues when I had the main class above all packages. Mainly that I couldn't compile with javac .../\*/\*.java (All java files in all folders in the specified directory) since the main file wasn't in a folder. I don't know what the convention is but from now on I avoid not packaging the main class. Not because I can't compile but because it gets more tedious.
Just a basic recap of the tech empower series, except with less info. Doesn't get mentioned much, but 'raw' PHP is pretty darn close to raw java once you start doing database queries in those benchmarks. raw php is faster than 'raw servlet' in one test. 
If you want to exclude classes from certain compilations, e.g. test cases should not go into the release application, a common way to do so is have two separate source folders, with the same package structure in both of them. Another thing to keep in mind is that there is no concept of sub-packages in java, they are all just different packages. So if you have class A in package `foo`, by putting class B in `foo.bar` it does not get any more visibility into A than if it were in package `baz`. That's why there are hardly any conventions around packages, since two classes can only either be in the same package or not. Just organize your classes in a way that makes sense to you and anyone who has to read and understand your code.
I haven't used Joda in a very long time, but can't you parse it by hand and set the day manually?
Hum, sorry to disappoint you, but if you have taken two semester of Java, you **ARE** a beginner. Now, Java is huge (rich clients, server, embedded, ...). Without knowing more about what kind of position you want to apply, it is pretty worthless to give you some kind of resources.
I don't know why you got downvoted, you're 100% correct. [Here's the TechEmpower Benchmarks for those curious.](http://www.techempower.com/benchmarks/) [Gemini](http://www.eclipse.org/gemini/) tops most of the lists. I'll have to look into it a little more deeply to discuss in my advanced Java class next term.
What is 'raw' PHP and Java?
Nah, I think this is a great nudge in the right direction. The question is obviously asking for best practices and how to stick to conventions and Maven is one of the more (if not the defacto) popular build mechanism. Everyone who uses maven knows where the src is gonna live (src/main/) and where the tests are (src/test/) and what goes into your target and what doesn't. Here's another vote for dipping your toe in the maven waters. The main warning I give people starting with Maven is, all the conventions are great when you stick to them, but as soon as you think you have a unique case, you're entering a painful world of blocks of XML configuration in your poms and/or writing plugins. If you get to this point, stop and assess, am I really doing this the right way or am I going against the grain because I don't yet know better.
I'm not certain that the 'gemini' in their tests is Eclipse Gemini. From their [motivation page](http://www.techempower.com/benchmarks/#section=motivation&amp;hw=i7&amp;test=json): &gt;"Why include this Gemini framework I've never heard of?" We have included our in-house Java web framework, Gemini, in our tests. We've done so because it's of interest to us. You can consider it a stand-in for any relatively lightweight minimal-locking Java framework. While we're proud of how it performs among the well-established field, this exercise is not about Gemini.
**WEB SCALE**
&gt; 'raw' PHP is pretty darn close to raw java once you start doing database queries in those benchmarks Given how *comparatively* slower raw PHP is when doing essentially text output, single queries, or iterating a result set (e.g. the 'Fortunes' test), these results make me wonder what issues JDBC has when doing multiple queries and/or updates more than anything -- or what options they're stuffing on the mysql JDBC URL. 
&gt; This is what I have at the minute but it doesn't work. In what way doesn't it work? Please let us know the actual error you're getting. For your pasted code, Java syntax is much more rigid than math syntax. See [here](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/operators.html) for a reference on Java operators. In particular, in math notation, multiplication is implied when you put two things next to each other. That's not true of Java. You need to explicitly use the multiplication operator. EDIT: It also seems you need to define `k` and `ans` unless they're instance variables with definitions you haven't included with your code snippet. If you haven't programmed in Java I'd strongly recommend reading some reference material. There are docs on the official Oracle site [here](http://docs.oracle.com/javase/tutorial/java/index.html)
Since you are doing procedural generation of some sort, you might be interested in Perlin Noise.
`super.x` refers to the method or attribute named `x` that's defined in your superclass. Does the `ArrayList` class have a member named `Collections`? This doesn't compile for the same reason that `ArrayList.Collections.sort` doesn't compile. [Here are the API docs for `Collections`](http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html), if you've been having trouble locating them. Note that the `sort()` method is defined as static. Also if you're a beginner (or even just in general) it's usually more appropriate to post these things in /r/javahelp.
I'll paste my code here for both my classes, firstly Math and then MathApp. I have used Java before, I'm on week 12 of my course, I just haven't used Math.pow before. /* *myMathApp.java *@author Adam.Horrigan *7th November 2013 */ public class Math{ private int x; private int ans; private int fof; private int gog; private int fog; private int gof; private int finverseof; private int ginverseog; private int inverse; private int inversefof; /* f,g: Z-&gt;Z where f(x) = 3x+2 and g(x) = 8x^3 */ public Math(){ x=0; ans=0; } public void setX (int x){ this.x=x; } public void fof(){ ans = 3*(3x+2)+2; } int FUNCTION(int x){ return 8*Math.pow(x, 3); } void gofg(){ ans = FUNCTION(FUNCTION(x)); } public void fog(){ k = 8*(3x+2); ans = Math.pow(k, 3); } } MathApp: /* *myMathApp.java *@author Adam.Horrigan *7th November 2013 */ import javax.swing.JOptionPane; public class MathApp{ public static void main (String args[]){ //declare variables int x; int ans; int fof; int inverse; int inversesfof; int option; //decalre objects Math myMath; //crate objects myMath = new Math(); //input x = Integer.parseInt(JOptionPane.showInputDialog(null,"Please enter your number")); option = Integer.parseInt(JOptionPane.showInputDialog(null,"Please select option 1,2 or 3: \n 1. fof (x-5)-5 \n 2. inverse (x+5) \n 3. inverseof (x+5)+5")); //process if (option==1){ myMath.setX(x); myMath.fof(); ans= myMath.getAns(); } else if (option==2){ myMath.setX(x); myMath.inverse(); ans= myMath.getAns(); } else { myMath.setX(x); myMath.inversefof(); ans=myMath.getAns(); } //output JOptionPane.showMessageDialog(null,"The answer is "+ans); } } 
ArrayList doesn't have a "Collections" member. I think you put the "super." before it by accident. Also: without the super. you're trying to sort an item and not the list. You probably meant to say Collections.sort(this); I don't quite get how you can not see that though, the message is quite clear.
I hope this doesn't come off as condescending but you just seem to have some confusion about how names and classes in Java work. Methods are attached to a class. You need to identify what class has the method `sort()` you are trying to call. It's unclear after this new comment whether you want the built-in `Collections.sort` method or a method that you yourself have written. Once you've identified which class has the method you want, you just need to invoke the method. For normal (i.e. non-static) methods that means you need an instance of the class (e.g. `MyClass inst = new MyClass(); inst.sort()`). For *static* methods, you don't need an instance. You can just call it on the class directly. (e.g. `MyClass.sort()`).
I don't know either, but I guess I've been upvoted some too :)
Cron expressions will let you do that : 0 30 10-13 ? * WED,FRI =&gt; "at 10:30, 11:30, 12:30, and 13:30, on every Wednesday and Friday" If you're looking for a library, Quartz handle them quite well.
well said. and it's interesting to see the downward speed on PHP once you start adding those useful things like ORMs and such. Java takes a hit, but not as much as PHP. Would be interesting to see if/when they benchmark PHP with HipHopVM (and Phalcon holds its own decently, from what I can see here). 
How can I convert a repeated time like "on 2nd Moday of every month"?
That's one of the major advantages of a compiled language. An entire ORM or framework doesn't have to be compiled each time it's run. ...that said, php does have caches to compensate for that.
Anyone working with Java needs to read Effective Java. Beginner or Expert.
Fix the link, its broken
Doesn't B.setText(A.getText()); work?
The Calendar understands the following (Taken from the [Oracle Docs](http://docs.oracle.com/javase/7/docs/api/java/util/Calendar.html)): + YEAR + MONTH + DAY_OF_MONTH + YEAR + MONTH + WEEK_OF_MONTH + DAY_OF_WEEK + YEAR + MONTH + DAY_OF_WEEK_IN_MONTH + DAY_OF_WEEK + YEAR + DAY_OF_YEAR + YEAR + DAY_OF_WEEK + WEEK_OF_YEAR So, with the second format, it should be possible to tell the Calendar with: MyCalendar.set(Calendar.YEAR,2013); MyCalendar.set(Calendar.MONTH, Calendar.NOVEMBER); MyCalendar.set(Calendar.WEEK_OF_MONTH,2); MyCalendar.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY); that it should return the date for the 2^nd Monday in November 2013 
No. If it makes a difference it is in the action event for A 
Thanks, I somehow missed that Apple had backtracked on that decision. From what I can tell (please correct me) they still won't allow JITs which is why Codename One takes the generate source code approach. Without a JIT won't performance really suck? Do you honestly think that Apple really wants a Java env on their phones? If it was something that was going to happen I'd have to imagine that creating an Android runtime environment for iOS would happen before we got proper Java on iOS.
Make is not commonly used with Java. You can do it, but it's just not common at all. Ant and Maven are two tried and true build systems, Gradle, SBT and others exist which are newer and shinier. I personally prefer Maven because I got to know it. I hear Gradle is the hotness though I've never used it.
thankyou very much!
Hi, i use [JCrontab](http://jcrontab.sourceforge.net/), it uses Cron syntax, which is exacly what you're trying to achieve, and has a library to handle starting things etc.
if you want to do something when B is pressed, it should be on the event handler of B. Also, you should report what you get if things don't work. "No" could mean doesn't compile, compile but there's no button, compile but the button are dead, etc. :)
 import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.io.IOException; import javax.swing.JButton; public class Main { private static JButton A, B; public static void main(String[] args) throws IOException { A = new JButton("A"); B = new JButton(""); B.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent action) { B.setText(A.getText()); System.out.println(B.getText()); } }); B.doClick(); } } As desrtfx and Kemichal were eluding to, you needed to change the scope of your variables. This prints 'A' for me.
I want to warn you, there are some truly challenging math classes in your future. I was scared to death of them. I've been coding since I was 8 or 9 and by the time I went back to university when I was 30, I had myself convinced that I was only doing it for the piece of paper and probably wouldn't learn anything about programming since I already knew it all. Boy, was I ever wrong. Between the logic classes, the discrete math classes, the OOA/OOD classes, and the regular ol' programming classes, I gained a true appreciation for how lousy a programmer I'd been before formal education. TL;DR: Anyone can write bubble sort.
It's very C/C++, for sure, but as long as it's clear what he means, it's not really an issue.
Yes, I believe that was my point.
I think comparing Sharpoint to Notes is not an accurate comparison. Compare Sharepoint to IBM's web based RAD platform xPages. I would pick xPages, it runs on Domino servers since 8.5. Its a web based development platform that is build on Java, you can run real java code in it if you want or not. Its really an amazing development tool that treats Domino as an enterprise level non relational data source. Here is an example. In a couple hours yesterday I built a complicated workflow app with bootstrap as the front end, multiple approvers, and very customized to the specific business process. The end users wouldn't know it was Domino unless I told them as it runs in a browser, all browsers from iOS mobile to IE chrome and Firefox. I could make the app run offline with no internet connection or extend it with the mobile controls to make a more native feeling app than what bootstrap can deliver. If you are doing Notes client development and not xpages development you need to stop and look at what you have available. My customers talk up sharepoint because it has a bigger market exposure. But when I can deliver the apps quickly with excellent functionality that makes the people with sharepoint experience stop talking. Also, if you are looking to move mail off of Notes you should wait until bring your own client (BYOC) is officially announced before deciding. BYOC will use active sync to let the end user run Outlook on the desktop and have Domino on the server. [edit]spelling
You have defined ans as int, a double doesn't 'fit' into an int. You either have to cast it, or change all the floating point numbers / doubles in my example to ints. But yeah, if you do that it it should work. Who's telling you you can't return values by the way? It's pretty rediculous. If you return values you can combine different formula's together so they use each other's return values.
This isn't news. Java has been faster than these alternatives (especially rails and django) for a while. The argument was always that for most sites the millisecond difference doesn't matter, and the speed of development is what counts. I.e less boilerplate, less server startup time, etc.. This is just silly blog spam for java 7, I mean java 4 was faster than rails. b.t.w: I personally think java has frameworks that are competitive in development speed these days as well, which might make for an interesting blog post, not this sillyness.
Dude, settle the fuck down - do whatever you want man. This is the Java subreddit. Expect folks to help you do things "the Java way" if you're asking questions like you do in the OP. The short answer to your question in the OP is "put it wherever you feel like it."
[Stack Overflow](http://stackoverflow.com/questions/3154488/best-way-to-iterate-through-a-directory-in-java) has a good answer on tree traversal. 
Important for what? Java is a vast field with many topic areas. In general being familiar with the syntax of Java 7 and 8 will never hurt. For UIs JavaFX is the designated successor of Swing, so that might be worth looking into as well. 
Ya need to pass a variable in your recursive method that will tell you how many spaces/tabs you need to inject in each line before the file/directory name in your tree.
I suggest defining a string with the spaces you want for a single level of padding. For each level that you print the files, double the padding.
Well the problem with that is, that everytime I go into the recursive method it gets set to 0 because it gets initialized again. That was the reason I had to use a global String.
Read the [Java EE tutorials](http://docs.oracle.com/javaee/7/tutorial/doc/) and try to implement the case studies. That will definitely help you brush up.
I mean add a parameter to the method.
And how would one tell java to do that when moving a layer deeper?
I would read [Effective Java - 2nd Edition](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683) to update yourself on the language and best practices. Then, if you want to get into Enterprise Application Development, I would learn Spring. This is a good book: [Spring in Action](http://www.manning.com/walls4/).
Another Stack Overflow question that might help you: [here](http://stackoverflow.com/questions/9084094/java-turning-strings-into-a-tree).
And how exactly do I tell java beforehand how many layers it has to go down?
I will take a look at it, looks promising! Thank you
Thanks I got it working.
You don't tell it beforehand. Here's the gist of what you can do (without writing any code for you): Your root level would have an indent of 0. The next level down would have an indent of 1, and the level below that would have an indent of 2. And so on for however many levels there are. So the first call to the function would be with a hard-coded 0. Every time you list files in dirTree you do it with the indent that was passed to the function. Every time you call dirTree recursively you just increment the indent by 1.
&gt; I am more concerned with my prospects in a career working with these languages. Then don't worry about Maven, do whatever you want (If you aren't taking your Java project seriously.) Maven doesn't make your life easier if you don't have the intention of making your code portable.
gradle isn't quite as boilerplate heavy, you should give it a shot :)
* Look into JavaFX 2.2. The layout mechanics, threading, and event model are drastically different from Swing. * Download the dev preview of JDK 8 (which will be out soon), and familiarize yourself with the new lambda expression syntax and functionality, and the modifications to the Collections API; specifically, the stream processing features. * If you want to be ahead of the game, do some research on project Jigsaw, and see how the modularization of the JDK is coming along. All pretty exciting stuff, if you ask me. I'm stoked for the near future of Java.
&gt;I personally think java has frameworks that are competitive in development speed these days as well, which might make for an interesting blog post, not this sillyness. Java dick measuring silliness is all this sub has, unfortunately. It's faster than X! It's still relevant! It's better than Y! For the sake of *actual* discussion, which frameworks do you currently like for rapid development? 
Bingo. Psuedocode: // RECURSION, BITCH public static void tree(File parent, int level) { for (File child : parent.getFiles()) { String s = ""; for (int i = 0; i &lt; level; i++) { s += "\t"; } s += child.name; System.out.println(s); if (child.isDirectory()) { tree(child, level + 1); } } }
&gt; The point of the system is to allow myself a wide range of flexibility without having to conform to someone else's design/build/packaging philosophy Maven is all about conforming to their philosophy. If you want to structure things differently, then things will get difficult.
You can thank the JVM for that.
Were you using Java EE 5? That was where DI and EJBs not sucking happened. Learn CDI and JPA (Hibernate). Learn JAX-RS. And as strange as it sounds, learn JavaScript...there is an increasing trend of doing all the UI in HTML/CSS/JavaScript (no Servlets, JSP, etc) and just using AJAX to talk with a JAX-RS backend. Look at JavaFX if you want to do thick-clients in Java. One of the other big changes is having to deal with mobile clients which means learning more responsive web design and CSS than in the past or learning about iOS and Android development. This is another reason to learn JAX-RS; to enable Java to function as a RESTful web service backend for mobile apps.
 while(getTime() &gt; 0){ Timer t = new Timer(); t.schedule( new TimerTask() { @Override public void run() { System.out.println("Stop!"); } public int getTime(){ int time = 0; return time; } }, 480000); for(int i = 1; i &lt;= 100; i++){ System.out.println("Question " + i + ": What is " + p + " x " + q + "?: "); answer = p*q; response = input.nextInt(); if(answer == response){ System.out.println("Correct!\n"); count++; } else System.out.println("Sorry, that's incorrect.\n"); p = (int)(0+(Math.random()*12)); q = (int)(0+(Math.random()*12)); } } 
In your getTime method, you set the time explicitely to 0 before returning it so, the while(getTime()&gt;0) condition should always be false and never be executed at all.
Without knowing what the company does or a description of what the position is for, it is hard to give anything but general advice. Maybe databases will be important. Then again, maybe server sockets will be important. I wouldn't dive into an specfic technology like JavaEE unless you know that you will be using it.
But like the run() method, it only occurs after the 8 minutes or 480000 ms have passed, right?
play and grails can compete just fine with rails. I'm a spring/spring mvc fanboy myself though. The maven and boilerplate can be tedious initially but I just find myself more comfortable in these projects once the lines of code gets a little bigger. 
Yes, that's true, but your getTime() method is **outside** the **timer.run()** method. Suggestion: + define a **boolean** variable **timeout** private to the whole class. + before you start the while loop, set the **timeout** variable to **false** + inside the **run()** method, set the **timeout** variable to true, right after the **System.out.println("Stop");** statement + change the condition of the **while** loop to: **while (!timeout)** + do away with the **getTIme()** method And it should work as expected.
What I find most disturbing is that apparently only half the projects use testing libraries....
People talk a lot of shit about the JVM being large, the language having many deprecated features, etc., etc., but you can't get over the fact that it's ridiculously fast. We have a product that streams several million pixels per second of video, and the backing library that runs the thing is based on Java. It's smooth and fast. You can't do that in Ruby.
Ok I get what you mean, I guess I meant to say I am not completley oblivious to programming and Java. Heres a link to the position: http://hire.jobvite.com/CompanyJobs/Careers.aspx?c=qFc9VfwF&amp;v=1&amp;page=Job%20Description&amp;j=oOH2Xfwe And you're completley right I'm not that into Java yet to even know what some of this stuff means. Thats why I was hoping there were some resources out there where I can get more in depth knowledge since I am not in a java programming class this semester.
You are quite right. I'm not bashing the JVM in any way. I think it's a great tool and is battle tested. Though it always depends on the use case. Some cases jvm is a solution, others native C would work as well.
1. `null` (big gripe) 2. Getters and setters (i.e. no properties) 3. Positional arguments only. I like the verbose argument style of Smalltalk, or the new keyword-only argument style in Python 3. In Smalltalk a method call with two arguments is something like myInstance myMethodWithFoo: arg1 Bar: arg2 In Python you can force your method to be called using syntax like my_inst.my_method(foo=arg1, bar=arg2) 4. ...No multiple dispatch? Those are the ones I can think of off the top of my head. I think there are a few more. Formerly, the verbosity of using callbacks was a big one but Java 8 will solve that so I take some pleasure there =) 
* No of unsigned integers * No operator overloading * No properties * No delegates (although I've been hearing good things about the features in Java 8 - not really looked into it myself) I also hate the get provider by name stuff used in so many Java libraries. I like to have compile-time checking that the implementation I want is actually there.
&gt; null (big gripe) You can take my null when you pry it from my cold dead hands.
No standard Android VM. WTH? I have successfully asked a vendor for their Java source code simply so I can build it for Android, but why in the world should I have to jump through those hoops? Android devices on the market now have plenty of horsepower. Make a damn VM already!
Backwards compatibility. While this was a really noble thing to try to do, they should've been a bit bolder with Java 5 or 6 and thrown a lot of the old crud away. It's meant other languages could steam ahead while Java is left holding the rather ugly-looking baby.
**Default visibility**. No modifier given should mean private, not package-protected. **Default mutability**. Final (in all its usages) should be the default, with a 'var' modifier. At the moment a developer would be less likely to mark all parameters to a method as final, as it makes it unreadable very quickly. At the same time, it's much less common to reassign your parameters. **Collection interfaces**. There should be a 'readable' set (, list, map...) interface, that the existing Set descends from, with mutator methods excluded. This would prevent the refused bequest you see in Collections.unmodifiable...() and 3rd party APIs, giving better type safety. **Lack of expressive power**. After playing in Scala (or most modern PLs), Java feels clunky and verbose. It's a common complaint, but it's still true.
In case you ~~don't know~~ haven't seen this quote, the inventor of "null": http://en.wikipedia.org/wiki/Tony_Hoare#Quotations &gt; I call it my billion-dollar mistake. It was the invention of the null reference in 1965. At that time, I was designing the first comprehensive type system for references in an object oriented language (ALGOL W). My goal was to ensure that all use of references should be absolutely safe, with checking performed automatically by the compiler. But I couldn't resist the temptation to put in a null reference, simply because it was so easy to implement. This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years.
&gt; Final (in all its usages) should be the default, with a 'var' modifier Ah yeah! I believe the `const` keyword in C++ is a bit more powerful than `final` is in Java. You can mark a C++ method as `const` and it is a compiler-checked sign that the method does not mutate the object's state... I think this would be a nice thing to have by default in Java. 
I've seen this, and I'm still not convinced. Why is null such a mistake? The vulnerabilities of null don't affect java (in fact, they are pretty much only C/C++ and only in the kernel arena, and even then, there are safeguards now against those attacks). The errors caused by null are trivial. I mean, really, you get a NPE and you instantly know what it is. They are an easier class of errors to fix. Probably the only unfortunate thing about null is the fact that its lack of data representation could mean "We don't have data for this" or "We haven't gotten data for this" However, that is overcome simply by things like Optional. (even if you don't use guava, rolling your own optional class isn't taxing). I could maybe see an argument for stopping null from being the default, but I really haven't had so many issues with it that I wish it to go away for ever. After all, sometimes things DON'T exist.
&gt; Default mutability. It's an imperative language. Mutability is expected.
&gt; The errors caused by null are trivial. I mean, really, you get a NPE and you instantly know what it is. They are an easier class of errors to fix. Compared to what? NPE is generally the hardest class of error to fix in Java, at least in my experience. Its existence is a big hole in any promise the type system is supposed to be making. 99% of Java code might as well start out with `if(arg1 == null) throw new IllegalArgumentException()` for each non-primitive argument. Things like Optional are definitely the right direction, but since `null` still exists in core Java it can't truly fix the problem, only mask it.
&gt; The errors caused by null are trivial. I mean, really, you get a NPE and you instantly know what it is. They are an easier class of errors to fix. Even if we take that as true, trivial errors are damaging. It's not unusual for a codepath to not be executed until prod (poor testing? even so), and until its fixed can be embarrassing or costly.
It is, but mutability is often the source of bugs. Every guideline suggests keeping as little state as possible. It would definitely be contrary to the historical flavor of languages like Java and C, but I think it would also make it easier to write bulletproof and correct code. I don't realistically expect them to make a change like that but if they did I would think it's for the best.
I'm just starting out here, but I'm kind of astonished at how complicated it is to make a program wait a second before moving on. After writing the initial command, I have to surround it in a try-catch statement. Probably not that bad for experienced coders, but it bugs me so much. 
In imperative code, immutability is generally the exception. And even when you do design something to be unchanging, you need to think about what you really mean. Can the state of the object change but the reference not be reassigned, can the reference be reassigned but the state of the object referenced be immutable? 90% of my objects' data is mutable by design. When I make something immutable it is for efficiency reasons, not correctness. OOP has other protections against unexpected changes in state. Having to declare everything to be mutable would be a pain in the arse when you aren't using the functional paradigm.
&gt; In imperative code, immutability is generally the exception. Yes, and I think that is a mistake. &gt; 90% of my objects' data is mutable by design. Your objects data? Fields? What does it come to if you include all variables and parameters? I've not worked on a codebase where mutability was desired more than immutability, although few have code styles to mark most things as final, since it take up room. There's practicality to consider too. It's cheaper to mark a field as mutable that it is to mark parameters as immutable - there's more space.
I feel thats more a Google issue than a "Java" issue though - part of that whole Oracle vs Google suite (which last I heard is still being appealed?) 
Let me try, many of mine have already been listed. * No strong immutability constructs. It sucks that final only means that the reference to the object can't change and not the object itself. * Lack of getter/setter support ala C#. Seriously, a good portion of our code could be replaced with good getter or setter annotation. * Cruft. There are so many things in java that are there because they have always been there. For example. Map#get takes an object, even though it is a generic class. It really should take the generic K value and prevent a whole host of issues trying to get the wrong type from a map. * Type erasures. I didn't think I would hate this as much as I do, but I do. It sucks that you can't have overloaded methods like this a(List&lt;Integer&gt; ints); a(List&lt;Double&gt; doubles); I have also ran into a surprisingly large number of cases involving serialization and data marshalling where type erasures just get in the way and mess everything up. Sometimes I really do want to say T.getClass(); * More of a minor irk and mostly because go has shown me the light, but the fact that you have to declare something as an interface instead of implementing the methods for the interface and just having it work is a bit annoying. So many interfaces in java are exactly the same and differ only by type. * Java 8 isn't here yet and I won't use it for a good year after it has been released :(. Java 8 fixes many things I might list here, but won't. * Primitives as a second class citizen. It is quite annoying the primitives aren't objects. Even if they are never "objects" it would be nice if they at least acted at least a bit more objecty. For example, I should be able to say 2.toString(); * Operation overloading and unsigned killed for no good reason. There are a whole host of places that would benefit from unsigned values that will never exist. On top of that, to main reason things like BigDecimal are a pain to work with is because doing .add all over the place is just plain annoying. * Forced exceptions. I hate them. They clutter up the code and 9 times out of 10, you really do want the exception to bubble up and kill the application (or at least handle the exceptions more generally in a different portion of code). In my mind, exceptions should be loud, noise, and disruptive to make cleaning them up easier. Don't get me wrong. Java is a good language. but it has its niggly places I would love to see cleaned up.
&gt; Yes, and I think that is a mistake. Then stick to functional languages. Java is based on a different paradigm. &gt; Your objects data? Fields? What does it come to if you include all variables and parameters? Fields are what I count as the data of my object. Variables are temporary data. Parameters are another matter. I'll accept that in general, altering the internal state of an object passed into a method is dangerous. I don't think Java provides any facility to enforce this at all (beyond designing immutable classes), let alone by default. That's definitely a flaw (unless there's something I'm forgetting or not learned yet about the language)
True, you end up with mud on your face, but it isn't like you don't end up with mud on your face for any other sort of error. Even if we killed off null altogether and forced every object and thing to be initialized, you would still have problems if you didn't, for example, load up an array with data. Only, now instead of getting an NPE because the array hasn't been properly setup, your code will just happily chug along (unless it specifically checks for data in the array). And even then, the case of "there is no data" (which is, btw, pretty dang common) would be handled in an even more cludgy fashion. In the worst case, you might forget to initialize the proper "thereIsNoData" object and get errors because you are acting like there is data there. In the best case, it is a lot of extra code to represent the concept of "no data". I could see supporting a language level construct for "Can't be null" which triggers compile errors/runtime errors if null is pushed where it shouldn't be, but removing null altogether seems like the worst solution IMO.
&gt; Really? The hardest class of errors I've ran into are logical ones. Code that fails to do the right thing without notifying me in any sort of way. This is a vague category of errors which essentially includes NPE, unless you intended for your app to crash with a NPE. I can't even really think of what errors I regularly run into that aren't logical in one way or another. &gt; An NPE is pretty simple to fix, you get a nice stack trace, a line numbers, etc telling you exactly where things went wrong. NPE's may be simple to fix, or you may get a nice stack trace that politely points at a completely irrelevant piece of the puzzle in your huge application. The problem with NPE is they can be very hard to untangle depending on how many layers the `null` value silently passed through until it finally caused something to crash.
I wrote a method T getGenericClass() once and it was a pain but can be done via reflection (I assume T is your generic). Saved me a TON of refactoring work since I was then able to instantiate it :)
&gt; The problem with NPE is they can be very hard to untangle depending on how many layers the null value silently passed through until it finally caused something to crash. True, that can happen. But for me (and maybe it has just been dumb luck) those are pretty rare to find. It is often the case me that a null object was passed in, rightly, and immediately used in which case a null check was all that is required to fix things.
I'm with cogman on this one. Don't get me wrong, I'm not a big null fan, but Optional takes care of it if you really hate null.
Thread.sleep = code smell. Don't get me wrong, I've used it before (and probably will again), but it's usually a hack and not the right thing to do. For your case, just have some Util class that you can call: Util.doze(3); that does the try catch eat empty exception for you. Again, it's not "right," but it's too damned handy not to use it when you need it.
&gt; I don't think Java provides any facility to enforce this at all (beyond designing immutable classes), let alone by default. Yet that is possible. See C++ const. Even without it, partial improvements should not be discarded just because they're not complete.
&gt; That is not a reasonable response. There's no reason languages should stick entirely to their heritage. It's fundamentally an imperative language. Mutability is a massive part of that.
&gt;True, you end up with mud on your face, but it isn't like you don't end up with mud on your face for any other sort of error. Any reduction in error classes is good. &gt;Even if we killed off null altogether and forced every object and thing to be initialized, you would still have problems if you didn't, for example, load up an array with data. Only, now instead of getting an NPE because the array hasn't been properly setup, your code will just happily chug along (unless it specifically checks for data in the array). &gt;And even then, the case of "there is no data" (which is, btw, pretty dang common) would be handled in an even more cludgy fashion. In the worst case, you might forget to initialize the proper "thereIsNoData" object and get errors because you are acting like there is data there. In the best case, it is a lot of extra code to represent the concept of "no data". These are not the only options. Many programming languages support an Option type, which can be Some(x) or None. This can be statically checked. A new array could be filled with None. I do not have strong feelings about null, but it should not be considered the only or always best way to do things. Look at the popularity of @NotNull annotations. 
I know, the const correctness checks in C++ are very useful. It's strange that I've never really thought about their absence in Java. Unfortunately, final is essentially worthless in this context. Reassigning a primitive or reference within the body of a method won't change the assignment in the calling context anyway. It's the internal state of the parameter which is at risk and final does nothing to protect that.
&gt;It's fundamentally an imperative language. Mutability is a massive part of that. And I've never advocated removing it, just encouraging immutability. That argument does not make sense. Just because things are the way they are doesn't mean that they should be. If we accept for now that making mutability non-default would make it a less imperative language, so what? It'd still be fundamentally the same, and nothing is lost except some perceived purity. 
&gt;Unfortunately, final is essentially worthless in this context. Reassigning a primitive or reference within the body of a method won't change the assignment in the calling context anyway. It's the internal state of the parameter which is at risk and final does nothing to protect that. They're both a risk. Making things default immutable makes things immediately safer in the surrounding scope, and encourages immutability throughout. It's not perfect, but it's better. 
It's the default because imperative programming is fundamentally about state and changing it.
Java needs a getter and setter annotation. That would be simple to add and would remove more boiler plate code than anything else.
GUI framework options Difficulty of deploying applications using java
I agree with most of your comments. &gt; No strong immutability constructs. It sucks that final only means that the reference to the object can't change and not the object itself. Google Guava, Google AutoValue and @Immutable + FindBugs helps; but, yes this isn't ideal &gt;Lack of getter/setter support ala C#. Seriously, a good portion of our code could be replaced with good getter or setter annotation. Lombok or or AutoValue for getters &gt;Cruft. There are so many things in java that are there because they have always been there. For example. Map#get takes an object, even though it is a generic class. It really should take the generic K value and prevent a whole host of issues trying to get the wrong type from a map. I think they did this because too many things would break. But yes, this isn't ideal. I'm looking forward to Reification due in Java9. &gt;More of a minor irk and mostly because go has shown me the light, but the fact that you have to declare something as an interface instead of implementing the methods for the interface and just having it work is a bit annoying. So many interfaces in java are exactly the same and differ only by type. I really disagree with this one. You lose a lot of benefits of types if you were to do this. For instance if you have something like UserID and PostID, and they both implement a "long getId()" method, you want the compiler getting angry at you, particularly if a method takes both types and it's easy to screw up order. This is a very powerful feature, and the type critics typically "don't get it" &gt;Java 8 isn't here yet and I won't use it for a good year after it has been released :(. Java 8 fixes many things I might list here, but won't. I'm using it, and they even have most of it working on Android. Is this your workplace policy or something? (I work for an extremely large private employer on production systems) &gt;Primitives as a second class citizen. It is quite annoying the primitives aren't objects. Even if they are never "objects" it would be nice if they at least acted at least a bit more objecty. For example, I should be able to say 2.toString(); eh, not that big of a deal imo. &gt; Operation overloading and unsigned killed for no good reason. There are a whole host of places that would benefit from unsigned values that will never exist. On top of that, to main reason things like BigDecimal are a pain to work with is because doing .add all over the place is just plain annoying. I think readability is better without operator overloading. I've done a lot of C++ (games and extremely high scalability) and I always had to look at the source header/doc to find out what it actually did. Regarding unsigned, it would be nice, but you could of course always make your own. &gt;Forced exceptions. I hate them. They clutter up the code and 9 times out of 10, you really do want the exception to bubble up and kill the application (or at least handle the exceptions more generally in a different portion of code). In my mind, exceptions should be loud, noise, and disruptive to make cleaning them up easier. I also disagree here, I happen to like the compiler double checking me. With things like Guava's RuntimeException.propagate, you have a choice, and I'd rather I decide when I want to be "loose"
&gt; Then stick to functional languages. I think conventional thinking (pursuit of correctness) leads itself well to @FlightOfStairs argument. I think your argument is about splitting hairs given how minor it would be. With the current IDEs, it could fix the declaration with a single keystroke if this feature were to be implemented.
I agree with your suggestions. &gt; 1. null (big gripe) Java 8's or Guava's Optional is a great remedy for this. &gt; 2. Getters and setters (i.e. no properties) Project Lombok helps here &gt; 3. Positional arguments only. Yeah, with types and builders this is alleviated, but it's more boilerplate.
&gt;When I do anything in Python that I've done in Java, my jaw drops. I often feel this is because people aren't familiar with popular Java open source libraries.
Lack of modules makes it feel creaky. There's some talk of modules coming in 9.x I think but yeah, more than anything this is my biggest complaint. Everything else can be solved using a mix of Java and Groovy for me. 
&gt; I think conventional thinking (pursuit of correctness) leads itself well to @FlightOfStairs argument. OOP pursues correctness by isolating mutation, not avoiding it.
&gt; Many programming languages support an Option type, which can be Some(x) or None Option types are great when you also have pattern matching. Otherwise you still have to check for None in the same way you check for null.
In this thread: Java should encourage immutable classes by default Java should make creating setter methods easier
To be fair, that is still bloat and unnecessary boilerplate...
Try catch do nothing. 
Can't program GPUs or do any real high performance computing with it.
[Java Programmer interview questions] (http://www.programmerinterview.com/index.php/java-questions/interface-vs-abstract-class/) Recently interviewed for a couple of positions, one of which is a software engineer position for a consulting firm (got an offer by the way :D) was asked 2 or 3 of these questions and this site was really helpful. Difference in interface and abstract class, explain class and object, pass by reference vs. pass by value, and overriding vs overloading. Best of luck to you 
There's 2 different groups commenting, leading to the apparent contradiction. 1) People who want Java to be a functional language 2) People who want Java to be a better imperative language
Developers and Minecraft players
Scala solves several of those: &gt;Lack of getter/setter support ala C#. Seriously, a good portion of our code could be replaced with good getter or setter annotation. Scala has 'em. &gt;Cruft. There are so many things in java that are there because they have always been there. For example. Map#get takes an object, even though it is a generic class. It really should take the generic K value and prevent a whole host of issues trying to get the wrong type from a map. Scala's `Map` does that. &gt;Type erasures. I didn't think I would hate this as much as I do, but I do. Scala has a work-around for erasure in the form of `TypeTag`s: objects supplied by the compiler that record the values of an object's type parameters. Scala's `implicit` parameters also sidestep the need to see the type parameters' values in many cases, but that's too complicated for me to explain here. It still doesn't let you overload methods depending on type parameters, though. :( &gt;More of a minor irk and mostly because go has shown me the light, but the fact that you have to declare something as an interface instead of implementing the methods for the interface and just having it work is a bit annoying. So many interfaces in java are exactly the same and differ only by type. You might be interested in Scala's traits, which are basically interfaces that can have concrete methods, fields, and initializers. No constructor parameters, though. &gt;Operation overloading and unsigned killed for no good reason. Scala has operator overloading (and you can even define entirely new operators). Doesn't have unsigned math, but it does have value classes with which it can be implemented. &gt;Forced exceptions. Scala doesn't have them.
Few people use JEE for new projects, don't waste your time learning those "standards".
The fact that I have to use boolean values for condition statements. In C, I can use integers and even pointers and it makes me code so much more readable. I think it is unnecessary to create distinct types for booleans when they can be represented as integers. I have this gripe about a lot of languages... On another note, file I/O is a bitch and a half with Java. Not a fan.
&gt; The fact that I have to use boolean values for condition statements. In C, I can use integers and even pointers and it makes me code so much more readable. That's arguable. if(x) only makes sense if x is a Boolean. If it's an integer then what you really mean is: if(x!=0) If x is an object then what you mean is: if(x!=null) Java forces you to say what you mean. It's more verbose but clearer.
&gt; Forced exceptions. Amen brother. Why the hell should I have to surround every single Thread.sleep()...? I've literally *never* run into the InterruptedException I'm required to account for.
&gt; To be fair, that is still bloat and unnecessary boilerplate... are you talking about adding a dependency?
reduction in error classes is bad. fewer, more general exceptions reduces your ability to unit test and resolve tricky issues.
* Its weak generics. C++ templates are much more powerful. * The fact that you cannot instantiate a class on a generic unless you're given that class as a parameter. * The inability to dispose a class and allow it to have a destructor. RAII would be so useful at times. * No operator overloading. C++ allows you to use the == operator with strings just fine. Also, BigInteger math sucks for the same reason.
&gt; Encapsulation &gt; Inheritance &gt; Polymorphisim Are all tools for OOP but not the essence of OOP. You can use encapsulation, inheritance and polymorphism to produce code which is in no way object-oriented and you can write perfectly object oriented code without any of those things. Object orientation is simply organising a program into objects which manage their own state. The idea is to organise your data into sensible complex types then have a small collection of functions dedicated to operating on each type. Only those functions dedicated to that type act on its members. You can write object oriented code in pure C with structs. It just requires more discipline than doing it in an explicitly object oriented language.
Datetime is a pain in any kanguage it seems. Its a nightmare in Python as well. 
Soon, Android phones will be powerful enough to run standard Java. That makes Swing the default GUI, unless Oracle finishes SwingFX.
More than anything else, I miss context-sensitive functions from Perl, and what they could have become in a language with real exceptions. I wish we had some kind of autoboxing for multiple return values, the way Perl can easily return lists. I wish the standard libraries that use exceptions could be called from a context where exceptions aren't appropriate and do something else with failures. It really irks me that I have to deal with IOExceptions when using a StringWriter.
I get that diamond multiple inheritance is a pain in the ass, I've done c++ plenty. But sometimes, Goddammit, I want to implement a base class with mostly pure virtual methods and maybe a couple default implementations, and then elsewhere inherit more than one class that does that. 
&gt; That's widely considered a feature. I'm not sure which side of the religious war I'd take. If you ever need to implement and use a custom numeric type (like complex numbers) it's definitely not a feature. x.multiply(y.add(z)) is a horrible thing to have to read or write.
The trouble is, no one uses it JUST for some numeric types. Even the creators of C++ created bizarre things like cout with operator overloading.
&gt; JSP, compared to ASP.NET, requires an awful lot of prerequisite setup. I prefer Java over .NET, but the ease of use of ASP.NET is an ever-present draw. Can you provide any examples of what set up you're referring to? As a JSF developer who recently got a first real-world taste of a C#/ASP.NET Web Forms project, I'd argue that deploying a JSF app to an EE container is a far simpler task.
deleted... apparently people here hate yoda jokes :( 
&gt; Why the hell should I have to surround every single Thread.sleep()...? It only happens if you call Thread.interrupt(). Which can be a valid way to deal with shutting down threads, but it's not something people worry about very often. More generally, it's not clear why that should throw an exception at all. It's such a rare case that perhaps it should just return early and set some value, perhaps the return value, which is currently void anyway. To me, the main flaw with that is that it's a case of the Java authors trying to make Java too much like Unix, which has `nanosleep()` that can be interrupted by a signal, return early, and set `errno` to `EINTR`. Sound familiar? It's like someone thought, "We should make Java threads work the same way, but we need to map every `errno` to an exception." (In addition to InterruptedException, they also mapped EINVAL to InvalidArgumentException, for when either Unix `nanosleep()` or Java `sleep()` is passed a negative number.)
I know this isn't a super popular perspective, but I agree with the annoyances of checked exceptions. They really do clutter code and they make refactoring a complete bitch. I understand what they're meant for (and it does make sense in theory) but they've never done me any good. Whatever you do, don't do nothing in a catch even if you think it will never happen. Just wrap the Exception with a RuntimeException and rethrow it.
I hate working with EJB / JPA, that shit is impossible to debug
Java makes it easy to over engineer things.
I'm very tolerant in terms of language syntax and features so nothing much in that regard. The thing that I hate most about Java is all the Java hate. Seriously, all the hate is one of the biggest reasons that I don't use it for hobby projects. The other big thing is the modularity of the JRE. Even if you use tools like Launch4j, you still require users to install 200+ MB of framework.
better idea: try{} catch(Exception e) { throw new RuntimeException(e); } That way if it does cause trouble, you don't spend decades trying to figure out why nothing is happening when something should be. **edit** To clarify Exception is a _specific_ checked exception. Don't ever try to catch _all_ Exceptions, that is very poor practice. 
What have you tried sofar and why isn't it working?
&gt; Cruft. There are so many things in java that are there because they have always been there. For example. Map#get takes an object, even though it is a generic class. It really should take the generic K value and prevent a whole host of issues trying to get the wrong type from a map. Map#get or Map#containsKey is not generic, because you can have a different object but with the same hash as the key. That allows some tricks. So this is on purpose not generic.
http://docs.oracle.com/javaee/6/api/javax/ejb/Schedule.html I've used this annotation with great success. It will take Sun - Mon as acceptable values.
I am currently working on a project for school using EJB and JPA, could you elaborate?
Oh I know all about that. It's just a gripe of mine. Lazy developers being forced to catch problems. 
java.util.Date
Depends on what you're trying to do - do you need to know all the future run times ahead of schedule, or is it something you can just leave to run without needing to know anything more than when it'll next run? If you only need to know the next run, it also depends on what task it's carrying out - it may be as easy to set up something in the operating system to schedule the task, but if not there's the @Schedule annotation /u/harmonicPersistence mentions, or and it's also possible to programatically create these timers too through the [TimerService](http://docs.oracle.com/javaee/7/api/index.html?javax/ejb/Schedule.html).
* **The lack of macros** is a big minus for me (but not preprocessor macros like in C/C++, I'm thinking about something like the ones you find in Lisp/Scheme). * **Having to create a class for everything**, even when you don't really need it. Say I want to extract a frequently used piece of code and reference it anywhere - to do this, I'll have to make it a `final static` method of some class, for which I will have to conceive a meaningful name... It could've been much less trouble (and it *is* in some languages, esp. when you've got macros in your language).
teehee :)
I'd like to have myhash["myval"] instead of myhash.get("myval") 
Sorry that I can only give this ONE upvote. Lots of really good information in this comment. Everyone should read this. 10/10, would read again!
Checked exceptions.
I was late to the party and now I am curious, what was the joke?
If all the board locations get initialized to `null`, won't board[i][j] == board[i][j-1] be `true` the vast majority of the time? And when it is true, `j==3` will wind up being true as well. It might help to realize that, without an `else` anywhere, nested `if`s can be joined together into one `if` with the terms separated by the `&amp;&amp;` operator. In other words, your code does the logical equivalent of this single check: board[i][j] == board[i][j-1] &amp;&amp; j == 3 Which, by the rules of the `&amp;&amp;` operator means you might as well actually substitute `j == 3` into the left side since it can only ever pass if `j == 3`. board[i][3] == board[i][2] Essentially there's no way to *not* trigger that check, since the win condition is "are there any rows where the value in the 3rd column is equal to the value in the 2nd column?" In a blank board this is gonna be true for all four of your rows and the user can only hope to eliminate one of those cases before the first winning check is made (from what I can surmise). Some unrelated comments: * You should really remove the try/catch block since it doesn't seem to serve a specific purpose. * It would be in better practice to separate the detection of winning and the consequence of that (in this case, setting a JLabel). E.g. creating an Enum like WinningPlayer (or even just Player) and returning one in a method like `checkWinners()` or something. Then call that in your Swing code and set the JLabel based on what it returns (or launch a popup dialog or do whatever you feel like). This way you can keep your view flexible without needing to touch your game's logic. (If you're familiar with MVC, Swing is your view and the game logic is your model. The button handlers would be your controllers. ...I think.) * Make sure you keep your code well formatted. If you're using Eclipse, Netbeans, or IntelliJ, they all have code formatting commands. If you're using some other editor without that tool, it really pays to stay vigilant. Well-formatted code will keep your program easy to read and as a direct consequence easier to understand, change and debug.
From a design perspective it would be incredibly nice for interfaces to specify constructors and static methods. 
No operator overloading. It would be nice to at least be able to overload operator [].
Reminded me of Itchy and Scratchy and Poochie for some reason: &gt; Okay, how many of you kids would like Itchy &amp; Scratchy to deal with real-life problems, like the ones you face every day? &gt; &gt; (the kids all cheer and agree) &gt; &gt; And who would like to see them do just the opposite - getting into far-out situations involving robots and magic powers? &gt; &gt; (more cheering) &gt; &gt; So, you want a realistic, down-to-earth show... that's completely off-the-wall and swarming with magic robots? &gt; &gt; (The kids agree)
I am probably alone in this opinion, but I wish protected visibility did not include package default. I have several use cases where I have one class with a protected field with only a getter, and I want sub-classes to be able to change the field but external classes to use the getter. The problem is when it is in a package with classes that should use the getter, because they can access the protected field when they shouldn't be able to. Not a big thing, but annoying in group projects where someone invariably decides to skip the getter and access the field directly.
From what I read , It can get interrupted for no reason. So in this case you could catch exception and put it back to sleep. 
Some of my unit tests are end-to-end tests. They don't need to touch live servers on the Internet, but they do need to connect to actual servers, if only on localhost. Writing TCP/IP packet response mocks would amount to writing a real server anyway.
JTable - what kind of arcane mechanism works this thing. How many models does it have ? Why .getColumn(x) in some some cases throws exceptions , but column count is bigger than value requested and .getColumnModel().getColum(x) works ? Dates
I doubt it, lambda is only a tiny piece of the features Scala adds. For me one of my favorite parts of Scala are some of the powerful libraries that can handle concurrency in a very readable way compared to Java, see scala.async (https://github.com/scala/async). But there are many more reasons to enjoy Scala, pattern matching, no getters/setters, lazy initialization, and string interpolation are a few that I use everyday in Scala and wish they had good equivalents in Java.
Any language can be abused, if you give a developer who's primary concern is readability they can make any language (that's not intentionally esoteric) readable. If you give a developer who thinks being clever is the primary concern they can make any language hard to understand. EDIT: This is why all code should be reviewed by a peer who's going to be responsible for maintaining it, so they can call out the guy who's trying to be clever rather than practical.
Classloader leaks introduced by static loggers. What does a classloader leak look like? private static Log log = LogFactory.getLog(Foo.class); It looks like this. This kind of statement causes an OutOfMemory error in any J2EE application which is redeployed to an application server over and over. With every J2EE application i've ever worked on, we face OutOfMemory errors if we redeploy too many times. It's never a matter of "if" but "when". And, even if we were to track down the hundreds of leaks in any given application, they're impossible to fix, since many of the culprits are third-party libraries like Spring and CXF. Here is some [further reading](http://wiki.apache.org/commons/Logging/StaticLog) if this is the first you're hearing about this.
Ceylon way (which I also saw in other languages, but I can't remember them) is to use interfaces which map to operators: http://ceylon-lang.org/documentation/1.0/tour/language-module/ For instance there is an Summable interface which defines a *sum()* method. Once you implement it for a class, you can use the corresponding operator freely. It isn't as flexible as C++ overloading, and in fact it isn't really overloading as much it is syntatic sugar for interfaces, but it does cover the most common cases well enough.
Thanks. It's really old code, but i guess some of it might still be useful :)
I like them too. Like strong typing, they help me write better code by making sure I actually take care of error cases. It's too easy to just let the program crash or to forget about it otherwise.
Well firstly, you have the `if` and `else if` separated by a blank line. But you should realize that they are still related to each other, and the fact that there's a blank line between them doesn't mean anything to Java. I am not sure if this is what's causing your confusion. Otherwise the code is pretty simple. `units` must be a variable of type `String`. The code checks if the string is "Kg", or any uppercase/lowercase variation. If it is, it divides `m` by ten. If the string wasn't "Kg", it checks if it's "g" (or "G"). If it is, it divides `m` by one thousand. So the issue here is that the divisions don't add up. Assume it's converting to the units given. If (m/10) is the measure in kilograms, to get that same measure in grams, you'd need to multiply it by 1000. (m/10)*1000 is 100m. Yet the `else` clause divides by 1000. Conversely it could be converting *from* the units given. Meaning that `m` is in the next prefix up after "kilo" (e.g. 1 `m` = 10,000 grams). Here the issue is that the second division is too small for this to be true. So, this question is impossible to answer fully without more context. These seem like the two possible explanations: * There is a bug you didn't notice, and this program gives the wrong output * This is "spaghetti" code. In the "Kg" case `m` is converted to one type of unit, but in the "g" case `m` is converted to a *different* type of unit. If this is what the program is doing it should use two different and appropriately named variables. However as it is written, if this is working correctly, then the program flow is likely extremely difficult to follow and might involve multiple repeated `units.equalsIgnoreCase` calls. That said, more context would help.
I think you're forcing yourself a bit to counter every single argument. The absence of unsigned types can't really be defended, it makes interoperability with other languages a pain, for example reading binary file formats conceived with C in mind.
The call to super must be first statement in a constructor. Very annoying.
NO UNSIGNED PRIMITIVES. WHAAAAAAAAAT THE FUCK! edit: so much stealth downvoting in this thread, why not engage in discussion instead? edit 2: bonus rhyming!
It looks like you're getting introduced to dot notation. *units* is an **object**. Objects have **methods** such as *equalsIgnoreCase(***String** *anotherString)* To call a method we use dot notation *object.method()* If the method takes any arguments we put them between the brackets *object.method(***args***)* The equalsIgnoreCase() method returns a boolean. When it executes, you'll effectively replace *units.equalsIgnoreCase("Kg")* with either *True* or *False*.
So to fix this I should declare double x; instead of int x;?
That should fix it, yes. There are multiple ways but that should work. Also as an unrelated forewarning, if you aren't already familiar with it, there is some rounding error when working with floating point math. So you may get an answer of 0.0000000001 or something like that depending on your specific calculations. The solution to that is a bit more complicated :P Hopefully that's not part of your project.
It would be nice if it was **easy** to not include all the JVM junk you aren't using.
Crap, that is exactly the problem I've been having lately. I've resorted to rebooting my machine every couple of days.
Java's stubbornness at coming up with good GUI options really hurt it. And deployment in a pain. That's why I think it is fine as a server-side language. But man, if only Sun hadn't been so damn stubborn about the GUI.
Having looked through the replies thus far, I'd offer these thoughts: 1) Even if you don't want to use Maven, you could do worse than to review the directory structure and reflect on its implications. Writing your Makefile system to run along those lines will allow you to leverage the prior art while still maintaining the control that you're wanting over your project. 2) When I write an application, I generally put application code in the "main" package and then break everything else out by system/subsystem, like this: * com.mycompanyname.applicationname: Application code, main class, configuration if it doesn't seem like it needs its own package * com.mycompanyname.applicationname.ui: does what it says on the tin * com.mycompanyname.applicationname.core: domain classes * com.mycompanyname.applicationname.core.whatever: The whatever subsystem got big, so I gave it its own package * com.mycompanyname.applicationname.storage: db if needed And so on. 3) While Maven is a really great build system- it's my system of choice- it's hardly the only one. Gradle is a great up and comer, and I waffle between using it and Maven. Ant might be closer to what you're used to if you're used to Makefiles. What sucks, though, is that in the field you're going to have to use whatever build system your company has adopted... which might be the company chosen IDE's build system (which is like not having any build system at all.) My advice would be to familiarize yourself with Maven and Ant, and try developing in Eclipse, Netbeans, and Intellij, just to get yourself nicely rounded in how projects shape themselves around the conventions of the environment they're developed in. Good luck. :-) *EDIT: omg that was an ugly list.*
Sure you can. Use [JavaCl](https://code.google.com/p/javacl/).
**DONT DO THAT!** You completely missed my point. That is very poor practice. You shouldn't really be catching _Exception_ at all. You would catch specific checked exceptions. I used Exception to make a point. I would _never_ use that code down to the letter or that code that you provided. It is very dangerous trying to catch _all_ exceptions. BAD (What you did above) Good: try {} catch (IllegalAccessException e) { throw new RuntimeException(e);} What you did is incredibly poor practice unless you are the top-level caller and you're just looking for a way to stop it from crashing the entire application and intend instead on reporting it to the user. What you did also really doesn't have any application either. Catching an Exception ( I mean literally anything that inherits Exception without nit-picking through them) is bad code smell (unless like I said, it is used as a 'global' exception handler to provide a nice message to the user)
http://docs.oracle.com/javase/7/docs/api/java/net/URL.html#URL%28java.lang.String,%20java.lang.String,%20int,%20java.lang.String%29
What would you recommend, then? Spring?
&gt;* More of a minor irk and mostly because go has shown me the light, but the fact that you have to declare something as an interface instead of implementing the methods for the interface and just having it work is a bit annoying. So many interfaces in java are exactly the same and differ only by type. Optional duck type-ing would be a wonderful feature to have available. With lambda (single abstract method) support we've got some part of that but it's not really the same. 
You can use Guava's UnsignedLong and UnsignedInteger classes or the broader UnsignedPrim class to implement what you want. The beuty of it, is that you could always create your own is you could create your own via byte[] wrapped as your UInt64 or whatever.... There are so few cases to do this, I'm not sure how you define pain. If including a dependency of a fairly common library and adding a few keystrokes for method calling syntax instead of arithmatic syntax (in your example this shouldn't be an issue) . I don't think I'm forcing myself. Like I said, I agree with a lot of what the parent poster said, but I've found easy workarounds for almost all of them (damn reification), and disagree with two of his points.
I already have a ton of tech stuff to read on my bucket list. This ain't gonna help :)
Related to [this discussion over in /r/programming](http://www.reddit.com/r/programming/comments/1rkdip/the_string_type_is_broken/) It's not strange or broken, just a consequence of being built on UCS-2 and UTF-16 (depending the API you're using). For example, length() returns the number of primitive chars that make up the String. Most of the APIs are built around indexing the number of chars in the underlying encoding, and for most applications, this is an appropriate balance of size, speed, and features. If the author wanted the number of characters as in code points, they should have used codePointCount(). Code points in the supplementary planes are uncommon enough that it isn't worth doubling the storage requirements (or the major speed hit from variable-length encoding) for everyone using String. The APIs to do these operations correctly are in place, but they're not forced on everyone by default.
if you don't care about getting a reliable result you can use a double. If you need precision then use a BigDecimal.
Well the answer needs to be correct. I haven't heard of BigDecimal before. 
&gt; The absence of unsigned types can't really be defended... I would definitely defend it. Any programming platform is complex enough already: any areas where you can simplify without losing important functionality, you should do so. I have never needed an unsigned type to my knowledge, although I'm willing to be convince of their genius. Java has enough C-like legacy that I don't think 99.999% of programmers would appreciate increased C-compatibility.
Maybe I'm not using my jargon correctly, but I see Java as an OO language first and foremost. I expect object mutability (methods with side effects) but references should not be mutable. This would make a lot of code easier to understand, and guide beginners onto the correct path. (I'm thinking of programmers who reuse e.g. a String variable for completely unrelated things in a method, because they feel like declaring the variable is expensive.)
Not everyone does, sometimes performance outranks precision. For them, who cares if they are 0.000001 out. Think graphical processing where number of polygons is more important than them being out of alignment by a degree.
I would learn Java EE specifically JSF JavaServer Faces. You should also learn JPA and Hibernate. Spring is still popular but it is really more complicated and not as productive as the standard Java EE stuff now. There are still a lot of jobs using Spring today but it is not where I would focus. Since you are using Netbeans work through the Java EE tutorials. Tutorials https://netbeans.org/kb/trails/java-ee.html
&gt; There are no function pointers. Those are coming in Java 8, I believe.
The biggest issue I have is how poorly primitives and objects work together. For example, converting char[] to List&lt;Character&gt; is far more verbose than it needs to be.
Nice, but I'm missing http://balusc.blogspot.com and (shameless plug) http://henk53.wordpress.com :P
The issue my team had was we all were familiar with the code base, cause we were spending 40 hours a week in it. Sometimes being clever, is really handy and just makes sense. Until someone files a bug on a piece of code no one has opened in over a year. Agreed, there is nothing inherently unreadable about Scala, however Scala is on par or worse than Haskell in terms of extreme code density.
Attempted that, same thing happened. Re installed java even, reset and attempted again, still nothing
I feel like you didn't understand that was malicious sarcasm. &gt; Run as root It is worse advice than 'have you tried restarting?', because if you're running something harmful in your game/browser/computer/etc you are giving it free rein on system files.
I'm one of those people that sucks with computers. Don't torture me o,o
My best guess would be firewall. On linux I have gotten this when I had my iptables borked. Windows would probably do something similar.
This would be firewall software on your machine - not your network firewall. There are too many options here for me to guess. Refer to google or your firewall help system. I would first suggest temporarily disabling it and do a quick test to see if this is the problem. Then re-enable and isolate the particular rule/setting. How to do those operations is very specific to the implementation so google is your friend.
An alternative for a fully connected, weighted graph. package u.mdadmfan; public class Graph { public static void main(String[] args) { Graph g = new Graph(11); g.setValue(0, Integer.MAX_VALUE); g.setValue(1, Integer.MIN_VALUE); g.setWeight(0, 1, 6); g.setWeight(0, 2, 7); System.out.println(g); } private final int[] vals; private final int size; public Graph(int size) { vals = new int[size * size]; this.size = size; } public int getWeight(int from, int to) { return vals[(from * size) + to]; } public int setWeight(int from, int to, int value) { int idx = (from * size) + to; int orig = vals[idx]; vals[idx] = value; return orig; } public int getValue(int node) { return getWeight(node, node); } public int setValue(int node, int value) { return setWeight(node, node, value); } @Override public String toString() { StringBuffer sb = new StringBuffer(); for (int i = 0; i &lt; size; i++) { for (int j = 0; j &lt; size; j++) { if (i == j) continue; sb.append(String.format("(%d:%d)-&gt;%d-&gt;(%d:%d)\n", i, getValue(i), getWeight(i, j), j, getValue(j))); } } return sb.toString(); } } // WTFPL Licensed If there is a faster implementation I'd be curious to see it. Some short comings of that class: * Argument checking, but my users are trust worthy. * Not any kind of threadsafe. Not terribly hard to remember how to write for interviews imo. I did a lot of programming competitions in college though.
Start talking to employers, our industry has a fantastic job market right now. If you can think on your own you will be fine.
I graduated 2 years ago with a degree in cs and econ. You will have no trouble getting a job. However, your first few interviews will be quite frustrating as many interviewers love to ask questions that amount to vocabulary regurgitation of items covered in your first year. They often ask you to define concepts that you most likely use extensively in your undergrad work without realizing it or just forgot the name. Hopefully you are lucky enough that they ask you to write some code... I never was but i suspect the interview process is a bit more intense for non entry level positions. Good luck and be persistent!
This is an internship and more than anything they want to see that you are eager and willing. Train yourself on really understanding the fundamentals so that you will have a strong foundation to build on. We become better programmers by programming.
&gt; Maybe I'm not using my jargon correctly, but I see Java as an OO language first and foremost. It is an OO language but it is also, inescapably, an imperative language. Code is written as: do this, then do this, then do this... OO programming isn't really a paradigm in the same way that imperative, functional and logic programming are. &gt; I expect object mutability (methods with side effects) but references should not be mutable. This would make a lot of code easier to understand, and guide beginners onto the correct path. (I'm thinking of programmers who reuse e.g. a String variable for completely unrelated things in a method, because they feel like declaring the variable is expensive.) String is exactly the opposite. For performance reasons, the String class is immutable. you cannot alter a String, all you can to is assign a new string to the reference. Like String, there's good reasons to make classes immutable. It means you can share instances without having to worry about another part of the code altering it, meaning you don't need to make a copy unless you are going to change it. For references, on the other hand, mutability is expected. references, historically, come from pointers. They are basically memory-safe and type-safe pointers. An immutable pointer is (no pun intended) pointless. Admittedly, with modern OO languages, all complex types are references so there are times you don't want a reference to behave as a pointer. Those are the times they should declared immutable but those are the exceptions, not the rules.
Programmers will always do horrible things. A passive-aggressive language specification won't change that.
The fact that they are dependencies is what's caused all the innovation. Look at AWT. All the dynamic languages have the same problem only worse, because you have to deal with a single version of a module on the entire system where at least in Java you could package in a jar or war
I'm also interested in finding an open source Java project to contribute to. 
Presto - http://prestodb.io
&gt; I have never needed an unsigned type to my knowledge, Then you've never needed to use an integer as anything other than an integer. That may sound like a ridiculous statement but integers are used for more than just representing whole numbers. A common use is as a bitset. Yes Java has a built-in bitset class but it is over-engineered if all you need is 32 bits. An integer along with bitwise operations is more efficient. You can use a signed 32-bit integer but the sign bit might lead to some surprises. Even the byte primitive is signed in Java. How does that make any sense? It's not an Int8. It's a byte. A set of 8 bits. I've also wanted to implement a fraction type in the past. Ideally it would have been a Boolean for the sign and 2 unsigned integers for the numerator and denominator. Alternatively I could forget the sign Boolean and have a signed integer for the numerator and an unsigned integer for the denominator. What would be totally stupid (but Java forces me to do) is to make both the numerator and denominator signed. This means that either every fraction actually has 2 representations in my class or I just never use the highest bit of the denominator. 
Do any languages support it? There's been a good number of times I wanted to do exactly this.
That's part of the larger "no operator overloading" issue.
why not pick a popular one you're interested and try fixing bugs.
I second this. Great post! A lot of good info and a decent read. 
One library worth using with JSF is [Primefaces](http://www.primefaces.org/showcase/ui/home.jsf) - makes it so much easier to make the UI side of things look decent with very little effort. [Omnifaces](https://code.google.com/p/omnifaces/) also seems useful, but I've never used it (doesn't work in a portal environment).
Awesome. This should help me gear up for some coding inteeviews.
I've never come across someone who would want to see generics in algorithm questions. Could you please elaborate more? I'm curious.
Relevant: http://java.dzone.com/articles/my-problem-your-interviews
People should stop (ab)using getters and setters. If you need to set some internal state, take it in the constructor and assign to final instance variables. Beyond that, you should expose an interface where the methods actually do some semantically meaningful operation, not just poke at the internal state like getters/setters.
&gt;x.multiply(y.add(z)) is a horrible thing to have to read or write. It isn't for the new guy reading your code for the first time. They will know exactly what it does, but if you use operator overloading they will have to go hunting for what exactly the operator does this time.
Wow. This is very 2005. [Interviewers: Please stop asking math questions](http://countaleph.wordpress.com/2013/10/20/dear-startups-stop-asking-me-math-puzzles-to-figure-out-if-i-can-code/). Interviewees: If you get asked these kind of questions: Don't worry if you can't answer them precisely. Describe instead the method you would use to get to the answer. For instance: let's say you don't remember the complexity of Quick Sort. Answer: "I don't know, but I would always start with using the built-in sort method of the Java runtime for any sorting use case. Then I would measure if the sorting performance in my case is a problem. If it is, I would start looking into why and how to solve it. Maybe I should use a different sorting library. Maybe I should sort smaller bulks of data for presenting, or maybe I shouldn't be sorting at all. Implementing *my own* sorting algorithm would be the very last resort, as I presume many people have done it way better than I ever could do before me." edit: And if this doesn't get you the job. Be glad. You dodged a bullet. You don't want to work there. And *bit manipulation*? Seriously? I've been a professional developer for 8 years in the consulting industry, and I've never ever seen implemented C# or java code with bit manipulation. If you're interviewing for NVidia or as Frostbite developer for Dice then maybe you'd need it. The rest of the time: Use x / 2 instead of x &gt;&gt; 1. Readability and maintainability trumps performance* in 9 out of 10 real-life cases. *) My example [doesn't even improve performance](http://social.msdn.microsoft.com/Forums/en-US/1b49db21-3e63-4271-8e89-72f17d97dfaa/divide-versus-shift-operators?forum=csharplanguage)
LibGDX: https://code.google.com/p/libgdx/wiki/Contributing
For good OO code you shouldn't need to care what the operator does beyond "it adds the instances" or "it multiplies the instances" the actual work to do that isn't your concern unless you are working on that class. Naturally, you can overload + to set the left operand to 0 and return the right operand as a string in French but you can also implement the add(x) method to do that too.
Seems like it's doable with HtmlUnit: http://stackoverflow.com/questions/2961965/accessing-html-generated-by-javascript-with-htmlunit-java
It's not really relevant how things "should" work in theory, what really matters is how things end up working in practice. In practice a good programmer *should* care about what exactly each operator does. The idea of operator overloading is to make code more readable, but to me that has the exact opposite effect. What makes code readable to me is it being explicit and having no surprises. I want the primitive operations like invoking a method or using an operator to have well known semantics. If operator overloading is allowed by the language, every time I see an operator I have to ask in my mind "has this been overloaded or does it use the default semantics", that adds cognitive overhead and makes the code less readable. Operator overloading leads to abominations like cout &lt;&lt; "foo"; which have special case semantics that I have to learn, instead of cout.print("foo"); which I will be immediately clear to anyone that's done programming in just about any language.
Me reads title, "Top 10 Algorithms for Coding Interview" OK. Click the title. #1. 1. String Without code auto-completion of any IDE, the following methods should be remembered. ???? 
Pretty cool blog post. 
Thanks! Been experimenting with HtmlUnit aswell. Found out that Twitch chat can be accessed via IRC. So I'm making an IRC bot with pircBotx, with success! (For anyone who was interested.)
Who wants to hire a guy who know how to make his own LinkedList but knows nothing about apache-commons?
Having used at least a dozen different string classes in my life, I can't keep them all straight, and it would be a bad idea to try. Heck, I'm using two different matrix-math libraries in the same project, right now... THREE.js and CANNON.js each have their own. Quick, which one has a class named Vector3 and which has a Vec3? Which of those 3-dimensional vector classes has a .set(x,y,z) function? What kind of fool do you have to be to not check, especially since Javascript doesn't remind you if you get it wrong?
Pretty sure these questions get asked just as much today as they did in 2005.
Yes that is true you can jam a ton of code in a small area. I think it was made worse by the fact that at one time the scala community really pushed pure functional, no mutability and shamed you if your approach wasn't clever. I think that was a bad idea. The direction seems to be changing now and if its more readable to use a var and not use recursion the community tends to lean toward the readable solution.
 public Node peek(){ if(top != null){ return top; } return null; } Kinda pointless. This does the same: public Node peek() { return top; }
Is the problem just the extra space. If that is the case just remove it before processing testString.replaceAll(' ',''). I might have the syntax a little off but that is the idea.
PrimeFaces is great. RichFaces and Oracle ADF are okay as well.
Try this: [()-\s]+
The problem is just the extra space but I would like to know how to handle such a situation should it arise in the future and removing is not possible. (If say the string was "(123)-345-7890" then? Removing '-' will not work.)
you mean "[()-\\s]+", right? I tried it, didn't work. edit: My bad. Didn't know reddit removes the extra '\' character.
I agree with pretty much everything here. However, I deal primarily with byte streams where I work, so seeing bit manipulation and masks are not unheard of (but still uncommon). I would just suggest that you know they exist and what they do. Anything past that you can easily learn on your own of you need them.
[Open Hatch](http://openhatch.org) does this.
&gt; ???? I thought the same thing. Stopped reading right there.
Switzerland is missing. Also Scandinavian countries. Ditto Canada. Having worked in both Switzerland &amp; the USA I can hardly believe the USA is coming out on top. Salaries in the USA are generally lower than in Europe. I guess I am (and others too) too lazy to vote to fix the numbers...
If you are trying to get phone numbers, why don't you match on the numbers themselves? Then it doesn't matter what format they are typed in as 
&gt; I'm not looking for a straight out answer here(I feel like that would be cheating and I wouldn't learn) I applaud that attitude - it'll take you far with this sort of topic. And as it happens, I probably won't be much help here because I'm not familiar with the quicksort algorithm works (although I can see by the code roughly what it's doing, so I'll use the "teach a man to fish" approach. Often the best way to find problems in your code is to explain it to someone else ([Rubber Duck Debugging](http://en.wikipedia.org/wiki/Rubber_duck_debugging)). So... You said *"We are to modify it with different pivot points"*, so I understand why you changed this AnyType pivot = median3(a, left, right); to this int middle = (left + right) / 2; AnyType pivot = a[middle]; which will cause it to use a different initial pivot value. But I don't understand why you changed this: int i = left, j = right - 1; to this: int i = left, j = right; or this: swap(a, i, right - 1); //restore pivot med3Quicksort10(a, left, i - 1); //sort small elements med3Quicksort10(a, i + 1, right); //Sort large elements to this: swap(a, i, middle); //restore pivot midQuicksort0(a, left, middle - 1); //sort small elements midQuicksort0(a, i , right); //Sort large elements Perhaps you can explain your thinking behind those changes? (and maybe that'll spark in you the realisation about what's wrong - always a good moment!). Another good way to find out the problem is a dry run, where you act as the processor. Get a piece of paper and a pencil and in your head step through the program one line at a time. Use the paper to keep a note of each variable and it's value; update your variables as you step through the code. Keep an eye on how the array your're sorting is changing. It's a rather handy debugging technique and once you get the hang of it you can often do it in your head if there aren't many variables to track. Of course, you could do it the modern way and attach a debugger and single step through it, but where's the fun in that?! (also, I find that using a debugger doesn't force you to think about the algorithm in as much detail. Or maybe it's just because I'm an old fart and I've been programming since before I had access to debuggers...). Hope that helps a little. 
Once again, it's really just a detail, but I feel like most interviewers would give you some style points for it.
I would expect them to. JavaScript is more widely supported by the browser. A lot of games (Runescape) are doing this now that they have HTML5. Applets suck.
Not sure what applets and HTML5 have to do anything since they specifically talk about moving from Java+Spring to Node.js+libs on the server side. 
Based on those numbers they had JavaScripters doing Java in the first place. Maybe that's why they had such poor performance from their code and the developers.
These days these kind of statistics have no sense. You can live anywhere in the world while making US level money. Good internet connection is all u really need to be happily employed. 
What? Just because someone asks an algorithm question (or as you put it "just math") doesn't mean the interviewer can't turn around and ask you to code it. I'm sorry but some of these ideas are fundamentals... If you don't know basic data structures, sorting, and the runtime complexity then on the job how can I expect you to build upon those ideas? Very rarely have I seen data structures that are not augmented in some way. It is a strength to know a given languages common libraries but not knowing fundamentals is like going to a doctor and having them just consult another doctor to figure out your diagnosis -- it's time consuming and you know that your "doctor" doesn't actually know anything!
Probably haven't built anything at a large scale then? There are a lot of cool ideas and algorithms involving bit manipulation for space efficiency 
guava: Splitter.on(CharMatcher.anyOf("()- ")).omitEmptyStrings().split("(123) 456-7890")
That's just an example. I would like to know how to handle these situations in general.
It's not that they don't get asked, it's that they're not good predictors of a programmer's on-the-job performance.
I think there is a place for conceptual CS questions. A good interview should have a mix of theory, design, actual coding, and knowledge of common tools. 
On the other hand, would you rather hire the guy who knows why and when you should use a linked list versus an array-based list or the guy who blindly uses libraries as is convenient?
I appreciate your response! I'll definitely try both of those methods. I think what I'm having the most trouble with is these two lines while(a[++i].compareTo(pivot) &lt; 0){} while(a[--j].compareTo(pivot) &gt; 0){} Does this test i/j against pivot BEFORE incrementing it, or does it increment/decrement first and then test? The reason I changed the first thing you mentioned(after the raw pivot point) was because in Weiss' example the median3() does a little bit of sorting itself. It places the least element on the left, the largest on the right, and the meadian at right - 1. Perhaps that line should be left - 1, and right + 1? Could it be missing those as it's sorting? The reason I changed the second thing is because the pivot isn't at right - 1 anymore. Maybe I should change those up a little bit more too? I don't think I need that swap before the recursive calls.
PL/Java could use some help getting it working with PostgreSQL 9.2 and 9.3 SymmetricDS could use an applet based localstorage syncer
Is this supposed to do something more than JMX? 
the term **++i** increments the value of i, then uses its value (as opposed to **i++**, which uses the value of i, then increments i). For example: int a = 0; int b = a++; // b is now 0, a is now 1 int x = 0; int y = ++x; // y is now 1, x is now 1. So while(a[++i].compareTo(pivot) &lt; 0){} will: 1. add 1 to i 2. look at a[i] 3. comapare it to pivot 4. if it's less than pivot, we'll go back to #1 So, it's incrementing i until the value a[i] is greater than or equal to the pivot value. 
Check out /r/progether.
It is different. Failure means something competently different than it does in government. 
Yea, I've seen the databases behind a few projects and its no wonder they fail constantly, but they just take 2 weeks of downtime to patch it up and move on. Doubt most companies could survive something like that. Luckily I've been on/started up projects that are isolated from most of the insanity and do everything I can to abstract the rest away into something that makes sense. On the upside is I'm generally ahead on work due to the pace of everything and have very low risk of failing.
I think it's funny that people claim that they used to have an "artificial boundary" with developers that could "only do JavaScript/HTML" and developers who could "only do backend stuff". And that they now want "unicorns" that can do both front-end and back-end because you are moving to JavaScript. Sorry but IMHO a good developer has no issue jumping between a few languages because a good developer doesn't "know" a language, he "knows" software engineering and sees that a language is just a tool. No, a "unicorn" who can only do JavaScript is better named "mediocre developer". In the real world (as opposed to the one imagined by some IT managers) developers are really good at certain stuff because they enjoy it. Back-end developers tend to be good at the integration stuff because they enjoy doing that. A developer who's great at HTML and CSS probably will be miserable doing a lot of back-end stuff because he works most optimal if he can create great user-interfaces. I think these decisions are made bu very ill-informed managers that are being adviced by people who want to jump on the latest 'cool' technology without considering the implications. Don't get me wrong; I love Node.js, but it's far from the only way of doing asynchronous processing and secondly I seriously doubt Java was the bottleneck anyway. And even if the synchronous processing was an issue they could have moved to for example Vert.x which would have allowed them to reuse a lot of the stuff they already had.
Your right i have made a mistake it the maths (sorry). But its the line m= (float) (m / 1000); Thats confusing me?? I dont understand why i need the "m = (float)" could i not simply leave that out and just have the m/1000? P.S. Is it bad practise to leae a space between my if statement and my else if statement? I do it mostly for readability.
yeah, i'm going to agree that *doctor* is a poor analogy. the compiler is a translator. the source code we work with is human-readable, but not machine-readable. the compiler turns human-readable code into something much more efficient and effective for the computer to read.
Perhaps they let the HR dept hire developers and did the good old java/javascript confusion thingie.
While I think it's great that you're providing these tutorials it's a shame that your code is full of bad habits: - why is your class name lowercase? - why are your button variables static? - why do they lack an access modifier? - why not using an array for them? they are generic and serve the same purpose - matching the size of your JPanel to that of your JFrame doesn't make sense, because that excludes border width and title bar width - not using a layout manager is actually way more work than using one for the your presumably easy layout. - what are the addClick, subClick, etc. variables for? because you can always check the source object of an action to determine the button that has been clicked Upvote for the effort though.
You can jump between languages and platforms if you're not doing anything that takes expertise. Things like gluing together frameworks into trivial systems. I'm not saying that's not valuable work, it's exactly what is needed in a vast number of cases. However, there are many areas that require specialized knowledge of a language, platform and specific fields. The only way to get that knowledge is to focus on that area exclusively for an extended period of time. And to do that, as you pointed out, you need to enjoy that area (or enjoy the money they pay you). In year or two they will be writing a blog about how these "full stack engineers" of theirs are getting replaced by people with deep understanding of specific areas because their previous engineers couldn't actually keep up with the full stack more than superficially. Because realistically, today's full stack is way too complicated for one person to master. And that's the whole point of the stack, to provide abstraction layers that allow you to master a limited, manageable piece of the puzzle.
Verbatim string literals would be nice too. Not essential by any means, but nice (especially for regular expression stuff).
Glad to hear it :)
If you understand the constructs that are used to define languages in the first place, like functional vs OOP, type systems, data structures, etc. I feel like transitioning to new languages is pretty easy. I think that is what makes a programmer truly good.
If you are competent in java, HTML and CSS should be trivial. JavaScript has it's quirks but usually most modern frameworks hide that stuff to a reasonable extent.
&gt; Having worked in both Switzerland &amp; the USA I can hardly believe the USA is coming out on top. Did you see the part where they say it's adjusted by the living costs? [The link](http://www.numbeo.com/cost-of-living/rankings_by_country.jsp) they provided shows Switzerland with the second highest cost of living, and Norway (a Scandinavian country that you mentioned) in first place. Given this, I can easily imagine USA coming out on top - there's areas (particularly the larger cities, Silicon Valley, etc.) where the income is just as high as in Europe.
Because that statement can not be reached. That is what “statement unreachable” means. Check the for-loop before that statement. It does not do what you expect it to.
one little typo can cause such a headache... :)
A long lasting for-loop ;-)
And this is why one should always use a typeface that makes distinguishing `i`, `1`, `I` and `l` easy (and `o`, `0` and `O` (as well as `Ø` if Danish/Norwegian)) Courier New is definitely *not* such a typeface.
You never said anything about apache in your post.
What typefaces do people generally recommend that look nice and make catching this sort of typo easy(ier). 
And that my friend is why I use google/stackoverflow so much ha
&gt; It's not really relevant how things "should" work in theory, Let me rephrase. The whole point of OO is that once you define a class you can use it without worrying about how it works. It's about breaking down a problem into small parts in such a way that you can ignore the specifics of those small parts when you combine them into more complex systems. If you are writing good OO code then you do not need to care what the '+' operator does specifically, just that it adds two instances. &gt; In practice a good programmer should care about what exactly each operator does. That's the opposite of OO programming. If you need to think about the specifics of the operation every time you apply it then you've failed. It's no different to a method. Once you've defined ComplexNumber.Add(ComplexNumber c) you don't need to worry about how it works every time you call it. If you did then your code would be impossible to comprehend. &gt; The idea of operator overloading is to make code more readable, but to me that has the exact opposite effect. Only when operator overloading is abused. You should only overload operators when they have unambiguous meanings in the context of the types. '+" applied to complex numbers or vectors has a clear meaning and makes code more readable than .add() '+' applied to instances of StudentEnrollment does not. There is no difference between this and choosing good method names. Overloading '+' to do something other than addition is equivalent to giving a method a misleading name. Some responsibility falls to the programmer. You can't force good code through language design. When applied properly, operator overloading turns this x = a.multiplyBy(b.add(c)).subtract(d.divideBy(e); into x = a*(b + c) - d/e; do you really claim that the first is easier to understand?
I think you are underestimating the difficulty in becoming a good full-stack developer...
Yes - also if I was a product manager at PayPal, I wouldn't be comfortable having my UI guy implement low level database management code for one of the largest payment gateways in the world. Maybe that's just me though...
I recommend [Source Code Pro](https://www.google.com/fonts/specimen/Source+Code+Pro).
Yeah Node.js doesn't work like that.
Thanks. Actually, messing around with JDBC is next on my list. I'm aware of things like Maven/Ant but I know very little of them. Good tip about the shortcuts. I currently have my shortcuts set to emulate Visual Studio.
With plain strings, there's no way there's going to be that kind of an issue. Collisions can only affect performance, not correctness. It's much more likely that your code is correct, or that your code is broken and Java's HashSet isn't broken.
 ;1&lt;10; ...
If you learn languages one at a time, you will have a hard time switching. If you study about languages and paradigms, you will have little issue switching.
The unicorn isn't about people that can use multiple languages, it's people that can program and design ui's (which is completely unreasonable to expect).
&gt; it is fine as a server-side language Really? Tomcat is just about the most frustrating piece of software I've ever had the displeasure of working with.
I agree. Put their experts where their expertise lies. Don't have the same guy running around in all sorts of different unrelated areas.
&gt; String c2 = Arrays.toString(c); &gt; I use source code pro, although I never hunted around too much. I really like the sans version too.
&gt; one of these "Top 10 Programming Fonts" e.g. Damn yes!
"Imagine an HTML developer who has to ask a Java developer to link together page “A” and “B”. That’s where we were. This model has fallen behind with the introduction of full-stack engineers, those capable of creating an awesome user interface and then building the application backing it. Call them unicorns, but that’s what we want and the primary blocker at PayPal has always been the artificial boundary we established between the browser and server." Well... some of that slowdown - most of it really - would be artificial. They're a large enough org that they could invest in a bit of training, education and developing some tools to let the person who wants a link from A-&gt;B do it with minimal involvement from senior Java engineers. Wholesale architecture change because of those sorts of issues speaks far more to management issues than it does to technological boundaries. Hey - https://code.google.com/p/plv8js/wiki/PLV8 - now you can write Javascript in your postgresql. I guess Paypal should migrate all their data to database so the entire team change do any data changes they want. This seems to be about at the same level.
Okay, in line 24 your conditional portion of the for-loop will continue to run as long as 1 &lt; 10 (one less-than ten)...which is always true. Change it to i &lt; 10. 
I find the reported performance increases interesting. Node is built around preventing blocking IO, which is probably the reason their performance has improved so much. While java has NIO I wonder if they were using it extensively.
What an interesting story... My experience using wicket is we have ui developers doing JavaScript, service developers doing back end work, and other java devs doing frontend wicket work. I feel comfortable in all these roles because I took the time to understand what the hells going on in each layer... But I know most of our service guys turn green when we talk about them contributing to front end and vice versa... Not sure how to feel about this... I would want very specific people working on my service layer for obvious reasons... The ui can fail without tearing your system apart... Not just drag and drop developers because they all know the same language... 
Lol I hate mistakes like these
Thank you! Im going to come up with some tests and see if maybe it was indeed the file.
I personally find graphs really fun. Some good libraries out there that you could make some cool tools /toys with.
Exactly. This just highlights how absolutely disconnected from reality PayPal management really is. 
I really liked computer screens in [Elysium](http://www.imdb.com/title/tt1535108/) (e.g. writting rootkit in assembly language, nmap ;)
&gt; Sorry but IMHO a good developer has no issue jumping between a few languages because a good developer doesn't "know" a language, he "knows" software engineering and sees that a language is just a tool So. Fucking. True. I've been programming for damn near 10 years now. I probably only know 1 or 2 langues REALLY well (Java, and PHP being the 2). I am confident I could write big applications though in JavaScript, Python, C#, and C++. The concepts are the fucking same just syntax is different. Anybody who says they cant switch languages on the fly is lazy. 
Look into Gradle. It's an excellent replacement for Ant. The "application" plugin for it will manage a lot of the deployment minutia for you too.
And really... I get it. I get the desire for people to be able to do more. I've been on teams where some people just *couldn't* help out due to skills, but... it was mostly a time/training thing, which never panned out on a ROI basis (well, imo it would have, but I wasn't making those decisions). But just because someone can read/write Javascript doesn't mean they will be able to dig in to a complex system. The *complexity* is the problem - the language is just one (often small) component of the complexity.
Apache Commons Lang has some interesting functionality. It could lead you in to other areas of Java. Concurrency, for example.
I'd recommend learning Guava, it is core libraries that Google uses for in house Java development. I'm 4 years into a java career and wish I would have taken a look at Guava earlier for both time saving and overall beauty of code. https://code.google.com/p/guava-libraries/
It's not really something complex that you need to "learn", but I definitely recommend you familiarize yourself with Apache Commons Lang. It's just something that you will probably use all the time, and is useful to have in the back of your mind. (Seriously, StringUtils is the best class ever.)
Gson is much fun. Be careful because polymorphic members aren't fully supported.
you're right but in mentioning the most popular one open source java projects there aren't too many more popular than the apache one's
&gt; A lot of **games** (Runescape) are doing this now that they have HTML5. Applets suck. strawman arguments...
I *love* Pragmata Pro. Well… actuall, for coding I currently use Droid Sans. Yes, the not-monospaced version. Because, like Uncle Bob says, source code should be able to be read like prose. And I wouldn’t want to read prose in a monospaced font. I use Pragmata Pro on terminals and there it absolutely kills every other font I’ve tried so far.
Makes everything so much nicer to deal with
I hope that the now ubiquitous browser support for all of the features needed to drive single page apps means we're now reaching the beginning of the end for server-side controllers and JSP/ASP templates. 
Compiled language wins again.
Your replies have helped me a ton. I finally got them all. The first pivot point, median of three, median of five, middle, and random! You were right, it was those things that you pointed out that needed fixing. For one, the pivot point needed to be placed at the end. This was unnecessary in the original because the median of 3 method sorted the last element to be greater than the pivot, and the pivot was placed at the second to last array space. This was to allow i and j to step through the array and swap items, then swap the pivot with i because then everything would be greater or less than the pivot. My middle pivot never moved from its place, therefore it would mess up when a larger element needed to be placed after the pivot, but i could not swap with j. This was causing it to be "semi-sorted." Here's the fix if you or anyone else is curious. public static &lt;AnyType extends Comparable&lt;? super AnyType&gt;&gt; void midQuicksort0(AnyType[ ] a, int left, int right ) { final int CUTOFF = 2; if( left + CUTOFF &lt;= right ) { int middle = (left + right) / 2; System.out.println("pivot is: " + middle); AnyType pivot = a[middle]; swap(a, right, middle); //begin partitioning int i = left - 1, j = right; for(;;) { while(a[++i].compareTo(pivot) &lt; 0){} while(a[--j].compareTo(pivot) &gt; 0){} if(i &lt; j) { swap(a, i, j); } else break; } swap(a, i, right); //restore pivot midQuicksort0(a, left, i - 1); //sort small elements midQuicksort0(a, i + 1, right); //Sort large elements } else { insertionSort(a, left, right); } } Now I just need to work on how to use 0 as a cutoff value. I'm not sure if it's possible with this form of quicksort though. I believe it's designed to specifically have a cutoff value at some point. Again, thanks a lot!
Nicely done! I'm glad you figured it out.
You're missing the point. The problem is the cognitive overhead that comes from the mere fact that the language allows operator overloading. Every time I see an operator in such language, it might have special case semantics. Those semantics may be "unambiguous" to you, but they're not to me when I'm reading your code for the first time. Can you make code prettier with operator overloading? Sure. But being pretty is not the same as being easy to understand.
Sorry, but that's a fallacy. Expertise is not just about syntax and paradigms. That's just the tip of the iceberg. Expertise is learning idiomatic code, learn the HUGE ecosystem that exist for each language, learn the specificity of the target environment. 
The ecosystem is what matters. I can write a while loop in Python or Java just fine. But knowing about dataframes or ode solvers in Python are the specialized knowledge of a language.
Most languages have well defined best practices for common tasks (use framework x for task y). The only part that could be considered difficult is the new vocabulary, and if you learn about languages at a higher level of abstraction, you will already know a majority of these words. *: obviously someone with more experience in the language will produce higher quality code in a shorter time, but the topic here is learning new languages. The programmer that learns about language theory will always have the advantage.
Again, I have to disagree. Just look at Java, server side. Which framework do you use? Spring, a JavaEE container, or a reactive one (e.g.: Play!)? Hum, let say you go for JavaEE which one? What about your front-end? Component-base (JSF, Wicket, Tapestry?) vs page base vs REST? And why not GWT or Vaadin? There no such well defined best practices, just moving trends. And that's for a language that has a strong emphasis on streamlined SDLC. The state is even worse (or more complex) if you look at lower level languages like C, or rising languages like JavaScript.
Yes but it is documented in the typesystem, so you are forced to check for an empty value.
You can compile openjdk already for android, there already some experimetns out there
They probably could have had similar production benefits (production of code) via grails or play or something else jvm based. Lines of code, people required, number of files, etc. Production speed numbers... node seems to have an edge at numbers published at http://www.techempower.com/benchmarks/ but those also aren't real world for paypal's load. 
Yeah, I need to look properly at all the Apache Commons libraries. They seem vast and detailed. I've only just scratched the surface I think. I'll check out Lang when I get a chance - thanks. Concurrency meaning stuff like [**ExecutorService**](http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html) right? I just implemented that in the application I talked about in my OP.
Thank you! I'll definitely work through that tutorial. I've come across the term Hibernate before, but not really looked into it. JPA and JSF are completely new to me.
Have you considered upgrading your installed version of Java? Try that first, as the message you received and a quick googling thereof indicates the root cause.
That depends on what stack you are using. If you are using a complicated mess of frameworks and libraries then you are right. If you use something simple like JSF and PrimeFaces it is easy to be able to build the whole application.
Ugh, you need to define what area are you planning to work in. There are thousands of libraries for all scenarios and areas of development. Are you interested in core java? Data structures? Front-end? GUI? Web development? Backend? Database interaction? Also, what do you think is fun? Last time I wanted to do something fun I wrote a bot to take all the tedium out of a browser-based on-line game. I used Selenium framework (http://www.seleniumhq.org/), which is primarily used for testing web-applications, but it allows automated control of a real web-browser, so it can be used to automatically do anything you want with a web browser. --Coder
That's the same as what I wrote isn't it? (except I didn't put the quotes around the pattern)
I have a problem with Java. Someone installed it. Ka Chow!
Modern browsers (which one are you using? You didn't mention that in your question) will have a blacklist of Java versions that are insecure and will refuse to run Applets if such a version of Java is installed on your machine. To get it fixed, it is best to remove old and insecure version of JRE or JDK, and install a new more secure one.
&gt; node seems to have an edge at numbers published at ... i follow those benchmarks closely, and node doesn't have an edge :) it does fairly well for a JavaScript environment but - according to these numbers - is not even on par with java; and for some test permutations other JS environments actually do better than node (e.g. ringojs in all tests talking to SQL databases).
What sort of expertise do you mean? You can write non-trivial software without being an expert in the language it just might not end up being as well designed or performant. Not being an expert in a language most often only results in more time spend on looking things up and having more bugs to fix (in your hopefully well tested code).
What did you use to make the diagram?
If their Java code was slower than their JavaScript code then there was something seriously wrong with their Java code.
all versions of Java are by default blocked in firefox 24+ https://bugzilla.mozilla.org/show_bug.cgi?id=914690 there was quite some outrage about this. edit: see below
Quite*
NOOOOO. I see, thanks
my fault - i was looking at nodes vs grails, which is what I do a lot of work in, and nodes was/is faster than grails in those benchmarks. But both spring and raw servlets kill nodejs as well. http://www.techempower.com/benchmarks/#section=data-r6&amp;hw=i7&amp;test=db&amp;l=bk&amp;f=3drk-0-0 
post the relevant section of your code if you are still having the problem
If you're new, you use the most popular framework as it will have the most developed ecosystem with the most help online. Having never used javascript in my life, I was tasked with creating a web app. Searching on google informed me that the current popular trend is to use an mvc type framework. A little more searching informed me that angularJS was the most popular of these frameworks. Due to it's popularity, every question I had was answered online, and completing the project was simple. Now I could never have learned angular quickly enough if I had not studied advanced object oriented programming. With this knowledge however, I was able to learn it with only the most trivial knowledge of javascript. 
I think since there is probably more demand for RoR developers, companies tend to accept remote work more easily as an option. Then again, i could be wrong :) That being said, i worked remotely for 1-2 years though i only managed to do that because i was already working at the company before (i.e. in the office).
The idea behind studying languages instead of studying a language is that you will have experience in every language. A programmer that has studied logic programming won't fear learning prolog. Teacher go to school to learn how to teach, they go to teachers college to learn teaching methods. There's a lot more to teaching then simply knowing the subject, I would argue that that's one of the least important parts of being a teacher. Good teachers need to understand how to communicate to their audience; you teach in a very different manner when talking to kindergardeners vs grade 10s. These are the skills they have trained and acquired. I don't care if you're a founding father of a subject, if you haven't studied teaching methods, you're going to do a terrible job explaining it to young students. It is very common for teachers to be plopped into something they have no knowledge of. Teachers will usually have taught every subject by the time they retire. I see nothing wrong with placing programmers in any programming position. Having mastered one programming language does not make you a good programmer. *: There are always edge cases, you wouldn't hire someone whose never used ADA to write your missile launch code. Just as you wouldn't hire someone whose never taken calculus to teach it in post secondary. My view on programmers applies to the commons, and most programming is in the commons (writing nice interfaces for databases being the most common).
They do exist, but as you say, there seem to be much more Rails openings ... generally, they pay less than Java. I would say it is a really good idea to learn rails anyways (I have not done it yet).
You do know you're on the Java subreddit, right? 
There are more Ruby on Rails remote jobs because the startups (mostly) that have those openings can't afford to keep you onsite (janitor load, coffee, office supplies, square footage, furniture, etc....). Most companies using Java care about how maintainable and enhancable the application will be, so they have the facilities. The only way to get remote at those places is if you knock it out of the park, and they build up the trust in you. 
People can't take a joke? Who cares. I &lt;3 Java.
libphonenumber by Google is simple and kinda useful
Yes. ExecutorService is key to concurrency is Java. Good luck!
Yeah I did. But like I said, twitch supports IRC so I'm moving from JSoup to pircbotx. I've actually finished the project. Now working on enriching the interface.
Just a little tip: don't title your post "I have a problem" At least make some sort of effort to describe your problem in the title. 
So far so good, I've changed up my application (type of web crawler) to use that in a couple of places. One particular method pre-change took around 15 minutes to run, and now it barely breaks 30 second. Still learning loads, like I should wait for the terminating threads to shutdown before moving on. That had me scratching my head xD
Thank you, I'll check them out.
Couldn't tell if it was sarcastic or not, that's why I didn't down vote you :P
How big are the executables?
Ok, will consider next time.
Points on reddit isn't something to live your life by! :)
&gt; It depends on the project size. All the JAR binaries will be built into the MSI. It sounds like it uses Inno for Windows. I guess I was asking about the size of a Hello World minimal app. I assume there is little overhead to adding extra code, but I expect a good chunk is needed to bootstrap. Am I right?
The user experience is better, since even non-technical users are accustomed with the idea of an installer and next, next, ..., finish flow.
 \D+ Simply split on all continuous non-digit characters.
Not free but the book "Spring in action" is good and covers much of the same topics as the Spring training course by VMWare.
Last semester for advanced object oriented design, the focus was using Spring and other advanced Java technologies. We used [mkyong.com's tutorials](http://www.mkyong.com/tutorials/spring-tutorials/), in conjunction with [Spring in Action](http://www.amazon.com/Spring-Action-Craig-Walls/dp/1935182358/ref=sr_1_1?ie=UTF8&amp;qid=1385767640&amp;sr=8-1&amp;keywords=spring+in+action+4th+edition) and [Spring Recipes](http://www.wowebook.com/book/spring-recipes-2nd-edition/) Even so, Stack Overflow was a very helpful resource, but that presupposes that you can articulate your issue well and condense it into a readable question. Personally, my issues with Spring came with getting the configuration right and understanding how the inversion of control worked behind the scenes. Once my understanding increased, it was easy enough to get configured and running.
I've been using Spring Mvc at work for 2 years, I feel pretty comfortable getting new projects set up, PM me with specific questions I'd be more than happy to help
wait... what? did you actually look at the numbers? the so called "jvm" languages such as "grizzly" or plain old "servlet" kill "node.js" by 3:1!! hell, even wicket or the spring framework (both based in the jvm) fare better than node.js. javascript (dynamically typed) will never outperform the jvm (ie. java: statically typed). 
I've been using Spring for a few years and still think this tutorial is the best to learn the foundation. http://docs.spring.io/docs/Spring-MVC-step-by-step/ After you pick this up, you can learn the 'newer' techniques like using annotations for stuff like URL mapping and validation, but this will help understand how everything works. 
&gt; next, next, ..., finish flow These are called [Wizards](http://en.wikipedia.org/wiki/Wizard_(software\)). Should make them easier to google for. :)
i replied back earlier to oberhamsi - yes I looked at the numbers, but I was originally looked at Grails specifically - jvm based, but node beats it. Yes, for other JVM stuff, node is way behind.
The installer includes a private JRE in the install, so you're looking ~30MB for JRE7.
 //To print by index System.out.println(id.get(1));
The link is now broken, but I am sure India was there in the list ;)
I am taking this class through UC Irvine Extension: https://unex.uci.edu/courses/sectiondetail.aspx?year=2014&amp;term=WINTER&amp;sid=00129 I took the Java EE7 class and I liked it a lot.
Bundling your own JRE sounds like a great way to get the blame for security vulnerabilities.
Well, not knowing Maven is going to cause you a lot of pain and slowness. I know that from experience... As a person who came late to Maven, I was frustrated for a long time... Once I learned Maven, that opened a LOT of doors for me... Learn Maven, you'll thank me!
TL;DR: Spring *does* make app development easier... for real world tasks. For toy code and learning the language, it's overkill. Java can be edited in Notepad, if you really want. Syntax highlighting is nice, but you can get that in something like jEdit. But the first time I tried an IDE like Netbeans, I freaked the hell out, because it was complicated and hard to use and wanted me to create a fucking *project* and who the hell are you to tell me how to structure my source code, and how do I know you aren't going to do something stupid under the covers? But now that I understand Netbeans, and understand what it provides me, I wouldn't even think about developing without it. The simplest way to compile a Java class is to just invoke javac, but once you get into more complicated projects, with multiple classes in multiple packages, with multiple dependencies on multiple libraries, that quickly becomes unmanageable. That's when you need something like Maven. Maven is a bitch. It's complicated, frustrating, and poorly documented. But it's also the best dependency management tool in the Java ecosystem (though Gradle does have my interest at the moment). Same story with Spring. Spring is an essential part of the software I develop, and it has saved me hundreds, maybe thousands of lines of code. But the software I develop is complicated, in the hundreds of thousands of lines of code range. If you're just starting out, writing Hello World and things like that, the extra complications that Spring adds aren't worth it. But in a few years, when you realize how many problems Spring solves for you, you'll be glad it exists.
I second this. I found Spring's learning curve to be damn near vertical. This help sort it out. Also, if you can find a working spring project it can help clarify many things.... assuming it's be done right. 
Guice! Makes dependency injection soooo simple.
Since you know some of the spring MVC and java ee frameworks .. Can you tell me/give me a good picture/lecture of the architecture of java ee. For example: the core architecture of spring MVC is Model View Controller.. I think java ee has something to do with containers of servlets and then java beans communicate between some servlets and a view container. I keep looking at pictures on Google but I can't make sense of it. Or the architecture of java ee just isn't that organized and depends on a lot of java beans. Thanks ahead of time.
I don't fully understand your problem, but I just want to make sure you have stepped through with the debugger.
Which brings me to the second complaint, that this page only describes a tool to construct windows packages in a cross-platform IDE with a cross-platform language. Does this work on other platforms too?
Most of the security issues are with the browser plugin, which is not relevant here. 
Most of the vulnerabilities [but not all] are associated with *breaking out of sandboxes*. Which may still be pertinent. But more to the point, depending on a variety of things, you may be deploying to an environment where having insecure things is, in and of itself, a problem. Even if it's not the active or system-wide one.
Works with [linux packaging](http://imgur.com/H5SOU9W) too. Its pretty cool if you want to keep install requirements low.
Correct!
That's the problem. I was going to try that but it's a pretty long tutorial. If worked on it for the next 3 days, then I get to the end and I could't make the code work I'd probably abandon spring altogether.
I copy/pasta'd their code into Eclipse and got a bunch of errors. Copy/pasta'd their pom.xml and the errors are still there. Won't compile, won't run. Isn't that smashing?
That's the general status with pretty much every open source project, backed by companies or not. We love to code, not to explain. And the books are outdated quickly... welcome!
 // Reverse on purpose ??? :)
Not going to bash eclipse or anything(you should just use whatever you're comfortable with the most) but for some reason after trying intelliJ I could never really go back to eclipse and I have no idea why...
Is the community edition just crappy or something? I tried it on Windows, and it looked like crap.
I thought the same thing at first, but now I love the interface. I takes getting used to.
It told me a similar thing when I was working on a game. It somehow realized that my X, Y, and Z coordinates were out of order, even though they were all the same type. It is nice though, since I would probably never found that typo otherwise.
If you want it to look like it does in the screenshot, select the Darcula theme.
it's basically a lazy way to rotate the button shape 90 degrees
If I wanted to make graphically good looking games, while also having good performance, what would I use with java? (using 2d) Edit: Also, do users have to install anything extra for opengl or direct x, or do these come built in with most systems? (Windows / iOS)
Check [LibGDX](https://github.com/libgdx/libgdx/), you develop game in java and then you have multiple 'starter' projects which just run your game on desired platform.
OpenGL comes bundled with the driver in the same way DirectX will. The only problem is that older PC's wont have more modern OpenGL support. You can use legacy OpenGL (1.x) if you want to target every windows PC, but this wont allow you to leverage it as much as modern OpenGL. If you settle for 2.x you will be able to target pretty much everyone. It's pretty much the same as the whole DX9, 10, 11 issues. People who have DX11 will (most of the time) have support for GL4 and upwards. Those with only 9 however may only have support for 1.x. EDIT: Minecraft runs OpenGL 1.x (soon to be 2.x I think) with LWJGL and pretty much every PC can run that. You should be fine. EDIT1: To clarify; when I've said "driver", I mean graphics driver.
I wouldn't say irrelevant since your closer to the core of Spring and if you want to understand how it works its worth it, but I agree that in later versions you can write less code and particularly configuration... I'm really excited about what they are doing with Spring Boot/Spring 4. Also if you go down that route from the beginning you need to be willing to accept some 'magic' and later can discover the inner workings of the framework. 
Yes, but what I'm saying is I want to de baby steps. Get a "hello world" example to work that I understand from beginning to end. Then move on to the next bigger step. So many tutorials - even official ones - require tons of time and at the end you don't even know if you'll get the basics down. I just don't want to make that kind of time investment right at the beginning.
my question is, do most computers these days already have open gl installed, or will users need to install it themselves?
All I add to .gitignore for IntelliJ is .idea/ and *.iml. I think some projects types have *.iws files too. 
Spring did make development easier at one point. Now we have Java EE 6 and it is much simpler to work with. Spring at this point adds complexity. I switched over to CDI and JSF with PrimeFaces and my productivity is at least 50% better.
Java EE using JSF as its MVC. It is similar to Spring in a lot of respects. The main difference being JSF is a component model. This means that instead of spending the majority of your time writing html, CSS and JavaScript you can focus on the business logic. Take a look at PrimeFaces.org for a good example with code.
you mean drivers for their graphics card?
Checkout libgdx
Yes sir
Irrelevant is truly the wrong word :) Probably a little outdated as things such as annotations became common in Spring 3. They have a show case project https://github.com/spring-projects/spring-mvc-showcase, but looks like they are already on Spring 4 (snapshot). 
Yeah, libgdx
I'm not even using IntelliJ but it takes 2 lines in gitignore and 3 keywords on Google to solve what was a dealbreaker for you Anyway: http://www.jetbrains.com/idea/webhelp/creating-maven-run-debug-configuration.html
? I didn't say that was the dealbreaker. 
Once you start learning shortcuts you'll never want to go back. 
You should start with mvn compiles on the command line. Also directory structure matters.
You should add that to the comment!
Next step: develop an IDE that can read comments and infer things from them.
I've seen the jsf + primefaces combination recommended many times here. Do I need to know java ee before I try to learn jsf? Also is there a good book on jsf for someone who knows core java? Thanks
What do most companies that work with JEE use? 
Netbeans has a really easy Spring tutorial. If you are using a different IDE than you can download Netbeans complete with an application server. There is no configuration required. They also have lots of good tutorials with the more modern Java EE framework. Spring Tutorial https://netbeans.org/kb/docs/web/quickstart-webapps-spring.html If you want to compare with JSF https://netbeans.org/kb/docs/web/jsf20-intro.html All web tutorials https://netbeans.org/kb/trails/java-ee.html
I've used both at large companies.
Like they no longer are accurate.
I do indeed : )
Or make a method with a self explanatory name.
This may be a silly question (actually, it is for sure), but: My university has us use Eclipse for everything. And I do like it so far, but IntelliJ's features look really cool to me and also its dark theme. Is it simple to make a project in IntelliJ and have it be compatible with Eclipse?
Just store the project files elsewhere. [With Maven](http://i.imgur.com/bE7VIcb.png), no files added to the folder. And [with "native" project structure](http://i.imgur.com/0LHLvZV.png), this will still create the *.iml file in the project directory as otherwise there is no info how to build your project. 
We already have [annotations](http://i.imgur.com/MKbeauz.png) to turn off the warnings, see how the background is colored differently with d2/d3 vs d1/d4.
A-ha! Finally! This solves my minor annoying issue! Thank you, random person on the internet!
I tried using the dark themes but none of them seem to feel right, and there's no alternate light themes apart from the default, know of any others?
&gt; Netbeans has a few files it adds and Eclipse does as well, so all else being equal, **this issue wasn't what killed it for me**. My dumb ass bumling around trying to figure out how to just build a damn Maven project like I would in Netbeans **turned me off**. maybe not that exact phrasing, but it reads that way.
I haven't used the feature personally, but there's [export to Eclipse](https://www.jetbrains.com/idea/webhelp/exporting-intellij-idea-projects-to-eclipse.html). Usually we use a separate build tool (Maven, Ant, Gradle..), so everyone can use their preferred IDE.
How did you come to the conclusion that spring docs are some of the worst when they are extremely detailed and complete and even goes into integration with other non spring frameworks? 99% of the time I find answers to anything spring related directly in their docs. You might want to try reading.
You are starting in the wrong place. You need to lean servlet and other java ee basics first which spring builds upon, assuming you're doing web related work. Try getting a basic servlet app running on tomcat before you try to add in spring. And try to use maven or gradle to build it.
Hum, that's interesting. Interesting because a) AngularJS is not a MVC framework (closer to MVVM if you have to choose a variant) b) AngularJS does the maximum to avoid the use of OO (either by class or by prototype) by sticking in its API to functions and associative arrays, thus being closer to the C language in its paradigms. So you were fooled both by the global misunderstanding of what MVC is and by your thinking about what OO is. You were able to success because of your ability to adapt to some conventions and the amount of code snippets available on the web, not because of your theoretical knowledge. And that's perfectly okay, most of developers are not able to reach that level of experience.
It's one of the things that turned me off, initially. But this would by itself would not stop me from using it.
For me IntelliJ looks crap, because it uses the standard Java GUI framework, which is really bad at rendering fonts on my system (Ubuntu, OpenJDK). Eclipse uses native GUI elements and the native font rendering, afaik.
Last time I had to deal with eclipse users, I just created a new project in eclipse and committed the .classpath and .project files to the repo. &lt;editorialise&gt; Honestly, at this point, anyone still using eclipse clearly just likes to make shit hard on themselves. They can import the project themselves, it's the least messy thing they'll do today anyway.
You might be right, but I don't want to run into any problems with TAs taking marks off because of these things. EDIT: I think I'll keep the official academic projects and assignments on Eclipse, and my side recreational stuff on other IDEs to experiment. 
IntelliJ shortcuts? How are they different from Eclipse? I've just switch to Java programming for work and I'm about 6 months into using Eclipse. I've used it long enough that I can be effective now, and I like the shortcut system better than visual studio now (marginally), particularly the ctrl+3 feature for looking up windows and the ctrl+l shortcut lookup feature. What does IntelliJ do better?
my problem is I know all the shortcut keys for eclipse, I've been using eclipse based environments for over 10 years, it's hard to switch
I prefer the eclipse compiler but I hate it on a mac: I hate having to click the code twice when selecting text in a background eclipse window
Bad font rendering is a well-known problem with OpenJDK. Patches to OpenJDK have been floating around for a while: http://youtrack.jetbrains.com/issue/IDEA-57233 On my Mac with Apple/Oracle JDK everything looks perfectly fine.
I dont use Intellij but everytime I try it I just switch to the Eclipse mapping profile. I imagine it must be missing some specific Eclipse features, but all of the basics work
Works on OSX too. Just did it.
I recommend taking a look at Grails for toy projects. I'm not sure what the views on /r/java are on it. I'm writing a paper on Grails and it seems to be pretty decent for toy projects all the way to projects used by governments in Europe(Sweden.. Denmark.. one of those, it's on youtube).
You can set the keyboard shortcuts in IntelliJ to match the ones in Eclipse.
IntelliJ isn't free. I've switched after years of Eclipse and it's definitely better, but not a night and day difference. Biggest benefit really the responsiveness. Features are pretty comparable. 
&gt; Two things are hard in programming: naming things and cache invalidation.
Community Edition?
Perhaps keep track of the current time on any button press and use something with a scheduled executor service check every second or two if it has been over two minutes
Tell your university to use Maven instead of IDE-specific dependency and build management, then you can use whatever you want.
Any good company is going to allow you to use whatever you want. We use IntelliJ and it's miles above anything Eclipse-based.
oh i didn't know there was an eclipse mapping profile, I will have to check that out
Make a copy of all you save files, delete minecraft, re-download it, put your save files back in. That will fix any problem if the problem is minecraft. If its with your computer I don't know what to do.
Welcome! Hope it works!
If you are an exceptional programmer working on one of a kind projects for which you have a special expertise, you'd more likely be asked for a full remote position. If I'm not mistaken Red Hat/Jboss employs various people who work from their home all over the globe. For a casual run-of-the-mill junior developer things are maybe a bit more difficult since there are often so many run-of-the-mill java developers available locally. On the other hand, I do see an increase in tele-commuting (essentially remote working) where you work e.g. one day from home and four at the office.
Is there a way to make InteliJ use tabs? That was always my biggest shock switching to it. 
Eclipse if they don't want to pay for IDEs, IntelliJ if they are willing to shell out for the licenses. 
There's also an emacs one which I've always found helpful.
Which version of intellij doesn't use tabs?
You could also go into the Inspections settings, and knock SuspiciousNameCombination down to Weak Warning, or disable it entirely.
figured it out. i had my get method labeled incorrectly. should have been labeled as getDate.
I learned java in blueJ in school, does using a different JDE really make a difference?
Isn't the CE lacking a ton of features? Even stuff like plugins are the full version only. 
 int rotatedHeight = btnWidth; int rotatedWidth = btnHeight; panLeft.setSize(rotatedWidth, rotatedHeight);
Maybe, but I've been using it without a huge problem. Still better than eclipse.
No, plugins work with CE. There are only a few feature that the full version has over it. The full list can be seen [here](http://www.jetbrains.com/idea/features/editions_comparison_matrix.html).
Are you sure it's 12000 and not 120000?
I've used both pretty heavily, and the only major/worthwhile feature I can think of that CE lacks is structural search and replace. 
This is java, we already know the object type. Use your characters to tell us why we need this instance.
I should probably not say one of the worst but I do not think it is good. This is really what this thread is about. It is not easy to get up and running with Spring quick. There are not a lot of good tutorials or even descriptions of what you need to get started. I guess that may have changed but that is what I experienced when I was learning it. I assumed it is the same since the OP is running into the same thing today.
Or you can download patch-ide and color-ide plugin for it. I believe there is also a Moonki theme floating around somewhere (for all the Sublime lovers).
Yes, IntelliJ refactor is fan-fucking-tastic for one. Also, if you code on a small screen, it's full screen mode is very sweet.
No problem. Usually I just use multiplication and let the compiler optimize it out: 1000 * 60 * 2 // 1000 milliseconds per second, // 60 seconds per minute, // 2 minutes
Did you mean to reply to the poster above me?
My primary concerns are Netbeans support, which was in beta last time I looked, and the fact that it apparently doesn't behave the same way on Mac as it does the other platforms. I'm just about 33% on each, and perfect cross-platform behavior is very important to me.
Yes.
Ironically enough IntelliJ will then tell you that those assignments are redundant. Source: I'm "that guy" at my work who has all these turned on and makes code reviews annoying (yeah, yeah, I know, we need coding standards. We're working on it!)
By default tabs are disabled (using spaces instead) so this makes sense. You can customize this though.
when I'm inserting an object into a collection, I name them "coin" and "piggy".
Intuit is hiring. 
Thanks for the reply. I got it solved already though!
Once I decided to switch to IntelliJ fulltime I just said "fuck it" and went with the stock key bindings. Sucked for a week, then it was almost flawless. The things like expanding selection (CTRL + W) is just delicious.
It's fair game to refer to angular as an mvc framework in the js community since the word is not a direct mapping of the OO version. It's an umbrella term referring to the vast array of js frameworks designed for single page apps. Even if I didn't know the difference, you could lose the condescending tone as it add nothing to the conversation. Angular embraces the vanilla js object model, meaning that understanding prototypical inheritance will serve you well. Using angular requires knowledge of oo patterns as all the components are constructed in this fashion: services are singletons, dependency injection (allows testing of code constructed in an oo fashion, ...). 
Code style, https://www.jetbrains.com/idea/webhelp/code-style-java.html. It's customizable per language.
Well, no. And that's exactly my point. MVC has nothing to do with OO, it is a separation of concern pattern that can be applied within any paradigm (procedural, functional, OO, ...) Same goes fo DI, it has nothing to do with OO. Most of what people refer to as "OO knowledge" is, in fact, generic pattern pattern knowledge.
I've set that. It's still dealing in absolute spaces when I click somewhere on the IDE. I'm still having to backspace and click through each individual space character despite having it set to use tabs and hitting the tab key.
I could go on and on, but someone already written this way better than I would, this is a **subset sum** problem which is a computer science classic and is NP-hard. Don't be afraid of it being NP-hard as the expected solution for that coding bat problem is not hard to write (in fact it's just 3-4 lines of code), this just means that nobody found a solution for this problem category that is efficient for large values of N.
Have you checked IntelliJ's Javadoc inspections? It already does exactly that. But only Javadoc comments and TODOs, afaik. 
No, that's not what I meant. Nobody knows how to solve it **efficiently** for a **large** group because the runtime complexity is O(2^(N)). It is fairly trivial to do it for small ones and kind of easy to do for large ones provided you have enough memory and use **dynamic programming** (which is essentially caching the intermediate results of the computation so that you don't need to repeat yourself).
I like the notion but sometimes the type already makes it clear enough what i'll use the instance for. e.g. HttpServer or FooTypeMock
&gt; Two things are hard in programming: naming things, cache invalidation, and off-by-one errors.
Granted, but the type remains always known. There is never harm in trying to provide additional, rather than redundant, information in the variable name. You know your HttpServer is going to respond to http requests, but what sort of requests? Strictly json requests? Configuration requests? Internal request for special processing? A generic end user facing server? An image server? There's almost always something specific about that instance.
This is the unfortunate nature of the business. Everything you do will have the assumption that you know maven and have working knowledge of tomcat/jboss/glassfish. Learn a bit about maven and tomcat and you'll get more mileage out of the tutorials
You could do this with two for loops pretty easily. The loops would look something like this: for (int i=0; i&lt;a.length; i++) c[i*2] = a[i]; The second loop for b would be almost identical.
Why do you want to use ArrayUtils to do so? The addAll method adds the elements of the 2nd array to the end of the 1st array. Why don't you use a standard for to do what you want to do?
You create a result array with the length equaling the length of the a plus the length of b. Then you could set up a for loop to run through each one to assign the numbers to the new array.
I always call my iteration variables i, or j if thats taken.
Much appreciated :D
Sounds like someone has a crush on scala
Meh... I only ever update my version of the JDK manually....
I do like scala for a number of reasons. However I do not believe that the shortcuts to be "succint" lead to more readable code. Sometimes scala feels very mysterious. Whereas java is verbose but at least you can see every little thing going on. Scala is like the perl of jvm languages.
That's cute, chicks must dig it :)
Well, nothing beats PHP's needle and haystack.
Yeah but It's better when you have a notification or something.
Java files in a mvn project go in src/main/java From there they need to be in the directory which has the hierarchy of the package (std java)
Is anyone else having any trouble getting the MSI installers to work? I've installed WiX and added it to my PATH as the instructions recommend and I've restarted NetBeans and even my computer with no success. There's also [this StackOverflow question](http://stackoverflow.com/questions/20314211/creating-msi-installer-with-netbeans-ide-7-4) with the same problem.
Can you give some examples of lack of cross platform behavior? I'm not sure whether you're talking Grails support for Netbeans or the Grails platform itself.
Not off the top of my head. Last time I looked into the project, I think I read something about Grails not passing its unit tests on Mac OS.
Java software solutions is what i learned from. Granted, I also had a pretty good teacher.
Why do people persist in using names for software that already have other specific meanings? Why call this Hibernate, when hibernate already has a valid and important meaning w.r.t. computers? Why not call new software "mousepad" or "backlit display"? Oh, I'm just using my mousepad to fix up the ~~SQL~~ backlit display database for my clients.
Take a look over at /r/javahelp. There is a [Wiki](http://www.reddit.com/r/javahelp/wiki/) that lists quite a few tutorial resources and books.
I name all my variables 'moo' or 'mooo' or very occasionally 'quack'
You can import an Eclipse project into IntelliJ, see http://www.jetbrains.com/idea/webhelp/import-eclipse-workspace.html
Well, I was thinking the other way around. I want to work in IntelliJ, but when I upload my assignments or tests I want them to work in Eclipse (for the TAs and prof).
Naming is a difficult case and in case of Hibernate the name goes back to 2001. The name is also not really incorrect; it hibernates the state of your object on stable storage (Disk, via a DB). I'm not 100% sure when the term hibernate was first used in operating systems. OS X calls it Safe Sleep, and was introduced around 2005. Windows called it suspend to disk in 1995. There are lots of projects with totally nonsense names. Pretty much every kind of fruit or vegetable you think of is some project name. Celery, Tomato, Pear, ...
Do you use DAO factories? or just use DAOs directly in the client code?
You mean software frameworks? Play! is the biggest up and comer. Obviously a lot of people still use JavaEE and Spring MVC. I've been personally curious to try out Apache Tapestry but I don't know how popular that is. And of course a lot of people write in Groovy, Clojure, Scala etc. nowadays. The only other contribution I can make to the software stack discussion is I know the [jOOQ](http://www.jooq.org/) library is gaining popularity lately.
Don't forget Apache Wicket! 
"Sell not virtue to purchase wealth, nor Liberty to purchase power." B.F.
I would go with Java EE stack. Particuarly JPA, CDI and JSF. I would use PrimeFaces as my JSF component library but RichFaces and Oracle ADF are options as well. Hibernate is still the popular implementation for JPA. If you are not familiar with JSF check out the Demo at PrimeFaces. It includes the code for the html and Java class. http://www.primefaces.org/showcase/ui/datatableHome.jsf 
Spring MVC has been pretty dominant for 6-7 years at least and I honestly don't see any strong competitors at this point. JavaEE is making a bit of a comeback, but it's still far less popular and I haven't seen any compelling reason to switch. Spring keeps getting better and better.
I was with you until you mentioned JSF. JSF is a bloated, slow, performance hog, with a mystery-meat lifecycle and a tendency to rewrite the IDs in all your DIV tags. Plus, no support for HTML5, and it will fight you every inch of the way if you try to incorporate something like JQuery into your app. If your experience was anything like mine, you will hate every day you have to maintain your JSF code base. Some people like JSF, but that was my experience (as well as that of [some others](http://programmers.stackexchange.com/questions/120760/is-jsf-really-ready-to-deliver-high-performance-web-applications)). I honestly think a better option is something like Spring MVC, which is a bit heavy, but capable, or Stripes, which is my current favorite, as it is very lightweight, and has sensible defaults that will meet most of your needs. For those who like a Rails-like experience where you can quickly crank out a default customizable site, then Play! looks like a good option, though I haven't done a lot with it myself. But that's my very opinionated take. If you'd like some real analysis, [here's a great comparison](http://zeroturnaround.com/rebellabs/the-curious-coders-java-web-frameworks-comparison-spring-mvc-grails-vaadin-gwt-wicket-play-struts-and-jsf/) of some of the bigger Java web frameworks, including JSF. But for myself, I'm actually leaving JSF off my resume. I never want to code a site in that monstrosity again.
Which version of Weblogic? Modern Java frameworks are divided into two categories: component and request. Component frameworks build component trees on the server side. Java EE defines a standard component framework called JSF. You would combine a JSF implementation with a component library, the most popular these days being Primefaces. Modern Java EE application servers provide the JSF implementation, but if you're using an older version of Weblogic, you'll have to install a compatible JSF implementation yourself. The Weblogic 10.3.2 servlet container supports JSF 2.0, so you can install a version of Mojarra (the JSF implementation) that will work with Primefaces. Another choice is Apache Wicket, which goes even farther than JSF in the capabilities of its components. But, it is a niche framework, so you won't get the benefit of the standard which means a wide variety of available components. Request frameworks keep the server side more lean: no component trees on the server side. Request frameworks typically do nothing more than map values into form beans and route to a controller method, providing a standard suite of validations of bean values. This simplicity has a price. You pay for less complexity on one side with more complexity on the other. You'll have to use Javascript frameworks on the client side, which means writing Javascript, which some people really don't like to do, because that's yet another layer to test. Then again, some people are okay with this and even prefer it. If you follow this approach, you can take advantage of client side MVC frameworks such as Bootstrap, AngularJS or commercial offerings like ExtJS, which are very popular on their own right. They have the benefit of much wider adoption than JSF, because they are server independent. Javascript frameworks will run on Java, PHP, Ruby, Python, etc. The most popular request oriented framework these days is Spring Web MVC. The former champion, Struts, still exists as Struts 1 and Struts 2. But, Struts seems to get less traction these days because it is seen as outdated. Everyone remembers the horrors of Struts 1, but Struts 2 is actually a completely different web framework! There is a Java EE standard which comes close, which is JAX-RS, but it is not a web framework, but rather a web services framework. There are rumors of a JAX-RS MVC, which will provide a standard Java EE solution for request oriented web frameworks. Something to keep an eye on! Other web frameworks: Play! - this is a Scala/Java hybrid that is doing some revolutionary stuff. It follows the Node.JS approach of non-blocking I/O. Instead of spinning up a new thread for each request, it does async I/O on the same thread. This gives it a huge scalability advantage. It doesn't use sessions in the normal way, instead using cookies and using caches instead. OTOH, Play v1 is pure Java and is still (supposedly) supported, but doesn't get all of the fancy async stuff of Play v2. Vaadin/GWT - these allow you to write client side applications in Java, compiling the Java code into Javascript. If you really hate Javascript, this might be the framework for you!
Spring is neat, once you pass the configuration phase, it will be a smooth ride after that. Weblogic-Hibernate/JPA- SPRING CORE(services)-SPRING MVC 3.2 Create a restful application with Spring MVC. Then use jQuery to ajax back and forth. It's a powerful combination. Spice it up and add Angular JS to the front end. 
why I this being downvoted? 
FUI modern JSF does not have the issues you described. All though the lifecycle is complex yet effective for form heavy pages. It's not slow at all or do you have a source? Keep i mind that myfaces is the fastest jsf impl.
JSF does support HTML5. Most if not all JSF component libraries use JQuery or you could just use it on your own. 
I agree. Tomee is on the rise and would be my recommended container
Have you ever used it in a production environment? I've read about it a bit and it sounds pretty interesting.
[Dropwizard](http://dropwizard.codahale.com/) is pretty great.
I have just started writing a new Web app using Wicket last week, so I will let you know how it goes. 
The only source I've seen (other than my own experience) that runs JSF head to head with JSPs and servlets is the Programmers StackExchange site I referenced in my original story. But if you look [here](http://programmers.stackexchange.com/a/188957/1129) and [here](http://programmers.stackexchange.com/a/196732/1129), you'll notice that JSF is approximately twice as slow as JSP. For instance: For JSP &gt; Time per request: 0.127 [ms] (mean, across all concurrent requests) For JSF &gt; Time per request: 0.214 [ms] (mean, across all concurrent requests) It gets even worse when you look at overall scalability: JSP &gt; Requests per second: 10307.02 [#/sec] (mean) JSF &gt; Requests per second: 2138.60 [#/sec] (mean) You may or may not care, of course. If you're serving an internal web site to 100 or so corporate users, than ease of development may trump pure performance. But if you're developing with an eye toward scalability, then the costs of JSF will probably outweigh the benefits. But if you have any documented evidence that JSF performance is on par with JSP, then I would love to see it.
Tapestry is dead the last time I checked. Only one or two maintainers and no community traction. Wicket is a better option IMHO. 
Spring FTW
Look into parsers, and lexical analysis. I hope you know what you're getting yourself into :)
*obligatory "this is not pure rest" complaint post*
For a gui/webapp framework I'm using Vaadin right now. It sits on top of GWT and makes things nice and easy. If there's something you want to heavily customized you can go into the underlying GWT code and make changes although I tend to avoid this as it isn't my specialty. Working out really well so far.
I'd checkout Spring MVC, especially if you already use Spring. I don't find it that heavy weight at all. Use Thymeleaf instead of JSPs. Embed Jetty (https://github.com/jasonish/jetty-springmvc-thymeleaf-template) to have it host itself. I'm not a fan of ORMs, so I leave those out, opting for Spring's JdbcTemplate instead, though I'm currently looking at JDBI for a new project. 
Came here to say this. OP, if your final project is time restricted, you need to make sure you know what you're getting into, and further more you may wish to make it a compiler for something specific, with simple to parse syntax.
Same thing: great success with internal usage, but we were quite afraid with the idea of scaling something so much stateful.
If I go with it (at this point, I'm leaning toward yes), I'd be very careful to make sure that almost all pages are stateless - and testing for that in each page's unit tests. However, then I feel like I'm not using the framework properly - or at least to its fullest potential.
Never thought I would see wicket recommended. You've just made my nightmares reappear. I sleep a little better now that I using Grails. 
Tapestry is fantastic. I've just switched from it to Spring MVC (because, job), and I'm finding Spring weirdly low level. It's like going back to servlets (except of course it's not). The main downsides of Tapestry are a) its fringe status, b) it has not really evolved super gracefully into an AJAX-heavy world, its central paradigm is 'page as first-class server-side object', which makes traditional app-writing a breeze but is a pain when the analogy doesn't really hold (you wind up writing code to connect to infrastructure that feels.. not quite right).
**Algorithms** by Robert Sedgewick &amp; Kevin Wayne was my preferred resource. Lots of background and nowadays specific versions for different programming languages.
http://www.amazon.com/dp/1849687323/ref=wl_it_dp_o_pC_nS_ttl?_encoding=UTF8&amp;colid=3Q66CCJ7BD18R&amp;coliid=I2PPK0K1LVTIUB Not free, but could be a good resource
Grails is pretty much all you need (BTW it runs on top of Spring MVC). Groovy is largely just a 'better Java', and you can keep the business layer in Java and integrate with that if you want. Edit - sort of surprised I'm being down-voted for this.
&gt;how can I make an enemy disappear once he passes the player, say the player jumps over an enemy and the enemy walks off the screen we would like that enemy object to be deleted/killed. Well how do you make an enemy appear?
Pretty vague question, there. Are you a beginner at Java? Or at programming in general? The r/javahelp wiki has a books page: http://www.reddit.com/r/javahelp/wiki/books
Wasn't the goal of the article. In my defense I even mentioned it in the article :)
Your posting here is flawed, you must be able to understand this on your own, no? You should start with retracting your other points if you can't support them. Regarding the one thing you tried to backup: The first link you provided was years old, no longer relevant and just another example of people who based their opinion on JSF 1.1. Comparing JSF to Servlet / JSP is of course a very poor comparison. Can you muster up something in comparison to the frameworks compared in the article you provided (For example Wicket or Vaadin)? Why is it stupid to compare with JSP / Servlet? Well first JSF is a great buddy with these frameworks and if you can write JSF you have should have everything you need on the path / container to use JSP or a Servlet. There's good ways to write a mixed page with JSP / JSF today and I have used that when I have legacy JSP to consider. I would not consider using JSP because it sucks and is deprecated for a reason but plain servlets are awesome, especially for small things. Secondly, C is often referenced as a fast language. Would you recommend using it for web development? Are you aware you can write inline assembly in C if C is not fast enough for you? JSP compiles to Servlets and JSF is an advanced framework built on top of the Servlet specification, how could it possibly be as fast? It's always like this, the more low level API you use the faster it will be. But hey let's use this high level API and print Hello World and do a performance benchmark... Talk about premature optimization. JSF was built for advanced demands so what you need to do is compare my page with about 20 controls (including two calendars) and complicated ajax enabled validation with lastly three different navigation results. This page I described takes less then ½ second to load btw and most of that second is in the business logic. But I'm sure your homemade stuff with JSP is still a little faster. Now let us both code happily for 5 years and then our successors comes along. I would probably die inside if I had to put my eyes on the pure JSP / Servlet variant and by then I would also expect that the "do it yourself" paradigm would have nullified any gains in performance. I can also tell you that speed is very, very important for me when I code at my dayjob and I know by heart how fast most pages load and it's very fast. Look at this graph here: http://blog.oio.de/2013/05/16/jsf-performance-mojarra-improves-dramatically-with-latest-release/ That's with thousands of components. Here's another one comparing frameworks: http://content.jsfcentral.com/c/journal_articles/view_article_content?groupId=35702&amp;articleId=66621&amp;version=2.3#.UpzVU8RmiH8 Edit: But why don't you make a new post and recommend that he goes for JSP? I'm sure the upvotes would come hailing. And please include prove that JSP is faster then static HTML pages 
I'm sorry, but you keep using comparisons *to JSF itself* (or with Wicket) to convince me that JSF is not slow. So yes, compared to Turtle A, Turtle B may well be faster, but it's still a turtle. And I will continue to believe it to be a turtle until I see some data to convince me otherwise. My strong preference in frameworks are for those that layer very little on top of the underlying servlet -- something that both Spring MVC and Stripes manage to do. I simply don't find HTML and JSP so very confusing that I feel the need to reach for JSF. To me, its drawbacks outweigh its benefits.
Don't thank me: [Algorithms](http://algs4.cs.princeton.edu/home/)
In many polls JSF appears to be used about as much as Spring MVC. See this: http://henk53.wordpress.com/2011/10/12/reply-to-comparing-java-web-frameworks/
&gt; or Stripes, which is my current favorite, as it is very lightweight, and has sensible defaults that will meet most of your needs. Looking at the [sample page](http://www.stripesframework.org/display/stripes/Sample+Application), that's not a million miles away from a facelet; what was the last version of JSF you used, as a lot of your complaints are no longer valid. JSF 1.x was hideous, so if you had to use that I can see why you'd be wary. Current versions are great to use, and using a component library like [Primefaces](http://www.primefaces.org/) (especially with the client side validation in 4.0, linked to JSR303 validations) makes everything even easier.
Those charts are all over the place, but it seems that Spring is usually #1 and JSF is usually #2. Personally, I have never even seen a JSF project or heard of it even being given serious evaluation. We do either Spring or we don't use Java. Struts shows up more often than JSF although that's always legacy code. Probably depends on the industry and type of project.
&gt; ...and I haven't seen any compelling reason to switch. Spring keeps getting better and better. Java EE's taken significant steps with its last few releases, so Spring's not alone in improving; ignoring existing projects (where there's no point switching), and if security's not a big concern (Java EE's still lacking here) for a new project what reason is there to go with Spring MVC instead of using the EE stack?
If you like Wicket, checkout JSF as well. Quite similar, but more popular and a bit faster.
The link below is a recent question I posted about what frameworks people are currently using. The majority is still Spring but that is to be expected since it has been around a long time. The second was JSF which is only gaining popularity more recently. JSF with a good component library makes it so much easier to develop a rich web application. You should also look at Spring and see what you think. There are a few other frameworks mentioned as well. http://www.reddit.com/r/java/comments/1q6bjz/informal_poll_what_frameworks_and_servers_do_you/
JEE should not be the default choice. Evaluate them on their merits. Spring is easy to use, mature, has a galaxy of third-party integrations that all follow a nicely defined set of guidelines. JEE has been playing catch up this whole time and lifting features from Spring as needed. Spring is also lighter and can run in a wider variety of containers. JEE may be getting better all the time, but it's still permanently lagging.
I don't keep comparing JSF to itself, I posted one article that had graphs that showed number of JSF components and resulting loading time. That both JSF implementations are mentioned is convenient but for my purpose myfaces would have sufficed. Then I showed you a comparison between JSF and Wicket, it included all available implementations of both frameworks, not sure if this surprised you. Also I didn't bash JSF with no valid backup, you did. You however have kept comparing JSF to JSP even after I explained that it's an awful comparison. It was also contested as a comparison in your original link if you read the comments. Did you post that JSP endorsement I proposed? Can you post benchmarks between pure Servlets and Stripes? I hope not, it's not worth the internet ink used to write it but you insist with this logic then you probably should. As to the rest of your post it makes sense and is at lest a legit opinion compared to your original post that you basically seems to have abandoned by now. I feel I reached for JSF about as much as I reached for Java compared to using C instead. It's not that the alternative is confusing but I'm sure you understand the benefit of higher level API:s and don't need this explained to you. And of course there's legit benefits both to the request based and component based concepts. For me who can code JSF properly speed is of course not a drawback because my pages load so fast that they are always deemed as instants. I do the GUI with about 75-90% pure HTML 5 and CSS and sprinkle in components only when needed. What I do consider a drawback is several other inherent drawbacks that comes out of a component based paradigm and a form focused perspective but the more you work with JSF the more you "get it" and the problems fade with the strengths standing strong. As explained in the article you posted JSF is not easy at first. 
agree, JSF sucks and bad
Thank you, that helps me understand this madness.
Grails is such a resource hog we couldn't even consider it for our new project (a server management panel which will be used on on a VPS servers with 512M of memory or less, grails has 256M+ memory footprint, it's unbearable for our task)
Will Java 8 feature dynamic URLStreamHandler registration?
http://vertx.io/ - Spring is nice but sloowwwww (proof below) http://www.techempower.com/benchmarks/
I disagree. Java EE can run on just about any server. You can either use a Java EE server or simply include the Jar files in your application and run on something like Tomcat. Spring was easy to use compared to what was offered 5 years ago. Today Spring requires a lot of extra work to configure and code. It also lacks much help in the view layer. This is where JSF shines. I can use a simple tag to create a data table that scrolls, sorts, selects, filters and more in minutes.
&gt; JEE has been playing catch up this whole time and lifting features from Spring as needed I don't want to repeat this too many times (there was a huge discussion about it on Reddit a few weeks back), but it's Java EE, not JEE. Frankly, the majority of users who use the term JEE seem to be Spring users who don't like Java EE. This has given it a bit of a negative sound. But no, Java EE has not been playing catch up the whole time. This is a fable that Spring fans spread all too happily, thinking (hoping?) that Java EE is still little more than EJB 2. But the tables are turned now. Java EE started with the no-XML and convention-over-configuration annotation based approach. At the time Spring was still advocating to move more and more code into XML as according to their wisdom almost everything is "configuration". And don't forget about the big Spring lie: stating that Spring is an invisible glue and that typical Spring based applications have no dependency on Spring. Yeah, sure! Take away the Spring framework and who's magically going to process these huge XML files where 40% of your code uhm configuration resides? And Java EE is far ahead of Spring when it comes to CONTEXTUAL injection and portable extensions. Funny, since it's not even the goal of Java EE to be ahead of anything. Java EE's stated goal is to standardize that what has proven to work in the marketplace. Java EE implementations have become super lighweight over the years, while Spring has only gained weight. A complete Java EE implementation can now be gotten for between 25MB (web profile) and some 40MB (full profile). This includes *everything*. Startup time for a cold server is less than a second. &gt;Spring is also lighter and can run in a wider variety of containers. No, Spring is getting fatter. And the variety of containers is bull. Either the container is only a Servlet container, and you can deploy all Java EE jars to that just as well, OR the container already is a Java EE container so you don't need to deploy the Java EE jars to it. 
&gt;JSF is a bloated, slow, performance hog What are you smoking? It definitely is not! Check http://jsfcentral.com/articles/understanding_jsf_performance_3.html and http://prezi.com/dr3on1qcajzw/www-world-wide-wait-devoxx-edition (the last is even from BEFORE MyFaces was hugely optimized for performance)
Not to say it isn't a cup full of crazy, but if you are continuing on the Oracle side, take a look at ADF. It builds on JSF (with all its warts), but is what most of the Fusion stuff is based on. All the WebCenter portal stuff is really ADF, with a bridge that maps a JSF application into a 286 style portet. Assuming you are going to stay in the Oracle world...
What's the main benefit compared to coding against the JPA API with Hibernate as backend? 
Oh my, yes. In some ways it's a shame they stuck with the JSF name for the switch from 1.x to the 2.x version - 1.x scarred a number of people due to how bad it was (f:verbatim anyone?), 2.x is a completely different (and significantly better) ball game. You've been pointed at Primefaces in other posts, but the [showcase](http://www.primefaces.org/showcase/ui/home.jsf) is worth a look for getting a feel of how straightforward things can be now. Other improvements include not needing to wrap every output in h:outputText (it can be inline in the page with more recent EL implementations), easy ways to reference script and CSS resources, and ajax support.
I'm just a beginner at java. I'm advanced in a couple other languages.
&gt; Today Spring requires a lot of extra work to configure and code No it doesn't. Just add the maven dependencies, configure dispatcher server and start adding controllers. Takes about 30 min to get up and running. &gt;. I can use a simple tag to create a data table that scrolls, sorts, selects, filters and more in minutes. And i think that's where industry comes in. Using off the shelf UI components would be a non-starter for most of my projects. 
[The Algorithm Design Manual](http://www.amazon.com/Algorithm-Design-Manual-Steve-Skiena/dp/0387948600) by Steve S. Skiena. This is an excellent book that goes over a ton of algorithms with a lot of code as well. What I especially like about the book is where he actually gives examples of where he used the algorithms (or variations thereof) in practice; it really helps you see the class(es) of problems that a particular algorithm (or family of algorithms) can be used for. The code is in C, but it's not very esoteric and it's easy to follow. I had also been out of school for a while and this helped me get up to speed quite quickly on a number of graph algorithms.
&gt; It also lacks much help in the view layer. This is an intentional feature of request oriented frameworks. They trade much simpler request processing for more complexity in the UI layer... &gt; I can use a simple tag to create a data table that scrolls, sorts, selects, &gt; filters and more in minutes. ...however, that complexity is made far reduced by Javascript frameworks. You're not the only one who wants the goal of creating complex grids in minutes. It's the same goal of PHP, Ruby and Python web developers as well. For example, [Dojo dgrids](http://dojofoundation.org/packages/dgrid/) are fantastic and [ridiculously easy](http://dojofoundation.org/packages/dgrid/tutorials/hello_dgrid/) to set up. Moreover, most Javascript web frameworks speak REST, so hooking up to RESTful request oriented frameworks like Spring Web MVC, Ruby on Rails or Django is incredibly easy. JSF components are limited to Java EE. Javascript components work well with everybody.
&gt; I'm using slf4j-simple 1.7.5. You should read what slf4j does. http://slf4j.org/faq.html
Why are UI components a non starter? You do realize that any of these UI components can be themed or modified to get just about any look you want right? It is really simple to do. With PrimeFaces you can also use Theme roller.
Maybe enable tcp_tw_reuse or tcp_tw_recycle in proc?
Just have your clients re-send if they don't get an ack, and your server ack when it gets a message from a client.
&gt; Talk about premature optimization. JSF was built for advanced &gt; demands so what you need to do is compare my page with about 20 &gt; controls (including two calendars) and complicated ajax enabled &gt; validation with lastly three different navigation results. The advanced demands met by JSF are also met by the various Javascript frameworks which provide the same features, leaving the component tree in the browser DOM rather than reconstructed on the server. The communication between the page and the servlet then becomes simple JSON messages routed to URLs, which frameworks like Spring MVC to translate to and from Java objects. You can use JAX-RS for this too, but it's not a web framework. JAX-RS MVC, if it is ever adopted, would be the Java EE version of Spring MVC and would be the true Spring MVC killer. The RoR, Django or even PHP folks can write apps with screens just as complex as JSF, and Java developers can use the same exact tools that they use. This is not premature optimization, but choice of different tools.
&gt; copy/pasta'd Have you been touched by His Noodly Appendage? 
I may end up doing that! I'll see about tcp_tw_reuse/recycle before I do this.
&gt; Introduction to Algorithms Yup CLRS
Thank you very much! I like the looks of this. I am going to do a little bit of research about potential issues of using these options and may end up implementing them.
I don't really see why its Spring vs Java EE. Outside of the core container you can easily mix and match whatever you want. Spring has integration for most pieces of Java EE (BVal, JPA2, JSF, JAXB off top my head) and Java EE projects can take advantage of the various *Templates that spring provides and security(?). We use a Spring stack at work so that's what I'm most used to, but I don't see any issue working on a pure Java EE project or any other DI framework. Correct me if these already exists, but I'd like Java EE to implement the bean profiles and a way to do explicit bean definitions (@Profile @Bean spring annotations). Those aren't really deal breaks though.
&gt; On my CentOS 6.4 x86_64 machine, after 35,000 clients have connected, I get an error "Cannot assign requested address" Could be an OS file handle limit. On *nix platforms everything is a file and you can only handle so many of them. In the past I've had to recompile the kernel with tweaked options on a heavy duty server but these days it's a setting that's more easily changed. Run this in your console to see your limit: sysctl fs.file-max Remember that everything else open by your app e.g. threads, libraries, the java vm binaries all take up handles so the number available to the app could be few thousand less. 
Unless it's in a tight loop that's executed millions of times a second or using very large datasets it's usually better to stick to the easiest solution. In this case it's to do the addAll as above then use an array sort routine, I think Apache commons has some. You could make a custom one that's slightly faster by doing it in one step but unless this is a learning exercise it's a waste of your time. 
After doing some testing with the reuse and recycle, I have found that it still hangs after some time. I will give UDP a try and see how it fares. Thank you so much for your suggestion! I can't believe I forgot about it.
You might be better long term with UDP as the other poster suggested, TCP might not work well during runtime. It depends on your game though. Take Counter Strike, the server sends positional updates to the client for all players. If one of these packets is dropped the TCP stack will retry it. By the time you get it then it's too late, the next position has already come in making it irrelevant. UDP is better for this sort of thing as you can be more selective on what triggers a retry verses what just stalls a little. TCP is ideal for a turn based game though. Just depends upon your needs. 
Someone is ruthlessly down voting anything that doesn't praise Java EE to the heavens. You are right. My company builds highly custom UIs as part of our core offering so using a tag that generates a single line of HTML that isn't up to our quality standards is not viable. JSP on it's own is very modular and easier to build custom tags ourselves which is what we usually do.
&gt; If your wife is pregnant you suddenly see pregnant women everywhere. Great analogy. 
You're accusing me of having knowledge that's out of date and also claiming that Spring requires huge XML files? Annotations have been available for years and now configuration can be programmatic as well. You can now bootstrap Spring with 0 XML. My current project can't use the latest so we need some XML but it's mostly to just point to packages to scan for annotations.
this sounds like some type of nightmare job
It's pretty much standard Fortune 500 java work. 
I also had this complaint with respect to Spring's configuration phase and I was impressed with the results achieved with Spring Boot. Spring Boot basically identifies sensible default values for your application beans based on your project dependencies. Let's say you are building an MVC application, it automatically adds a messageSource, a viewResolver, etc to your context. You are still able to overwrite Spring Boot default beans, so once you have need for more detailed definitions, you can plug them in. Here is a link for a getting started guide: http://spring.io/guides/gs/spring-boot/
If you want to be a little less ambitious, consider writing an interpreter instead of a compiler. A basic interpreter is usually *a lot* simpler to write than a basic compiler ... Though as the two get more and more sophisticated, the lines get blurry. (A subset of) Scheme is a good choice for a target language. Parsing it is as easy as parsing can get (which is still non-trivial), but you can use the language to write sophisticated programs...and you get to learn fun functional programming stuff. If that seems too easy and/or time is not a factor, [COOL](http://en.wikipedia.org/wiki/Cool_%28programming_language%29) is a typed, object-oriented language used by the Stanford compilers course on Coursera. It's well-specified and easier to parse than, say, Java. You would almost certainly want to use a parser-generator of some sort (e.g., ANTLR, JavaCC).
Check out the [reactor pattern](http://spring.io/blog/2013/05/13/reactor-a-foundation-for-asynchronous-applications-on-the-jvm).
Sorry, but unless you plan on doing some sort of fork-exec to a known Java compiler I think you are a little over your head. But if you want to try a good book to read would be http://www.amazon.com/Programming-Language-Pragmatics-Third-Edition/dp/0123745144. It discusses how to write a compiler, and steps through writing your own compiler for COOL (A Java like language).
I use Spring MVC + Tiles + MyBatis + Postgres. The pages are simply HTML + CSS + JSTL tags, with the overall template in Tiles. Queries are (mostly) regular SQL. It doesn't force you to develop a certain way. (almost) Everything is configured with annotations. It deploys fine on plain old Tomcat or Jetty. The only thing simpler than this is Servlets and JDBCTemplate or plain JSP. If you go J2EE/JSF/Hibernate you're basically throwing a wrapper over all of this and have to learn how to use the wrapper. You'll be able to do it fine, but your co-workers will probably suck at it :)
The spring-data way you don't ever actually even _create_ an impl - you just have the interface injected into your class and you use it that way... (And they use the term "repository" instead of "DAO", but the concept is similar) @Inject private FooRepository fooRepository; ... Foo foo = fooRepository.findById(someId); ... see: http://docs.spring.io/spring-data/data-commons/docs/1.7.x/reference/htmlsingle/#repositories I have done DAOs before, but they add very little value for the amount of boilerplate code you have to write. The Spring Data repositories are pretty awesome in that you can write basically no code and get them working. (For JPA-based ones your repository can be as simple as: public interface FooRepository extends CrudRepository&lt;Foo, Long&gt; { @Query("select f from Foo f where f.emailAddress = ?1") public Foo findOneBySomeJPAQuery(String emailAddress) } And you'll get all the basic CRUD operations plus something that performs that query and returns the first one it finds... 
I wonder why they ran Spring as an embedded container instead of a WAR under Tomcat?
You can do it either way, you just need a method of pointing to the xml file. For example, log4j has a self-contained jar, but you can also create a xml file that you store outside of the jar for configuration. For your case, maybe the library should always search the classpath for a configuration file, or maybe it is instantiated with the location of the file. There are a few different methods depending on your specific needs.
Just because the array is final, doesn't mean you can't switch the elements around. So when you sort the array, it's the same array getting sorted again. (Confusing, I know.) You need to re-initialize the array between each call to sort. Or another way to do it is to: int[] localNums = nums.clone(); selectionSort(localNums); localNums = nums.clone(); insertionSort(localNums); ...
Oh hey that worked. It is confusing. Thanks man!
Have you taken a look at Netty? I've successfully used it to handle quite a lot of connections of varying length/stabilities. 
I do plan on making the game part based on UDP, with the circular model that most FPS games like call of duty use, so that even if the client lags for a short while, what they did while they were lagging is still done. It's the login server part that was going to be TCP, just because I know of how reliable of a transmission it is.
I will take a look at it! At first I was using python for the server, but after realizing that python didn't have great multi-threading, I decided to switch back to Java. With python I tried to use Twisted, but just couldn't figure out how to use it. I'm afraid that Netty would be the same way.
I will also take a look at this. With the same post about Netty, I tried to find out how to use Twisted for Python, but couldn't figure it out, and I'm just nervous about trying to learn it.
Switch your brackets to fix the link to showcase.
Well, it depends on what kind of language you're trying to compile. Before you can check for syntax errors, you have to decide what the syntax rules are. The easiest thing to do would be to write a language like a Lisp or Forth. Or maybe Brainf$ck.
Yeah, clone is weird. A more CS101-ey way of doing it is: int localNums[nums.length]; // localNums has the same # of items as nums //use this instead of .clone() for(int i=0; i &lt; nums.length; i++){ localNums[i] = nums[i]; } A CS102 solution would be: // A helper function to copy elements from 'from' into 'to'. // They should be the same size private void copyArray(int[] from, int[] to){ for(int i=0; i &lt; from.length; i++){ to[i] = from[i]; } } public static void main (String[] args){ int localNums[nums.length]; copy(nums, localNums); }
You might want to look at zero-mq. 
Comparing Hello World between a Servlet and JSF is premature optimization, I explained why and you can find it in my posts. I don't speak in terms of killers but besides that I agree with your post, I don't consider JSF a silver bullet. It's bad at all, it's not slow and I like it because across big teams the code is very readable and testable. Of course there's benefits and drawbacks to going server side / client side style. I question the readability in javascript / jquery code but I have not worked on a major project with that approach yet so I don't know. 
JAX-RS/Jersey MVC https://jersey.java.net/documentation/latest/mvc.html
*colleagues 
Are you editing files directly under the app-server? That is generally not the right thing to do. Are you using source control? A build tool like Ant? Maven? Normally, you would check out code and config from source control, edit files and then deploy them with a command. Unless you use JRebel, in which case deployment can be automatic. Is there a colleague you can ask? If you have read their documentation and are still confused, I'm sure they wouldn't mind helping. 
Ah thanks, I'd not spotted that - the problem was actually that the URL didn't have http:// at the start of it (which is weird, as Chrome normally automatically adds that when copying the URL).
Have you ever considered that perhaps making 35,000 connections at once to one server is a silly idea? Also, have you considered that you may be doing a lot of work, when in actuality, all you really need is some simple HTTP-based API?
That's all great and Spring has thus clearly followed Java EE's lead here.
You seem to be adding an action listener to all the buttons each turn, so when you get to the second turn don't you have an action listener for both players, try removing the action listeners after each turn.
I highly recommend you look at netty. I have used MINA (Netty is sort of a branch of MINA but easier to use) to create a social media gaming application. It is amazing what you can do with that. We had about 25 000 users connected per server and at peak time 500 000 connected at once. I know this does not say much without knowing what each server was doing... but MINA/Netty scales very well I know this from experiance.
Just don't. You're starting to re-implement TCP, poorly. And when you screw up and get a bug, your server will be blasting UDP at line rate without flow control. Just use TCP.
Definitely, good algorithms are language agnostic and any programmer worth their salt should be able to convert tp their language of choice. 
Uh, no.
That's the CS300 solution. {Also, I didn't know it existed. Thank you!)
Why do you hate JSF? What's so different in Wicket? I used them both and saw far more similarities than differences.
Client side JavaScript MVC frameworks are stealing more and more code logic from server side Java MVC frameworks. At least that's what I've noticed in the past two years as a contractor on green field projects on corporate webapps. Matt Raible could confirm this.
Problem is that the "simple solutions" like plain Servlets are only simple when the code is really small. Eventually you'll get a lot of code duplication, which either means you have to change at single thing at many places, and you'll always forget one place. Things that should be the same will divert rapidly. Or, someone tries to be clever and will abstract the duplicate code to a central class. Eventually the class will become 3000 lines and some other clever person will split it up. And then before long you'll have your very own web framework. No one on the Internet can help you with it, there are no books or tutorials for it and -you- now have to maintain it, instead of writing business code for your company.
Definitely a good one. Except when you need to look up a particular data structure at work and see that it's been left as an exercise to the reader. Sad face. 
Having to create all of those html template files and separate config files. No thank you!
&gt; Having to create all of those html template files and separate config files. No thank you! Which separate config files? You're being misinformed. There's not a single config file mandatory in JSF. Look at http://jdevelopment.nl/minimal-3tier-java-ee-app-xml-config And what do you mean "all of those html template files"??? There are html template files in Wicket just as well. Worse, in Wicket you have to align the component tree in the html template with one in Java. JSF has a couple of modes to define the component tree. 1. Components on a Facelet using a JSF namespace (see my link above) 2. Pure Java (see http://jdevelopment.nl/authoring-jsf-pages-pure-java ) 3. Normal HTML tags which automatically map to components (see http://jsflive.wordpress.com/2013/08/08/jsf22-html5 ) At any length you'll always define the component tree once, which is a great improvement over Wicket. You can also define a component tree statically in a template, and then dynamically (e.g. via Java code) manipulate this tree, e.g. adding or removing components. This is another advantage over Wicket.
Thus far it seems you've been pointed at some tools but not the theory. You need to understand regular expressions and grammars before you get into the lexers and parsers (lex and bison, flex and yacc, many more that I can't name off hand). Once you are comfortable producing a grammar, the rest is 'just' making the tools understand your grammar. I agree that you should stick to an interpreter. It has the same front needs of a lexer(regular expression tool) and parser(grammar tool) but won't require you to generate any machine code. You'd get to execute something in the language you are working in, which needs to be Java it seems (I think antlr is the java parser out there. Research ;) ) Please be aware that what you are attempting to do is the subject of Junior/Senior level CS courses in college. You are not attempting an easy thing. Good luck!
I really enjoyed the Stanford Algo [1](https://www.coursera.org/course/algo) &amp; [2](https://www.coursera.org/course/algo2) classes on coursera.org 
If you are brave enough you can tackle all seven volumes of [The Art of Computer Programming](http://en.wikipedia.org/wiki/The_Art_of_Computer_Programming) by [Donald Knuth](http://xkcd.com/163/).
Perhaps my experience with JSF is outdated, but I have not had to make any template files for Wicket. 
Firstly I would like to know what these xml files are? (Spring?) are the jar files internal project? what are the implications of editing them in the build and not recompiling the project that they originated from. Will they be overridden at a later point when you upgrade dependencies? Are you using a build system like Maven with a content repository like Nexus, because if you are then the jar will be re downloaded from nexus every time you build hence losing your changes. 
also for webservices take a look at dropwizard
Maybe, maybe not. There isn't really a "flow" in the proposed protocol, just a single message with a two-way acknowledgement. Besides, TCP wasn't made for this kind of use case, and it's showing by breaking down under this kind of load. Even if some kernel settings could work around it, that solution is hardly portable. Still, this is considerably more complex than just opening a TCP socket. My opinion: OP should look for an existing protocol/library that provides reliable, connectionless datagram delivery.
Spring 2 and Java EE 5 both introduced annotations in 2006 even though both were waiting for them to be added to Java. 
How do you build your projects? Typically configuration files live somewhere in your project, and then when you build the .jar for deployment you package everything into a single convenient jar. I advise against editting configuration files inside jars; this way the changed won't end up in sourcecontrol.
Uh, yes. Your advice is simply bad; you're reimplementing part of the TCP protocol when all he needs is either Async comminications or a simple http-based webservice. And don't forget he's a beginner: Keep it simple!
copy-paste bug: Java SE 7 was initially code named [Dolphin](https://weblogs.java.net/blog/ray_gans/archive/2006/08/mustang_and_dol.html)
And that's why I came for help. I'm asking the best way to achieve my idea, and I thought I made that clear. I want to test it fully. Have you ever tried to play a game when it was released and the servers that run it simply couldn't handle it? I don't want that to happen. And I will look into that. Any suggestions on the direction to go?
I like the looks of it! I will do some research today on if it will suit my needs or not. Thank you very much!
The problem isn't speed, at this point in time, it is that after so long, the server fills up with TIME_WAIT sockets and can't make any more. Re-using/recycling the sockets works to an extent, but I want to know if that's the right thing to do. Wouldn't HTTP create TIME_WAIT sockets?
If your messages are simple, of a fixed length and format, and you can tolerate the occasional dropped message, it's much easier just to use UDP; in practical terms, dropped messages are actually quite rare, so for your first cut you can probably just ignore the possibility. Once you've got your application working, you can think about adding code to recover from the (relatively infrequent) case where your client has sent a message but received no response from the server.
One point, you don't comapre java strings with an == sign as you do here: if(question.getText() == "X, pick a square") what you need to do is use the **equals** method: if(question.getText().equals("X, pick a square")) Another simplification you might want to consider would be to have the main class implement the **ActionListener** interface, then add that to each button on creation. The implementation of all of your anonymous ActionListeners follows a simple pattern that could be consolidated into a common function, something like this: public class Trial implements ActionListener { ...other code... public void actionPerformed(ActionEvent evt) { JButton b = (JButton)evt.getSource(); if( question.getText().equals("O, pick a square")) { b.setText("O"); question.setText("X, pick a square"); } else { b.setText("X); question.setText("O, pick a square"); } b.setEnabled(false); } } then where you create the buttons just do: final JButton one=createSquareJButton(50); one.setActionCommand("one"); one.addActionListener(this); You only need register the listener one time. Now this **actionPerformed** assumes it is only being invoked by the grid buttons, not the Yes/No buttons so either keep those with custome **ActionListeners** or add additional checks in this code to know which buttons you are working with.
Disclaimer: I am a Wicket developer. I see many claims which framework is faster than the other with no numbers. Some numbers from me: Apache Wicket is used by web.de and gmx.net - the German biggest email provider. It works pretty well for 200 000 concurrent users. Our peaks are ~ 500 000 concurrent users. I am sure there are places for improvement. Just raise a ticket at https://issues.apache.org/jira/browse/WICKET when you find one. Apart from that you may check http://www.techempower.com/benchmarks/ . It compares many JVM and non-JVM frameworks. The tested use cases are pretty stateless. Some frameworks perform very well but for some reason Play is not one of them!
So, when's the 2013 holiday sale?! 
Are the actions it will make idempotent? That is, if you do them twice, does it have no effect on the state of the system? If so, then it's very easy for your client (which is not starved for resources like sockets or buffers) to handle the situation where one of the datagrams gets lost. If, after a reasonable timeout has expired, the client has not yet received a response, it simply sends its message again. If your design isn't such that any message is idempotent, you should consider either redesigning it so it is, or changing the protocol (by adding a sequence number, for example) so that the server knows whether a message from a particular client is a do-over, so it can just send the response again if it already saw it.
Yes the would be idempotent. The action is either CREATE user or VERIFY user. I believe that if I were to implement the UDP model, it would be very easy to make the client retry if it has not recieved a response. I guess that's why I like the idea of using TCP so much is so that it does it all for me. But if UDP is the better solution, I would gladly take that on as well. 
Sorry, I'm new. I have never seen that before, what is it? Looks like JQ to me but obviously it's not. Where abouts would I put that in the code and what does it do?
It's not program code, it's copy/pasted from my Linux command prompt. You should be able to run the Java compiler (called `javac`) from the command line and compile your program. On Windows this may be a little bit of a pain since `javac` might not be setup to be run from the command line. I don't have a Windows machine with me so I can't really check/try it out. What compiler and IDE are you using?
Yeah I'm on Windows 8. TextPad.
Good luck with that.
&gt;There isn't really a "flow" in the proposed protocol, just a single message with a two-way acknowledgement. What I mean when his implementation is buggy and starts sending UDP uncontrollably. It's much harder to screw up with TCP in a way that harms others than with UDP. That's why UDP should not be used in the public Internet unless you really know what you're doing, and if you're asking these questions, you probably don't.
final means "the reference (to an object) that this variable holds cannot be changed". It does not say that the object itself cannot be altered. So, this is illegal: final int[] myArr = new int[3]; myArr = new int[4]; // Compiler error - cannot assign to myArr myArr[2] = 5; // Fine - no change to the myArr variable And for some objects, that's enough to make you unable to change anything about that object. (For instance, there are no methods on `String`, `Integer`, `Character`, or `Double` that let you change the referenced object) However, arrays have `array[x] = y` that lets you set an individual element in the array. This *does not* make the variable point to a different object - it merely changes what that pointed-to object looks like. `final` only prevents you from changing what the variable "points to". It is perfectly okay with you altering the contents of that one object.
Not what you're asking for, but you could simplify it to return 1728 * x * Math.sqrt (x);
Strange, I still get the error at Math.sqrt. Out of curiosity, where did the 1728 come from? 
Well now my mind is blown. I've no idea what the problem could be. Here is a screenshot of the error im getting - http://imgur.com/A4AxfF0.
Thanks for all the help guys, I think I will do an interpreter instead. Much obliged :) 
What I mean is that there is an actual limit to the number of connections a machine can handle at once regardless of how well the server is coded, and you should double check to see whether your worst case scenario is hitting that. If it is, you will need more hardware, end of story. The reason I suggest HTTP is that it's fairly simple and most languages should have libraries to send and receive.
yep, we need a christmas sale!
I intended to provide a "what's new" overview, but it seems their list is rather extensive. So instead: http://www.jetbrains.com/idea/whatsnew/
I made a program that converts a language I made into java. I just need a way to compile it into byte code.
 String s = " "; int i=0; int x=0; System.out.println("Please enter a name"); s=in.nextLine(); while (x&lt;s.length()){ char c = s.charAt(x); int temp=(int) c; // temp = temp + i; i = temp + i; //System.out.println(temp); x++; } System.out.println("Sum of your name is: " + i); }
Side note: gist allows you to create one gist with multiple files. Why not use a switch for this type of operation?
Thanks, I'll use that in the future. We haven't really touched on switches yet so I'm not sure how I would use them. 
It is hitting that limit. I have never made a load balancer before, and I thought it would be better to make my own than try to figure out how to use someone elses. But I know that that is not always the case. I really like the looks of Netty/0MQ, its just learning the API next. As far as the HTTP goes, I had assumed that sending data on the socket would be lighter than doing HTTP requests, unless I am mistaken? This is my first time tackling something of this nature. 
An IF statement can only have a single ELSE. When you have something like: if (option==1){ myMath.setX(x); myMath.fof(); ans= myMath.getAns(); } else if (option==2){ myMath.setX(x); myMath.gofg(); ans= myMath.getAns(); } else { myMath.setX(x); myMath.fog(); ans=myMath.getAns(); } the first else goes with the first if. Then the second else goes with the second if. This code could also be written as: if (option==1){ myMath.setX(x); myMath.fof(); ans= myMath.getAns(); } else { if (option==2){ myMath.setX(x); myMath.gofg(); ans= myMath.getAns(); } else { myMath.setX(x); myMath.fog(); ans=myMath.getAns(); } } Now you can better see the structure, with the second if being inside the first else. In practice, people don't often indent this way because it can get deep and ugly pretty quickly. As /u/tehbilly points out, though, a [switch statement](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html) is probably a better choice for what you're trying to do.
This is one of the places where the official documentation is pretty helpful. [This](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html) should help get you familiar with switches and how to use them. But more to answer your first question, some things in Java can be fairly verbose. There are mixed feelings by *everybody* about the pros and cons of this, but the short version is that you should expect some things that are fairly basic to take many lines of code. The plus side of this is that it's generally very easy to step through these very explicit steps and see what's going on.
The eclipse compiler is written in java and can be packaged with a program. The java IDE Dr.Java does it, and it is open source so you could use it for some pointers on how to interface with the compiler.
A much better explanation than I was able to do. That's what I get for redditing from my phone!
/r/javahelp
thanks man ! how you figured that one out, i got no idea, but thanks!
It's quite straightforward to figure that out: Any character on a computer corresponds to a number - ASCII code (or Unicode) In ASCII, the capital "A" has the number 65, "B" is 66 and so on. char is a primitive datatype that basically is the ASCII / Unicode representation of a letter - it's internal number. The char datatype can be cast to an integer. Only, you have to remember that the code above does not print the SUM of the name, it prints the SUM of the ASCII (Unicode) representation of the name. You will get different results if you spell the name as John, john, JOHN, JOhn, JoHn ... For Numerology, a different scheme is used. I think there "A" = 1, "B" = 2 and the case of the letters does not matter.
As others already said, you are probably better off using a switch statement (don't forget the "break"s), this might prevent bugs like executing the last 2 else's twice. At least I think you expected to handle value 3 and 6 there. And something else: This might be a detail to you, but it's really hard to read someone else's code when that someone named the methods "thisisafunction", gof, fof, fog, or gog. At the moment, your codebase is still easy to oversee, but it's really hard to maintain when you don;t know what something does later on. But if you don't want to listen to my advise, please read: https://www.thc.org/root/phun/unmaintain.html
yeah there's even an API but I'm also not sure about legal http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javac.html#proginterface
Oh I know it might not make sense to someone else, but my maths lecturer gave the project and if you have a look [here](http://imgur.com/UsQSChV) you will see how it would make sense to my maths lecturer and me. But if you didn't have that question sheet, it wouldn't make sense. I will have a read of that now in anyway. 
Nope.
/u/VaqueroGalactico is correct. You should also note that as a consequence, the way your code is written has what are probably unintended consequences. It seems like you are trying to match each code block to a single integer, having unique cases for the ints 1 through 6. The intent seems to be that the first group handles 1-3, and the second group handles 4-6. In reality, the first `else` will be executed when `option` is 3-6, and the second `else` will be executed when `option` is not only 6, but also 1-3. Because of these open `else` clauses, both sets will have code that executes for any integer between one and six (as a matter of fact, for any integer at all). And since the options are isolated, this means, essentially, that your gist will be presenting the work done in the `else` on line 55 the vast majority of the time (whenever `option` isn't 4 or 5). As for a better way to do it, as others have suggested, you can use a `switch`. That option is very simple and if you're still learning is the best route. If you'd like to overcomplicate things a bit (as I do), you can do something similar to the [command pattern](http://en.wikipedia.org/wiki/Command_pattern) or [strategy pattern](http://en.wikipedia.org/wiki/Strategy_pattern). You could replace your `switch` or `if/else` logic with a collection of `Equation` (or some other name of your choosing) objects. These objects could all implement an interface which specifies that they have a name (e.g. `String getName()` method) and a calculation (e.g. `MyMath doOperation()` method). You could populate a Swing widget with the names and then do the operation the user has highlighted. Again, that's if you'd like to overcomplicate things. Just my $0.02. `switch` will work as well.
For your web=app server it really doesn't matter where you xml is located. Both locations (/lib/foo.jar/name.xml and /classes/name.xml) are on the standard classpath of the web-app. You mentioned placing the file in the web-inf/lib folder, you never should do that. I would expect jars in there, single files should go the the WEB-INF/classes folder. That were most web-apps store their single files. When you're configuring your server and need to change the files on the server, I would recommend the classes folder and single files. However, it is still better to preconfigure your webapp during your builds (we use maven and have filters configured for each server in the DTAP street.). During these builds you might as well store your xml files in your jar.
Would this be the proper way to utilize the switch in my app? switch (fof) { case == option1 ; JOptionPane.showMessageDialog("The answer is"+ans); break;
would you be willing to provide a link to where I can download the eclipse compiler for inclusion in my project?
I haven't tried it, just looked at your code. One thing comes to mind: Why is everything static? Why not build an object state and store your connection, db and schema there? 
The latest stable release of the [Eclipse Platform is 4.3.1](http://download.eclipse.org/eclipse/downloads/drops4/R-4.3.1-201309111000/). On that page, look for "JDT Core Batch Compiler" or "JDT SDK". I don't know the details of how to consume this, there is a [wiki](http://wiki.eclipse.org/JDT_Core) and [online help](http://help.eclipse.org/kepler/index.jsp?topic=%2Forg.eclipse.jdt.doc.isv%2Fguide%2Fjdt_int_core.htm&amp;cp=3_0_0) 
Im not sure if its the JDK, I've done what the site says ad all i get is something saying Unable to find any JVMs matching version "1.7.0_11". javac 1.6.0_65
Nope. You might want to read up on the statement here: http://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html `fof` as far as I can tell is not even a legal expression at that point in your program. Do you have a variable named `fof`? Just relax, read the `if/else` code carefully, figure out what it's trying to do. The meaning `switch/case` is extremely similar to `if/else` so you should be able to puzzle it out if you try.
I got it to work finally!
Well I am rarely in a situation where I'm counting on a collection to be a specific size in the first place. In general, no: no collections I work with should ever have `null` values. There are very few corner cases where I may be collecting results of some operations which may have failed (network or filesystem access, for example). But it must be extremely clear that the collection should have `null` values because as soon as you forget about them they will cause a `NullPointerException`. For processes which may fail I prefer the Guava `Optional` class (see here: https://code.google.com/p/guava-libraries/wiki/UsingAndAvoidingNullExplained)
The `fof` in your `Math` class is not a variable, it's an instance method. Methods must be called using parenthesis, e.g. `fof()`. Instance methods must be called using an instance. E.g. MyMath math = new MyMath(); mymath.fof(); On top of that, it is a `void` method, meaning that `mymath.fof()` can never equal anything (the `void` type means "nothing"). This means you can't use it as the expression for `switch()`, which is essentially a shorthand for doing several equality checks. I hope I don't seem too annoying by being so overly particular. I promise I'm only like this because Java is just as particular :P
No, I don't mind you being overly particular, the more I know, the better :). I must have worded what I meant wrong. I know it in my head but can't seem to get it into literate words. So we have this code in the MathApp //process if (option==1){ myMath.setX(x); myMath.fof(); ans= myMath.getAns(); } Basically, what I'm trying to do here is. When the user runs the app, they will be prompted the enter the value for x and then pick a question. Depending on the question the pick, a different answer will be called from Math. So if the user enters 0 and picks option 1. The MathApp will input 0 for x in the fof function in the Math class and get the answer to be outputted. But if the put 0 and select option two, well then the same will happen but instead of inputting x into fof, it will be put into whatever option 2 is. - Just checked, gog.
Right, and `switch` will be able to do this perfectly. This is also what your current `if/else if/else` statements seem to be doing. Translating the `if`s to a `switch` *should* be pretty straightforward. As I said before, `switch` is like a shorthand for several equality checks, and the `if`s you have in the gist are several equality checks already. =) It's just a matter of decoding the documentation and figuring out what the syntax actually means. Once you've got it figured out, plugging the right parts in should be easy.
Quite sad the individual developer license doesn't allow VAT.
Yes my current app does exactly that. The problem came when I got to option 6 and noticed I had to else statements, which confused me. I will have to try the switch statements in the morning when I have more time. For now, sleep. Thanks :)
Hey, don't mean to keep bothering but based on the image you posted to someone else (http://i.imgur.com/UsQSChV.jpg) it seems like you don't even need to use `switch` at all. It sounds like you just take in a number and then spit out the six values every time (which you can probably use `System.out.println()` for instead of a Swing dialog). On top of that if you use static methods, e.g. `static int f(int x)` etc., you could have code that reads something like System.out.println("f(g(x)): " + f(g(x))); System.out.println("f^-1(g(x)): " + fInverse(g(x))); Might be easier!
&gt; I just wanted to display the size because it demonstrates that the arraylist implementation actually increments the count even though the add parameter does not have a meaning to me. If it helps, imagine this code: MyClass c = null; // ... arrayList.add(c); arrayList.size(); In this example if you don't already have the knowledge that `c` is `null`, you'd definitely expect the size to go up by one. I can see how it would be confusing, though. `null` is one of my least favorite things about Java and most modern languages. &gt; I would use an exception or my own failure message to indicate something. That's clearer than using a null. Totally agree. In certain situations, like threaded worker pools, where exceptions are harder to deal with logically, I might use `null` as a cop-out error. But again with things like `Optional` I really don't find a need for things like that anymore.
It's a nested function call, just like you might see in math. The idea is you have two functions in your class: static int f(int x) { return x+2; // or whatever } static int g(int x) { return x*3; // or whatever } To get "f of g" of x, you could do something like: int temp = g(x); int result = f(temp); But you could just as easily inline it, if you want: int result = f(g(x));
Looks like you are recreating all the controls every time the date on the calendar is changed. Instead update the contents of the components each time. Create all the components and set them up only once in the constructor for this class. Then modify your methods to return content, rather than components: e.g. change calendarDisplay() to return a String of the content for the current date, rather than return a JTextPane. Call calendarDisplay.setText(calendarDisplay()) in updateCalendar() to update the content of the textpane for the new date. Do something similar for the other controls needing updating. If you find components are getting created on each update, then something is wrong. Good luck! 
Wow, this looks much easier than what I was trying to achieve. I will definitely try this out tomorrow. Would you mind if I PMd you tomorrow to ask a question or two if I run into some mistakes doing it this way? 
Not at all! =) Hope it helps
im eager to try out the new gradle based android build system
Just renewed my license, Really love what they did with the Android support!
I can't get the hang of it. I preferred the older auto-build system. Seems like if I want to import a project or something, it's not compatible and I'd have to manually fill the files (although I have no idea how to). I have a few things bookmarked and maybe someday I'll go through and learn how to do it, but it seems like a total pain.. This experience coming from Android Studio. For those that have used it (and like it) what makes it better?
This seems great, but I'm having trouble compiling the java code into a class file. I know I need to use SimpleCompiler, but I can't figure out how I give it the java code I want it to compile.
sorry, just posting this to save the code because I don't have a java editor on this comp and monospace is helpful
Have you ever heard of Github, Pastebin, Google Docs, etc. etc.
I just paid for Ultimate 12 few months ago and now 13 comes out and no free upgrade it seems... EDIT: I emailed them and since it was so close to release they sent me a new key. I am very pleasantly surprised.
Where did the save button go? Now I have nothing to click obsessively, even though it did nothing.
Saw this on their website. Maybe you can email them and ask to be grandfathered in? &gt; "Upgrades and technical support &gt; Personal licenses purchased starting October, 30, 2013, include a 1-year upgrade subscription. The upgrade subscription qualifies for free upgrades to all new IntelliJ IDEA releases and unlimited access to technical support via e-mail. To continue receiving upgrades after that period, you should renew your upgrade subscription. Subscription renewals commence from the expiration of your previous subscription period, regardless of when the subscription renewal is actually purchased."
Github - nop. Pastebin - yes, but I didn't realise it had programming/coding formatting (I'll be using this from now on, thank you very much) Google Docs - ignored it because Dropbox has all the functions I need. This may sound ignorant, but I don't like what Google has been doing recently
Now if only there was some documentation around that mentioned this behaviour so that people wouldn’t have to *guess* what code does. That’d be totally rad. Oh, wait. [There is](http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html).
Also besides the already pointed out point that this is well documented, consider this String[] a = new String[]{"x", null, "y"}; System.out.println(Arrays.asList(a).size() + " " + a.length); So if arraylist did not allow nulls, arrays.asList is now O(n) time, and would return a size of 2, which would also be odd, because that would mean: Arrays.asList(a).toArray(new String[0]) would not be equal to array a.
Did you try using your existing license with 13?
Just wanted to say thank you for your help, I'd give you gold if I wasn't a broke student again. Reading your code helped understand what was wrong with mine, and although I am far from the point you're at I got my program working with what I know right now -- thanks again. (PS, if you want to feel free to check the github page I sent you for my final code).
I agree. That's why I use Spring MVC. ;)
"Deprecating Swing will force people to use JavaFX." Do people believe this? How long have they deprecated Date? We're still using it where I work, in a fairly new project. I don't see anything different happening with Swing.
There should be bytecode generators available as libraries. It might be easier to directly generate bytecode instead of passing through Java first.
Wait, is Swing bad? At my school they kinda only use it and I've never heard of JavaFX, given I am no expert in Java and know my school tends to use deprecated methods and their lessons come from pre 2007. Should I look into JavaFX and throw Swing out altogether, or is Swing fine and if I don't work with GUI's all that much it's a waste of time to learn?
enable Main menu | View | Toolbar
Thanks for sharing the spring-data stuff. It looks great! However, I think classic DAO is still useful for simple needs.
Answer: mostly because of laziness! I started writing this "script style" with everything shoved in a static "main" function and then started splitting things out - my main goal was just to get it working as fast as possible (read - a few hours work) since I needed it ASAP for a project that I'm working. So maybe if I'm bored I'll do it properly, but that's entirely dependent on whether anyone shows interest - there's no point me cleaning up/adding features if no one is using this. The main reason I released it as open source was because I realized the closest alternative, mdbtools, has been stuck at version 0.5 since like 5 years. Jackcess is really nice but it only came as a library. If anyone does find this useful I'd be up for matching mdbtools CLI features and polishing the code - since Jackcess does all the hard work that's pretty easy.
I think TiJ is not interesting anymore, it's classic but Head First Java is better.
I find JavaFX a lot more convenient to use than Swing, especially if you want to spice up your UIs with some animations. I am saying that slightly sarcastically, because I have seen what happens when developers take it upon themselves to spice up user interfaces. Plus, JavaFX is the designated successor of Swing, so I would suggest to at least look into it
Date isn't deprecated, some of its methods are. 
Swing **is deprecated** as voiced a few times during JavaOne 2013 JavaFx talks. Only bug fixes are planned for Swing. But given that at the beginning of this year my employer was still getting RFP for Java 1.4 projects, I don't expect it to go away any time soon.
Wow. I still see people on Stack Overflow with AWT questions (Frame, Canvas, etc.) AWT has been obsolete for over 10 years.
Yeah Eclipse that is praised for its great performance :) 
Are there any prospective projects that will use Orchid?
I'm not disagreeing with you about the page or the primative nature of the AWT. Organizations don't scrap code they paid money to develop just because something different came out. For many people it is a means to an end, if it works it works and money is money.
Is the SWT a modern "AWT", in other words, it uses the native GUI components on an operating system?
Is JavaFX just a new GUI library? I asked because I heard of Java library that is a wrapper for HTML,Javascript &amp; CSS. I am wondering if I am confusing two differerent things.
Only 4 (5??) of which currently exist at this time?
&gt; http://slf4j.org/faq.html Okay, I've started reading the FAQ. It describes SLF4J generally, but I can't seem to find specific instructions for addressing the problem.
Not in my experience. Since at leastbest Beans 7.0, I've found it to be around least as responsive as Eclipse Helios and later. From 7.2 on, NetBeans has been noticeably more responsive than Eclipse, though Kepler has closed the gap a bit. Both require tuning to be at their best - Eclipse more so. I primarily use both on Linux, which may have some bearing, though I do spend some time with both on Windows, too, and haven't noticed significant differences. As for appearance, that's obviously subjective, but I think NetBeans is *much* easier on the eyes.
You could call it that but it would be dramatically underselling JavaFX. JavaFX re-envisions GUI deployment in a Native App by forsaking the ancestor component tree model that Swing has and providing everything on a Scenegraph. Every object is a Node on the graph whether it is 2D or 3D and it is all hardware accelerated. For developers that are used to the component tree approach all the components retain API's to fulfill this layout paradigm. However JavaFX also brings a slew of new features that while possible in Swing were not so simple. Concurrency, Property Binding, Gesture handling and now Lamdas and Parallel Streaming (with Java 8) are all first class citizens with all GUI components. Again you could do this before in Swing (even simulate Lambdas and streams sorta) but there was a lot of scaffolding code to make it work. Now its all one-liners and similar small footprint code. 
This is not a well thought out statement. The point of the article was that deprecating Swing for JavaFX doesn't solve the real problem. Deprecating in favor of SWT also fails to solve the problem. Besides JavaFX is better than SWT if you are starting from scratch so why would you swap out JavaFX for SWT in the equation? 
http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html &gt; Resizable-array implementation of the List interface. Implements all optional list operations, and permits all elements, **including null**. Imagine keeping a few parallel ArrayLists in sync, where in one of them, the values were optional. You'd want a way to keep the counters in sync so you could iterate over them in the same for loop. How would you do that without null, or without a null object, which is sort of the same thing? 
I'm all in favor of this, once they fix the broken menu bar support on OS X. JavaFX *still* does not allow you to add items to the application menu.
The performance edge SWT had over Swing was quite serious several years ago but is not relevant very often today. Also, working with SWT is nice if you're staying in the Eclipse ecosystem, not so much for standalone projects.
What build are you using? 
In comparison to intelliJ never again. 
When you pass int[] x to some method, you're passing the memory location, not that data at that memory location. In essence you're saying x is at memory address ABCDEF. So when you say 'x' is final, you're saying you cannot adjust x to refer to a new memory address but you *can* change the data at that memory address. This is why you can't do 'x = new int[5];' but you can do 'x[2] = 3;'.
First off don't worry about learning JavaFX, it is much easier to pickup than Swing/AWT was, though similar. Beware some of the advanced tutorials out there which appear complicated because they are flexing a lot of muscle using animations, transitions and such. They can be a bit more intimidating. Oracle did not create JavaFX originally, Sun did as a scriptable browser tool that could also run on the JVM seamlessly. When Oracle bought Sun, they decided to cut bait on the Browser approach and throw their weight behind JavaFX becoming the successor to Swing. As of JDK 1.7u7 (i believe) the JavaFX 2.x runtime/library was part of the standard JDK. As of JDK 8 b 90 and after the JavaFX packages are part of the Java runtime .jar. In my experience there are not significant visual differences cross platform. However JavaFX does have built in support for custom CSS based on Platform! Your best bet might be to just grab the latest version of NetBeans and check out all cool JavaFX examples that come with it. (Including examples embedding JavaFX components in existing Swing components)
BTW Swing is not deprecated in the traditional sense, support will continue for the foreseeable future, just no new features. Source: I was a JavaOne 2013 speaker including several JavaFX oriented talks. I was also a Community Keynote Speaker and demoed some JavaFX stuff embedded in a Swing app.
I use both extensively and trained ~40 java engineers. Most seem to prefer eclipse but the common thread is everyone uses c++ as native language with pretty sophisticated IDE's. The few C# guys I have worked with did seem to have an easier time with netbeans.
Amen always a bigger fish I suppose.
Do you know of any tutorials out there that you'd recommend?
Just one datapoint, but I still use Swing daily at work.
SWT? Are you fanboys *still* pushing that garbage? SWT was faster in the Java 1.2 days, maybe, but that is ancient history now. Your toolkit is *obsolete.* Get *over* it already.
…Are you seriously trying to say Eclipse is better than IntelliJ IDEA? &amp;#3232;_&amp;#3232;
JavaFX 2 is just a new GUI library. Said GUI library happens to include a web page renderer (based on WebKit). Said GUI library's components can be styled using CSS (using custom properties, like `-fx-color`).
So, it's just a new GUI library, albeit an awesome-looking one. Though I must admit, having both controls and graphics primitives on a single scene graph is a very interesting design.
You do realize that IDEA is Swing based, yes?
Thanks for the very clarifying comment.
&gt;Does it have the problem AWT had with looking different on every platform? Nope. JavaFX does all of its own drawing with its own skin system. Swing also had skins of sorts, but in Swing they were completely monolithic: there was one look and feel, period, for the entire application. JavaFX skins, by contrast, are not: each individual control can have a different skin applied to it, and several of its properties can be adjusted with CSS rules rather than replacing its skin outright. Of course, this also means that JavaFX doesn't look like the native platform, unless someone makes a skin that mimics said platform. &gt;Did Oracle create it Yes. It comes with Java SE ≥ 7.
No the other way around. (Eclipse) in comparison to intelliJ, never again (Eclipse) . Of course :) 
That's what the `com.apple.eawt` API is for. Complain about the platform API, not the cross-platform GUI toolkit that isn't even aware that there is such a thing as an "application menu".
Yeah, for a sufficiently loose definition of "modern". SWT is obsolete. Ignore /u/codereign; it knows not what it speaks of.
Ah. Phew. You had me worried for a moment. :)
No problem. JavaFX 1 was marketed by Sun in a manner that I can only describe as schizophrenic, so I was quite confused as to what it was actually supposed to *do.* But then Oracle bought Sun, released JavaFX 2, and described it in a way that was more lucid. :)
There's also a coursera class for this book. It's excellent.
&gt; BTW Swing is not deprecated in the traditional sense, support will continue for the foreseeable future, just no new features. This is what I meant by only bug fixes are planned. So for anyone looking for new shining toys, JavaFX is the way to go.
Yes I agree we have very complex projects with tons of project dependencies and for our guys with small project backgrounds the complexity of eclipse is frightening at first. Once they figure out we need three or four servers running for one project they start to appreciate the complexity more and realize eclipse's complexity comes from its adaptability and ability to work with a large number of technologies and environments. No one appreciates the complexity of an radial arm saw until you need to do a ton of cuts with the same tool in a small space.
You do realize that app performance is not specific to any one technology right? My point was in response to eclipse is slow not swe vs swing. you are making my point. What you do with it and how its used has more to do with performance. Pick the right tool for the job and dont drive screws with hammers etc.
At my employer the only Java GUIs we created were built on top of Netbeans. Since then, 2008, our Java projects have been server side only, with other technology stacks on the desktop/mobile side.
Thanks
I know, otherwise it would not accept list.add(null), but this line does nog say that it actually stores an element with value null... Besides, I would never create a program where you expect to have the indeces of 2 lists in sync. I would prefer to use an actual array so that I can control it myself, and it should be encapsulated inside 1 class so that there can be no access from other classes through my own public interface. The ArrayList implementation could easily be passed as parameter to other parts of the code, that may do something else with the lists. In that case you can no longer expect them to be in sync. And if you really would like to connect the values of 2 lists, why not use a Map?
Except that JavaFX has not yet matured to the point of completely replacing Swing. So No Swing should not be deprecated which was the point of the article. 
Not suggesting you change your target platform but have you tried it with one of the latest JDK8 builds?
&gt; I would prefer to use an actual array so that I can control it myself Actually, I use an API where this is necessary in some cases (SolrJ). Sometimes you don't get to control everything. &gt; The ArrayList implementation could easily be passed as parameter to other parts of the code, that may do something else with the lists. In that case you can no longer expect them to be in sync. That's why you make defensive copies when passing your internal data structures around. &gt; And if you really would like to connect the values of 2 lists, why not use a Map? A Map isn't really two lists because the keys have to be unique. 
Just being curious, do you have code where you are intentionally storing a null value in a collection (both array and arraylists)? 
 &gt; A Map isn't really two lists because the keys have to be unique. You got me there, but do you get my point? My point is that I would use another structure to link the 2 properties together. (like a simple bean with 2 properties, stored in a list)
Sure, there's lots of things you *can* do. But the Java class library writers are charged with creating something general enough so that anyone could use it for anything.
[Oracle JavaFX site](http://docs.oracle.com/javafx/) is decent, provides the code and is focused on JavaFX. If you are looking to embed JavaFX into Swing there are a few additional specifics. This is a shameful plug for my own articles: (http://netbeans.dzone.com/articles/jfxtras-radialmenu-netbeans) (http://netbeans.dzone.com/articles/tabs-tabuless-netbeans) and some by Geertjan Wielenga: (http://netbeans.dzone.com/articles/how-integrate-javafx-netbeans) (http://netbeans.dzone.com/articles/how-integrate-javafx-netbeans-part2) though they do have a slant towards the NetBeans RCP platform which is Swing. And honestly NetBeans comes with a slew of JavaFX examples which are nice. 
I agree. However, this news post was about deprecation of Swing, and this sub-thread started with the assertion that SWT is better &amp; faster than Swing, with Eclipse as the evidence. 
Fundamentally, the reason I keep using swing is that netbeans [my ide of choice] has a great swing gui builder. It's the intersection of things I like and things I need; I build a lot of good old-fashioned thick client apps, and I generally use java and swing. Galvanised by this, I just went into netbeans, to experiment with Java FX. In no particular order: * Where's my gui builder? The netbeans [webpages](https://netbeans.org/features/javafx/composer.html) mention a composer, but it isn't anywhere obvious, and the "getting started" link is a 404. I created a fx file, opened it, but netbeans doesn't offer me a "design" button like the screenshot has on that page. * I'm looking at the samples, and there doesn't seem to be a "hello world gui application, with, like, menus and tabs and shit"; there's lots of trendy graphical stuff like a GUI visualiser, a block breaker game, a bunch of chart demos... nothing that meets my simple need of "build an app". Deprecating swing is the stick. Perhaps making javafx the carrot would be a better idea?
Hey, if Eclipse works best for you, great! I know folks who simply prefer it, having used equivalently up to date versions of other IDEs. I don't intend to say "don't use Eclipse, it sucks", but rather "NetBeans is very capable, and, IME, is conspicuously lacking in suck." Too often, though, the assertion is that NetBeans is somehow not at the same level as Eclipse and IDEA. In fact, you imply that with your insinuation that it takes Eclipse to handle the complexity of your projects. Certainly there are capabilities that Eclipse can offer that other IDEs cannot, due mostly to the network effects of its early (deserved) popularity. There *was* a time that NetBeans was far less capable than Eclipse. 
I was only implying that JavaFX is managed as a true Scenegraph and the true power of it is the capability of interacting with said Scenegraph Nodes and Groups. It is true that at a high level the Scenegraph and Component Tree approach appear and function similarly.
All my Java GUIs are built on top of the NetBeans Platform as well. I continue to build new plugins to support new missions but periodically mix JavaFX views with the existing Platform apps. There is a group in my company that opted to go with a ground up development of JavaFX for their Mission Control software instead of the NetBeans Platform. Two years later they have similar functionality to my Mission Control apps but they have a long tail of nuisance type bugs. Plus they had 5X the dev/test resources to support the effort as my group. Point being is the maturity of the Swing/NetBeans Platform combo has gotten the job done and saved a ton of costs. JavaFX will get there but probably not until 2014.
GUI builders are crutches. 
That was the general point of the article... that JavaFX needs to be a better carrot. Especially when considering that a lot of younger developers are coming out of college and insisting on HTML5 as a solution for everything. 
For a GUI builder you need [Scene Builder](http://www.oracle.com/technetwork/java/javafx/tools/index.html) It integrates with NetBeans nicely and gives a similar, albeit expanded, capability set as Matisse, the Swing GUI builder.
Yeah the eclipse subthread was flamebait and I responded in turn. Eclipse's performance problems have nothing to do with SWT if anything it helps.
I guess Trolls don't need crutches right?
NumberFormatException tells you parseInt was unable to convert the input into an Integer. The input, as it says in your error message, was "". So what's the problem? What do you expect Integer.parseInt("") to produce?
Java.net article author here. Here is a link to the original article whose thesis argues in [favor of deprecating Swing](http://yakovfain.com/2013/11/09/java-swing-have-to-be-deprecated/).
You should try printing the N[f] and f values to actually see what you are trying to convert.
Canvas isn't obsolete, it permits custom double buffering and stuff. Note that there is no JCanvas.
So what is your fucking point? Obviously he has not finished them all. He has completed: Volume 1 – Fundamental Algorithms (chapters 1 and 2) Volume 2 – Seminumerical Algorithms (chapters 3 and 4) Volume 3 – Sorting and Searching (chapters 5 and 6) He is working on: Volume 4 – Combinatorial Algorithms (chapters 7 and 8 released in several subvolumes) Volume 5 – Syntactic Algorithms (as of 2011, estimated for release in 2020) (chapters 9 and 10) And he has planned to complete: Volume 6 – The Theory of Context-Free Languages (planned) Volume 7 – Compiler Techniques (planned) So whoever has the stamina and intelligence to read all of them is a better person than you. Stupid Prick. 
Actually, Swing is pretty awesome, but yes, for any new projects, I'd recommend JavaFX - it's even better.
Funny, because Qt has no issues adding this.
Have you even *looked* at `com.apple.eawt`? Do you know for sure that it doesn't do what you need?
If by "data objects" you mean the underlying data model (e.g. a class representing a person or a purchase order), no, those aren't on the JavaFX scene graph. They might be *bound* to nodes on the scene graph (e.g. a variable in the data model being bound to a `TextField` control that edits its value), but they aren't actually part of the scene graph.
Yeah, explaining what's actually awesome about your tech isn't going to get your foot in the door. Gotta dress it up with bullshit to impress the useless middle managers.
I think String.split will produce empty strings "" if you have multiple spaces between your integers. That might be the cause of your unexpected input to the foor loop.
Nodos is probably an empty string and N[0] is the same empty string. Therefore, f &lt; N.length which leads to the exception. "".split(" ")[0] == "" "foo".split(" ")[0] == "foo"
Underneath Spring MVC is pretty complex. The number of internal layers it needs to go through and objects it need to instantiate is huge.
It isn't "bad", it just isn't great. It is an aging API that made some mistakes along the way. JavaFX gets a lot right that swing got wrong, it isn't perfect (or even fully mature in some respects) but it leads to less code doing more useful things.
I have to laugh at the sharp change of direction when oracle took over. 1.0-&gt;1.3 JavaFX felt like it was trying to be everything. 2.0 comes out and most of the changelog notes where things like "Dropping mobile support", "Dropping Java FX Script support", "Dropping X support". I don't think it is a bad thing, it is just a little funny.
"A evolution in innovative cloud solution for modern infrastructure scalability in a data driven world" -- Way too many marketeer software blurbs
LOL..thanks. Oracles documentation always makes me feel like a moron. I was reading stuff like that about JavaFX on their intro site about it and the only thought I had was "whaaaaat?"
Hmmm...I wonder if there is a feature request to allow conversion of Swing to FX or if that is realistically possible?
How long ago did you purchase Intellij 12?
Yes, using anything in the com.apple.eawt package initializes the entire AWT stack, which coincidentally doesn't play nicely with JavaFX. The only workaround I've found is wrapping JavaFX with Swing and using the standard swing menubars which DO work with apple's AWT extensions, but it's a very poor hack.
Arrays of Objects by defaulted to null, but for lists, I have used null as a sentinel value (although I could have also used subList)
I'm sure there is a lot going on under the hood, but its simple and fast enough from my perspective.
Why do you need them in a hash set? What are you going to be doing with them? 
It's always the little ones that cause the biggest problems and then you feel like a dumbass for not catching it earlier.
Have you tried starting Eclipse using a 32-bit JRE instead of the standard 64-bit one? Also, make sure that your execution environment for the project is set to 32-bit. You probably want to ditch the 32-bit SWT in the long run unless you're stuck with it.
I just tried switching to using 32-bit and didn't help. The weird thing is I removed the jar file from the build path and tried running to see what would happen and it gives me the same exact error which i didn't expect to happen considering I removed the referenced library. Should I be getting a different error if I removed the jar file? 
Whoa... That's actually rather neat. Always used eclipse for writing code and creating GUI's. It's nice to know that NetBeans has this!
Now implement templates, i'm sure that'll make all our lives easier!
Did you try looking for one? There are gui builders for Netbeans, Eclipse and IntelliJ. A Google search for java gui builder returns many results including comparisons. However, you should know that there are many times where it's easier to just write it by hand. I have worked on a Swing based application for 3 years. Once your UI gets a little complex or involves custom controls, builders start to struggle. It's true that some of the Swing layout managers can be verbose, but if you get to know them, you will have close to complete control over how the UI looks. (It should also be noted that the code generated by builders tends to be very verbose and harder to follow them the same code written by hand.) As far as why your professor isn't using one. It could be because code will always be the same, independent of what IDE you used to write it in. However, supporting multiple different gui builders will take a lot more time.
&gt; SWT is obsolete I would like to hear the source/logic behind this. I guess Swing is sufficient for all current needs, so there's no real need to go using SWT intentionally now, but it still seems like a viable alternative to Swing to me.
Haven't tried the intelliJ one, but window builder (eclipse) is much better than netbeans. Window builder can parse source code. Netbeans can't. If you write a GUI in netbeans and then manually change the config file, you're screwed. Eclipse on the other hand doesn't produce any code that you can't go in and hand edit. Imagine two authors, but one of them can only read books that he wrote. The other can read any book. 
Bug [JDK-4319803 : Keeping AWT Alive](http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4319803)
Deprecated != @Deprecated ;)
The preprocessor was designed to work on anything C-like or even just text-like. There's really nothing preventing it from being used on Java, Python, Ruby, XML, SQL, AWK, perl, Bash, or even CMD besides the good judgment of the user. Sometimes humans just choose.... poorly. 
I second using the Guava library. If the project is anything substantial it will be useful in other ways too. 
Wait, what does it do? What happens? Also, since when did standard Swing menu bars let you add things to the *application* menu? Standard Swing menu bars can add menus to the top-of-the-screen menu bar, and [there is a JavaFX API for doing so as well](http://docs.oracle.com/javafx/2/api/javafx/scene/control/MenuBar.html#useSystemMenuBarProperty), but `eawt` is (to my knowledge) the only Java API for manipulating the application menu.
Eclipse has a pretty good SWT GUI builder. You just drag and drop elements to a frame and then add events. You can use it to generate objects for your UI as well by copying the code over to your program.
Hmm, you make interesting points. He should probably also read my 10 volume set I'm planning to write on the topics in Machine Learning if he's interested in that as well. 1. Agent Theory (planned) 2. Bayesian Networks (planned) 3. SVM and Regularization (planned) 4. Neural Networks (planned) 5. Trees and Tree methods (planned) 6. Gradient Boosting and Deep Learning Methods (planned) 7. Human Brain simulation (planned) 8. Complete Strong AI Implementation and Theory (planned) 9. Singularity Theory (planned) then he'll have a strong background in AI too!
Why do your get-methods have parameters? Do you really need the boolean completed? Something like public boolean isCompleted() { return episodesSeen &gt;= totalEpisodes ? true : false; } could do the job. On a side note, you only have one number of episodes, you will probably need one for episodesSeen and totalEpisodes? For genres and statuses you could probably use enums (esspecially status) Do you know about Sets/Lists? Using a set is probably better than having multiple variables for genre(1,2,..).
Hi bondolo, can you clarify your statement about "zero cost taxation" in the HashMap? For example, how JIT will optimize "if (size==0)" check at the start of HashMap.getEntry if you can simultaneously have empty and non-empty maps in memory (this branch is needed)? I will link this your post and hopefully your answer to the article.
To me, it is the best option. I'm unaware of any other GUI builder that can handle dynamic elements like you describe. Your entire view is not likely be dynamically generated. Modularizing everything goes a long way when dealing with a view with dynamic elements. If looking at the top frame/parent you will only miss the dynamic element preview instead of the whole thing. 
So did you like it.. ??
I don't understand how you would include a macro defined in another .java document? There are a lot of cool things you can pull off with macros and other forms of meta programming but I don't see how it would work in java.
Besides the punctuation and grammatical errors... &gt; If you are mature coder than you hardly need any IDE, than you can code using any Text editor and compile it with command prompt. For mature coder JEdit is best Java IDE. Wrong, so wrong. Have you ever tried to re-factor 100s of java classes in a legacy system? Now try doing that with a text editor... You don't. If anything a beginner coder should start basic with a text editor and command line javac. Learn how to do things the hard way, then use the tools that make life easier. That way you know what your IDE is doing instead of just thinking its all magic. 
Is JavaFX even hardware accelerated when performing rendering operations yet? Is there a d3d/OpenGL implementation there yet? Last I checked there wasn't... Which is why I haven't been using it.
There is a fair bit of GridBagLayout. However, one of the tricks I picked up a long the way is to not limit yourself to a single layout. Using a panel as on of the components for the main panel allows you to fall back to the simpler layouts when your main layout isn't letting you do what you want.
Hey thanks for response and sorry for grammatical errors. Post is not mean for developer who re factor 100s of classes. Post is for those who just started Java coding and searching for IDE. May be few of my assumptions are wrong but I dont think its all wrong. Any way thanks again for your response. 
You still need to use com.apple.eawt with Swing to hook into the application menu, however since Swing is natively interoperable with AWT components it is still possible to use these extensions. JavaFX's integration with Swing is one way only, embedding a JavaFX scene with a JFXPanel, JFX has its own thread management that is incompatible with com.apple.eawt and trying to initialize these extensions before you call Application#launch(args) results in a deadlock, calling them in an overriden Application#init or Application#start causes nothing to happen and you get an error message in the console about being unable to initialize AWT in headless mode.
Yep. Pure Java. Clean! 
Yeah I don't quite get it. Looks like a case of using Stack Overflow to [talk to the duck](http://en.wikipedia.org/wiki/Rubber_duck_debugging).
This was submitted to r/programming just a couple of days ago, resulting in a huge comment thread, which is [here.](http://www.reddit.com/r/programming/comments/1rvltx/scala_1_would_not_program_again/)
So you abandon SpringMVC "WEB" code generation including the HTML code generation? And then what about JSF. I still think there is a place for Java handling come of the client-side code generation.
Like I said to each his own. I personally don't quite "see" the layout in a UI build in Java, but it does offer some advantages for creating repeating things in loops etc. But as I said as well, this preference is thus no reason for not choosing or even hating JSF ;)
In the current java 8 HashMap code you'll see something like if ((tab = table) == null || (n = tab.length) == 0) n = (tab = resize()).length; which utilizes the loading of the field into a local to also do the check if the table is uninitialized. The JITing of this code has the result that the null check on tab which would be required in n = tab.length can be omitted as tab can be proved to be non-null in that branch. tab is also known to be non-null in the later evaluation of p = tab[i = (n - 1) &amp; hash]
Hmm, I'm kinda fishing here myself. When you say "I tried switching to using 32-bit", how sure are you that you accomplished that? On Windows, I believe you'd have to set JAVA_HOME and PATH in the Control Panel environment variables to point to the 32-bit JRE. If you say, "java -version" from a command prompt, what do you see? If I do the same from my Windows 7 with 64-bit JRE installed, I see: java version "1.7.0_45" Java(TM) SE Runtime Environment (build 1.7.0_45-b18) Java HotSpot(TM) 64-Bit Server VM (build 24.45-b08, mixed mode) Do you see something similar except it says 32-bit instead? You'd then have to restart Eclipse. Then, in Eclipse, if I go to Help-&gt;About and press Installation Details, the Configuration tab shows me the following (elided for conciseness): java.version=1.7.0_45 java.vm.info=mixed mode java.vm.name=Java HotSpot(TM) 64-Bit Server VM 
Yes JavaFX is hw accelerated when hw is available. That includes both 2D and 3D scene nodes
http://www.reddit.com/r/java/comments/1pv7lh/my_case_against_autowiring/
Hmm, funny. Why didn't reddit tell me that the post was already submitted...?
Oracle recently released Project Avatar which inhales the client-side and requires very little JS knowledge (or so they say): https://avatar.java.net/
HTML5/jQuery are means of presenting data, both still require a server-side framework to generate the data to present. Likewise, on the server-side, the means of presentation are not relevant. So, there is no server-side response to HTML5 and jQuery because the server-side is complimentary to, not competing with these technologies.
But doesn't that mess up SEO? If you're dynamically pulling your site content from your back end via JS, then it won't be indexed. 
I develop enterprise applications, not public facing websites. If I were creating a public facing website, I would never choose an approach which doesn't function at all without js support. Graceful degradation an all that...
Can you recommend some books/tutorials about how to do this on the backend? I know Java SE but have avoided the enterprisy stuff. I googled but there is seems to be about 50 million ways to do things.
Spring has some [pretty decent tutorials](https://spring.io/guides/tutorials/rest/) that describe the techniques I used on my backend service. I can't really recommend any books because I get all my information online.
&gt; My experience is that deep abstraction layers (Generated HTML, generated JS, etc like with Vaadin, GWT, JSF) seem nice for small/trivial projects, but start to work against you when things grow and get more complex. I guess that is more my question. I tend to favor the GWT/JSF/Wicket because you are still using a lot of Java code to do compile time checks. When you build up your UI, you tie the component to Java code. These are fine, but they are mostly HTML4 and standard JavaScript. It would interesting if they want to use the new HTML5-html syntax like "progress, meter, footer, header" tags. Also, will they use jQuery or something similar to build up components. 
Take a look at PrimeFrames ... it's a library of JSF components that generate jQuery UI code. Demo here: http://www.primefaces.org/showcase
Another vote for PrimeFaces JSF component library. They support HTML5 and JQuery. I think it is exactly what you are looking for.
It sounds like JSF is exactly what you are looking for. It supports jQuery and HTML5. You can write most of your code in Java and use a component library like PrimeFaces instead or writing JavaScript.
I'm pretty sure I need to center it around itself. But it's only my second day in the class, so I don't know how to code it. (The spacing is because of the spacing I think)
&gt; Wicket/GWT are javascript oriented (or at least can be) but don't use a standard javascript framework. Wrong. Wicket uses jQuery to implement its built-in AJAX, and it's easy to write your own JavaScript that uses jQuery as well.
 System.out.println. ("Knowledge"); // your code System.out.println("Knowledge"); // My code Nothing to do with spacing - it **IS** different. To center some text around itself, you need to bring all strings to the same length. A string that is too short needs to be padded with spaces to become the same length as the longest word. Normally, a **for** loop is a suitable means to achieve this. 
Yeah I just saw that. My own fault, It's my second day but I got no error messages from it, thank you though.
Uh... wrong comment tree?
jsf is bloated. I spent a number of years developing with it. There are other frameworks that a fair more easier to maintain than JSF. Vaadin/Wicket, etc. 
Well the newer wicket version uses jquery (as of 6+). We use 1.4x and 1.5 which uses its own javascript framework, at least for several components. E.g. the ajax behaviors.
I'm sure there are plenty but the most obvious place would be [Maven Repository](http://mvnrepository.com/search.html?query=spring) site, no?
 public class Knowledge2 { public static void main (String[]ags) { System.out.println ("Knowledge"); System.out.println ("Is"); System.out.println ("Power"); } } Is how my code is set-up(If Reddit registered the 4-space code format.)
And now that you have everything under each other - fill the words with spaces to center them. Have you learned about loops yet?
No I have not, but that did fix that my problem, thank you very much!
Basically it helps you avoid setting myObj = null inside your conditional statement by accident like this: if(myObj = null) It's called [Yoda notation/conditions](https://en.wikipedia.org/wiki/Yoda_conditions), because reading the if statement aloud sounds similar to the way Yoda talks from Star Wars. 
I think this concept (sometimes known as yoda-code iirc) mostly applies to boolean variables, because if you forget one = sign, it still compiles as an assignment. if (a = true) {} Will compile and always enter the if-clause. if (true = a) {} Will fail to compile (cant assign to literals). If you forget the ! in either case above when testing for null, the code wont compile, since there is no boolean expression to test.
JSF is DOA. At the point that it finally became usable, it was no longer useful. HTML generation should absolutely 100% be abandoned for any site that requires a modern UI. This is really a better way to go IMO. Separation of concerns. HTML generation always sucked, it was just useful when front-end technology was so behind the times.
Learned something in this thread. But I was going to ask/mention the same thing as /u/juu4, as in, why can't one just use the operator == as opposed to yoda notation?
Yikes, what about Spring's dependencies? You'll have to look at the POMs to figure those out and go download them as well.
Java has many frameworks for this type of application: Spring MVC, Grails, Play!, Vertx, Avatar, JAXRS and many many more. There is still a need for server side HTML generation. Server high horsepower, client low horsepower, client javascript support, caching... 
assert contentsOfYourBrain == null. In all seriousness though, I am of the belief that var == null and var != null seem to be the best for clarity. It also seems to be fairly idiomatic.
Others have answered the original question, so here's some related advice. The necessity for this type of check can be mitigated by using a singleton design pattern. Maybe this isn't appropriate in your specific situation, but it's definitely something to keep in mind.
I've seen people do this too, I don't get it. "if (a)" doesn't have any other possible meaning than "if a is true"... when I see "if (a == true)", it makes me stop and think, "wait, what weird thing is this person trying to clarify?" (I know it's just a personal preference thing, I don't think either one is wrong or stupid or anything...)
Thanks for the explanation. I've just started learning java so I was asking out of curiosity :) Thank you
&gt; I know it's just a personal preference thing, I don't think either one is wrong I'm going to disagree; if I see "if (a == true)" in code (especially if it's seen a couple of times) then it's a nasty code smell, and makes me wonder what other iffy programming I'm going to be dealing with.