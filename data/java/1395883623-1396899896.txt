Java is verbose because it gives you the flexibility for things like buffering your reads vs. not and other decorators. There are plenty of libraries to make it easy and it usually gets in the standard library if it's important enough.
Java is one of the fastest server side platforms available. That's not to say there isn't bad authored code that makes an implementation slow. [Actual Numbers](http://benchmarksgame.alioth.debian.org/u64q/benchmark.php?test=all&amp;lang=java&amp;lang2=gcc&amp;data=u64q)
For the server side this is not an issue and the benefit of having the maintainability and performance of Java far outweigh the startup time. Also most people don't understand that the default mode for the Java VM is server side behavior, and they should use the client side switch otherwise. [Actual Numbers](http://benchmarksgame.alioth.debian.org/u64q/benchmark.php?test=all&amp;lang=java&amp;lang2=gcc&amp;data=u64q)
Go back and finish your degree. At some point, it may limit you not having it...not necessarily, but when the market gets bad, it becomes a filter unless you really stand out other ways.
Right. I was listing common complaints, not complaints I agree with :). I've actually become quite good at tuning the JVM now for awesome speed. 
I regularly interview people for software development positions. Any time I give a task to someone to do on their own time, I expect research will be involved and I give that task to them with that in mind. Being able to think through solutions is important, but being able to get to a solution with your available resources is the reality of software development. If I were in your position, I would have included the answer, made a note of where I got it from, and displayed in some way that I understood how the answer worked. This would have definitely been a good sign to me as an interviewer. It tells me: this person is honest, this person knows how to find the answer, and this person didn't just copy/pasta the answer without interpreting and understanding it first.
A method can either return the type from it's signature or throw an exception. In your example, the number method is invalid because it does neither. This compiles fine: public int number() { throw new UnsupportedOperationException(); } Is this not what you're looking for?
As they say, we're in the business of solving problems, not creating solutions.
Shouldn't hibernate sessions should be closed in finally block?
Take a look at sbt project file or scalaz, you'll see how much people abuse operator overloading to the greatest extend =)
One I've found yesterday: `Executors.newWorkStealingPool()` Creates a work stealing thread-pool using all available processors. http://winterbe.com/projects/java8-explorer/?class=java.util.concurrent.Executors Awesome name. lol
Think about how a queue works. What order do things leave the queue?
First in First out. What i was thinking of doing is making two queues each with one half of the string queued up as single characters and then if the queues match return true.
That is to some extent true. On the other hand, a generous sprinkling of sensible defaults wouldn't have hurt the standard APIs in the least (Well, since 1.7, we're finally seeing some of that).
Why 2 queues? Think of the information you have. Given a string of length x, you want to compare char 0 through x/2 to x/2+1 through x right? (Slightly different for the odd length case but not much)
Dont you mean the [obsession with nouns](http://steve-yegge.blogspot.com.es/2006/03/execution-in-kingdom-of-nouns.html) ?
What about queuing less than the whole string?
Are you saying that a string comes out of a queue and is backwards? I understand that for a palindrome in stacks the string would come out reversed but since queues have first in first out, doesn't it come back out in the same order?
Correct, and that's what you want for this case right? Edit- it's not backward in the queue, but that's what behavior you want.
So you could queue half the string, ignoring commas and spaces (not sure how you do that in the code), and then dequeue it and compare? It still just seems counter intuitive to use a queue for this. You basically just push it through a queue for it to come out unchanged and then compare it.
There is a tool that helps with re-deploying stuff on the server: http://zeroturnaround.com/software/jrebel/ I've only tried it so far and felt that it was very nice, but we didn't get the budget for a license.
The problem is, this isn't a palindrome. It's just taking a string say "booboo" and splitting it down the middle, and if the two halves match returning true. Maybe i'm misunderstanding a concept about queues.
Correct! Handle the simple case first (no punctuation or spaces) then deal with the edge cases.
That's one point (though as I said in my answer to /u/arandomtoolbox, some sensible defaults and shortcuts could have been added in the standard library long ago). However, this is not the whole story - there is a load of factors that contribute to Java's verbosity: * Everything is a class - even when it just prints "Hello, World". This also implies the need to invent a lot of patterns. * Visibility etc. modifiers all over the place. "public static void main(String[] args)" makes Java a [insert expletive here] language for beginners * No properties, so a lot of getters and setters (though [lombok](http://projectlombok.org) has got us covered in that regard) * The APIs strive for maximum understandability and extensibility, which tends to make for loooooong names and also for small do-one-thing classes that can be mixed and matched - but also *must* be mixed and matched to get something useful done. * Annotations are a really clever thing. However, they add to the visual clutter. @Override @NonNull @SafeVarargs youGetMyDrift()? * The language model is positively primitive. This means many things must be written out that we get for free with other high-level-languages. This is getting better with 1.8 and libraries like [Guava](https://code.google.com/p/guava-libraries) take away some of the pain. I've seen some languages that were way *more* verbose than Java, though. And the upside of the above points is that the language is so primitive that Javaists (or what is the name du jour?) just tend to get stuff done instead of obsessing over their language (which e.g. has really hurt the lips community).
You should try Rust, it's the perfect language for clever folks that value exact expression and explicitness with regards to memory. It's probably right up your alley.
For case, strings have a toLower method as well.
Queues are first in first out. Given the sequence of chars [a, b, c], when queued up in order, what is the first character that you see when you dequeue?
First: a Second: b Third: c Or is it the other way around?
Correct. So given the sequence [a, b, c, a, b, c] and only queuing the first half. All you need to do is compare each char of the second half to the first thing that is dequeued (in the even length case)
Okay, I understand the solution. I guess i just can't get over how overcomplicated the restrictions on this problem make it!
Yeah i had that concept down, it's just it seems like you don't even need queues to be able to compare strings like that. It doesn't really contribute to the solution. Oh well! Thanks for all the help! I really appreciate it :)
Some edge case strings to consider ab...........cabc a {all white space} Abcdabc {space}{space}abcabc 
Yeah. It gets more complicated with punctuation and spaces though since it could make it difficult to determine "the middle". For these cases you could queue all of the "valid" chars, dequeue 1/2 the queue into another one, then compare the fronts of each queue until one queue is empty.
How exactly do you ignore spaces and commas? Would you just make a custom exception so that if you dequeue a space or punctuation you don't compare it?
Look at an ascii chart. You'll notice that the ascii codes for lower case chars fall into a certain numeric range (ignoring all punctuation and spacing if each char is within this range) http://www.tutorialspoint.com/java/lang/character_compareto.htm
I'd recommend to use your own TableModel that extends the AbstractTableModel class. You store your data as you like (ArrayList,etc.), pass this data to your TableModel class (which extends AbstractTableModel) and in the TableModel class, you have to override: + public int getColumnCount() + public int getRowCount() + public Object getValueAt(int row, int column) Then you just need to assign the defined TableModel to the Table and you should be good to go. Since you already have your defined data structure, you just need to pass that data structure to your custom TableModel class in a parameterized constructor. 
This blog post guides how to use Amazon java sdk to upload all contents of folder recursively to Amazon S3. In addition, it provides the simple guide of using Tika to detect file mimetype
What were the problems?
Here is one article that explains, what does memory leak means in java: https://plumbr.eu/blog/what-is-a-memory-leak. But in your case, if you are really sure, that when you came back to the menu, there is no reference to the used game data, then when Garbage Collector will start his next cycle, he will happily remove all those unused objects. If you hold a reference, you have a memory leak and should severe that reference.
Keep tuned for next week article and I will tell you how bad one can go with that.
&gt;Visibility etc. modifiers all over the place. "public static void main(String[] args)" makes Java a [insert expletive here] language for beginners Funny, I see this as the other way around. All this extra meta information makes it so you control who can see what where. The untyped, ducktyped languages are typically for people that can't handle it themselves. If you don't want the safety, modularity, organization associated with that, you can use something like Groovy. Java is not meant for throwaway code. &gt;The APIs strive for maximum understandability and extensibility, which tends to make for loooooong names and also for small do-one-thing classes that can be mixed and matched - but also must be mixed and matched to get something useful done. Single responsibility principle, yes. Again, taking cost-benefit into account, I'd rather have readable code than give up that stuff. &gt;Annotations are a really clever thing. However, they add to the visual clutter. @Override @NonNull @SafeVarargs youGetMyDrift()? I view this as a [power feature](http://www.mscharhag.com/2014/02/java-8-type-annotations.html) Isn't the point to take away a lot of verbosity? &gt;The language model is positively primitive. This means many things must be written out that we get for free with other high-level-languages. This is getting better with 1.8 and libraries like Guava take away some of the pain. Libraries are key, Java has a huge community, and it's not like a lot of other languages (Ruby, Perl, Python, JavaScript) that have a huge mess of crappy un-maintained redundant libs. 
I think this is non-optional, in fact. I'd have said some demonstration of understanding would be necessary in an interview context.
Additionally, you don't want people who mechanically parrot back the (wrong) first page of Google. If nothing else it's a lesson in understanding and testing your code.
Well ok ;) I'll see what other abuses in API refactoring I can come up with. The first is that libraries will rapidly add "InterfaceWithDefaults extends Interface" as a means of adopting JDK8.
Sorry if it sounds like i was dissing Java, I'm not. After all, I work with this language for over a decade. &gt; Access Modifiers Yes. The access modifiers are clearly useful. final is clearly useful. I use both a lot - to keep stuff private, as a reminder that a variable won't change, etc. However, I would have made final the default and add a "mutable" to all mutable fields/variables, etc. I don't know if Java will ever make a good first language - I used to work as an assistant and tutor at a CS faculty and explaining "public static void main" to students was not my favorite pastime. But that's ok. Java isn't meant for beginners. &gt; SRP Of course. And the APIs shortcuts for common tasks are getting better with each version. &gt; Annotations I love annotations. And no, the point is not taking away verbosity, but to add meta-information to code. It straddles a similar line as doctests - documenting in a way that is beneficial to the programmer and the compiler/runtime. &gt; Language vs. Libraries Absolutely. Java libraries rule big time - another outcome from the "getting stuff done instead of sitting in awe because your language is so beautiful" situation. TL;DR: Yes, Java is verbose. Yes, that's bad at times, but mostly it's good.
1) Dealing with overly complicated/convoluted requirements (whether technical or business) is certainly part and parcel of software development. 2) Creativity is fostered not by freedom but by limitations.
Looks like the JTable is initialized with a large array of null values, then the content is attempted to be set later with: setValueAt(object, row, column); And row is always 0 - so content is only ever updated to the first row. Instead just create a DefaultTableModel with the columns you want, set it as the table model when you create the table (ditch all the null stuff), keep a reference to the model and then in the listener simply model.addRow(content) to create a new row.
As an alternative to using an ASCII chart, look at the methods available in the Character class. You can test for whitespace or you can test for letter or you can test for digit. Ignore the ones you don't want and move on to the next value.
Missing javadoc explaining what the method is doing. 
The latest update fixed the problem!
Ok, you may be right there. Still, the kind of people who will copy and paste code without reading it kinda deserve it, don't they? And it's not MY code, I just posted the link (okay, it does make me guilty for spreading the word)
&gt;and in some ways it clouds the original intent of interfaces in the first place. Maybe, but you can also argue whether interfaces are needed when you already have abstract classes. But this is maybe not the place to argue that ;) Here it's just about what's in the current Java language specification, and default methods are in there ;) Whether everyone is familiar with it or not doesn't really matter, or maybe it does and then the more reason to explain it to them don't you think?
Just on your first point, I don't actually think there's a terribly strong argument to be made there. Abstract classes still support only a single line of inheritance, whereas largish numbers of interfaces can be added, allowing your new object to interact with a much wider variety of other objects. I admit I see the utility of default methods, and the fragment you quoted is really more of a philosophical point than a functional one.
Yes there are ways to do this in java. You could use a BufferedImage and a convolve op. You could use javafx. You could use a library like imagej, which would make it pretty trivial. I have no clue what your question has to do with 'using gifs'
It is mostly backwards compatible, but without more information about the app we can't really say. Try it with java 8 and see what happens
Yeah it's very slow to return and if a process keeps spiking its memory usage then it may never return that memory, so it's not a mechanism that should be relied on, but it does exist.
Technically, Java is completely backwards-compatible. In practice they make some slight changes that can sometimes trip up applications. If your application is doing simple stuff it should be fine. But like pohart said, you'll need to just test it out.
What type of board are we talking about, if it is chess-like you would use a 2-dimensional array, if it is atypical, I would definitely use a graph-like structure, where every Space has its adjacent Spaces in a field.
This would have been more useful if it included short definitions of each of the Compact Profiles along with what types of applications might be able to take advantage of them.
its atypical. i was more wondering what the difference is between a graph and a list with an adjacency matrix. also how to implement a graph. i am trying to use it now but eclipse cant seem to find a graph&lt;T&gt; no mater what packages i import. according to the [oracle docs](http://docs.oracle.com/cd/E21764_01/apirefs.1111/e13403/javax/ide/util/Graph.html) javax.ide.* should do it right?
Is there some sort of tool that can analyze and tell me "Hey, use profile x here"?
I had to do this project a week or so ago. What you'll have to do is find a way to make a method to average the pixel, previous pixel, and next pixel together through an array. You load in an image with a scanner and go from there.
I bet it's pikachu!
/u/pohart and /u/dstutz are both right. The syntax and JVM of 1.8 is backwards compatible with 1.6. Having said that, this guarantees nothing about external dependencies. If you have a library that's using a system-dependent API or resource then you might run into problems. **tl;dr** Regression test. Always regression test. Even if you think it'll run fine.
Yes, it's called [jdeps](http://docs.oracle.com/javase/8/docs/technotes/tools/unix/jdeps.html).
The profiles are defined by what profiles and additional packages they contain. For instance, compact2 contains compact1 and all the packages listed in the table labeled [Detailed Profile Composition](http://www.oracle.com/technetwork/java/embedded/resources/tech/compact-profiles-overview-2157132.html). Afaik, only embedded applications would normally use them, but which profile your application requires can be determined using [jdeps](http://docs.oracle.com/javase/8/docs/technotes/tools/unix/jdeps.html).
Awesome, i'll check it out! Thanks :)
Nice - thanks!
ah...good catch. i did not see that
I just caught it because the formatting of the JavaDocs seemed different.
That makes sense, i think i've got it all figured out now. About to sit down and hash out some methods :)
Each space should probably have a list of spaces that can be directly reached from it. The entire space sequence could be stored in a map during initial construction which could be discarded once all the spaces are hooked together. If you store each player's current space in their object and don't hold on to the first space this would allow spaces to be garbage collected once they are no longer reachable.
You're right. I guess I just feel for the poor folks stuck on pre-1.7 by company policy or system.
If you are going to upgrade anyways, I would recommend trying 8 first. If all of your regression testing passes, you are good to go and can use everything 8 has to offer. You will also be more future proof, as you are using the current version that will be supported longer than 7. On the other hand, trying 7 first would mean doing the regression testing again on 8 after you verify it works on 7.
&gt;Full SE API - Image I/O This seems like something that would be useful to have in a compact profile...
One way would be to just chain the `.replace` function: String newString = replaceSample.replace("bob","b").replace("coc","c").replace("dod","d"); This isn't the most efficient, but for something simple like this I would imagine this is what you're expecting. A similar approach but more 'efficient' would be to use StringBuilder, and then if this got more complicated I would probably use RegEx. 
Does anyone know how to do the opposite? As in, download the entire contents of an S3 bucket to your OS? We use [Cloudberry Explorer](http://www.cloudberrylab.com/free-amazon-s3-explorer-cloudfront-IAM.aspx) at work, but we're looking for alternatives.
If it's a dependency to your project, the jar file must be in the classpath. IDEs like Eclipse make managing the classpath easier, but it still has to be there.
You can create an "UBER" jar where you copy the classes from the other jar into your jar, but this can be problematic. The Maven Shade plugin allows you to do this: https://maven.apache.org/plugins/maven-shade-plugin/index.html
Thanks. I am working on something that does not allow me to use any IDEs. Is there a way to include this JAR in the system Classpath (does such a thing exist?) so I don't have to key it in every-time?
Put a while loop around the whole thing, and then break out of the loop or return from the function when the user enters a 'q'.
Why not write a shell script to build a classpath variable? CLASPATH="...." javac $CLASSPATH JavaClass.java java $CLASSPATH JavaClass Then just run the script? You said you couldn't use an IDE, but is Maven allowed? Include all your dependencies in your pom.xml and maven will dynamically build the classpath based on the scope of the run command you give it (forget what maven calls this? Goals?). 
Sorry Maven not allowed either.
I was thinking of this. It sounds much more efficient to nest the switch inside the while. Thank you! I'm going to try it now and see how it goes.
Does this actually compile? sc does not appear to be defined. Aside of that, the actual try catch block looks good. You're trying to read an integer and you're correctly catching a InputMismatchException. What you're missing though is the entire read the input again part... :) PS: if you want floats, you should probably use nextFloat() instead of nextInt(). 
[Redacted as I'm seeing a second post of this which makes me think that you may have requested a solution to homework]
You can set the $CLASSPATH environment variable to include your jar.
I just saw another individual doing the same (requesting the same help), so I'll leave my suggestion above. I'm happy to help further if you have any questions.
**sc** should normally be a Scanner object, but your scanner is called **in**
Considering nextInt() is a method of Scanner and you're using Scanner everywhere, and "sc" could be short for scanner, it seems you've changed naming conventions midway through the code. Change "sc" to "in" and that solves that confusion. Not sure what the next() in the catch block is supposed to achieve though.
I think in.next()/sc.next() would prompt for another input on the same line before advancing to the next variable in the event that the first attempt was invalid.
Great, thank you!
Replace sc with in. Your sc looks to be an instance of scanner but you've already got it declared &amp; defined as in and not sc. Notice your object "in" has the function nextInt or nextFloat and you call that with sc in the try/catch? I'm guessing you took the code for the try/catch block from a text book and it just had your scanner object called sc rather than in. It'd be just like telling your compiler, "Billy is a human. Billy, take these different numbers. Great work, Billy! Billy, here's a base and height! Tell Johnny to try getting these number." Your compiler will immediately go "What the fuck is a Johnny? I don't even..." I'm guessing you haven't gotten to objects/classes and instances yet, so I won't spoil it for you. But, that part where you have &gt; Scanner in = new Scanner(System.in); is just like the part below it &gt; double base, height, firstSide, secondSide, thirdSide, area, perimeter; one variable is a type of Scanner, and one is a type of double. You can reference base, height and in since you've said to your compiler "here are my variables." When it gets to an undefined variable, in this case sc, it doesn't know how to compile it and it can't make any assumptions about what you meant either. 
If I understand correctly you want to: * Read in 5 numbers for the input * Check that each number is a float * If it's not, exit and display "You have entered an invalid input. Please try again later" What I feel you are missing is what's happening on line 25. You're saying "Make the variable called 'num' equal to the output from the method 'nextInt' belonging to the variable 'sc'". The problem is that neither 'num' nor 'sc' are defined anywhere, the compiler has no idea what these are. I'm gathering you are trying to refer to one of your numbers with 'num' and your input scanner with 'sc', but this isn't how Java works. It executes line-by-line so even if it did compile by the time you get down to the try statement on line 24 all your values have already been read and exceptions thrown if there was a wrong entry. You need to *surround* any code that might throw an exception with a try/catch block. I won't give you the answer but think about where the code in lines 24-33 came from, is that copied from somewhere? The statement itself makes sense, it just doesn't fit with everything else. 
That makes a TON of sense, thank you so much. My teacher e-mailed me that sc bit and that's what had me confused.
Don't know what Geany is but if you're looking to replace Eclipse you should definitely look into IntelliJ Idea.
What's the character encoding on ur computer? U can explicitly set it to ascii or utf8 when you construct ur writer. F 
line 4 you are writing the interger value of x, which is (for you range of x) 3 bytes of 0 and 1 byte of the value of x (0, 5, 10, ..., 1000)/ What you want is output.write(String.valueOf(x)), or perhaps output.write(x + "\n"); to get one number per line. Edit: well, I should have looked at the API first - BufferedWriter.write(int) converts the int to a char by dropping the 2 high order bytes. So it most likely is writing a byte of 0 followed by a byte of 5, 10, etc. which is being treated as (I guess) unicode Chinese characters
Check out the resources [here](https://dev.twitter.com/docs/twitter-libraries). I haven't used any of them, but the first one in the list that appears to support production as well as consumption is [Temboo](https://temboo.com/library/Library/Twitter/).
There a library called twitte4j or twit4j that's pretty popular and has descent documentation and code samples. 
You're right, I changed it back. Any idea on why it's not applying the catch part now, though?
Fixed, thank you!
 Charset charset = Charset.defaultCharset(); System.out.println("Default encoding: " + charset + " (Aliases: " + charset.aliases() + ")"); You can use that line to print out the character set the system is using. Regardless you can specify the character encoding used in ur output constructor. Also using .write(integer) may not give u what u are expecting anyways. 
The hosebird client is recommended by twitter. I've use it and twitter4j. I would recommend twitter4j as I find it the more stable of the two.
lol. Sorry
If you're looking at Geany, then Sublime Text is in the same category with much more flexibility and customization. That said, with Java, you definitely want an IDE. Autocomplete and debuggers are absolutely invaluable for any Java work. And how you add an external library to your project is dependent on what you're writing the project in. 
Get a degree you will enjoy working towards. Anything else will be too hard. I'd pick computer science or similar degree since you already working in the field.
 in.nextFloat(); Remove this line inside the catch block. When an exception is thrown by *any* line in the 'try' block, execution control automatically passes to the catch block - you don't need to specify what statement might throw the exception - which is what it seems like you're doing here. EDIT: Essentially what you are doing is triggering an exception by putting in a wrong value (on line 15-19), and then it is passing into the catch block (line 23) and waiting for you to input another float (line 24). If you input one, you should get your output (line 25), and if you input another error, it will throw another exception (which now won't be caught). EDIT EDIT: Also I've just noticed you have added a 'finally' block with some execution on the numbers - this is a mistake as it will still execute if an exception is thrown, that is the whole point of a 'finally' block. You want to include your logic inside the 'try' block, and the finally could display something like: } finally { System.out.println("Thanks for using the Triangle Program!"); in.close(); // Close your input reader gracefully } Remember the 'finally' block is *always* executed, and *always* executed *last*, even if you have exceptions and lines get skipped in the 'try' block.
&gt; - which is what it seems like you're doing here. Yeah that's exactly what I was trying, thanks! Thank you for your great input! Now I just need to figure out how to ask for input *again* once the user enters an invalid input, but I think I can get that if I play around with it.
Try something like this. int input = 0; float[] data = new float[3]; String[] item = { "first side", "second side", "base" }; while(input &lt; 3) { try { data[input] = sc.readFloat(); input++; } catch (InputMismatchException e) { print "Parsing failed, enter the " + item[input] + " again."; } } // do stuff with data here 
I have to use catch for my assignment. =\
Oh sorry, that was Python-ish! Forgot to mention its pseudocode. I don't rememeber enough Java to give you the answer without having to look up everything. But the except is the same as catch. 
This is the correct answer. A 'buffered writer' is used to write raw data to an output stream as "characters". Characters in Java are 16 bit integers, and represent Unicode code points. OP: Your code basically is saying "output the Unicode character that corresponds to 0000,0001,0002...1000" results in the Chinese and other messiness you see. What you want to do is put a 'print writer' on top of your buffered writer. [PrintWriter](http://docs.oracle.com/javase/7/docs/api/java/io/PrintWriter.html) exists to output values as normal strings, it takes care of converting the content correctly for you. i.e.: PrintWriter output = new PrintWriter( new BufferedWriter( new FileWriter( ... ) ) ); which will let you do what you expect by calling [print\(\)](http://docs.oracle.com/javase/7/docs/api/java/io/PrintWriter.html#print\(int\)) Alternatively, if you are not allowed to use PrintWriter, you need to take each of your integers in the loop, convert it to a [String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#valueOf\(int\)) representation, then send that to your [BufferedWriter](http://docs.oracle.com/javase/7/docs/api/java/io/Writer.html#write\(java.lang.String\)).
Thanks. 1. How do I go about doing that in a way that does not affect my current classpath? Can I see the current value of my classpath? 2. Does this setting persist over new Terminal sessions and system reboots?
It's in infinite loop! Bahaha maybe I did something wrong? 
There's something called the endorsed directory. It's the directory that the JRE uses for its JARs. You can put it in there. It'll be system dependent.
Here's my new code, it's still making an infinite loop? package program.pkg12; import java.util.InputMismatchException; import java.util.Scanner; public class Program12 { public static void main(String[] args) { Scanner in = new Scanner(System.in); // Declarations int input = 0; float[] data = new float[5]; double base, height, firstSide, secondSide, thirdSide, area, perimeter; String[] triangleProperty = { "first side", "second side", "third side", "base", "height" }; // Introduction System.out.println("Welcome to the Triangle program!"); // Read In Values while(input &lt; 5){ System.out.println("Enter the length of the first side of the triangle."); try { data[input] = in.nextFloat(); input++; } // Check to see if input is numeric. catch(InputMismatchException e) { System.out.println("Parsing failed, enter the " + triangleProperty[input] + " again."); } } } }
Time to quit. Sorry, but what it is you're working on, in Java, where you can't use established Java tools? 
 package king_of_nope; import java.io.BufferedWriter; import java.io.File; import java.io.FileOutputStream; import java.io.IOException; import java.io.OutputStreamWriter; import java.io.Writer; import java.io.FileWriter; public class WoahDude { public static void main(String[] args) { try { File file = new File("Dude.txt"); BufferedWriter output = new BufferedWriter(new FileWriter(file)); for (int x = 0; x &lt; 1000; x += 5) { output.write(String.valueOf(x)); output.newLine(); output.write("Like yo man"); output.newLine(); } output.close(); } catch (IOException e) { e.printStackTrace(); } } }
To be frank, I have no idea what you're asking. Your link points to here: http://i.imgur.com/yuoQQHl.png If you have some code can you paste it to a [gist](https://gist.github.com)?
Do not think that there shall be any problem due to its backward compatibility. One food for thought in this relation is to have the Java developers get proper education in order to work with Java 8 features after migration is done and make best use of it.
sorry about that, here's the link: www.chunkbin.com/pokeradar/pokeradar.zip it has a bunch of class files and I just want to change the id to something different. It's a minecraft mod, so if I were to install it into the game i'd want it tov say something else besides "pokeradar". Sorry about that. 
[`File.delete()`](http://docs.oracle.com/javase/7/docs/api/java/io/File.html#delete\(\)) is only documented to raise a SecurityException if the JVM isn't configured to be able to delete this file (I believe by default the JVM can delete anything the user who starts it can). On the other hand [`Files.delete(Path)`](http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#delete\(java.nio.file.Path\)) raises several different documented exceptions that will provide additional information as to the cause of the failure. Additionally using `Path` and `Files` is more modern and robust than using `File` - wherever you can, switch to `Path`. Most likely, since you say it works if you hard code it, you're making a mistake when you pull out the hard coding. Try simply comparing the files, and printing if they both exist: File dynamic = new File ("C:\\Examples\\Example" + (index) + ".txt"); File hard = new File ("C:\\Examples\\Example1.txt"); System.out.println("Dynamic: "+dynamic+" - Exists? "+dynamic.exists()); System.out.println("Hard: "+hard+" - Exists? "+hard.exists()); System.out.println("Same file? "+dynamic.equals(hard));
alright thanks, wasn't sure. When you say find java source files are you saying files that are in the game itself or something the modder created?
alright thanks :)
I think I found the issue... I tried this out and recieved a catch response: java.nio.file.FileSystemException: D:\Examples\Example1.txt: The process cannot access the file because it is being used by another process. Now I do not have any folders open or the file.. I feel this is a rookie mistake and I'm not understanding why it is being used by another process? Unless in my JUnit test, creating the file is causing it to be in use.
What a stupid question. Why would it? Why would it even want to? Why would it even care?
using my objectoutputstream, i'm going to do: ObjectOutputStream oos = new ObjectOutputStream(); oos.write(); oos.close(); would this properly close the file after writing it?
No. [Betteridge's law of headlines](http://en.wikipedia.org/wiki/Betteridge%27s_law_of_headlines)
nice, I will definitely give all of those a look. Now lets say I wanted to make this app available on Android, what sort of data storage would I use on there? Standard text files? or... And regarding using a database, if someone downloaded this to their computer, would they need the database program as well? Such as MySQL or something like that
Essentially all the same choices apply, Android probably has several SDK-specific utilities for this sort of thing as well. A quick [google search](https://www.google.com/search?q=store+user+settings+on+android) uncovered [*What is the most appropriate way to store user settings in Android application*](http://stackoverflow.com/questions/785973/what-is-the-most-appropriate-way-to-store-user-settings-in-android-application), which will probably be all the information you'd want, short of looking through the Android docs themselves. It depends on the database program, and how you're deploying your application. H2 is distributed as a jar, so assuming you follow their licencing requirements, it can be bundled with your program. MySQL is a separate program from Java, so either they need a local instance running, or you need to provide one your application can connect to. It wouldn't surprise me if Android provided a JDBC driver to work with a local database on the device, as well.
Isn't this mainly due to the (unfortunate) dependency of ImageIO on AWT(BufferedImage is part of AWT)? Adding ImageIO to a profile would also mean pulling in AWT and all it's dependencies. IIRC they avoided adding AWT to any of the profiles as it's quite heavy dependency-wise.
Great! Well thank you for all the help I really do appreciate it :)
+1 for twitter4j. Great library!
http://jlordiales.wordpress.com/ ======================= Recently came across this author.. he has written some good and simple to understand articles on Design Patterns. 
1. You don't. Once you set the $CLASSPATH environment variable the same classpath is going to be shared across Java applications, unless you specify the -classpath argument for a specific one. 2. Depends on how you set it. I haven't done this in years, but when I did it was on a Linux system. Assuming you are on Linux and using Bash, if you set it in your .bashrc then it will persist across terminal sessions. I suppose setting the CLASSPATH environment variable in Windows under Control Panel | System | Advanced (or whatever it is), should make it persist across terminal sessions.
Most people in Javaland who adopt functional style will probably do so with Java 8 rather than scala. Scala is doing a good job self destructing anyway. https://www.youtube.com/watch?v=uiJycy6dFSQ 
Too bad he didn't chime in on dependency injection.
TL;DW (W=Watch) ;-)
I'm glad to see Java is coming around to embracing the functional idioms that have been around for decades. I'm looking forward to using this in 5 years when our product finally uses Java 8. It's too bad that it's too late to make up for the deficiencies in the standard libraries though, e.g. map.get(x) == null has two distinct interpretations. Furthermore it doesn't seem the Map interface has added a get() equivalent that returns an Optional. The best you can do is something like boolean nullButValid = map.containsKey(x) &amp;&amp; map.get(x) == null or getOrDefault(x, somethingThatCanNeverBeAValue) both of which are inferior approaches in my opinion.
Is subclassing an option here and add Optional yourself?
If Java 8 is not an option for your project check out [Guava](https://code.google.com/p/guava-libraries/). It is designed to work with Java 5+ and bring a lot of functional idioms, including Optional. 
Why is `Optional` not `Serializable`?
External utilities have not been needed for quite some time. The standard JDK has had Base64 encoding and decoding since the introduction of JAXB in the 1.6 release. The class **javax.xml.bind.DatatypeConverter** offers many encoding and decoding capabilities including static byte[] parseBase64Binary(String in); static String printBase64Binary(byte[] val); Now it also exists in the util package.
If the number of spaces on your board don't change over the course of a game them an array of Space objects would be best. Add a field to the Space class such that each Space is responsible for knowing what Space(s) can follow it on the board.
Oh, great. Another clunky idiom. What w need for Java is more boilerplate, not concise syntax like String version = computer?.getSoundcard()?.getUSB()?.getVersion(); But no, this is C# way, not the Java way. After 10 years with Java I'm starting to get a little bit frustrated, that any new technology introduced must necessarily follow the bloated EJB pathway until it somewhat matures.
Java is still insufficient for actually functional styles. Immutability is a second class citizen on java compared to scala, and java does not deal with tail recursion, which forces you to use trampolines if you want to have proper recursion that doesn't threaten a stack overflow. Plus I don't think a video about the collections libraries having some issues for a while now is evidence that scala is in the process of self-destructing.
Read any C# code to get example of beautiful Java &lt;3
I had completely forgotten, sorry for the delay: http://stackifier.takipi.com/
&gt;constantly having to restart the server every time you change code Huh? That's a framework issue, not a java issue. Complain to the guys who built your framework for Java. I've done some web stuff before; jsp, wickets, neither of those required you to restart your server. GWT on the other hand...
Be careful when you use Optional. Your Java code might become a bit quirky: [Optional Will Remain an Option in Java](http://blog.jooq.org/2014/03/28/java-8-friday-optional-will-remain-an-option-in-java/)
Wow, that hadn't occurred to me before. That can be quite a bummer in many use-cases... I guess for "consistency", even the primitive-type variants aren't `Serializable`, e.g. [`OptionalInt`](http://docs.oracle.com/javase/8/docs/api/java/util/OptionalInt.html)
Java is not a scripting language; you can definitely write an "app" that does some task for a second or two and then completes; in that case yes the startup speed might matter. Anything else, no, that's the wrong metric to look at. I'll just leave this quote here from the VTD-XML guys (a very quick xml processor written in java): &gt;*How does the C version of VTD-XML compare with the Java Version? &gt; &gt;Well, C version is actually a hair (&lt;5%) slower than VTD-XML's Java version running on server JVM, which does a phenomenal job optimizing the byte code. For that reason, we highly recommend that the server JVM should be used for all purposes. &gt; &gt;In terms of the implementation, C is almost an replica of the Java version in that virtually for every line of C code, there is a corresponding line of Java code that performs the same function. The VTD-XML project team chose to do so to minimize the porting effort because C and Java syntax have a large number of overlaps. Another benefit is that if there is a bug in Java, we can be certain there is going to be an exact bug in the same place in C code.
Even `ArrayList` is `Serializable`, regardless of its contents :-(
Here's why: &gt; Making something in the JDK serializable makes a dramatic increase in our maintenance costs, because it means that the representation is frozen for all time. This constrains our ability to evolve implementations in the future, and the number of cases where we are unable to easily fix a bug or provide an enhancement, which would otherwise be simple, is enormous. So, while it may look like a simple matter of "implements Serializable" to you, it is more than that. The amount of effort consumed by working around an earlier choice to make something serializable is staggering. From: http://mail.openjdk.java.net/pipermail/jdk8-dev/2013-September/003276.html
It is generally meant for transitory use. You wouldn't normally have an Optional field or Collection element.
To clarify, you will be coding by hand? 
Yes, on paper, not PC.
DI is probably the best tool you can use for constructors, Especially if you think testing is a good idea.
Okay, unfortunately java standard library is rather large. Relying on it's built in classes my work against you with the time constraints. I can't imagine the competition would require any classes out side the fundamental classes of one's chosen language. I would suggest taking this http://www.dreamincode.net/downloads/ref_sheets/java_reference_sheet.pdf with you, also familiarizing your self with java's math class would be a sound choice. With that sheet and the math class you would be able to build any function you would find in the libraries. If not, the parameters of the competition seem rather vague and they should have given you an idea of the problem before hand, such as knowledge of networking libraries, etc... etc... Java has over 200 packages and 3500+ classes, more of a chore for an IDE. Good luck EDIT: I will try to do my best to think of a well rounded tool belt for you. Check out priority queues for heaps, I would stay with the standard sort/comparators for sorting unless speed is an issue then you can implement your own, but I would do my best to stay away from doing your own sorting under time constraints. 
&gt; when you consider the startup time The benchmarks game measurements that `frugalmail` suggested you look at include start-up time. The benchmarks game also shows [how much or how little the time taken to invoke the JVM might contribute to those Java program times](http://benchmarksgame.alioth.debian.org/play.php#java). 
null, baby
Guava's Optional is serializable. 
&gt; String version = computer?.getSoundcard()?.getUSB()?.getVersion(); Right so, down the line in another place entirely in the code, suddenly you have a NPE on *version* when you're problem was "one" of the methods on your example. Just because it's less typing doesn't make it better.
Looking at your code, it seems like it's inside one main statement. You really didn't ask this, but here is are couple of tips that will make completing homework a bit faster and should score brownie points with your prof. First thing, unit tests are your friend. JUnit is already bundled into the standard library. You can cover several test cases before you even write any code and it an easy place to set up break points when stepping through a program. To take advantage of this, you need to write code in a modular/re-useable fashion. So, lets take the user input section as an example: System.out.print("\tEnter 'F' (or 'f') for Fahrenheit or " + "'C' (or 'c') for Celcius: "); f_or_c = console.next(); This might be rewritten into a separate utility class /** Really bad names and design- don't keep this. */ class TempIO { /** Checks if string is "F" or "C" */ public boolean isFahrenheitOrCelcius(String userInput) { if(userInput == null) { return false; } if(userInput.equalsIgnoreCase("F") ) { return true; } if(userInput.equalsIgnoreCase("C") ) { return true; } return false; } /** Switched "\tEnter 'F' (or 'f') for Fahrenheit or " + "'C' (or 'c') for Celcius: " into an argument. You can still check in that string, but now if a user enters invalid data it will start a recursive loop till proper data is entered. */ public String enterFahrenheitOrCelcius(String userMessage) { System.out.println(userMessage); String userInput = console.next(); if( isFahrenheitOrCelcius(userInput) ) { return userInput; } // Start recursive loop to force valid user input. return enterFahrenheitOrCelcius("Inavlid input! Please enter (F)ahrenheit or (C)elcius."); } } This way you have greater controller over the process flow and validation without making on giant monolith script. The test could check key parts of the program to ensure the logic is working. For the above code, we really don't need to test enterFahrenheitOrCelcius method, just isFahrenheitOrCelcius() class TempIOTest { TempIO tempIO = new TempIO(); @Test public void validatedUserInput() { assertFalse( tempIO.isFahrenheitOrCelcius(null) ); assertTrue( tempIO.isFahrenheitOrCelcius("F") ); assertTrue( tempIO.isFahrenheitOrCelcius("f") ); assertTrue( tempIO.isFahrenheitOrCelcius("C") ); assertTrue( tempIO.isFahrenheitOrCelcius("c") ); assertFalse( tempIO.isFahrenheitOrCelcius("foo") ); } } Nice thing about this approach, it lets you just run through all the edge cases on a smaller scale, this case user validation, then forget about the internals and just build out other functionality. Plus, your teacher has runnable unit test and code that's easy to read. 
I didn't say it's true, just that it is a common criticism of the language that one will often hear.
What the hell did I just read? EDIT: OK, I think I get it.
Check [Twitter4J](http://twitter4j.org/en/code-examples.html) // The factory instance is re-useable and thread safe. private static final Twitter twitter = TwitterFactory.getSingleton(); and then to actually do it: Status status = twitter.updateStatus(latestStatus); System.out.println("Successfully updated the status to [" + status.getText() + "].");
That's what I thought, why would you want to serialize it? It's not meant to be a container.
Urgh, when was the last time you bought a computer? Even the Raspberry Pi has a soundcard. (And yes, `Optional` totally rocks. I have been using Guava’s Optional for years now.)
Is this like the option type in Ocaml? How do operations work on these? Can you add an int and an int option(al)? 
I don't agree with the article in that it will "protect" against NPE's for the sole reason of this method: http://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#get-- And the fact it will throw a "NoSuchElementException" if Optional.get() == null. That to me is just changing the exception thrown, rather than eliminating the problem of NPE's. You still have to write the same code in order to protect against NPE's in Java 8 as you do in &lt; 8 but written slightly differently. Java 8 code using optionals and method references taken from the link: Optional&lt;Soundcard&gt; soundcard = ...; soundcard.ifPresent(System.out::println); Written slightly differently in the article is: if(soundcard.isPresent()){ System.out.println(soundcard.get()); } This code in Java 7 is written as: if(soundcard != null){ System.out.println(soundcard.get()); } How is it eliminating much if you're still writing the same code to prevent NPE's, just in a different style. I agree that using a type to express that something is OPTIONAL is okay, but to say they will eliminate NPE's is silly because all you're doing is moving the problem to a different area, not solving the problem outright.
is he talking about that serialized objects should be portable between jdk versions? I think this is ridiculus.
Thanks.
I don't think he's talking about different JDK versions, but different patch releases. Imagine they have to add another attribute to `Optional`, or switch attribute order. I know, not *that* hard in this case...
My interpretation was that it was more about the concept of representing objects as strings and maintaining consistent representations across future versions. I think there would be similar maintenance consequences in other languages as well.
It's not a flaw if there's no good way to do it. It's just a fact of life, maybe more of a flaw with the concept of Serializable. There might be a more general version of serialization where you implement some "translator" of earlier versions to the current Serializable version, but that sounds super-unwieldy to me. I think the real problem is that people use Serializable too much.
so still plenty of potential for an accidental NPE with this approach when someone fails to consider that `version` could be null
It looks like there's a typo in the options used to execute the java program itself. Either the '-' character before the Djava.library... text is missing, or there's an unneeded space between it and the D. I do not have netbeans installed on my work computer so I can't really point you directly to the menu item/dialog you need to use.
In general... Right click on the project / LIBRARIES and make sure the lwjgl jar files are there, also check RUN and verify that the Main Class listed actually has a main method.
http://www.vogella.com/tutorials/eclipse.html
Why? It maintains backwards compatibility. It means that you could have a relatively old server, and not be able to upgrade the version of Java it uses, but still be able to create new, better clients.
Name clashes is a potential problem. Java itself has some packages which contains identical class names, for example some certificate or key classes if I remember correctly.
In addition to what Swedo said, it can cause an increase in the memory usage, slowing it down. I'm still new'ish so apologies if I'm incorrect, but that's been my understanding that those are the two biggest reasons I'm aware of. 
I think importing "*" has fallen a bit out of fashion as Java has grown over the years, making name clashes more likely. There is no other downside as far as I know; note that the classes aren't loaded at runtime until they're used, so memory or speed aren't impacted.
From the organizational point of view, If you want to focus on programming an app's business logic without having to worry about defining from scratch all the required modules of a stack (authentication/authorization, logging, data access layer, templates, presentation layer, business logic, user input sanitisation, validation, interoperability, internationalization/localization, workflow and a long list of etceteras) by yourself, then you pick a full stack. Other organisational benefits come from the broader use of these frameworks: they are more thoroughly tested, have frequent updates with bugfixes, optimisations and new features, and also third party extensions or ports of interesting features and libraries from other frameworks. Also, there are developers specialised in these stacks, so it's easier to bring people in a team and have them up to speed quite fast, while if you use your own framework, every newcomer needs to learn everything from scratch. Now, from a technical point of view, these frameworks are GREAT in applying the DRY (Don't Repeat Yourself) concept: by learning the naming conventions, lots of stuff works automagically, which helps creating new features much faster. Grails also benefits from groovy's simplified yet rich syntax and the Spring framework (I have my reasons not to like it, but it would be stupid from me to say it is not a good framework). And Play! (I love it) Benefits from all the nice goodies that Akka provides, which helps to create massively scalable applications without losing your focus on the features, and hiding most of the complexity around concurrency and fault tolerance. Also.. Scala.
I agree that if you use `get`, you aren't winning anything. The article even concedes in the line following your excerpt: &gt; However, this is not the recommended use of `Optional` (it's not much of an improvement over nested null checks), If you don't use `get`, then you won't have (the moral equivalent of) NPEs -- I think that's the point they're making. Think of it as a fix to Java's type system -- `null` should never have been a valid value for every single class. In current Java, it's too easy to confuse "I know that [...] type-checks as `String`" and "I know that I can call `[...].length()`" -- one doesn't *quite* follow from the other, and you have that niggling worry *every single time* you use a method's result. In reality, there are two types people use -- nonnull-String and nullable-String. `Optional` is just a way of adding the latter-type to the type-checker, and also making sure the programmer is aware that they're using that type and covering all the cases. (Java still doesn't have a way to enforce the former type, so it's back to programmer-discipline, or annotations, etc.)
open source yet liberty? i'm glad we're leaving IBM products at work, and I never thought the day would come considering we're a massive govt org.
Didn't Scala has as its explicit goal to "kill" Java?
Then I suggest you use Play and Scala: focus on building the CMS and leave the other bits on the framework ;)
Out of curiosity what product are you moving to? Another Java EE server or something like Tomcat+Spring?
What about for JPA? Doesn't it make sense for a field to be optional any time it allows nulls in the db?
The way I see it your field would still be basic Java objects or primitives and would only be wrapped in Optional on the getters. Same pattern as if you were making defensive copies of an object on a getter. 
Huh. I thought that Effective Java by Joshua Bloch 2nd Edition Item 1 *was* "Effective Java by Joshua Bloch 2nd Edition Item 1 explained."
Everything within the loop will be executed 5 times. Just think about what you want to be done only once and what should be repeated. 
no, every time you change ANYTHING about a java object, even if you keep the same serialVersionUid or whatever its called, then that version of the object is now incompatible with earlier serialized versions of the object, and I don't think there is a way to get around that, since unlike something like objective-c where you have constructors in your class that get called when being unserialized `- (id)initWithCoder:(NSCoder *)coder` and `- (void)encodeWithCoder:(NSCoder *)coder`, it just does it automatically and spits an object back at you, and you have no chance of trying to handle the error of the fact that the classes are now different. With my objectivec example, since its basically just serializing to xml, if you request a 'variable' that isn't there, it just returns nil (null). If the 'serialized object' has MORE information (like a newer version gets serialized and an older version reads it), then its still fine, as unread properties are ignored. granted, doing it that way is a pain in the ass because for every thing you want to save you have to write code in both initWithCoder and decodeWithCoder, and then also handle the possibility of backwards compatibility, (having default values if values are not present, etc), and its of course much easier to just tell java "serialize this object" and its like "ok", but that comes with a price of very high fragility. This is why with netbeans, if you change stuff about the objects you are saving in the database, it basically has to drop the entire table and start again because it can't read two different versions of the class!
There was a thread about this on the OpenJDK mailing list where some developers chimed in: http://mail.openjdk.java.net/pipermail/jdk8-dev/2013-September/003186.html Specifically: http://mail.openjdk.java.net/pipermail/jdk8-dev/2013-September/003273.html
Don't waste ur time.. let this turd sink to bottom or learn to float.
As others have already said, name clashes. Another factor is readability. If you only important packages that you use, then someone reading your code will instantly know the different packages you actually use. Which can be helpful. By importing all packages, you aren't telling another programmer anything.
Best Java Tutorials Web site
So you can be productive and code apps and not frameworks and not spend time on gluing crap together to make a full stack.
http://openjdk.java.net/jeps/159
http://www.ocert.org/advisories/ocert-2014-002.html http://osvdb.org/show/osvdb/104928 http://osvdb.org/show/osvdb/104942 http://osvdb.org/show/osvdb/104927 http://seclists.org/oss-sec/2014/q1/649 http://www.debian.org/security/2014/dsa-2886 http://vigilance.fr/vulnerabilite/Xalan-Java-vulnerabilites-de-FEATURE-SECURE-PROCESSING-14468 
I'm going to give you a lot of credit for explaining this in a way that makes sense. But I really feel inclined to agree with /r/db_bondy. I'm probably biased for my work experience, but I continuously run across a significant number of developers who know shit about what they are doing. It's easy to run into poorly written code because the developer is just not good enough. Where I work, some are learning Java as they code during development cycles. Call me old fashion, but I do prefer a strict typed language with a low tollerance for bad programmers. The abundance of NullPointerExceptions is a clear sign of people who don't really know what they are doing behind the keyboard. We keep adding dynamic syntax sugar into Java while keeping a messy backward compatibility and soon we'll be living the same hell PHP devs live today. I keep reading these articles praising Optional and lambdas, but in my mind I keep thinking "good Lord, I can't wait to see how many heads will grow into the beasts we maintain today". 
So interesting, i've only been studying java for about a month in my uni and we were using eclipse, was very surprised to see that eclipse was actually used to make minecraft.
Most (pretty much all) computers now ship with integrated sound. The chips have gotten cheap/good enough that external cards aren't necessarily much of an improvement for the average person.
Are there benefits of doing so over using optional?
What you need to do is to use a for loop to iterate over the students. Think of it as for-each, because you're doing steps 3-6 *for each* student. 
&gt;and I'm not entirely sure why oh the beauty of programming ;p
Question: How is this *editing-while-running-the-program* accomplished, and can it be done with other IDEs as well? Seems very neat to be able to make some adjustments while keeping the whole program state.
The jvm supports hot-swapping class files at runtime. You can use a tool like jrebel to do it outside of an ide. 
While debugging, some degree of local changes can be made without restarting. Eclipse and intellij do it, not sure about netbeans.
or http://ssw.jku.at/dcevm/ (http://openjdk.java.net/jeps/159)
JRebel is awesome, you can get it for free when you do open source projects. Also, it does a bit more than the hot-swapping of the jvm, it also loads new classes, adds fields and constructors and you can write a plugin for it when your framework needs special handling when reloading classes for it.
http://dbunit.sourceforge.net/
I'm really unclear on what this is and why we should care.
It's been the popular Java IDE for a long time, next to. NetBeans. That said, IntelliJ is light years ahead of either now. Worth every penny for a JVM developer. 
Disclaimer: I work for the Spring team at Pivotal. When people talk about 'full-stack' in the JVM space, they usually mean that the framework supports plugins; supports an opinionated, end-to-end notion of domain-drive-design towards a goal (perhaps building web applications); that it embraces DRY wherever possible. Full-stack does *not* mean (in the JVM space) that you need a specific IDE, server, etc., programming method, etc. It's less to do with vendor lock-in and more with how strong an opinion is imprinted on the applications developed with the framework. Ruby on Rails is a full-stack framework: it has a known ORM stack and web tier that are tightly integrated with each other to the point where you can auto-generate UIs from domain objects, and more. It is in the same league as Play, Grails, Django, etc. This is a spectrum: more flexibility means more stuff the framework doesn't assume and do for you. If you're building something lower level like a CMS but want access to a very rich toolchest, I would encourage you to look at [Spring Boot](http://spring.io/projects/spring-boot). It supports numerous styles of applications, but does so in as concise a manner as I think anybody would expect. Really, at some point it's just about the character strokes saved in the language of expression, Java, Scala, Groovy, etc., all of which you can use with Boot. Boot is a place to integrate the many Spring projects. As a result, you have access to some of the richest libraries available, in any language or platform, supporting integration, messaging, web applications and web services (REST, RPC, SOAP, or otherwise!), mobile and rich-internet applications, HTML5, security, batch processing, big-data, SQL data access and NoSQL, among other things. It's also very easy to get started. You might start with our [guides](httP://spring.io/guides) which are themselves all 10-15 minute looks at how to solve a given problem: setting up a REST service, accessing a database, securing a web applications, etc. FYI: I wouldn't look at Struts if you can help it, it is *just* a web framework with a small community and glacial forward inertia. 
I've got a question about the IDEs. I currently use Eclipse. I'm a student just mucking about in Java, I've also used it to make Minecraft/Bukkit plugins for people. I've tried IntelliJ and Netbeans; I really didn't like Netbeans, but I didn't notice anything better about IntelliJ. So for my purposes, why should I switch from Eclipse to IntelliJ?
As far as I know, the only perk to explicitly stating the package is people reading your code can see what your using. I suppose that makes it more readable. then again, if you have a ton of imports from java.io I feel like it's more readable to use java.io.*
Better static analysis, better content assist, better git and maven integration. However, it lacks Eclipse's incremental compiler, so to catch (some) compile-time errors you have to build the project (Before someone mentions it, I have tried the "Make project automatically" option - It doesn't work anywhere close to as well, or as reliably). Also less support for non-JVM languages unless you use the non-free edition.
Besides preventing collisions, the IDE adds explicit imports for you, and you can easily see all the external depdencies of a class, so it's just best to be explicit.
When you're coding can you have maven pull down the source and javadoc into your IDE? If so, then I would I would make sure your favorite packages have their source/javadoc package uploaded to maven central (or set up your own repository on amazon temporarily and you create those packages) Then including science/matrix/data structure/algorithms/helper/camel integrations libraries in your cheat sheet thight might be helpful. Congratulations, and good luck!
Better spring support, too. 
Out of curiosity, how mature/stable is this project? I see that it only support Java 1.6 update 26 and before.
Java EE, not jee ;)
&gt; Better spring support, too. I feel that SpringSource STS that is essentially Eclipse has much better spring support
If anyone wants to watch the full documentary for free, here's the official link: https://www.youtube.com/watch?v=ySRgVo1X_18 (1H:44M)
&gt; The Fork/Join framework introduced in Java 7
Too bad it has no decent GUI builder. I recommend keeping eclipse in addition to IntelliJ just for the GUI builder.
This helped a lot! Now I'm just having trouble making an error message for any input other than a letter for a grade. Any help on that?
Netbeans can do it too! There's a button in the toolbar labeled "Apply Code Changes" If my memory is correct.
Read the documentation for characters that I linked. There's a specific method you can use, and it will be blatantly obvious if you just read through the methods. For the general logic, you're going to want "If 'input' is not a letter, System.out.println("Invalid input"), else store in the grade array." Or something of that nature.
I use Jrebel, has saved me hours of restarting the project. Comes with plugins that support all major Ide's and free for personal use. http://zeroturnaround.com/software/jrebel/
Open settings (CTRL+ALT+S), and look for 'Code Style' --&gt; 'Java' --&gt; 'Wrapping and Braces'. Disable the 'Simple methods in one line' checkbox.
It seems that's already unchecked. They're not actually on one line by the way. IntelliJ just minimizes them (see the plus sign on the left).
If the setting doesn't work, it might be a bug - best report it on http://youtrack.jetbrains.com/ But I would double-check first.... the checkbox setting seems [to work for most people](http://youtrack.jetbrains.com/issue/IDEA-117636).
If the setting doesn't work, it might be a bug - best report it on http://youtrack.jetbrains.com/ But I would double-check first.... the checkbox setting seems [to work for most people](http://youtrack.jetbrains.com/issue/IDEA-117636). Btw. that is what Jetbrains/we mean by "on one line" .... ie. minimized to be displayed on one line.
Two major changes in the last 6 years: * Java EE became cool ;) * Java SE got lambdas 
I believe ctrl shift plus will maximize everything in the currently open class. It won't stop it from happening, but it'll make everything how you want it to be
How exactly is immutability less well defined for scala than java?
I think i remember the patch was at least rebased on a 1.7 version
WindowBuilder is awesome. That thing can parse 13 year old GUI code using proprietary LayoutManagers from Oracle and display everything correctly. 
&gt; EE I can't remember what version I tried learning.. well, leading wasn't the problem, applying it to something useful. That was at least 8 years ago, so it sounds like it's worth checking out again.
Gradle for build management.
I'm not sure what "network management" is in you case, but if it involves lots of glue code, then check out Apache Camel. It makes integrations ridiculously easy. Also gradle is a pretty sweet build tool that does dep management.
Just curious, but what's your rationale for the use of String.valueOf () vs Integer.toString () ?
I feel like to many people get into the mindset of " I need to show that I am smarter than everyone else" which leads to unnecessary complex solutions. That of course is a big no-no in software development.
It was just what I thought of first. Since I was trying to get to a String, I generally go to it (or use toString directly if I already have an object I know is non-null). To use Integer.toString I would have to do new Integer(x).toString() which seems to me to be a wasteful allocation of the temporary Integer object.
My phone thinks that *grape* is the groovy new java build system. 
&gt; I'm a Java coder by day and a Python coder by night, so I would be very interested in hearing why you would introduce Java instead of Python? * Static Strict Typing as the default * Very strong &amp; rich tooling * A Compiler * Maintainability * Commercial Support * Availability of Developers * A few Mature libraries as opposed many immature libraries as the general case * The ability to run on many platforms * Big data compatibility I could keep going
6 years is a long time...i just love [util Collections](http://docs.oracle.com/javase/7/docs/technotes/guides/collections/) and [util Concurrency](https://www.jcp.org/en/jsr/detail?id=166) 
I was actually going to try intellij out the other day. Then I saw that all of the features I need and would want are locked behind $200 bucks. No thanks. I can deal with eclipse.
From the other developers' perspective, you're coming in as a junior dev, and insisting that they do more work to make your life easier. You don't see it that way, but you need to understand the resistance. Here are a couple questions for you: * Why is it valuable for a senior developer to change his formatting style? What does he get out of it? * Do you have management's backing to "hammer down" on people who disagree? If the lead says, "This new guy is an ass. You can have him or me." What will management say? I've been around the bush on this, and I've never seen an established team change their style. I have seen an established team propagate their existing style forward, but that's a very different situation than you're in. If you're going to move forward, get the leaders (who may not be senior engineers) to buy in, set up IntelliJ's formatting to your standards, and do a bulk format and checkin. 
Oddly enough, there is a Groovy library called Grape, but it only does dependency management.
I'm in a similar position as you with in my current workplace. I've (well, I and my team) inherited an 8 year old Java EE project with a custom database layer interface. It went live 2006 and was designed in the years before. And the code base shows.. There's all kinds of code: Java 4 style (no generics at all), old - in the meantime obsolete - company standards, legacy libraries (both company internal and external). I've recently had a talk with our CTO about this, and how to "modernize" (for the lack of a better word) the situation. We are already using Sonar - a tool that bundles up some other code quality assurance tools like PMD, codestyle, etc. But it spits out thousands of warnings and "critical" errors. The advice I got was this: * Run the tool with a default set of rules to see all the work that has to be done. * Discuss in the team what rules to enforce and which to ignore. Adapt the sonar (or PMD/...) rules accordingly. * Decide (in the team) which legacy code to update, and which to "cement" and don't change. Adapt the rules accordingly. * On the topic of codestyle: a similar solution. Decide on common grounds within the team, and stick to it. Set Eclipse preferences accordingly, and check them into SCM so that everyone has the same prefs. * With the above: improve as you can. Use the "boy scout rule" and try to improve every class that you touch. &gt; So to sum up, my main question put generically is, what's the best way to get a technical team on board with new practices that they may not appreciate, from within the team itself? I'll say: you'll need team support for everything you do. Find a consensus, and stick to it. You might have to forfeit some things that you like, but you'll gain common grounds. Define something everyone can identify with, and then start the journey of working towards it. 
Good luck, I'd let the devs pick an existing, published standard. Hammer down seems like a really bad idea.
Although, I could see String.valueOf () being more generic. I.e. If OP decided to rewrite his code to use doubles instead of int's he doesn't have to change Integer.toString to Double.toString
I had a guy try this on me a few years ago. I happily told him to bleep himself in the swearword. There's really no reason to enforce a particular coding style when every developer can click `Edit &gt; Format Source` and make the file look like they want, and if you're really pedantic, you can run it through a formatter as part of a checkin hook. What would be useful? Ensuring unit test coverage. [Cobertura](http://cobertura.github.io/cobertura/) might be worth looking into.
&gt; I'm not trying to get anything specific into here actually, just consistency. Ideally I would like to adopt whichever style the lead developer is most comfortable with, even if that's very far from my own. That's exactly what I mean. It's a similar situation here: everyone agrees that "the old style" is obsolete, and everyone tries to improve it in their own way. Me personally, don't care about specifics: for me, consistency is the key. Of course I'd like everyone "to get" my style, but that't not the primary goal. It's why I mentioned that you should get a consensus in you team: whatever that will be - stick with it. &gt; Also makes me think I can help convince people with a proof of concept 'before and after', so they can easily see benefits, That's the strategy I'm currently following (also google "ratcheting" if you don't know it). Slowly improving, and working to get into a better state. But in my case (and also yours?) it means getting to accept legacy code that is beyond repair: just cement it into its current state, and forget about it.
The Spring framework is very robust. It isn't perfect but I still prefer it for production applications, over the alternatives. 
And true multithreading... 
Yeah, "just touching the code" is an issue I've seen, too. Theoretically, it's probably possible to compare the amount of testing to the cyclomatic complexity of the code itself, but there aren't any tools that do that, that I'm aware of. Comparing versions is the best reason to have a code formatter as part of the submit process. That way, you can do a real delta between versions, but the developers can work with the code in whatever style they prefer. I simply can't read a lot of the code the other guys on my team write, just because they use a different style of indentation and bracket newlines. I mean, I can figure it out, but the nesting is so different to what I'm used to seeing that I have to actually think about it. But it doesn't matter, since we can all just reformat code as we need. Consistent naming conventions, on the other hand, are a great idea.
Taken from the wiki article on type conversion: &gt; Promotions are commonly used with types smaller than the native type of the target platform's ALU prior to arithmetic and logical operations in order to make such operations possible, or more efficient if the ALU can work with more than one type. --- [In case you don't know what an ALU is](http://en.wikipedia.org/wiki/Arithmetic_logic_unit)
Do you a have a continious integration system ( Jenkins, Hudson, TC ... ) If so, you can start by adding a checkstyle plugin to it. 
It's totally worth it ... but I got in cheap when they had the end of the world sale, and since then it's $99 to upgrade.
Light years you say? Name a single $200 reason why it is better and then tell me a few more hundred dollar reasons for each upgrade. I will wait.
I think you've confused Swing (GUI Toolkit) with Spring (Dependency injection framework). No, they're not the same thing. 
Oh they're gonna love you alright. 
Automate it. I.E. set up a bot to autoformat on every commit. Note that the formatting fixing commit comes in as an extra commit. Have a pre-commit check is an alternative but it's annoying. I've done it before with jenkins. It made things easier since a lot of the checkstyle rules (EOL characters, whitespace between parentheses, etc.) became redundant. So that in turn made it easier for those who don't care about formatting.
What's my bubble? I'm a Java guy with slight Scala interests... So no shocker could be in that video for me.
That's a rather good point :P Suppose Scala did in fact kill off Java for good, permanently, making it disappear. Then theoretically the JVM lives on, but who's going to maintain it then?
please create some data structures, your BoardGeneration and Moves are extremely unreadable. Java is not C. Probably better idea is to write code to feel the flow of logic behind that. Try debugging BoardGeneration in 3 years ;)
On my phone right now, so I won't be able to easily verify this. It may have to do with the fact that floats are 32-bit in value. Since int (also 32-bit) would be the goto value for the ALUs, I'd imagine float would be treated the same. The only time a double would be involved would be if it was part of the expression; much like with the int and long.
Every language has its specific set of uses. 
The community edition is free and open source. So, you might want to investigate if it provides everything you need. I moved from Eclipse to IntelliJ around a year ago. I am so much more productive in IntelliJ, that it is well worth the money for the ultimate edition.
Thank you for this quick introduction. Looking forward to your next post. What are some concrete use cases for the usage of Nashorn?
What do you mean by 'specified'? All standard types in Scala are immutable, in the 'specified' sense of purely functional and persistent. scala.collection.mutable is explicitly mutable, as is scala.swing by definition of the Swing framework. Java is messy by default. Better make preventive copies of objects you send to a method or return from a method :-O
In Java if you have any arithmetic operation (like +, *, -, /) the type of the result will follow this rules: 1. If one of the operands (x or y) is a double, the result will be a **double** 1. Else: If one of the operands is a float, the result will be a **float** 1. Else: If one of the operands is a long, the result will be a **long** 1. Else: The result will be an **int** (even if both operands aren't ints) Just memorize double &gt; float &gt; long &gt; int
Just watch the vid I posted. It's by one of the developers of Scala.
I know the video and I know Paul Phillips. What are you trying to say?
Let's says you have a project builing with ant. Inside of this project you need to do some string manipulation. You can write a script in javascript to fetch some values, mix them up, and return this to ant. This javascript will be executed by Nashorn.
So I've mentioned IntelliJ is more stable and is faster, this is fact and alone worth $200. But if we must... 1. Smarter refactoring (too many examples to list) 2. Smarter autocomplete (again, too many examples to list) 3. Smarter variable name recommendations 4. Everything is searchable 5. Entire project is indexed, so see number 4 6. Sharable run/debug configurations 7. Merging tool is better 8. Built-in support for the majority of popular frameworks, so setting up a project for this is incredibly easy and fast 9. Superior project management 10. Finding IDE settings and options is incredibly easy (see point 4) 11. Built-in REST client to quickly test a REST API 12. Very keyboard centric, almost everything has a keyboard shortcut that's actually intuitive 13. Can automatically download missing sources and javadoc for project libraries 14. Maven support is superior and dumb easy to setup a maven project And there's so much more. There's a reason why Google dropped Android support for Eclipse in favor of IntelliJ. Trying an IDE is a lot like driving a car. I could tell you driving a Ferrari is better than driving a Honda, but you really won't understand why until you get behind the wheel (and even then you could argue "subjective! subjective!"). But, whatever IDE you feel most comfortable and productive with, then use it. 
There is Spring MVC (web framework), which is part of the Spring Framework
The Spring Framework is the core dependency injection features and nothing else. On top of that are a few dozen injectable components like cache abstraction, MVC, GUI, DAO, web services, etc.
It depends entirely on how your application is implemented, but this sounds really dubious. Run a profiler instead of making guesses. Every JDK is bundled with VisualVM or you can splurge on YourKit.
Could you specify "perform worse"? How much worse? What does the app do? How much memory does it allocated to work with how much data?
This. I'm regularly dismayed by those who put forth opinions over things that are readily quantifiable.
I don't know if it's fair to say the JVM performs worse. When the JVM runs out of memory, it fires up the Garbage Collector. Most GCs are made up of parallel and serial components. Some part of the GC runs in parallel with your application without stopping it. Some part may stop a thread at a time. Some part of the GC is "stop-the-world". This last part will stop your entire program completely while the GC works. For small applications with multiple threads, the only issue is that your application will pause for small periods of time (a few milliseconds) whenever the stop-the-world phase is run. When you get to applications with large heap sizes (I am talking about &gt;4 GB, but this is more apparent with even larger heap sizes), though, this pause time increases too. For really large heap sizes, you will see pauses that go up to a second. Does the GC making your application pause for small periouds of time affect performance? It entirely depends: if this is a web service with latency requirements, then I guess you could say this is affecting performance. For longer-running tasks the pauses really don't mean anything at all. So yeah, large heap sizes introduce latency. However, this may not matter to your particular application at all. Measure before you optimize. Much of the latest work on GCs is on reducing this pause time: - http://openjdk.java.net/jeps/144 - http://openjdk.java.net/jeps/189 TLDR: Measure before you optimize.
What if you are running on a Java8 VM without Nashorn? What's the proper way to make the dependency on Nashorn portable?
Very good answer to a complex issue. We run a web application that has a 6GB heap and full GC does indeed introduce latency the longer the application is running. That's not to say having a very large heap is a BAD thing. Measuring and analyzing heap dumps allowed us to narrow down why full GC was happening frequently and some code changes cleaned that up. Now it purrs along just fine with very little intervention. Word to the wise, with very large heaps, comes very large heap dumps. It can take a very powerful machine to analyze the heap (and make sure you have your /tmp directory on said machine large enough to actually analyze the heap.) Speaking from experience here.
Hah, that's awesome. I'm assuming giving it a shit is more favorable than not giving it a shit, but really it seems like it might be the reverse.
This can definitely be true with 1.5 and 1.6 JVMs. Later implementations have better thread local heap optimizations so that in some cases there are explicit optimizations that help your code not put so many objects in tenured space and avoid mark sweep. I also remember JavaOne 2007 or so had a great talk about the G1GC and I asked the speaker what his advice was for 64 bit JVMs at that time. He said he would make eden space as large as possible. I suppose that means fewer objects go into tenured space, but then the GC sweep phase has more work to do. All of these anecdotes change with G1GC on modern hardware. # Most importantly you need data to back up this idea. With no data for your app on production hardware you don't have anything to back up this superstition. Ask your vendor for performance data. If you optimize based on old advice you might be wasting your time or, even worse, de-optimizing your app. That is "voodoo optimization." Get real data.
&gt; I could keep going Please do
You want a gui program or on consol line ?
im using textpad what's that called? (Begginer fyi)
You could read all the numbers in one line and the split the string on whitespace. This would be easy if you're using java 8 and you just "map" the values from string to Integer. 
I would strongly advise against inventing your own, Oracle and Google both have good code conventions. Inventing your own can lead to a bunch of compromises that don't really work. I've been down that road.
I'm not sure that raising the Xmx limit can increase GC pause times. Look at this code: import java.lang.Thread; class test { public static void main(String[] args) throws InterruptedException { int pt = Integer.parseInt(args[0]); int arrLen = 1024*1024; Integer[] arr = null; while(true) { Thread.sleep(pt); arr = new Integer[arrLen]; for(int i = 0; i &lt; arrLen; i++) arr[i] = 0; } } } It generates tons of trash continually, and uses about 120-150MB of ram for its heap from the start, but it takes me telling it to generate a new 1048576 element integer array every 50 milliseconds before it starts expanding the heap it's using even though I'm using -Xmx2048M. That's because the JVM is smart and will take what it believes is the optimal amount of memory for the heap to complete GC as fast as possible. If your app starts using more memory after raising Xmx, that means it was previously somewhat memory starved and was performing **slower** than before to fit into a tighter space than it'd like. Edit: [read this too](http://www.reddit.com/r/java/comments/21qwcp/jvm_performs_worse_if_too_much_memory_is_allocated/cgfns9v), it goes into more depth about how and why the GC runs.
Settings -&gt; IDE Settings -&gt; Editor -&gt; Code Folding -&gt; Uncheck appropriate options. (In your case, uncheck One-line methods.)
Nice article. Could say a little more on adding multiple inheritance.
Step 1: Setting up Eclipse— I aborted at this point.
I started with plain old notepad and command line. I think it really helped me with understanding the language's basics. Auto-fill is great when you're experienced, but someone just starting out needs to become familiar with basic, low-level parts of the language.
&gt; I'm a Java coder by day and a Python coder by night, so I would be very interested in hearing why you would introduce Java instead of Python? I mean, Java is nice and all but Python rocks. Because Java executes 50X faster than Python for CPU intensive tasks, has static typing, and extremely powerful tools.
+1 for Guice. If you code in Java and you don't use a dependency injection framework then you really need to catch up with the times.
Interfaces are more like binding contracts. A class that implements a particular interface guarantees that the methods defined in the interface are implemented and accessible. Interfaces set standards for communication between classes. A class typically defines data and behavior, whereas an Interface defines behavior. A few typical interfaces are: List, Comparable The **List** interface has methods to iterate through the List that form a defined standard upon which other classes can build. The **Comparable** interface defines methods for comparing objects so that other classes (e.g. Array) can access these methods to perform their tasks (e.g. Array.sort) 
Horrible article. * Class and interface names should be upper-case. * The first example doesn’t even compile. * Inconsistent source code formatting.
A book called "Objects First with Java," which uses the free visual environment BlueJ. Seriously, this is the BEST way. I fumbled around with other stuff, but this book, combined with this program, is UNDOUBTEDLY the best way. You will learn properly with this, but it will take a little while. Everything is super-clear, and you can start out as a noob. DO NOT use "Sams teach yourself Java in24 hours!" Don't use anything that tries to make it sound easy!
I also started with a text editor and the command line because back then there wasn’t anything else. That’s not the point, though. The point is: *Eclipse*? Out of all possible alternatives, why choose the worst possible?
At last! Java 8 finally has elven waybread!
I would presume using ints would perform better. You remove the need to have a cast called. I wrote up a small program to test this and whichever loop runs first usually performs the best, but if you compare int-first to byte-first, int-first is faster. int a = 1; byte b = 1; final int count = 2_000_000_000; final long starta = System.nanoTime(); for(int i = 0; i &lt; count; i++){ a = a + a; } System.out.printf("%10s\n", System.nanoTime() - starta); final long startb = System.nanoTime(); for(int i = 0; i &lt; count; i++){ b = (byte) (b + b); } System.out.printf("%10s\n", System.nanoTime() - startb); I would just stick to ints. There is even a Constant Pool that can help with lower integer values in the range of a byte: http://stackoverflow.com/questions/13098143/java-integer-constant-pool
There's a 30 day free trial on the ultimate edition
Ok, thanks. I understand that the interfaces is a guarantee that a class will have the interface's methods, but I still have one question. If the List and Comparable interfaces define methods, do I need to implement their methods after implementing one of the interfaces in a class? If so, does that make interfaces in the java API an exception to the rule that an interface's methods are all abstract?
Those who constantly claims this update killing Scala probably have never programmed on it, because i see no other explanation. Scala is more than lambdas. For example, [pattern matching](http://www.tutorialspoint.com/scala/scala_pattern_matching.htm).
Tried Github?
The Interface methods are only defined by signature, the body of Interface methods is always empty. So, when one implements an Interface, the methods defined in the interface must be programmed in the class where the Interface is implemented. Easy to test this in an IDE (I use Eclipse, but should be similar for other IDEs as well): As soon as an Interface is implemented, the IDE will tell that the unimplemented methods must be defined: A basic class with an Interface: http://i.imgur.com/ILe6YOL.png - the little bulb icon on the left is a hint that something is missing: http://i.imgur.com/v53BOXM.png Eclipse offers: http://i.imgur.com/f76oQjv.png And the code after:http://i.imgur.com/WMz8f5C.png
I'm thinking: can I pass the cachedRowSet to the method, and do the while (crs.next()) in the method? I'll try that.
I'm not sure how to search through it. Sourceforge provides language filtering so I can browse java only. Not sure how to do that on github.
I'm new to programming and almost every tutorial uses Eclipse. Can you please explain why I should avoid it? What should I use instead? Netbeans?
An article written by someone who has never coded anything, just stringing together links and other peoples' opinions. "Content generation" at its finest.
Github has advanced search too [https://github.com/search/advanced](https://github.com/search/advanced) Maybe something like [this](https://github.com/search?l=Java&amp;q=main++extension%3Ajava+size%3A%3C32999&amp;ref=advsearch&amp;type=Code)
Ah okay, apologies for misinterpreting the tone of your original post! Just click buy, trust me ;) Regarding community plugins, IntelliJ is also great in that regard. There's just one, official repository of plugins. Installing them is as simple as clicking "Install". Any plugin I've tried has worked as intended with no surprises, but I've only ever downloaded a handful. 
You're technically correct in that raising the limit won't, in itself, increase GC times.. However, if you raise the limit because you actually need to keep a lot of objects around in oldgen, then absolutely that can increase GC duration.
You mean lembas?
What if one were to not use a build tool (despite the insanity of it)? What commands would you use then to achieve what OP requires?
Converting a retrieved row to an object is a common way of handling this sort of thing. Most of the persistence frameworks automate this process in one way or another. It's not truly excessive in practice because you will usually wind up loading data into live objects for your program anyway. 
[Yes.](http://i302.photobucket.com/albums/nn120/Golbleen/thatsthejoke.jpg)
This can differ from architecture to architecture, but for `int a` and `byte b`, `a + a` and `b + b` will usually be roughly as efficient as each other. This is because they will usually be stored the same way in memory anyway. However, the subsequent cast of `b + b` to `byte` is probably where the extra work lies, as it's a narrowing conversion (opposite direction of a widening conversion). This can also differ from language to language. For example, C has native byte arithmetic and `char` means something fairly different.
http://blogs.vmware.com/vfabric/2012/09/vmware-expert-on-virtualizing-and-tuning-large-scale-middleware.html I used the information in this article to tune the crap out of a JBoss 4.x, JDK 1.5 instance running 8 GB heaps.
Hmm, I guess I could live with having them in the same folder. Thank you for helping me figure that out, though! EDIT: For those using Mac (like myself), change it slightly to this: find path/you/want/ -name ".java" &gt; sources.txt Without the path, it will not work.
That is even better, thank you!
Gradle is the way to go. It can be as simple or as complicated as you want to make. It doesn't force itself on you like maven does.
An Interface's methods are all abstract, no exceptions (Java 8 default methods notwithstanding). A class which *implements* an interface must implement those methods concretely, unless it too is an Interface or abstract class. So if your concrete class implements List and Comparable, it must implement all methods of those Interfaces, or it won't compile.
I understand that. Indeed, I work very, very hard at being lazy. That is to say, I often bite the bullet and put in a lot of effort so that future work is made easier. Basically investing time now pays dividends in freedom to browse Reddit later.
Ah, I haven't done it with a full project structure; only for smaller applications. I don't think that would work though. You'd have to use something like: find /home/user/java/Package/ -iname *.java -execdir javac {} \; You'd then run it using "java MainTestClass"
Thank you, I'll try it out and see what I come up with.
Thank you. And type inference. And traits. And lazy initializers. And immutability by default. And case classes. And currying. And implicit parameters / conversion. And type-safe duck-typing. And dynamics. And no checked exceptions. And DSLs. And string interpolation. And sealed types. And `for` comprehensions. And partial functions. And a unified type system (no primitives). And the ability to create your own value types. And... Java finally did one thing right. They hardly replaced Scala. Although if you ask me, they still kinda half-assed it. You STILL need to define an entire interface in Java to use a lambda. There isn't any inline syntax to quickly indicate that a method accepts a lambda. In Scala: def myFunction(x: Int)(op: Int =&gt; Int) = x + op(2 * x) In Java: @FunctionalInterface public interface Iop { int apply(int x); } public static int myFunction(int x, Iop op) { return x + op.apply(2 * x); } Now really, is all that necessary? Lambdas are a caller-only construct. Everywhere else they're still a pain to use. Not to mention, this: val result = myFunction(3) { i =&gt; i + 10 } is way more clean to read than: int result = myFunction(3, i -&gt; i + 10); IMHO. Especially when multiple lines are involved.
I like how powerful Scala's type system is, but I don't like how weak their type inference is, which makes the powerful type system hard to use. I also think they went too far with built-in operators, there are too many.
As has been pointed out, javac is the compiler that comes with the JDK, and that's fine if you don't want to make a project out of every small assignment/idea. However, I'd encourage you to look into build tools, and Maven in particular. I'm not a huge fan of it myself, but it's become a defacto standard. I recently interviewed for a job, and the home assignment was to be submitted in Maven format. Might as well get acquainted with it now! I imposes directory structure on you, but it's pretty neat how it builds a project and runs the tests, all based on one XML file.
&gt; int result = myFunction(3, i -&gt; &gt; i + 10 &gt; )
Sorry, that was my fault. I should have used an example that actually demonstrates the problem. In Scala: val result = myFunction(3) { i =&gt; val partial = i + myFunction(6) { j =&gt; val tmp = 7 tmp / 2 } myFunction(22) { k =&gt; k + partial } } In Java: int result = myFunction(3, i -&gt; { final int partial = i + myFunction(6, j -&gt; { int tmp = 7; return tmp / 2; }); return myFuncion(22, k -&gt; k + partial); }); Now I'll grant you that they're rather similar upon first glance. BUT, there are two differences. One, the java code requires `});` to close off the labmda. Not too bad, I suppose. But it also has explicit returns, which becomes immensely more confusing. As soon as you start having explicit returns, the obvious question you're tempted to ask is, "return to whom?" It's confusing to look at, especially if you've never seen lambda syntax before. However the real kicker in this code is the necessity of the `final` keyword in Java. As much as they'd like to pretend this is now a functional language, it doesn't support real closures. You MUST declare `partial` as `final`, otherwise this code won't compile. Whereas in Scala, you can easily change the `val` to a `var` and you're fine. THAT is where the real mess starts, in Java.
It doesn't matter which IDE you use to learn the language. Eclipse is totally fine. Everybody and their mother uses it. Netbeans and IntelliJ are fine as well. However, I'd argue that if everything you're learning from uses Eclipse, you're probably better off using it as well. You can always try out other IDEs once you have a better understanding of what's going on.
…said nobody ever.
&gt; You MUST declare partial as final, otherwise this code won't compile. No, final is not required because it's [effectively final](http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html)
But April Fool's isn't until tomorrow!
Ah, good point. I feel like I read that a while ago, nice to be reminded of that. Syntactic sugar aside, if it *weren't* effectively final, it *would* fail to compile.
Ant is more of an orchestrator, for build tasks. Make these dirs, delete those dirs, build this, pack it in a war, drop it there. Maven is more for dependency management, eg I need these libs to build, those libs need these, gonna need those at run time, get them from here ect. A closer functionality overlap would be something like Ivy. Op should not have characterized them as the same thing. 
 We have distributed applications that work on 64GB datasets with heap sizes upwards of 96GB. Analyzing those heap dumps is nigh on impossible on my workstation.
Eeewwww GWT
Not to be mean - but how well do you understand the "basic" data structures? This isn't something you should probably just memorize. Interviewers won't necessarily care if you can rattle off the Big O time immediately. Anybody can memorize. They'll probably be happier if you take a few seconds and work out the solution on the spot. If you can do the following then you're golden. e.g. Them: What is big O for finding the max value in an unsorted linked list? You: Well, you'd have to walk the entire linked list keeping track of the largest value you'd seen so therefore you would visit every node once and the time complexity would have to be O(n). Or Them: What is the insert time on a Binary heap? You: Well first you add a leaf to the next open spot on the left. Then you'd have to bubble it up (depending on if it was a min or max binary heap) until it was either smaller or larger than the values above/below it. Because the height of a binary heap/tree is O(log(n)) and you'd have to bubble it up at most from the last level to the first then you'd make at most O(log(n)) swaps and that would be the time complexity.
It's a nice picture but I'm not 100% sure what point it proves or disproves. It seems that for the inner circle of member states (Germany, France, Italy, Spain, The Netherlands, Belgium, ...) Europe is very much a real thing as they are in pretty much every circle, aren't they? Then there are a bunch of countries which have just joined and don't have full membership yet and some countries which have not joined yet but already started some loose alliance (like Turkey).
That's not mean at all! Thanks for the input and what you said makes a lot of sense. Perhaps having a better understanding of the ways in which to reason towards Big O values is what I need. I can hit the books hard, but I don't think I have the time before these interviews. There are always more interviews in the future if I'm not successful now, but I'd like to make my best effort this time around. Hopefully I can find some concise resources that are good enough for the interviews that aren't "CS heavy" and focus more on other things.
I suppose a simpler question to ask would be, could I use a class on the same classpath that just constructs all of my objects in its 'main' and have another file use those created objects? I'm messing around with it now and I can't get it to communicate between the two. for example: file1: createdobject.getName(); file2: createObject createdobject = new createObject(); File 1 isn't recognizing that createdobject was already created and can't get its name.
Is there a way to use the gui builder on an already built gui? And if so, how do I do that. 
Do you go Barrington or is BlueJ used in multiple schools? 
Lol, this is a serious project ... 
Wow, that looks slicker than anything I've seen written with GWT.
Actually the recent version of GWT had improves a lot and it's way more productive than before (try superdevmode!).
My new workplace is providing me with IntelliJ and as a Java noob I'm really impressed by how easy it is to build projects and the tomcat integration is just amazing for rapid development!
Pure GWT is very performant. It's also very suitable for HTML 5 mobile apps: * [mgwt](http://code.google.com/p/mgwt/wiki/Why) And also web games: * [bombermine -- warning! very addictive](http://bombermine.clay.io/) * [angry birds](http://chrome.angrybirds.com/) * [libgdx - cross platform game engine](http://libgdx.badlogicgames.com/) * [playn - another cross platform game library](https://code.google.com/p/playn/) Heavy client-side apps: * [Sheet 2.0](https://docs.google.com/spreadsheet)
Wow, I had no idea that all of this was possible with GWT. I'm learning Vaadin right now, and just put out my first app for my company. It doesn't look anywhere near as nice as any of these pages.
In my opinion, using pure GWT plus CSS for the main application and some little amount of JavaScript for small things eg. JSNI component is the way to go. 
I'm trying Vaadin simply because it's easier to work with than GWT. Not that GWT looks overly hard, but I know *nothing* about web deployment and Vaadin simplifies things down a bit. So far so good...
I'm a computer science student studying java and the textbook we use is data structures and algorithms in/for java. You can find it on the pirate bay if you don't want to pay textbook prices. 
[Announcement](http://googleblog.blogspot.com/2013/12/new-google-sheets-faster-more-powerful.html)
you can also do mkdir bin ; javac src/**/*.java -d bin provided that you are using zsh or bash 4 with `shopt -s globstar` then execute with java -cp bin your.class.Name
But wouldn't GC duration already long because the old gen would be memory starved and would be collecting under sub-optimal conditions? The only possibility I can think of for gc time increasing past that based on more memory would be an application with very long lived but transitive objects, It would be nice to build an application that could test this kind of thing out though. Maybe I'll do that tonight.
&gt; I have some great books but I wont be able to get back through all of them before I start these interview This is the reason, I take detailed notes when I read a book in ms word. In crunch time, all I have to do is read about 20 pages of my notes instead of 300 something pages of a book.
&gt; Why not ant? Primarily because it's not declarative and a new developer has very little idea how the build works.
Where does it say that it's written in GWT?
It sounds like you should focus on making your business a success, and hire someone else to take care of the coding / IT solutions. Sure, you can learn to code Java if you want to. But it will be a long learning curve, and you are taking on something fairly ambitious (an inventory management system as far as I can work out?). I wouldn't recommend it - unless you are unusually talented and/or dedicated I think your chances of succeeding are slim.
Just open your java-File in the correct Editor. Try right click on the File in package Explorer, then open and select WindowBuilder. 
What changed? I had to use it for a college project and it was horrendous to work with. I prefer HTML and JS way over GWT.
i can see it being a good thing to force you to stay current with the latest release - despite whatever version your employer is stuck on. maybe its me. maybe its the type of work i'm interested in. it just seems to me outside of some use patterns, a lot (not all) of the material is unnecessary if you've got a reasonable IDE that links to the docs. yes, i understand the argument that having in depth knowledge will let you code faster than someone who relies on documentation. but there are many ways around that, including writing code, that won't cost you - what's the going rate for a test now - $300 with a $150 certification "upgrade" ?
Java has had lambdas since the introduction of Inner Classes (specifically anonymous ones) in Java 1.1. Java 8 just introduces an easier syntax. As others point out Scala has many other features that make it different.
What will the losses be for a completed project that constantly messes up the orders? Edit: What about finding an open source project that already does a lot of what you're looking for? [Here](http://www.openboxes.com/) is one example. I'm sure there are others.
The import statements only affect the Java compiler reading the source code. The import statements do not exist at run time. The class binary expressly indicates what other classes it uses, but this was written by the compiler independently of how you organized your import statements in the source code. How you write your import statements in the source code should not be able to affect the run time performance in any way. How you write your import statements depends on your goals. If you have to manually write them, then using dot-star endings may satisfy a goal of having to write and manage fewer import statements. If you use a real IDE, then it will manage these for you and write a separate import for each and every individual class you import -- and thus greatly lower the chances of name collisions.
This is the right answer. By passing anything javax.sql into the business domain/service domain objects you're doing a few things: 1. Making them harder to test. You'll have to mock out/replace far more in order to unit test. 2. Lowering usability. Who says that in the next iteration of this project you won't be using a document database or some other data store. By introducing dependencies on javax.sql, you're making it harder to migrate in the future. Also, let your IDE generate the bean/data objects that you need for you. Define them as a bare skeleton class Foo{private final String bar} then lean on the IDE to generate constructor and accessors. Between the added pain of testing and possible future pain of adding dependencies to SQL, I think leaning on the IDE to (largely) generate the classes you need is the lazier option.
Gwt.Create http://www.slideshare.net/cromwellian1/gwtcreate-keynote-san-francisco
oh i agree shoving a square peg into a round hole is good for NOBODY. but can't this problem be avoided with: RTFM get an IDE where the docs pop up so you have no excuse not to RTFM sign up for any of the forums that give programming advice 
oh i agree shoving a square peg into a round hole is good for NOBODY. but can't this problem be avoided with: RTFM get an IDE where the docs pop up so you have no excuse not to RTFM sign up for any of the forums that give programming advice 
On the supplier side: &gt; I don't know enough yet to put a decent search into Google Your suppliers probably have some kind of web service API. If so, their site will have a developer section with more or less documented API end points. If you're lucky they even have a Java APi packaged as a library which you could simply add to your classpath and use directly without having to think about the big scary network in between (that is, until something goes wrong). &gt; If I create a lot of classes to cover smaller pieces of the overall tasks, will it affect the performance, improve / decrease reusability or make it harder / easier to debug? As it stands in Java, when an error occurs you usually get a stack trace with information about where the call chain went wrong. The top entry of the stack trace is usually the location where the error appeared (not necessarily where it originated!). The more classes / methods you have in between, the bigger stack traces you'll get. I wouldn't worry about performance until you have your application working. Even then, don't worry until you have measured its runtime and know that it's too slow. Then, you may make a more detailed measurement using JProf or VisualVM. Armed with these, you can optimize the hot spots in your code (which usually are not where you think before measuring). &gt; Most likely. I will count my lucky stars if I am able to a) complete this thing, and b) it doesn't end up like that. Consider yourself lucky if you manage point a). All in all, that's not too bad, and certainly nothing to be ashamed of. You'd be appalled at some of the code that powers today's billion-dollar-businesses.
Yeah, I split my time pretty evenly between IDEA and NetBeans these days. I really love IDEA for *writing* Java. For simple debugging, I think it's mostly a wash. NetBeans, though, kicks ass for more twisty debugging and optimization, especially with its built in profiler. Running visualvm stand alone just isn't the same. When working on HTML &amp; JavaScript, I find myself preferring NetBeans. All in all, if the NetBeans answers to libgdx and Android development were better, I'd probably just stick with NetBeans, even if the editing experience isn't quite as good as IDEA's.
Thank you for your clarifications and setting me straight. Still new and getting my feet wet. 
I suspect that android development on netbeans will never match that in IDEA/Android Studio, unless there's a determined skunkworks project on the subject at google itself. I really do love the netbeans profiling tools. It's the only "Integrated" development environment among the three where profiling is anything I'd describe as "integrated"
Yup. Unless Oracle and Google kiss and make up, NBAndroid is about all we'll get. Not trying to diss NBAndroid - it's made some decent strides. It's just not quite where I need it to be, and, while I have no problem paying for tools (I have a Personal license for IDEA Ultimate), the whole "subscription" thing just isn't palatable. The other important feature from my POV is gradle support. There is a 3rd party plugin for that, as well, and I've heard good things about it - I just haven't had a chance to try it out. I typically prefer that sort of fundamental functionality to have first party support, though.
Most of the test is relevant. But then again you can study pretty easily for the test as it has been out and the study books looks just like the test. The test is not meant for you though. The test exists for lackluster hiring managers as a metric to sort resumes. 
Paging Mechanical Sympathy wizard community, we've got a mystery for you to solve.
Why are locks slower? Java uses adaptive spinning for synchronized. It spins x iterations before blocking, where x varies dynamically depending on contention. The way he measures time with ThreadMXBean.getThreadCpuTime() only measures time while in RUNNABLE state. This means that if it is letting threads spin for longer for increased concurrency, it will be in the RUNNABLE state for longer, and hence it will appear as if it is spending more time, while in fact it is just spinning more and if he looked at the wall-clock the outcome might even be positive, that it took less time in total due to increased concurrency with adaptive spinning. Why is AtomicLong twice as fast? I recall Doug Lea implementing fetch-and-add (FAA) using a load A, CAS(A, A+1) loop, but somebody convinced him to use an atomic FAA where hardware supports it. This is faster because 1) it's a memory access less, 2) load A can get the cache line in shared state only to change it to exclusive state when reaching the CAS, while the atomic FAA gets the cache line into exclusive state immediately. Summary: No need to worry, it's all good stuff and merely an artifact of the benchmarks.
`##` is a method name, and `#` is used for marking path-dependent types, which are not expressible in Java at all. Do you also disagree with using `.` to separate package/type names like in `some.package.Foo`? (Because `#` is kind of analogous to that.) Do you have better suggestions?
&gt;Java uses adaptive spinning for synchronized. Is this new in 8?
&gt; What the hell am I thinking? You're realizing that your requirements are huge - you seemingly need *everything*, order management, collaboration, email... Trying to learn a language, and code all that besides being a parent with multiple jobs is borderline crazy! What you should do is step back, and write down what you really need. Flesh out the features a little bit, then classify them as "need/want/future". Once you have such a document, you can send it around for ideas or quotes. I do see one shortcut: existing solutions. You say all vendors have an API? Are they proprietary or is there a standard? If the latter, maybe they can point you to compatible packages.
I don't know exactly how long it has been around but I recall the amount of spinning attempts being a constant when I looked at it last year. When exactly it was introduced, I do not know!
I have the same question honestly. I think it's in the realm of possibility. With all of the synchronized hate I would want to see it result in the smallest memory usage and be the most reliable and closest to zero cost when uncontended. What really disappoints me is that the single thread numbers are so bad for both JDKs. Why isn't synch elision turned on?
Actually it is. Adaptive spinning has nothing to do with uncontended locks. It resorts to adaptive spinning when there is actual contention. Before that, biased locking is used. Biased locking and lock elision has been around since ages. Lock elision removes locks that provably only get accessed from one thread using escape analysis and AFAIK is turned on by default. Even if it isn't, fast-paths for biased locking are emitted. The idea is to install the owner of a thread with CAS the first time the lock is acquired and then lock/unlock by simply writing 1/0 correspondingly as long as it is uncontended. The trick is that by default biased locking is turned on after 1.5 seconds since some larger applications do not benefit from this while bootstrapping. You can benchmark this yourself, and I assure you that you will not see the cost of synchronized on uncontended monitors.
&gt;Actually it is. Elision turned on by default in JDK8. &gt;Adaptive spinning has nothing to do with uncontended locks. It resorts to adaptive spinning when there is actual contention. Before that, biased locking is used. Biased locking and lock elision has been around since ages. Yes, elision was added in late 6 and required an XX option. I still don't see how ether of these lines up with the single thread results in OP.
Years ago the answer would have been an unequivocal yes. But I've been doing this stuff professionally for about 25 years now, so these days, not so much. I might keep it up on a hobby basis to stay in touch with technological developments, but that would be limited. There's just so much else to see and to do and to have done to me.
This one, posted last week is also very good: [http://winterbe.com/posts/2014/03/16/java-8-tutorial/](http://winterbe.com/posts/2014/03/16/java-8-tutorial/)
I probably start a small software firm and hire developers to write pet projects for me with annual budget of say $500K assuming I win a $100M lottery ticket.
Well, with that much money, I'd just create one (or several) very geeky startups in order to be able to program the most geeky stuff ever, hopefully making even more money to be able to do even more geeky programming. Oh wait. I'm already doing that with far less money :-)
yes, and I'd hire people to work on my projects with me :) Probably turn some of those ideas into startups.
I'd be able to scale up my weekend projects!
In the code the author posted, it simply warms up running the benchmark with 100,000 iterations whereas the full benchmark runs 12,000,000 times single threaded. And since the 12 million times took 1 second, I'm assuming the biased locking startup time of 1.5 seconds was for sure missed with the 100,000 iterations. Since the author said nothing about explicitly changing this startup time, I think we can safely conclude that this was not considered. ;)
Yes. I've been coding for over 30 years and will code until I am no longer able. I balance this with lots of other aspects in my life but coding will always be important to me.
Okay so I tried it myself and I'm basically right. Time single thread in his benchmark if invoking normally: 1,252 ms, avg cpu load = 12.494 % Time if invoking with -XX:BiasedLockingStartupDelay=0: Synchronized done in 245 ms, avg cpu load = 12.486 %
Maven and Gradle both have explicit lifecycles and have directory structures that are predictable. You also generally know what to expect from the build without having to read code with either of those two, although Gradle breaks this rule since it's truly embedded. In Maven funky stuff with your build is generally a plugin that uses the same distribution as your dependency management system. In Gradle, hopefully Maven's technique becomes the norm. But in both systems, a developer has a good idea of what to expect. In Ant or make, it's anybody's guess how your build works until you pop open that build.xml / Makefile
&gt; Maven is good, but breaks down the minute you want to do something nonstandard (read: unsupported) with it. Extending it is a bit of a pain. There is a maven archetype for a maven product. Seems creating a maven plugin should be fairly trivial for a Java developer. &gt;Gradle, mentioned elsewhere in this thread, takes all the high points of maven (mostly artifact resolution and plugins) and makes them accessable through a Groovy DSL. This makes extending a snap. Gradle still seems immature with the breadth of plugins. &gt;OP: You're probably trying to do something the hard way. I agree
Ditto. I do not miss the punch cards.
Yeah, it's not uncommon for there to be some major bugs after a big Java release. Java 7's trig methods in Math were [giving wrong answers](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=679292) [on some platforms](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=678228) for a few months after its release.
It just so happens that I work on an application that has some very long lived objects and this is precisely what we see. We have about 3-5GB of heap occupied by various Hashmaps containing millions and millions of objects which only expire on the order of hours or sometimes days. Generally oldgen doesn't need cleaning up that often, but when it does, it can take 10s of seconds. We've recently lowered that time by making use of a library which allows you to store primitives in a map and we're continually looking at other options too.
I understand lambdas well enough at this point, but I'm trying to find any excuse to use them so all the new functions that come with it get ingrained in my head. I think that's where the real difficulty is going to lie in the long run for a lot of people, a constant crawl through javadocs to check if a method exists because you might be the first person to have had your issue. 
Thanks for the link. I've seen references to it, but unfortunately, we didn't get the budge for a license either... :-(
It's non-issue in dynamically typed languages, but an issue in Java and other strict typing languages. I do not believe it's possible to blame the framework in dynamically typed languages - it's always fine. (Dynamically typed languages have their own drawbacks, I'm not advocating for them, but this is the one thing that was appealling to me about them.) We're using Spring MVC.
But this is a pure latency issue right? I would think the app would spend more time per gc session, but gc pauses would be less frequent to the point that the overall time spent in GC is less with more memory. 
Ahah, of course. That would just get the serious stuff started.
Yes. At a basic level, you're absolutely correct. More heap/oldgen = less frequent, longer pauses. Less heap = more frequent, shorter pauses. The problem we run into is that we effectively lose a lot of our oldgen to very long lived objects, Let's say we lose 80% of our oldgen to objects which have to be reference checked, but don't go away very often. We still have to GC when that other 20% gets full, but 100% of the oldgen has to be checked for references. I think it's probably a fairly unique use case, so it probably won't impact most people.
Yes. I think I'd end up like notch. Working on interesting things whenever, and maybe shipping something. 
Hmm yes, but its still interesting to hear and learn more about how java garbage collection works. Thanks for sharing your experience with me.
Absolutely. It would open up a lot of opportunities, where I wouldn't have to necessarily accept a job offer because of the money, but accept it because I like what the company does. Plus, I've never programmed in the Bahamas before. ;)
Ahhh crap, this is not good.
There's no doubt in my mind that I'd keep writing software.... but I wouldn't be working on the same projects that I am now.
Use an actual method name? No need for tone here, friend. As for the path separator, I would rather them use something that looked like other, more conventional path separators. `..` or `:` or `::`, perhaps: We're used to using dots for this.
JAJAJAJAJAJA QUE RISA
Yes, but not as an employee. 
There are a number of issues with this code beyond the comment I made below. In general, never write this: ArrayList&lt;Type&gt; = new ArrayList&lt;Type&gt;(); Instead write this: List&lt;Type&gt; = new ArrayList&lt;Type&gt;(); If you're doing a list that holds lists you may want to do something more like this: List&lt;List&lt;Integer&gt;&gt; = new ArrayList&lt;List&lt;Integer&gt;&gt;(); or in Java 8, I believe you can just do List&lt;List&lt;Integer&gt;&gt; = new ArrayList&lt;&gt;(); This will help to protect you from type errors, and also introduces you to the concept of 'coding to the interface'. Also, instead of: for (int i = 0; i &lt; world.size(); i++) { List&lt;Integer&gt; region = world.get(i); You can do: for ( List&lt;Integer&gt; region: world ) { Although that would ruin the semantics of your first System.out.println in that loop. Edited for brackets I left out
New code--- import java.util.*; public class intrestAccount { public static void main (String [] args) { int bankBalance2 = 0; Scanner MyScanner = new Scanner(System.in); System.out.print("Please enter an amount: "); int bankBalance = MyScanner.nextInt(); System.out.print("Please enter an account type (S/D/C/L): "); char accountType = MyScanner.next(); // choices: switch (accountType) { case 'S': bankBalance2 = bankBalance * 1.03; break; case 'D': bankBalance2 = bankBalance * 1.005; break; case 'C': bankBalance2 = bankBalance * 1.015; break; case 'L': bankBalance2 = bankBalance * 1.04; break; System.out.println("Your new account balance is " + bankBalance2 + " and your account type is " + accountType + "."); } } 
I do it without even getting paid in the first place, so yes, if I won the lottery, I'd probably do it as well.. But with a nicer chair.
Which runs on the Java platform?
No not Clojure. It's https://developers.google.com/closure/
I wish, wish, wish I had some way to be financially independent so that all I could do is my own dev projects. So yes.
I've been a programmer since 1969 and will be so until they put me in the ground. Money is not an issue. No company will hire a geezer geek nor will young programers work with one so I maintain open-source projects in my spare time.
Java dev already commented in blog
Cay is really a great guy, lot's of good and in-depth stuff coming from his hands :)
Yes but I'd work on my own projects and not worry at all whether they made any money or not. 
Maven is fairly configurable, but it is also a bit opinionated. Gradle sits somewhere between Ant and Maven as far as configurability goes.
Hell yes, but never again Java. I was practically born programming. I started when I was 10, over 30 years ago, and I'll never stop. But Java is built for enterprises, not programmers. It's rich in history and not much common sense. If I had $100M, I would go back and get my degree and spend my time working on the areas that have frustrated me. For one, I'd start working on my own language. LLVM looks cool. I'd love to build a language on it. One area that I think could use a lot of work is a development environment that recognizes the wild diversity in user roles. Not everyone is a software engineer and prepared to look at Java code. Those who aren't still need to be inject their own behavior around and into the software we create. That means we need a UI that mixes instructions from different users with different skill sets. It needs to provide strong versioning and merging capabilities. Software isn't just created by code any more.
I would sink a couple of million into creating a AAA game title and release it for free just because. I am sure I could get some tax bonuses or something for employing people.
i have done everything suggested and still getting errors - 5 errors found: File: C:\Users\kev\Desktop\KEV-LAAAAAA\Work\Programming\Week 3\intrestAccount.java [line: 25] Error: Type mismatch: cannot convert from double to float File: C:\Users\kev\Desktop\KEV-LAAAAAA\Work\Programming\Week 3\intrestAccount.java [line: 26] Error: Type mismatch: cannot convert from double to float File: C:\Users\kev\Desktop\KEV-LAAAAAA\Work\Programming\Week 3\intrestAccount.java [line: 27] Error: Type mismatch: cannot convert from double to float File: C:\Users\kev\Desktop\KEV-LAAAAAA\Work\Programming\Week 3\intrestAccount.java [line: 28] Error: Type mismatch: cannot convert from double to float File: C:\Users\kev\Desktop\KEV-LAAAAAA\Work\Programming\Week 3\intrestAccount.java [line: 35] Error: Syntax error, insert "}" to complete ClassBody i am trying to sort it at the same time so figuring some stuff out as i go
Yes
Yeah, but occasionally and in moderation. Sitting at a desk all day hurts my balls. With $100,000,000 I'd be spending most of my time fixing up my Scottish castle.
i've been programming since I was 11 and haven been programming for 30+ years (I did take a 7-8 year hiatus, which I can't believe), some for work and a lot of side projects. I enjoy and hope to keep coding until I'm 99! (assuming my elbows, shoulders and fingers hold out)
I've been doing software since 1998, and I can tell you with 100% certainty that if I won $10^8 I would never write another line of code in my life.
Yup, that would give me the freedom to go 100% on my open source projects, and even hire help. I've got about 200 purchased games on Steam, but I've only ever actually played a fraction of them. It's not because I don't have the time but rather because programming is usually a far more interesting activity than playing games. It's like the ultimate game. Edit: "A musician must make music, an artist must paint, a poet must write, if he is to be ultimately at peace with himself. What one can be, one must be." -Abraham Maslow, psychologist (1908-1970) 
Well, probably not as much as I am doing now. With $100M, I'd start my software/hardware company and start working on concurrent operating systems. However, that probably means I have to code less and less. But still, I'd definetly program and I'd just love to hire new programmers. 'You've got an interview with the CEO!' ' Oh great, no more technical questions for now' 'Well....'
I would do it more than ever, probably... but just for fun or for the sake of doing my own R&amp;D on things I like, such as UAV/quadcopter autonomous control... not necessarily for money.
No
As a career? no. As a hobby? Absolutely! I would quit my full time job, and simply work on pet projects, games, etc all day long. It would be heaven!
Yes. I would fund seti and do data mining for them.
yeah
without a doubt!
same here, with that kind of loot you can even afford to do some philanthropic projects like a public eLearning system that is free and does not suck.
Same here, except my pet projects would be creating video games. 
Okay, so the double issue is because Java thinks hardcoded values like "1.03" are doubles instead of floats... why was I even on the Java subreddit if I don't know these simple things? I don't know. Anyway, here's some working code for ya: import java.util.*; public class interestAccount { public static void main (String[] args) { Scanner MyScanner = new Scanner(System.in); System.out.print("Please enter an amount: "); int bankBalance = MyScanner.nextInt(); System.out.print("Please enter an account type (S/D/C/L): "); MyScanner.nextLine(); // to clear the newline character left over after the MyScanner.nextInt() call char accountType = MyScanner.nextLine().charAt(0); double bankBalance2 = 0; switch(accountType) { case 'S': bankBalance2 = (double) bankBalance * 1.03; break; case 'D': bankBalance2 = (double) bankBalance * 1.005; break; case 'C': bankBalance2 = (double) bankBalance * 1.015; break; case 'L': bankBalance2 = (double) bankBalance * 1.04; break; } System.out.println("Your new account balance is " + bankBalance2 + " and your account type is " + accountType + "."); } } You may not get exactly the output you want: "101.4999999..." in the spec example you gave. To fix this, you'll want to implement some sort of rounding. Thanks for bearing with me through this process. EDIT: Minor format fixes. Also went back and deleted all of my other comments which were confusing, filled with bad code, and cluttering up the place.
I'd definitely start my own game studio and hire some people, and I'd continue to code there. I'd do that because I have an interest in it, and I'd like to give the whole start-up thing a shot myself. I'd shoot for a small enough team that it would be necessary for me to help out some. I'd also consider finishing a PhD, and focus on something like machine learning. The only reason I didn't finish a PhD (I mastered out) all the way in the first place was because I really needed a job that could support a family. It was too hard for me to do both. I regret I had to make the choice, but it was a solid choice at the time. Being financially free would mean I could probably balance that with life a little better. So, to answer the questions : Yes, I'd still code. Why? Because I like it.
I had a bad spell about 10 years ago where I was really doubting my career choice and really thinking about entering a new field. But then I found myself with a relatively trivial life problem and without even thinking about it, I coded up a little program to help me out with it. I spent the whole weekend tinkering on it. And I realized, no matter what else I was doing professionally, I will always be a programmer. If I took on a job as a janitor, I guarantee you I would be writing programs to help me do it better. It's just what I do. So, yes, I would still program even if I didn't need the money. It's just what I do.
programmer don't lotto
No. I'm not ashamed to admit it. With that much money, I'd travel and see some of the world beyond my cubical. I write software because I'm good at it and because people pay me to do it.
There is no better scenario for writing a program. The program you want, on your schedule, in your language, with the techniques you like, and money is no object. If you wouldn't code under those circumstances then quit, you chicken. You're wasting your life.
eclipse ftw :) 
Without a doubt, but I'd quit my job and would program my own projects from home. I love programming because it engages me creatively and logically, and the thought of a life without that sort of stimulation sounds depressing, so I could never just not work. However, with that kind of money I see financial independence and substantially less risk in pursuing my own projects. And maybe tri-4k monitors.
Yes. But not for programming's sake. I would spend a lot more time with programmatic sound synthesis, music composition, and sound design. It would involve programming, but only as a means to an end. I would also travel.
People should put their age in the answer since it sounds like a lot of young 20-somethings who are still very idealistic about spending all day and night coding. Once you've done it for a decade or two it gets a lot less interesting. I might play around with a few pet projects when I felt like it but if I had $100M I sure as shit wouldn't waste all my days in front of a screen. I'd buy a boat, a plane, some land and enjoy actually living. Work to live don't live to work. And I'm only 31. 
Yes, however I'd probably go back to school and get a PHD in CS and math or physics for fun and do something along the lines of AI and machine learning for fun because those two areas really intrigue me and if I had the free time/money to devote to them I would.
Totally this. If I could blow my money away, I would do it making games and websites for fun.
Yes! I would spend quite a lot of it on making open source projects even more awesome!
Yup I definitely would. The money would allow me to put all my focus on whatever pet projects I have without the stress of worrying about bills, medical, a roof over my head, bosses, terrible co-workers, etc.
I totally would for a hobby
I'd study hardcore maths (linear algebra as a starting point), then do my best to design an AI from scratch.
If your volumes are really that low, then doing it manually may actually be the best option. And I'd be really surprised if you could develop, maintain and operate something like this just in free time. I would have difficulty myself, and I'm a pretty experienced and productive developer. Many/most comparable enterprise applications would need a team of 3-5 people for something like this (30% PM, BA, 1-2 developers, data analyst, some QA, infrastructure+ops support etc.). Admittedly big enterprises can be quite inefficient and have a lot more complex processes, but it's hard to match that as a solo part-time coder.
&gt; Sitting at a desk all day hurts my balls &gt; ...most of my time fixing up my Scottish castle Not sure if "Scottish castle" is a euphemism for something else...
I would do this and build software to help people identify trends and patterns and use those tools to start making predictions for fun. 
April Fool's Day is tomorrow...
I would invest half of it. Save 1/4 and put the last 1/4 into a new game company.
Write minecraft mods for my kids (because they love that damn game) 
Try Head First Android Dev :)
How has your general and mundane thinking been affected after all these years? I've only been coding for a year and I have nightmares where I'm given a problem thatt I can't solve. I tend to think more logically and meticulously as well, you?
ArrayList&lt;ArrayList&gt;, so you have a list of lists?
I'd honestly have to say yes, though I'd be doing it for hobby instead of as a career. I find that my love of programming comes out when what I'm working on is a passion instead of a chore. Learning to overcome an obstacle is more motivational to me than churning out massive amounts of code (though I do that too).
Logical problem solving and attention to detail are part of the attraction. I don't think I would enjoy programming as much if it required only one skill. I do find that I solve other problems in my life such as "why is the dishwasher not cleaning the upper rack anymore" using skills I learned from programming. I think this is just generally applicable engineering training. There are unsolvable problems and problems that are not completable in reasonable time. Recognizing the problems as unsolvable or practically unsolvable and finding the solution to a different problem that addresses the same objective is generally more important than finding the solution to every problem. You may be [George Dantzig](http://www.snopes.com/college/homework/unsolvable.asp) but it's not usually necessary.
Smells like bug spirit.
I thought the same after reading some comments. Especially about starting a game company or buying cool hardware etc.. I'm 32 really like programming.. but I would probably also buy a piece of land etc.. travel and enjoy life. But if I was 20.. I would probably buy a penthouse, some cool hardware and start a gaming company..
What exactly does this have to do with Java in particular? Isn't this a question that would be more suited to /r/programming? 
/r/androiddev -&gt; [wiki](http://www.reddit.com/r/androiddev/wiki/index) -&gt; [resources](http://www.reddit.com/r/androiddev/wiki/resources)
I'd get into open source software. I'd have nothing but time, and I could work on whatever I wanted to.
Well, it depends on a few factors. For instance, my school offers a Programmer course, and a Software Engineering course. The difference is an extra year of study, and a lot more low level stuff, like processor architecture, compilers, real time programming, etc in the Software Eng. course. I'm not even sure the programmer course has an algorithms/data structures class... In that case it comes down to what kind of education/expertise that formal title "guarantees". 
NetBeans is clearly better than using Notepad and all of the command line tools available in Windows.
With that kind of money I'd invest in R&amp;D on robotics/vr I'd be like steve jobs, come up with an idea and hire people smarter than me to make it happen.
Sure will, though I'll retire first.
22 here. I'd like to have a chance working with both of you.
Yes, though not as much as now. I'd be able to pick and choose what I worked on. I'd be able to afford to afford any tech conference I wanted to attend. Any gadget that I wanted would be mine. 
yes I would keep coding, but only in scala
Hi thanks for all of your help last night i decided to take a break and sleep i am up early and giving it another go if i get stuck would you mind if i messaged you 
Actually no opitimization I know of (apart from lock coarsening) is allowed to cross synchronized barriers nor volatile fields, so this is not entirely true in this specific case AFAIK.
Wether or not these benchmarks are valid, it seems like improved contended synchronize is going to be included in Java 9: http://openjdk.java.net/jeps/143
I would like to say yes, I spend much of my free time working on small projects. But the realistic answer is probably no. I mean...$100!? I'm guessing I would spend my days watching reality TV from my jacuzzi doing soft drugs. 
My exact thought
Yeah, but I'd probably drop java almost entirely. My ideal would be in robotics and such, so the C family just makes more sense.
This surprises me. Big firms always maintain experienced programmers.
I will to!
I wish I had that..I just don't know what to do so I play a game but I wish it were the other way around and I'd want to code..
Well, using `hashCode` would have been quite nice, but since Sun/Oracle fucked that up ... I think `##` is pretty nice because it works like `==` in the sense that they are both `null` safe. A non-symbolic name wouldn't convey that information that easily. (And many people pronounce "#" as "hash", so that fits too.) ".. or : or ::" One looks like a typo and the others are already used for things were they make perfect sense. `#` might not be perfect, but Scala has considerably less "built-in" operators than Java, which I think is great.
Eclipse's hacky maven support and the fact that it's near impossible to install plugins when you are in an off-line environment kill it for me. I prefer Netbeans. But like others have said, to each their own.
Fuck yes, I would! I'd finally get a chance to do all those pet projects I've always wanted to do, like a backup tool that isn't complete shit.
I've encountered problems that I can't solve, in real life. When that happens, we must work around them or find help.
30 here. Write **ALL** the code!
Ah, chairs. The unsung heroes of every programmer. That and pizzas, hamburgers, fancy displays…
If sitting hurts your balls, either you have *enormous* balls or your posture sucks.
Mind linking to some of your open-source work ? I'm curious as to how programming habits evolve in 45 years :) .
*But who will help me in my nightmares?*
I definitely would. I actually would probably enjoy it more. Right now there's so much pressure to learn the right new technologies to stay relevant and employable. If I had $100M, I could choose the technologies I really *wanted* to learn about and not have to worry about finding a job doing it.
Absolutely. It's my job. It's my hobby. It's my passion. I love it.
Realistically no, but I would still read and educate myself about it because I really do enjoy that part. See if they can make web hosting any simpler than MEAN 
My dream has always been to be a part of a start up, and eventually start my own business. With those funds, that dream could be a reality, with the added benefit of enough income to live decently off of for the rest of my life should something go south. I love to program, so I can't say that I'd ever stop doing it.
Testing on the target platform is a very important task. Even if you were targeting Windows 8, it would be a good idea to setup a VM with the target OS so you can test your application the way the expected user would. As for actually answering your question, I speculate that Java8 will likely run fine on XP. However, if you do run into an issue, I would not expect some official support channel to dig too deeply into the issue if it is only reproducible on XP.
Oracle JDK 8 and JRE 8 do not support Windows XP. The oldest Windows version they support is Windows Vista: http://www.oracle.com/technetwork/java/javase/certconfig-2095354.html Windows XP support from Microsoft will end a week from now. You should migrate away from that OS, or at least not connect it to a network anymore.
Yes.
I'm not even saying I would program a little bit on projects that I thought were fun. I would so much rather be fishing or playing with my kids that I honestly can't imagine coding if I didn't have to.
nice mini AMA
TRUE DAT 
I am 28 and have been programming professionally for 10+ years. If any opportunity came up where I didn't have to work anymore, or get paid a bunch of money to do something different, I'd take it.
Mine would be AI. I have a few wild ideas that *could* revolutionise how we program/"teach" AI, how we use AI for profit and how AI could transform our daily lives - if only someone more intelligent than me was around to implement them. :D
Are you not allowed to use [java.util.Calendar](http://docs.oracle.com/javase/7/docs/api/java/util/Calendar.html)?
That defeats the objective. Project Euler is about finding solutions and algorithms, not about using predefined classes. As such, Project Euler is language agnostic.
Yes
I believe the key is what /u/cdombroski mentions that the date of 1/1/1901 is a Tuesday. The problem on Project Euler states that 1/1/1900 is a Monday. I would like to suggest some changes that you may want to consider. 1. change the name of curDay to dayOfMonth so it is more descriptive of the fact that it is really the day of the month. 2. change the name of the variable sunday to dayOfWeek so it is more descriptive that it is the day of the week where 1 is Monday and 7 is Sunday. 3. Fix the Leap year code. This will make a slight difference in calculation and perhaps break that out into a method returning a boolean as to if it is a leap year or not. 4. instead of using "magic" numbers like in the following day == 1 &amp; sunday == 1 (or in my example from above a 7 for Sunday) use a final variable describing what it is for example: (SUNDAY == dayOfWeek &amp;&amp; FIRSTOFTHEMONTH == dayOfMonth) 
Oracle deep roasted 7
System.out.print("Tell me more.");
The only resource currently available for the java 7 test is wrong on many accounts to the point that you will likely fail if it is your only resource. As for it being nothing but a tool for lackluster managers, that is absurd. Anything on your resume that makes you stand out makes you stand out regardless of the manager.
When do you think the casual gamer is going to accept a non-combat oriented game that is not called The Sims? When do you think VR gaming is going to be Wii cheap? The technology price drop will probably come before the gamer culture change. 
Enterprise cappuccino with unicode foam and deadlocked chocolate sprinkles.
 void coffeeType() { if (containsSprinkles) { delicious; } else { System.out.println("Can I get some chocolate sprinkles on this?"); } }
 public class Coffee { public enum Roastings { DARK, MEDIUM, LIGHT }; public enum Caffeines { NORMAL, DECAF }; public enum Brewings { ESPRESSO, PERCOLATOR, KEURIG }; public enum Sizes { RISTRETTO, ESPRESSO, REGULAR, MACCHIATO, GRANDE, AMERICAN, AFTER_A_HARD_NIGHT, I_NEED_TO_WAKE_UP }; public enum Whites { NONE, MILK_XS, MILK_S, MILK_M, MILK_L, MILK_XL, MILK_WITH_A_TOUCH_OF_COFFEE, COFFEE_COLORED_MILK, CREAM_XS, CREAM_S, CREAM_M, CREAM_l, CREAM_XL, CREAM_WITH_A_TOUCH_OF_COFFEE, COFFEE_COLORED_CREAM }; public enum Foams { NONE, JUST_A_TOUCH, REGULAR, GIMME_MORE, EVEN_MORE, A_LOT, HIT_ME_WITH_ALL_YOUR_MIGHT }; public enum Sweeteners { NONE, SUGAR, SWEETENER }; public enum SweetenerAmount { NONE, JUST_A_TOUCH, REGULAR, GIMME_MORE, EVEN_MORE, A_LOT, CAN_T_BE_SWEET_ENOUGH, MAKE_THE_SPOON_STICK }; private Roastings roasting; private Caffeines caffeine; private Brewings brewing; private Sizes size; private Whites white; private Foams foam; private Sweeteners sweetener; private SweetenerAmount sweetAmount; public Coffee(Roastings roasting, Caffeines caffeine, Brewings brewing, Sizes size, Whites white, Foams foam, Sweeteners sweetener, SweetenerAmount sweetAmount) { this.roasting = roasting; this.caffeine = caffeine; this.brewing = brewing; this.size = size; this.white = white; this.foam = foam; this.sweetener = sweetener; this.sweetAmount = sweetAmount; } //TODO: make coffee } I'll just have a strong, ESPRESSO, black, I_NEED_TO_WAKE_UP sized, unsugared, please.
Which Java 8 VM would that be? There's a backport of Nashorn to Java 7.
Hehe, nice little details in this prank. * "even JavaScript hackers have always preferred C# to jQuery" * "now even I understand where the C in CSS comes from." * "Satay Nutella is C#O."
That code is not going to be maintainable over the long-term (where does sysout go in deployment?). Unit tests would be better: @Test public void coffeeIsDelicious() { CoffeeFactory coffeeFactory = CoffeeFactory.getInstance(); Coffee coffee = coffeeFactory.makeCoffee(); assertTrue("Delicious coffee must contain sprinkles", coffee.containsSprinkles()); }
"It works on *my* machine."
Thank you for your help so far as you are explaining it i am getting it! your better than my teacher haha, i was wondering if you could help me edit it for the final part. okay ive posted a few problems here recently and have managed to complete alot with some great help and heres another Spec - Consider the situation where each type of account has a minimum balance, as follows: S: 100 D: 1 C: 1 L: 1000 Modify your switch statement such that interest is applied only if the amount entered satis es the minimum balance requirement for the speci ed account type. If the amount entered is below the minimum, an error message should be print Error - &lt;amount&gt; is below minimum balance for this account, where &lt;amount&gt; is the sum with which the user has tried to open the account. Code so far - import java.util.*; public class intrestAccount { public static void main (String [] args) { double bankBalance2 = 0; Scanner MyScanner = new Scanner(System.in); System.out.print("Please enter an amount: "); int bankBalance = MyScanner.nextInt(); MyScanner.nextLine(); System.out.print("Please enter an account type (S/D/C/L): "); char accountType = MyScanner.nextLine().charAt(0); // choices: switch (accountType) { case 'S': bankBalance2 = (double) bankBalance * 1.03; break; case 'D': bankBalance2 = (double) bankBalance * 1.005; break; case 'C': bankBalance2 = (double) bankBalance * 1.015; break; case 'L': bankBalance2 = (double) bankBalance * 1.04; break; } System.out.println("Your new account balance is " + bankBalance2 + " and your account type is " + accountType + "."); } } --------------- my question is do i need to actually edit the switch or can i not just edit my println, i think i am misunderstanding how it means.
yes, but I'd work on my own ideas, of course
care to elaborate?
You'd have to make your implementation of Runnable/extension of Thread periodically check a queue of tasks. Swing does something similar to Handler with `invokeAndWait`/`invokeLater`. Your thread would look something like this: public ThreadWithTasks extends Thread { private ConcurrentLinkedQueue&lt;Runnable&gt; queue; @Override public void run() { while(running) { while(!queue.isEmpty() &amp;&amp; running) { Runnable r = queue.poll(); r.run(); } doMainTaskForABit(); } } public void queue(Runnable r) { queue.offer(r); } } There are some design decisions to make like: 1. How many tasks should I execute before going back to the main operation. 2. How much of the main task should I do before I check for tasks Alternatively, consider an [Executor](http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executor.html) model which is nothing but a task runner framework.
* [JPA2](http://en.wikibooks.org/wiki/Java_Persistence/What_is_new_in_JPA_2.0%3F) allows queries with compile-time type safety and pluggable implementations, and can be used in Java SE as well as J2EE. * [SLF4J](http://www.slf4j.org/) allows robust logging with your choice of pluggable implementation. * [Nashorn](http://www.oracle.com/technetwork/articles/java/jf14-nashorn-2126515.html) in JDK 8 allows JavaScript to be embedded easily into Java applications, or you can write JavaScript that uses Java classes. 
[An Alot](http://i.imgur.com/C4Oao7G.png) vs [a lot of limes](http://i.imgur.com/PB9d7.jpg) :) More to your question, the easiest way to update the code is to put a conditional inside each of the cases that will set a flag that the balance is too low. At the println, you can then check the flag, and if it is not set then print the message as is. If the flag is set, then print the error string.
&gt; but it is also a bit opinionated. From my perspective, It's actually just as opinionated as Gradle. however the barrier to customize it is higher because you have to * run the mvn archetype command for a plugin * Modify it to do what you want * run mvn install to make it accessible * change your project to depend on this plugin Where as in Gradle, you just embed groovy. Personally I like the barriers and the propensity to share the plugins.
yeah, each case would look something like this: case accType: if (accBal &lt; minBal) minBalErr = true; else { // set balance as normal... the println at the end would become: if (minBalErr) // print error message else // print new account balance message the minBalErr flag will need to be set to false above the switch.
Java 8 is not "supported". It *does* still install and run perfectly.
 public class Coffee { private String type; public Coffee(String type){ if (!"black".equalsIgnoreCase(type))//thanks to /u/desrtfx and /u/RhoOfFeh for making sure my coffee is not null. throw new IllegalArgumentException("Real men drink black coffee"); else this.type = type; } } edit: made sure my coffee was not null
yah, so the specs want you to make sure the amount you enter is above or equal to the minimum amount. The 'minimum amount' is different for each account type. Some sudo code might help you understand what it wants: if account type is S if amount is greater than or equal to 100 apply interest else print error message else if account type is D if amount is greater than or equal to 1 apply interest else print error message else if… [etc.] Or in layman terms: "if it's an S account and the value is greater than or equal to 100, then apply interest. Otherwise print an error message. If it's a D account and the value is at least 1, then apply interest. Otherwise print an error message." There's probably a dozen and a half stupid ways you could implement this, but you should look for a solution that does not involve a lot of repeated code, or a crazy number of if statements. You can imagine that if you followed the sudo code above, you'd have pretty much the same block of code repeated 4 times, once for each account, with just slightly different numbers. The best way around this is with a variable. But before we get into that, let's apply our "no repeat" rule to what we already have. You can see in the switch statement that every line is pretty much the same as the last one, except for the interest rate. So let's pull everything else out of the switch statement except for what's different for each case, and use a variable called 'myRate' to keep track of the differences: double myRate = 1.0; // 1.0 is just a default rate, all variables should have a default value as a rule. switch (accountType) { case 'S': myRate = 1.03; break; case 'D': myRate = 1.005; break; case 'C': myRate = 1.015; break; case 'L': myRate = 1.04; break; } bankBalance2 = (double) bankBalance * myRate; Do you see what we did there? Although it doesn't seem like it helps us that much right away, you can imagine how this would be a the only way if we needed to do some complex calculations that spanned hundreds of lines of code, instead of just one simple multiplication. So now it'll be fairly easy to implement your new requirement. I'm probably being a bad redditor by just throwing the code at you without making you try yourself (since it's a school project)… but fuck it, I've been in your shoes, and sometimes a little code is all you need for it to 'click': double myRate = 1.0; int myMinimum = 1; switch (accountType) { case 'S': myRate = 1.03; myMinimum = 100; break; case 'D': myRate = 1.005; myMinimum = 1; break; case 'C': myRate = 1.015; myMinimum = 1; break; case 'L': myRate = 1.04; myMinimum = 1000; break; } if(bankBalance &gt;= myMinimum) { bankBalance2 = (double) bankBalance * myRate; System.out.println("Your new account balance is " + bankBalance2 + " and your account type is " + accountType + "."); } else { System.out.println("Error - " + bankBalance + " is below minimum balance for this account."); } Does that sufficiently explain the problem and answer your question? EDIT: Minor typos
 if(!type.equals("black")) is not safe, try if(!type.equalsIgnoreCase("black"))
 Person me = Computer.getUser(); try{ me.type("equalsIgnoreCase"); } catch(SpellingError iCantSpell){ me.type("equals"); } 
That's the only way to to it, to be honest. 
Still not safe. if (!"black".equalsIgnoreCase(type)) Will not get fooled by null. And you do *not* want null coffee.
you've grasped the concept, yes. Most of your errors are due to not declaring what type of variable minBalErr is. You probably want: bool minBalErr = false; The other error is that you have 'bankbalance' instead of 'bankBalance' on line 23 of your code block. Java is case sensitive, so must be exact with variable names. And if there's one piece of advice I'd have to give, something most people don't think is important, it would be this: use brackets on EVERY if-statement, even if it's just one line. // BAD if(a == b) DoSomething; else DoSomethingelse; // GOOD if(a == b) { DoSomething; } else { DoSomethingElse; } Doing this will help you out enormously throughout your future coding endeavors. Otherwise it is way too easy to try to put some functionality into an if-statement only to realize the code is actually not part of the if-statement and will always run. It also really helps with your code's readability - for others as well as yourself. EDIT: I do recommend you take a look at my previous post though - you'll find that code much clearer and more manageable.
The way I would tend to do it would be to move the actual multiplication out of the switch statement, instead just setting the minimum balance and interest rate as variables. So it would be something like: double interestRate; double minimumBalance; switch(accountType) { case 'S': minimumBalance=100; interestRate = 1.03; break; ... } if (bankBalance &gt;= minimumBalance) { bankBalance = bankBalance * interestRate; } That last line COULD be bankBalance2, but I wouldn't create another variable for that unless needed. Now you've got the relatively easy ability to replace the switch statement with something that looks up the two values in a data structure such as a map indexed on account type, which allows for extremely simple extension of the design. so: InterestParams params = getInterestParamsMap().get(accountType); if (null == params) { throw new SomeoneScrewedUpException("Invalid account type ", accountType); } if (bankBalance &gt;= params.getMinimumBalance()) { bankBalance = bankBalance * params.getInterestRate(); } Edited to clarify a bit
Also, you seem to be having trouble interpreting error messages. This is understandable for beginners as at first glance it just looks like a horrible mess of text and symbols with no real meaning. But usually a compile time error message has all the information you need to find and fix the issue. Let me break one of these down for you: File: C:\Users\kev\Desktop\KEV-LAAAAAA\Work\Programming\Week 3\intrestAccount.java [line: 13] Error: minBalErr cannot be resolved to a variable "File: C:\Users\kev\Desktop\KEV-LAAAAAA\Work\Programming\Week 3\intrestAccount.java" - This tells you what file the error is in. Right now your program is only one file. "[line: 13]" - this is obviously telling you which line in the file has the error. "minBalErr cannot be resolved to a variable" - this is the actual error message. minBalErr is one of your variables. So you know something is wrong with your minBalErr variable. So you no know enough to go to line 13 of your code and look for a problem with the minBalErr. If you look closely for long enough, you'll probably eventually realize that you forgot to declare the variable's type. But what if you look at line 13 and still can't figure out it? Then Google: "java cannot be resolved to a variable" - you'll almost certainly see a StackOverflow question that matches yours, complete with a helpful description of what the error message means and an example of how to fix it.
What the heck ever happened to beanshell, anyway? It looks like work just stopped on it years ago. There is, however, a fork of it called beanshell2. It keeps everything looking and feeling like Java.
Aww.... I was excited to see this at first. QQ
I don't actually need it to run on pi, i just need to know how to compile it to work on windows 7.
Yes
I looked only at your 'gyazo.com' link and what immediately jumped out at me was that you're doing myframe.set.contentPanel When logic tells me you probably want to be doing myframe.setContentPanel Same thing with the getter. And, looking a little further, I'm not sure why you have both set and get getContentPanel().add(some component) makes sense setContentPanel().add(some component) does not.
I changed it to that but I'm still getting essentially the same issue. Should I be taking off the addContentPanel on the end?
How about Javascript/Ecmascript using the JRE provided javascript interpreter. I have not used it myself, but I understand you would have full access to your Java classes if you needed them. I would suppose you would similarly be able to access the DB.
Try 'myFrame.getContentPane().add(blah blah)' 'getContentPanel' is not valid. 
That got rid of 1 of the errors. Now I'm stuck with this thing: http://gyazo.com/4c4201c8fdd1586ae920fcea6cc65895
April fools?
Get rid of that line. You don't need to set the content pane, you just need to get the content pane from the JFrame and then add content to it.
This is mostly for those new to Java.
*CRebel*, lol....
There's a 1.8 patch for the WTP out now. Update site is http://download.eclipse.org/webtools/repository/kepler/
Lua would *shine* here. Second choice would be Clojure; Autodesk uses Common Lisp as its scripting language and it's wildly successful. You can look at how they do it. Third choice would be JavaScript, probably using Rhino. I still think it's a pretty inconvenient language for people who aren't professional coders.
I've used beanshell, groovy, and JavaScript as extension languages for applications. Each has pros and cons. Beanshell feels like java. Groovy has nice, elegant syntax. However, I've found JavaScript to be a great choice for my team. We already use js for web ui, so it's already a familiar skill set. Plus, it's supported out of the box... No additional dependencies required. We use it as a scriptable interface to enterprise scale planning system. We've built a full featured system client API in Java to access soap and rest services. Then we have light command utility that executes JavaScript. From within the js, we have full access to Java API. This works great to manipulate system during manual testing. JavaScript works great for team, but would temper that it also matches existing skills of team. tl;dr: used several languages, recommend JavaScript, but stick to a language your team is already strong with. 
No, the key word is "customer", as in "the customer is always right." I cannot ship a product that my customers cannot run, and they are not interested in excuses about their operating system version.
Can't help with that right now, sorry. I've just got a chromebook here, no IDE, and I don't use Swing often enough to just immediately spot the issue (note that I didn't pick up right away on 'Panel' vs. 'Pane' up above. It's PROBABLY a matter of setting the desired and/or minimum dimension on one or another component. That's as much as I'm willing to venture to guess.
I would go with Groovy.
Fair enough. Thanks for everything.
Agree. It's already used to build other DSLs in tools such as [Gradle!](http://www.gradle.org/)
Thanks for the replies. Part of the reason to get away from Python is its the only Python used within our company. JavaScript is already used in the front-end code, so that seems a likely candidate since I see Java 8 has jjs, and we're already building with Java 8.
 public class Main { // if not feb and not a fourth year, but not on a century or a 400th year. public static int extraLeapYearDay(int year, int daysInMonth) { return (daysInMonth == 28 &amp;&amp; (year % 4 == 0) &amp;&amp; (year % 100 != 0 || year % 400 == 0)) ? 1 : 0; } public static void main(String[] args) { int[] daysPerMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; int daysInYear = 365; // you could sum the above to get the same int daysInWeek = 7; // lets assume days of the week start on Sunday, which has an index of 0. // 1 Jan 1900 was a Monday, and monday has an index of 1 since it's after sunday. int dayOfJanFirst1900 = 1; // 1900 is not divisible by 400 and so not a leap year // Jan 1st 1901 is what day? int dayOfJanFirst1901 = (dayOfJanFirst1900 + daysInYear) % daysInWeek; assert dayOfJanFirst1901 == 2; // someone mentioned it was on a tuesday. int sundays = 0; int currentDay = dayOfJanFirst1901; for (int begin = 1901, end = 2000, year = begin; year &lt;= end; year++) { for (int days : daysPerMonth) { if (currentDay % daysInWeek == 0) { sundays++; } currentDay = (currentDay + days + extraLeapYearDay(year, days)) % daysInWeek; } } System.out.println(sundays + " Sundays on month start between Jan 1, 1901 and Jan 1, 2000 "); } } 
$5,000 per CPU core per year. Holy shit if that was a real business plan.
jPanels and other Swing components only repaint when requested, usually when Swing itself determines that something has changed. Such as a component being added or removed. One way to accomplish your goal is to write a class that extends jpanel or jDialog and override the paint method. Then create a thread or timer that calls repaint on the top level component every n seconds. Keep in mind that while you can do some simple animations and games like this, Swing is not engineered for it. If you want better graphical performance look into something like LWJGL.
But it does run... multiple people in this thread have confirmed it. The point being made is that if you write code with Java 8, run it on XP and run into a bug that can't be reproduced on a supported OS, Oracle will not fix the bug. It will be entirely on you to deal with it and find a work around. If this is something you are not willing to take on, then you should not use Java 8 for code you expect to be running on XP. It should be noted that XP is listed as a supported OS for Java 7. http://www.oracle.com/technetwork/java/javase/config-417990.html
I heard you like enums
I hear that the current maintainer asked the apache foundation to take over maintenance of the project.
Actually not to nitpick, but &amp; and | will work perfectly fine in a boolean context, however their functionality is a little different. Unlike &amp;&amp; and ||, even if the first statement satisfies the requirements, the second one will still be evaluated. Example: String s= null; if(s!=null &amp;&amp; s.equals("hello")) //will not result in null pointer exception if(s!=null &amp; s.equals("hello)) //NullPointerException 
&gt; When do you think the casual gamer is going to accept a non-combat oriented game I think we may be talking about different things. The casual games I'm talking about mostly don't have much of a combat element. These are more like Yahoo and Pogo games stuff. Board games, puzzles, classic arcade stuff. Not the kind of thing that most people spend very long on. Casual as in "I want to kill 20 minutes" not casual as in "only trains for 6 hours a day". &gt; When do you think VR gaming is going to be Wii cheap? I'm not sure what you mean. Like when could I get a console and VR display for the cost of a Wii and a mid-grade TV (about $600 together)?. Maybe a couple of years? Depends on whether and how quickly it becomes popular, and how much people are willing to pay for it. &gt; The technology price drop will probably come before the gamer culture change. Who said anything about a gamer culture change? I was talking about what I would do if I had 100 million dollars. Why would I care if anyone else wanted to play or pay for these games I was developing? I'm just saying that if I had a large amount of money I'd be interested in paying for a team to explore the kinds of games I think would be fun for casual gamers who aren't interested in the sort of twitchy, high-interface-skill, combat-oriented games that are dominant right now. I'd like to see things like 3D puzzle games, theatrically animated 3D board games with lots of special effects, like Risk or Axis and Allies with miniature battles, or 3D three-cushion carom with virtual path planners and such. I would want to put together a team tht was interested in exploring what other interesting things you can do to have fun in VR, besides the obvious war games.
How do you use this monstrosity code? Could you elaborate on why you want to write this generic GenericFunction? And your interface name doesn't start with a capital letter...
MSWTF lmao
You're missing a few type parameters for a start. I think what you want is something based on the following: public static &lt;A, B, C&gt; Function&lt;A, C&gt; compose (Function&lt;B, C&gt; f, Function&lt;A, B&gt; g) { return a -&gt; f.apply(g.apply(a))); } (I haven't checked this compiles).
final Coffee coffee = new CoffeeBuilder() .withBrand("taylors") .withBlend("java") .withMilk(false) .withSugar(false) .withStrength(0.9) .build();
commentating from mobile to find it later
exacly, op you're missing type parameter. Using only ? you can't specify relationship between types, so you're not respecting types
Thank you so much! And I plan to, there is absolutely nothing worthwhile in it
Processing might be the way you want to go.
&gt; It does still install and run perfectly. It runs fine on XP so far, but there is a small catch - it won't install :) Both JRE and JDK *.exe* installers will fail with this error message: The procedure entry point RegDeleteKeyExA could not be located in the dynamic link library ADVAPI32.dll. So currently the best option is *.tar.gz package or [user contributed hacks](http://stackoverflow.com/questions/20965564/installing-jdk8-on-windows-xp-advapi32-dll-error)
You've already switched to 8? For production?? ^(Can I come work for you pls)
Basically, current AI work focuses on designing features by hand/keyboard. The basic question still is "what's the best approach?" That's not a bad thing in itself, since that's what scientific research is for. Unfortunately implementation of AI in real world applications gets left by the wayside. The big AI companies (Google et.al.) just hire lots of really clever coders to implement these schemes and then throw a lot of computing power at the problem. But there doesn't seem to be a good framework for just using AI to solve a problem. IMO this keeps AI back, because it's not a viable tool for most programmers. (And it keeps programming itself back, because every little implementation detail and edge case of a system has to be covered by hand.) E.g. neural networks are grown by glorified artificial gardeners. But not only that: for practical applications not one net is grown but hundreds, the best of which get averaged over for the final result. That doesn't seem sensible to me at all. (Yeah, hubris!) You have to "waste" highly qualified people's time on doing something that is a (mostly) solved problem and that should have sufficient tool support by now. The whole point of AI is to have a system that solves problems without someone having to program it. When you have to put so much effort into building and parametrising a system that still can only do the one task you trained it for, have you actually gained all that much? Ideally I would want to write a framework that just lets you write "Reasoner myReasoner = new Reasoner(myProblemSpecification);", "GameAI aiPlayer = new BoardGameAI(chessRuleSet)" or something similar and the computer instanciates whatever AI technology fits your problem best. And to be really really clever, the whole framework would be self-adaptive, i.e. it would improve its implementation details to suit the situation it is in. Also, I'm not a fan of connectivist AI. I see it as anathema to software engineering that we "grow" a system and just hope it will work how we want it to, with little room for variability, extensibility or proof of correctness. I have some ideas on how to apply certain relatively new software technology concepts to arrive at a "semi-connectivist", or rather "utilising connectivist ideas wherever necessary but being founded on more solid concepts" way of doing self-improving efficient AI. Though since those concepts (e.g. roles) are areas of active research right now (e.g. the CS community literally hasn't even agreed on a definition for roles, yet) I'm not really certain which will end up viable. But I would at least want to try. If I fail, it will have generated lots of knowledge. If I succeed, we suddenly have ways to run much more robust AI on much smaller hardware - and we wouldn't need to spend weeks (or even years for commecrial applications) training it. Investing $50 million into this should at least push us forward somewhat. I'm not dissing AI researchers. But when even the biggest names in the game say that they signed up to do AI and hate that they ended up fitting curves, that says something about the state of the field. I also don't believe I'm some paragon who is the only one clever enough to figure out that applying cutting edge software technology to implement software in a cutting edge field could potentially lead to awesome results. I fully expect someone to do it during the next 10 years. And I expect to read on one of the tech news sites that these people where bought up for billions of dollars by one of the big players - I already know I'm going to think "fuck, that might have been me."
Use [Java's Scriptengine](http://docs.oracle.com/javase/7/docs/technotes/guides/scripting/programmer_guide/). Out of the box you've got Javascript functionality, but other languages can easily be added.
Yep, iIMHO it is a hack to avoid breaking backwards compatibility.
Do you know if it is possible to specify a general functional interface as the upper bound for a generic? I'm having to write a lot of extra material to handle different types of functions since it is awkward to define a general functional interface for all purposes, at least that is what I have learned so far. 
I guess I should explain my reasoning a bit. Groovy uses Java syntax so no need to learn another language. Also, the one killer feature that Groovy has that as far as I know no other language has is Grapes. Grapes allows you to pull dependencies automatically from Maven repositories just by adding annotations to your code. So no need to distribute your required libraries with your scripts.
I'm interested to know how one would implement the "objects have a name but not always" feature without using the kludge suggested in the article. Keep a global object-&gt;name map ?
I'm not op but I'd guess he wants to emulate a feature typically available in functional language, for example in haskell you can compose arbitrary functions given that the result of the inner function is of the same type as the input for the outer function. For example you could write add2 = (+1) . (+1) to increment something twice.
Looks good, I really like the idea. Of course I might be biased since I work daily with a JSP/JSF/PrimeFaces abomination. I wouldn't recommend Java on the frontend in many cases anyway.
Licensing fee level: Oracle.
That's exactly what i'm doing. I'm finding that it may not be possible in java 8 though. Since functional interfaces don't seem to have any hierarchical structure you can't reference them in types, so you can pass arbitrary functional interfaces. You can create a compose method for a specific type a functional interface and overload it with common ones, but that's honestly just stupid.
Thank you for your addition! The term you were looking for (non-object) is **primitive**.
Ah. My bad. I assumed it would work on XP since it works perfectly on Windows 2003. Windows XP and Windows 2003 are 99% the same, and Windows 2003 is still supported for another year after XP, so...
My favorite netbeans plugin is not needing any plugins to do basic IDE tasks like GIT and subversion!
Unless you're using primitives (int, long, short, boolean, byte, char, float or double), the object returned is the same object and the set I'd function sets it on the object which is the SAME as the one in the chunk. However the chunk could do something like return blocks[...].clone() and then it would be another object.
Tea
We return a reference to the object. However, it's somewhat different from a pointer. It's more like a copy of the pointer. http://www.javaworld.com/article/2077424/learn-java/does-java-pass-by-reference-or-pass-by-value.html
Java should have the ability to synthesize getters and setters for a field via annotations. If we make the best practice the easiest to implement then desire for abuse like this is greatly reduced. (there's an apache library that does this already, but it needs to be part of the jdk).
The author was one of the initiators of JSR-223 but then Mozilla stepped in an side-stepped his work with Rhino. He got disheartened and walked away. Too bad because Beanshell would have been a better default instead of JavaScript.
 Thanks for that information. I found beanshell to be an excellent scripting solution and rather wish it had been incorporated into Java as a standard library a long time ago. 
Nice. Thanks.
&gt;That's exactly what i'm doing. I'm finding that it may not be possible in java 8 though. What is wrong with java.util.function.Function.compose()?
I might create a default method in an interface which reflectively looks for the "getName" method.
Also note that things inside parentheses are evaluated first. So if you instead had something like Map.getChunk(cx, cy).getTile(x,y).setId(**Map.getChunk(cx,cy).getTile(x+1, y).getId()**); The first thing java will do is get the ID. Obviously you can't set something until you have something to set it to.
I think this is misleading.. the object itself is not returned, as others have said, it's a reference to the object. I think what you're trying to get at, is that there is no new object created, no copies, clones, babies, etc, the object itself has not changed, and if you make changes to the object, it will update universally so-to-speak.
BTW: To enhance the UI and the font I don't install plugins - I just make the background for all editors gray and add the following to etc/netbeans.conf: netbeans_default_options="... -J-Dawt.useSystemAAFontSettings=on --laf javax.swing.plaf.nimbus.NimbusLookAndFeel -J-client"
In Netbeans 7.4 and newer you should find it from Tools &gt; Plugins &gt; Available Plugins. Just search for "Dark Look And Feel Themes" More info: https://netbeans.org/projects/www/lists/netcat/archive/2013-08/message/342
was not the android plugin originally on eclipse only ? what does the plugin you mentioned do ?
The first I install if I download the Java SE installer are: 1. gradle 2. c/c++ 3. show and change line endings 4. NBAndroid (just the open source part) Reasons for each are pretty self evident, I think. Regarding NBAndroid, I'd love to also install the gradle support, but I don't like the subscription based licensing. I'd be willing to pay a small amount for the functionality, and in fact did pay one year's subscription fee, just to show support. The way the current licensing is described, once the "subscription" ends, I believe he reserves the right to have the plugin stop working. I'd understand only allowing updates to versions released within one year of purchase, perhaps, but the subscription model is just a non-starter for me. I don't know if he's actually put in code to phone home to do license checking, but I'm not willing to make my workflow dependent a subscription.
Thanks for your reply. Do you have any tutorial or open source code in mind that I could read to get a better idea how to build that?
It may have been. I started doing android dev a couple of years ago and have always used netbeans. The plugin allows you to create an android project, build said project, and run it on an emulator or connected device. If the emulator isn't running, it allows you to launch one (that you have previously created through the android tool)
That doesn't seem to solve the poster's problem, which is a double-encoding bug if a URI is constructed from a naive encoding of the parameters: String queryString = "a=" + URLEncoder.encode("Frick&amp;Frack", ENCODING) + "&amp;e=" + URLEncoder.encode("20%", ENCODING); The % of 20% will be double-encoded. Once by the author's URLEncoder.encode call, and once by the URI's constructor properly URL encoding its `query` paramater. (Based only on 5 minutes of google), I think the pure-java solution to this would be to use the [URIBuilder](http://docs.oracle.com/javaee/6/api/javax/ws/rs/core/UriBuilder.html) clas to build up the paramater list programmaticly. He should check out the [queryParameter](http://docs.oracle.com/javaee/6/api/javax/ws/rs/core/UriBuilder.html#queryParam(java.lang.String, java.lang.Object...\)) method. URI uri = URIBuilder.fromPath(path) .scheme("http") .queryParam("a", "Frick&amp;Frack") .queryParam("e", "20%") .build();
Or as a positive spin: "A feature to enable evolution of APIs". But it's Java, so lets hate it.
 After changes in the panel's contents, call: validate(); repaint(); 
That's what I would do, rather than abuse OO for something it's not meant to do. Although I wouldn't make it static, I'd make a Namespace class to hold it.
That too.
Maybe a bit old school but I'd just make a Namable interface and, yes, implement the field/getter/setter on any class that implemented Namable. Straight forward, easy to maintain/understand/knowledge transfer, easy to think about, supported by IDEs and other java tooling. If I was worried about lines of code I could introduce Groovy or some other 3rd party project to generate the getters/setters. This also makes the code more future-proof. If some future java version brings in annotations on fields to generate the getters/setters all one has to do is go through the classes and update them, probably IDEs would include this refactoring. *Other simple ideas worth considering:* **Use a Map**: Consider storing object instances that needed a name in a Map&lt;String, T&gt; and just using the key as the name. To change a name you'd need to remove and re-put the item but that's not a big deal. **Use a Map with a custom POJO key**: If more than just 'name' was needed you could change the Map to Map&lt;Metadata, T&gt; where Metadata would be a POJO of metadata you wanted to associate with object instances. The Metadata itself could be a hierarchy (hopefully a small one) if needed. **Use Composition:** The preferred OO pattern is composition vs hierarchy (has-a vs is-a) so create a class Metadata&lt;T&gt; that has the POJO fields and a single accessor method for the wrapped object: T getObject() To get the associated object. The Metadata&lt;T&gt; class would of course implement equals(), Comparable, Hashcode, etc so you could use it in Maps or Sortable collections, etc. If you use Groovy or some similar project/jvm language you can remove the getObject() and replace with generated proxy methods to the wrapped object. Of course if you were using that language you may consider just going with my first idea and straight-forward implement the interface wherever needed. All these are preferable OO techniques in Java to trying to force a hierarchy where there isn't one or abusing default methods.
Interesting, so I'm guessing Lombock requires some sort of bytecode manipulation dependency? One bummer I'd think is lack of IDE support so those getters/setters would look like errors?
Yes, but extends/super what? Functional Interfaces don't have a super type?
You make some good points, but I don't buy the reflection argument. Yes refection is slower than direct calls, but how much slower? For most apps, I don't think the difference would matter. I ran a test with [a billion reflexive method calls that ran in under 3 seconds](http://www.reddit.com/r/java/comments/1krpsv/am_i_reinventing_the_wheel_here_are_there_any/cbs8com). You're also right that this may not be portable across all JVM, but I did test it on Oracle's JDK 6, 7, and 8. 
 Because the Function interface isn't generic. It only accepts functions of single arguments. A real compose method would be one that could take functions of multiply arguments and compose them.
I really like the UriBuilder approach. The code is very clear and simple. The only downside is you still need a provider jar. In my case I used resteasy-jaxrs-3.0.6.Final.jar. Really wish this was in the java.net package. 
If you want to go that far into FP, it might be worth it to slam the pedal down and do currying.
Rhino? You mentioned in a previous comment that javascript is a good candidate. 
Thing like this make you conflicted about immutability. I personally don't understand why this is even a discussion. Simple getters and setters aren't difficult. Honestly, this default method thing was out there to save 5 seconds, but that broke porting and decreased efficiency. It is the type of thing that I imagine people who absolutely refuse to use an ide would abuse while continuing the high and mighty attitude.
&gt;The only downside is you still need a provider jar. In my case I used resteasy-jaxrs-3.0.6.Final.jar. Well, that's a whole lot of annoying. :( 
That's what I was thinking, but holly hell the type declarations would be crazy: Function2&lt;Integer,Integer,Integer&gt; max = new Function2&lt;Integer,Integer,Integer&gt;{ public Integer apply(Integer a, Integer b) { if(a&gt;b) return a; return b; } } public static Function1&lt;Integer, Function1&lt;Integer, Integer&gt;&gt; curriedMax = new Function1&lt;Integer, Function1&lt;Integer, Integer&gt;&gt;() { public Function1&lt;Integer, Integer&gt; apply(final Integer a) { return new Function1&lt;Integer, Integer&gt;() { public Integer apply(final Integer b) { return if(a&gt;b) return a; return b; } }; } };
*cough*IntelliJ*cough*
From putting together your other posts I that you're looking for different numbers of arguments. This was answering the question of an upper bound to a type in genetics.
Perhaps it would be beneficial to just work within the constraints of a single argument like Haskell does. For me the complexity of multiple generic args seems like it could ruin the Function interface. I would first suggest a real functional language, next perhaps extend Function with Function2Arity, Function3Arity...
So basically a hack to turn default methods into a way to implement mixins. Fun, but I wouldn't use it in production code just to save time (with something that IDEs automate anyway).
There is a plugin for all the major IDE's http://projectlombok.org/download.html
So that in the future if you need to make them "smart" your clients won't have to switch from accessing the field to calling the method. More reading: http://en.m.wikipedia.org/wiki/Uniform_access_principle
The reason not to make the variable public is that it makes refactoring future code hard. Once you have exposed the variable and released the API, you are stuck with it being exposed or you lose backwards compatibility. A good example of this is actually from a [Python talk](https://www.youtube.com/watch?feature=player_detailpage&amp;v=HTLu2DFOdTg#t=2280) (which includes lots of good insight about designing classes that can be used in different languages). In the example, there is a requirement to change how data of a Circle class is stored (must store diameter instead of radius). However, versions of the code have already been released to the customer where `radius` is a public variable. In Java, you are stuck because there is production code in the world that depends on that public variable. Even thought the customer probably doesn't care if it is a variable access or a computed value, they will have to change their code in order to use the newer version of the library that doesn't have a `radius` variable. Instead, if a getter method was used, there is no change to the class API and the customer can use use the new version of the code without any changes to their code base. In Python, the way properties are implemented means any public variable can be easily turned into a function call without needing to change the public API.
Casting to a double may be the issue. Doubles are double-precision floating-point numbers, and you may get a floating point error in casting to a floating-point type. It is nearly impossible to compare a float to exactly 0, because it could be 0.00000000001 or something similar. Try not casting to a double, or using &lt;= 0 rather than == 0. Also for error messages, you should use `System.err.println("Error...");`
my favorite: jVI - a really well done vi implementation
Seven hours since this was posted and no one has mentioned IntelliJ... Must be some sort of a record. 
People in this sub have a raging hate boner for Eclipse. Edit: As you can see. 
Intellij master race. The Eclipse Foundation is just like there program: slow and sluggish. :)
Why not check to see if bankBalance2 &lt;= bankBalance? After all, if it's &gt; bankBalance (which probably should not be an int unless it's in cents) then interest was assigned. This kind of difficulty, though, is part of why I suggested yesterday that instead of performing your calculations in the select block you just set variables there and do the calculations in one place. An else block could be put into place for displaying the message. A good general rule to follow is that anytime you see essentially the same code twice, think hard about how to turn it into once.
(or JEE) the difference between the Java world and the .NET world is we publish open specifications and certify implementations. In .NET the spec and the implementations are both provided by MS, AFAIK.
cleanliness. refusal to use null - everywhere - leads to more liberated (no need to obsess over potential nullness everywhere), and correct code. things get caught sooner and closer to the source of the problem. 
This is why Java 8 default methods are a poor substitute for Scala traits. Also, they cannot override inherited methods. Java should just bite the bullet and allow multiple class inheritance. This crap is ridiculous.
That makes sense, thanks!
I appreciate the C/C++ and Fortran support. The Python plugin... I wish Oracle would open its fist a little and let that come back. Python/Java is a super-efficient pair of languages to use together. No, don't point me to the dead plugin boot hill site, I'm not fiddling with the internals of my NB install. I run eclipse in parallel with PyDev. The profiler is great too. Not a plugin, but more important than anything else for a Java IDE. If Netbeans picked up the old Sun Studio performance profiler, for C/C++ and Fortran, that would be kick-ass. Probably not possible to integrate though.
http://rpmfind.net/linux/rpm2html/search.php?query=tomcat
In addition to the "you might want to make it non-dumb later" argument, there's also the fact that interfaces can't have fields, but they can have accessors.
Probably 6 months to release. It's a shipped product, not cloud deployed. 
Lookup examples on how to build a chatroom client/server. The logic and majority of the code is going to fit your model well.
Or one could simply read the [mighty fine documentation](http://docs.oracle.com/javase/8/docs/api/java/net/URI.html) which contains the exact information about what is encoded when. Then one will know that only the characters of the category *punct* have to be escaped before being handed into the `URI` constructor.
Good troll, man. You keep on trying to make IDEA users foolish. ;-)
I always drink null coffee. Where null is the #color value (as in zero-dark black)…
Are you saying there's a way to escape characters in the 'punct' category and not have them double encoded when calling URI's multi arg constructors? Can you share your code please? 
I just saw something. Your break statements are inside the brackets, not outside. So if you have an 'S' account type, it tests whether bankBalance is &gt;= 100. If not, it never executes break. Instead, it goes on to 'if (bankBalance &gt;=1)'. Have you tested this code with an 'L' account type? It works for that one.
Thank you i have sorted this now! little things can make such a differance haha 
would you be able to explain why this sint working aswell please code -- import java.util.Scanner; public class Average //imports not shown { public static void main(String args[]) { Scanner sc = new Scanner(System.in); int i,n; double average, sum = 0.0; System.out.println("Enter a positive integer:"); n = sc.nextInt(); for(i = 1; i &lt; n+1; i++){ sum += sc.nextDouble(); } average = sum/n; System.out.println("The average is "+ average); } } it just loops on forever asking for numbers 
i see i have sorted it i was being blind, my bad
So each result needs to be validated. As with most things in programming, there are many, many ways to go about any specific task. one way would be like this: for (int i = 0; i &lt; n;) { int grade = 0; try { System.out.print("Enter grade #" + (i+1) + ": "); grade = sc.nextInt(); if (grade &gt; 0 &amp;&amp; grade &lt; 101) { grades[i] = grade; i++; } else { System.out.println("Grade value must be from 1 to 100."); } } catch(Exception e) { System.out.println("Please enter a numeric value!") ; sc.nextLine(); } } 
I can give a quick overview. First, we have a for loop which runs for the number of grades you intend to enter. Most (and I mean virtually all) programmers will do their loops this way, declaring the index variable inside the loop and running from 0 to the final count less one. Arrays (such as grades[]) are zero indexed as is most everything else. We declare a variable for the next grade we're gong to accept. Then we set up a block of code to accept grades from one to one hundred. The whole thing is wrapped up in a try/catch structure, because if the user enters 'chowder' instead of a number you're going to have a big problem in the form of an exception thrown by 'sc.nextInt()'. To handle the exception we 'catch' it, inform the user that they did something bad, and set the scanner to move to the next line of input. Now, back to the normal operation of the program: We display for the user a message requesting that they enter a grade, and to help them out we show them where we are in the list numerically. Since *users* do not think in zero index terms, we use 'i+1' instead of 'i' in the message. We use the scanner in the old familiar way to get an integer value. We check that value to ensure it's greater than zero and less than 101. If that is not the case we inform the user they screwed up and wind up back at the top of the loop. We could have used '&gt;= 1' and '&lt;= 100' too, the result would be identical. If we obtain a value that passes this test, we can be pretty sure it's a good grade, so we stuff it into the grades array (you need to assume we did 'int[] grades = new int[n];' before this block of code) and increment the index. We increment it here because only if we reach this section of code do we know that it's safe to move on to the next grade. 
I know right, they should knock it off and just use Netbeans. The one true IDE.
Not as-is. First of all, you have declared 'examResults' as int, but it has to be an array of int. so 'int [] examResults;' Second, you need to *allocate* space for the array, to hold all of the numbers you will enter, so 'examResults = new int[n];' However, if you're not looking to keep all the grades you can skip that and just leave it as int examResults', but you will then need to use 'examResults = examResults + grade' rather than 'examResults[i] = grade'. I was presupposing that you'd use the individual values in more than one way, or print them out or something. One more thing: Try entering 'fish' for 'Enter amount of exam results:' and you'll have a big problem. It's always a good idea to validate your inputs. Logic VERY similar to what is in the loop can accomplish this, but you'll need to set up a loop (a do/while is a good one for this purpose) to take input until you have a valid positive integer value. 
i have done like you said as shown bellow code -- import java.util.Scanner; public class Exams { public static void main(String args[]) { Scanner sc = new Scanner(System.in); int [] examResults,n; double average, sum = 0.0; examResults = new int[n]; System.out.println("Enter amount of exam results:"); n = sc.nextInt(); System.out.println("Enter exam results:"); for (int i = 0; i &lt; n;) { int grade = 0; try { System.out.print("Enter grade #" + (i+1) + ": "); grade = sc.nextInt(); if (grade &gt; 0 &amp;&amp; grade &lt; 101) { (examResults + grade); i++; } else { System.out.println("Grade value must be from 1 to 100."); } } catch(Exception e) { System.out.println("Please enter a numeric value!") ; sc.nextLine(); } } }} average = sum / examResults ; System.out.println("The average is "+average); } } but i keep getting errors and tried googling them but couldnt find similar ones below is my errors errors -- 3 errors found: File: C:\Users\kev\Desktop\KEV-LAAAAAA\Work\Programming\Week 3\Exams.java [line: 20] Error: Syntax error, insert "AssignmentOperator Expression" to complete Expression File: C:\Users\kev\Desktop\KEV-LAAAAAA\Work\Programming\Week 3\Exams.java [line: 33] Error: Syntax error on token "}", { expected File: C:\Users\kev\Desktop\KEV-LAAAAAA\Work\Programming\Week 3\SumOfNumber.java [line: 11] Error: Syntax error on token "+", invalid AssignmentOperator error two is easy to fix its the invalid assignment operator part i dont get
If you put at least four spaces in front of each line like this Your code will be a whale of a lot easier to read.
Only because I'm bored. One tip for you, variable names should be lowercase and camel-cased (ie minValue). Capital letters are for Classes. import java.util.*; public class SumOfNumber { public static void main(String args[]) { Scanner sc = new Scanner(System. in ); int number; int total = 0; int max = Integer.MIN_VALUE; System.out.println("Enter the list of whole numbers, terminated by -9999&gt; "); number = sc.nextInt(); while (number != -9999){ if (number &lt; 1 || number &gt; 100){ System.out.println("Error: Input must be between 1 and 100. User entered " + number); } else{ total += number; if (number &gt; max){ max = number; } } number = sc.nextInt(); } System.out.println("Program finished"); System.out.println("Total Sum: " + total); System.out.println("Max valid value entered: " + max); sc.close(); } }
Why haven't you asked your teacher?
First off, /r/javahelp is a better place for this. Second, decribing what the "some problems" are would be helpful Third, adding formatting to your question or using pastebin (or similar) would be helpful import java.util.*; public class SumOfNumber { public static void main(String args[]) { Scanner sc = new Scanner(System.in); int Number, Prevnumber, Total; boolean Found = false; System.out.println("Enter the list of whole numbers, terminated by -9999&gt; "); Number = sc.nextInt(); { Total + Prevnumber + Number; } while( (Number != -9999) &amp;&amp; (!Found)) { Prevnumber = Number; Number = sc.nextInt(); if( Number == Prevnumber) { System.out.println("The total is " +Total ); Found = true; } } System.out.println("Program finished"); } } As I see it, you have a compilation issue with Total + Prevnumber + Number; because you're using 3 unitialized variables. There's also no reason to add them together at this point. Your loop isn't designed to meet objective a. It terminates if -9999 is found, or if two duplicate numbers are entered in a row. You do not ever calculate a sum and there is no reason to terminate if a duplicate number is entered. There's no reason to store the previous number. 
Meh, too late, already building a spec file. Thanks though!
Checking the [pre-release IBM Java 8 SDK](https://www.ibm.com/developerworks/community/groups/service/html/communityview?communityUuid=fa855c78-3991-4bac-8f2e-f7048b73b367), I find a statement that it is " functionally equivalent to the Oracle FCS version of Java 8 b80". So, still Rhino. My guess is that if you want to use Nashorn-specific functionality, you'll need to bundle your own build of Nashorn with IBM JDK 8. However, that's not an official statement.
Nice examples but coming from a c# background I'm having trouble understanding why you'd want static methods on an interface. Sounds like it violates the single responsibility principle and interface segregation.
Thanks. That's what I feared.
Comment your code. Make this the habit you learn first. Explain with comments what the subsequent section does exactly. Don't omit information in comments because you feel lazy or you think the code segment is too easy and doesn't require comments. When you go back and look at this code in a month or even just two weeks you will have to relearn your algorithm but comments will cut that time down to almost nothing. Also it benefits the person reading it for the first time.
For example. Now can i create an Interface with a static valueOf method. This is e.g. Cool for enums. I can now create types that acts (in the static way) like an enum. Beside, currently i have to implement enum helper methods for every enum. Because you can't create abstract enums in java. For this it would be cool too that I can create default methods. When i understand it correctly, default methods or static interface methods works like mixins. They will mixed-in in the target class. Has nothing to do with inheritance .. right ??? Not like traits how they are implemented in e.g. scala. But I'm not sure
hi you helped me earlier with a program and i still cant get my head around this looping stuff haha am i along the right lines with this code --- import java.util.*; public class FirstandLast { public static void main(String args[]) { Scanner sc = new Scanner(System.in); } { System.out.println("Enter the list of words, terminated by done&gt; "); } { String word1 = sc.nextLine(); } { while( (word1 == "done") } { if (word1.charAt(0).equals(word1.charAt(word1.length()-1)) } { System.out.println(word1 + " has the same first letter as last!") } else { System.out.println(word1 + " Doesnt have the same first and last letter!") } } } Spec --- Design, write and test a class which will read words from the keyboard until the word "done" is entered. For each word except "done", report whether the first character is equal to its last character.
You know, I am beginning to think that we are the ones who should get your grade at the end of the marking period.
I don't want to be *that guy*, but these are all pretty basic. This looks like it is for a course. We aren't going to be there when the final comes, so step up your game and crack those books open. Having others do your work, especially you said you can't do it, shows you aren't well-enough prepared and probably will fail. Find the answers in your text book, understand why they are what they are and you might just pass this course.
1. You need to get a program for editing that has a compiler. Get BlueJ or Eclipse. Your brackets are all fucked up, this code can't even start to run. 2. To test equals for characters use '==', to test for Strings, use 'equals()' You sort of have the right idea, but get a decent editing program first. You have brackets all over the place where you don't need them.
i have edited down my code and corrected some errors but i dont understand my compile errors code: hi i have taken your advice and would like you to look at another program to see if i am correct in how i am doing it the spec is --- Design, write and test a class which will read words from the keyboard until the word "done" is entered. For each word except "done", report whether the rst character is equal to its last character. code --- import java.util.*; public class FirstandLast { public static void main(String args[]) { //implements scanner Scanner sc = new Scanner(System.in); } { //asks user for words System.out.println("Enter the list of words, terminated by done&gt; "); } { //scans the next line and places it in variable Word1 String Word1 = sc.nextLine(); } { //when word 1 equals done it will stop while( (!Word1.equals"done")) ; } Word1 = console.next(); //if word 1 char 0 and the last character are the same print statement else print other statement { if (Word1.charAt(0).equals(Word1.charAt(Word1.length()-1))) } { System.out.println(word1 + " has the same first letter as last!"); } else { System.out.println(word1 + " Doesnt have the same first and last letter!"); } } } Compile errors : 2 errors found: File: C:\Users\kev\Desktop\KEV-LAAAAAA\Work\Programming\Week 3\FirstandLast.java [line: 26] Error: console cannot be resolved File: C:\Users\kev\Desktop\KEV-LAAAAAA\Work\Programming\Week 3\FirstandLast.java [line: 30] Error: Cannot invoke equals(char) on the primitive type char can you explain these for me please? 
Also, you might find someone more willing to help you in /r/javahelp Really though, high_hobo is correct. If you don't understand the answers to the questions listed you really should before trying to move on to the next step in programming, or you are gonna have a really hard time.
I have corrected the first error with ease it is just the Cannot invoke equals(char) on the primitive type char error i am struggling with
Well first of all, your program is probably crashing as soon as you try to run it, this is why: public static void main(String args[]) { Scanner sc = new Scanner(System.in); } See where your second bracket is? You just terminated the main method, that's where your program ends. The main method needs to encompass all your code. The second error is because you are using char.equals(char) when .equals() is a string method. Use '==' to compare char.
Okay so now the program compiles correctly but it doesnt work and i cant figure this out, any ideas? code -- import java.util.*; public class FirstandLast { public static void main(String args[]) { //implements scanner Scanner sc = new Scanner(System.in); //asks user for words System.out.println("Enter the list of words, terminated by done&gt; "); //scans the next line and places it in variable Word1 String Word1 = sc.nextLine(); //when word 1 equals done it will stop while( (!Word1.equals("done"))) ; Word1 = sc.next(); //if word 1 char 0 and the last character are the same print statement else print other statement if (Word1.charAt(0)==(Word1.charAt(Word1.length()-1))) System.out.println(Word1 + " has the same first letter as last!"); else System.out.println(Word1 + " Doesnt have the same first and last letter!"); } } 
Hi i had actually seen this before you replied i was just about to message you, i now have a fully compiled program but when i enter a word it freezes and wont run i am currently trying to figure out why but would you mind having a look aswell??? code --- import java.util.*; public class FirstandLast { public static void main(String args[]) { //implements scanner Scanner sc = new Scanner(System.in); //asks user for words System.out.println("Enter the list of words, terminated by done&gt; "); //scans the next line and places it in variable Word1 String Word1 = sc.nextLine(); //when word 1 equals done it will stop while( (!Word1.equals("done"))) ; Word1 = sc.next(); //if word 1 char 0 and the last character are the same print statement else print other statement if (Word1.charAt(0)==(Word1.charAt(Word1.length()-1))) System.out.println(Word1 + " has the same first letter as last!"); else System.out.println(Word1 + " Doesnt have the same first and last letter!"); } } 
Okay so ive edited my variables to make them lower case but i still dont see why it isnt working i have gone over my lecture notes multiple times and also my code but i just cant figure it out :-/
Dude are you serious? Do your homework.
The only thing I can see is you could drop the second if(userChoice &gt; 0 &amp;&amp; userChoice &lt; 13) and just add that block as an } else{ } to the first if, because you already test the range you want. 
Also just thought of something else, have a look at the map classes, your example is simple enough to not really need them, but could be used as an alternative
Seems I don't have Java 7 or 8 on my computer so it didn't like the switch on String part. But you should do some error checking on the userChoice = userInput.nextInt(); part to see if they really enter an integer or something else. Also on String askQuit = getIt.nextLine(); to see if they enter a string or something else. And you should add a default case to your switch statement to catch any other inputs than "yes" or "no".
Try running minecraft as an administrator maybe?
One more idea. Open Up Control Panels, Open the "Java" control panel and click the "Security" tab. Change the security level to medium if it isn't already. If that doesn't work I'm out of ideas.
* Format your code in a readable way. * Learn to ask a question. "I'm struggling, here's the assignment text" is not the way to get help. It's looking for someone to do the assignment for you. And it's cheating. * Your braces are totally. Wrong. It's like you've randomly strewn them all over the place. I'm sure you don't want to hear this, but you'll need to go back to the very basics. Learn how to write a `if` statement with proper braces. And a loop. Learn where braces of a method go, i.e. how to write a method. 
Update your graphics cards driver. As it seems like you have some integrated Intel graphics chip you can get the latest drivers from http://www.intel.com/p/en_US/support/detect/graphics .
:D
Not about the array but- -you may want to consider using a boolen for the user exit option just because it can be helpful to see there are only 2 options in some cases -you can use one Scanner object for both times you get user input, you don't need 2
Use the Community version.
Why so stubborn?
Graphic driver up to date. After googling the specific error code, I found this thread: http://www.minecraftforum.net/topic/2207335-version-174-errors/ It's my chipset. I can't run OpenGL 2.1 or above, so I'm stuck playing 1.7.2 until I get some new hardware. Thanks for the help though.
Tried it, but it didn't work. Turns out it's my chipset. It's old and can't run OpenGL 2.1 and above. So I'm stuck using MC 1.7.2 until I get a new computer.
I want to know this too. Can someone show me a valid real world example that this is useful for? I never came across a situation where I wanted to do that. In fact, I find it easier to use an interface knowing it has only one responsibility, to contractually obligate the implementation to provide certain method signatures. Without a valid use case I see this as a neat feature that will allow programmers to write some bad code. (re: many features of PHP's architecture)
Of course! Thanks, silly thing to overlook.
Are there any ways built into Java to check for proper input?
Sorry to say but the page is pretty unreadable in mobile. http://imgur.com/U5yNfh6
Just a stylistic point to make: You are using a while() {} loop, and this does work fine, but you know that you will *definitely* execute the code inside of it at least once, right? We used to call that an 'exit condition' loop, as opposed to an 'entry condition' loop. Semantically it makes a bit more sense to use a do {} while() loop instead. At the end of the loop you decide whether or not to execute it again. As I said, it's really just a matter of style, but back when we were writing C code that was a bit closer to machine language on machines that were far more limited it was something we really cared about. 
Yeah you could do this. I actually didn't know that it would throw an exception, cool. But generally, you'll have to do error checking yourself.
No need to create two scanner objects. They both provide the same functionality but take up double the space. Other than that it's good.
Really digging the for loop. That is way cleaner and saves a lot of time! Thanks!
One nit-picky thing I'd mention. "main" is a method and should be indented like one.
Your `userQuit` can be a `boolean`. It does _not_ have better memory usage nor performance, but states your intent a bit more clearly. If a variable is an `int`, one could assume it can have many possible states. If it's a `boolean`, you immediatelly know it's just a yes/no variable.
For a command-line program like this, I have found that once I get an exception of this sort i need to execute 'nextLine()', otherwise the default 'radix' for the Scanner's next statement will never move forward, and will keep trying to retrieve the same value over and over. If you have your code set up to try to get a value until something valid comes in, this can lead to exception after exception until the program is killed.
To be semantic, an integer is 4 bytes while a boolean is a byte, which is one. So there is a (small) memory improvement.
I believe the word is pedantic.
While these tools are nice. And provide interesting metrics. I think we all know there are much more important things to be worrying about..
Then fix it...
What do you mean you "cant initialize the consrtuctor"? I try not to be an ass anymore. But this is literally the worst post asking for help I have ever seen. So good job?! :)
What are you asking? Some more information would be nice, also you should probably fix the formatting. It's difficult to read. private HashMap&lt;String, Player&gt; Players; private LinkedList&lt;GameLocation&gt; Spaces; public GameBoard(String Player1Name, String Player2Name, String[] SpaceNames, int[] ScoreModifiers, int[] GoToSpaceIndexes) { } EDIT: Formatting
Yeah, usual takipi post are like that.
Although I do think that good code style is important, I haven't really gotten to integrating findbugs / checkstyle / etc. My main problem is that they give out a lot of false positives without configuration and its annoying. No checkstyle, I'm not going to javadoc my getters/setters and IDGAF if you think that lines shouldn't be more than 80 chars long.
Maybe a 101 course is in order. Try Code Academy or something to get a feel for programming. Reddit is not the place to learn beginner fundamentals. 
When used properly, these tools prevent and detect bugs with little extra effort. That's pretty important. I don't care much about the metrics. I do care about FindBugs detecting a possible NullPointerException in the background of Eclipse.
Or just, you know, change the listen port to 80 in the exact same setting you just added proxyPort="" to and restart the tomcat service. They even have a setting for the HTTPS port that you can change if you want. edit: Sorry, forgot one thing. You have to enable AUTHBIND in your /etc/tomcatX (or however etc is structured for your distro). Maybe you're not a fan because you choose to not learn. Maybe you did change it, but already had something binding to port 80, so Tomcat wouldn't start because of that?
I honestly can't work out whether this guy is serious or not; this definitely belongs in /r/programmingcirclejerk . 
/r/programmingcirclejerk ***** [^report ^a ^**problem**](http://reddit.com/r/LinkFixerBotSnr) ^| [^delete ^comment](http://www.reddit.com/message/compose?to=LinkFixerBotSnr&amp;subject=Comment%20Deletion%20%28Parent%20Commenter%20Only%29&amp;message=%2Bdelete+cgjmccb) ^| [^source ^code](http://github.com/WinneonSword/LFB) ^| [^contact ^developer](http://reddit.com/user/WinneonSword)
The issue with setting the default port as 80 is that you have to run Tomcat as root for it to bind (at least under most Unix variants) which is bad practice from a security perspective. Regular apache gets around this by doing the bind and then deescalating privileges but Tomcat doesn't do that, hence the redirection.
I'm confused about the following: **Default Methods** With previous versions of Java, if you added a method to an existing interface, all implementations of that interface would need to change. This naturally makes interface changes very disruptive. With Java SE 8, you can now add default method implementations to interfaces to avoid this situation. For instance, if you have an interface such as: public interface MessageListener { public void onMessage(Message msg); } You can now add a default method to avoid compiler errors in all implementing classes: public interface MessageListener { public void onMessage(Message msg); public void onTextMessage(String msg) { TextMessage txt = new TextMessage(msg); onMessage(txt); } } Isn't this now like an abstract class? Is this effectively a variation of multiple inheritance? 
You could do authbind too, but then you're installing another service which I'm trying to avoid doing.
&gt; which is bad practice from a security perspective It's bad security practice not to run an HTTP proxy server in a DMZ too You are also killing your ability to horizontally scale Tomcat on the same machine.
I guess you could call it a variation of multiple inheritance, but a better term for it is [mixin](http://en.wikipedia.org/wiki/Mixin). Rather than build a hierarchy of class inheritance, you can define behaviours in little chunks, than build you desired final behaviour by combining the right components. [Here's a good guide on how to do it.](http://www.ibm.com/developerworks/java/library/j-scala04298/index.html) Here's my take at it: interface Person { String firstName(); String middleName(); String lastName(); String getInitials() { return wordInitial(firstName()) + "." + wordInitial(middleName()) + "." + wordInitial(lastName()); } String getFormalListing() { return lastName() + ", " + firstName() + " " + wordInitial(middleName()) + "."; } static String wordInitial(String word) { return word.subString(0, 1); } } Sorry if this doesn't actually compile. I just made it up on the fly, but you get the gist.
Uhm to be honest in my 7 years of using java professionally and as a hobby, I have not come across a reason to use arrays. Just a heads up before you spend too much time on that. Also, while I know it's not the focus of your test, the switch is a horrible construction that could easily be done by an if. Or not if you just put the askquit condition into the while condition and have the code execute after the while body.
Finally an article that deals with other features than simply lambda in Java 8.
Instead of askQuit.toLowerCase().equals("yes") you can write askQuit.equalsIgnoreCase("yes")
A `boolean` alone is four bytes (32-bit, just like an `int`), but an array of `booleans` has one byte per element.
If you are in development and even test, I don't see how a port number matters but if you feel like port numbers are annoying then sure. 
Gotcha - thanks for the description! I think this should be a "use with care" feature but nevertheless a reasonable one. I was playing last night and found a use case as well: factory methods!
Does anyone actually use Glassfish in production? I've only ever seen Tomcat and jetty around so far and complete avoidance of the EE stack.
In my day, integers were two bytes and we liked it!
Not related to Jmockit, but try http://spockframework.org/ its amazing. http://spock-framework.readthedocs.org/en/latest/ https://github.com/spockframework/spock edit: added additioanl links.
Second this. Spock does in fact have its own mocking style, but IIRC works with others as well.
I would tend to do / suggest is when getting the user input for the month, subtract one from it right away and convert it into a 0 based index: userChoice = userInput.nextInt() - 1 That is because everywhere you have to use it you must also remember convert / -1 each time. So for example how you have done so retrieving the month string from the array and also in your bounds checking where you check between 1 and 13 not 0 and 12. Doing that straight away means you dont duplicate the conversion each time and is also a little safer because if you or somebody in the future adds something else to say print out or return the month again, they must automatically know / remember to do that conversion otherwise the app may intermittently break. **edit:** The other actual improvement I would do is not write this in the main. I.e. start embracing objects / classes a little more so: public static void main(String[] args) { TestArrays app = new TestArrays(); app.doUserInputLoop(); } The benefit is you with the clean cody stuff I mention in my other reply, you can starting using field variables and methods easier without having to do all static nonsense (you may want to declare some constants like that, avoid static methods) 
Is spock still alive? I've not seen it updated in a very long time now and the last stable release was in 2012.
Looks like you found the iptables hammer, and all of a sudden, the fact that tomcat runs on 8080 looked a lot like a nail...
Create some kind of client-server on your own? Maybe some XMPP server?
Immutableness of everything. Nuke setter methods. DI all the thing. 
Also see http://www.reddit.com/r/java/comments/202fbm/common_interview_question_how_to_find_pairs_that/
Its really hard. JCIP is a good start, but then you need to use that in practice. I got good at concurrent coding by always volunteering to write the icky parts at work. Made a few bugs here and there, but found a lot of bugs in existing concurrent code.
I don't think authbind is a service and it comes loaded on many distros already. I get the hack, but iptables is definitely not the right way to go about this.
We've got a few 3.1.X open source edition boxes running in production, running business critical systems even. And we're rolling out some more Oracle supported boxes as well soon enough. It's a very stable platform in my experience and I don't think it being the reference implementation should really scare people away from it. What is disconcerting is that Oracle has dropped commercial support from 4.X, though we're still moving ahead with a few EE7 applications on it. Nightly builds for GF supporting lambdas really just means we'll be seeing it in a full release as an RI soon, and then likely in other EE servers as well as they follow.
JMockit may be the best thing since sliced bread but we don't use it here because our developers don't have time to learn it. It is one of the steeper learning curves and it seems to stray from conventions used by other mock libs. It also doesn't exactly discourage developers to write static methods (since they can now mock them). For a lot of what we do, that is not ideal.
One thing you will have to keep in mind is that Swing is singlethreaded. It means that components should be updated on Event Dispatch Thread. In your case (constant repainting of JPanel) you should use Swing Timer component for repetitive tasks or SwingWorker for time consuming background tasks and NOT by any chance update your GUI from different thread or doing something really stupid like creating for loop and calling Thread.sleep(). Also, stay away from Cherno's tutorials or even Notch's livestreams.
NOt that it matters for the example, but: [Falsehoods programmers believe about names](http://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/)
Here's a test we put people who want to take developer positions to. I can tell A LOT about the programming skills of the person, looking at the code. DESIGN REQUIREMENTS Implement a generic Worker mechanism that can be used by an application to perform various types of processing. A Worker is an autonomous processing engine that uses its own processing resources (e.g. threads) to do its work. Each Worker should be able to process its own types of Work. Workers should perform their processing in an asynchronous way, NOT delaying in any way the hosting application's threads. Workers should operate in three states, INITIAL, OPERATIONAL and STOPPED as explained below: - INITIAL: State right after Worker instantiation, NOT for processing Work. - OPERATIONAL: State in which, Workers normally accept and process Work. - STOPPED: State indicating possible imminent shutdown, NOT for processing Work. The hosting application must be able to interact with Worker implementations via well defined interfaces. Specifically and at a minimum: - An interface to control the life cycle of a Worker and to submit Work units. - An interface or abstract class as the root of the Work unit hierarchy. The interfaces should support Java Generics, to provide compile-time type safety to the hosting application's developers. The interfaces should be possible to be used in the following ways: - Worker&lt;SomeWork&gt; worker = new SomeWorkWorker&lt;SomeWork&gt;(); - Attempting to submit SomeOtherWork to a Worker&lt;SomeWork&gt; should be reported as a compile-time error. The following state transitions should be supported: &lt;NOT EXISTS&gt; --&gt; INITIAL --&gt; OPERATIONAL &lt;--&gt; STOPPED Workers should use their own threads and thread pools to perform their processing, according to the processing needs of each implementation. The only restrictions imposed regarding threads and thread pools are the following: - When in the INITIAL or STOPPED states, a Worker should NOT have ANY threads alive. - Transitioning into the OPERATIONAL state, a Worker should create and initialize its threads or thread pools. - Transitioning from the OPERATIONAL to the STOPPED state, a Worker should ensure that when the hosting application's thread returns from the transition-triggering method, processing of ALL Work units being actively processed by the Worker's threads HAS FINISHED. Workers should also make use of queueing mechanisms to both be able to accept Work units for processing even when all their processing resources are busy, and not impose any delays to the hosting application's threads. To prevent out-of-memory conditions, Workers should indicate their inability to further queue additional Work units, when their queues already have "many" items, by throwing an appropriate exception to the calling hosting application. IMPLEMENTATION To demonstrate use of the mechanism as well as to prove its correct operation, an example Worker should be implemented to use the TempConvert Web Service (http://www.w3schools.com/webservices/tempconvert.asmx) to convert temperatures between Celcius and Fahrenheit. The temperature as well as the conversion to perform should be parameters of the corresponding Work unit. The Worker should perform no more than 5 concurrent calls to the Web Service, but also should not be limited to one, and it should be able to queue up to 20 Work units. The demostrating program should create an instance of the Worker, submit a few Work units with various combinations of temperatures and conversions (demonstrating normal operation) and then attempt to saturate the queue by rapid submission of many Work units. It should then demonstrate state transitions and exit.
Got any example code?
I wasn't kidding, but I figured the chances of you replying with some files were about the same as my chances of finding a bar of gold on the street next time I leave my apartment. (for the record, I wasn't the downvoter)
If OP wouldn't mind, I'd like to offer a code sample from OP's. His interview question irritates me so I googled his username. OP, After reading your code I get why you'd ask that questions. Also, as a suggestion for the future, don't be a dick. [code here](http://sourceforge.net/apps/trac/jsrtproc/log/)
&gt; in a real-world server environment &gt; The test machine was a MBP i7 Quad Core. I don't know much about servers, isn't 4 cores rather small for a server? Also since when is a MacBookPro a " real-world server environment"? (at least that is what google gives me for MBP i7) &gt; this time executes them on ten concurrent threads to simulate processing ten concurrent requests performed by a server when it’s under pressure Executing 10 concurrent threads doing absolutely no IO and are 100% CPU bound to simulate the same number of server requests is not exactly realistic.
That coding exercise seems pretty onerous and over done. Are you a waterfall organization? Do you generally give your developers such specific requirements for all of their tasks? 
To be fair, that code is 4 years old. Op of the mother-of-all exercises might be a better developer now than he was 4 years ago (but the interview question is still enough to turn off anyone with talent from even considering going there any more)
Totally. I did not mention the age of the code becouse this is so ridiculous. There are many issues with this test. to extend to your other comment, there are so many patterns to be considered here as well as lock-free and parallel programming. I, myself, would walk away. Even if I bootstrap this test to bare minimum it would take time for a developer to think, architect, design, and implement this to solve the problem to OP's satisfaction. Not trying to make an elephant out of this test, but it is the way it is. Not a good test, and it makes OP sounds arrogant. Sorry OP.
The "Santa Clause" problem is a classic. http://www.youtube.com/watch?v=pqO6tKN2lc4
nice one thanks.
coolio. Cheers.
I have an example of a similar scenario with no multithreading, but a little more in-depth, and 2 algorithms of processing the data: https://drive.google.com/file/d/0B5woDA3RXvunbmpWbnhwRmE4VTQ/edit?usp=sharing Usage is in the comments at the top, but input is as such: &gt; [start time] [process id] [service time] [ex_time_1] ... [ex_time_k] &gt; [start time] [process id] [service time] [ex_time_1] ... [ex_time_k] &gt; DONE Most of these are self-explanatory, but service time is the number of cycles required to finish the process, and ex_times are the times in the process' own execution time where a call to I/O is made. Edit: formatting.
Take a problem that is pretty easy to start with, but which * could be sped up if it ran in parallel * requires communication between the parallel processing. code it. I would start with a working singled threaded version and figure out how to make it go faster by using parallel constructs. There are some fancy things in Java 8 which could help. An example of this might be Conway's Game of Life: http://en.wikipedia.org/wiki/Conway's_Game_of_Life I would consider implementation at a couple of different "levels" of abstraction as well: * use "Thread" (with join() etc ) and synchronized. to get the basics. * use ThreadPoolExecutor to manage your threads * use Java 8 Constructs, parallel collections and lambas * use an Actor model such as AKKA: http://akka.io/ This can be powerful since the "messages" can traverse the JVM boundary into another java instance on a different machine. As with many things, you could start directly with the highest level abstraction, but often times it's helpful in using the highest level of abstraction to understand how the lower levels work. 
Yes, this. I've played with a few mocking frameworks and I always seem to come back to Mockito. I've usually found that if we're needing to mock out a static or final method then there's something wrong with our design. Of course this isn't a hard and fast rule, but it's just something I've found. 
The most important thing to do when learning multi-threaded programming isn't how to write multi-threaded programming. As a commentor has already written &gt; Then you just need to learn how to run code in your head simulating a multicontext computer. The most important things to learn are: 1. How to diagram a multi-threaded system. You're going to need a whiteboard. A big one. And a willingness to erase with your hands. And a dismissal of cleanliness allowing you to then use those hands to rub your thinning hair into Einsteinian tufts highlighted in specks of red, blue, black and green. 2. How to test a multi-threaded system. You will not write a perfectly multi-threaded system the first time or the second time. You will also learn how to respond to a testing department that literally pulls the plug and expects it to not error out. 3. How to debug a multi-threaded system. They all fail, it's just a question of whether or not your system is robust enough to handle that failure. How do you deal with leap seconds or with distributed resources run by server admins who aren't going to patch their system or power failures or hard drive crashes or fucking gremlins? 4. How to admit defeat. You're going to fuck up a lot. And by a lot I don't mean "that bug made it to testing, whoops" I mean "Oh Jesus Christ that's been in the system for months. How many logs do we need to parse? oh fuck oh fuck." Then you're going to drink. Embrace it. It's part of the process. 5. How to start over. You've pushed fifteen monkey patches in the past month each of which make it a bit less likely that the shit bird in Toronto will call your boss yelling that the "app did that thing again" and then you turned in your two week notice. You're now a new job that has the same problems but you won't know that walking in. They will regale you with tales of an expertly designed system (that no one can understand) with years of testing effort (that has produced hundreds of unfixed defects) that they're beginning to reimagine (rewrite since the fucker who shit out that code just quit to work on a Web 4.0 startup in the valley). 6. How to write a robust app. You're 10+ years into your career and you've built a few systems, fought a ton of fires, drank your fair share of whatever, and now you've finally settled into the place where you could build a multi-threaded C based system to solve any number of problems in days. 7. How to move on. You then go to the valley like the fucker from point 5. If you can spell Hadoop you'll get a job. Bonus points if you can get real passionate when someone asks you about the differences between Haskell and Erlang. Use phrases like "paradigm shift" and "rapid prototyping." Double bonus points if you forked some bullshit github project written in Clojure and have that on your resume. Seriously though, leave the multi-threaded stuff to the PhDs that Google et al have hired. Make everything single threaded and locked down and then gradually expose the parts of your system that HAVE to go faster. The use case for each is going to be different enough that starting from a multi-threaded paradigm is just going to make your life miserable. Along the way, you'll learn a ton. Have fun....
* [rxtx fork](http://mfizz.com/oss/rxtx-for-java), using JNI * [JavaPureComm](http://www.sparetimelabs.com/purejavacomm/purejavacomm.php), another rxtx clone, which uses JNA * [jssc](https://code.google.com/p/java-simple-serial-connector/) * [seralio](https://serialio.com/support/jspCommAPI.php), which is API compatible with javacomm and rxtx, but is not free 
Compile-time error: java: class Clazz inherits unrelated defaults for foo() from types A and B. See example at http://zeroturnaround.com/rebellabs/java-8-explained-default-methods/
Ah figures it doesn't compile. Thanks 
That isn't a dumb question at all. From what I've read (I haven't gotten around to testing this yet), the compiler will complain if there are multiple default methods with the same signature (unless it has been overriden to resolve the ambiguity). Furthermore, if you implement two interfaces, and one has a default implementation for some method and the other does not, but then you later replace the second interface's .class file with one that does have a default method, the code will still run and behave as it did before. Attempting to recompile with the new interface class file well result in a compiler-time error, however.
That makes logical sense. It's a compile time binding. But there be dragons.
I learned multi threading by writing audio software. One thread for the gui, one thread for audio, and one thread for the simulation that generated the audio.
That definitely sounds dicey 
I looked at it using a java decompiler and it's obfuscated. You might want to ask the guys over at /r/reverseengineering It's definitely a virus
You'd be surprised. A lot of computers run in systems that use rs232. Not everything is, or necessarily should!, need to move to ip or usb.
Really? In what sort of application would USB or a network not be appropriate?
It's not about appropriateness. It's about older systems and software still using the same protocols because they work, they're simple.
Embedded devices - plain old serial is much easier to use in electronics.
&gt; How to move on. You then go to the valley like the fucker from point 5. If you can spell Hadoop you'll get a job. Bonus points if you can get real passionate when someone asks you about the differences between Haskell and Erlang. Use phrases like "paradigm shift" and "rapid prototyping." Double bonus points if you forked some bullshit github project written in Clojure and have that on your resume. That's actually not too far off.
We call this "the nuclear option."
1. Report the incident to where you made your purchase 2. Report it to one or more of Symantec, Kaspersky, etc. 3. Ensure that it is completely removed from your computer. If you can't, reformat your HDD/SSD and clean install your OS.
This is separate question why and when to use static methods at all. I personally do not have very good rule of thumb for this. In general if method does not depend on object instance internal state then it can be made static and now you can move it to interface if you think it fits there. 
The point is source compatibility, not binary compatibility. I think binary forward compatibility is usually broken in a major Java release.
I tend to push those requirements out of the container i.e. into the front proxy so we always have an N+1 quantity of containers with nginx in front and deploy config changes incrementally one container at a time. Also if you bork the config, you don't take anything down as you can ping the first node to see if it's operational. We also recycle the containers daily to kill off any leaked heap using this method too. However a perfectly good use case!
Not sure what platform you're on but if it's a Unix derivative can't you open a stream to the serial tty device using FileOutputStream/FileInputStream? That wont require JNI and has a guaranteed equal abstraction between RS232/bluetooth/USB serial devices managed by the kernel. You can externalise your port config as well into tty config and just concentrate on the comms in the app.
I agrre more with the opinion like in http://www.infoq.com/news/2013/03/java-8-permgen-metaspace , which I would summarize it (and take more care to focus in the OSGi context), there are changes, but for a rpoduction eviroment, it would be more like a replace from PermGen name to Metaspace. The point which people clamis that it will not have any more "PermGen out of error" =is due the default configuration (which is not recommended) that will dynamically memory allocation (which could run out the memory of the whole server and then thrown the error if the java code is not well craft, in this case would be the OSGi container, like felix). I would also remember that even PermGen was (or is for those who still use it) GCed when needed. I think you may also find some interesting things also in this link http://java.dzone.com/articles/java-8-permgen-metaspace
I've seen lots of interfaces that were created only for mocking/testing. The design can sometimes be simpler with a more powerful mocking framework. Static methods are no longer evil in all cases.
Well, at the most basic level the JVM is only a reference implementation, anyone could program their own VM. (I believe there are several other implementations already.) 
I watched it a few months ago, so my memory might be somewhat wrong: Basically, he says that their processes were shitty and that lead to Scala being pretty much shit under the hood. The codebase is very difficult to work on, both for fixing bugs and for new features. There is now no way to get themselves out of the hole they dug themselves into by making lots of bad decisions on the way - at least not without rewriting everything. As a result, Scala will not improve at a high rate anymore.
Sounds like any old project description to me...
So the ability to mock constructors, final, and static methods has a certain "gee whiz" factor, I don't see the critical need. Perhaps if you have to write unit tests for legacy code where you only have a JAR... But any new code should avoid these kinds of designs unless absolutely necessary.
I've never been a fan of expectation-driven testing (as opposed to explicit verification after an action has occurred). For those who are fans of expectations, what are the draws of it?
&gt; erasure Remind me again, how come this issue is still unsolved? Why can't HotSpot keep type information where code flow switching depends on it? How come a List&lt;Integer&gt; isn't compiled into a specialized (and possibly transparently-unboxing) instance right away, so the JIT wouldn't even have to think about it (and fiddle with the sanity guards)?
the arithmetic mean is what you did with your findaverage. https://en.wikipedia.org/wiki/Average
This is sounding more and more like a bad idea to me. A programming language architecture is to support readability and concept with regards to separation of concerns. Just because you **can** do something is not cause to do it. Java is particularly good at providing architectural clues with regards to single responsibility. The proposal and eventual addition of this change will make more advanced Java programmers lives slightly easier with regards to particular interface and class pairings now expressible as a single file, with the repercussions of allowing beginning and intermediate programmers the ability to write some incredibly horrible code. Now interfaces are no longer contractual, they have implementation in them, and you cannot control how someone will interpret what implementations are appropriate. I really would like to understand more of what leobm was suggesting for enums, without a concrete example (not "I could do this" but "I did this see how that much easier to program?"). Without a good example I'm afraid this was just a lazy and poorly thought out change that will make Java even more complicated for people to learn, while empowering experts to be lazy.
The problem originates when generics was first introduced to the JDK 5. Java has a long history of being backwards compatible, but by introducing generics with reifiable types that compatibility could be broken. For instance List&lt;Integer&gt; would be a different class than List&lt;String&gt; and of course a different class than List&lt;Object&gt;. This means that all lines of code out there would stop working with the new generic classes. When the designers of .Net had to to deal with this problem, they decided to add reifiable types and define a new set of classes, and a new collections framework. That's why in .Net there is class duplication. But for them IList&lt;A&gt; is not same class as IList&lt;B&gt; or the same as the old IList. (i.e. System.Collections vs System.Collections.Generic). But the Java designers decided to make the language backwards compatible, but discarding the generics information at compile time. So, the compiler uses the code information to check everything, but then discards most of the generic type information. So, in Java, List is the same class of List&lt;Integer&gt; and List&lt;String&gt; and List&lt;Object&gt;, but makes the generic classes backward compatible but paying a really hight price: type erasure. Why is this still unsolved is a matter of time and resources and not a lack of will, I daresay.
I'm in the same boat... I'm coming from a Swing background. I think I understand the concept/use of properties... and I like them. But I have a whole domain model made up of pojos... I'm trying to figure out the best way to use them in JavaFX with the property binding support... 
Ok thanks. That makes sense. I've seen the single letter convention before like &lt;T&gt; but the fact they were using a full word like Element threw me off. I was reading Element as a built in type. edit* built in not primitive
Came here to say this. And even if you have to deal with a legacy JAR or other code outside your control, you can (generally should) wrap it in your own code. Nothing against the library, just don't see a big need for it.
Use "serproxy" then Sockets. this is easy peasey. http://freecode.com/projects/serproxy make sure you are aware that the socket is exposed to the network. 
I'ld just make them properties and bind them. The JVM will do all necessary housekeeping for you, why not leverage that? 
First, look at the source code for the FXCollections.observableXxx methods. You'll see they basically just use a Delegate pattern to wrap a List/Map/Set. Because of this, there's little reason to not just use the List/Map/Set, and wrapping them in an ObservableXxx class when passing them to a JavaFX component. Whether or not your models are regular POJO's or also include Property's is another question, and has a bit to do with how important separating the concerns of your application is. Things to consider: * Property's can't be serialized and must be marked transient, which may affect whether or not you'd want to mix them in a POJO * The risk of needing to migrate to another UI (swing, web, android, etc) where having Property's in your POJO's will pollute your other UI environments If those make a difference, then separate your code into POJO's, and extend or wrap them in another class that exposes your Property's. I recently wrote a somewhat small application where I just baked the Property's into my POJO's. Creating subclasses/wrappers later should be trivial, and I didn't want to increase the complexity of my codebase with separate classes. 
&gt; Why is this still unsolved is a matter of time and resources and not a lack of will, I daresay. In the beginning it really was a matter of time and resources as well. One of the designers of the generic types in Java, Neil Gafter who later went on to work for Microsoft C#'s team, had an interview on InfoQ a while back and explained this was a primary reason; http://infoq.com/articles/neal-gafter-on-java 
True, and that's of course the entire idea of the JVM. Originally Sun only had a JVM for Solaris out, not even one for Windows and Linux, never mind OS X. But without doubt the work Sun and Oracle poured in their JVM implementation is incredible and will be hard to duplicate and sustain by other parties. 
Try out play framework, it's built for exactly this sort of thing. It scales very well and is completely stateless so you can just launch new instances behind some sort of load balancer and it will just work. For a massively scalable DB you can try Cassandra (it has a pretty nice async Java driver) but I don't think you need to switch from mysql/postgres until you have at least thousands of concurrent users, and of course it also strongly depends on your use case. For your existing use case I'd just use amazon for that, probably switch to a vps once my userbase stabilized. 
Hard to say, with these things it all really comes down to your usage pattern. For a web app that runs a DB instance + Tomcat with 512MB memory on Jelastic, you'd pay around 15$ / month.
Honestly, I'm starting to think lambdas in Java just aren't worth it. I wish they'd focused on something else... Maybe bringing generic value type type parameters in to the language. I use c# at home and java at work. Sure, java is a little behind but sometimes I appreciate its simplicity. I'm not sure that racing to "keep up" with c# and others all the time is so great. 
I'd put in a vote for cloudbees. Again, your pricing may vary based on usage etc. They have containers for Play apps as well. 
And it's *open source*, so nobody would have to reinvent the wheel anyway.
Of course there are other methods that give better results, the field of image and video compression is very mature. Image compression is broken up into two main categories. https://en.wikipedia.org/wiki/Lossless_compression https://en.wikipedia.org/wiki/Lossy_compression 
Thanks for the reply. The truth is that such leaks do exist in many apps, even popular production-grade open source apps. Here are some possible [class loader leaks in Tomcat](http://wiki.apache.org/tomcat/MemoryLeakProtection) that are observed in many web apps. I have just started working on an Adobe CQ5 project, and when we start it in debug mode (e.g `-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=...`), redeploys quickly lead to perm gen OOM errors. However when it is started in the regular non-debug mode, it takes much longer for perm gen OOMs to happen. I think when and if we switch to Java 8 in the future, we could expect OOMs to occur less in development thanks to how Metaspace works.
What container are you using? Have you tuned MySQL's memory usage? I'm guessing your servlets are stateful, in that they parse out session information. I admit to not using GWT but are you maybe able to redo the client side to use an API based on RESTful services? With all that said, if you're using AWS you can set up autoscaling provided your app is either load-balancer aware (sticky IP maybe?) or stateless. http://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-autoscaling.html Obviously you want to proactive rather than reactive. If you can afford it, though, I would suggest splitting your application and database onto separate boxes. What's your app? :)
&gt; For instance List&lt;Integer&gt; would be a different class than List&lt;String&gt; and of course a different class than List&lt;Object&gt;. How would it break compatibility? List&lt;X&gt; is just a subclass of List (which is semantically equivalent to List&lt;Object&gt;, right?), instanceof is still True. (Yes, I know, famous last sentences. Maybe a lot of Java programs were using Reflection for exact type checking?) &gt; This means that all lines of code out there would stop working with the new generic classes. How? Hypothetically if JDK 5 would have reified types, then any new code interacting with old code would have to just box everything back to Object, right? But that wouldn't cause much of a problem, there was nothing else anyway before. So new collections library was a must anyway. And adding proper support for the new features to the standard library.
No app yet, still in development, but planning ahead. Thanks a lot for the info on how to make the servlets stateless, that's really helpful. The only thing special about GWT is that the most convenient way to use it is to have servlets in your backend. It does also support json etc but they're not as easy to use. I am using sessions only for authentication. E.g, a user is first authenticated via a cookie, and then a session variable is set for faster auth in future. Then in future requests, it first checks the session variable, and if its not present, then the cookie. If neither are present, then it doesn't process the request. Would that count as stateful or stateless? Edit: As for the container, right now I'm using tomcat, but I'm open to any free container.
&gt;How would it break compatibility? List&lt;X&gt; is just a subclass of List which is semantically equivalent to List&lt;Object&gt;, right?), instanceof is still True. Well, there are two possible scenarios. In one scenario there will no longer be raw List, only a generic List&lt;T&gt;. In another scenario, we would do like in .Net and we would have two sets of collections. We could have java.util.List and a java.util.generic.List&lt;T&gt;. Assuming this would work like in C#, every declaration that you make of a given generic type may trigger a class explosion. That is List&lt;Object&gt; would be one class (i.e. java.util.generic.List$Object) and List&lt;String&gt; would another one (i.e. java.util.generic.List$String), so on. You cannot tell that an instance of List&lt;String&gt; is a subtype of List&lt;Object&gt;. As matter of fact, as per subtyping rules in Java today, you can't do that either, if you could you could commit heap pollution. By your premise, I could do this: List&lt;String&gt; names = asList("Yoda","Luke"); List&lt;Object&gt; objects = names; names.add(Integer.valueOf(2)); //heap pollution As you can see just because String is a subtype of Object, you cannot say that a List&lt;String&gt; is a subtype of List&lt;Object&gt;. Neither can you do this in C#. For instance, this prints: False, True to the console IList&lt;StringBuilder&gt; two = new List&lt;StringBuilder&gt;(); Console.WriteLine (two is IList&lt;Object&gt;); //False Console.WriteLine (two is IList&lt;StringBuilder&gt;); //True &gt;How? Hypothetically if JDK 5 would have reified types, then any new code interacting with old code would have to just box everything back to Object, right? Then again, if an old library was expecting to receive a java.util.List as argument, you would not be able to pass a java.util.generic.List&lt;T&gt; as argument. And the same could be said for many, many other generic classes, not just collections (i.e. Comparator, Comprable, Callable, Futre, etc, etc, etc). So they basically would have created a whole new API that is incompatible with the previous one, because all these new generic classes have different binary representations. 
A few things I can see * use a for loop when doing many of the same print actions * you can put \n in your println to print a newline instead of an extra call to println * you have an Expo object that we can't see the definition of, it appears to be a clone of util.Scanner so you might want to look into that
I have used gwt with play. Not sure why you think there is a conflict.
I like the article. I rarely use eclipse any more, but if I do I'll be sure yo reference your article. 
My response was satire mixed with hyperbole mixed with every other comment I read in eternal September threads like this. If you took it as a serious response, or if OP did, I guess my hyperbole wasn't hyperbolic enough. I had fun writing it and there's a modicum of truth to what I wrote but I'm not bitter. I love software and when I love something I can see it for its inherent beauty and its myriad flaws, most of which stem from fallible people just like me.
I work/live in Chicago. I have a chip on my shoulder against the Valley people. I respect that they make bank selling BS companies to non-bs companies but it's an incestuous pool of self-righteous half-wits who talk about coding languages like hipsters discussing some band that they just heard at SXSW.
There's no conflict, but gwt-rpc serialization would be a pain with Play. Am I wrong?
Don't use GWT-RPC since Play isn't servlet based, use JSON/XML based communication.
yeah, that's a pita. I'd rather use servlets. GWT-RPC servlets are stateless, right?
 new YourThread().start();
Try using the debugger to step through your program 
I don't understand why my rectangle.area method works but the rectangle.getWidth and rectangle.getLength doesn't. They're accessing the same rectangle. :/
Have you used the debugger and placed a break point at the method that isn't working properly?
In my csci lab, we wrote a similar code and I was referencing the code I wrote then, which was able to return the value without putting parameters in there. The way I call it is: //make the rectangle RectangleCalculatorCEH rectangle = new RectangleCalculatorCEH(length, width); //access its sides System.out.println("Your rectangle has a width "+rectangle.getWidth()+" and length "+rectangle.getLength()+"."); //use those sides to calculate the perimeter System.out.println("Your rectangle's perimeter is: " + rectangle.perimeter(length, width)); I'm going to go edit my original post real quick with a link to the full code.
What is "the debugger"? 
EDIT: I just saw your reply down there. I'm not familiar with this Expo class. Is it some standard teaching tool I'm not aware of? And I'm also curious as to why you're calling on a user-created subordinate class (I'm assuming as I can't find it in Oracle's Java docs) to get user input rather than just using a Scanner object from the standard Java library. You also repeat several printlns that could be written with a loop. Finally, you can print a new line by using \n. Example: &gt;System.out.println("\nWhat is your 1st Nine Weeks Grade?");
If you're interested in a quick lesson: Scanner is what you want to use. It's a basic text scanner in the standard Java library. To use it, you create an **instance** of the Scanner **class** using the following method: &gt;Scanner^1 scan^2 = new Scanner(System.in^3 ); Breaking down this declaration into its parts: 1. This is the class you're creating an instance from. Since you want to create an instance of a Scanner class, you specify that it's the Scanner class you want. 2. This is the name of the instance you're creating. This can be anything. Common names used for Scanner instances are scan, keyboard, and input. 3. This is called a **parameter**, and basically tells the computer to take system input (aka the keyboard) as the input required for the Scanner class to do it's job. To use it in your code, it'd look something like this: public static void main(String[] args) { int NineWeeksOne = 0; int NineWeeksTwo = 0; Scanner scan = new Scanner(System.in); System.out.print("What is your 1st Nine Weeks Grade? --&gt; "); NineWeeksOne = scan.nextInt(); System.out.print("What is your 2nd Nine Weeks Grade? --&gt; ") NineWeeksTwo = scan.nextInt(); } For more, you can read [here](http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html). I should note that while Java has its pros and cons, my favorite thing about Java is the documentation. Learn to use Oracle's documentation and you will love it. It essentially lists every class in the standard Java language, what you can do with them, how to implement those methods, etc. Finally, something else I noticed: Your capitalization of your variables don't follow standard practice. It's not incorrect, but it's done in a way most people don't like. For future reference: * Variables are usually done with camel case or with underscores separating words within variable names. Ex: fooBar or foo_bar * Classes are capitalized with every word. Ex: FooBar * Constants are all upper case. Ex: FOOBAR
You haven't initialized your instance variables with values in your constructor 
&gt; racing What *exactly* do you mean by "racing" :-)
*Try out play framework, it's build for exactly this sort of thing. It scales very well and is completely stateless* So is a servlet running a JAX-RS service. In the previous company I worked for, some services were written in Play, and it was a drag really: - There are API changes between minor versions, e.g. 2.0 -&gt; 2.1. - Play using Java is really subpar compared to Play using Scala. - It's hard to just expose a REST API without getting everything including the kitchen sink. We switched those services to JAX-RS, which is a standardized, stable API, with multiple good implementations (Jersey, RestEasy, etc.).
&gt; So new collections library was a must anyway Well, now we have Java 8 and with Java 8, we have the Streams API, which was duplicated 3 times into primitive streams, which are all not ready for reified generics. So, should we ever get reified generics (and value types), get ready for even more JDK collections and streams types...
I need to serialize my model, so I think it is best to then use POJO's from my domain model and then to wrap them as necessary. Thanks for the advice!
Like you I agree that trying to keep the language compatible is hampering proper evolution. We're just making the mess bigger and bigger every time. I'd rather see a Java 2.0 even if that implies a slow migration. But I guess, like mine there must be hundreds of opinions saying otherwise.
I have done a ton of searches on JavaFX, and even though there is a lot of information on the subject, almost none of the sources describe how your domain model should interact with your JavaFX UI. 
I guess, in a perfect world they would have solved reification and value types first and then lambdas, streams and all the rest. But that would have probably meant no lambdas until 2017/2018. Maybe they thought they were risking the language if they made us wait so much. I don't know, I'm just thinking out loud here.
&gt; But I guess, like mine there must be hundreds of opinions saying otherwise. I think there are also a couple of killer-SLAs with large companies (e.g. IBM, SAP) that purchased commercial support for the language from Sun/Oracle, which will bind the language maintainers forever to the status quo. At least, that's one reason why the JVM hardly ever evolves (unfortunately, I don't have any sources).
Not necessarily, but to understand the workings of such a huge body of utterly complex code may take a long time or may not fully happy. People always assume that if a company dumps a huge blob of source creatures will jump out of the woodworks and immediately start working on it. But unless you can get at least a few of the original developers on board this not always happen. Sure, people may thinker with it a bit. Try to compile it. Make some change here and there, but real fast paced sustained development is totally different. I'm a huge fan of open source and contributed, but I'm realistic enough to know that these things cannot really be sustained by a guy working from his basement after working hours. People still have this romantic vision that Linux is developed like that (100.000 guys each working a few hours a day), but nothing could be further from the truth these days and large chunks of the Linux kernal come from commercial companies. One thing that could really save the JVM in that case is if Typesafe picks up the JVM development after they have hypothetically killed Java and gets funding to continue its development. 
I'm relatively new to Eclipse ( slightly less than a year of usage ). One thing I noticed is that while you can adjust a lot of preferences, you can't take those preferences with you if you get a new installation. I can understand your motivation. When I first started with programming I would spend HOURS tweaking EMACS. I also made and imported a Visual Slickedit theme for Eclipse, to ease the transition, as I used that IDE for decades and my subconscious is wired to those text colors. After years of being an obsessive customizer, I've come to see the value in changing/adapting to the way things are out of the box. One of the reasons I moved to Eclipse is that it is a defacto standard. Learning it, I learn something I can apply to different places I might work. I will have an easier time getting help and giving help. Many Java related tutorials are written in Eclipse. Learning to do things in a new way also helps your brain plasticity. Your article was well written, no need to be self effacing and apologetic. That can hurt you in the IT world. The people who blow their own horns tend to get the better jobs and salaries. Have a good weekend. 
IntelliJ IDEA community edition is free and has the same autocomplete as the ultimate version. I recommend checking it out; everything about IDEA just oozes polish.
Wow, thank you for mentioning this. I've never heard of it but it's definitely going to be useful for me!
I just run things in the command prompt with the JDK and debug things myself. Like I said it's my first programming class so I think my teacher wants us to learn all the basics first, and how to analyze your own code. In my case it's a mistake due to lack of understanding rather than syntax or anything. Thank you for your help! I am taking programming not because it's required or my major/minor, I just want to learn because I think it's an important tool (and will be more important in the future). I genuinely want to learn this, not get the homework done. Thank you very much for your help!
Thank you, this is what I was looking for! I mentioned in another comment, this class is not required for me at all--I'm just really curious and legitimately want to learn programming. Cannot thank you enough for this in-depth explanation. :) 
While I'm sure your opinion is valid to yourself, there are many people who enjoy these ide's and this is a user who produced something to help people feel more comfortable in their development environment and asking for opinions as to improve it and the only constructive thing you have to say I don't like the thing you're talking about so no one should.
You can also export and import Eclipse preferences.
Nice article, btw, be sure to link to the permalink instead of the homepage, http://www.jackyliang.com/jackybegincoding/2014/4/5/make-eclipse-work-more-like-visual-studio Cheers and keep writing!
Wait, I just noticed the two main methods, sorry. Why are you doing this in two programs? As far as I know, you can't have two separate programs access the same window. 
Many USB devices actually emulate a serial port and are accessed in the same way, for example devices using FTDI or Prolific chips. Serial communication does not necessarily mean that it goes through a DE9 connector.
very nice, thanks!
HungryCritter does not have a 'package' declaration at the top, so please tell me: What directory is it in as compared with the other classes? The import statement is attempting to import info.gridworld.actor.HungryCritter which means that HungryCritter.java should probably be in $SRC_DIR/info/gridworld/actor, and it should state 'package info.gridworld.actor;' at the top. 
I like
Yeah basically I'm going to dedicate the next year to learning code and even though it's hard to stay motivated through making programs about banking lol (what my teacher makes us do) I'm going to try and make things I actually care about to learn in my free time.
 public static void main(String[] args) { //Fall Semester Grade Vars int nineWeeksOne = 0; int nineWeeksTwo = 0; int fallExam = 0; //Create Scanner Class Instance Scanner scan = new Scanner(System.in); //Get Fall Semester Grades System.out.println("What is your 1st Nine Weeks Grade?"); nineWeeksOne = scan.nextInt(); System.out.println("\nWhat is your 2nd Nine Weeks Grade?"); nineWeeksTwo = scan.nextInt(); System.out.println("\nWhat is your 3rd Nine Weeks Grade?"); fallExam = scan.nextInt(); //Calculate Fall Grades double fallFinalGrades = Math.round((nineWeeksOne * 3 + nineWeeksTwo * 3 + fallExam) / 7); int solveOne = (int)(fallFinalGrades); System.out.println("Fall Semester Grade is: " + solveOne); //Final Grade Goals Output and Calculation int finalGGradeOne = 70; int springGSemesterOne = 0; System.out.println("Final Goal Grade Spring Semester Grade Needed"); System.out.println("---------------- ----------------------------"); for (int i = 0; i &lt; 4; i++) { springGSemesterOne = finalGGradeOne * 2 - solveOne; System.out.println("\n " + finalGGradeOne + " " + springGSemesterOne); finalGGradeOne = finalGGradeOne + 10; } } I did the first two parts of your code, getting + calculating fall grades and displaying the grade goals. Some things to note: * I initiated a Scanner class instance named scan to get keyboard input. "nineWeeksOne = scan.nextInt();" tells the computer to take the Scanner instance named scan that I created, prompt the user to input something using the keyboard, and store the resulting int into the variable nineWeeksOne. * I kept your variable names as is, but carpitalized them according to standard convention. * Instead of printing out empty lines, I added "\n" to lines that I wanted an empty space before. * I condensed the calculations for the fall semester grades. The intermediate step of creating solveAlmostOne was not necessary, and simply wastes system memory for a variable that's not needed. * Your method of calculating spring semester grade goals and outputting the results can be condensed into a loop. Look at the calculations. Each time, you're multiplying the finalGGrade# by two, subtracting solveOne from it, printing out both finalGGrade# and the result, then adding ten to the next finalGGrade#. My loop does the same thing but in less lines of code and in a less confusing manner. * The for() loop is told to create a counter int variable named i, set i = 0, add one to i everytime the loop is run (i++), and to only run the loop so long as i &lt; 4. This makes the loop run exactly four times, as you calculated and printed out four goals in your original code. * Outside the for loop, I initiated the variables we'd need to use: finalGGradeOne and springGSemesterOne. Initiating these inside the loop will cause the program to re-initialize the variables with each iteration of the loop, wasting system resources. * Inside the loop, I calculate springGSemesterOne according to your formula, print out the results as you did, then added ten more to the value of finalGGradeOne as in your original code, you added 10 with each iteration to finalGGrade#. * While I kept your variable names as is, you should rename a lot of your variables. Your variable names should tell another reader what the variable contains at first glance. For example, I still am not sure what solveOne is, and it took me a while to figure out what the first "G" in finalGGrade# stood for. Suggestion variable names for both would be fallFinalGrade and courseGradeGoal. * Your whitespace for your grade goal prints are off. The final alignment for the Spring semester goals end up far off to the right. * I didn't do the Spring semester portion to give you a chance to learn how to apply Scanner to your code as well. Let me know if you need anything else!
Odd. Let's take a step back: Is HungryCritter being compiled correctly, with the .class file sitting next to the other class files from that package? Check the date stamp. Is it being updated properly when you change the source?
Yup, it's compiling correctly. Just FYI, I have all the .java files in one folder, along with the BlueJ project file, and .ctext and .class files to accompany every .java file.
You could always think of your own personal projects to apply both weekly class and semester-long course knowledge. For example, if you're in an intro course, something you should be able to do by the end of the semester is write a program that goes on the front page of Reddit, pulls the first 25 links, then save it to a .txt file showing the headlines and the URLs of those links. You could try to write the (incomplete) code for this every week, adding onto it as you learn the relevant necessary information every week. For what it's worth, I used to *hate* programming too. I took an intro course back in my Jr year of high school at the local community college, and all we made were basic things for accounting. It reinforces concepts but it's boring as hell. It wasn't until halfway through my first degree as a bio major did I realize programming can be used for *much* more fun things. It was then that I seriously fell in love with programming.
Is there by any chance a .jar file with the original classes on your CLASSPATH?
I prefer Netbeans to Eclipse. I've used both on the job. Netbeans tends to "just work" better than Eclipse, although after Kepler Eclipse's quality seems to have improved. Also, Netbeans has built-in SVN support, built-in JDBC support, and the Netbeans platform lets you build (desktop) applications in a snap, although you're a web guy and you're probably more interested in the web features Netbeans has (I'm an application guy, so I don't touch them much). Have a link: http://www.luv2code.com/2011/11/12/netbeans-setting-up-a-web-project-with-smartgwt/
I have a gridworld.jar file in my source directory that only contains Actor, Bug, Flower, and Rock. Is that what you mean? EDIT: It contains .class files, not .java files.
Yup, that's what I mean. That's likely to be the source of your trouble. According to your import statements: import info.gridworld.actor.Bug; import info.gridworld.actor.Rock; import info.gridworld.actor.HungryCritter; import info.gridworld.actor.Flower; Bug, Rock and Flower are all in the same package as your new HungryCritter. The Java classloader works like this: When you attempt to load a class from a package, it begins looking through your classpath until it finds the package/class it needs. In your case, it's very likely loading Bug, Rock and Flower from that .jar file. When it gets to HungryCritter, though, it says to itself "self, I know where to find class files for info.gridworld.actor. It's sitting in gridworld.jar!" Then it fails, and the stupid thing doesn't look anywhere else. If everything you need is already present in files outside of gridworld.jar, your best solution is to get it out of there. Remove references to it, maybe even delete the file entirely (or at least move it outside of your project). This all assumes that gridworld.jar physically contains the .class files in question and that you have the .java files you need to recreate those .class files in your development environment. If not, you may need to refactor HungryCritter to a new package.
Wow. ~~FUCKING AMAZING~~ Nice edit, didn't think the code could get that condensed. I'll try making better variable names, when i wrote this code we had not learned about self commenting variable. Only how to comment, believe it or not my code what perhaps the most understandable compared to the others lol. Only thing I don't get is why when i try to run the code I get an error (error: cannot find symbol) on this line... Scanner scan = new Scanner(System.in); 
So, I tried moving the .jar file to a different directory, tried adding HungryCritter.class to the .jar file, neither worked. And there aren't any package statements in any of the classes I'm using.
Ah, I know the problem. You need to add as the very first line of your code (way above your public class statement) "import java.util.Scanner;" I completely forgot to tell you that. So some basics: * While Java has a lot of tools in the standard language library, you'll often have to import some of these tools manually. This is so the program doesn't waste resources. Imagine how much memory you'll waste if Java just imported about a thousand tools into the program when you only would use two. * The import statement tells Java to import Scanner from the util (utilities) library for use in the program. * For the Java documentation: http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html it will always tell you what import statement you'll need to use the class up at the top. Your program should now start off like this: import java.util.Scanner; public class GradeCalc { public static void main(String[] args) { ... Your Program Code... } }
Man, this is a tricky one. Something is not doing what you expect, but just what is turning out to be difficult to find, especially remotely. I think you may need to prove that what you think you're compiling and executing is really what you are. Maybe stop trying to use HungryCritter for a bit, and make sure that if you add System.out.println statements to Critter they actually show up in your console. Sometimes we aren't running what we think. If changes you make to Critter show up correctly in the code you execute, then a HungryCritter sitting alongside that extends Critter should really be a simple thing to get up and running.
Thanks, I learned a lot today!
Yeah I love programming even if my programs right now are pretty mediocre but the problem solving is like an addicting puzzle. I really appreciate the help!
Glad to hear it. Hope your code works now and let me know if you have any other questions!
This really depends a LOT on the application, and what your bottlenecks would be. It could be that the web server is just overloaded with processing. In which case, you might be able to throw additional servers at it (behind a load balancer). Or you might be able to cache like crazy and that would be enough. Or, it could be the db that's the choke point. In which case, there are several options with MySql to scale it out. But, most likely, it will be a bit of both. In which case you have to do a bit of both. However, for any serious scale, you really have to design it in. If this is a serious possibility (and honestly, it probably isn't) you need to do a lot of reading on scalability. There are a lot of subtle things that can affect it, and lots of things you can do to help. But, if it's only a slight possibility, maybe consider a hosted PAAS, such as Google AppEngine. They can handle a lot of the scale issues for you without you having to think about it. But, if you get *really* big, the PAAS can only get you so far - you will need to address the design. HTH.
But, it isn't that expensive if you buy it yourself. $200 isn't really that much to drop on a professional tool. That said, netbeans is still pretty great. I switch back to it for when I have any C++ to do. 
Nice tutorial. Kind of out of context, but shouldn't, by convention, the Thread "TimerThread" be "timerThread"? Maybe I'm wrong. 
I've used both netbeans and eclipse, I personally prefer eclipse, but at the end of the day it is just personal preference. Some things are harder in netbeans and easier in eclipse and the other way around as well. My suggestion is to just give them a try and see which you like. 
Also, Ctrl+Shift+F in Eclipse or Ctrl+Alt+L in IntelliJ IDEA will reformat your code, making it easier to read and understand. On a side note, if you're trying to make a while-loop that is guaranteed to execute at least once: String userInput="y"; while(userInput.equalsIgnoreCase("y")){ you can simply use a do-while instead: do { // code } while(condition) Either way works, but since the do-while is meant for specifically this purpose anyway, it makes sense to use it
The word "efficient" should never be used to describe anything related to Eclipse.
You can program in a verfication-driven style with JMockit, too. I prefer the expectation-driven style, because it is more strict and you can do the setup and verification in a single step.
I've seen a lot of code that was not as good as possible because the mocking framework wouldn't be capable of handling it. Most methods should be `final` (like the default in C#), for example. Or many projects are full of useless interfaces that exists only because of poor mocking tools.
I'm not bothered about the gold but I know quite a bit about COM and implemented a solution using JACOB a few years ago so if you have any specific questions about either of those just shout. It seems like it should be pretty easy to get something up and running using JACOB, although it looks like you have to register to download the docs, so I haven't bothered.
Openshift is free to start. "All plans include 3 small gears for free. Each small gear includes 512MB of memory and 1GB of disk space." You can create a scalable application with those 3 gears for free. Pricing/Features: https://www.openshift.com/products/pricing It supports Tomcat, which you are currently using. Or you can step up to JBoss AS 7 or EAP 6 if you want a full EE container.
If those were my only choices, I'd certainly start with NetBeans with the [gwt4nb](http://plugins.netbeans.org/plugin/44509/gwt4nb) plugin, since I prefer NB far and away over Eclipse. That said, Exlipse might still be a better choice for a heavy gwt app -- the official google gwt tools for Eclipse might have enough extra functionality specific to gwt to make it worthwhile. Frankly, if you're not feeling pain points with your Eclipse setup, it's not likely worth switching. As much as I personally don't like Eclipse, it really does usually get the job done in most situations, given a bit of tuning. 
Ah, thank you. I'll use this.
Thanks for taking a look, r1ch. Here is some of the code that I tried to get up and running. This is just supposed to scan the USB ports for and generate... well, here is the text from the manual: "•[in] BSTR serialNumber, • [out] LONG* hDevice" import com.jacob.com.Variant; import com.jacob.com.Dispatch; // The object where I want to read values from the Juno public class JunoReader { public JunoReader() { // This finds the COM object location: Dispatch oOphirLink = new Dispatch("clsid:{B180613C-E514-4739-AADC-CAD4493910D7}"); // I am not sure how the following code works, but I think it produces a // pointer location that I don't know how to read. SafeArray sa = new SafeArray(Variant.VariantString, 1); sa.setString(0, ""); // This is necessary to avoid an error Dispatch.call(oOphirLink,"ScanUSB", sa); // I am trying to look for the Juno... String[] saArray = sa.toStringArray(); println("SafeArray: ", saArray.toString()); } } I can post the output of the code tomorrow, but it's a hex number of some kind.
Don't trail your comments, don't joke in your comments, don't put in superfluous *****'s in your comments, don't comment things that any programmer would understand from the context, don't use cultural references in your comments, use multiline comments for comments which span multiple lines (or better yet, javadoc), nobody cares who you are or what you used to create the file or when you did it and if anyone does care they'll see it in version control, format things to make them readable.
It looks like you've actually got it talking to the DLL via COM there. I've pulled down the docs now and, unless I'm looking at the wrong thing, it seems that you might have got a bit mixed up there - the description that you posted actually applies to OpenUSBDevice rather than ScanUSB. From a quick look through I'd think you'd use ScanUSB to find a list of connected device serial numbers then call OpenUSBDevice with a serial number to get a handle to one of them which can be passed to the other functions to actually talk to the device. Does that make sense?
Just want to add one more thing: Avoid fancy formatting - it usually comes out wrong in javadoc and will certainly not stand the test of time &amp; maintenance. Also drop all comments that state what things *are* - one can usually infer that from the code. Instead write comments to convey the *why* behind your design. For example, I'd like to see a comment on why you'd choose to make a utility class instantiable. Also, while a main() method is a good starting point, for a utility class you will want to have a good set of unit tests.
Yeah, I can try this a few more times. The link you sent looks good, but the previous attempts that I have made to get "Hello World" out of JNI have ended in link errors or failures otherwise. The incredibly aggravating part of it is that I have used dependency walker to troubleshoot a dll, and everything seems to check out in dependency walker. That is, when I don't have a terrible time getting java to find the library. Then I try to get information out of the .dll supplied by the vendor using dependency walker, but I can't find the calls in outlined in the manual. The library is created in WinDriver by Jungo and I can find many calls in one of the .dlls, but nothing that is mentioned in the manual. I am thinking that I may try to set up a bridge to C# so that I can make the calls in the C# demo code (which works, I've tested it in Visual Studio).
Fyi, it's usually styled as 'Java' instead of all-caps 'JAVA'. It's not an acronym.
Have you tried JNA's COMLateBindingObject? An example: https://github.com/twall/jna/blob/master/contrib/msoffice/src/com/sun/jna/platform/win32/COM/office/MSWord.java
Go search for threads like http://programmers.stackexchange.com/questions/127466/best-practices-in-comment-writing-and-documentation on StackOverflow, and read Code Complete http://www.amazon.com/gp/product/0735619670
Your browser(s) is most likely blocking the Java plugin. There's been many security leaks with it last year, and most modern browsers are now blocking the execution of Java. Google "&lt;browser&gt; blocks java".
Checked to see it's all unblocked, suddenly it's not allowing VM launching now, it's all messed up so i've tried uninstalling and re-installing as administrator but still no luck. I can't find any error logs either as installation always say's it's successfully completed.
Hello World Exampe with Complete Source Code
It makes complete sense. My ultimate goal is to "OpenUSBDevice" and I know that I have to get the handle from ScanUSB, but I don't know what to do with the java.lang.object String[] 0x???????? that I get back. I'm not near the device today, so I can't generate the response, but even so, I don't know where to go or what to do with the response from ScanUSB. Tomorrow, I'll post the response from the device.
ok, so it looks like ScanUSB returns a string array of serial numbers. You're getting one serial number back in your array from the sound of it, so you can just pull out this first entry and pass it to OpenUSBDevice to get a handle.
I'll try it tomorrow. It looks a lot like JACOB. Can you recommend a "Hello World" tutorial for JNA?
Medical labs use older instruments when on a budget. I'm seeing a lot now with there own OS's (even one running OSX), but the older devices are still serial, and a lot less expensive.
UserInterface.counter isn't properly synchronized. It must either be declared `volatile` or accessed within a `synchronized` block. Otherwise other threads are not guaranteed to see changes. 
Their [Getting Started](https://github.com/twall/jna/blob/master/www/GettingStarted.md) guide is a good place to start. ComLateBindingObject provides a lot of convenience code on top of the core JNA classes. The getting started guide deals with simple direct API calls.
I found a tutorial [here](http://stuf.ro/calling-c-code-from-java-using-jna), and everything works, right up until the very end. When I go to compile: &gt;java -classpath jna.jar:. HelloWorld I get &gt;Error: Could not find or load main class HelloWorld HelloWorld.class is in the directory where the command is being executed. I have set CLASSPATH as both "." and the directory where the HelloWorld.class file is located. I made the dll successfully, as checked by dependency walker. Why do I keep having trouble with the last step on all these tutorials?
That tutorial appears to be geared towards Linux. In Windows the path separator is a semicolon, not a colon (as in Unix/Linux). &gt; java -classpath jna.jar;. HelloWorld Again, that's a Linux tutorial. Find one for Windows, or use the one I supplied.
To me the big pain point is not so much the IDE as it is the build tools. If you rely on the IDE for your builds then you are stuck on the IDE you have but if you move away from letting the IDE manage your builds with something like Maven or gradle then you can switch the IDE to what ever you want that also includes letting every one use what works best for them. Now on the IDE front I prefer netbeans with the GWT4NB plugin or just plain maven with the codehause GWT maven plugin either way works Just fine. The things specific to GWT are really just build specific and the maven plugin handles that. But the GWT4NB plugin does have some nice features but is not as up to date as just using the maven plugin directly or in conjunction. Also don't forget about IntelliJ IDEA from what I understand they have really good GWT support. I just downloaded the Ultimate trial so I could take a look at it's support myself. But it will cost you some money (which I don't mind paying if it is good). 
Here's my own untested tutorial. Create JnaTest.java: import com.sun.jna.Native; import com.sun.jna.platform.win32.Kernel32; import com.sun.jna.platform.win32.WinBase.SYSTEMTIME; import com.sun.jna.platform.win32.WinBase.SYSTEM_INFO; public class JnaTest { public static void main(String[] args) { Kernel32 INSTANCE = (Kernel32) Native .loadLibrary("Kernel32", Kernel32.class); SYSTEMTIME time =new SYSTEMTIME(); INSTANCE.GetSystemTime(time); System.out.println("Day of the Week "+time.wDayOfWeek); System.out.println("Year : "+time.wYear); SYSTEM_INFO systeminfo=new SYSTEM_INFO(); INSTANCE.GetSystemInfo(systeminfo); System.out.println("Processor Type : "+systeminfo.dwProcessorType); } } Then run: &gt; javac JnaTest.java Copy jna.jar to current directory. Run: &gt; java -cp .;jna.jar JnaTest This just gets you started. This is a terrible way to compile and run code. You should learn and use Eclipse properly. 
Thanks! It... works! This is the first meaningful "Hello World" that I have seen in weeks. Do notice that, like most of these tutorials, following the instructions to the letter does not result in the desired outcome. Not only is the colon/semicolon issue germane to users on different platforms, but the author calls the library "libtest.so", then invokes a "ctest" library in the Java code, leading to an UnsatisfiedLinkError when compiling the Java code. If you change the name of "libtest.so" to "ctest.dll", you get the expected "Hello from C!" ... Oh! The ":." sets the CLASSPATH variable to the current directory! Yeah, I didn't get that at first.
It's a pretty straight forward Git management tool compared to something like Gitlab or Atlassian Stash. Really simple to set up and run, but lacking a few features here and there. Most notably, it lacks SSH support (Planned for 1.5, apparently)
Thank you. When I try to compile this, I get a host of errors that starts with: &gt;JnaTest.java:3: error: package com.sun.jna.platform.win32 does not exist import com.sun.jna.platform.win32.Kernel32; But more importantly, where do I learn how to use Eclipse properly (and which version should I download for working in C and Java)? I have been teaching myself to do this, but that can be slow going at times.
This is helpful, but I am hesitant to try this for this application, because the COM object calls that are invoked in the demo code and the users guide don't show up in the .dlls, as far as I can tell and I don't know where the mapping between the calls described and those in the dlls.
cool - didn't know it didn't have ssh - thanks for that! 
You should use the Javadoc standard for all public function and class header comments. That way they can be used by your tools to automatically be displayed when you're using the methods. A Javadoc comment is delimited by `/** */` (note the double `*`) and has a relatively standard structure like this (example taken from java.io.File): /** * Creates a new &lt;code&gt;File&lt;/code&gt; instance by converting the given * pathname string into an abstract pathname. If the given string is * the empty string, then the result is the empty abstract pathname. * * @param pathname A pathname string * @throws NullPointerException * If the &lt;code&gt;pathname&lt;/code&gt; argument is &lt;code&gt;null&lt;/code&gt; */ public File(String pathname) { ... } Other remarks: * Your comments on private methods are fine although personally I feel putting a whole line of *** is a bit distracting and superfluous when you have IDE coloring. * In general avoid comments that do not add anything, like simply repeating what the line does. Explain why, not what. * You should also avoid things that would not survive a code formatting pass, like your comments that are column aligned. If you need them to stay aligned then put then on their own line. * We don't need to know that you used Idea to write your code, and usually we don't care when it was written, of by who, either. * What does `//One ~ to rule them all` mean?