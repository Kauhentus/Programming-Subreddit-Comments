Sweet - last time I looked at/used Tomcat (admittedly quite some time ago now - have been stuck in OSGi container land for far too long ) it wasn't so easy.
Nice - as I mentioned to /u/wildjokers I don't think embedding was that easy last time I used Tomcat - I always used Jetty or Netty for those scenarios ).
As with many Web Scale tech (the other major one is Kafka) this can be configured to work "properly". Of course nobody wants to see it beaten in benchmarks by an sqlite running on BarfBerryPie3.
Yeah, that's it. I want the opposite: mut val x = 10;
&gt; I don't know if you can write less configuration with another framework. Java EE? It’s 1 class and 1 annotation on that class.
yegor256? No thanks.
I was going to say the same thing - but since the whole point of the project is SQL testing, in a sandboxed databases as OP mentions, _maybe_ it is valid. BIG maybe tho - still, accepting arbitrary SQL seems.... Just no :)
But then you need to configure the server
OK, I'm biting. Just because you used Jersey to create an API, doesn't necessarily make it REST - it makes it an HTTP resource based API.
&gt;Spring Boot with Spring Web MVC and Spring Data is more or less the de facto standard Lol, not really. There’s no single de facto standard in Java really. Spring and Java EE are the biggest ones, but neither is big enough to be that. There’s a slew of other smaller things like drop wizard, spark Java that all combined are at least as big as Spring and EE.
We generally write software libraries for other users besides the original developer. Yes there is pain with fluent interfaces but that's good pain if it means your users are happy. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt;So it does not have to be super secure, since the whole application will only work with sandbox databases. No logins, sensitive informations If that's the case, then I don't see why you'd go with much framework at all, certainly not a whole complex one like Spring. Just do the simplest thing that works. Write a method that takes a query, and use JDBC directly to do your call. If you graduate to needing more, your simple code will give the freedom to add scaffolding that you find you need. If you take a solution that adds all the scaffolding in existence, well, you're freedom is suddenly limited.
I could have sworn that the comment I replied to was different than what I see now, but looking now I don't see an edit mark on your message, so I must be wrong (or you ninja edited ... i.e., edited before any replies were posted, which would also explain what I thought I saw). Regardless, I'm sorry for the unwarranted accusation -- I'll be more careful in the future.
&gt; However i dont really understand why i need java ee for that then why ask that?
apparently, since you don't think actually benchmarking what we're talking about counts as performance analysis and think "it's O(n)! same performance!" is a valid argument. by benchmarking, I found the constant by which n is multiplied for your class wrt a toy singly linked list i implemented. and that constant is around 2 (4.3us/op vs 8.8us/op). sorry, but I don't think increasing the cost of iteration by 2-fold is worthwhile in a performance critical application that is worrying about copy operations.
It's part of java.net.http in java 9
Uhh, no? What would you need to configure?
I work as a Java developer and my team is spread across several different countries ranging from 500 to 7500km away and its really great. It's easier to focus on the work and have fast results for me. Never being stuck in traffic on the way to the office, especially saving time as you can work from home is a big plus. But still communication is harder, not only because connections to far away locations might be really bad when using VoIP but also because the team doesn't "bond" as much. So co locations are a must have in my opinion, at least for us it improved the atmosphere and also the business side was usually happy as the performance during and after the co location even increased. It's also worth a mention that not everyone is made for this type of work, I know a lot of people who are not able to get anything work related done in their home office or get frustrated because of less social interaction during their work days.
Could you explain more? I don't really get what you mean.
It looks like in your [submission](https://www.reddit.com/r/java/comments/84qet3/new_sorting_array/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Don't check out spring boot, don't download jhipster. Just use gradle, servlets, either undertow or the built-in http server, and springs jdbc helper for SQL. Your wont get simpler, works like a dream.
Boom!
You just run the main file, and it's a webserver
No, that's what you said. Not what the op said.
And a thousand unnecessary jars. You know there is a webserver built in to the jdk, an example in this thread.
Any is a great build tool, especially if you are building in 2006.
That's about as enlightened as a punch in the face.
Yeah yeah, of course. You know what I meant
1. You are in the wrong subreddit. Programming help goes, as the plenty hints on the page indicate, posted in **/r/javahelp** - but **read** and **follow** the [**Posting Guidelines**](https://redd.it/48eykt) there before posting 2. No matter where you post, it is **your** assignment and **you** need to do the work 3. Plain asking for code is strictly forbidden in all related subreddits - none of them is /r/DoMyHomework **Removed**
A jee application server. I'm not that familiar with jee but spring boot has an embedded tomcat, easier than deploying a .war
That makes a lot of sense. I do have a question: |, for fully populated caches within a certain bound, its not worth it to use HashMaps. Part of what I wanted to verify was the case where the cache is relatively underutilized. It will take me a while to digest your response. I thank you for a great response.
[light-codegen](https://github.com/networknt/light-codegen) is a generic code generator based on rocker template engine. The templates are compiled into Java class so it is one of the fastest generators on the market. Scaffolding a new project is usually within several milliseconds. 
They seem to understand this: &gt; Thus, there seems to be a conflict between usefulness and maintainability. Fluent interfaces are good for users, but bad for library developers. Small objects are good for developers, but difficult to understand and use. But then came down on the wrong side of the argument. "Make life easier for my users or for me? Me!"
don't take my answer as definitive. think of it more in terms of how would I estimate for my use case.
Premature optimization will make you lose focus on requirements. Use a servlet for http and a jdbc connector for database.
OP said he wants to learn, though, and Boot is all about undercover magic. 
And don't care about what version any of your dependencies use.
Mongo DB is webscale. 
If piping all the data writes to /dev/null is what it takes to get those kick ass bench marks then it's a great design.
Wtf is up with this dudes face
A new edition of Effective Java just came out! If you're looking to learn and you're new then I really suggest just making stuff. Doing stuff on like leetcode, hackerrank, etc could be pretty helpful. Assuming you haven't taken your data structures course yet, maybe creating all the data structures and some commonly taught algorithms would help a ton. TL;DR Reading books can be really helpful but I think writing (and failing) to write code is your best bet.
Are you working on tradebots? 
Yours is a helpful breakdown. Trying to make the evaluation has been a challenge, and your estimation seems as good a baseline as any.
thanks for taking the time to put this up here. I appreciate that. I actually agree with you, in that I think the author takes his examples to the extreme when factoring out methods excessively. On the other hand, I think you might have missed the point of his book, in that code should be more expressive in its intent than what most developers currently produce. Now that we as developers can _easily_ achieve the desired functionality, our code should also be readable. In addition to accomplishing a certain functionality, code should _also_ communicate to the reader what it is trying to accomplish. In my opinion, the faster the code can communicate to me what its trying to do, the faster I can extend it or fix it. Isn't that the point of languages? to _communicate_ an idea from one being to another? If not, why are we not still programming in assembly or even binary? regardless, thanks for taking the time to put together and post your refactoring.
Exposing a database *directly* as a REST service is almost never a good idea, not even for internal services. It's just lazy. Instead of thinking about a stable and sane API once, you now have to fix N other services every time your table layout changes slightly. It's basically the same as giving all your services direct SQL access, but with added overhead and complexity on top.
My post is based on my personal experience as a dev working for 2 large banks. Banks all seem to do some sort of social engineering to make sure that people on the same team are not in the same location. It absolutely sucked. If management was better (you know, ensuring their projects had setup docs) I could imagine it working but I haven't seen that myself. It's definitely possible for being remote to take a low-mediocre environment and make it awful. 
&gt;Even if it doesn't cover java 8 stuff, you don't need to let things like Lambdas get in your way of learning the basics. I strongly disagree. Lambdas and streams are fundamental. If you don't understand them, much of Java written in the last few years will be very difficult to understand and, of course, you won't be writing modern Java. If you're a student who's going to learn the language, do it the right way, study the language as it's being used today. Java Magazine from Oracle regularly reviews books and points out strengths and weaknesses unsparingly. Among shorter tutorials, they've recommended [Murach's Java book](https://www.amazon.com/Murachs-Java-Programming-Joel-Murach/dp/1943872074). 
:-D
The most effective way of learning how to code, is to write a lot of code. Make up projects for yourself, write down a list of features you want to implement, and try to do it. If something turns out to be way over your head, leave for a little while, but try to come back to it when you've learned more. Get a book like 'Java, Precisely' to look stuff up in, or just use the internet. For books, perhaps find something about how to structure your code to make it readable and maintainable. And something about algorithms and data structures. You won't, generally speaking, be implementing them yourself in Java, but they're good to know about so you can choose which ones to use. 
Because doing this simply with Spring Boot is way simpler than what you describe here in the tutorial. Instead of knocking it every chance you get you might want to give it a shot yourself. 
Where would you deploy it?
&gt; JavaEE (so base java packages) can take care of your basic needs. Java EE is not the "base Java packages", it's as much a separate framework as Spark or Spring are. They're inaccessible by default in Java 9, are going to be removed, and a lot of EE functionality (such as CDI) was never part of Java SE but is instead provided by the app server implementation. 
I didn't see anything about exposing directly. It looks like it's for automating the generation of an API based Data access layer. 
Yeah, automating a bad practice, what could go wrong.
Effective Java isn't going to tech you java basics. It's more when you already know java and want to write clean code and have good habits. (Don't get me wrong, it's a great book and I have bought the 3rd ed).
For me it initially felt too "automagic" and too much happened behind the scenes. The first time I opened a Spring Boot web application I opened the main entry method, saw one line and thought "What the hell, where is the code?"
The benefit is, that you can apply annotations to lambda parameters: (@Nonnull var x, @Nullable var y) -&gt; x.process(y) 
&gt; For me it initially felt too "automagic" and too much happened behind the scenes. It's always the case. We are not programming in ASM because we created layers of abstraction. A layer of abstraction makes you manipulate higher level concepts which are easier to learn and understand as they fulfill a specific role.
This is an extremely bad idea. You're setting a server wide configuration option in some random component. This setting is normally something that just sits in your application.yml file. Please consider that if you show you "can" that inexperienced people stumbling upon your post think that it's okay to do this. Frankly the component approach should be removed from the post and since all you're left with is a trivial configuration example that's also clear from the documentation you might as well remove the post altogether. 
That was new to me, thanks for the info. You are right sexism should not be supported.
https://github.com/kelseyhightower/nocode wins!
We are talking about private blockchains here needed for commercial and government sectors and with our architecture, Exonum blockchain can handle 5000 TPS which is a very scalable solution. 
Just prefix the name with "@" char :)
These are features built into Tomcat. Its not something home grown.... its there, for all to use... its already fully documented how to use them, as part of the servlet contain specification and tomcat docs.
And since rank balanced trees were not taught in most courses around the world since they were only published in 2015 consider the following post to see more options/code: https://refactoringlightly.wordpress.com/2017/11/05/rank-balanced-avl-trees-on-github/
Such comments have no place here. Consider this a warning. Next step out of line will get you banned from here.
The difference is tiny. @RequestHeader(value="User-Agent") String userAgent and String UserAgent=request.getHeader("User-Agent") are of similar lengths, both documented in full. To say you want to load your war or runnable jar with all the crud that makes up Spring MVC simply because the former is 'nicer' to work with, really is not good decision when the project is small and probably has at most 2 or 3 endpoints.
That hurts in a way I don't care to admit 
This works, in tomcat, with no additional frameworks: /** * Servlet implementation class Myservlet */ @WebServlet("/checkSQL") public class Myservlet extends HttpServlet { @Resource(name="enableSQLExecution") public String enable; SQLChecker sqlChecker; @Override public void init(ServletConfig config) throws ServletException { sqlChecker=new SQLChecker(); } protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { log("SQL Request received: "+request.getParameter("theSQL")); if (enable.equalsIgnoreCase("true")) { sqlChecker.check(request.getParameter("theSQL")); } } } 
No, I'm not saying that you shouldn't use tomcat, to each his own. I'm saying that in my experience larger frameworks beats smaller ones if the quality is equal. For example, where's your test for request.getParameter returning null?
Yeah, but I meant a generator for handy things like: @FilterConnectionInterpreterAdvisorFilter( facadeDefinitionIterableRepository = @FilterInvocationDescriptor({}), xmlComposerIterator = "DispatcherResolverInfoConnectionException", stubAwareReflectiveProperty = ServicePoolDescriptorBridgeDecoratorFocusComparator.class )
OK, this makes perfect sens!
I came across this link while searching for a name for a class!
They say there are only two hard problems in CS: * Cache invalidation * Naming stuff
&gt; I'm sorry but this is absolutely false. Don't be sorry, it is not, let me explain why. &gt; We are not programming in assembly mainly because of portability. This statement is not incorrect (although the mainly is arguable). Your misconception comes from the fact that you seem to say that we do things for only one reason. This is incorrect. THere may be many reasons. Of course ASM is not portable over other CPU architectures, but let's say you need to develop an application and you know that it is going to run on a single hardware ever. Are you going to develop it in ASM ? Of course not, that would make no sense. Another example with Java : Java binaries can run on any platform that has JVMs. Is is the reason why people use Java? Not necesarily. We are using higher level languages for portability yes, but this is not the main reason. There are many reasons we do that and there are many reasons we choose one language over another in a specific setting. So let me phrase it differently, maybe it would make more sense : One of the reasons we use higher level languages because they provide us with layers of abstraction so we can manipulate higher level concepts which are less technical, thus easier to grasp.
Cassandra has what might be best understood as "Schema-Optional", it is not required, only suggested. And while it is a Wide Column based store over Mongo's Document Store, they still fall into NoSQL in the same way. Further, regardless of database ANYWHERE, you still need to carefully design how data is going into collections/tables for quality queries. 
Interesting but I think nobody needs to know most of this stuff to get a job. And if they asked me such questions in an interview I’d just say thanks for the coffee and good luck for the future of your company.
Sounds like [Spring Data REST](https://spring.io/guides/gs/accessing-data-rest/#initial), which isn't tied to PostgreSQL but uses JPA so it works on all databases. You can also use Spring Data REST to throw a REST API on top of other data sources supported by Spring Data, such as MongoDB.
A form I've heard and prefer, personally: --- They say there are only two hard problems in CS: - Cache invalidation - Naming - Off-by-one errors
Haha you guys joke but Java is really like this and it’s one of the reasons it’s terrible 
Reddit is funny sometimes. OP asks a question and explicitly states he doesn't need something advanced, just a server with the ability to receive a string. He asks for a tutorial. He wonders if he even needs a framework. I give him a full straightforward implementation, which is downvoted, while "use spring boot", is voted to the top. The question wasn't "What's your favorite framework?" "Use spring boot" ... Ugh.
&gt;ListenerRepository**undefined**TemplatePoolInterceptorWrapperRequestThreadAttributeMetaTemplatePolicy kk
Undefined should be uppercase
There are no misconceptions here. The reason UNIX C exists is exactly because of portability. The abilities for higher level languages to provide means of creating abstraction stems from the idea to have your code portable in the first place. You seem to also jump over the last paragraph of my comment where I explicitly said I do not argue that we should be programming in assembly. &gt; One of the reasons we use higher level languages because they provide us with layers of abstraction so we can manipulate higher level concepts which are less technical, thus easier to grasp. Yes, that sounds much better and in fact it is what I meant.
Writing 10 4 line methods that could be done in a single 20 line method is a plague on the Java ecosystem
I almost never see more than one pattern in class names. Also every linter will point out long class names. Not saying that bad naming doesn't exist, but it certainly isn't common.
Glad we agreed on that :)
So... unDefined?
MapCloneStubQueueConnectionServiceManagerFactoryStubInfoAttributeWatcherStateHelperThreadundefinedContainerSchemaAdvisorPrinterModelListenerValueExceptionDatabaseResolverMappingWatcherExceptionFilterGetterAnnotationManagerInterpreterContainerListenerBroadcasterPolicyQueuePrinterAdapterRepositoryWatcherConfigurationFactoryParameterAdapterNotificationManager Alright, I've found the perfect name. Now I need to decide what it does.
Yeah, I think I'll just put all my code in the constructor.
What you're describing is a management issue. Traditional companies are more rapidly adopting the stance that in a technology rich world; having heterogeneous teams is a competitive advantage.
"Nobody" is skipping quite a few jobs where in-depth knowledge of the JVM is required. The world isn't only about developing webapps. There are quite a few guys working on different JVM implementations or doing extreme bytecode manipulation where such issues do pop up from time-to-time. For example i can clearly remember a WeakReference issue where it was weak only for a few instructions(but this was a bit hidden in the rest of code, e.g. nobody expected the hard reference to be released in another thread so early) and right between those a GC happened so you need to be aware of such things. Even if a person doesn't know a direct answer, it should at least show his thought process and which levels he has dealt with.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Definitely worthy of a cross post to /r/shitongithub if there's a public repo for it. 
Clearly, naming is still an unsolved problem.
PostgREST is even more straightforward way.
Sure, but so is cache invalidation. We mostly gave up upon that and decided that eventual consistency is often good enough.
Reminds me of the problems of message based systems: 3. Maintaining order of delivery. 1. Exactly one delivery. 2. No lost messages. 1. Exactly one delivery.
I think you're jumping way ahead of this guy's ability.
Ya definitely a book for after you know Java and data structures. 
Ну конечно, вашу страну же не победить ;)
i was not aware that for the jvm, a reference was no longer considered live if it was local and no longer being used. i thought the reference had to be out of scope to not be live anymore. void playWithRef() { Object obj = new Object(); WeakReference ref = new WeakReference&lt;&gt;(obj); System.out.println(ref.get() != null); System.gc(); System.out.println(ref.get() != null); } so i got a right answer to this, but accidentally.
&gt; I know, it’s a contrived example but that is my point: It is hard to come up with a valid and realistic use case for `LocalDateTime`. That *is* a valid and realistic use case. More generally, since there is no formal standard for a serialization format of a named-zoned timestamp, a tuple of `(LocalDateTime, ZoneId)` is just about the best thing we have for storing and transmitting future-times. *Do* use `LocalDateTime`; and then, probably, convert it into a `ZonedDateTime` in order to work with it. Spring should know this.
Seriously i have no real methods, i searched for common words used in class or synonyms. I don't remember what i typed exactly but i think it was "Java classname *Determinator" because that was the word that came to my mind when i searched to express what my class does. I wanted to know if it was used in codebase of someone else and the meaning (i'm not english native)
I just read the new Effective Java and it has completely blown my mind. That being said, It's probably not for someone who is failing their current programming class.
I agree with you; I took a class that didn't include the Java 8 features, and I am still having difficulty catching up to them.
&gt; The biggest problem is that they are rather big and it's difficult impossible to extend them without making them even bigger. If the line count of your library source is the biggest problem (and due to innocent stuff like many small helper methods), rather than things like performance, discoverability, ease-of-use, flexibility... then you're doing pretty good.
Normally I'd jump in and be all contrarian like, saying things like "sexism is bad, but we shouldn't use ad hominem attacks to discredit arguments in this person's technical articles". But then again, him saying something "I think women shouldn't be programmers" is so hilariously inept, I'm like "naaah, we can do without this one".
*rocks in the fetal position under the desk*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The Russian version of these problems was much more sarcastic :)
Get out of my codebase!!!
I really dont get how people got offended by this. Sure, it might no fit for everyone or even be the absolute right way, it's not like you should use what was generated, it can be useful to generate some classes and then you adapt it to your needs, the code is pretty straight forward and easy to learn/extend. Thanks for posting this !
Didn’t they add these classes to make developers’ lives easier? 🤦‍♂️
link?
Converts Objects to Strings by calling the Object's toString() method.
Great man, I always take the best lessons from people calling other people losers. Thanks for bright minds as yours for existing and making the grim fate of humanity a merry story. Now go read your assembler book, I don’t want to steal your precious time, you should make the best out of your teenager years.
Wrong. Ug. Use it when you need it, like storing a timestamp (not a timestamp + tz) in a DB. In many cases people know that they are always using UTC so serializing that in the time makes little sense.
Uuh.. this one I hadn't heard before. Neat!
Tell me where the bad class touched you.
Yes. Imagine you are stepping through this with a debugger, I expect obj to be available to me on the last line.
No, I’d never go with a nosql database. A nosql *cache*, yes. Database, no. 
[removed]
[removed]
Did you not read the article. For that use case you want an `Instant`.
Why not? 
You should trigger compilation of this method. Set -Xcomp option or call playWithRef in a loop.
Thats also because the method will not be compiled, but only interpreted. I've just added notes about -Xcomp and debugger into the post. Thanks a lot for mentioning these inaccuracies! 
^ Lol the best part of going with Eclipse is getting to avoid this kind of snootiness.
&gt; support for Maven has greatly improved I would hope so, because the last time I used Intellij maven pretended to run, Intellij told you it ran, but it didn't actually run at all and you had to manually run it from the command line.
&gt; And near as I can tell nobody has looked back. "I didn't dare look back because I knew if I did I'd realize I had made a terrible terrible mistake in the direction I chose to go"
&gt; Your alarm clock should use a LocalDateTime, in most cases. ...do you not travel?
&gt; a tuple of (LocalDateTime, ZoneId) is just about the best thing we have for storing and transmitting future-times Daylight savings time (specifically the handful of places that don't observe it) makes that an issue-prone way to store timezones. tz (aka olsen) is a much better way to store the timezone tracking the offset including daylight savings time.
Want to know another quirk? There's no way to format the new classes with "am/pm" only "AM/PM" without resorting to doing a text search/replace.
Wrong. I am talking about timezone-less where it is assumed by the devs. Why do you think java.sql.Timestamp converts cleanly from a a LocalDateTime and not an Instant?
Instant is not what I am talking about. I am talking about a situation where it is serialized with date info, not a specific point in time. That one assumes on both sides of the serialization it is UTC is what allows you to take that serialized value and turn it to that, but nothing about the format forces it. It has serialization value to say "timezoneless". As in "store this without time zone", not "store this at a specific point in time".
Presumably his alarm clock does not.
I love programming in Java. I could do it for the rest of my life, or until something better comes along.
My alarm clock is on my phone so...I mean it does for me.
&gt; i was not aware that for the jvm, a reference was no longer considered live if it was local and no longer being used. i thought the reference had to be out of scope to not be live anymore. &gt; &gt; I don't think that's guaranteed to be the case (though I don't have a reference to the Java Language Specification handy). I remember debugging a nasty issue with finalizers and the IBM J9 JVM (J9 seems more aggressive at running finalizers than HotSpot) where a finalizer is run/and an object is GC'd after the point where it's being "used" but before the method returns. That is, something (the JIT compiler?) notices that `obj` isn't strongly reachable after line 4, and is thus free to run finalizers/collect the object.
This is pretty interesting it makes me think I should read the Java language specification.
I didn't specify that this builds on top of tz; it would be useless without it. But tz is for defining time zones, that's not what you need when you need to schedule a meeting 4 months in the future: for that you need to know where the meeting will be held and what time a clock hanging on the wall in the meeting room should display when the meeting starts. That's `ZonedDateTime`, which doesn't have a formal serialization standard.
UTC is only safe for past events or other UTC clocks. I do seem to recall that RDBS implementations of (timestamp + tz) are useless in practice but you do need the named time zone to be safe.
ComplexCraftPurposeEnterpriseUtilitarianUtilities?
You have to be sure that no file system access can be made through SQL. A lot of SQL databases offer such functionality through their SQL languages. In case of which, rollback won't help
Hey I still like it. Nothing beats XSL transforming XML config files to executable ant build scripts
https://github.com/lagom/lagom
In Norway we have two time zones - winter and summer. It makes sense to use ZonedLocalTime in our applications to support this in e.g logs or database audits. Its common to use jodatime for SE7 and below to support this!
Fun fact: Clojure will actually generate code that explicitly nils out local variables after their last use. So a: (let [a (gigantic-obj), b (other-obj)] (do-something a) (foo-bar b)) Will set `a` to `null` before running the last form. Without it, even under memory pressure the current popular JVMs won't GC `a`. Clojure also uses this trick: https://github.com/clojure/clojure/blob/f572a60262852af68cdb561784a517143a5847cf/src/jvm/clojure/lang/Util.java#L197 extensivly to clear local variable so they can be GC'd. Eg: https://github.com/clojure/clojure/blob/a26dfc1390c53ca10dba750b8d5e6b93e846c067/src/jvm/clojure/lang/Var.java#L380-L417
If you don't know the exact difference between two. then you're not allowed to post such stupid shits. It's obvious LocalDateTime won't have the zoned time information. And you've to use other one.
That's exactly the case I was thinking about. You travel, your timezone changes, but at your target place the regular working time, meetings time, restaurant opening times, are in the same local times (more or less) as in the place you come from, so you want to wake up at about the same local times (AKA 8 AM, instead of 8 AM UTC independently of the place you're in).
Thanks, I'm ready to explore that repo ;) 
Or have the joys of daylight saving hours?
&gt; So would you never go with a NoSQL/Doc database I never really understood what NoSQL should be, but if it is any database which doesn't interface with SQL, then your filesystem is a NoSQL database and you truly might find a usecase for that. 
You can checkout Play Framework. It uses Akka Server
his username is literally twat and spam. So I guess its s troll.
No RDBMS driver in existence today are reactive. They are all blocking drivers. 
Very interesting fact! I've checked Clojure's bytecode and can confirm that it's full of pattern: aload_k aconst_null astore_k // here goes actual use of local #k
Wow...I see your point. I feel silly.
Thanks. Nice :D
I'd say it depends on the job. Normal java developer do not need to know that crap. JIT implementers? JVM writers? Odds are that they do. 
Good post. I'm looking into using akka-persistence myself, maybe with Lagom to start out and see how that goes. It seems like this really is a good way to build some types of applications. Only snag for me is how resource intensive it can get, which makes my tiny laptop cry.
What "snootiness"? I've used Eclipse for years before switching over to IntelliJ completely a while back. IntelliJ is a polished, comprehensive, full featured, well thought out IDE. I pay $14.95/month for ALL of JetBrains products on subscription. So no one can say price is off-putting. Eclipse is a disjointed, rough around the edges, buggy mess. No cohesion with workflow and good luck fixing *any* plugin conflicts. I'll use it if I need to where policy dictates, but it's beyond painful. I fail to see the "snootiness" in this? Usually people who suck Eclipse digital cock at this level are either afraid of change, or so simply set in their ways, they can't see past their own noises for better options/ways of doing something.
&gt; That’s a db admin task to lock it down properly. Well, in the context of this discussion, the OP needs to do DBA work, the, right? &gt; Also, you’ve actually written a fully complete sql parser Cool. What does complete mean? Is it available somewhere? What does it do?
 &gt;Well, in the context of this discussion, the OP needs to do DBA work, the, right? Dunno. Depends on the hosting. If OP is using something with an ephemeral filesystem like heroku, or some locked-down database at a shared host, it may already be done. I might see what I can get a heroku postgres instance to do in this area later tonight. &gt;Cool. What does complete mean? Is it available somewhere? What does it do? We could squabble about formal definitions of ‘complete’, but I’d say the jooq parser is complete enough for a reddit comment thread. 
&gt; people who suck Eclipse digital cock Yes, that snootiness and toddler level meltdown is exactly what I am referring to. It's nice to use eclipse and not have to deal with that attitude.
&gt;Yes, that snootiness and toddler level meltdown is exactly what I am referring to. It's nice to use eclipse and not have to deal with that attitude. Whatever let's you sleep at night...
&gt; Whatever let's you sleep at night... Lol specific example of what I was talking about.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Lol, really hung up on this issue I see.
and this "must not attempt to update any other mappings of this Map." https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#compute-K-java.util.function.BiFunction- 
You keep making my point for me.
This is great. But class names do need to be sufficiently descriptive. The more it follows a ubiquitous pattern, the shorter it can be.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; BTW, you bet I'm lazy, and when you are faced with the task of creating and maintaining endpoints, for information in tens of tables you start to get ideas. Tens of tables doesn't mean tens of REST endpoints or even tens of resources on the same endpoint. In my experience tens of tables often get exposed as merely 2-3 types of resources, which for the benefit of longevity, ease of use and intuitive mental model in the user's head, rarely have anything to do with the underlying database structure that holds the state for this API. I think mapping straight from SQL to REST represent not only not recognizing the problem in how you approach API design, but doubling down on the problem. It's like a person with a drinking problem coming up with a more efficient way of drinking. As I'm writing this, I realize we're firmly in the abstract right now. But if you can present an ideal scenario of an API that would benefit from direct mapping, I can tell you how I'd approach that in terms of design differently, so the mapping is never necessary in the first place.
&gt;&gt; Cool. What does complete mean? Is it available somewhere? What does it do? &gt; &gt; We could squabble about formal definitions of ‘complete’, but I’d say the jooq parser is complete enough for a reddit comment thread. Eh, my bad. I thought *you* had written one, when you actually referred to *mine* ;-)
If you want just to learn cqrs you can try with Axon
Well I'm more of a Scala person on the weekends so I'm likely to use a more scala oriented stack but that one is also definitely up there. 
You can use it with scala. It's just that it's more cqrs oriented than Akka.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The main issue with our current licensing model is that we don't have a great way of locking down feature sets for the software. So a customer will buy the software and their operators will see the menu of things they can do with the software and may say WTF, I'm piloting an airplane not a submarine, what are all of these naval features doing in the menu?? This I'm thinking is just a problem that can be solved with roles and permissions.. As far as the license file, I am new to this team and am just starting to learn the facts.. I'm not sure if the existing setup is flawed or not. I just wanted feedback here on r/java to see how others have implemented their licensing to see if I can get any fresh ideas that might benefit/enhance/paradigm shift our existing setup. Thanks for the reply btw!
There was a good reason for the end of JavaEE being called that: Java is Oracle's trademark. Oracle is not known for letting other people play with its toys, and they are definitely not ready to let Java (the name) go. There is still value in that brand, which they absolutely will not share. However, you have a point about evangelism. Jakarta will definitely need an evangelism team, and not just from the likes of Red Hat and IBM (who do a great job evangelizing JBoss and, maybe to a lesser extent WebSphere). But the Eclipse Foundation could never provide that, as they're strictly non-profit. 
Keying to the MAC is inadvisable as it can be changed relatively easily, and if it's not an on board card, swapped easily / inexpensively invalidating the license. Also, the application should only show features for which it is licensed. Showing non functioning features reduces usability and creates frustration (as you've already indicated) 
Sounds more like a problem with separating different userbases than licensing. You could easily just have different copies of the same application for different use cases so people don't have irrelevant options. Or just add the type into the license file if you want to lock it down.
I think, the main reason behind Oracle‘s decision to give Java EE away is the Cloud. The evolution of cloud services is too fast for Java EE and vendors to keep up and to play an important role.
I think it’s cloud indeed, but more because of Oracle wanting to compete with AWS and Azure etc, and not longer in the middleware / application API stack. I *guess* they are friendly towards EE and support moving it to Eclipse since EE is one of the things that may run on their cloud servers.
Why not?
Nice usage of Groovy here. You don’t see that too much anymore outside Gradle and even that one seems to be fading.
Licence keys are more trouble than what they're worth. I spent 5 years maintaining licensing systems, only to find my company's software for sale for 10 bucks in Kowloon, China. 
Why not just use UTC time and do any conversions only when you need?
Yeah, I'm actually relieved. Like, how many trees were spared anyway? Yikes! Aside: I think we eventually reach a point in this job where the information overload enables us to achieve a level of chunking not previously required in the profession. This may not be a good thing if that ability can't be carried over to other arenas, so to speak, but it's interesting in an academic way; like "hey did you see how fast that Chinese Asperger's kid translated the Tao Te Ching into ancient Hebrew???" kinda way. 
The fact that Groovy was let go by Spring was IMHO the first stone on its grave. All projects that were sponsored or directed by a commercial entity and have been given to Open Source foundations have died, or more precisely have become a shadow of their former selves. The Gradle guys are nothing but opportunist and were happy to jump on the Kotlin train.
Giving it away benefits them since they don't have to maintain it, but still make profit off it. It's like giving away a free car while charging a lot for gas and highway tariffs.
You mean, inside your brain?)
Sounds like you are looking for something similar to the Collection API just for async completion. So something like Collection, List, Set + AbstractCollection, AbstractList, AbstractSet that you can extend and implement as you wish. The problem is that is that you cannot really design data structures that are both concurrent and extendable in the same go. It is a well known concept called the "Inheritance Anomaly", you can see some examples in this paper http://homes.dico.unimi.it/~cazzola/didattica/sistemi_distribuiti/anomalySurvey.pdf I do think some extra interfaces could have been included. But the actual implementation I think would be difficult to do otherwise. At least if you still want the performance.
There are horrible sexists and non-horrible sexists? Did I get it right?)
You will never EVER be able to beat piracy. Pirates are just too goddamned smart to outwit. Here's what you do: ship the software encrypted. each part that they want to buy, sell them the decryption key for that part. 
What I find puzzling is why Netbeans went to Apache and Java EE to Eclipse. I would expect the opposite, as Eclipse is known for tools and Apache for server infrastructure. Was Oracle trying to foster competition between the two, or just playing spoilsport? Or, am I just missing something?
I might be alone with this, but I really think that stuff like this should go to configuration, not code: @FormAuthenticationMechanismDefinition( loginToContinue = @LoginToContinue( loginPage = "/login-servlet", errorPage = "/login-servlet-fail" ) ) 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The fact that you can do this sums up what’s wrong with spring boot.
You can replace the attributes with expression language, which means the values can come from wherever (XML file, java config, external property file, etc) If you read the spec, it says somewhere that it's allowed for servers to override these security annotations by the server (e.g. with things set by an admin console). I'm not sure that's often required. Even in the most traditional setups the application specifies the mechanism (FORM, Basic, ...) and the server specifies the identity store (LDAP, JDBC, File, ...). I know at least GlassFish and Payara can define the mechanism too on the server, which then overrides whatever the application defines in web.xml, but not sure how often that is used. Java EE being CDI based also means you can override anything yourself anyway using a CDI extension, unlike for example the EJB annotations which are far harder or even impossible to override.
I may be completely wrong here, but what I understood is that it's mostly developers who contribute their time for free. Most other professions want money for their work. Marketing persons, for example, are not going to do marketing in their free time.
It looks like in your [submission](https://www.reddit.com/r/java/comments/85e9m7/why_doesnt_the_else_in_work_in_this/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; hacky ~~ bytecode mangling ~~ AST rewriting
You can add CSS to that list if you ask me.
That's not really accurate https://github.com/vietj/reactive-pg-client https://github.com/mauricio/postgresql-async
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Is this not solved with sdkman.io already?
&gt; because you want to play with the latest JDK version, but are stuck with Java 1.7 at work checking in
&gt; static method in a utility class I remember reading that one of the benefits gained from static interface methods, was no longer having to have `*Helper` or `*Util` classes littered around when you only have a few methods there, when the thing you're "helping" is an interface that you're exposing. Everytime I write a new `FooUtil` I can't help but think that the naming sucks but there's little better one can do. In my experiments with D and Rust I've grown accustomed to using [Uniform Call Syntax](https://en.wikipedia.org/wiki/Uniform_Function_Call_Syntax) where one can still chain the call in a manner that reads like a fluent API, but is implemented independently on such a utility class/package. One that takes things further which I quite liked for this, was how Eclipse Xtend handles [extension methods]((https://help.eclipse.org/mars/topic/org.eclipse.xtend.doc/contents/202_xtend_classes_members.html#extension-methods)), in particular it's extension providers extend (hah) the extension method mechanism from merely `static` methods to instance methods - of which the instance providing extension, could be instantiated directly, or `@Inject`'d via Guice, or even injected OSGi services. That offers quite a nice bit of power there. I think the key thing you hit on here is: &gt; If a method can be implemented using only methods in the public API In the case of `CompletableFuture` - I'm not so sure it can be, as a lot of those combinator functions access internal state of the existing future. 
**Uniform Function Call Syntax** Uniform Function Call Syntax (UFCS) or sometimes Universal Function Call Syntax is a programming language feature in D, Rust and Nim that allows any function to be called using the syntax for method calls (as in object-oriented programming), by using the receiver as the first parameter, and the given arguments as the remaining parameters. UFCS is particularly useful when function calls are chained (behaving similar to pipes, or the various dedicated operators available in functional languages for passing values through a series of expressions). It allows free-functions to fill a role similar to extension methods in some other languages. Another benefit of the method call syntax is use with "dot-autocomplete" in IDEs, which use type information to show a list of available functions, dependent on the context. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/java/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
Oracle missed the boat when other companies onboard with the cloud because they were too focused on Java EE in data center business. Until now they realized that all their customers are getting rid of Weblogic or Java EE in general and move to the cloud. They started to look for solutions for the cloud and that is why they start the serverless framework. They still have a gap compare to other could providers as they need a light-weight container friendly API server which is not Java EE based. 
Interestingly, VAVR looks to be moving to a \`.internal\` package that's not exported for various things in the forthcoming \[1.0.0\]\([https://github.com/vavr\-io/vavr/issues/2228](https://github.com/vavr-io/vavr/issues/2228)\) release, this is one of the nice things that come from strong encapsulation at the language level \- certainly gives one more tools \( and thus, more complications \) when it comes to API design :\)
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Why puzzling? If you think of it Netbeans going to Eclipse would have resulted in 100% death of the project, as Eclipse is not interested in having a second IDE in it's hands... And on the other side, EE4J is basically the Glassfish server distribution, whic was already using components from Eclipse (EclipseLink, OpenMQ). Apache has already Geronimo and TomEE server distributions, it would have again resulted in too much overlapping. 
I bet there will be plenty of retards who will upload a dump with some sensitive data.
Java developers will dump files and solves memory problems
As someone with limited understanding of Docker, this article seems more like just raw documentation of certain functions/parts of the process rather than a "guide". It's not explained anywhere why these things are being done, and when you should be doing these things.
Try to guess what those files contain.
Since they don't support the GUI Designer themselves this shouldn't really be a surprise
We're doing more or less the same. Key based on MAC and some other parameters that we use to generate license that includes list of 'modules' for that client. That list is then used to show/hide parts of UI. For new version we're planning on activation server since most of our client have access to internet. For those who don't we'll have a separate build that still supports 'the old way' :)
Yes, you will never beat pirates, but in many cases pirates are people that wouldn't pay for your software anyway, so it is hard to say what the real loss of profit/value is. My philosophy is you should make it as easy and as simple as possible for an honest user to purchase your software, so as to not deter people who are actually willing to buy it. There is nothing worse than paying good money for a product, only to find it crippled or made unbearably annoying to use by some elaborate anti-piracy mechanisms. If you really want to take this approach one step forward, you can actively distribute "cracked" or "pirated" versions of your software that have some nags or purposefully disabled features. If you do though, you should be very careful to make it super clear this is an "illegitimate" version (perhaps offer a very visible demo), so there is little to no chance someone just wanting to try it out would be discouraged from actually purchasing. 
Could you please fix the formatting of "reg`ular F`uture"? It annoys me so much for some reason... 
Great project, if you are planning to go free path, you should figure out a way to run offline on client side. In example do u require gpu for deep learning or u have already training data. I personally use eclipse mat, and i like its future to write queries like sql
Haha that's a nice way to leak sensitive data hidden in some java variables like API keys, db password, urls, etc...
I have tried numerous times - even your comment renders with it broken. Bugs in this new reddit GUI maybe?
Nah, they seem to focus to support any framework. Java EE already was quite suitable for use in the cloud. WebLogic sales went down because of horrible support and being much less polished than the competition, while costing 10x as much.
Meh, I think it has its uses. Just like any other big feature, it is prone to abuse, but that shouldn't preclude it from being used when it can, especially if it works.
At the cost of... ?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Will stick to eclipse memory analyzer, sry. Uploading huge dump files to some online service seems really silly and unproductive to me.
I have deliberately written it as it appears... Does this not work: "regular `Future` interface"? regular `Future` interface ? 
Clickbait title
In this new model, I don't see why you couldn't release new versions of JavaFX daily. Daily is better than quarterly, if you ask me. You would be packaging JavaFX with your app when you distribute it, so you don't have to wait for your user base to adopt the latest edition of the JDK. Instead, you just package the latest JavaFX with your app. This allows JavaFX to release extremely often - even daily. In effect, it can be far more agile this way. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
As a user of sdkman I say yes. However, no harm in more choices.
Jenkins if you have more time than money. Otherwise Bitbucket, AWS Code build or another commercial offering.
Brilliant thank you! 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I guess this means the end of free support for Payara 4, time to upgrade or pay.
This is my first open-source product launch, so there's still lots for me to learn, so thanks for the feedback! You're right that I seem to have completely missed the developer's guide; I intended to add links to the relevant Javadoc class pages while I'm still working on filling it out completely. Also, the CSS issue is definitely a bug, thanks for the screenshot.
This sounds good to have. Will try it out.
Outstanding documentation, thank you!
Jenkins 2 Declarative Pipelines. Allows you to define you CD pipeline using a Groovy DSL which can be checked into version control. Build steps are performed in Docker containers using the Docker agent.
I will take a lot . Thanks 
We use Concourse and Concourse Up
Any plans to make all dependencies available on central? Jitpack seems to be an issue with build system setup used internally.
That's hardly the case here is it? The latest and greatest version is free, and all the publicly released Payara 4 versions will remain free as well (they're published in Maven central). Only if you want paid support for an old version you uh, pay. This is hardly different from most other larger projects. Good luck asking JBoss to fix a bug for you in JBoss 5 or even 6. They won't do it for free and they should not be. JBoss engineers can't live from nothing can they? Payara engineers can't either, and if you're an engineer I wonder if you don't ask money for your work every day? 
There's a significant difference between 4 and 5, but we hope to make the process of upgrading as smooth as possible. If you have any issues going from 4 to 5, we'd love to hear from you in a GitHub issue. Also, I should point out that we are stopping public builds of Payara 4 only. All the source will still be available and you are welcome to build it and use it from there. We've even got some build instructions on docs.payara.fish if you'd like to give that a go. Please do consider buying support, though. [Free software isn't free](http://www.tomitribe.com/blog/2013/11/feed-the-fish/) and the more people who support us by letting us support them, the more investment we are able to make into Payara and - when the time comes - Eclipse GlassFish. 
\&gt; It seems to be a little unfinished. Sounds like you've just volunteered :\)
I would definitely consider it but I have never worked with Maven, only Gradle, and don't have a clue where to start. The Gradle plugin is little more than just running a JavaExec task with the correct dependency scope and passing in some command-line flags, if you'd be willing to help build it!
What meotau meant is that people uploading the dumps is dumb. You can easily find passwords and other sensitive data. 
Quite a powerful tool, will have a look at it soon. Bookmarked.
Teamcity works pretty well for us. Hooked up to GitHub and deploying into pivotal cloud foundry.
You're welcome. I've been through a few, and in my experience first impressions are very important. I'd also focus on getting people to visit your project's GitHub page. Here is some more feedback on the webpage in no particular order: * Remove the developer-guide-tab until you have that in place * Fix all the elements that have **overflow-x: scroll;**, this is what's causing random scrollbars everywhere. * Keep your "Fork me on GitHub banner in one fixed place and make it black (it should pop against the background, so people can see it easily). * Fix the link-color, it's hard to read. * Add a favicon * It's pretty uncommon to see ornate decorations and drop-shadows in logos these days. I would suggest something a bit less everything: https://imgur.com/a/JnFx4 * Remove the border-bottom on your header You seem to have put in a lot of work on the generator itself, but people are unlikely to consider using it if the website/documentation is not up to par. 
Some feedback/cmments will have to do, I'm very loyal to Jekyll and GitHub pages.
I could provide an maven-exec-plugin example ( essentially just running the java class ), and have done many a Mojo so could probably look into it ( where's my time machine ... ).
Hi dude, great video, really enjoyed it. I didn't know distinct() which was a nice eye opener. Looking forwards to the next part! *(side note, reagan's name is pronounced "ray-gen" (think ray-gun))*
Did you read iot awesome list already? https://github.com/HQarroum/awesome-iot
Asking the real questions
It looks like in your [submission](https://www.reddit.com/r/java/comments/85pv9q/whats_the_wrong_line_of_code_only_1_line_is_wrong/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
We use GitLab CE, works well for us.
Great job! Keep going with this series
It's part of the whole new UI refresh ( which you can turn on in settings, if you've opted into the beta ): https://imgur.com/a/jtPGQ
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/DjSI136.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dvzewbf) 
I can't say anything about the work that it took to configure it, but Teamcity was definitely the best UI experience I've had for such a system.
travis-ci.org
We recently moved from Jenkins to Gitlab. The CI config files are stored with the microservies but they are actually generated from one single template (basically we have a custom tool that can update all of them). This way we can easily introduce new steps in all the pipelines without having to hand-modify all of them ourselves. 
Awesome! Subscribed 
Heyy, I've noticed you consistently just create topics that link to your website. https://www.reddithelp.com/en/categories/rules-reporting/account-and-community-restrictions/what-constitutes-spam-am-i-spammer "https://www.reddithelp.com/en/categories/rules-reporting/account-and-community-restrictions/what-constitutes-spam-am-i-spammer"
Thanks for the tip with "ray-gen"! I was indeed unsure how to pronounce him :D 
Knowing the basics of java and spring boot will definitely help you in using this project and make a bot in a very short time. But if you’re new to Java then this project may take you a bit long to understand but is absolutely not an impossible task. If you’re familiar with web applications I would suggest you to go through some spring boot docs/tutorials.
^this, but scripted pipelines.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
More...They made a lot of changes/bugfixes and added a lot of functionality.
I never undertood how does GitLab makes money if everything is free
There is an enterprise edition with additional features (self hosted), you can pay for hosting (gitlab.com premium accounts) and you can buy professional support. None of this is required for open source developers or small teams, but bigger shops may find this to be a reasonable investment in such a great tool.
It's kind of inception reading about "the community" in "the community".
JavaFX is deprecated and will be removed, don't put any effort into learning it. Go with spring, hibernate and these stuff.
This is not correct. It will be removed from the JDK but will still be developed and used. They just separated JavaFX from the JDK to enable different release cycles (and probably some other reasons). Still spring, hibernate, etc. are a good subjects to learn. I would add dependency injection frameworks and clean code to that list. Also if you are not doing it already, you could start your own project or contribute to an open source project to test and improve your skills.
Do you know of a way to find open source projects to contribute to? I'm a decent enough programmer but it seems like any open source projects require an insane level of experience and knowledge to build upon from where the dev's currently are.
_Your test procedure_ never produces true, false. The JVM you're using might or might not produce different results under different circumstances (e.g. by having memory pressure elsewhere in the application force a GC). Even if the JVM you're using never ever does that, a different version, or a different JVM implementation altogether, might, as long as the spec allows it.
Just in time for containerization to become a stale fad!
/r/javahelp
...stop using it?
About time. Hopefully Node isn't here to stay
At least when you bring the daemon back up does it recognize the still-running instances? The last time I was managing docker stuff, we would have to manually kill the old container processes so that we could even get the newly restored daemon to be able to control them again.
Nice catch! thanks! 
I will help you for $100.
Can you provide more context on your problems with docker. What do you mean that you've had the "docker daemon fall over" ?
Hahahaha as if Java isn’t already one foot in the grave
You need to Google harder then lol, first you need to set it up so that you get the file place of the sound and set it up as such. Then create the button. Then link the two together 
TFW Java 10 is out and you're still stuck with Java 7
I mean you can say that all you want, but it doesn't make it true. Java is the single most commonly used language for enterprise applications on Earth. More specifically the SSH (Spring, Struts, Hibernate) stack. Nowadays it's a bit different, but still Spring based. You'd have to be delusional to think Java is dying.
Just downloaded it... hmm, doesn't seem like stock IntelliJ supports `var` keyword just yet (no option for JDK10 in `project language level` settings)
Just a summary of the summarized idioms from the original book. Nothing new or worth reading, if you know the book.
I think it's an EAP thing. Don't know if I should wait for the support to come to the stock versions...
No async JDBC I suppose? It was originally targeted for Java 10.
And what will you use instead? 
I keep having to have this discussion here. There are places where containerization is helpful. These are systems that do processing in small chunks that can benefit from being scaled horizontally. What makes it a fad (along with most of what's currently called DevOps) is the idea that *everything* ought to be containerized, that if you aren't using containers, you're doing something wrong or outdated. Using containers is a legitimate architectural decision, but it's one that needs to be made by qualified people after analyzing the need for adding that extra layer of complexity.
haven't even started using java9 yet or getting to know its features
That's fine! J9 and J10 both lack long-term support, that's coming back with J11 so you have time to work out upgrading to J9 modules as part of moving to 11!
Meh, It is easier to build generic good (cross ecosystem and language) developer and ops friendly tools with containers versus any other solution in existence currently. 
As in mathematics, order of evaluating expressions matters.
Java always examines if conditionals one part at a time, looking for the first "true" or "false" to short-circuit the operation and either evaluate the if block or not
If your argument [sounds like these 2003 arguments for using XML in every context](https://msdn.microsoft.com/en-us/library/aa468558.aspx), it's probably a fad. XML-all-the-things is the first such fad I remember getting on board with, and it led to the XML hell that most of us remember from the 2010-ish timeframe. I work with several enterprise-y applications that were designed in that timeframe. The profusion of schemas and parsers and abstraction layers on top of the XML, all seemingly added *just to make sure XML got used somehow* (because the Chief Architect or CIO or Cool Developer insisted) makes these products incredibly difficult to work with. Docker became popular in about 2015. I predict a profusion of articles about Docker hell in 2021, along with several new competing technologies specifically intended to get you away from having to use containers while solving the same problem.
A Java EE application server and Micro runtime
&gt; to short-circuit the operation Short-circuiting is a property of _some_ operators, not all of them. Java happily evaluates all terms if you tell it to. Both `&amp;` and `|` are not short-circuited. 
Fair enough, I was definitely speaking too generally
Wait, what, wuh? It's "Java 10" again? Didn't I read some announcement it's gonna be "Java &lt;current year&gt;" from now on?
I'm curious what do you think about the current wave of JSON-based APIs, and what replaced XML after the fad died down a little.
Wrong sub. If you’re looking for people to do your homework for you, go to /r/javahelp. 
It depends. Docker is also sold as the opposite: a way for developers to enforce their dependency configuration on production servers even if the infrastructure guys are jackasses that can't keep a consistent version of xmllib installed. Containerizing databases that don't need it just seems ridiculous. Are you *ever* scaling your database resources? Like, are they sharded or mirrored or anything?
Ah shoot, thanks for the correction. 
Ah shoot, thanks for the correction. 
Even though this is clearly a joke, such offers/requests are forbidden in most subreddits. Such an offer/request can lead to a permanent ban.
You will need to work on your google skills. The query "java playing sound on button click" revealed *plenty* results. Also, since you're writing a game, you should probably look into *game frameworks*, like *jMonkey*, etc. Again, google is your friend. Last, and most important: *Programming help* questions should, as the *plenty hints on the page* indicate, go in */r/javahelp*.
If you label every new exciting thing a fad then every new thing will look like a fad to you. I work on this kind of tooling day in and day out and have been since around 2012 and deliver tangible real world benefits to developers around the world. I see people using this stuff daily and appreciating how much better it is than the way they have done it in the past. I think containerization is here to stay and it's not any more of a fad than commodity public cloud virtual machines were a fad. It solves real problems around standardized dev environments, packaging, distribution and operation. Is it perfect? No. Are we improving? Yes. Now, I think hand-wavy "microservices are all you need" is a fad, but I don't think containers are purely suited to microservices even though they found their biggest usage in that space. 
Java 6 reporting in...
People realized that different technologies are better for different things. We ended up with YAML for nested configuration, JSON for human-readable data transport, and stuff like Protobuf for compact data transport. As long as you've got a reliable parser library, which are easier to create and distribute today than in 2003, you can serialize your data any number of ways, depending on your needs. What's interesting to me is that they're all much more program-level than XML was. JSON is literally just a subset of Javascript syntax. Protobuf is strings (since it's intended to be sent via HTTP parameters), but it's basically the same as the output of Java's serialization engine, in string form. The JSON fad seems to be dying down a bit, with the result that people are realizing a few of the [drawbacks](http://json-schema.org/). I think the one thing all of these fads have in common is their insistence that this will make development easier, that you won't need Person A to do XYZ or Person B to do ABC, you can just hire an analyst or a junior developer and *the tools make it easy*. Even an analyst can write XML! Turns out, no, you need developers to develop, and you need operations guys to run your servers.
&gt; There are places where containerization is helpful. These are systems that do processing in small chunks that can benefit from being scaled horizontally. I would argue that an additional, perhaps even greater, benefit of containerization is how neat a system it is for packaging, shipping, running and removing software, no matter how that software is implemented, compiled or started. Even for software that is inheritely bad at horizontal scaling. But as you say, there’s no silver bullet.
While I would have agreed with you in the past, technologies like Kubernetes make all but the most trivial applications better if they're properly containerized. And for most folks, it's like a 5 minute job to containerize it. 
Thanks for your sharing your opinion about this! &gt; I think the one thing all of these fads have in common is their insistence that this will make development easier, that you won't need Person A to do XYZ or Person B to do ABC, you can just hire an analyst or a junior developer and the tools make it easy. Even an analyst can write XML! Made me laugh because I remembered one example of this. It's hard to believe today, but the hype was real back at the time, that programmers would be out of jobs, because with Ruby on Rails, the managers can write the applications themselves. It was an actual part of their marketing.
Makes sense. We use MongoDB with a 5 node replica setup. No, they are not sharded currently. And they are not scaled ever. It gives poorer performance than when we were running on traditional VM even though we threw more resources at it. Even the guy from Mongo said their support for containerized environments are still nascent and in r&amp;d. Doing some parameter tuning now. We'll see. Thanks for your insight.
Probably at least 80% of apps that use containers can just be deployed on a boring old dedicated or virtual server and be simpler and faster as a result. The other 20% likely benefit from containers. It's like this with all fads.
Ok I thought so after writing my question, I just assumed that because I was basically writing AND instead of THEN, the computer would interpret all of them at once.
For my development environment (which is itself a Linux VM running on my Mac), I use Docker to easily set up an LDAP server and a few other things for customer demo purposes. It's very handy for that sort of easily refreshable, modular service. If a software vendor can package up their software as that sort of module, I say go for it. But most people I know in the IT world work on internal software for medium-sized companies, the sort of thing that doesn't need scaling and that doesn't get shipped.
Yeah ok it just confused me because this is how I wrote it: public boolean mixStart(String str) { if (str.length() &gt;= 3 &amp;&amp; str.substring(1,3).equals("ix")) { return true; } else { return false; } } When I wrote it, I included both the arguments on the same line and I wrote &amp;&amp;, so I assumed that both arguments would be looked at and if I wanted the order of operations to be taken into consideration I would have to write them on separate lines, but the fact that the order of operations IS taken into consideration, I guess that means Java is actually smart because it wants to be as specific as possible, rendering my question ironic...oh well
&gt; but computers are supposed to be smart No. Computer are as stupid as any stone on the side-walk. What they're good at is executing the commands a programmer gives. Very fast and very accurate. I assume you're using `&amp;&amp;` (and-then) and `||` (or-else) in your if-statements. These operators short-circuit. In case of `&amp;&amp;` as soon as any sub-expression evaluates to false, in case of `||` as soon as any sub-expression evalutates to true. This is done for performance reasons: There's no need to evaluate any subsequent expressions because they don't matter anymore for the solution. If you really want to avoid the short-circuiting use the bitwise operators `&amp;`and `|`. Another option is the Stream API which composes filter and map functions.
The new release cadence allows features to be released when they’re ready, and not be held back while waiting for a big release. An example of this is local variable type inference, which will be in 10.
Currently 2018.1 us on its second release candidate meaning the release won't be far away.
It should be noted that while you can't have it examine everything at once (It ALWAYS evaluates sequentially left to right), you CAN have it not short-circuit by using bitwise operators (see /u/TheHorribleTruth's [comment](https://www.reddit.com/r/java/comments/85uzvj/how_come_java_is_dumb_sometimes/dw09z9b/) reminding me!
Same. Our code uses classes which never got tagged "@Deprecated" or any other warnings before suddenly being declared evil and banished into "EE only modules" and thus broken by default. So they're all still there, but not available. Unless you use special command-line options at build *and* runtime-- nope, wait, double-clicking an executable jar can't pass those. Well, we could try to learn the new modules-info syntax, but zero people have experience with it and none of the development tools support it yet, because *those* authors are still learning it. But I'm sure we could-- oh, nope, wait, the module-info file is specifically ignored when launching with '-jar' with Java 9. So even if we got it all modularized, it still wouldn't help. Hey, JNLP files can pass arbitrary JVM arguments when launching, we could get users to double-click on that file instead and-- oh wait, nope, javaws can't launch a jar without having either a website or a full local path ahead of time. Running out of "the same folder" on Windows won't work. It's a really good language for the most part, but dealing with the ivory tower decisions from Oracle makes me want to suck-start an M4.
"dealing with the ivory tower decisions from Oracle makes me want to suck-start an M4." - hahaha, I'm gonna have to remember that!
&gt; What benefit do these short term releases provide? More frequent releases contain fewer features, but those features arrive sooner. Consider how Java 8 was delayed in order to [give more time for Project Lambda work](https://mreinhold.org/blog/hold-the-train). While Lambda was definitely awesome, the delay meant that people couldn't use things like the new Date &amp; Time API. Had this short-term release model been in place at the time, we might have gotten the new Date &amp; Time API six months earlier with Lambda still taking the time it needed. &gt; Doesn't make sense for most people to either stay on 8 or wait until 11? If you need the new functionality that Java 9 and 10 provide, then yes. If you don't, or you can't upgrade very often (due to corporate restrictions or whatever) then just wait for the next LTS release, which will be 11.
&gt; JavaFX is deprecated and will be removed Please, do not spread misinformation. JavaFX is in no way going to be deprecated. It will only be removed from the JDK and will be developed independently.
So, how does certification work now? I just passed the Java 8 Programmer I...
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You think? I think maybe Oracle will certify LTS releases.
Sidebar&gt; No programming help questions here! These should be posted in /r/javahelp
Has someone found the release notes? The link here is broken http://www.oracle.com/technetwork/java/javase/downloads/jdk10-downloads-4416644.html
10? I know so many people haven’t even moved to 9 didn’t 9 just came out ?
People are complaining about Java releases being too short. Hell has officially frozen over.
I’m extremely sceptical of frameworks, and typically do DI by hand. I found myself building a JAX-RS app on RestEasy, though, and ended up using CDI. I have to admit that it works very well, and there none of the standard Java EE config nightmares. Even the annotations are pretty light: @ApplicationScoped and @Inject will get you a long way. Compared to @EJBs it’s heaven, and I even get a sane stack trace when something blows up.
You can learn a thing of two, tricks mainly. One I did not know is that every declared floating point is double-default, or that any arithmetic on shorts/bytes converts them to ints implicitly. So this: byte a = 1; byte b = 2; byte c = a + b; Won't even compile.
Almost as delusional as thinking docker is dead 😂
Oh I don't think docker is dead I just WANT it to be dead. Not for any technical reasons I'm just tired of hearing about it.
Computers are so stupid if you don't tell them precisely what to do they do nothing. Users say computers are smart because software can be smart and they don't know de difference. But you are not a user. You have to make users think computers are smart. Procedural conditional evaluation is common in every procedural language, not just java and it's on propose, so you avoid evaluating redundant things, what is translated to more performance. 
Serious question. If my java service consists of 1 single jar, why do I car about docker?
not yet, let's hope for Java 11 :)
I don’t know anybody in the industry who values it more than “ok you know java things and have the persistence to actually deal with that test, what a joke that test is” The test is easier to cope with if you don’t think “I am going to learn useful java” and instead you think “I like solving puzzles and this is a giant java puzzle” I really wish the java cert was more along the lines of the book Essential Java. That is stuff all java engineers need to know. If a company truly values the java cert you should really consider if you ought to value the company.
I was unaware! I thought the lts on j11 was universal. Alas!!
What’s new in Java 10 [What’s new in Java 10](https://www.infoworld.com/article/3230507/java/java-jdk-10-what-new-features-to-expect-in-the-next-java.html)
I think a lot of people are in the same boat! Here's a blog with a useful chart: https://www.azul.com/java-stable-secure-free-choose-two-three/ The public releases are shown in grey and support stops after 6 months with every release. Pink shows what you get when you pay Oracle. There are still questions to be answered too: https://twitter.com/speakjava/status/957954066146934784?s=17
Excellent info, thank you!
With a good CI system, this should be a nearly trivial change to verify. Fixing any errors not so much. 
Mark Reinhold discusses LTS releases [here](https://youtu.be/H48QEcjP1PU?t=11m1s). He made it appear that Oracle would not charge for LTS, meaning everyone will get the support, even if they don't pay.
What do you mean by not breaking backwards compatibility? As long as you aren't using unsupported APIs, no release has broken backwards compatibility.
At the end of the day, the numbering doesn't really matter. Its just a new release. They initially opted for a year.month scheme, but people didn't like that.
&gt; At the end of the day, the numbering doesn't really matter. Its just a new release. They initially opted for a year.month scheme, but people didn't like that. Versioning is important, because it's an opportunity to communicate something clear to developers and businesses. SemVer is very successful in that regard. Both the date-based version and the current Java versioning scheme are, in comparison, just random. They're both just noise, they don't communicate anything.
I would argue that something like 9.1 doesn't communicate much either. They are both upgrades, and if you're interested in the details, read the release notes.
Bikeshedding at its finest.
So why did they change the damn versioning scheme if it's just bikeshedding?! You can't have it both ways.
They didn't change the versioning scheme. It will still be Java 10, 11 12, etcetera.
If this is your best shot at gaslightning me, you're doing a poor job: [JEP 223: New Version-String Scheme](http://openjdk.java.net/jeps/223)
Is it possible for me to make a simple game with physics like Pong? I still can't wrap my head around how I can make my objects appear in front of my screen. For example let's say I make a class Ball and it contained information like the size and speed, how can the ball go from this idea in my code into something that appears in front of me (visually).
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; haven't even started using java9 yet or getting to know its features That's cool Java 10 is now EOL. You can check Java 11. *EDIT*: Java 11 is now EOL. JDK 12 is available.
Sure. The trick here will be to work iteratively in small steps with a single goal that slowly build up to a working game. Java uses either Swing (old) or JavaFx (newer) for your basic desktop application. I'll be honest and tell you I don't know how to get started in either of them without googling, as all my experience is in enterprisey Java of one sort or another, but that's okay. Google a tutorial for whichever and get a window open. Great. Now that you've got a window, get a circle on the screen. Doesn't matter where. Just get one there. Use your ball class to store the coordinates. Now make it move on its own across the screen, and if you can, at the borders make it stop or change directions. Now add a rectangle. And then make it move with you press a key. And so on until you have pong. Focus on one step, even if it's not completely correct for the game, and figure out how to do it, either using your text book or by googling 'javafx draw a circle'. Keep the steps simple, and build towards the full product. If you're still having trouble, Google "Java Pong" and start with someone else's code. Try to find one that's minimal and read through it and try to understand what each class does and how it does it. Make changes and explore what happens. Make it two player or make the second player move on its own. Then, start a new project, and using that Pong project as a reference, make Snake instead. Also, make sure you're using an IDE like eclipse or intellij or netbeans if you're not already. 
Talking about multiple apps (microservices) here. With a physical server or with a hypervisor based VM, IT would often have to acquire several host machines, install OSes on it (licensing cost for RHEL), install patches &amp; do regular maintenance; mount NAS, do networking etc. Installing several apps on a same JVM sometimes cause resource contentions (Rogue app hogging all the memory). Worse, the servers could remain under utilized due to wrong estimation of traffic. (Management hates this) With docker, we can buy some powerful servers (or buy cloud solutions from Amazon/Google) slap a lightweight Ubuntu with busybox on the containers and scale as required. Everything runs in their isolated envs. Also, CI/CD is much smoother with docker images imo. As u/best_of_badgers pointed out, we do need to be cautious of putting everything into containers though. 
I had the same question as you two years ago. Here is the - long - answer http://blog.codepipes.com/containers/docker-for-java-big-picture.html
You benefit from the orchestration, auto deployments, horizontal scaling, etc. You also control all the dependencies that jar has (jvm versions, C library, etc)
I was just looking for book recommendations and found this post. The Gluon link looks good. My 2 cents on what JavaFX "is". I feel that JavaFX is to Swing what WPF (Windows Presentation Framework) is to WinForms. Both of those (JavaFX and WPF) are a very big shift into a higher gear for desktop ("client/server") development. (I used to be a Java dev many years ago and got switched over to Windows, where I've been for about ten years now.) I don't think JavaFX is a Flash competitor, nor is it some sort of web competitor, it's just a nice way to build desktop clients. (For some value of "nice". WPF is just as complex, if not more so.) I'm doing a side project and I've chosen JavaFX because I'm just writing some little utility programs and I DON'T want to be messing around with various web infrastructure. After all these years, I still believe Java is the best no-cost, open (-ish), all-inclusive framework for things like this, Microsoft's attempts to redeem themselves notwithstanding.
 Since this is sample code, this may not be relevant, but note that `if (condition) return true; else return false; ` is the same as `return condition; `
There are many amateurs in the JavaScript ecosystem, but also many professionals who follow the version scheme correctly. Why are you comparing Oracle to the amateurs? You think they are that incompetent?
&gt; , but also many professionals who follow the version scheme correctly. hahahaha nah, there aren't any professionals in the JS ecosystem. i would have expected the toddlers at google to behave as professionals but they are some of the worst offenders in this space.
I can't possibly believe that is true, it'll be the death of the language.
Java 11 so far contains one exciting feature: `String.repeat(int)` ;)
What does that do?
Jesus dude, we've been using Java 69 for tens of microseconds already at my shop.
`"foo".repeat(3).equals("foofoofoo")`
right. judge by the comment, not by the code. let me guess, you're a yet another lego handler in the JS ecosystem and you think you're "professional". 
Bitch, please.
[2014]
Hadn't seen it before. Also TIL that Brian Goetz is a great speaker!
Most of the Java team are good speakers. I recommend you watch more recent talks such as the ones in the Devoxx channel or at the latest JavaOne.
Still sobering
Not even a day since Java 10 release and people are already crashing the compiler https://twitter.com/tagir_valeev/status/976293600681115648 
In that presentation, when he is talking about LTS, hes speaking on behalf of the OpenJDK community and all the contributors. At minute 13:00, he speaks on behalf of Oracle and what they **"at least"** intent to do. Which is to contribute the **first two quarterly updates** of every JDK feature release. 
Just submit synchronous JDBC calls to a thread pool. You're not going to gain anything by doing hundreds of DB queries simultaneously. 
Yeah I figured that after looking at solutions that were one-liners haha, it just seems more clear to me to see which conditions return true and which return false when I used the brackets following the conditions.
Wut? It's not about doing a ton of queries simultaneously, it's about not wasting a thread doing a query. And yes, async IO has value. This becomes more true the longer queries take or things like listen/notify in Postgres.
LOL
My colleagues still use java 5...
Java10 has ***paid*** LTS.
Big companies prefer something like a LTS. Previous Java versions have been a LTS with long waits in between for new features. This has made some people unhappy as while their feature was "finished" it was not being shipped because something else was not done yet. At the same time, the Java slowness has allowed other languages to try and fill that niche which is not good for the long term success of the Java ecosystem. So, finally, Oracle figured it out and realised companies that need LTS could get their LTS (and maybe even pay for some support) while the world that wants new features sooner could have them with a shorter release cycle. Win-win-win!
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
To be precise, it is a property of *boolean/logical* operators, everything else can not be short-circuited.
I'll still miss "val"
Kinda click-baity. The VM being container aware was actually done in Java 9 and [back-ported to Java 8u131](https://blog.csanchez.org/2017/05/31/running-a-jvm-in-a-container-without-getting-killed/). So the "Attach from host" bit is a Java 10 improvement, the rest has been in Java since 8u131.
You have to get it to run somewhere. Docker is one option in setting up your CI/CD chain. Writing a bunch of shell scripts is another. In the project I'm working on we deploy our services in a kubernetes cluster. It's pretty awesome and hassle-free. 
&gt; but computers are supposed to be smart Computers are pocket calculators, just bigger and faster. There is nothing 'smart' about computers at all; everything that makes them appear smart is just software and the only reason there's the appearance of 'smart' is just because computers are so damn fast. ;)
That's probably ok since most of us work for in a company that values stability over bleeding edge innovations.
Very true, though many of those companies are not used to paying for Java to get that stability.
You'll just have to live with `final var` like the rest of us.
Latest ubuntu x86-64, plain docker, not swarm.
What's eol?
End of life
I used Giphy Capture to record my screen as a gif or video. It’s made by giphy.com
There aren't a ton of features to get developers excited about in this release but I love the new release schedule. Excited for the future of Java!
From the article they use the example: var path = Paths.get("src/web.log"); try (var lines = Files.lines(path)){ var warningCount = lines.filter(line -&gt; line.contains("WARNING")) .count(); System.out.println("Found " + warningCount + " warnings in the log file"); } catch (IOException e) { e.printStackTrace(); } But I think that hides understanding and readability. How is that so much better than being specific: Path path = Paths.get("src/web.log"); try (Stream&lt;String&gt; lines = Files.lines(path)){ long warningCount = lines.filter(line -&gt; line.contains("WARNING")) .count(); System.out.println("Found " + warningCount + " warnings in the log file"); } catch (IOException e) { e.printStackTrace(); } It isn't an appreciable amount of additional text (13 additional characters) but there is no confusion as to what the data types are. You still have to know what the data type is being held by the *var* to know how to work with it such as the **Stream&lt;String&gt;**, so you must know what is coming back from the function calls anyway. So what is this really buying you? I've had to deal with some C++ code where the **auto** specifier was used and had to dig through other code to find the method being called just to figure out what the data type really was. So it might be great that the language/compiler can infer the type because it knows what the invoked method is returning, it isn't so easy for the developer or support team that has to dig up the source or javadocs of the method in question to know what the *var* type is. 
Link throwing a 404 error.
You have a valid point and even the article underlines that you don't have to overuse it. Maybe it's just a bad example for some.
I think this is the link you were looking for https://www.infoq.com/articles/Servlet-and-Reactive-Stacks-Spring-Framework-5
&gt; I've had to deal with some C++ code where the auto specifier was used and had to dig through other code to find the method being called just to figure out what the data type really was. Typically the most effort you'll have to expend is hover the variable and wait. The type information pops up in a tooltip. Now, yes, var/auto can lead to unclear code. But more often it leads to more clear code. And the whole idea of it being optional is people can choose when to use what.
&gt; Bitch, please. another professional answer. 
&gt;Typically the most effort you'll have to expend is hover the variable and wait. You're assuming you're working with an IDE with Intellisense. A lot of C++ coding is still done using shells and text editors.
But during code reviews, e.g. looking at bitbucket, upsource or similar, you have no hovering quick info. Regardless, this feature is a net benefit and exactly those code reviews will catch overuse, at least if done by eager peers determined to kill tech debt like i'm working with. IMO an example of proper use would be something like: Map&lt;String, Set&lt;Integer&gt;&gt; zipCodes = getAllZipCodes(); for(var entry : zipCodes.entries()) { //Do something } All the type information is available within reach but not duplicated.
Looks like they fixed it.
Yep, thanks.
*downloads immediately
Why was this downvoted so much? Is there a docker circlejerk here or something?
This is /r/java. Anyone not using an IDE is a masochist. 
Sure, but I think /u/ImSuperObjective2 is still right in that you're trying to apply your experiences with C++ to a Java language feature, and *barely any* serious Java code is written without an IDE. If your troubles with auto in C++ were related to practices that are less relevant in Java development environments then those experiences are less relevant to Java as a result. That said, it's true that even with Java there are still plenty of situations that we don't have IDE help. For most people I think this would be web-based source control / review apps.
17.3. 18.1 is still EAP. If you have 18.1 can you try it?
Go back to LinkedIn, you fool! 
Its not too important for me and i dont know linkedin at all. Might be worth a shot so i'll check it out. Thanks!
This is an advertisement.
I'd be extremely surprised if any major IDE didn't do this properly from day 1 of official support of Java 10. They don't just do text-based matching, they typically maintain some sort of internal AST over your source. If they couldn't figure out the actual inferred type of a variable it would be more than just "find usages" which would be broken, their entire model would be fucked and they'd be throwing up type errors any time you tried to do anything with the variable.
Well then you're in luck, because the new fad now is serverless, and containerization is already the old workhorse.
I'm just mostly worried it's going to get used badly and make code a little more difficult to look at. It's not the end of the world but I can't help but think it will be an annoyance.
Sure thing! Thanks for the recommendation. The company i'm recruiting for do require confidentiality so any applicants have to be vetted by them before i can provide too many detail. Sorry if it does seem a bit brief but unfortunately i do have to follow certain rules. Will check out jobhire for sure. Thanks again!
Why? It doesn't work with Visual Studio either in C#. 
is Java a sinking ship due to it becoming paid for LTS and closed source? or just use OpenJDK?
Got it. But still, you may want to disclose how big the project is (one weekend, one year?), *where* the potential work is, what to migrate it from, and what to (Java desktop app or web service?). Plus anything you require from the applicants of course. I might be interested and will look out for it.
So add a lot of Kotlin features to Java? How about using Kotlin?
/u/ImSuperObjective2 replied to my post by copying the section on C++ which is why I pointed out that isn't always the case of an IDE when working with C++. I'm well aware that most Java developers today are almost fully dependent on an IDE. Funny that about two weeks ago there was specifically a request on LinkedIn for Java developers who are able to work without an IDE. I asked the poster why and the reasons were that the industry (he didn't say which one) had both a need to work over an SSH connection and they needed to make absolutely certain of exactly what packages were included in a build. Apparently they'd run into issues where IDEs added additional packages into their code. He didn't give examples but that was a definite requirement. Aside from that, the comment about code reviews or Sonar scan reports that don't have Intellisense is valid, albeit a small use case.
Sure. That's reasonable. The project is based on a full time contract. The potential work wpuld be disclosed in a contract but would typically detail full time work hours. Im not currently savvy in Java but from what i know we need to migrate our database for java8 due to exponential growth of the business. The only starting bit we require is the qualifications and cv if you have you and then we'll contact if management decides that it is a suitable fit. Hope that answers most/all of your questions!:)
&gt; Funny that about two weeks ago there was specifically a request on LinkedIn for Java developers who are able to work without an IDE. It's amazing what people put up with...
Well... Tomcat wets the bed when launched now. This should be interesting.
And the worksite? I quick glance at your history indicates you're in the UK. Now *that* would be worth mentioning. Is the job open to Americans (or others)?
The company's called GoHenry. We have recently launched in the US so I don't see any reason not. We also have remote workers from Europe so it should be fine for all i know(don't quote me on this but i'll confirm!) If you are interested then if possible you can send me your qualifications and i can get you approved by management and let you know!
&gt;Well took Java about 14 years before breaking backwards-compatibility by the sound of your complaints. Nobody's talking about the removal of stuff that's been tagged as @deprecated, or the tagging of stuff that's been documented as "don't use this, it's probably not what you want". That part was fine, and honestly they didn't need to wait as long as they did. These complaints are about designating big chunks of their standard library as "unavailable unless you use these brand new language constructs", without ever documenting that those chunks were on the shit list. And then enforcing that breakage in the same release, instead of (say) letting it continue to work by default but with warnings, and then enforcing the new rules the following release. Nope, all of that happened in a single version.
OpenJDK has been the official reference implementation since Java 7. The proprietary stuff still gets added in by Oracle, and it's all that stuff that's being removed and handed off to third parties.
I keep misreading the title as *The Sobering Pants*, and now I want that to be a thing.
PSA: Looks like **maven** doesn't work well with 10. (sigh...) https://stackoverflow.com/a/49398936
I choose 3 out 3.
Free chaos testing and you're still complaining.
/r/javahelp and/or /r/learnprogramming are subs more suitable for questions like these. And then there's also /r/cscareerquestions. 
don't talk your crazy talk here. but seriously, the wave of opinion regarding kotlin seems to be that Kitlin is a toy language that's a playground for new java ideas, instead of its own fully-defined language that just happens to run on the JVM. 
I came from Yii, honestly found Java to be easier, never read a single line of Java. Then I tried some application that was made with Java and I could understand everything happening. 
Will check it out
Thank for the suggestion. Hmm, I don't think I need to relearn Java again after finished a book and a MOOC course.
Interestingly, C# is planning to do the null thing. Between a way to mark things as nullable, a compiler switch to turn these warnings on/off, a way to make the warnings errors, no runtime behaviour change, and recognizing null checks in the code, it's not as far-fetched as it initially sounds.
I choose 0 of 3 and call it job security.
And you're right, while there's always strengths &amp; weaknesses it's really attractive for a lot of the stuff people are now using scaled clusters of docker images for. Hence the new faddish interest.
It looks like in your [submission](https://www.reddit.com/r/java/comments/864gse/java_project_help/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Breaks find usages. Downvote all you want for reality. 
nice remark. These are the ones I prefer :-( 
No, you're not wrong. Everything I've seen presented by Oracle and in talking to the people I know there points to the Oracle JDK binary only being available to people with a support contract from JDK 11. JDK 8 updates have been extended until Jan 2019 (which actually only means one planned update). After that, the only public updates will be for the current Java release as part of the OpenJDK binaries now being distributed under the GPLv2 with CPE license. That means six months or two planned updates for each JDK. No overlap of updates between releases. LTS versions are only for paying customers so JDK 11 will also stop getting updates after six months. Azul is providing our Zulu builds of OpenJDK under the same GPLv2 with CPE license for free from our website. We also offer commercial support for these.
I am a big fan of the library/spec. It's simply a smarter way you can sanatize the code without writing tedious checks. The performance was not that bad even before, but now it's even better. If you are interested I also created a small library that extend the original spec / implementation: https://github.com/nomemory/java-bean-validation-extension
It is true but it won't be the death of the language; there's just too much invested in it. Some people may choose to use other platforms for new projects. Others will simply decide to pay for support.
Java will now look like JavaScript? I like type checking and type safety? What have they done?! 
Why don’t they name it 9.1 instead of 10? I don’t know why they are freaking everyone out? There are hardly any new features except for var.
`var` is 100% type-safe.
The first thing is to do is separate Java and Spring. Learn Java first. Spring is actually dozens of different libraries, Spring core is the dependency injection framework, then commonly you will use Spring MVC for web applications and probably Spring Data. Spring Boot is a framework for the spring framework (yes, the Spring framework has gotten so complicated it needs its own framework). Spring Boot will make Spring easier. If you need a web framework there are other options as well like Vert.x, DropWizard, Spark, Java EE, etc. People these days are making the mistake of thinking Spring == Java and that simply isn't the case. Although if you learn Spring there are a lot of job opportunities. 
What if I have a method addTwoNumbers(var a, var b) ? How does it know what type it is supposed to take?
Don’t you mean “Eclipse Oxygen Support for Java 10”?
Java developer that became a C# Dev. The languages are identical. Themajor difference is that Java has a lot if boilerplate code. C# properties become manually created functions called getters and setters. (your tools can auto create them for you) C# also focuses more onc convention whereas Java is more configuration. Spring may have gotten better at this but you need to configure a dozen files or so to get up and running. Java tends to be be big in larger and older organizations there is nothing wrong with it but it can feel a bit constraining working on mature applications. There are many jobs available and would not hurt your career prospects going into it. It's just not a dynamic and energetic community like c# can be. 
I would first search "Java spring" in indeed.com in your area to check jobs. Juxtapose that with "python django", "ruby rails", "javascript node" searches and see what the market is like.
&gt; It also does not understand the new keyword var. https://redd.it/864rv3
Start using an IDE
Repost https://redd.it/7s885s and https://redd.it/7sf250
Kotlin language does not have revolutionary ideas Java after Java cannot be Java compatible
Spring is not just a web framework, but also a more general application framework with many overwhelming features. You could also try out a Java micro webframework such as [Jooby](https://jooby.org/), [JavaLite](http://javalite.io/) or [Spark](http://sparkjava.com/) (or one of many others).
https://visualstudiomagazine.com/Blogs/Tool-Tracker/2014/12/Finding-Method-Property-Variable.aspx?m=1 I literally use it everyday for C# and C++, and yes, even on ‘var’ and ‘auto’ declared variables. The type inference is at the compiler level, so it’s trivial for VS to figure out. Even the C# and C++ language packages for VSCode can do it. 
That's not even legal. Maybe you should read up on how `var` is used before criticizing it.
I don't doubt they'd want to get rid of it, but do you have a source of that belief? This post and the survey don't provide explicit clues about their intentions. In any case, the Java sandbox has rotted away for decades now. It's a promising tool but no one involved in JDK development ever seemed to care to solve its more obvious problems (e.g. lack of help generating policies).
Adiós EE and CORBA modules!
Write a class. Have a method that returns that object. Have another class that calls that method using var. Find Usages of the class. 
And it’s gone
That's my tentative plan as well, but apparently the external implementations are not all drop-in replacements, and the setup has been slow going. Month or so ago, I saw a post from somebody on the Eclipse forums with similar problems. Their solution was to migrate their entire project away from Java. Which seems extreme... and yet simultaneously, feels safer and more reliable than waiting to hear what Oracle's going to yank out from under our feet next...
Thanks for the nice feedback, very happy to hear! Also a great collection of custom constraints in your library, thanks for providing them.
Huh, they finally added a [String.repeat(int)](http://hg.openjdk.java.net/jdk/jdk/rev/f2804cb922cea18c896500a8f4c743fa483b010a) method. Neat!
still waiting for Project Loom
Well the only language you could migrate to something like C/C++ because they have no fast release cycles. All other languages are even more "instable" and non-backwards compatible.
Curious to see their testing framework. :)
And no one was sad.
I'd rather have `select` expressions.
People stuck in older Weblogic are sad, because this means that we’ll *definitely* never be certified for a newer Java than 7.
You're clearly not choosing embedded or IOT development.
Right, and we're adding multiline strings to make these tests readable. 
I'm gonna begin Java, so I still on JDK 10 from [oracle.com ](http://www.oracle.com/technetwork/java/javase/downloads/index.html) Instead if you have some documentations very good about Java, I take them
https://youtrack.jetbrains.com/issue/IDEA-188689
This is true.
Spring is a good idea. There are decent books out there that can help you get started.
Isn't Valhalla set for jdk11?
Yep http://mail.openjdk.java.net/pipermail/announce/2018-March/000247.html
I cannot recommend IntelliJ highly enough.
If I understand well, Loom is a new concurrency model with light threads instead of heavy thread \(threads of the OS\) which are much more heavy to create, right?
Nope Long.MAX_VALUE
Already on Arch in AUR jdk-devel.
&gt; I think they will tie the cert to the long term support versions. I think as well. It is the only sustainable path. 
It might not work *yet*, but it certainly will.
The expected value goes on the left ;) void assertEquals(Object expected, Object actual); 
&gt; Spring may have gotten better at this but you need to configure a dozen files or so to get up and running. If you haven't used Spring the last decade or so you might want to refrain from commenting ;) Spring Boot doesn't need any configuration files. 
Tie to vote with your feet? Companies like yours are probably only going to change if people start leaving and new hires tell them "no thanks" when they learn they're stuck on a pre-Lambda version. 
3 jars, simple? Gson for me.
Jackson for me
Goggle APIs kick ass, so much simpler imo
Not better than GSON
That's why I prefer hamcrest or assertj. 
Not better than GSON But if GSON had too little competition it would get lazy...
 JSON-B APIs rule, so much simpler imho
json b refers to binary json, its not an api.
He said he had experience with Laravel. This is very spring like. I would say he'd have no trouble finding his way with Spring. 
&gt; whatever it calls itself now JSON-B ;)
oh, right. get me. I was thinking of this http://bsonspec.org/
I use it in a NetBeans Platform app to keep the main GUI from loading up until after a login process.
I assume its much faster than `for (int i = 0; i &lt; n; i++) { s += s; }`
Most of the times speed is not critical, but code writeability/readability is always important.
But why? Jackson is pretty much the de-facto standard. It's powerful, flexible and fast. Why would I want to need 3 libraries when I can use one and where it also just takes me 1/2 lines of code to do. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
It looks like reliance of pre-java 9 libraries will keep a lot of people stuck with java 8. Even if all libraries used by a semi-large project are modularized, you won't find a lot of existing projects updating all their dependencies. I might be getting old but I don't see the advantage in having modules for libraries (please enlighten me if you disagree). Wouldn't it be less troublesome for everyone if the whole JPMS thing were restricted for internal JDK development?
Leaving aside the matter of backward compatibility, even though string concatenation is obviously a different operation from addition, I can't help but feel Java 9's default strategy is heretical since addition is traditionally left-associative and string concatenation is also expressed using '+'. I think there is at least aesthetic merit to addition and string concatenation having different symbols.
The premise of JPMS is that any sufficiently large codebase will suffer from the same problems as the JDK: hard to evolve due to lack of strong encapsulation (no clear distinction between public and internal APIs) and a monolithic nature where accidental entanglements happen all the time. You can disagree with this premise, but if you agree with the premise, the solution has to be 'modules all the way down'. In fact, libraries may benefit more from strong encapsulation than application modules, given their nature -- many people depend on a libraries, and keeping the API surface minimal helps evolving the library without undue constraints.
&gt; You're missing the point. IE got superseded by better browsers. I'm not missing the point. At the time IE, unbelievably as it is now, was the better browser. People always wish for their favourite tech which may or may not the bets to win and the others to die. Intel vs AMD CPUs? Look at the hardware forums ~8 years ago. Everyone wanted AMD to die, since Intel... you know... Intel! Better performance, just one jar, and half the lines of code? Then AMD almost vanished and Intel kinda rested on its laurels and innovation halted. Of course, nothing can touch Jackson now. It will be years before JSON-B can reach the point of only needing one jar. To simplify things takes take. But the point is that JSON-B is here, and while not as perfect as Jackson, people DO use it. This means Jackson has competition, even if for you the battle has already been won, JSON-B is lurking there in the shadows...
Do you know anything about the status of the new httpclient?
You're arguing a straw-man. I don't have a "favorite tech" and I am in no way invested in Jackson. My point is that if you want to provide an alternative that the industry might actually use at least make it somewhat on the same level functionality wise. &gt; It will be years before JSON-B can reach the point of only needing one jar. Okay. We'll see in 2020 what the state is then. 
I tried the other day to compile and run a simple javafx (and google guice and stuff) application that I have written many moons ago in Java 9. Yes, 9. I got it to finally compile after quite some time, but it can't yet run. Java 9 cannot just run a Java 8 app. Java 9 cannot just compile a java 8 app. And they release 11 in the fall? Yeah ... I'll hold off, thanks.
Right. The keeping API surface of a library minimal is tricky - some of my projects are split in two: one public api with interfaces and a few classes, and the other is the private implementation with its code obfuscated. They are put to work together with a ServiceLoader. It would be way easier to achieve better API isolation with "package public" classes. Just a new keyword and boom! Public classes visible inside its own package only (and subpackages maybe). 
Agreed. If `x` were an int, we would expect normal left to right eval in `int foo = (++x) + (++x) + (++x)`.
It's especially annoying that there's even no way to syntactically enfore left-to-right evaluation in String concatenation. Both ((("Do" + alice) + alice) + alice) + '?' and "Do" + (alice + (alice + (alice + '?'))) exhibit the same behavior as discussed in the blog.
&gt; ...no clear distinction between public and internal APIs... You can always have one package `api` and one `impl`/`nonpublic`/`internal`/`touchthisanditisyourdamnfault` with the documentation stating so, additionally. Or the documentation stating as such. Or as /u/uniVocity said, one API jar and one with the implementation (though, I disagree with the whole obfuscation thingy, if somebody wants to use some internal classes, let them, but it will also be their fault).
While I understand why JSON-B will require *at least* 2 JARs (one for API and one for implementation), the current implementation JARs are obscure JSON libraries like yasson and glassfish. Are Jackson or Google even involved in this spec? The [JSR page](https://jcp.org/en/jsr/detail?id=367) doesn't mention the top players in this space. The JPA spec heavily involved Gavin King, the founder of Hibernate, which is probably the most commonly used ORM in Java.
I'm starting to learn Java, and you said “the stabilization phase of Java 10” (means JDK, am I right?) Explain me about the stabilization of the current JDK, thanks 
Ah the obfuscation is used because it's a commercial closed source lib. I wouldn't do it for an open source project.
Ah, okay, I understood it as "make sure no one uses it" which I'd strongly disagree with. Closed source is a different matter.
&gt; You can always have one package api and one impl/nonpublic/internal/touchthisanditisyourdamnfault with the documentation stating so, additionally. This is exactly what the JDK did for two decades. It led to the situation where those internal APIs were used anyway, and people started screaming and complaining about backward compatibility (much like what's happening now with this JPMS discussion) when these internal APIs changed or disappeared.
As I read it, Oracle will continue providing support patches for the long-term supported releases. For you, right now, that's Java 8. The next one will be Java 11. If long-term stability is important to you, don't upgrade with every release. As for the deprecation of features... I don't see them deprecating AWT/Swing anytime soon. JavaFX isn't being deprecated, it's just being broken off into its own project, so it can update at its own pace, in stead of being tied to Java's release cycle. Whether or not this means JavaFX is doomed remains to be seen.
It's not nearly as bad as you think just stick to LTS releases. My company (and I know a couple others doing the same) are bringing in each version of the JDK but they only recommend and support the LTS releases. We will be running Java 8 everywhere until 11 LTS comes out at which point we will start making the switch. The more frequent release cycle is good for progress, but you don't have to start using it straight away. Java 10 will be for test only so we can play around and see what things we might need to resolve for JDK 11. Now, of course if you're still on Java 6/7 then maybe this could be a worry, but I'm of the opinion that you probably deserve it for not taking care of this debt for years. Not sure where you're getting Swing/JavaFX deprecation from. JavaFX got taken out of the JDK but it's still being worked on in a separate project. There is so much Swing out there that I can't see that ending for a long long time.
With JavaFX being moved to it's own project. Quoting Laurent Bourgès (Marlin implementor): &gt; Going to port Marlin 0.9.1 into OpenJFX 11 github mirror, JavaFX project is alive and more active &amp; open than ever ! The project is now actually maintained and driven forward with people that care.
I don't think you can really compare competition between two multinational corporations and a couple of open source projects ... If something crazy happened to Jackson, someone would just fork it.
&gt; Java 9 &amp; Java 10 will not have long term support. Meaning enterprise companies (like mine) shouldn't upgrade to them. &gt; Java 11 will have long term support, so that is the version companies should eventually upgrade to. I depends on what you mean by 'upgrade'. If you ship your own JRE with your product then, yes, a conservative company will ship JRE 8 then JRE 11. If you count on whatever JRE users have then don't be surprised if people will run your app on JRE 9 and 10 and encounter bugs. Which, means, you might still have to QA your app on Java 9 and 10 even if your baseline is Java 8. Even so, don't wait for Java 11 to switch to it! You should already have a plan to migrate whatever needs migrating in order to be ready for Java 11. Java 9 / 10 provides you a good test runtime to see if your migration plan and progress so far is good. &gt;The part that worries me is discussions of free vs paid support. If your company sticks to LTS then it's the same as before. &gt; Moreover, Oracle seems to be dropping features. JavaFX is no big loss, but my company actually does rely on Swing for our application's UI. There are no short term plans to drop Swing. As you know, Swing is on life-support for a long time, but since it's used to much it's still getting the occasional bugfix and such. &gt; So, anyway, this has been a bit of a rant about my fears about Java's future. Be more positive. Oracle is trying to keep Java relevant not kill it by making it a paid product or dropping useful features.
In addition to the existing comments, now you have the opportunity to test your applications against new non-LTS JDKs and analyze if it breaks something so you can fix it before the big upgrade. And that makes migrations much easier than before. Also, if you are in a new project you know will be released after Java 11's release, you can start coding in Java 10 (or 9) and upgrade the JDK during the development, so you can take advantage of the new features.
The LTS schedule is there so Oracle can release more often while still supporting companies that can't keep up with the faster release cadence. If you have the resources to be on whatever is the newest version every 6 months, by all means upgrade and keep up.
The problem is when everyone says “someone will” and nobody then does...
I'm very aware that swing is on life support. Almost every other month here we have an unplanned, ad-hoc brainstorm of how to get off of it because everyone here agrees that swing isn't ideal. But the reality is it'll never happen, because too much code has been written using it. PS. We ship our product with our own JRE built in, so we're going to be safe in ignoring Java 9 &amp; 10. Thanks so much.
I guess there will be more paying for support, but likely coming from big orgs who are slow moving and so probably already pay for it anyway. Who knows it might even persuade some to sort their lives out and work on their technical debt so prevent paying for long term support.
Yeah, these discussions rarely go anywhere. No one has ever agreed on an alternative technology stack, and since we have a desktop GUI component in Java... yeah, we are stuck with it. It works quite well, no reason to switch other than the desire to move on from an old technology.
If it works "quite well" then you're not "stuck" with it. I recently found a Java GUI app I wrote for fun, using AWT (before Swing), in the late 1990's and it ran fine on Java 8, no changes needed. If Oracle deprecates Swing because their JavaFX people are fighting for it; even worse, if they deprecate AWT; Java will become useless for a lot of internal enterprise applications and those companies might look at replacing Java completely because at that point and with this hip new fast release stuff, they will have shown they are no longer decent stewards of the language. 
/me sighs. Curiously, this is actually the bug in `java.lang.invoke` [JDK-8194554](https://bugs.openjdk.java.net/browse/JDK-8194554), but we would know about this sooner if we were to write the application order tests [JDK-8200118](https://bugs.openjdk.java.net/browse/JDK-8200118), instead of relying on `java.lang.invoke` do the thing as promised. Current development JDK (that is soon-to-be JDK 11) is not affected, and JDK 10 would hopefully include the backport for JDK-8194554, which would make it go away.
The only benefit I see to the JPMS is that by removing some of the modules you don't need, you can make a smaller runtime. There are bit-pinchers everywhere who like that :) That said, there are a LOT of things in the java standard library that I never use or haven't used in a long time: cobra, javafx, desktop (awt, swing), rmi, jnlp, smartcard io, etc. Just how nobody wants to do JEE anymore (unless they enjoy pain), all of these code things being put as part of the standard library bulk up the jdk/jre AND provide a hurdle to 3rd-party java spec implementers. 
I'm using it in a test for a JMS listener. The test sends the JMS message and then awaits on the listener's latch. Once the listener has finished, it calls `countDown()`, allowing the unit test to continue and test the results. (Unfortunately, I'm currently battling a deadlock in HSQLDB as a result of this code.)
&gt; People stuck in older Weblogic are sad *because they're using Weblogic* FTFY :) 
AdoptOpenJDK (https://www.adoptopenjdk.net) is a new non-profit community build farm that will be providing LTS support (that means we will keep Java 11, 17 etc up to date with security and stability patches) for OpenJDK binaries for all platforms matching Oracle’s LTS roadmap (but for more platforms and OpenJDK derivatives. We’ve just produced our first TCK passing builds and hope to have everything ironed out by Java 11. Most of the major OpenJDK vendors are participating in this (Oracle, IBM, Red Hat et al). The goal is for this to be shared common infrastructure for all. Commercial vendors may choose to provide commercial support over and above this 🙂 
We (The Adoption Group within OpenJDK) will be working with Maven, Gradle, IDE vendors and the core modules team to close some of the gaps mentioned in Stephens post. There's certainly some friction points to be resolved, but with the new 6 month release cycle we can actually resolve these more quickly. If folks have more concerns / details we'd love to hear them over in OpenJDK (https://openjdk.java.net) or reply here :-)
The other alternative to receiving Java updates is through your OS vendor if they package OpenJDK as part of their offering. For example, RedHat is [supporting OpenJDK 8](https://access.redhat.com/articles/1299013) in both RHEL 6 &amp; 7 through Oct 2020. If you're already paying RedHat for support then you'll get the updates for 'free'. I assume the same updates will be freely available via CentOS as well. 
We need better integration between Hadoop and Jakarta EE and between Akka and Jakarta EE
My understanding was that LTS support would be for free for 3 years. It's just that OpenJDK would not get that support (they wouldn't backport fixes, although the community could).
ayy
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
The corpse hasn't even cooled down.
Hence the AdoptOpenJDK programme. I understand Oracle’s business decision here but the community clearly needs LTS releases that folks who can’t afford commercial support can have at least some level of comfort
No that was Java 12... no wait... 19... no... 723.... stap!!
&gt; Support will be provided via a series of serial, non-LTS feature and maintenance releases which will be maintained until the subsequent non-LTS release. The 3 year support only counts for Java 8. From Java 11 on the free LTS will only last 6 months unless OpenJDK backports the updates. * [Schedule](https://cdn-images-1.medium.com/max/1200/1*vkAzxUI6lgP5sH7qfbNEqQ.png). [Source](https://www.youtube.com/watch?v=YauqubC8FKM&amp;t=1287). * [No Free Java LTS Version](https://medium.com/codefx-weekly/no-free-java-lts-version-b850192745fb). 
makes a lot of sense, most databases were designed in the client server era, not in the current distributed computing era. can we blame them for being "singlenode"?
Enter /u/karianna :-) https://www.reddit.com/r/java/comments/86ce66/java_long_term_support/dw49qav/
Oracle hopes nobody does that and they can make big money with licensing. 
Oracle has said there will be an LTS release every three years. That does not equate to three years of support. In fact, Oracle is offering eight years of support for each LTS release but only to paying support customers. OpenJDK binaries will only have six months of free updates. The community (or other vendors like ourselves at Azul) are free to backport security fixes to older versions. How that works from a community perspective remains to be seen. Backporting some of these fixes is likely to be a decidedly non-trivial task.
That's why I think the JPMS should be internal to the JDK. Most devepolers don't care about modules. Just give them the option to remove unwanted cruff from the jdk to deploy a smaller build. The ones who want modules can still have them with OSGI.
That seems more like you're having trouble figuring out the Java 9 module system, which is fine! It's very complicated to get into, but it has a lot of extremely important design changes. Yes, it makes it harder to run an existing application as many libraries use APIs they shouldn't be, but once you get that sorted out and start coding with modules in mind you'll find that your code is much more expressive and safe. Once you're moved fully to 9 the upcoming version changes will act exactly like the move from 7 to 8, so keep at it! You'll be fine :)
It looks like in your [submission](https://www.reddit.com/r/java/comments/86esga/building_classes_jar_from_war_project_for_testers/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Support is human effort. If you need real support for your business, you should be compensating someone like Azul, RedHat, Oracle, etc.
&gt; These binaries will only have public updates until the next JDK is released, i.e. for six months, or two scheduled updates. Source, please?
Hmmm I’ll go and check again - I was sure I read 3 years somewhere. We will be backporting at Adopt regardless
Because there is/was no replacement for these APIs. If people start using your internal stuff you have to ask yourself "why" and "what do they do" and then you have to provide the necessary public APIs as possible. Also, completely locking away these internal things would not allow these applications to be created *at all*. Which feels a little bit like the discussion with Mozilla about XUL addons versus WebExtensions. Sure, it removes burden from the library developers, but it also makes it impossible for others to create amazing things.
All of the talking points in this thread are making me think that Java will lose popularity among companies. I guess it is the perfect time to invest heavily in another environment. 
Some folks might think about doing that, but the JVM is hard to beat. The Java ecosystem will solve any support shortfall that comes out of this new cycle, will just take a few months for the dust to settle.
var users = new Arraylist&lt;User&gt;(). Is really it, that's all there is to it. Only works for locally scored variables, users is type Arraylist. Does it really need all these articles. 
This has been happening for a year or two now. From Jan 2017 to Jan 2018 Java dropped 5 places in programming language popularity.
Personally, I'm not scared until languages running JVM as a whole start dropping. For example, moving from Java to Kotlin feels very natural and where I work all new projects use Kotlin instead of Java (we're heavily instead in JVM as a platform)
*Oracle:”0.00001 btc has been deposited into your account”*
wouldn't it make more sense for users to be of type List 
"List&lt;User&gt;" though. With var the variable is now the concrete implementation, not the interface. I don't know if this matters though.
http://mail.openjdk.java.net/pipermail/net-dev/2018-March/011276.html
Oooooh! Sweet. Thanks
If this is only for local variables, I don't see how it would matter.
Yeah I guess, and if you pass it to a method that declares the interface as a parameter, you're still fine.
Can someone explain why I would want this?
What if the class implements more than one interface?
It's Arraylist&lt;User&gt; as declared.
Interesting but the website doesn’t mention anything about doing LTS releases. 
With what exactly?
"Code is read much more often than it is written. Further, when writing code, we usually have the whole context in our head, and take our time; when reading code, we are often context-switching, and may be in more of a hurry." Perfect.
Has anyone successfully done this in an enterprise environment? I'd be interested to hear how it goes. We've looked into it but the number of non-modular external dependencies we have (spring boot, crypto, rest, orm, Camel, various client libraries) was intimidating. So far, we've opted to wait until more library maintainers catch up. Spring Boot 2 did just come out which might be modularized now? I forget.
allows you to use methods from anonymous class instances assigned to a var.
then declare it explicitly. How many times do you actually use ArrayList&lt;User&gt; users = new ArrayList&lt;User&gt;()? 
&gt; On the other hand, applying var indiscriminately can make things worse. I've been using var in C# for close to a decade. It has never been a source of confusion or otherwise made the code worse. On the rare cases I don't know the type from the context I look at the initializer's definition. I don't hover over the variable, because I want to know how that initializer works. *** What does cause problems? An over reliance on abstract interfaces. I can spend hours trying to figure out what code is actually being used. Knowing something is an IFoo doesn't help when I'm trying to fix a production issue.
Oh no [you're right](https://www.tiobe.com/tiobe-index/). I don't know which chart I got that from. It's clearly bs. I'll delete the comment.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
Yes I am running via intellij, but not just sudo I have other tools as well, like BWA which is a bioinformatic tool, and when I try to run that it doesn't give me the BWA output and I am not able to create a log file as well
Yes, my script runs perfectly via the console but not via java for some reason, also please tell me if there is any alternative to Runtime.exec which will help me run scripts much better 
To handle generic onion types: `var onion = new List&lt;Map&lt;String,List&lt;Map&lt;Integer,Pair&lt;?,?&gt;&gt;&gt;&gt;&gt;();` as opposed to: `ArrayList&lt;Map&lt;String,List&lt;Map&lt;Integer,Pair&lt;?,?&gt;&gt;&gt;&gt;&gt; onion = new List&lt;Map&lt;String,List&lt;Map&lt;Integer,Pair&lt;?,?&gt;&gt;&gt;&gt;&gt;();` Either one will make people cry, hence "generic onion type".
&gt; I've been using var in C# for close to a decade. It has never been a source of confusion or otherwise made the code worse. You want to change something, everyone "this will never work". You change it, everyone says "it's always been this way". It's just something stupid humans do. Few months from now everyone will be using `var` happily in Java and all doom-sayings will be forgotten. 
LOL. My wife swears that I start thinking "I've always done it that way" after I've done something three times.
The paper points out that your IDE should not dictate how your code is written. But in that case I disagree since the purpose of var is too make it shorter to type. Making things shorter to type is the job of the IDE. And "var myName =" is still longer to type than alt+enter and introduce local variable (if you're on IntelliJ you must use that seriously). That way you can always write the type explicitely. Also don't start writing a method when you feel you need one, just start putting your logic inside the scope you are currently in and only when you are done use ctrl + alt + m on selected block to extract to a method with right signature and choose the name. There are a ton of features like that, seriously, writting code is the job of the IDE, reading code is the job of the language.
For the record, by the way, I was trying to say "It's just something stupid *that* humans do" and not "It's just something *that* stupid humans do". We're averse to change, change is scary. But it's also inevitable. It's particularly surprising that even programmers haven't learned that, given the rate of change in our industry.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I love modules in Java, just like in other languages that support them. If I wanted everyone to mess with private code, I would be using something like Python or Ruby.
I agree things like ```final var outputStream = new ByteArrayOutputStream();``` are good, since they remove duplication from the statement. However, this I completely disagree with: // ORIGINAL List&lt;Customer&gt; x = dbconn.executeQuery(query); // GOOD var custList = dbconn.executeQuery(query); It even breaks their own principles 2 and 3. I cannot locally reason what the type of ```curList``` is from this, and either need to rely on my IDE to tell me or look up the docs for ```executeQuery()``` (after first looking up its type). Worse yet, by putting ```List``` in the name, they introduce potentially misleading and vague implication of the type, without the compiler checking the correctness for you.
Is Windows support planned?
&gt; the purpose of var is too make it shorter to type. &gt; writting code is the job of the IDE, reading code is the job of the language. I don't agree that the sole purpose is to make it shorter to type. I would even argue that's just a side effect. It makes the code shorter to make it easier to read (which matches your second thought with which I agree) in certain, very specific circumstances (e.g. new HashMap&lt;List&lt;YourClass&lt;Integer&gt;&gt;&gt;()) by allowing you to not repeat horribly long type signatures that impede readability.
&gt; I cannot locally reason what the type of curList is from this, You didn't know what they type was anyways. All you know is that it is something that behaves like a list of Customer. And that can usually be inferred by how it is used later in the code. 
Successfully done it, but not in prod :) Shameless plug: I'm working on a tool, which amongst other things, lets you add module descriptors to existing JARs to address the problem of non-modular dependencies you pointed out: https://github.com/moditect/moditect I can use it to add a Vert.x app and its dependencies (Jackson, Netty) into a runtime image (see the integration tests for an example). Of course there are limits, so if there are split packages for instance, this won't work. I think it can be useful in the meantime though, until more libs are available as modules.
I thought it would be possible to use it with methods return call but I was wrong, in that case yes I agree it is definitely redundant to have the type on both side or the type and the literal on the other. 
Thanks for letting us know - we will be updating that shortly!
I feel like I should point out that even in the modular JDK, (most of) the internal types that don't have a replacement are still available as usual in module `jdk.unsupported`. It's only the stuff that has had public replacements for a long time now (`sun.misc.BASE64Encoder/Decoder` being a good example) that has been strongly encapsulated. Seems like a good path to sanity to me.
&gt; since the purpose of var is too make it shorter to type No it is absolutely not, the purpose is readability. The idea is simply to remove noise.
[There are some APIs where this will be very helpful](https://blog.jooq.org/2017/11/20/using-jdk-10s-local-variable-type-inference-with-jooq/)
&gt; I thought it would be possible to use it with methods return call While that does seem superficially appealing, this was a deliberate design choice. The problem with this is that it allows implementation choices to propagate out into API, i.e. it is likely to infer a return type as something too specific e.g. `ArrayList` instead of `List`, which cannot easily be changed later as consumers of the API may depend on it.
lol, it's big step, we're trying to move to JDK8, and some new projects is already based on JDK8
Well the compiler will know the type. The issue in the 2nd case is that if you ever want to refactor Customer the IDE will not find that 2nd example if you find usages on the Customer class. 
It looks like in your [submission](https://www.reddit.com/r/java/comments/86jhae/run_an_decrypted_string_as_an_command/) in /r/java, you are looking for code help. /r/Java is not for requesting help with Java programming, it is about News, Technical discussions, research papers and assorted things of interest related to the Java programming language. Kindly direct your code-help post to /r/Javahelp (as is mentioned multiple times on the sidebar and in various other hints. Should this post be not about help with coding, kindly **check back in about two hours** as the moderators will need time to sift through the posts. If the post is **still not visible after two hours**, please **message the moderators** to release your post. Please **do not** message the moderators **immediately** after receiving this notification! Your post was removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
In the first case I know it is a ```List``` of ```Customer```s. In the second case I know absolutely nothing about it and have to go around, as you said, trying to infer what the type is—which violates their very own principle "Code should be clear from local reasoning".
Back to `StringBuilder.append().append().append()`
It won't let you press Ok unless the highlighted directory is a valid option. Check what's inside of these folders - there could be another directory directly inside it that contains the JDK. Also, make sure it's actually asking for the path to JDK and not for the JRE.
When i said no item works, it includes things inside folders too. I even copied "default java" and renamed it "open-jdk", so my situation would fit perfectly the procedure described on their website, but it was still unclickable.
No, I meant the Java program, not your script.
I don't know what those things in /usr/lib/jvm are. On my system they're symlinks. The JDK I use is installed in /usr/java. I don't know whether that's just my convention, or everyone else's too, so have a look in /usr/java and see if there's something more useful there.
What matters is the contents of the folder selected, not it's name. Unfortunately I dont know what else could be causing this. Does the folder contain a bin/ directory inside, with the javac compiler and whatnot? If the JDK was properly installed, javac should be in the path, so you can type `which javac` in the terminal to confirm the real location.
You should go back to PHP where you belong.
Your example is dumb, because your view on lvti is limited and the openjdk styleguide exactly tells you why. Please read and understand (!) the styleguide and the meaning of lvti before you further participate in these discussions, I really can't stand it anymore..
I don't think this is what you want. The ide uses a bundled runtime by default. If you want to adjust the SDK for your opened project, there is a) a hint that indicates you didn't specify a JDK and b) you can do it in File -&gt; Project structure -&gt; SDK, where you cann add a JDK. Try this.
[Please. Please. Please](http://openjdk.java.net/jeps/326)
It's `custList`, not `curList`. I fully expect `custList` to be a list of customers. And lo and behold, it is. I probably would have called it `customers`. It's still better than `x`, which was their point.
I don't know what they are either, it's the path given by the IntelliJ website
it has a bin directory inside yes, with javac etc.
I belong to OCaml, and it works with any random text editor, sadly i don't choose what i have to work with
&gt; a hint that indicates you didn't specify a JDK Thank you Sherlock. No JDK was proposed during the initial setup either, setting it now shouldn't change the situation
https://docs.oracle.com/javase/8/docs/technotes/guides/deploy/self-contained-packaging.html
I think this example is terrible for another reason. It's a terrible API. Somehow, there is a `dbconn` object which can take arbitrary queries yet return a lists of customers? // ORIGINAL var custList = dbconn.executeQuery(query); // GOOD var customers = customerRepository.findAll(); The `findAll` API clearly returns a collection of customers, so you could assume that the type of `customers` is at least `Collection&lt;Customer&gt;`. I think `var` works well along with APIs that set the proper expectations from reading the code.
So when can we expect a plugin, that locally replaces all 'var' words with the corresponding types for readability? 
Find Usages will likely be updated to support it once JDK 10 is out for longer than 2 days lol.
Could you give us screenshots for this one? Maybe some that aren't cropped that much, so we can see your project explorer etc.? (feel free to blur parts of the image) And sorry, I have to ask this question: Are you really sure that you have a proper JDK in these folders of yours? Please show us the contents of the folders. I'm still not sure what your problem is. Intellij is running, that means you don't have to change the runtime of the IDE itself. You want to update the *project sdk*. Show us a screenshot of the SDK selection dialog please.
And then in a year when people have to look back at the code that ignores all the recommendations for how to use `var` they'll remember all the problems with it.
Oh yes, it took me a while to get the hang of it (and how does it work with maven). Especially since the IDEs i tried were of no help (eclipse and the retarded one IntelliJ). That java.util.prefs "module" was a bitch. but i did get the hang of it and the application did compile. It would have ran (most likely) had it not been for google guice which apparently is broken on java 9 (has to do with the code generation, not sure) for now. But, it did left a bad taste i my mouth. It should have been seamless. If i don't want to use the feature i shouldnt have to. Oh well, now is done and I'll have to get used to it.
Well technically java does work with any text Editor too. 
Memory problems.
[removed]
Whoa, things improved. Years ago I had to use http://launch4j.sourceforge.net/
:-D
Yeah, it was such an obvious deficiency that even Oracle saw to fix it.
any text editor + a JRE + a JDK + a ton of building tools, yes
Pretty soon they'll want operator overloading. Stop this madness
&gt;var custList = dbconn.executeQuery(query); Sounds like C# makes the above illegal then
A jdk contains a jre. Also, you can compile everything by yourself using javav. Build-tools make your life just way easier. 
These days it is best to use java-packager, it is a tool that was added to the JDK in Java 8. It builds native executables with the VM included. If you write modular code in Java 9 java-packager uses jlink to only include the parts of the VM your app needs. The only drawback is that it can't create cross-platform executables. You need to run your build that includes running java-packager on each platform you want to create an executable for. https://docs.oracle.com/javase/9/tools/javapackager.htm#JSWOR719 Note that Java Web Start is deprecated and will be removed in the future, this was a great way to deploy java desktop applications. Sounds like Oracle is trying to get away from deployment mechanisms that require the user to already have a JRE installed (which, along with the need for a code signing cert, was a drawback to JWS).
If it's not a list of customers, then the variable name is wrong. It's as simple as that. If you're going to use `var`, don't use shitty variable names.
But people make mistakes, and we have a strong type system in Java specifically designed to catch these mistakes. And it allows you to do automatic refactoring, e.g., if you wanted to change the return type of ```executeQuery()```, the tools would not know how to change your variable name but would know how to change the type.
Normally, everything is dead simple with java and Java ides. Maybe you ran into https://stackoverflow.com/questions/47296429/properly-set-up-java-9-as-sdk-in-intellij-idea-on-linux-due-to-new-folder-struct/47850159#47850159 ?
Indeed the type shouldn't be part of the variable name. It's as bad as replacing `Car bmw = carOf(Brand.BMW);` with `var bmwCar = carOf(Brand.BMW);`. Don't do this. Actually don't use var at all in this context.
That's a bad news. When language are associated with guidelines then it means that the idea is bad. Modern C++ has 270 pages guidelines https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md IMHO, this is exactly what should be avoided by a language
The return type does not matter much, remember that vars have a very small scope, so you almost immediately use them anyway. They're used for intermediate throwaway variables which are essentially placeholders.
Guideline G5. breaks guideline G2. Was this even reviewed? 
&gt; var total = calculateTotal(); // is this a Long, a Double or a BigDecimal? Simply, that's a Slap The Developer For Either Not Including calculateTotal In The Code Review And/Or For Giving The Method/Variable A Terrible Name Yes, `var` can make code hard to read if you do stupid things with it.
But does it work?
So why is `var` allowed for method calls? There's no redundancy when calling a method.
Because it’s more convenient easier to read. I’ve used it without a single problem for a decade in every language that supports it. 
I like streams. I don't like that I can't use primitives which makes it extremely slow.
8? Hmm, I don’t know 
There are primitive streams like IntStream, LongStream, and DoubleStream. I think you are also able to use booleans indirectly by using the results of a boolean operation as a Predicate in a filter. I'd be happy to talk to you about specific problems you're facing.
I'm not asking if the shell script works. I'm asking if, when you run your java program from the command line, like this: java com.mydomain.MyClass Does it work?
1 and 6
Incorrect.
I thought the ship was related to either “shipping that code” or as connection to the docket hype, which might or might not be hilarious 20 years down the road should docker be totally gone by then and Jakarta EE still be there.
Explain. As far as I know all operations in Streams are done on Objects and not directly on the primitives. There's always wrappers involved. This makes it significantly slower. I'd love to hear why this is false because I love the syntax of streams.
I distribute our internal java FX app using https://github.com/edvin/fxlauncher works for us but iirc it still doesn't support j9. 
From the documentation of IntStream: &gt; A sequence of primitive int-valued elements supporting sequential and parallel aggregate operations. This is the int primitive specialization of Stream.
3
TIL that `Comparator.comparing()` exists 
*typically
2 looks nice and enterprisy. 9 is awful. 
Well, you're wrong, because as /u/anvils-reloaded says, there are separate primitive-typed streams. If you look at their API you'll see that it's entirely primitive-based, using primtive-typed versions of functional interfaces as parameters, like IntUnaryOperator and IntPredicate. If they used wrappers, you wouldn't need different classes and interfaces for all this, you could just use the regular Stream.
Then why is it so slow?
Eclipse is a long term release product. I doubt it will support short term releases, just my opinion. I advise strongly against using short term releases of anything, also just my opinion.
 new Runnable() { @Override public void run() { } public Runnable method() { return this; } }.method().run(); woo
1 || 2 || 3
[removed]
Well stated, excellent points.
Doing the right thing for the wrong reason doesn't make it less right.
Right, was just pointing out that its use is rather limited. I actually tried it when I was experimenting with JavaFX. It worked.
Agree but var unfortunately hurts more than it helps, see the comment from https://www.reddit.com/user/njetwerk
For writing code it's fine. For reading code there are definite cases where it creates more page jumping and IDE hovering to "figure out" what should be obvious, in C# as well.
2 = enterprisy like /u/Tac0w says 3 &amp; 6 look modern and nice too My vote is 6
It works without JavaFx.
&gt; native executables I don't think native executables would require a virtual machine.
I beg to differ, you've never had to do horrible things like `SomeClass.&lt;String, Integer&gt;someFunction(someLambdaWhoseGenericTypesDontFlowOut);`?
They all look so generic, they kind of remind me of generic malware logo.
Three
What kind of applications do you write where that matters? One network call or disk operation is magnitudes slower than any overhead of Java streams or wrapping a primitive in an object could introduce
I'm torn between 3,5,7 and 8. I'd suggest to start applying genetic algorithms on those and see what comes out.
Holy shit it's like they only solicited submissions for 3rd graders. That being said I'm okay with 2 and 3.
1. Comes off as nothing technical really. More like a hotel chain or an investment bank. 2. Enterprise-like, not bad. 3. Is that a sailboat? 4. Pretty neutral to this, can't quite decipher the logo other than it being a sextant. 5. Again neutral, not the best on the least and definitely not the worst. 6. Reminds me a lot of the cloud9 eports. 7. It's alright. 8. Good but did they just rip off the Udacity logo? 9. That's basically like the HTML/JS/CSS logos but now for Jakarta. All in all - pretty indifferent to a lot of them, but if I had to vote I would say 2.
Can you clarify what you mean by "slow"? Like show us some code of "slow" and "fast"?
Yep. We can name it: https://angularjs.org/
Interesting, thanks for the insight!
No coffee cups or beans or Duke. Sad.
I think 3 is a flame and intended to be related to the [Jakarta National Monument](https://en.wikipedia.org/wiki/National_Monument_(Indonesia)) in Jakarta, Indonesia which has a flame at the top of it.
Posted this in another thread, but regarding (3). &gt; I think 3 is a flame and intended to be related to the [Jakarta National Monument](https://en.wikipedia.org/wiki/National_Monument_(Indonesia)) in Jakarta, Indonesia which has a flame at the top of it.
 var work = new Runnable() { volatile int state; public void run() { } }; new Thread(work).start(); work.state = SOME_VALUE;
1 and 8 for me.
If a language feature needs guidelines for its proper use it is a BAD feature.
9 is way too close to AngularJS' logo.
It looks like non-modular external dependencies do not block jlink. per the article: &gt; The jlink tool is great if we have an application that has been developed with explicit modules. What about if we want to use jlink for an older application where everything is still on the classpath? We can still use jlink, but we need to do a little more work. We’ll use the same example application but this time remove the module-info.class files from the jars and put them all on the classpath. To use jlink, we need to know what JDK modules we require and we can use jdeps to find this information: $ jdeps --list-deps -cp zapplib/*.jar Zapp.jar java.base java.logging java.sql unnamed module: zapplib/Zeta.jar unnamed module: zapplib/Zoop.jar &gt; We can now use jlink to build our runtime, thus: jlink --module-path $JAVA_HOME/jmods --add-modules java.sql,java.logging --output zappruntime &gt; Strictly speaking, we don’t need to specify java.logging as a module to add since it is required by java.sql but, since I used logging in the application I wanted to show the full process. &gt; Checking which modules are in the runtime we get: $ zappruntime/bin/java --list-modules java.base@9.0.4 java.logging@9.0.4 java.sql@9.0.4 java.xml@9.0.4 &gt; Lastly, we can copy our jar files into the runtime generated by jlink. For our example we’ll put them all in a directory called dist. Now to run our application we can do this: $ zappruntime/bin/java -cp ‘zappruntime/dist/*’ com.azul.app.Main &gt; As you can see, whether you want your application to use modules or stick with the classpath for now, it is easy to build a Java runtime tailored to your application. The advantages of doing this are reduced size requirements and eliminating concerns of having the exact version of the JDK to support the application. 
Logo #6 looks like the logo of the esports team Cloud9... way too close to it.
You should buy a computer 
But I read the thing and it doesn't follow its own principles! Case in point, principle 3: &gt; P3. Code readability shouldn't depend on IDEs. Then you find this is in the guideline: ``` var custList = dbconn.executeQuery(query); ``` Which should be a "good" replacement for ``` List&lt;Customer&gt; x = dbconn.executeQuery(query); ``` When the appropriate thing to write would be: ``` List&lt;Customer&gt; custList = dbconn.executeQuery(query); ``` Instead of using `var` as suggested - you will still depend on an IDE to grok the code.
I really like 3. 9 looks like another framework (Angular maybe?) and 2 has too much going on for me.
Set a goal. Make it something you want to do. Maybe you want to make a game. Figure out what you need to know to make it happen. If you’re willing to learn more, include things you don’t already know. Work on it consistently. Repeat 
Startup time is nicely improved in Java 10.
But at the time you are writing that code I bet in the programmer's mind it will make total sense to come up with `var total = calculateTotal();` as it doesn't look too bad at first. I doubt anyone would write `var doubleTotal = calculateTotal();` or `var total = calculateTotalAsDouble();` as these are way worse. The evil thing with `var total = calculateTotal();` is that code rarely shrinks. A not entirely bad construct tends to grow over time and the lack of an explicit type will likely cause some cognitive overhead to the maintainer of the code. The silver lining is that our IDE's will probably have an "un-var" feature that replaces the `var` keyword automatically with the explicit type declaration.
Yes, I just upgraded to JDK 10, and everything works flawlessly for me. I am using Eclipse Oxygen. Which version are you using?
Great job and welcome to the world of maintaining an open source lib! You should really consider uploading it to maven central, I doubt many people download jars manually nowadays :)
Ok. I'll look into it.
Yeah I agree that it could be seen as a code smell. It would have been nice if Stuart Marks mentioned anonymous classes in the style guide for the var keyword.
The only reason `var custList = dbconn.executeQuery(query);` is bad is because they left out the context it's used in, specifically what `query` is. At a guess, `query` is a `TypedQuery&lt;Customer&gt;` or `CriteriaQuery&lt;Customer&gt;` and if you see that in the code near `var custList = dbconn.executeQuery(query);` you can pretty much figure out that it returns a `List&lt;Customer&gt;`.
Ok. I'll work on my variable names. I guess they should match the style of the method names. I did start making some of the classes and methods not static so that they could be instantiated. I will keep working on that. I also agree with you on the "broken" annotation, but I do find it useful when I'm in a hurry to wrap something up that doesn't quite work yet. It helps me quickly find where I left of when I pick back up. But I do make a point to fix broken code as soon as possible. I am fairly new to this, so what would be the best way to test my code? By the way, thanks for looking at this :)
&gt; all of your classes are using static variables, which is not something you do in most cases within java. Unless they are utility functions in the style of Guava or Apache Commons
That is what I was aiming for, but I do agree that some methods should not be static
The one with the J in it.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I just saw that some of the classes contained state. Static methods don't typically access state of the class they reside in. Of course there are exceptions.
C++ has had operator overloading for way more time than a decade. Doesn't mean it's a good idea.
Indeed, I used the wrong terminology. Fixed it.
I still hate the name. They should drop the EE. It implies there is some other Jakarta that is not enterprise.
Java INI parsing library: http://ini4j.sourceforge.net Commad-line parsers: http://commons.apache.org/proper/commons-cli/ (there are several of these out there) 
What’s annealing?
I'm getting the same thing. Came here to find out if anyone had a solution. Has someone messaged you yet?
How about Weka? http://weka.sourceforge.net/doc.dev/weka/classifiers/bayes/net/search/global/SimulatedAnnealing.html
Nothing yet, and I had a third person in a different region than I am in also verify. All I can think is routine site maintenance and that this is Oracle's way of telling me to get a life! 
Hahah, but I wanna try spring boot!!!
Oo! I found this: http://jdk.java.net/10/
What would be the benefit of custom JVM implementation?
take a look at the apache commons stuff
9 reminds me of cancer. 2 is interesting. 6 looks nice. 
It's down for me, too. I should probably go to bed, but I really wanted to try something first. Eh...
I also like the number 2. Number 3 is also nice.
I like 3, unironically. Colors and shapes seem the least lame.
You are the real MVP! Was able to get the latest version 8 from that site as well. I've never purchased Reddit Gold in order to gild someone before, but there is a first time for everything. Thank you! 
If you’re talking strictly backend development, try building your own micro-service using Spring Boot, Netty, Vertx, etc. If you’re feeling ambitious, develop a front end for it as well, maybe using Angular or React, and put it up on the Internet. You’ll need a web server as well. You could try good ol’ Apache or Nginx. If you finish that whole project, you’ll have a very good understanding of whole stack development from end to end. This would also make you a better backend developer at the same time.
3 is a clipper. It's definitely not supposed to be related to the monument because the trademark rules restrict any reference to Jakarta, Indonesia.
There's always [Azul Zulu](https://www.azul.com/downloads/zulu/) if you don't insist on Oracle JDK.
Java 8 resolved a lot of places were one had to be explicit about generics on the right hand side for _static methods_ - but there's still a few places where that part of Java's (already existing) type inferencing wasn't able to work things out. My understanding, the problem lies where the return type of the static method is determined by the type of the assigned value, and that type is also used as part of a method argument - when type inferencing starts at the inner call - it's return type is still an unknown generic and fails ( rather than continuing to walk to the outer call, and discovering the result was say, assigned to `String` and weaving that type all the way back to that original call. In my contrived example above, when the assignment would be `String foo = SomeClass....` you're probably right, there may be limited use, I was more pointing out that there _is_ redundancy when calling a method, in _some_ cases. If the function was actually returning `List&lt;Map&lt;Integer,String&gt;&gt;` then the redundancy would be much larger on both sides of the call, and here - use of `var` may be useful for readability. I wonder if there's actually been any improvements in this particular case since the introduction of `var`, being able to drop the generics from the invocation would also be nice - must try this.
Are there any plans for JEPs covering `"$string interpolation rather than " + "concatenation"`? I like the _raw strings_ JEPs I've been reading/following, and understand that interpolation specifically isn't covered by this. Would love seeing something like this, altho part of me already seems areas for danger, that almost makes me want something like: ```java public interface StringIterpolateable { default String toLocalisedString(Locale locale) { return this.toString(); } } ``` and _maybe_ let `Object` implement it. This way, we have backwards compatibility, but also the ability to provide a non-debug display representation, that could be localised if needed. 
For pre-java9 yes, Jigsaw/Multi Release Jars is a sore spot at the moment I believe for tooling. * Jigsaw for backwards compatibile/module path issues, and behavior machines * MRJs for best-practises over new versions of source, maintaining multiple versions * Combinatorial testing becomes quite the nasty I think. I think it'll be awhile til a good set of best practises, and tooling to support that will be ready for mass adoption. _Hopefully_ by the time Java 11 lands a lot of that could be addressed. And if that means dropping Maven for Gradle, or some other build tool that has more of a 'programmable' model, that just may be the game we have to play. 
so, u try it &lt;: https://www.mediafire.com/file/2fjkd856pfhd25p/pro_spring_mvc_with_web_flow.pdf and practice
Before starting to go straight into web development just spend a month and understands how TCP sockets work. Build a simple chatroom app. Also use some threads. Don't get me wrong this type of work is not mondatory for being a web developer, but getting to understand how the underlying protocols work is good for a nice foundation. I mean you are going to use TCP (without even notificing) in every aspect of web development. It's good to know the basics. Afterwards just jump into the world of Spring (Boot). And build a rest API, secure it with jwt tokens, connect to a database, etc. 
Honest the official docs are pretty good. You can't really learn Spring without understanding configuration, dependency injection, and a few of the other major themes. MVC is very dependent on these modules. Thus the Spring In Action book is a good high-level overview, and then hit the Pro Spring MVC and the Spring Pet Store code for further learning. 
It's totally clear that you read the article but didn't understand it. In the given example literally no one on earth has to now the exact type as long as custList or (better?) customerList indicates that it is a list of customers. This is way enough to get a coarse view what the code does and it will read better (please just trust people doing this for a decade in other languages instead of assuming sth negative , biasedur theoretical opinion). Since the return type of the function is still explicit, this is only local, so there will not be a problem.
&gt; This is way enough to get a coarse view what the code does and it will read better The problem with a "coarse view" is that it's not a precise view. Is the "customer" in the variable name refers to a `interface Customer` or a class `BusinessCustomer` or whatever? You can't fucking know. Having the type declared on the left hand side of a method call leaves ZERO doubts about what the variable holds. Once again, principle 3: &gt; P3. Code readability shouldn't depend on IDEs. 
3 or 6 ia good. But I prefer 3 than 6.
Cloud 9.
where to cast the vote?
Thanks, man.
Here more info: https://dev.eclipse.org/mhonarc/lists/ee4j-community/msg01237.html
/r/javahelp and you need to be way more elaborate.
&gt; hink it might be too large to be a kata. &gt; &gt; Katas are meant to be simple and repeatable motions that build up muscle memory and confidence. In a coding setting, a kata is similar in that it's meant to be repeat Yeah right... I should call this task. This is good task for recruitment task.
Don't understand why do you post this
6 - 9 - 7 
`apt install openjdk-8-jdk` 
I did look at the Apache commons, and tried to take some inspiration from it. I just found that it's so big, and I don't need many of the things it contains.
Yup 404 for me at 10:50 UK time. (in the UK obviously :P)
Ok. I will post something there.
is it any good for low memory applications? say a -Xmx512m app?
Hey thank you man!! Can you also give the rpm link?
This is the best there is: https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/web.html#spring-web
[removed]
6 appeals to me, but I have no idea what the logo is supposed to represent. I dug 8 until I looked closer and don't really think MC Escher is the kind of architecture you want to associate with. I sort of like 1, but I wonder if the sailboat could be made a little clearer without wrecking the clean 'J'. I'm not in absolute love with it, but if I had to pick one it would probably be 7, because reaching across the globe says "Enterprise" to me.
the same happens to me from mexico. Error Page 404 We're sorry, the page you requested was not found.
404 for 8,9 and 10 Something happened?!
Do you mean the so called "type witness"? If you try that tell me of the result please :)
#2
I’ll just take it as an unintended Easter egg then.
Note that this is the OpenJDK, which varies slightly from Oracles HotspotJDK. There are also other builds such as [OpenJ9](https://www.eclipse.org/openj9/), [Zulu](https://www.azul.com/downloads/zulu/) or [Red Hat](https://developers.redhat.com/products/openjdk/download/).
It's generally accepted that streams are orders of magnitude slower than classic loops for the same thing.
WTF
For Spring boot This is a good book for beginners https://www.amazon.com/Pro-Spring-Boot-Felipe-Gutierrez/dp/1484214323 This book teaches all good concepts with code implementation on Microservices In spring boot https://www.amazon.com/gp/aw/d/1787127680/ref=dp_ob_neva_mobile
It's allowed because sometimes the type is either unimportant or clear from context. If you think that the returned value from a method should *never* be used without explicitly typing it at the use-site then I have to assume that you never ever chain or nest method invocations? The only difference there is that at least inferring a local means you can name it.
If I chain method I normally don't need intermediate, throwaway variables otherwise I create them. I can see that it can help readability in some cases, but in many it makes things very difficult to read and it interrupts the reading flow (takling about var on method calls). I'm not sure if the few beneficial cases are worth it. Or in other words, I don't trust the community to have a keen eye on the difference and balancing the pros and cons, given what happened with Optionals and Annotations.
Thanks, I'll edit it. I missed the "Drop binaries" there.
That is not a good download either. It is early access.
My vote is for 6
haha good ol' RTFM. Thanks!
hah, thanks! Looks like the book itself is pretty well priced so going to try and buy it after reading reviews. Appreciate the tip. 
This. Also, if you're on anything but Windows, you can use [SDKMAN!](http://sdkman.io) to install the JDK and other JVM tools.
[Oracle employee] Temporary outage being worked on. A notice has been posted on the main download site until this gets resolved. Of course the notice itself is subject to caching delays so you might not see it yet depending on your geo. OpenJDK binaries are not affected (as already called out in this thread). 
Oracle's downloads appear to be broken for everything. They now have a notice posted on their download page. "Temporary download outage Downloads for the most recent versions of the JDK, Server JRE and JRE are temporarily unavailable from this site. Downloads for OpenJDK binaries remain available at jdk.java.net"
It's one connection with interleaving frames, not one request.
[Oracle Employee. Update] Issue has been resolved. Downloads are working, outage notice has been removed. Takes several minutes for all geos to be updated so if you still see outage notices or have trouble downloading give it a few.
3 or 8
&gt; We’re experiencing an outage with our CDN provider affecting the JDK downloads. Expect it to be back shortly. Apologies for the inconvenience [[src](https://twitter.com/java/status/977593186284531712)] 
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](https://twitter.com/java/status/977593186284531712) - Previous text "src" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
People shouldn't be so quick to downvote, this is indeed how HTTP2 has been sold by a lot of people, It's still the same number of "requests", but they are now being multiplexed on the same connection. You can see how this eliminates the queueing of requests in the network tab of your browser. From the chrome networking readme: ### Queueing. The browser queues requests when: * There are higher priority requests. * There are already six TCP connections open for this origin, which is the limit. Applies to HTTP/1.0 and HTTP/1.1 only. * The browser is briefly allocating space in the disk cache 
Java and Java**Script** are two *entirely different languages*. This subreddit deals exclusively with **Java**. **Post removed**: Java**Script**
Four is the most interesting and reminiscient of Java but I don’t know how a sextant relates to anything.
A heuristic search method, I think Steven Skiena explains it best here. https://www3.cs.stonybrook.edu/~algorith/video-lectures/1997/lecture21.pdf
This search class is specific to the BayesNet classifier (package weka.classifiers.bayes), so I doubt that I'll be able to use them for my problem. But thanks!
Honestly, if I were to need these at some point I would pull in libraries for the specific cases. Maybe JOption for command line parser, maybe something for OS system checker. Perhaps you might want to reconsider breaking these into different pieces. I know your readme specifically calls out all in one approach, but I would find that annoying and bloated honestly. If I only want the command line parser, why would I want to bring in the beta/broken annotations? I like that you’re compiling it all into one thing. Perhaps splitting it into modules all under be same group id would let people pic and choose, but if you keep the parent group/package the same you can still effectively use “one import”? 
Many of the "commons" libraries built out there follow this logic. Yet, that was the logic that get Apache Commons started in the first place. That said, let's just say that your library is doomed to become as big as Apache Commons one day... :-) My advice: find what's missing in Apache Commons, and contribute back. And finally, I suggest reading about the Module system in Java 9+. Perhaps you can modularize your library, or better yet: help modularize Apache Commons. bb.
Congrats
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
(Good advice; just reformatting slightly to make it easier to read for anyone else that sees this thread) you’ll wanna learn: * how processes communicate over the internet: - http - REST - how servers handle requests * database technologies: - Relational databases - SQL - maybe NoSql things like key value stores. * how to communicate with above DB technologies+how to store and retrieve data. * dependency management and build tools - eg. Maven * Spring - spring docs are really good, just read the entire thing, you will learn a ton just from that. - There are other web frameworks out there but just start with this one. - Once you know it you can apply its principles to other frameworks if you want. - Easiest way to get started with spring is the spring-boot starter projects. * You probably already know some testing but continue to learn more about it and how to write tests for the new things you’re learning as you go.
A few comments. Don't take them as criticisms, but as places for you to learn and improve. We were all inexperienced at one point or another, and made plenty of mistakes. Hell, at point point, I used to write functions like: if (condition) { return true; } else { return false; } * I'd start by separating different functionality into different packages rather than having everything in one place. * If you're going to use Maven, don't fight the directory locations; it's well known and well understood * Other people have mentioned following the Java style guidelines. We use this because it means that anyone can read your code and instantly understand it. Your use of CamelCase for variable names instead of camelCase will confuse people because they'll expect them to be class names. Your constants aren't UPPER_CASE, nor are your enum members. I recommend reading the Google style guide as that builds on the old Sun style guide and Elements of Java Style for newer features. * Do not use publicly writeable members. A case in point is Config.SetFile. Look into immutable objects and why they're preferable. At a minimum, your classes will not be thread-safe. * `Log` has no purpose in a world with SLF4J or even log4j. They have better features and used throughout all your dependencies. * You should use interfaces where possible rather than concrete classes. You can also use to diamond operator here, and let type inference work out the type of the `HashMap`. This is extra confusing because `Map.Entry` is a class in the JDK. public HashMap&lt;String, String&gt; Entry = new HashMap&lt;String, String&gt;(); should be private Map&lt;String, String&gt; entry = new HashMap&lt;&gt;(); * Config.deleteFile() completely ignores any error conditions. You should pay attention to the return value of File.delete(). Better yet, use `java.nio` and `Files.deleteIfExists()` that throws an exception. public void deleteFile() { SetFile.delete(); } * flushEntryBuffer() has a pointless assignment of `null`. This doesn't do anything. Just assign a new `HashMap`. public void flushEntryBuffer() { Entry = null; Entry = new HashMap&lt;String, String&gt;(); } becomes public void flushEntryBuffer() { entry = new HashMap&lt;&gt;(); } or public void flushEntryBuffer() { entry.clear() } `Map.clear()` is optional, but `HashMap.clear()` is implemented. * I don't understand the point of `@Documented`, `@Beta`, `@NotImplemented` or `@Stable`. Just add a comment in the Javadoc or don't release libraries with functionality that's not ready for use. * `java.lang.UnsupportedOperationException` is the standard way to indicate that a function is not implemented. * `WebProtocol` is an enum, but only has a limited selection of protocols. It's not generally useful. You can't use it with URL for example, because it doesn't include "jar" or "file" (and possibly "classpath"). Enums are useful for closed sets. Protocol is not a closed set, because anyone can add a new protocol. For example I remember a "spotify" protocol that allowed your browser to launch Spotify to play a song/album/playlist if someone shared a link. * Similarly with `HashAlgorithm`. You're missing a lot of important hash algorithms. What is someone wants to use a new algorithm when SHA-512 is broken? * LocalPath should refer to [the system properties](https://docs.oracle.com/javase/tutorial/essential/environment/sysprop.html) to find things like temp directories and users home directories. You're making huge assumptions about where a user's home directory is. Also, the code won't run on Solaris or FreeBSD or any other operating system. * Your commit messages could do with some improvement. "This is it." tells me nothing about the change. Read https://chris.beams.io/posts/git-commit/ and take it to heart. If you do you'll be better than 95% of developers. * Never use `Exception.printStackTrace();` . It writes to stdout, but most java applications use a logging framework like SLF4J to record exceptions. If you write to stdout, it won't appear in application logs, making debugging harder. * You don't use try-with-resources. This means you fail to close resources properly. FileInputStream FileInStrm = new FileInputStream(FromFile.toString()); ... FileInStrm.close(); should be: File file = ...; try(InputStream in = new FileInputStream(file)) { ... } This way the inputstream gets closed no matter what happens inside the block. I'm sure I could find more issues that you could improve, but this should give you plenty of places to look into improving your skills. I highly recommend reading Effective Java by Joshua Bloch. It's possibly the best investment you could make to go from an intermediate developer to advanced.
A few comments. Don't take them as criticisms, but as places for you to learn and improve. We were all inexperienced at one point or another, and made plenty of mistakes. Hell, at one point, I used to write functions like: if (condition) { return true; } else { return false; } * I'd start by separating different functionality into different packages rather than having everything in one place. * If you're going to use Maven, don't fight the directory locations; it's well known and well understood * Other people have mentioned following the Java style guidelines. We use this because it means that anyone can read your code and instantly understand it. Your use of CamelCase for variable names instead of camelCase will confuse people because they'll expect them to be class names. Your constants aren't UPPER_CASE, nor are your enum members. I recommend reading the Google style guide as that builds on the old Sun style guide and Elements of Java Style for newer features. * Do not use publicly writeable members. A case in point is Config.SetFile. Look into immutable objects and why they're preferable. At a minimum, your classes will not be thread-safe. * `Log` has no purpose in a world with SLF4J or even log4j. They have better features and used throughout all your dependencies. * You should use interfaces where possible rather than concrete classes. You can also use to diamond operator here, and let type inference work out the type of the `HashMap`. This is extra confusing because `Map.Entry` is a class in the JDK. public HashMap&lt;String, String&gt; Entry = new HashMap&lt;String, String&gt;(); should be private Map&lt;String, String&gt; entry = new HashMap&lt;&gt;(); * `Config.deleteFile()` completely ignores any error conditions. You should pay attention to the return value of File.delete(). Better yet, use `java.nio` and `Files.deleteIfExists()` that throws an exception. public void deleteFile() { SetFile.delete(); } * flushEntryBuffer() has a pointless assignment of `null`. This doesn't do anything. Just assign a new `HashMap`. This: public void flushEntryBuffer() { Entry = null; Entry = new HashMap&lt;String, String&gt;(); } becomes public void flushEntryBuffer() { entry = new HashMap&lt;&gt;(); } or public void flushEntryBuffer() { entry.clear() } `Map.clear()` is optional, but `HashMap.clear()` is implemented. * I don't understand the point of `@Documented`, `@Beta`, `@NotImplemented` or `@Stable`. Just add a comment in the Javadoc or don't release libraries with functionality that's not ready for use. * `java.lang.UnsupportedOperationException` is the standard way to indicate that a function is not implemented. * `WebProtocol` is an enum, but only has a limited selection of protocols. It's not generally useful. You can't use it with URL for example, because it doesn't include "jar" or "file" (and possibly "classpath"). Enums are useful for closed sets. Protocol is not a closed set, because anyone can add a new protocol. For example I remember a "spotify" protocol that allowed your browser to launch Spotify to play a song/album/playlist if someone shared a link. * Similarly with `HashAlgorithm`. You're missing a lot of important hash algorithms. What is someone wants to use a new algorithm when SHA-512 is broken? * LocalPath should refer to [the system properties](https://docs.oracle.com/javase/tutorial/essential/environment/sysprop.html) to find things like temp directories and users home directories. You're making huge assumptions about where a user's home directory is. Also, the code won't run on Solaris or FreeBSD or any other operating system. * Your commit messages could do with some improvement. "This is it." tells me nothing about the change. Read https://chris.beams.io/posts/git-commit/ and take it to heart. If you do you'll be better than 95% of developers. * Never use `Exception.printStackTrace();` . It writes to stdout, but most java applications use a logging framework like SLF4J to record exceptions. If you write to stdout, it won't appear in application logs, making debugging harder. * You don't use try-with-resources. This means you fail to close resources properly. This: File FromFile = ...; FileInputStream FileInStrm = new FileInputStream(FromFile.toString()); ... FileInStrm.close(); should be: File file = ...; try(InputStream in = new FileInputStream(file)) { ... } This way the inputstream gets closed no matter what happens inside the block. I'm sure I could find more issues that you could improve, but this should give you plenty of places to look into improving your skills. I highly recommend reading Effective Java by Joshua Bloch. It's possibly the best investment you could make to go from an intermediate developer to advanced.
Thanks! new to reddit haha
Where does Guava provide public non-final static members?
What do you find hard? What do you want to test? Depeding on the answers, the solutions could be very different.
Java can produce stand alone exe's now. That's impossible with C#.
&gt; I was just tired. That's no excuse. Either do it properly or do it in the morning. That's not the only bad example. Most people's commit messages could do with improvements. As I said, follow that guide (and none of your commits do) and you'll be better that 95% of developers in that regard.
If you're passing services in as arguments to your methods, you have not understood dependency injection. You should be injecting them *once* in your constructor. Your data objects **absolutely** should not have services in it. Your `DomainRegistry` makes testing using alternative implementations, like mocks, impossible, completely defeating the purpose of DI. Under no circumstances should anyone follow the advice in the article.
&gt;The more robust your tests are, the more confident you should feel that your code is bug free. No, no, no. The best you can say with robust tests is that the code is well tested. Even the most robust tests with JUnit will not assure you that your code is bug free. The most ardent promoters of TDD do not claim what you've asserted here. 
How do you want to pass spring beans into persisted domain aggregates on construction? Hibernate recreates object from db. When then I should pass spring beans into construction? It is normal in DDD that you pass domain Services or Repos into aggregate metod to allow them perform complex operstions on for example their inner children. Im Just presenting VERNON concept from his book on examples. BTW my repository has a lot of tests with DomsinRegistry. I dont know why testing should be impossible we have simply interface that can be mocked. 
This is a promotion for a java-based hackathon, the fact that it is blockchain tech is completely irrelevant to that fact. Or can people somehow not promote hackathons anymore just because you don't like the software? Microsoft must have a hard time on the boards. 
My favourite too
&gt; Hibernate recreates object from db. When then I should pass spring beans into construction? STAHP! Why do you have spring beans in your entities? You're doing it wrong. Very very very wrong. 
I pass them to complex aggregates to perform domain operations. I pass them as method parameters. I do not assign them in aggregates, just use with association relation. Why shouldnt I? It is normal in non anemic systems to pass domain services (treated as normal domain objects, don't confuse them with application services - which orchestrate domain). 
Just out of curiosity: Is there a special reason I'm not thinking about to retrive the spring beans by name instead of using the type-safe variant: https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/BeanFactory.html#getBean-java.lang.Class-
2 looks great, but all I could think is how 6 looks like the Cloud 9 logo (esport clan).
He was talking about confidence. And from my personal experience I do agree. Every time a unit test discovers an defect my confidence grows.
I guess no. For me retrieving beans by type is much more safe than by name. By type you may spot bug on compile time. By name only during runtime. 
[removed]
If you want help you should explain what troubles you're running into. We can't help if you give us no information. Also, like the sidebar says, questions like there are more suitable for /r/javahelp
Domain objects should be framework agnostic. Ideally, they should be written in plain language. They are not good place for Spring magic... How then should I test well encapsulated object where @Autowired magic happens? I'm not able to pass these dependencies during unit test.
Test them using Mockito
This! In DDD an aggregate contains only entities. If you have anything else inside, it's a smell that something might not be right. If you need to perform behaviour which is outside of an entity's capabilities look at the other building blocks, e.g. Service. 
Again ... Domain objects in DDD should be framework agnostic as much as possible. Secondly, I do not want to bind services/repositories into domain objects. I just want to use them in domain objects methods.
It can be done like you said - service orchestrates domain. And I've also used to do that. In current job I'm working with guys with 15+ years experience, and they passes domain services (which are NOT application services mentioned above) into aggregates. And this works nice and is clean. I do not see why this can be considered as code smell. What are cons of this approach? There is not need to prepare all required objects into application service and then push them into aggregate to perform task. I'm just showing another approach. 
&gt;should be framework agnostic... I do not want to bind services... You choose, you pay. 
Start simple by testing stuff like equality and hashCode for pojos. Feed your pojos with nonsense. Step by step get to your business logic in which you use the pojos you have already covered. Tackle the service layer (rest maybe) if you feel bold enough.
There are tests generators, I know about codepro analytix, but it looks like it's not available anymore. They can eliminate some "typing".
I must have read too quickly. I meant static methods.
While I'm no expert in face recognition software this sounds to be an extremely ambitious project. Image/face recognition is one of the more difficult fields in Computer Science. You could start looking here for basic face tracking: https://github.com/opencv-java/opencv-java-tutorials/blob/master/docs/source/06-face-detection-and-tracking.rst
To add to this: With javas style of having one method do one thing, if your method does not do one thing then it might be harder to test. Perhaps try to write your code with testing in mind, as you think of all edge cases add a comment in your test method to test for that case. This might help your code style and readability because you can explain why each chunk is there. *Take this with a grain of salt as I am a student in Uni with only academia experience*
[More on TLS 3](https://blog.cloudflare.com/introducing-tls-1-3/)
**Sidebar** -&gt; **NO programming help, NO learning Java related questions!** 
**Sidebar** -&gt; + **Do not post tutorials here!** These should go in **/r/learnjava**.
JUnit 5 is a significant improvement, but that said, JUnit is not the easiest testing tool in the world. You might benefit from looking into BDD with tools like SpockFramework or Cucumber-Java. I like Spock best as it really makes parameterized testing simple as well as making Mocks/Stubs/Spys almost idiot proof.
There's no new information in this article beyond the four JEPs that we already knew about. We probably won't know for sure for at least another three months.
Thanks for saving me a click.
Isn't it fantastic marketing how they manage to mention Spring at all in this context? Spring offers many solutions to the mentioned problems and can be used in a fully reactive way. 
I had some experience with CQRS and just feel that making injection of new deps harder may lead to growing aggregates into shitballs of code. Also, all this 'framework-independent' claims usually end up with legacy project with the same framework. But with tons of workarounds that pollute code. This DomainRegistry is a good candidate to become a trash can that indirectly links any object with any service. IMHO, your price won't pay back. 
Since this is help with *Java programming*, it should be, as the *plenty hints* on the page indicate, posted in **/r/javahelp**. **Removed:** Programming help
/u/throwaway_for_cause already said it: + **Do not post tutorials here!** These should go in **/r/learnjava**. Further, since your tutorial was not very well liked here, I suggest that you don't bother reposting there. **Removed** tutorial
JDK 11!? Didn’t Java 9 just come out like a few months ago? Shouldn’t there be at least a few years between major Java versions?
All these new features for 9, 10, and 11 sound awesome. As someone who mainly develops on Hadoop, that makes me sad. It will probably be another 5 years before Hadoop, HBase, Spark, and all the other parts are compatible, the vendors like Cloudera are updated, and my company's clusters are updated.
Java moved to a 6-month release cycle a while ago. This is to allow smaller but still important features to be released sooner rather than waiting for big features (such as upcoming Valhalla among others). As noted, Java 10 was released literally a few days ago, so Java 11 will be in September.
&gt; There's no new information in this article beyond the four JEPs that we already knew about The title was perhaps kinda a giveaway, the "features you can expect" ';) 
In my opinion the 6 months are too short. I haven't even fully migrated to java 9
You're being downvoted for managing to read this post, yet not knowing that a) Oracle moved to a six month release cycle after Java 9 and b) missing the news that Java 10 was released this week. Welcome to today's lucky 10,000.
We haven’t even started yet. Probably gonna wait for 11 to make he switch from 8. Although support ends January 2019... maybe we should consider moving earlier 
I am sorry for my ignorance. 
This is probably the wrong subreddit to post this: but I really wished JVM and Java development would be decoupled somewhat. There is a lot of popularity in non-Java JVM languages (Scalea Clojure, Groovy, JRuby, Jython, etc, etc). These now have to bear the burden of also keeping the stack compatible (i.e. the classpath/module debacle in Java 9). I love the JVM but Java is just not my cup of tea. There might be performance or security things that could be improved in the JDK without changing Java-lang, but right now these are put in lock-step. Anyway, just my 2 cents. 
We're migrating only because code that runs smoothly under 7 and 8 is broken by default under 9. (So much for stable practices like giving developers a version or two of works-with-warnings before killing it off.) 
Meh, the lang changes are usually backwards compatible and aren't the big changes in the releases (and usually don't hold em up). Same with the stdlib changes. If the releases were only stdlib and lang changes I'd agree. Also, if they were decoupled, they'd still have to bear the burden of modules and classpaths as these are JVM concerns too. I guess I don't understand a real world example of, if these were decoupled, non-Java JVM langs would be less burdened. If anything, only the stdlib decoupling would help Java devs as some of those items are not based on lang/VM changes.
Java web start is also going to be deprecated in java 11 right ? If so What are the alternative for existing implementations that use java web start?
My stack doesn't even run on Java 9 thanks to Jigsaw. Still waiting for some 3rd-party, components to be updated...
That's because dbconn seems to be hilariously bad design.
The development of the jvm and Java is slightly decoupled. The other languages can get jvm features into the jvm even if it doesn't match java, as long as it isn't breaking or anything. But the languages do not have to keep pace with the jvm. It's not hard to say use Jvm 9, Scala already does this.
Honestly I'd probably nuke all of java and netbeans and then resinstall it from there.
I tried that, having the same issue 
You might need to reinstall and change and shit the JAVA_HOME file path. This is something you can change in the windows control panel or in unix change it in the terminal, just google it for your os.
I write code for hadoop too, and Java 8 certainly changed my code a lot. You can get the benefit in your code even if it doesn't affect the implementation of the framework itself yet. 
use intellij
have you checked netbeans.conf? whats the home java JDK there? because when i tried to use JDK9 i had the same problem and i fixed in just by changing home JDK in netbeans.conf file
Not sure, never had problems with Netbeans. It's a pure Java application, so if it fails to work, you likely have problems with your Java installation. Which operating system are you using? Which Java are you using? Can you type "java -version" and paste its output? Are you 100% sure Netbeans is using the Java version you think it's using? What does it say on help/about? I think you can run "netbeans --jdkhome /path/to/your/java/home", can you try that on a clean JDK8 install? Also, maybe there is an old Netbeans profile/configuration sitting in your user home? Did you try deleting that? ~/.netbeans or C:\Users\&lt;username&gt;\AppData\Local\NetBeans\ in Windows if I remember correctly. I haven't used Windows for a while...
How do you use intellij to configure netbeans?
smoothly
https://www.youtube.com/playlist?list=PL693EFD059797C21E watch this playlist.
Not sure why you would use anything else these days. 
Have you looked at this: http://www.quartz-scheduler.org/documentation/quartz-2.x/cookbook/MultipleSchedulers.html It seems to me to be closer to what you want. You have a (non-started) scheduler in the Web App which schedules the jobs and records them in the DB. Then you have a separate scheduler which executes those jobs. It's basically your standalone system, only it uses the Quartz tables and code, rather than your ad-hoc tables.
Which os is this? The real question is whether you gonna be using tabs or spaces on this new project?
Nth, just left on its own. I rarely see any Java dev team uses web start today bcuz of Spring and popularity of web apps. Web apps on client side are really bad idea and this is good that they will be deprecated. 
Honestly - people bitching about new Java development cycle in every post. It's was fun at the beginning, now it's just irritating.
I can only say sorry once again 
 &gt; Java 11 is also set to lose ***some*** capabilities through the removal of CORBA and Java EE (recently renamed Jakarta EE) modules, as well as the removal of JavaFX. That is an interesting way to word it. &gt; Set to be a long-term support release unlike JDK 10, JDK 11 will be a reference implementation of Java Platform, Standard Edition (Java SE) 11. JDK 11 is set to receive premier-level support from Oracle until September 2023 and extended support, featuring patches and security alerts, until 2026. ***Paid support***, though. &gt; JavaFX is being removed so it is not tied to Java JDK’s twice-annual update schedule. Ah, I remember when they said that they were going to include it because JavaFX would benefit greatly from being part of the JDK release cycle and being part of the default installation.
I find that [hamcrest matchers](http://hamcrest.org/JavaHamcrest/) make junit tests easier to read.
JDK 11 will be the next LTS release but only for those paying for support. As of JDK 11, you will not be able to use the Oracle JDK binaries in production without a support contract. That means there will only be public updates (via the GPLv2 binaries) for six months, until the release of JDK 12. This is all part of the brave new word of Java releases.
Shouldn't this be on /r/javahelp? 
I read about this online and I don't see a netbeans.conf file on my computer
No, WebStart/Applets are a **great** idea. Running any random application on any random website **wasn't** and isn't. And as we have seen lately, running JavaScript can just be as insecure as running a sandboxed Java application.
I'm weary of the trend of making software semi open source in the sense that yes, the code is made available to the public, but any trademarks or support remains with the original company. That way a company basically gets free labor while making a boat load of money with support contracts.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I think it is more easier to read the guides and complete it first, the docs they mentioned actually are the references, you will hardly understand it unless you've already have some experence with it.
Yes, there is still an important difference between "free/libre" and "open source" software.
Whatever, I knew that JS can read it but reading memory using Meltdown or Spectre is difficult and not really usable. I know it bcuz I asked specialist in this subject. What's more: proove that JRE cant access it, that u cant load native library so u cant use JNI via applet. And what is the sense if u can accomplish same task using Spring or JEE and the user is more comfortable with it... no need to support Applets, they are just obsolete
Swagger for the API and "nothing" for the client side. Nothing beside a simple readme file explaining how to run the app and possible some entry point to reading the code. I'm basically against comments (beside for non obvious business logic). Code as well as the entire application should be self explanatory. Now a days I really like to see a docker-compose.yml file in the root of a project. This way I know that I can run the app using docker-compose up, how it's run and which dependencies it has.
I wasn’t talking about documenting code, but the architecture of the whole project
When i was looking for this solution nobody ever brought this up. I was initially looking to directly update the quartz tables but that didn't seem like a good idea with all the serialized data in there. I guess i can create the scheduler and not inject it so it doesn't get initialized.
Sorry, it isn’t open source. But I basically want to document a bit of everything, mostly to learn how to do so correctly. From the technologies involved, and how so, to the use cases and project best practices
no, actually i don't understand why packages on the classpath that do not define the "module-info.java" are not automatically imported. Maybe I'd agree with the decision if I would know why it was made, but as it is .. no.
As far as I can tell, there is no alternative on offer that does what JNLP does. If you feel that `jlink`-ingyour application, creating separate installation and signing rigs for each platform you're supporting, giving up on pack200 and jar diffs, and giving up on auto updates is acceptable, then you're okay. Oh, and you'll have to build and bundle your own JavaFX if you use *any* part of it for your UI. I'm a *little* pissed about the abandon-the-desktop moves in JDK 9-10-11.
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I always document what is not obvious. Start documenting everything is not self explanatory by just reading the code, for example use cases. Then, document your APIs, so api users don't have to read all the code to use them. If you use scheduled task you also document them. If a class has different valid states or contracts you can write about it too. 
Thank you 🙏
We are just moving to JDK8. Anything later is just pie-in-the-sky for us right now.
Tests are like discussions on exceptions or spaces/tabs. Every place I've worked people do testing differently. Good luck.
+1 for Integration Tests, they're great and yes, they're complex.
I can find the Java EE files that are deprecated, slated for removal (e.g. jaxb-api) on maven. And it has been removed from OpenJDK for some time already. That means there is no way to run a JavaFX application on OpenJDK
Java EE dependenecies are a completely different story.
Why? They were all deprecated at the same time, and slated for removal at the same time. All were part of the standard SDK.
That is stupid indeed. I see this time and time again..someone spends time writing an opinion and then others come and piss in his work without saying what they feel is wrong. This is becoming stackoverflow. 
Use Trello, make cards which document what's been done, what's in the works and what's left to do. The cards can have a documentation link, PDF perhaps, that covers each card.
That is false. The jaxb-api is, and was. It is still Java EE, but if you run an application in Java 8, it is on the classpath automatically. Java 9 on they were removed from the classpath, and will be removed entirely in Java 11. They are removed because, as you said, they are meant to be decoupled from the JDK, but they are there. And, again, how can I run JavaFX on OpenJDK today?
EE was never part of the SDK - neither in Sun/Oracle or in OpenJDK. &gt; They were all deprecated at the same time, and slated for removal at the same time. So what? Those are 2 completely different projects with different distribution. EE has always been an independent library. JavaFX was kinda special. It is not part of the standard library (that's why you won't find it in non-Oracle SDKs) but it was bundled with the Oracle SDK for technical reasons (it depends on the native binary components of the JRE). That's also why you cannot find a simple jar-for it (maven or otherwise) - the class files are not enough. You need the native binaries that come with the (Oracle) JRE.
that makes sense! Thanks!
&gt; The jaxb-api is, and was. There might be some overlap, for whatever reason, but in general, no JavaEE is not a part of JavaSE. For example, you will not find JTA, JPA or Servlets in the SDK. I'm not sure what you are asking. You said this: &gt; the Java EE files that are deprecated, slated for removal (e.g. jaxb- &gt; api) on maven. Maven is a dependency management system. How things are deprecated there has nothing to do with JavaSE (or JavaEE). The JavaEE APIs are there, because they are distributed separately. 
&gt; And, again, how can I run JavaFX on OpenJDK today? Via [OpenJFX](http://openjdk.java.net/projects/openjfx/)
Thanks!
&gt; The jaxb-api is, and was. Jaxb is a pure java library, JavaFX is not. That makes a huge difference on how they are distributed. You're comparing apples with oranges which is not very helpful. &gt; And, again, how can I run JavaFX on OpenJDK today? AFAIK you can't. Sry, I should have said that in my initial reply to you. When you download a JDK you basically get 3 components: * the JVM which runs bytecode * the compiler and tools * the standard library (a JRE is the same sans the compiler and tools). Every Java distribution (non-Oracle) has to provide these three components. The Oracle Java distribution conveniently bundled JavaFX with every JDK and JRE as a little extra. That's why you don't have install anything or add any maven-dependencies for JavaFX applications when using Oracle Java. However since it's not part of the standard library other Java vendors (e.g. OpenJDK or IBM...) don't have to provide a JavaFX implementation in their bundles. Unfortunately this can be fixed by simply adding a jar (or maven-dependency) because JavaFX needs native binaries (for hardware-accelerated rendering with OpenGL or DirectX). The whole thing is quite a mess. To make things worse the JavaFX project itself is managed by OpenJDK however it is not included in their JDK/JRE bundles.
I doubt that it will just a JAR dependency that you pull in via Maven or Gradle. JavaFX includes a TON of native code (including a full video player, and huge chunks of a web browser, all C++ based). I'd be amazed if you don't have to install a completely separate package alongside the JDK/JRE itself, at the OS level prior to running your application.
What are the implications of removing Java EE? If I have a Java 8 project that uses an EE framework, how will I have to change it for it to work under Java 11? 
Commercial support for JNLP does very little good if it's no longer distributed by default in the JRE.
Heh, I consider it a win when I get some decent information out of these posts. /u/rverghes led me to finding that setAutoStartup method, so I'm pretty happy.
ZGC works well on small heaps too, unless the application has a very high allocation rate, in which case there's a risk that the application will "out run" the GC.
JARs can contain native code, including for different architectures.
While technically possible I don't think that a single mega-jar for all platforms is a wise choice. I've just checked and the native stuff for linux is ca 70MB and I assume it's similar for other platforms. So if you want to suport Windows/Mac/Linux just on x86-64 you end up with &gt;200MB jar.
My role has changed recently and I'm looking for good low level books, do you recommend any? Cheers
That sounds reasonable. BTW: over 90% of the JavaFX native binaries is the bundled webkit. 
there is dozen of us... dozens. I definitely like it better than swing when you are building desktop apps.
No, because JavaFX contains native code, and jars have no way of representing that. `jmod`s can, however, so those can be published on Central, but you'll need a dependency manager that knows what to do with them, which most Java tools don't. There will be growing pains, I'm afraid.
Removed as duplicate from [3 hours before this post](https://redd.it/87a0xa). Further -&gt; Sidebar: + **Do not post tutorials here!** These should go in **/r/learnjava**.
**Sidebar** + **Do not post tutorials here!** These should go in **/r/learnjava**.
Ok. Got it. I'll work on it. Hey, by the way, thanks for taking the time to look into this, and write back a response. I really appreciate it.
What's pushing this drive toward async everything? Is it just that people don't know how to properly write multithreaded programs, so we'd rather let a framework do it for us?
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
I can't speak for others, but for me it's reactivity and composability. It makes it much easier for me to tell something to run three queries, then do something after the second, then when the first is done do something else, then consider the task done when they all finish. For reactive libs this lets you be a piece in their execution chain leveraging the pools that they may be using or that you may have as part of an async IO thread group. Granted this lib uses it quite primitively and Java doesn't support it as well as other JVM langs, but it was specifically built at that low level. I use this lib in my company as a set of Monix tasks in Scala. It allows me to very easily choose how I manage tasks and queries that may depend on each other or not. And it flows from, say, my HTTP requests to their inevitable response without using up a thread waiting (though it may and often times does do so anyways).
So, I've been looking around, and it seems that the name "JEssentials", or anything similar, has multiple projects already associated with it. I am at a complete loss of what to name it. Any ideas?
&gt; Whatever maximizes production. Having been doing this for 20 years and working with lots of programs that were written 20 years ago, I strongly disagree. Production speed is important, especially if you're building your software according to the startup "break stuff" rules. However, in my mind it's much more important that most programs be maintainable. Async flows may (but don't necessarily) have this property - and this may vary by library and JVM language. It's important to not reinvent the wheel, as you say, but using the latest development accelerator does not necessarily accomplish this. Sometimes it just makes your crotchety Unix admins reinvent the wheel a decade from now when your wheel disappears. I hope the Maven repositories are all around in 2028. I've already seen instances where a specific version of a dependency for an older version of a library has just up and vanished. Obviously this differs by type of application. If you're writing a large in-house financial application for a bank, you should do everything assuming that someone's going to be maintaining it in 2035, running the final version of OpenJDK 8 and copying a binary version of your compiled Scala class files from server to server because some component of the Scala compiler disappeared from the Internet. This means making local copies of all of your libraries and not assuming the continued existence of an artifact repository, etc. If you're writing a game for the iOS app store, the odds that anybody will even *remember* your program in five years are slim. That's where "fastest to production" is the critical feature. I work more on the former type.
I wonder if jad could generate the source of the class that crashed the gui decompiler mentioned in this article.
Just to sort my thoughts: is Graal basically something like LLVM based on Java?
&gt; 9. Always throw on switch default especially for enums
final classes maybe. But final methods and variables? Ugh.
still very bad. Use an `enum` instead of `class` for things that should never be instantiated.
SneakyThrows is poison imo
And yet all static analysis and code coverage tools work the same. Every function or method is a chain of decision points and branching logic. Code coverage checks to see if you tested how you branch (making no guarantees of quality). And most likely "Every place [does] testing differently" means "Every place doesn't want to follow TDD's test-up-front approach because they think your code should just magically work right the first time".
I still don't see the use behind `var`. Looks like syntactic sugar to me if I really need some `Map&lt;Optional&lt;Integer&gt;, List&lt;List&lt;ByteStream&gt;&gt;&gt;` inside my project then I have other problems anyway
Oh. I hadn't though about that! That's a good idea.
&gt;Is it just that people don't know how to properly write multithreaded programs, so we'd rather let a framework do it for us? Uh, I think truly asynchronous frameworks are a good example of something that an upstream developer really can't write themselves. If I'm using the blocking JDBC API, there's not a lot I can do to make that truly async. At best, I can just wrap the calls in some IO bound thread pool to fake it.
Hi guys, please take some time and read the article referenced at the end. It goes more into detail and describes situations where you might want to use something like SneakyThrow. It is syntactic sugar. On the same time it guarantees that all wrappings from checked to unchecked are done in the same. The exception is always thrown. It is impossible that some Junior developer adds a single log statement into the catch clause and the exception is ignored.
I actually like it. Getting it out of the JDK/JRE is only a good thing, I suppose. Faster releases/bug fixes. 
I like it.
Never got to try it since most of my UI code has been for the RaspberryPi, and they removed JavaFX from the arm release awhile ago. Looks neat though.
I think part of the push towards async libraries is to make it easier to build things that match up with the reactive manifesto: https://www.reactivemanifesto.org/ One current problem with building out something using reactive streams in java is that eventually you are going to hit something that blocks, and when your reactive streams hit something that blocks you have to typically have a thread pool at that point - so what's the point? If you can actually have async all the way down, it can help with some deployment / scaling patterns. If your application will receive sufficiently high load to actually _warrant_ the additional complexity that async programming introduces is something you should carefully consider before goign down that path.
It's quicker to type, looks neater, and is congruent with other languages like c#.
LLVM is a compiler toolchain that introduces an intermediate representation (IR) in the form of bitcode that can be compiled to, optimized independently, and compiled to the machine code. GraalVM is a high-performance polyglot virtual machine that includes Graal, the JIT compiler that can compile the JVM bytecode (the JVM intermediate representation of the code) to the machine code. Graal can also optimize and efficiently compile the AST interpreters of the languages if they are created using Truffle, a special framework for creating managed languages. Currently there are interpreters for JavaScript, Ruby, Python, R and LLVM bitcode, which allows Graal running normal native apps compiled to the LLVM. This is important because most dynamic languages use some sort of the native extension mechanism to speed up the critical parts of the code. As the article states, Graal, the compiler, does not depend on the JVM 100%, it can be embedded into any application or platform that provides it with memory management, thread scheduling, code caches, etc. This way it can be embedded for example into the database engines or streaming platforms to allow running all supported languages in those environments natively. You can also compile your Java applications (with some restrictions like no dynamic class loading, some reflection API) into a standalone native image for fast startup and lower runtime overhead. It won't include the full JVM, but provides a different implementation (called SubstrateVM) of the components necessary for Graal. So LLVM and GraalVM are similar in the sense that they both can support different languages, but also the goals, implementation, and scope of the projects are different. LLVM and Graal, the compiler, are different LLVM is static compiler (maybe a JIT too, I'm not 100% sure), Graal is JIT. What is similar is that they both provide an entry point for the tooling, so the different languages can be supported by the same tools with less effort. 
It's about time. Sounds like they are trying to make java slimmer. Props for them. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
&gt; And most likely You're being judgmental based on your apparently current, cushy, safe coding spot where software engineering can be pondered and refined like a fine wine. Since you want to pedantically analyze then re-word what I wrote, "every place" I define as a super over generalized statement to indicate to the OP that testing (TDD is just one testing philosophy, an outdated one at that which is bested by BDD); is a continual battle to improve. Deadlines, changes of team personnel, managers, project managers (aka scrum people or kanban people or traditional pm's), company goals, all serve to throw wrenches in the works. So spare me the smug, diagnosis of my comment. 
You do not have enough comment karma (10) and as a result your post has been automatically removed. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/java) if you have any questions or concerns.*
This belongs on r/javahelp.
Maven and/or Gradle are the only build tools you need. The JRE comes bundled with the JDK. It’s a lot better than it seems.
Thank you, sorry about that
In fact i'm supposed to maintain a part of an old existing project, there is already a pom file and all Maven bullshit around that. Debugging the absurdly long to execute Maven processes, by updating obsolete plugins, understanding what are all the items on the labyrinthine interface, etc. is painful enough, so i would have appreciate that IntelliJ itself worked out-of-the-box
8 and 9 didn't work at all but the 11 totally solved my issue for some reason.
Alternatively it might just confuse them when they use it and then can't run programs with multiple source files the same way
Can someone please help change my mind on unit testing? I've been a Java developer for 10+ years in startups with Greenfield development and large corporations with mature code bases. Some following tdd and others not. I have honestly never found an example of unit testing helping do anything but waste time. It's never prevented a bug in any environment I've worked in. In every case when a JUnit failed, it was the junit that was wrong and had to change. I've seen too many examples of "It passed the unit tests" but code that doesn't actually work as intended. Also please don't think I'm suggesting to not have automated testing. In my experience the only tests that have truly helped have been automated integration tests. I know everyone in the Java world loves Unit testing so please help me change my view. 
Wow, that's neat.
Brings me back to the good, old days in high school with manual compiling and running. Back before package managers. I was trying to write games in applets in 1.4. Simpler times.
You can have multithreaded AND async. The results of that combination are very good for performance.
&gt;Actually that would be technically possible - AFAIK you can include native binaries in a jar. But then you need a different special jar for each platform/architecture. You could manage this with different maven profiles automatically activated by os/architecture. One of the supposed benefits of the JMOD format was support for native code, I expect at some point during development you'll have one Maven dependency for OpenJFX and running `jlink` will strip out non-relevant native binaries for distribution.
In linux you can get openjfx package from repository.
Asynchronous DB drivers on Java are a solution looking for a problem. If you want do make a query without blocking the current thread, just do it in a thread pool. Standard Java APIs like ExecutorService or CompletableFuture make it easy. Yes, that means the number of concurrent queries is limited to the number of threads in the pool, so you can't make a million queries at once. It doesn't matter, because your database server is only going to have so many cores to actually execute those queries with anyway.
Even if what you said were true, having the asynchronous API at least has benefits for tailored composition of dependent and independent results. And in the case of this library, I went to great pains to make it pluggable/extensible. So if you want to use a raw socket with a thread pool, just implement the couple of methods for http://static.javadoc.io/com.github.cretz.pgnio/pgnio-driver/0.1.0/pgnio/ConnectionIo.html in your class that's synchronous with a thread pool and you're done. My lib promises to only chain off those completable future's threads, never create their own (like using any of those "Async" calls on completable future).
Unholy Nation FTW
that's not my point. My point is, that this might "wipe away" architectural problems (long unreadable classes, onionated collections, ...)
Why javafx is hated???
This talk had the exact say affect on me, it is very subtle, but very powerful way of interpreting state that enables clear logical thought around it
if thats the case you "then you have other problems anyway"
Nobody sane would really be doing that without any support from an IDE in Java. At that point it doesn't matter the slightest, only obscures the details when it comes to running Java code by making it look more like Python interpretation, which people might be used to already. And there's only so little sensible programming you can do with a single class anyway, not sure why we'd even bother. And before you say you can put multiple classes into one file, just no, don't teach horrible practices.
openjfx
I went into this stuff with multi-module Gradle projects as standard. Took me a while to really understand it
What's the max length or size of the file? 
http://blog.paralleluniverse.co/2014/05/01/modern-java/ 
Eh, not all scripts are run manually or interactively. I'd say much of the time it won't matter
Sure but then you're not really scripting anymore nor running a source file directly.
is it worth watching?
Interesting insight, shitty title.
Good talk. So is there any (goos) source material about apps that went from PLOP to non-plop? I interpet this talk as : go to event driven storage. Build state. Etc. So how about all the java apps that use plop. Ie with hibernate and storing only the newest data. And they go to something else. What are good approaches? Frameworks etc? 
I liked the original F3 (before it was rebranded as JavaFX 1.0)
That talk is a few years old. He built and released datomic in the meantime, which is working the way he explains here. Sorta like Git for databases.
I love his talks as well, which is curious, because I feel Clojure itself goes a bit too far, and it's not something I use in serious projects. But his insights are real, and the way he explains them is accessible and entertaining. In particular this talk is very valuable, because we've had an over-simplified, over-ideologized variation of OOP drilled into our heads for too long, that talks about "binding behavior and data" without seeing the other side of the coin. OOP is about objects communicating through messages, not objects communicating through objects. Values are severely underappreciated area of software design, which is a shame, because once you leave the boundary of a process, behavior can't travel over the wire along with values. Only values can. So we better start respecting and seeing the "value of values", because anything else confines us to a 90s view on OOP that is desperately mismatched with the modern reality of distributed computing and remote APIs working together to a higher goal.
Thanks for your comments. I will add your use cases to an overview blog post about waiting for other threads. I hope this is o.k.?
&gt; a Thread is not cheap I just wrote a Java program that started 10,000 threads. Available memory went down by about 500MB. So, a Thread costs about 50k. I don't know exactly how many concurrent queries you think you need, but I guarantee that you'll have enough threads to saturate the database server way, way, way before the thread cost becomes a problem.