Follow the Swing tutorials. Try making a simple drawing application like MS paint. There are tons of examples because is it a common assignment in CS courses.
Even more so.
This subreddit is for Java development. Go to /r/minecraft
Mynum is not referencing to mynumber, it copies its value.
That is immutable. In Java, ints are values, not references. In fact, getInteger could be rewritten as "return myNumber;" A method of an immutable object may return a member variable if it is a primitive or a reference to an immutable object.
Like others have already said, yes it's immutable that way. You're dealing with primitive types here and these are passed by value. However, if your class were to contain a Collection and you return that, you effectively return a reference to that collection, allowing the caller to manipulate it. To prevent that, you can do "return Collections.unmodifiableXXXX(yourInternalXXXX);" But there's problem in the above approach when you're working with multiple threads and one iterates over the collection while another modifies it. Then the iterating thread may receive a ConcurrentModificationException, because unmodifiableXXXX returns merely a view and not a deep copy of the original collection and the standart collections don't support being manipulated and iterated over at the same time.
Correct. My post is related to Java. 
Ummmm Flash is the way to go with this. 
Hehe, spelled site wrong. 
This subreddit is for Java programming I believe.
aggreed
The subreddit is for the development of Java based programs; not errors involving the Java plugin installed on your computer. I'm sorry but we cannot be of any help. 
"Good", "light", "portable". Pick (at most) two.
Just use the JSON API and google-gson or something
Notepad.exe
As stfm said, the JSON API works fine. The API is not language-specific.
Why does CrapsGame need a local "total" ? Edit: spelling
There's no need for final members to be private if they are primitive or immutable themselves.
Everything you Timer can do can be found [here] (http://docs.oracle.com/javase/1.4.2/docs/api/java/util/Timer.html), if you will still have problems I can give you some code examples when I will get home.
You have these two lines in main: new Frame(); &lt;-- This makes a JFrame new Button(); &lt;-- This makes a JFrame too. Take a second look at your constructor for the Button class. I think you need to take a step back and read through the Swing tutorials again, then run through your main method and figure out exactly what you have asked your program to do. I would also advise against the class names Frame and Button, because those class names already exist as part of the awt framework, which initially confused me quite a bit when I tried to read your code.
Check out cloud 9 IO https://c9.io/. It is a complete ide for multiple languages that is fully cloud based.
And now pick one. I'm serious. There are a lot of *light* stuff which can be used to develop Java, but nothing that I can wholeheartedly call good. Eclipse is install-less, if the problem is that you cannot install stuff EDIT: You can try JEdit and DrJava 
Eclipse on Mac OSX is a non-install. Just download and unpack.
$199 is not too bad. And the free version is quite capable.
Nah, not too bad but putting it up against Eclipse the price is a bit steep. I believe you just cannot do any Java EE with the free version.
Afaik you are correct about j2ee, but I would not be surprised if there are workarounds.
"IDE" can mean many things, it would be more helpful if you would list the capabilities you want the tool to provide. * Do you just want a text editor? * Do you want a Java aware text editor? * Do you want a tool to help draw Swing based UI's? * Do you want a tool to handle project management? That type of thing.
I use BlueJ on a flash drive, but I'm a newblet.
And a decent knowledge of the Command Prompt.
Don't use `notify` unless you really, really know what you are doing. You can easily cause random deadlocks. `notifyAll` is the better choice in almost all circumstances, because if the winning thread calls `wait`, at least the other woken up threads will have a fighting chance for the monitor instead of perpetually sleeping because the single woken up blocked. Or better yet, don't use `notify` or `notifyAll` at all and use the higher level concurrency operations in java.util.concurrent.
I would go absolutely nuts if I had to use plain old Notepad for development. You're better off getting the portable version of Notepad++.
oh yeah of course. I haven't played around with coding in years, and I forget my manners.
List&lt;Future&gt; futures = new ArrayList(); futures.add(executorService.submit(new WorkerCallable(1))); futures.add(executorService.submit(new WorkerCallable(2))); futures.add(executorService.submit(new WorkerCallable(3))); futures.add(executorService.submit(new WorkerCallable(4))); futures.get(0).get(); futures.get(1).get(); futures.get(2).get(); futures.get(3).get(); 
[netbeans](http://netbeans.org) - easy to install, great keyboard shortcuts, context aware completion and javadoc popups. there's a portable version, but not sure how usable it really is. get the "java SE" bundle ... 77 MB
oh man, people still use it? I used it when I was first learning like a decade ago. It's great for learning, the built in quasi-UML and javadoc support is really nice but it doesn't scale to large projects well. Definitely light though
It would be other developers who have a functional understanding of your code and this would be done through code reviews.
Unit testing is often best applied by the original developer and isn't a substitute for integration, white box and even black box testing. Unit tests are best thought of as a way for the developer to express their expectations about their own code. If the developer doesn't understand the specification (or the specifier doesn't understand the requirements) no amount of unit testing will fix this. If you follow the TDD crowd they will even advocate writing tests before code. For me, unit testing provides a source of documentation (as in an example of how to use a piece of code) as well as an insurance policy that makes you much more agile down the road when you need to refactor. If you think you've planned out a refactor but your tests start failing, you know you've missed something and have a great starting point for debugging. Once or twice I've written tests for especially complex test fixtures, but usually it is best to just rethink things and simplify until testing the tests isn't needed.
You will see people making mistakes in the actual jUnit test, that's human. The difference is that the test is supposed to be a trivial amount of code. The actual implementation far longer. So there's less space to error. But yes, jUnit isn't a golden bullet. Nor does it prove the system does what it should, only that it doesn't break doing what it it does.
To OP: This. Mostly this. In extreme cases where I've had significantly complex test code, I've added some test methods at the top (JUnit runs test methods in the order they're coded) that verifies certain complex aspects of the test. Oh yes. At the end of the day, though, the point of unit testing isn't to guarantee that your code works beyond a shadow of a doubt. It's only to increase confidence. That's all testing can do, and no matter how much testing you apply to code, you'll still have bugs that sneak through into production. This is why you should always endeavor to write simple code. If you write complex code, you'll find that it's hard to test, and then you'll have complex tests that you may have to validate as well. Though the goal in coding is no bugs, it's an ideal. You'll never actually work on a project of any significance that doesn't quickly pile up a backlog of bugs. It's the severity and nature of those bugs that you're really trying to control for with good design and coding practices.
The way arrays are declared in Java has two variations: this one: String[] args //the recommended Java standard method and this one: String args[] //a hold-over from C++, also valid in Java As far as I know, there is absolutely no difference between the two on any level. It's just some syntactic sugar the Java creators decided to keep. 
You can also do public static void main(String... args) Using varargs.
For the type of applications we develop in the enterprise (Fortune 500) this brings zero advantages to the way we are already doing things. When Oracle finally understands what **native** means, it will be too late for Java in the mobile. The only reason Java is still alive in the mobile is thanks to Android.
You need to be a bit clearer. Which read function are you talking about? Which class is it related to? There could be 200 different read functions in Java. I'm going to take a massive guess and assume it's related to Input Streams in which case you should familiarise yourself with [the API] (http://docs.oracle.com/javase/6/docs/api/java/io/InputStream.html#read%28byte%5B%5D,%20int,%20int%29)
1. read() is a method of the Driver class which must be using something like Scanner to read user input from the console. How it is assigning anything to variables though, I have no idea as it is not shown. And if the code is settting different variables by calling .read() repeatedly then it is awful. 2. System.out.println allows you to access premium as it is a public method, not a private variable.
I think part of the exercise is writing the .read() method from scratch though. You should look into the Scanner class to get your input: Scanner in = new Scanner(System.in); int i = in.nextInt(); String s = in.next(); Where the int i = in.nextInt(); get the next Integer that was typed into the "console" (be careful with user input though). 
Looking at what it's saying to input each time you run it I assume the read function would be something like: public void read() { Scanner scanner = new Scanner(System.in); System.out.println("Enter Drivers name:"); String input = scanner.nextLine(); this.setDriversNameName(input); System.out.println("Enter number of tickets:"); input = scanner.nextLine(); this.setNumberOfTickets(input); ... do this for all member variables } So the read method reads in all input variables setting member variables which the premium method then uses to calculate the drivers premium
that i can do quite easily(and how i would write it right now given the choice this is what i have so far with regards to the read function. public void read(){ age=Integer.parseInt(JOptionPane.showInputDialog("Age of Driver?")); ticket=Integer.parseInt(JOptionPane.showInputDialog("Number of Tickets?")); value=Integer.parseInt(JOptionPane.showInputDialog("Value of Car")); } So something like that? also what is an enumeration?
Next time post to /r/javahelp to avoid the downvotes for this type of a question
It's not needed, no. I just tend to set class level variables through accessor methods by habit.
I've recreated your exercise using an enumeration and using a Scanner. First off **Enum: Arguments** package insurance; public enum Arguments { AGE("Drivers Age?"), TICKETS("Number of Tickets?"), CARVALUE("Value of Car?"); private String label; private String value; private Arguments(String label) { this.label = label; } public String getValue() { return value; } public void setValue(String value) { this.value = value; } public String getLabel() { return label; } } Then the **Driver Class** package insurance; import static insurance.Arguments.AGE; import static insurance.Arguments.CARVALUE; import static insurance.Arguments.TICKETS; import static java.lang.Double.parseDouble; import static java.lang.Integer.parseInt; import java.util.Scanner; public class Driver { public void read() { Scanner scanner = new Scanner(System.in); for (Arguments argument : Arguments.values()) { System.out.println(argument.getLabel()); argument.setValue(scanner.nextLine()); } } public Double premium() { Double result = 0D; result = (parseDouble(CARVALUE.getValue()) * 0.05); Integer age = parseInt(AGE.getValue()); if (age &lt; 25) { result *= 1.15; } else if (age &gt;= 25 &amp;&amp; age &lt;= 29) { result *= 1.10; } switch (parseInt(TICKETS.getValue())) { case 0: break; case 1: result *= 1.10; break; case 2: result *= 1.25; break; case 3: result *= 1.50; break; default: result = 0D; } result = ((int) (result * 100)) / 100.0; return result; } } This is using the provided "test" class, does not have repeating code in premium() nor read(), does not test for conditions you know that are true, does not use input or output in premium(). The only thing missing is the exact output and javadoc. exact output can be achieved by returning a String in premium() and making a special case for when the result is zero. if (result == 0D) { return "0"; } else { return result + ""; } Javadoc will be up to you if you want the full points :)
probably a habit i should start building?
The ":" is part of a switch statement. In this case it will check the value of the TICKETS input. if it's 1 ("case 1:") do the calculation based on that multiplier (etc..). It's just easier to write a switch statement if you have more than 3 "options". Because otherwhise you'd get a bunch of if-else structures which could reduce readability.
The sidebar says "Anything related to JAVA !"
Think I'll go and setup my type filters now then ;)
We'd need to see the source of the Driver class to tell you anything. It's not built in to Java. 
Ah syntactical sugar. Such a nice phrase
Saved, thanks for sharing!
Yet, the downvotes say "no learning here".
No need to call people names for downvotes. The sidebar says "Anything related to Java" and this question is clearly related to Java. While I agree there is a better subreddit, that doesn't make this an incorrect subreddit. If you want people to stop posting questions here you can ask the mods to make a rule about it.
AFAIK the "standard" for java is properties files : http://docs.oracle.com/javase/tutorial/essential/environment/properties.html If you are downloading them, a good idea would be to compress them in gzip format and use a GZIPInputStream instead of a FileInputStream.
Anyone know if this works in Intellij? EDIT: [Got it!](http://www.jetbrains.com/idea/webhelp/excluding-classes-from-auto-import.html)
I'd like to add one shortcut I use all the time: **ctrl-o**. It's awesome for jumping around inside a class.
I've must have updated my from 6 to 7 before the disappearance of the Java Preferences panel. Sorry I couldn't be more help.
It's personal choice mostly, either way would be easily read by another programmer. In this case, since you most likely will have to parse the input, you could do this; this.setNumberOfTickets(input); and the method; private int numberOfTickets; public void setNumberOfTickets(String input){ try{ numberOfTickets = Integer.parseInt(input); } catch(Exception e){ numberOfTickets = -1; //Marker to indicate failure of parsing //Perhaps some useful message here //or maybe force the user to re-enter the information //Print out the error stack trace to console e.printStackTrace(); } }
... wow if that's what it has been this whole time... I might have been thrown off because usually Eclipse puts an icon on my taskbar when I run a Swing window... but that might be because I always use a new JFrame instead of JOptionPane... But yes, after minimizing all my windows (... I should really close some of these some time), lo and behold my dialog boxes were there.
I have done the same thing myself a few times.
I got a kick out of tip 11. Honestly the first time I used eclipse on a solid state it was like a breath of fresh air, it changed my outlook on the application
Odd. I'm on 10.8.2 and Java Preferences is still there (undir /Applications/Utilities). [Here's a copy of the app](http://hugi.karlmenn.is/d/javaprefs.zip), you could try running it on your computer.
Personally, I wouldn't start programming with GUIs. Start with basic programs that utilize printing to the console and handle basic tasks. Slowly work your way up.
ResourceBundle (properties files like lolcathost mentioned)
I had the same problem when I was learning software development. What helped me was to try to think of my GUI as a finite state machine. Two articles I have just found on Google on the topic: [http://lassala.net/2008/02/05/state-machines-and-gui-interaction-part-i/](http://lassala.net/2008/02/05/state-machines-and-gui-interaction-part-i/) and [http://lassala.net/2008/02/19/state-machines-and-gui-interaction-part-ii/](http://lassala.net/2008/02/19/state-machines-and-gui-interaction-part-ii/). Try to familiarize yourself with some basic architectures such as MVC (and variants) too.
It's pretty clever ;)
fix all 10 in one easy step: download IDEA, solves all (or most) of these out of the box...
[This](http://www.cubrid.org/blog/dev-platform/understanding-jvm-internals/) is the link to the original article about Understanding JVM Internals...
Maybe I should also mention alt+shift+r for renaming stuff. I use it a lot especially when refactoring. Also another bigger tips came to mind while reading comments: **12 Setting the quick diff margin to show changes from your version control:** * Enable team support (git/svn/etc.) for you eclipse project * Enable quick diff margin (Preferences-&gt; type *quick diff* to the search), and change it to use your version control * I also change the colors to lighter green for changes and darker green for additions * Enjoy You can see the diff by hovering mouse on the margin markers and revert rows etc. with right click. This is a **very** nice feature and I can't live without it anymore! Currently I do mostly JNI stuff and I use eclipse for both Java and C++. Sure CDT is not optimal for C++ (unfortunately many of the mentioned nice shortcuts just don't work), but I can live with it. it's still nice to be able to use the same IDE for both. 
As helpful as some of these tips may seem, I find that the main cause of loss of productivity in Eclipse tends to be its stability issues. I waste a lot more time restarting Eclipse when something stops working than I do by doing things with a mouse instead of a keyboard. A few things I can remember off of the top of my head: * Losing the caret, so I can only see where it is when I'm typing. * Losing the line pointer when debugging, so I have to step through to see where I am. * Getting itself into an infinite building loop, where it keeps queueing up a new build after each one completes. * Moving my breakpoints between me placing them and debugging. * Occasionally just hanging or crashing.
Maybe it's because I did a clean install of Mountain Lion. Lots of people are complaining about it. Thanks for the app! It works, except it only shows Java SE 6. Oh well, guess I'll have to wait for Cupertino to get their act together.
actually I got the joke by reading just the sentence, but if you haven't done much java programming before it might not be apparent. 
... wow, you know that if you press the link you'll see the full size picture...
If you were to do this then it wouldn't be considered automatic then would it?
Legend had it that when Gosling and others were working on the language that became Java, they frequented a coffee shop. The shop had a "barista" that they thought was cute. Hence CAFEBABE for Java files' magic number.
Yea I wouldn't start with GUIs because there's a lot to learn that has little to do with "pure programming" and more to do with arbitrary decisions the designers made about how GUIs should be programmed. And there are some advanced programming concepts in there that you might not be quite prepared to deal with just yet, such as multithreading and a single threaded dispatch model, etc. Much better to just start out with the console, learn how to fetch and display user input with a Scanner and System.out. In fact, this is how most useful programs are made on linux in any case, without a GUI. If a GUI is added on later, it is only done so as an alternative, simpler, and usually less powerful way to use the functionality provided on the command line.
He's kidding, there's no way he's so stupid!
I do not see what I did there. Please explain. 
Memory pointers
I would have to suggest the java scarpbook. You put any code in it any where you want and execute it, I use it to test programs and code a lot. The diffrence between this and a class file (.java) is that there is no restrictions and syntax limitations, test code can be seperated by just a line break. Also you can select any piece of code at a time to run.
Sounds like you learn the way I do. Best way for things to stick for me is to think of a program to make and then figure out how to make it. Research how to build each feature of the program without copying and pasting code. It may also be helpful to make small programs that do each feature and then re-enter them into the main program; this gives you a couple steps through making the feature and will help things stick.
I used NB recently as it was bundled with an SDK. As everything was an SDK, all the files included were pre-compiled libs with source attached. While trying to look through these libs to see how everything worked, I found that NB didn't like to "find usages" of methods/classes inside the libs, where they were used in the same lib/other libs. It was rather infuriating. Ended up getting the libs on their own, importing them into a new Eclipse project, and was then able to use Eclipse to jump around all the libs fine.
Are you certain you want to know about JSPs and servlets, or is it generally Java web development you want to get learn? If it's the latter then JSF is the standard these days (even if most applications will still be using older technology), and facelets (xhtml files) are used for presentation.
Question 24 The array nums has been defined as int [] nums = new int[5]; Assuming that the values have been set to {6,2,8,3,5}, what will the following code output be? for(int i = 1; i &lt; nums.length - 1; i++) System.out.print (nums [i + 1] + " "); a) 2 8 3 b) 6 2 8 c) 8 3 5 d) This code will result in an out of bounds error ----- Question 25 The array nums has been defined as int [] nums = new int[5]; Assuming that the values have been set to {1, 2, 5, 6, 8}, what will the following segment of code output? int sum = 0; int index = 0; while (index &lt; nums.length-2) { index = index + 1; sum = sum + nums[index]; } System.out.println("Sum = " + sum); a)Sum = 8 b)Sum = 13 c)Sum = 19 d) This code segment will result in an out of bounds error. --- Questions 26 The array nums has been defined as int [] nums = new int[5]; Assuming that the values have been set to {5, 3, 7, 8, 6}, what will the follwing segment of code output? int i = 0; boolean found = false; int searchVal = 8; while ((i &lt; nums.length-2) &amp;&amp; (found) { if (nums[i] &lt;= searchVal) { System.out.print(nums[i] + " "); } i = i + 1; } a)5 3 7 8 6 b)5 3 7 8 c)5 3 7 d)7 8 6 -----------
But Java has four looping structures since JDK5. while, do-while, for, enhanced for
That mystery we just solved here was more interesting than the original post.
where are the activists ?!
It's true that JSF is standard, but understanding JSPs and servlets makes it much easier to understand JSF. You will learn deeper principles underpinning Java in a web environment.
It isn't a bad idea. If you have to parse the xml and turn it into html anyway I would just use xslt. It has a bit strange syntax, but other then that it is a pleasant language to work with. Just get the xpath and xslt pocket references (they are called something like that) and you are good to go. There some excellent frameworks in Java for dealing with xslt and xml. Then, since you are already using Java you can most likely just plug in any heavy web-frameworks later if you need to build anything from the bottom up. In short, my opinion is: Use xslt for the transformations of the xml documents, but if you need to build anything from the bottom up that does not involve xml get the web framework. 
Really depends on how much data there is (and how often you produce those reports). If you're planning to process thousands of records (dealing with &gt;10mb files), XSLT will probably not be want you want and, what your customers want. Also, you do not want to calculate things in XSLT, there are better reporting tools for that. I would look at the standard reporting software there is, crystal reports etc. - maybe http://www.eclipse.org/birt/phoenix/ can do what you want. TL;DR: For very simple reports, sure, go for it - otherwise, nah.
http://en.wikipedia.org/wiki/Magic_number_(programming)
[Here's](http://thedailywtf.com/Articles/Sketchy-Skecherscom.aspx) a post on TheDailyWTF about sketchers.com website. The featured post is by the lead developer and he goes over some of the issues developing it. A good read.
In my experience XSLT is terribly difficult to use. Extremely verbose and lends itself to spaghetti code. It's a really appealing concept which is why it sticks around. I would recommend that you evaluate freemarker as an alternative. Haven't used it for this myself, but it's an advertised feature and it's a cleaner syntax. 
&gt;B16B00B5 Required by Microsoft's Hyper-V hypervisor to be used by Linux guests as their "guest signature" heh. Boobies.
And people wonder why women don't feel welcome in IT. 
Well for starters you have to log in to *read* content. Oh wait you said benefits, not hilariously stupid failures.
WebMD uses a CMS that uses XSLT to transform XML into HTML. We can all agree that they are a successful company. 
There are two basic usage scenarios. Browser transforms of xml via xslt to html by embedding the xslt script to use in the xml via a processing instruction. Here you are restricted to xslt 1.0 which is a nightmare to code. World of warcraft is or used to be all xml delivered to the browser and transformed this way. If you are doing it server side then use Saxon, learn xslt 2.0 and never have to do Muenchian Method grouping. 
Legend has it, they wanted 0xCAFEDEAD, but it was already taken. 
You're pretty close to making the game work! In order to nudge you, you have to decide how the player is to input their choice. Logically, since you're using a 2d board, you'd want to ask for a 2d input; Example console output (I'll leave the coding to you..) Player X move _ | X | X _ | _ | O _ | O | O Where do you want X placed? xCoor = //Player input! yCoor = //Player input! Here's hoping that puts you in the right direction Edit: Made the board output look.. boardy Another edit to follow up: Write down the steps needed to run your game, try to pseudo code it out; start program; Ask user for board size Initialize Board Decide starting player while(Game is not complete) { Get player's move update board &amp; gamestate (gamestate in this case being whether or not the game is complete) } Print out results Ask player if wants to play another game if(yes) another game! else quit! 
Head First Java. Love that book.
No need to ask us for these answers good sir, just open up your favorite IDE and run these programs you have here. They'll output your answers and you might learn why the answer is the way it is
Question 24 is C. Question 25 is B. Question 26 has incorrect syntax so make sure you copied it over properly. If it is supposed to look like this: int i = 0; boolean found = false; int searchVal = 8; while ((i &lt; nums.length-2) &amp;&amp; (!found)) { if (nums[i] &lt;= searchVal) { System.out.print(nums[i] + " "); } i = i + 1; } Then the answer is C.
Well, the Stackoverflow guys like to mark questions as "closed as not constructive" (see http://stackoverflow.com/questions/2084169/choosing-a-java-web-framework-now) - often due to kind of "flame war" is becomes. As on Quora everyone is signed by real name, people are more balanced in their opinions, so it's a bigger chance to get an useful recommendation.
A large insurance company I'm with uses XSLT to generate the HTML used in their emails. It works fairly well, and it allows non-developers to generate templates fairly easy.
If you have lots of XML then yes, XSLT is perfectly fine - and a lot better than iterating through the content using Java. It's particularly useful if you want the users' browser to apply the transform on the client-side - that way, all you are serving is the data, so you don't have to manually create a web service view. However I'm now more a fan of using model-driven development tools such as EMF/openArchitectureWare, so that the XML actually represents a typed model, and you can use code generation tools to create the HTML as necessary. The toolset, understandability and performance is much better.
Thanks! Will read.
We're actually building a new workflow with XSLT, and i'm worried that we're painting ourselves into a corner, since it's not very well suited to dynamic pages, ajax and whatnot. As of today, they're not interactive, but we might want to change that in the future.
How browser compatible is client side XSLT? There is quite a lot of XML yes, but the alternative would be using Groovy / Grails to parse it, which is also a breeze these days with the XML Slurper class.
They neglected to mention that the new magic number is now 0xB16BA115
I have done it before and know of it being live on a number of high traffic, fortune 500 web sites. It really depends on what your output has to look like. There are a few keys in my mind. 1. It's only worth it if you want the XML output to be usable by a bunch of different consumers. Otherwise there's no point to outputting XML. 2. It's only worth it if your HTML is pretty basic 3. It's only easy if you're using XSLT 2.0 I tried to do some complicated things with XLST 1.0 and it as awful. It seemed like every feature I needed to do complicated output was in 2.0 Also, it's good if you're used to things like functional programming and SQL. They are different mindsets that you need when using XSLT if you're only used to procedural &amp; OO languages. You don't really have the same types of support for mutable variables as you have in Java. There are of course other ways to translate XML to HTML but I think XSLT is the easiest, especially if you already have a bunch of infrastructure up to support it. The way of thinking that you'll develop as you're writing the transforms is good for your long-term mental acuity as well.
Normally what you do is that you detect the user agent, and if the browser supports XSLT, you send XML. Otherwise, you perform it server-side and then send through the HTML. [Most browsers support it now.](http://stackoverflow.com/questions/841238/client-side-xslt)
Yes, and it works fine. Learning XSL is challenging, and it's a fairly obscure approach these days, but there's nothing fundamentally wrong with it. These guys make decent tools, http://www.stylusstudio.com/xml/publishing.html if you're into that sort o thing. 
Yeah, for new work I would advise against it. I thought you were working with a legacy project.
Can you clarify exactly what you're trying to do? When you say pass a value to a page, there isn't really a concept of a value on the page that is not related to a bean property in some form or another. (I mean there are things available to the request, but I'm not sure if that is what you are looking for). Also, are we talking JSF 1.2 or 2? and what version of EL?
We do this at my current place of work for what is essentially a 'hard copy' of the result of using our product.. I support it with dozens of 3rd party vendors. The nice part about it is it's simplicity, but it depends on what kind of features they want to have in the report. I'm not sure if you can use XSLT to call a webservice, but if so you could call a webservice from within the XSLT and write the webservice in grails or whatever makes you happy. In my experience XSLT to HTML is good for displaying items in the same way that a datagrid is good for displaying items. If you're looking for any kind of interactivity I would just go with whatever web framework you are most comfortable using. 
I work on that team and was going to post this link. Thanks for saving me the trouble. If you have further questions please ask.
The updated java_home utility is pretty nice for this too..to set a specific version as default, you can add this to your .profile: export JAVA_HOME=$(/usr/libexec/java_home -F -v 1.7 -a x86_64 -d64) * using -v 1.7 filters on Java 7 * using -a x86_64 filters for x86_64 builds * using -d 64 filters for 64-bit builds If there are no JVMs installed, I believe you can use -R to install one. It's a pretty sweet tool..reminds me a bit of Alternatives in Linux.
As a consultant I've had a project at a client, for about a year, who also used an Oracle combination of JDeveloper, ADF, BC4J, WebLogic and an Oracle Database. It's Oracle's implemented JSF so if you've worked with JSF before it shouldn't take too long before you get used to it. For newcomers however it can be quite painful, since the framework is not that forgiving for trying things out, as your project grows larger server startup times tend to take a while. 2-4 mins weren't rare for us, so you would always try to get things correct from the first time. On the other hand once you got to know it better it was alright to develop in. I especially liked working with BC4J and JDeveloper which I personally find a very nice IDE to work with, some colleagues on the other hand happened to found it quite terrible though. Do yourself a favour and stick to the Oracle stack, we tried deploying our ADF application to other Application Server such as JBoss and other databases and that didn't really work out well without having to make all sorts of tweaks. That will however result in being vendor locked in by Oracle and licenses fees will pile up. Also learn about passivation/activation since if you ignore it from the start it's inevitable that it will bite you in the butt later on.
Don't bother with crystal reports then. It's (usually) for static reports and probably way to expensive anyway.. If at all, I'd rather look into some sort of templating framework. There are pros and cons as always. For me, XSLT is very easy to edit when changes are requested. But XSLT is very slow and for complex/large XML structures a memory hog. I used XSLT extensively for years to process/map XML-based business documents. For few (like 100 per hour) small (1-50kb) files, it worked just fine and wasn't a performance problem (what's more expensive: more memory/cpu or a few days coding?). But for large files (100mb) XSLT used 1 gig of memory - that's just too much. Also, it was very slow, interestingly, the solaris/java machines were always the slowest. My rule of thumb was: 1 mb of XML uses 10mb of memory to process with XSLT.
I just finished writing some code yesterday to do the following: * Convert a POJO to XML (JAXB) * Use XSLT to convert that XML to XSL-FO (Xalan) * Convert that XSL-FO to PDF (Apache FOP) * Overlay that PDF onto another PDF (Apache PDFBox) If interested, let me know.
Not that I am aware of. ADF plays in the same complexity league as Websphere.
TL;DR - Start polishing your resume, management torpedoed your project.
How is JSF more of a standard than JSP? Both are part of the JEE specification. Just because Oracle is pushing JSF doesn't mean JSP is going away any time soon.
I do streaming transformations with Saxon, it's been out for a while.
Thanks for sharing your views.
:) Yeah, that's another way to look at it. Managers tend to take such decisions to polish their resumes - "saved the company X million dollars, by driving the adoption of blah".
How attractive would it be for you to work on stuff called penis?
Yeah, Saxonica is pretty much the driver behind XSLT these days and their proprietary extensions in the EE edition does streaming, although even that is supposedly not perfect. They published an interesting paper about that some time ago. The problem is of course that the streaming feature for XSLT 2 is only available in that EE edition, and that one isn't really cheap. If it's for a company that makes big bugs, that 8000 pound for a site license is probably a steal, but if you intend to use it for your own little home utility or open source project than it's a bit steep...
using a properties file like the java standard ones, makes it easier to stream the contents of a file while reading and writing as you can read/write a line at a time instead of parsing a xml document. and with streaming you dont have to worry about memory concerns, just abort if the file you are reading reaches a limit. but the format you choose depends a lot on what kind of data you are going to store. but as you are using ini-files, doesnt say much to me except the file ending. but if it looks like this: property1=value1 property2=value2 etc, a standard java properties file is sufficient.
Thank you, I got the player input working. How would I start working on the **checkForWin** (how do you make a single word look like code?) method? Would For-loops and If-else statement be the only way? **checkForWin** is my method for what you had a gamestate in your pseudo code. public static char checkForWin(char [][] board){ for(int row = 0; row &lt;= board.length; row++){ for(int col = 0; col &lt;= board[row].length; col++){ if(board[row][col] == '-'){ char retval = 'F'; return retval; } } } for(int row = 0; row &lt;= board[row].length; row++){ for(int col = 0; col &lt;= board[col].length; col++){ if(board[row][col] == 'X'){ char retval = 'X'; return retval; } } } for(int row = 0; row &lt;= board[row].length; row++){ for(int col = 0; col &lt;= board[col].length; col++){ if(board[row][col] == 'O'){ char retval = 'O'; return retval; } } } for(int row = 0; row &lt;= board[row].length; row++){ for(int col = 0; col &lt;= board[col].length; col++){ if(board[row][col] == 'O'){ char retval = 'N'; return retval; } } } return retval; } // end checkForWin This is what I have now and as you can it 's not working, I think it's something with my for-loops but I'm not sure.
Does it even matter? Look at this as an opportunity to become proficient in Oracle ADF for free. Ask for official Oracle training. It looks good on your resume. It also opens a lot of career opportunities.
Managers often have other things to consider. For example it is possible this is driven by a support contract.
"Is JavaFX replacing Swing as the new client UI library for Java SE?" According to the FAQ, the answer is [Yes](http://www.oracle.com/technetwork/java/javafx/overview/faq-1446554.html#6). Does your point still stand considering this information? 
Yes. Until the whole thing is open, the fate of your code is in Oracle's hands, and I trust Larry Ellison about as far as I can throw the sleazy bastard. They can decide "fuck this shit, Swing is good enough" at any time. Interesting that they've reversed course on replacing Swing, by the way. Sun was adamant about *not* replacing Swing with JavaFX, and their explanation was really bizarre: it was basically "JavaFX is blah blah all the screens of your life, while Swing is blah blah enterprise user interfaces". I'm not sure who that was supposed to make sense to, but it sure wasn't me. If JavaFX is indeed being billed as the replacement for Swing, then I do hope it gets opened soon. Swing has served me well, but it has limits I'd very much like to be without.
Seems a bit pointless - it's like declaring the horse and cart to be dead, but ignoring cars and instead going on about the Sinclair C5. J2EE should be history now for anything but legacy applications, but at no point does the blog creator mention anything about JEE 6 being able to generate (by the sounds of it) most if not all of what they need. Of course JEE isn't going to be the answer in every case, but this seems to be deliberately going out the way to avoid taking the easier route.
I tried that, but I couldn't get it to work. Otherwise I would agree with you.
Agreed, and I'm looking forward to 2.2 as well.
For future reference, JDialogs don't create all the native UI stuff that JFrames do. On Windows, you'll get nothing in the taskbar for JDialogs, and no minimize/maximize button. The last part might be look and feel dependent though. And... JOptionPane will use a JDialog to view things. So this isn't Eclipse doing anything strange with JOptionPane. :)
Nice... I approve!
I was under the impression that it was part of the OpenJDK, although I may be mistaken. It's now bundled with the JRE so it seems like they'd be hard pressed to "fuck this shit" especially after all the hype they did for it at JavaOne (JavaFX on a Raspberry pi!). I'm actually relatively new to the Java space so haven't done much UI programming with Swing or JavaFX so I don't know what long term support is like, but the main problem I had with JavaFX is that it can be very verbose to do a lot of things, however they recently added the canvas to it which is very similar to html5's canvas and mitigates this problem somewhat.
&gt; How would I start working on the checkForWin (how do you make a single word look like code?) Any word can look like code. What is important is you create a word that explains what it's purpose is. In this case, checkForWin says "I'm going to check the board for a win condition" I'm betting you're getting an ArrayOutOfBoundsException when you run the code. As you suspect, it is in your for loop, so lets look at it. for(int row = 0; row &lt;= board.length; row++){ for(int col = 0; col &lt;= board[row].length; col++){ if(board[row][col] == '-'){ char retval = 'F'; return retval; } } } Now, lets run a test case against this. If you have created a 3x3 board, this happens: char[][] board = new char[3][3]; Now, lets look at your for loop (we'll use the inner loop)... for(int col = 0; col &lt;= board[row].length; col++){ if(board[row][col] == '-'){ Now, lets look at what is being checked. if(board[0][0] == '-'){ ... //All good here! if(board[0][1] == '-'){ ... //All good here! if(board[0][2] == '-'){ ... //All good here! if(board[0][3] == '-'){ ... //ArrayOutOfBoundsException is thrown here! This should be enough to get you through this issue (hint, you only have to change one character per loop!) On the checkForWin, lets split this up into three different methods. It'll be much easier to read, as well as easier to debug. So my suggestion.. private static char checkForWin(char[][] board){ char result = '-'; //This will be a placeholder result = checkForHorizontalWin(board); if(result == 'X' || result == 'O'){ return result; //If a horizontal win is confirmed, return the winner! } result = checkForVerticalWin(board); if(result == 'X' || result == 'O'){ return result; //If a Vertical win is confirmed, return the winner! } result = checkForDiagonalWin(board); if(result == 'X' || result == 'O'){ return result; //If a Diagonal win is confirmed, return the winner! } return result; //If no player is declared the winner, return a representative symbol and move on } Reply back if you need additional help! Edit: I really need a preview check on here.. formatting edits
Well being in a consultancy who has Oracle as a major partner, I tend to work with larger companies who have selected Oracle (and others like CA, IBM etc) to be company wide providers of hardware, middleware or applications. Such partnerships are often made to align with architecture strategies. As an example a company decides to implement the Oracle stack for identity and access management (OAM, OIM, OID etc on top of WebLogic). Now lots of 3rd party products and platforms work just fine with these Oracle products (many better than the Oracle ones themselves) but there is a reasonable argument that any new bespoke development use the tools that work best and can be supported best with this middleware - which would be ADF I suppose. So with the bigger companies its often more about strategy and less about micromanaging the development division.
I ended up having to send in my assignment early (it was due at midnight) before I had a chance to read what you wrote but tomorrow I'll see what you said and get back to you. So much for taking the time to explain this to me!
Does Oracle still support the telnet renderer for ADF? I saw a demo of that once and it looked cool. If they still support that, it would be something? right? 
Before last year it was pretty much just a scripting language, now it's native to the jre. It works with CSS among other things so they look to be keeping it up to date, only time will really tell but it would be a shame if they did drop it, you can never have enough choice in my opinion.
&gt; HTML5 is still called HTML right, so what did they really change? ;) HTML5 is a new feature set (including additional Javascript apis) communicated by the doctype tag. HTML5 is common way to indicate this specific feature set and is primarily for marketing the technology (which is why most of the HTML5 articles are hype). Java 2 was a way to distinguish some major design and package changes to the base language. J2* was a way to differentiate and market Java as "new again" after a lot of harsh criticism and massive public failures. It made little sense from a technical perspective as a label. This is why it isn't J3EE. J2EE to JEE was just another feature set change, who's label was confusing to a more technically savvy market. The JEE stack looks the same from a base install so saying J2EE is dead would be inclusive of JEE. That's just my understanding.
Java is interpreted language because java classes that constitute java program are not the sequence of processor instructions, like compiled C programs, but a sequence of bytecode, which is interpreted by JVM during runtime. But that bytecode can be compiled by JIT into machine specific instructions, hence Java is compiled language as well.
JEE 5 had a new feature set compared to J2EE, which you can see by looking at the link I provided earlier. All I'm saying with the HTML5 remark is that you can't use names to tell if stuff has changed or not since, as you point out, names are often just marketing ideas.
I did look. TYVM for the information.
Using HTML5 for desktop apps is an abomination. HTML is for representing *documents,* not user interfaces, and JavaScript is a terrible language. I do not look forward to all apps being browser-based. That would suck very hard.
How does hibernate figure out the difference between an item with a stale version and and item that's been deleted? Either would cause the where clause to not match, but only one is an optimistic lock exception.
Good question, haven't thought of that. Worth some research, I'll do that later. **EDIT:** I played around with the demo and as far as pure JPA goes, it doesn't seem to be that polished. em.delete(entity) - When used with Hibernate with a detached object (e.g. coming from client), it always will throw an exception. You can't delete a detached instance. Not sure about other JPA providers. To attach, you have to merge or find. Merge could detect this for you, except for that it can happily create a new instance if it's already been deleted. I don't see a way out yet. When used with attached object, it performs `delete from orders where id=? and version=?`, so in the second scenario (two parallel JPA transactions) it would work as expected. What about executing an update after deletion? Unfortunately, merge() seems to happily insert a new instance. **My verdict:** I believe deletions are very rare. When you need them with long-running conversations that span more than one transaction, don't use version-based concurrency control.
0xCAFEBABE has been showing up as an initialization value, default value, and header since the dawn of time.
Glad to hear I'm not going mad! My test was on JSF 2.1; I'm not 100% sure when the #{param.parameterName} functionality was added, i.e. if it was in JSF 2, or new in 2.1.
I think they mean that for some Java code, the JIT runtime can convert some code into native machine language code which will have built-in optimizations over you writing your own assembly language or C code. I don't know how Java could give you a boost over already optimized native code.
xUnit style coding is also a type of coding approach where you write your test first, refactor your code towards your test and what-not. With xUnit test approaches then you have code that is considered "testable". The non xUnit/unit test coding is just "code and run". I think what you are getting at, who verifies your tests? I guess the developer has to be honest with himself not to cheat.
The "param" does not need to be defined. It just works.
yes but I think that they count enhanced for as for since it is pretty similar. I think they cover that while they cover basic for loops.
Awesome, got it to work with flying colors thanks to your help. I think my problem getting it to work initially stemmed from hot redeploying and the browser's cache. You have my sincere thanks. This is the exact solution I was looking for when considering how to solve the problem in my head. Too bad not all of my imaginary programming solutions can come to life like this.
Thank you man, I will look into it. Meanwhile, UnspeakableEvil had a [nice &amp; tidy solution](http://www.reddit.com/r/java/comments/12fao2/jpajsf_looking_to_pass_a_parameter_from_one_page/c6v1hjq).
We use netbeans at work... I really can't stress enough how much I hate that IDE. I used Eclipse at my last job and I'm constantly missing it. The only thing so far that Netbeans has done better is help me with javascript editing... and quite frankly, it's not THAT much better, just a little better. I'm giving intelliJIDEA a shot right now at home.
I think if you want something small and portable, vim is the way to go. I'm a big Eclipse fan, however.
Have a method inside class B that has an instance of class A as a parameter. Add getters/setters (if you don't have them already) for the field you're supposed to mess around with. So you'd have something along the lines of this: public class ClassB { /* Class stuffs... */ public void methodFromClassB(ClassA a) { int tmp = a.getField(); /* Play around with tmp */ a.setField(tmp); } }
The easiest way for us to help you is for you to post your code.
The easiest way to find our for yourself is to debug it. In most IDE's you can double click to the left of the line of code to add a break point. This means when you run the code in debug mode, the code will wait at your breaking point. At that point you can run over the code line by line. This will probably explain why your application goes into an infinite loop. You can read more on how to debug in a commonly used IDE (Eclipse) here: http://www.vogella.com/articles/EclipseDebugging/article.html
I don't understand why everyone is getting hung up on the dead thing. It's obvious what he means.
needs some work. you're iterating over the lines in your main() method, but you're trying to iterate over something else (what??) in your processLine() method. you shouldn't need two loops for the situation you described. To point you in the right direction, rename the 'data' variable to 'line' and think about what data you can extract from one line. Now think about your 'sum' variable. what is it a sum of? also, you declare 'sum' in your processLine() method. does each line have its own sum?
I do care for precedence, unfortunately. The answer in that StackOverflow thread seems promising though. The only issue is I'm trying to do this all within a JFrame, and I'm unsure of how to throw that exception in this case.
For the boys and girl names store them in two different sets. Then take the length/cardinality of the sets, that is the number of the different names.
`System.exit()` anyone?
For over a year now, his articles have seemed to be nothing more than fluff pieces intended to keep his name in current circulation. 
I've been working on an interpreter for my school coursework for a while now. I basically convert the string into a sequence of tokens (e.g. NUMBER=3, WHITESPACE, OPERATOR=+, WHITESPACE, NUMBER=2) and then pass it through an implementation of the Shunting Yard Algorithm (Wikipedia has a VERY good topic on it). Once you've passed it through that, it's quite simple to calculate a result. You merely continue to the first operator, apply it to the previous operands, and repeat, until you have a list consisting of 1 number, the result. Feel free to PM me if you want any more advice, I'd be happy to help you!
the names and ages alternate, and so do the genders. so why do you have a while loop reading a series of ints? you never have two in a row. it's not clear whether each pair of name and age are on a separate line, or if there's just a big series of names and ages separated by spaces. If there's just one long line, there's no reason to read the line separately, you just read from the file until you're done. just keep a count and a sum for boys, and another count and sum for girls, as you read. doesn't sound like you need to keep the names or the ages. apparently you don't care if there's two kids named John. so, basically // zero all variables // first name is a boy, set a boolean to true for this ('boy = true;') // while there's more data // read a name // read an age // if boy add 1 to boyCount, add age to boysAgeSum // else add 1 to girlCount, add age to girlsAgeSum // boy = !boy; // switches back and forth between boy == true and boy == false // println("boys " + boyCount + " total age: " + boysAgeSum); // same for girls since boys and girls alternate, you either have one more boy than girl, or you have the same number of boys and girls. so it's kind of odd that you're supposed to count both boys and girls. you could just count one and then see if the last name and ag you read was for a boy (then there's one more boy than girl) or a girl.
If you are about precedence, this is what [postfix notation](http://en.wikipedia.org/wiki/Reverse_Polish_notation) is for. It's not the one you learned in school, but it completely disambiguates precedence
but how's the program going to know if it's a boy's name or girl's name? for example, if the file I have to read is "names.txt" and has the following in it: Steve 3 Sylvia 7 Craig 14 Lisa 13 Brian 4 Charlotte 9 Jordan 6 and after my program runs, it's supposed to return: 4 boys, 3 girls Difference between boys' and girls' sums: 2 where sums = difference between the total sum of each gender's ages...in this case it would be 29 (girls age) - 27 (boys age) = 2
I think a better term would have been "paragon", but that doesn't adequately convey the import of their contribution, only that they were exceedingly good at it. I'm bad at word games, someone needs to create a word that combines "paragon" with "pioneer"; bonus points for connotations to philosophical works. "paragoneer"? ugh.
Invest some time learning about the Model View Controller and the Observer pattern. Your GUI (consisting of JFrames, JComponents etc.) should not know about the logic of your program, it should focus on displaying things. It should pass it to a class to handle the logic and exceptions should be caught and then sent back to the GUI; similar to how ActionListeners work. In the function in your GUI you can just display an error MessageBox printing the Exception message.
he's a faggot piece of shit
As others have mentioned, there's nothing easy built in, but there are libraries available for download that can help. The Frink library (http://futureboy.us/frinkdocs/) will do that arithmetic plus a lot of other useful things and is pure Java. Take a look at the Javadocs [here](http://futureboy.us/frinkdocs/integrate/frink/parser/Frink.html) for the how to.
And how would you parse them into that without regex?
Well to be fair this is also a 3 1/2 year old fluff piece that someone decided that today was a good day to bump.
Are there any benchmarks or articles comparing java to scala (I didn't find any good ones) performance, web apps are very sensitive to response times and no one ever got fired for choosing java. Scala also has multiple return object paradigm which smells of scripting and makes it hard to "sell" to other devs. Any IDE support it or is this a command line compile thing?
It's how parsers work. I'm not sure regular expressions can be used to parse arbitrary-depth arithmetic expressions. Would love to be proven wrong.
just run the same regular expression on each nesting level, problem solved.
This is the fundamental design behind parsers. How would you implement regex? With regex? 
With a proper parser. Writing it yourself is not hard for simple expressions and you have likely done it in school. Using tools like Antlr will help if the language you're parsing is more complex. For simple expressions, I'd write a recursive descent parser. [This is a good start](http://en.wikipedia.org/wiki/Parsing_expression_grammar) in general and as to why not use regexp look [at the second sentence of the advantages section](http://en.wikipedia.org/wiki/Parsing_expression_grammar#Advantages): &gt; For example, a regular expression inherently cannot find an arbitrary number of matched pairs of parentheses, because it is not recursive, but a PEG can. If you go to stack overflow, there are countless examples of people trying to parse HTML with regexp and asks how it is done. They are all met with the same answer - it isn't done. Regexp can't match opening/closing tags for just the same reasons it cannot match opening/closing parantheses.
&gt; Are there any benchmarks or articles comparing java to scala (I didn't find any good ones) performance, web apps are very sensitive to response times and no one ever got fired for choosing java. persistence and calling external apis are what take time. Unless you have a real edge case the performance of your language is relatively moot. &gt; Scala also has multiple return object paradigm which smells of scripting and makes it hard to "sell" to other devs. This just seems close minded. It has something you don't know (I assume you're talking about tuples) so why that smells like scripting is beyond me.
Result for: 3/(2+1)?
It can't.
OK, you aren't telling us if you know any other programming languages or if this is your first shot at programming. I will assume you have some previous programming experience. If you are getting started with Java (and this applies to most if not all of the object oriented languages as well) you should start with some basic console stuff before trying to program with GUIs. This way you can learn to use the core APIs and gradually gain confidence with them. Look for the ebook "Thinking in Java" by Bruce Eckel. It has a very nice and gradual approach to learn to program in Java. In any case you should keep in mind that learning to program is like learning to ride a bike... You can read a shit-ton of book on how to do it, but you won't really LEARN to do it until you try to get on it and start pedalling ;)
I'd fire people for choosing Java.
Thanks, that should be interesting. Glad to see it has IDE support. Returning tuples has been a point of much confusion in python on large codebases for my past projects,not sure why but to any dev that is not the original coder the tuple returns always caused anguish,not sure, may be just too unusual for java people
It's not that bad since tuples are strongly and statically typed in Scala. They are how key/data pairs are done in Scala maps.
It would be quite interesting to discover how could we pair this with OSGi.
I think, that if you are goin to use xml, you should try out the jdom library at jdom.org
Why?
This was my first thought too. It seems like it might be a good fit with maven-bundle-plugin.
My concern is that tooling needs to be solid before I convert 20+ developers from java to scala for the internal test project. Using java provides a good safety net: great tools, lots of info on the net about problems already solved (especially stack overflow), solid and tested language of almost 20 years and lots of APIs from pretty much anyone. I know I can get scala to work with java, but I want my life to be easy and not have everyone point at me when something in scala sucks. Especially debugging, memory management and scaling. With java I can use jvisualvm to monitor memory and generate heap dump and connect to remote instances and do code level tracing; this is huge. I do not want to attach and then do evaluations to figure out what is going on (ala python/ruby/groovy and their ability to redefine objects on the fly; it's ok with JS since page lifetime is not as long as server lifetime thus less critical). So it's not just me not liking scala, it's directing a large group to find out it will not live up to java in a large horizontally scaled environment; these mistakes are not cheap and can be career ending :)
It's an interesting concept, but many of the more popular libraries are pretty modular and already constrained toward a particular purpose. If you think you need this in your own code, you probably just need to refactor and redesign. Can anyone give a specific case where this would be the best solution?
I recently posted an [article here in r/Java](http://www.reddit.com/r/java/comments/11iz9h/things_to_love_about_java_exception_handling/) I wrote about a year ago, examining my initial thoughts on the Checked Exception mechanism in Java. My original article was perhaps a bit enthusiastic. Here, I do my bet to look deeper. I received a great deal of helpful feedback from r/java redditors on that initial post. I wasn't sure what the etiquette was with directly citing/naming redditors in the new article (could be controversial, so I decided to take an "opt-in" strategy), so I didn't. However, if you commented on the original reddit posting, and would like to be cited in the article, please let me know. All comments were extremely helpful in writing the new post.
The purpose of these kind of tools (like Structure-101) is not to primarilly restraint the use of *libraries* in your project (though it might be), but rather to ensure that the application you are building does not violate the separation of concerns principles that have been architectured in the first place. With such rules, it is easy to spot on when one of you dev is calling, let say, hibernate methods in what is supposed to be your presentation logic. Once rule violation has been detected, the refactor can occurs.
Yeah, the tooling ain't there is what I'm saying. The language and libraries are, IMO.
We are in 2012, and I am trying to learn and discuss what I have learned. I wouldn't say I am debating the merits of checked exceptions directly. Just exploring what to me is a new topic. Just because newer languages have "dumped" them does not mean there isn't anything worth looking at, either. Newer languages "dump" a lot of things. I am discussing checked exceptions in the context of their use, as I understand it so far. A lot of languages newer than Java have also "dumped" static typing. Does this mean static type systems no longer bear discussion or debate? Note the title includes the phrase "flawed mechanism." It appears that, at least so far, the Java world is stuck with that flawed mechanism. Not everyone learned all about this back in the olden days, so we have to find our way. 
If you have continuous integration in place I can appreciate the benefit this offers in terms of protecting code quality on checkin. It automates a small piece of the code review process at the cost of maintaining additional rules for your code. I'll have to dive into this later. It'd be kind of nice if its something we can easily externalize or let the standards group maintain as a part of the build process. Thanks.
I like the question "where do you go from here?" And I thought, "I go home and see my kids".
&gt; the Java world is stuck with that flawed mechanism. Not really. Switch to Scala today, continue using all of your awesome Java libraries and code and forget about checked exceptions forever! :)
Interesting. I am totally not familiar with Scala beyond the name. Sounds like something I will have to check out!
I thnik there are largely two problems: - Exceptions have been abused for stuff which should have never been an exception in the first place. - Java provides no useful abstraction on top of exceptions.
Unwrapping exceptions to handle the error programmatically isn't a good plan, and information hiding can prevent that unfortunate practice, but consider the other benefits to having a single description of the error across the lifetime of your code: my goal is clean, readable error messages with good stack traces for programmers of the future maintaining the code. Also notice the link 2006 link off the above page http://today.java.net/pub/a/today/2006/04/06/exception-handling-antipatterns.html which makes the same point: "Logging and throwing results in multiple log messages for a single problem in the code, and makes life hell for the support engineer who is trying to dig through the logs." My experience with Java ab inition shows this to be true. It was great whey they added the cause to all the constructors; before that, we had to use a custom-made ExceptionWrapper.hurl(e). Now it's just throw new FooException(message, cause). 
Most people don't believe in evolution. Not saying that you're wrong, just that you're using a terrible argument. The reason to not use checked exceptions are mainly what the article cites - not that "the cool kids don't use it".
For what it is worth, if I *were* to implement a "log then throw" mechanism, I would do my best to make sure the logging only happens once. But I take your point, and agree. 
Don't forget Clojure. Scala is like Java + some (major) tweaks, whereas Clojure is a completely different approach.
Use Intellij
Oracle has stated that JavaFX will replace swing at some point in the future. For anyone currently developing using swing -- you can start to make the transition earlier as swing integrates pretty easily with JavaFX. http://www.oracle.com/technetwork/java/javafx/overview/faq-1446554.html#6 Regarding FXML, I found it a pain in the ass to use during the early beta testing because the schema was inconsistent. They have greatly improved this and reduced the verbosity. Additionally -- the wysiwyg editor is pretty functional at this point and I would suggest you check it out: http://www.oracle.com/technetwork/java/javafx/tools/index.html I'm pretty interested to see where JavaFX goes. It's head and shoulders better than it was in 1.x.
Because working for hours without saving is an awesome idea.
It sounds like what you are describing doing is the old XHTML way. Had XHTML won out over HTML5 then we would all be doing such things. As it stands, parsing XML through JavaScript and turning it into appropriate DOM objects isn't as hard as many people would try to suggest. It also has the added benefit of freeing up server resources by letting the client machine handle the transition for you.
when I tried to use fxml i was not able to figure out how to change objects/nodes from java.
It's called a "trie". 
Nope. 
Did you change the name of one of the exceptions in your example? You refer to "AccountNotAvailableException" but it isn't present any where in your pseudo code. Edit: Also, in part 2, you write &gt; Here, we have eliminated the InvalidAccountException, and added a boolean method to check whether a valid account exists for a given account number despite the InvalidAccountException still appearing in the code: public static CheckingAccount getCheckingAccount(String AccountID) throws DatabaseAccessException { ... if(//no row is returned for AccountID) { throw new InvalidAccountException(); } ... } (That wouldn't compile as you don't declare the method as throwing it.) Edit 2: Just finished the full article, and I think your suggestion isn't a bad one really. If I understand correctly, it basically comes down to this: There's no such thing as an unchecked or checked exception. There's one type of exception (obviously, with lots of subclasses). Each method can declare a list of exceptions as needing to be 'checked' via the *throws* mechanism, but can still throw other exceptions as unchecked. Also, as an aside, have you read Joshua Bloch's chapter on Exceptions in Effective Java? I re-read through it before starting your article, and he actually raises a lot of similar issues.
It's easy enough to do for ASCII: it gets more challenging if you want to cover all of Unicode (because the naive approach to implementing it does not scale.) 
Uai, bão demais :o)
You should check out the wikipedia article on tries - http://en.wikipedia.org/wiki/Trie - particularly the reference section has two links to implementations. This is probably the best cut at a trie I've seen in Java, tho - http://code.google.com/p/patricia-trie/
Author here. I took the examples in the code from the (linked in the post) Oracle article, and expanded on them for the purpose of discussion. What you see in the Part I example is NOT how I would have done things normally. If you read what I wrote, I make many of the same points you make here. The code examples in my article attempt to extend what was proposed in the Oracle article. I then go on the discuss most of the things you mention in your comment above. I make the case that, the way I learned it, Exceptions should be thrown in response to exceptional conditions. I also note that defining exceptions for cases such as insufficient funds or stop payment are perhaps not the ideal way to handle it. I make the case that proper validation of account state is more in keeping with standard design principles. The way the Oracle article sets up the problem, they are using Exceptions to enforce business rules (a point I also make in the post). With regard to the Database issue, the point there is that client code will need to be able to respond to the fact that the API cannot fetch the data. Does it need to know that it was a SQL failure (SQLException)? No. The code I threw together in part 2, to model the situation without using these exceptions is ugly and clunky, and badly in need of some refactoring, but makes the point that the exceptions could be eliminated. It could be that I was less clear in my writing of the article than I had hoped. Or it could be you saw the first set of examples (in part I) and didn't bother to read further. In the article, I don't say whether or not the examples are good or bad - I simply model up what I understood from the example provided in the linked Oracle article, and note what I see as upside and downside. I then do another (admittedly very hack) without the checked exceptions. I will say this, though. You express all this very clearly, and I appreciate the feedback. You have helped clarify some points that I fear I failed to express clearly. Thanks!
Hey everyone, I appreciate the input. This is what I ended up deciding on: String[] equation = expr.getText().split(" "); ArrayList&lt;String&gt; eqn= new ArrayList&lt;String&gt;(); for(int i = 0;i&lt;equation.length;i++) eqn.add(equation[i]); String op = new String(); while(eqn.size()!=1) { for(int i=0;i&lt;eqn.size();i++) { op=eqn.get(i); if(op.equals("*")||op.equals("/")) { if(op.equals("*")) { Double num1 = Double.parseDouble(eqn.get(i-1)); Double num2 = Double.parseDouble(eqn.get(i+1)); String ans = Double.toString(num1 * num2); eqn.subList(i-1,i+1).clear(); eqn.add(i-1,ans); } else if(op.equals("/")) { Double num1 = Double.parseDouble(eqn.get(i-1)); Double num2 = Double.parseDouble(eqn.get(i+1)); String ans = Double.toString(num1 / num2); eqn.subList(i-1,i+1).clear(); eqn.add(i-1,ans); } } } for(int i=0;i&lt;eqn.size();i++) { op=eqn.get(i); if(op.equals("+")||op.equals("-")) { if(op.equals("+")) { Double num1 = Double.parseDouble(eqn.get(i-1)); Double num2 = Double.parseDouble(eqn.get(i+1)); String ans = Double.toString(num1 + num2); eqn.subList(i-1,i+1).clear(); eqn.add(i-1,ans); } else if(op.equals("/")) { Double num1 = Double.parseDouble(eqn.get(i-1)); Double num2 = Double.parseDouble(eqn.get(i+1)); String ans = Double.toString(num1 - num2); eqn.subList(i-1,i+1).clear(); eqn.add(i-1,ans); } } } } result.setText(eqn.get(0)); I have all of this within a JFrame; expr and result are JTextFields. Expr would end up being a string like "3 + 54 * 27" and would be evaluated when the "=" button is pressed on the GUI. However, when pressed it seems to go into an infinite loop and I'm not quite sure why. Any advice? edit: spelling 
Yes, basically I think your post fails to start with any strong point of view. Even after reading the entire thing, I'm unclear on what you're advocating for. The fact is, there *is* a clear right and wrong way to use exceptions, both checked and unchecked. There are a lot of things in programming where the approach depends upon the particulars, or either approach can be right given the context, etc. This is not one of those things. So I guess that given the black &amp; white nature of how exceptions should be used, I think it does a disservice to the topic to treat it as though it's context-dependent or weighing pros and cons. Especially if those points are made deep in the article instead of right up top.
The most common would be C++.
For large games like Battlefield 3, probably not, you'll run into speed issues eventually. You see these issues in Minecraft, a comparatively simple game that sucks for performance, although this could purely be because of sloppy code.
I'd say almost all AAA games are C++ or C# and use a scripting language to control some aspects of the engine (for example LUA). The choice of language is more diverse in the indie scene. C/C++/C# still dominates though
In terms of pure processing power, they are almost equivalent. What gives the advantage to C++ for game engines is that it is better when accessing low level ressources (graphic drivers for example), and most of all it allows total control on the memory, which is were you can gain a lot in terms of speed and of course memory usage.
I can not unzip this zip file in linux. Upload your code to github that ways it becomes much more easier to look at your software. 
&gt;Returns true if the two specified arrays are deeply equal to one another. Unlike the equals(Object[],Object[]) method, this method is appropriate for use with nested arrays of arbitrary depth. http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#deepEquals(java.lang.Object%5B%5D,%20java.lang.Object%5B%5D)
That's exactly what all of the Collections objects were before generics were added in Java 1.5. To get a "non-typed" collection, don't specify a type at all. Just typing: ArrayList list = new ArrayList(); Will get you a collection that you can add anything to-- almost but not quite the same as an ArrayList&lt;Object&gt;. The return type of List.get(int index) will be object still, so if you were hoping to avoid casting then you're out of luck.
Amazing tool. Very useful for developers.
&gt; most of all it allows total control on the memory Which is entirely possible in Java as well; either through `java.nio.ByteBuffer`s or through use of `theUnsafe`.
I was going to complain about: String hello1=new String("hello"); Until I realized that it was necessary to make this example work. Heh.
I was just looking for something similar to a Python list, but decided to make one. After I got bored of that, I modified it to be a List of compartments that had a specific type and each compartment could only hold that type. So I have one overarching object that contains compartments that contain all the separate data for each class of objects (only 1 String compartment in the pack and it will contain the added strings). It's quite fun. I don't know if it exists in the library or not, but I called it Pack (like backpack) and it's a LIFO structure for each separate compartment. Compartments are created with a name and a Class&lt;?&gt; so any compartment can be made to store any object needed. You can switch compartments by giving a name or a Class&lt;?&gt;. You can easily cast an unknown object by getting the Object as an Object and casting it using a Class&lt;?&gt; object for the given compartment. Object x = p.pop(); Class&lt;?&gt; c = p.getCurrentClass(); x = c.cast(x); I plan on making global add/remove(value) (they won't attempt to go straight into the current compartment (they'll find the right one)).
this train of thought seems very linear. I really like mercurial, the idea of a central main copy of code doesn't exist. Everyone has their own local copy, can make commits at anytime and this way you don't have to worry about someone else messing up your code. You could also have several repositories, such as a non peer reviewed repo and a peer reviewed repo, this allows for peer review to take place at anytime, and if people still need the code they aren't being blocked from getting it.
By reliable, I am talking about inherent features of the language. In Java, I'm going to be dealing with silly null pointer exceptions whereas in Haskell the type system will prevent these errors at compile-time (Example of less reliability). In Java I'll be jumping through hoops just to pass a function around whereas other languages make that trivial (Example of more code). Also, Java is moving at an extremely slow pace whereas other languages, even those in the same league (C#) are progressing much more rapidly. 
&gt; There is no JVM for WP or iOS [...] To be fair, there is no JVM for Android either. The reason the languages you listed work on android is because they compile to Java byte code which can then be transformed to Dalvik byte code with the tool "dx".
An oldie, but a goodie. 
Java is a JVM language that runs on android. Groovy is a JVM language that is very limited running on android, as runtime bytecode generation does not get compiled to dalvik bytecode. As veraxAlea points out, the main VM on android is not a JVM.
That is interesting. As I note, I am rather newer to Java, so I am still finding my way around. I like the simplicity in your observation.
Kind of - `Properties` implements `Map&lt;Object,Object&gt;`. You can always just create your own specialised type, but normally you wouldn't need to do this unless you want to add specific optimizations. For example: class StringArrayList extends ArrayList&lt;String&gt; { } StringArrayList s = new StringArrayList(); s.add("foo");
I'd recommend Logback - much more powerful and flexible logging tool.
The code is now uploaded and available at my new reddit post [here](http://www.reddit.com/r/java/comments/12rv7n/java_based_text_encryption_one_of_my_first_old/)
You can use Logback as the underlying logging framework for SLF4J.
I'll add this, [Java reflection](http://stackoverflow.com/questions/37628/what-is-reflection-and-why-is-it-useful) offers a way to do 'python lists.' 
7ea4b17c! - Jesse Pinkmon styles.
For pro code (not personal projects), blocking code reviews are the only way to go. If your company doesn't do this, they should. If they do, and it doesn't work, they're doing it wrong. One of the points made in the article is that blocking code reviews cause commits to blow up into large amounts of code per review. This is doing it wrong. Any commit that can possibly be broken into multiple smaller code reviews should, and anyone tasked with reviewing code should be able to reject a commit for this very reason.
In what way is that not exactly the same as ArrayList&lt;Object&gt; list = new ArrayList&lt;Object&gt;();
List is an interface whereas ArrayList is a concrete type. Good practise is that you should always code to the interface so your implementation can change without affecting any other code relying on that class e.g. you could have a class which relies on one of your methods returning an ArrayList, but later you change your implementation to use a LinkedList instead which would break all calling code. Whereas if you had used List instead then you could change your implementation at will without breaking any calling code.
As your method is using instance variables of the class we need to see more code. Or take a closer look at line 43 as that's where the Exception is being thrown
Here is the class as I have it written so far. public class FunkyNumbers { int arraySize; int[] numbers = new int[arraySize]; public FunkyNumbers() { arraySize = 10; for (int i = 0; i &lt; numbers.length; i++){ numbers[i] = 42; } } public FunkyNumbers(int[] numArray) { for(int i = 0; i &lt; numArray.length; i++){ numbers[i] = numArray[i]; } } public void setNumbers(int[] numArray) { for(int i = 0; i &lt; numArray.length; i++){ numbers[i] = numArray[i]; } } public int[] getNumbers() { int[] newArray = new int[arraySize]; for(int i = 0; i &lt; numbers.length; i++){ newArray[i] = numbers[i]; } return newArray; } public String toString() { int numVal = numbers[0]; String values = "" + numVal; for(int i = 1; i &lt; numbers.length; i++){ numVal = numbers[i]; values = values + " " + numVal; } return values; } } And the client that was provided below.. // Tests the default constructor and toString public class FunkyClientA { public static void main( String [] args ) { int i; FunkyNumbers funNumbers, moreFun; System.out.println("FunkyClientA:"); System.out.println("Test default constructor and toString method"); System.out.println(); funNumbers = new FunkyNumbers(); System.out.println("toString result from funNumbers:"); System.out.println( funNumbers.toString() ); System.out.println(); moreFun = new FunkyNumbers(); System.out.println("toString result from moreFun:"); System.out.println( moreFun.toString() ); } // end of method main } // end of class FunkyClientA My apologies on formatting here on reddit. 
The same error is still generated. I'm not sure that its a matter of where but how I'm declaring it... 
I understand why that would cause the error but your previous idea of declaring it below did not resolve the error. Also thank you for pointing out on the escape characters. Why does listing a method as toString() cause issues though? (It's required by our professor so I'm curious as to what the cons to doing so are)
Fair enough! But if one is *this* interested in using something similar to dynamic typing while running on a JVM, why not use Jython, Clojure, JRuby, JavaScript through Rhino or Groovy (? not sure about last one).
It won't cause any problems and in this case it's pretty damn useful. Overriding toString() means OP can do this: System.out.println(funkyNumberObject); And it will print out the numbers with tabs in between them. If OP doesn't override toString() he would have to do something like this: System.out.println(funkyNumberObject.prettyPrint()); // Or some other method name. Pretty useful and it will not cause any problems. 
This assignement is very vague ! my guess would be : * for a point : compare the length of the vector (x,y) defining the point * for a circle : compare the area of the circle * for a cylinder : compare the volume As to how, check in each implementation of the interface if "obj" is an instance of the current implementation (Point, Circle or Cylinder), then use the right math formula to compute the length or area or volume of "this" and "obj" ex in Point : class Point implements Comparable { public bool greater(Comparable obj) { if (obj instanceof Point) Point p = (Point)obj; float f1 = /* the length of "this" */ float f2 = /* the length of p */ return f1 &gt; f2; } /* here you choose what happens if you try to compare two object not comparable */ }
Please don't tell me you believe that int arraySize; int[] numbers = new int[arraySize]; public FunkyNumbers() { arraySize = 10; for (int i = 0; i &lt; numbers.length; i++){ numbers[i] = 42; } } is supposed to do something different than int arraySize; public FunkyNumbers() { arraySize = 10; for (int i = 0; i &lt; numbers.length; i++){ numbers[i] = 42; } } int[] numbers = new int[arraySize]; Because that's what I understand from your comment ! If by "under" you mean inside, then that's ok :)
That's a way to see it, I think you have a bit of freedom of interpretation on what "greater" is anyway. I don't think that's the point of the exercise ;)
Before going on, since you worded the question the way you did: You can't change the size of an array once it is created. So, you can't "control" the size dynamically without copying your array to a new, bigger, array. That said: You can solve this in a few ways, either private int size = 10; private int[] numbers = new int[size]; public FunkyNumbers() { //You don't have to initialize the elements in an array of primitives. //In the case of ints, they will all be 0. So your for-loop is not necessary meaning //you could skip the constructor declaration alltogether if you like. } or private int size; private int[] numbers; public FunkyNumbers() { size = 10; numbers = new int[size]; } or private int size = 10; private int[] numbers; public FunkyNumbers() { numbers = new int[size]; } or even private int[] numbers; public FunkyNumbers() { numbers = new int[]{42,42,42,42,42,42,42,42,42,42}; } Taking your second constructor into account, I'd go with the following private final int[] numbers; public FunkyNumbers() { numbers = new int[]{42,42,42,42,42,42,42,42,42,42}; } pubilc FunkyNumbers(int[] numbers) { this.numbers = new int[numbers.length]; for(int i = 0; i &lt; numbers.length; i++) { this.numbers[i] = numbers[i]; } } This way, you will either have an array of size 10 with each element being 42, or you will have an array that is equal to the sent in array. Finally, you should declare your members private so that other classes can't access them. What you have now is default visibility, meaning that all classes in the same package can see your members and change them. 
Very nice! Smart one.
&gt; You declare the Array numbers before the constructor. This means that it creates an array with length null, as array size is only set to 10 in the constructor. No, it will create an array that has size 0. This is very different from a null object. &gt; This means that it calls a value at a position that does not exist because the Array Length is null Almost, but the array length is not null, it is 0. A primitive can't be null. The only way to get a null pointer exception from this code is if we take auto-boxing into account. &gt; Do not call the method toString() . This leads to trouble. No. If you need to call toString, call away. &gt; Try and avoid putting a tab in, its better to write \t We can agree on this.
Huh? You have no idea what you're talking about. Assuming his class FunkyNumbers has only *Object* as its parent class, the only thing his toString() method would print out is this: [getClass().getName() + '@' + Integer.toHexString(hashCode())](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html). So basically it's a pretty good idea to do that to get a better representation for his class.
Thanks for sharing the information. 
I think the main thing is to write the code as clearly as possible. Micro-optimizations like this shouldn't be the focus. In the case of your example it is much clearer to use the second one, so I would go for that. I would focus on making the code easiest to read and maintain rather than nano-second level efficiency gains.
This is true but I am still curious about the answer to the question.
Then you should have a look [here](http://stackoverflow.com/questions/8731026/how-java-handles-if-statements-and-efficiency)
Unless you use the "&amp;" operand the second one does the exact same. the "b&lt;1" condition will be ignored when the "a&lt;1" is ~~true~~ **false**. You could always just do the following: return (a &lt; 1 &amp;&amp; b &lt; 1);
You're welcome. Here's btw another data point concerning the relative popularity of the languages: http://www.ohloh.net/languages/compare?measure=commits&amp;percent=true&amp;l0=java&amp;l1=scala&amp;l2=-1
Neither.
Scala is certainly a lot better than that crap they call Python. Python is just confusing, slow and its standard implementation has an crappy thing called The GIL. Closures with their one line limitation are awful too, with the only reason for this limit is that Guido couldn't come up with a 'good lock' formatting rule :|
Did you look at the byte code generated for each? I'd be shocked if they were different.
I doesn't make a difference that is noticeable. The most important thing is that your code is clear, and easy to read, even if it means writing more lines
The point is not these 2 particular features I mentioned, but they are examples. Many other features exist. The libraries of Java are built upon the Java foundation as a language. When the language itself is poor and has unnecessary unsafety, libraries will inherit those problems from the language. The extreme verbosity of passing around a function *is* a bunch of hoops. Java 8's closures still requires defining an interface class to receive a function, so it's not really "full support of closures". It's better support on the caller side, but still horribly verbose on the receiver side. Additionally, other languages also have great libraries for working with the web. But they are built on a more solid, more reliable foundation than Java. The fact that there is a kludge to help a bit with the NPE problem is not very helpful. The situation in Java is still far worse than in better languages, and again, this is merely an *example*. Some more examples would include safe pattern matching (vs. boolean blind conditionals) and much more powerful generics (without the horrible variance problems Java generics have). What advantage does the Java *language* have? Compared with Haskell, for example: You pay with extra verbosity. Less safety. Less flexibility. What do you get in return? 
This! Code is read MANY more times than it's written. Making sure that it will be understood by the programmer in a year, or 5 is way more important than the microsecond that you *might* save.
I think he was trying to learn how to do it. It's a good path to discovering all those languages you listed, as well as the concept of 'inversion of control/dependency injection.' Javascript on Rhino is basically part of the bean scripting framework and should not be in that list. Groovy though is probably the best aligned in that list because all java code is groovy code with very few caveats. Your original answer is the best answer to the OP's question and the reason I responded to it. 
Try http://www.reddit.com/r/stljobs or http://www.reddit.com/r/jobs
This looks like homework. How about counting the number of times you can subtract 50.
How about using: round = coord - (coord % 50) + 25; But please note: this differs from your roundCoord() method for values of 50, 100, 150, etc. because your code had '&amp;&amp; round &lt;= 50)'. 
I'm only dealing with positive coordinates, so this works perfectly. Thanks for your help!
That would round to 75 for the value 50,which isn't right. The first 50 should be 51.
Why do you have a function called "efficiency"?
Hmm...run a unit test...or scroll through a few kilobytes of hex dumps in search of differences...which one is the bigger waste of time?
You don't even need parenthesis. return a &lt; 1 &amp;&amp; b &lt; 1;
&gt;What advantage does the Java language have? Compared to the languages with more "features", almost always performance. &gt;What do you get in return? Clarity, better error diagnostics, better tool support (a language that adds features in every freaking release that happens every few months is really hard to support by tools), binary compatibility, easier to organize, etc etc. Look at the scientific paper I referenced above (https://cdn.anonfiles.com/1346131830146.pdf). Scala might be more feature rich as a language, but this also comes at a price. It's harder to learn, harder to diagnose and it absolutely does not necessarily make programmers more productive. We've run our own trials too, and despite all shouting by hipsters, those "hip" languages invariably have problems of their own. Python for example was once touted as being so cool and hip and everybody had to use it, but in practice there suddenly was this GIL, and there is this magic, and there's this really bad performance, and if programs get bigger than a certain size you lose track of what is what and productivity drops massively. Scala was touted as the better language as well, and while I think it's a nice language indeed, it does have its problems. Binary compatibility for instance. For years(!) now I've been hearing that this is a temporary problem and that Scale [current-version + 0.1] will fix this once and for all, but then for every other release they do break binary compatibility again. Then there was the range of performance problems Yammer reported about a year ago (look it up), and there's the risk of symbol abuse which leads to completely and utterly unreadable code. Then there's the powerful types-system that makes more than a few signatures in the standard library completely unreadable. And what good are all those fancy language features if users don't migrate to it? The Python 3 migration has been going on for YEARS and YEARS now. Will people ever be able to let Python 2 go? You tell me... With Java people adopt a new version relatively quickly. Look at the Java 7 adoption rate. It's quite impressive really. If Haskell was so great, why isn't anybody using it? If it was really that much better, wouldn't the companies that DID use it be so much more productive and effective that they would force their "poor Java using" competitors out of business? Maybe, just maybe, there's a little more to it, don't you think? And while it's true that language features do of course influence the designs of any libraries for that language, it looks like you totally underestimate what a library can do. A language like Smalltalk for instance has a minimal amount of language features and thus *a lot* happens in the libraries. Objective-C has had a similar minimalist approach to language features as well (only lately is Apple adding a few features directly in the language). 
Why not? :)
Actually the "b&lt;1" condition will be ignored when "a&lt;1" is false. Because both need to be true for the whole expression to become true, if the first one is false, the second one can be ignored and not the other way round. So if a is not less than one false is returned and else the second expression is evaluated and returned. Meaning if b is less than one true is returned and else false is returned. Confusing.
Easily the most helpful and well explained post. Thank you! The examples made it much clearer what was going wrong in my class in regards to the IndexOutOfBoundException and cleared things up. Appreciate the help!
Good point on the special case, I think a print statement should suffice to let the user know the array is empty.
Which makes perfect sense to me, I have no idea what PandaK551 is talking about. Appreciate the help though!
Falsely benchmarking something sounds like the bigger waste of time to me; an inconsistent 0.5-1% difference doesn't rule out background OS processes taking up cycles of the CPU, especially not for the comparatively small sample size you're running.
I posted the disassembled code up above for the different if statement versions. They do disassemble into the same bytecodes, but frankly I would prefer having a unit test around
Jup. Exactly. The exact evaluation explanation was too much, I think. Anyway, point is that second statement is not evaluated if the first one is *false*. It is just a little logic error anyway. Happens to me all the time, too.
&gt; ...but frankly I would prefer having a unit test around Why? It's been pointed out elsewhere that this micro-optimisation is pointless, so at best you're just wasting your own time, and at worst you'd be wasting the time of others who have to maintain your code. I'm not arguing that unit tests have their place, but this isn't it.
http://isocpp.org http://isocpp.org/get-started
I couldn't think of anything else and the title of the thread is the efficiency of if statements.
This was when I first started programming. Looking bad I had such terrible code. I read somewhere that static functions made the program easier to read, and I took that to the next level...
I think the last sort method would return 'true' if the given arrays contain the same values but not in the same amount. e.a. int[]{1,2,1} and int[]{2,1,2}
Why not fork the program and add that to it? I plan on making the whole code a lot more simple and modular very soon.
Not only have I already done this and it was too close to call, but it also doesn't answer the most important part of the question, which was "why?". It turns out that the code is written exactly the same way in byte code so neither is more efficient. 
This isn't actually in any code that I have, I was really just wondering if either was more efficient because I like to know how these things work. Thanks for your link in the other comment. It solved it. 
In my opinion a better solution would be to use .trim() on the input line. That way if someone enters the name " Bob " it will also trim to just "Bob".
You're right, I didn't go into that because in this case the two options result in exactly the same byte code once the compiler optimises it.
A lot of people like eclipse, others like IntelliJ. NetBeans is the 'official' IDE I suppose but less people like it, it will get the job done and works well for what it does, as do the others. http://www.oracle.com/technetwork/java/javase/downloads/index.html Do you know what version of Java you need to target? If you can start with any I would say use Java 7. Make sure you get the JDK, it comes with it's own JRE. Further down the page is the JDK with netbeans packaged with it. I never used eclipse but here is the link. http://www.eclipse.org/downloads/ You will probably need to install the JDK first, then eclipse. Here is intellij. http://www.jetbrains.com/idea/ It uses it's own java version internally to run itself, but you will need to install the JDK to actually do anything. I think this is the best one and you can use the free version which is good or pay to get all the features. I would recommend installing the JDK separately. Currently they are bundling a current version but almost every time I've checked before the bundle used an out of date version of netbeans. Also snag the free version of IntelliJ and eclipse. Try each, read the quickstart/tuts for them and see which you like the most then uninstall the others.
I don't know why you got down voted. Best I can recommend is ether netbeans or eclipse as an ide and looking over the sun/oracle pages on the topics. 
I think you may be right.
I would use [JodaTime](http://joda-time.sourceforge.net/)'s [Interval](http://joda-time.sourceforge.net/apidocs/org/joda/time/Interval.html) object for this. 
I wrote it in C#, but it shouldn't be hard to transfer. I'll take a look later today.
You had a perfect opportunity for System.out.println("Hello, yes, " this.dog); And you blew it. Eternal shame on your family.
No, "Strings" are handled specially by the compiler. You cannot make your own formats, unless you put them inside of strings that are parsed at runtime. Regular expressions are an example of this.
It's not possible to do what you are thinking but there are some ways you could improve the way that you instantiate objects. http://en.wikipedia.org/wiki/Builder_pattern The builder pattern is a good place to start. MyClass class = MyClassBuilder("Hey") .firstName("Delivery") .surname("Ninja") .build() Or you could create your own custom DSL (Domain Specific Language) http://docs.codehaus.org/display/GROOVY/Writing+Domain-Specific+Languages I created one where I could annotate test classes with nested text based structures. @Model{"House( Person ( Delivery, Ninja ), Person ( Mother of Ninja ), Person ( Father of the Ninja ) } And then I called getModel() to return a fully populated domain model. This is a lot more effort and requires understanding of visitor pattern as well as some Groovy. Not sure if you wanted these alternative answers but there you go. 
Thanks everyone! I assumed it wasn't possible, but I couldn't find a definitive answer and so I figured I'd ask. I really appreciate this subreddit for the quick and good answers! It means a lot to me.
As a developer that switches between both platforms on a regular basis I have been using [STS](http://www.springsource.org/sts) most recently, its basically eclipse with additional enhancements. In the end it does not really matter. You can even use Visual Studio to create Java applications if you want to go through the trouble of setting up VS to run Java's compiler, you just won't have intellisense.
I think you meant: System.out.println("Hello? Yes, this is " + dog.getName()); Or maybe: System.out.println("Hello? Yes, this is " + dog.getClass().getSimpleName()); But yea. Missed that chance. :-/
The first form is called a *string literal*. You're embedding data, the string, literally in your source code. When you use it you're not constructing the string, just referencing a string created at compile time. Numbers in your code are also literals: int literals, float literals, etc. There are also array literals using curly braces. Java doesn't let you define your own literal syntax -- very few languages permit it. The only ones I'm aware of that do are Common Lisp and Perl. 
yup - didn't say it was a good idea. (of course you could write a plugin for the IDE but we are getting pretty ridiculous now)
As an aside, don't do this: &gt; String s = new String("String here"); [(more info)](http://books.google.ca/books?id=ka2VUBqHiWkC&amp;pg=PA20&amp;lpg=PA20&amp;dq=effective+java+%E2%80%9Cnew+string%E2%80%9D&amp;source=bl&amp;ots=yYHhLnw_Q_&amp;sig=yU3NLGcfkc2H_v2A3Myr3KxRMas&amp;hl=en&amp;sa=X&amp;ei=J_mbUPz9G8XKyQGnhoH4DQ&amp;ved=0CEMQ6AEwBA#v=onepage&amp;q=effective%20java%20%E2%80%9Cnew%20string%E2%80%9D&amp;f=false)
There're book by Bruce Eckel, called Thinking in C++/Java, which are free online
&gt;Unfortunately, that is not possible in Java. It has been proposed several times though and project Coin had some very serious proposals that at some time were even accepted and included on the Java 7, then Java 8 roadmap. Unfortunately, at some point they just silently disappeared again :|
I think you mean the opposite of verbose but yes, groovy is pretty groovy man. It will be hard to top it.
Nope, the point is its not verbose. As verbose doesn’t mean it cant be less verbose!
Anyone have a link to a place that explains closures. I'm just mildly interested in this topic but I would just like a high level overview of this concept.
I found this book immensely helpful. It explains things with short examples that give you an idea of where the learned concept will be useful in a real world setting.
Or concise.
Ugh. Obfuscating feature. :P edit: ya, I knew this would get downvoted. :P
Actually, it's how lexical analyzers work. The lexer uses regex to parse input into tokens, then passes tokens to the parser to figure out the grammatical structure.
Started in Health Insurance, then went to Auto / Home Personal Insurance and RailRoading is where I've been for the last 6 years. 
Closures.. the last time I looked at it I concluded that it does make the declaration of anonymouse classes cleaner, but that it would not have other great advantages that I could think of. Still, C# people seem to miss them a lot when they switch to Java so I hope it will be an advantage once we find out how to use them effectively. For people that look for an explanation of closures/lambda expressions: [here](http://www.geekyarticles.com/2012/01/whats-cooking-in-java-8-project-lambda.html) is a very clear explanation, and [here](http://java.dzone.com/news/java-8-lambda-syntax-closures) the official syntax is explained, which might give you an idea what you can do with it. 
[Here](http://www.geekyarticles.com/2012/01/whats-cooking-in-java-8-project-lambda.html)
I completely agree with you. As I said, C# people switching to Java really miss them, but Java people just don't know how to use them yet. I think it will be an advantage once the users embrace them. People don't like change in general.
Thank you. I am trying to make it so the bot's turn and player turn will switch between each other based on the check boolean, but after the computer's turn, it doesn't seem to switch back to the player. I am still having some trouble. Any help would be appreciated.
Explain the rules of the game to us. You might be surprised at how this simple task of putting the problem in your own words yields insight into solving the problem. Also, I notice you are not using 'else' or 'else if' after your 'if' statements, which severely limits any state transistion from one state of the game to the next. Turn based games are effectively state machines. A second feature you are not taking advantage of is breaking up your steps into methods/functions. Both of these concepts are fundamental to all programming languages, and understanding them first is going to later give you that 'Aha!' moment.
You can get close with something called [double brace initialization](http://stackoverflow.com/questions/924285/efficiency-of-java-double-brace-initialization) but there are gotchas.
I thought laziness was one of the three virtues of great programmers.
Move the print after each for loop. Reset maximum before or after each loop. Why 4 for loops when you should b able to roll them into a 1 to 4 loop? Remove duplication.
You have to walk through it one step at a time. With the way you have it... if Sales is less than maximum, what happens? Set maximum and print (both are inside the "if" statement). So during the first Quarter, you will get Max = 1, print 1... max = 2, print 2... .. . What happens at Quarter 2? Maximum is still 6 from the previous Quarter (You never reset it to 0, inside the loops). So when you hit Quarter 2, 3, 4... the IF never fires for MAXIMUM because it's 6. 1 &gt; 6? False. 2 &gt; 6? False. Etc. You want to print at the end of each quarter. // One loop, 4 times for 4 Quarters. for (int Qtr = 1; Qtr &lt;= 4; Qtr ++){ // Maximum needs to be reset for each Quarter. Otherwise you'll start Quarter 2 at "Maximum = 6" maximum = 0; // For each DIV, find Maximum for (int div = 0; div &lt; DIVS; div++){ if (sales[div][0] &gt; maximum) { maximum = sales[div][0]; } } // At the end of Each Quarter, outside the For loop, print "Highest Division" System.out.println("Highest division for Quarter " + Qtr + " is " + (div + 1) + "."); } I find it weird to have [div][quarter]. I think it'd be easier to follow if you had [Quarter][Div]. Would be logical to then extend it into [Year][Quarter][Div] for example. You might be able to [get rid of the int DIV, int QTR in the function call as well](http://stackoverflow.com/a/5958215/409025) public static void divisionHighestSale(int sales[][]){ int DIV = sales.length; int QTR = sales[0].length; int maximum = 0; ... or public static void divisionHighestSale(int sales[][]){ int DIV = sales.length; int QTR = 0; int maximum = 0; for (int i = 0; i &lt; sales.length; i++) { if (QTR&lt; sales[i].length) { QTR= sales[i].length; } } } 
 1 9 0001 1001 9 1 1001 0001 int a = 19; int b = (a&amp;0x0F)&lt;&lt;4 | (a&amp;0xF0) &gt;&gt; 4; Expand that for bigger numbers, you're shifting nibbles around. EDIT: Hmm... does this work for higher numbers? Or just BCD coded... 
Er, I don't really understand this sorry can you explain more? Also I'm gonna have to do this 1-10000.
read the lines of code one by one, that's how the computer does it. it remembers or knows about exactly nothing during the execution of a line, except for the variables etc you mention on that line. the only exception being the end of a block { } where the computer will look at the start of the block to see if it needs to do anything. for example, you seem confused about the "while" statements. those are only evaluated when it becomes their turn as you read the code from top to bottom, and then again when you reach the end of the while block ("while (something) { ... }" &lt;- while block)to see if it should be run again. It's *not* something that is run as soon as the conditions becomes true. At the time that any other part of the code is executed, the computer is utterly oblivious to the while statements existence.
I don't know if there is a certain way of doing it (im not necessarily what you call an java expert), but you could try converting the int to a String and then using .substring() and .indexOf() 
Off the top of my head, I'd do the usual mod/div thing [this isn't tested, but something like it should work]: int i = 91; // input int j = 0; // output while(i &gt; 0) { j *= 10; int p = i % 10; j += p; i = i / 10; }
Do you need to retain leading zeroes in the result - e.g. should 10 reverse to 01 or 1? If leading zeroes need to be retained then I'm pretty sure you'll need to leave your result as a String. Otherwise though I don't think you're going to get any simpler than what you've got - chunkyks answer looks like it'd work, but I don't think it's any simpler than the following: new StringBuilder().append(intValue).reverse().toString()
That's my point. Closures don't make Java readable.
I have no problem with EventListener code. Eclipse code completion and refactoring tools makes writing them fast and trivial. This is my point. Explicit implementations interfaces is far clearer. You're not left guessing. If you want to avoid "Boilerplate", go jerk off to Perl. They love obfuscated code. 
&gt; C++ is a horrible language. I agree, but if you want to milk every ounce of performance out of an XBox or a PS3... There are no other choices than C or C++.
This is what object oriented programming is for! Create classes Data, Action, Direction and Frame. Put some list of Action objects in Data, 4 Direction objects in Action (I don't know how you want to use them, you could add four different objects or an array of objects, since you say the amount fixed to 4), some list of Frames in Direction and a Point in Direction. Then you make sure you can access those fields by adding getters and setters for them. In case this sounds a little vague, here is an example of the Data class, try to do the rest yourself: public class Data { private LinkedList&lt;Action&gt; actions; // constructor public Data() { actions = new LinkedList&lt;Action&gt;(); } // setter public void addAction(Action a) { actions.add(a); } // getter public Action getAction(int index) { actions.get(index); } } Then you create the Action class: public class Action { .... } And the others...
Except that decimal `19` is `00010011` in binary, 16+2+1. The op is not using BCD.
Don't worry, he is assuming for some inexplicable reason that you are using Binary Coded Decimal, which you are not.
I agree. If leading zeros should be dropped just parse it back to an int. Despite the fact that this looks like a homework problem... learning the ins and outs of the API like this is very important.
* Javadocs! There's no documentation to say what the class or methods do, or what any of the variables are meant to be. What happens if I call it with a negative num value? Or with MAX_INT? * You have a method called **get**Primes that doesn't return anything. * No point in having an empty default constructor when there are no other constructors in the class. * Why have you done C-style variable declarations? You can declare the variables x, y and c as soon as you use them instead of declaring them early. * You have an if statement to ensure that you don't get even numbers in your loop, when you could just always increment by 2 and never get them anyway * Line 20 will never trigger - you're testing if Y is greater than half X immediately after looping Y up to half X. The only way for this condition to be true is if your loop goes beyond half X...
&gt; It is a block of code that can be assigned to a variable or passed as an argument to a method or passed as an argument to another lambda expression just like any other data. The code can also be invoked whenever required. I used to really appreciate these in dBaseII programming days. I still could see a use for them. But danged if I see any practical difference between Lambda / closures and Runnables / Callables. Be pleased if anyone cares to enlighten me (please explain like I'm five). 
Less typing. Easier to read.
Am I right to assume Java closures will be just a more compact syntax for anonymous inner classes, and that any captured variables need to be final? Or will they be "real" closures that can potentially alter variables in the captured scope?
Closures are the one reason I choose C# over Java actually. The ability to treat a function as an object, and write anonymous methods and move them around as variables is indispensable to me. For the kinds of things I do, the code length is nearly doubled moving from c# to java because of the work arounds I have to perform. oh and extension methods.... damn i love extension methods...
Or just keep the JVM and switch to Scala. :) also, keep all of your existing Java code since it is almost completely interoperable. 
Mostly what's appealing about doing it this way is that you're reversing the number itself, not some weird stringy representation of it. [well, not that weird, but certainly not the number itself] As mentioned elsewhere, this also falls down in the face of leading zeros, but you can fix that easily: int i = 91; // input int j = 0; // output int minDigits = 4; // minimum number of digits [ie, include leading zeros] final int base = 10; // The base of the number we're reversing int sign = (i&lt;0)?-1:1; i *= sign; while(minDigits--&gt;0 || i &gt; 0) { j *= base; int p = i % base; j += p; i = i / base; } j *= sign; And then, of course, if the number is being passed to you as a known-to-be-parsable-as-int string, you can just set minDigits to be str.length() Typing that up, I'm also reminded that I just used the fabled ["goes to" operator, --&gt;](http://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=6&amp;cad=rja&amp;ved=0CFoQFjAF&amp;url=http%3A%2F%2Fwellington.pm.org%2Farchive%2F201202%2Ftravis-holton_perl-secret-operators.odp&amp;ei=Bz6dUIWgDYiwigL-wYG4DA&amp;usg=AFQjCNHZBrtCtvZRD1mIkFZ2lvfbPs3dMg) EDIT: Magic numbers were upsetting me EDIT2: Integrated sign comprehension
Parsing back to an int might throw a NumberFormatException if the original value is negative. int value = -139 String reversed = new StringBuilder().append(value).reverse().toString(); Integer.parseInt(reversed); //parsing "931-" But OP stated in another response that only values between 1 and 10000 need to be taken into account so this shouldn't be an issue.
"complex language that is concise and readable...." I agree with you that closures don't inherently make code hard to read. And as a Lisp programmer there is nothing I enjoy more than watching the world congratulate itself for re-re-re-re-reinventing a wheel that has been around for like 50 years now.... But do you really not see the problem with your statement?
This is just the Object Oriented paradigm. There is nothing special about an object of objects, because they are all around. If you create a String object in your self-defined class, you also create an object in an object, because String is an object too.
Ah, I was thinking this was going to be some great overhaul. Seems like it's not really that big of a deal in the big picture.
Can you actually modify a variable? count here for example
That's definitely part of it. It has to do with affordances in usability. Java has like one or two ways of doing something, adding closures, gives you *more* rope to hang yourself. It gives yet another way to do the exact same thing that is already covered by another pattern. I don't need it. it's unnecessary. And what kind of impact will that have on refactoring tools? It's adding syntactic clutter for a relatively small problem. Sometimes the best option is not changing something.
[StringUtils.reverse](https://commons.apache.org/lang/api-2.5/org/apache/commons/lang/StringUtils.html#reverse\(java.lang.String\)) More specifically, Integer.parseInt(StringUtils.reverse(Integer.toString(19))) == 91
No arguments about cleaner in that it's only dealing with ints, and it'll definitely be faster, but then that should only really be a concern if this is something which is going to be called a large number of times. It's also a far more intelligent answer than mine in that it shows a head for numbers rather than simply knowing an API call. However, I stand by my point that this isn't necessarily simpler - by which I mean in "how the code looks" sense, rather than a mathematical/logic sense. A developer looking at int -&gt; String -&gt; reverse -&gt; int is likely to see what's going on pretty quickly; someone looking at int -&gt; while loop -&gt; modulus -&gt; multiplication etc is going to have to spend longer going looking at the code to see what it's doing, and that it's doing it correctly.
You are right that it is less elegant if you do not encapsulate it; the while loop does not make the whole thing very readable. If you are looking for a one-time solution, then your is definitely more easy to read and to use. If you are going for a efficient solution that you are going to use often then I would suggest to put the solution of chunkyks in a method and document it. Then you never have to worry about the internals.
No, you can't. Compiler should rise an error about modifying final variable. You can only use final variables in lambdas, just like you did with anonymous classes. The only change is that you need not to declare variable as final, it's finality will be inferred automatically.
Java doesn't have Gotos for precisely that reason. Fundamentally altering the structure of a language will lead to further obfuscation. Java's strength is in its simplicity.
it is not a mistake. sometimes it's just clearer. u can argue that this way there is a needless boolean comparison, but it isn't a mistake.
Not at all, just giving hints for an approach instead of solving it for OP like all the others have. BCD is easy to work with and fits his case exactly.
So if the OP asked about reversing a number in base 10, why did you decide to be useless and tell him how to reverse a number in BCD?
Except the OP has regular ints, not BCD ints, and wants regular ints. So giving the answer for BCD is completely useless and much more complicated than what he needs. 
Because it's incredibly easy to convert base 2 to BCD, swap nibbles, and convert back. 
That's great, you have a strong opinion.
You don't have that kind of power in Java. That might something you get out of a scripting language. The equivalent would be to put var1 and var2 into an array (or list, or whatever), and then you can access them using a variable. This would also scale much better, if say, you had up to var50. ex: System.out.println(varArray[decider]);
People wonder why the Java hate, and now Java is defaulting to installing the Ask.com Toolbar while UPDATING its software, AND will default the system to upgrade without asking next time - anybody want to bet whether you get a chance to not install the toolbar?
Apache commons configuration. 
I think I'll stick with java properties and XML. Trying to decrease the need for external libraries to reduce the end jar size
Keep calm and relaxed. Make better pauses, let them think. Use PowerPoint's functions, like showing the points after another. Showing to much text isn't a good practise. Use a clean browser (reddit.com appearing isn't very professional). But good start, keep going. 
I've never heard of lenses before. Is there any background material somewhere I can read up on them?
For anyone else who was looking, the best answer I've found (from a crosspost in /r/javagamedev) is Jarsplice, which can produce .exes or .app packages. Haven't had a chance to test its output yet, but it comes recommended and *seemed* to work.
Oh, I didn't notice reddit xD. And thanks for the tips, I'll be sure to think of that when I make number 3 tonight. I know that showing the points all at once when there are a lot of them is bad, and I'll try to make it a little easier @edit: Oooh, I see, my favorites bar was still on... That was pretty silly... I'm going to use in-private next time.
I'm not even sure you know what you're on about any more. [String.format returns a String, and String doesn't have a reverse\(\) method](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html). And even if it did, these comments have come about from you saying: &gt; You're doing exactly what OP was doing you're just hiding the for loop. ...which is exactly what this hypothetical String.reverse method you've invented would do. In short you're trying to look smart in this thread, and failing miserably - please stop for everyone's sake.
Well seeing as he's decided the String.reverse() method exists I'm sure it's easy to magic up something which does the reversion. But seeing as we're allowed to invent things I've decided there's an Integer.reverse() method, so there's no longer any need to use the String class.
Y U NO C#? //downvote me now
Post specific examples of your code, then say what you think's wrong with it - that way you may get some help, but you've got to show that you've tried otherwise you're just wasting everyone's time.
That's what I get for using [Groovy](http://groovy.codehaus.org/groovy-jdk/java/lang/String.html) in a Java forum I suppose.
There's also countless online lectures, videos, and guides..
import java.awt.*; import java.applet.*; public class Project13 extends Applet { public void paint (Graphics g) { for(int x=0;x&lt;400;x+=80) for(int y=0;y&lt;400;y+=80) { g.setColor(Color.white); g.fillRect(x+400,y+20,100,40); } { g.setColor(Color.black); g.fillRect(x,y,60,60); } for(int x=0;x&lt;320;x+=80) for(int y=0;y&lt;320;y+=80) { } } } _______ I need it to look like a white rectangle and many solid black squares separated by a white line. I can't seem to get the white lines to surround the entire applet.
 import java.awt.*; import java.applet.*; public class Project13 extends Applet { public void paint (Graphics g) { for(int x=0;x&lt;400;x+=80) for(int y=0;y&lt;400;y+=80) { g.setColor(Color.black); g.fillRect(x,y,60,60); } for(int x=0;x&lt;320;x+=80) for(int y=0;y&lt;320;y+=80) { } } } ____ I did get an error with that code. This was my original correct code 
Java help, yes, it's linked in the sidebar.
Agreed; however if you are using test coverage to flag code that needs more tests, eliminating as much untested code as possible removes it from view. I wish there was a way to configure Cobertura to ignore certain classes of code. It might be possible to do that if we combine it with the PMD AST tree.... one more thing to add to my list of todos....
Sounds good, just wanted to suggest it. 
If you have never done ADF, just be prepared for a steep learning curve. My basic thoughts are it makes the hard stuff easy, and the easy stuff hard. The declarative part makes it feel like you are coding with color crayons at times. Then you will spend a chunk of time learning where/when events trigger. On the plus side, it make it damn easy to work with a database.
You could use Launch4j to wrap your application in a .exe, then include conf in the class path, which you set in the Launch4j UI. I use this software to to package .exe's with a bundled JRE. http://launch4j.sourceforge.net/
The conf directory is full of configuration files and certificates (which change all of the time) I would rather not hard code the names in the jar's manifest file. I think I am just going to package the all of the dependencies into a lib directory it has worked in the past.
You can automate that with ANT. Here's a page I found with a quick google search... I've derived something like this one my own before: http://martin.ankerl.com/2005/11/30/howto-create-manifestmf-classpath-from-ant/
For many years Gamedev wasn't the place where java was used. But nowadays as Android become more and more popular, Java is used for that one too
Do you need conf to be on your class path? Your shell script is assuming the current directory is where the shell script lives. If so, you could also just assume that from within the application, say new File("conf/blah.txt"). It is not as pretty and good as arranging the classpath, but should work. In one application, I did a big hack to find the URL of the jar that loaded the main class, then climbed up to the conf/ folder. To find the jar, look up getClass().getResource("/com/example/MyApp.class") , get the ASCII version, strip away from ! and out, then make URL and resolve "../conf" (or ./conf if you are not running from lib/.) Add URL to a new URLClassLoader and use as needed (thread context loader). Should work on any OS, any current directory.
You can add jars to the classpath (and specify the class to run of course) java -classpath .:conf/:test-SNAPSHOT.jar org.testng.TestNG suites/audit.xml BTW: why not ask on www.stackoverflow.com?
Dude that's not a hack. It's called dynamic class loading.
I would use something like uberjar, which is really simple if you're building with maven.
**[An example where lenses are useful](https://github.com/ppetr/jLens#what-are-lenses-useful-for):** Suppose we're creating a GUI that allows the user to edit some data. We want a component that pops up a dialog window where the user can update a `Person'`s name. Without lenses, we'd have to hard-wire `Person` and its `getName()` and `setName(...)` into the component. This would be quite inconvenient, and we'd end up with a separate dialog class for every field we wanted to edit. With lenses, we can create a single generic editor dialog that can edit anything that has a `String` inside: public EditorDialog&lt;M&gt; extends ... { protected final M model; protected final Lens&lt;M,String&gt; lens; public EditorDialog(M model, Lens&lt;M,String&gt; lens) { this.model = model; this.lens = lens; } protected String load() { return lens.get(model); } protected void save(String value) { lens.set(model, value); } ... } Now whenever `EditorDialog` needs to read the value that should be filled into its text field, it simply calls `load()`. And when the user edits the field and closes the dialog, it simply saves the value by calling `save(newValue)`. Voilà, we have a generic editor component that allows us to edit a String value within anything we want. We can use it to edit a person's name by calling `new EditorDialog(somePerson, Person_L.name)`. But we can use it as well to edit a person's seller's name by calling `new EditorDialog(somePerson, Person_L.seller.name())` etc. 
Neat example, I was definitely having trouble trying to find a use case, but that seems like a pretty good one. I'm not sure how I'd approach it without using a Lens anymore!
I believe that you are referring to nested classes, this explains them http://docs.oracle.com/javase/tutorial/java/javaOO/nested.html
 public void Suite(int room){ Should be : public Suite(int room){ And HotelRoom is missing a constructor. Try adding something like this: public HotelRoom(int room) { this.roomRate = room; } Then move stuff to seperate files.
Adding that last bit causes an error with the suite: constructor HotelRoom in class UseHotelRoom.HotelRoom cannot be applied to given types; public Suite(int room){ 
A good place to start might be browsing github https://github.com/languages/Java or sourceforge http://sourceforge.net/directory/language:java/
just email the developers? are there requirements?
 import javax.swing.*; public class UseHotelRoom{ public class HotelRoom{ public int roomNum; public double roomRate; public HotelRoom(int room) { roomNum = room; setRoomRate(); } public int getRoomNum(){ return roomNum; } public double getRoomRate(){ return roomRate; } public void setRoomNum(int num){ roomNum = num; } public void setRoomRate() { if(roomNum &gt;= 299 &amp;&amp; roomNum &lt;= 0){ //greater than 300 AND less than 0? roomRate = 69.95; } else{ roomRate = 89.95; } } } public class Suite extends HotelRoom{ public Suite(int room){ super(room); roomRate +=40; } } public static void main(String[] args){ UseHotelRoom useRoom = new UseHotelRoom(); UseHotelRoom.HotelRoom a = useRoom.new HotelRoom(200); UseHotelRoom.Suite b = useRoom.new Suite(200); System.out.println(a.getRoomRate()); System.out.println(b.getRoomRate()); } } This outputs the room rates. I would try and refactor it. Public instance variables, bug in the 'if' statment, calling set from constructor and useless 'UseHotelRoom' class could all be changed. However, it does *work*.
Thanks! It does work!
Or submit a pull request
Thanks for the advice
I agree with jambonilton, Github and Sourceforge are good places to start looking. One of the best places to start is go to an active project's page, and then go to Issues on Github and Bugs on Sourceforge. Look for open and unassigned bugs which you might be able to solve, and take a shot at solving it. If you come up with a solution, send in a patch. The developer sometimes will directly apply your patch, or massage it into the code. It is a good way to get started since in a project you're helping them fix a problem right off the bat. You might have to look at a few projects and a few bugs before you see one you think you might have a shot at fixing in a few hours/days. This is what I did with jEdit when I was a novice Java programmer, I wrote a blog post about it - http://www.vartmp.com/blog/java/jedit .
If anyone knows about Java3D and can help me figure out a problem I have with collision avoidance I would be soooooo happy. http://goldchest.sourceforge.net/main.php
Ok a general discussion on Java source files and class definitions. The reason you received the first error about putting classes in their own files is that a java source file can only have a single high-level **public** class that is named the same as the file. So you can't have something like: file: Test.java public class Test { .... } public class OtherClass { ..... } The compiler will tell you to move OtherClass to a separate file. You can, however, have multiple classes defined inside one larger class like you are doing: file: Test.java public class Test { public class InsideOne { .... } public class InsideTwo { .... } } The reason this works is because there is considered only one class in the Test.java file, Test, the others are considered 'inner classes'. The other two end up with the class names Test$InsideOne and Test$InsideTwo but are accessed in Java with dot notation Test.InsideOne and Test.InsideTwo. You can, though, have multiple classes inside one Java file that are not inner classes so long as only the one that matches the source file name is public. file: Test.java public class Test { .... } class OtherClass { ..... } This will generate a Test.class and an OtherClass.class file, but the OtherClass.class file will have a default scoping of package protected limiting access to it outside the package it is defined in.
I think this is not possible with Swing or JLayeredPane, but implementing it yourself takes only 20-30 additional lines of code if you use BufferStrategy, so I would go that way!
You can try this, but I'm not 100% sure. layeredPane.repaint(deco.getBounds()) Opaque (deco) components are probably better optimized for such scenario. &gt; can take up to half a second to redraw that component Cache it in *compatible* BufferedImage :)
At line 35 your code is unable to parse a String into double. Check the string that you"re trying to parse.
I'm in agreement with majeric on this. I program in Scala by choice and would never go back to java myself, but I see value in there being a Java as opposed to a watered down scala that used to be java. Java is simple and it is simple for IDEs to assist a great deal (in theory they can help with scala too, in practice, it's not even close yet). Java is simple to learn and then as a beginner programmer you're off leveraging everything written for the JVM. That's very nice and very valuable. Not all tools should be power tools.
To help solve these problems try stepping through your code using a debugger. You will be able to check the values of all the variables as you step through each line of code. I've not read it but here is an article. http://www.vogella.com/articles/EclipseDebugging/article.html
The question is a bit foggy, but would something like this work? public void getCombinations(int purple, int gray, int yellow, int brown, int raised){ //purple loop for (int p = 0; p &lt;= raised/purple; p++){ //gray loop for (int g = 0; p &lt;= raised/gray; g++){ //yellow loop for (int y = 0; p &lt;= raised/yellow; y++){ //brown loop for (int b = 0; &lt;= raised/brown; b++){ if((purple*p+gray*g+yellow*y+brown*b)==raised){ System.out.println("#Of Purple: "+p) System.out.println("#Of Gray: "+g) System.out.println("#Of Yellow: "+y) System.out.println("#Of Brown: "+b) } } } } } } 
Well I couldn't fit recursion into it, as a return type of bool was no help to me, but I did come up this this, hope it helps! public boolean array220(int[] nums, int index) { for (int i = 0; i&lt; nums.length; i++){ for (int j = i; j&lt;nums.length; j++){ if (nums[i]*10 == nums[j]){ return true; } } } return false; }
Actually, here's a sample with recursion, although it's a little more redundant than recursive: public boolean array220(int[] nums, int index) { if (index &gt; nums.length) return false; for (int i = index; i&lt; nums.length; i++){ if (nums[index]*10 == nums[i]){ return true; } } return array220(nums, index + 1); }
 public boolean array220(int[] nums, int index) { if(index &gt;= nums.length-1) return false; // Guard if(nums[index]*10==nums[index+1]) return true; // Evaluation operation return array220(nums, index+1); // Recursive call } I actually get my warm fuzzies by doing the codingbat recursion quizzes in one-liners [obviously I usually use the ternary operator, but you can get away without this time]. Thus, public boolean array220(int[] nums, int index) { return index&lt;nums.length-1 &amp;&amp; (nums[index]*10==nums[index+1] || array220(nums, index+1)); } So, since it's a learning exercise: look at it this way. Recursion comes in three parts at its core: * A guard (ie, "if x&lt;0 return"), to get you out of the recursion * Some kind of operation * The recursive call In this particular case: * "some kind of operation" is "look to see if the current one is ten times the next one". * The guard is "this is pointless if we hit the end of the array" * the recursive call is "move along the array and try again" The gimmick to do it in a one-liner is shortcutting. This is actually part of the language spec. What it means is that if you do "A &amp;&amp; B", and A is false, it doesn't bother to evaluate B [since no matter what value B takes, the expression is false]. Similarly, if you do "A || B", if A evaluates to true then it skips evaluating B, since no matter what value B takes, the expression is true. So, I do this as: return guard &amp;&amp; (operation || recursive call) If the guard fails, it returns false. If the operation is successful, it returns true. Otherwise, it returns whatever the recursive thing says. As a mere aside, the really cool kids will note that this is tail-recursive. Your compiler can do awesome magic with this, and no matter how big the array is, you won't explode the stack. So, that's pretty cool. EDIT: I realised you don't need shortcutting, and edited it into the code at the top. Duh.
I think in the conditions of the loops you should always use the corresponding counter variable, e. g. in the gray loop it should be **g** &lt; gray instead of **p** &lt; gray. Otherwise I think this will work pretty good and print out all combinations. Implementing the other tasks only involves setting up a counter and remembering the minimum # of tickets!
Also, an annotated answer to the next question: public int strDist(String str, String sub) { // Guard: // If the string cannot possibly contain the substring, return zero if(str.length() &lt; sub.length() || -1 == str.indexOf(sub)) return 0; // Some kind of operation: // This is "we hit the end of this"; the string starts and ends with sub if(str.startsWith(sub) &amp;&amp; str.endsWith(sub)) return str.length(); // Recursive call: // Move the start pointer along a teensy bit if it doesn't match sub int start = str.startsWith(sub)?0:1; int currLen = str.length(); // Move the end pointer back a teensy bit if it doesn't match sub int end = str.endsWith(sub)?currLen:currLen-1; return strDist(str.substring(start,end), sub); } This works by slowly shortening the string at the start and end until it either satisfies needs [first and last substring are sub], or fails [doesn't contain sub at all].
Actually MethodHandles are [already](http://docs.oracle.com/javase/7/docs/api/java/lang/invoke/MethodHandle.html) in Java 7 - they were added for use with invokedynamic and can already be used from plain Java in a similar fashion to the reflection APIs. I'm not sure that they're being used for Lambda implementation any more - I seem to remember reading something that suggested that they were going for dynamic bytecode generation by the JVM instead.
First problem I see is this : Scanner in = new Scanner("D:\\PROJECTS\\2\\ACTUAL\\HighscoreScores.txt"); should be Scanner in = new Scanner(new File("D:\\PROJECTS\\2\\ACTUAL\\HighscoreScores.txt")); Why this when you're not using ScoresFiles to do anything ? ScoresFile.close(); You need to close the scanner instead 
&gt; those of us that think reading a JSR is a fun and informative afternoon. Sadists!
you can't define method inside of another method outside the scope of a method-local inner class. The `public static void main` method of a class should always be at the top-level in a file anyway. it's not (usually) useful to put a `main` method in an inner class, particularly a method-local class. :)
Ok thanks, I added the "new File(...)" to the lines 47 &amp; 65 and I guess I also had to add it to line 23 so I did. By ScoresFile.close() I suppose you mean line 87 and I don't really understand what you mean, sorry. Don't you have to close the File when you open it?
Did they installed that crap without the possibility of changing a checkbox while installing ? Was that an update from the system tray ?
I'm up to date, and I don't have the Ask toolbar installed. I don't see anything out the ordinary with this - the page you've linked to clearly shows a checkbox, you seem to be complaining that you have to untick something... hardly out the ordinary for software installs.
That's nothing! Avast antivirus [can install entire Google Chrome](http://www.ghacks.net/2012/02/26/avast-7-will-install-google-chrome-if-you-do-not-pay-attention/) while updating :)
In newer versions of Java --- using Swing, you don't use Canvas. You use JPanel.
First of all, SLF4J and Logback are a much better choice nowadays. Then, do not log exceptions when they occur, try to catch them at the top-most level and log them there. When to log, I don't think there is an universal answer, but only common sense. I would say, INFO for major events, those you very often want to see to get an idea things are going on, e.g., app starts/ends, configuration changed. DEBUG, only those info that are useful most of the time you're developing/debugging, e.g., major communication events in a session, major steps in a batch process. TRACE those minutia you want to see if you can't understand what's going on, e.g., every message exchanged in a communication, every step in a computation. Another good idea is to make sure you don't log twice the same thing, e.g., if you log that a method was just called, don't log at the caller level too. Finally, don't forget performance, log.debug ( "result is " + timeConsumingMethod() ) is bad, replace it with if ( log.isDebugEnabled () ) log.debug ( ... )
These are good points. A good question to ask yourself when deciding to write a log statement: "Will this log entry help me if I am troubleshooting a deployed system?" 
Try to understand the question. Try to do it by yourself without their code. If you can't, choose p=1 and do it by hand, then p=2, ...
Now. I haven't the math experience to tell you just what the figure means, but I do know that inside of the first blank, you should have conditional. What this means is that you should have some sort of statement that evaluates to a boolean, and shows the loop whether or not to keep the loop going. In this case, a '&lt;' operator should do the trick. (I'll leave it up to you to find just what you need on each side of the '&lt;'). The second blank should have some sort of addition, as it is a summation, and the third should return an integer (probably the one you've been working with in the loop). If you need help, just ask!
Thanks this helped a lot! 
sum = 2n - 3 + 2(n+1) - 3 + 2 (n+2) - 3 + ... + 2(p/2) - 3
Could you explain why? I am trying to attempt something similar to OP but for Windows rather than Android and have been having trouble also. Knowledge is power.
What's the point of giving out homeworks if the kids can just ask on reddit for answers ?
It seemed as though he was trying to study and was stumped by this question. I wanted to try to help and didn't feel like explaining everything out. Plus I'm not even entirely certain if this is correct or not, like I said, it's a guess.
Try a subreddit search. The "books" question is asked every few days.
God damn fucking Cupertino. I work there! Those fuckers better fix it or I'm going to go speak to someone in person!
because he is a newbro? 
If using Logback, you don't need isDebugEabled. RTFM. 
Try these books: 1. Java Programming For Kids, Parents and Grandparents. 2. Head First Java. Also, try the BlueJ IDE as a learning tool. 
http://logback.qos.ch/manual/architecture.html
See 'Better alternative' section of the manual. 
http://www.reddit.com/r/javahelp/comments/x5224/fixmecant_figure_out_how_to_use_paintcomponent_to/c5jbont No time to elaborate this week. Sorry
I'm curious as to what class this is for. That's as much a math question as much as a programming one. The coding part is pretty 101 stuff but the math stuff is more domain specific knowledge. You'll run into that in the real world, where you'll have to understand things that aren't necessarily programming concepts (domain knowledge) like finance or accounting and so on but I feel like that's pretty unfair for a coding class. I'm a programmer and I wouldn't have been able to write that without looking up the notation. If I had that question on a test in a programming class I would go up and ask the teacher to explain the notation citing that it's not testing my ability to code or my understanding of the language and its API's, it's testing my ability to understand that notation. Maybe if you've had to have certain maths as a pre-req for that class they may be able to justify that but it's still kind of a BS question. Having read the explanations, sure that's easy to code but I haven't looked at calc-esque notation in years so... 
to OP, that's a really good question to ask. This answer ^^ is a really good one.
Title is at odds with the content.
Thanks, hopefully the mods would add a FAQ to the side bar so people like me don't make a fool of themselves.
Thanks for the suggestions! 
Thank you so much!! 
&gt; ...do not log exceptions when they occur, try to catch them at the top-most level and log them there. Why not log at the lowest level?
Part 1 and Part 2 are the same link.
Also, as promised [threatened?], a horrible one-liner that would make a lisper proud: public int strDist(String str, String sub) { return (0&gt;str.indexOf(sub))?0:(str.startsWith(sub)&amp;&amp;str.endsWith(sub)?str.length():strDist(str.substring(str.startsWith(sub)?0:1,str.length()-(str.endsWith(sub)?0:1)), sub)); } There is, of course, a non-recursive version that most people would actually use [if I was writing something for "real world use", I'd not use the ternary operator there, but I quite like the elegance in this case]: public int strDist(String str, String sub) { return str.contains(sub)?(str.lastIndexOf(sub) - str.indexOf(sub) + sub.length()):0; } 
The function n() should have been called e(). In XML, nodes are anything in the structure of the document (e.g. comments and attributes are also nodes). Usually Node is a marker interface, that is "implemented" by Element, Attribute, Comment, Text, Cdata, etc... I like the idea of it though. Are these static methods (I assume that example had a static import at the top)?
I think he is asking something like in PHP http://php.net/manual/en/types.comparisons.php I'm not sure though. 
I may be wrong but I believe nothing does - just the primitive boolean (true and false) and the object Boolean
Well, there's 2 steps: Do you know how to get the data from the user and store it in a useful way? Once you've done that, it becomes a matter of algebra. Which part is it you don't know how to do?
That happens in C/C++ but not Java.
Terrible
Download oracle Jdk in rpm format then: sudo rpm -iv --nodeps &lt;path to rpm&gt;
The author's syntax and rhetorical appeal is quite lacking. When writing an article the author should both know the content and be able to talk about it effectively. *trash
Thanks for making a effort for us beginners. 
Set your JAVA_HOME environment variable to point to the JDK, then NetBeans shouldn't ask you when you install it.
This is a shell, just like Bash, KSH, SH, etc. It doesn't have anything to do wtih SSH, but you can make it the default account for SSH logins, or for users. This shell attaches to java processes, and you can execute commands on the process its attached to. You can do everything this does with commands outside of this application, but this application makes it easier.
Please use /r/learnprogramming for stuff like this. My best advice when trying to figure out what you're supposed to be doing on assignments is figure out what you're supposed to try and solve, and then figure out how you can use programming language constructs (like the for loop) to actually do it. So in this problem, you're trying to find all the even numbers in a given range. How do you identify even numbers? Once you figure that out, you could do something like loop through all the numbers in the range, checking if it's an even number.
We embedded groovy interpreter in our web app with scope on whole spring context. It saved us in a few Friday nights already. But this... this is full of stars.
That's a good idea, thank you for bringing it up. [And right, the methods and inner static classes are pulled in via a static import.] 
Because you will end up writing logging instructions a lot of times. If you let your exceptions to pop-up anyway and catch them at the top-most level (which is the best thing to do unless you can't specific deal with them), just log them at that level and you'll save a lot of key strokes. 
I was just curious. Not necessarily easier for objects, but easier to initialize a data structure. Like creating an array with int[] arr = {1, 2, 3, 4, 5}; It would automatically add values to the data structure as it read them so it could be built quicker.
Okay, yeah. Re-reading that didn't make much sense to say "the RGB color space" as I was trying to refer to how computers handle color in an additive fashion, rather than pigments which are subtractive, with respect to light. Right now all of the harmonies convert from whatever to HSL to actually calculate the color based on the differences in hue (mostly).
quite a few languages like ruby/javascript and python have truthy falsy principles where some empty / null objects are equal to false. This allows for some concise stuff like, if a: print a.name 
This is Linux Mint so it'll be .deb not .rpm
Oh you can overdo logging. But at a small app level you are right.
hmm will look into that. Thank you
What would you call such interaction for the sake of googling?
This is why annotations should have been serialized class instances, not funny interfaces. Well, that and Java should have multiple inheritance. But yeah.
Sweet, my experience is relatively minor, thanks for the recommend. Ill certainly add this to the list.
Actually the NetBeans version in most repositories is out of date, and most Java developers use the Oracle JDK as opposed to Open JDK, which is what is included in most repositories. In principle, I agree with what you are saying, but in this particular case, downloading the JDK and NetBeans from their respective web sites would be a better course of action.
I think I figured it out. It was because of the + " " being a string, and I had told it that it was an interger.
Got it working with System.out.printf("%03d", randomNums[i]); System.out.print(" "); so if randomNums[i] = 6 then 006 is printed.
I am :) Thanks :)
[TheNewBoston](http://www.youtube.com/user/thenewboston) has some great tutorials on writing GUIs. He starts his GUI tutorials halfway through his Java beginner tutorials, though, so if you're not already familiar with Java then I'd watch those first. [Here](http://www.youtube.com/watch?v=jJjg4JweJZU) is where the GUI tutorials begin. :)
Never understood why people don't try the java tutorials provided by Sun/Oracle first. http://docs.oracle.com/javase/tutorial/uiswing/TOC.html
Well don't use square brackets when parenthesis are what should be there. [] are used for arrays and () for method parameters. It's only confusing because you're making it that way. public double distance(City paramCity){ } is just a basic method that takes a City object as a parameter. It's no different than public double distance(int x){ } If you're extremely new you might want to check out /r/learnprogramming.
They are the only ones that have worked for me.
&gt;What exactly does it mean in a code when you use the this.[x] command (inside a method). 'this' is an object reference that allows allows a method to find the object that it was called from. It is generally used to call constructors from other constructors or to assign fields of classes the values of method parameters that share the same name as the class fields. Static methods do not have a 'this', as 'this' is actually an instance field of the class.
I've always been trying to get my head around Lambda functions and why they're so useful vs conventional methods of computation. I've found that a lot of tutorials/explanations of Lambda's tend to start off okay but eventually deteriorate into a "BLARGH LAMBDAS ARE COOL DON'T YOU GET IT. WRITE LAMBDAS. HERE'S SOME MORE LAMBDA STUFF FOR YOU TO WRITE. PAY NO NEED TO UNDERSTANDING. JUST WRITE WRITE WRITE" This document doesn't fall into that trap thank god. I actually came away learning some cool stuff about when to use lambdas vs when to do conventional iteration.
I know, I was trying to think of the name but I could not at the time. It seems it is just the ability to change values in Eclipse, but the way it works is the debugging then essentially becomes dynamic. This along with hot swapping code you can have very very dynamic java/jee.
My vote is that it's fucking weird, yeah. Gridbag is a motherfucker, in my opinion. Edit: I mean, good for you, though. I'm not tryin' to be a dick.
Looks a bit like Substance?
Looks a lot like [Graphite](http://www.javootoo.com/plaf/substance/assets/substanceravengraphite1.png)
http://insubstantial.github.com/insubstantial/substance/ just to reference what terminal_plant said, and I agree it looks a lot like Substance at work.
thanks a lot :)
I'm the author aka Pingupop2. Thanks for reporting bugs,now I've perfected and updated it. May be very useful for beginners. The "begainers" link was really embarrassing spelling mistake. And again thank you everyone :D
Scala is pretty much a case study in how useful they are. myList.filter(n =&gt; n.firstName = '"Jon") //everything in the list with name jon myNumberList.foldRight((x,y) =&gt; x + y) //sum the numbers in the list Admittedly, you can use them stupidly, and create things that are far more complex than you need, but in general it is a Good Thing (TM) to be able to pass what are essentially function references.
You could either multiply everything by 1000, use java.math.BigDecimal , or use [java.text.DecimalFormat](http://stackoverflow.com/a/7593617/1062966)
If you never want to model/allow values less than 0.001, then use `int`, and have your program be counting milli-units. (When printing or reading, you may need to scale by 1000, of course.) If you want arbitrary, correct arithmetic on the rationals, use BigDecimal (or a language that has them built-in as the default, like racket or mathematica). `double` should be regarded as 'a decent approximation to the correct value, usually to within 1 part in a quadrillion'. As a corollary, don't use `==` on doubles unless you're *sure* there won't be any round-off error.
Required reading for everyone here. [What Every Computer Scientist Should Know About Floating-Point Arithmetic](http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html)
Don't use double. Use int or long. If you want exact values (and you mostly do) then store them as exact values, not floating point values with limited precision. This is why computers don't know about seconds. They keep milliseconds, an integral number of them. If more precision is needed, they keep micros or nanos. This gets at an interesting point about representation of data in computers. How would you store a time? Would you keep a highly structured piece of data that includes month, year, time zone, etc? The right answer is no. Humans tend to think in highly context-dependent terms. If I tell you it's 5pm, you interpret that to mean that if I were to look at a clock on the wall where I am right now, it reads 5pm. But does that tell you what time it is? No, not unless you know where I am and a whole lot of other contextual baggage. This is a human flaw that gets exposed quite often when programming. Programs often define things in a way that makes sense to the programmer in that programmer's context. But then those things are used by some other programmer in a different context. And those contexts mess everything up. With the example of time I used above, you might think ah, what's the big deal? It's a little structure, just stick a time zone in there and you're all good, right? Then you realize that time zones are actually not scientifically defined boundaries, but rather political ones. You come to know that, in the years leading up to 2000, there was a race to see which country could be first to the new millennium, so several countries that were -11 switched to +12. Or +13. And in one case, +13:30, which was met by the winner declaring it in the +13:45 time zone (a tiny little island in the South Pacific). I wonder if they have since relinquished their title of first to the new day and gone back to -11 or whatever they were that made sense...and if they didn't, I wonder if there's another that decided +14 was doable. You also learn about the hour long drive you can take through northeast Arizona that will take you through no less than 5 time zone changes varying the time by as much as 3 hours. Yea, so context-free is where it's at. Pick a particular moment and define it as the epoch, which is normally midnight Jan 1 1970 UTC. Measure the number of milliseconds elapsed since that moment, and that is how you represent time. And this works, until someone else comes along and defines a different epoch (usually midnight Jan 1 1900 GMT). And then that works until you write an application that has to represent dates associated with fossils at the local natural history museum, or you write an application that performs GPS calculations and must take account of general relativity effects down to nanosecond precision, so the epoch must now be defined in terms of spacetime. Yea, Jan 1 1970 is not looking so context-free anymore, is it? The point is, you usually can't escape *all* context even for fairly simple things. Instead of assuming you won that battle, it's much better to try and get as close as you can, and then scrupulously document all of the assumptions you did make so that it's the other guys fault when he misuses it.
What's the use case for something like this?
Excellent post
Surely this would be very good in the code/compile/run cycle? It's an exciting prospect to be able to reduce the time spent waiting for a launch of just-written code to test it. Would this speed up that cycle, and how could i use it in my Idea, which is my preferred IDE?
Can you confirm/deny something that I've assumed: BigDecimal is more accurate (but more resource expensive) when handling floating points? If I want to reduce the roundoff errors when I do a lot of calculations, BigDecimal will help.
BigDecimal is VERY expensive computationally. The preference is to use int or long if you can put a fixed decimal point somewhere. Dollars and cents, for instance, should be handled as int or long number of cents. If you're doing science, you want floats or doubles, and be very, very careful with your algorithm, especially around 0 and anytime you're doing subtraction. Never compare for equality. Never loop if you can avoid it. Repeated operations compound the errors. The few remaining cases, you need BigDecimals. They get over-used a lot when int or long would be better.
Very interesting and informative article, thanks for posting.
BigDecimal is unlimited precision, but there's a huge cost in terms of memory and CPU usage. Subtraction tends to compound errors worse than the other operations. So long as you're properly representing your errors separately, and not depending on Java to round for you, you should be ok. For large datasets, you really need to get to int/long if you can. There are even some tools out there for offloading a portion of your computation to the GPU, which handles parallelism wonderfully.
Thanks for the info. I'm going to be making some changes in my code. It is interesting to hear about the problem with subtraction. What is the problem? Does BigDecimal.subtract() solve the problem?
Thanks thakk0. Actually it doesn't need to be a game as such, but our lecturer suggested it, because it would be easier to see/imagine the results of various executions. I will have a look at the game you suggested.
No it's only in the commercial version
I came to say what thakk0 came to say. Damn :( PS- Design patterns are all around in the wild. Some are applied differently than you might learn in a book. Others are just like the book. Some are applied with no knowledge that a design pattern exists so people often name the classes weird things that make it hard to know that there's a pattern going on. For example, I once designed a program to work with the "Context pattern" without knowing it. My contexts were named "Load" and "Batch Load" (no, it wasn't a porn business application). I didn't realize it until a year later that I actually used the Context pattern. I betcha, you've used that pattern too! Anyway, the point of that ramble is if you go and look up some random open source projects, you're going to get lots of exposure to code which may or may not have well defined design patterns. More than likely they'll have some design patterns and some "anti patterns" all mixed together and you'll be left in the murky world of thinking "WTF." I would recommend you learn about design patterns and attempt to apply them to problems you have in the future. Sometimes you'll apply them wrong and you'll learn from your mistake. Sometimes you'll be so proud of yourself that you'll stare at your code for 3 hours.
I ran into this issue not 5 months ago when I had to write a small thick client. I explored a lot of different UI toolkits and ended up settling on [Apache Pivot](http://pivot.apache.org/demos/) for my needs. JavaFX seems like it is getting there though. Pivot uses XML for the UI layout so designing the user interface is VERY quick, though the tables are a little bit lacking.
We use swing for our gui at the start up i work for... although they do have a knack for using obsolete tech
Thanks, I hadn't heard of either of these; yes they both are solutions to the same problem. And I'm glad that it looks like it will be coming to the language core (and, that the annotation system gives people some remedy w/o needing changes to the language-definition). Still, it's been a known problem w/ a known solution since before Java 1.0.
I just read that stuff on Pivot... mmm, nice utilities. Especially the JSON -&gt; Tree View, mmmm
The past two years, IntelliJ has gone on sale around Easter. Apr 20-30 2011. Apr 2-16 2012.
Thanks, I'll check it out.
looks great but it doesn't work with a simple .class passed as argument $ javac Test.java &amp;&amp; java Test Hello World! $ javac Test.java &amp;&amp; drip Test Unknown command: Test 
I thought Quake3 and Doom3 are open source? IIRC Wolfenstein 3D too :P
[SWT](http://www.eclipse.org/swt/). It is part of the eclipse framework but you can ignore all the RCP stuff and code your UI without it (if you wish). There is also [XUL](http://en.wikipedia.org/wiki/XUL), but I haven't used it. For Web stuff you also have [Dojo](http://dojotoolkit.org). 
Swing is surely not "obsolete" (2 out of the 3 major IDEs are built in Swing, after all), it's just at a point where further development of the library seems unlikely. At some point JavaFX 2 ought to make Swing obsolete, but until then Swing is a fine choice for enterprise client applications...
Not quite obsolete. Maybe antiquated but it works well. JavaFX is poised to take over the helm as the premier GUI toolkit. 
Webapps, yo .. Webaops
phphoto is not talking about Eclipse the IDE, but about using Eclipse RCP (=rich client platform) as the framework for building a GUI application.
I just did TOEFL this Saturday. It used Swing. It wasn't all that bad, just not very modern.
I'm a professional java web developer, 3 years, in the dc metro area, and with an as in cs from nvcc and bs in cs from gmu. I got hired at a large government consulting firm while finishing my bs. From my experience, there is so much government works, consulting, start ups, etc that you should have absolutely no problem finding a job even before finishing your bs. Learn java Spring and java EE, either on your own or through those certs if you want but don't think they really matter. Maybe someone else can speak better on the certs actual worth. Expectations at entry level are very low, so if you know what you are doing in any sense you should progress well. Also self learning is key. My recommendation is just continue with your degrees, learn one of the popular stacks (I do recommend Spring + Java EE), and put out your resume.
Revenge of the Titans has open sourced their game code (java). It looks pretty solid too, just no game assets included. So, it may take some work to get it into a runnable state. http://www.puppygames.net/blog/?p=914
I really like this suggestion, thanks :)
Dunno much about the States, but here in Europe, most students get a job well before their finishing exams. I suggest you to go through the Java Tutorial, available on the Sun's (sorry, Oracle's) website, and try to advance with a small personal project (e.g. write an application that helps you to keep track of your financials, or your favourite CDs or DVDs, or ...). If you're familiar in writing small Java applications, you might apply for junior programmer jobs. With this high demand of programmers and very small supply, I'd doubt you'll have to wait for long. But you should have some hands-on experience, a small application you've developed that works. I'd say you shouldn't jump into the EE world at once - that's a bit too much for a novice, there you must take care of the server-client communication (e.g. JMS), the data objects (e.g. beans), the persistence layer (e.g. JPA), the client side (e.g. Swing or a Javascript-based GUI toolkit), and the business logic - all at once.
Yep. I was talking to a professor after a monthly Java conference and talked a bit about future of Java, lambdas, 'async' coding and GUI, and we pretty much concluded that JavaFX (2.0 ?) is the next obvious step. It's pretty much included with every JDK lately.
What exactly is that quality level? Would Google but I'm on my phone. 
I couldn't find any JUG's near me, thanks for the tip.
The players in the certification racket are, in this case, Oracle, the people selling oracle cert study books, LAZY hiring managers, and mediocre developers who bear the expenses for all of it. Here's how the circle of life works: **Cert Industry:** Hey managers, you should only hire certified people. After the dot com bust, there are too many mailroom clerks that learned HTML for their company and they just aren't really qualified to do real work in this new age. **Lazy Manager:** Sounds great. I can sort/reduce this pile of resumes quickly. I can avoid it completely if I just put the cert requirement in the job description. What's this all going to cost me? **Cert Industry:** nothing! **Lazy Manager:** I'm sold! **Mediocre Dev:** I can't get job because I have no experience, and I can't get experience because I can't get a job. Maybe all this cert stuff will help. Look at all the banner ads for them. **Amazon:** Would you like to buy the study books? You won't pass without them. 
So you don't even care about Minecraft. You care about the server, and a quick Google found this: http://www.minecraftwiki.net/wiki/Server#Server_requirements &gt;Minecraft servers, as of 1.1.0, can use multiple cores, so now they will not sit idle. I'm not, however, particularly convinced that any of the processors you mention is significantly better than any of the others.
Yes what can? And what can it do? What is client-side? You said you were building a dedicated server, so we need to talk about Minecraft server, not client.
Huh? You were just told Minecraft runs on multiple cores server-side basically verbatim.
It doesn't matter, the jvm abstracts the underlying system to use native threads and thus multiple cores if they are available. You will always have less chance of locking up the system if there is more than one core available to kill the locking process in the other. Follow the recommendations of other server operators instead. It's obvious that you have invested time researching specs of hosts but for the most part, that is a waste of time. Nothing is as advertised when it comes to dedicated/vps hosting. If you are new to the space, then you will simply have to burn some money to gain experience so don't sign up for any 1 year contracts just to save a few bucks. Month to month to start and collect donations from the users. 
Think you just need to run your app in debug mode in eclipse and then if you make changes and save it'll automatically hot swap (or complain that it can't and then gives you option to restart the app). 
My retina works with all types of GUIs
well ... what gui is it? Did you write a proprietary Java GUI?
Currently, due to bad design, more than 2 cores is a waste. Almost everything is done in the main thread - 1 core. Another core is a good idea for concurrent GC, and the few things which are threaded. (Mostly, these are IO-bound, so reaching 100% utilisation on both cores is unlikely). If you intend to use the mystcraft mod, then each world will have its own thread.
I *totally* agree with you on that. I get the impression that Eclipse RCP was basically an in-house GUI framework that ended up publicly available, rather than a framework that was always intended to be shared. The build process is horrendous and feels far more suited to building Eclipse plugins than standalone apps. The resulting RCP may look nice but bundling it up into a standalone .exe, configuring automated builds, etc. truly is a fucking nightmare.
Just a partial correction: &gt;Please note that the IntelliJ Platform is not a general desktop application framework, and is only designed to be used for IDE-like applications. From http://www.jetbrains.org/pages/viewpage.action?pageId=983889
you've used swing in the last 7 years, right? 
Hot code swapping is par for the course in [Ruby](http://killswitchcollective.com/articles/31_monkey_patching_101__proxy_objects), [Erlang](http://learnyousomeerlang.com/designing-a-concurrent-application#hot-code-loving), and [Lisp](http://www.gigamonkeys.com/book/macros-standard-control-constructs.html).
Yes the debugger can hotswap some changes but if you want to be redeploy free check out jrebel it can hotswap almost all changes.
http://zeroturnaround.com/software/jrebel/ There's other free ways, but this product rocks.
Another useful thing is right click the stack when debugging and do drop to frame. This basically lets you rewind up to the call you selected.
Here is a tip: Download one of the Oracle Identity products - OAM, OIM, OEG. Install it, play with it, learn it. You will have no problems getting a job. 
Phone Gap allows you to write cross-platform mobile apps using web technologies, such as html5, javascript, and css3. Additionally, you can use whatever SSL you want from ASP.NET to Ruby, PHP, or whatever the fuck. Edit: Why the down votes? He asked for an alternative to java and no one else told him anything. You may not "approve" of phone gap but the fact remains it exists.
Perhaps you mean with its default look and feel?
in android, i think native java apps get you the best performance and most flexibility (full api acess). phonegap (html) apps give you an easier way to make the app cross platform, but may not be as powerful or slick. or you could start with phonegap (simple), later introduce native plugins into the phonegap apps for some things, then later do native apps per platform (more effort and maintenance but slicker)
Makes sense. I just checked out phonegap and their demo video looks really cool. I know some HTML, a little CSS, and no Javascript. Obviously if you could write an app once (like in phonegap) and have it also work on iPhone and Android, that would be ideal. I'm going to download phonegap and check it out, but keep working on my Java/XML programs too. More to think about, thanks.
I posted this before getting down this far on the page... Griffon is very nice and I'm glad someone else knew about it!
You could always use [Substance](http://insubstantial.github.com/insubstantial/substance/) or [JGoodies](http://www.jgoodies.com/products/swing-suite/) to spruce the place up a bit.
I don't understand... why would you not put it on your resume?
Three I use regularly. Small downloads (compared to their respective competitors), acceptable startup times, rather responsive UI, and they don't look crap, especially the first two. * http://www.yworks.com/en/products_yed_about.html * http://astah.net/editions/community * http://www.jgoodies.com/freeware/jdiskreport/
A whole lot of companies seem to still use Java for in-house development. I'd say Java is a very valuable language to know; it's just an arguably poor one to _use_.
In a way, yes. However, Swing is based on AWT, it's only the AWT widgets that are not in use nowadays. But subpackages like java.awt.event, java.awt.dnd, or java.awt.font are still in use (and utilized heavily by Swing), and if you're going to paint, the java.awt.geom is also a must have. And the underlying infrastructure comes from the awt too; Component and Container, parent of all swing widgets, and the Window, Frame, Dialog top-level heavy-weight containers, parents of the stand-alone window widgets of Swing.
Thanks for that - I'll give it a try!
My advice is skip certifications. I chased various ones (mainly Java, Oracle and Cisco) and they have all been a waste of time. Read the theory and try to apply the principles when they come up, but in the end I think its just a huge racket. You could spend most of you 'professional' life chasing them and all they really show is that in the end you are good at passing tests (nothing wrong with that because it shows something in itself) but a good Manager shouldn't require them as a perquisite. 
I agree, but... I have ordered coke just to get a pepsi, skated on "rollerblades" and listened to music in "walkmans". When walkman went out of style and mp3 became "the thing" people bought iPods, sometimes even produced by Apple. I bet you have taken a bath in a Jacuzzi and maybe written a note about it on a Post-It. (Tippex can be used on last sentence if not true.) The generification of trademarks is common. So common in fact that I sometimes feel the need for an Aspirin.
Ah didn't realise Apple was using the Retina term differently for phones and laptops. 
Your professor seems opinionated, and sadly seems to push his opinions onto his students. Learn to take what folks say, even those in positions of authority, with a pinch of salt. To create GUI's in Java, Swing is still the standard for Java SE Applications as supported by Oracle/Sun. If you want to stick with Oracle/Sun approved GUI technologies, you might want to explore JavaFX too. If you are willing to explore GUI technologies outside the Oracle/Sun approved toolkits, check out SWT and JFace from Eclipse Foundation. This is a mostly IBM-developed technology which was open sourced and made available independently of the Eclipse IDE. The GUI's created look a whole lot sharper since they take advantage of native OS Widgets. There is also a whole host of GUI frameworks from other vendors outside the Java Space. Google and clear requirements are your friend in this regard. 
I have 2 Oracle Java certificates: OCJP and OCWCD. My company payed these for me but I would NEVER pay for this myself. It's not worth the money. You really don't learn that much from it but managers just don't get that. They overvalue it way to much, forcing all there developers to certify themselves so they can use it as a yardstick of how good their developers are during conversations with clients.
Well if you want to learn something take a debugger and look at the number. You will most likely also get the answer in this thread but it won't help you if you get help at this basic stuff.
Try useing a long instead of an int.
Don't just look at overflowing. Think about how you could have figured this out by yourself. Take a look at the debugger and how it can help you. Have a look at different represantations and how you can get them out of the debugger. This task was most likely not given to you to solve it, but to learn from it.
Thank you, I might have written the question badly. My intentions was to get sent in a direction where I could find the answer. N1n3s sent me that way with overflowing.
Google for the Gang of Four book about design patterns. Gives you an abstract insight into generic problem solving. 
That would indeed be a better way of solving my problem, however we have not been taught about debugging yet. However, a senior student helped me and showed us how to look at every operation by placing "placeholder(?)" in Eclipse. To be honest, I can not remember exactly how we did it, but I reckon debugging problems is something I will do alot of in the future. So might aswell get a headstart.
Thanks, glad to know I'm not alone :|
Most likely so you can't look em up that easy. (of course you still can but I know a lot of profs that change the name of well known functions in the first task so you don't just google it 'by accident')
placeholder := breakpoints
Well, the book "Applying UML and Patterns" from Craig Larman might help. 
Like I said, there are fewer and fewer needs for it everyday. Desktop applications won't be truly obsolete within the next decade. They just make less and less sense as bandwidth and high speed internet connectivity rates increase. 
Well, the reason for 'stamina' is a terrible translation from norwegian to english. It's really called 'utholdenhet' in norwegian, and that kinda translates to stamina. Although in maths it's a different english word, can't remember which one.
&gt; Even the Oracle buy-out has gone a lot better than people thought it might. Go Java! Honest question: would you mind elaborating on that some? The only things I've seen have been stuff like the Jenkins/Hudson fiasco, problems/bugs with the newer Java versions' bugs (like the bad default overoptimization in SE7), Oracle suing Google, etc.
Netbeans is built on Swing. And it [looks ok](http://netbeans.org/images_www/v7/1/screenshots/editor.png).
Thank you!
The University of Washington has two intensive courses to teach Java. The first is basically intro to Java, and it has some good lessons for programming like fenceposting and breaking down your code into smaller problems. The homework from the first class is great for learning how to code effectively. The second course includes data structures rather than only teaching programming, although topics like inheritance, sorting, and recursion are still covered. [Here is a link ](http://www.cs.washington.edu/education/courses/cse143/12sp/calendar.shtml)to the class calendar from the last spring term of the second class. It includes lecture notes and homework assignments that might be fun/challenging. PM if you have questions.
The JavaOne Conference for 2012 is publishing all of their content for free this year. Here's a link to all of the technical sessions https://oracleus.activeevents.com/connect/search.ww?event=javaone
Why not hand him a Kleenex to dry his tears?
What exactly are you expecting? I can answer some questions for you but helping students with homework can get quote involved, trust me I've tried it. 
I'm confused. If you are a student, don't you have professors there that you are currently paying for that very purpose?
There will be desktop applications always. I definitely don't want my word processor being a server-based application with thin client. I want my documents staying on my own computer, and will upload only those that I select.
&gt;Or can you write Android apps without Java, or does that matter? Currently I'm writing an app that has some Java in it, but in the end will mostly be driven by PHP and SQL. Who knows if it will be a disaster or not, the app I'm making as a learning experience.
I don't know the original author but, it is often said: "There are only two kinds of programming languages: those people always bitch about and those nobody uses. " Java is popular enough that it generates a lot of hate from people who use other languages. The same is true for all the other popular ones: C++, C#, PHP, Python, Ruby...
[TheNewBoston.org](http://thenewboston.org/tutorials.php) has a bunch of java tutorials, including game dev. I find 'Bucky's' voice to be a bit grating, but his code is clean and the tutorials are relatively brief, so you can check out several in order to home in on the level you are looking for without a huge investment in time.
Use a for loop, from 0 inclusive to x.
 int[] array = ....; .... int x = 0; try { x = Integer.parseInt(JOptionPane.showInputDialog(null, "How many would you like to average? x=")); } catch(Exception e) { System.out.println("the user entered a non integer character"); } double sum = 0; int index = 0; for(; index &lt; x &amp;&amp; index &lt; array.length;index++) sum+=array[index]; JOptionPane.showMessageDialog(null, "The average is: "+(sum/index));
Why don't you use the knowledge you've learnt from the book and do some of the programming challenges on [daily programmer](http://www.reddit.com/r/dailyprogrammer). They have example solutions as well.
It wasn't my post, but I think the main thing everyone was fearing would be an incompatible fork of the JDK or a splintering Java community. But, I think that was mostly hand wringing and fear mongering. Witness the fact that the Java community today is very healthy and the fact that Oracle is successfully driving the language forward. Whether you like them or the decisions they've made so far, or not, the Java ecosystem is very much a going concern.
Bjarne Stroustrop, I first read it in Principles and Practices of Programming (C++, another much loathed language). 
I'm not saying that I agree that we should call high resolution displays "Retina". I'm saying that people are already doing this and therefore it already *is* part of the english vocabulary. As somewhat tech savvy people, we may disagree with the terminology, but the population at large will not care. All my examples are, or have been, trademarks that became words because of popularity, marketing or both. I don't see what separates the terms Yo-Yo or Zipper from "Retina display". They are all trademarks that became words because there was no other word available to describe the "thing" people needed to describe. People, in general, don't care if something is an actual Zipper as long as it behaves as a Zipper. The same is true for a "Retina Display". But hey, we can always try and change their minds by calling it "High Pixel Density Display". Consumers tend to dislike technical jargon though. Also, the reason it seems as if the term "Retina" is vague (besides being vague) is that Apple ment for it to indicate "a display dense enough with pixels so that the **average** human eye can't see the individual pixels at the **typical** viewing distance" (paraphrasing wikipedia). The typical viewing distance is very different depending on device. A phone and a desktop monitor aren't typically used at the same distance. This is why we see devices differing greatly in pixel density still being called "Retina Displays". &gt; No one asks if a music file is in "iPod format", do they? No, but I'm pretty sure they don't call it AAC-format either. By the way, I needed to "Google" some of the things stated. Look, all I'm saying is that Retina Display isn't the first to become a [generic trademark](http://en.wikipedia.org/wiki/Generic_trademark).
Yep, that's pretty much it. Oracle didn't get it at the start, and they messed up a few times, but they now seem committed to a genuine process involving all the relevant stakeholders. The JDK 7 release has gone well. Sure, the Hudson/Jenkins debacle was pretty awful, but as far as I'm concerned I can count that as an early mistake in what is now a fairly well oiled process.
You do not. It's a free preview and built-in license expires a month after release.
There are lots of I/O techniques: * Serialization - You could have a HighScore object which implemented Serializable and then use ObjectInputStream and ObjectOutputStream on top of FileInputStream and FileOutputStream. This is super easy but there is no guarantee that the serialization format won't change across Java versions. * Binary File - You could store the raw ints using a DataInputStream/DataOutputStream. It'd make the stored data a little harder to edit which is both a good an a bad thing. Users could still use a hex editor to change the data in the file but the casual gamer wouldn't be able to do that. * A Plain Text File - In the past this probably meant using BufferedReader to read a line of text, trim it and then use Integer.parseInt to convert the String to a number. Now there is the Scanner class that oseari posted an example of. The Scanner class is perfect for simple text formatted files. * XML - When you want to use a text file so it is easy to edit but the information is complex enough that Scanner code starts becoming difficult then you should use XML. There are lots of ways that XML has been handled over the years in Java. I'd recommend concentrating on StAX and JAXB if you start looking into XML.
Phone Gap can access a vast majority of the api of every platform btw.
10 hours drift means the code is wrong, it's almost impossible that the clock has *that* many drift
I will adjust the code to show that now.
I see the OP has changed but it still doesn't answer my question. Try putting "value = 0;" before the first `for` loop starts and "value2 = 0;" before the second `for` loop, and see if that changes anything. Edit: set the values before the `for` loops to 53 instead of 0 and see what that does.
Yeah, the values are there.. int value = 53 int value2 = 53 It's just not formatted correctly
oh, I see them now, above the formatted code. Didn't catch that, my bad.
It looks like `value` and `value2`are local variables, but you keep them as fields (persistent state). The *second* time `paintComponent` is called, `value2` is already large. If you wouldn't say "every `ColorPane`l has a `b` and every `ColorPanel` as an array `x` and every `ColorPanel` has a `value2`, then make those be local variables, rather than a persistent (permanent) piece of information that characterizes a `ColorPanel` as it changes over time. (And a general tip: Avoid mutation -- prefer local-vars to fields, and prefer fields-that-never-change to fields-that-change-over-time-and-therefore-my-methods-behave-differently-from-one-call-to-the-next. To be fair, most intro books do a lousy job teaching the difference between local-vars and fields.)
I was just about to post this to OP, but you beat me by 3 seconds (and happenstance to hit the refresh button :) To OP, what's happening is that because value and value2 are local, you *can't* guarantee that those values will always be 53. Running your JPanel and setting the values to 427 (instead of 53) replicated your broken state. I'll leave it up to you to solve it, though
Needs moar @annotations. And Hibernate. This example is useless without DB2 backed Hibernate.
Your best bet is to create a Person class that contains all of the person's info, and instead of saving your info to an un-formatted .txt file, save it to an XML file. Find out how to read &amp; write to XML files (or JSON, if you prefer), and it will help you out on this project. You could also make the Person class serializable and save the information that way, but I think XML would be easier to start with. 
My teacher told me it is pretty much the same as the Add section of my Code for the File IO. He said you just had to change a couple of things, any help?
Heh, i'm trying to without telling you exactly what to do, because the point is to learn. Ok, another way of looking at this. The user inputs 6 different lines; First name Last name Address City Province Gender With your current code, it appears that when the user is done inputting these **6 (note the number!)** lines, you'll store them line by line into your .txt file. Now, if you want to go through and delete a person, given the criteria (in this case, it appears to be your First name), you are opening the storage file and reading it line by line. Lets say you hit a match.. Then what? You proceed to **not write** the next 6 read lines. There are test cases where this will become a problem (what if you have two Chris'?). The other glaring issue in your current code is: File inFile = new File("S:\\Book.txt"); File outFile = new File("S:\\Book1.txt"); Your inFile is your storage, your outFile is meant to be the result. However, what happens when you just read the outFile? What do you think will happen if I decided to delete Tammy as well? (Look at Book.txt and Book1.txt after you run your program. Hopefully any of this helps. If you can't finish by the assignment due date, I'll be happy to help you through a working example.
You would not hire someone straight out of college if they didn't invest the time to learn how to use a particular library because their professor told them it was obsolete? That seems pretty arbitrary.
lololol no part of the "simple sprnig 3 Hello world example" is simple. 1. `mvn archetype:generate -DgroupId=com.srccodes.example.spring -DartifactId=SpringCoreHelloWorld -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false` And it gets more complicated after that. Or you could just [hello.js](http://nodejs.org/): var http = require('http'); http.createServer(function (req, res) { res.writeHead(200, {'Content-Type': 'text/plain'}); res.end('Hello World\n'); }).listen(1337, '127.0.0.1'); console.log('Server running at http://127.0.0.1:1337/'); `node hello.js`
Way to miss the point. This not what the Spring 3 Hello World example was demonstrating. It is demonstrating application assembly using Spring using a simple example.
24/7 365 eclipse.org
So will eclipse. Eclipse has a built-in Maven implementation that not only downloads the dependencies, it puts them immediately in the classpath for the code validator.
I don't use Spring This is a joke right?
You need to create a maven project in eclipse to that...
I think the purpose was to show the basic spring application setup. It's not attempting to show how easy it is to do a Hello World app using the Spring Framework.
That's what I said ...
zargxy, you have correctly pointed out that m2eclipse plugin may not be installed in every Eclipsed based IDE. So tried to cover both maven &amp; Eclipse part. Otherwise if m2eclipse plugin is already installed in anyone's Eclipse IDE then he / she is always one step ahead. Thanks.
you are right. thanks for your feed back
WHAT confuses you? I'm pretty easy at giving help, but you have to ask a little more precise, because I'm not going to do your homework… PS: Indent your code properly!
Omit the ".class". In other words, run: - java BeerSong
Huh.... That easy...... Is that Linux only or would that be the case for Windows too? Any idea why that works? Like which BeerSong is being launched my mind is blown x. X
Nope, it's the same for Windows. The ".class" is implied by the call to the Java runtime, so what you're trying to run is BeerSong.class.class.
In a tutorial, there's good value in teaching people how to do things by themselves. Knowing the maven command line tool is very valuable for a developer.
http://skillsmatter.com/go/java-jee/mh-5939 - If you go to 'PROGRESSIVE JAVA PODCASTS' there are a bunch there and updated pretty regularly. Other topics on the site too! 
I do not think it is. Doing things with Spring are generally more complex. There was a time when Spring was better than the alternatives but Java EE has come a long way and at this point is easier to work with.
CDI is cool as an alternative to Spring DI, but what's been good about Spring is that it has offered really good support for things other than Java EE integration. For example, Spring plays very well with both JPA and pure JDBC. For JPA haters, Spring provides great library support to make working with JDBC a breeze. On top of that, with Spring Data, the Spring Framework is aiming for the "Big Data" and NoSQL spaces. Then there's Java EE settling on JSF, with it's server side component model. Some people prefer the action-oriented model with minimal server state and rich client-side components using technology everyone else is using, instead of what has been wrapped up in JSF component libraries. Spring Web MVC is a great framework for this space, which provides the web app features of JSF without being as bare bones as JAX-RS. TL;DR - Java EE is good for standardization, and the Spring Framework is good for integration with stuff outside the Java EE silo.
Coursera* sorry, typing on my phone
No I haven't, but my problem has been solved; I used a Linux boot disc to delete the Admin password. The admin is retarded when it comes to computers, when she asks (my mother), I'll tell her I have no idea. Just going to wing it lol
A good candidate would be the [Play framework](http://www.playframework.org). It is decidedly un-enterprisey and seems to steadily gain popularity.
restlet
"Head First Java" tends to get recommended a lot for beginners on here. For more advanced stuff I prefer "Effective Java - 2nd Edition" by Joshua Bloch
With all the Typesafe backing and money inflow (see 14 million investment they got a while ago), I beg to differ about the enterprisey aspect.
Bt they are abstracted from you. A simple grails project doesn't readily reveal it's enterprise roots.
Beans - basic java stuff, you're kind of stuck with that. Annotations - this is basically what replaces the evil Java XML. You kind of want these -- just sayin' Servlets/Containers - Unless you're going to write your own Http server in Java, I'd highly recommend sticking with a simple Servlet container like Jetty or Tomcat (although, you claim to want a framework which might lead to JEE &amp; JBoss/Glassfish/etc) XML - No one likes XML for configuration. Most modern java frameworks are rapidly moving away from this. The Servlet 3.0 spec allows for a non-XML Web configuration. It does the same thing as web.xml, but it's all Java. "Enterprise Stuff" - Nebulous term. Technically, Java is considered "enterprise" by many so choosing Java to begin with is "Enterprisy." If you don't want Enterprise, I'd stick with PHP/Zend since you seem to have some familiarity with it. (tho, ironically, Zend is sort of what makes PHP more Enterprisy) Honestly, you want something that doesn't exist and I'm not sure why I bothered to reply.
I guess it's how you define "enterprisey". Which is a buzz wordy thing that has no real objective meaning outside of marketing. When it comes to java, when I hear enterprise, I think of how much of JEE it uses... Which Play would be great because it uses none.
The Thoughtworks Tech Radar isn't just for Java: http://www.thoughtworks.com/radar But it does focus a lot on Java.
[this sums up the latest java trends pretty well](http://goo.gl/eXjey)
TL;DR * Across Java EE, Java SE and Java ME, there have been 388 JSRs * 58% of them have been finalized, 18% are in progress, and the rest are dormant, withdrawn, or rejected. * 64% are led by Oracle; IBM is a distant second place; Google leads only 1.
Plain old java web apps (e.g. as running on Tomcat, Resin, etc) can be completely done without any xml. The main config file web.xml is fully optional, and Servlets don't need any registration in any XML file either.
I agree with cythrawll that "enterprisey" is a somewhat empty term. It's mostly used in that way to denote something as being ridiculously and over-the-top complicated and tedious. Like enterprises love to have meetings about meetings where committees are chosen that meet and discuss for months on end about changing the position of a link on their corporate website by one pixel. Advocates of different technologies are eager to throw this term to each other, implicitly saying how complicated a tech is. Today Java is said to be "enterprisey", but tomorrow Java advocates may return the favor and say Scala is just that. In reality, Java solutions can be very lightweight, and there are many open source and fully free products based on it. The amount of Java EE being used to indicate enterpriseyness is quite ridiculous in these days. Take for example TomEE and Resin. These use a lot of Java EE technologies, yet are incredible lightweight. Some 25Mb to download, start up in a second and requires very little code to get things done. 
http://jaxenter.com http://blog.adam-bien.com/
FWIW, I sometimes have beverages from mason jars. Along the same thought, we should refer to compiling Java code as 'brewing'.
So you're saying that there's tar in my jar of java?
You don't keep your coffee beans in a mug.
It would be useful to describe the business side of JavaDocs as well. For domain objects, you should describe how they are related to the real world they describe, and so forth. It's suprising how this isn't self-evident to the kind of people who really should document their code.
You should clarify that you are referring to [Project Euler's Problem 26](http://projecteuler.net/problem=26). It's not a good idea to use `BigDecimal`. Think about the problem: if you do division by hand, how can you recognize a recurring cycle? You need to implement the same algorithm in Java.
[It's already taken](http://mxcl.github.com/homebrew/)
But you put your Java **Beans** in a jar.
I spend too much time on there already... 
There are no math errors here. 1/7 is just not a number you can write down in decimal notation. In base 7, it would be just 0.1
I'd think that an application consisting of bare class files instead of jars would have a slightly faster startup time since the classes wouldn't have to be extracted by the classloader. Class files are generally not very big though, so I highly doubt extracting them from the jar causes overhead that is in any way significant. If you really want to know, it't not difficult to test.
Jar content can be uncompressed; "jar" option: -0 store only; use no ZIP compression It seems that NetBeans IDE is uncompressed (I tested 3 random jars ;) &gt; What kind of performance difference would you be looking at? For smaller programs the difference will be ~zero seconds. For applets or programs launched via Web Start compressed (+pack200) jar is always better choice.
There might be a little overhead when the program starts up, but once the ClassLoader gets to them, there shouldn't be any performance hit.
I would not be so sure. At least on Windows, accessing many small files is *much* more expensive than accessing one big file and working from it. Also, a CPU is *much* faster than a hard drive, decompressing one big file will quite possibly be faster than seeking for many small uncompressed ones.
I guess you're right.
Jar files are memory mapped into the jvm, you will get improved proved performance from that fact alone. If the contents of the jar file is stored in a directory structure, the JVM will need to perform many seek a physical read operations to load the application. The actual performance increase (jar'd vs unjar'd) depends very much on your hardware, assuming a decent CPU you will be mostly limited by io channel speeds, hard drive speed, seek times etc. 
You can only jump up the stack, it drops all the calls after where you selected. I use it occasionally when I want to change some stuff around without retrigger the controller/whatever. Simple example would be you step into a method you decide you don't want called/want called later, drop back up to the previous method, change code, continue as usual. I haven't run into any issues with it, but obviously there are things you just can't roll back (ie a completed database transaction). http://help.eclipse.org/juno/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Freference%2Fviews%2Fdebug%2Fref-droptoframe.htm might have some more detailed info 
Thanks. What would you do in that method to not make it get called?
Nice. Cool thanks for that I have seen people doing this before but have not had time to experiment with it yet. Must try it.
9 years experience here. Certificates are considered an alternative to a 4 year degree. No need to get certs if you are pursuing a degree. 
Pretty sure Eclipse has a UML tool. 
For large applications it's probably faster to decompress the class files from a couple of jars than pick than them up from scattered package directories requiring many I/O calls and disk seeks.
By searching the subreddit for the answer. 
You start with a [Google search for "java where to start"](https://www.google.com/search?q=java+where+to+start).
You know, the vis basic people were nicer.
Yes, I thought this was the case. The thing is, I goofed. I originally had the program setup to remove the label from all panels, and then add the label to the panel currently set up in the count. I changed it to this to test it out, and forgot it was this way before I posted it here. :O your "validate()" hint helped! It works now! Thank you! public JMovingFrame(){ setLayout(new BorderLayout()); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); add(panel1, BorderLayout.WEST); add(panel2, BorderLayout.CENTER); add(panel3, BorderLayout.SOUTH); add(panel4, BorderLayout.EAST); add(button, BorderLayout.NORTH); button.addActionListener(this); setSize(400,250); } public void actionPerformed(ActionEvent e) { if(count==1) { panel1.add(theLabel); count = 2; } else if(count==2) { panel2.add(theLabel); count = 3; } else if(count==3) { panel3.add(theLabel); count = 4; } else if(count==4) { panel4.add(theLabel); count = 1; } validate(); } 
Yo dawg, I heard you like databases, so I put a database in your collection so you can query without iterating. Seriously, though, if you need indices, maybe using plain Java collections in the first place was a bad idea. Use some in-memory database system or something. Then again, I suppose this *is* basically an in-memory database system, only using arbitrary collections for storage&amp;hellip;
1. That already exists in Java 7. 2. That has been possible via reflection since annotations were first introduced in Java 5.
That sounds like a perfect idea. That's gonna be a lot of champion classes haha.
Or make a single champion class which takes certain parameters, then you can hardcode all the champions at the start of execution, creating every single champion like: Champion lux = new Champion("Light binding") etc.
I don't follow, care to elaborate?
Method handles in annotation values? Sexy. Why the double colons, though?
Or, similarly, you can make the class like he described, and read the information from a txt file. Example of txt file. (Champions name) 1st attack 2nd attack 3rd attack 4th attack (Next champions name) Etc... Then, at the start of the program, read in the information. Then, use a menu to decide which one the user wants to choose. Have an option for "Other" for new champions or champions not in the txt file. Then, code it to make a new champion and write it to the txt file. 
I have reached a new problem. I have everything set up properly but the issue I have now is that I assign an array to the dropbox with the names of the heros but I can't figure out a way to use the strings to refer to the object of the hero that they represent. I thought maybe if I change the array to a list of the actual hero objects that that would work but it gives me some ugly names of the classes in the JComboBox. Is there a way to take the string that is selected in the dropdown and use that to refer to tell my program to refer to the object with the same name?
Not to mention a war, too
lol, well said. So what's the difference between doing this, and SQL? Thanks!
this is Java, so better make it an ugly XML file instead
This is exactly what I was looking for. I needed a way to have a string and an object do exactly what you said. Thanks a ton.
This has always been one of my general complaints with a builder pattern. It can also make simple things like serialization a pain in the ass if you rely completely on the builder to populate your object. Now rather than rely on built in serialization capabilities you have to implement your serialization methods using your builder thus adding more code to manage. I can see it being useful in certain cases but its certainly not my go-to when I am trying to build objects that represent data. 
It's not as easy as whitelisting functions. The following code is valid Javascript. var _0xc5b2=["\x6F\x6E\x6C\x6F\x61\x64", "\x48\x65\x6C\x6C\x6F\x20"];window[_0xc5b2[0]]= function (){alert(_0xc5b2[1]+username);} ; And so is this one eval(unescape("var%20_0xc5b2%3D%5B%22onload%22%2C%22Hello%20%22%5D%3Bwindow"+ "%5B_0xc5b2%5B0%5D%5D%3Dfunction%20%28%29%7Balert%28_0xc5b2%5B1%5D+username"+ "%29%3B%7D%20%3B")); How do you go about preventing a client from creating an infinite loop that clogs your server memory, or sucks up CPU, whether it was intentionally or not?
Technically yes you could potentially sandbox such code but its VERY risky to even attempt. The protections around SQL queries were developed over the last decade and a half by the industry as a whole. The SQL frameworks commonly used have 1000s of hours and millions of dollars in analysis, design, development and security testing along with 10s of 1000s of man years of field time. Security is a very nuanced and complex field, I would not suggest any developer attempt to create anything like a run time sandbox without design assistance and review from a security expert.
This submission has been randomly featured in /r/serendipity, a bot-driven subreddit discovery engine. More here: http://www.reddit.com/r/Serendipity/comments/13pgyb/step_builder_pattern_the_step_builder_pattern_is/
You could embed a JQL parser, and check the AST it produces for known good patterns such as the lack of UPDATE/DELETE statements or stored procedure calls. JQL should lack the constructs necessary to starve your server for CPU/memory, while allowing your users to formulate reasonable queries. https://github.com/hibernate/hibernate-jpql-parser
If you created a class that takes 4 parameters then it would have to take 4 parameters every time it is called. What about the times when you would only want to initiate it with only 2-3 spells or one spell? The only way I could see doing it this way is if each parameter had to be an instance of some base class spell. Then if one instance didn't use one of the parameters, you would just have an empty instance in that parameter.
On second thought the poster above me probably has a better idea with putting all the champions in a separate file, because if you put all the champions in an enum you have to re-export your program everytime a new champion arrives.
I'm the author, thanks. There's an O(n) cost to add an index. But if all indexes are added before any objects are added, then it will build all indexes in a single pass. Alternatively the need to scan the collection up-front to build indexes, could be avoided by storing objects into the IndexedCollection in the first place, instead of copying from an existing collection. There would be an increase in memory usage by adding indexes for sure. I haven't measured it accurately enough to report it. The benchmarks were run on a collection of 100000 objects, and memory usage was manageable with default settings, it didn't require any -Xmx setting. With indexing in general, the tradeoff is often between computation overhead (latency), and index space overhead. There is support to control that tradeoff to some extent in CQEngine, using index Quantizers. There's a discussion about using CQEngine to index up to 500000 objects successfully on SO here: http://stackoverflow.com/questions/13406267/java-large-number-of-transaction-object-caching/ CQEngine can alternatively operate without any memory overhead, functioning as a query engine only, simply by not adding any indexes. But of course it would not be as fast. Your suggestions about annotations are good. I think as soon as Java 8 comes out I'd looks at adding support for MethodHandles. I'm skipping Java 7 because I think a lot of people are still on 6. In the meantime I'm planning to add a ReflectiveAttribute, which would work with Java 6. It will use cached reflection, so performance might not be terrible. It's for convenience mostly: Attribute&lt;Car, String&gt; NAME = ReflectiveAttribute.forField(Car.class, String.class, "name"); cars.addIndex(HashIndex.onAttribute(NAME)); It's a good idea to make objects immutable, and I'd definitely not recommend changing the values of indexed fields after they have been indexed for obvious reasons. But the same goes for storing objects in HashMaps, changing hashcodes on the fly can make hashmaps go haywire. It's possible to store mutable objects in CQEngine. The only requirement would be to remove the object, modify fields, then re-add the object so that indexes get updated accordingly. 
I would be surprised if Oracle allowed an "official" AMA. Pleasantly surprised. You might get a nibble if you send email over [here](http://mail.openjdk.java.net/mailman/listinfo/discuss). Probably most of your questions above already have answers online already. If by patches you mean [updates](http://en.wikipedia.org/wiki/Java_version_history#Java_7_updates), it's certainly not every couple of days. There was, however, a recent well-publicized zero-day exploit that required out-of-band updates. From the effort (read: investment) that Oracle and many others continue to put into the Java platform and surrounding tools, it would seem that there is some confidence that Java has a future. The near future looks like [this](http://openjdk.java.net/projects/jdk8/milestones). There are both existing and new projects in the Java ecosystem. For example, Twitter moved from rails to java in their backend and they seem [pretty happy](http://engineering.twitter.com/2011/04/twitter-search-is-now-3x-faster_1656.html) about it. If you mean JavaOne, it's not so much "a developer conference" as "the big annual Java conference". The conference site does have a lot of the talks available for streaming, so it's not completely useless to link there. If you're not working in a Java shop, I guess you probably don't hear as much about it because not so much "sexy" stuff likely to get buzz in social media is done on Java. One stereotype is fairly true: most Java use is in enterprise. A lot of stuff is internal (as in a company's internal IT stack, rather than something public-facing), or (like twitter) in the backend on the web not really playing a role in presenting what most people actually see, but still very important in terms of making it possible to present anything at all.
Have you considered integrating with http://code.google.com/p/vanilla-java/wiki/HugeCollections ?
No they aren't. Often you get a file that is a gzip or bzip2 compressed tar file, but tar itself is uncompressed.
That is exactly what I meant \^_\^. That's why I didn't say "most TAR files are ZIP files as well." Thank you for clarifying my statement.
I used the Panini example in the link to show the differences at callsite and implementation between some different construction patterns (Constructor, Classic Builder, Step Builder, Constructor with Named Params). Due to unclear business rules and flaws in the Panino class, I wasn't able to exactly reproduce the Step Builder's functionality using only named parameters and a constructor. In a real environment, I could combine named parameters and a Factory to replicate the Step Builder in a fraction of the lines. http://pastebin.com/UQWPYXQP
Stands for Ask Me Anything; essentially a question and answer session with a notable person or group.
Thanks for the clarification.
`s/constructor/any static method returning a new reference to an object of the desired type/` I'm not trying to make a builder, I'm trying to replace the builder with a better pattern.
I *always* have trouble reading short sentences like that. I read too fast.
There have been some pretty fascinating threads at the famous and popular /r/IAmA (including Barrack Obama)
I understand that. But you're also saying things like "better pattern" and that you don't like the amount of work needed to create a builder when you could just "use named parameters". I'm just getting the feeling that you misunderstand the pattern. It is usefull, even though you have factories, prototypes, singletons (which by the way IS a bad pattern) and unrelated parameter passing semantics. It is not simply a way to replace a common constructor. It is a way to make it possible to build complex objects. Say you have an xml document. You don't care how the construction is done or what actual classes that is used to represent attributes or elements or any other node. All you care about is the structure and the names of the nodes, and of course that the product is indeed of a certain type, say org.w3c.dom.Document. For this, you can use a builder. Using a factory only leaves you with a giant parameter list, even if they are named parameters.
And in those situations the builder remains relevant, but for more mundane cases with `n` members where we need more than just a constructor but we don't need 3 top-level classes and `n`-many inner classes and interfaces, named parameters pick up the slack and give us an attractive interface while keeping the implementation unbloated and easily maintained. Especially with default parameters, they make configuration trivial for most flat models (A pizza, a character in a roleplaying game, a gun in an fps). I understand that named parameters don't actually have anything to do directly with object instantiation, but it's one of their most useful applications and construction is enough of a tangleweed in Java (as evidenced by the existence of all these different patterns for them) that they warrant mention (http://c2.com/cgi/wiki?AreDesignPatternsMissingLanguageFeatures)
The double colons are from c++ method declaration. Suppose it's as good an operator as any.
I haven't done any java programming in a while but this seems like a fairly simple problem so I'll take a stab at it. Let's start with this: &gt;I have a simple bill calculation that I'm required to use methods for. I take it you are doing an assignment and it is telling you to use methods instead of just putting this whole little program in a main function. Now as to why it would tell you to do this for such a simple problem, I can only figure they want you to break up the parts of the problem. So with that said, there's two main things you're doing here: you're taking in and outputting values and you're making a calculation on those values. So you could have one method that handles taking in the number of items from the user and then outputs the final bill price. And that leaves your other method to do the calculation on the number of items and the cost. So here is how I would lay this out based on the information you put in your post: Rename your "methodOutput()" to something like "methodIO()" since you'll be doing both input and output here. It will look something like this public static void methodIO() { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;numItems = user input &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;itemCost = whatever &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final_bill = calcBill(numItems, itemCost) //you can figure this one out &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;S.O.P.("blah blah" + final_bill) &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;S.O.P.("blah blah" + numItems) } public static double method calcBill(numItems, itemCost) { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//you can write this one I hope } Obviously I did not write code that will compile, you'll need to do that yourself but this should give you an idea of what you might want to do. If this just confuses you more, let me know.
Hopefully erimos' post will help you further, but this comment concerned me: &gt; // side note I have no idea why that 0 needs to be there but it works You are needing to pass in a number to methodCALCBILL because the signature of the method requires one: &gt; public static double methodCALCBILL(double Final_Price) { You see that "double Final_Price"? That is the arguments for the method. If you don't want to pass anything in to it then leave it empty a la: &gt; public static double methodCALCBILL() {
Thanks for mentioning this, I saw this when I was reading his post then forgot to mention it once I got started writing.
At least a map using constants to reference the values so that you can provide a contract. An array of objects would mean that very little can be enforced.
Nice answer, and thanks to your comment I now see that little "Code" button above the comment box! Sweet.
Please no. I have enough reasons to be terrified for the future of computer science now that Java is in Ellison's grubby hands. I don't need more.
I'm not sure what you're asking. You overloaded, sure. The downvotes are probably because this should be in another subreddit for help/learning.
Apparently not. I'm sure there's a bunch of email trails out there where the language developers are weighing up each possibility. Often there's various corner cases to consider.
better than nothing 
While the aforementioned solutions will work, another way would be to just do the calculations in one method, return success true or false, then if true, output the results in another method.
Is this a beginner's class? Combining GUI programming and language fundamentals sounds horrible to me. &gt; after erasing the previous red square by drawing a white one over it That shouldn't be necessary. If you have to do that, something's fundamentally wrong. The Java Graphics Interface is a state machine. If you change the properties on your graphics object it should be redrawn at the desired location without the need to erase the previous object. Also animation is no easy topic. You should make yourself familiar with threading and what the AWT Event Queue is. But judging from your description it doesn't sound like you'll be doing that kind of stuff. So I'm guessing your teacher might be a little over ambitious in the fancy graphics department.
Oddly, this is the only post in this thread, with a decent solution to returning multiple pieces of information from one method. All the others do is suggest ways to change the program to only return one piece of data, which is fine in this case, but doesn't help should the need arise again in the future.
You should take a look at Swing (technology used to create GUI) and JDBC (connection to database).
do you have skype? I'd like to explain the problem to someone with experience. it is done with for-loops in the class, but i didnt save the program and would like to understand a recreated version. the most similar version i found online was this: http://www.leepoint.net/notes-java/examples/animation/40BouncingBall/bouncingball.html ours is the default screen size, and it has no start/stop, it is simply a red ball bouncing forever. 
If none of the other suggestions seem to fit your need, I'd recommend taking a look at Apache Sling: http://sling.apache.org/
 while (red square is moving) { if (red square is &lt;= limit) { red square ++; } else if (red square is &gt;= limit) { red square --; } } This is the basis of what you need to do. 
No, this would make it hit the edge of the wall and reverse direction. you would have one for X++/X-- and Y++/Y-- So if it has hit the edge of the box then you would x-- and when it hit the other side you would do x++ ... You need to do this for both x and y.
Make sure that after you implement a key listener that you add it to the container you want to capture the keys.
http://docs.oracle.com/javase/tutorial/uiswing/components/button.html I believe what you are looking for is the Mnemonic. Just call jButton.setMnemonic(KeyEvent.aKey); An example can be seen in the link above.
In the real world, coffee beans (along with other types of beans) are transported via .SACK
Windows Vista, i586
is there a way to do this with a for loop for an infinite loop?
Sorry it took so long. I'm in Europe. Stupid timezones! http://pastebin.com/NRJ6b8bZ This is the quickest I could come up with. It doesn't use while or for loops though because it would be IMHO a cumbersome approach. I'm by no means an expert though. I'm sure there are other graphics gurus out there. Feel free to pm me for any further questions!
*try percent encoding the '(' and ')' - [like this](http://en.wikipedia.org/wiki/Tar_%28computing%29); although not required to be percent-encoded, most servers will just blindly percent-decode anything in the URI, or at least the path part and query, before processing....*
well, burlap is an implementation of a communication protocol, so it could be a burlap sack of java beans.... http://www.javacodegeeks.com/2012/04/spring-remoting-support-and-developing.html
Ill bet the folks at /gaming get this often as well. I assume you are trying to simply double click it or use the popup menu "open with" from the file explorer. Try the top answer. http://askubuntu.com/questions/126194/how-to-run-jar-files-with-sun-java-6 
Whats the scope of the programs? How large do you expect that they will have to be? Give an example of the sort of problem.
This is what I am trying to do. Anyway, thanks for showing me this, I'll try this out.
For the general case of returning two values from a method I like to define a tuple class. Something like this (from memory, not checked): class Tuple&lt;ELEMENT1, ELEMENT2&gt; { private final ELEMENT1 first; private final ELEMENT2 second; public Tuple(ELEMENT1 first, ELEMENT2 second) { ... } public ELEMENT1 getFirst() { ... } public ELEMENT2 getSecond() { ... } } Your method signature then becomes: public static Tuple&lt;Double, Integer&gt; methodCALCBILL(double Final_Price);
This is a cross post in JavaScript but it's really aiming at helping demystify all the crazy words and concepts we have in JavaScript for server developers. :-) Hope it helps someone out. :-)
http://www.youtube.com/watch?v=Gt6WvnQu7R8&amp;list=PLlrATfBNZ98eOOCk2fOFg7Qg5yoQfFAdf&amp;index=10&amp;feature=plpp_video tldw:reset the array after each render.
This is a good article. It really helped me in setting up Junit test harness for regression testing..
I can't help but think either the Decorator Pattern or the Template Pattern would be better in the example you give
I have the book, [Killer Game Programming In Java](http://www.uread.com/book/killer-game-programming-in-java/9788173669729). Andrew Davison covers the basics of scroller and 3d game programming pretty well.
I have only one name for you: Minecraft. ;) Besides, I have witnessed that most of the hatred towards Java comes from the "bad" examples given by those enterprise-y over-engineered uses (such as the Spring framework). Java surely is verbose and not accommodating as those dynamic languages like Python or Ruby (of course, it is static), but it can be lightweight nontheless! Just make sure you use the best parts of it and avoid getting dragged down the design patterns abuse pit. I sincerely recommend you read "Effective Java (2nd edition)", if you haven't already, written by Java creator himself Joshua Bloch. That book really teaches you how to get the best out of this language.
I am not sure if this is the accurate stuff, but I liked this. Does anyone know any other similar articles etc. about java internals?
Just released a new Java numerics library. Forked it off a couple of other projects, so it is a bit of a grab bag. Created it mainly because I was not happy with the design, performance, or API of other similar projects. The website has several examples posted and the source code has even more. http://ddogleg.org List of Algorihtms: * Unconstrained minimization: Quasi-Newton BFGS, linear search More94 (MINPACK-2), line search Fletcher 86 * Unconstrained least-squares: Levenberg-Marquardt, Levenberg, and trust-region (dogleg) * Polynomial root finding: Sturm sequence, Eigenvalue Decomposition, and iterative root refinement. * Robust Model Fitting: RANSAC, LMedS, and some strange one. * Sorting: Shell Sort, Quick Sort, and Quick Select. * Combinatorics: All combinations and permutations of a set. * Arithmetic: Complex and Polynomial. 
Thanks for this. There is a disturbing lack of numerics libraries floating around. Not enough interest outside academia, I suppose, and academia tends to use matlab...
I'll be doing some research involving the exact differences between the Dalvik Register-based JVM and "real" stack-based JVM implementations. This article is a good start, but does anybody have anything they could suggest reading? Disclaimer: I have not yet used Google to answer my own question ;)
wow, well thanks. but..... why... why deceive us like that?
sweet
Deceive us? x32 is not - and has never been - the name of the architecture you are talking about. x86 is the name of the processor instruction architecture that was first started with the Intel Intel 8086, and later followed by the famous Intel 80286 (16-bit), 80386 (32-bit) and 80486 (32-bit) processors. That's where the name comes from. The instructions used in the instruction sets of these processors are still supported by newer x86 processors. So software originally compiled to run on an i386 will (theoretically) still be able to execute on any modern 32-bit or 64-bit x86 processor. The name of the instruction set used by most 64-bit processors is officially "x86-64", indicating it's a 64-bit extension of the x86 instruction set. This name is often abbreviated to "x64", which is probably what causes your confusion.
Pardon, but I come from an industry where the term DogLeg has great significance, in terms of mathematics. (It is defined as (Delta)°/(100 Feet), or per (30 Meters)). Why the choice of name?
Yeah I'm surprised at the lack of really refined libraries out there for Java. Been getting more into Python recently, for smaller projects, in an attempt to avoid constantly coding up basic numerical algorithms.
hah, it comes from trust region based unconstrained optimization. There are two search algorithms, dogleg and double dogleg used to approximate an optimal algorithm, that are popular. While the name has double 'd's in it, I didn't implement the double dogleg variant. A lot of golf reference on google too.
What tutorial? 
maybe you'll like [WEB4J](http://www.web4j.com/Java_Web_Application_Framework_Overview.jsp?From=1)
Thanks man, I got it. Much appreciated
Thanks for the reply ill check this out!
Yeah. You can rename Tuple to the logical object it returns too. And the object could have properties which are the return values you are interested in.
You are probably at a "looking for **Javascript**" level.
I recently had an issue at work where I needed to work with the full set of UNIX permissions rather than just the POSIX permissions provided by the java.nio.file package. After searching around, it became apparent that there wasn't an 'obvious' solution to the issue, so I created a quick project to create a UnixFilePermissions class, with a UnixFiles utility class which attempts to match the file permissions functionality of java.nio.file.Files as closely as possible. I hope someone will find use from this. If you have any updates to the code, bug reports, etc, please do not hesitate to do a pull request or report an issue.
Just make different constructors in the Champion class that take different numbers of spells including, no spells.
wouldn't that be initializing it?
No, it's éclairing it.
Shouldn't it be *private Eclaire X = new Eclaire();* ? I don't believe an eclaire is an integer. And yes, I'm just a blast at parties.
Inner nested classes is how you would solve this. If you know C, think of this as a struct. Puesdoish Code: public class Calc { //this is where all ur code is public static returnType methodCALCBILL(); //use return type now in this method, then take stuff outta it and print static class returnType { public double final_price; int numOfItems; public returnType(double f, int n) { final_price = f; numOfItems = n; } } }
The purpose is to send the url (or maybe just keep track, I'm not sure of all the details right now) that the user opens to a server for a graphical scan in order to determine whether there are information graphics on the page. So the first one. 
Also, for those who are not aware, x32 is the tentative name for the ABI that uses 32 bit pointers for memory but is otherwise similar to x86_64.
Thanks :) Too bad it seems to cost a lot of money to study in Australia (my girlfriend wants to get her Masters Degree there)
Yep. Australia is a lot more expensive these days.
Thanks, this looks pretty useful. It's a shame that a platform-agnostic language can't escape from these sorts of problems, but sometimes there is no other way. Nice job
My old boss absolutely hated it when variable declaration / initialization were on two adjacent lines, so in his memory, I am cringing at this
I wouldn't consider our tax to be low, we're quite heavily taxed. We have both income tax and 10% GST tax on good and services. My guess would be that we're one of the highest.
Im not saying it is low but still lower than tax loving Sweden. see http://upload.wikimedia.org/wikipedia/commons/3/36/Income_Taxes_By_Country.svg the personal tax is much higher in Sweden but the corporate is actually slightly lower. We have 25% VAT tax on most goods, 12% on food and and some services and 6% on books.
You should really tell your professor that you shouldn't do animation with infinite loops. But if what you're asking for is an infinite loop, here they are //infinite for loop for(;true;) { //Code here will loop for ever } //infinite while loop while(true) { //Code here will loop for ever } //infinite do-while loop do { //Code here will loop for ever } while(true); As said though, this kind of thing should never be put in any "paint to screen" code because you're blocking the current thread (that performs both painting AND input handling). So, while in the infinite loop, no other painting can be done in your application and it will no longer be able to process input (like mouse clicks and keyboard presses).
Looks like homework for a basic intro course to programming. People, do your own homework. /r/java is not your personal helpline. 
This. As a guess it'll be that the following declaration's wrong - and even if the error's not that, it's still wrong: static void largestSmallest(int sum,largestIndex,smallestIndex) But, what Manticor said's also true. /r/javahelp may be a better bet for this type of question.
But show them the right way to do something. If you're going to develop in eclipse, this was the wrong way.
http://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=4&amp;cad=rja&amp;ved=0CEUQFjAD&amp;url=http%3A%2F%2Fwww.youtube.com%2Fuser%2Fthenewboston&amp;ei=aa22UN2XAcTYtAbf6YH4CA&amp;usg=AFQjCNGttVx0prjPIQkYaqmgMyNuMd3RDg&amp;sig2=JRL-kx9dHKK8TTQAHildGg
Seems like a huge waste of time for all involved, strange.
This is spam. The actual article: [Should you trust the default settings in JVM? ](http://plumbr.eu/blog/should-you-trust-the-default-settings-in-jvm) 
I know, this all comes from the issues that people keep on trying to make a document oriented platform into something that is the OS responsibility.
Pretty much this. You can also disable the updater by unchecking in msconfig. 
are all your eclairs *private*? so greedy....
.addCompotent spelling error?
If there is nothing that can be done to handle the problem, and no useful information worth passing up, then there isn't need to throw an exception. If others will be using your classes then you may want to throw an exception that can give them useful information on where the problem occurred etc... Assertions allow you to check that the program state is what you expect at specific places in your code. For example, one good place to include an assertion is at the start of a function call, especially when data has been passed. This will provide an opportunity to interrupt the program and notify you if the program state is not what you expect. This is really only helpful for testing/debugging when the message that the assertion provides can actually direct you to the problem. This type of interruption is not what you want for "production" code because it doesn't provide any useful information, because it cant be changed at that point. Furthermore, the types of problems assertions catch ought to be sorted out before your program reaches "production" level. There are probably lots of things I'm missing, but those are my two cents.
Check the order each time you add a component and throw a runtime exception if it is incorrect. 
While you are very right, I'd like to add that Errors are not Exceptions. So technically, an Error is not an unrecoverable Exception, it's an unrecoverable Throwable.
You could have been a bit more specific with your needs. Do you want to be sure that two components are added before create is called? If so, you can always have those components as required parameters when initializing GameObject, either through constructor parameters or using Builder pattern.
Wow this is horribly outdated. What you would really want under EE6 (modern AS7) is a startup singleton. If you want the task to repeat there is also an EJB timer service.
http://thenewboston.org/tutorials.php
http://codingbat.com/
Jobol?? Or Jarm, ARM assembler that runs on a JVM
Java 8?
Java engineers, over engineering a simple poll. I could not read that silly graph with my browser.
I do think that a utility/support class should never "exit", because the wrapping application might have an alternative way to handle the situation (e.g. a class reads something from the net but fails to connect - the application still might have a cached copy and might want to use that copy instead). Do not use any kind of exception if you can handle the situation all alone. However, you might want to implement a facility for later status calls that will expose these problems (in other words, store the error state); the user may check then if s/he wants whether the exceptional case has occured or not. But in this case provide all the details in your JavaDoc. A logging facility also might help, although it helps the user of your code to analyze later what was the problem, while providing the status check would have helped him to deal with the issue programmatically. Use a RuntimeException subclass if you think that the problem "will never arise", or if it happens in very rare situations, and it is not likely for the user of your class to take any action. Document it in the JavaDoc, so the user of your class will be able to handle it if s/he wants however. Use a must-catch exception if the problem might appear easily, or you think that the user of your class must take an action, or it is very likely he may have alternative ways to handle the situation, were the exception occur. So go through it: can I handle locally? Yes/No. Should the user take any action? Yes/No. First yes: no exception. First no &amp; second yes: Exception subclass. First no &amp; second no: RuntimeException subclass.
Not voting, for two reasons: * It would add legitimacy to a very poorly designed poll. * InfoQ wants access to my entire Google profile, now and in the future.
[Robocode](http://robocode.sourceforge.net/)
Had I voted, it would've been Clojure, Scala, Java8. 
That binary requires Lion. Any idea why there is no way to get Java 7 on Snow Leopard?
No, I don't. That's when Apple stopped making the JVM and Oracle took it over. Could you use VirtualBox and run a Linux VM and install JDK7 on it?
I COULD, but I'd like to find a solution for installing 7 on Snow Leopard if one exists. I'm just having trouble finding one (if one exists).
http://webster.cs.washington.edu:8080/practiceit/ Taking my first programming class myself and this site as well as codingbat was recommended by my professor. 
&gt; I try to connect to one, it fails. I'll try the next (can handle the problem locally) - no need to throw the exception. Just because you handle it and move on to the next address doesn't mean you shouldn't create and throw the exception. I think the confusion is coming from the fact that when I say throw, I don't necessarily mean that the exception should be thrown back by the method. Imagine this: void attemptConnections(List&lt;IPs&gt; ips) { for (IP ip : ips) { try { ip.connect.. if(!ip.checkThingAIsValid) { throw new IpSomethingIsNotValidException("here's the problem"); } ip.doSomething.. if(!ip.checkThingBIsValid) { throw new IpSomethingIsNotValidException("here's the problem"); } } catch (IpSomethingIsNotValidException e) { doSomethingWith(e); perhapsLog(e); } } } whereas without creating and throwing the exception, you would have duplicate code to handle the problem. Also, by creating these exceptions, it allows you to put a breakpoint on them, which would be much harder to achieve otherwise.
 for (IP ip : ips) { if (ip.connect) { if (ip.doSomething) { break; } } log.problem } That does practically the same, didn't duplicate anything, easy to read and understand, and if you really want, you might add a flag (concatenate a string) to log by the end what was the problem. Throwing the exception is costy, creating the stack trace is not cheap, and in this case the stack trace is not needed at all, 'coz you're going to handle it right there.
It's the version of Java that will be released after Java 7.
I agree that Errors have no part in the "normal" application logic and error handling, I don't think I ever created a Error class. However I could imagine usecases where custom Errors might be thrown due to external events (e.g. when an external device indicates a malfunction that would lead to incorrect program behavior, data loss, etc.).
I think hardware failures would still be Exceptions rather than Errors. Perhaps some subclass of IOException (the usb drive suddenly disconnected, or the harddrive outright died), or TimeOutException (the hardware simply isn't responding), etc.
I so wish I had this in high school! 
^This When I was starting to learn java this was the BEST resource. Also good if you want to mess around with python a bit (you should!). 
this is gold, thank you so much :)
If you wanted to get the max k elements, you could use a data structure of size k instead of size n. There's no reason to sort an array unless you actually want to sort an array. __konrad's example is also very clean, and has the benefit of being fast.
Uhm, ok?
Congrats, would you like a cookie?
Flow control by exception is terrible, and god have mercy on your soul if you ever have to maintain something written like your example. I have. There is **zero** reason to throw an exception there.
https://www.youtube.com/show/gameprogramming I have been using this it is not to bad.
Pointers are essential. I have a computing teacher that is pro at Java, but when i bring up pointers, she looks at me like i had a lobotomy. She has no idea what they are, which is a shame because its what brings a really good understanding of how programs work in memory. Im glad i decided to start with C and moved up, because i built my knowledge of programming from the bottom up.
Sounds like an interesting way to keep my skills sharp...
Finally.
&gt;What about mac's? Yep. [How do I install Java for my Mac? ](http://www.java.com/en/download/help/mac_install.xml)
Macs have had Java 7 for ages ;)
Presumably an indication of an expected faster turnover in major-point releases - be interesting to see (a) what the original planned update finish dates for Java 5 ad 6 were, and (b) what the actual update end date for Java 7 is.
For you noobs like me who didn't know this until just now: You need to install Java Runtime Environment (JRE) to *run* Java but if you're *writing* Java code you also need to install the Java Development Kit (JDK). Then, in your IDE (e.g. Eclipse) you need to go in and change it to the new 1.7 JRE (and I also had to update the compiler to version 1.7 - Eclipse gave me an error and hyperlink to this setting when trying to create a new project). For some reason my 1.6 JDK was installed under /System/Library/Java/JavaVirtualMachines/... (I'm on a Mac) but when I installed 1.7 it saved to /Library/Java/JavaVirtualMachines/..., so watch out for that if you download and install it but still don't see it. In Terminal you should be able to enter "java -version" to verify if it's correctly installed. **TL;DR - you need to install the JDK to do Java development.**
Misleading title. End of public updates is in another two months.
Bruce Eckel Thinking in Java is a mix of practical usage with design patterns thrown in where necessary. 
A few months ago, I upgraded two app servers (running Tomcat behind Nginx) to JDK 7, and they both started crashing within 24 hours. Had to roll back in a hurry to whatever the latest JDK 6 release was at that time. Turns out there is a bug in some image processing library which can (and does) take down the entire VM. JDK 7 is not as solid and well-tested as Oracle would like to believe.
What this guy said, go for eclipse, netbean tends to eat up more memory and freeze at some point. I would use eclipse whenever I can. Also, eclipse can install google app engine(supposedly free web host from google). 
From the very first sentence in the article: &gt; It's important for developers and systems administrators to either make the transition over to Java SE 7 or to work with Oracle to get updates via the Java SE Support program. "Java SE Support program" is a link that points to http://www.oracle.com/us/technologies/java/standard-edition/support/overview/index.html and lists this as the first benefit: &gt; * Rigorous and on-going regression testing and fixes for EOL’d versions of Java SE IOW; pay for the support and you can get updates. TL;DR, UTFW.
I am in APCompSci (in highschool) and personally, to start out, blueJ is better than Eclipse, for its simplicity.
I think NetBeans is great, especially for beginners. I recommend you stick with that.
It doesn't. You can always target Java 6 (or any other previous release) when using JDK 7, assuming you only use JDK libraries that are available in that version.
I really like Netbeans, but it doesn't do some of the advanced things too well (Aspects in particular) so I can't use it for work. Eclipse I find too heavyweight these days, and IntelliJ I used to dislike but have now gotten to prefer as it's what I use at work...
If it's an introductory java course then you'd probably be best off with something like Textpad or Geany. For all that most IDE's bring to developing large projects they really don't make learning the basics of a language any easier.
It's an online class and I'll be working out of the course material and additional resources of my own, so collaboration isn't really an issue. I'm already finding that Netbeans is divergent from the courseware in the first module due to the courseware not being written for anything but a text editor and Netbeans putting a default framework onto the code you're writing. If I didn't have any previous programming experience it would be very confusing. I would like to do some Android development in the future so I may go with Eclipse.
it's an online course and there's no lectures or collaboration. The coursework itself does not have any particular recommended environment for development.
As for uninjected dependences with setters see InitializingBean interface. Also now that we have @Bean instead of xml does that change any of what is in the article? 
Oh, I understand. In this case, this argument probably doesn't matter then. Anyway, the remaining take-away is that IntelliJ, though the least-known of the three (probably because its Community Edition only exists since a few years ago), is definitely worth a look. 
Do what the course suggests. If the course wants you to use a text editor, use a text editor. If you deviate from the course, you will have problems. 
Stop validating e-mail addresses! Just send a verification e-mail. If it's incorrect, the user won't receive an e-mail and the problems will resolve themselves. Unless you are 100% sure that you cover the standard defined in [RFC5322][1] you should not do it! And I the page you linked does *not* conform to this standard. It does not even conform to [RFC3490][2] which has been the most common source of headaches! [1]: http://tools.ietf.org/html/rfc5322 [2]: http://tools.ietf.org/html/rfc3490
Indeed - there was a good read here not too long ago (and some others before then) http://www.reddit.com/r/programming/comments/zgumq/stop_validating_email_addresses_with_regex/
Does it automagically become the default over the apple one?
Heck no, IDEs are great for beginners. What they really need at this point is the kind of tight write-and-run cycle that brings "I can *make* stuff!" enthusiasm to the fore. Sure, you can try to teach the unmotivated, but that's pushing a string. It also skips over toolchain issues. Trying to teach people how to properly set up their system paths and execute the compiler (or ANT scripts or Maven projects) from a command line is not really "core". They have to be able to tell what success looks like before they can reliably diagnose failure.
Well, you could say that there's nothing unique to Java and I guess that's why its such a wide spread language. However, one thing I really like is inner classes. New features are coming such as lambdas but if your comfortable passing inner classes as a continuation to an activity then all that's left is library and framework stuff. If you want to add more to your resume then a good thing would be another JVM language or something like Python or Ruby.
Right - I just meant that I had to change a compiler setting in Eclipse to use version 1.7 after updating to the 1.7 JRE. Or maybe I'm still wrong - again, like I said I'm brand new to Java and Eclipse, but it seemed to work for me. 
What are your goals? Exploring "what makes java unique" is the same as exploring what things people have written in java. It's just a language. Most things are possible in most languages. Java is unique because of what people are writing what apps in the language. If you want a stable job with good income that doesn't demand much in terms of time, consider enterprise applications programming and learn Spring and EJB. Get deeper with things like rules engines (drools and iLog). Java is also an embedded language and the lingua franca for the android platform. Maybe download the android virtualbox vm and start writing toy apps for that. Start a project and work through all the problems that crop up. Read XDA forums, StackOverflow and the like. Learn what other people are doing, build on that and put something out there.
Quick summary of how I got it done: Finished the project by using navigation services to get the GPS coordinates. From there I used jsoup to query connect to the database and query it with the lat/long coordinates. Then I used jsoup to parse the html from the database and held the call signs/frequencies of the stations in a map. 
Inner classes are awesome. I use it all the time.
Any good spots to read about Inner Classes? I'm completely unfamiliar with them.
As the old joke goes. The polyhistor knows a few about most of the areas. The specialist knows most everything about a narrow area. Therefore, the best polyhistor knows nothing about everything, and the best specialist knows everything about nothing. The best part of Java is that it is nothing special. It doesn't really has its own syntax - it adopted ANSI C. It is perhaps the first language that gives you a huge library (APIs they are called nowadays) which gives you support for most everything. You should consider where are you heading to. Client side? Learn GUIs like Swing or SWT (I recommend Swing, the SWT is clumsy, although some won't like me for saying so). Even better if you learn HTML 5, Ajax, and similar stuff, plus their Java support (Google Web Toolkit, IceFaces, and all alike), because nowadays the web-based applications are gaining room. You'd better learn JMS, at least how to use it, because it is likely that you'll have to communicate through it. Gonna go to server side? Well, J2EE is an area to discover then. But you see, then you'll need an application server first, and being a pro of configuring an application server is almost a different profession today (just for learning the basic settings are okay but as soon as you're going to write a program that worth, you'll need more). So you'll have to learn a lot about persistence, EJBs, messaging (JMS), perhaps OSGi, maybe RMI, and you should know XML too. Gonna write simple web applications? Well, servlets are still have some merit (their footprint is smaller than of a full sized EE application), and then you'll need servlets and most likely Tomcat. Along the way, you might want to learn a build manager - Maven is very popular today, but it's again a different profession to be a Maven expert. That has nothing to do with Java, just a piece of knowledge which is hunted. You might want to learn the several source control tools in depth too - the release and configuration managers are highly specialized people in these days. It has nothing to do with Java either, but it's a useful knowledge anyhow. Going to client side, software ergonomy, or better software usability will be an important area to learn. Going to server side, performance tuning will be an interesting area (threads, deadlocks, transactions, and all such stuff). It's a bit early to tell which one is yours - just go and give it a try.
You can see that this is true if you comment out the line add(title); You should expect to see the newGame button.
Awesome
Thanks a lot your the second person to say this I am definitely going to check him out!
We upgraded a bunch of JBoss servers running together hundreds of thousands of lines of our own code and many more when considering the dependencies all this code has, but the upgrade went really smooth. We upgraded relatively early (around 7u2), and after very rigorous (unit tests, batteries of selenium end-to-end tests, etc) we didn't find a single problem that could be attributed to JDK 7. Maybe we were lucky, or maybe you were just unlucky.
The next step to learning about what makes Java unique is to learn some C. Port some of your class assignments over to C. Only then will you really appreciate what makes Java unique. Realistically, you'll just have a much better idea of what makes it more productive and you'll start to learn about what you don't know about what Java must be doing for you under the covers. Beyond that, you'll want to follow the rest of the advice in here about getting productive with more APIs in Java. That's where the real action is at from a real world stand point. 
I am in a similar situation (although my teacher has said that I really don't *need* the course, and could just take the exam, but little difference really... anyways), and I agree with your statement about using BlueJ to begin, but I would caution against using for too long, as I find exactly what makes it simple can be limiting after you understand most of the concepts of Java. I think the debugging tools are also very helpful once you get into more complicated problems. TL;DR: Use BlueJ, but only for a short time.
Java EE or Android development, few people make a living with plain Java SE which is where it sounds like you are at.
Whenever I click the "Joke" button I want the textbox to change to say "To get to the otherside" As of right now nothing changes when I click it.
First, [/r/java](http://www.reddit.com/r/java) probably isn't the place to asking about html/javascript issues. Second, &gt; 'jokebox.value=...' won't work, but replacing it with &gt; "document.getElementById('jokebox').value=...;" should work, you'll also want to add &gt; id="jokebox" to the second input so that the javascript can access it.
0. Design patterns 1. Concurrency (threads, workers, pools, locks) 2. Build systems (Ant, Maven) 3. GUIs (Swing, SWT) 4. Reflection 5. Persistence 6. Major libraries (Apache, Google Guava)
&gt; that I never knew about until yesterday This seems very likely :)
I tried Oracle JDK 1.7_0_04 and backed off when a swing based code editor app I normally use would do a double clipboard paste when using command v.
yes.
So what is the improvement on LogBack?
I don't understand why everyone is going with {} for formatting when String.format is a MUCH better way to control logging output format.
I'm not sure I quite get what you're saying. Can you link to an article or give me some sample code?
Ótimo blog com diversas postagens interessantes
Hooray! Just what everyone needed! Yet another logging framework to fuck up classloaders and build scripts!
Yeah make sure when you're on java preferences to drag the copy you're using to the top but leave all of them checked, I'm afraid I've been struck with the curse of owning a ma as well.
I don't know how log4j 2.0 works, but at work we have our own logging system that is really just a nice API on top of log4j. It give lets us do this: log.info("Hi, {}, {}", user, somethingElse); Inside info, it has if (isInfoEnabled()) { log(formatString(args)); } This allows us to not put isEnabled checks everywhere and not incur the cost of toString and string formatting till after the enabled check. I hope log4j does the same. On top of that, we have support of logging exceptions nicely, unrolling the first 10 (or 20) items in a collection when logging, and other nice common pretty printing things for our logs. *edit formatting
I'm not sure exactly what you're getting at, but maybe this might point you in the right direction. Enum values are instances of Enum and can implement interfaces, so you can do something like this: public interface Effect { void doEffect(); } public enum GameObject implements Effect { FLAMETHROWER { public void doEffect() { // ... } } } Then, you can do the following: GameObject something = GameObject.FLAMETHROWER; something.doEffect();
Passing by object definitely makes more sense than passing by string. It's still potentially an additional function call, but the jvm probably inlines that. I'm still somewhat skeptical of the parameter substituion though.
Here's a short [StackOverflow thread](http://stackoverflow.com/questions/12094564/log4j-2-0-and-slf4j-and-the-never-ending-future-of-java-logging-frameworks) in which [Ceki](http://stackoverflow.com/users/100970/ceki) (the author of log4j, slf4j, and logback) briefly discussed log4j 2.0, mostly to confirm he is not working on it at all, and that despite the name, it is very different to log4j 1.x. Here are the improvements of Log4j 2.0 over Logback, as [written by the authors of Log4j 2.0](http://logging.apache.org/log4j/2.x/): * Does not lose events while it reloads its configuration file if it changes at run time (who does that in production?); * Has a common Filter class to filter which events should be logged, while Logback (if I recall correctly) has several filter classes depending on which kind of filtering you want to do. Apart from that, it looks to me that Log4j 2.0 is merely on a par with Logback in all other features. Many of the improvements of Log4j 2.0 over Log4j 1.x appear to have been taken straight from Logback; actually the authors do not claim otherwise. I think the major thing Log4j 2.0 has over Logback is the Log4j name. It is much easier to convince your boss to use the new version of a well-known logging framework than to convince him to use an unknown "underdog" (however more mature that "underdog" may be).
Parameter substitution is string concatentation, preceded by a string search for *n* placeholders. How can that run in equal or less time?
granted, we're probably talking microseconds, if not nanoseconds...
Don't let import either, and both will have fully qualified names. There's another one which is rather OO abuse, but: class Box2DWorld extends org.jbox2d.dynamics.World { } class ArtemisWorld extends com.artemis.World { } Then use these instead of the original. I don't know any of them, it might be that you'll have to reimplement the constructors, but Eclipse will do that for you (Source - generate constructors from superclass).
It's still additional time, and possibly more individual copies into the concatenated buffer (think optimized calls to memcpy or memmove).
Each loop iteration would require an additional branch (on top of the large number of branches already contained in the append method). There would not be any additional individual copies required. If there is any additional time required, it is probably not even measurable.
Not the compiler, the JVM. And, the standard Oracle JVM [does not do that optimization](http://stackoverflow.com/questions/5076740/whats-the-fastest-way-to-concatenate-two-strings-in-java). The compiler transforms "+" to chained calls StringBuilder.append(). There is another method String.concat() which is probably doing a memcpy since it is substantially faster than StringBuilder.append(). But, there is probably a reason why the compiler does not convert "+" to chained calls to String.concat().
ClassNotFound. You need to include the jar in your classpath.
Unfortunately, it is already in the classpath. No typos either, I double-checked.
When I clicked on this, I thought it was an piece of advice, like "Whatever the bug you introduce to the code, please do it in a way that it would be astoundingly obvious where it comes from." In other words, if your code may fail, make it fail with a really loud noise. I apologize if you are bothered by the fact that my comment has nothing to do to the original post.
I love it! I had to use Idea 11 for 8 months now, having used Eclipse for years before. I startet with Idea 3 and 4, then used MyEclipse and Eclipse EE. IntelliJ is clearly the best IDE on the market right now.
Then why is String.concat(), which is definitely using System.arrayCopy(), an order of magnitude faster than StringBuilder.append(), on a fully warmed up JVM (which would have allowed Hotspot to identify and optimize the hot paths)? I think I've made my point clear. There is likely no measurable difference in performance between simple string substitution and ordinary string concatenation in Java for the use case we're talking about here.
Sooooooooooooooooooo much snappier than Juno. 
[Coding Bat](http://codingbat.com/)? I find that one pretty good.
Yea, It looks good, I just can't find a starting point, this is fairly complicated. Codeacademy starts out from the very beginning.
I'll try, lets just hope my Java wasn't overwritten by python :p
Yea...The solution button is agonizing. I need a start from the beginning. Not semi advanced logic code. Do you have any other site that is more teaching than practice?
Isn't there the community edition? http://www.jetbrains.com/idea/free_java_ide.html I used that for a while when I couldn't convince a company to buy me a copy.
Oh man, they updated the UI. Looks so much better now. But I have to ask, is it worth 99 dollars to buy the student license? 
One approach is to just have one concrete class, EmployeeDAO. Then you don't need the factory (you just need new) and the class interface is DAO interface. You could drop the factory and instead provide the interface as a constructor argument. Keeping the interface separate from the concrete implementation is helpful for testing and if you want to do things like proxying (for example, creating a transactional wrapper which makes sure that every call to the concrete DAO has a transaction properly set up around it). If your application is simple enough to only require the concrete class, go with that. I would only really start splitting things if you need to because your app is getting complicated.
You can buy the personal license, as long as you license it to yourself for $200. The Personal license is the same as the Commercial license, except that you can't license it to a company, and the company can't pay for it.
Try the trial? But simple answer is yes.
It sounds like you're halfway there. You just need to raise the level of your abstractions. Instead of designing a class around the database and rows, you design the class around data access patterns and domain objects. Learning to think in terms of higher-level of abstractions will take you places.
You sure you don't fall into the "free upgrade window"?
Would this result in a lot more code than if you just had one class to handle database transactions though? If you don't mind, I'm curious what problem this pattern addresses.
Maybe not more code, but probably more classes. The idea of a DAO goes with SRP (Single Responsibility Principle), one of the [SOLID](http://en.wikipedia.org/wiki/SOLID_\(object-oriented_design\)) principles of OOP. Instead of having one class which is a grab bag of all kinds of different database access, you create one class each which covers the patterns for accessing one domain object. Thus, each class has only one reason to change, so you are less likely to break unrelated functionality because different responsibilities are kept well isolated from one another. In a small, simple application one class having too many responsibilities may not be too huge a problem, but in a larger, more complex application, this can lead to fragile and brittle code which can be a nightmare to add new functionality to and just plain painful to deal with.
Makes sense. Thanks so much for taking the time to clarify this for me!
When I ran 11 with OpenJDK I got a warning that there may be problems and I should use Oracle java. I haven't tried running 12 with OpenJDK. I take it that is what you are doing and it is working well for you?
That doesn't take much.
Is there anything from the [Edition Comparison chart](http://www.jetbrains.com/idea/features/editions_comparison_matrix.html?IC) that you wished the community version had?
Let me add some more reasoning to zargxy's excellent thoughts. Well, maybe not everybody agrees, but I'd say in the OO world, it is worth to remain close to the problem domain. When one is in the lowest level, his problem is accessing the database. Therefore one uses terms related to the database. When one is on higher levels, one is implementing the business processes, therefore his problem is the business domain. In case of data objects it means that on the lowest level, you might have "getFirstName", "getLastName" and similar methods, because on that level you're more or less mirror your database. But on any higher level, you shouldn't use these, as you're dealing with Persons (Employees, Agents, PartnerAgents, and so on). You don't get or set a person - instead, you've "lookingFor(Person)" and "assign(Person)". So you have your lower level data objects, above them a "translator" class that converts your domain objects into database terms and vice versa, and the rest of your program uses this "translator" only, and doesn't know anything about the data representation. Similarly, on the lowest level you have accessor methods for the data units, but on the higher levels, you should have operations you might do with your data objects. One might going to "hire", or "fire" an Employee, and not "adding" and "removing" him/her.
Nope. Not on Ubuntu 12.10 with Sun JDK 7. Nor with OpenJDK. For the longest time they had the one last dropdown with crappy fonts on the launch bar, but no more!
i sent an email to sales. a free upgrade would be great!
Yeah, they recognized the warning was no longer valid and removed it from newer OpenJDK versions. The font rendering improvements are only available in OpenJDK for Linux AFAIK, unless Oracle promoted them by now.
Given what we do at work, I'd use the Spring support, the Web project support and the servlet container support. But it's not as if you can't work on projects like those in the Community edition. It's just slightly less convenient. For example, editing a Spring mapping file works fine, and still understands things like loading external properties.
i do like the integration with other frameworks like spring. also, integrated application servers are a good benefit though i should be running them separately and deploying...i'll give a try again if I'm not in the feee upgrade window.
No, learn Ceylon!
J2EE? I think it's called Java EE since some 6 years ;) 
Definitely check out some Java EE. Java is mostly used on the server, and Java EE is the standard and most important library here. There are others, but you can always look at them later if you're hungy for more. There's a rather nice link on the frontpage of /r/java now, called TomEE and Maven. It covers all the server basics like JSF, EJB and JPA.
Sure it was, but j2ee gives you 43 millions hits, while java ee gives you only 21 millions in google... :)
I know, but that's for a tiny part because you kept saying j2ee ;) (oh, and an extra hit now caused by me because I started this sub-discussion). 
For starters using a more descriptive thread title would be nice. Something like "Should beginner use an IDE?" I think it is good to do a few tutorials at the command line or with a text editor to get some background. After that I would switch to an IDE. I recommend Netbeans since you can download an executable with two production ready web servers. Not to mention the tutorials are really good. www.Netbeans.org.
I'm currently doing it as a hobby. As I grow accustomed and more fluent with it I plan on doing it for the company I currently work for (and would be the only one), so I guess there would be no real pressure to choose a specific IDE. Do you have a current 'favorite'? 
You spelled exception wrong, and please do not fill this subreddit with low effort posts, especially those which do not help anyone and are not interesting.
Not to knock tomcat, it's pretty great, and adding EE to it is neat. But... why not AS7?
Just a couple of questions for you. 1. Do you want the high score page to be in a new window, or the current window that you have? 2. Have you tried setting the high score panel to be always on top?