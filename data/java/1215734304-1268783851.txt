http://mindprod.com/jgloss/jgloss.html
I've been building RCP apps for the last couple of years, however I'm going back to doing some Java Web Consulting (time to get paid). What's the hot web framework now? When I left struts was winding down and all this JSF stuff was _trying_ to get off the ground.
Rails on JRuby? Just kidding, I'm not sure if that's even working yet. But clearly Rails, Django, Merb, Pylons, etc are the hot web frameworks of the hour. I haven't heard a thing about Java frameworks in a while. I'm sure there are some, though.
Well I would say Spring for a start
Web Flow?
anyone know if there is a java interpreter...kinda like the python interpreter? if you know of anything..have you used it? looking for something that you can type java code into and not have to compile it every damn time i want to see if something's going to work. like if i want to see if a "for" loop is going to work, i wanna be able to type just that part of the code and BAM...it spits something out 
Technically speaking, Java _is_ interpreted, even though it's compiled to byte codes first. So what you want is an on-the-fly byte code compiler. http://www.janino.net/
There's always [Beanshell](http://www.beanshell.org/).
you can use 1.Beanshell:Just add Beanshell Jar in CP and call Interpretor.main(String[] args) to start a jJava interpretor. 2.Groovy :A wrapper over Java that makes it more like Ruby. You can load Java Classes and test them. 3.Jython:Python's Java Implementation. You can load and script Java classes using Python
[Dr Java](http://www.drjava.org/) includes something like beanshell
4.JRuby: Ruby's Java Implementation. You can load and script Java classes using Ruby.
i used Dr Java for a class. it was pretty nice
"Ada is the language of software engineering par excellence." Oh, and by the way, this was written by two employees of AdaCore. Strange coincidence! 
&gt; LINQ, in both the Java and and the .NET world, would narrow the required skill set. Imagine using the same syntax to talk to databases, objects stores, web services and even the file system. Imagine using LINQ to find books using the Amazon API. Or, imagine using any of a number of Google services using LINQ. This is the problem I have with LINQ, trying to do everything with one syntax is a bit too high-level. The same syntax to query a database, query a data structure, query a web service, etc. Why? What does it actually gain you? It's O.K. in the Microsoft world where there's essentially only one database that gets used (SQL Server), but in Java land: Oracle/DB2/SQL Server/MySQL/Postgresql/etc. Each of these have features which would be effectively banned when limited to the jack-of-all-trades LINQ syntax. What Java really needs is: type inference, closures, and some kind of support for list comprehensions (preferably based on the Haskell/Python model rather than LINQ for Objects model). A way of making web services behave in the same way a relation database works is a long way down the list, a long, long way.
Yep. Plus, already with EJB3 and JPA you can use JPQL if you really want to abstract your data query language more.
Hibernate best practice: Use EclipseLink
It's true, although it used to, hence old documentation recommending it. The Java compiler (by that I mean javac rather than Hotspot), however, will inline code declared as final, in certain circumstances. That includes the most recent versions. It doesn't improve performance though, it can be a bit of a nuisance... try explaining this behaviour to a client who has subtle bugs because they keep dropping a Constants.class into a web-app without recompiling the code that references it!
ZOMG they fucked up a build. Eclipse isn't going anywhere. OSGi and RCP are two huge technologies. In fact we're seeing more and more complete application's built on top of eclipse's framework. Eclipse 4 will contain better theming and ability to create rich WEB applications easily. 
Yes, it really kills TDD. When you're writing code, you want to be continuously running the test you've written until the bar turns green. Even for non TDD, how often are you ever in a class that has a main method? You can get the old functionality back in Preferences, Run/Debug, Launching, Launch Operation -&gt; "Always launch the previously launched application"
gst, thanks, I've unsubscribed from java thanks to your "interesting" posts that never end. 
See also: http://www.javaworld.com/javaworld/jw-10-2008/jw-10-load-balancing-2.html
I use my own Cairngorm framework clone done in SWING as my MVC framework. I prefer thick SWING clients to all others. Used my framework to create minesweeper from scratch in about 4 hours and with JNLP I can do easy deployment of network clients. 
You prefer SWING to Eclipse RCP? Really!?!
Glad to hear about it... but I didn't finish reading the article because the author's grammar &amp; punctuation was so horrible. ServerSide needs a proofreader.
I don't feel like registering to post a comment on a blog I may never read again, but: &gt; @QueryParam only works with GET and if you are POSTing to something like /uri?x=yy then you won’t see query parameters. But, overall I am happy with the outcome and will continue to use this framework. Can you use the inject-able interface UriInfo to get the URI parameters for the POST or does this, like QueryParam, only work for GET? EDIT: actually it doesn't look like I _can_ register. What's the point of a artistic looking blog rather than another type of cms then?
yummy, java 7.
Xsocket looks neat. Can anyone give any feedback on how it compares to Apache MINA? http://mina.apache.org/ I've had a lot of good experiences with it as a platform, and I'm interested in seeing what xSocket might have to offer instead.
xSocket is very similar. I think xSocket is a lot harder to implement (a basic xSocket server is a lot of code) but overall a little bit easier to understand than MINA (since they both do about the same thing). MINA has a lot of non-network specific abilities (protocol builder, seriously?) and custom filter chains are a lot easier in xSocket (imo). That's all I can say right now.
Can JMesa be used without JSP? It would be nice to see some sample code for such.
I tried jnlp once and ever after.
war
I use the 3rd party Java6 http://landonf.bikemonkey.org/static/soylatte/ Eclipse is happy, I'm happy.
via: http://www.lousycanuck.ca/?p=289 Don’t rush to upgrade Java. Michael Horowitz at CNet News’ “Defensive Computing” blog has an article up on Java 6 Update 10, which was just released this weekend, and whether or not you should update from your current Update 7. This is great advice — well thought out and perfectly reasonable, especially where this new version does not contain any security fixes, only new features.
Josh should be part of Ask a Google engineer.
What a complete ninny.
Now with support for Groovy and Grails.
Cool, I love NetBeans. Anyone else feel the same way?
Yeah as far as java editing goes its probably my favorite editor. Its a little bloated but not too bad.
I like it for everything but C or C++ editing. For those two languages I prefer [Code::Blocks](http://www.codeblocks.org/). I'm especially excited about this release because of the new Groovy and Grails support. Looks like the Reddit crowd isn't too excited about it though. 6 upvotes and 4 downvotes right now. Maybe the Java haters are lurking?
I love using it for java... Protip: Check out nb-install-dir/nbX.X/shortcuts.pdf It has some really nice shoutcuts for code generation.. ex: sout&lt;TAB&gt; = System.out.println("");
Java haters rarely lurk. They are, generally speaking, an obnoxious bunch.
I really like NetBeans. Totally underrated IMO.
Does anyone remember English proper speaked?
&gt;Let me ask the basic question that everybody somehow asks himself “Isn’t there any other solution to persistence problem simpler and more powerful?” what?
I due!
Is it broken?
Ok, personal blog spam. I am the token black guy, it is OK.
My garbage collection smells. It takes most of the space of my house. :-(
My thought when I read that english is not programming the sentence words in to his article odd order of ascii bundles spaces sepeerated by them
I recently switched back from Eclipse 3.4 to Netbeans 6.5 due to lack of good UML support in Eclipse. After switching back I found out Netbeans does not allow me to add sources/javadoc to Glassfish V3 Prelude libraries. Why are both IDE's so fucked up?
I use Eclipse, my experiences with Netbeans have been painfully bad. 
Emacs!
Eclipse is to Netbeans as Gnome is to KDE. I prefer the former in both instances.
I'm having to use Netbeans at the moment for its mobile platform emulation, but I'm an Eclipse man through and through. Using revision control in Netbeans is stilted and painful. It does have some cool features though, like VMD.
i didn't know that netbeans had uml support - what's it like? i guess i should try it out. personally i use eclipse - partly because "it's what i always used" and partly because i prefer having just one ide for all development and a fair amount of work with python these days (lucky me! :o) the original question didn't cover this, but for a time i was working with an opensource .com and had free access to intellij/idea. that was pretty sweet - more polished, consistent than eclipse. since changing jobs i have seriously considered paying for it myself, but last time i looked the python support wasn't so good (so am back with eclipse).
incidentally, apart from pydev and svn support, i try to avoid plugins and use as standard a config as possible. the last 6 months or so eclipse has been pretty solid, but in the past i've found that keeping things as simple as possible (1) helps reliability and (2) makes starting over with a new install quicker.
Eclipse, great user community. Great plugins. Great framework - RCP/SWT.
NetBeans. The GUI of Eclipse on Mac OS X is absolutely horrible and slow. And having to compile C code to run it on my Linux distro is just plain insulting. And if I don't have a GUI, vim and Ant scripts. Which by the way works great with NetBeans projects (they're Ant scripts). For me, an Eclipse project with no Ant script is useless.
I'm using netbeans because it's recommended for Java newbies. 
I use Eclipse because I like the plugin system and I also want to be able to do C++, Ruby, TeX, and PHP.
by Sun?
Java newbies should not even use IDE. Write your programs in a text editor and compile in the console; would help you understand the need of classpath and how to organize packages. 
Eclipse. I used to use Netbeans a lot, but everyone at work uses Eclipse (mostly for plugins, JavaEE and web stuff, and svn integration, which I'm guessing you can do in Netbeans also), so then I switched over. I haven't found a reason to switch back. 
I have used both of them extensively. For Java development, Eclipse is better but for JEE/Web App development, last time I tried, Eclipse was half baked and useless. Some people use commercial Eclipse distributions such as MyEclipse but I have tried that as well and it still sucks. NetBeans is not any better. It is also very buggy and irresponsive at times. However for Web App/JEE development I prefer NetBeans over Eclipse. IntelliJ IDEA is still the best Java IDE out there. If I give NetBeans and Eclipse each 3 stars out of 10, I will give IDEA 8 out of 10. Unfortunately it is expensive.
Eclipse, because I haven't really used Netbeans. But, I hear good things. Every Java company I have ever worked for has used Eclipse or Some variant (RAD). Also, what are you secondary text editors. I use Textpad, Emacs and VIM when I need to do quick editing. I want to add JEdit to the mix if I hear good things.
People say IntelliJ IDEA is better but I rarely hear why? Do you have any why's
Netbeans, cause I'm most productive in it.
Eclipse. Comfortable with keyboard shortcuts.Very good SVN support. I have tried Netbeans on and off over period of years. I don't see that there is a proper SVN support i.e. an easy wizard which I can use to check out SVN trunk as a java project as Eclipse allows me to do. Plus I don't like way Netbeans organizes projects. I have heard IntelliJ Idea is better and have used it at times yet the organization of projects in the same baffles me. I have not checked out SVN integration with the same. I don't typically use text editors like VIM or Emacs because I work on project with a loads of classes so cross navigating and auto-complete helps.
I totally agree with you. I switched to Eclipse for standalone Java Application Development, but the incredible Web App Development support offered by Netbeans lured me to switch back; infact the question itself rose to my mind as I am currenty involved in my final year project development using struts and hibernate, and was rethinking to use Netbeans over Eclipse for better support.
This just seems evil...
100% gvim - I've tried (and re-tried) eclipse, but can't understand why it should take a glorified text editor so long to... type text. That said, the debug view is TOP notch. I'll often boot up eclipse just to use the debugger.
"There were 78m completed downloads of Java SE 6u11 in December. If you include downloads of older versions as well, you get a total 95 million completed downloads of the JRE. More than the population of the Philippines." I guess Java isn't dead after all.
Also, this doesn't count OpenJDK, which is now bundled with some new Linux distributions "out of the box".
Interesting.
Loads of big companies use Java extensively: Google, Amazon, eBay etc etc
Me too...at a big company. Tell that to reddit.
I have been using SVN with Netbeans 6.5 and I am fairly impressed. The Wizard setup is quick and easy.
IMO, Netbeans with SVN is not intuitive, especially when I am working with projects which are not IDE specific. So, I would have to check out a files, then create project which would link to those sources. In eclipse, I just check out the files into a Java project and I can just configure build path, essentially same thing but done with one wizard. Plus, I am not comfortable linking source from different location in a project.
I do some applet development, and I mainly use a basic text editor (SciTE)
Eclipse!
Command line compile with Ant, homemade text editor, occasionally JSwat when I need a Java debugger, Firefox error console when debugging JavaScript, Oracle SQL Developer for Oracle, Microsoft Query Analyzer &amp; Enterprise Manager for SQLServer, Cygwin for grep/gawk/sed/diff/etc., TortoiseSVN for source control, Macromedia Fireworks for the occasional imagey thing or doodad, Google for research, Reddit for f***ing off, all on MS Windows XP on a Dell something or other with two 19 inch flat screens and a cordless mouse but corded keyboard. I probably left out 20 other things. Edit: Whoa, why so harsh, people? Feh. I'm giving upmods to the vim &amp; emacs guys. 
Netbeans and Eclipse. I prefer Netbeans for quite a few things.
Eclipse for Java. Unless you want to know other than Java.
IBM Rational Software Architect. IBM WebSphere. IBM Rational ClearCase. IBM DB2. ... I'm not a fan of IBM
I started using NetBeans for the debugger in 2001 and continue to use it. I use only a few of the features but have started using it for C/C++ development in the last year. I considered looking at other IDEs in the difficult 4.0-4.1 days but have found new love again with 6.0 &amp; 6.5.
Mainly Netbeans.
NetBeans. It doesn't try to be another OS, like Eclipse.
eclipse, "SpringSource Tool Suite 1.1.1" to be exact. Eclipse distribution with SpringIDE and some other plugins integrated from teh start.
Emacs.
Éclair! Uh, I mean Eclipse! Although it feels just as bloated.
IntelliJ IDEA.
Me too and me neither.
Easy Eclipse with several plugins. Good times, good times.
Eclipse and Vim, depending on the developer. I've mostly used Eclipse, but I'm slowly transitioning to vim (I use it for most of my other editing needs).
Eclipse with m2eclipse
Eclipse Ganymede for Java EE for coding Visual Studio 2008 for .NET coding Tortoise SVN for version control. ant for build scripts (although I'm trying to get people to use Maven) TextPad for pretty much any other non-java editing. As for testing/debugging, do interns count?
I must be missing something(I am a novice), but why not include newline escape characters (\n)if you need to print on multiple lines
Mainly just RAD. Avoid at all cost. And I found this thread.
Couldn't agree more. It pains me to use it. The powers at be in my office just cram all things IBM down our throats. It sucks.
Yea, I'm in the same situation as you. Though I can live with RAD/RSA and WAS, I can't seem to figure out why anyone would ever pay a dime for them (especially with tools available like NetBeans, MyEclipse, Glassfish, etc). Though I think WebSphere Portal Server and Portlet Factory are the "worst pieces of software ever created"
They sell, someone wants, someone buys. I don't think it works the other way around sometimes.
Loading the image in "paintComponent" doesn't seem right to me ;) It will try to load the image every time the panel redraws. (Which may only be once, but still..)
I agree, it should be done during a constructor or something.
+1 for the TextPad
Effective Java is such a great book.
Holy crap, the cheapest license for RAD is $2400. I've never used it before (or even heard about it). Wow. I'll stick with my free open source Eclipse Ganymede for Java EE.
Thanks for posting this, I found it very useful.
I think JavaWorld is more useful compared to OnJava. OnJava was a great resource for some time but these days it is pretty much void of anything worthy.
Eclipse Ganymede, subclipse or tortoise, mylyn soon, bugzilla, m2eclipse, hudson continuous integration, textmate 
OK, that I didn't mean for that to blog entry get out yet. Anyone have other suggestions. Also, I am dropping 'Enterprise' from the title. That gst bot is fast. I just wrote that a couple of hours ago. I upmodded...bias decision.
Even better: learn how to use Make or a Make-like tool. For example, Ant is a Java-based one that seems to be nice for Java projects. It actually has knowledge of how things like javac and junit work, so it'll handle classpaths for you and you can stop using that bloated IDE for project management and unit testing.
I'm looking for reliable Java hosting that allows me to restart the server when I like. I would like the service to have a cheap option I could start with, but allows me to transition to dedicated host or even cloud hosting as the site sees more traffic. Any suggestions?
Reliable...RESTART...cheap (shared)...suggestions? Nope. If the service is cheap, it's shared. If you can restart the server any time you want, so can anyone else that you share the host with. This, by definition, makes the service unreliable. Such a service would be so unreliable, it would be impractical to offer commercially. Am I wrong? Are you suggesting that each customer gets their own tomcat instance on the same host? Is that possible? I honestly don't know.
A [VPS](http://en.wikipedia.org/wiki/Virtual_private_server) maybe? Multiple users on the same machine each run their own OS under virtualisation. The VPS provider would usually give you options about how much of the RAM or CPU you can use, and you should be able to request more resources as you need them. I've heard good things about [Linode](http://www.linode.com/), but I've never personally used anything like it.
You may try slicehost.com, you get root on a linux machine. I've never hosted a java app there, but my LAMP-ish stack is just fantastic there. The only thing you may run into is RAM limitations. Check the forums at slicehost for java and I'm sure you'll get some help right away. 
Agreed. As tch pointed out, slicehost is about $20 a month for a machine with 256 MB of RAM. You will have to install the software yourself on top of a fresh OS installation (Tomcat, Java), but Slicehost has good articles and Ubuntu can make it easy to download those packages.
I use Daily Razor and like them a lot - their service is great and there prices are quite reasonable. There's some negative stuff about them out there when it comes to canceling your account, though (still insisting that you pay them after you've canceled your account). I obviously can't speak to that because I haven't tried to cancel anything with them. 
I think I'll start with a VPS at about $20/month. There seem to be a good number of reliable ISPs about there that offer that, with the ability to upgrade to a dedicated server or even multiple servers with load balancing if I need it.
Pick any virtual host. I used linode.com 
EC2
The guys buying are the same as the guys using. So they aren't buying for the correct reasons most likely.
I think the key thing here is that Sun is offloading more and more of Java to the Open Source community as the company spirals the drain. I think any real innovation in Java will have to come from others like IBM and Eclipse with SWT or Google with GWT. It would be nice to see the ASF tackle a WT.
Why does everyone attempt to fix something that is too complex with more complexity. WebKit? Huh. No, the problem with Swing is that it is too complicated. SWT isn't too far behind, but at least it is consistent and there are many powerful widgets. Swing should simplify, simplify. Same powerful widgets but with less code. If it takes 300 lines of Swing code to create the simplest application, then that is not simple. Also, I don't know if this is the correct term, but Swing should have a plug and play API. Kind of like a lot of Java web frameworks. I mean, if you want to add a text area, you should be able to do that with the creation of one object and then attach it to another window. And then if you want some other craptaciular higher level library, create another name for it. JavaFXHippieSwinging or something, go right ahead, but keep it separate from the core Swing API. Also, get rid of that stupid default swing look and feel. I have not seen a custom interface like that for any GUI api in my entire life. Just use the default look and feel.
The theory behind the Metal L&amp;F is that it is consistent across platforms. Of course the problem is that it is consistently ugly. :-P
A GUI using HTML and WebKit? Why not use [XUL](http://xul.sourceforge.net/)? [Thinlet](http://www.thinlet.com/)? [SWIXML](http://www.swixml.org/)?
&gt; No, the problem with Swing is that it is too complicated. Compared to what other framework? MFC? Qt? WinForms? Now I agree that Swing has some limitations and weaknesses and extending it in certain ways is very complicated and difficult but it is not more complicated compared to the other GUI frameworks I have seen. It might be possible to further simplify Swing but that is not going to make Swing better than Cocoa, etc. Swing has a lot of potential but it is half baked just like so many other Java APIs and libraries. It's almost 10 years old and we don't have a decent standard HTML viewer in Swing yet (hopefully JWebPane is going to change that though). Just the old crap JTextPane/JEditrPane that can barely render HTML 3.x.
Ideally, I mean complicated in a bunch of boilerplate code that doesn't really do anything. I want more complex widgets like with SWT, but normally what it takes to get there isn't always pretty.
Thanks for the comments. In a more developed program, true, I wouldn't want to reload the image every time paintComponent() gets called. When I create my examples I try to cut out every line I possibly can to keep the program as short and focused as possible. I also follow up with better code, once an idea has been introduced, and that will be happening in the next example where I'll be using Java2D to rotate the image. One piece at a time... ;)
Yay! Fuck closures. Some of the proposals were truly appalling. The only good closure proposal was the [No Closures Prototype](http://weblogs.java.net/blog/brucechapman/archive/2008/03/anouncement_no.html).
I'm happy about some of this. Particularly, I hate operator overloading. It is just asking for trouble. So I'm glad it is not happening. Also I find closures to be ugly (of course I'm used to them in JavaScript, maybe other languages are better). The strings in switch, the constructor generics inference, and the exception enhancements are fantastic news. But I am disappointed that we aren't getting properties. 
Strings in switch is nice, but not that exciting. Generics inference is not that big of a deal (as the IDE generally handles this). I'm more interested in the exception enhancements and the null handling, as it reduces the amount of boilerplate code to check for exceptional cases. Not that much of a radical change. The only benefit I see is a few less bytes stored in source control. Aside from the language changes, the rest seems pretty cool. The JVM is still alive.
I just am the type likes my code to look pretty. :-P
well, that was worthless.
ant + ivy &gt; maven
Why ? This is Java 101 stuff
Nice of them to provide a URL where you can actually see it in action... useless morans. http://www.ptolemy3d.org/
They close the thread. By a Sun engineer, no less.
I've changed the program as you've suggested. Thanks, I like it better this way overall though I feel it "showcases" the loading and drawing a little less in the program than it did in the original version.
A very simple example of rotating an image with Java.
I've been using [BeanShell](http://www.beanshell.org/) for doing scripting in Java, and it's worked very well for me. What advantages does Groovy have over BeanShell?
Ant can be extended with custom tasks in Java or any language that support for [Apache BSF](http://jakarta.apache.org/bsf/) or [JSR 223](https://scripting.dev.java.net/), and JDK ships with Rhino so you don't need to install anything to get JavaScript support. See script, scriptdef, macrodef and subant tasks.
A key one that was left off the list is the [Kodkod constraint solver](http://alloy.mit.edu/kodkod/).
So that's the sound of one hand clapping.
Am I the only person here who actually likes Swing? I expect many "yes" answers to that. :) I know it's cumbersome, but it is quite powerful and it has everything I'd want in a GUI. And with [Pluggable Look and Feels](http://www.javootoo.com/) you can improve the look of it.
his comment (2nd): &gt; But the reflection part could be in a completely different class and would still impact your code.
Dunno, if it wasn't so slow I might like it more. Also, I don't understand why they don't use a native look and feel as default; I guess it creates brand identity, but when your brand identity is that your apps are ugly, I'm not sure that that's a good thing. But it's not horrible, just sometimes doesn't work as you expect it to. I remember in high school we had to make a Swing app that would graphically display a binary search tree, with a max of 5 rows or so, and when you clicked on a node it was supposed to redraw using that node as the head. I did mine by creating my own component iirc and overriding the paint method as well as with buttons (I was bored so I did it both ways) but my friend was trying to get his to work with buttons except his buttons wouldn't appear except when you hovered over them. That kind of stuff just should not happen. That said, when done well I think Swing is pretty good in theory. It's just hard to get it right.
Simply a demonstration of terrible code!
I liked Swing (I was on one project that used it, years ago). People who say Swing is slow usually have no idea how to farm out their non-UI work to worker threads.
only worthwhile if you are doing Java development and maybe hyping OO development. But, still a good read.
and if you have the password...
Swing is actually a rather usable GUI framework, but they take platform-indepence way too seriously. So you have to spend a lot of repetitive effort to get some basic things working. Also, the sooner GridBagLayout dies, the better.
Downvoted for no password. &gt;The owner of this document has chosen for this document to be secret -- only people with the correct password can view it. You must contact the owner of the document and ask for the secret URL to view the document.
stinks we wont be seeing the source, but I wish the guy luck monetizing it.
He would probably be better off selling the libraries and components than the media player.
Wow, thanks for the link! It looks really cool!
Again, Apache is having a little shit fit over Harmony. Way to go Apache; being pissy about something that isn't even part of what people were voting on really helps us all out. As far as Springsource, I am sure that they are really smart guys over there, but what do you really expect from a group who wanted nothing to do with standards from the get go.
I know the economy is bad and all, but I can't imagine you would charge people for that.
I subscribe to some RSS feeds from [JavaWorld](http://www.javaworld.com/). They have good commentary and tutorials.
The [dzone java category](http://www.dzone.com/links/tag/java.html) is pretty good for links. 
Alex Miller's [Java 7 Links](http://java7.tumblr.com/)
http://java.alltop.com/
Even though it has been a while since it has been updated: http://www.bileblog.org The Server Side is declining lately, but the forums can turn into quite a shit show at times. Java.net has some good articles too. DZone is ok it you only look at the Java stuff, otherwise is is consistently full of Ruby retards
The thing with Java platforms/frameworks/... is that they're always so complex. I know the reason behind it (i.e. enterprise environments really do have quite different requirements), but I always find it a bit depressing when, after reading the description of a Java framework/platform/..., I still have close to no idea what it does.
blah, blah, jibberish.
See also: http://noisyheads.wordpress.com/2009/03/07/grails_1_1/ 
Tapestry is a horrible excuse for a project. It is really easy to to push new versions when you completely break any backward compatibility .... must be nice.
It's ugly as hell, but there is nothing that prevents you from using annotations from as many frameworks as you like on the same class. I would rather go to domain interfaces with technology specific annotations, but that's just a matter of taste...
I'm new to Java (but not new to programming). I understand the usefulness of strong typing in most situations but I can't help wondering why it's necessary to provide explicit typecasts in the following scenario. Consider something like the following (my apologies, I don't know how to do indentation on this site) HashMap dictionary = new HashMap(); dictionary.put("somename", "somevalue"); String foo = (String)dictionary.get("somename"); Now, I argue that in this case, it is totally useless to be required to prefix the RHS with "(String)" and it should be ok to just write String foo = dictionary.get("somename"); If you use the wrong cast, you'll get a runtime exception and you have no choice (as far as I can tell) but to use the same typecast as the type on the LHS. If you in fact declare the LHS with a different type, you still have to use that same (different!) type on the RHS and then you'll just get the runtime exception because the RHS does in fact return a String object. Some of my colleagues claim that an explicit typecast makes it clear what you're doing. However, I don't buy that argument because (for example) if you use generics for your declaration of the HashMap, then you don't need the explicit typecast but your assignment is still as clear (or unclear) as it was before. If you do indeed care about that low-level view, then the required type of the RHS is always clear from the LHS. Obviously, if there's no LHS, the typecast is necessary so that the proper methods are accessible (although of course one is still better off with generics) Personally I think it's better to define a Dictionary class with the appropriate semantics so instead of "put" and "get", you have "setValueForKey" and "getValueForKey" at which point there's really no need to think in terms of implementation at all, but that's a whole different discussion. Any (non-religious based) thoughts on this?
Since Java 5 there have been generics so instead of using a raw HashMap as in your example you would type HashMap&lt;String, String&gt; m = new HashMap&lt;String, String&gt;(); m.put("x","y"); String foo = m.get("x"); 
I would want Java to have type inference with optional type annotations, like Haskell. The example could then become: import HashMap m = new(); m.put("x","y"); foo = m.get("x"); An IDE would easily deduce that the only possible type assignment is that m is a HashMap&lt;String,String&gt;, and consequently foo is a String. If you wanted to, you could write String foo = m.get("x"); and the compiler would respect that annotation, taking the appropriate action if you write UnicodeString instead, and failing if you write Float instead. 
Actually, I find the style in which Java example are presented from Sun to be quite awful --- the main culprits being the intermixing of algorithms with error handling, returning from the middle of methods and the brain-dead indentation style that's left over from the days in which you couldn't have more than 80 characters in a row.
Yes, I'm certain my original post indicated that this wasn't an issue if you use generics. I'm discussing the situation in the context where generics can't be used (which is much of the time because a lot of code has to support java 1.4)
Yes, this is exactly my thinking --- and my question was really wondering why Java didn't do this automatically from the beginning...it seems a reasonable thing to do.
I don't know, maybe I'm doing something wrong, but isn't it an attempt to bring C/C++ formatting into Java world?
Forgot to mention, I'm a competent Java programmer.
You an use AppFuse for development. It is designed to speed up Java web development using open-source tools like Spring, Hibernate, Maven.. There are some [Tutorials](http://appfuse.org/display/APF/Tutorials) on the site.
Maybe it will end the bitter infighting between the NetBeans and Eclipse factions.
I just thought that it would be cool if RedHat bought Sun. They already put a ton of Java work into OpenJDK.
I didn't read this before posting it. Now that I've read it I'm not awfully happy with it, the article doesn't explain what monads are and it doesn't demonstrate any resemblance of them to IOC. IOC seems to me to be more similar to partial application. 
And JRuby presumably? And Clojure and Scala?
Aren't these the standard sandboxing security rules that you would apply to most shared Java hosting environments. I want to google to protect from writing to the file system. 
&gt;Applications may not open sockets does it mean I cannot create a URLConnection Object?
considering that Java is only an experimental feature now..and Python is king in the AppEngine...i'm no so sure
Do you have to use eclipse for GAE?
More shit to learn.
Nothing, because the availability of java versions actually installed at customers will mean that the best we can hope for is still java 5.
I don't get why people are so obsessed with such a dangerous feature just so they can reduce their code by a couple of characters. 
I dont' understand what the issue is with Google creating a safe sandbox environment for developers to work friendly with 10,000+ other developers and projects. 
Fuck that site, for it does not respect my back button.
Seems more like a call for help than a challenge.
http://snipt.org/TL
Nope, I have a solution, but I am curious how others would solve this. And it was rather fun to code
http://gist.github.com/97038
&gt; the declarative aspect (concentrate on the what and not on the how) I always laugh my ass off when people bring this point up. It sounds good, on paper. But then you start to think about it a little harder and you realize that we already have a language that is purely "what" and says nothing about "how". That language is SQL. And everyone *hates* it. It's dense and cryptic when it's not being overly verbose and annoying. And performance? Forget it. You pay $100k/yr for an Oracle license so you can have the best query optimizer in the biz, and THE DAMN THING PICKS THE WRONG INDEXES, your queries crawl, and you end up having to dig down into the "how" layer anyway, manually hinting the damn DBMS so it'll use the right ones. Everyone wants a language that DWIM. But it's never going to happen. Even other people have trouble guessing WYM. You can forget about any computer based on current technology doing it. Like [the XKCD comic says](http://www.xkcd.com/568/) - no programming language can save you from your own mental imprecision and abstractional ambiguity.
.NET is also doing all these things. What's new?
1 Immutable classes are thread safe 2 Java is bad because it is not immutable by default 3 ... 4. prepare to migrate!! Lame argument. It is easy to build immutable classes in java whenever you need them. Downvoted.
I'm entertained by the comments at the top about writing x=x+1 In the Algol/Pascal world, one writes x := x + 1 and reads it as (and thinks about it as) "x is assigned x + 1" thereby making it very clear that it IS an assignment to a variable, and not a statement about equality.
For a long time I've been an advocate of throwing out "=" entirely, replacing it with "&lt;-" for assignment and "==" for comparison. I.e.: i &lt;- i + 1; // i gets i + 1 i == 7; // is i equal to 7? i = 7; // ILLEGAL SYNTAX; COMPILE-TIME ERROR
Indeed, too much abstraction makes it hard to debug performance problems.
To be fully clear - I'm not against the idea of more DWIM-y languages. I love perl, for example. I'm just skeptical that the DWIM thing is this miracle solution to all our problems. SQL is a great example of how badly you can screw up with DWIM. Brooks told us that there were no silver bullets, but for some reason we keep proclaiming new fad X to be the silver bullet. Before DWIM it Agile. Before Agile it was OO. Before OO it was... etc.
&gt;Lame argument**:** It is easy to build immutable classes in java whenever you need them. Fixed. That something *can* be done in a language does not mean the language makes it easy (both in implementation and performance) to do. Sometimes [a different language](http://clojure.org/) is the right choice.
I guess I don't get the point. Perhaps = vs == is confusing for people totally new to programming, but after that I didn't think it was an issue.
Next in v3.2, JDBC drivers will be restricted to Oracle databases.
Which means we'll have it on the Mac some time in 2015!
ha - agreed :(
Since when was java a poor choice for web development? &lt;edit&gt; Oops posted to soon - i see what the article is talking about now. My bad....my bad &lt;/edit&gt;
I think VirtualBox is a great item for Oracle and previously for Sun. The future of enterprise computing is virtualization. For Oracle this could mean people buying a pre-installed / pre-configured Oracle stack VM that they can run on existing infrastructure with no overhead. With MS pushing Virtual PC and IBM behind Xen, Oracle needs their own solution or risks losing their full-stack. And in the worse case... people may pick the entire MS stack instead of the Oracle one.
Apart from some general things the article teaches old-style Spring MVC controllers which are about to become deprecated and are generally inferior / less flexible than the new annotation based MVC controllers. Do yourself a favour and learn how to use the new Spring 2.5+ way of doing controllers. Links: [Annotated WebMVC controllers in Spring 2.5](http://blog.springsource.com/2007/11/14/annotated-web-mvc-controllers-in-spring-25/) [Spring 2.5 WebMVC Dokumentation](http://static.springframework.org/spring/docs/2.5.x/reference/mvc.html)
What if it wasn't loaded from a jar file, NPE?
I hope not.
From the post: "Idea: Maybe one day programming languages will have unit tests as part of interface and validate each instance that implements this interface with them. " Yeah, that'd be awesome.
But is it more *than* a list of methods?
In fact - no. But actually most of the methods have the notation of there implementation
But do they have notation of *their* implementation?
Just comments in Java.
Not to start a holywar, but just as a data point: The other day I had to profile exactly same same code implemented in C++ and Java. The code was for some medium-weight URL processing, so lot of string manipulations, table look ups and such, but no external OS calls. Result: Java was 10x slower (250μs vs 25μs). Essentially, it took about same time to generate a single link on Java and output a full page on C++ PS: I couldn't see any obvious hotspots, the slowdown was surprisingly evenly spread. Worse yet, Java performance seems to be very dependent on statement ordering. Just moving a line around could shave or add a dozen μs.
Java strings are painfully slow compared to STL strings. Edit: I just read your post. 250us sounds like it could very likely have just been garbage collection and vm overhead. Java makes absolutely no guarantees about anything resembling real time, and you can expect to see that strongly influence results that are expected to be short.
I wouldn't be surprised if Perl is faster than C++/STL at string manipulation.
We're developing an app that will, 99.99% of the time (that the computer is running), be the only app requiring a desktop environment. We've chosen [Ubuntu](https://help.ubuntu.com/community/Installation/MinimalCD) as the underlying OS, but need guidance on how to configure the DE to run as efficiently as possible - in other words, the DE is there basically to support the one app. We have developed the app's GUI from the ground up and are using Graphics2D exclusively to generate and manage the component visuals, drawn onto a JPanel inside a JFrame - which is full screen maximized, undecorated and always on top. Someone mentioned fullscreen Graphics2D as an alternative which may negate the necessity for a DE - but we're too far into the dev proc, and not knowledgeable enough about the approach, to just 'try it to see if it works'. We'll have to stick with what we decide. Is it worthwhile to investigate fullscreen g2d, or should we rather spend time looking into a minimalistic DE? Either way, advice is appreciated.
If I remember correctly, it should be invisible to the program whether full screen or a panel is being used. Switching to full screen shouldn't require a full rewrite. A good approach might be to attempt fullscreen, if it isn't supported on that machine then fall back onto the JFrame. Also I'm a little confused as to where your app stands. Do you plan on distributing it with Ubuntu? If all the machines are going to just be running this 1 program, why didn't you go with a lighter OS? Regardless Gnome is a heavyweight compared to all else, you should be looking for something lighter like XFCE or fluxbox or anything other than Gnome/KDE.
We chose Ubuntu simply because the client, being a long-time supporter of the *other* OS, is somewhat reluctant to go the linux route and hearing the name 'Ubuntu' makes them feel a lot less edgy. We've gone with the minimal install for this OS (as per the link in my OP), which will run little more than 1 Java app and MySQL, possibly Tomcat as well. Thanks, the XFCE/Fluxbox suggestion you made is precisely what I'm after - but may still need some help in future with config. That said, I have to ask if I understand the fullscreen Java2D correctly: It uses the underlying graphics hardware to draw to the screen, and does not require any DE whatsoever? It only works when there is h/w that supports fullscreen graphics?
Well the DE still hangs around, but the OS won't give it as high of a priority if there is a full screen program running. Yes usually fullscreen rendering can be quickly off loaded to the graphics card giving better performances. I'm pretty sure that this behavior can be emulated by software, but you obviously won't get the performance boost. So I'm not exactly sure what will cause the fullscreen to fail, just that its not a 100% given. But since you're pretty much in control of the environment you should have pretty good idea of how well the fullscreen is going to work. So now here comes another question. If all of the machines are going to have Ubuntu and performance is such an issue, why pick java?
What an excellent resource - thanks for posting this.
Performance is not really such an issue. The computer itself, an industrial touchscreen, is punchy enough to sustain the full stock-standard desktop release of Ubuntu, as well as our software, plus the blahblah it requires, without the fear of lock-ups or performance degradation. The optimization I'm after comes from the fact that I'm a geek, and I don't like doing it this way when I know it can be done better. Also, it's a good opportunity to learn about these issues because it may come in handy one day. As for Java, I'm really surprised at this question. Java is an obvious choice - it's fast, it's stable, it's feature-rich (our app ties together a bunch of different technologies and offers interoperability) and it's something we, as developers, are extremely productive with. We write software for (amongst others) industrial applications and have found that Java performs exceptionally well even under very 'harsh' circumstances and limited resources. 
Ah OK. It sounded like a make or break situation. It sounds like removing gnome won't make much of a difference if the machines are already capable of running gnome. The reason that I questioned java was because I thought you were on a tight performance budget. If all of the machines were on the same platform then a lower level language approach (Something that didn't have to sit on a heavy VM) might have been a better answer. But since that's not the case... enjoy your java!
Hey, I wrote it, glad you like it. I'm going to release the source code this week and start investing more time in it (I just have to decide which license to use). I'm sick of writing books that get signed, sealed, and delivered only to be printed and distributed to a few thousand people. I also think that writing has yet to benefit from real open source involvement.
If you "really" want to make it more convenient, make a PDF version so people can download the whole thing in one shot. I've already replaced some of my own code with your examples!
I will get the PDF version up and running ASAP. I just made the GitHub repository for the book public and changed the license to CC BY-ND-NC 3.0 : http://tr.im/l5P5 I'm going to make a mailing list at Codehaus and start a JIRA project for this thing. 
Assuming you meant scriptletless, no you are not being hard on your team. Scriptlets are evil ;) and I've demanded the removal of them on all projects I've worked on.
Yea, I meant scriptlet-less doh! I'm also requiring the canonical strict XML for too. &lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;jsp:root xmlns:jsp="http://java.sun.com/JSP/Page" xmlns="http://www.w3.org/1999/xhtml" xmlns:c="http://java.sun.com/jsp/jstl/core" version="2.0"&gt; &lt;/jsp:root&gt;
No. I would also extend that to only use tags to render data, not to query it in any way. no &lt;sql:query/&gt; or similar nonsense. healthy amount of template composition / re-use.
if anyone used a &lt;sql:query... I'd probably chase them down with a big stick. I know that kind of thing was added to lure ASP and PHP devs but, it is the worst kind of evil
Depends, are you using struts 1.x and telling them they can only use: logic:present / logic:notPresnet bullshit moron tags? Then maybe so, otherwise nah.
simple case checks, for each etc. try to build resuable components. I generally avoid old crap like struts 1.x
Not at all, as long as you have a decent tag library and/or framework to work with.
How do you define scriptlet-less? &lt;% ... %&gt; is a scriptlet But what about &lt;%= ... %&gt; ? 
both
I'm actually against using XHTML, and for HTML 4.01 Strict. (true) XHTML is technically not supported under most browsers, and HTML 4.01 Strict provides the best chance of cross browser compatability.
No, you're being hard on them by using JSP. Assuming you're forced at gunpoint to use JSP, JSTL makes scriptlets unnecessary.
He's had years to try! It's a bit late now!
The only thing "Java" will have to do with the World' Largest App Store is be a historical footnote about where the "J" in JVM originated. I'm coding in Java now and it is way too painful in comparison to anything else, including the other languages that run on the JVM.
I restrict myself to Java EL, JSTL, and custom tags. I also minimize flow control statements such as c:if. My general rule is that's it's OK to use flow control statements, but if you need to use the same code twice it should be put into a custom tag.
So, anybody use this? How is it different from GWT, Apache Wicket and Echo2? Any particular advantages to using it?
http://vaadin.com/comparison has some of the basic comparison stuff. The biggest difference is that everything is done on the server (and generated into javascript etc, using GWT actually) which makes it safe against many of the common scripting and injection-attacks. You can also add own GWT-stuff where needed if necessary.
&gt; Is it that the gc runs in a separate thread so printing out that line 10 times gives the gc enough time to finish? I really think you have the right answer there. Has the author [used javap to disassemble his code and get the JVM bytecodes](http://www.ibm.com/developerworks/ibm/library/it-haggar_bytecode/) and analyze them? Cuz I bet you there's at least one intervening instruction. And that's enough to allow the GC to run.
If you replace the loop in the given code with for(int i = 0; i &lt; 0; i++); it still works. However if you replace the loop with 10 calls to System.out.println("whatever"); it will crash with the same out of memory exception. This lead me to believe that there is something going on behind the scenes when you put in a for loop. Then I tried getting rid of the loop and replacing it just with int i = 0;, and it worked perfectly. There must be something going on behind the scenes with the garbage collector when the variable is initialized. Hopefully someone on here knows more about the GC than I do and can give a real explanation of what is going on.
Nope. Taking Thread.sleep(1000) between allocations still results in an OutOfMemory Exception. Suggesting GC to run before also results in the OutOfMemory.
It would seem that i must be a local variable as well. Promoting i to a field, still throws an OutOfMemory Exception. Upon further inspection of the generated bytecode, it appears that the large array and local variable are stored in f()'s "Frame". It would seem that the garbage collector doesn't clear out things that are referenced in the "frame", but the compiler is smart enough to reuse the place in the "frame" for the new local variable. This really drives the authors point home that you should null out local variables after you are done. I know some of you are saying what about the scope, but it appears that all local variables in a method are in the same frame. According to Sun.
This is a good explanation of what's going on. A subtle bug for sure. Personally, I have never experienced it. Why? Because I never use { } inside of methods, except when declaring the usual control structures and filling in interface methods. Why anyone would ever create an inner level of scope in a method is beyond me. Here is the way I would write the program: public class JavaMemoryPuzzlePolite { private final int dataSize = (int) (Runtime.getRuntime().maxMemory() * 0.6); public void f() { g(); byte[] data2 = new byte[dataSize]; } private void g() { byte [] data = new byte[dataSize]; } public static void main(String[] args) { JavaMemoryPuzzlePolite jmp = new JavaMemoryPuzzlePolite(); jmp.f(); System.out.println("No OutOfMemoryError"); } } 
The following represents the bytecode of f() that works in a simplified version of JavaMemoryPuzzlePolite: 0: aload\_0 1: getfield \#24; //Field dataSize:I 4: newarray byte 6: astore\_1 7: iconst\_0 8: istore\_1 9: aload\_0 10: getfield \#24; //Field dataSize:I 13: newarray byte 15: astore\_2 16: return This is the non-working bytecode in JavaMemoryPuzzle: 0: aload\_0 1: getfield \#24; //Field dataSize:I 4: newarray byte 6: astore\_1 7: aload\_0 8: getfield \#24; //Field dataSize:I 11: newarray byte 13: astore\_1 14: return The difference is that in the working version the value for i is stored over the data variable. This allows the memory pointed to by data to be garbage collected. In the non-working version the opcode newarray (11) is executed before the reference is overwritten (13). Since the data reference still exists when newarray is called, the memory cannot be garbage collected. Credit to chrisparker2000 for pointing this out.
Huh, weird. Is println() allocating memory and releasing it, causing a GC run?
Programming languages are like the sewer system. If you're aware they exist you have a problem. Not for Sun. java java java java. What's next. The C store for all the applications written in C..... How about the Ruby store of the Python-mart? 
Well, Java is a platform not just a programming language. Just like android is an OS and virtual machine (ironically that compiles with a Java like language) and they have their appstore. Also, Sun mentions Java based applications as well as JavaFX. Calling it just Sun's Appstore is not very specific because I am sure they intended for the apps to run for the Java virtual machine.
I sometimes create inner scopes to constrain variable scoping when I plan to reuse the variable names later.
Code smell. Extract method.
People may come up with urban legends as to WHY Java is so much slower than C++, such as assuming it's because of garbage collection, or because of this or that... but it certainly isn't an urban legend that Java is significantly slower than C++. The fact that Java is slower than C++ is based mostly on experience. Experience from developers who work in both languages, and experience using software written in Java. But performance isn't everything, it's not even the most important metric in most cases.
They have other things two.
I thought the guy *had* to be joking.
It has been renamed J2EE 6. Just Kidding.
"Rod Johnson." Heh.
Quite a cool tool. It's unfortunate there's no support for multiple source files. Seems very useful for introductory programming courses where your code remains very simple. i.e. keeping everything in main
Java development definitely simplifies creation for a developer on smaller projects. I can program and download my own Java games for my blackberry without any special "Dev" phone. As more powerful hardware becomes cheaper I think we will start to see Java platforms in more and more devices
Thank you for this excellent collection. I spend quite some time looking all over for the tidbits you've provided in a convenient format
It was interesting until I tried to do something somewhat non trivial
I have used JRat while searching for good free Java profiling tools. I'd love to be able to find something that can do what JProfiler does, but that's serious dreaming. JRat hasn't had an update in 2 years. It was OK for profiling a command line app that you want 100% profiled. I believe you couldn't start/stop profiling during a run so it was largely useless for profiling a Tomcat web app, for example, since you'll get all the tomcat startup code profiled. The NetBeans profiler was spun off into a standalone profiler/memory watcher called [VisualVM](https://visualvm.dev.java.net/), however [it only profiles Java 6 code](https://visualvm.dev.java.net/features.html#feature_matrix). It's nice for Java 6 code, but still pales compared to JProfiler. One free profiler that I hadn't heard much about, but that I found useful was the [Java Interactive Profiler](http://jiprof.sourceforge.net/). It is interactive in the sense that you load it into the JVM of the target app and then can start and stop it with a command line app. In this way it is useful for profiling a Tomcat web app, even a Java 5 one. It also has a minimal GUI for viewing the results. 
Galileo! Galileo!
Galileo figaro magnificoooooooooooooo
OK, I suggest no more Eclipse versions. Until they fix the major bugs.
It works fine for me. *shrug*
You could always switch to NetBeans or IntelliJ IDEA. NetBeans 6.7 comes out this month, and IntelliJ IDEA 9 is in EAP (assuming you have a license for 8). Personally, I rank the IDEs from best to worst: IntelliJ IDEA, NetBeans, Eclipse (and IDEs based on it), JDeveloper
I'm just a poor boy, nobody loves me...
What are the major bugs?
I'm currently on Windows 7, and it's a disaster. I can't install plugins, can't create projects. I can't really think of any good reasons why haven't they tested it on W7. :| Oh, and the error messages are still horrible.
He's just a poor boy, from a poor family!
I'll stick to Genymede for now
spare him his life, from this monstruosity
Java Server Faces.noooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
So, what is the conclusion?
There is none in terms of Android. He makes some obscure claim that handset manufacturer's are just "hacking" phones together...which seems odd, and that somehow this is going to make all Android phones incompatible with each other magically. And then he says, well, it could be awesome or it could be terrible....wtf?? Honestly it sounds like he's pissed at Google for not using java straight up or something. Also, the title is super misleading, out of the entire 3 page article he talks about android for all of 2 paragraphs.
Why would it be?
Great! now my apps can be as slow as my IDE!
&gt; Great! now my apps can be as slow as my IDE! That's what I love about redditors, always enthusiastically embracing new and better technology ;)
glassfish is slow as fuck.
Glassfish is a rocket compared to BEA
Mamaaaah! Hoo hoo hoo hoo. Didn't mean to make you cry
Perhaps, but still is a reference implementation. I like tomcat myself.
What's wrong with an RI? Tomcat used to be an RI too.
It also has a faster HTTP engine than Apache. Regardless, Tomcat is not a JEE container
What is it then? I'm not disagreeing with you. A JEE container would support EJBs and stuff that tomcat doesn't ? Is this why weblogic and netsphere are so popular?
Great -- now we don't have to waste any $$ training these 65 year old COBOL dinosaurs how to use Java! Though it was entertaining watching them trying to understand OO.
Tomcat is a servlet container. To be a JEE app server you need to implement the entire JEE spec (http://jcp.org/en/jsr/detail?id=244) EJBs, JMS etc. That is why people use Weblogic and WebSphere
And Glassfish, Geronimo .... list goes on
&gt; It is easy to build immutable classes in java whenever you need them. [No it isn't.](http://functionaljava.org/).
Careful. I'm in my 30's, and was disciplined in OO dogma from the start of my career. I've probably used every GoF pattern, and can create glorious UML class diagrams with the best of them. Today I struggle with all the up-and-coming functional languages (although I *am* trying to learn). I'm sure the young punks are laughing at me and my quaint notions of classes and objects and noun-centric development. Someday it will happen to you, too.
&gt;Someday it will happen to you, too. LOL too late, I'm in my late 20's and my head already aches when I try to figure out functional languages. I just haven't had a young punk break my balls about it yet. I've yet to see functional languages in my industry -- tho i'm sure it's only a matter of time.
This article was nonsense. You just cherry picked pieces of conversations and strung them together to make your own argument. Absolute garbage. Why does Java need replacing in the first place ? 
No, down with Scala, up with Groovy!
This is pretty good: http://www.infoq.com/presentations/SpringOne-Keynote-Rod-Johnson He talks about Groovy and Grails and also about the future of Java and JVM languages.
Even the creator of Groovy thinks Scala is the future (RTFA)
I'd love to see a replacement for Java. Not because I don't like Java, but because improving technology is a worthy goal. Sadly, I don't think Scala is it - at least not yet. I downloaded it, along with the Eclipse integration, and was unable to get even the simplest example work. If switching to Scala means I have to give up Eclipse, I'm going to give it a miss for the time being. I know this is unfair criticism - a bug in the Eclipse integration is hardly a problem with the language itself. But on the other hand, this shows a carelessness that makes me nervous about what else might be lurking in there. Sort of when you buy a new gadget, only to discover that the manual is written in unintelligible Engrish.
You are kidding right ? Rod Johnson ? Mr. I am too good for standards. Yeah that is exactly who I am going to listen to in regards to the future of the language.
Well I didn't agree with him on everything, especially that vendors are required for a smooth IDE and open source software can't accomplish it.
I can see oracle is starting to have an influence on sun now, with their version numbers if nothing else...
As opposed to [Restlets](http://www.restlet.org/)?
I'm pretty sure that a thin layer of rubber is often times the only thing that prevents premature ejaculation from running its course to the final evil.
&gt;But how likely is it, that your project will switch from a relational database to flat file? It did happen to us. We did not even use DAOs and it did not have much impact on the effort. When you change the backend, you often change a few features and business rules along the way and make other big architectural changes that kind of make the original constraints somewhat irrelevant. Nevertheless the whole J2EE stack is over designed.
Can't get much easier than this. I would love to see any Springtards comment on this.
Stripes Version: public MyManager { public void doSomething() {} } import net.sourceforge.stripes.action.*; public MyAction extends ActionBean { @SpringBean MyManager manager; @DefaultHandler public Resolution execute() { manager.doSomething(); return null; } } &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd"&gt; &lt;beans&gt; &lt;bean name="manager" class="MyManager"/&gt; &lt;/beans&gt;
Why don't you consider EJB an external dependency? BTW, I'm a StripesTard.
Wow, this is great! It'll only take 5 years before any enterprise production environment will support this. Ughhh....
Why did you link to the blog instead of to the original material?
Hi Stransky. It is already supported by: Glassfish v1, 2 and 3, JBoss 4+, SAP, WLS 9.0 and even websphere 6.1 :-). What you are using? JDK 1.2? :-)
Is it less code and less external dependencies?
EJB 3.0 are included on every appserver. Even Websphere supports this. They are part of Java EE 5/6 (very much like Servlets), so no additional JARs have to be deployed.
You have to download Java EE instead of regular Java.
It looks like you could use http://www.silvermindsoftware.com/stripes/ and then add the @SpringManaged annotation and remove the XML file.
But if you are running on serverside you will have to download something. 
You should integrate this wisdom into your next architecture document :-)
J2EE - for sure. Java EE 5/6 are extremely lean.
The idea that application containers suddenly qualify for being "lean" because their configuration got a lot less verbose is really funny. 
I can't read it for the grammar.
Interesting: how would you define the term "lean"?
I believe the man is a native speaker of German. I have no problem reading it; he writes better than many native English speakers. If you have problems reading it, perhaps the difficulty lies with you.
@3333333 its true - I'm native German - you are right. I hacked this post in Starbucks in few minutes... I guess my grammar is not comparable with Joseph Konrad :-). I just summarized the meeting....
Just try with the content and skip the grammar :-).
No I don't, it is like saying Servlets and JSPs are an external dependency. To even get this working in Stripes, you need Stripes and Spring. Then you probably need another framework for persistence, and another framework for WS, etc. By using the JEE spec, you actually get a fully certified and supported stack with no need for external JARs
I would not use it to describe ease of configuration. "Lean" means small foot-print, low complexity, to me.
Then take Glassfish. The whole EJB container takes less than 1 MB. Now you have to consider EJBs as the lightweight component model :-).
In EJB 3 you couldn't assign both Remote and Local interfaces to a class so you needed to create at least 2 interfaces and one class. I usually use 3 interfaces, one common interface for common methods and then a remote and a local interface that extend the base interface. I am not complaining, I think this was the appropriate solution. Unless this functionality has changed in 3.1, I would say an interface is still necessary. Additionally, I think it is a good thing to design by contract when exposing facades.
Especially in small to medium-sized projects the local and remote interfaces are often identical (or rather, only the local interfaces are used at all). So in this case, I don't see a strong reason for keeping an interface per EJB (or actually two interfaces, since as you mentioned you can't use the same interface for local and remote). I think that interfaces still make sense in frameworks that have to expose a stable API and need more freedom to change the implementation without affecting users (even if they only have a single implementation of the interface).
@Remote interfaces are actually only needed for IIOP-remoting. For everything else (REST, SOAP etc.) you can use @Local. [reddit!](http://www.adam-bien.com/roller/abien/entry/why_service_isn_t_a)
I would counter that WS should also designate its own interface There is absolutely nothing wrong or really that difficult specifying multiple interfaces. Regarding your link, there is absolutely a good reason for separating your concerns while developing your facade. By pushing your CRUD back into its own service classes, you isolate the finer grained services and make it easier to combine them in your facade and consequently group them into a single transaction. All of this adds very little work on the part of the developer and allows for a greater deal of refactoring while lessening the impact of the refactoring on clients (whether they are internal or external to your application or even institution)
This might be an alternative: http://lingo.codehaus.org/JMX+over+JMS Assuming you want to setup a JMS broker.
Would like to see the code to invoke this remotely.
Awesome. Now if we could get it to clean up JRuby and Jython ...
I have used JAI many times in the past with no problems. If you are linux you can use a virtual frame buffer. You can also use AWT out of the box.
&gt; I have used JAI many times in the past with no problems. Sadly, that's not the case for me. I do ship with JAI, though. &gt; If you are linux you can use a virtual frame buffer. I need something that's platform-independent, unfortunately. &gt; You can also use AWT out of the box. This needs to run on a server, even without a graphical environment. I've seen [some AWT code](http://www.rgagnon.com/javadetails/java-0243.html), but haven't yet checked if it works without a graphical environment. Do you know? EDIT: It doesn't even work *with* a UI environment, so it doesn't matter.
Is it a categorical problem with scaling with drawImage, or just when you set g.scale? Because you could use drawImage(Image img, int x, int y, int width, int height, ImageObserver observer). This [article](http://today.java.net/pub/a/today/2007/04/03/perils-of-image-getscaledinstance.html) gives an iterative approach via that method that is pretty necessary if you're scaling by a large amount. And if the memory leak applies in that case as well there's also getScaledInstance. It is slow, however. 
* A simple http server. The simplest one I could write was 5 or 6 lines of code (it worked, but it's useless) * A simple http client * Muck around with regex. You'll **need** it later on * Start writing utility classes for yourself. I'm into physics, so I wrote a whole bunch of utils to calculate vectors, for instance. Tiny little classes that each only have one very specific purpose. They come in immensely handy later on * See if you can generate some interesting sounds. If you look at the .wav or .au formats (uncompressed audio) it's pretty simple to understand and to roll your own * Threads. Learn them. * play around with graphics2D (see if you can write a semi-transparent gui) 
Upvoted. This is what you're looking for.
I haven't actually done this with java.awt classes, as I assumed that these would not work in a headless environment (such as, say, a Linux server with no X). Am I wrong? In any case, the memory leak is with JAI code. If you follow the link to the code you'll see that I'm not using drawImage at all. I'll try the java.awt approach.
I wrote a version of Conway's Game of Life in a few hundred lines, I bet it can be done a lot shorter, though.
I've been using that on a Linux server that I don't believe has X running and it seems to work fine. It may be an issue with your Java version, since according to [this](http://www.eteks.com/pja/en/) it's an issue with JDK &lt; 1.4. That site also has a pure java implementation of java.awt.Graphics if you do need to use 1.4, though.
I tried it. It doesn't work. See update to the main text at the top.
I tried it. It doesn't work. See update to the main text at the top.
Did you try a pet shop store web shop ? 
Oh, you tried one of the methods that the bug report indicates causes a memory leak. &gt;(by JAI, by g.drawRenderedImage with an AffineTransform, by g.drawImage with g.setScale -- does not matter) Like so: bdest = bsrc.getScaledInstance(width, height, hints); Or maybe: Graphics2D g = bdest.createGraphics(); g.drawImage(bsrc, 0, 0, width, height, null); Width and height in these cases are the scaled width and height that you desire. They may have the same underlying memory leak if they're using the same methods under the covers (more likely with drawImage than getScaledInstance). 
&gt; the bug report Which bug report?
The one you [linked](http://bugs.sun.com/view_bug.do?bug_id=6716560) to. It's good to know about the dispose calls.
I haven't tried any java web stuff, can you tell me about it? What do you think of Java for web applications?
I should read more into this Conway's Game of Life thing... I've only ever seen it in the Wii homebrew game called [Harmonium](http://wiibrew.org/wiki/Harmonium) EDIT: Just reading the rules on wikipedia, sounds interesting, I may try something like this, but I'd probably want to read into GUIs or some sort of graphical displaying first.
&gt; * A simple http server. The simplest one I could write was 5 or 6 lines of code (it worked, but it's useless) &gt; * A simple http client &gt; * Muck around with regex. You'll need it later on Cool, I'll definately try this, socket programming is sure to be fun. I've written lots of web stuff in the past. I wrote a lyrics plugin for amarok 1.x (lots of regex) that got fairly popular, but amarok 1.x has pretty much died now and so did interest in the script, and amarok 2.x just plain sucks. &gt; * Start writing utility classes for yourself. I'm into physics, so I wrote a whole bunch of utils to calculate vectors, for instance. Tiny little classes that each only have one very specific purpose. They come in immensely handy later on Yeah, I'll try something like this our surely in the fall for my math courses and stuff. &gt; * See if you can generate some interesting sounds. If you look at the .wav or .au formats (uncompressed audio) it's pretty simple to understand and to roll your own While, I'm not much into audio programming, I've done some stuff with bitmap images in the past, I might do something like that with another simple file format. &gt; * Threads. Learn them. How is threading in java? I really liked python's threading module, I hope there's something I can use that's as easy as that. &gt; * play around with graphics2D (see if you can write a semi-transparent gui) I definitely want to try learning this as sometimes I feel like impusively half-writing a game. Can you point me in the right direction?
&gt; ...I've done some stuff with bitmap images in the past... Convert bitmaps to audio via your own custom interpretations of Fourier transforms &gt; for my math courses and stuff. Start by translating simple equations in your books into utility classes. &gt; How is threading in java? Modern processors work very efficiently with multi-threaded applications, because they're built to do so. Multi-thread away! Put everything (sensible) into threads, you can do so with confidence that the JVM can handle it. This not only works well with the hardware architecture, but also almost *forces* good OOP best-practice adherence. I have a lot of respect for the Hotspot JVM in this respect; it's a genius piece of work. &gt; Can you point me in the right direction? I recommend [Filthy Rich Clients](http://filthyrichclients.org/) by Chet Haase and Romain Guy. If you've got the talent, this book gives you the skill, for sure. 
Great, thanks a lot. I'll be sure to check this out. EDIT: I'm impressed with how Java handles threading, seems very simple and intuitive. Yay! Concurrency FTW.
what are your interests? if its web development, try a simple todo list web app. keep it small, maybe 2 or 3 DB tables. use one of the embeded sql servers. if a desktop app sounds more interesting, maybe try making a small game like tetris or try displaying ulam's spiral on a grid or circle. either way, make sure you compile and deploy with ant, it will be something you need to learn anyway. 
Hmm, I've only heard that ant sucks, people saying it's worse than make, but I have no actual experience with it. I've been building manually from the command line and using eclipse. Is ant worth learning? Is there anything better?
Sigh, ok here's the deal on ant: it is a build tool. These days people don't think that is enough because they want dependency management, project templates, etc all built into one (maven, which personally I hate with few exceptions). So unless you are going to use something like maven, ant is absolutely critical (and is actually quite nice, when used properly, and can be combined with things like ivy). If you ever get a job working with Java you sure as hell won't be compiling by the command line. Ant is also critical for your CI (continuous integration) and build servers. Ideally, you commit code to your SCM, then your CI server automatically builds the latest version and runs all of your unit tests. At worst, you at least have a manual process to kick off a build in a build server. You never want to deploy built code straight from your machine to anything. Anyways, there is a lot more to it than just those things. Sometimes its important to look past people's opinions and see what they are really trying to say. In the case of ant, they are not truly saying it sucks, they just don't care for the objective it was made to accomplish. Be curious, try things for yourself.
Thanks for the explanation. Alright, I'll try ant, but I've also got some interest in waf: http://code.google.com/p/waf/ which I saw lately on /r/programming, it looks pretty nice so I'll try it too and see what's best. Do you have any opinions on a unit testing framework? JUnit seems to be the standard from what I've heard.
JUnit is the standard, though I've heard good about TestNG too (never tried it). You will also probably want to look into things like EasyMock or mockito. As far as waf goes, I stopped reading once I read python. If you are learning Java for yourself and have no interest in making a career out of it, feel free. Otherwise, I would stick to the standard (ant).
Maybe use an IDE like Eclipse which will do the ant stuff for you.
Alright, cool. I don't really care if my tool's not enterprisey enough, not right now, for learning atleast. There seems to be a huge obsession with everything enterprisey in Java and I really don't like it, it seems to make everything very annoying and confusing to learn. 
Good list. For graphics, check out processing.org. A 'processing' script is basically one big java procedure without any of the additional stuff.
Well, it's all about the web application framework and there are plenty to choose from. Struts, Java Server Faces, Tapestry etc... You'll have to try out a few and compare them, there are differences as to what each framework make easy and make hard; e.g. how object to relational DB is done, etc. 
Hi, ImageMagick has C++ hooks. I see you have already solved your problem with AWT, but if performance becomes an issue: http://www.imagemagick.org/Magick++/
It's very easy to create distributed Objects using **RMI** (Remote Method Invocation). This way you can quickly create "living" Objects communicating on different processes/pcs. Or you could use **Web-Services**. The interfaces are described in WSDL files which you can compile into Java-Interfaces presenting the offered functions. Try using the [GoogleSearchAPI](http://api.google.com/GoogleSearch.wsdl) or create your own accessible Service...
plus "quick-fixing" and code completion 
If you want to learn some maths, data structures and algorithmics at the same time, do some problems from [Project Euler](http://projecteuler.net) in Java.
I tried using jMagick, which integrates the C++ API in Java via JNI, but it doesn't compile in MacOS.
Try building a Sudoko solver using recursion. Or solve the knights tour problem in as few lines of codes as possible.
Here is some code that does almost the same work. Except mine does not open a dialog on the server. public static byte[] convertToJPEG(byte[] input, float imageSize) throws IOException { SeekableStream inputStream = SeekableStream.wrapInputStream(new ByteArrayInputStream(input), true); PlanarImage image; // use standard fileload image = (PlanarImage) JAI.create("stream", inputStream); // now get current image size so we can reduce the size by precentage int width = (int) (image.getWidth() * (iSize / 100)); int height = (int) (image.getHeight() * (iSize / 100)); // Create a BufferedImage so we can modify it BufferedImage bigImage = image.getAsBufferedImage(); // Create an 'empty' BufferedImage BufferedImage smallImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB); // Set the Image values for the 'empty' image Graphics2D g2D = smallImage.createGraphics(); g2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR); // Apply the image propterties to the original image g2D.drawImage(bigImage, 0, 0, width, height, null); // Create an OutputStream to place the altered image in ByteArrayOutputStream outStream = new ByteArrayOutputStream(); // setup the Codec to convert already reduced image to JPEG JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(outStream); JPEGEncodeParam param = encoder.getDefaultJPEGEncodeParam(smallImage); param.setQuality((float) .80, false); encoder.setJPEGEncodeParam(param); // Apply the Codec properties to the image, making the image a JPEG encoder.encode(smallImage); //JAI implementation of the JPEG conversion //JAI.create("encode", image, outStream, "jpeg");//.setParameter(layout, 1); byte[] b = outStream.toByteArray(); return b; }
It's pretty clear it wasn't the .NET that pushed him over the edge :P
LOL, you're probably right. But as the little old lady that peed in the ocean after her husband fell in said, "Every little bit helps."
And he wore pants. And he rode a bicycle, sometimes. 
It's totally inappropriate to post this in /r/java. Seriously.
But Visual Studio could be.
Remember, using a Java technology stack will save lives.
I agree. I do not know why you are being downvoted.
Because it necessarily follows that any self-respecting Java developer also agrees with all .NET anti-advocacy? Or gee, did I violate the clubhouse rules again? Guys, get away from me with that toilet paper already!
If you look is resume posted earlier, he was a c++ developer before win 95, so yes he also learnt .net. What's the point?
If anything gets enough users, there will be some who say that it "sucks". Of this there is no doubt.
Familiarize yourself with the [Google Collections](http://code.google.com/p/google-collections/) library. Its got a lot of really useful stuff in there. In particular, the Iterables utility class is extremely useful for applying some functional programming techniques to Java code.
Wicket is fantastic, and I'm not just saying that because I'm a contributor to [wicketstuff](http://wicketstuff.org/confluence/display/STUFFWEB/Home).
?!
The writing on that blog is absolutely horrendous.
Here's some decent analysis: http://redmonk.com/sogrady/2009/08/11/vmware-springsource/ http://www.mberkay.com/2009/08/11/vmware-springsource-and-hyperic-brave-new-world-and-a-lot-of-questions/ 
good read and I hate when blogs don't post the full source.
I don't know about the JDK, but .NET has some strange classes, named ISomething. Highly frustrating, no one would expect an interface to be instantiatable. Other than that, I don't care about names, as it's impossible to use a consistent naming for all interfaces-classes throughout a codebase.
My point was: if you have to use naming convention for interfaces because of name clashes - you probably don't need the interface...
I don't understand your issues with sessions, or your issues with JSPs. As far as I can tell, JSPs are extremely popular. If you want a history of requests you could just insert it into the current session. It should actually be fairly simple to create your own servlet that does that, and then just inherit from that. Ie. * get the current session * get the history list in the current session * add what you want from the current request into that list 
It is a question. Do you TOO have any other improvements that you would see added to the J2EE spec. Those are mine. I didn't necessarily detail them, I was curious if others had any other improvements. There are a lot of issues with JSPs. 1. They are an OK template system for converting logic into some target HTML document, but once you have a complex page or layout, it becomes difficult to debug how your page will eventually end up. The jsp:include is not that powerful. 2. JSPs are very resource intensive on most J2EE servers. There is a lot of wasted memory and depending on the code can bog the responsiveness of an application. 3. EL Expressions, Taglibs, Scriplets aren't that expressive a syntax "Ie. * get the current session * get the history list in the current session * add what you want from the current request into that list" That is great, but won't be consistent. Plus, these little routines are useful if they are built into the core API.
I wouldn't mind built in support for reading multipart forms via a servlet, rather than having to use an Apache library or something similar.
Yea, that is basic functionality that should be included. 
How could you change from HTML to PDF anyway? I'm pretty sure the PDF format doesn't allow for random HTML fragments at the beginning. For performance, servlets write back to the http client as soon as you write anything through them. This means the headers have to be written. It would be really easy to build an abstraction around your servlets that could wait until a commit point to write relevant properties back to the actual response, while not forcing the base API to buffer huge responses in memory until it's sure you're done changing arbitrary response properties. I agree with you on JSP though. You should try using a more modern framework that builds on the servlet spec. I work on Java web apps full time, and I can't remember the last time I had to dig around in the session for anything. In Tapestry for example you just slap on an annotation to your controller's field and it's stored in the session. In Wicket, everything in every component is stored in the session via serialization unless you detach it via their mechanism. Both have XHTML-like templating engines (no JSP).
I just use Spring @MVC and am happy.
"How could you change from HTML to PDF anyway? I'm pretty sure the PDF format doesn't allow for random HTML fragments at the beginning." Ideally, I was hoping asking for others opinions would trump my own comments. But it is possible to build up a html response and then convert to some other format. It is just difficult. Meaning, lets say you have legacy code that needs to output to a html mimetype. But now you want to compress the output and output to the html zipped format. I mention html to pdf because I do that all the time. For example. reddit.com?output=pdf Would output to pdf if you leave out the query string. You can do this in the servlet world, it just takes a lot of manipulation, filters, requestwrappers etc. 
What aspects of spring/mvc do you think. if I remember, springmvc still relies heavy on jsps for the view? Sure, the Java aspect of it is nice, but a lot of the view parts seem the same as regular j2ee.
On sessions. They encourage bad programming. Here is an example good practice. Don't use globals. Sessions are important to your application and in J2EE, a session is this big global object. Some code that you don't know about could remove key attributes, or change values unknowingly. I don't have a suggestion for sessions in Java. I just think it is bad.
&gt; 1. They are an OK template system for converting logic into some target HTML document, but once you have a complex page or layout, it becomes difficult to debug how your page will eventually end up. The jsp:include is not that powerful. Maybe you should investigate the "new" features in JSP 2.0 (released November 2003). Tag Files are vastly superior over jsp:include and can be used for things from simple markup reuse to [complex page layouts](http://fforw.de/post/Creating_JSP_Layouts_with_Page_Tags/).
&gt; if I remember, springmvc still relies heavy on jsps for the view? Not at all. It works with logical view names that are resolved to actual View implementations. There is a JSP implementation as well as different other ones and you could implement your own.
Except Spring is not a standard and its future is uncertain
Your problem don't seem to be with JEE, but more with Servlets/JSPs 1) No one is forcing you to use the HttpSession, in fact if you looked into the rest of the spec and used Stateful EJBs you could accomplish this 2) Why would you even do this ? What mime type would you use ? The reason you can not change the response after you close it is because the connection is closed to the browser. 3) Why kill JSPs ? JSPs used properly work just fine. This seems to be the case of blaming the tool for the poor workmanship 4) Java is a programming language and you can use it to build applications, build your own request history, it is really trivial. 
I don't have a problem with anything. I was curious if there were improvements that could be made to the system.
I think it should be Servlets and JSPs, there is not much heavy JEE in there
Session objects are not globals. 
I suggest you read through the rest of the spec and understand why things are the way they are. None of these "suggestions" make any sense whatsoever.
I am asking for improvements and have only mentioned I wish there were improvements to how sessions are handled and improvements to the JSP system. So far, I am assuming you don't have any. They make sense because others have created templating systems like Velocity for example. Sessions are just bad because any Servlet or application or filter can change the state of a Session object. How is your application secure if all it takes is unexpected session.setAttribute("command", "changevalue") or request.setAttribute from a filter or other library to change the expected behavior. And those are just EXAMPLES. So far, most developers seem to believe that J2EE web spec doesn't need changes. 
Yea, I have heard good things about the new EJB specs. And I have used JSF. In theory, some of jsf makes sense.
Session objects are global for a particular request for the life-cycle of a session. I mean to say, the values can be changed from a any Servlet, Filter, other library.
Do people really prefer presentations to reading a document?
As I said, examples of nonsense. How would you unexpectedly do this ? You would have to allow something access to the session, which should be controlled by you the programmer. It is basically a hash map, would you like to put a combination lock on it "protect it" ?
http://tapestry.apache.org/tapestry5/guide/persist.html See tapestry. "The Servlet API was designed with the intention that there would be only a modest amount of server-side state, and that the stored values would be individual numbers and strings, and thus, immutable. Many web frameworks do not use the HttpSession this way, and store large and mutable objects in the session. This is not an issue for single servers, but in a cluster, anything stored in the session must be serialized to a bytestream and distributed to other servers within the cluster, and restored there. Most application servers perform the serialization and distribution as part of HttpSession.setAttribute(). This creates a problem for mutable objects, because if you read a mutable session object, change its state, but don't invoke setAttribute(), the changes will be isolated to just a single server in the cluster." This is an approach that could be used as an improvement to the HttpSession object. There are good ideas scattered across different frameworks, some of which should be built into the core Servlet spec. I don't think you are engaging in the debate but at least you are helping me improve and research more on my own ideas.
That is a good feature. Also, some are pretty happy with Struts Tiles. Good systems and improvements of the jsp:include.
No, we do not.
How exactly does this have anything to do with your argument that session onjects are not secure. You initial argument said nothing about clustering. If you are clustering, there are better ways to share state than the session. I am not debating with you because your initial argument was composed of uneducated ramblings.
I said not much. Yes there are Servlets and JSPs in there, but they are hardly the breadth of the spec. Everyone gets so focused (like the OP) on them and completely disregards any of the other good parts. If I hear someone refer to tomcat as a an application server or 'Java EE' container one more time ...
Pre-compiled JSPs are not any more resource intensive than anything else. All of this is meant to be built upon, this whole thread seems to be focused on you not wanting to write any code and have your application built into the spec.
There haven't been any benchmarks that I know of. A 50kb-100kb page may take up a lot as a compiled java class. If you include EL expressions, if, loop and other JSP logic that can be pretty resource intensive. Sure, it will take just as much to build your own Servlet with the same output. But, I wonder if template engines like Velocity offer any improvements to a compiled approach. "his whole thread seems to be focused on you not wanting to write any code and have your application built into the spec." Ideally, my post was finding about what people like or dislike and what could they improve about web development in a Java environment.
As a Wicket developer, I have to say that the book written by Martijn Dashorst and Eelco Hillenius (the latter being a colleague of mine) is quite an excellent resource for beginners.
Can I use said component if I am not using NetBeans?
I'm fairly new to Java and I find it very hard to get into the whole Java EE field. First of all there are so many techniques that you don't know where to start. Sun has also spent too much money on the marketing department. There are so many buzz- ans sales words that it makes it much harder to get what things really are about. Furthermore it feels like there's no end to it. There are so many different app servers, frameworks and implementations that you just can't learn all of them. Say I get into a project and they are using for example Spring instead of the framework I'm familiar with. That's like learning a whole different language. If someone says "Do you know Java?", how can I ever reply that I do? And there's more stuff coming all the time. With Python for example I can hold an overview easily in my head.
Not sure if I agree. We use spring quite a lot and I like its dependency injection mechanism. By saying this I am not saying that alternatives are not good.
Please notice that there are "?". The title is a question, not an assertion ;o)
No. Because Grails uses Spring sans XML.
I used the Spring annotations on a recent project and it definitely made it a lot more usable.
I personally wouldn't use Spring for anything at this point. It has always been XML hell, DI is nothing that special any more (I will give Spring something for brining it tothe forefront), it is not standard and its future at VMWare is uncertain.
HTML == XML, XML == sucks, therefore the world wide web == sucks??
Maven is not cool at all. Maven will never be cool until they have better documentation and all the plugins start to actually following the maven motto of "convetion over configuration" which is where convetions would help the most.
Not quite. Spring sucks because DI sucks. That they use XML for that, is just the cherry on the suck sundae.
This is my reply. What do you think? I am considered an Ant user. I have a couple of issues with Maven, but I haven't used it that often, so you can take my opinion as just that. "How Do I Add JARs to the ClassPath? Short answer: you don't. You let Maven handle it for you. If you need a .jar, more than likely, it's already available in some repository," 1. What does that mean? I would say 100% of the jars aren't avaiable on some repositories because some are propietary and the others are built in house. And they aren't updated very often. Plus, we don't have much access outside Internet access, so I am assuming maven can support a complex httproxy configuration. So the dependency management built with Maven is pointless for some projects. 2. One good thing about Ant, it seems like the targets/tasks are intuitive. For example, to build a java application, you use 'javac', to run, you use java. For example, in your maven example, what is artificat? And scope, and groupid, etc. 3. Maven seems to address basic compile, build problems. Does it apply to complex projects where you have source files in different directories, packages where you don't want to include in the build, etc. 4. Custom maven scripts/targets? I like ant's ability to have custom targets. Say, if I need to compile Scala source, there is a scala target which is pretty easy to use. 5. Groovy support? Does maven have the ability to be configured with groovy. 6. Ant has many tasks like ftp, subversion, tomcat, etc. Are these built into maven? 
I'd say maven has many of the same things ant has. And you can even default to ant for the build part with the right plug-in. My biggest gripe is the unintuitiveness of it and the lack of documentation. Which is weird considering their moto "Convention over configuration", you would think their conventions be less arbitrary and better documented.
I am fine with Ant, it sounds like there are no big reasons to switch. For example, Ant is used with the Sun Open JDK build and most other big projects. I can't find anything that Maven does extremely better than Ant. The dependency thing is good, but hasn't gotten me to switch. People compare the dependency manager to apt, well java projects aren't like a Debian operating system so I can see where projects DON'T need a jar dependency manager.
&gt; Has it somehow gotten a bad reputation when I wasn't looking? Has it ever had a good reputation?
I have mixed feelings on Maven. It does save alot of time on standard projects, but the edge cases can be a hassle. But that's probably true of most build systems. Here are some answers to your particular questions: 1) He means you don't do anything manually to add them to the classpath of a project. Instead, you make a dependency entry in the pom.xml file and when you attempt to compile, etc., maven will attempt to connect to the central repository and download it and put it in your project in the proper location. The nice part is that it will also look up anything your dependencies depend on, etc. It defaults to a central repository that hosts most jars, but you can configure maven with multiple repositories, and specify in what order you prefer to pull from them. We run a local repository to install our in-house projects and any projects that aren't publicly available, and default to that and then the central repo. Installing into our repo is easy, you just use mvn install and push the projects in. 2) Maven's commands are alright once you understand their lingo. A little odd otherwise. Artifact is a particular file/digital asset, if you will. For instance core.jar. groupid is used to identify particular projects/companies. org.hibernate for instance. Scope is when the dependency is needed (compile vs. runtime). You can also specify a specific version, or a version rule (requires release 2.0 or above of x.jar). 3) Yes, it has very complete include/exclude rule and pattern matching, which can be specified on a per target manner. 4 &amp; 5) I would assume so, because it does have extension points for that purpose, but I've not done it, so I can't be sure. 6) Yes. I do like that you can set up a project template for things you do alot of, and then setting up the entire project and all its dependencies are just one command line entry. We have a couple set up for our in-house CRUD webapps, and it definitely saves time to make sure all the web, orm, logging, etc is all set up for us. That said, documentation does suck, and the community isn't the most active/best. It has its warts, but what doesn't, I guess.
You are absolutely right. My company has been using maven now for about a year on some projects. It is an absolute NIGHTMARE. The documentation is extremely minimal. Additionally, it WILL require you to run your own repository server if you use anything other than 100% open source commonly supported frameworks. When it works, it's a thing of beauty. When it doesn't, you need to hire someone to solve your problems. 
I completely agree. Maven lives in a fantasy land of everything you'd want to use is an open source project in a standard repository. A representative example of Maven's stupidity is the fact that you need a plug-in to do what Ant's run target will do. In some theoretical sense Maven is the perfect solution to project's that perfectly fit Maven's methodology, which happens to be 0% of real world projects. Ant works well enough, and it seems like up to now the most we can hope for out of a Java build tool is "well enough." 
Thanks for the info. You may also look at groovy and ant. I can imagine that groovy, ant and ivy are a good solution.
Wait, WTF!?!! Of course you have to run a repository manager if you are using JARs that are not open source. either that or find a vendor that is smart enough to have a repo manager behind auth. Also, you should be running a repository manager whether or not you use Maven. I know many people who use a repository manager even with Buildr, Ant, Gradle, and Ivy. Seriously, all of the other build tools end up read from the Maven repository. If "I don't want to use a repository manager" is your objection to Maven, you are living in an odd world. 
1. What are you talking about. Use a repository manager like Nexus. I'd be using a repository even if I was running an Any + Ivy build. If you are worried about your own repositories being out of date, set up a continuous integration system on Hudson that publishes to Nexus, Archiva, or Artifactory. 2. It is easy to locate an artifactId, groupId, and version. You can search the Lucene index that is created for all maven repositories. Go to repository.sonatype.org, search for an artifact. 3. Huh? I build a 50,000 line enterprise system with Maven, it is heavily customized and spans multiple technologies. It is not difficult to customize. I also build books from source to pre-print with Maven. If you can't figure out how to get Maven to do something, it is likely because you haven't tried. 4. Guess what. I wrote the Maven book, you can write custom Maven goals in Ant. If you really want to, you can use the Antrun plugin. Wait... that's not enough, you can write a plugin a groovy, ruby, python or you can just embed a custom script in your build. 5. Yes. Of course, GMaven. 6. Yes.
Yes, it builds software you use every day. It builds a large amount of open source libraries you have come to rely upon, and even its competitors use the repository format it created years ago. Is it right for everyone? Probably not, everyone has unique tool preferences. Does it have a good reputation? Let's see, it has a good enough reputation that almost every open source developer I work with is frustrated when they checkout a project that doesn't use Maven. 
There's just a series of free books about Maven: http://books.sonatype.com Have you looked for documentation recently?
 1. What is wrong with NO repository manager and just have jar files off a filesystem. I don't understand the need for an extra repository server for every build situation. 2. "It is easy to locate an artifactId, groupId, and version. You can search the Lucene index that is created for all maven repositories. Go to repository.sonatype.org, search for an artifact." What does a lucene index have to do with building Java projects? I am sure the Maven pom configuration makes sense for Maven, but the verbiage (to me) doesn't seem that intuitive. For example, the javac task in Ant...invokes the java compiler to build java code. 3. 50k lines is not that large, but maybe Maven does manage larger projects well? I don't know. Based on your analysis, it seems like it does. 4. OK. 5. OK. 6. OK. So far I have heard that Maven can do what Ant can do. But is there a really a big advantage to using Maven. For example, the advantage to using Ant over a Makefile is that it is geared towards Java tasks and uses a more readable XML file format. There is a Javac task in Ant not a robust Java task for a Makefile. What is Maven's selling point?
Are you serious? Don't tell me what I *should* be running. If I want my jars checked into version control, that's my business.
man i only have one upvote to give. i've been doing software development for a long time, and i know what works for me and what doesn't... and the things that do work for me, typically, if not always equal a successful project (meaning, it gets finished on time, is launched and is considered a "win") maven is like the angry confused dictator, running about mixing things up and confusing what should be straight forward and simple. 
For me being declarative is the main selling point. I don't want to have to write an ant build file, and I don't want to have to figure out exactly what version of what jars to use with Spring and Hibernate or whatever. With Maven I pick an archetype to generate a pom, specify the main jars I want to depend on, and I'm done. Oh, yeah, and I never have the tedium of adding in Cobertura support for an existing test target. With Maven I just specify the plugin and I'm done. 
Apparently there are some zealots here downvoting anyone who disagrees with the maven philosophy. Funny that: just like maven itself trying to keep you from thinking for yourself. Oh sweet, sweet irony... 
Now I understand more clearly why you have such tunnel vision about how people should build software. **YOUR COMPANY SELLS MAVEN TRAINING AND SUPPORT** Of *course* you have to have a repository server. Of *course* you should run maven.
WTF is the point of that page?!
Probably the video.
Didn't show up for me... Hmmmmmm...
Repository managers are more than just Maven, what do you think all those other tools use? Our competitors use the repository.
If you are also new to OO programming in general, I would get these books and work on the examples. They will provide you with an excellent foundation for programming in Java. http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1251928378&amp;sr=8-1 http://www.amazon.com/Thinking-Java-4th-Bruce-Eckel/dp/0131872486/ref=pd_sim_b_54 http://www.amazon.com/Effective-Java-2nd-Joshua-Bloch/dp/0321356683/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1251928591&amp;sr=1-1
Blogspam. That video, plus much more: http://clojure.blip.tv/
It is not a blog, it is a directory ;o) External sources are acknowledge on http://www.java-tv.com/we-acknowledge/
I refuse to even give Tapestry 5 a chance after Howard abandoned all of his Tapestry 4 users with his rewrite. What's to say all this won't change again when he decides he wants to, e.g., rewrite Tap 6 in clojure (Howard's other love of late)?
Huh? The describe the problem, say the have a solution, but say almost nothing about how te solution solves the problem.
Here's a link to the bug : [Bug Id 6826780 : URLClassPath should use HashMap&lt;String, XXX&gt; instead of HashMap&lt;URL, XXX&gt;](http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6826780). (Much better than the screenshot)
XML is suck I hate it. Grails using Spring and it allow us not to write in xml lol .. so Spring is cool ... writing configuration in xml is suck .
I agree. There really isn't any details but imagine its because Azul lights to keep details of their approach sealed. Conceptually its interesting though.
why do people always want to bypass the type system. If you don't like types, use a typeless language.
I don't know. One legitimate use (maybe) is capturing common usage. Like: * getName(); * getImage(); * getText(); (The last ones are pretty common in SWT) Having something like IGetName(), IGetImage(), IGetText() (one method seems like overkill.
The next step is to perform regex matches on method names using reflection. If it looks like "m\*()" it must behave like an "m\*()".
I've never (even tentatively) argued that this may be a good idea. Now that you're ashamed of yourself ;), here's a post of someone that put DuckTyping to practical use: http://www.coconut-palm-software.com/the_new_visual_editor/doku.php?id=blog:java_does_duck_typing 
BTW, you can do that in Scala with structural types. I guess these use reflection too, so it's slow, but it certainly makes sense e.g. for the mentioned SWT usecase: [http://johlrogge.wordpress.com/2009/01/06/making-swt-shine-with-scala/](http://johlrogge.wordpress.com/2009/01/06/making-swt-shine-with-scala/). Still, I downvoted the original post because this is just a horrible idea to do in Java. There are enough patterns to structure your code in a way that when a duck arrives, it will be able to quack without reflection. [Edit: Link]
350 articles won't improve me. It'll just make me procrastinate.
Two sentences of blog really doesn't add any content. :-\ Better to link the [actual source](http://www.softdevarticles.com/modules/weblinks/viewcat.php?cid=4)
Not gratis, not free, not interesting.
If anyone has a comparison between this app and JFormDesigner... that would be awesome. We currently use JFD in-house, and are fine with it, but this looks all new and shiny. Maybe it was just the music.
I would like to see a comparison between NetBeans, JFD, and GUIDE. NetBeans has a design more that does all this, almost perfect (seems clunkier or maybe I dunno NetBeans well enough). Maybe small differences, but I'd still like to hear about it.
The beta seems to be free. Is there another commercial app worth even glancing at? If it's gonna let me try the app for free while in beta, I'm gonna find out if it will be something that I like better than netbeans. Cause if it is, I have no problem saying I need a better IDE, commercial or not. It's not like I'm gonna get the license, it's about getting work done (what little Java UI stuff I do).
slf4j is awesome. The fact that you can capture log4j, acl, and jcl log messages coming out of libraries in a single (preferably logback) log makes life much simpler.
I recently started going through the apache commons JavaDocs to find useful methods which I don't yet know of. I think the project is invaluable to all Java developers but impossible to use if you don't know how it can help you.
just some fanboys stroking each other's cocks. If you'll excuse me, I've got some code to write.
Whoever wrote that is right about Google using Java extensively. I don' t think his belittling of Python is fair, though. It's not a toy language.
the fanboy part sucks, agreed but I think a better understanding from both sides might be a good thing. or at least something I want you to tell me.
I think that the user who deleted his account was largely correct about Google's use of Java and C++ (never worked for Google, so I don't know..just based on lore). I also think he was wrong to belittle Python, but he obviously had a chip on his shoulder given his liberal use of ad hominem. I'm not sure what either of them were trying to accomplish in their arguments.
Bleh, who cares. Who writes problems in a single language any more. Who calls themselves a "Java" programmer or a "Python" programmer. Without exception, the people who have the most interest in language wars are new programmers who haven't learned anything other than Python or Perl, when you start to program in a real environment, you'll realize that there is a constant discussion about "what is the appropriate language" for a particular language. And, during these discussions it becomes exceedingly apparent that there is rarely one right answer. Twitter was developed in Ruby, Alex Payne and a few other came along and rewrote portions in Scala. Who cares? Does this mean that Scala is "better" than Ruby? Does the fact that Twitter doesn't use Java mean that Java much invariably be a horrible language? (Scala runs on the JVM, BTW.) Who cares? Programmers that feel somehow threatened about one or more languages shifting the environment in which they have to work. Programmers who don't have the ability to adapt, or the understanding that the code is just a distraction from the underlying problem. The one thing I know about most of the people I work at Google is that they tend to know more than one language. Most good programmers tend to know more than one language well, and they realize that they are all frustrating in the end.
Ahh.. and YouTube is written in what ?.. I think that you should not waste your time reading those lammer Language vs Language comments..
built on gwt anyway
Everything is crappy when you don't know how to use it.
I find it amusing how Java is *oh so crappy*, yet the heavy hitters across the internet, pretty much all use it. I'm a Java developer, and haven't found anything about Java that really pisses me off to the point of thinking it is *oh so crappy*. Every language, scripting or not, has its drawbacks, and its annoyances.
Damned grapes were sour too.
Unfortunately, I think the majority of the people I encounter who believe Java is a crappy language are also the type that will fail to be excited by Google Wave. EDIT: Wait, I'm getting downvoted for this? Are people just skimming and assuming I'm slamming Java, or what?
Surprising. I expected them to use Python, as they usually do.
I think this was a sarcastic headline
Maybe for the backend, but for the frontend, Java-JS GWT cross-compiler framework that they have is pretty solid. I would be surprised if they *hadn't* leveraged that.
While I'm apathetic regarding Google Wave, I prefer Java to all other languages I've developed in thus far.
Well, berlinbrown, was it?
java hasnt been crappy for some time now, and anyone saying otherwise is spouting the same rhetoric that has been around since java WAS crappy. things change. i suggest you update your JVM via your package repository. your problem might be that your java implementation is ten years old.
I love GWT ever since I checked it out a couple years ago. It's slick. Coding guis with javascript sucks knowing what it's like to code GWT apps. Using eclipse, refactoring your gui code, no requirement for the user to have java installed.
Reddit, as a community, seems to be very much in favour of languages having as many features as possible, even if those added features make it more difficult to readily comprehend code.
I am in the same boat. Although part of my aversion to Wave is that it's web based, and I don't care for web based interfaces since they are so limited.
Heavy Hitters use Applets. Haha.
so why didn't you post this in one of your precious desktop apps?
There's also the effect of the know-it-alls who favour languages because they are cool, not because you can get stuff done in it -- but that's okay, they never really do stuff anyway. They're either still studying and only do short silly exercises or they have jobs where they have to do crap in Java because they don't know how to write anything beyond little exercises on their own.
Java and Python are the 2 languages they use, probably with more Java than Python actually. (And C/C++ for very low-level stuff like their filesystem, their cloud system...) AFAIK Gmail is written in Java too.
Here's an orange arrow so your day isn't ruined. 
It's easy to see "crappiness" when looking at small programs that are much less verbose in other languages. What's not so easy to see is the reliability that Java provides when building big projects: safe refactorings, fast incremental compilation, intuitive namespacing with packages, lots of production quality open-source libraries, the JVM as a sophisticated platform, and so on. And finally, excellent IDEs that deal with much of the verbosity. That said, I'd still love to do more Scala coding, because it *will* lead to better products when the tool support is there.
There is ASM http://asm.ow2.org/ and BCEL http://jakarta.apache.org/bcel/ That makes it possible to view the byte code down to instruction level
Java is great but Groovy makes it so much easier. Closures, and the language has built in support for java.util.Hashmap
Doesn't everyone know how to use Java. I thought it was all they teach them these days.
Pretty hard to develop anything exciting for the desktop these days though.
&gt;erwanl: AFAIK Gmail is written in Java too citation needed.
I'd recommend you look at Scala. Even the creator of Groovy thinks its better.
We're not on freaking wikipedia. I heard it from a Google engineer.
Applets??? Is this 1998? Almost nobody uses applets, they build web apps in Java.
http://stackoverflow.com/questions/525199/what-server-side-language-is-gmail-written-in
Bravo!
What you don't walk around with the notes to prove it ?
ha, exactly who is "the creator of groovy". If there was ever an open source project that had a rocky start it would be Groovy. I'll bet you mean to say that "James Strachan has blogged about Scala recently and that he like it". Which is great, James is a brilliant guy, but I'm sure you don't mean to say that he's "The Creator" when it comes to Groovy. If anything Guillame has probably earned the right to call himself, "Grand Lord and Master of all things Groovy".
Typical programmer data: 1. Half of the day writing Java code, getting frustrated by some of the verbosity required by libraries like Hibernate, but also not having to worry about deployment concerns, distributed transactions, yadda yadda yadda. Things mostly "just work", but there's so much AOP, Spring, hibernate magic going on that it is difficult to train people on the stack. 2. A quarter of the data time writing Ruby. Ruby is less verbose, but you've noticed that, over time, as your program grows more and more complex that your Rails controllers are now very complex, and the more junior members of your team have started to put a crapload of logic in your RHTML. Still, you think you made the right decision by suggesting that we implement the front-end in Rails (except for the fact that some of the front-end is in GWT). The most frustrating thing about Rails is the deployment story, while your Java-based Systems are very scalable, stable, and easy to deploy, you've struggled to find the optimal deployment story for Rails. Mongrel, then you found out that Mongrel sucks, you tried passenger, then you have the brilliant idea to use JRuby. Let's just say you wish it were as easy as deploying a WAR to Tomcat, but the tradeoff you made with JRuby is that your startup time sucks. 3. The other quarter of your time is spent writing Javascript. While you've started using GWT for some components of your front-end, the future of web development is about more Javascript + JQuery + passing JSON back and forth between the client and the server. Surprise, it is the Javascript that seems the easiest to code/debug on. You are still amazed by what is possible with Javascript. The point is that there are tradeoffs between #1 and #2 and the #3 is slowly emerging as something you'll need to be an expert in. It isn't as easy as saying that one language sucks vs. another.
Of course
Thank you! 
Hey, I don't know about internal Groovy politics, and really I don't care, but the Wikipedia [entry](http://budurl.com/7482) on the language only mentions James Strachan. In the [blog entry](http://macstrac.blogspot.com/2009/04/scala-as-long-term-replacement-for.html) you mention, Strachan says "I can honestly say if someone had shown me the Programming in Scala book by by Martin Odersky, Lex Spoon &amp; Bill Venners back in 2003 I'd probably have never created Groovy". So he also believes that he is the creator.
You act like someone is holding a gun to your head regarding Hibernate. If you want less verbosity, you could go back to DAOs :) But if you are noticing the Hibernate verbosity, it could be evidence your persistence logic is leaking down somewhere.
Strachan is prolific, good, but very prolific. He invented Groovy and then it sat around for a long time until someone decided it was time to write a spec for the thing. The thing you now know as Groovy was "created" by a team of volunteers at Apache, the myth of "creators" for open source projects is something of a myth that plays into the already unhealthy power dynamics of most open source projects. To use that quote from James to say that he Scala is "better" than Groovy is a bit disingenuous. He was saying that Scala, if it had existed, would have obviated the need for Groovy. That's not the same as saying Scala is better than Groovy.
python is good for rapid prototyping to test ideas because of the coverage of available libraries. It's not that great for large projects with lots of contributors. 
&gt; Strachan is prolific, good, but very prolific. I'm not sure that word means what you think it means. Its typically a compliment to say that someone is "prolific". &gt; He invented Groovy This means that he is its creator. I was right, you were wrong, admit it and move on. You seem so desperate to avoid conceding the point that you are becoming ridiculous. &gt; He was saying that Scala, if it had existed, would have obviated the need for Groovy. That's not the same as saying Scala is better than Groovy. You should re-read his blog entry. In it he points out how Scala is much faster than Groovy while remaining just as concise. He basically points out a bunch of benefits that Scala has over Groovy, he says that if he'd known about Scala in 2003 he wouldn't have created Groovy, and he makes no arguments in favor of Groovy over Scala. He may not have uttered the exact sentence "Scala is better than Groovy", but you don't need to be a professor of literature to see that this is the clear implication of his blog entry. 
(I still believe) Eventually SWING is going to die.&lt;redacted&gt; Edit: http://openjdk.java.net/projects/jdk7/features/ According to this, they aren't dropping SWING, just the idea of a unified application framework. So...nothing really changes except they have improved SWING as-is.
2009 and JSF is still struggling to get calender component right?! How pathetic...
&gt; Every language, scripting or not, has its drawbacks, and its annoyances. Upvote, upvote, upvote! 
I wish these were articles instead of a videos.
seems like the cleanest way to get around jar hell.
LOL at the java rap at the beginning.
Annotations is there anything they can't do? 
Apparently specify module dependencies and permissions, since you'd have to apply them before compiling modules. yes you could pre-compile them and have a config, as the speaker outlines and mentions "the goal is a clean module dependency model", so they arent doing that.
Why are we going backwards from web pages to TV programs?
Does that mean that this could print out false?: URL url1 = new URL("http://javablogging.com"); URL url2 = new URL("http://javablogging.com"); System.out.println(url1.equals(url2)); 
No. If you are connected to the internet, both URLs resolve to the same IP. If you are not connected, it defaults to a standard string comparison.
[Effective Java](http://www.amazon.com/Effective-Java-2nd-Joshua-Bloch/dp/0321356683/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1254863261&amp;sr=8-1) [Head First Design Patterns](http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1254863292&amp;sr=1-1) http://www.theserverside.com/ http://stackoverflow.com/questions/tagged/java
I'm just amazed at the potential performance hit that code using URL.equals() could encounter due to the IP resolution.
Maybe there's a reason you're having trouble finding "applet"-related resources... There are very few use cases that would justify using such "fail" of a technology. Right up there with ActiveX :(
In order to troll successfully, you have to try not to be that obvious.
Here's the official [Sun tutorials](http://java.sun.com/developer/onlineTraining/index.jsp).
I don't like the way URL comparisons work in Java for the host resolution reason. Think about virtual servers. http://www.example.com/ and http://example.com/ could very well be different web sites depending on how virtual servers are set up. It's nitpicky but it could happen just for the sole point of confusing your program! I'm betting that IP resolution only happens on subdomains because this could get to be a real problem for http://foo.com/ and http://bar.com/ if they were hosted on a shared server. :P
Use URI when you need equals(), it is faster and predictable.
This is one of those situations where it is needed. The java applet is being used to bridge the PHP website with our hardware which will be installed on each client's computer.
I just found http://maven.apache.org/guides/mini/guide-bash-m2-completion.html and http://willcode4beer.com/tips.jsp?set=tabMaven. 
&gt; one of the conditions for the two URLs to be considered equal is that the host names are resolved to the same IP. WTF? What does URL equality have to do with an IP?
Eclipse user here. As far as I've heard, NetBeans is much better w.r.t. GUI programming (if you don't want to buy Eclipse GUI plugins), but Eclipse is better as an overall experience. For example, some time ago I briefly tried NetBeans, and for the life of me I could not find how to turn on compile-as-you-type or how to use a CVS. Anyone who's extensively used both IDEs care to comment on the pros/cons of each IDE? Edit: Thanks for the downvote.
TLDR: Try netbeans first, when stuff gets complicated or bleeding edge then switch to eclipse Alright so I think that I have a little itty bitty piece of info here since I have to develop 2 plugins that basically provide the same functionality for the two IDEs. I have some experience trying to accomplish the same tasks and working with the same sources in both IDEs. The project is in Java, and while I have some experience w/ Scala on netbeans I'm not gonna say much on that. And I started off with eclipse. But I find myself liking Netbeans more. Netbeans isn't as mature as eclipse but I feel that's one of its plus sides. It has a much simpler approach to solving problems. Most simple straightforward problems have straight forward solutions. This is also netbean's weakness. Plugins for netbeans just aren't as mature as their eclipse counterparts and so doing things outside of netbean's comfort zone can get messy. (Newer version control systems, languages outside of java and the sun supported type). And this is where eclipse comes in and rocks.
Many thanks for the reply and the interesting info. I'm an experienced Eclipse user already, and was just wondering if there's something huge I'm missing by not using NetBeans - apparently not. Cheers!
What do you mean NetBeans isn't as mature? Eclipse really got started in 2001, where as NetBeans was started in 1996 (Sun took it over and open sourced it in 1999). I do agree about the maturity of the plugins though. Personally, I'm an IntelliJ IDEA fan, but NetBeans come in second.
I'm not suggesting Eclipse is more mature, but your point by itself is invalid: age != maturity (for software, people, whatever). Going back to my original question, why do you prefer NetBeans over Eclipse in terms of features, usability, etc.?
There are a lot of JApplets swarming around on the internet. Yet only some applets pop-up a certificate before running, and ask you to either grand or deny it access. Have you ever denied that question?
The script at http://blogs.sun.com/nishigaya/entry/bash_completion_for_maven_2 looks even better.
Ok its true that Netbeans did start off first, but when it comes to eclipse and netbeans they're only as good as their plugins. IMHO. Also netbeans has a bunch of rewrites in its core, so it's not the program that it was back in 1996.
Extremely true. People actually respond to mailing lists at netbeans! How crazy!
For me, I prefer NetBeans over Eclipse due to stability and usability. Eclipse seems like a bunch of panels thrown together to make up an IDE, where with NetBeans it seems more organized/trivial I guess. Eclipse does just fine as an IDE, and so does SpringSource STS, IBM RAD, IBM RSA, and MyEclipse (all based on Eclipse). All 3 platforms (Eclipse, NetBeans, and IntelliJ IDEA) do just fine as long as you are willing to learn the keyboard shortcuts, I just lean towards NetBeans, and even more so towards IntelliJ IDEA. I prefer IntelliJ IDEA the most due to stability, features, plugins, speed, etc.
[Learn by example](http://www.java2s.com/)
He's talking about access between jars. I wish there was a way to specify access control between *packages* (especially nested ones), e.g. this package is a kind of "sub package" of that package (one-way access); and these two packages have access to each other's package-access methods. This is how people use packages, but the language doesn't codify it. For something to be accessible from another packages, it must be *public* (and therefore accessible from all other packages). [or is there a way to do it in one of the later versions of Java, perhaps to do with annotations?] Treating jars as a module is a solution to this problem, but at the levels of jars, a coarser-grained modularity than packages. 
I think with Java, it is a complete solution for most tasks. OK for GUIs. OK for server side development, OK performance wise, portable, language features are OK. Easy to learn, good with maintenance, not that many advanced language feature but OK. Java has had good support from Sun in terms of tools. Also support from the community. It is just a good, all around system. I think the young redditors see something Haskell and Erlang and other languages that have advanced features. But where are the tools? Libraries? Case studies. They don't exist at all. And if they do exist, they are just in the alpha stages of a project. Even the most basic libraries. Like database libraries. Does an Oracle driver exist in Haskell? DB2? MySQL. You don't need a database driver to write program. But a lot of companies and system out there rely on basic database connectivity. ---------- Other more advanced languages exist out there but Java has been solid on the components that can drive a business. And there are little OK perks. Swing isn't too bad a GUI library. There are applets, JavaFX. To me, every open source language (python, haskell, ruby, etc, etc) suffers from the same problem. They don't focus on tasks that businesses need. I remember learning about Java and Sun was pushing J2EE and that example online shopping cart application. It was simple but had a lot of components that a business would use. Python, Ruby would just barely inch towards those types of apps. Up until Django, python never really had a big web framework. Same with Ruby on Rails. 
Originally posted by Shahzad Bhatti in [this blog post](http://www.reddit.com/r/programming/comments/9uchf/cloning_java_objects_implementing_and_using_the/).
Thanks for saying what I came here to say.
Whoa, whoa, whoa. What if you aren't connected to the internet when url1 tries to resolve, but you are connected to the internet when url2 tries to resolve? In that scenario, you could get false. There's a case you're not covering.
C# has a better syntax, but Java has the libraries.
no
Let me search that for you: http://sourceforge.net/search/?words=cms&amp;type_of_search=soft&amp;pmode=0&amp;inex=1&amp;sortselect=trove__160&amp;registration_date__0=&amp;trove__225=456&amp;trove__274=369&amp;trove__160=198&amp;trove__199=426&amp;trove__13=14&amp;trove__1=534&amp;trove__6=7&amp;trove__496=499&amp;newfilter=Apply It says there are 186 of them...
That is how I feel. Java provides complete solutions. Not one thing works but oh yea, you don't have any database drivers like in other programming languages.
I was using sarcasm there
They aren't all bad.
I hate liferay. Here's the thing about liferay: you can't change permissions on a group of documents at once. It's ridiculous. One document equals 3 webpages. So irritating. I've truly enjoyed working with DotNetNuke, it's not java, but of all the CMSs with deficiencies, it has the least. It's not in Java though. Here's a [list of java](http://en.wikipedia.org/wiki/List_of_cms#Java) CMSs that I have no experience with. 
Whoa... responding 14 days later! LoL! Oh, I was just elaborating on the general consensus of Java being *oh so crappy*. Not on your comment (sarcastic or not). :-)
Sling looks promising: http://sling.apache.org/site/index.html
It does, but as far as I can tell it's only a server at the moment, so there's no actual publishing user interface. [Their doc](http://sling.apache.org/site/discover-sling-in-15-minutes.html) shows how to use curl to send RESTy HTTP requests to do the actual publishing...
You didn't search for "good" or "lightweight"... Anyway, [Magnolia](http://sourceforge.net/projects/magnolia/) looks like it might be worth a try. Possibly [Mesh](http://sourceforge.net/projects/meshcms/), too. [Daisy](http://sourceforge.net/projects/daisycms/) says it's "enterprise-grade", which I interpret to mean "a pain to set up and use", but it might be worth a look.
Ahh pity. If you have cash, Day software has a full tool built on the JCR
Not sure why this guy is being downvoted. We have zero proposals so far...
That is too funny. It is kind of interesting that Java is used for server-side technologies but few content management programs exist. E.g. like in the php world. Shrug. 
are there any good lightweight java gui applications? Great for serverside process intensive stuff, but if you want a UI...
I came here to post the same thing.... you win!
I played with Liferay for quite a while as I wanted a portal, much more than just a CMS. It was probably the best of the lot for Java-based portals. I kept going back to square one to take advantage of their latest and greatest new features (many of which were supposedly 'supported' but were virtually untested on anything other than Microsoft platforms) only to find that I was unable to successfully migrate content from one release to another. Finally giving up on Java and having a strong aversion to PHP, I moved on to Python, which also has a dearth of options. I settled on Pinax, a Django-based platform with strong integration of Django components for CMS, blogs, micro-blogs, photo galleries, forums, authentication, etc. particularly well-suited to building collaborative or social networking sites. It is lightweight, easily customizable and has a great developer community and also leverages the terrific Django community. If you've still got your heart set on Java then you might want to consider as lightweight alternatives that are not CMS-specific: XWiki, Roller or Pebble, all of which can be used to create a simple CMS. Or tailor-make something lightweight with Grails.
I find using Liferay quite painful, and the guy who's setting it up for me can't get it to run on anything but the bundled Tomcat. And he can't figure out how to migrate content, either. So I really don't like Liferay, even if customers apparently do. &gt; If you've still got your heart set on Java ... Well, the thing is I want to integrate the CMS with a Java-only tool, so it would be *much* easier if I could find a decent Java CMS.
I've worked pretty extensively with Alfresco Labs. For a quick and simple site it isn't the greatest but for more heavyweight stuff it's pretty good.. It's built on Spring/Hibernate/JSF/Postgres which I am familiar with. The one absolutely killer feature of Alfresco is it has a good web services implementation so you can use it as a content repository and pull content out of it from another JVM via a pretty good api. This is good if one is in an enterprise situation and want to distribute content and input content in an automated fashion from all sorts of different sources.
While I very much appreciate this...Why is IntelliJ such a beast? Some of the computers I do programming on I can't even run it the thing is so slow. I mean it's ok on my quadcore but damn. For software that costs so much I expected a bit more.. Don't get me wrong though, I do appreciate the open sourced community edition. 
It looks neat, but one major benefit of frameworks for me is the large community around it, and I think with the large quantity of Java frameworks that this one wouldn't really get a critical mass.
especially since it doesn't seem to do anything that e.g. Roo doesn't do, too, but without backing of a large company..
What is there in Roo that you believe Play is lacking? 1.0 has just landed and we're establishing the list of features to add/improve for the next version. (Scala support is on our short list...) 
I meant to say that you basically seem to do the same. Roo just has the backing of spring source going for it, dunno if that will be enough to succeed. Personally I'm no big fan of code generators as I have been bitten badly at times... exception for code that you don't change and just use as is. (e.g. like JavaCC or our model based code generation)..
Play! does not have code generated for you. So you don't have to mess up with the generated code. Play! is somehow different from Roo as it is a "stateless" framework, and by stateless it means that no state lives on the server. This is quite a different philosophy compared to Roo I believe.
I understand your point and I really hope too that play will have a great community. However play is very different of ROO (and I hope better). And ROO itself has no really any community neither, and isn't yet an official Spring project.
I'm no real fan of it anyway.. I hope our current project will actually be something with a (open-source?) future.. we'll see..
if "stateless" means hammering the database, no thanks.. How would you implement some kind of Wizard with Play! Don't tell me I'm supposed the intermediary steps on the client side or in the database..
Yes, in a RESTFul way the wizard state should be kept on the browser. It is not really a big deal these days. And of course any stateless architecture need a good distributed cache layer. That's why play comes with out of the box support for memcached. Take a look at the way Facebook handles millions of queries each second.
&gt; That's why play comes with out of the box support for memcached. Take a look at the way Facebook handles millions of queries each second. I'm the author of jcouchdb, btw.. another way that seems promising..
Yes couchdb is fun. So perhaps a play module for couchdb could be available ?
Anyone else seriously getting annoyed with these Java Rails knockoffs? Maybe I'm just too used to enterprisey type webapps, but I would never use this. *Maybe* Spring Roo at some point (quickly followed by a 'push in itds' to remove all dependencies of Roo so its just SpringMVC). And come on, _TextMate_ for Java development!? Even Ruby doesn't have to suffer from a lack of an IDE now with the Ruby support in NetBeans, and RubyMine/IntelliJ IDEA.
So does it run properly on the Google App Engine? I noticed a link in the documentation, but it's an error 503, and I can't tell whether you'll need to jump through hoops or what would be required. Also, does it have JDO support or just JPA? I've used JPA before, but I'm interested in starting a new project on GAE that uses JDO, since I get the impression that JDO has better dynamic querying functionality than JPA (since I don't think GAE supports JPA 2.0 and the Criteria style queries). I'm also not sure if the Play framework alleviates some of that dynamic querying functionality lacking in JPA, since it seems to have some of its own stuff built-in.
Finally, Java has a web framework
Textmate is just one of the IDE you can use with play!. Netbeans and Eclipse are of course supported : they are Java IDE.
Well yes it support GAE but we use mainly siena as persistance engine (a port of the Python GAE API in Java). I'm still not sure why google try to push either JPA or JDO on BigTable as it doesn't work ...
have you looked into using SAX/STAX implementations for accessing the documents? Very good chance for improving your processing speed if you're currently using the DOM API (i. e. Document/Node/Element).
we have lots of code that works with DOM inside one page. It is unfeasible to rewrite it, because for single page it works fast enough. In fact, it's multiple pages parsing what makes it slow. Hence the wish to split it on per-page basis.
Is it big enough for an XML database? http://www.exist-db.org 
TextMate is NOT an IDE, it is an editor with some added features that make it nicer to use than a stardard editor.
1) affect, not effect. 2) Did you look at jython?
I like Beanshell because it doesn't require learning a new language.
Groovy? It has some nice DSL like features.
+1 on jython
LUA ?
C-like - Rhino (Javascript)? Already packaged with Java 6.
Absolutely, but it's a damned slow snail. Rhino is at least an order of magnitude faster than Groovy.
no, task is too simple to employ exist-db ;), thanks. There's whole lot of documents in the huge tree on our shared storage, we need to use this storage only. No transactions / concurrent access to single document is expected.
[Thinking in Java](http://www.mindview.net/Books/TIJ/) (free ebook version available) 
1. Groovy - While it doesn't have the "impedance mismatch" of some other languages, it lacks the larger communities of #2. 2. JRuby - The amount of attention that has been given to JRuby by Sun over the past two years (and when I say Sun I mean C.O. Nutter) has been impressive. This work has been beneficial to embedded languages in general. 3. Jython 4. Scala
What *isn't* an order of magnitude faster than Groovy?
&lt;troll or="not ?"&gt;Groovy's upcoming version !&lt;/troll&gt;
I am looking at Rhino but those are good suggestions. And just a note, I was talking about embedded languages, not necessarily JVM languages.
BeanShell if you want a JVM language. Tcl if you want a nonJVM language.
I have ridden the mighty enterprise moon worm, and I have done it with Vim. Good **god** I wasted a lot of time in eclipse. I hear since the 6.5 release (or thereabouts) that NetBeans has actually stopped sucking though.
Restarting it also does the trick for me.
In previous parts we talked about Caching introduction, we have seen some implementation of the famous replacement cache algorithms, we saw comparisons between some famous caching frameworks and in this part we are continuing from part 4.
you mean urls? http://java.sun.com/j2se/1.4.2/docs/api/java/net/URL.html stick it in there (using the constructor that takes a single string) and then use the appropriate methods to access the different components. see also URLDecoder in the same package for decoding strings. [edit: changed from uri to url]
&gt; Throwing Exception &gt; Example: &gt; public void foo() throws Exception { &gt; &gt; This is just sloppy, and it completely defeats the purpose of using a checked &gt; exception. It tells your callers "something can go wrong in my method." Real &gt; useful. Don't do this. Declare the specific checked exceptions that your method &gt; can throw. If there are several, you should probably wrap them in your own &gt; exception (see "Throwing the Kitchen Sink" below.) This is generally true. However, it is often appropriate to declare a callback interface in a framework to throw Exception, and I wish that frameworks like Servlet had done so instead of inventing the meaningless ServletException. 
Why would you need this?
or empire db if you want your sql all in java.
Interesting. I welcome anything that takes away the drudgery of using Hibernate.
Interesting, and good to see the Java community revving up.
There is still little knowledge sharing in the danish Java-community. Now, with the new founded Øredev Knowledge Network that is about to change, they already held appreciated seminars and best of all: all their seminars are for free! 
I couldnt get my webapp or tomcat to load for some reason, tried everything. Went back to java 1.5 and everything worked!
Now why can't the JVM access this information at runtime?
Well it can, but it's not really encouraged. There are things like the method Class.getGenericInterfaces() and TypeParameters. But I think that the real point of generics is to reduce code clutter and allow the compiler to catch some type casting bugs at compile time. What would be gained from this information at runtime? (Unless of course you are working with reflection, which is a different topic.)
Why doesn't it work to just unzip in some folder and set JAVA_HOME and PATH and then just get started.. ? &lt;-- works on both linux and windows. Do you have to have packages provided by the rotten apple?
Don't know why you are being downvoted.
Because he's wrong. There's no way of telling setFoo(List&lt;String&gt; foo) from setFoo(List&lt;Integer&gt; foo) at runtime.
Hum ... look at this : http://alaindefrance.wordpress.com/2009/11/01/delude-java-about-generic-with-two-step-compilation/ Generics are only present at compilation time ;)
&gt;Generics are only present at compilation time In case you did but missed it, I'll point out the penultimate line in the linked article: *Bytecode contains the original generic type* Sadly, the JVM ignores this information at runtime, and the information is not available in any way, which is why drfugly's statement is incorrect. Sadly, he's still getting upvoted.
Ouch, that is scary - hopefully they give it a high priority and fix it quickly. Then, some time in 2014, Apple will release a fixed version of the JRE for OSX.
Ok so maybe I'm wrong. But I have written code where I had a class that was of type Listener&lt;SomeAction&gt; then at runtime found out what the "SomeAction" class of a Listener was. Isn't this what we're talking about? If not I'll just delete my post.
You're right and I've the same opinion. But generics doesn't totally disappear after compilation. Bytecode use Object type instead of generic type, but for compilation and reflexion, the original type still keeped (use hexdump to find this meta data). The second article describle that these meta data don't be used at runtime for processing.
That's slightly different from what the article deals with. Simple misunderstanding, your comment is still interesting - please don't delete it.
I LOL'd "CUSTOMER SUBMITTED WORKAROUND : JRockit."
I got to run this at work. We use that exact same platform.
sad but true
Why can't you just use image.getScaledInstance();?
Anyone care to "vote for this bug" (on the left side of the page)? No idea whether votes will actually get it more attention from the Java folks, but they can't hurt.
In other news, [OpenJDK](http://openjdk.java.net/).
See the text above under "AWT".
From the bug comments: &gt; Bug does occur with OpenJDK on Ubuntu Jaunty 
are there really people that are excited about that?? the iphone-appstore is sexy, because it has a lot of nice games that you can play on your phone. and an java-appstore? will have some trashy 'i'm learning to programm in java fx'-apps that noone is willing to pay for, because java-people never pay for anything. and if you can't earn money, noone will write real apps.
Can anyone explain to me for once why apple controls the availability of the JRE on OSX isn't it just to compile it and unzip and then set some environment vars and then just run..?
Not quite that simple, since they need to adapt Swing to work with the OSX GUI. There is a project called [Soy Latte](http://landonf.bikemonkey.org/static/soylatte/) which has done exactly what you suggest though, although it depends on X windows.
Sun just released 1.6.0 update 17, which seems to fix this problem. EDIT: System info: Win XP, 32 bit.
Bug is still happening for me with 1.6.0_17. It took longer -- on my box it happens in about 1 minute with _16, but took 20 minutes with _17 -- but it still happens. Just long enough to get my hopes up. :(
Weird. I ran it for over 30 minutes, twice. No bug. What OS/CPU do you have?
Ubuntu Jaunty, dual Xeon W5580s. (I filed the bug report.) With the u16 JVM, 30 minutes was enough for the bug to show up consistently on all 5 Jaunty machines that I have convenient access to. It must be rarer on the u17 JVM for some reason -- maybe it is a race condition, and u17 perturbs the timing of a relevant section of HotSpot? I will try some overnight runs to see what effect u17 has on rate of occurrence.
Did you see the bug with earlier JVM versions? I couldn't ever get it to show up on Windows.
No, I didn't try earlier versions.
I've run the test for over 30 minutes on Sun's 1.6.0_16 JVM on Ubuntu Karmic, 64 bit. No occurrence. Intel Core 2 Duo Quad core Q6700. Could it be an architecture-specific bug?
Eenteresting! I have not gotten around to trying it on Karmic yet. I thought at first that it must be the Nehalem CPUs (first two machines I saw it on have Nehalem Xeons). However, it consistently occurs on a box with dual Opteron 275s, another with dual Xeon E5345s, and a Core 2 Extreme Q9300 laptop.
Doesn't happen on Karmic for me either! (Ran for 2.5 hours.)
Tested it on Windows XP 32-bit, Intel Atom Z520. Ran for over six hours without occurrence.
Is there also a special app to play windows exe files on windows? It would be very useful. Or maybe a new plugin for my browser so it can display HTML? But the best would be a Microsoft Word addon to read Microsoft Word documents. (What the hell is that?)
I haven't ever seen it on Windows either.
Tested on Jaunty 32-bit, Intel Atom Z520, Sun JVM 1.6.0_16. No occurrence after 80 minutes.
And NetBeans was finally starting to not suck.
Shhhhhhhhhhhh! Mr. Schwartz will hear you!
JBoss seems to be loosing the ESB game against more popular engines like Mule, Service Mix and PEtALS. Does somebody know why? 
I did a little research with JBoss ESB, SOAP and WS-Security. The main problem that I encountered was the unnecessary complexity and ridiculous learning curve. Mule on the other hand, or even Spring Integration for that matter are a joy from a developer's perspective. FYI, everyone should check out the Apache Camel project. They have this unique features called a Transaction Oriented Endpoint. That's right...[The Apache Camel TOE!](http://camel.apache.org/what-is-a-camel-toe.html) 
Thanks for the info. We're starting a poject invoving an ESB, and we were considering several options. JBoss was the first one we looked at, but it seemed rather immature and without a big community around it. [Google doesn't agree about the Cameltoe](http://images.google.ca/images?hl=en&amp;client=firefox-a&amp;rls=org.mozilla:fr:official&amp;hs=eox&amp;resnum=0&amp;q=cameltoe&amp;um=1&amp;ie=UTF-8&amp;sa=N&amp;tab=wi) [NSFW]
I could not reproduce the bug after 30 minutes on my MacBook Pro. Core 2 Duo, Java: _15
Read Thinking in Java by Bruce Eckel. It used to be a free book online. It still may be, I haven't kept up with it.
Avoid "Java in a Nutshell", I bought that in an attempt to learn the language and it left me totally lost. After wasting my time with that book I learned Java from (an earlier edition of) [The Java Programming Language](http://www.informit.com/store/product.aspx?isbn=0321349806) and it was truly excellent, I highly recommend. It was the beginning of a 12 year Java programming career (so far).
How about... writing Java programs? Programming is a skill. Practicing a skill makes you better at it. Why is this such a difficult concept?
[Head First Java](http://www.amazon.com/Head-First-Java-Kathy-Sierra/dp/0596009208/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1258844544&amp;sr=8-1) is pretty solid and includes a decent introduction to the API. It's best geared toward non-developers IMO, but I picked it up after knowing Python and a little C++ and did pretty well with it. Edit: Markdown fail.
Head first java is shit. The entire Head first series is shit.
You could try a combination of Java in two semesters and StackOverflow. Are you trying to learn Java or are you trying to learn programming?
First of all are you new to programing? Do you know any other language?
Well, that's just a hugely useful thing to say. How about giving examples of why that's the case? Or, you know, recognizing that others may disagree with your assessment? If DoctorEvazan isn't a programmer by trade, he may find a lot of the tools the HF series offers useful. If you *don't* find them useful, then congratulations, but get off my ass.
I think this is a better way to learn Java than anything else, but the OP asked for books, not course recommendations.
Java in two semesters is a book. Designed for college courses over, you guessed it, two semesters. If possible however I would reccomend taking a class, getting given assignments in java and focused teaching with people you can discuss problems with is by far the best way to learn.
Start [here](http://netbeans.org/kb/trails/java-se.html) for free. Then start looking at buying some of the recommended books.
Like ArticCelt said, it depends if you know any other languages. java is pretty fun and you can do a lot of interesting things with it. your best bet would probably be to find a class to learn it from. if you know a different language already it shouldn't be too much of a jump. unless it's a non object oriented language.
Java in a Nutshell really helped me. It was the only book I read.
Carpenters need to learn carpentry before they start cutting wood and failing to make chairs.
Yes, it absolutely does depend on what languages are already known. It's very difficult to give any advice without that information.
All around, Head First Java is a pretty good book. The headfirst series isn't a good reference, so you might pair it with the pocket guide. In java this isn't really as big an issue thanks to the javadocs. There are a few chapter exercises that I personally find to screw up your mind: pool puzzle, and code magnets. I simply don't see the virtue in trying to take fragments from bad code and put them together to get the desired output. This book is great paired with Horstmann's Core Java, Volume I and Volume II. They're very nitty gritty, and Horstmann isn't the greatest at example writing. He writes everything how a seasoned java developer would so his "this is how you define a variable" example would use two threads (this is hyperbole, but is still how I feel about his style). the first one's isbn is 0132354764.
A similar question [was asked on Stack Overflow](http://stackoverflow.com/questions/75102/best-java-book-you-have-read-so-far), the recommendations there may be useful.
[Big Java](http://www.wiley.com/WileyCDA/WileyTitle/productCd-0470105542.html)
There is tonnes around, especially online as many others have indicated but if you had to buy a book i would recommend [Dietel - How to program java](http://www.deitel.com/Books/Java/JavaHowtoProgram6e/tabid/1712/Default.aspx) this is assuming you are trying to get familiar with the features of java rather then how to program o_O style. 
Agreed. One issue I've found, though - having done HFJ first and then the class route - is that the classes typically are focused on teaching you algos and data structures rather than the standard API. If you're just trying to learn how to build something enterprise-y so you can get a job, that's not very helpful in the short term (but it's immensely helpful in the long term!).
I agree about the point that HFJ isn't a good reference. I would add [Data Structures and Problem Solving Using Java](http://www.amazon.com/Data-Structures-Problem-Solving-Using/dp/0321322134/ref=sr_1_27?ie=UTF8&amp;s=books&amp;qid=1258911585&amp;sr=8-27) as a good one to have on-hand when you need to get things done.
The [Java Tutorial](http://java.sun.com/docs/books/tutorial/reallybigindex.html) from Sun is surprisingly good in its coverage of all the language features. 
i recommend : Effective Java by Joshua Bloch lots of good best-practice, do-this-and-not-that type stuff for once you get the basics down
There are any number of good books out there - I like Head First - but it comes down to a question of what teaching style works for you. The main thing is to code more than your read. Code trivial problems, and then complex ones, and then wipe out your code and start over. I'd highly recommend compiling and running from the command line at first , then switch to JGrasp until you're comfortable, and only then then switch to a full IDE. 
I love this book too, especially the exercise of the book. Lots of fun could be found while doing the exercise. I think it's really good for beginner.
I like the [Core Java](http://www.amazon.com/Core-Java-TM-I-Fundamentals-8th/dp/0132354764/ref=sr_1_2?ie=UTF8&amp;s=books&amp;qid=1259072965&amp;sr=1-2) books by Horstmann and Cornell.
Eclipse also has the Visual Editor Project which seems to have everything offered in GUIDE.
64M is low if using a reflection-heavy framework. I have had to set it as high as 512M.
lol no, I usually hang out on mailing lists/forums for the libraries/frameworks I actually use. Java Saloon is just kind of a dumping ground of noobs.
I have two Eclipse environments - one for just the internals of my plugins (code generation) and another for the user interface (diagram editors). That way if I am only developing the internals, I don't need to load up the user interface every time I run a JUnit Plugin Test.
I think all they really need is a Closure class with a run() (or invoke(), whatever) method. When you use the magic syntax {} an anonymous Closure class gets created with run() overridden.
If you prefer to learn by doing, the workbooks here are very useful. http://www.cl.cam.ac.uk/teaching/0809/ProgJava/ They are how I learnt to program in Java (Some stuff won't be relevant unless you are at Cambridge University). They mainly handle basic Java and Swing. The second course at http://www.cl.cam.ac.uk/teaching/0910/FJava/ covers client / server relationships, serialisation and multithreading in a similar way. They could be useful in conjunction with a book like Thinking in Java, the third edition of which is a free eBook.
you need to explicitly call txt1.setText("" +somechangeablenumber ) to change the text whenever the number changes value.
haha. finally works. thanks 
i did the ("" + some_changeable_number) just to cast the int to a string. idk if it is necessary or not.
These kinds of silly posts make reddit.com/r/java cry. Go to JavaRanch instead. They delight in answering this crap.
groovy and grails, lol.
..by taking out the carriage returns! &lt;/obvious joke&gt; 
Did devdaily just open a bunch of popups. What a no-no.
Popups? What are you using, IE5?
I am using FF and I have no popups but they keeping coming, aaahhh.
Odd, I'm using FF and didn't get a popup. I never get popups.
I'll second you on those books. The material is presented quite well, and there are good code examples of the book concepts that can be downloaded for free.
My thoughts exactly. I think it would be a great waste to see it get neglected, now that Oracle is entering the picture.
Quick screenshot http://www.flickr.com/photos/39482219@N06/4187960254/sizes/o/
...and now it looks like a big old 503 Service Temporarily Unavailable. Seems like SUN caught on.
Yeah, that looks hacked all right.
Whatever the cause may be, it's going to be an interesting story
You would think they would fix it by now.
Great, now I got "Red eye to Miami" stuck in my head.
wtf. All day? It is still broken. This is so bad.
Apparently, forums.java.net is down. Java.net is down. Wtf.
&gt; Does the OP have any other sites/forums they can recommend for me? You can probably learn a lot on [Stack Overflow](http://stackoverflow.com/questions/tagged/java)
Although I'm not familiar with JGrasp, I second this... learn command line first. Then move to something like BlueJ (or JGrasp). 
A member of JTraining is facing cosnaming exception. He is doing a lookup, while doing a lookup it gives him javax.naming.NameNotFoundException[root exception is org.omg.CosNaming.NamingContextPackage.Notfound]
 I am using Opera 10 and I also got a pop-up.
why does this have a video? :S
I've found this site to be very useful in my Java learning escapades: http://www.dickbaldwin.com/toc.htm
Dunno why you were downmodded, you had a good point. Basically, the URL class absolutely sucks.
I tried using maven on some home projects. I quit when I looked at my first week of development time and about 25% of it was just mucking around with maven's bizarre behaviors and bad documentation, not to mention how slow it made the build. I like ant because if I need something like building a jar or deploying to a server it takes just a few minutes to implement it and I know what it's doing. In a way Maven is a bit like EJB 2.1. 1. It's generally slow and adds a ton of time to builds and deploys. 2. It's needlessly complex for most situations. 3. If you don't do everything exactly the way the system wants you to it becomes a major PITA that requires a full odyssey through the byzantine wonders of the source code and documentation to get it to change one little option for something that would have taken 30 seconds in ant. 4. It's badly documented and specified. 
Started off well, then I read this: &gt;If you don’t want to write your own build tool, then you should use Rake. *Rake is the best existing build tool for Java projects*. *Rake provides a bunch of standard methods to perform common build tasks*, and anything else can be quickly *implemented in Ruby*. Writing build scripts in a *real programming language* gives Rake a huge advantage over other tools. There are other advantages, too, but none are as important. From the bolded sections sequentially: * Surely the best tool is what fits your project, as is being said in the previous paragraph. * Ant does this, and it does it very well. And it's been around longer. * Why would you want to extend in Ruby when your project's written in Java? * The writer goes on about a "fits best for you is what's best" then makes sweeping black &amp; white statements. [Edit] Now I read more: &gt;If you lack the courage to quit, then use Ant. Ant is the second best existing build tool for Java projects. Although inferior to Rake, Ant is still a great build tool. Ant is mature and stable, it is fast, and it comes with a rich library of tasks. Ant makes it possible (but not at all easy) to script rich, complex builds processes custom-tailored to your project. WTF? How confused is this person? Stop it. Lack the courage to quit to start using a tool written in Ruby when you're a Java shop? Surely the most appropriate tool is what's relevant and fits your team the best: if your FOSS build tool is written in Java then you can extend it with the skillset you have instead of having to employ a Rubyist because you're a zealot like the writer. &gt;So, write your own build tool, or else switch to Rake, or fight to switch to Rake, or quit and go some place where you can use Rake. And if all else fails, use Ant until you can find a new job somewhere else that uses Rake. wat &gt;Maven builds are an infinite cycle of despair that will slowly drag you into the deepest, darkest pits of hell (where Maven itself was forged). You will initially only spend ten minutes getting Maven up and running, and might even be happy with it for a while. *But as your project evolves, and your build configuration grows, the basic pom.xml that you started with will prove inadequate.* That's a symptom of your project growing, not Maven's fault. This problem will occur with Ant, oh-so-amazing-one-size-fits-all-ruby-is-awesome-f*ck-everyone-else Rake, and the kitchen sink you bought that was too small to hold all your dishes. Christ. I could go on. But I have work to do. I am really sick of this "black and white"/"one size fits all" attitude towards technologies, programming, and pretty much everything else. Can't people understand that "black and white" solutions are the exception and that to understand what's best for your situation you must understand all corners? That is, get all the facts before making an opinion. Wait, shit, if I make that opinion I have to understand that whoever wrote this may not be aware of his/her pitfalls and I should therefore cut them some slack. Oh man cyclic logic. My head's exploding. Jeeze!
For anyone still interested, run /usr/lib/jvm/java-6-sun-1.6.0.15/bin/ControlPanel then go to Advanced -&gt; Java Console -&gt; check Show Console -&gt; restart Firefox. Now when every you run an applet, the console window will open.
Here is just a small intro to recursive methods; ... basically, a recursive method is a method that calls itself. e.g. see my method for the x'th value of the Fibonacci sequence
Interesting piece. But I somewhat disagree with the loop variables naming (listing 3 vs 4). He says longer names are better. However, I think the length and descriptiveness of variable names should correspond with the depth and size of their scope. Class members, or more so global variables, should have fairly descriptive names. For a small nested loop, a single letter variable is fine, as a person reading the code only has to mentally track it momentarily. What he describes is probably more like "the Java way" but I don't think that necessarily makes it a better approach. 
I don't mind standard itterator variables like i,j,k but being able to iterate over a generic list is handy and I will give it a better name than i,j,k. 
Good article. An interesting subtext about the culture of convention that Java has developed. It's better than most other development languages that I've worked with .(Perl, C, C++ etc)
Listing 12 is not only dialect-afflicted, but simply wrong because it overwrites equals without a corresponding hashcode implementation.
A very interesting approach for an article - but you can tell C/C++ is not the author's first language. For example, the piece about accessing private variables in C++ doesn't sound right to me. Contrary to what the author believes, two different C++ compilers let me do the following without any problem: return this-&gt;x == f-&gt;x; 
I had a similar path. I started out really anti-maven (and there are still deep problems with how easily it can corrupt its repository) ... but once I figured out how straightforward it is to write a mojo, and embraced the basic lifecycle, it really is powerful to use and straightforward to extend. We are just now teasing out the last remaining bits of ant, having ported a fair amount of custom tasks to pojos. But man, they gotta fix the repository corruption issues! And by all means, run your own local nexus repository.
Yeah, because there's no other way than either naming your variable 'nc' or 'totalNumberOfColumnsInQuery'.
Within 24 hours or so, Oracle CEO Larry Ellison will share his vision for the Oracle-Sun Microsystems business combination. But before the Oracle webcast kicks off, industry rivals and partners are offering a key piece of advice to Ellison: Don’t mess up Sun’s Java programming language. Here’s the scoop — including perspectives from Red Hat’s middleware team. 
Thanks for this. I'm an old schooler when it comes to J2EE so I've only now just begun catching up to SpringSource dm server and hibernate. 
its fixed now
Try going to [Google Hosting](http://code.google.com/hosting/) and just search for "java"; you will get heaps of hits. Perhaps search for "java &lt;your favourite idea or technology&gt;" and see if you can find a project that interests you :) I've got a small Java project too, [iacleaner](http://code.google.com/p/iacleaner), though it's pretty technical and the insides are a mess.
tetris would be a good one, if this is too hard let me know. i got some easier ones
Find a problem you face often and use Java to solve it. Like doing Sudoku? Write a Sudoku solver. Analyse logs often? Write a log file analyser. Or are you looking to join an existing open source project? In that case, go to SourceForge and search for "java".
[Greenfoot](http://www.greenfoot.org/about/screenshots.html) is a nifty Java project. It makes simple graphics and object interaction really easy. Good for making basic games and simulations.
log file analysers .. that's what i started with - writing a class for holding an ip address not knowing that there is something like java.net.URL and funny things like that were a pretty good start for me ;)
If you go on #freenet on irc.freenode right now they are trying to figure out how to tokenize Chinese characters for their search engine. Its (apparently) an interesting problem that is quite self-contained. If you volunteer on the channel, I'm sure they'd welcome your contribution.
With Google Code, Sourceforge, github and many others, Kenai was not really needed. They should have focused on many other things in NetBeans rather than the now useless Kenai plugin. What about better Trac, git and Mercurial integration?
Is Kenai only a project hosting site? I've never heard of it before. Doesn't sound like it'll be missed.
I did like the Kenai integration... You're right, though, it's now about as useless as teats on a bull.
DarkStar going [goodbye](http://www.projectdarkstar.com/forum/?topic=1540.msg10407;topicseen#new) as well. 
don't want to sound like a downer but...who cares?
definitely wont, just like most of sun's projects
In my experience, they're of more use when you're doing client work. They can be used to somewhat say to the client (or potential client) by your firm "Hey, this guy knows what he's doing and won't waste your time and our proof is because he's certified in it." A lot of people I work with, myself included, feel that our "certification" was our college degree in our respective field, but usually, as is my case, your company will reimburse you for going ahead and getting them, so I figured I may as well. For your future job interviews, more importantly than listing a bunch of certifications, be confident in what you're good at and be able to answer questions (there will be questions, sometime very tricky ones) regarding what you say you're good at.
They discuss this issue on one of the most recent episodes of the Java Posse podcast. I remember them saying that employers generally look for experience first, education second, and certifications last. Certifications are better than nothing but certainly don't make up for a lack of education or experience. One of the posse members noted that certifications test your knowledge of corner cases and not your ability to create good working software. An experienced programmer can still learn things from a certification test, but on a relative scale of effective training, certifications are pretty low. That said, I passed one of these tests and I'm now able to tell people I'm a Sun Certified Java Programmer. There were a lot of tricky questions on the test and you have to be able to think in java to pass it. It will take time to study for and of course, the test costs money. I got the certification with the intention to one day switch careers. I have a bachelors in English but I'd rather play with computers. I'm coding http://starcraft.homelinux.org/VODTracker/#v in Java using GWT. Once I finish the project, I'll point to that and to my certification and hope someone hires me. I'll tell you how it goes. At the moment, I'm content to keep my current job and program as a hobby. 
A couple of my friends went down the certification route. Those that got them before a job said that the certifications weren't relevant as the job still required coding during the interview process and those that took it once in a job (paid by the employer, of course) found it to be a worthwhile exercise merely because it enforces a bare minimum of Java knowledge and taught them a number of things that they overlooked during their time at university.
I like certs - They show a potential employer that you're keen enough to finish what you start, and they show potential clients that the team is keen. I wouldn't bother with a SCJA, I'd go straight for the SCJP. I've got my SCJP and my SCWCD. They've opened a few doors for me. 
For me, if you had worked significantly within an Eclipse project on eclipse.org, you would be hired on the spot.
From a learning perspective: if certifications test language knowledge, then they won't help you as much as learning "big picture" OO stuff (try the book OOSC) or getting a little experience making design decisions on a small-medium project (hopefully your university will force you to do this soon) or learning an important toolkit or library (doesn't matter much which one, you're after experience). Generally, I think employers pick you because you have interesting experience on your CV. If you're being some careerist, it's most effective to start putting this interesting experience on your CV. I'm not an expert.
I'm hiring for a few java developer positions at this moment and I pass right over the java certification line on the resume. I'm much more interested in real world experience relevant to what I need. For a junior position I'd rather see interesting projects you worked on. But I'm no expert on hiring. Others may do it differently.
I don't care about certifications when hiring. I'd rather see your work. Do some work that's publicly available on open source projects, then tell me about that in your interview. Be excited and proud. Accept criticism as a "happy to learn" scenario. Open source projects show how you work with a team that's distant and harder to communicate with than an office team.
Experience is the best thing you can have on your resume and the best thing to talk about.
Certs are only useful when you have little to no real-world experience.
Oh snap, I always thought that site was awesome. Reddit is a smallish world.
no.
no
Employers want experience, not a timestamp of certification. Your best bet would be to find an internship during the summer, and ideally part time during term. I no longer live in the bay area, but I have a couple connections there...PM me if you'd like to be put in touch with a company. 
Since there can be many errors, a custom error page can come in handy. With any Java (EE) compliant web container, it isn’t all that difficult … you just need to know how!!!
I'm a CS grad, but I have seen numerous job opportunities for those with domain experiences in natural sciences. I would suggest you get experience with c/c++ and matlab in addition to java, and this would open up job opportunities for you to write or maintain programs for biology related projects.
So how would a self-taught newbie help him/herself stand out for those entry level positions?
&gt;I have some larger projects in mind that I want to be able to pursue down the road which keeps me excited about all of this. I know there's a lot of value in contributing to open source projects but a lot of the ones available are still very intimidating to me. If you're interested in your own project, I'd suggest you pursue it. Even if the headway you make is minor and you reduce scope down very low, it's a way to get your hands dirty and it helps in a technical interview. My strategy for job interviews has always been to try to move the line of questioning into a domain that I'm familiar and passionate about. The best way that I've found to do that is to, at the appropriate time, describe some of my hobby projects. More times than not the rest of the technical interview will be about technical aspects of some project. This technique can backfire and you can come across as evasive and somewhat crazy if you do it wrong, but if you're remotely subtle and can show your interest, it does wonders for making you stand out in a technical interview (IMHO). Once I started to actually *do* the interviewing, I always make a point to inquire about personal projects that aren't on the CV.
You have to have something to show for you self teaching. I would highly recommend that while learning you contribute to open source projects, build a website, write some apps that meet your needs, write a game, write plugins or whatever gets you excited and keeps you going. If you have zero work experience you can list these projects as if they were, since they are the closest thing you have. Many college graduates list projects they worked on for classes, self study, or summer internships -- no reason a self taught individual can't do the same. These projects can show that you are passionate about coding, that you finish what you start, that you have interests in various areas or technologies, that you are a self starter, you're into learning new things, etc... All great traits for an entry level position. This next tip is off topic, but another thing we look for in a coder is job history. If you change jobs every year, that's a huge red flag. It takes a lot of time and resources to get a new engineer up to speed on our tools, technologies, and processes. This is particularly true for entry level positions where the new hire stands to gain a lot while the employer stands to gain less. The employee is learning on the job, soaking up knowledge, getting trained in all kinds of new and exciting technologies. It's very common for people to jump from job to job increasing their salary and knowledge base and building out their resume along the way. We skip right over these people when hiring. It's just not worth it unless we firmly believe the new hire will make a good faith effort to stick with us. 
Thanks! &gt;I would highly recommend that while learning you contribute to open source projects, build a website, write some apps that meet your needs, write a game, write plugins or whatever gets you excited and keeps you going. This was the path I was expecting to follow. I'm in a mostly unrelated field at the time, but I've ignored my incredible interest in computers and computer programming for too long. I think the economy is giving me a reason to jump into it.
Looks pretty slick. I might give it a try this weekend. Maybe follow the latest rend and see how long it takes to make a reddit clone.
Yes they are!! Not just for the certification value, but also knowledge value.
FTA: "For me, the joy of being a computer scientist is spending long hours writing code for various algorithms. The problem solving keeps my mind alert, and the computations keep going in my head even in sleep. All the utilities in Java 7 take much of that joy of programming away" Why is he coding with Java then? He should learn C or ASM. Plenty of joy there... And of course, all the fun in the programming is to solve *abstract and complex* problems like finding the path of a File object...
I came here to say exactly this, please tell me this guy is joking!
Create and run a new thread which does a socket.accept(), essentially waiting until it receives something (assuming timeout on socket is infinite). Your main thread continues running. Easy.
This guy is joking. He must be. The joy of being a computer scientist is that when you have solved a problem *once*, you have solved it *forever*. Code re-use, people.
I agree with the new thread bit. Except it's not socket.accept(...), as only the server does that. Instead, use socket.getInputStream().read() or one of the similar methods. read() will block the listening thread until data becomes available, i.e. when the server sends it. I believe that's what you meant?
I've completely dismissed him as an idiot due to this article.
Hmm, I've been doing something similar to that, except I used getInputStream() to build a BufferedReader object. Instead of using getInputStream.read(), I've been using BufferedReader's readLine() method. This is the first line in the loop of my client's run() method. When I run it this way, I can successfully pass a message back and forth between client and server, but once the client hits the readLine() line again, it flips out and throws a runtime error. Do you think I should be using InputStream's read() method instead? Could that be what I'm doing wrong?
Well, I assumed the OP used UDP; sorry for the wrong assumption. Thanks for TCP clarification. Although, it would perhaps seem that UDP would be better suited for this? No need to leave a TCP connection open for hours at a time just because a server *might* send something sometime.
No, I'm not sending video data or anything like that. I need to ensure integrity. I'm sorry, I know it's a very strange set-up. If I had my way, I'd be doing it the "proper" way. But I wasn't the first to work on this project, and so I have to work/interface with roughly decade-old code that cannot easily be redesigned.
What a crappy article. He mentions a few things in passing, doesn't explain anything, and makes a bad joke (if it is a joke).
Does anyone really think we're going to have java.lang programmers who aren't competent to develop in other packages?? I mean, really?
Nice article. Looks like [Jambi](http://qt.nokia.com/about/news/preview-of-final-qt-jambi-release-available) is a [community project](http://qt.gitorious.org/qt-jambi) now.
The author brings of some very good points. It think it will be interesting to see what Oracle does now that they have Java on their hands. I'm hoping for the best, but don't expect much to happen. If Java is to really be "reborn" as the author hints at, it's going to need to do a better job of fighting the negative adoption momentum against it (largely at the hands of .NET) and the large amount of ill will it has been receiving from the Computer Science/Programming world. That last one's going to be hard, because once someone's mind has been made on a topic, you pretty much can't pry them from that opinion.
I've evaluated OSGi for a small testbed project. From everything I've seen and read, both in OSGi itself and online, it's a neat little system with one Achilles heel: it allows circular dependencies. This isn't an issue if your projects are small and you can manage the dependencies yourself, but becomes a big issue when your systems grow large and suddenly your components deadlock for no apparent reason (like Eclipse plugins do on a routine basis). The ability to hot-swap implementations at runtime, however, is a huge benefit. We ended up choosing a much more lightweight componentization system: the ServiceLoader interface that's baked into the JDK. You can simply designate an implementation to an SPI in a file in your META-INF directory, and use a controller to poll the classpath for implementations that are themselves hotswappable at runtime. It's not as standardized as OSGi, but it serves our needs. Stack Overflow has some good info on both OSGi and the ServiceLoader: http://stackoverflow.com/questions/1959991/when-to-use-serviceloader-over-something-like-osgi 
If you are majoring in Computer Science at any university, you're more than likely to be taught Java instead of anything else.
I learned Java from Big Java, so I second this.
It'll definitely be missed. It was the only free, public host that offered JIRA for defect tracking. (Codehaus also offers JIRA, but they don't accept close to all comers, whereas anyone could open an account on Kenai.) 
I've never used curses, but you might have some trouble getting a console-based game running nicely in Java. (Colours and the like may be bizarre.) You might be better off writing a simple AWT frame with a listener for keys? Don't know. The limit of my Java game experience has all been basic sprites rendered on a AWT canvas. Edit: Also, [this is a good reference](http://www.brackeen.com/javagamebook/) for writing a game in Java. Once again it's based on sprites, but you might get some helpful information on polling/etc that way.
You may want to consider incorporating some amount of python since it includes a nice [curses](http://www.amk.ca/python/howto/curses/) [library](http://docs.python.org/library/curses.html) by default. If going all python doesn't work for you, then [jython](http://www.jython.org/) may be of interest. You could split up the project such that the direct terminal manipulation via curses is handled by the python code, and everything else such as game logic is handled by your java code.
Check out JADE. I don't think it is done, but it is being developed in java by a guy who knows roguelike games: http://www.adom.de/jade/index.php3
I actually was planning the same thing at one point, but I gave up because I was distracted by other things. I believe the curses library I looked into was Java Curses. http://sourceforge.net/projects/javacurses/ Incidentally, I did have problems with using Eclipse because I couldn't figure out how to get it to open a console window. Of course this was many moons ago, and I didn't really have much experience at that point. Good luck!
So, have you tried this: http://sourceforge.net/projects/javacurses/ I haven't used it, so I can't vouch for it, but that might be a start. If not, then [here's the search](http://www.google.com/search?q=curses+libary+in+java) I used. It was just the first link on that list. That said, I have a question: Why do that? Curses and terminal emulation games were invented as the means to an end in a more limited environment. It wasn't an option to use sprites on a VT100 terminal after all (that I know of and without hacking the ROM or character set in a specific terminal - please don't bother going there!). How about making a roguelike in Java that supports tilesets instead? That way, you can provide a default / basic tileset which even uses bitmaps of ASCII characters if you like, but then once you define that, it will be modifiable by others down the road. Then you would also not be constrained by terminal limitations. Of course, that also means you'll have a higher resource requirement in that an actual window will need to be available via X or the like, but what is that to anyone anymore? Obviously, it's nothing to you because you already use Eclipse. It's not like you can run Eclipse over a terminal session! As for the game itself - what are your gameplay/design ideas that make this interesting? Just being curious. :)
To get a game like this running in a native console, you WILL need to use a library which makes jni calls out to a native library to do the console manipulation. However, you could create a gui and do custom font rendering to simulate a console. 
This is excellent advice. And while you're at it be sure to separate the display logic from the game logic entirely. The game logic renders the current map, and then some pluggable display code queries a viewport of that map. Today it could be javacurses, tomorrow sprites, and a web based interface next week. Let me know when it's done.
Don't use JNI, use [JNA](https://jna.dev.java.net/). 
It is.
The reason I initially have gone towards the idea of a curses is because of the Rogue Basin articles that were all saying curses were the way to go. On the [Java page](http://roguebasin.roguelikedevelopment.org/index.php?title=Java), it talked about no native console support. Because of that, I looked into a couple of libraries, excluding JCurses for some odd reason, and with that, never have gotten the game off the ground. I think the tilesets idea is the way I'm going to go - I'll re-make the ASCII characters as 8*8/16*16 sprites, colored of course, and from there it'll all work. I am probably going to be distributing through .jars, since I know of no other way at the moment. Everything, including the image files I would use, would be self-contained. As for the game itself, I'm doing a couple things that are slightly unorthodox. First, all items are actually rings, which then "transform"/are manifested into the actual weapons/armour/spells/scrolls/potions. No weight restrictions, a max number of holdable rings at ~100 and max rings worn at a time as 10 (10 fingers, 10 rings). Second, all classes have the ability to destroy and rebuild rings. This'll allow for characters to do things like take apart a sword ring that has a +1 modifier, and add a -300 flaming mace's flaming ego so that you now have a flaming sword +1. An entire class is built around the idea of this creation/destruction. And also, it's set in a pseudo-post-apocalyptic-medival-futuristic world with demons, angels, and zombies. Cliched, right?
The separation of logic is probably the way I will go. The biggest problem I would have with that idea ATM though is the fact that I would need to write some code for other graphical output possibilities later, something I might not be able to look ahead to the future for.
I actually just looked into this. I got all the references right, but the window didn't pull up for some reason.
I am currently trying to avoid learning a new language, since I am taking AP Comp Sci and have a feeling I might get messed up and completely screw up on a test &gt;.&lt; Afterwards, I am going to look into Perl, Python, Ruby (on Rails(?)), and C++, just so I sort of know them all.
This looks like it is an engine for ADOM. While I do like ADOM, I'm not particularly fond of some parts of it. While the engine is nice, I probably will not use it, since I am more concerned about writing my own engine and working from there.
why the hell do you want to do it in console? Do a graphical tile thing. Jeez! re eclipse. eclipse is great. Best ide in the world. 
Cool - thanks!
Whenever you go from an (Object, Object) to a more specific map using primitives, you will _always_ see a performance gain. Case in point: I wrote an (int, int) hashmap that was significantly faster. I'm actually surprised their performance is so marginal.
JRockit is excellent.
For those that have never used it (or heard of it)... why?
We use [GNU trove](http://trove4j.sourceforge.net/) for primitive-based collections.
Speed for one thing. Try replacing Sun's javac with JRockit's javac when compiling some large project. The jrockit console for another. You can see what's going on inside the jvm. The HotSpot team has gotten much better now that it has jvisualvm with the non-instrumenting memory profiler.
I agree with you on jrockit. The only thing I am hesitant about is Ive experienced more hard crash issues with jrockit than I have with sun jvm.
&gt;Profit^H^H^H^H^H^H ^HSharing^H^H^He your work with the community. I fixed that for you.
i am looking to do something of this in my free time shoot me a message if you want to collaborate 
You can probably find hosting companies that promise more, but it doesn't mean they will actually deliver more. In the low-end hosting space (and you can't get lower than free,) the bigger the numbers in a hosting plan, the more oversold their servers are. I suggest you test EATJ and see if it is solid enough for your project.
Ha yes, you're probably right. I'll just try if it suits my project first then. If someone eventually does recommend something, then I'll see if it's worth the trouble. Thanks.
use 1.8 instead of 9/5. 9/5 is truncating to 1, since (int)9/(int)5, the result gets cast to an int too. public class Test { public static void main(String[] argv) { int tempInCentigrade = 33; System.out.println( (int)Math.round(tempInCentigrade*(1.8) + 32) ); System.out.println( (int)Math.round(tempInCentigrade*(1) + 32) ); System.out.println( (int)Math.round(tempInCentigrade*(9/5) + 32) ); } } Yields: 91 65 65
Yes. If you write 9 or 5, I believe the Java compiler considers it to be an integer literal, and thus it uses integer math for 9/5. I think another possibility is to do 9.0/5.0 (which should treat it as a double, I believe).
Yep, or you could even do 9d/5, which will cast the 9 as a double, which will cast the result as one too.
yup that'll work. You only need to put one integer in double format, i.e. both 9.0/5 and 9/5.0 should work IMO
Awesome, thanks so much.
You should also be able to use something like this: public int getFahrenheit(int tempInCentigrade) { int properRound = (int)Math.round(tempInCentigrade*(9f/5f) + 32f); return properRound; }
damn do they use this question for every intro class? I still remember this from one of my tests haha
you might want to just try multiplying by 9, then dividing by 5 like this: public int getFahrenheit() { int properRound = (int)Math.round(tempInCentigrade * 9 / 5 + 32); return properRound; The order of operations in Java will make sure that the temperature is multiplied, then divided, and only then will 32 be added.
To clarify a point. In programming numbers fall into two different categories. decimal fractions and whole numbers. fractions are: 3.14, 1.2, 3.6 whole numbers are the counting kind: 1,2,3,4,5,-1, 0 In Java, They are represented by floats and integers respectively. (They are also represented by double and long which are larger representations of floats and integers but all you need to worry about is int and floats for the moment.) If you want to retain the fractions then you have to use floats. The easiest way of doing this is by explicitly defining the decimal: 9.0f / 5.0f will result in 1.8f (the 'f' is way of marking that it's a float fraction) where as when you divide whole numbers you get: 9/5 will result in 1. 
Thank you very much, that helped clarify a lot. I'm sure I'll be having more questions throughout the semester. This subreddit appears to be a great resource. 
You are better off going to stackoverflow.com to ask questions like this, it is designed for asking questions and for searching for questions other people have asked previously.
Ah, okay. I'll definitely keep that in mind.
If you know about wrapping, that might be the way to go. Instead of having properRound as an int initially, make it a double. From there, you can calculate anything you want. There is also a one-line possibility you could try: public int getFahrenheit() { return (int)(Math.round(tempInCentigrade * ( 9 / 5) + 32)); } That'll produce the same results without needing to create a new local variable.
You're a fucking imbecile. How does your medicine taste?
I'm fairly certain that it was in K&amp;R.
JSF 1.0 was fine as long as you used [Facelets](https://facelets.dev.java.net/) for the view layer, [PrettyFaces](http://ocpsoft.com/prettyfaces/) for handling GET requests and [RichFaces](http://www.jboss.org/richfaces) for AJAX. I didn't like JSF at first, but it really grew on me. You just have to do things the JSF way and not try and fight it by reverting to the Struts way of doing things. It's very easy to build a UI to edit a series of complex objects all on one screen. It's a perfect fit for a back office admin applications in which people have to stay logged in for a long amount of time and do complicated tasks with lots of screens.
It's saying that it requires a variable on the left side of the equals, but instead it found a value, the value which results from multiplying a by 4.
We considered that, and it may very well be that, but I probably should've mentioned that the cursor seems to be at the multiplication operand (the ^ lines up under the \* in "a \* 4 = b"), so my professor had his suspicions. I just realized the formatting didn't come out properly, ha. I wonder if I can fix that...
I see, I see. So the compiler in this case actually does the operation, while in the other eclipse compiler it checks syntax first. Thanks, guys.
So what will this offer over MarkdownJ? Once it's finished, that is.
I've not used MarkdownJ myself so I can't really compare them properly. That said... MDJ works now - which is pretty major for me since I'm currently integrating it into a production(ish) application, without any issues so far. Also, as it's based on MarkDownSharp (as used on stackoverflow.com) I'm more confident in the MarkDown implementation than with MarkdownJ (even if it does deviate from the "official" spec a bit).
&gt; MDJ works now So does MarkdownJ, which means it's really hard to see any difference between the two.
&gt; it's really hard to see any difference between Fair comment :) Choice is not a bad thing though - I don't think the existence of another project devalues either.
&gt; Choice is not a bad thing though Not at all. Just wanted to know. There are some things MarkdownJ doesn't do that I'd quite like to see, and so if JMD did those I'd have a reason to switch. But as it is it doesn't seem that way.
If the utility class isn't maintaining state, and doesn't need to be extended, then I would usually make it a static method. I would probably concern myself with refactoring my code if I were in your situation, though. Look at what they are inheriting and why, and maybe consider a design pattern that fits.
Of course, the problem is that a static class is never removed once it is created, so this can introduce memory problems if you are caching lots of information. Utility classes, whilst unavoidable, should be avoided where appropriate. I am pretty sure utility classes should not be using inheritance, and if you are - you should not be using static!
Are you sure you need to use inheritance at all? This is probably the first mistake you are making. Does the base class exist _mainly_ to give subclasses access to some utility methods? If so, this is an abominable design. So bad in fact, that I used a thesaurus to find an appropriate adjective to describe how bad it is. When to make a method static? Probably almost never, unless it's a factory method for constructing the object. 
K.I.S.S.
what is the state (aka, the data)? If my method does not actually change the state, I create static methods without thinking about it.. This is convenient because many classes can go there for a quick transform or, maybe, a lookup. If the state (aka data) changes, you really must go for an instantiation of a class and look at the API flow-through to get the right input/output.
Don't write static methods, you can't override them. It isn't OOP. Don't write utility classes. It is a code smell.
Let this be a lesson. It's bad when you have a monstrosity of a class to deal with. You make a bad situation worse when you *subclass* that monstrosity, because now, as you see, you are stuck. Once subclassed, that parent class becomes fragile - changing it is liable to break all kinds of code that depends on it. And this dependent code, being subclasses, know all kinds of non-public details of your monstrous class - they get their little fingers in there and now you can't change anything without breaking their little fingers. If you have some ugly code, rule #1, don't subclass it! Fix it first. So, your first step is to un-subclass the monstrous class. How? Well, step#1, remove that "extends" phrase. duh. Now, you have all kinds of compiling problems. So, step #2, change the constructors of your subclasses to take an instance of the monstrous class and store it to an instance member, and then fix the compiling problems by using this instance member to make calls to. Anything non-public that your subclasses were referencing will still not compile - you can fix them by adding a public access point to the functionality they were calling. Now, think of the monstrous class as simply an access point to the various functions within it. Think about making that monstrous class implement an interface and what methods that interface would define. Now, imagine it implements not one interface, but many, because, undoubtedly, some of those methods in the monstrous class are more closely related than others. You can probably define a bunch of different *concerns* the class is handling, and for each different concern, define a different interface. Make the monstrous class implement those interfaces. Now, your subclasses - change their constructors again to take an instance of each *interface* you defined. Store them to instance variables and again change the places within to call the appropriate interface. Now, your subclasses are decoupled from the monstrous class. So now, you should try to make individual classes that implement the individual interfaces from the code in the monstrous class. You can replace the parts in the monstrous class that you rip out with a single method - something like get*SomeImplementor*() and it returns the class that implements that interface. Your monstrous class is still the goto place to get all this stuff, but you have moved the implementations out. Some of these class will still need to collaborate, and so some of them will take instances of the other interfaces in their constructors. Your monstrous class becomes the place that knows how to wire up each implementing class. Users of the monstrous class can now use it like a service warehouse to grab the object they need, and then make these calls on that object. And now, after doing all this, you have nothing different than what you had before, but adding new functionality should be a little more clear, and less fraught with problems since everything is mostly decoupled.
&gt; If my method does not actually change the state, I create static methods without thinking about it So do I, and I make them _private_ methods.
(To answer some comments in this thread) I fail to see the big problem with static methods. What you really should avoid is mutable static data. If you have a purely functional method, i.e. a method which only depends on constants and other (static) purely functional methods, I don't see why it would be wrong to make it static in Java. public static int max(int a, int b) { return (a &gt; b) ? a : b; } 
The end result here is pretty much exactly where I want to be, but I'm a little cloudy on some of the middle steps. To be honest, I didn't pay too much attention to how interfaces work in high school, so I guess now's a good time to bone up on their implementation. You've given me a lot to think about, but unfortunately I'm sneaking in refactorings amongst the testing I should be doing, so I probably won't get to actually making these changes for quite some time. :( But thanks.
BTW, this is a classic anti-pattern: the [God object](http://en.wikipedia.org/wiki/God_object). The only thing I'd add to speek's excellent answer is that all the refactoring that he's having you do will be much easier if you have a full battery of unit tests to check your code against.
It's the tests themselves that are the victims (BaseTest is the "God object" in this case), so not exactly. :(
I would agree. A lot of times, the problem with static methods is the use of the singleton pattern, which is almost always an anti-pattern. However, it's just so damn convenient. The problem arises when something you originally setup as a singleton now needs to work in two different contexts with slightly different logic (ie, some configuration), and now you can't do it cause it's a singleton. I think static functional methods (ie once that change no state and just return some result) are pretty ideal little beasties. Sadly, you can't do everything that way simply.
&gt;Of course, the problem is that a static class is never removed once it is created, so this can introduce memory problems if you are caching lots of information. Well, that seems to imply some state being preserved, which would go against Feuilly's suggestion. Just the class itself isn't not taking up significant memory.
bwahaha, the Devil's in the *tests*
&gt;It isn't OOP. OOP is not synonymous with good design. They overlap, but each encompass areas the other doesn't (I'm trying to evoke a venn diagram here, capiche?).
Being test classes is complicating the issue, because, buried under all the crap that shouldn't be sub-classed, there is probably a core that should be, and I can't know what the boundaries of that core are from here.
It isn't OOP if you don't create objects that have state or behavior. By having a bunch of static methods, you could create class files with state or behavior. Static methods are mostly procedural relics.
&gt;Static methods are mostly procedural relics. The *implication* being that they are a bad way to do anything, but you haven't said anything to convince me of that. Like I said, not all OOP is good design, and not all good design is OOP.
That is messed up. What exactly does your base test do that needs 2K lines of code over what, say, JUnit does for you? Or DBUnit, or HttpUnit, or Spring Test, or Selenium...? You're going to need a good book to wrap your head around OOD. [This one](http://www.headfirstlabs.com/books/hfooad/) is a decent one to start with. 
I don't know who is voting you down since you are the only person here who seems to know how to program. Static methods --&gt; almost always lame. Utility classes --&gt; you're doing it wrong. Don't make me call Joshua Bloch to come and bitch-slap the rest of you.
And I guess you can, because everyone else does these things. It took me 10 years of programming in Java (for example) to learn that I was doing a lot of things wrong.
They are bad because either: A) you have a 'utility' class that you don't instantiate full of 'methods' to which you pass objects as parameters. This is the OOP version of the mistake where you put on your underwear on outside of your pants and don't realize it until you get to work/school. The method should probably be inside one of one of the objects you are passing to the static utility class method. B) You are calling static methods on an _instance_ of an object which is absolute nonsense. C) You have 'utility' methods associated with a class that you also instantiate. See A, but this time you're going to work with your underwear on your head and no pants at all. That's how incoherent your class is. Static methods are pretty much only acceptable if they are private or if they construct something. This is a good rule of thumb even if there are some rare exceptions (see java.lang.Math, but this is really an artifact of primitive numbers in Java).
If you anticipate that a method may need to work differently in different contexts, then you should of course not make it static in the first place. However, a singleton can actually save you here. If you implement your singleton properly with a (static) factory method, then you can change it into non-singleton without breaking the clients. 
This is not an explanation of anything. You simply described what static methods look like and then declared it bad. Can you not get at *why* you think it is bad?
I suppose that is true. I've run into it where some library has made something a singleton, and I want multiple instances of it.
I could think of a couple reasons to declare a class final: 1) it's supposed to be immutable or 2) if you have other code that depends on this class working exactly the way you've implemented it. In the case of immutability, you want to make sure that instances of the final class don't change in value once they've been created. This is important for objects that will be used as hash keys, for example. If your supposedly immutable class weren't final, someone could come along, subclass it, give your code something you expect to be immutable, then change it under your nose. The second reason is sort of a superset of the first problem. You can (hopefully) trust the code you write. If your final class implements something really important, you might not want to allow anyone to subclass it and (perhaps maliciously) override the behavior you depend on. Of course, you sacrifice flexibility for safety here.
One reason I can think of is simple efficiency. If you know a class won't need to be subclassed and you declare it final, the compiler and runtime environment can make certain optimizations that give a slight advantage. There's also the issue of security. From [this article](http://journals.ecs.soton.ac.uk/java/tutorial/java/javaOO/final.html): &gt; Security: One mechanism that hackers use to subvert systems is to create subclasses of a class and then substitute their class for the original. The subclass looks and feels like the original class but does vastly different things possibly causing damage or getting into private information. To prevent this kind of subversion, you can declare your class to be final and prevent any subclasses from being created. The String class in the java.lang package is a final class for just this reason. The String class is so vital to the operation of the compiler and the interpreter that the Java system must guarantee that whenever a method or object uses a String they get exactly a java.lang.String and not some other string. This ensures that all strings have no strange, inconsistent, undesirable, or unpredictable properties. 
you use the keyword final to indicate that you are done with it... All jokes aside, the reason String and StringBuilder class are declared final is that they are used internally by the compiler therefore there are correctness and performance reasons. For example, extending incorrectly the append method could break a lot of code since it is used everywhere you append 2 strings.
Could be for the same reason they do it for String, security. It may be that StringBuilder is so important to the functionality or the compiler that the compiler must ensure that it gets a StringBuilder and only a StringBuilder. Purely conjecture, but I know that is why it is done for String.
Also, if you really are desperate for that appendLine method you could always make your own StringBuilder http://kickjava.com/src/java/lang/StringBuilder.java.htm
You could also write a wrapper for StringBuilder and forward all your calls to it, then add an appendLine method to that.
[Here's](http://renaud.waldura.com/doc/java/final-keyword.shtml#classes) a few decent points. I'd say the main reason in my view is that allowing subclassing potentially breaks encapsulation. If you have a sensitive class like a login utilities class, you might not want anyone subclassing that and accessing methods you thought were protected (available to all class objects but not available to the world). The final keyword is a useful defensive programming tool in these cases.
Indeed you could. I figured using the original source would be a little quicker.
In the end I wrote a wrapper as I figured *that* would be the quickest, but also that I then benefit from updates to the original library code. Thanks for both your suggestions.
Right, performance issues did seem to be one valid if (IMHO) slightly weak reason for it. I still don't really understand how my overriding the append method could possibly break code that doesn't know about my subclass. As I understand it; the theory is I (or someone) could pass my subclass into methods expecting the original class, still seems a bit weak to me. Additionally, why not just make the 'append' method final (and indeed all of the methods in the StringBuilder class final) but still allow me to ADD to them, I cannot see how this could break any existing code.
Thanks for the enlightening reply. As mentioned below I agree with the performance reason, though still find it to be a bit weak. Not that I have any great solution to that.
The compiler does some internal magic and coverts String concat "+" to StringBuilder append to optimize the code. Obviously if you override the append and break it you can have some weird results at runtime. They went with the safest route. I don't think it is a good idea (at least in java) to overwrite jdk classes. Might as well just make a helper class that does what you want instead. It's not javascript.
A ha, okay the "fragile base class" problem now seems to be the first use of a final class that has it's roots in software engineering. The other explanations such as performance and security seem (to me) to be more related to the compiler implementation and deployment rather than simply a language based reason. Thanks for the reply. For others following the "fragile base class" problem means that a class which is then subclassed by third parties may break the third party code if the base class is updated in some way.
Hi thanks for the reply, do you have any (hopefully succinct) examples of how subclassing can break existing code?
As I posted above, if (like String) the compiler uses it, then it has the possibility to introduce malicious code into the compiler.
Thanks again, sorry if I'm "just not getting it" but I still don't understand why it wouldn't work just to make the 'append' method final? That surely wouldn't break any compiler magic that converts String concat "+" into StringBuilder append. Additionally if it is really converting String concat "+" then surely the compiler is generating (code which generates) its own instances of a StringBuilder object and hence it won't be an instance of a subclass. 
Hi, I must confess I don't understand the security argument but I'm not very knowledgeable about security so I'm perfectly willing to accept that making a class final is more secure. On the topic of seeing at as a language feature as improving code, I guess what I was hoping for, example wise, was something such as: &gt; If the base class has two mutually recursive methods and you override one of them then it will break the other. Note that this doesn't seem to be a valid example for my case (I can't think of one which is why I'm asking ;)) because then you could just make the two mutually recursive methods as final rather than the whole class (although arguably you may wish them to be able to override both but not one of). thanks
You don't need to inherit to get this. Make a MyStringBuilder class. It holds a StringBuilder. tell eclipse to add a delegate method for every public method in the StringBuilder instance member. Now add your method and implement accordingly. Done. This is called composition, and it's often preferable to subclassing.
One of the things I like about Emacs is that it has built in function advice into elisp. We implemented ECB entirely through function advise. http://ecb.sourceforge.net/screenshots/index.html It's pretty un-democratic to flat out prevent people from overriding your class. It's their VM. If they want to totally break or totally improve your framework that's up to them.
Hi thanks for your reply, I never knew about this ability of eclipse and I can see how that is sometimes preferable to subclassing. This does seem to have the slight disadvantage that if the "inherited" class (in this case StringBuilder) gets an upgrade in the form of an additional method then our composed or delegate class doesn't automatically benefit from this, unless eclipse automatically notices that you originally made MyStringBuilder a delegate class and does the obvious. It also means your code is a bit obfuscated in that in the simple subclass it's blatantly obvious what you've added without a bunch of extra delegate definitions (which are easy enough to ignore of course). thanks.
You could simply provide a getBuilder() method that returns the wrapped StringBuilder, if you like. If I were you, I would only implement the methods of interest to me at the time, and if the need arises for access to more, add them then. 
See my answer for similar question [here](http://stackoverflow.com/questions/1450250/oop-why-would-anyone-want-to-mark-a-class-as-final-sealed/1456447#1456447) In short words, if you inherit from some class and override some methods, your code may be broken after base class in changed in next JDK version, because overridden methods may be called in different situations, or have different semantics, or even not exist. Even if you don't override anything (you just don't want, or methods are final), just add methods - it may be broken if in next version methods with same signature are added to base class and your code is called when you don't expect it. In order to make it safe to inherit from some class, author of base class often has to design for inheritance and document what you can and what you can not do in the subclass. If the author does not want to do this - it's safer to make class final. Final classes are used more often in libraries rather than in application code, because different people control code in app and library and it's harder to coordinate changes.
&gt; The compiler does some internal magic and coverts String concat "+" to StringBuilder append to optimize the code. Obviously if you override the append and break it you can have some weird results at runtime. Obviously you can not. Compiler translates str1+str2+str3 to (new StringBuilder()).append(str1).append(str2).append(str3).toString() that has nothing to do with any other class, including MyStringBuilder, whether it inherits from StringBuilder or not. Overriding append or any other method can indeed break code, but only that uses sub class. And it may happen not because of compiler magic, but because of possible changes in base class in newer version.
I think one of the issues is that sometimes it is really not their VM.
I strongly recommend that you buy and read the book "Effective Java", it explains this quite nicely, along with many other things about how to write good Java code. Its called "encapsulation". When writing code, its important to try to write it so that users of your classes cannot break them by misusing them in some way. If it is possible for users of your classes to subclass them, then it makes it a *lot* more difficult to anticipate every way the class might be misused. The String class is a great example. This class contains an internal array of chars, and String's encapsulation guarantees that this array will never be modified. This means that, for example, when you get a substring of a string - it is not necessary to copy the old array of chars, the new string can re-use part of the old char array, which saves time and memory. But, if String wasn't final, a subclass might be able to modify the char array, which could cause all sorts of nasty problems since String's encapsulation is now broken.
&gt; All jokes aside, the reason String and StringBuilder class are declared final is that they are used internally by the compiler therefore there are correctness and performance reasons The reason String is declared final is because it must be immutable, so that (for example) String.substring() can reuse the original String's char array. This would be true regardless of whether String was used internally by the compiler, or if it was just another class.
Because [Inheritance is evil, and must be destroyed](http://www.berniecode.com/writing/inheritance/).
looks awesome, I'm glad this is moving. At a quick glance, one thing I wish was different is that it would be an attribute on a method instead of a base class. @ForkJoinRecursion public void sort(...). I'm not sure how deep into the bytecode an AOP advisor can rewrite, but syntactically it would be really nice if it were possible.
I've been a Java programmer for 15 years and a programmer for over 30 years. Don't subclass API classes, use them in your own classes. You need to rethink the problem. Don't fight the language you are using, work with it.
That's bullshit. Try and write a InputStream decorator without subclassing InputStream. Absolutes are worthless. Every tool has its use, knowing when to use it is the trick.
I think we can all figure out that API classes which are deliberately designed and documented for subclassing and/or public + abstract are okay for inheriting. For the record though, the design of java.io is pretty lame. InputStream should be an interface.
Good luck convincing anybody that doesn't already know this.
Thanks good example, although I'm still not quite sure I get why the internal array of characters cannot be made private rather than the whole class final?
I'm coming from the Haskell world so I can at least sympathise with this view 
If you want your own MyStringBuilder to be a drop-in replacement for StringBuilder, you should make it implement the interfaces of StringBuilder (Appendable and CharSequence). Then you will get noticed if something is added to the interfaces. (Not all public method of StringBuilder is part of any interface, but that's due to bad design of StringBuilder.) 
Thanks I hadn't thought of that (being a bit of Java newbie).
Making every field private and every method final would have a similar effect, but declaring the class final is easier and less error prone.
good point, would you say then that the semantics of a 'final' class should be that all of its current elements are final but that you can still subclass it? Or should there be a further keyword for that?
Consider methods called by the constructor. If you call super() in the subclass, but change a method "super()" calls, you can easily put the superclass into an illegal state. This is really the main use for final. For a specific example with a class, scroll through [this page](http://www.artima.com/forums/flat.jsp?forum=106&amp;thread=161019). 
That's exactly what I've done thanks. It has a kind of "fighting against the language" feeling to it though.
Hi thanks, this was exactly my thinking. In general the most convincing argument seems to be the possible non-backwards compatible changes to the base class which is I think what you're mentioning. Elsewhere seems to be called the fragile base class problem.
thanks, starting to see a bit more why it might be reasonable, the example does seem a bit contrived but I guess I can imagine how it might be used to at least gain some insight to how something is used. 
You'll get yourself in trouble if you think that inheriting is "going with the language" and composition is "fighting against the language". I would say, 2/3 times, composition is the better approach than inheriting.
&gt;@Nonnull(when=When.UNKOWN) Gee, that's useful.
String class in Java in final. Imagine, if JVM cannot guarantee the behavior of String objects across JVMs, Java is finished. Hence some classes (String, Math etc.) are final to guarantee a behavior.
Do static methods take more memory?
Nice.
Blah. Blah. Anyone who really cares about this?
TMI
In a technical context, there can never be TMI. 
Both points are valid in the abstract. However, in real life, doggedly refusing to write utility classes forces you to use a circuitous alternative to maintain OO purity. I think it would be fairer to say that utility classes should be a last resort. That is, first look hard to see if there is any natural place to the code, before spinning it off into a utility class. But to ban utility classes entirely is just not pragmatic advice.
compiling speed or VM speed?
VM speed. I don't know if the jrockit javac is actually different from Sun's javac.
I have no idea what your requirements are but look into regular expressions in Java. This should do something close to what you are looking for: &gt;String input = "The quick brown fox jumps."; &gt; &gt;Pattern pattern = Pattern.compile("(\\w+)"); &gt; &gt;Matcher matcher = pattern.matcher(input); &gt; &gt;System.out.println(matcher.replaceAll("&lt;span&gt;$1&lt;/span&gt;"));
100% agreed. &gt; enabling developers to deploy apps to both real and virtual environments. When was that ever an issue? To me, it is just a PR stunt. 
and it still sucks!